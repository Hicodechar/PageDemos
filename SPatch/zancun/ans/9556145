
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,02/14] mm: thp: create new __zap_huge_pmd_locked function. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,02/14] mm: thp: create new __zap_huge_pmd_locked function.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168825">Zi Yan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2017, 4:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170205161252.85004-3-zi.yan@sent.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9556145/mbox/"
   >mbox</a>
|
   <a href="/patch/9556145/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9556145/">/patch/9556145/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D2CE360236 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 16:14:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C536F26419
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 16:14:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B9DC526785; Sun,  5 Feb 2017 16:14:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5956726419
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 16:14:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752276AbdBEQOk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 5 Feb 2017 11:14:40 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:58152 &quot;EHLO
	out1-smtp.messagingengine.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751862AbdBEQOd (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 5 Feb 2017 11:14:33 -0500
Received: from compute3.internal (compute3.nyi.internal [10.202.2.43])
	by mailout.nyi.internal (Postfix) with ESMTP id C0634206C5;
	Sun,  5 Feb 2017 11:14:32 -0500 (EST)
Received: from frontend2 ([10.202.2.161])
	by compute3.internal (MEProxy); Sun, 05 Feb 2017 11:14:32 -0500
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=sent.com; h=cc
	:date:from:in-reply-to:message-id:references:subject:to
	:x-me-sender:x-me-sender:x-sasl-enc:x-sasl-enc; s=mesmtp; bh=053
	O5yef4BdMWLZ1KwESNC5puE4=; b=fE1r3fF2Y2edoEHohsmiF0LrKmeXgbXh6dt
	SJ2aqsrb8BFxHm8463XkWlbbZKJVTDdOpJHI2uNhvw7XhExTfcN1UMH06+s7iXwE
	C8vcI1Vd5bQVY89dnA1ftMnxF2uW17WZXSFluwVFQNzo4aiFOoLS8YTS+7H4by7O
	sDcK3kX8=
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-sender:x-me-sender:x-sasl-enc
	:x-sasl-enc; s=smtpout; bh=053O5yef4BdMWLZ1KwESNC5puE4=; b=AOfOC
	M3MtpVV/GEnrqbYPEECnXLkr74GZ3h24HUDeXx6QQLNRsccaezBNfxTS5DNnfUi0
	41QMwC2vzIglqeV+M9cqBT+PzMpuyOoGu5t0WL2bR3W00BElIf2plZgExGp6ajc+
	T75Z91tH2/V5rpZoOeGrEn3lGsXtOfTasuEe30=
X-ME-Sender: &lt;xms:aE-XWHe7MPQzri-KqmVdvy_UGO3ASMIWVYLlvjTxLWoin4O2P-7Rhg&gt;
X-Sasl-enc: apF0HCGX5lrL1dLpkT8A669Jy3ynOwThX5XpsYEoIV/B 1486311272
Received: from tenansix.rutgers.edu (pool-165-230-225-59.nat.rutgers.edu
	[165.230.225.59])
	by mail.messagingengine.com (Postfix) with ESMTPA id 647A32443E;
	Sun,  5 Feb 2017 11:14:32 -0500 (EST)
From: Zi Yan &lt;zi.yan@sent.com&gt;
To: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	kirill.shutemov@linux.intel.com
Cc: akpm@linux-foundation.org, minchan@kernel.org, vbabka@suse.cz,
	mgorman@techsingularity.net, n-horiguchi@ah.jp.nec.com,
	khandual@linux.vnet.ibm.com, zi.yan@cs.rutgers.edu,
	Zi Yan &lt;ziy@nvidia.com&gt;
Subject: [PATCH v3 02/14] mm: thp: create new __zap_huge_pmd_locked function.
Date: Sun,  5 Feb 2017 11:12:40 -0500
Message-Id: &lt;20170205161252.85004-3-zi.yan@sent.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170205161252.85004-1-zi.yan@sent.com&gt;
References: &lt;20170205161252.85004-1-zi.yan@sent.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168825">Zi Yan</a> - Feb. 5, 2017, 4:12 p.m.</div>
<pre class="content">
<span class="from">From: Zi Yan &lt;ziy@nvidia.com&gt;</span>

It allows removing huge pmd while holding the pmd lock.
It is prepared for future zap_pmd_range() use.
<span class="signed-off-by">
Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
---
 include/linux/huge_mm.h |  3 +++
 mm/huge_memory.c        | 27 ++++++++++++++++++---------
 2 files changed, 21 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/huge_mm.h b/include/linux/huge_mm.h</span>
<span class="p_header">index 2036f69c8284..44ee130c7207 100644</span>
<span class="p_header">--- a/include/linux/huge_mm.h</span>
<span class="p_header">+++ b/include/linux/huge_mm.h</span>
<span class="p_chunk">@@ -26,6 +26,9 @@</span> <span class="p_context"> extern struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,</span>
 extern bool madvise_free_huge_pmd(struct mmu_gather *tlb,
 			struct vm_area_struct *vma,
 			pmd_t *pmd, unsigned long addr, unsigned long next);
<span class="p_add">+extern int __zap_huge_pmd_locked(struct mmu_gather *tlb,</span>
<span class="p_add">+			struct vm_area_struct *vma,</span>
<span class="p_add">+			pmd_t *pmd, unsigned long addr);</span>
 extern int zap_huge_pmd(struct mmu_gather *tlb,
 			struct vm_area_struct *vma,
 			pmd_t *pmd, unsigned long addr);
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index cd66532ef667..d8e15fd817b0 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1590,17 +1590,12 @@</span> <span class="p_context"> static inline void zap_deposited_table(struct mm_struct *mm, pmd_t *pmd)</span>
 	atomic_long_dec(&amp;mm-&gt;nr_ptes);
 }
 
<span class="p_del">-int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="p_add">+int __zap_huge_pmd_locked(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		 pmd_t *pmd, unsigned long addr)
 {
 	pmd_t orig_pmd;
<span class="p_del">-	spinlock_t *ptl;</span>
 
 	tlb_remove_check_page_size_change(tlb, HPAGE_PMD_SIZE);
<span class="p_del">-</span>
<span class="p_del">-	ptl = __pmd_trans_huge_lock(pmd, vma);</span>
<span class="p_del">-	if (!ptl)</span>
<span class="p_del">-		return 0;</span>
 	/*
 	 * For architectures like ppc64 we look at deposited pgtable
 	 * when calling pmdp_huge_get_and_clear. So do the
<span class="p_chunk">@@ -1611,13 +1606,11 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 			tlb-&gt;fullmm);
 	tlb_remove_pmd_tlb_entry(tlb, pmd, addr);
 	if (vma_is_dax(vma)) {
<span class="p_del">-		spin_unlock(ptl);</span>
 		if (is_huge_zero_pmd(orig_pmd))
 			tlb_remove_page_size(tlb, pmd_page(orig_pmd), HPAGE_PMD_SIZE);
 	} else if (is_huge_zero_pmd(orig_pmd)) {
 		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));
 		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);
<span class="p_del">-		spin_unlock(ptl);</span>
 		tlb_remove_page_size(tlb, pmd_page(orig_pmd), HPAGE_PMD_SIZE);
 	} else {
 		struct page *page = pmd_page(orig_pmd);
<span class="p_chunk">@@ -1635,9 +1628,25 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 				zap_deposited_table(tlb-&gt;mm, pmd);
 			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);
 		}
<span class="p_del">-		spin_unlock(ptl);</span>
 		tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);
 	}
<span class="p_add">+</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="p_add">+		 pmd_t *pmd, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = __pmd_trans_huge_lock(pmd, vma);</span>
<span class="p_add">+	if (!ptl)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	__zap_huge_pmd_locked(tlb, vma, pmd, addr);</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock(ptl);</span>
 	return 1;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



