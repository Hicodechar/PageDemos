
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1,03/11] mm: thp: add helpers related to thp/pmd migration - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1,03/11] mm: thp: add helpers related to thp/pmd migration</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 3, 2016, 7:41 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1456990918-30906-4-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8488541/mbox/"
   >mbox</a>
|
   <a href="/patch/8488541/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8488541/">/patch/8488541/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 7CCADC0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Mar 2016 07:42:43 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8E29B20035
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Mar 2016 07:42:42 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 85B0F2025B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Mar 2016 07:42:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756756AbcCCHmV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 3 Mar 2016 02:42:21 -0500
Received: from mail-pa0-f42.google.com ([209.85.220.42]:35050 &quot;EHLO
	mail-pa0-f42.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756616AbcCCHmN (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 3 Mar 2016 02:42:13 -0500
Received: by mail-pa0-f42.google.com with SMTP id bj10so10181548pad.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 02 Mar 2016 23:42:13 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=FAPL7603P8rzDXQMjgvLeV6rnRLOfL5Mqi/cKST0qvc=;
	b=g5oH1x5qtoWir2c72pASuPklyODlqAAm1XKxYWUzyxghY1VbatOezoIEgZyG5HFhAs
	ChpB+HL6Dc6eRCPHt9+JAGiM8uhkYuTb0EC2Oi+g3pkR7BZeo3L4nExUWFUZM2vJP4uC
	V4eN56pWUx1MEGXDKJZOkV9EgJYhbz0MJjkHDePAdzALySXhwrbJW51+WRQE7JnrDf68
	hUkQWr9lxrAKUWOGEdr1XYP7e1HA/n5lKTtSBa2gR65wANjdWJ2eO5nzSXMehmOUBoee
	OtboNMcOCVKJoFPplakVzIlHmytb5HxNYUUMxorEoCOQP4dnvhr0Xu3LHKXCy/ZTnn8O
	NS/g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=FAPL7603P8rzDXQMjgvLeV6rnRLOfL5Mqi/cKST0qvc=;
	b=gWf8bnB+ZHgqWeHKIN2HKpl24iDG+t+z+BlChWXfjVDGnwMbimR54/yXwvf5NT6AjM
	I+fGoG9PXgnJwpfIbhI4Nuk7uD6OfN38wYNFvBzsHGgNLu6GZwsjfLPfcFEHYhvom8ha
	9Joyw4GMEeABMU6JHoX5d6BBaw5Qe7AL8mo3TV9dBqWgBluaGbekSYZ05tMhj4rtk0qC
	T/a+2jVXaDWCS8q5QN78Fwhwmfz20IHf6oAJAqyO6ckJ73IecyV3hbJk4vY3fEEd/6Jv
	k9+E41Fj3VUUTDNrVummcKWeoWOTmbuIC183ZduCqjUPH6JCdm3UwFqcKvXVlJuz1yl3
	44rg==
X-Gm-Message-State: AD7BkJIAFSxFCS37j+3ld76jHhks3io0+KcLEU3xYdCW2KnTp4f3oH+TH4hvnhlhLvLthA==
X-Received: by 10.66.144.4 with SMTP id si4mr1795122pab.0.1456990932607;
	Wed, 02 Mar 2016 23:42:12 -0800 (PST)
Received: from www9186uo.sakura.ne.jp (www9186uo.sakura.ne.jp.
	[153.121.56.200]) by smtp.gmail.com with ESMTPSA id
	by3sm58161135pab.39.2016.03.02.23.42.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 02 Mar 2016 23:42:12 -0800 (PST)
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: linux-mm@kvack.org
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Pavel Emelyanov &lt;xemul@parallels.com&gt;, linux-kernel@vger.kernel.org,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;
Subject: [PATCH v1 03/11] mm: thp: add helpers related to thp/pmd migration
Date: Thu,  3 Mar 2016 16:41:50 +0900
Message-Id: &lt;1456990918-30906-4-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1456990918-30906-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
References: &lt;1456990918-30906-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - March 3, 2016, 7:41 a.m.</div>
<pre class="content">
This patch prepares thp migration&#39;s core code. These code will be open when
unmap_and_move() stops unconditionally splitting thp and get_new_page() starts
to allocate destination thps.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
---
 arch/x86/include/asm/pgtable.h    | 11 ++++++
 arch/x86/include/asm/pgtable_64.h |  2 +
 include/linux/swapops.h           | 62 +++++++++++++++++++++++++++++++
 mm/huge_memory.c                  | 78 +++++++++++++++++++++++++++++++++++++++
 mm/migrate.c                      | 23 ++++++++++++
 5 files changed, 176 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - March 3, 2016, 9:25 a.m.</div>
<pre class="content">
Hi Naoya,

[auto build test ERROR on v4.5-rc6]
[also build test ERROR on next-20160303]
[cannot apply to tip/x86/core asm-generic/master]
[if your patch is applied to the wrong git tree, please drop us a note to help improving the system]

url:    https://github.com/0day-ci/linux/commits/Naoya-Horiguchi/mm-page-migration-enhancement-for-thp/20160303-154610
config: arm-at91_dt_defconfig (attached as .config)
reproduce:
        wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=arm 

All errors (new ones prefixed by &gt;&gt;):

   In file included from mm/vmscan.c:54:0:
   include/linux/swapops.h: In function &#39;swp_entry_to_pmd&#39;:
<span class="quote">&gt;&gt; include/linux/swapops.h:217:2: error: empty scalar initializer</span>
     pmd_t pmd = {};
     ^
   include/linux/swapops.h:217:2: error: (near initialization for &#39;pmd&#39;)

vim +217 include/linux/swapops.h

   211	{
   212		return swp_entry(0, 0);
   213	}
   214	
   215	static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)
   216	{
<span class="quote"> &gt; 217		pmd_t pmd = {};</span>
   218	
   219		return pmd;
   220	}

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - March 3, 2016, 10:40 a.m.</div>
<pre class="content">
On Thu, Mar 03, 2016 at 04:41:50PM +0900, Naoya Horiguchi wrote:
<span class="quote">&gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; to allocate destination thps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable.h    | 11 ++++++</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           | 62 +++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 78 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/migrate.c                      | 23 ++++++++++++</span>
<span class="quote">&gt;  5 files changed, 176 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; index 0687c47..0df9afe 100644</span>
<span class="quote">&gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; @@ -515,6 +515,17 @@ static inline int pmd_present(pmd_t pmd)</span>
<span class="quote">&gt;  	return pmd_flags(pmd) &amp; (_PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Unlike pmd_present(), __pmd_present() checks only _PAGE_PRESENT bit.</span>
<span class="quote">&gt; + * Combined with is_migration_entry(), this routine is used to detect pmd</span>
<span class="quote">&gt; + * migration entries. To make it work fine, callers should make sure that</span>
<span class="quote">&gt; + * pmd_trans_huge() returns true beforehand.</span>
<span class="quote">&gt; + */</span>

Hm. I don&#39;t this this would fly. What pevents false positive for PROT_NONE
pmds?

I guess the problem is _PAGE_PSE, right? I don&#39;t really understand why we
need it in pmd_present().

Andrea?
<span class="quote">
&gt; +static inline int __pmd_present(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return pmd_flags(pmd) &amp; _PAGE_PRESENT;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_NUMA_BALANCING</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * These work without NUMA balancing but the kernel does not care. See the</span>
<span class="quote">&gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; index 2ee7811..df869d0 100644</span>
<span class="quote">&gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; @@ -153,7 +153,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt;  					 ((type) &lt;&lt; (_PAGE_BIT_PRESENT + 1)) \</span>
<span class="quote">&gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_SHIFT) })</span>
<span class="quote">&gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt;  #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })</span>
<span class="quote">&gt; +#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt;  extern void cleanup_highmap(void);</span>
<span class="quote">&gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="quote">&gt; index 5c3a5f3..b402a2c 100644</span>
<span class="quote">&gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h</span>
<span class="quote">&gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="quote">&gt; @@ -163,6 +163,68 @@ static inline int is_write_migration_entry(swp_entry_t entry)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +extern int set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +		struct mm_struct *mm, unsigned long address);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern int remove_migration_pmd(struct page *new,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="quote">&gt; +	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="quote">&gt; +	return __swp_entry_to_pmd(arch_entry);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !__pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline int set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +				struct mm_struct *mm, unsigned long address)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int remove_migration_pmd(struct page *new,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return swp_entry(0, 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	pmd_t pmd = {};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return pmd;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_MEMORY_FAILURE</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern atomic_long_t num_poisoned_pages __read_mostly;</span>
<span class="quote">&gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="quote">&gt; index 46ad357..c6d5406 100644</span>
<span class="quote">&gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c</span>
<span class="quote">&gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -3657,3 +3657,81 @@ static int __init split_huge_pages_debugfs(void)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  late_initcall(split_huge_pages_debugfs);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +int set_pmd_migration_entry(struct page *page, struct mm_struct *mm,</span>
<span class="quote">&gt; +				unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	pte_t *pte;</span>
<span class="quote">&gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; +	pmd_t pmdval;</span>
<span class="quote">&gt; +	pmd_t pmdswp;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	if (!page_check_address_transhuge(page, mm, addr, &amp;pmd, &amp;pte, &amp;ptl))</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	if (pte)</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="quote">&gt; +	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="quote">&gt; +	pmdswp = swp_entry_to_pmd(entry);</span>
<span class="quote">&gt; +	pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="quote">&gt; +	set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="quote">&gt; +	page_remove_rmap(page, true);</span>
<span class="quote">&gt; +	page_cache_release(page);</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +out:</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int remove_migration_pmd(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt; +			unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; +	pmd_t pmde;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +	unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; +	if (!pgd_present(*pgd))</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; +	if (!pud_present(*pud))</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; +	if (!pmd)</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +	pmde = *pmd;</span>
<span class="quote">&gt; +	barrier();</span>

Do we need a barrier under ptl?
<span class="quote">
&gt; +	if (!is_pmd_migration_entry(pmde))</span>
<span class="quote">&gt; +		goto unlock_ptl;</span>
<span class="quote">&gt; +	entry = pmd_to_swp_entry(pmde);</span>
<span class="quote">&gt; +	if (migration_entry_to_page(entry) != old)</span>
<span class="quote">&gt; +		goto unlock_ptl;</span>
<span class="quote">&gt; +	get_page(new);</span>
<span class="quote">&gt; +	pmde = mk_huge_pmd(new, vma-&gt;vm_page_prot);</span>
<span class="quote">&gt; +	if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; +		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="quote">&gt; +	flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="quote">&gt; +	pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="quote">&gt; +	set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="quote">&gt; +	flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; +		mlock_vma_page(new);</span>
<span class="quote">&gt; +	update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; +unlock_ptl:</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +out:</span>
<span class="quote">&gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="quote">&gt; index 577c94b..14164f6 100644</span>
<span class="quote">&gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c</span>
<span class="quote">&gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="quote">&gt; @@ -118,6 +118,8 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		if (!ptep)</span>
<span class="quote">&gt;  			goto out;</span>
<span class="quote">&gt;  		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);</span>
<span class="quote">&gt; +	} else if (PageTransHuge(new)) {</span>
<span class="quote">&gt; +		return remove_migration_pmd(new, vma, addr, old);</span>

Hm. THP now can be mapped with PTEs too..
<span class="quote">
&gt;  	} else {</span>
<span class="quote">&gt;  		pmd = mm_find_pmd(mm, addr);</span>
<span class="quote">&gt;  		if (!pmd)</span>
<span class="quote">&gt; @@ -252,6 +254,27 @@ void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	__migration_entry_wait(mm, pte, ptl);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +	if (!is_pmd_migration_entry(*pmd))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="quote">&gt; +	if (!get_page_unless_zero(page))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +	wait_on_page_locked(page);</span>
<span class="quote">&gt; +	put_page(page);</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +unlock:</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_BLOCK</span>
<span class="quote">&gt;  /* Returns true if all buffers are successfully locked */</span>
<span class="quote">&gt;  static bool buffer_migrate_lock_buffers(struct buffer_head *head,</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123921">Naoya Horiguchi</a> - March 3, 2016, 4:15 p.m.</div>
<pre class="content">
On Thu, Mar 03, 2016 at 01:40:51PM +0300, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Thu, Mar 03, 2016 at 04:41:50PM +0900, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; &gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; &gt; to allocate destination thps.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable.h    | 11 ++++++</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt; &gt;  include/linux/swapops.h           | 62 +++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/huge_memory.c                  | 78 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/migrate.c                      | 23 ++++++++++++</span>
<span class="quote">&gt; &gt;  5 files changed, 176 insertions(+)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; &gt; index 0687c47..0df9afe 100644</span>
<span class="quote">&gt; &gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; &gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="quote">&gt; &gt; @@ -515,6 +515,17 @@ static inline int pmd_present(pmd_t pmd)</span>
<span class="quote">&gt; &gt;  	return pmd_flags(pmd) &amp; (_PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +/*</span>
<span class="quote">&gt; &gt; + * Unlike pmd_present(), __pmd_present() checks only _PAGE_PRESENT bit.</span>
<span class="quote">&gt; &gt; + * Combined with is_migration_entry(), this routine is used to detect pmd</span>
<span class="quote">&gt; &gt; + * migration entries. To make it work fine, callers should make sure that</span>
<span class="quote">&gt; &gt; + * pmd_trans_huge() returns true beforehand.</span>
<span class="quote">&gt; &gt; + */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hm. I don&#39;t this this would fly. What pevents false positive for PROT_NONE</span>
<span class="quote">&gt; pmds?</span>

Nothing actually if we use __pmd_present alone. __pmd_present() is now used
only via is_pmd_migration_entry() combined with is_migration_entry(), and
is_migration_entry() should return false for PROT_NONE pmds (because
is_migration_entry() requires characteristic bits SWP_MIGRATION_READ|WRITE,
and they aren&#39;t compatible.) But I admit it might not be robust enough.
<span class="quote">
&gt;</span>
<span class="quote">&gt; I guess the problem is _PAGE_PSE, right? I don&#39;t really understand why we</span>
<span class="quote">&gt; need it in pmd_present().</span>

Yes, _PAGE_PSE in pmd_present() makes this branching harder/complicated.
Some simplification seems necessary.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Andrea?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; &gt; +static inline int __pmd_present(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return pmd_flags(pmd) &amp; _PAGE_PRESENT;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_NUMA_BALANCING</span>
<span class="quote">&gt; &gt;  /*</span>
<span class="quote">&gt; &gt;   * These work without NUMA balancing but the kernel does not care. See the</span>
<span class="quote">&gt; &gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; index 2ee7811..df869d0 100644</span>
<span class="quote">&gt; &gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; @@ -153,7 +153,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt; &gt;  					 ((type) &lt;&lt; (_PAGE_BIT_PRESENT + 1)) \</span>
<span class="quote">&gt; &gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_SHIFT) })</span>
<span class="quote">&gt; &gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; &gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt; &gt;  #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })</span>
<span class="quote">&gt; &gt; +#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  extern int kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt; &gt;  extern void cleanup_highmap(void);</span>
<span class="quote">&gt; &gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; index 5c3a5f3..b402a2c 100644</span>
<span class="quote">&gt; &gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; @@ -163,6 +163,68 @@ static inline int is_write_migration_entry(swp_entry_t entry)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt; +extern int set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; &gt; +		struct mm_struct *mm, unsigned long address);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +extern int remove_migration_pmd(struct page *new,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="quote">&gt; &gt; +	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="quote">&gt; &gt; +	return __swp_entry_to_pmd(arch_entry);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return !__pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#else</span>
<span class="quote">&gt; &gt; +static inline int set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; &gt; +				struct mm_struct *mm, unsigned long address)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int remove_migration_pmd(struct page *new,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return swp_entry(0, 0);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	pmd_t pmd = {};</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	return pmd;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_MEMORY_FAILURE</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  extern atomic_long_t num_poisoned_pages __read_mostly;</span>
<span class="quote">&gt; &gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; index 46ad357..c6d5406 100644</span>
<span class="quote">&gt; &gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; @@ -3657,3 +3657,81 @@ static int __init split_huge_pages_debugfs(void)</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  late_initcall(split_huge_pages_debugfs);</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt; +int set_pmd_migration_entry(struct page *page, struct mm_struct *mm,</span>
<span class="quote">&gt; &gt; +				unsigned long addr)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	pte_t *pte;</span>
<span class="quote">&gt; &gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; &gt; +	pmd_t pmdval;</span>
<span class="quote">&gt; &gt; +	pmd_t pmdswp;</span>
<span class="quote">&gt; &gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; &gt; +	if (!page_check_address_transhuge(page, mm, addr, &amp;pmd, &amp;pte, &amp;ptl))</span>
<span class="quote">&gt; &gt; +		goto out;</span>
<span class="quote">&gt; &gt; +	if (pte)</span>
<span class="quote">&gt; &gt; +		goto out;</span>
<span class="quote">&gt; &gt; +	pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="quote">&gt; &gt; +	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="quote">&gt; &gt; +	pmdswp = swp_entry_to_pmd(entry);</span>
<span class="quote">&gt; &gt; +	pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="quote">&gt; &gt; +	set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="quote">&gt; &gt; +	page_remove_rmap(page, true);</span>
<span class="quote">&gt; &gt; +	page_cache_release(page);</span>
<span class="quote">&gt; &gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; &gt; +out:</span>
<span class="quote">&gt; &gt; +	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; &gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +int remove_migration_pmd(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt; +			unsigned long addr, void *old)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; &gt; +	pud_t *pud;</span>
<span class="quote">&gt; &gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; &gt; +	pmd_t pmde;</span>
<span class="quote">&gt; &gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; &gt; +	unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; &gt; +	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; &gt; +	if (!pgd_present(*pgd))</span>
<span class="quote">&gt; &gt; +		goto out;</span>
<span class="quote">&gt; &gt; +	pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; &gt; +	if (!pud_present(*pud))</span>
<span class="quote">&gt; &gt; +		goto out;</span>
<span class="quote">&gt; &gt; +	pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; &gt; +	if (!pmd)</span>
<span class="quote">&gt; &gt; +		goto out;</span>
<span class="quote">&gt; &gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; &gt; +	pmde = *pmd;</span>
<span class="quote">&gt; &gt; +	barrier();</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Do we need a barrier under ptl?</span>

No, I&#39;ll drop this. Thank you.
<span class="quote">
&gt; &gt; +	if (!is_pmd_migration_entry(pmde))</span>
<span class="quote">&gt; &gt; +		goto unlock_ptl;</span>
<span class="quote">&gt; &gt; +	entry = pmd_to_swp_entry(pmde);</span>
<span class="quote">&gt; &gt; +	if (migration_entry_to_page(entry) != old)</span>
<span class="quote">&gt; &gt; +		goto unlock_ptl;</span>
<span class="quote">&gt; &gt; +	get_page(new);</span>
<span class="quote">&gt; &gt; +	pmde = mk_huge_pmd(new, vma-&gt;vm_page_prot);</span>
<span class="quote">&gt; &gt; +	if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; &gt; +		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="quote">&gt; &gt; +	flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; &gt; +	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="quote">&gt; &gt; +	pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="quote">&gt; &gt; +	set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="quote">&gt; &gt; +	flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; &gt; +	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; &gt; +		mlock_vma_page(new);</span>
<span class="quote">&gt; &gt; +	update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; &gt; +unlock_ptl:</span>
<span class="quote">&gt; &gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; &gt; +out:</span>
<span class="quote">&gt; &gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="quote">&gt; &gt; index 577c94b..14164f6 100644</span>
<span class="quote">&gt; &gt; --- v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c</span>
<span class="quote">&gt; &gt; +++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="quote">&gt; &gt; @@ -118,6 +118,8 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  		if (!ptep)</span>
<span class="quote">&gt; &gt;  			goto out;</span>
<span class="quote">&gt; &gt;  		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);</span>
<span class="quote">&gt; &gt; +	} else if (PageTransHuge(new)) {</span>
<span class="quote">&gt; &gt; +		return remove_migration_pmd(new, vma, addr, old);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hm. THP now can be mapped with PTEs too..</span>

Right, and different calls of remove_migration_pte() handle pmd/pte migration
entries separately, so this particular code seems OK to me.

Thanks,
Naoya
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index 0687c47..0df9afe 100644</span>
<span class="p_header">--- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -515,6 +515,17 @@</span> <span class="p_context"> static inline int pmd_present(pmd_t pmd)</span>
 	return pmd_flags(pmd) &amp; (_PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Unlike pmd_present(), __pmd_present() checks only _PAGE_PRESENT bit.</span>
<span class="p_add">+ * Combined with is_migration_entry(), this routine is used to detect pmd</span>
<span class="p_add">+ * migration entries. To make it work fine, callers should make sure that</span>
<span class="p_add">+ * pmd_trans_huge() returns true beforehand.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int __pmd_present(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return pmd_flags(pmd) &amp; _PAGE_PRESENT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_NUMA_BALANCING
 /*
  * These work without NUMA balancing but the kernel does not care. See the
<span class="p_header">diff --git v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 2ee7811..df869d0 100644</span>
<span class="p_header">--- v4.5-rc5-mmotm-2016-02-24-16-18/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -153,7 +153,9 @@</span> <span class="p_context"> static inline int pgd_large(pgd_t pgd) { return 0; }</span>
 					 ((type) &lt;&lt; (_PAGE_BIT_PRESENT + 1)) \
 					 | ((offset) &lt;&lt; SWP_OFFSET_SHIFT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
<span class="p_add">+#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
 #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })
<span class="p_add">+#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
 
 extern int kern_addr_valid(unsigned long addr);
 extern void cleanup_highmap(void);
<span class="p_header">diff --git v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="p_header">index 5c3a5f3..b402a2c 100644</span>
<span class="p_header">--- v4.5-rc5-mmotm-2016-02-24-16-18/include/linux/swapops.h</span>
<span class="p_header">+++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/include/linux/swapops.h</span>
<span class="p_chunk">@@ -163,6 +163,68 @@</span> <span class="p_context"> static inline int is_write_migration_entry(swp_entry_t entry)</span>
 
 #endif
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+extern int set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+		struct mm_struct *mm, unsigned long address);</span>
<span class="p_add">+</span>
<span class="p_add">+extern int remove_migration_pmd(struct page *new,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="p_add">+	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="p_add">+	return __swp_entry_to_pmd(arch_entry);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !__pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline int set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+				struct mm_struct *mm, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int remove_migration_pmd(struct page *new,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return swp_entry(0, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t pmd = {};</span>
<span class="p_add">+</span>
<span class="p_add">+	return pmd;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MEMORY_FAILURE
 
 extern atomic_long_t num_poisoned_pages __read_mostly;
<span class="p_header">diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="p_header">index 46ad357..c6d5406 100644</span>
<span class="p_header">--- v4.5-rc5-mmotm-2016-02-24-16-18/mm/huge_memory.c</span>
<span class="p_header">+++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/huge_memory.c</span>
<span class="p_chunk">@@ -3657,3 +3657,81 @@</span> <span class="p_context"> static int __init split_huge_pages_debugfs(void)</span>
 }
 late_initcall(split_huge_pages_debugfs);
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+int set_pmd_migration_entry(struct page *page, struct mm_struct *mm,</span>
<span class="p_add">+				unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pmd_t pmdval;</span>
<span class="p_add">+	pmd_t pmdswp;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	if (!page_check_address_transhuge(page, mm, addr, &amp;pmd, &amp;pte, &amp;ptl))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	if (pte)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="p_add">+	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="p_add">+	pmdswp = swp_entry_to_pmd(entry);</span>
<span class="p_add">+	pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="p_add">+	set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="p_add">+	page_remove_rmap(page, true);</span>
<span class="p_add">+	page_cache_release(page);</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	return SWAP_AGAIN;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int remove_migration_pmd(struct page *new, struct vm_area_struct *vma,</span>
<span class="p_add">+			unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pmd_t pmde;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+	unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(mm, addr);</span>
<span class="p_add">+	if (!pgd_present(*pgd))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	if (!pud_present(*pud))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (!pmd)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	pmde = *pmd;</span>
<span class="p_add">+	barrier();</span>
<span class="p_add">+	if (!is_pmd_migration_entry(pmde))</span>
<span class="p_add">+		goto unlock_ptl;</span>
<span class="p_add">+	entry = pmd_to_swp_entry(pmde);</span>
<span class="p_add">+	if (migration_entry_to_page(entry) != old)</span>
<span class="p_add">+		goto unlock_ptl;</span>
<span class="p_add">+	get_page(new);</span>
<span class="p_add">+	pmde = mk_huge_pmd(new, vma-&gt;vm_page_prot);</span>
<span class="p_add">+	if (is_write_migration_entry(entry))</span>
<span class="p_add">+		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="p_add">+	flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="p_add">+	pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="p_add">+	set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="p_add">+	flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		mlock_vma_page(new);</span>
<span class="p_add">+	update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="p_add">+unlock_ptl:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return SWAP_AGAIN;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="p_header">index 577c94b..14164f6 100644</span>
<span class="p_header">--- v4.5-rc5-mmotm-2016-02-24-16-18/mm/migrate.c</span>
<span class="p_header">+++ v4.5-rc5-mmotm-2016-02-24-16-18_patched/mm/migrate.c</span>
<span class="p_chunk">@@ -118,6 +118,8 @@</span> <span class="p_context"> static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
 		if (!ptep)
 			goto out;
 		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);
<span class="p_add">+	} else if (PageTransHuge(new)) {</span>
<span class="p_add">+		return remove_migration_pmd(new, vma, addr, old);</span>
 	} else {
 		pmd = mm_find_pmd(mm, addr);
 		if (!pmd)
<span class="p_chunk">@@ -252,6 +254,27 @@</span> <span class="p_context"> void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
 	__migration_entry_wait(mm, pte, ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	if (!is_pmd_migration_entry(*pmd))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="p_add">+	if (!get_page_unless_zero(page))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	wait_on_page_locked(page);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLOCK
 /* Returns true if all buffers are successfully locked */
 static bool buffer_migrate_lock_buffers(struct buffer_head *head,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



