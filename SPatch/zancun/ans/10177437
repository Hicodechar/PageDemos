
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,1/5] powerpc/mm: Enhance &#39;slice&#39; for supporting PPC32 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,1/5] powerpc/mm: Enhance &#39;slice&#39; for supporting PPC32</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 22, 2018, 7:52 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;52c000dd-1625-a205-8ad1-04376beed2ab@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10177437/mbox/"
   >mbox</a>
|
   <a href="/patch/10177437/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10177437/">/patch/10177437/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	94F8F601D5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Jan 2018 07:53:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7A85227C0B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Jan 2018 07:53:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6EECD27D0E; Mon, 22 Jan 2018 07:53:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A32D727C0B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Jan 2018 07:53:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751073AbeAVHw5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 Jan 2018 02:52:57 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:31993 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750828AbeAVHw4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 Jan 2018 02:52:56 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zQ3Z91WzGz9ttlF;
	Mon, 22 Jan 2018 08:52:49 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id nUWLsphNRDIa; Mon, 22 Jan 2018 08:52:49 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zQ3Z90fkwz9ttlC;
	Mon, 22 Jan 2018 08:52:49 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 555FA8B89B;
	Mon, 22 Jan 2018 08:52:54 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id aSyeQyppTgga; Mon, 22 Jan 2018 08:52:54 +0100 (CET)
Received: from PO15451 (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id E28A48B88B;
	Mon, 22 Jan 2018 08:52:53 +0100 (CET)
Subject: Re: [PATCH v2 1/5] powerpc/mm: Enhance &#39;slice&#39; for supporting PPC32
To: Segher Boessenkool &lt;segher@kernel.crashing.org&gt;
Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;, linuxppc-dev@lists.ozlabs.org,
	linux-kernel@vger.kernel.org
References: &lt;49148d07955d3e5f963cedf9adcfcc37c3e03ef4.1516179904.git.christophe.leroy@c-s.fr&gt;
	&lt;87vafyz265.fsf@linux.vnet.ibm.com&gt;
	&lt;84dc1df4-db2f-be11-c1f3-5dddd1e44983@c-s.fr&gt;
	&lt;b4d8f01b-9ee1-ec34-aa0d-5a353064438c@linux.vnet.ibm.com&gt;
	&lt;28c3ba39-ef31-5ff3-7672-3e9d1942be94@c-s.fr&gt;
	&lt;c9ab9a1b-4c77-fdfc-50d1-974388cc3b10@linux.vnet.ibm.com&gt;
	&lt;e2f36c99-1b5d-acf5-12c8-b2b48701011a@c-s.fr&gt;
	&lt;36e8d873-4021-4266-bf5f-287f396ba9e1@c-s.fr&gt;
	&lt;20180120175655.GY21977@gate.crashing.org&gt;
From: Christophe LEROY &lt;christophe.leroy@c-s.fr&gt;
Message-ID: &lt;52c000dd-1625-a205-8ad1-04376beed2ab@c-s.fr&gt;
Date: Mon, 22 Jan 2018 08:52:53 +0100
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101
	Thunderbird/52.5.2
MIME-Version: 1.0
In-Reply-To: &lt;20180120175655.GY21977@gate.crashing.org&gt;
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Language: fr
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 22, 2018, 7:52 a.m.</div>
<pre class="content">
Le 20/01/2018 à 18:56, Segher Boessenkool a écrit :
<span class="quote">&gt; Hi!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Sat, Jan 20, 2018 at 09:22:50AM +0100, christophe leroy wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On PPC32, the address space is limited to 4Gbytes, hence only the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; low</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; slices will be used. As of today, the code uses</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SLICE_LOW_TOP (0x100000000ul) and compares it with addr to determine</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if addr refers to low or high space.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On PPC32, such a (addr &lt; SLICE_LOW_TOP) test is always false because</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0x100000000ul degrades to 0. Therefore, the patch modifies</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SLICE_LOW_TOP to (0xfffffffful) and modifies the tests to</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (addr &lt;= SLICE_LOW_TOP) which will then always be true on PPC32</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as addr has type &#39;unsigned long&#39; while not modifying the PPC64</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; behaviour.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It should work to define SLICE_LOW_TOP as 0x100000000ull and keep</span>
<span class="quote">&gt; everything else the same, no?</span>

great, yes it works indeed.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt;&gt; I don&#39;t think so. When I had the missing prototype, the compilation goes</span>
<span class="quote">&gt;&gt;&gt; ok, including the final link. Which means at the end the code is not</span>
<span class="quote">&gt;&gt;&gt; included since radix_enabled() evaluates to 0.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Many many parts of the kernel are based on this assumption.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Segher, what is your opinion on the above ? Can we consider that a &#39; if</span>
<span class="quote">&gt;&gt; (nbits)&#39; will always be compiled out when nbits is a #define constant,</span>
<span class="quote">&gt;&gt; or should we duplicate the macros as suggested in order to avoid</span>
<span class="quote">&gt;&gt; unneccessary &#39;if&#39; test on platforms where &#39;nbits&#39; is always not null by</span>
<span class="quote">&gt;&gt; definition ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Doing things like</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (nbits)</span>
<span class="quote">&gt; 		some_undeclared_function();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; will likely work in practice if the condition evaluates to false at</span>
<span class="quote">&gt; compile time, but a) it will warn; b) it is just yuck; and c) it will</span>
<span class="quote">&gt; not always work (for example, you get the wrong prototype in this case,</span>
<span class="quote">&gt; not lethal here with most ABIs, but ugh).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just make sure to declare all functions, or define it to some empty</span>
<span class="quote">&gt; thing, or #ifdeffery if you have to.  There are many options, it is</span>
<span class="quote">&gt; not hard, and if it means you have to pull code further apart that is</span>
<span class="quote">&gt; not so bad: you get cleaner, clearer code.</span>

Ok, if I understand well, your comment applies to the following indeed, 
so you confirm the #ifdef is necessary.

  #endif


However, my question was related to another part of the current 
patchset, where the functions are always refined:


On PPC32 we set:

+#define SLICE_LOW_SHIFT		28
+#define SLICE_HIGH_SHIFT	0

On PPC64 we set:

  #define SLICE_LOW_SHIFT		28
  #define SLICE_HIGH_SHIFT	40

We define:

+#define slice_bitmap_zero(dst, nbits) \
+	do { if (nbits) bitmap_zero(dst, nbits); } while (0)


We have a function with:
{
	slice_bitmap_zero(ret-&gt;low_slices, SLICE_NUM_LOW);
  	slice_bitmap_zero(ret-&gt;high_slices, SLICE_NUM_HIGH);
}

So the question is to find the better approach. Is the above approach 
correct, including performance wise ?
Or should we define two sets of the macro slice_bitmap_zero(), one for 
CONFIG_PPC32 with the &#39;if (nbits)&#39; test and one for CONFIG_PPC64 without 
the unnecessary test ?

Or should we avoid this macro entirely and instead do something like:

{
	bitmap_zero(ret-&gt;low_slices, SLICE_NUM_LOW);
#if SLICE_NUM_HIGH != 0
  	bitmap_zero(ret-&gt;high_slices, SLICE_NUM_HIGH);
#endif
}

And if we say the &#39;macro&#39; approach is OK, should it be better the use a 
static inline function instead ?

Thanks,
Christophe
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2045">Segher Boessenkool</a> - Jan. 23, 2018, 9:47 p.m.</div>
<pre class="content">
On Mon, Jan 22, 2018 at 08:52:53AM +0100, Christophe LEROY wrote:
<span class="quote">&gt; &gt;Just make sure to declare all functions, or define it to some empty</span>
<span class="quote">&gt; &gt;thing, or #ifdeffery if you have to.  There are many options, it is</span>
<span class="quote">&gt; &gt;not hard, and if it means you have to pull code further apart that is</span>
<span class="quote">&gt; &gt;not so bad: you get cleaner, clearer code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ok, if I understand well, your comment applies to the following indeed, </span>
<span class="quote">&gt; so you confirm the #ifdef is necessary.</span>

As I said, not necessary, but it might be the easiest or even the
cleanest here.  Something for you and the maintainers to fight about,
I&#39;ll stay out of it :-)
<span class="quote">
&gt; However, my question was related to another part of the current </span>
<span class="quote">&gt; patchset, where the functions are always refined:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On PPC32 we set:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#define SLICE_LOW_SHIFT		28</span>
<span class="quote">&gt; +#define SLICE_HIGH_SHIFT	0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On PPC64 we set:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #define SLICE_LOW_SHIFT		28</span>
<span class="quote">&gt;  #define SLICE_HIGH_SHIFT	40</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We define:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#define slice_bitmap_zero(dst, nbits) \</span>
<span class="quote">&gt; +	do { if (nbits) bitmap_zero(dst, nbits); } while (0)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We have a function with:</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	slice_bitmap_zero(ret-&gt;low_slices, SLICE_NUM_LOW);</span>
<span class="quote">&gt;  	slice_bitmap_zero(ret-&gt;high_slices, SLICE_NUM_HIGH);</span>
<span class="quote">&gt; }</span>

SLICE_NUM_xx is not the same as SLICE_xx_SHIFT; I don&#39;t see how any of
those shift values give nbits == 0.
<span class="quote">
&gt; So the question is to find the better approach. Is the above approach </span>
<span class="quote">&gt; correct, including performance wise ?</span>

If slice_bitmap_zero is inlined (or partially inlined) it is fine.  Is it?


Segher
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -553,9 +553,11 @@</span> <span class="p_context"> unsigned long hugetlb_get_unmapped_area(struct file </span>
*file, unsigned long addr,
  	struct hstate *hstate = hstate_file(file);
  	int mmu_psize = shift_to_mmu_psize(huge_page_shift(hstate));

<span class="p_add">+#ifdef CONFIG_PPC_RADIX_MMU</span>
  	if (radix_enabled())
  		return radix__hugetlb_get_unmapped_area(file, addr, len,
  						       pgoff, flags);
<span class="p_add">+#endif</span>
  	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);
  }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



