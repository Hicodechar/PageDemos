
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PACTH,v3,1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PACTH,v3,1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 16, 2016, 5:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1471368856-11455-2-git-send-email-robert.foss@collabora.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9284327/mbox/"
   >mbox</a>
|
   <a href="/patch/9284327/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9284327/">/patch/9284327/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A538D600CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 17:34:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 97033288A1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 17:34:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8AA21288A4; Tue, 16 Aug 2016 17:34:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 79B23288A2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 17:34:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753567AbcHPRed (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 16 Aug 2016 13:34:33 -0400
Received: from bhuna.collabora.co.uk ([46.235.227.227]:52817 &quot;EHLO
	bhuna.collabora.co.uk&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752263AbcHPRea (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 16 Aug 2016 13:34:30 -0400
Received: from [127.0.0.1] (localhost [127.0.0.1])
	(Authenticated sender: robertfoss) with ESMTPSA id 78439266A7B
From: robert.foss@collabora.com
To: corbet@lwn.net, akpm@linux-foundation.org, vbabka@suse.cz,
	mhocko@suse.com, koct9i@gmail.com, hughd@google.com,
	robert.foss@collabora.com, n-horiguchi@ah.jp.nec.com,
	john.stultz@linaro.org, minchan@kernel.org,
	ross.zwisler@linux.intel.com, jmarchan@redhat.com,
	hannes@cmpxchg.org, mingo@kernel.org, keescook@chromium.org,
	viro@zeniv.linux.org.uk, gorcunov@openvz.org,
	sonnyrao@chromium.org, plaguedbypenguins@gmail.com,
	eric.engestrom@imgtec.com, rientjes@google.com, jdanis@google.com,
	calvinowens@fb.com, adobriyan@gmail.com, jann@thejh.net,
	kirill.shutemov@linux.intel.com, ldufour@linux.vnet.ibm.com,
	linux-doc@vger.kernel.org, linux-kernel@vger.kernel.org,
	Ben Zhang &lt;benzh@chromium.org&gt;, Bryan Freed &lt;bfreed@chromium.org&gt;,
	Filipe Brandenburger &lt;filbranden@chromium.org&gt;,
	Mateusz Guzik &lt;mguzik@redhat.com&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, linux-api@vger.kernel.org
Subject: [PACTH v3 1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps
Date: Tue, 16 Aug 2016 13:34:14 -0400
Message-Id: &lt;1471368856-11455-2-git-send-email-robert.foss@collabora.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1471368856-11455-1-git-send-email-robert.foss@collabora.com&gt;
References: &lt;1471368856-11455-1-git-send-email-robert.foss@collabora.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a> - Aug. 16, 2016, 5:34 p.m.</div>
<pre class="content">
<span class="from">From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>

This is based on earlier work by Thiago Goncales. It implements a new
per process proc file which summarizes the contents of the smaps file
but doesn&#39;t display any addresses.  It gives more detailed information
than statm like the PSS (proprotional set size).  It differs from the
original implementation in that it doesn&#39;t use the full blown set of
seq operations, uses a different termination condition, and doesn&#39;t
displayed &quot;Locked&quot; as that was broken on the original implemenation.

This new proc file provides information faster than parsing the potentially
huge smaps file.
<span class="tested-by">
Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="signed-off-by">
Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
---
 fs/proc/base.c     |   1 +
 fs/proc/internal.h |   2 +
 fs/proc/task_mmu.c | 129 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 132 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=96711">Jann Horn</a> - Aug. 16, 2016, 6:18 p.m.</div>
<pre class="content">
On Tue, Aug 16, 2016 at 01:34:14PM -0400, robert.foss@collabora.com wrote:
<span class="quote">&gt; From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is based on earlier work by Thiago Goncales. It implements a new</span>
<span class="quote">&gt; per process proc file which summarizes the contents of the smaps file</span>
<span class="quote">&gt; but doesn&#39;t display any addresses.  It gives more detailed information</span>
<span class="quote">&gt; than statm like the PSS (proprotional set size).  It differs from the</span>
<span class="quote">&gt; original implementation in that it doesn&#39;t use the full blown set of</span>
<span class="quote">&gt; seq operations, uses a different termination condition, and doesn&#39;t</span>
<span class="quote">&gt; displayed &quot;Locked&quot; as that was broken on the original implemenation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This new proc file provides information faster than parsing the potentially</span>
<span class="quote">&gt; huge smaps file.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
<span class="quote">&gt; ---</span>
[...]
<span class="quote">&gt; +static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct proc_maps_private *priv = NULL;</span>
<span class="quote">&gt; +	struct seq_file *seq;</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="quote">&gt; +	if (ret)</span>
<span class="quote">&gt; +		goto error;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * We need to grab references to the task_struct</span>
<span class="quote">&gt; +	 * at open time, because there&#39;s a potential information</span>
<span class="quote">&gt; +	 * leak where the totmaps file is opened and held open</span>
<span class="quote">&gt; +	 * while the underlying pid to task mapping changes</span>
<span class="quote">&gt; +	 * underneath it</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	seq = file-&gt;private_data;</span>
<span class="quote">&gt; +	priv = seq-&gt;private;</span>
<span class="quote">&gt; +	priv-&gt;task = get_proc_task(inode);</span>
<span class="quote">&gt; +	if (!priv-&gt;task) {</span>
<span class="quote">&gt; +		ret = -ESRCH;</span>
<span class="quote">&gt; +		goto error;</span>

I see that you removed the proc_map_release() call for the upper
error case as I recommended. However, for the second error case,
you do have to call it because do_maps_open() succeeded.

You could fix this by turning the first &quot;goto error;&quot; into
&quot;return;&quot; and adding the proc_map_release() call back in after
the &quot;error:&quot; label. This would be fine - if an error branch just
needs to return an error code, it&#39;s okay to do so directly
without jumping to an error label.

Alternatively, you could add a second label
in front of the existing &quot;error:&quot; label, jump to the new label
for the second error case, and call proc_map_release() between
the new label and the old one.
<span class="quote">

&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +error:</span>
<span class="quote">&gt; +	return ret;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
[...]
<span class="quote">&gt; +const struct file_operations proc_totmaps_operations = {</span>
<span class="quote">&gt; +	.open		= totmaps_open,</span>
<span class="quote">&gt; +	.read		= seq_read,</span>
<span class="quote">&gt; +	.llseek		= seq_lseek,</span>
<span class="quote">&gt; +	.release	= proc_map_release,</span>
<span class="quote">&gt; +};</span>

As I said regarding v2 already:
This won&#39;t release priv-&gt;task, causing a memory leak (exploitable
through a reference counter overflow of the task_struct usage
counter).
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a> - Aug. 16, 2016, 6:34 p.m.</div>
<pre class="content">
On 2016-08-16 02:18 PM, Jann Horn wrote:
<span class="quote">&gt; On Tue, Aug 16, 2016 at 01:34:14PM -0400, robert.foss@collabora.com wrote:</span>
<span class="quote">&gt;&gt; From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is based on earlier work by Thiago Goncales. It implements a new</span>
<span class="quote">&gt;&gt; per process proc file which summarizes the contents of the smaps file</span>
<span class="quote">&gt;&gt; but doesn&#39;t display any addresses.  It gives more detailed information</span>
<span class="quote">&gt;&gt; than statm like the PSS (proprotional set size).  It differs from the</span>
<span class="quote">&gt;&gt; original implementation in that it doesn&#39;t use the full blown set of</span>
<span class="quote">&gt;&gt; seq operations, uses a different termination condition, and doesn&#39;t</span>
<span class="quote">&gt;&gt; displayed &quot;Locked&quot; as that was broken on the original implemenation.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This new proc file provides information faster than parsing the potentially</span>
<span class="quote">&gt;&gt; huge smaps file.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; +static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	struct proc_maps_private *priv = NULL;</span>
<span class="quote">&gt;&gt; +	struct seq_file *seq;</span>
<span class="quote">&gt;&gt; +	int ret;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="quote">&gt;&gt; +	if (ret)</span>
<span class="quote">&gt;&gt; +		goto error;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * We need to grab references to the task_struct</span>
<span class="quote">&gt;&gt; +	 * at open time, because there&#39;s a potential information</span>
<span class="quote">&gt;&gt; +	 * leak where the totmaps file is opened and held open</span>
<span class="quote">&gt;&gt; +	 * while the underlying pid to task mapping changes</span>
<span class="quote">&gt;&gt; +	 * underneath it</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	seq = file-&gt;private_data;</span>
<span class="quote">&gt;&gt; +	priv = seq-&gt;private;</span>
<span class="quote">&gt;&gt; +	priv-&gt;task = get_proc_task(inode);</span>
<span class="quote">&gt;&gt; +	if (!priv-&gt;task) {</span>
<span class="quote">&gt;&gt; +		ret = -ESRCH;</span>
<span class="quote">&gt;&gt; +		goto error;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I see that you removed the proc_map_release() call for the upper</span>
<span class="quote">&gt; error case as I recommended. However, for the second error case,</span>
<span class="quote">&gt; you do have to call it because do_maps_open() succeeded.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You could fix this by turning the first &quot;goto error;&quot; into</span>
<span class="quote">&gt; &quot;return;&quot; and adding the proc_map_release() call back in after</span>
<span class="quote">&gt; the &quot;error:&quot; label. This would be fine - if an error branch just</span>
<span class="quote">&gt; needs to return an error code, it&#39;s okay to do so directly</span>
<span class="quote">&gt; without jumping to an error label.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Alternatively, you could add a second label</span>
<span class="quote">&gt; in front of the existing &quot;error:&quot; label, jump to the new label</span>
<span class="quote">&gt; for the second error case, and call proc_map_release() between</span>
<span class="quote">&gt; the new label and the old one.</span>

Ah, naturally. Thanks for the patience and advice!
<span class="quote">
&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	return 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +error:</span>
<span class="quote">&gt;&gt; +	return ret;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; +const struct file_operations proc_totmaps_operations = {</span>
<span class="quote">&gt;&gt; +	.open		= totmaps_open,</span>
<span class="quote">&gt;&gt; +	.read		= seq_read,</span>
<span class="quote">&gt;&gt; +	.llseek		= seq_lseek,</span>
<span class="quote">&gt;&gt; +	.release	= proc_map_release,</span>
<span class="quote">&gt;&gt; +};</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As I said regarding v2 already:</span>
<span class="quote">&gt; This won&#39;t release priv-&gt;task, causing a memory leak (exploitable</span>
<span class="quote">&gt; through a reference counter overflow of the task_struct usage</span>
<span class="quote">&gt; counter).</span>
<span class="quote">&gt;</span>

Sorry about dropping the ball on that one, what&#39;s correct way to release 
priv-&gt;task?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=96711">Jann Horn</a> - Aug. 16, 2016, 6:47 p.m.</div>
<pre class="content">
On Tue, Aug 16, 2016 at 02:34:15PM -0400, Robert Foss wrote:
<span class="quote">&gt; On 2016-08-16 02:18 PM, Jann Horn wrote:</span>
<span class="quote">&gt; &gt;On Tue, Aug 16, 2016 at 01:34:14PM -0400, robert.foss@collabora.com wrote:</span>
<span class="quote">&gt; &gt;&gt;+	}</span>
<span class="quote">&gt; &gt;&gt;+</span>
<span class="quote">&gt; &gt;&gt;+	return 0;</span>
<span class="quote">&gt; &gt;&gt;+</span>
<span class="quote">&gt; &gt;&gt;+error:</span>
<span class="quote">&gt; &gt;&gt;+	return ret;</span>
<span class="quote">&gt; &gt;&gt;+}</span>
<span class="quote">&gt; &gt;&gt;+</span>
<span class="quote">&gt; &gt;[...]</span>
<span class="quote">&gt; &gt;&gt;+const struct file_operations proc_totmaps_operations = {</span>
<span class="quote">&gt; &gt;&gt;+	.open		= totmaps_open,</span>
<span class="quote">&gt; &gt;&gt;+	.read		= seq_read,</span>
<span class="quote">&gt; &gt;&gt;+	.llseek		= seq_lseek,</span>
<span class="quote">&gt; &gt;&gt;+	.release	= proc_map_release,</span>
<span class="quote">&gt; &gt;&gt;+};</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;As I said regarding v2 already:</span>
<span class="quote">&gt; &gt;This won&#39;t release priv-&gt;task, causing a memory leak (exploitable</span>
<span class="quote">&gt; &gt;through a reference counter overflow of the task_struct usage</span>
<span class="quote">&gt; &gt;counter).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry about dropping the ball on that one, what&#39;s correct way to release</span>
<span class="quote">&gt; priv-&gt;task?</span>

get_proc_task() does get_pid_task(), which does get_task_struct(), which
increments the -&gt;usage field of the task. You want the inverse
operation - something that decrements -&gt;usage and checks for zero. This is
done via put_task_struct(), which is defined a few lines below
get_task_struct().
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="p_header">index a11eb71..de3acdf 100644</span>
<span class="p_header">--- a/fs/proc/base.c</span>
<span class="p_header">+++ b/fs/proc/base.c</span>
<span class="p_chunk">@@ -2855,6 +2855,7 @@</span> <span class="p_context"> static const struct pid_entry tgid_base_stuff[] = {</span>
 	REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),
 	REG(&quot;smaps&quot;,      S_IRUGO, proc_pid_smaps_operations),
 	REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),
<span class="p_add">+	REG(&quot;totmaps&quot;,    S_IRUGO, proc_totmaps_operations),</span>
 #endif
 #ifdef CONFIG_SECURITY
 	DIR(&quot;attr&quot;,       S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
<span class="p_header">diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="p_header">index aa27810..99f97d7 100644</span>
<span class="p_header">--- a/fs/proc/internal.h</span>
<span class="p_header">+++ b/fs/proc/internal.h</span>
<span class="p_chunk">@@ -297,6 +297,8 @@</span> <span class="p_context"> extern const struct file_operations proc_pid_smaps_operations;</span>
 extern const struct file_operations proc_tid_smaps_operations;
 extern const struct file_operations proc_clear_refs_operations;
 extern const struct file_operations proc_pagemap_operations;
<span class="p_add">+extern const struct file_operations proc_totmaps_operations;</span>
<span class="p_add">+</span>
 
 extern unsigned long task_vsize(struct mm_struct *);
 extern unsigned long task_statm(struct mm_struct *,
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 4648c7f..fe692cb 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -802,6 +802,75 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 	return 0;
 }
 
<span class="p_add">+static void add_smaps_sum(struct mem_size_stats *mss,</span>
<span class="p_add">+		struct mem_size_stats *mss_sum)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mss_sum-&gt;resident += mss-&gt;resident;</span>
<span class="p_add">+	mss_sum-&gt;pss += mss-&gt;pss;</span>
<span class="p_add">+	mss_sum-&gt;shared_clean += mss-&gt;shared_clean;</span>
<span class="p_add">+	mss_sum-&gt;shared_dirty += mss-&gt;shared_dirty;</span>
<span class="p_add">+	mss_sum-&gt;private_clean += mss-&gt;private_clean;</span>
<span class="p_add">+	mss_sum-&gt;private_dirty += mss-&gt;private_dirty;</span>
<span class="p_add">+	mss_sum-&gt;referenced += mss-&gt;referenced;</span>
<span class="p_add">+	mss_sum-&gt;anonymous += mss-&gt;anonymous;</span>
<span class="p_add">+	mss_sum-&gt;anonymous_thp += mss-&gt;anonymous_thp;</span>
<span class="p_add">+	mss_sum-&gt;swap += mss-&gt;swap;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int totmaps_proc_show(struct seq_file *m, void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="p_add">+	struct mm_struct *mm = priv-&gt;mm;</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+	struct mem_size_stats mss_sum;</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(&amp;mss_sum, 0, sizeof(mss_sum));</span>
<span class="p_add">+	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	hold_task_mempolicy(priv);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (vma = mm-&gt;mmap; vma != priv-&gt;tail_vma; vma = vma-&gt;vm_next) {</span>
<span class="p_add">+		struct mem_size_stats mss;</span>
<span class="p_add">+		struct mm_walk smaps_walk = {</span>
<span class="p_add">+			.pmd_entry = smaps_pte_range,</span>
<span class="p_add">+			.mm = vma-&gt;vm_mm,</span>
<span class="p_add">+			.private = &amp;mss,</span>
<span class="p_add">+		};</span>
<span class="p_add">+</span>
<span class="p_add">+		if (vma-&gt;vm_mm &amp;&amp; !is_vm_hugetlb_page(vma)) {</span>
<span class="p_add">+			memset(&amp;mss, 0, sizeof(mss));</span>
<span class="p_add">+			walk_page_vma(vma, &amp;smaps_walk);</span>
<span class="p_add">+			add_smaps_sum(&amp;mss, &amp;mss_sum);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	release_task_mempolicy(priv);</span>
<span class="p_add">+	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m,</span>
<span class="p_add">+		   &quot;Rss:            %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Pss:            %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Swap:           %8lu kB\n&quot;,</span>
<span class="p_add">+		   mss_sum.resident &gt;&gt; 10,</span>
<span class="p_add">+		   (unsigned long)(mss_sum.pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_add">+		   mss_sum.shared_clean  &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.shared_dirty  &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.private_clean &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.private_dirty &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.referenced &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.anonymous &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.anonymous_thp &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.swap &gt;&gt; 10);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int show_pid_smap(struct seq_file *m, void *v)
 {
 	return show_smap(m, v, 1);
<span class="p_chunk">@@ -812,6 +881,28 @@</span> <span class="p_context"> static int show_tid_smap(struct seq_file *m, void *v)</span>
 	return show_smap(m, v, 0);
 }
 
<span class="p_add">+static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return NULL + (*pos == 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="p_add">+{</span>
<span class="p_add">+	++*pos;</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void m_totmaps_stop(struct seq_file *p, void *v)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct seq_operations proc_totmaps_op = {</span>
<span class="p_add">+	.start	= m_totmaps_start,</span>
<span class="p_add">+	.next	= m_totmaps_next,</span>
<span class="p_add">+	.stop	= m_totmaps_stop,</span>
<span class="p_add">+	.show	= totmaps_proc_show</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static const struct seq_operations proc_pid_smaps_op = {
 	.start	= m_start,
 	.next	= m_next,
<span class="p_chunk">@@ -836,6 +927,37 @@</span> <span class="p_context"> static int tid_smaps_open(struct inode *inode, struct file *file)</span>
 	return do_maps_open(inode, file, &amp;proc_tid_smaps_op);
 }
 
<span class="p_add">+static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct proc_maps_private *priv = NULL;</span>
<span class="p_add">+	struct seq_file *seq;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		goto error;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We need to grab references to the task_struct</span>
<span class="p_add">+	 * at open time, because there&#39;s a potential information</span>
<span class="p_add">+	 * leak where the totmaps file is opened and held open</span>
<span class="p_add">+	 * while the underlying pid to task mapping changes</span>
<span class="p_add">+	 * underneath it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	seq = file-&gt;private_data;</span>
<span class="p_add">+	priv = seq-&gt;private;</span>
<span class="p_add">+	priv-&gt;task = get_proc_task(inode);</span>
<span class="p_add">+	if (!priv-&gt;task) {</span>
<span class="p_add">+		ret = -ESRCH;</span>
<span class="p_add">+		goto error;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+error:</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 const struct file_operations proc_pid_smaps_operations = {
 	.open		= pid_smaps_open,
 	.read		= seq_read,
<span class="p_chunk">@@ -850,6 +972,13 @@</span> <span class="p_context"> const struct file_operations proc_tid_smaps_operations = {</span>
 	.release	= proc_map_release,
 };
 
<span class="p_add">+const struct file_operations proc_totmaps_operations = {</span>
<span class="p_add">+	.open		= totmaps_open,</span>
<span class="p_add">+	.read		= seq_read,</span>
<span class="p_add">+	.llseek		= seq_lseek,</span>
<span class="p_add">+	.release	= proc_map_release,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 enum clear_refs_types {
 	CLEAR_REFS_ALL = 1,
 	CLEAR_REFS_ANON,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



