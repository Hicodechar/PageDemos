
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:perf/core] perf stat: Update per-thread shadow stats - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:perf/core] perf stat: Update per-thread shadow stats</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 28, 2017, 3:23 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-1fcd03946b52b8a57a6692fedd4406b45baedfe6@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10134945/mbox/"
   >mbox</a>
|
   <a href="/patch/10134945/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10134945/">/patch/10134945/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	644FD60212 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Dec 2017 15:25:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 51CF42C5F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Dec 2017 15:25:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 445AB2CABB; Thu, 28 Dec 2017 15:25:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6E4942C5F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Dec 2017 15:25:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932104AbdL1PZr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 28 Dec 2017 10:25:47 -0500
Received: from terminus.zytor.com ([65.50.211.136]:50835 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932103AbdL1PZp (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 28 Dec 2017 10:25:45 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id vBSFNL2D003948;
	Thu, 28 Dec 2017 07:23:21 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id vBSFNLZr003940;
	Thu, 28 Dec 2017 07:23:21 -0800
Date: Thu, 28 Dec 2017 07:23:21 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Jin Yao &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-1fcd03946b52b8a57a6692fedd4406b45baedfe6@git.kernel.org&gt;
Cc: peterz@infradead.org, ak@linux.intel.com, yao.jin@linux.intel.com,
	kan.liang@intel.com, alexander.shishkin@linux.intel.com,
	acme@redhat.com, hpa@zytor.com, jolsa@kernel.org,
	tglx@linutronix.de, linux-kernel@vger.kernel.org, mingo@kernel.org
Reply-To: hpa@zytor.com, acme@redhat.com, kan.liang@intel.com,
	alexander.shishkin@linux.intel.com, mingo@kernel.org,
	linux-kernel@vger.kernel.org, tglx@linutronix.de,
	jolsa@kernel.org, yao.jin@linux.intel.com, ak@linux.intel.com,
	peterz@infradead.org
In-Reply-To: &lt;1512482591-4646-5-git-send-email-yao.jin@linux.intel.com&gt;
References: &lt;1512482591-4646-5-git-send-email-yao.jin@linux.intel.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:perf/core] perf stat: Update per-thread shadow stats
Git-Commit-ID: 1fcd03946b52b8a57a6692fedd4406b45baedfe6
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Dec. 28, 2017, 3:23 p.m.</div>
<pre class="content">
Commit-ID:  1fcd03946b52b8a57a6692fedd4406b45baedfe6
Gitweb:     https://git.kernel.org/tip/1fcd03946b52b8a57a6692fedd4406b45baedfe6
Author:     Jin Yao &lt;yao.jin@linux.intel.com&gt;
AuthorDate: Tue, 5 Dec 2017 22:03:04 +0800
Committer:  Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;
CommitDate: Wed, 27 Dec 2017 12:15:43 -0300

perf stat: Update per-thread shadow stats

The functions perf_stat__update_shadow_stats() is called to update the
shadow stats on a set of static variables.

But the static variables are the limitations to be extended to support
per-thread shadow stats.

This patch lets the perf_stat__update_shadow_stats() support to update
the shadow stats on a input parameter &#39;st&#39; and uses
update_runtime_stat() to update the stats. It will not directly update
the static variables as before.
<span class="signed-off-by">
Signed-off-by: Jin Yao &lt;yao.jin@linux.intel.com&gt;</span>
<span class="acked-by">Acked-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
Cc: Alexander Shishkin &lt;alexander.shishkin@linux.intel.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;
Cc: Kan Liang &lt;kan.liang@intel.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Link: http://lkml.kernel.org/r/1512482591-4646-5-git-send-email-yao.jin@linux.intel.com
[ Rename &#39;stat&#39; variables to &#39;st&#39; to build on centos:{5,6} and others where it shadows a global declaration ]
<span class="signed-off-by">Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
---
 tools/perf/builtin-script.c   |  3 +-
 tools/perf/builtin-stat.c     |  3 +-
 tools/perf/util/stat-shadow.c | 86 +++++++++++++++++++++++++++++--------------
 tools/perf/util/stat.c        |  8 ++--
 tools/perf/util/stat.h        |  2 +-
 5 files changed, 68 insertions(+), 34 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c</span>
<span class="p_header">index 39d8b55..81b3950 100644</span>
<span class="p_header">--- a/tools/perf/builtin-script.c</span>
<span class="p_header">+++ b/tools/perf/builtin-script.c</span>
<span class="p_chunk">@@ -1548,7 +1548,8 @@</span> <span class="p_context"> static void perf_sample__fprint_metric(struct perf_script *script,</span>
 	val = sample-&gt;period * evsel-&gt;scale;
 	perf_stat__update_shadow_stats(evsel,
 				       val,
<span class="p_del">-				       sample-&gt;cpu);</span>
<span class="p_add">+				       sample-&gt;cpu,</span>
<span class="p_add">+				       &amp;rt_stat);</span>
 	evsel_script(evsel)-&gt;val = val;
 	if (evsel_script(evsel-&gt;leader)-&gt;gnum == evsel-&gt;leader-&gt;nr_members) {
 		for_each_group_member (ev2, evsel-&gt;leader) {
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index a027b47..3f4a2c2 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -1214,7 +1214,8 @@</span> <span class="p_context"> static void aggr_update_shadow(void)</span>
 				val += perf_counts(counter-&gt;counts, cpu, 0)-&gt;val;
 			}
 			perf_stat__update_shadow_stats(counter, val,
<span class="p_del">-						       first_shadow_cpu(counter, id));</span>
<span class="p_add">+					first_shadow_cpu(counter, id),</span>
<span class="p_add">+					&amp;rt_stat);</span>
 		}
 	}
 }
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 07cfbf6..4b28c40 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -116,19 +116,29 @@</span> <span class="p_context"> static void saved_value_delete(struct rblist *rblist __maybe_unused,</span>
 
 static struct saved_value *saved_value_lookup(struct perf_evsel *evsel,
 					      int cpu,
<span class="p_del">-					      bool create)</span>
<span class="p_add">+					      bool create,</span>
<span class="p_add">+					      enum stat_type type,</span>
<span class="p_add">+					      int ctx,</span>
<span class="p_add">+					      struct runtime_stat *st)</span>
 {
<span class="p_add">+	struct rblist *rblist;</span>
 	struct rb_node *nd;
 	struct saved_value dm = {
 		.cpu = cpu,
 		.evsel = evsel,
<span class="p_add">+		.type = type,</span>
<span class="p_add">+		.ctx = ctx,</span>
<span class="p_add">+		.stat = st,</span>
 	};
<span class="p_del">-	nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+</span>
<span class="p_add">+	rblist = &amp;st-&gt;value_list;</span>
<span class="p_add">+</span>
<span class="p_add">+	nd = rblist__find(rblist, &amp;dm);</span>
 	if (nd)
 		return container_of(nd, struct saved_value, rb_node);
 	if (create) {
<span class="p_del">-		rblist__add_node(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_del">-		nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+		rblist__add_node(rblist, &amp;dm);</span>
<span class="p_add">+		nd = rblist__find(rblist, &amp;dm);</span>
 		if (nd)
 			return container_of(nd, struct saved_value, rb_node);
 	}
<span class="p_chunk">@@ -217,13 +227,24 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 	}
 }
 
<span class="p_add">+static void update_runtime_stat(struct runtime_stat *st,</span>
<span class="p_add">+				enum stat_type type,</span>
<span class="p_add">+				int ctx, int cpu, u64 count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *v = saved_value_lookup(NULL, cpu, true,</span>
<span class="p_add">+						   type, ctx, st);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (v)</span>
<span class="p_add">+		update_stats(&amp;v-&gt;stats, count);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Update various tracking values we maintain to print
  * more semantic information such as miss/hit ratios,
  * instruction rates, etc:
  */
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,
<span class="p_del">-				    int cpu)</span>
<span class="p_add">+				    int cpu, struct runtime_stat *st)</span>
 {
 	int ctx = evsel_context(counter);
 
<span class="p_chunk">@@ -231,50 +252,58 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,</span>
 
 	if (perf_evsel__match(counter, SOFTWARE, SW_TASK_CLOCK) ||
 	    perf_evsel__match(counter, SOFTWARE, SW_CPU_CLOCK))
<span class="p_del">-		update_stats(&amp;runtime_nsecs_stats[cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_NSECS, 0, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CPU_CYCLES))
<span class="p_del">-		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_CYCLES, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, CYCLES_IN_TX))
<span class="p_del">-		update_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_CYCLES_IN_TX, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TRANSACTION_START))
<span class="p_del">-		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TRANSACTION, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, ELISION_START))
<span class="p_del">-		update_stats(&amp;runtime_elision_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_ELISION, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_TOTAL_SLOTS))
<span class="p_del">-		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TOPDOWN_TOTAL_SLOTS,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_ISSUED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TOPDOWN_SLOTS_ISSUED,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_RETIRED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TOPDOWN_SLOTS_RETIRED,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_FETCH_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TOPDOWN_FETCH_BUBBLES,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_RECOVERY_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_TOPDOWN_RECOVERY_BUBBLES,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_STALLED_CYCLES_FRONT,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_STALLED_CYCLES_BACK,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_BRANCH_INSTRUCTIONS))
<span class="p_del">-		update_stats(&amp;runtime_branches_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_BRANCHES, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CACHE_REFERENCES))
<span class="p_del">-		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_CACHEREFS, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1D))
<span class="p_del">-		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_L1_DCACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1I))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_L1_ICACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_LL))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_LL_CACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_DTLB))
<span class="p_del">-		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_DTLB_CACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))
<span class="p_del">-		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_ITLB_CACHE, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, SMI_NUM))
<span class="p_del">-		update_stats(&amp;runtime_smi_num_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_SMI_NUM, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, APERF))
<span class="p_del">-		update_stats(&amp;runtime_aperf_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(st, STAT_APERF, ctx, cpu, count);</span>
 
 	if (counter-&gt;collect_stat) {
<span class="p_del">-		struct saved_value *v = saved_value_lookup(counter, cpu, true);</span>
<span class="p_add">+		struct saved_value *v = saved_value_lookup(counter, cpu, true,</span>
<span class="p_add">+							   STAT_NONE, 0, st);</span>
 		update_stats(&amp;v-&gt;stats, count);
 	}
 }
<span class="p_chunk">@@ -694,7 +723,8 @@</span> <span class="p_context"> static void generic_metric(const char *metric_expr,</span>
 			stats = &amp;walltime_nsecs_stats;
 			scale = 1e-9;
 		} else {
<span class="p_del">-			v = saved_value_lookup(metric_events[i], cpu, false);</span>
<span class="p_add">+			v = saved_value_lookup(metric_events[i], cpu, false,</span>
<span class="p_add">+					       STAT_NONE, 0, &amp;rt_stat);</span>
 			if (!v)
 				break;
 			stats = &amp;v-&gt;stats;
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index 151e9ef..78abfd4 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -278,9 +278,11 @@</span> <span class="p_context"> process_counter_values(struct perf_stat_config *config, struct perf_evsel *evsel</span>
 			perf_evsel__compute_deltas(evsel, cpu, thread, count);
 		perf_counts_values__scale(count, config-&gt;scale, NULL);
 		if (config-&gt;aggr_mode == AGGR_NONE)
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, count-&gt;val, cpu);</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, cpu,</span>
<span class="p_add">+						       &amp;rt_stat);</span>
 		if (config-&gt;aggr_mode == AGGR_THREAD)
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, count-&gt;val, 0);</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, 0,</span>
<span class="p_add">+						       &amp;rt_stat);</span>
 		break;
 	case AGGR_GLOBAL:
 		aggr-&gt;val += count-&gt;val;
<span class="p_chunk">@@ -362,7 +364,7 @@</span> <span class="p_context"> int perf_stat_process_counter(struct perf_stat_config *config,</span>
 	/*
 	 * Save the full runtime - to allow normalization during printout:
 	 */
<span class="p_del">-	perf_stat__update_shadow_stats(counter, *count, 0);</span>
<span class="p_add">+	perf_stat__update_shadow_stats(counter, *count, 0, &amp;rt_stat);</span>
 
 	return 0;
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index f202400..bb9902a 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -129,7 +129,7 @@</span> <span class="p_context"> void runtime_stat__exit(struct runtime_stat *st);</span>
 void perf_stat__init_shadow_stats(void);
 void perf_stat__reset_shadow_stats(void);
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,
<span class="p_del">-				    int cpu);</span>
<span class="p_add">+				    int cpu, struct runtime_stat *st);</span>
 struct perf_stat_output_ctx {
 	void *ctx;
 	print_metric_t print_metric;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



