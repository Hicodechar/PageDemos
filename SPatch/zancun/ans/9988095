
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,05/16] iommu/vt-d: add iommu invalidate function - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,05/16] iommu/vt-d: add iommu invalidate function</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 5, 2017, 11:03 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1507244624-39189-6-git-send-email-jacob.jun.pan@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9988095/mbox/"
   >mbox</a>
|
   <a href="/patch/9988095/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9988095/">/patch/9988095/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D77BF60247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 Oct 2017 23:03:16 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C940F28D57
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 Oct 2017 23:03:16 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BDE5728D59; Thu,  5 Oct 2017 23:03:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 325D728D57
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 Oct 2017 23:03:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752545AbdJEXDO (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 5 Oct 2017 19:03:14 -0400
Received: from mga05.intel.com ([192.55.52.43]:41175 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752036AbdJEXBW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 5 Oct 2017 19:01:22 -0400
Received: from orsmga004.jf.intel.com ([10.7.209.38])
	by fmsmga105.fm.intel.com with ESMTP; 05 Oct 2017 16:01:20 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.42,482,1500966000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;135681894&quot;
Received: from jacob-builder.jf.intel.com ([10.7.199.158])
	by orsmga004.jf.intel.com with ESMTP; 05 Oct 2017 16:01:20 -0700
From: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;
To: iommu@lists.linux-foundation.org, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, David Woodhouse &lt;dwmw2@infradead.org&gt;,
	Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	Rafael Wysocki &lt;rafael.j.wysocki@intel.com&gt;,
	Jean-Philippe Brucker &lt;jean-philippe.brucker@arm.com&gt;
Cc: &quot;Liu, Yi L&quot; &lt;yi.l.liu@intel.com&gt;, Lan Tianyu &lt;tianyu.lan@intel.com&gt;,
	&quot;Tian, Kevin&quot; &lt;kevin.tian@intel.com&gt;, Raj Ashok &lt;ashok.raj@intel.com&gt;,
	Alex Williamson &lt;alex.williamson@redhat.com&gt;,
	Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;, Liu@vger.kernel.org,
	Yi L &lt;yi.l.liu@linux.intel.com&gt;
Subject: [PATCH v2 05/16] iommu/vt-d: add iommu invalidate function
Date: Thu,  5 Oct 2017 16:03:33 -0700
Message-Id: &lt;1507244624-39189-6-git-send-email-jacob.jun.pan@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1507244624-39189-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
References: &lt;1507244624-39189-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a> - Oct. 5, 2017, 11:03 p.m.</div>
<pre class="content">
This patch adds Intel VT-d specific function to implement
iommu passdown invalidate API.

The use case is for supporting caching structure invalidation
of assigned SVM capable devices. Emulated IOMMU exposes queue
invalidation capability and passes down all descriptors from the guest
to the physical IOMMU.

The assumption is that guest to host device ID mapping should be
resolved prior to calling IOMMU driver. Based on the device handle,
host IOMMU driver can replace certain fields before submit to the
invalidation queue.
<span class="signed-off-by">
Signed-off-by: Liu, Yi L &lt;yi.l.liu@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Ashok Raj &lt;ashok.raj@intel.com&gt;</span>
---
 drivers/iommu/intel-iommu.c | 148 ++++++++++++++++++++++++++++++++++++++++++++
 include/linux/intel-iommu.h |  10 +++
 2 files changed, 158 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="p_header">index 6832f73..81e27eb 100644</span>
<span class="p_header">--- a/drivers/iommu/intel-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/intel-iommu.c</span>
<span class="p_chunk">@@ -5023,6 +5023,153 @@</span> <span class="p_context"> static void intel_iommu_detach_device(struct iommu_domain *domain,</span>
 	dmar_remove_one_dev_info(to_dmar_domain(domain), dev);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * 3D array for converting IOMMU generic type-granularity to VT-d granularity</span>
<span class="p_add">+ * X indexed by enum iommu_inv_type</span>
<span class="p_add">+ * Y indicates request without and with PASID</span>
<span class="p_add">+ * Z indexed by enum enum iommu_inv_granularity</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * For an example, if we want to find the VT-d granularity encoding for IOTLB</span>
<span class="p_add">+ * type, DMA request with PASID, and page selective. The look up indices are:</span>
<span class="p_add">+ * [1][1][8], where</span>
<span class="p_add">+ * 1: IOMMU_INV_TYPE_TLB</span>
<span class="p_add">+ * 1: with PASID</span>
<span class="p_add">+ * 8: IOMMU_INV_GRANU_PAGE_PASID</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+const static u64 inv_type_granu_table[IOMMU_INV_NR_TYPE][2][IOMMU_INV_NR_GRANU] = {</span>
<span class="p_add">+	/* extended dev IOTLBs, only global is valid */</span>
<span class="p_add">+	{</span>
<span class="p_add">+		{1}</span>
<span class="p_add">+	},</span>
<span class="p_add">+	/* IOTLB and EIOTLB */</span>
<span class="p_add">+	{</span>
<span class="p_add">+		{DMA_TLB_GLOBAL_FLUSH, DMA_TLB_DSI_FLUSH, 0, DMA_TLB_PSI_FLUSH},</span>
<span class="p_add">+		{0, 0, 0, 0, QI_GRAN_ALL_ALL, 0, QI_GRAN_NONG_ALL, QI_GRAN_NONG_PASID, QI_GRAN_PSI_PASID}</span>
<span class="p_add">+	},</span>
<span class="p_add">+	/* PASID cache */</span>
<span class="p_add">+	{</span>
<span class="p_add">+		{0, 0, 0, 0, 1}</span>
<span class="p_add">+	},</span>
<span class="p_add">+	/* context cache */</span>
<span class="p_add">+	{</span>
<span class="p_add">+		{DMA_CCMD_GLOBAL_INVL, DMA_CCMD_DOMAIN_INVL, DMA_CCMD_DEVICE_INVL}</span>
<span class="p_add">+	}</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int to_vtd_granularity(int type, int granu, int with_pasid, u64 *vtd_granu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (type &gt;= IOMMU_INV_NR_TYPE || granu &gt;= IOMMU_INV_NR_GRANU || with_pasid &gt; 1)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	*vtd_granu = inv_type_granu_table[type][with_pasid][granu];</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int intel_iommu_invalidate(struct iommu_domain *domain,</span>
<span class="p_add">+		struct device *dev, struct tlb_invalidate_info *inv_info)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct intel_iommu *iommu;</span>
<span class="p_add">+	struct dmar_domain *dmar_domain = to_dmar_domain(domain);</span>
<span class="p_add">+	struct device_domain_info *info;</span>
<span class="p_add">+	struct pci_dev *pdev;</span>
<span class="p_add">+	u16 did, sid, pfsid;</span>
<span class="p_add">+	u8 bus, devfn;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	u64 granu;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!inv_info || !dmar_domain)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	iommu = device_to_iommu(dev, &amp;bus, &amp;devfn);</span>
<span class="p_add">+	if (!iommu)</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!dev || !dev_is_pci(dev))</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	did = dmar_domain-&gt;iommu_did[iommu-&gt;seq_id];</span>
<span class="p_add">+	sid = PCI_DEVID(bus, devfn);</span>
<span class="p_add">+	ret = to_vtd_granularity(inv_info-&gt;hdr.type, inv_info-&gt;granularity,</span>
<span class="p_add">+				!!(inv_info-&gt;flags &amp; IOMMU_INVALIDATE_DMA_PASID), &amp;granu);</span>
<span class="p_add">+	if (ret) {</span>
<span class="p_add">+		pr_err(&quot;Invalid range type %d, granu %d\n&quot;, inv_info-&gt;hdr.type,</span>
<span class="p_add">+			inv_info-&gt;granularity);</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;iommu-&gt;lock);</span>
<span class="p_add">+	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (inv_info-&gt;hdr.type) {</span>
<span class="p_add">+	case IOMMU_INV_TYPE_CONTEXT:</span>
<span class="p_add">+		iommu-&gt;flush.flush_context(iommu, did, sid,</span>
<span class="p_add">+					DMA_CCMD_MASK_NOBIT, granu);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case IOMMU_INV_TYPE_TLB:</span>
<span class="p_add">+		/* We need to deal with two scenarios:</span>
<span class="p_add">+		 * - IOTLB for request w/o PASID</span>
<span class="p_add">+		 * - extended IOTLB for request with PASID.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (inv_info-&gt;size &amp;&amp;</span>
<span class="p_add">+			(inv_info-&gt;addr &amp; ((1 &lt;&lt; (VTD_PAGE_SHIFT + inv_info-&gt;size)) - 1))) {</span>
<span class="p_add">+			pr_err(&quot;Addr out of range, addr 0x%llx, size order %d\n&quot;,</span>
<span class="p_add">+				inv_info-&gt;addr, inv_info-&gt;size);</span>
<span class="p_add">+			ret = -ERANGE;</span>
<span class="p_add">+			goto out_unlock;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (inv_info-&gt;flags &amp; IOMMU_INVALIDATE_DMA_PASID)</span>
<span class="p_add">+			qi_flush_eiotlb(iommu, did, mm_to_dma_pfn(inv_info-&gt;addr),</span>
<span class="p_add">+					inv_info-&gt;pasid,</span>
<span class="p_add">+					inv_info-&gt;size, granu,</span>
<span class="p_add">+					inv_info-&gt;flags &amp; IOMMU_INVALIDATE_GLOBAL_PAGE);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			qi_flush_iotlb(iommu, did, mm_to_dma_pfn(inv_info-&gt;addr),</span>
<span class="p_add">+				inv_info-&gt;size, granu);</span>
<span class="p_add">+		/* For SRIOV VF, invalidation of device IOTLB requires PFSID */</span>
<span class="p_add">+		pdev = to_pci_dev(dev);</span>
<span class="p_add">+		if (pdev &amp;&amp; pdev-&gt;is_virtfn)</span>
<span class="p_add">+			pfsid = PCI_DEVID(pdev-&gt;physfn-&gt;bus-&gt;number, pdev-&gt;physfn-&gt;devfn);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			pfsid = sid;</span>
<span class="p_add">+</span>
<span class="p_add">+		/**</span>
<span class="p_add">+		 * Always flush device IOTLB if ATS is enabled since guest</span>
<span class="p_add">+		 * vIOMMU exposes CM = 1, no device IOTLB flush will be passed</span>
<span class="p_add">+		 * down.</span>
<span class="p_add">+		 * TODO: check if device is VF, use PF ATS data if spec does not require</span>
<span class="p_add">+		 * VF to include all PF capabilities,  VF qdep and VF ats_enabled.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		info = iommu_support_dev_iotlb(dmar_domain, iommu, bus, devfn);</span>
<span class="p_add">+		if (info &amp;&amp; info-&gt;ats_enabled) {</span>
<span class="p_add">+			if (inv_info-&gt;flags &amp; IOMMU_INVALIDATE_NO_PASID)</span>
<span class="p_add">+				qi_flush_dev_iotlb(iommu, sid, info-&gt;pfsid,</span>
<span class="p_add">+						info-&gt;ats_qdep, inv_info-&gt;addr,</span>
<span class="p_add">+						inv_info-&gt;size);</span>
<span class="p_add">+			else</span>
<span class="p_add">+				qi_flush_dev_eiotlb(iommu, sid, info-&gt;pfsid,</span>
<span class="p_add">+						inv_info-&gt;pasid, info-&gt;ats_qdep,</span>
<span class="p_add">+						inv_info-&gt;addr, inv_info-&gt;size);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case IOMMU_INV_TYPE_PASID:</span>
<span class="p_add">+		qi_flush_pasid(iommu, did, granu, inv_info-&gt;pasid);</span>
<span class="p_add">+</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		dev_err(dev, &quot;Unknown IOMMU invalidation type %d\n&quot;,</span>
<span class="p_add">+			inv_info-&gt;hdr.type);</span>
<span class="p_add">+		ret = -EINVAL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+out_unlock:</span>
<span class="p_add">+	spin_unlock(&amp;iommu-&gt;lock);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int intel_iommu_map(struct iommu_domain *domain,
 			   unsigned long iova, phys_addr_t hpa,
 			   size_t size, int iommu_prot)
<span class="p_chunk">@@ -5451,6 +5598,7 @@</span> <span class="p_context"> const struct iommu_ops intel_iommu_ops = {</span>
 #ifdef CONFIG_INTEL_IOMMU_SVM
 	.bind_pasid_table	= intel_iommu_bind_pasid_table,
 	.unbind_pasid_table	= intel_iommu_unbind_pasid_table,
<span class="p_add">+	.invalidate		= intel_iommu_invalidate,</span>
 #endif
 	.map			= intel_iommu_map,
 	.unmap			= intel_iommu_unmap,
<span class="p_header">diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h</span>
<span class="p_header">index e42d317..5c734bd 100644</span>
<span class="p_header">--- a/include/linux/intel-iommu.h</span>
<span class="p_header">+++ b/include/linux/intel-iommu.h</span>
<span class="p_chunk">@@ -258,6 +258,10 @@</span> <span class="p_context"> enum {</span>
 #define QI_PGRP_RESP_TYPE	0x9
 #define QI_PSTRM_RESP_TYPE	0xa
 
<span class="p_add">+#define QI_DID(did)		(((u64)did &amp; 0xffff) &lt;&lt; 16)</span>
<span class="p_add">+#define QI_DID_MASK		GENMASK(31, 16)</span>
<span class="p_add">+#define QI_TYPE_MASK		GENMASK(3, 0)</span>
<span class="p_add">+</span>
 #define QI_IEC_SELECTIVE	(((u64)1) &lt;&lt; 4)
 #define QI_IEC_IIDEX(idx)	(((u64)(idx &amp; 0xffff) &lt;&lt; 32))
 #define QI_IEC_IM(m)		(((u64)(m &amp; 0x1f) &lt;&lt; 27))
<span class="p_chunk">@@ -495,6 +499,12 @@</span> <span class="p_context"> extern int intel_iommu_enable_pasid(struct intel_iommu *iommu, struct intel_svm_</span>
 extern struct intel_iommu *intel_svm_device_to_iommu(struct device *dev);
 #endif
 
<span class="p_add">+struct intel_invalidate_data {</span>
<span class="p_add">+	u16 sid;</span>
<span class="p_add">+	u32 pasid;</span>
<span class="p_add">+	struct qi_desc inv_desc;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 extern const struct attribute_group *intel_iommu_groups[];
 
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



