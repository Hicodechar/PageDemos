
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/6] mm, hugetlb: get rid of surplus page accounting tricks - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/6] mm, hugetlb: get rid of surplus page accounting tricks</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 9:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103093213.26329-5-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10141921/mbox/"
   >mbox</a>
|
   <a href="/patch/10141921/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10141921/">/patch/10141921/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	39DE360594 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:32:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 20EAD28D53
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:32:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1FACA28FEF; Wed,  3 Jan 2018 09:32:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A385D2902B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:32:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752157AbeACJcn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 04:32:43 -0500
Received: from mail-pg0-f67.google.com ([74.125.83.67]:41098 &quot;EHLO
	mail-pg0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752112AbeACJcg (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 04:32:36 -0500
Received: by mail-pg0-f67.google.com with SMTP id 77so499466pgd.8
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Jan 2018 01:32:35 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=+vwgZntvJ9jXyXi+aD53j9g7pFeLZdvJa1VIaW/ktXA=;
	b=Edb6XNuSm/4SZJr8+VmW0bii+0gS7bfIroIiEIQlyxyru+jtSwJYbaifSEnR8npcIV
	LG6oDDU42WilXWrGOAcO1YL+X3wNyX8UoaS5v2zjQ1b+Pnt/2LTifKm7zFmlHVxIElXL
	wXlE8RdHlJHZPBa4YHgIhH+1rtoYcPkKcUR0cRZpaJZ5gVqyvgVJUi9/ayH5eGjL/qwV
	78eciN0uJ1arWUPkOrYv/HqQWOMp28afyzWc2g3r4oDRXcCCvI0HW6HvGJTftBLJs4HS
	KPxBLfaMMfI2/Nuz8FuyomULifsxEO4U2IirGEy6MVMsR/sBsEMR8a9vzH5rEqQJpyQH
	Jpgg==
X-Gm-Message-State: AKGB3mJz9kzwLve2ZWhBTFfx9AkcxrhFQowNT8VFej8qIQYhPHfurTvM
	sankyad+use8Gws0kJpquaI43Q==
X-Google-Smtp-Source: ACJfBouU/TQw53d4zcx1ZQ1oqJVU1QYL3WpdPuyLf8PPNa0lJ3JZv35cVi9uYILGX2f38T1+wea/1Q==
X-Received: by 10.99.114.85 with SMTP id c21mr707732pgn.255.1514971955266;
	Wed, 03 Jan 2018 01:32:35 -0800 (PST)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	c2sm1790628pgq.48.2018.01.03.01.32.33
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 03 Jan 2018 01:32:34 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: &lt;linux-mm@kvack.org&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 4/6] mm, hugetlb: get rid of surplus page accounting tricks
Date: Wed,  3 Jan 2018 10:32:11 +0100
Message-Id: &lt;20180103093213.26329-5-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
References: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 3, 2018, 9:32 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

alloc_surplus_huge_page increases the pool size and the number of
surplus pages opportunistically to prevent from races with the pool size
change. See d1c3fb1f8f29 (&quot;hugetlb: introduce nr_overcommit_hugepages
sysctl&quot;) for more details.

The resulting code is unnecessarily hairy, cause code duplication and
doesn&#39;t allow to share the allocation paths. Moreover pool size changes
tend to be very seldom so optimizing for them is not really reasonable.
Simplify the code and allow to allocate a fresh surplus page as long as
we are under the overcommit limit and then recheck the condition after
the allocation and drop the new page if the situation has changed. This
should provide a reasonable guarantee that an abrupt allocation requests
will not go way off the limit.

If we consider races with the pool shrinking and enlarging then we
should be reasonably safe as well. In the first case we are off by one
in the worst case and the second case should work OK because the page is
not yet visible. We can waste CPU cycles for the allocation but that
should be acceptable for a relatively rare condition.
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 mm/hugetlb.c | 62 ++++++++++++++++++++++--------------------------------------
 1 file changed, 23 insertions(+), 39 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index f260ffa26363..7dc80cbe8e89 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1540,62 +1540,46 @@</span> <span class="p_context"> int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
 static struct page *__alloc_surplus_huge_page(struct hstate *h, gfp_t gfp_mask,
 		int nid, nodemask_t *nmask)
 {
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-	unsigned int r_nid;</span>
<span class="p_add">+	struct page *page = NULL;</span>
 
 	if (hstate_is_gigantic(h))
 		return NULL;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Assume we will successfully allocate the surplus page to</span>
<span class="p_del">-	 * prevent racing processes from causing the surplus to exceed</span>
<span class="p_del">-	 * overcommit</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * This however introduces a different race, where a process B</span>
<span class="p_del">-	 * tries to grow the static hugepage pool while alloc_pages() is</span>
<span class="p_del">-	 * called by process A. B will only examine the per-node</span>
<span class="p_del">-	 * counters in determining if surplus huge pages can be</span>
<span class="p_del">-	 * converted to normal huge pages in adjust_pool_surplus(). A</span>
<span class="p_del">-	 * won&#39;t be able to increment the per-node counter, until the</span>
<span class="p_del">-	 * lock is dropped by B, but B doesn&#39;t drop hugetlb_lock until</span>
<span class="p_del">-	 * no more huge pages can be converted from surplus to normal</span>
<span class="p_del">-	 * state (and doesn&#39;t try to convert again). Thus, we have a</span>
<span class="p_del">-	 * case where a surplus huge page exists, the pool is grown, and</span>
<span class="p_del">-	 * the surplus huge page still exists after, even though it</span>
<span class="p_del">-	 * should just have been converted to a normal huge page. This</span>
<span class="p_del">-	 * does not leak memory, though, as the hugepage will be freed</span>
<span class="p_del">-	 * once it is out of use. It also does not allow the counters to</span>
<span class="p_del">-	 * go out of whack in adjust_pool_surplus() as we don&#39;t modify</span>
<span class="p_del">-	 * the node values until we&#39;ve gotten the hugepage and only the</span>
<span class="p_del">-	 * per-node value is checked there.</span>
<span class="p_del">-	 */</span>
 	spin_lock(&amp;hugetlb_lock);
<span class="p_del">-	if (h-&gt;surplus_huge_pages &gt;= h-&gt;nr_overcommit_huge_pages) {</span>
<span class="p_del">-		spin_unlock(&amp;hugetlb_lock);</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		h-&gt;nr_huge_pages++;</span>
<span class="p_del">-		h-&gt;surplus_huge_pages++;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if (h-&gt;surplus_huge_pages &gt;= h-&gt;nr_overcommit_huge_pages)</span>
<span class="p_add">+		goto out_unlock;</span>
 	spin_unlock(&amp;hugetlb_lock);
 
 	page = __hugetlb_alloc_buddy_huge_page(h, gfp_mask, nid, nmask);
<span class="p_add">+	if (!page)</span>
<span class="p_add">+		goto out_unlock;</span>
 
 	spin_lock(&amp;hugetlb_lock);
<span class="p_del">-	if (page) {</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We could have raced with the pool size change.</span>
<span class="p_add">+	 * Double check that and simply deallocate the new page</span>
<span class="p_add">+	 * if we would end up overcommiting the surpluses. Abuse</span>
<span class="p_add">+	 * temporary page to workaround the nasty free_huge_page</span>
<span class="p_add">+	 * codeflow</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (h-&gt;surplus_huge_pages &gt;= h-&gt;nr_overcommit_huge_pages) {</span>
<span class="p_add">+		SetPageHugeTemporary(page);</span>
<span class="p_add">+		put_page(page);</span>
<span class="p_add">+		page = NULL;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		int r_nid;</span>
<span class="p_add">+</span>
<span class="p_add">+		h-&gt;surplus_huge_pages++;</span>
<span class="p_add">+		h-&gt;nr_huge_pages++;</span>
 		INIT_LIST_HEAD(&amp;page-&gt;lru);
 		r_nid = page_to_nid(page);
 		set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);
 		set_hugetlb_cgroup(page, NULL);
<span class="p_del">-		/*</span>
<span class="p_del">-		 * We incremented the global counters already</span>
<span class="p_del">-		 */</span>
 		h-&gt;nr_huge_pages_node[r_nid]++;
 		h-&gt;surplus_huge_pages_node[r_nid]++;
<span class="p_del">-	} else {</span>
<span class="p_del">-		h-&gt;nr_huge_pages--;</span>
<span class="p_del">-		h-&gt;surplus_huge_pages--;</span>
 	}
<span class="p_add">+</span>
<span class="p_add">+out_unlock:</span>
 	spin_unlock(&amp;hugetlb_lock);
 
 	return page;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



