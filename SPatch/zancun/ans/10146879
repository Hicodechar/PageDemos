
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[05/23] x86, kaiser: unmap kernel from userspace page tables (core patch) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [05/23] x86, kaiser: unmap kernel from userspace page tables (core patch)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=139651">Jiri Kosina</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 5, 2018, 6:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.LRH.2.00.1801051909160.27010@gjva.wvxbf.pm&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10146879/mbox/"
   >mbox</a>
|
   <a href="/patch/10146879/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10146879/">/patch/10146879/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F0B6A604D3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Jan 2018 18:20:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E31C222A68
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Jan 2018 18:20:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D7EE227D29; Fri,  5 Jan 2018 18:20:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CA24F22A68
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Jan 2018 18:20:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752415AbeAESUj (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 5 Jan 2018 13:20:39 -0500
Received: from twin.jikos.cz ([91.219.245.39]:40762 &quot;EHLO twin.jikos.cz&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752313AbeAESUi (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 5 Jan 2018 13:20:38 -0500
Received: from twin.jikos.cz (jikos@[127.0.0.1])
	by twin.jikos.cz (8.13.6/8.13.6) with ESMTP id w05IJrSE022881
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Fri, 5 Jan 2018 19:19:54 +0100
Received: from localhost (jikos@localhost)
	by twin.jikos.cz (8.13.6/8.13.6/Submit) with ESMTP id w05IJpUU022874; 
	Fri, 5 Jan 2018 19:19:52 +0100
X-Authentication-Warning: twin.jikos.cz: jikos owned process doing -bs
Date: Fri, 5 Jan 2018 19:19:51 +0100 (CET)
From: Jiri Kosina &lt;jikos@kernel.org&gt;
To: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
cc: Yisheng Xie &lt;xieyisheng1@huawei.com&gt;, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org, richard.fellner@student.tugraz.at,
	moritz.lipp@iaik.tugraz.at, daniel.gruss@iaik.tugraz.at,
	michael.schwarz@iaik.tugraz.at, luto@kernel.org,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	keescook@google.com, hughd@google.com, x86@kernel.org,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;
Subject: Re: [PATCH 05/23] x86, kaiser: unmap kernel from userspace page
	tables (core patch)
In-Reply-To: &lt;20a54a5f-f4e5-2126-fb73-6a995d13d52d@linux.intel.com&gt;
Message-ID: &lt;alpine.LRH.2.00.1801051909160.27010@gjva.wvxbf.pm&gt;
References: &lt;20171123003438.48A0EEDE@viggo.jf.intel.com&gt;
	&lt;20171123003447.1DB395E3@viggo.jf.intel.com&gt;
	&lt;e80ac5b1-c562-fc60-ee84-30a3a40bde60@huawei.com&gt;
	&lt;93776eb2-b6d4-679a-280c-8ba558a69c34@linux.intel.com&gt;
	&lt;bda85c5e-d2be-f4ac-e2b4-4ef01d5a01a5@huawei.com&gt;
	&lt;20a54a5f-f4e5-2126-fb73-6a995d13d52d@linux.intel.com&gt;
User-Agent: Alpine 2.00 (LRH 1167 2008-08-23)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=139651">Jiri Kosina</a> - Jan. 5, 2018, 6:19 p.m.</div>
<pre class="content">
[ adding Hugh ]

On Thu, 4 Jan 2018, Dave Hansen wrote:
<span class="quote">
&gt; &gt; BTW, we have just reported a bug caused by kaiser[1], which looks like</span>
<span class="quote">&gt; &gt; caused by SMEP. Could you please help to have a look?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; [1] https://lkml.org/lkml/2018/1/5/3</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please report that to your kernel vendor.  Your EFI page tables have the</span>
<span class="quote">&gt; NX bit set on the low addresses.  There have been a bunch of iterations</span>
<span class="quote">&gt; of this, but you need to make sure that the EFI kernel mappings don&#39;t</span>
<span class="quote">&gt; get _PAGE_NX set on them.  Look at what __pti_set_user_pgd() does in</span>
<span class="quote">&gt; mainline.</span>

Unfortunately this is more complicated.

The thing is -- efi=old_memmap is broken even upstream. We will probably 
not receive too many reports about this against upstream PTI, as most of 
the machines are using classic high-mapping of EFI regions; but older 
kernels force on certain machines stil old_memmap (or it can be specified 
manually on kernel cmdline), where EFI has all its mapping in the 
userspace range.

And that explodes, as those get marked NX in the kernel pagetables.

I&#39;ve spent most of today tracking this down (the legacy EFI mmap is 
horrid); the patch below is confirmed to fix it both on current upstream 
kernel, as well as on original-KAISER based kernels (Hugh&#39;s backport) in 
cases old_memmap is used by EFI.

I am not super happy about this, but I din&#39;t really want to extend the 
_set_pgd() code to always figure out whether it&#39;s dealing wih low EFI 
mapping or not, as that would be way too much overhead just for this 
one-off call during boot.
<span class="from">


From: Jiri Kosina &lt;jkosina@suse.cz&gt;</span>
Subject: [PATCH] PTI: unbreak EFI old_memmap

old_memmap&#39;s efi_call_phys_prolog() calls set_pgd() with swapper PGD that 
has PAGE_USER set, which makes PTI set NX on it, and therefore EFI can&#39;t 
execute it&#39;s code.

Fix that by forcefully clearing _PAGE_NX from the PGD (this can&#39;t be done
by the pgprot API).

_PAGE_NX will be automatically reintroduced in efi_call_phys_epilog(), as 
_set_pgd() will again notice that this is _PAGE_USER, and set _PAGE_NX on 
it.
<span class="signed-off-by">
Signed-off-by: Jiri Kosina &lt;jkosina@suse.cz&gt;</span>
---
 arch/x86/platform/efi/efi_64.c |    6 ++++++
 1 file changed, 6 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Jan. 5, 2018, 7:03 p.m.</div>
<pre class="content">
On 01/05/2018 10:19 AM, Jiri Kosina wrote:
<span class="quote">&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt;  		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;  		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;  		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt; +		 *</span>
<span class="quote">&gt; +		 * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	__flush_tlb_all();</span>

Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see
the &amp;init_mm in there and *not* set _PAGE_USER?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=139651">Jiri Kosina</a> - Jan. 5, 2018, 7:17 p.m.</div>
<pre class="content">
On Fri, 5 Jan 2018, Dave Hansen wrote:
<span class="quote">
&gt; &gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt; &gt;  		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;  		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;  		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; &gt; +		/*</span>
<span class="quote">&gt; &gt; +		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt; &gt; +		 *</span>
<span class="quote">&gt; &gt; +		 * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt; &gt; +		 */</span>
<span class="quote">&gt; &gt; +		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  	__flush_tlb_all();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see</span>
<span class="quote">&gt; the &amp;init_mm in there and *not* set _PAGE_USER?</span>

That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for 
reasons that are behind me.

I did put this on my TODO list, but for later.

(and yes, I tried clearing _PAGE_USER from init_mm&#39;s PGD, and no obvious 
breakages appeared, but I wanted to give it more thought later).
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=139651">Jiri Kosina</a> - Jan. 5, 2018, 7:18 p.m.</div>
<pre class="content">
On Fri, 5 Jan 2018, Jiri Kosina wrote:
<span class="quote">
&gt; That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for </span>
<span class="quote">&gt; reasons that are behind me.</span>

[ oh and BTW I find the fact that we have populate_pgd() and 
pgd_populate(), which do something *completely* different quite 
entertaining ]
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Jan. 5, 2018, 9:07 p.m.</div>
<pre class="content">
On 01/05/2018 11:17 AM, Jiri Kosina wrote:
<span class="quote">&gt; On Fri, 5 Jan 2018, Dave Hansen wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt;&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt;&gt;&gt;  		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt;&gt;  		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt;&gt;  		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt;&gt;&gt; +		/*</span>
<span class="quote">&gt;&gt;&gt; +		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt;&gt;&gt; +		 *</span>
<span class="quote">&gt;&gt;&gt; +		 * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt;&gt;&gt; +		 */</span>
<span class="quote">&gt;&gt;&gt; +		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt;&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;&gt;  	__flush_tlb_all();</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see</span>
<span class="quote">&gt;&gt; the &amp;init_mm in there and *not* set _PAGE_USER?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for </span>
<span class="quote">&gt; reasons that are behind me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I did put this on my TODO list, but for later.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; (and yes, I tried clearing _PAGE_USER from init_mm&#39;s PGD, and no obvious </span>
<span class="quote">&gt; breakages appeared, but I wanted to give it more thought later).</span>

Feel free to add my Ack on this.  I&#39;d personally much rather muck with
random relatively unused bits of the efi code than touch the core PGD code.

We need to go look at it again in the 4.16 timeframe, probably.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=139651">Jiri Kosina</a> - Jan. 5, 2018, 9:14 p.m.</div>
<pre class="content">
On Fri, 5 Jan 2018, Dave Hansen wrote:
<span class="quote">
&gt; &gt;&gt;&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt;&gt;&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt;&gt;&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt; &gt;&gt;&gt;  		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;&gt;&gt;  		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;&gt;&gt;  		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; &gt;&gt;&gt; +		/*</span>
<span class="quote">&gt; &gt;&gt;&gt; +		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt; &gt;&gt;&gt; +		 *</span>
<span class="quote">&gt; &gt;&gt;&gt; +		 * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt; &gt;&gt;&gt; +		 */</span>
<span class="quote">&gt; &gt;&gt;&gt; +		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt; &gt;&gt;&gt;  	}</span>
<span class="quote">&gt; &gt;&gt;&gt;  	__flush_tlb_all();</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see</span>
<span class="quote">&gt; &gt;&gt; the &amp;init_mm in there and *not* set _PAGE_USER?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for </span>
<span class="quote">&gt; &gt; reasons that are behind me.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I did put this on my TODO list, but for later.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; (and yes, I tried clearing _PAGE_USER from init_mm&#39;s PGD, and no obvious </span>
<span class="quote">&gt; &gt; breakages appeared, but I wanted to give it more thought later).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Feel free to add my Ack on this.  </span>

Thanks. I&#39;ll extract the patch out of this thread and submit it 
separately, so that it doesn&#39;t get lost buried here.
<span class="quote">
&gt; I&#39;d personally much rather muck with random relatively unused bits of </span>
<span class="quote">&gt; the efi code than touch the core PGD code.</span>

Exactly. Especially at this point.
<span class="quote">
&gt; We need to go look at it again in the 4.16 timeframe, probably.</span>

Agreed. On my TODO list already.

Thanks,
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 5, 2018, 9:29 p.m.</div>
<pre class="content">
<span class="quote">&gt; On Jan 5, 2018, at 1:14 PM, Jiri Kosina &lt;jikos@kernel.org&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Fri, 5 Jan 2018, Dave Hansen wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;        save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;        vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;        set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +        /*</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +         * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +         *</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +         * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +         */</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +        pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;    }</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;    __flush_tlb_all();</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see</span>
<span class="quote">&gt;&gt;&gt;&gt; the &amp;init_mm in there and *not* set _PAGE_USER?</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for </span>
<span class="quote">&gt;&gt;&gt; reasons that are behind me.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; I did put this on my TODO list, but for later.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; (and yes, I tried clearing _PAGE_USER from init_mm&#39;s PGD, and no obvious </span>
<span class="quote">&gt;&gt;&gt; breakages appeared, but I wanted to give it more thought later).</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Feel free to add my Ack on this.  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks. I&#39;ll extract the patch out of this thread and submit it </span>
<span class="quote">&gt; separately, so that it doesn&#39;t get lost buried here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; I&#39;d personally much rather muck with random relatively unused bits of </span>
<span class="quote">&gt;&gt; the efi code than touch the core PGD code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Exactly. Especially at this point.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; We need to go look at it again in the 4.16 timeframe, probably.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Agreed. On my TODO list already.</span>

Can we just delete the old memmap code instead?

--Andy
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - Jan. 5, 2018, 10:48 p.m.</div>
<pre class="content">
On Fri, Jan 5, 2018 at 1:14 PM, Jiri Kosina &lt;jikos@kernel.org&gt; wrote:
<span class="quote">&gt; On Fri, 5 Jan 2018, Dave Hansen wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;           save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;           vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;           set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +         /*</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +          * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +          *</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +          * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +          */</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; +         pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;   }</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;   __flush_tlb_all();</span>
<span class="quote">&gt;&gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; Wait a sec...  Where does the _PAGE_USER come from?  Shouldn&#39;t we see</span>
<span class="quote">&gt;&gt; &gt;&gt; the &amp;init_mm in there and *not* set _PAGE_USER?</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; That&#39;s because pgd_populate() uses _PAGE_TABLE and not _KERNPG_TABLE for</span>
<span class="quote">&gt;&gt; &gt; reasons that are behind me.</span>

Oh, I completely missed that; and then the issue would have got hidden
by one of my later per-process-kaiser patches.
<span class="quote">
&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I did put this on my TODO list, but for later.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; (and yes, I tried clearing _PAGE_USER from init_mm&#39;s PGD, and no obvious</span>
<span class="quote">&gt;&gt; &gt; breakages appeared, but I wanted to give it more thought later).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Feel free to add my Ack on this.</span>

And mine - thanks a lot for dealing with this Jiri.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Thanks. I&#39;ll extract the patch out of this thread and submit it</span>
<span class="quote">&gt; separately, so that it doesn&#39;t get lost buried here.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; I&#39;d personally much rather muck with random relatively unused bits of</span>
<span class="quote">&gt;&gt; the efi code than touch the core PGD code.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Exactly. Especially at this point.</span>

Indeed.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; We need to go look at it again in the 4.16 timeframe, probably.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Agreed. On my TODO list already.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Jiri Kosina</span>
<span class="quote">&gt; SUSE Labs</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=44041">Hanjun Guo</a> - Jan. 6, 2018, 4:54 a.m.</div>
<pre class="content">
Hi Jiri,

Thanks for the fix, comments inline.

On 2018/1/6 2:19, Jiri Kosina wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; [ adding Hugh ]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Thu, 4 Jan 2018, Dave Hansen wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; BTW, we have just reported a bug caused by kaiser[1], which looks like</span>
<span class="quote">&gt;&gt;&gt; caused by SMEP. Could you please help to have a look?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; [1] https://lkml.org/lkml/2018/1/5/3</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Please report that to your kernel vendor.  Your EFI page tables have the</span>
<span class="quote">&gt;&gt; NX bit set on the low addresses.  There have been a bunch of iterations</span>
<span class="quote">&gt;&gt; of this, but you need to make sure that the EFI kernel mappings don&#39;t</span>
<span class="quote">&gt;&gt; get _PAGE_NX set on them.  Look at what __pti_set_user_pgd() does in</span>
<span class="quote">&gt;&gt; mainline.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Unfortunately this is more complicated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The thing is -- efi=old_memmap is broken even upstream. We will probably </span>
<span class="quote">&gt; not receive too many reports about this against upstream PTI, as most of </span>
<span class="quote">&gt; the machines are using classic high-mapping of EFI regions; but older </span>
<span class="quote">&gt; kernels force on certain machines stil old_memmap (or it can be specified </span>
<span class="quote">&gt; manually on kernel cmdline), where EFI has all its mapping in the </span>
<span class="quote">&gt; userspace range.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And that explodes, as those get marked NX in the kernel pagetables.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve spent most of today tracking this down (the legacy EFI mmap is </span>
<span class="quote">&gt; horrid); the patch below is confirmed to fix it both on current upstream </span>
<span class="quote">&gt; kernel, as well as on original-KAISER based kernels (Hugh&#39;s backport) in </span>
<span class="quote">&gt; cases old_memmap is used by EFI.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not super happy about this, but I din&#39;t really want to extend the </span>
<span class="quote">&gt; _set_pgd() code to always figure out whether it&#39;s dealing wih low EFI </span>
<span class="quote">&gt; mapping or not, as that would be way too much overhead just for this </span>
<span class="quote">&gt; one-off call during boot.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; From: Jiri Kosina &lt;jkosina@suse.cz&gt;</span>
<span class="quote">&gt; Subject: [PATCH] PTI: unbreak EFI old_memmap</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; old_memmap&#39;s efi_call_phys_prolog() calls set_pgd() with swapper PGD that </span>
<span class="quote">&gt; has PAGE_USER set, which makes PTI set NX on it, and therefore EFI can&#39;t </span>
<span class="quote">&gt; execute it&#39;s code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fix that by forcefully clearing _PAGE_NX from the PGD (this can&#39;t be done</span>
<span class="quote">&gt; by the pgprot API).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; _PAGE_NX will be automatically reintroduced in efi_call_phys_epilog(), as </span>
<span class="quote">&gt; _set_pgd() will again notice that this is _PAGE_USER, and set _PAGE_NX on </span>
<span class="quote">&gt; it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Jiri Kosina &lt;jkosina@suse.cz&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/platform/efi/efi_64.c |    6 ++++++</span>
<span class="quote">&gt;  1 file changed, 6 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; @@ -95,6 +95,12 @@ pgd_t * __init efi_call_phys_prolog(void</span>
<span class="quote">&gt;  		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;  		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt;  		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="quote">&gt; +		 *</span>
<span class="quote">&gt; +		 * Will be brought back automatically in _epilog()</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>

Do you mean NX bit will be brought back later? I&#39;m asking this because
I tested this patch which it fixed the boot panic issue but the system
will hang when rebooting the system, because rebooting will also call efi
then panic as NS bit is set.

[ 1911.622675] BUG: unable to handle kernel paging request at 00000000008041c0
[ 1911.629880] IP: [&lt;00000000008041c0&gt;] 0x8041bf
[ 1911.634389] PGD 80000010272cb067 PUD 2025178067 PMD 10272d8067 PTE 804063
[ 1911.641472] Oops: 0011 [#1] SMP
[ 1911.711748] Modules linked in: bum(O) ip_set nfnetlink prio(O) nat(O) vport_vxlan(O) openvswitch(O) nf_defrag_ipv6 gre kboxdriver(O) kbox(O) signo_catch(O) vfat fat tg3 intel_powerclamp coretemp intel_rapl crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel i2c_i801 kvm_intel(O) ptp lrw gf128mul i2c_core glue_helper ablk_helper pps_core kvm(O) cryptd iTCO_wdt iTCO_vendor_support sg pcspkr lpc_ich mfd_core sb_edac mei_me edac_core mei shpchp acpi_power_meter acpi_pad remote_trigger(O) nf_conntrack_ipv4 nf_defrag_ipv4 vhost_net(O) tun(O) vhost(O) macvtap macvlan vfio_pci irqbypass vfio_iommu_type1 vfio xt_sctp nf_conntrack_proto_sctp nf_nat_proto_sctp nf_nat nf_conntrack sctp libcrc32c ip_tables ext3 mbcache jbd sr_mod sd_mod cdrom lpfc crc_t10dif ahci crct10dif_generic crct10dif_pclmul libahci scsi_transport_fc scsi_tgt crct10dif_common libata usb_storage megaraid_sas dm_mod [last unloaded: dev_connlimit]
[ 1911.796711] CPU: 0 PID: 12033 Comm: reboot Tainted: G           OE  ---- -------   3.10.0-327.61.59.66_22.x86_64 #1
[ 1911.807449] Hardware name: Huawei RH2288H V3/BC11HGSA0, BIOS 3.79 11/07/2017
[ 1911.814702] task: ffff881025a91700 ti: ffff8810267fc000 task.ti: ffff8810267fc000
[ 1911.822401] RIP: 0010:[&lt;00000000008041c0&gt;]  [&lt;00000000008041c0&gt;] 0x8041bf
[ 1911.829407] RSP: 0018:ffff8810267ffd50  EFLAGS: 00010086
[ 1911.834877] RAX: 00000000008041c0 RBX: 0000000000000000 RCX: ffffffffff425000
[ 1911.842220] RDX: ffff8820a4e40000 RSI: 000000000000c000 RDI: 0000002024e40000
[ 1911.849563] RBP: ffff8810267ffd60 R08: ffff882024e40000 R09: 0000000000000000
[ 1911.856908] R10: ffffffff81a8f300 R11: ffff8810267ffaae R12: 0000000028121969
[ 1911.864250] R13: ffffffff819aa8a0 R14: 0000000000000cf9 R15: 0000000000000000
[ 1911.871596] FS:  00007f89d6143880(0000) GS:ffff881040400000(0000) knlGS:0000000000000000
[ 1911.879921] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[ 1911.885836] CR2: 00000000008041c0 CR3: 0000002024e40000 CR4: 00000000001607f0
[ 1911.893180] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[ 1911.900522] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
[ 1911.907863] Call Trace:
[ 1911.910384]  [&lt;ffffffff810241ab&gt;] ? tboot_shutdown+0x5b/0x140
[ 1911.916298]  [&lt;ffffffff8104723c&gt;] native_machine_emergency_restart+0x4c/0x250
[ 1911.923641]  [&lt;ffffffff8104c102&gt;] ? disconnect_bsp_APIC+0x82/0xc0
[ 1911.929913]  [&lt;ffffffff81046e17&gt;] native_machine_restart+0x37/0x40
[ 1911.936273]  [&lt;ffffffff810470ef&gt;] machine_restart+0xf/0x20
[ 1911.941923]  [&lt;ffffffff8109af95&gt;] kernel_restart+0x45/0x60
[ 1911.947570]  [&lt;ffffffff8109b1d9&gt;] SYSC_reboot+0x229/0x260
[ 1911.953132]  [&lt;ffffffff811ef665&gt;] ? vfs_writev+0x35/0x60
[ 1911.958603]  [&lt;ffffffff8109b27e&gt;] SyS_reboot+0xe/0x10
[ 1911.963806]  [&lt;ffffffff8165e43d&gt;] system_call_fastpath+0x16/0x1b
[ 1911.969987] Code:  Bad RIP value.
[ 1911.973448] RIP  [&lt;00000000008041c0&gt;] 0x8041bf
[ 1911.978044]  RSP &lt;ffff8810267ffd50&gt;
[ 1911.990106] CR2: 00000000008041c0
[ 1912.001889] ---[ end trace e8475aee26ff7d9f ]---
[ 1912.408111] Kernel panic - not syncing: Fatal exception

Thanks
Hanjun
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -95,6 +95,12 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void</span>
 		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);
 		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);
 		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));
<span class="p_add">+		/*</span>
<span class="p_add">+		 * pgprot API doesn&#39;t clear it for PGD</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * Will be brought back automatically in _epilog()</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		pgd_offset_k(pgd * PGDIR_SIZE)-&gt;pgd &amp;= ~_PAGE_NX;</span>
 	}
 	__flush_tlb_all();
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



