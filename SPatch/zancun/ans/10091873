
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part2,v9,26/38] KVM: SVM: VMRUN should use associated ASID when SEV is enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part2,v9,26/38] KVM: SVM: VMRUN should use associated ASID when SEV is enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 5, 2017, 1:04 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171205010438.5773-27-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10091873/mbox/"
   >mbox</a>
|
   <a href="/patch/10091873/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10091873/">/patch/10091873/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7BCFA60327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:09:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 709E5294CE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:09:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6570E294DE; Tue,  5 Dec 2017 01:09:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B0B70294CE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:09:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752774AbdLEBJz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Dec 2017 20:09:55 -0500
Received: from mail-bn3nam01on0083.outbound.protection.outlook.com
	([104.47.33.83]:27456
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752585AbdLEBFw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Dec 2017 20:05:52 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=r7tAaIktcIGr5PlSp/ejplXMHnIccEFUdw94l4vFZOo=;
	b=lI6BX0c1H5ITY+2tEYPPqvI8U0uxM48m14LkdIoMV0pZT+JnsWr2Fgq2prX30SYi/4xRWtzMDz1B+DRkbnw02TV1F1Tl6tWclkhLEOMx/FggCeOi4SuFbmkI8dY8QFWzHo+r7yhONs3eaH2yqWH4gkxwk9CEbsKlhsDabjZZ71k=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from wsp141597wss.amd.com (165.204.78.1) by
	CY1PR12MB0149.namprd12.prod.outlook.com (10.161.173.19) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.282.5; Tue, 5 Dec 2017 01:05:17 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: kvm@vger.kernel.org, linux-kernel@vger.kernel.org, x86@kernel.org
Cc: bp@alien8.de, Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [Part2 PATCH v9 26/38] KVM: SVM: VMRUN should use associated ASID
	when SEV is enabled
Date: Mon,  4 Dec 2017 19:04:26 -0600
Message-Id: &lt;20171205010438.5773-27-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20171205010438.5773-1-brijesh.singh@amd.com&gt;
References: &lt;20171205010438.5773-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: CY4PR0601CA0087.namprd06.prod.outlook.com (52.132.96.156)
	To CY1PR12MB0149.namprd12.prod.outlook.com (10.161.173.19)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 7985bcaa-16a0-4a23-3c17-08d53b7c4060
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(5600026)(4604075)(4534020)(4602075)(4627115)(201703031133081)(201702281549075)(48565401081)(2017052603286);
	SRVR:CY1PR12MB0149; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0149;
	3:9WuYwmFAH47D9AgUUpxdZpu43ef6y2u4O4EOr9M2C3Z5fWSrNavBbL+ccmtF5cnfSutSeh2kEKzjTzR0x6foJPCIVtS+LBO52h+5frRDEm3R7xCYqWsgXVyf7CRP19UeaFhEnUwIkcHe0zkXej4TUByuRHZtaYon6qDb8kA90JfgGGTJp+xGz1t7SlQUy+YLe1zXKNbsarkIYSvpdNzZ35wdx7gTS78+ht39LS7xXoXjB5XUsPQKUgL7seh8CdOd;
	25:To9d1NlBhm7Wtv4jfMz7D5ghF0oRLQoK3qFNgtnvcSOhH2duXF6KbxzxrUcGsaoxYO6w+cgb86Cu32+iryzTeLmX6SbROPgIPR5XzOEKX120Tz9rvruwWMVowq7JRU2wZDFK9t4Lc0yzxAk3IcX/cnA/eu8TS85DDkyDUhQ+wAFGkfTJGrj3ZuXfs81WRL/TPmKYEeDdaY+8wUwS3rAH5fSmMMadm3If/t4hAJkXL/lvqLHfl1fQ4ei94kqDW6ULut9EZf7geFz40GcOv1xG5Vlh228NRMdNEG7bDHlEGiIj2EQUQfynXa3e7PIUX5Qwai18wMsYXb3V4hjsVQE/nw==;
	31:6GDeZsSnRE4OHiWwlib8IERpMe9qANa9T6DsdZvGuzBBI83p257Jz4UET38Y2NvaULpgADn0jsfAU06RJBKdsA7rV1MG2jIRLIr31mmNguHF1ODvhbZGES2sun/9n8fYOH674vNvjwAuNUAIxkbJ3mL9M9gUxk+NtJBo2njpkTM24Gk+jWm2xuZaLcenLbYn+VaGAnCSKRlTebE8nqhdqJr/mFhxIQILcSmAyvYDUPk=
X-MS-TrafficTypeDiagnostic: CY1PR12MB0149:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0149;
	20:CaxwN9sbK6soh6epZD6gyI8x5Dm65BjWyXMupiBC8cVB9wZ55mBsxntfriMrFlz/XaUjt2mJAn8Llzg7INSfh8PeujLnACtbkoP+R9JHyhvi8SI5UDiDrowJU9md+QVBQuhEtHp41Wd+zOIKAtn3HxOWWIi0tbl/C+W95asuejtDXZ5v4xVkLDGGM+Cx6OlGetMQxPF13iSI4DOD4TKVldl9Tfd2/YOF2i2WQ0WZn8tWCB8mXcDv9kjXJ6aVf5LakA6U888WKl1VALxUGR7+gFkj6oLWIj5WNGzfRVBYBuCV4vBeeiSUaf8u0Tq0BG6DNk6FbFiXWdRINTAIZFQP3RtOHTtZxd3LC4tXvyXi4t+zMg9Y4wP88OxDppAgoizP0PCv9CpaH5iBk/JLt7k+zuyEOeK/nVpVlehUPmuO4SB7/AfDKxTKpBz+j44zPpgsi5VAyy0Ry236kkuRgDlHK5mCM5lRBiUD/56GcjeoaHATRtAEWJZBFBShIijANUFj;
	4:ltJe3KpUkhBqcWGTYATABrT3EyicrGD8/7W1pxeqbkr0lq1UYeu57d81+VvP0yYbWNKUbMdLmOkRBavMYj6xbat0wc/jV5t8qUnSjzW443uFgpwrX0oyXX8LR9YMbenrTCqNHSWvO8uivaE0eq6Bsuti9y8eOrO3eoH8SHWOfm2wcsoN743IuZxd/6akQFjvAXdXml0NHlwX4bziIE9N63EiEIawUgK0u5+aUawXWejrt2fclrqdlKWpIaCqjMok++Rkc25TID3FDiYc+YObLr+HBWogLK1S19vALeTHPgUyUCRNXSS17bIs0nOv9nmOKgG20pWIAjGlGaC4JRrhhg==
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB0149FB47F7530861444A5E7AE53D0@CY1PR12MB0149.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040450)(2401047)(5005006)(8121501046)(93006095)(93001095)(10201501046)(3002001)(3231022)(6055026)(6041248)(20161123558100)(20161123555025)(20161123562025)(20161123564025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(6072148)(201708071742011);
	SRVR:CY1PR12MB0149; BCL:0; PCL:0;
	RULEID:(100000803101)(100110400095); SRVR:CY1PR12MB0149; 
X-Forefront-PRVS: 0512CC5201
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(366004)(39860400002)(346002)(376002)(189002)(199003)(16526018)(189998001)(106356001)(478600001)(7416002)(2870700001)(101416001)(23676004)(52116002)(97736004)(86362001)(7696005)(33646002)(54906003)(25786009)(105586002)(76176011)(316002)(2950100002)(6666003)(7736002)(2906002)(6486002)(50226002)(81166006)(81156014)(8936002)(53936002)(8676002)(4326008)(1076002)(305945005)(66066001)(6116002)(53416004)(5660300001)(47776003)(68736007)(3846002)(50466002)(36756003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0149;
	H:wsp141597wss.amd.com; FPR:; SPF:None; PTR:InfoNoRecords;
	MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTFQUjEyTUIwMTQ5OzIzOnByL1VnazY0K3psVTcrV2VzeTIrZjlQV0h1?=
	=?utf-8?B?Q2Vuc01jVGdrNHpQY3Zza2tGNXFEaGNUdDNybkMxQ3FSU3VpRWk3UE1PQUlK?=
	=?utf-8?B?Z0dnQjNUMjM1bnRFdS9lODZVVlppSFl0elBPMlRWeGZkSDlibEhIbmxybGp6?=
	=?utf-8?B?N1kvMTNBL1oxaTNWcWRzaVNVUmxsNHdWbnNId3dkTmhzYWYvT0d3aEJOekgy?=
	=?utf-8?B?YzRWaUhQbXphYmdFS0ZHRUFyYnArZ1hVYjlNaTJMT3BvUkdDcGgvTzk2bUVE?=
	=?utf-8?B?WnZJZG9JRjBCUGp3eEc1dFlIRG9MTFZEeDVIc3RrRU85Z3ZJS3hueW9obWtQ?=
	=?utf-8?B?MFdmeVlVSENaY2VIL09JMUJRWDl0V1lDeTV3ekpyeUpUdlk2eUlMcFdMd3lv?=
	=?utf-8?B?VFBOWlZvWHl4Y25iaUpuUFFya1Rwd2YwdHg4SXlHWWJGRklYODZvbVRhWHlm?=
	=?utf-8?B?MGhaMVhkR0lBZFFtVXhoQis1VzhCdzM3MDFtTmZtMTh2dmZsaU1xQlU0Ni9H?=
	=?utf-8?B?MnRFRjE4OGFoK243N1Q3UVgwSXJkR1BqMk92UE1uck5DbG92ZjVpMFRzaUJo?=
	=?utf-8?B?YVA3aXJqWmhMeXJDYkRWREQzbExkRWY4RmZReCt0cXNDOFYyQ1dXbVRIbGFS?=
	=?utf-8?B?VFJVbzBEYVd5MHZTVWlPM0JkdmlyK25sUlFMSkhnM0tqTEhzbTMrV01VNk1C?=
	=?utf-8?B?L1dXUHRLaWQ3a200eHliZ3JOeXhmTmJ4ZU9VQlJHV211TlBPWC9PYUdwb3VN?=
	=?utf-8?B?ME1zUnRHc2Z3MEY5UE5XbkZwaFU4TWhVcHVycGcrYXJ6UHRxQTBRcUFqU3dG?=
	=?utf-8?B?ZW5pSjZyRXB3dEFYYkpEbkdKY2pVWXNKK3laWEpZWCtuVktIN2p3TUQraFB6?=
	=?utf-8?B?ZUQrbXlMblh6aHBpZG83K3VMdFdtRTl3RFVxWndQYjZ6YnB4alEzekRtTm5s?=
	=?utf-8?B?MUFrbjFBd1BJQjc5OWliU0c5UHJGRFZzOUJ6azk0N2crVjRTTXhOeXdiS0ZQ?=
	=?utf-8?B?UUdBUHI5azk1MzlvRkppaWdXaHZveFRpeUpubGVyUnFIMkhBd1lqd2V6SndZ?=
	=?utf-8?B?SXoreC9nY056aVF4WU9teGNNZGROSE13cU5kUHNVNGFFb0k5VUh3OGV1NStE?=
	=?utf-8?B?c0kvU2w4bm9jeUtiUWEzVmhkR1BDeld1VEdDWlFrYUxrbi9ZYTlZcTJ2QmNs?=
	=?utf-8?B?c0VhTXpQODVoSGdKN2pmblZrV3c4Q1VHVkxua3lnYnpKVFZ6SkJDQ2hiYTgr?=
	=?utf-8?B?a0Z2cmhocHJwYTlGeHVxK1BlcXNWWTMzSEw1VFh1cTEzU2lQdVB5NFB4c2h3?=
	=?utf-8?B?UzdTV3dabUhxM1NoQ0c1T3FDbDByZlp6cjl4RkIxMmtkWjNJdml6M2ZMNE9Q?=
	=?utf-8?B?WjRrcGk1Y05XL01Od1IyUTdjc29hRVhNK0cvd1ptcUs3amI0YXovenlnOU11?=
	=?utf-8?B?K3JXZVdBY0srWldJQ0dYOU1mNXZnK1ZWYjdUWDJzSWxWeVJVcTNVcGhyRmxK?=
	=?utf-8?Q?Ppk8AD5l85Gy0+B1j5cgrpNtg=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0149;
	6:CH2tuXi+1QrvG2sVgOSdeIpANFQ9TGOE4uATMUqMA020FNa2kT2eIt5mBOLh69H+0X1NgLb5P//kYzaaLwWfKOXEyJoFC2OB+dV7YsbsL5M4M0MOVmOz6I8rcz7j912PxnIUwQcp/MfoAqjt/ja7hH9cN8lHP+esBmfbOkM0GNR0HlmJJks34+xh9ysd+RRmZedrq3FXzijQRh/fYUmQIf4SSGjyj5+HtnsW5zKyF+K994gqiQwwesQHgGeX+U9AD3ldAZYICMwF05vSGhC+utcZWFGTJtc4TcKsmovSjsaCzNRk//XF2HrK/o9g7tJlkEHFvOWOSYJMYZ86ANQNqz+HMkw5eRyQYPZEFa8IHdU=;
	5:Vh4oyv/YwKL+NXoj8bySRKCYsergadXstWY6G89zACG0JXVyBjXN7a1/NZPsoVXTrLQP5OyNVf1eOo/1XI1fPThp0cOX6zticmlO+ZCKK/AtiAFjXrjje/2bhV9WXdr6Qs7xDd7U6A5L3z4iWMPNfVesugdNrZ+m95Z3xwP9Nag=;
	24:6J3SiIGchyErfpvd9RgUIR7X4NbdY6TWKugCx4lohOzVA7ii/5xzN/zqy7sjB0YM8J+hE8GNa0RGO1RmwSw6jETQaG84sIj8/lhHi+mag+s=;
	7:Wl/Wtizzt6waqIUhIyQGyoruPv72VC77xPPN/6HmiL7rISwBwnfRA0BXRuOvuN9HN4XDJysUI4wbO9VMbixMSUR8XIM5mFdwGWS7scBfJDnVsE12YsOYI1ZBcvaKVQq2Xw1LuOOaix0K5L3ysLnuBiM3m6vM292oFHaniK2JifRNp8cRmT0G0urVGoi6bUf9o6i95HDLw1wTtDox3TjjVuqPHAeC3di6rDf3vv5POu95IGSTvZHs8idNwOWfume+
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0149;
	20:bjIroiKcgV7jmUhMj5G2pAUnK3ARSXCqMMpQfdCxIe/Fq5zXEApU4j1vkrwnWxWwxbS7mLHjQRkMXNwfQSRlbATAo+fJZAx7xTseZpD5jOeUtyWUWV/nuQCZmsdW50aOGeNDRJbicchHUS61VgAeruWdRPZ8io1XHr8uFiFLf4u9OfhR4/qRXQIxmLPGxL7sXFUTSHdjx4TZ7mHw168hQ+O51UOl/RfonVKwvOGq7zpsE/rFxG0cl6AkXDQIHsbD
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 05 Dec 2017 01:05:17.8731
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 7985bcaa-16a0-4a23-3c17-08d53b7c4060
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0149
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Dec. 5, 2017, 1:04 a.m.</div>
<pre class="content">
SEV hardware uses ASIDs to associate a memory encryption key with a
guest VM. During guest creation, a SEV VM uses the SEV_CMD_ACTIVATE
command to bind a particular ASID to the guest. Lets make sure that the
VMCB is programmed with the bound ASID before a VMRUN.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;
Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
---
 arch/x86/kvm/svm.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 56 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index 51186107eb22..cdbdc86d7aee 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -213,6 +213,9 @@</span> <span class="p_context"> struct vcpu_svm {</span>
 	 */
 	struct list_head ir_list;
 	spinlock_t ir_list_lock;
<span class="p_add">+</span>
<span class="p_add">+	/* which host CPU was used for running this vcpu */</span>
<span class="p_add">+	unsigned int last_cpu;</span>
 };
 
 /*
<span class="p_chunk">@@ -341,6 +344,13 @@</span> <span class="p_context"> static inline bool sev_guest(struct kvm *kvm)</span>
 	return sev-&gt;active;
 }
 
<span class="p_add">+static inline int sev_get_asid(struct kvm *kvm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_sev_info *sev = &amp;kvm-&gt;arch.sev_info;</span>
<span class="p_add">+</span>
<span class="p_add">+	return sev-&gt;asid;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void mark_all_dirty(struct vmcb *vmcb)
 {
 	vmcb-&gt;control.clean = 0;
<span class="p_chunk">@@ -551,6 +561,9 @@</span> <span class="p_context"> struct svm_cpu_data {</span>
 	struct kvm_ldttss_desc *tss_desc;
 
 	struct page *save_area;
<span class="p_add">+</span>
<span class="p_add">+	/* index = sev_asid, value = vmcb pointer */</span>
<span class="p_add">+	struct vmcb **sev_vmcbs;</span>
 };
 
 static DEFINE_PER_CPU(struct svm_cpu_data *, svm_data);
<span class="p_chunk">@@ -864,6 +877,7 @@</span> <span class="p_context"> static void svm_cpu_uninit(int cpu)</span>
 		return;
 
 	per_cpu(svm_data, raw_smp_processor_id()) = NULL;
<span class="p_add">+	kfree(sd-&gt;sev_vmcbs);</span>
 	__free_page(sd-&gt;save_area);
 	kfree(sd);
 }
<span class="p_chunk">@@ -877,11 +891,18 @@</span> <span class="p_context"> static int svm_cpu_init(int cpu)</span>
 	if (!sd)
 		return -ENOMEM;
 	sd-&gt;cpu = cpu;
<span class="p_del">-	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	r = -ENOMEM;
<span class="p_add">+	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	if (!sd-&gt;save_area)
 		goto err_1;
 
<span class="p_add">+	if (svm_sev_enabled()) {</span>
<span class="p_add">+		r = -ENOMEM;</span>
<span class="p_add">+		sd-&gt;sev_vmcbs = kmalloc((max_sev_asid + 1) * sizeof(void *), GFP_KERNEL);</span>
<span class="p_add">+		if (!sd-&gt;sev_vmcbs)</span>
<span class="p_add">+			goto err_1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	per_cpu(svm_data, cpu) = sd;
 
 	return 0;
<span class="p_chunk">@@ -1498,10 +1519,16 @@</span> <span class="p_context"> static int avic_init_backing_page(struct kvm_vcpu *vcpu)</span>
 
 static void __sev_asid_free(int asid)
 {
<span class="p_del">-	int pos;</span>
<span class="p_add">+	struct svm_cpu_data *sd;</span>
<span class="p_add">+	int cpu, pos;</span>
 
 	pos = asid - 1;
 	clear_bit(pos, sev_asid_bitmap);
<span class="p_add">+</span>
<span class="p_add">+	for_each_possible_cpu(cpu) {</span>
<span class="p_add">+		sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+		sd-&gt;sev_vmcbs[pos] = NULL;</span>
<span class="p_add">+	}</span>
 }
 
 static void sev_asid_free(struct kvm *kvm)
<span class="p_chunk">@@ -4466,12 +4493,39 @@</span> <span class="p_context"> static void reload_tss(struct kvm_vcpu *vcpu)</span>
 	load_TR_desc();
 }
 
<span class="p_add">+static void pre_sev_run(struct vcpu_svm *svm, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+	int asid = sev_get_asid(svm-&gt;vcpu.kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Assign the asid allocated with this SEV guest */</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.asid = asid;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Flush guest TLB:</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * 1) when different VMCB for the same ASID is to be run on the same host CPU.</span>
<span class="p_add">+	 * 2) or this VMCB was executed on different host CPU in previous VMRUNs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sd-&gt;sev_vmcbs[asid] == svm-&gt;vmcb &amp;&amp;</span>
<span class="p_add">+	    svm-&gt;last_cpu == cpu)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm-&gt;last_cpu = cpu;</span>
<span class="p_add">+	sd-&gt;sev_vmcbs[asid] = svm-&gt;vmcb;</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.tlb_ctl = TLB_CONTROL_FLUSH_ASID;</span>
<span class="p_add">+	mark_dirty(svm-&gt;vmcb, VMCB_ASID);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void pre_svm_run(struct vcpu_svm *svm)
 {
 	int cpu = raw_smp_processor_id();
 
 	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
 
<span class="p_add">+	if (sev_guest(svm-&gt;vcpu.kvm))</span>
<span class="p_add">+		return pre_sev_run(svm, cpu);</span>
<span class="p_add">+</span>
 	/* FIXME: handle wraparound of asid_generation */
 	if (svm-&gt;asid_generation != sd-&gt;asid_generation)
 		new_asid(svm, sd);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



