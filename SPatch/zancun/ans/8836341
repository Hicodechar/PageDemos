
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,13/17] kvm-arm: Add stage2 page table modifiers - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,13/17] kvm-arm: Add stage2 page table modifiers</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=114661">Suzuki K. Poulose</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 14, 2016, 1:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460640065-27658-14-git-send-email-suzuki.poulose@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8836341/mbox/"
   >mbox</a>
|
   <a href="/patch/8836341/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8836341/">/patch/8836341/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 7589E9F36E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 13:23:48 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id A0AA720272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 13:23:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id AD9182017E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 13:23:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932522AbcDNNXk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 14 Apr 2016 09:23:40 -0400
Received: from foss.arm.com ([217.140.101.70]:42588 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932383AbcDNNV5 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 14 Apr 2016 09:21:57 -0400
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id C21E6594;
	Thu, 14 Apr 2016 06:20:42 -0700 (PDT)
Received: from e106634-lin.cambridge.arm.com (e106634-lin.cambridge.arm.com
	[10.1.209.136])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id
	4F53B3F25F; Thu, 14 Apr 2016 06:21:55 -0700 (PDT)
From: Suzuki K Poulose &lt;suzuki.poulose@arm.com&gt;
To: linux-arm-kernel@lists.infradead.org
Cc: kvm@vger.kernel.org, marc.zyngier@arm.com,
	christoffer.dall@linaro.org, mark.rutland@arm.com,
	will.deacon@arm.com, catalin.marinas@arm.com,
	linux-kernel@vger.kernel.org, kvmarm@lists.cs.columbia.edu,
	Suzuki K Poulose &lt;suzuki.poulose@arm.com&gt;
Subject: [PATCH v2 13/17] kvm-arm: Add stage2 page table modifiers
Date: Thu, 14 Apr 2016 14:21:01 +0100
Message-Id: &lt;1460640065-27658-14-git-send-email-suzuki.poulose@arm.com&gt;
X-Mailer: git-send-email 1.7.9.5
In-Reply-To: &lt;1460640065-27658-1-git-send-email-suzuki.poulose@arm.com&gt;
References: &lt;1460640065-27658-1-git-send-email-suzuki.poulose@arm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=114661">Suzuki K. Poulose</a> - April 14, 2016, 1:21 p.m.</div>
<pre class="content">
Now that the hyp page table is handled by different set of
routines, rename the original shared routines to stage2 handlers.
Also make explicit use of the stage2 page table helpers.

unmap_range has been merged to existing unmap_stage2_range.

Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;
<span class="acked-by">Acked-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Suzuki K Poulose &lt;suzuki.poulose@arm.com&gt;</span>
---
 arch/arm/kvm/mmu.c |   97 ++++++++++++++++++++++++----------------------------
 1 file changed, 44 insertions(+), 53 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="p_header">index af526f6..f2a6d9b 100644</span>
<span class="p_header">--- a/arch/arm/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/kvm/mmu.c</span>
<span class="p_chunk">@@ -152,26 +152,26 @@</span> <span class="p_context"> static void *mmu_memory_cache_alloc(struct kvm_mmu_memory_cache *mc)</span>
 	return p;
 }
 
<span class="p_del">-static void clear_pgd_entry(struct kvm *kvm, pgd_t *pgd, phys_addr_t addr)</span>
<span class="p_add">+static void clear_stage2_pgd_entry(struct kvm *kvm, pgd_t *pgd, phys_addr_t addr)</span>
 {
<span class="p_del">-	pud_t *pud_table __maybe_unused = pud_offset(pgd, 0);</span>
<span class="p_del">-	pgd_clear(pgd);</span>
<span class="p_add">+	pud_t *pud_table __maybe_unused = stage2_pud_offset(pgd, 0UL);</span>
<span class="p_add">+	stage2_pgd_clear(pgd);</span>
 	kvm_tlb_flush_vmid_ipa(kvm, addr);
<span class="p_del">-	pud_free(NULL, pud_table);</span>
<span class="p_add">+	stage2_pud_free(pud_table);</span>
 	put_page(virt_to_page(pgd));
 }
 
<span class="p_del">-static void clear_pud_entry(struct kvm *kvm, pud_t *pud, phys_addr_t addr)</span>
<span class="p_add">+static void clear_stage2_pud_entry(struct kvm *kvm, pud_t *pud, phys_addr_t addr)</span>
 {
<span class="p_del">-	pmd_t *pmd_table = pmd_offset(pud, 0);</span>
<span class="p_del">-	VM_BUG_ON(pud_huge(*pud));</span>
<span class="p_del">-	pud_clear(pud);</span>
<span class="p_add">+	pmd_t *pmd_table __maybe_unused = stage2_pmd_offset(pud, 0);</span>
<span class="p_add">+	VM_BUG_ON(stage2_pud_huge(*pud));</span>
<span class="p_add">+	stage2_pud_clear(pud);</span>
 	kvm_tlb_flush_vmid_ipa(kvm, addr);
<span class="p_del">-	pmd_free(NULL, pmd_table);</span>
<span class="p_add">+	stage2_pmd_free(pmd_table);</span>
 	put_page(virt_to_page(pud));
 }
 
<span class="p_del">-static void clear_pmd_entry(struct kvm *kvm, pmd_t *pmd, phys_addr_t addr)</span>
<span class="p_add">+static void clear_stage2_pmd_entry(struct kvm *kvm, pmd_t *pmd, phys_addr_t addr)</span>
 {
 	pte_t *pte_table = pte_offset_kernel(pmd, 0);
 	VM_BUG_ON(pmd_thp_or_huge(*pmd));
<span class="p_chunk">@@ -201,7 +201,7 @@</span> <span class="p_context"> static void clear_pmd_entry(struct kvm *kvm, pmd_t *pmd, phys_addr_t addr)</span>
  * the corresponding TLBs, we call kvm_flush_dcache_p*() to make sure
  * the IO subsystem will never hit in the cache.
  */
<span class="p_del">-static void unmap_ptes(struct kvm *kvm, pmd_t *pmd,</span>
<span class="p_add">+static void unmap_stage2_ptes(struct kvm *kvm, pmd_t *pmd,</span>
 		       phys_addr_t addr, phys_addr_t end)
 {
 	phys_addr_t start_addr = addr;
<span class="p_chunk">@@ -223,19 +223,19 @@</span> <span class="p_context"> static void unmap_ptes(struct kvm *kvm, pmd_t *pmd,</span>
 		}
 	} while (pte++, addr += PAGE_SIZE, addr != end);
 
<span class="p_del">-	if (kvm_pte_table_empty(kvm, start_pte))</span>
<span class="p_del">-		clear_pmd_entry(kvm, pmd, start_addr);</span>
<span class="p_add">+	if (stage2_pte_table_empty(start_pte))</span>
<span class="p_add">+		clear_stage2_pmd_entry(kvm, pmd, start_addr);</span>
 }
 
<span class="p_del">-static void unmap_pmds(struct kvm *kvm, pud_t *pud,</span>
<span class="p_add">+static void unmap_stage2_pmds(struct kvm *kvm, pud_t *pud,</span>
 		       phys_addr_t addr, phys_addr_t end)
 {
 	phys_addr_t next, start_addr = addr;
 	pmd_t *pmd, *start_pmd;
 
<span class="p_del">-	start_pmd = pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	start_pmd = pmd = stage2_pmd_offset(pud, addr);</span>
 	do {
<span class="p_del">-		next = kvm_pmd_addr_end(addr, end);</span>
<span class="p_add">+		next = stage2_pmd_addr_end(addr, end);</span>
 		if (!pmd_none(*pmd)) {
 			if (pmd_thp_or_huge(*pmd)) {
 				pmd_t old_pmd = *pmd;
<span class="p_chunk">@@ -247,57 +247,64 @@</span> <span class="p_context"> static void unmap_pmds(struct kvm *kvm, pud_t *pud,</span>
 
 				put_page(virt_to_page(pmd));
 			} else {
<span class="p_del">-				unmap_ptes(kvm, pmd, addr, next);</span>
<span class="p_add">+				unmap_stage2_ptes(kvm, pmd, addr, next);</span>
 			}
 		}
 	} while (pmd++, addr = next, addr != end);
 
<span class="p_del">-	if (kvm_pmd_table_empty(kvm, start_pmd))</span>
<span class="p_del">-		clear_pud_entry(kvm, pud, start_addr);</span>
<span class="p_add">+	if (stage2_pmd_table_empty(start_pmd))</span>
<span class="p_add">+		clear_stage2_pud_entry(kvm, pud, start_addr);</span>
 }
 
<span class="p_del">-static void unmap_puds(struct kvm *kvm, pgd_t *pgd,</span>
<span class="p_add">+static void unmap_stage2_puds(struct kvm *kvm, pgd_t *pgd,</span>
 		       phys_addr_t addr, phys_addr_t end)
 {
 	phys_addr_t next, start_addr = addr;
 	pud_t *pud, *start_pud;
 
<span class="p_del">-	start_pud = pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	start_pud = pud = stage2_pud_offset(pgd, addr);</span>
 	do {
<span class="p_del">-		next = kvm_pud_addr_end(addr, end);</span>
<span class="p_del">-		if (!pud_none(*pud)) {</span>
<span class="p_del">-			if (pud_huge(*pud)) {</span>
<span class="p_add">+		next = stage2_pud_addr_end(addr, end);</span>
<span class="p_add">+		if (!stage2_pud_none(*pud)) {</span>
<span class="p_add">+			if (stage2_pud_huge(*pud)) {</span>
 				pud_t old_pud = *pud;
 
<span class="p_del">-				pud_clear(pud);</span>
<span class="p_add">+				stage2_pud_clear(pud);</span>
 				kvm_tlb_flush_vmid_ipa(kvm, addr);
<span class="p_del">-</span>
 				kvm_flush_dcache_pud(old_pud);
<span class="p_del">-</span>
 				put_page(virt_to_page(pud));
 			} else {
<span class="p_del">-				unmap_pmds(kvm, pud, addr, next);</span>
<span class="p_add">+				unmap_stage2_pmds(kvm, pud, addr, next);</span>
 			}
 		}
 	} while (pud++, addr = next, addr != end);
 
<span class="p_del">-	if (kvm_pud_table_empty(kvm, start_pud))</span>
<span class="p_del">-		clear_pgd_entry(kvm, pgd, start_addr);</span>
<span class="p_add">+	if (stage2_pud_table_empty(start_pud))</span>
<span class="p_add">+		clear_stage2_pgd_entry(kvm, pgd, start_addr);</span>
 }
 
<span class="p_del">-</span>
<span class="p_del">-static void unmap_range(struct kvm *kvm, pgd_t *pgdp,</span>
<span class="p_del">-			phys_addr_t start, u64 size)</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * unmap_stage2_range -- Clear stage2 page table entries to unmap a range</span>
<span class="p_add">+ * @kvm:   The VM pointer</span>
<span class="p_add">+ * @start: The intermediate physical base address of the range to unmap</span>
<span class="p_add">+ * @size:  The size of the area to unmap</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Clear a range of stage-2 mappings, lowering the various ref-counts.  Must</span>
<span class="p_add">+ * be called while holding mmu_lock (unless for freeing the stage2 pgd before</span>
<span class="p_add">+ * destroying the VM), otherwise another faulting VCPU may come in and mess</span>
<span class="p_add">+ * with things behind our backs.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void unmap_stage2_range(struct kvm *kvm, phys_addr_t start, u64 size)</span>
 {
 	pgd_t *pgd;
 	phys_addr_t addr = start, end = start + size;
 	phys_addr_t next;
 
<span class="p_del">-	pgd = pgdp + kvm_pgd_index(addr);</span>
<span class="p_add">+	pgd = kvm-&gt;arch.pgd + stage2_pgd_index(addr);</span>
 	do {
<span class="p_del">-		next = kvm_pgd_addr_end(addr, end);</span>
<span class="p_del">-		if (!pgd_none(*pgd))</span>
<span class="p_del">-			unmap_puds(kvm, pgd, addr, next);</span>
<span class="p_add">+		next = stage2_pgd_addr_end(addr, end);</span>
<span class="p_add">+		if (!stage2_pgd_none(*pgd))</span>
<span class="p_add">+			unmap_stage2_puds(kvm, pgd, addr, next);</span>
 	} while (pgd++, addr = next, addr != end);
 }
 
<span class="p_chunk">@@ -792,22 +799,6 @@</span> <span class="p_context"> int kvm_alloc_stage2_pgd(struct kvm *kvm)</span>
 	return 0;
 }
 
<span class="p_del">-/**</span>
<span class="p_del">- * unmap_stage2_range -- Clear stage2 page table entries to unmap a range</span>
<span class="p_del">- * @kvm:   The VM pointer</span>
<span class="p_del">- * @start: The intermediate physical base address of the range to unmap</span>
<span class="p_del">- * @size:  The size of the area to unmap</span>
<span class="p_del">- *</span>
<span class="p_del">- * Clear a range of stage-2 mappings, lowering the various ref-counts.  Must</span>
<span class="p_del">- * be called while holding mmu_lock (unless for freeing the stage2 pgd before</span>
<span class="p_del">- * destroying the VM), otherwise another faulting VCPU may come in and mess</span>
<span class="p_del">- * with things behind our backs.</span>
<span class="p_del">- */</span>
<span class="p_del">-static void unmap_stage2_range(struct kvm *kvm, phys_addr_t start, u64 size)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unmap_range(kvm, kvm-&gt;arch.pgd, start, size);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void stage2_unmap_memslot(struct kvm *kvm,
 				 struct kvm_memory_slot *memslot)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



