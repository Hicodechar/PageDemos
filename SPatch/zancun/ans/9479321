
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,pull] x86 fixes and cleanups for 4.10 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,pull] x86 fixes and cleanups for 4.10</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 18, 2016, 2:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.20.1612181451540.3628@nanos&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9479321/mbox/"
   >mbox</a>
|
   <a href="/patch/9479321/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9479321/">/patch/9479321/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C573D601C0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 18 Dec 2016 14:07:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B8F8528501
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 18 Dec 2016 14:07:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AD5122852C; Sun, 18 Dec 2016 14:07:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7CADF28501
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 18 Dec 2016 14:07:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932625AbcLROHJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 18 Dec 2016 09:07:09 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:51796 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751936AbcLROHI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 18 Dec 2016 09:07:08 -0500
Received: from localhost ([127.0.0.1]) by Galois.linutronix.de with esmtps
	(TLS1.2:DHE_RSA_AES_256_CBC_SHA256:256) (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1cIc6u-0005oV-AW; Sun, 18 Dec 2016 15:06:45 +0100
Date: Sun, 18 Dec 2016 15:04:18 +0100 (CET)
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
cc: LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Subject: [GIT pull] x86 fixes and cleanups for 4.10
Message-ID: &lt;alpine.DEB.2.20.1612181451540.3628@nanos&gt;
User-Agent: Alpine 2.20 (DEB 67 2015-01-07)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Dec. 18, 2016, 2:04 p.m.</div>
<pre class="content">
Linus,

please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

This set of updates contains:

   - Robustification for the logical package managment. Cures the AMD and
     virtualization issues.

   - Put the correct start_cpu() return address on the stack of the idle
     task.

   - Fixups for the fallout of the nodeid &lt;-&gt; cpuid persistent mapping
     modifciations

   - Move the x86/MPX specific mm_struct member to the arch specific
     mm_context where it belongs

   - Cleanups for C89 struct initializers and useless function arguments

Thanks,

	tglx

------------------&gt;
Boris Ostrovsky (2):
      x86/acpi: Use proper macro for invalid node
      ACPI/NUMA: Do not map pxm to node when NUMA is turned off

Josh Poimboeuf (2):
      x86/boot/64: Use &#39;push&#39; instead of &#39;call&#39; in start_cpu()
      x86/boot/64: Push correct start_cpu() return address

Kees Cook (1):
      x86/floppy: Use designated initializers

Kirill A. Shutemov (1):
      x86/mm: Drop unused argument &#39;removed&#39; from sync_global_pgds()

Mark Rutland (1):
      x86/mpx: Move bd_addr to mm_context_t

Thomas Gleixner (2):
      x86/smpboot: Make logical package management more robust
      x86/smpboot: Prevent false positive out of bounds cpumask access warning


 arch/arm64/include/asm/numa.h     |  2 ++
 arch/arm64/mm/numa.c              |  2 +-
 arch/ia64/include/asm/numa.h      |  2 ++
 arch/x86/include/asm/floppy.h     | 20 ++++++-------
 arch/x86/include/asm/mmu.h        |  4 +++
 arch/x86/include/asm/mpx.h        |  4 +--
 arch/x86/include/asm/pgtable_64.h |  3 +-
 arch/x86/kernel/acpi/boot.c       |  2 +-
 arch/x86/kernel/apic/apic.c       | 15 ----------
 arch/x86/kernel/cpu/common.c      | 24 ++++++----------
 arch/x86/kernel/head_64.S         |  5 ++--
 arch/x86/kernel/smpboot.c         | 59 +++++++++++++++------------------------
 arch/x86/mm/fault.c               |  2 +-
 arch/x86/mm/init_64.c             | 24 +++++-----------
 arch/x86/mm/mpx.c                 | 10 +++----
 arch/x86/mm/numa.c                |  2 +-
 arch/x86/xen/smp.c                |  6 ----
 drivers/acpi/numa.c               |  2 +-
 include/linux/cpumask.h           |  5 ++++
 include/linux/mm_types.h          |  4 ---
 20 files changed, 77 insertions(+), 120 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/numa.h b/arch/arm64/include/asm/numa.h</span>
<span class="p_header">index 600887e491fd..bf466d1876e3 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/numa.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/numa.h</span>
<span class="p_chunk">@@ -15,6 +15,8 @@</span> <span class="p_context"> int __node_distance(int from, int to);</span>
 
 extern nodemask_t numa_nodes_parsed __initdata;
 
<span class="p_add">+extern bool numa_off;</span>
<span class="p_add">+</span>
 /* Mappings between node number and cpus on that node. */
 extern cpumask_var_t node_to_cpumask_map[MAX_NUMNODES];
 void numa_clear_node(unsigned int cpu);
<span class="p_header">diff --git a/arch/arm64/mm/numa.c b/arch/arm64/mm/numa.c</span>
<span class="p_header">index 4b32168cf91a..b388a99fea7b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/numa.c</span>
<span class="p_header">+++ b/arch/arm64/mm/numa.c</span>
<span class="p_chunk">@@ -35,7 +35,7 @@</span> <span class="p_context"> static int cpu_to_node_map[NR_CPUS] = { [0 ... NR_CPUS-1] = NUMA_NO_NODE };</span>
 
 static int numa_distance_cnt;
 static u8 *numa_distance;
<span class="p_del">-static bool numa_off;</span>
<span class="p_add">+bool numa_off;</span>
 
 static __init int numa_parse_early_param(char *opt)
 {
<span class="p_header">diff --git a/arch/ia64/include/asm/numa.h b/arch/ia64/include/asm/numa.h</span>
<span class="p_header">index 2db0a6c6daa5..ebef7f40aabb 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/numa.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/numa.h</span>
<span class="p_chunk">@@ -65,6 +65,8 @@</span> <span class="p_context"> extern int paddr_to_nid(unsigned long paddr);</span>
 
 #define local_nodeid (cpu_to_node_map[smp_processor_id()])
 
<span class="p_add">+#define numa_off     0</span>
<span class="p_add">+</span>
 extern void map_cpu_to_node(int cpu, int nid);
 extern void unmap_cpu_from_node(int cpu, int nid);
 extern void numa_clear_node(int cpu);
<span class="p_header">diff --git a/arch/x86/include/asm/floppy.h b/arch/x86/include/asm/floppy.h</span>
<span class="p_header">index 1c7eefe32502..7ec59edde154 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/floppy.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/floppy.h</span>
<span class="p_chunk">@@ -229,18 +229,18 @@</span> <span class="p_context"> static struct fd_routine_l {</span>
 	int (*_dma_setup)(char *addr, unsigned long size, int mode, int io);
 } fd_routine[] = {
 	{
<span class="p_del">-		request_dma,</span>
<span class="p_del">-		free_dma,</span>
<span class="p_del">-		get_dma_residue,</span>
<span class="p_del">-		dma_mem_alloc,</span>
<span class="p_del">-		hard_dma_setup</span>
<span class="p_add">+		._request_dma		= request_dma,</span>
<span class="p_add">+		._free_dma		= free_dma,</span>
<span class="p_add">+		._get_dma_residue	= get_dma_residue,</span>
<span class="p_add">+		._dma_mem_alloc		= dma_mem_alloc,</span>
<span class="p_add">+		._dma_setup		= hard_dma_setup</span>
 	},
 	{
<span class="p_del">-		vdma_request_dma,</span>
<span class="p_del">-		vdma_nop,</span>
<span class="p_del">-		vdma_get_dma_residue,</span>
<span class="p_del">-		vdma_mem_alloc,</span>
<span class="p_del">-		vdma_dma_setup</span>
<span class="p_add">+		._request_dma		= vdma_request_dma,</span>
<span class="p_add">+		._free_dma		= vdma_nop,</span>
<span class="p_add">+		._get_dma_residue	= vdma_get_dma_residue,</span>
<span class="p_add">+		._dma_mem_alloc		= vdma_mem_alloc,</span>
<span class="p_add">+		._dma_setup		= vdma_dma_setup</span>
 	}
 };
 
<span class="p_header">diff --git a/arch/x86/include/asm/mmu.h b/arch/x86/include/asm/mmu.h</span>
<span class="p_header">index 72198c64e646..f9813b6d8b80 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu.h</span>
<span class="p_chunk">@@ -31,6 +31,10 @@</span> <span class="p_context"> typedef struct {</span>
 	u16 pkey_allocation_map;
 	s16 execute_only_pkey;
 #endif
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MPX</span>
<span class="p_add">+	/* address of the bounds directory */</span>
<span class="p_add">+	void __user *bd_addr;</span>
<span class="p_add">+#endif</span>
 } mm_context_t;
 
 #ifdef CONFIG_SMP
<span class="p_header">diff --git a/arch/x86/include/asm/mpx.h b/arch/x86/include/asm/mpx.h</span>
<span class="p_header">index 7a35495275a9..0b416d4cf73b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mpx.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mpx.h</span>
<span class="p_chunk">@@ -59,7 +59,7 @@</span> <span class="p_context"> siginfo_t *mpx_generate_siginfo(struct pt_regs *regs);</span>
 int mpx_handle_bd_fault(void);
 static inline int kernel_managing_mpx_tables(struct mm_struct *mm)
 {
<span class="p_del">-	return (mm-&gt;bd_addr != MPX_INVALID_BOUNDS_DIR);</span>
<span class="p_add">+	return (mm-&gt;context.bd_addr != MPX_INVALID_BOUNDS_DIR);</span>
 }
 static inline void mpx_mm_init(struct mm_struct *mm)
 {
<span class="p_chunk">@@ -67,7 +67,7 @@</span> <span class="p_context"> static inline void mpx_mm_init(struct mm_struct *mm)</span>
 	 * NULL is theoretically a valid place to put the bounds
 	 * directory, so point this at an invalid address.
 	 */
<span class="p_del">-	mm-&gt;bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
<span class="p_add">+	mm-&gt;context.bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
 }
 void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,
 		      unsigned long start, unsigned long end);
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 1cc82ece9ac1..62b775926045 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -116,8 +116,7 @@</span> <span class="p_context"> static inline void native_pgd_clear(pgd_t *pgd)</span>
 	native_set_pgd(pgd, native_make_pgd(0));
 }
 
<span class="p_del">-extern void sync_global_pgds(unsigned long start, unsigned long end,</span>
<span class="p_del">-			     int removed);</span>
<span class="p_add">+extern void sync_global_pgds(unsigned long start, unsigned long end);</span>
 
 /*
  * Conversion functions: convert a page and protection to a page entry,
<span class="p_header">diff --git a/arch/x86/kernel/acpi/boot.c b/arch/x86/kernel/acpi/boot.c</span>
<span class="p_header">index 4764fa56924d..6f65b0eed384 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/boot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/boot.c</span>
<span class="p_chunk">@@ -715,7 +715,7 @@</span> <span class="p_context"> int acpi_map_cpu2node(acpi_handle handle, int cpu, int physid)</span>
 	int nid;
 
 	nid = acpi_get_node(handle);
<span class="p_del">-	if (nid != -1) {</span>
<span class="p_add">+	if (nid != NUMA_NO_NODE) {</span>
 		set_apicid_to_node(physid, nid);
 		numa_set_node(cpu, nid);
 	}
<span class="p_header">diff --git a/arch/x86/kernel/apic/apic.c b/arch/x86/kernel/apic/apic.c</span>
<span class="p_header">index bb47e5eacd44..5b7e43eff139 100644</span>
<span class="p_header">--- a/arch/x86/kernel/apic/apic.c</span>
<span class="p_header">+++ b/arch/x86/kernel/apic/apic.c</span>
<span class="p_chunk">@@ -2160,21 +2160,6 @@</span> <span class="p_context"> int __generic_processor_info(int apicid, int version, bool enabled)</span>
 	}
 
 	/*
<span class="p_del">-	 * This can happen on physical hotplug. The sanity check at boot time</span>
<span class="p_del">-	 * is done from native_smp_prepare_cpus() after num_possible_cpus() is</span>
<span class="p_del">-	 * established.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (topology_update_package_map(apicid, cpu) &lt; 0) {</span>
<span class="p_del">-		int thiscpu = max + disabled_cpus;</span>
<span class="p_del">-</span>
<span class="p_del">-		pr_warning(&quot;APIC: Package limit reached. Processor %d/0x%x ignored.\n&quot;,</span>
<span class="p_del">-			   thiscpu, apicid);</span>
<span class="p_del">-</span>
<span class="p_del">-		disabled_cpus++;</span>
<span class="p_del">-		return -ENOSPC;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
 	 * Validate version
 	 */
 	if (version == 0x0) {
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 729f92ba8224..1f6b50a449ab 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -979,29 +979,21 @@</span> <span class="p_context"> static void x86_init_cache_qos(struct cpuinfo_x86 *c)</span>
 }
 
 /*
<span class="p_del">- * The physical to logical package id mapping is initialized from the</span>
<span class="p_del">- * acpi/mptables information. Make sure that CPUID actually agrees with</span>
<span class="p_del">- * that.</span>
<span class="p_add">+ * Validate that ACPI/mptables have the same information about the</span>
<span class="p_add">+ * effective APIC id and update the package map.</span>
  */
<span class="p_del">-static void sanitize_package_id(struct cpuinfo_x86 *c)</span>
<span class="p_add">+static void validate_apic_and_package_id(struct cpuinfo_x86 *c)</span>
 {
 #ifdef CONFIG_SMP
<span class="p_del">-	unsigned int pkg, apicid, cpu = smp_processor_id();</span>
<span class="p_add">+	unsigned int apicid, cpu = smp_processor_id();</span>
 
 	apicid = apic-&gt;cpu_present_to_apicid(cpu);
<span class="p_del">-	pkg = apicid &gt;&gt; boot_cpu_data.x86_coreid_bits;</span>
 
<span class="p_del">-	if (apicid != c-&gt;initial_apicid) {</span>
<span class="p_del">-		pr_err(FW_BUG &quot;CPU%u: APIC id mismatch. Firmware: %x CPUID: %x\n&quot;,</span>
<span class="p_add">+	if (apicid != c-&gt;apicid) {</span>
<span class="p_add">+		pr_err(FW_BUG &quot;CPU%u: APIC id mismatch. Firmware: %x APIC: %x\n&quot;,</span>
 		       cpu, apicid, c-&gt;initial_apicid);
<span class="p_del">-		c-&gt;initial_apicid = apicid;</span>
 	}
<span class="p_del">-	if (pkg != c-&gt;phys_proc_id) {</span>
<span class="p_del">-		pr_err(FW_BUG &quot;CPU%u: Using firmware package id %u instead of %u\n&quot;,</span>
<span class="p_del">-		       cpu, pkg, c-&gt;phys_proc_id);</span>
<span class="p_del">-		c-&gt;phys_proc_id = pkg;</span>
<span class="p_del">-	}</span>
<span class="p_del">-	c-&gt;logical_proc_id = topology_phys_to_logical_pkg(pkg);</span>
<span class="p_add">+	BUG_ON(topology_update_package_map(c-&gt;phys_proc_id, cpu));</span>
 #else
 	c-&gt;logical_proc_id = 0;
 #endif
<span class="p_chunk">@@ -1132,7 +1124,6 @@</span> <span class="p_context"> static void identify_cpu(struct cpuinfo_x86 *c)</span>
 #ifdef CONFIG_NUMA
 	numa_add_cpu(smp_processor_id());
 #endif
<span class="p_del">-	sanitize_package_id(c);</span>
 }
 
 /*
<span class="p_chunk">@@ -1187,6 +1178,7 @@</span> <span class="p_context"> void identify_secondary_cpu(struct cpuinfo_x86 *c)</span>
 	enable_sep_cpu();
 #endif
 	mtrr_ap_init();
<span class="p_add">+	validate_apic_and_package_id(c);</span>
 }
 
 static __init int setup_noclflush(char *arg)
<span class="p_header">diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S</span>
<span class="p_header">index 90de28841242..b467b14b03eb 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/x86/kernel/head_64.S</span>
<span class="p_chunk">@@ -298,12 +298,13 @@</span> <span class="p_context"> ENTRY(start_cpu)</span>
 	 *	REX.W + FF /5 JMP m16:64 Jump far, absolute indirect,
 	 *		address given in m16:64.
 	 */
<span class="p_del">-	call	1f		# put return address on stack for unwinder</span>
<span class="p_del">-1:	xorq	%rbp, %rbp	# clear frame pointer</span>
<span class="p_add">+	pushq	$.Lafter_lret	# put return address on stack for unwinder</span>
<span class="p_add">+	xorq	%rbp, %rbp	# clear frame pointer</span>
 	movq	initial_code(%rip), %rax
 	pushq	$__KERNEL_CS	# set correct cs
 	pushq	%rax		# target address in negative space
 	lretq
<span class="p_add">+.Lafter_lret:</span>
 ENDPROC(start_cpu)
 
 #include &quot;verify_cpu.S&quot;
<span class="p_header">diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c</span>
<span class="p_header">index 0c37d4fd01b2..46732dc3b73c 100644</span>
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -103,7 +103,6 @@</span> <span class="p_context"> static unsigned int max_physical_pkg_id __read_mostly;</span>
 unsigned int __max_logical_packages __read_mostly;
 EXPORT_SYMBOL(__max_logical_packages);
 static unsigned int logical_packages __read_mostly;
<span class="p_del">-static bool logical_packages_frozen __read_mostly;</span>
 
 /* Maximum number of SMT threads on any online core */
 int __max_smt_threads __read_mostly;
<span class="p_chunk">@@ -273,9 +272,14 @@</span> <span class="p_context"> static void notrace start_secondary(void *unused)</span>
 	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
 }
 
<span class="p_del">-int topology_update_package_map(unsigned int apicid, unsigned int cpu)</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * topology_update_package_map - Update the physical to logical package map</span>
<span class="p_add">+ * @pkg:	The physical package id as retrieved via CPUID</span>
<span class="p_add">+ * @cpu:	The cpu for which this is updated</span>
<span class="p_add">+ */</span>
<span class="p_add">+int topology_update_package_map(unsigned int pkg, unsigned int cpu)</span>
 {
<span class="p_del">-	unsigned int new, pkg = apicid &gt;&gt; boot_cpu_data.x86_coreid_bits;</span>
<span class="p_add">+	unsigned int new;</span>
 
 	/* Called from early boot ? */
 	if (!physical_package_map)
<span class="p_chunk">@@ -288,16 +292,17 @@</span> <span class="p_context"> int topology_update_package_map(unsigned int apicid, unsigned int cpu)</span>
 	if (test_and_set_bit(pkg, physical_package_map))
 		goto found;
 
<span class="p_del">-	if (logical_packages_frozen) {</span>
<span class="p_del">-		physical_to_logical_pkg[pkg] = -1;</span>
<span class="p_del">-		pr_warn(&quot;APIC(%x) Package %u exceeds logical package max\n&quot;,</span>
<span class="p_del">-			apicid, pkg);</span>
<span class="p_add">+	if (logical_packages &gt;= __max_logical_packages) {</span>
<span class="p_add">+		pr_warn(&quot;Package %u of CPU %u exceeds BIOS package data %u.\n&quot;,</span>
<span class="p_add">+			logical_packages, cpu, __max_logical_packages);</span>
 		return -ENOSPC;
 	}
 
 	new = logical_packages++;
<span class="p_del">-	pr_info(&quot;APIC(%x) Converting physical %u to logical package %u\n&quot;,</span>
<span class="p_del">-		apicid, pkg, new);</span>
<span class="p_add">+	if (new != pkg) {</span>
<span class="p_add">+		pr_info(&quot;CPU %u Converting physical %u to logical package %u\n&quot;,</span>
<span class="p_add">+			cpu, pkg, new);</span>
<span class="p_add">+	}</span>
 	physical_to_logical_pkg[pkg] = new;
 
 found:
<span class="p_chunk">@@ -318,9 +323,9 @@</span> <span class="p_context"> int topology_phys_to_logical_pkg(unsigned int phys_pkg)</span>
 }
 EXPORT_SYMBOL(topology_phys_to_logical_pkg);
 
<span class="p_del">-static void __init smp_init_package_map(void)</span>
<span class="p_add">+static void __init smp_init_package_map(struct cpuinfo_x86 *c, unsigned int cpu)</span>
 {
<span class="p_del">-	unsigned int ncpus, cpu;</span>
<span class="p_add">+	unsigned int ncpus;</span>
 	size_t size;
 
 	/*
<span class="p_chunk">@@ -365,27 +370,9 @@</span> <span class="p_context"> static void __init smp_init_package_map(void)</span>
 	size = BITS_TO_LONGS(max_physical_pkg_id) * sizeof(unsigned long);
 	physical_package_map = kzalloc(size, GFP_KERNEL);
 
<span class="p_del">-	for_each_present_cpu(cpu) {</span>
<span class="p_del">-		unsigned int apicid = apic-&gt;cpu_present_to_apicid(cpu);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (apicid == BAD_APICID || !apic-&gt;apic_id_valid(apicid))</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-		if (!topology_update_package_map(apicid, cpu))</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-		pr_warn(&quot;CPU %u APICId %x disabled\n&quot;, cpu, apicid);</span>
<span class="p_del">-		per_cpu(x86_bios_cpu_apicid, cpu) = BAD_APICID;</span>
<span class="p_del">-		set_cpu_possible(cpu, false);</span>
<span class="p_del">-		set_cpu_present(cpu, false);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (logical_packages &gt; __max_logical_packages) {</span>
<span class="p_del">-		pr_warn(&quot;Detected more packages (%u), then computed by BIOS data (%u).\n&quot;,</span>
<span class="p_del">-			logical_packages, __max_logical_packages);</span>
<span class="p_del">-		logical_packages_frozen = true;</span>
<span class="p_del">-		__max_logical_packages  = logical_packages;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	pr_info(&quot;Max logical packages: %u\n&quot;, __max_logical_packages);
<span class="p_add">+</span>
<span class="p_add">+	topology_update_package_map(c-&gt;phys_proc_id, cpu);</span>
 }
 
 void __init smp_store_boot_cpu_info(void)
<span class="p_chunk">@@ -395,7 +382,7 @@</span> <span class="p_context"> void __init smp_store_boot_cpu_info(void)</span>
 
 	*c = boot_cpu_data;
 	c-&gt;cpu_index = id;
<span class="p_del">-	smp_init_package_map();</span>
<span class="p_add">+	smp_init_package_map(c, id);</span>
 }
 
 /*
<span class="p_chunk">@@ -1476,15 +1463,15 @@</span> <span class="p_context"> __init void prefill_possible_map(void)</span>
 		possible = i;
 	}
 
<span class="p_add">+	nr_cpu_ids = possible;</span>
<span class="p_add">+</span>
 	pr_info(&quot;Allowing %d CPUs, %d hotplug CPUs\n&quot;,
 		possible, max_t(int, possible - num_processors, 0));
 
<span class="p_add">+	reset_cpu_possible_mask();</span>
<span class="p_add">+</span>
 	for (i = 0; i &lt; possible; i++)
 		set_cpu_possible(i, true);
<span class="p_del">-	for (; i &lt; NR_CPUS; i++)</span>
<span class="p_del">-		set_cpu_possible(i, false);</span>
<span class="p_del">-</span>
<span class="p_del">-	nr_cpu_ids = possible;</span>
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
<span class="p_header">diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c</span>
<span class="p_header">index 17c55a536fdd..e3254ca0eec4 100644</span>
<span class="p_header">--- a/arch/x86/mm/fault.c</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c</span>
<span class="p_chunk">@@ -413,7 +413,7 @@</span> <span class="p_context"> static void dump_pagetable(unsigned long address)</span>
 
 void vmalloc_sync_all(void)
 {
<span class="p_del">-	sync_global_pgds(VMALLOC_START &amp; PGDIR_MASK, VMALLOC_END, 0);</span>
<span class="p_add">+	sync_global_pgds(VMALLOC_START &amp; PGDIR_MASK, VMALLOC_END);</span>
 }
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c</span>
<span class="p_header">index 14b9dd71d9e8..963895f9af7f 100644</span>
<span class="p_header">--- a/arch/x86/mm/init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/init_64.c</span>
<span class="p_chunk">@@ -89,10 +89,10 @@</span> <span class="p_context"> static int __init nonx32_setup(char *str)</span>
 __setup(&quot;noexec32=&quot;, nonx32_setup);
 
 /*
<span class="p_del">- * When memory was added/removed make sure all the processes MM have</span>
<span class="p_add">+ * When memory was added make sure all the processes MM have</span>
  * suitable PGD entries in the local PGD level page.
  */
<span class="p_del">-void sync_global_pgds(unsigned long start, unsigned long end, int removed)</span>
<span class="p_add">+void sync_global_pgds(unsigned long start, unsigned long end)</span>
 {
 	unsigned long address;
 
<span class="p_chunk">@@ -100,12 +100,7 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end, int removed)</span>
 		const pgd_t *pgd_ref = pgd_offset_k(address);
 		struct page *page;
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * When it is called after memory hot remove, pgd_none()</span>
<span class="p_del">-		 * returns true. In this case (removed == 1), we must clear</span>
<span class="p_del">-		 * the PGD entries in the local PGD level page.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (pgd_none(*pgd_ref) &amp;&amp; !removed)</span>
<span class="p_add">+		if (pgd_none(*pgd_ref))</span>
 			continue;
 
 		spin_lock(&amp;pgd_lock);
<span class="p_chunk">@@ -122,13 +117,8 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end, int removed)</span>
 				BUG_ON(pgd_page_vaddr(*pgd)
 				       != pgd_page_vaddr(*pgd_ref));
 
<span class="p_del">-			if (removed) {</span>
<span class="p_del">-				if (pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
<span class="p_del">-					pgd_clear(pgd);</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				if (pgd_none(*pgd))</span>
<span class="p_del">-					set_pgd(pgd, *pgd_ref);</span>
<span class="p_del">-			}</span>
<span class="p_add">+			if (pgd_none(*pgd))</span>
<span class="p_add">+				set_pgd(pgd, *pgd_ref);</span>
 
 			spin_unlock(pgt_lock);
 		}
<span class="p_chunk">@@ -596,7 +586,7 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 	}
 
 	if (pgd_changed)
<span class="p_del">-		sync_global_pgds(vaddr_start, vaddr_end - 1, 0);</span>
<span class="p_add">+		sync_global_pgds(vaddr_start, vaddr_end - 1);</span>
 
 	__flush_tlb_all();
 
<span class="p_chunk">@@ -1239,7 +1229,7 @@</span> <span class="p_context"> int __meminit vmemmap_populate(unsigned long start, unsigned long end, int node)</span>
 	} else
 		err = vmemmap_populate_basepages(start, end, node);
 	if (!err)
<span class="p_del">-		sync_global_pgds(start, end - 1, 0);</span>
<span class="p_add">+		sync_global_pgds(start, end - 1);</span>
 	return err;
 }
 
<span class="p_header">diff --git a/arch/x86/mm/mpx.c b/arch/x86/mm/mpx.c</span>
<span class="p_header">index e4f800999b32..324e5713d386 100644</span>
<span class="p_header">--- a/arch/x86/mm/mpx.c</span>
<span class="p_header">+++ b/arch/x86/mm/mpx.c</span>
<span class="p_chunk">@@ -350,12 +350,12 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	 * The copy_xregs_to_kernel() beneath get_xsave_field_ptr() is
 	 * expected to be relatively expensive. Storing the bounds
 	 * directory here means that we do not have to do xsave in the
<span class="p_del">-	 * unmap path; we can just use mm-&gt;bd_addr instead.</span>
<span class="p_add">+	 * unmap path; we can just use mm-&gt;context.bd_addr instead.</span>
 	 */
 	bd_base = mpx_get_bounds_dir();
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_del">-	mm-&gt;bd_addr = bd_base;</span>
<span class="p_del">-	if (mm-&gt;bd_addr == MPX_INVALID_BOUNDS_DIR)</span>
<span class="p_add">+	mm-&gt;context.bd_addr = bd_base;</span>
<span class="p_add">+	if (mm-&gt;context.bd_addr == MPX_INVALID_BOUNDS_DIR)</span>
 		ret = -ENXIO;
 
 	up_write(&amp;mm-&gt;mmap_sem);
<span class="p_chunk">@@ -370,7 +370,7 @@</span> <span class="p_context"> int mpx_disable_management(void)</span>
 		return -ENXIO;
 
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_del">-	mm-&gt;bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
<span class="p_add">+	mm-&gt;context.bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 	return 0;
 }
<span class="p_chunk">@@ -947,7 +947,7 @@</span> <span class="p_context"> static int try_unmap_single_bt(struct mm_struct *mm,</span>
 		end = bta_end_vaddr;
 	}
 
<span class="p_del">-	bde_vaddr = mm-&gt;bd_addr + mpx_get_bd_entry_offset(mm, start);</span>
<span class="p_add">+	bde_vaddr = mm-&gt;context.bd_addr + mpx_get_bd_entry_offset(mm, start);</span>
 	ret = get_bt_addr(mm, bde_vaddr, &amp;bt_addr);
 	/*
 	 * No bounds table there, so nothing to unmap.
<span class="p_header">diff --git a/arch/x86/mm/numa.c b/arch/x86/mm/numa.c</span>
<span class="p_header">index 3f35b48d1d9d..12dcad7297a5 100644</span>
<span class="p_header">--- a/arch/x86/mm/numa.c</span>
<span class="p_header">+++ b/arch/x86/mm/numa.c</span>
<span class="p_chunk">@@ -19,7 +19,7 @@</span> <span class="p_context"></span>
 
 #include &quot;numa_internal.h&quot;
 
<span class="p_del">-int __initdata numa_off;</span>
<span class="p_add">+int numa_off;</span>
 nodemask_t numa_nodes_parsed __initdata;
 
 struct pglist_data *node_data[MAX_NUMNODES] __read_mostly;
<span class="p_header">diff --git a/arch/x86/xen/smp.c b/arch/x86/xen/smp.c</span>
<span class="p_header">index 9fa27ceeecfd..311acad7dad2 100644</span>
<span class="p_header">--- a/arch/x86/xen/smp.c</span>
<span class="p_header">+++ b/arch/x86/xen/smp.c</span>
<span class="p_chunk">@@ -87,12 +87,6 @@</span> <span class="p_context"> static void cpu_bringup(void)</span>
 	cpu_data(cpu).x86_max_cores = 1;
 	set_cpu_sibling_map(cpu);
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * identify_cpu() may have set logical_pkg_id to -1 due</span>
<span class="p_del">-	 * to incorrect phys_proc_id. Let&#39;s re-comupte it.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	topology_update_package_map(apic-&gt;cpu_present_to_apicid(cpu), cpu);</span>
<span class="p_del">-</span>
 	xen_setup_cpu_clockevents();
 
 	notify_cpu_starting(cpu);
<span class="p_header">diff --git a/drivers/acpi/numa.c b/drivers/acpi/numa.c</span>
<span class="p_header">index ce3a7a16f03f..edb0c79f7c64 100644</span>
<span class="p_header">--- a/drivers/acpi/numa.c</span>
<span class="p_header">+++ b/drivers/acpi/numa.c</span>
<span class="p_chunk">@@ -70,7 +70,7 @@</span> <span class="p_context"> int acpi_map_pxm_to_node(int pxm)</span>
 {
 	int node;
 
<span class="p_del">-	if (pxm &lt; 0 || pxm &gt;= MAX_PXM_DOMAINS)</span>
<span class="p_add">+	if (pxm &lt; 0 || pxm &gt;= MAX_PXM_DOMAINS || numa_off)</span>
 		return NUMA_NO_NODE;
 
 	node = pxm_to_node_map[pxm];
<span class="p_header">diff --git a/include/linux/cpumask.h b/include/linux/cpumask.h</span>
<span class="p_header">index da7fbf1cdd56..c717f5ea88cb 100644</span>
<span class="p_header">--- a/include/linux/cpumask.h</span>
<span class="p_header">+++ b/include/linux/cpumask.h</span>
<span class="p_chunk">@@ -722,6 +722,11 @@</span> <span class="p_context"> void init_cpu_present(const struct cpumask *src);</span>
 void init_cpu_possible(const struct cpumask *src);
 void init_cpu_online(const struct cpumask *src);
 
<span class="p_add">+static inline void reset_cpu_possible_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	bitmap_zero(cpumask_bits(&amp;__cpu_possible_mask), NR_CPUS);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void
 set_cpu_possible(unsigned int cpu, bool possible)
 {
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 4a8acedf4b7d..ce70cebef603 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -508,10 +508,6 @@</span> <span class="p_context"> struct mm_struct {</span>
 	bool tlb_flush_pending;
 #endif
 	struct uprobes_state uprobes_state;
<span class="p_del">-#ifdef CONFIG_X86_INTEL_MPX</span>
<span class="p_del">-	/* address of the bounds directory */</span>
<span class="p_del">-	void __user *bd_addr;</span>
<span class="p_del">-#endif</span>
 #ifdef CONFIG_HUGETLB_PAGE
 	atomic_long_t hugetlb_usage;
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



