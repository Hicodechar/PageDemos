
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] ipc: Use private shmem or hugetlbfs inodes for shm segments. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] ipc: Use private shmem or hugetlbfs inodes for shm segments.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1894">Stephen Smalley</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 23, 2015, 4:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437668913-25446-1-git-send-email-sds@tycho.nsa.gov&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6854631/mbox/"
   >mbox</a>
|
   <a href="/patch/6854631/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6854631/">/patch/6854631/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 004C39F1D4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jul 2015 16:30:48 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E92102066D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jul 2015 16:30:47 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B271A20603
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jul 2015 16:30:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753742AbbGWQam (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Jul 2015 12:30:42 -0400
Received: from emvm-gh1-uea09.nsa.gov ([63.239.67.10]:53820 &quot;EHLO
	emvm-gh1-uea09.nsa.gov&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752577AbbGWQac (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Jul 2015 12:30:32 -0400
X-TM-IMSS-Message-ID: &lt;a8879de9001443f2@nsa.gov&gt;
Received: from tarius.tycho.ncsc.mil ([144.51.242.1]) by nsa.gov
	([63.239.67.10]) with ESMTP (TREND IMSS SMTP Service 7.1) id
	a8879de9001443f2 ; Thu, 23 Jul 2015 12:34:59 -0400
Received: from moss-pluto.infosec.tycho.ncsc.mil (moss-pluto
	[192.168.25.131])
	by tarius.tycho.ncsc.mil (8.14.4/8.14.4) with ESMTP id t6NGTX18015198;
	Thu, 23 Jul 2015 12:29:44 -0400
From: Stephen Smalley &lt;sds@tycho.nsa.gov&gt;
To: mstevens@fedoraproject.org
Cc: linux-kernel@vger.kernel.org, nyc@holomorphy.com, hughd@google.com,
	akpm@linux-foundation.org, manfred@colorfullife.com,
	dave@stgolabs.net, linux-mm@kvack.org, wagi@monom.org,
	prarit@redhat.com, torvalds@linux-foundation.org,
	david@fromorbit.com, esandeen@redhat.com, eparis@redhat.com,
	selinux@tycho.nsa.gov, paul@paul-moore.com,
	linux-security-module@vger.kernel.org,
	Stephen Smalley &lt;sds@tycho.nsa.gov&gt;
Subject: [RFC][PATCH] ipc: Use private shmem or hugetlbfs inodes for shm
	segments.
Date: Thu, 23 Jul 2015 12:28:33 -0400
Message-Id: &lt;1437668913-25446-1-git-send-email-sds@tycho.nsa.gov&gt;
X-Mailer: git-send-email 2.1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1894">Stephen Smalley</a> - July 23, 2015, 4:28 p.m.</div>
<pre class="content">
The shm implementation internally uses shmem or hugetlbfs inodes
for shm segments.  As these inodes are never directly exposed to
userspace and only accessed through the shm operations which are
already hooked by security modules, mark the inodes with the
S_PRIVATE flag so that inode security initialization and permission
checking is skipped.

This was motivated by the following lockdep warning:
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40201">Paul Moore</a> - July 23, 2015, 9:59 p.m.</div>
<pre class="content">
On Thu, Jul 23, 2015 at 12:28 PM, Stephen Smalley &lt;sds@tycho.nsa.gov&gt; wrote:
<span class="quote">&gt; The shm implementation internally uses shmem or hugetlbfs inodes</span>
<span class="quote">&gt; for shm segments.  As these inodes are never directly exposed to</span>
<span class="quote">&gt; userspace and only accessed through the shm operations which are</span>
<span class="quote">&gt; already hooked by security modules, mark the inodes with the</span>
<span class="quote">&gt; S_PRIVATE flag so that inode security initialization and permission</span>
<span class="quote">&gt; checking is skipped.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This was motivated by the following lockdep warning:</span>
<span class="quote">&gt; ===================================================</span>
<span class="quote">&gt; [ INFO: possible circular locking dependency detected ]</span>
<span class="quote">&gt; 4.2.0-0.rc3.git0.1.fc24.x86_64+debug #1 Tainted: G        W</span>
<span class="quote">&gt; -------------------------------------------------------</span>
<span class="quote">&gt; httpd/1597 is trying to acquire lock:</span>
<span class="quote">&gt; (&amp;ids-&gt;rwsem){+++++.}, at: [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt; (&amp;mm-&gt;mmap_sem){++++++}, at: [&lt;ffffffff81386bbb&gt;] SyS_shmdt+0x4b/0x180</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff81217baa&gt;] __might_fault+0x7a/0xa0</span>
<span class="quote">&gt;       [&lt;ffffffff81284a1e&gt;] filldir+0x9e/0x130</span>
<span class="quote">&gt;       [&lt;ffffffffa019bb08&gt;] xfs_dir2_block_getdents.isra.12+0x198/0x1c0 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa019c5b4&gt;] xfs_readdir+0x1b4/0x330 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa019f38b&gt;] xfs_file_readdir+0x2b/0x30 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffff812847e7&gt;] iterate_dir+0x97/0x130</span>
<span class="quote">&gt;       [&lt;ffffffff81284d21&gt;] SyS_getdents+0x91/0x120</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff81101e97&gt;] down_read_nested+0x57/0xa0</span>
<span class="quote">&gt;       [&lt;ffffffffa01b0e57&gt;] xfs_ilock+0x167/0x350 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa01b10b8&gt;] xfs_ilock_attr_map_shared+0x38/0x50 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa014799d&gt;] xfs_attr_get+0xbd/0x190 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa01c17ad&gt;] xfs_xattr_get+0x3d/0x70 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffff8129962f&gt;] generic_getxattr+0x4f/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff8139ba52&gt;] inode_doinit_with_dentry+0x162/0x670</span>
<span class="quote">&gt;       [&lt;ffffffff8139cf69&gt;] sb_finish_set_opts+0xd9/0x230</span>
<span class="quote">&gt;       [&lt;ffffffff8139d66c&gt;] selinux_set_mnt_opts+0x35c/0x660</span>
<span class="quote">&gt;       [&lt;ffffffff8139ff97&gt;] superblock_doinit+0x77/0xf0</span>
<span class="quote">&gt;       [&lt;ffffffff813a0020&gt;] delayed_superblock_init+0x10/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff81272d23&gt;] iterate_supers+0xb3/0x110</span>
<span class="quote">&gt;       [&lt;ffffffff813a4e5f&gt;] selinux_complete_init+0x2f/0x40</span>
<span class="quote">&gt;       [&lt;ffffffff813b47a3&gt;] security_load_policy+0x103/0x600</span>
<span class="quote">&gt;       [&lt;ffffffff813a6901&gt;] sel_write_load+0xc1/0x750</span>
<span class="quote">&gt;       [&lt;ffffffff8126e817&gt;] __vfs_write+0x37/0x100</span>
<span class="quote">&gt;       [&lt;ffffffff8126f229&gt;] vfs_write+0xa9/0x1a0</span>
<span class="quote">&gt;       [&lt;ffffffff8126ff48&gt;] SyS_write+0x58/0xd0</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff8186de8f&gt;] mutex_lock_nested+0x7f/0x3e0</span>
<span class="quote">&gt;       [&lt;ffffffff8139b9a9&gt;] inode_doinit_with_dentry+0xb9/0x670</span>
<span class="quote">&gt;       [&lt;ffffffff8139bf7c&gt;] selinux_d_instantiate+0x1c/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff813955f6&gt;] security_d_instantiate+0x36/0x60</span>
<span class="quote">&gt;       [&lt;ffffffff81287c34&gt;] d_instantiate+0x54/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff8120111c&gt;] __shmem_file_setup+0xdc/0x240</span>
<span class="quote">&gt;       [&lt;ffffffff81201290&gt;] shmem_file_setup+0x10/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff813856e0&gt;] newseg+0x290/0x3a0</span>
<span class="quote">&gt;       [&lt;ffffffff8137e278&gt;] ipcget+0x208/0x2d0</span>
<span class="quote">&gt;       [&lt;ffffffff81386074&gt;] SyS_shmget+0x54/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0</span>
<span class="quote">&gt;       [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt;       [&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80</span>
<span class="quote">&gt;       [&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460</span>
<span class="quote">&gt;       [&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt; Chain exists of:#012  &amp;ids-&gt;rwsem --&gt; &amp;xfs_dir_ilock_class --&gt; &amp;mm-&gt;mmap_sem</span>
<span class="quote">&gt; Possible unsafe locking scenario:</span>
<span class="quote">&gt;       CPU0                    CPU1</span>
<span class="quote">&gt;       ----                    ----</span>
<span class="quote">&gt;  lock(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  lock(&amp;xfs_dir_ilock_class);</span>
<span class="quote">&gt;                               lock(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  lock(&amp;ids-&gt;rwsem);</span>
<span class="quote">&gt; 1 lock held by httpd/1597:</span>
<span class="quote">&gt; CPU: 7 PID: 1597 Comm: httpd Tainted: G W       4.2.0-0.rc3.git0.1.fc24.x86_64+Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Pla0000000000000000 000000006cb6fe9d ffff88019ff07c58 ffffffff81868175</span>
<span class="quote">&gt; 0000000000000000 ffffffff82aea390 ffff88019ff07ca8 ffffffff81105903</span>
<span class="quote">&gt; ffff88019ff07c78 ffff88019ff07d08 0000000000000001 ffff8800b75108f0</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt; [&lt;ffffffff81868175&gt;] dump_stack+0x4c/0x65</span>
<span class="quote">&gt; [&lt;ffffffff81105903&gt;] print_circular_bug+0x1e3/0x250</span>
<span class="quote">&gt; [&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00</span>
<span class="quote">&gt; [&lt;ffffffff81220c33&gt;] ? unlink_file_vma+0x33/0x60</span>
<span class="quote">&gt; [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt; [&lt;ffffffff81385354&gt;] ? shm_close+0x34/0x130</span>
<span class="quote">&gt; [&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0</span>
<span class="quote">&gt; [&lt;ffffffff81385354&gt;] ? shm_close+0x34/0x130</span>
<span class="quote">&gt; [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt; [&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80</span>
<span class="quote">&gt; [&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460</span>
<span class="quote">&gt; [&lt;ffffffff81386bbb&gt;] ? SyS_shmdt+0x4b/0x180</span>
<span class="quote">&gt; [&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180</span>
<span class="quote">&gt; [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Reported-by: Morten Stevens &lt;mstevens@fedoraproject.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Stephen Smalley &lt;sds@tycho.nsa.gov&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/hugetlbfs/inode.c | 2 ++</span>
<span class="quote">&gt;  ipc/shm.c            | 2 +-</span>
<span class="quote">&gt;  mm/shmem.c           | 4 ++--</span>
<span class="quote">&gt;  3 files changed, 5 insertions(+), 3 deletions(-)</span>

Seems reasonable and fits with what we&#39;ve been doing.
<span class="acked-by">
Acked-by: Paul Moore &lt;paul@paul-moore.com&gt;</span>
<span class="quote">
&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; index 0cf74df..973c24c 100644</span>
<span class="quote">&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; @@ -1010,6 +1010,8 @@ struct file *hugetlb_file_setup(const char *name, size_t size,</span>
<span class="quote">&gt;         inode = hugetlbfs_get_inode(sb, NULL, S_IFREG | S_IRWXUGO, 0);</span>
<span class="quote">&gt;         if (!inode)</span>
<span class="quote">&gt;                 goto out_dentry;</span>
<span class="quote">&gt; +       if (creat_flags == HUGETLB_SHMFS_INODE)</span>
<span class="quote">&gt; +               inode-&gt;i_flags |= S_PRIVATE;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         file = ERR_PTR(-ENOMEM);</span>
<span class="quote">&gt;         if (hugetlb_reserve_pages(inode, 0,</span>
<span class="quote">&gt; diff --git a/ipc/shm.c b/ipc/shm.c</span>
<span class="quote">&gt; index 06e5cf2..4aef24d 100644</span>
<span class="quote">&gt; --- a/ipc/shm.c</span>
<span class="quote">&gt; +++ b/ipc/shm.c</span>
<span class="quote">&gt; @@ -545,7 +545,7 @@ static int newseg(struct ipc_namespace *ns, struct ipc_params *params)</span>
<span class="quote">&gt;                 if  ((shmflg &amp; SHM_NORESERVE) &amp;&amp;</span>
<span class="quote">&gt;                                 sysctl_overcommit_memory != OVERCOMMIT_NEVER)</span>
<span class="quote">&gt;                         acctflag = VM_NORESERVE;</span>
<span class="quote">&gt; -               file = shmem_file_setup(name, size, acctflag);</span>
<span class="quote">&gt; +               file = shmem_kernel_file_setup(name, size, acctflag);</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;         error = PTR_ERR(file);</span>
<span class="quote">&gt;         if (IS_ERR(file))</span>
<span class="quote">&gt; diff --git a/mm/shmem.c b/mm/shmem.c</span>
<span class="quote">&gt; index 4caf8ed..dbe0c1e 100644</span>
<span class="quote">&gt; --- a/mm/shmem.c</span>
<span class="quote">&gt; +++ b/mm/shmem.c</span>
<span class="quote">&gt; @@ -3363,8 +3363,8 @@ put_path:</span>
<span class="quote">&gt;   * shmem_kernel_file_setup - get an unlinked file living in tmpfs which must be</span>
<span class="quote">&gt;   *     kernel internal.  There will be NO LSM permission checks against the</span>
<span class="quote">&gt;   *     underlying inode.  So users of this interface must do LSM checks at a</span>
<span class="quote">&gt; - *     higher layer.  The one user is the big_key implementation.  LSM checks</span>
<span class="quote">&gt; - *     are provided at the key level rather than the inode level.</span>
<span class="quote">&gt; + *     higher layer.  The users are the big_key and shm implementations.  LSM</span>
<span class="quote">&gt; + *     checks are provided at the key or shm level rather than the inode.</span>
<span class="quote">&gt;   * @name: name for dentry (to be seen in /proc/&lt;pid&gt;/maps</span>
<span class="quote">&gt;   * @size: size to be set for the file</span>
<span class="quote">&gt;   * @flags: VM_NORESERVE suppresses pre-accounting of the entire object size</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.1.0</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=160">Dave Chinner</a> - July 24, 2015, 12:11 a.m.</div>
<pre class="content">
On Thu, Jul 23, 2015 at 12:28:33PM -0400, Stephen Smalley wrote:
<span class="quote">&gt; The shm implementation internally uses shmem or hugetlbfs inodes</span>
<span class="quote">&gt; for shm segments.  As these inodes are never directly exposed to</span>
<span class="quote">&gt; userspace and only accessed through the shm operations which are</span>
<span class="quote">&gt; already hooked by security modules, mark the inodes with the</span>
<span class="quote">&gt; S_PRIVATE flag so that inode security initialization and permission</span>
<span class="quote">&gt; checking is skipped.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This was motivated by the following lockdep warning:</span>
<span class="quote">&gt; ===================================================</span>
<span class="quote">&gt; [ INFO: possible circular locking dependency detected ]</span>
<span class="quote">&gt; 4.2.0-0.rc3.git0.1.fc24.x86_64+debug #1 Tainted: G        W</span>
<span class="quote">&gt; -------------------------------------------------------</span>
<span class="quote">&gt; httpd/1597 is trying to acquire lock:</span>
<span class="quote">&gt; (&amp;ids-&gt;rwsem){+++++.}, at: [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt; (&amp;mm-&gt;mmap_sem){++++++}, at: [&lt;ffffffff81386bbb&gt;] SyS_shmdt+0x4b/0x180</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff81217baa&gt;] __might_fault+0x7a/0xa0</span>
<span class="quote">&gt;       [&lt;ffffffff81284a1e&gt;] filldir+0x9e/0x130</span>
<span class="quote">&gt;       [&lt;ffffffffa019bb08&gt;] xfs_dir2_block_getdents.isra.12+0x198/0x1c0 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa019c5b4&gt;] xfs_readdir+0x1b4/0x330 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa019f38b&gt;] xfs_file_readdir+0x2b/0x30 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffff812847e7&gt;] iterate_dir+0x97/0x130</span>
<span class="quote">&gt;       [&lt;ffffffff81284d21&gt;] SyS_getdents+0x91/0x120</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff81101e97&gt;] down_read_nested+0x57/0xa0</span>
<span class="quote">&gt;       [&lt;ffffffffa01b0e57&gt;] xfs_ilock+0x167/0x350 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa01b10b8&gt;] xfs_ilock_attr_map_shared+0x38/0x50 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa014799d&gt;] xfs_attr_get+0xbd/0x190 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffffa01c17ad&gt;] xfs_xattr_get+0x3d/0x70 [xfs]</span>
<span class="quote">&gt;       [&lt;ffffffff8129962f&gt;] generic_getxattr+0x4f/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff8139ba52&gt;] inode_doinit_with_dentry+0x162/0x670</span>
<span class="quote">&gt;       [&lt;ffffffff8139cf69&gt;] sb_finish_set_opts+0xd9/0x230</span>
<span class="quote">&gt;       [&lt;ffffffff8139d66c&gt;] selinux_set_mnt_opts+0x35c/0x660</span>
<span class="quote">&gt;       [&lt;ffffffff8139ff97&gt;] superblock_doinit+0x77/0xf0</span>
<span class="quote">&gt;       [&lt;ffffffff813a0020&gt;] delayed_superblock_init+0x10/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff81272d23&gt;] iterate_supers+0xb3/0x110</span>
<span class="quote">&gt;       [&lt;ffffffff813a4e5f&gt;] selinux_complete_init+0x2f/0x40</span>
<span class="quote">&gt;       [&lt;ffffffff813b47a3&gt;] security_load_policy+0x103/0x600</span>
<span class="quote">&gt;       [&lt;ffffffff813a6901&gt;] sel_write_load+0xc1/0x750</span>
<span class="quote">&gt;       [&lt;ffffffff8126e817&gt;] __vfs_write+0x37/0x100</span>
<span class="quote">&gt;       [&lt;ffffffff8126f229&gt;] vfs_write+0xa9/0x1a0</span>
<span class="quote">&gt;       [&lt;ffffffff8126ff48&gt;] SyS_write+0x58/0xd0</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff8186de8f&gt;] mutex_lock_nested+0x7f/0x3e0</span>
<span class="quote">&gt;       [&lt;ffffffff8139b9a9&gt;] inode_doinit_with_dentry+0xb9/0x670</span>
<span class="quote">&gt;       [&lt;ffffffff8139bf7c&gt;] selinux_d_instantiate+0x1c/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff813955f6&gt;] security_d_instantiate+0x36/0x60</span>
<span class="quote">&gt;       [&lt;ffffffff81287c34&gt;] d_instantiate+0x54/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff8120111c&gt;] __shmem_file_setup+0xdc/0x240</span>
<span class="quote">&gt;       [&lt;ffffffff81201290&gt;] shmem_file_setup+0x10/0x20</span>
<span class="quote">&gt;       [&lt;ffffffff813856e0&gt;] newseg+0x290/0x3a0</span>
<span class="quote">&gt;       [&lt;ffffffff8137e278&gt;] ipcget+0x208/0x2d0</span>
<span class="quote">&gt;       [&lt;ffffffff81386074&gt;] SyS_shmget+0x54/0x70</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;       [&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00</span>
<span class="quote">&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;       [&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0</span>
<span class="quote">&gt;       [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt;       [&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80</span>
<span class="quote">&gt;       [&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460</span>
<span class="quote">&gt;       [&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180</span>
<span class="quote">&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>

That&#39;s a completely screwed up stack trace. There are *4* syscall
entry points with 4 separate, unrelated syscall chains on that
stack trace, all starting at the same address. How is this a valid
stack trace and not a lockdep bug of some kind?

Cheers,

Dave.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1894">Stephen Smalley</a> - July 24, 2015, 12:38 p.m.</div>
<pre class="content">
On 07/23/2015 08:11 PM, Dave Chinner wrote:
<span class="quote">&gt; On Thu, Jul 23, 2015 at 12:28:33PM -0400, Stephen Smalley wrote:</span>
<span class="quote">&gt;&gt; The shm implementation internally uses shmem or hugetlbfs inodes</span>
<span class="quote">&gt;&gt; for shm segments.  As these inodes are never directly exposed to</span>
<span class="quote">&gt;&gt; userspace and only accessed through the shm operations which are</span>
<span class="quote">&gt;&gt; already hooked by security modules, mark the inodes with the</span>
<span class="quote">&gt;&gt; S_PRIVATE flag so that inode security initialization and permission</span>
<span class="quote">&gt;&gt; checking is skipped.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This was motivated by the following lockdep warning:</span>
<span class="quote">&gt;&gt; ===================================================</span>
<span class="quote">&gt;&gt; [ INFO: possible circular locking dependency detected ]</span>
<span class="quote">&gt;&gt; 4.2.0-0.rc3.git0.1.fc24.x86_64+debug #1 Tainted: G        W</span>
<span class="quote">&gt;&gt; -------------------------------------------------------</span>
<span class="quote">&gt;&gt; httpd/1597 is trying to acquire lock:</span>
<span class="quote">&gt;&gt; (&amp;ids-&gt;rwsem){+++++.}, at: [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt;&gt; (&amp;mm-&gt;mmap_sem){++++++}, at: [&lt;ffffffff81386bbb&gt;] SyS_shmdt+0x4b/0x180</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81217baa&gt;] __might_fault+0x7a/0xa0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81284a1e&gt;] filldir+0x9e/0x130</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa019bb08&gt;] xfs_dir2_block_getdents.isra.12+0x198/0x1c0 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa019c5b4&gt;] xfs_readdir+0x1b4/0x330 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa019f38b&gt;] xfs_file_readdir+0x2b/0x30 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff812847e7&gt;] iterate_dir+0x97/0x130</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81284d21&gt;] SyS_getdents+0x91/0x120</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81101e97&gt;] down_read_nested+0x57/0xa0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa01b0e57&gt;] xfs_ilock+0x167/0x350 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa01b10b8&gt;] xfs_ilock_attr_map_shared+0x38/0x50 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa014799d&gt;] xfs_attr_get+0xbd/0x190 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffffa01c17ad&gt;] xfs_xattr_get+0x3d/0x70 [xfs]</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8129962f&gt;] generic_getxattr+0x4f/0x70</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139ba52&gt;] inode_doinit_with_dentry+0x162/0x670</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139cf69&gt;] sb_finish_set_opts+0xd9/0x230</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139d66c&gt;] selinux_set_mnt_opts+0x35c/0x660</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139ff97&gt;] superblock_doinit+0x77/0xf0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813a0020&gt;] delayed_superblock_init+0x10/0x20</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81272d23&gt;] iterate_supers+0xb3/0x110</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813a4e5f&gt;] selinux_complete_init+0x2f/0x40</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813b47a3&gt;] security_load_policy+0x103/0x600</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813a6901&gt;] sel_write_load+0xc1/0x750</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8126e817&gt;] __vfs_write+0x37/0x100</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8126f229&gt;] vfs_write+0xa9/0x1a0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8126ff48&gt;] SyS_write+0x58/0xd0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8186de8f&gt;] mutex_lock_nested+0x7f/0x3e0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139b9a9&gt;] inode_doinit_with_dentry+0xb9/0x670</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8139bf7c&gt;] selinux_d_instantiate+0x1c/0x20</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813955f6&gt;] security_d_instantiate+0x36/0x60</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81287c34&gt;] d_instantiate+0x54/0x70</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8120111c&gt;] __shmem_file_setup+0xdc/0x240</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81201290&gt;] shmem_file_setup+0x10/0x20</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff813856e0&gt;] newseg+0x290/0x3a0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8137e278&gt;] ipcget+0x208/0x2d0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81386074&gt;] SyS_shmget+0x54/0x70</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180</span>
<span class="quote">&gt;&gt;       [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s a completely screwed up stack trace. There are *4* syscall</span>
<span class="quote">&gt; entry points with 4 separate, unrelated syscall chains on that</span>
<span class="quote">&gt; stack trace, all starting at the same address. How is this a valid</span>
<span class="quote">&gt; stack trace and not a lockdep bug of some kind?</span>

Sorry, I mangled it when I tried to reformat it from Morten Steven&#39;s
original report.  Fixed in v2.



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===================================================
[ INFO: possible circular locking dependency detected ]
4.2.0-0.rc3.git0.1.fc24.x86_64+debug #1 Tainted: G        W
<span class="p_del">-------------------------------------------------------</span>
httpd/1597 is trying to acquire lock:
(&amp;ids-&gt;rwsem){+++++.}, at: [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130
(&amp;mm-&gt;mmap_sem){++++++}, at: [&lt;ffffffff81386bbb&gt;] SyS_shmdt+0x4b/0x180
      [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270
      [&lt;ffffffff81217baa&gt;] __might_fault+0x7a/0xa0
      [&lt;ffffffff81284a1e&gt;] filldir+0x9e/0x130
      [&lt;ffffffffa019bb08&gt;] xfs_dir2_block_getdents.isra.12+0x198/0x1c0 [xfs]
      [&lt;ffffffffa019c5b4&gt;] xfs_readdir+0x1b4/0x330 [xfs]
      [&lt;ffffffffa019f38b&gt;] xfs_file_readdir+0x2b/0x30 [xfs]
      [&lt;ffffffff812847e7&gt;] iterate_dir+0x97/0x130
      [&lt;ffffffff81284d21&gt;] SyS_getdents+0x91/0x120
      [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76
      [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270
      [&lt;ffffffff81101e97&gt;] down_read_nested+0x57/0xa0
      [&lt;ffffffffa01b0e57&gt;] xfs_ilock+0x167/0x350 [xfs]
      [&lt;ffffffffa01b10b8&gt;] xfs_ilock_attr_map_shared+0x38/0x50 [xfs]
      [&lt;ffffffffa014799d&gt;] xfs_attr_get+0xbd/0x190 [xfs]
      [&lt;ffffffffa01c17ad&gt;] xfs_xattr_get+0x3d/0x70 [xfs]
      [&lt;ffffffff8129962f&gt;] generic_getxattr+0x4f/0x70
      [&lt;ffffffff8139ba52&gt;] inode_doinit_with_dentry+0x162/0x670
      [&lt;ffffffff8139cf69&gt;] sb_finish_set_opts+0xd9/0x230
      [&lt;ffffffff8139d66c&gt;] selinux_set_mnt_opts+0x35c/0x660
      [&lt;ffffffff8139ff97&gt;] superblock_doinit+0x77/0xf0
      [&lt;ffffffff813a0020&gt;] delayed_superblock_init+0x10/0x20
      [&lt;ffffffff81272d23&gt;] iterate_supers+0xb3/0x110
      [&lt;ffffffff813a4e5f&gt;] selinux_complete_init+0x2f/0x40
      [&lt;ffffffff813b47a3&gt;] security_load_policy+0x103/0x600
      [&lt;ffffffff813a6901&gt;] sel_write_load+0xc1/0x750
      [&lt;ffffffff8126e817&gt;] __vfs_write+0x37/0x100
      [&lt;ffffffff8126f229&gt;] vfs_write+0xa9/0x1a0
      [&lt;ffffffff8126ff48&gt;] SyS_write+0x58/0xd0
      [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76
      [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270
      [&lt;ffffffff8186de8f&gt;] mutex_lock_nested+0x7f/0x3e0
      [&lt;ffffffff8139b9a9&gt;] inode_doinit_with_dentry+0xb9/0x670
      [&lt;ffffffff8139bf7c&gt;] selinux_d_instantiate+0x1c/0x20
      [&lt;ffffffff813955f6&gt;] security_d_instantiate+0x36/0x60
      [&lt;ffffffff81287c34&gt;] d_instantiate+0x54/0x70
      [&lt;ffffffff8120111c&gt;] __shmem_file_setup+0xdc/0x240
      [&lt;ffffffff81201290&gt;] shmem_file_setup+0x10/0x20
      [&lt;ffffffff813856e0&gt;] newseg+0x290/0x3a0
      [&lt;ffffffff8137e278&gt;] ipcget+0x208/0x2d0
      [&lt;ffffffff81386074&gt;] SyS_shmget+0x54/0x70
      [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76
      [&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00
      [&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270
      [&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0
      [&lt;ffffffff81385354&gt;] shm_close+0x34/0x130
      [&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80
      [&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460
      [&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180
      [&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76
Chain exists of:#012  &amp;ids-&gt;rwsem --&gt; &amp;xfs_dir_ilock_class --&gt; &amp;mm-&gt;mmap_sem
Possible unsafe locking scenario:
      CPU0                    CPU1
      ----                    ----
 lock(&amp;mm-&gt;mmap_sem);
 lock(&amp;xfs_dir_ilock_class);
                              lock(&amp;mm-&gt;mmap_sem);
 lock(&amp;ids-&gt;rwsem);
1 lock held by httpd/1597:
CPU: 7 PID: 1597 Comm: httpd Tainted: G W       4.2.0-0.rc3.git0.1.fc24.x86_64+Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Pla0000000000000000 000000006cb6fe9d ffff88019ff07c58 ffffffff81868175
0000000000000000 ffffffff82aea390 ffff88019ff07ca8 ffffffff81105903
ffff88019ff07c78 ffff88019ff07d08 0000000000000001 ffff8800b75108f0
Call Trace:
[&lt;ffffffff81868175&gt;] dump_stack+0x4c/0x65
[&lt;ffffffff81105903&gt;] print_circular_bug+0x1e3/0x250
[&lt;ffffffff81108df8&gt;] __lock_acquire+0x1a78/0x1d00
[&lt;ffffffff81220c33&gt;] ? unlink_file_vma+0x33/0x60
[&lt;ffffffff81109a07&gt;] lock_acquire+0xc7/0x270
[&lt;ffffffff81385354&gt;] ? shm_close+0x34/0x130
[&lt;ffffffff8186efba&gt;] down_write+0x5a/0xc0
[&lt;ffffffff81385354&gt;] ? shm_close+0x34/0x130
[&lt;ffffffff81385354&gt;] shm_close+0x34/0x130
[&lt;ffffffff812203a5&gt;] remove_vma+0x45/0x80
[&lt;ffffffff81222a30&gt;] do_munmap+0x2b0/0x460
[&lt;ffffffff81386bbb&gt;] ? SyS_shmdt+0x4b/0x180
[&lt;ffffffff81386c25&gt;] SyS_shmdt+0xb5/0x180
[&lt;ffffffff81871d2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x76

Reported-by: Morten Stevens &lt;mstevens@fedoraproject.org&gt;
Signed-off-by: Stephen Smalley &lt;sds@tycho.nsa.gov&gt;
<span class="p_del">---</span>
 fs/hugetlbfs/inode.c | 2 ++
 ipc/shm.c            | 2 +-
 mm/shmem.c           | 4 ++--
 3 files changed, 5 insertions(+), 3 deletions(-)

<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 0cf74df..973c24c 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -1010,6 +1010,8 @@</span> <span class="p_context"> struct file *hugetlb_file_setup(const char *name, size_t size,</span>
 	inode = hugetlbfs_get_inode(sb, NULL, S_IFREG | S_IRWXUGO, 0);
 	if (!inode)
 		goto out_dentry;
<span class="p_add">+	if (creat_flags == HUGETLB_SHMFS_INODE)</span>
<span class="p_add">+		inode-&gt;i_flags |= S_PRIVATE;</span>
 
 	file = ERR_PTR(-ENOMEM);
 	if (hugetlb_reserve_pages(inode, 0,
<span class="p_header">diff --git a/ipc/shm.c b/ipc/shm.c</span>
<span class="p_header">index 06e5cf2..4aef24d 100644</span>
<span class="p_header">--- a/ipc/shm.c</span>
<span class="p_header">+++ b/ipc/shm.c</span>
<span class="p_chunk">@@ -545,7 +545,7 @@</span> <span class="p_context"> static int newseg(struct ipc_namespace *ns, struct ipc_params *params)</span>
 		if  ((shmflg &amp; SHM_NORESERVE) &amp;&amp;
 				sysctl_overcommit_memory != OVERCOMMIT_NEVER)
 			acctflag = VM_NORESERVE;
<span class="p_del">-		file = shmem_file_setup(name, size, acctflag);</span>
<span class="p_add">+		file = shmem_kernel_file_setup(name, size, acctflag);</span>
 	}
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
<span class="p_header">diff --git a/mm/shmem.c b/mm/shmem.c</span>
<span class="p_header">index 4caf8ed..dbe0c1e 100644</span>
<span class="p_header">--- a/mm/shmem.c</span>
<span class="p_header">+++ b/mm/shmem.c</span>
<span class="p_chunk">@@ -3363,8 +3363,8 @@</span> <span class="p_context"> put_path:</span>
  * shmem_kernel_file_setup - get an unlinked file living in tmpfs which must be
  * 	kernel internal.  There will be NO LSM permission checks against the
  * 	underlying inode.  So users of this interface must do LSM checks at a
<span class="p_del">- * 	higher layer.  The one user is the big_key implementation.  LSM checks</span>
<span class="p_del">- * 	are provided at the key level rather than the inode level.</span>
<span class="p_add">+ *	higher layer.  The users are the big_key and shm implementations.  LSM</span>
<span class="p_add">+ *	checks are provided at the key or shm level rather than the inode.</span>
  * @name: name for dentry (to be seen in /proc/&lt;pid&gt;/maps
  * @size: size to be set for the file
  * @flags: VM_NORESERVE suppresses pre-accounting of the entire object size

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



