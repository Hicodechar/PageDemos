
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[vmalloc] reduce purge_lock range and hold time of - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [vmalloc] reduce purge_lock range and hold time of</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168503">zhouxianrong@huawei.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 15, 2016, 2:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1476540769-31893-1-git-send-email-zhouxianrong@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9377789/mbox/"
   >mbox</a>
|
   <a href="/patch/9377789/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9377789/">/patch/9377789/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	96A716075E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 15 Oct 2016 14:23:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 795DC29496
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 15 Oct 2016 14:23:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 69B222949D; Sat, 15 Oct 2016 14:23:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9A02029496
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 15 Oct 2016 14:23:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754539AbcJOOXY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 15 Oct 2016 10:23:24 -0400
Received: from szxga01-in.huawei.com ([58.251.152.64]:48776 &quot;EHLO
	szxga01-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753960AbcJOOXP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 15 Oct 2016 10:23:15 -0400
Received: from 172.24.1.136 (EHLO SZXEML424-HUB.china.huawei.com)
	([172.24.1.136])
	by szxrg01-dlp.huawei.com (MOS 4.3.7-GA FastPath queued)
	with ESMTP id DSV16995; Sat, 15 Oct 2016 22:15:35 +0800 (CST)
Received: from shacidculx1372.china.huawei.com (10.143.155.56) by
	SZXEML424-HUB.china.huawei.com (10.82.67.153) with Microsoft SMTP
	Server id 14.3.235.1; Sat, 15 Oct 2016 22:15:26 +0800
From: &lt;zhouxianrong@huawei.com&gt;
To: &lt;linux-mm@kvack.org&gt;
CC: &lt;linux-kernel@vger.kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;rientjes@google.com&gt;, &lt;hannes@cmpxchg.org&gt;,
	&lt;chris@chris-wilson.co.uk&gt;, &lt;vdavydov.dev@gmail.com&gt;,
	&lt;mgorman@techsingularity.net&gt;, &lt;joe@perches.com&gt;,
	&lt;shawn.lin@rock-chips.com&gt;, &lt;iamjoonsoo.kim@lge.com&gt;,
	&lt;kuleshovmail@gmail.com&gt;, &lt;zhouxianrong@huawei.com&gt;,
	&lt;zhouxiyu@huawei.com&gt;, &lt;zhangshiming5@huawei.com&gt;,
	&lt;won.ho.park@huawei.com&gt;, &lt;tuxiaobing@huawei.com&gt;
Subject: [PATCH vmalloc] reduce purge_lock range and hold time of
Date: Sat, 15 Oct 2016 22:12:48 +0800
Message-ID: &lt;1476540769-31893-1-git-send-email-zhouxianrong@huawei.com&gt;
X-Mailer: git-send-email 1.7.9.5
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.143.155.56]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168503">zhouxianrong@huawei.com</a> - Oct. 15, 2016, 2:12 p.m.</div>
<pre class="content">
<span class="from">From: z00281421 &lt;z00281421@notesmail.huawei.com&gt;</span>

i think no need to place __free_vmap_area loop in purge_lock;
_free_vmap_area could be non-atomic operations with flushing tlb
but must be done after flush tlb. and the whole__free_vmap_area loops
also could be non-atomic operations. if so we could improve realtime
because the loop times sometimes is larg and spend a few time.
<span class="signed-off-by">
Signed-off-by: z00281421 &lt;z00281421@notesmail.huawei.com&gt;</span>
---
 mm/vmalloc.c |   14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - Oct. 15, 2016, 4:55 p.m.</div>
<pre class="content">
On Sat, Oct 15, 2016 at 10:12:48PM +0800, zhouxianrong@huawei.com wrote:
<span class="quote">&gt; From: z00281421 &lt;z00281421@notesmail.huawei.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; i think no need to place __free_vmap_area loop in purge_lock;</span>
<span class="quote">&gt; _free_vmap_area could be non-atomic operations with flushing tlb</span>
<span class="quote">&gt; but must be done after flush tlb. and the whole__free_vmap_area loops</span>
<span class="quote">&gt; also could be non-atomic operations. if so we could improve realtime</span>
<span class="quote">&gt; because the loop times sometimes is larg and spend a few time.</span>

Right, see the previous patch in reply to Joel that drops purge_lock
entirely.

Instead of your open coded batch counter you probably want to add
a cond_resched_lock after the call to __free_vmap_area.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168503">zhouxianrong@huawei.com</a> - Oct. 18, 2016, 2:55 a.m.</div>
<pre class="content">
hey Hellwig:
	cond_resched_lock is a good choice. i mixed the cond_resched_lock and batch to balance of
realtime and performance and resubmit this patch.

On 2016/10/16 0:55, Christoph Hellwig wrote:
<span class="quote">&gt; On Sat, Oct 15, 2016 at 10:12:48PM +0800, zhouxianrong@huawei.com wrote:</span>
<span class="quote">&gt;&gt; From: z00281421 &lt;z00281421@notesmail.huawei.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; i think no need to place __free_vmap_area loop in purge_lock;</span>
<span class="quote">&gt;&gt; _free_vmap_area could be non-atomic operations with flushing tlb</span>
<span class="quote">&gt;&gt; but must be done after flush tlb. and the whole__free_vmap_area loops</span>
<span class="quote">&gt;&gt; also could be non-atomic operations. if so we could improve realtime</span>
<span class="quote">&gt;&gt; because the loop times sometimes is larg and spend a few time.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Right, see the previous patch in reply to Joel that drops purge_lock</span>
<span class="quote">&gt; entirely.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Instead of your open coded batch counter you probably want to add</span>
<span class="quote">&gt; a cond_resched_lock after the call to __free_vmap_area.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; .</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index 91f44e7..9d9154d 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -661,13 +661,23 @@</span> <span class="p_context"> static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,</span>
 	if (nr || force_flush)
 		flush_tlb_kernel_range(*start, *end);
 
<span class="p_add">+	spin_unlock(&amp;purge_lock);</span>
<span class="p_add">+</span>
 	if (nr) {
<span class="p_add">+		/* the batch count should not be too small</span>
<span class="p_add">+		** because if vmalloc space is few free is first than alloc.</span>
<span class="p_add">+		*/</span>
<span class="p_add">+		unsigned char batch = -1;</span>
 		spin_lock(&amp;vmap_area_lock);
<span class="p_del">-		llist_for_each_entry_safe(va, n_va, valist, purge_list)</span>
<span class="p_add">+		llist_for_each_entry_safe(va, n_va, valist, purge_list) {</span>
 			__free_vmap_area(va);
<span class="p_add">+			if (!batch--) {</span>
<span class="p_add">+				spin_unlock(&amp;vmap_area_lock);</span>
<span class="p_add">+				spin_lock(&amp;vmap_area_lock);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
 		spin_unlock(&amp;vmap_area_lock);
 	}
<span class="p_del">-	spin_unlock(&amp;purge_lock);</span>
 }
 
 /*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



