
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>i915 regression in kernel 4.10 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    i915 regression in kernel 4.10</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=3407">Konrad Rzeszutek Wilk</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 20, 2016, 4:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161220165028.GE22440@char.us.oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9481841/mbox/"
   >mbox</a>
|
   <a href="/patch/9481841/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9481841/">/patch/9481841/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1A956601C0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 16:51:49 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0C06121BED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 16:51:49 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 00DF528346; Tue, 20 Dec 2016 16:51:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 47D3121BED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 16:51:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S964810AbcLTQvk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Dec 2016 11:51:40 -0500
Received: from aserp1040.oracle.com ([141.146.126.69]:41821 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753976AbcLTQvi (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Dec 2016 11:51:38 -0500
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id uBKGoUNM015974
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 20 Dec 2016 16:50:31 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id uBKGoUqW022335
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 20 Dec 2016 16:50:30 GMT
Received: from abhmp0007.oracle.com (abhmp0007.oracle.com [141.146.116.13])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	uBKGoT2E008414; Tue, 20 Dec 2016 16:50:29 GMT
Received: from char.us.oracle.com (/10.137.176.158)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 20 Dec 2016 08:50:29 -0800
Received: by char.us.oracle.com (Postfix, from userid 1000)
	id 288876A00EB; Tue, 20 Dec 2016 11:50:28 -0500 (EST)
Date: Tue, 20 Dec 2016 11:50:28 -0500
From: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
To: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Chris Wilson &lt;chris@chris-wilson.co.uk&gt;,
	Linux Kernel Mailing List &lt;linux-kernel@vger.kernel.org&gt;,
	dri-devel@lists.freedesktop.org,
	intel-gfx &lt;intel-gfx@lists.freedesktop.org&gt;, airlied@linux.ie,
	jani.nikula@linux.intel.com, daniel.vetter@intel.com,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Subject: Re: i915 regression in kernel 4.10
Message-ID: &lt;20161220165028.GE22440@char.us.oracle.com&gt;
References: &lt;7abf8559-3aa7-af3a-8dc1-1dee42019fcd@suse.com&gt;
	&lt;20161219122934.GM29871@nuc-i3427.alporthouse.com&gt;
	&lt;3de0be86-c0bc-6bfd-defa-745b589d7bd9@suse.com&gt;
	&lt;20161220144246.GA23668@char.us.oracle.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20161220144246.GA23668@char.us.oracle.com&gt;
User-Agent: Mutt/1.7.1 (2016-10-04)
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3407">Konrad Rzeszutek Wilk</a> - Dec. 20, 2016, 4:50 p.m.</div>
<pre class="content">
On Tue, Dec 20, 2016 at 09:42:46AM -0500, Konrad Rzeszutek Wilk wrote:
<span class="quote">&gt; On Mon, Dec 19, 2016 at 03:16:44PM +0100, Juergen Gross wrote:</span>
<span class="quote">&gt; &gt; On 19/12/16 13:29, Chris Wilson wrote:</span>
<span class="quote">&gt; &gt; &gt; On Mon, Dec 19, 2016 at 12:39:16PM +0100, Juergen Gross wrote:</span>
<span class="quote">&gt; &gt; &gt;&gt; With recent 4.10 kernel the graphics isn&#39;t coming up under Xen. First</span>
<span class="quote">&gt; &gt; &gt;&gt; failure message is:</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; [   46.656649] i915 0000:00:02.0: swiotlb buffer is full (sz: 1630208 bytes)</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Do we get a silent failure? i915_gem_gtt_prepare_pages() is where we</span>
<span class="quote">&gt; &gt; &gt; call dma_map_sg() and pass the sg to swiotlb (in this case) for</span>
<span class="quote">&gt; &gt; &gt; remapping, and we do check for an error value of 0. After that error,</span>
<span class="quote">&gt; &gt; &gt; SWIOTLB_MAP_ERROR is propagated back and converted to 0 for</span>
<span class="quote">&gt; &gt; &gt; dma_map_sg(). That looks valid, and we should report ENOMEM back to the</span>
<span class="quote">&gt; &gt; &gt; caller.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt;&gt; Later I see splats like:</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; [   49.393583] general protection fault: 0000 [#1] SMP</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; What was the faulting address? RAX is particularly non-pointer-like so I</span>
<span class="quote">&gt; &gt; &gt; wonder if we walked onto an uninitialised portion of the sgtable. We may</span>
<span class="quote">&gt; &gt; &gt; have tripped over a bug in our sg_page iterator.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; During the bisect process there have been either GP or NULL pointer</span>
<span class="quote">&gt; &gt; dereferences or other page faults. Typical addresses where:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; xen_swiotlb_unmap_sg_attrs+0x1f/0x50: access to 0000000000000018</span>
<span class="quote">&gt; &gt; xen_swiotlb_unmap_sg_attrs+0x1f/0x50: access to 0000000003020118</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The attached patch should prevent an early ENOMEM following the swiotlb</span>
<span class="quote">&gt; &gt; &gt; allocation failure. But I suspect that we will still be tripping up the</span>
<span class="quote">&gt; &gt; &gt; failure in the sg walker when binding to the GPU.</span>
<span class="quote">&gt; &gt; &gt; -Chris</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The patch is working not too bad. :-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Still several &quot;swiotlb buffer is full&quot; messages (some with sz:, most</span>
<span class="quote">&gt; &gt; without), but no faults any more (neither GP nor NULL pointer</span>
<span class="quote">&gt; &gt; dereference). Graphical login is working now.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think I know why. The optimization that was added assumes that</span>
<span class="quote">&gt; bus addresses is the same as physical address. Hence it packs all</span>
<span class="quote">&gt; of the virtual addresses in the sg, and hands it off to SWIOTLB</span>
<span class="quote">&gt; which walks each one and realizes that it has to use the bounce</span>
<span class="quote">&gt; buffer.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am wondering if would make sense to pull &#39;swiotlb_max_size&#39; inside</span>
<span class="quote">&gt; of SWIOTLB and make it an library-ish - so Xen-SWIOTLB can register</span>
<span class="quote">&gt; as well and report say that it can only provide one page</span>
<span class="quote">&gt; (unless it is running under baremtal).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Or make the usage of &#39;max_segement&#39; and &#39;page_to_pfn(page) != last_pfn + 1&#39;</span>
<span class="quote">&gt; in i915_gem_object_Get_pages_gtt use something similar to xen_biovec_phys_mergeable?</span>

Chris,

I was thinking of something like this (which Juergen has already tested).


From f196f1294fd25f1402c3dd1231babb8d7f5db2e7 Mon Sep 17 00:00:00 2001
<span class="from">From: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
Date: Tue, 20 Dec 2016 10:02:02 -0500
Subject: [PATCH] swiotlb: Export swiotlb_max_segment to users

So they can figure out what is the optimal number of pages
that can be contingously stitched together without fear of
bounce buffer.

We also expose an mechanism for sub-users of SWIOTLB API, such
as Xen-SWIOTLB to set the max segment value. And lastly
if swiotlb=force is set (which mandates we bounce buffer everything)
we set max_segment so at least we can bounce buffer one 4K page
instead of a giant 512KB one for which we may not have space.

Reported-and-Tested-by: Juergen Gross &lt;jgross@suse.com&gt;
<span class="signed-off-by">Signed-off-by: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
---
 drivers/gpu/drm/i915/i915_gem.c | 11 +----------
 drivers/xen/swiotlb-xen.c       |  4 ++++
 include/linux/swiotlb.h         |  3 +++
 lib/swiotlb.c                   | 26 ++++++++++++++++++++++++++
 4 files changed, 34 insertions(+), 10 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_header">index d0dcaf3..115fa39 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_chunk">@@ -2290,15 +2290,6 @@</span> <span class="p_context"> void __i915_gem_object_put_pages(struct drm_i915_gem_object *obj,</span>
 	mutex_unlock(&amp;obj-&gt;mm.lock);
 }
 
<span class="p_del">-static unsigned int swiotlb_max_size(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-#if IS_ENABLED(CONFIG_SWIOTLB)</span>
<span class="p_del">-	return rounddown(swiotlb_nr_tbl() &lt;&lt; IO_TLB_SHIFT, PAGE_SIZE);</span>
<span class="p_del">-#else</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-#endif</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void i915_sg_trim(struct sg_table *orig_st)
 {
 	struct sg_table new_st;
<span class="p_chunk">@@ -2345,7 +2336,7 @@</span> <span class="p_context"> i915_gem_object_get_pages_gtt(struct drm_i915_gem_object *obj)</span>
 	GEM_BUG_ON(obj-&gt;base.read_domains &amp; I915_GEM_GPU_DOMAINS);
 	GEM_BUG_ON(obj-&gt;base.write_domain &amp; I915_GEM_GPU_DOMAINS);
 
<span class="p_del">-	max_segment = swiotlb_max_size();</span>
<span class="p_add">+	max_segment = swiotlb_max_segment();</span>
 	if (!max_segment)
 		max_segment = rounddown(UINT_MAX, PAGE_SIZE);
 
<span class="p_header">diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">index aba1200..f905d6e 100644</span>
<span class="p_header">--- a/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">+++ b/drivers/xen/swiotlb-xen.c</span>
<span class="p_chunk">@@ -275,6 +275,10 @@</span> <span class="p_context"> int __ref xen_swiotlb_init(int verbose, bool early)</span>
 		rc = 0;
 	} else
 		rc = swiotlb_late_init_with_tbl(xen_io_tlb_start, xen_io_tlb_nslabs);
<span class="p_add">+</span>
<span class="p_add">+	if (!rc)</span>
<span class="p_add">+		swiotlb_set_max_segment(PAGE_SIZE);</span>
<span class="p_add">+</span>
 	return rc;
 error:
 	if (repeat--) {
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index d9c84a9..d7eacd8 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -114,11 +114,14 @@</span> <span class="p_context"> swiotlb_dma_supported(struct device *hwdev, u64 mask);</span>
 
 #ifdef CONFIG_SWIOTLB
 extern void __init swiotlb_free(void);
<span class="p_add">+unsigned int swiotlb_max_segment(void);</span>
 #else
 static inline void swiotlb_free(void) { }
<span class="p_add">+unsigned int swiotlb_max_segment(void) { return 0; }</span>
 #endif
 
 extern void swiotlb_print_info(void);
 extern int is_swiotlb_buffer(phys_addr_t paddr);
<span class="p_add">+extern void swiotlb_set_max_segment(unsigned int);</span>
 
 #endif /* __LINUX_SWIOTLB_H */
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 9def738..975b8fc 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -83,6 +83,12 @@</span> <span class="p_context"> static unsigned int *io_tlb_list;</span>
 static unsigned int io_tlb_index;
 
 /*
<span class="p_add">+ * Max segment that we can provide which (if pages are contingous) will</span>
<span class="p_add">+ * not be bounced (unless SWIOTLB_FORCE is set).</span>
<span class="p_add">+ */</span>
<span class="p_add">+unsigned int max_segment;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * We need to save away the original address corresponding to a mapped entry
  * for the sync operations.
  */
<span class="p_chunk">@@ -124,6 +130,20 @@</span> <span class="p_context"> unsigned long swiotlb_nr_tbl(void)</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_nr_tbl);
 
<span class="p_add">+unsigned int swiotlb_max_segment(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return max_segment;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(swiotlb_max_segment);</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_max_segment(unsigned int val)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (swiotlb_force == SWIOTLB_FORCE)</span>
<span class="p_add">+		max_segment = 1;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		max_segment = rounddown(val, PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* default to 64MB */
 #define IO_TLB_DEFAULT_SIZE (64UL&lt;&lt;20)
 unsigned long swiotlb_size_or_default(void)
<span class="p_chunk">@@ -205,6 +225,7 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	if (verbose)
 		swiotlb_print_info();
 
<span class="p_add">+	swiotlb_set_max_segment(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -283,6 +304,7 @@</span> <span class="p_context"> swiotlb_late_init_with_default_size(size_t default_size)</span>
 	rc = swiotlb_late_init_with_tbl(vstart, io_tlb_nslabs);
 	if (rc)
 		free_pages((unsigned long)vstart, order);
<span class="p_add">+</span>
 	return rc;
 }
 
<span class="p_chunk">@@ -337,6 +359,8 @@</span> <span class="p_context"> swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs)</span>
 
 	late_alloc = 1;
 
<span class="p_add">+	swiotlb_set_max_segment(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
<span class="p_add">+</span>
 	return 0;
 
 cleanup4:
<span class="p_chunk">@@ -351,6 +375,7 @@</span> <span class="p_context"> swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs)</span>
 	io_tlb_end = 0;
 	io_tlb_start = 0;
 	io_tlb_nslabs = 0;
<span class="p_add">+	max_segment = 0;</span>
 	return -ENOMEM;
 }
 
<span class="p_chunk">@@ -379,6 +404,7 @@</span> <span class="p_context"> void __init swiotlb_free(void)</span>
 				   PAGE_ALIGN(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT));
 	}
 	io_tlb_nslabs = 0;
<span class="p_add">+	max_segment = 0;</span>
 }
 
 int is_swiotlb_buffer(phys_addr_t paddr)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



