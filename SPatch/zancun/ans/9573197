
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[6/6] x86/platform/uv/BAU: Add payload descriptor qualifier - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [6/6] x86/platform/uv/BAU: Add payload descriptor qualifier</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 15, 2017, 1:58 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1487123931-56809-7-git-send-email-abanman@hpe.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9573197/mbox/"
   >mbox</a>
|
   <a href="/patch/9573197/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9573197/">/patch/9573197/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C031E601D8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 02:00:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B3AC328448
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 02:00:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A828528452; Wed, 15 Feb 2017 02:00:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4BE7A28448
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 01:59:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751575AbdBOB7P (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Feb 2017 20:59:15 -0500
Received: from relay3.sgi.com ([192.48.152.1]:60850 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751334AbdBOB7N (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Feb 2017 20:59:13 -0500
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay3.corp.sgi.com (Postfix) with ESMTP id 94636AC004;
	Tue, 14 Feb 2017 17:59:12 -0800 (PST)
Received: by stormcage.americas.sgi.com (Postfix, from userid 200151)
	id 57FE4203748D9; Tue, 14 Feb 2017 19:59:12 -0600 (CST)
From: Andrew Banman &lt;abanman@hpe.com&gt;
To: mingo@redhat.com
Cc: akpm@linux-foundation.org, tglx@linutronix.de, hpa@zytor.com,
	mike.travis@hpe.com, rja@hpe.com, sivanich@hpe.com, x86@kernel.org,
	linux-kernel@vger.kernel.org, abanman@hpe.com
Subject: [PATCH 6/6] x86/platform/uv/BAU: Add payload descriptor qualifier
Date: Tue, 14 Feb 2017 19:58:51 -0600
Message-Id: &lt;1487123931-56809-7-git-send-email-abanman@hpe.com&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1487123931-56809-1-git-send-email-abanman@hpe.com&gt;
References: &lt;1487123931-56809-1-git-send-email-abanman@hpe.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 15, 2017, 1:58 a.m.</div>
<pre class="content">
On UV4, the destination agent verifies each message by checking the
descriptor qualifier field of the message payload. Messages without this
field set to 0x534749 will cause a hub error to assert. Make this the
default action for future architectures, anticipating they will have
the same requirement.
<span class="signed-off-by">

Signed-off-by: Andrew Banman &lt;abanman@hpe.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;mike.travis@hpe.com&gt;</span>
---
 arch/x86/include/asm/uv/uv_bau.h | 23 +++++++++++++++++++++--
 arch/x86/platform/uv/tlb_uv.c    | 22 +++++++++++++++++++---
 2 files changed, 40 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Feb. 16, 2017, 6:42 p.m.</div>
<pre class="content">
On Tue, 14 Feb 2017, Andrew Banman wrote:
<span class="quote">
&gt; On UV4, the destination agent verifies each message by checking the</span>
<span class="quote">&gt; descriptor qualifier field of the message payload. Messages without this</span>
<span class="quote">&gt; field set to 0x534749 will cause a hub error to assert.</span>

Ok.

What&#39;s missing here is:

  Seperate the message structs for uv123 and uv4. 
<span class="quote">
&gt; Make this the default action for future architectures, anticipating they</span>
<span class="quote">&gt; will have the same requirement.</span>

That&#39;s a guarantee to cause issues when uv5 comes around. The way better
solution for this is to do:

enum uv_bau_version {
     UV_BAU_V1 = 1,
     UV_BAU_V2,
     UV_BAU_V3,
     UV_BAU_V4,
};

Make bau-&gt;uvhub_version type uv_bau_version and use the enum constants in
the switch case. That way the compiler will catch you when you add
UV_BAU_V5 and forgot to update that switch case. That&#39;s probably handy to
have that in a few other places which switch on the bau version.
<span class="quote">
&gt; -struct bau_msg_payload {</span>
<span class="quote">&gt; +struct uv1_2_3_bau_msg_payload {</span>
<span class="quote">&gt;  	unsigned long	address;		/* signifies a page or all</span>
<span class="quote">&gt;  						   TLB&#39;s of the cpu */</span>
<span class="quote">&gt;  	/* 64 bits */</span>
<span class="quote">&gt; @@ -236,6 +238,20 @@ struct bau_msg_payload {</span>
<span class="quote">&gt;  	unsigned int	reserved1:32;		/* not usable */</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +struct uv4_bau_msg_payload {</span>
<span class="quote">&gt; +	unsigned long	address;		/* signifies a page or all</span>
<span class="quote">&gt; +						 * TLB&#39;s of the cpu</span>
<span class="quote">&gt; +						 */</span>

Please get rid of these tail comments. Either document the struct members
with a comment above the member or even better use the KernelDoc comment
format above the struct to document it.
<span class="quote">
&gt; +	/* 64 bits */</span>

And these are horrible. I had to look twice where this belongs to. I know
you copied existing crap, but that does not make it any better. And really,
if you want to express the size of a member here because you have to talk
to hardware then use the proper types we have for this: u64, u32, u16 ....
<span class="quote">
&gt; +	unsigned short	sending_cpu;		/* filled in by sender */</span>
<span class="quote">&gt; +	/* 16 bits */</span>
<span class="quote">&gt; +	unsigned short	acknowledge_count;	/* filled in by destination */</span>
<span class="quote">&gt; +	/* 16 bits */</span>
<span class="quote">&gt; +	unsigned int	reserved1:8;		/* not usable */</span>
<span class="quote">&gt; +	unsigned int	qualifier:24;		/* descriptor qualifier filled</span>
<span class="quote">&gt; +						 * in by sender</span>
<span class="quote">

&gt; @@ -1200,6 +1200,7 @@ const struct cpumask *uv_flush_tlb_other</span>
<span class="quote">&gt;  	struct bau_control *bcp;</span>
<span class="quote">&gt;  	unsigned long descriptor_status;</span>
<span class="quote">&gt;  	unsigned long status;</span>
<span class="quote">&gt; +	unsigned long address;</span>

Same types can go into a single line. No value in wasting lines.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 16, 2017, 9:12 p.m.</div>
<pre class="content">
I will resubmit this patch and [Patch 5/6] as separate patches. They are 
both independent of the wait_completion feature.

I agree with your suggestions here. The updated version will have 
KernelDoc comments and proper u** integer types. I&#39;d also like to add a 
preparatory patch to implement the hub version enum constants. This 
patch will replace all the magic numbers used to check uvhub_version. 
Like so:

[Patch 1/2] x86/platform/uv/BAU: Add uv_bau_version enumerated constants
[PATCH 2/2] x86/platform/uv/BAU: Add payload descriptor qualifier


Thank you for the suggestions!

Andrew Banman

On 02/16/2017 12:42 PM, Thomas Gleixner wrote:
<span class="quote">&gt; On Tue, 14 Feb 2017, Andrew Banman wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On UV4, the destination agent verifies each message by checking the</span>
<span class="quote">&gt;&gt; descriptor qualifier field of the message payload. Messages without this</span>
<span class="quote">&gt;&gt; field set to 0x534749 will cause a hub error to assert.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ok.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What&#39;s missing here is:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   Seperate the message structs for uv123 and uv4.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Make this the default action for future architectures, anticipating they</span>
<span class="quote">&gt;&gt; will have the same requirement.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; That&#39;s a guarantee to cause issues when uv5 comes around. The way better</span>
<span class="quote">&gt; solution for this is to do:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; enum uv_bau_version {</span>
<span class="quote">&gt;      UV_BAU_V1 = 1,</span>
<span class="quote">&gt;      UV_BAU_V2,</span>
<span class="quote">&gt;      UV_BAU_V3,</span>
<span class="quote">&gt;      UV_BAU_V4,</span>
<span class="quote">&gt; };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Make bau-&gt;uvhub_version type uv_bau_version and use the enum constants in</span>
<span class="quote">&gt; the switch case. That way the compiler will catch you when you add</span>
<span class="quote">&gt; UV_BAU_V5 and forgot to update that switch case. That&#39;s probably handy to</span>
<span class="quote">&gt; have that in a few other places which switch on the bau version.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; -struct bau_msg_payload {</span>
<span class="quote">&gt;&gt; +struct uv1_2_3_bau_msg_payload {</span>
<span class="quote">&gt;&gt;  	unsigned long	address;		/* signifies a page or all</span>
<span class="quote">&gt;&gt;  						   TLB&#39;s of the cpu */</span>
<span class="quote">&gt;&gt;  	/* 64 bits */</span>
<span class="quote">&gt;&gt; @@ -236,6 +238,20 @@ struct bau_msg_payload {</span>
<span class="quote">&gt;&gt;  	unsigned int	reserved1:32;		/* not usable */</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +struct uv4_bau_msg_payload {</span>
<span class="quote">&gt;&gt; +	unsigned long	address;		/* signifies a page or all</span>
<span class="quote">&gt;&gt; +						 * TLB&#39;s of the cpu</span>
<span class="quote">&gt;&gt; +						 */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Please get rid of these tail comments. Either document the struct members</span>
<span class="quote">&gt; with a comment above the member or even better use the KernelDoc comment</span>
<span class="quote">&gt; format above the struct to document it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +	/* 64 bits */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And these are horrible. I had to look twice where this belongs to. I know</span>
<span class="quote">&gt; you copied existing crap, but that does not make it any better. And really,</span>
<span class="quote">&gt; if you want to express the size of a member here because you have to talk</span>
<span class="quote">&gt; to hardware then use the proper types we have for this: u64, u32, u16 ....</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +	unsigned short	sending_cpu;		/* filled in by sender */</span>
<span class="quote">&gt;&gt; +	/* 16 bits */</span>
<span class="quote">&gt;&gt; +	unsigned short	acknowledge_count;	/* filled in by destination */</span>
<span class="quote">&gt;&gt; +	/* 16 bits */</span>
<span class="quote">&gt;&gt; +	unsigned int	reserved1:8;		/* not usable */</span>
<span class="quote">&gt;&gt; +	unsigned int	qualifier:24;		/* descriptor qualifier filled</span>
<span class="quote">&gt;&gt; +						 * in by sender</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -1200,6 +1200,7 @@ const struct cpumask *uv_flush_tlb_other</span>
<span class="quote">&gt;&gt;  	struct bau_control *bcp;</span>
<span class="quote">&gt;&gt;  	unsigned long descriptor_status;</span>
<span class="quote">&gt;&gt;  	unsigned long status;</span>
<span class="quote">&gt;&gt; +	unsigned long address;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Same types can go into a single line. No value in wasting lines.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	tglx</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">Index: community/arch/x86/include/asm/uv/uv_bau.h</span>
===================================================================
<span class="p_header">--- community.orig/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">+++ community/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_chunk">@@ -185,6 +185,8 @@</span> <span class="p_context"></span>
 #define MSG_REGULAR			1
 #define MSG_RETRY			2
 
<span class="p_add">+#define BAU_DESC_QUALIFIER		0x534749</span>
<span class="p_add">+</span>
 /*
  * Distribution: 32 bytes (256 bits) (bytes 0-0x1f of descriptor)
  * If the &#39;multilevel&#39; flag in the header portion of the descriptor
<span class="p_chunk">@@ -225,7 +227,7 @@</span> <span class="p_context"> struct bau_local_cpumask {</span>
 /*
  * The payload is software-defined for INTD transactions
  */
<span class="p_del">-struct bau_msg_payload {</span>
<span class="p_add">+struct uv1_2_3_bau_msg_payload {</span>
 	unsigned long	address;		/* signifies a page or all
 						   TLB&#39;s of the cpu */
 	/* 64 bits */
<span class="p_chunk">@@ -236,6 +238,20 @@</span> <span class="p_context"> struct bau_msg_payload {</span>
 	unsigned int	reserved1:32;		/* not usable */
 };
 
<span class="p_add">+struct uv4_bau_msg_payload {</span>
<span class="p_add">+	unsigned long	address;		/* signifies a page or all</span>
<span class="p_add">+						 * TLB&#39;s of the cpu</span>
<span class="p_add">+						 */</span>
<span class="p_add">+	/* 64 bits */</span>
<span class="p_add">+	unsigned short	sending_cpu;		/* filled in by sender */</span>
<span class="p_add">+	/* 16 bits */</span>
<span class="p_add">+	unsigned short	acknowledge_count;	/* filled in by destination */</span>
<span class="p_add">+	/* 16 bits */</span>
<span class="p_add">+	unsigned int	reserved1:8;		/* not usable */</span>
<span class="p_add">+	unsigned int	qualifier:24;		/* descriptor qualifier filled</span>
<span class="p_add">+						 * in by sender</span>
<span class="p_add">+						 */</span>
<span class="p_add">+};</span>
 
 /*
  * UV1 Message header:  16 bytes (128 bits) (bytes 0x30-0x3f of descriptor)
<span class="p_chunk">@@ -400,7 +416,10 @@</span> <span class="p_context"> struct bau_desc {</span>
 		struct uv2_3_bau_msg_header	uv2_3_hdr;
 	} header;
 
<span class="p_del">-	struct bau_msg_payload			payload;</span>
<span class="p_add">+	union bau_payload_header {</span>
<span class="p_add">+		struct uv1_2_3_bau_msg_payload	uv1_2_3;</span>
<span class="p_add">+		struct uv4_bau_msg_payload	uv4;</span>
<span class="p_add">+	} payload;</span>
 };
 /* UV1:
  *   -payload--    ---------header------
<span class="p_header">Index: community/arch/x86/platform/uv/tlb_uv.c</span>
===================================================================
<span class="p_header">--- community.orig/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ community/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -1200,6 +1200,7 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_other</span>
 	struct bau_control *bcp;
 	unsigned long descriptor_status;
 	unsigned long status;
<span class="p_add">+	unsigned long address;</span>
 
 	bcp = &amp;per_cpu(bau_control, cpu);
 
<span class="p_chunk">@@ -1248,10 +1249,25 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_other</span>
 	record_send_statistics(stat, locals, hubs, remotes, bau_desc);
 
 	if (!end || (end - start) &lt;= PAGE_SIZE)
<span class="p_del">-		bau_desc-&gt;payload.address = start;</span>
<span class="p_add">+		address = start;</span>
 	else
<span class="p_del">-		bau_desc-&gt;payload.address = TLB_FLUSH_ALL;</span>
<span class="p_del">-	bau_desc-&gt;payload.sending_cpu = cpu;</span>
<span class="p_add">+		address = TLB_FLUSH_ALL;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (bcp-&gt;uvhub_version) {</span>
<span class="p_add">+	case 1:</span>
<span class="p_add">+	case 2:</span>
<span class="p_add">+	case 3:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.sending_cpu = cpu;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case 4:</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.sending_cpu = cpu;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.qualifier = BAU_DESC_QUALIFIER;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * uv_flush_send_and_wait returns 0 if all cpu&#39;s were messaged,
 	 * or 1 if it gave up and the original cpumask should be returned.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



