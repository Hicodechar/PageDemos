
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,3/6] mm/userfaultfd: add __mcopy_atomic_hugetlb for huge page UFFDIO_COPY - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,3/6] mm/userfaultfd: add __mcopy_atomic_hugetlb for huge page UFFDIO_COPY</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 6, 2016, 5:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1465235131-6112-4-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9158955/mbox/"
   >mbox</a>
|
   <a href="/patch/9158955/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9158955/">/patch/9158955/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	24BE160759 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1A8F628210
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0E48B2834E; Mon,  6 Jun 2016 17:46:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7459B28210
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752982AbcFFRqL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Jun 2016 13:46:11 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:28198 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752946AbcFFRqI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Jun 2016 13:46:08 -0400
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id u56HjrUU031766
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 6 Jun 2016 17:45:53 GMT
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by userv0022.oracle.com (8.14.4/8.13.8) with ESMTP id
	u56HjrGD006187
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Mon, 6 Jun 2016 17:45:53 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
	by aserv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	u56Hjo06007090; Mon, 6 Jun 2016 17:45:51 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 06 Jun 2016 10:45:49 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 3/6] mm/userfaultfd: add __mcopy_atomic_hugetlb for huge
	page UFFDIO_COPY
Date: Mon,  6 Jun 2016 10:45:28 -0700
Message-Id: &lt;1465235131-6112-4-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.11
In-Reply-To: &lt;1465235131-6112-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1465235131-6112-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 6, 2016, 5:45 p.m.</div>
<pre class="content">
__mcopy_atomic_hugetlb performs the UFFDIO_COPY operation for huge
pages.  It is based on the existing __mcopy_atomic routine for normal
pages.  Unlike normal pages, there is no huge page support for the
UFFDIO_ZEROPAGE operation.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/userfaultfd.c | 179 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 179 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - June 7, 2016, 6:27 a.m.</div>
<pre class="content">
<span class="quote">&gt; @@ -182,6 +354,13 @@ retry:</span>
<span class="quote">&gt;  		goto out_unlock;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; +	 * If this is a HUGETLB vma, pass off to appropriate routine</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (dst_vma-&gt;vm_flags &amp; VM_HUGETLB)</span>

Use is_vm_hugetlb_page()?
And in cases in subsequent patches?

Hillf
<span class="quote">&gt; +		return  __mcopy_atomic_hugetlb(dst_mm, dst_vma, dst_start,</span>
<span class="quote">&gt; +						src_start, len, false);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt;  	 * Be strict and only allow __mcopy_atomic on userfaultfd</span>
<span class="quote">&gt;  	 * registered ranges to prevent userland errors going</span>
<span class="quote">&gt;  	 * unnoticed. As far as the VM consistency is concerned, it</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.4.11</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 7, 2016, 4:35 p.m.</div>
<pre class="content">
On 06/06/2016 11:27 PM, Hillf Danton wrote:
<span class="quote">&gt;&gt; @@ -182,6 +354,13 @@ retry:</span>
<span class="quote">&gt;&gt;  		goto out_unlock;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	/*</span>
<span class="quote">&gt;&gt; +	 * If this is a HUGETLB vma, pass off to appropriate routine</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	if (dst_vma-&gt;vm_flags &amp; VM_HUGETLB)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use is_vm_hugetlb_page()?</span>
<span class="quote">&gt; And in cases in subsequent patches?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hillf</span>

Yes, that would be better.  Thanks.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/userfaultfd.c b/mm/userfaultfd.c</span>
<span class="p_header">index af817e5..c006f46 100644</span>
<span class="p_header">--- a/mm/userfaultfd.c</span>
<span class="p_header">+++ b/mm/userfaultfd.c</span>
<span class="p_chunk">@@ -14,6 +14,8 @@</span> <span class="p_context"></span>
 #include &lt;linux/swapops.h&gt;
 #include &lt;linux/userfaultfd_k.h&gt;
 #include &lt;linux/mmu_notifier.h&gt;
<span class="p_add">+#include &lt;linux/hugetlb.h&gt;</span>
<span class="p_add">+#include &lt;linux/pagemap.h&gt;</span>
 #include &lt;asm/tlbflush.h&gt;
 #include &quot;internal.h&quot;
 
<span class="p_chunk">@@ -139,6 +141,176 @@</span> <span class="p_context"> static pmd_t *mm_alloc_pmd(struct mm_struct *mm, unsigned long address)</span>
 	return pmd;
 }
 
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * __mcopy_atomic processing for HUGETLB vmas.  Note that this routine is</span>
<span class="p_add">+ * called with mmap_sem held, it will release mmap_sem before returning.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
<span class="p_add">+					      struct vm_area_struct *dst_vma,</span>
<span class="p_add">+					      unsigned long dst_start,</span>
<span class="p_add">+					      unsigned long src_start,</span>
<span class="p_add">+					      unsigned long len,</span>
<span class="p_add">+					      bool zeropage)</span>
<span class="p_add">+{</span>
<span class="p_add">+	ssize_t err;</span>
<span class="p_add">+	pte_t *dst_pte;</span>
<span class="p_add">+	unsigned long src_addr, dst_addr;</span>
<span class="p_add">+	long copied;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	struct hstate *h;</span>
<span class="p_add">+	unsigned long vma_hpagesize;</span>
<span class="p_add">+	pgoff_t idx;</span>
<span class="p_add">+	u32 hash;</span>
<span class="p_add">+	struct address_space *mapping;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * There is no default zero huge page for all huge page sizes as</span>
<span class="p_add">+	 * supported by hugetlb.  A PMD_SIZE huge pages may exist as used</span>
<span class="p_add">+	 * by THP.  Since we can not reliably insert a zero page, this</span>
<span class="p_add">+	 * feature is not supported.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (zeropage)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	src_addr = src_start;</span>
<span class="p_add">+	dst_addr = dst_start;</span>
<span class="p_add">+	copied = 0;</span>
<span class="p_add">+	page = NULL;</span>
<span class="p_add">+	vma_hpagesize = vma_kernel_pagesize(dst_vma);</span>
<span class="p_add">+</span>
<span class="p_add">+retry:</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * On routine entry dst_vma is set.  If we had to drop mmap_sem and</span>
<span class="p_add">+	 * retry, dst_vma will be set to NULL and we must lookup again.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	err = -EINVAL;</span>
<span class="p_add">+	if (!dst_vma) {</span>
<span class="p_add">+		dst_vma = find_vma(dst_mm, dst_start);</span>
<span class="p_add">+		vma_hpagesize = vma_kernel_pagesize(dst_vma);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Make sure the vma is not shared, that the dst range is</span>
<span class="p_add">+		 * both valid and fully within a single existing vma.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (dst_vma-&gt;vm_flags &amp; VM_SHARED)</span>
<span class="p_add">+			goto out_unlock;</span>
<span class="p_add">+		if (dst_start &lt; dst_vma-&gt;vm_start ||</span>
<span class="p_add">+		    dst_start + len &gt; dst_vma-&gt;vm_end)</span>
<span class="p_add">+			goto out_unlock;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Validate alignment based on huge page size</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (dst_start &amp; (vma_hpagesize - 1) || len &amp; (vma_hpagesize - 1))</span>
<span class="p_add">+		goto out_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Only allow __mcopy_atomic_hugetlb on userfaultfd registered ranges.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!dst_vma-&gt;vm_userfaultfd_ctx.ctx)</span>
<span class="p_add">+		goto out_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Ensure the dst_vma has a anon_vma.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	err = -ENOMEM;</span>
<span class="p_add">+	if (unlikely(anon_vma_prepare(dst_vma)))</span>
<span class="p_add">+		goto out_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	h = hstate_vma(dst_vma);</span>
<span class="p_add">+</span>
<span class="p_add">+	while (src_addr &lt; src_start + len) {</span>
<span class="p_add">+		pte_t dst_pteval;</span>
<span class="p_add">+</span>
<span class="p_add">+		BUG_ON(dst_addr &gt;= dst_start + len);</span>
<span class="p_add">+		dst_addr &amp;= huge_page_mask(h);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Serialize via hugetlb_fault_mutex</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		idx = linear_page_index(dst_vma, dst_addr);</span>
<span class="p_add">+		mapping = dst_vma-&gt;vm_file-&gt;f_mapping;</span>
<span class="p_add">+		hash = hugetlb_fault_mutex_hash(h, dst_mm, dst_vma, mapping,</span>
<span class="p_add">+								idx, dst_addr);</span>
<span class="p_add">+		mutex_lock(&amp;hugetlb_fault_mutex_table[hash]);</span>
<span class="p_add">+</span>
<span class="p_add">+		err = -ENOMEM;</span>
<span class="p_add">+		dst_pte = huge_pte_alloc(dst_mm, dst_addr, huge_page_size(h));</span>
<span class="p_add">+		if (!dst_pte) {</span>
<span class="p_add">+			mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);</span>
<span class="p_add">+			goto out_unlock;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		err = -EEXIST;</span>
<span class="p_add">+		dst_pteval = huge_ptep_get(dst_pte);</span>
<span class="p_add">+		if (!huge_pte_none(dst_pteval)) {</span>
<span class="p_add">+			mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);</span>
<span class="p_add">+			goto out_unlock;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		err = hugetlb_mcopy_atomic_pte(dst_mm, dst_pte, dst_vma,</span>
<span class="p_add">+						dst_addr, src_addr, &amp;page);</span>
<span class="p_add">+</span>
<span class="p_add">+		mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);</span>
<span class="p_add">+</span>
<span class="p_add">+		cond_resched();</span>
<span class="p_add">+</span>
<span class="p_add">+		if (unlikely(err == -EFAULT)) {</span>
<span class="p_add">+			up_read(&amp;dst_mm-&gt;mmap_sem);</span>
<span class="p_add">+			BUG_ON(!page);</span>
<span class="p_add">+</span>
<span class="p_add">+			err = copy_huge_page_from_user(</span>
<span class="p_add">+						(const void __user *)src_addr,</span>
<span class="p_add">+						page, pages_per_huge_page(h));</span>
<span class="p_add">+			if (unlikely(err)) {</span>
<span class="p_add">+				err = -EFAULT;</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			down_read(&amp;dst_mm-&gt;mmap_sem);</span>
<span class="p_add">+</span>
<span class="p_add">+			dst_vma = NULL;</span>
<span class="p_add">+			goto retry;</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			BUG_ON(page);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!err) {</span>
<span class="p_add">+			dst_addr += vma_hpagesize;</span>
<span class="p_add">+			src_addr += vma_hpagesize;</span>
<span class="p_add">+			copied += vma_hpagesize;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (fatal_signal_pending(current))</span>
<span class="p_add">+				err = -EINTR;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (err)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+out_unlock:</span>
<span class="p_add">+	up_read(&amp;dst_mm-&gt;mmap_sem);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	if (page)</span>
<span class="p_add">+		put_page(page);</span>
<span class="p_add">+	BUG_ON(copied &lt; 0);</span>
<span class="p_add">+	BUG_ON(err &gt; 0);</span>
<span class="p_add">+	BUG_ON(!copied &amp;&amp; !err);</span>
<span class="p_add">+	return copied ? copied : err;</span>
<span class="p_add">+}</span>
<span class="p_add">+#else /* !CONFIG_HUGETLB_PAGE */</span>
<span class="p_add">+static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
<span class="p_add">+					      struct vm_area_struct *dst_vma,</span>
<span class="p_add">+					      unsigned long dst_start,</span>
<span class="p_add">+					      unsigned long src_start,</span>
<span class="p_add">+					      unsigned long len,</span>
<span class="p_add">+					      bool zeropage)</span>
<span class="p_add">+{</span>
<span class="p_add">+	up_read(&amp;dst_mm-&gt;mmap_sem);	/* HUGETLB not configured */</span>
<span class="p_add">+	BUG();</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_HUGETLB_PAGE */</span>
<span class="p_add">+</span>
 static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,
 					      unsigned long dst_start,
 					      unsigned long src_start,
<span class="p_chunk">@@ -182,6 +354,13 @@</span> <span class="p_context"> retry:</span>
 		goto out_unlock;
 
 	/*
<span class="p_add">+	 * If this is a HUGETLB vma, pass off to appropriate routine</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (dst_vma-&gt;vm_flags &amp; VM_HUGETLB)</span>
<span class="p_add">+		return  __mcopy_atomic_hugetlb(dst_mm, dst_vma, dst_start,</span>
<span class="p_add">+						src_start, len, false);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
 	 * Be strict and only allow __mcopy_atomic on userfaultfd
 	 * registered ranges to prevent userland errors going
 	 * unnoticed. As far as the VM consistency is concerned, it

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



