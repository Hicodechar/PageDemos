
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt; - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 19, 2017, 9:48 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497908927-93636-1-git-send-email-nitin.m.gupta@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9797897/mbox/"
   >mbox</a>
|
   <a href="/patch/9797897/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9797897/">/patch/9797897/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B4043601C8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 21:49:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A7FED20855
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 21:49:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9C9DB25404; Mon, 19 Jun 2017 21:49:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8E74C20855
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 21:49:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752593AbdFSVt4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 19 Jun 2017 17:49:56 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:25702 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752085AbdFSVtl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 19 Jun 2017 17:49:41 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id v5JLn29s004459
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 19 Jun 2017 21:49:02 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id v5JLn28F024692
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 19 Jun 2017 21:49:02 GMT
Received: from abhmp0008.oracle.com (abhmp0008.oracle.com [141.146.116.14])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	v5JLn0bQ027347; Mon, 19 Jun 2017 21:49:00 GMT
Received: from ca-qasparc20.us.oracle.com (/10.147.24.73)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 19 Jun 2017 14:49:00 -0700
From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;
To: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Cc: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Tom Hromatka &lt;tom.hromatka@oracle.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, bob picco &lt;bob.picco@oracle.com&gt;,
	Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;,
	Steven Sistare &lt;steven.sistare@oracle.com&gt;,
	Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;,
	Thomas Tai &lt;thomas.tai@oracle.com&gt;, Atish Patra &lt;atish.patra@oracle.com&gt;,
	sparclinux@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;
Date: Mon, 19 Jun 2017 14:48:00 -0700
Message-Id: &lt;1497908927-93636-1-git-send-email-nitin.m.gupta@oracle.com&gt;
X-Mailer: git-send-email 1.7.1
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a> - June 19, 2017, 9:48 p.m.</div>
<pre class="content">
Adds support for 16GB hugepage size. To use this page size
use kernel parameters as:

default_hugepagesz=16G hugepagesz=16G hugepages=10

Testing:

Tested with the stream benchmark which allocates 48G of
arrays backed by 16G hugepages and does RW operation on
them in parallel.

Orabug: 25362942
<span class="signed-off-by">
Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
---

Changelog v2 vs v1:
 - Remove redundant brgez,pn (Bob Picco)
 - Remove unncessary label rename from 700 to 701 (Rob Gardner)
 - Add patch description (Paul)
 - Add 16G case to get_user_pages()

 arch/sparc/include/asm/page_64.h    |  3 +-
 arch/sparc/include/asm/pgtable_64.h |  5 +++
 arch/sparc/include/asm/tsb.h        | 30 +++++++++++++++
 arch/sparc/kernel/tsb.S             |  2 +-
 arch/sparc/mm/hugetlbpage.c         | 74 ++++++++++++++++++++++++++-----------
 arch/sparc/mm/init_64.c             | 41 ++++++++++++++++----
 6 files changed, 125 insertions(+), 30 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a> - June 19, 2017, 9:52 p.m.</div>
<pre class="content">
Please ignore this patch series. I will resend again with correct email 
headers.

Nitin


On 6/19/17 2:48 PM, Nitin Gupta wrote:
<span class="quote">&gt; Adds support for 16GB hugepage size. To use this page size</span>
<span class="quote">&gt; use kernel parameters as:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; default_hugepagesz=16G hugepagesz=16G hugepages=10</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Testing:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Tested with the stream benchmark which allocates 48G of</span>
<span class="quote">&gt; arrays backed by 16G hugepages and does RW operation on</span>
<span class="quote">&gt; them in parallel.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Orabug: 25362942</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Changelog v2 vs v1:</span>
<span class="quote">&gt;   - Remove redundant brgez,pn (Bob Picco)</span>
<span class="quote">&gt;   - Remove unncessary label rename from 700 to 701 (Rob Gardner)</span>
<span class="quote">&gt;   - Add patch description (Paul)</span>
<span class="quote">&gt;   - Add 16G case to get_user_pages()</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   arch/sparc/include/asm/page_64.h    |  3 +-</span>
<span class="quote">&gt;   arch/sparc/include/asm/pgtable_64.h |  5 +++</span>
<span class="quote">&gt;   arch/sparc/include/asm/tsb.h        | 30 +++++++++++++++</span>
<span class="quote">&gt;   arch/sparc/kernel/tsb.S             |  2 +-</span>
<span class="quote">&gt;   arch/sparc/mm/hugetlbpage.c         | 74 ++++++++++++++++++++++++++-----------</span>
<span class="quote">&gt;   arch/sparc/mm/init_64.c             | 41 ++++++++++++++++----</span>
<span class="quote">&gt;   6 files changed, 125 insertions(+), 30 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/sparc/include/asm/page_64.h b/arch/sparc/include/asm/page_64.h</span>
<span class="quote">&gt; index 5961b2d..8ee1f97 100644</span>
<span class="quote">&gt; --- a/arch/sparc/include/asm/page_64.h</span>
<span class="quote">&gt; +++ b/arch/sparc/include/asm/page_64.h</span>
<span class="quote">&gt; @@ -17,6 +17,7 @@</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   #define HPAGE_SHIFT		23</span>
<span class="quote">&gt;   #define REAL_HPAGE_SHIFT	22</span>
<span class="quote">&gt; +#define HPAGE_16GB_SHIFT	34</span>
<span class="quote">&gt;   #define HPAGE_2GB_SHIFT		31</span>
<span class="quote">&gt;   #define HPAGE_256MB_SHIFT	28</span>
<span class="quote">&gt;   #define HPAGE_64K_SHIFT		16</span>
<span class="quote">&gt; @@ -28,7 +29,7 @@</span>
<span class="quote">&gt;   #define HUGETLB_PAGE_ORDER	(HPAGE_SHIFT - PAGE_SHIFT)</span>
<span class="quote">&gt;   #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA</span>
<span class="quote">&gt;   #define REAL_HPAGE_PER_HPAGE	(_AC(1,UL) &lt;&lt; (HPAGE_SHIFT - REAL_HPAGE_SHIFT))</span>
<span class="quote">&gt; -#define HUGE_MAX_HSTATE		4</span>
<span class="quote">&gt; +#define HUGE_MAX_HSTATE		5</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   #ifndef __ASSEMBLY__</span>
<span class="quote">&gt; diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="quote">&gt; index 6fbd931..2444b02 100644</span>
<span class="quote">&gt; --- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="quote">&gt; +++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="quote">&gt; @@ -414,6 +414,11 @@ static inline bool is_hugetlb_pmd(pmd_t pmd)</span>
<span class="quote">&gt;   	return !!(pmd_val(pmd) &amp; _PAGE_PMD_HUGE);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +static inline bool is_hugetlb_pud(pud_t pud)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !!(pud_val(pud) &amp; _PAGE_PUD_HUGE);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   #ifdef CONFIG_TRANSPARENT_HUGEPAGE</span>
<span class="quote">&gt;   static inline pmd_t pmd_mkhuge(pmd_t pmd)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; diff --git a/arch/sparc/include/asm/tsb.h b/arch/sparc/include/asm/tsb.h</span>
<span class="quote">&gt; index 32258e0..7b240a3 100644</span>
<span class="quote">&gt; --- a/arch/sparc/include/asm/tsb.h</span>
<span class="quote">&gt; +++ b/arch/sparc/include/asm/tsb.h</span>
<span class="quote">&gt; @@ -195,6 +195,35 @@ extern struct tsb_phys_patch_entry __tsb_phys_patch, __tsb_phys_patch_end;</span>
<span class="quote">&gt;   	 nop; \</span>
<span class="quote">&gt;   699:</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +	/* PUD has been loaded into REG1, interpret the value, seeing</span>
<span class="quote">&gt; +	 * if it is a HUGE PUD or a normal one.  If it is not valid</span>
<span class="quote">&gt; +	 * then jump to FAIL_LABEL.  If it is a HUGE PUD, and it</span>
<span class="quote">&gt; +	 * translates to a valid PTE, branch to PTE_LABEL.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * We have to propagate bits [32:22] from the virtual address</span>
<span class="quote">&gt; +	 * to resolve at 4M granularity.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +#if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="quote">&gt; +#define USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, PTE_LABEL) \</span>
<span class="quote">&gt; +	brz,pn		REG1, FAIL_LABEL;		\</span>
<span class="quote">&gt; +	 sethi		%uhi(_PAGE_PUD_HUGE), REG2;	\</span>
<span class="quote">&gt; +	sllx		REG2, 32, REG2;			\</span>
<span class="quote">&gt; +	andcc		REG1, REG2, %g0;		\</span>
<span class="quote">&gt; +	be,pt		%xcc, 700f;			\</span>
<span class="quote">&gt; +	 sethi		%hi(0x1ffc0000), REG2;		\</span>
<span class="quote">&gt; +	sllx		REG2, 1, REG2;			\</span>
<span class="quote">&gt; +	brgez,pn	REG1, FAIL_LABEL;		\</span>
<span class="quote">&gt; +	 andn		REG1, REG2, REG1;		\</span>
<span class="quote">&gt; +	and		VADDR, REG2, REG2;		\</span>
<span class="quote">&gt; +	brlz,pt		REG1, PTE_LABEL;		\</span>
<span class="quote">&gt; +	 or		REG1, REG2, REG1;		\</span>
<span class="quote">&gt; +700:</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +#define USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, PTE_LABEL) \</span>
<span class="quote">&gt; +	brz,pn		REG1, FAIL_LABEL; \</span>
<span class="quote">&gt; +	 nop;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   	/* PMD has been loaded into REG1, interpret the value, seeing</span>
<span class="quote">&gt;   	 * if it is a HUGE PMD or a normal one.  If it is not valid</span>
<span class="quote">&gt;   	 * then jump to FAIL_LABEL.  If it is a HUGE PMD, and it</span>
<span class="quote">&gt; @@ -242,6 +271,7 @@ extern struct tsb_phys_patch_entry __tsb_phys_patch, __tsb_phys_patch_end;</span>
<span class="quote">&gt;   	srlx		REG2, 64 - PAGE_SHIFT, REG2; \</span>
<span class="quote">&gt;   	andn		REG2, 0x7, REG2; \</span>
<span class="quote">&gt;   	ldxa		[REG1 + REG2] ASI_PHYS_USE_EC, REG1; \</span>
<span class="quote">&gt; +	USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, 800f) \</span>
<span class="quote">&gt;   	brz,pn		REG1, FAIL_LABEL; \</span>
<span class="quote">&gt;   	 sllx		VADDR, 64 - (PMD_SHIFT + PMD_BITS), REG2; \</span>
<span class="quote">&gt;   	srlx		REG2, 64 - PAGE_SHIFT, REG2; \</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/tsb.S b/arch/sparc/kernel/tsb.S</span>
<span class="quote">&gt; index 07c0df9..5f42ac0 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/tsb.S</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/tsb.S</span>
<span class="quote">&gt; @@ -117,7 +117,7 @@ tsb_miss_page_table_walk_sun4v_fastpath:</span>
<span class="quote">&gt;   	/* Valid PTE is now in %g5.  */</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="quote">&gt; -	sethi		%uhi(_PAGE_PMD_HUGE), %g7</span>
<span class="quote">&gt; +	sethi		%uhi(_PAGE_PMD_HUGE | _PAGE_PUD_HUGE), %g7</span>
<span class="quote">&gt;   	sllx		%g7, 32, %g7</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	andcc		%g5, %g7, %g0</span>
<span class="quote">&gt; diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index 88855e3..f0bb42d 100644</span>
<span class="quote">&gt; --- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -143,6 +143,10 @@ static pte_t sun4v_hugepage_shift_to_tte(pte_t entry, unsigned int shift)</span>
<span class="quote">&gt;   	pte_val(entry) = pte_val(entry) &amp; ~_PAGE_SZALL_4V;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	switch (shift) {</span>
<span class="quote">&gt; +	case HPAGE_16GB_SHIFT:</span>
<span class="quote">&gt; +		hugepage_size = _PAGE_SZ16GB_4V;</span>
<span class="quote">&gt; +		pte_val(entry) |= _PAGE_PUD_HUGE;</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt;   	case HPAGE_2GB_SHIFT:</span>
<span class="quote">&gt;   		hugepage_size = _PAGE_SZ2GB_4V;</span>
<span class="quote">&gt;   		pte_val(entry) |= _PAGE_PMD_HUGE;</span>
<span class="quote">&gt; @@ -187,6 +191,9 @@ static unsigned int sun4v_huge_tte_to_shift(pte_t entry)</span>
<span class="quote">&gt;   	unsigned int shift;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	switch (tte_szbits) {</span>
<span class="quote">&gt; +	case _PAGE_SZ16GB_4V:</span>
<span class="quote">&gt; +		shift = HPAGE_16GB_SHIFT;</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt;   	case _PAGE_SZ2GB_4V:</span>
<span class="quote">&gt;   		shift = HPAGE_2GB_SHIFT;</span>
<span class="quote">&gt;   		break;</span>
<span class="quote">&gt; @@ -263,7 +270,12 @@ pte_t *huge_pte_alloc(struct mm_struct *mm,</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt;   	pud = pud_alloc(mm, pgd, addr);</span>
<span class="quote">&gt; -	if (pud) {</span>
<span class="quote">&gt; +	if (!pud)</span>
<span class="quote">&gt; +		return NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sz &gt;= PUD_SIZE)</span>
<span class="quote">&gt; +		pte = (pte_t *)pud;</span>
<span class="quote">&gt; +	else {</span>
<span class="quote">&gt;   		pmd = pmd_alloc(mm, pud, addr);</span>
<span class="quote">&gt;   		if (!pmd)</span>
<span class="quote">&gt;   			return NULL;</span>
<span class="quote">&gt; @@ -288,12 +300,16 @@ pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)</span>
<span class="quote">&gt;   	if (!pgd_none(*pgd)) {</span>
<span class="quote">&gt;   		pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt;   		if (!pud_none(*pud)) {</span>
<span class="quote">&gt; -			pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; -			if (!pmd_none(*pmd)) {</span>
<span class="quote">&gt; -				if (is_hugetlb_pmd(*pmd))</span>
<span class="quote">&gt; -					pte = (pte_t *)pmd;</span>
<span class="quote">&gt; -				else</span>
<span class="quote">&gt; -					pte = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; +			if (is_hugetlb_pud(*pud))</span>
<span class="quote">&gt; +				pte = (pte_t *)pud;</span>
<span class="quote">&gt; +			else {</span>
<span class="quote">&gt; +				pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; +				if (!pmd_none(*pmd)) {</span>
<span class="quote">&gt; +					if (is_hugetlb_pmd(*pmd))</span>
<span class="quote">&gt; +						pte = (pte_t *)pmd;</span>
<span class="quote">&gt; +					else</span>
<span class="quote">&gt; +						pte = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; +				}</span>
<span class="quote">&gt;   			}</span>
<span class="quote">&gt;   		}</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt; @@ -304,12 +320,20 @@ pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)</span>
<span class="quote">&gt;   void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,</span>
<span class="quote">&gt;   		     pte_t *ptep, pte_t entry)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	unsigned int i, nptes, orig_shift, shift;</span>
<span class="quote">&gt; -	unsigned long size;</span>
<span class="quote">&gt; +	unsigned int nptes, orig_shift, shift;</span>
<span class="quote">&gt; +	unsigned long i, size;</span>
<span class="quote">&gt;   	pte_t orig;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	size = huge_tte_to_size(entry);</span>
<span class="quote">&gt; -	shift = size &gt;= HPAGE_SIZE ? PMD_SHIFT : PAGE_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	shift = PAGE_SHIFT;</span>
<span class="quote">&gt; +	if (size &gt;= PUD_SIZE)</span>
<span class="quote">&gt; +		shift = PUD_SHIFT;</span>
<span class="quote">&gt; +	else if (size &gt;= PMD_SIZE)</span>
<span class="quote">&gt; +		shift = PMD_SHIFT;</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		shift = PAGE_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   	nptes = size &gt;&gt; shift;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	if (!pte_present(*ptep) &amp;&amp; pte_present(entry))</span>
<span class="quote">&gt; @@ -332,19 +356,23 @@ void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,</span>
<span class="quote">&gt;   pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
<span class="quote">&gt;   			      pte_t *ptep)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	unsigned int i, nptes, hugepage_shift;</span>
<span class="quote">&gt; +	unsigned int i, nptes, orig_shift, shift;</span>
<span class="quote">&gt;   	unsigned long size;</span>
<span class="quote">&gt;   	pte_t entry;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	entry = *ptep;</span>
<span class="quote">&gt;   	size = huge_tte_to_size(entry);</span>
<span class="quote">&gt; -	if (size &gt;= HPAGE_SIZE)</span>
<span class="quote">&gt; -		nptes = size &gt;&gt; PMD_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	shift = PAGE_SHIFT;</span>
<span class="quote">&gt; +	if (size &gt;= PUD_SIZE)</span>
<span class="quote">&gt; +		shift = PUD_SHIFT;</span>
<span class="quote">&gt; +	else if (size &gt;= PMD_SIZE)</span>
<span class="quote">&gt; +		shift = PMD_SHIFT;</span>
<span class="quote">&gt;   	else</span>
<span class="quote">&gt; -		nptes = size &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +		shift = PAGE_SHIFT;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -	hugepage_shift = pte_none(entry) ? PAGE_SHIFT :</span>
<span class="quote">&gt; -		huge_tte_to_shift(entry);</span>
<span class="quote">&gt; +	nptes = size &gt;&gt; shift;</span>
<span class="quote">&gt; +	orig_shift = pte_none(entry) ? PAGE_SHIFT : huge_tte_to_shift(entry);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	if (pte_present(entry))</span>
<span class="quote">&gt;   		mm-&gt;context.hugetlb_pte_count -= nptes;</span>
<span class="quote">&gt; @@ -353,11 +381,11 @@ pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
<span class="quote">&gt;   	for (i = 0; i &lt; nptes; i++)</span>
<span class="quote">&gt;   		ptep[i] = __pte(0UL);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -	maybe_tlb_batch_add(mm, addr, ptep, entry, 0, hugepage_shift);</span>
<span class="quote">&gt; +	maybe_tlb_batch_add(mm, addr, ptep, entry, 0, orig_shift);</span>
<span class="quote">&gt;   	/* An HPAGE_SIZE&#39;ed page is composed of two REAL_HPAGE_SIZE&#39;ed pages */</span>
<span class="quote">&gt;   	if (size == HPAGE_SIZE)</span>
<span class="quote">&gt;   		maybe_tlb_batch_add(mm, addr + REAL_HPAGE_SIZE, ptep, entry, 0,</span>
<span class="quote">&gt; -				    hugepage_shift);</span>
<span class="quote">&gt; +				    orig_shift);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	return entry;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; @@ -370,7 +398,8 @@ int pmd_huge(pmd_t pmd)</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   int pud_huge(pud_t pud)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	return 0;</span>
<span class="quote">&gt; +	return !pud_none(pud) &amp;&amp;</span>
<span class="quote">&gt; +		(pud_val(pud) &amp; (_PAGE_VALID|_PAGE_PUD_HUGE)) != _PAGE_VALID;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   static void hugetlb_free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,</span>
<span class="quote">&gt; @@ -434,8 +463,11 @@ static void hugetlb_free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,</span>
<span class="quote">&gt;   		next = pud_addr_end(addr, end);</span>
<span class="quote">&gt;   		if (pud_none_or_clear_bad(pud))</span>
<span class="quote">&gt;   			continue;</span>
<span class="quote">&gt; -		hugetlb_free_pmd_range(tlb, pud, addr, next, floor,</span>
<span class="quote">&gt; -				       ceiling);</span>
<span class="quote">&gt; +		if (is_hugetlb_pud(*pud))</span>
<span class="quote">&gt; +			pud_clear(pud);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			hugetlb_free_pmd_range(tlb, pud, addr, next, floor,</span>
<span class="quote">&gt; +					       ceiling);</span>
<span class="quote">&gt;   	} while (pud++, addr = next, addr != end);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	start &amp;= PGDIR_MASK;</span>
<span class="quote">&gt; diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="quote">&gt; index 3c40ebd..cc8d0d4 100644</span>
<span class="quote">&gt; --- a/arch/sparc/mm/init_64.c</span>
<span class="quote">&gt; +++ b/arch/sparc/mm/init_64.c</span>
<span class="quote">&gt; @@ -337,6 +337,10 @@ static int __init setup_hugepagesz(char *string)</span>
<span class="quote">&gt;   	hugepage_shift = ilog2(hugepage_size);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	switch (hugepage_shift) {</span>
<span class="quote">&gt; +	case HPAGE_16GB_SHIFT:</span>
<span class="quote">&gt; +		hv_pgsz_mask = HV_PGSZ_MASK_16GB;</span>
<span class="quote">&gt; +		hv_pgsz_idx = HV_PGSZ_IDX_16GB;</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt;   	case HPAGE_2GB_SHIFT:</span>
<span class="quote">&gt;   		hv_pgsz_mask = HV_PGSZ_MASK_2GB;</span>
<span class="quote">&gt;   		hv_pgsz_idx = HV_PGSZ_IDX_2GB;</span>
<span class="quote">&gt; @@ -377,6 +381,7 @@ void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct mm_struct *mm;</span>
<span class="quote">&gt;   	unsigned long flags;</span>
<span class="quote">&gt; +	bool is_huge_tsb;</span>
<span class="quote">&gt;   	pte_t pte = *ptep;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	if (tlb_type != hypervisor) {</span>
<span class="quote">&gt; @@ -394,15 +399,37 @@ void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +	is_huge_tsb = false;</span>
<span class="quote">&gt;   #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="quote">&gt; -	if ((mm-&gt;context.hugetlb_pte_count || mm-&gt;context.thp_pte_count) &amp;&amp;</span>
<span class="quote">&gt; -	    is_hugetlb_pmd(__pmd(pte_val(pte)))) {</span>
<span class="quote">&gt; -		/* We are fabricating 8MB pages using 4MB real hw pages.  */</span>
<span class="quote">&gt; -		pte_val(pte) |= (address &amp; (1UL &lt;&lt; REAL_HPAGE_SHIFT));</span>
<span class="quote">&gt; -		__update_mmu_tsb_insert(mm, MM_TSB_HUGE, REAL_HPAGE_SHIFT,</span>
<span class="quote">&gt; -					address, pte_val(pte));</span>
<span class="quote">&gt; -	} else</span>
<span class="quote">&gt; +	if (mm-&gt;context.hugetlb_pte_count || mm-&gt;context.thp_pte_count) {</span>
<span class="quote">&gt; +		unsigned long hugepage_size = PAGE_SIZE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (is_vm_hugetlb_page(vma))</span>
<span class="quote">&gt; +			hugepage_size = huge_page_size(hstate_vma(vma));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (hugepage_size &gt;= PUD_SIZE) {</span>
<span class="quote">&gt; +			unsigned long mask = 0x1ffc00000UL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			/* Transfer bits [32:22] from address to resolve</span>
<span class="quote">&gt; +			 * at 4M granularity.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			pte_val(pte) &amp;= ~mask;</span>
<span class="quote">&gt; +			pte_val(pte) |= (address &amp; mask);</span>
<span class="quote">&gt; +		} else if (hugepage_size &gt;= PMD_SIZE) {</span>
<span class="quote">&gt; +			/* We are fabricating 8MB pages using 4MB</span>
<span class="quote">&gt; +			 * real hw pages.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			pte_val(pte) |= (address &amp; (1UL &lt;&lt; REAL_HPAGE_SHIFT));</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (hugepage_size &gt;= PMD_SIZE) {</span>
<span class="quote">&gt; +			__update_mmu_tsb_insert(mm, MM_TSB_HUGE,</span>
<span class="quote">&gt; +				REAL_HPAGE_SHIFT, address, pte_val(pte));</span>
<span class="quote">&gt; +			is_huge_tsb = true;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt; +	if (!is_huge_tsb)</span>
<span class="quote">&gt;   		__update_mmu_tsb_insert(mm, MM_TSB_BASE, PAGE_SHIFT,</span>
<span class="quote">&gt;   					address, pte_val(pte));</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/page_64.h b/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">index 5961b2d..8ee1f97 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/page_64.h</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
 
 #define HPAGE_SHIFT		23
 #define REAL_HPAGE_SHIFT	22
<span class="p_add">+#define HPAGE_16GB_SHIFT	34</span>
 #define HPAGE_2GB_SHIFT		31
 #define HPAGE_256MB_SHIFT	28
 #define HPAGE_64K_SHIFT		16
<span class="p_chunk">@@ -28,7 +29,7 @@</span> <span class="p_context"></span>
 #define HUGETLB_PAGE_ORDER	(HPAGE_SHIFT - PAGE_SHIFT)
 #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA
 #define REAL_HPAGE_PER_HPAGE	(_AC(1,UL) &lt;&lt; (HPAGE_SHIFT - REAL_HPAGE_SHIFT))
<span class="p_del">-#define HUGE_MAX_HSTATE		4</span>
<span class="p_add">+#define HUGE_MAX_HSTATE		5</span>
 #endif
 
 #ifndef __ASSEMBLY__
<span class="p_header">diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">index 6fbd931..2444b02 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -414,6 +414,11 @@</span> <span class="p_context"> static inline bool is_hugetlb_pmd(pmd_t pmd)</span>
 	return !!(pmd_val(pmd) &amp; _PAGE_PMD_HUGE);
 }
 
<span class="p_add">+static inline bool is_hugetlb_pud(pud_t pud)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !!(pud_val(pud) &amp; _PAGE_PUD_HUGE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 static inline pmd_t pmd_mkhuge(pmd_t pmd)
 {
<span class="p_header">diff --git a/arch/sparc/include/asm/tsb.h b/arch/sparc/include/asm/tsb.h</span>
<span class="p_header">index 32258e0..7b240a3 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/tsb.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/tsb.h</span>
<span class="p_chunk">@@ -195,6 +195,35 @@</span> <span class="p_context"> extern struct tsb_phys_patch_entry __tsb_phys_patch, __tsb_phys_patch_end;</span>
 	 nop; \
 699:
 
<span class="p_add">+	/* PUD has been loaded into REG1, interpret the value, seeing</span>
<span class="p_add">+	 * if it is a HUGE PUD or a normal one.  If it is not valid</span>
<span class="p_add">+	 * then jump to FAIL_LABEL.  If it is a HUGE PUD, and it</span>
<span class="p_add">+	 * translates to a valid PTE, branch to PTE_LABEL.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * We have to propagate bits [32:22] from the virtual address</span>
<span class="p_add">+	 * to resolve at 4M granularity.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+#if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="p_add">+#define USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, PTE_LABEL) \</span>
<span class="p_add">+	brz,pn		REG1, FAIL_LABEL;		\</span>
<span class="p_add">+	 sethi		%uhi(_PAGE_PUD_HUGE), REG2;	\</span>
<span class="p_add">+	sllx		REG2, 32, REG2;			\</span>
<span class="p_add">+	andcc		REG1, REG2, %g0;		\</span>
<span class="p_add">+	be,pt		%xcc, 700f;			\</span>
<span class="p_add">+	 sethi		%hi(0x1ffc0000), REG2;		\</span>
<span class="p_add">+	sllx		REG2, 1, REG2;			\</span>
<span class="p_add">+	brgez,pn	REG1, FAIL_LABEL;		\</span>
<span class="p_add">+	 andn		REG1, REG2, REG1;		\</span>
<span class="p_add">+	and		VADDR, REG2, REG2;		\</span>
<span class="p_add">+	brlz,pt		REG1, PTE_LABEL;		\</span>
<span class="p_add">+	 or		REG1, REG2, REG1;		\</span>
<span class="p_add">+700:</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, PTE_LABEL) \</span>
<span class="p_add">+	brz,pn		REG1, FAIL_LABEL; \</span>
<span class="p_add">+	 nop;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	/* PMD has been loaded into REG1, interpret the value, seeing
 	 * if it is a HUGE PMD or a normal one.  If it is not valid
 	 * then jump to FAIL_LABEL.  If it is a HUGE PMD, and it
<span class="p_chunk">@@ -242,6 +271,7 @@</span> <span class="p_context"> extern struct tsb_phys_patch_entry __tsb_phys_patch, __tsb_phys_patch_end;</span>
 	srlx		REG2, 64 - PAGE_SHIFT, REG2; \
 	andn		REG2, 0x7, REG2; \
 	ldxa		[REG1 + REG2] ASI_PHYS_USE_EC, REG1; \
<span class="p_add">+	USER_PGTABLE_CHECK_PUD_HUGE(VADDR, REG1, REG2, FAIL_LABEL, 800f) \</span>
 	brz,pn		REG1, FAIL_LABEL; \
 	 sllx		VADDR, 64 - (PMD_SHIFT + PMD_BITS), REG2; \
 	srlx		REG2, 64 - PAGE_SHIFT, REG2; \
<span class="p_header">diff --git a/arch/sparc/kernel/tsb.S b/arch/sparc/kernel/tsb.S</span>
<span class="p_header">index 07c0df9..5f42ac0 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/tsb.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/tsb.S</span>
<span class="p_chunk">@@ -117,7 +117,7 @@</span> <span class="p_context"> tsb_miss_page_table_walk_sun4v_fastpath:</span>
 	/* Valid PTE is now in %g5.  */
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	sethi		%uhi(_PAGE_PMD_HUGE), %g7</span>
<span class="p_add">+	sethi		%uhi(_PAGE_PMD_HUGE | _PAGE_PUD_HUGE), %g7</span>
 	sllx		%g7, 32, %g7
 
 	andcc		%g5, %g7, %g0
<span class="p_header">diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">index 88855e3..f0bb42d 100644</span>
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -143,6 +143,10 @@</span> <span class="p_context"> static pte_t sun4v_hugepage_shift_to_tte(pte_t entry, unsigned int shift)</span>
 	pte_val(entry) = pte_val(entry) &amp; ~_PAGE_SZALL_4V;
 
 	switch (shift) {
<span class="p_add">+	case HPAGE_16GB_SHIFT:</span>
<span class="p_add">+		hugepage_size = _PAGE_SZ16GB_4V;</span>
<span class="p_add">+		pte_val(entry) |= _PAGE_PUD_HUGE;</span>
<span class="p_add">+		break;</span>
 	case HPAGE_2GB_SHIFT:
 		hugepage_size = _PAGE_SZ2GB_4V;
 		pte_val(entry) |= _PAGE_PMD_HUGE;
<span class="p_chunk">@@ -187,6 +191,9 @@</span> <span class="p_context"> static unsigned int sun4v_huge_tte_to_shift(pte_t entry)</span>
 	unsigned int shift;
 
 	switch (tte_szbits) {
<span class="p_add">+	case _PAGE_SZ16GB_4V:</span>
<span class="p_add">+		shift = HPAGE_16GB_SHIFT;</span>
<span class="p_add">+		break;</span>
 	case _PAGE_SZ2GB_4V:
 		shift = HPAGE_2GB_SHIFT;
 		break;
<span class="p_chunk">@@ -263,7 +270,12 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm,</span>
 
 	pgd = pgd_offset(mm, addr);
 	pud = pud_alloc(mm, pgd, addr);
<span class="p_del">-	if (pud) {</span>
<span class="p_add">+	if (!pud)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sz &gt;= PUD_SIZE)</span>
<span class="p_add">+		pte = (pte_t *)pud;</span>
<span class="p_add">+	else {</span>
 		pmd = pmd_alloc(mm, pud, addr);
 		if (!pmd)
 			return NULL;
<span class="p_chunk">@@ -288,12 +300,16 @@</span> <span class="p_context"> pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)</span>
 	if (!pgd_none(*pgd)) {
 		pud = pud_offset(pgd, addr);
 		if (!pud_none(*pud)) {
<span class="p_del">-			pmd = pmd_offset(pud, addr);</span>
<span class="p_del">-			if (!pmd_none(*pmd)) {</span>
<span class="p_del">-				if (is_hugetlb_pmd(*pmd))</span>
<span class="p_del">-					pte = (pte_t *)pmd;</span>
<span class="p_del">-				else</span>
<span class="p_del">-					pte = pte_offset_map(pmd, addr);</span>
<span class="p_add">+			if (is_hugetlb_pud(*pud))</span>
<span class="p_add">+				pte = (pte_t *)pud;</span>
<span class="p_add">+			else {</span>
<span class="p_add">+				pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+				if (!pmd_none(*pmd)) {</span>
<span class="p_add">+					if (is_hugetlb_pmd(*pmd))</span>
<span class="p_add">+						pte = (pte_t *)pmd;</span>
<span class="p_add">+					else</span>
<span class="p_add">+						pte = pte_offset_map(pmd, addr);</span>
<span class="p_add">+				}</span>
 			}
 		}
 	}
<span class="p_chunk">@@ -304,12 +320,20 @@</span> <span class="p_context"> pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)</span>
 void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
 		     pte_t *ptep, pte_t entry)
 {
<span class="p_del">-	unsigned int i, nptes, orig_shift, shift;</span>
<span class="p_del">-	unsigned long size;</span>
<span class="p_add">+	unsigned int nptes, orig_shift, shift;</span>
<span class="p_add">+	unsigned long i, size;</span>
 	pte_t orig;
 
 	size = huge_tte_to_size(entry);
<span class="p_del">-	shift = size &gt;= HPAGE_SIZE ? PMD_SHIFT : PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	shift = PAGE_SHIFT;</span>
<span class="p_add">+	if (size &gt;= PUD_SIZE)</span>
<span class="p_add">+		shift = PUD_SHIFT;</span>
<span class="p_add">+	else if (size &gt;= PMD_SIZE)</span>
<span class="p_add">+		shift = PMD_SHIFT;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		shift = PAGE_SHIFT;</span>
<span class="p_add">+</span>
 	nptes = size &gt;&gt; shift;
 
 	if (!pte_present(*ptep) &amp;&amp; pte_present(entry))
<span class="p_chunk">@@ -332,19 +356,23 @@</span> <span class="p_context"> void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,</span>
 pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
 			      pte_t *ptep)
 {
<span class="p_del">-	unsigned int i, nptes, hugepage_shift;</span>
<span class="p_add">+	unsigned int i, nptes, orig_shift, shift;</span>
 	unsigned long size;
 	pte_t entry;
 
 	entry = *ptep;
 	size = huge_tte_to_size(entry);
<span class="p_del">-	if (size &gt;= HPAGE_SIZE)</span>
<span class="p_del">-		nptes = size &gt;&gt; PMD_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	shift = PAGE_SHIFT;</span>
<span class="p_add">+	if (size &gt;= PUD_SIZE)</span>
<span class="p_add">+		shift = PUD_SHIFT;</span>
<span class="p_add">+	else if (size &gt;= PMD_SIZE)</span>
<span class="p_add">+		shift = PMD_SHIFT;</span>
 	else
<span class="p_del">-		nptes = size &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		shift = PAGE_SHIFT;</span>
 
<span class="p_del">-	hugepage_shift = pte_none(entry) ? PAGE_SHIFT :</span>
<span class="p_del">-		huge_tte_to_shift(entry);</span>
<span class="p_add">+	nptes = size &gt;&gt; shift;</span>
<span class="p_add">+	orig_shift = pte_none(entry) ? PAGE_SHIFT : huge_tte_to_shift(entry);</span>
 
 	if (pte_present(entry))
 		mm-&gt;context.hugetlb_pte_count -= nptes;
<span class="p_chunk">@@ -353,11 +381,11 @@</span> <span class="p_context"> pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
 	for (i = 0; i &lt; nptes; i++)
 		ptep[i] = __pte(0UL);
 
<span class="p_del">-	maybe_tlb_batch_add(mm, addr, ptep, entry, 0, hugepage_shift);</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, entry, 0, orig_shift);</span>
 	/* An HPAGE_SIZE&#39;ed page is composed of two REAL_HPAGE_SIZE&#39;ed pages */
 	if (size == HPAGE_SIZE)
 		maybe_tlb_batch_add(mm, addr + REAL_HPAGE_SIZE, ptep, entry, 0,
<span class="p_del">-				    hugepage_shift);</span>
<span class="p_add">+				    orig_shift);</span>
 
 	return entry;
 }
<span class="p_chunk">@@ -370,7 +398,8 @@</span> <span class="p_context"> int pmd_huge(pmd_t pmd)</span>
 
 int pud_huge(pud_t pud)
 {
<span class="p_del">-	return 0;</span>
<span class="p_add">+	return !pud_none(pud) &amp;&amp;</span>
<span class="p_add">+		(pud_val(pud) &amp; (_PAGE_VALID|_PAGE_PUD_HUGE)) != _PAGE_VALID;</span>
 }
 
 static void hugetlb_free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,
<span class="p_chunk">@@ -434,8 +463,11 @@</span> <span class="p_context"> static void hugetlb_free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,</span>
 		next = pud_addr_end(addr, end);
 		if (pud_none_or_clear_bad(pud))
 			continue;
<span class="p_del">-		hugetlb_free_pmd_range(tlb, pud, addr, next, floor,</span>
<span class="p_del">-				       ceiling);</span>
<span class="p_add">+		if (is_hugetlb_pud(*pud))</span>
<span class="p_add">+			pud_clear(pud);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			hugetlb_free_pmd_range(tlb, pud, addr, next, floor,</span>
<span class="p_add">+					       ceiling);</span>
 	} while (pud++, addr = next, addr != end);
 
 	start &amp;= PGDIR_MASK;
<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 3c40ebd..cc8d0d4 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -337,6 +337,10 @@</span> <span class="p_context"> static int __init setup_hugepagesz(char *string)</span>
 	hugepage_shift = ilog2(hugepage_size);
 
 	switch (hugepage_shift) {
<span class="p_add">+	case HPAGE_16GB_SHIFT:</span>
<span class="p_add">+		hv_pgsz_mask = HV_PGSZ_MASK_16GB;</span>
<span class="p_add">+		hv_pgsz_idx = HV_PGSZ_IDX_16GB;</span>
<span class="p_add">+		break;</span>
 	case HPAGE_2GB_SHIFT:
 		hv_pgsz_mask = HV_PGSZ_MASK_2GB;
 		hv_pgsz_idx = HV_PGSZ_IDX_2GB;
<span class="p_chunk">@@ -377,6 +381,7 @@</span> <span class="p_context"> void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *</span>
 {
 	struct mm_struct *mm;
 	unsigned long flags;
<span class="p_add">+	bool is_huge_tsb;</span>
 	pte_t pte = *ptep;
 
 	if (tlb_type != hypervisor) {
<span class="p_chunk">@@ -394,15 +399,37 @@</span> <span class="p_context"> void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *</span>
 
 	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);
 
<span class="p_add">+	is_huge_tsb = false;</span>
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if ((mm-&gt;context.hugetlb_pte_count || mm-&gt;context.thp_pte_count) &amp;&amp;</span>
<span class="p_del">-	    is_hugetlb_pmd(__pmd(pte_val(pte)))) {</span>
<span class="p_del">-		/* We are fabricating 8MB pages using 4MB real hw pages.  */</span>
<span class="p_del">-		pte_val(pte) |= (address &amp; (1UL &lt;&lt; REAL_HPAGE_SHIFT));</span>
<span class="p_del">-		__update_mmu_tsb_insert(mm, MM_TSB_HUGE, REAL_HPAGE_SHIFT,</span>
<span class="p_del">-					address, pte_val(pte));</span>
<span class="p_del">-	} else</span>
<span class="p_add">+	if (mm-&gt;context.hugetlb_pte_count || mm-&gt;context.thp_pte_count) {</span>
<span class="p_add">+		unsigned long hugepage_size = PAGE_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_vm_hugetlb_page(vma))</span>
<span class="p_add">+			hugepage_size = huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+</span>
<span class="p_add">+		if (hugepage_size &gt;= PUD_SIZE) {</span>
<span class="p_add">+			unsigned long mask = 0x1ffc00000UL;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* Transfer bits [32:22] from address to resolve</span>
<span class="p_add">+			 * at 4M granularity.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			pte_val(pte) &amp;= ~mask;</span>
<span class="p_add">+			pte_val(pte) |= (address &amp; mask);</span>
<span class="p_add">+		} else if (hugepage_size &gt;= PMD_SIZE) {</span>
<span class="p_add">+			/* We are fabricating 8MB pages using 4MB</span>
<span class="p_add">+			 * real hw pages.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			pte_val(pte) |= (address &amp; (1UL &lt;&lt; REAL_HPAGE_SHIFT));</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (hugepage_size &gt;= PMD_SIZE) {</span>
<span class="p_add">+			__update_mmu_tsb_insert(mm, MM_TSB_HUGE,</span>
<span class="p_add">+				REAL_HPAGE_SHIFT, address, pte_val(pte));</span>
<span class="p_add">+			is_huge_tsb = true;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
 #endif
<span class="p_add">+	if (!is_huge_tsb)</span>
 		__update_mmu_tsb_insert(mm, MM_TSB_BASE, PAGE_SHIFT,
 					address, pte_val(pte));
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



