
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv5,2/3] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv5,2/3] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 18, 2016, 1:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8872401/mbox/"
   >mbox</a>
|
   <a href="/patch/8872401/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8872401/">/patch/8872401/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 9577DBF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 13:45:27 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0086A20211
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 13:45:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 13C64201FA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 13:45:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752727AbcDRNpC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 18 Apr 2016 09:45:02 -0400
Received: from mail-am1on0148.outbound.protection.outlook.com
	([157.56.112.148]:43584
	&quot;EHLO emea01-am1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751692AbcDRNo7 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 18 Apr 2016 09:44:59 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=4fwpfehVzixTkA0qA60nzyMOEICftK5IBlTzq/Z6lEk=;
	b=L2N62b9uN73fNxUw/9DdfbZcOpwdR4ViVJ6tY7r4XFQhbrF/1JYHzoGT2eNqlvbCqXQONIdo3x88Oa9zye+yCO+FsqPUJUyg52ujBDrsLBOEvDWHtmx0cLKm8ECtD/rogisprL7yuXZyLGuSshaB1TMAT7sUrFK1ZobsAMVR1nA=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	AM5PR0801MB1298.eurprd08.prod.outlook.com (10.167.216.149) with
	Microsoft
	SMTP Server (TLS) id 15.1.466.19; Mon, 18 Apr 2016 13:44:53 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;mingo@redhat.com&gt;,
	&lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv5 2/3] x86/vdso: add mremap hook to vm_special_mapping
Date: Mon, 18 Apr 2016 16:43:44 +0300
Message-ID: &lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460987025-30360-1-git-send-email-dsafonov@virtuozzo.com&gt;
References: &lt;1460388169-13340-1-git-send-email-dsafonov@virtuozzo.com&gt;
	&lt;1460987025-30360-1-git-send-email-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: VI1PR07CA0112.eurprd07.prod.outlook.com (10.165.229.166)
	To
	AM5PR0801MB1298.eurprd08.prod.outlook.com (10.167.216.149)
X-MS-Office365-Filtering-Correlation-Id: 5099ede8-79d8-4306-2b68-08d3678f9fc5
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	2:dqlNiB4//Uh9HuiFdntVXbvLnC4H8irazzAFsHOlA3my3d+ldAD237NY0mLG4KtLQxi5pMKT1KmH/rYModH4ctxOvECnFQPiEf15GuxsuBz0c0ezSYjcsq+oGnJBhJ3rOLXLYrEx8yE2d/O5KP/NGH2Q1/1W0K6GeVzUQZlDP8tJomXiXCWvHicQigc4+NI4;
	3:BlqQHwaeGDmAztVTmu6RirzMkPKXtSCMHoY5BILOAmyu/U4r/qfDwG87938xG0zpHh58HGihA2r8MHaBDzU+k2Zt+37sMrcKmemDEz0RtCofZx54qnfvr9OWSTgPRR5n;
	25:6TTGhM38cUf2Dp+z2mWWkxtrw/cTG5v8L7IGA3y2d1bNEs/EDN7bXM+xYotsWocvlBoeovyEJZGQPqxNCCDH9eMmS4tJRbWvg8jWf9fpNcORd9Wyxk2HUiLGIYszuPUteTht/YEgJzRjgzT8o4GWN5hnmE9s0YanmCsJqQxMCalMrv+GDA5Bb+pytrrDglvsXWakzCrJ4VJrmykFegYzj1cnGSFF3f8OYu+0t96Z7u1wkc0xVwAXjxPRY94BXAdAQMUqJN6S+gy9Wvo9bvTiwNAQgc7HFmIc3dZ7zmII/ywxsXlRppKT4cqklTu5o4WM7VEVlZ4RQdoSFD3hGVlvLkBnD0UwwMU8OIoXTvdT7wS8qy5Vvch1zssbGaBsl04vWirjY4jVnP/Eo9C8wnzWHzQiRDpV/0vERtOl3rIC9qQGUIP2nDL6jQ32CxlL6oYUHM7MDAIkzmfaapeKd5D4aXj1vuOtvSimOwM7F6cAgiLlQf9iuWOUHlS5vPznhTZKHqrwU834is400ZMovY/ELyv9UZTRGGxcDSdq21cASr7oIsy5ptnzQXZIKMthPj0MKOUzKgRwehfju3LdX5BTEBwDD5i1BltTd
	VeclMrux1BQ/hH9xyOz4ZbjrcUhvlVI
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:AM5PR0801MB1298;
X-Microsoft-Antispam-PRVS: &lt;AM5PR0801MB1298E5648B0CA09625F6771BD16B0@AM5PR0801MB1298.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(9101521026)(6040130)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(6041046)(6043046);
	SRVR:AM5PR0801MB1298; BCL:0; PCL:0; RULEID:;
	SRVR:AM5PR0801MB1298; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	4:22EPH1WmNEd4w6N/4cx2u7SUJ8uWI6KkxDnR7AHZe8qAdgef39IBjF0XID9zhent6i5AYPRAtikc2ZIxx0MhT+KfPhaxnyssNFQw13+OxSA/s0AKn7hTmEzbG8wbiDXThuhqOT23ozQwp69p5KcLVeqkP89q20a54RP2RnUnRMW+HLhBoRZYXiOucQnJL790aTeQCpjOoNXINj5djk/tvgPGxttOaXdOdFzXR2NINZZNxfNxF2VnGfaDQ7xSEi9ZtHzLxGj/8dRZjsbW5Ad0dULGjITLwRll/LYRAH3M1SuCp5bXNlbZwXAzeglD1bXyIHJDy9LWYDcRdyrGjLcT+1SxDFx0+mFYRN/d/NYT/tmVOky6QTAq2rovCHdn+f/qm6cLAuL1KYBR3unGPpaL/hbnZEU+hnci05SkMH+78a1ra3T7qlbXaeGvt/GLeKcMWu7adZ+gxKF4Le2lwK/2jQ==
X-Forefront-PRVS: 0916FC3A18
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(4001430100002)(53416004)(19580405001)(81166005)(5008740100001)(92566002)(19580395003)(86362001)(50226001)(42186005)(4326007)(66066001)(76176999)(50986999)(6116002)(3846002)(586003)(1096002)(2906002)(107886002)(110136002)(189998001)(36756003)(229853001)(47776003)(2351001)(2950100001)(33646002)(48376002)(77096005)(50466002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM5PR0801MB1298;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	23:s4HNTsmF0pzSOCyvVMfggaWwaXjB58RL+NsK8W3qcjhnfAbT59ixxa09edEB5zJxbD4E+KN3WUT4cB4/gsXiN1zWzSzMDWxkC+K8r8zlnWK27Ji7qGZUD7tJa6BkarqIPPvdZwZ4ynOdTOtILimUKb9PZ0Ya0MyCjiPxo/plShRRTntDnFRVOueh4YxFX93eQWeBj53GNQZve7oen7zTItsyLrCwHhJNfNhYfpQTvo0IxANgVPwKnvibWRuID2h34wTudhjWARUvIptJQM97DnY0JvFuDN+Xj7ff2mE20AueJEYKBvbnnnM0W2DLmahLqggGszXNMaoyfQyYh5JWmClsRRk3jjWBwx1uNcbWiLIOOjcL7Nyj/RdpVEknYpUi3upGb+YV2XqhWxG8tsY8VZOtJBe2AGo6YafKefyz3R3YdxuwVBske1E8tO3oB7AQONAItexs5tEG7Qtkqr/kD8SG2lEceT56nhcbY7mTLkIlRMbnyS0rQnCmLyL/Xh2SehBPo3eUBbWAKTRJnUW5MScuoTgt9T3FDuxQvsa2n8vv6fM5lIjb6kuhDngwv3dv8Je4qbPnqYvt3yNbTR3gE76Wg7YeKf8CLe6nkbLrwsC25k54oEWkwqb8epXIEjOP2zX0srvtFjKsvAe2ItzI2icYEBu/+JEYMiFPm7Qk7wbMS4AqckekmJf1PGG3jPLlTPkmV092gkuQ4kjdXTb3Pm6fU2Jv6PuNUieOy+qUNreBtpELN/h4bks9tVBAqLT5XwYJdpnvIxh2Ea/hkz0qomvJ6Q2TUk0z+wZrxc2d5HsVISXBFur63RotKwtYsz4XhnSiMij3+KFhU5i7KsTrruRzOp4ou+RVXov1GFE/2QFy6aq+ortmZu6vTkrwD1f+En4hge7bHl/+jGJQqKB3uA==
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	5:nrbLYLpvoVdHQqGlHAPhbhe/dXOzf7JwtJXBRanAUWMmhgkwE26qqQkAby5W/ium8Ryq2Z9WgxPzFzqhsLm6AvbltYteWxzOeWDGy/ngNrAMNlcM/w0I7GbfmSWmpHVn4g0iYtByn9WCv8wi7mCAgfj9jDoLiZeHwY3kZ9eu7TbO5lo8Wn8xYDttY7eUd9t0;
	24:tCOExy/gpQWfC20XyBuZlZacY61xa49Y/A98HrLhpkDzaGzQBPmbvSaODxCZb7Qmb4GrqUosFMVAYK8KEaxfV/a2pNEX36YguRqMTs3D6Js=;
	7:RXaQdytd09RnxP+JSSIBolDGZO2to04q7Gtfb0HaA+PWUshueBFCk1yb4moHYG3hh7LIQAtyOfCjioXi4vNfRzHqS1GMbM9iSCGSvEERg2DoS3K7GeRPgm7EUV8jxs9IEps1RxmvDR6WRNgP5CzpIT+JaHR9aZOJhUXhV5bb8NkT719rwMTeNfS9nTUxzmii6nrjrs6xurUc2iDn0njY+jM800kuxNreubjPJMaezCc=;
	20:/VshKrblXeLjtr04d8vq2/iG8J0swl3qw2jvzcnSNWApCtbsiGmGNkR11M92bCOLg2bxJfttmLplGr0PerTSWchxAtM/YWof/1ISFi3gzLNkm79hCy0Q/7eayBQf4/p8j5pUzCVs2uZFPrr6qhi4fb8koX0yV4j7gh6W1QcN7Xk=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Apr 2016 13:44:53.6604
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM5PR0801MB1298
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 18, 2016, 1:43 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are
    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32
v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32
v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;
    used is_ia32_task instead of ifdefs 
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 39 ++++++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 47 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - April 18, 2016, 2:03 p.m.</div>
<pre class="content">
Hi Dmitry,

[auto build test WARNING on v4.6-rc4]
[also build test WARNING on next-20160418]
[cannot apply to tip/x86/core tip/x86/vdso]
[if your patch is applied to the wrong git tree, please drop us a note to help improving the system]

url:    https://github.com/0day-ci/linux/commits/Dmitry-Safonov/x86-rename-is_-ia32-x32-_task-to-in_-ia32-x32-_syscall/20160418-214656
config: x86_64-randconfig-x000-201616 (attached as .config)
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All warnings (new ones prefixed by &gt;&gt;):

   In file included from include/asm-generic/bug.h:4:0,
                    from arch/x86/include/asm/bug.h:35,
                    from include/linux/bug.h:4,
                    from include/linux/mmdebug.h:4,
                    from include/linux/mm.h:8,
                    from arch/x86/entry/vdso/vma.c:7:
   arch/x86/entry/vdso/vma.c: In function &#39;vdso_mremap&#39;:
   arch/x86/entry/vdso/vma.c:114:37: error: &#39;vdso_image_32&#39; undeclared (first use in this function)
     if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {
                                        ^
   include/linux/compiler.h:151:30: note: in definition of macro &#39;__trace_if&#39;
     if (__builtin_constant_p(!!(cond)) ? !!(cond) :   \
                                 ^
<span class="quote">&gt;&gt; arch/x86/entry/vdso/vma.c:114:2: note: in expansion of macro &#39;if&#39;</span>
     if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {
     ^
   arch/x86/entry/vdso/vma.c:114:37: note: each undeclared identifier is reported only once for each function it appears in
     if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {
                                        ^
   include/linux/compiler.h:151:30: note: in definition of macro &#39;__trace_if&#39;
     if (__builtin_constant_p(!!(cond)) ? !!(cond) :   \
                                 ^
<span class="quote">&gt;&gt; arch/x86/entry/vdso/vma.c:114:2: note: in expansion of macro &#39;if&#39;</span>
     if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {
     ^

vim +/if +114 arch/x86/entry/vdso/vma.c

     1	/*
     2	 * Copyright 2007 Andi Kleen, SUSE Labs.
     3	 * Subject to the GPL, v.2
     4	 *
     5	 * This contains most of the x86 vDSO kernel-side code.
     6	 */
<span class="quote">   &gt; 7	#include &lt;linux/mm.h&gt;</span>
     8	#include &lt;linux/err.h&gt;
     9	#include &lt;linux/sched.h&gt;
    10	#include &lt;linux/slab.h&gt;
    11	#include &lt;linux/init.h&gt;
    12	#include &lt;linux/random.h&gt;
    13	#include &lt;linux/elf.h&gt;
    14	#include &lt;linux/cpu.h&gt;
    15	#include &lt;linux/ptrace.h&gt;
    16	#include &lt;asm/pvclock.h&gt;
    17	#include &lt;asm/vgtod.h&gt;
    18	#include &lt;asm/proto.h&gt;
    19	#include &lt;asm/vdso.h&gt;
    20	#include &lt;asm/vvar.h&gt;
    21	#include &lt;asm/page.h&gt;
    22	#include &lt;asm/hpet.h&gt;
    23	#include &lt;asm/desc.h&gt;
    24	#include &lt;asm/cpufeature.h&gt;
    25	
    26	#if defined(CONFIG_X86_64)
    27	unsigned int __read_mostly vdso64_enabled = 1;
    28	#endif
    29	
    30	void __init init_vdso_image(const struct vdso_image *image)
    31	{
    32		BUG_ON(image-&gt;size % PAGE_SIZE != 0);
    33	
    34		apply_alternatives((struct alt_instr *)(image-&gt;data + image-&gt;alt),
    35				   (struct alt_instr *)(image-&gt;data + image-&gt;alt +
    36							image-&gt;alt_len));
    37	}
    38	
    39	struct linux_binprm;
    40	
    41	/*
    42	 * Put the vdso above the (randomized) stack with another randomized
    43	 * offset.  This way there is no hole in the middle of address space.
    44	 * To save memory make sure it is still in the same PTE as the stack
    45	 * top.  This doesn&#39;t give that many random bits.
    46	 *
    47	 * Note that this algorithm is imperfect: the distribution of the vdso
    48	 * start address within a PMD is biased toward the end.
    49	 *
    50	 * Only used for the 64-bit and x32 vdsos.
    51	 */
    52	static unsigned long vdso_addr(unsigned long start, unsigned len)
    53	{
    54	#ifdef CONFIG_X86_32
    55		return 0;
    56	#else
    57		unsigned long addr, end;
    58		unsigned offset;
    59	
    60		/*
    61		 * Round up the start address.  It can start out unaligned as a result
    62		 * of stack start randomization.
    63		 */
    64		start = PAGE_ALIGN(start);
    65	
    66		/* Round the lowest possible end address up to a PMD boundary. */
    67		end = (start + len + PMD_SIZE - 1) &amp; PMD_MASK;
    68		if (end &gt;= TASK_SIZE_MAX)
    69			end = TASK_SIZE_MAX;
    70		end -= len;
    71	
    72		if (end &gt; start) {
    73			offset = get_random_int() % (((end - start) &gt;&gt; PAGE_SHIFT) + 1);
    74			addr = start + (offset &lt;&lt; PAGE_SHIFT);
    75		} else {
    76			addr = start;
    77		}
    78	
    79		/*
    80		 * Forcibly align the final address in case we have a hardware
    81		 * issue that requires alignment for performance reasons.
    82		 */
    83		addr = align_vdso_addr(addr);
    84	
    85		return addr;
    86	#endif
    87	}
    88	
    89	static int vdso_fault(const struct vm_special_mapping *sm,
    90			      struct vm_area_struct *vma, struct vm_fault *vmf)
    91	{
    92		const struct vdso_image *image = vma-&gt;vm_mm-&gt;context.vdso_image;
    93	
    94		if (!image || (vmf-&gt;pgoff &lt;&lt; PAGE_SHIFT) &gt;= image-&gt;size)
    95			return VM_FAULT_SIGBUS;
    96	
    97		vmf-&gt;page = virt_to_page(image-&gt;data + (vmf-&gt;pgoff &lt;&lt; PAGE_SHIFT));
    98		get_page(vmf-&gt;page);
    99		return 0;
   100	}
   101	
   102	static int vdso_mremap(const struct vm_special_mapping *sm,
   103			      struct vm_area_struct *new_vma)
   104	{
   105		unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;
   106		const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;
   107	
   108		if (image-&gt;size != new_size)
   109			return -EINVAL;
   110	
   111		if (current-&gt;mm != new_vma-&gt;vm_mm)
   112			return -EFAULT;
   113	
<span class="quote"> &gt; 114		if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
   115			struct pt_regs *regs = current_pt_regs();
   116			unsigned long vdso_land = image-&gt;sym_int80_landing_pad;
   117			unsigned long old_land_addr = vdso_land +

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - April 23, 2016, 11:09 p.m.</div>
<pre class="content">
Hi,

[auto build test ERROR on v4.6-rc4]
[cannot apply to tip/x86/core tip/x86/vdso next-20160422]
[if your patch is applied to the wrong git tree, please drop us a note to help improving the system]

url:    https://github.com/0day-ci/linux/commits/Dmitry-Safonov/x86-rename-is_-ia32-x32-_task-to-in_-ia32-x32-_syscall/20160418-214656
config: x86_64-randconfig-s0-04240623 (attached as .config)
compiler: gcc-5 (Debian 5.3.1-14) 5.3.1 20160409
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

Note: the linux-review/Dmitry-Safonov/x86-rename-is_-ia32-x32-_task-to-in_-ia32-x32-_syscall/20160418-214656 HEAD aed83f1dd951908724a5ba564e2b03d68a9fc7b8 builds fine.
      It only hurts bisectibility.

All errors (new ones prefixed by &gt;&gt;):

   arch/x86/entry/vdso/vma.c: In function &#39;vdso_mremap&#39;:
<span class="quote">&gt;&gt; arch/x86/entry/vdso/vma.c:114:37: error: &#39;vdso_image_32&#39; undeclared (first use in this function)</span>
     if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {
                                        ^
   arch/x86/entry/vdso/vma.c:114:37: note: each undeclared identifier is reported only once for each function it appears in

vim +/vdso_image_32 +114 arch/x86/entry/vdso/vma.c

   108		if (image-&gt;size != new_size)
   109			return -EINVAL;
   110	
   111		if (current-&gt;mm != new_vma-&gt;vm_mm)
   112			return -EFAULT;
   113	
<span class="quote"> &gt; 114		if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
   115			struct pt_regs *regs = current_pt_regs();
   116			unsigned long vdso_land = image-&gt;sym_int80_landing_pad;
   117			unsigned long old_land_addr = vdso_land +

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..ba133a9ab4f5 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,32 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		      struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="p_add">+		return -EFAULT;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +185,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +224,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



