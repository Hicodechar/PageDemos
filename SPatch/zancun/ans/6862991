
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V5,4/7] mm: mlock: Add mlock flags to enable VM_LOCKONFAULT usage - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V5,4/7] mm: mlock: Add mlock flags to enable VM_LOCKONFAULT usage</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=111821">Eric B Munson</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 24, 2015, 9:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437773325-8623-5-git-send-email-emunson@akamai.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6862991/mbox/"
   >mbox</a>
|
   <a href="/patch/6862991/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6862991/">/patch/6862991/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 149969F1D4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Jul 2015 21:30:18 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id AA732205B8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Jul 2015 21:30:16 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 9859C205B7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Jul 2015 21:30:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S964838AbbGXV3Q (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Jul 2015 17:29:16 -0400
Received: from a23-79-238-175.deploy.static.akamaitechnologies.com
	([23.79.238.175]:25238
	&quot;EHLO prod-mail-xrelay07.akamai.com&quot; rhost-flags-OK-FAIL-OK-OK)
	by vger.kernel.org with ESMTP id S1754810AbbGXV2s (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Jul 2015 17:28:48 -0400
Received: from prod-mail-xrelay07.akamai.com (localhost.localdomain
	[127.0.0.1]) by postfix.imss70 (Postfix) with ESMTP id D096C4E029;
	Fri, 24 Jul 2015 21:29:33 +0000 (GMT)
Received: from prod-mail-relay07.akamai.com (prod-mail-relay07.akamai.com
	[172.17.121.112])
	by prod-mail-xrelay07.akamai.com (Postfix) with ESMTP id AED684E025; 
	Fri, 24 Jul 2015 21:29:33 +0000 (GMT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=akamai.com; s=a1;
	t=1437773373; bh=2ZvTafMSlkuOO03m3OJiLtKJxJIyzOgMHkg5+UaHOO4=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=eWmiSXSitEBSGPGawHL3f4TnHLRl71LRwFW3E7WiHEofs2gRTUlHylkvdMWxQjFSq
	pn1QJ/G66N1CNkhEtesRKTDhqDAOEl+bfwq+CKaVqDGqRWIEDRyCHiyLLi7nGUfaEZ
	EGxSTJ8/+2VqI19z/oGiGJjK0oL/ZWxmpigbyZpY=
Received: from bos-lp6ds.kendall.corp.akamai.com (unknown [172.28.12.165])
	by prod-mail-relay07.akamai.com (Postfix) with ESMTP id 7D4AE80896;
	Fri, 24 Jul 2015 21:28:47 +0000 (GMT)
From: Eric B Munson &lt;emunson@akamai.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Eric B Munson &lt;emunson@akamai.com&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	linux-alpha@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-mips@linux-mips.org, linux-parisc@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org, sparclinux@vger.kernel.org,
	linux-xtensa@linux-xtensa.org, linux-arch@vger.kernel.org,
	linux-api@vger.kernel.org, linux-mm@kvack.org
Subject: [PATCH V5 4/7] mm: mlock: Add mlock flags to enable VM_LOCKONFAULT
	usage
Date: Fri, 24 Jul 2015 17:28:42 -0400
Message-Id: &lt;1437773325-8623-5-git-send-email-emunson@akamai.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1437773325-8623-1-git-send-email-emunson@akamai.com&gt;
References: &lt;1437773325-8623-1-git-send-email-emunson@akamai.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=111821">Eric B Munson</a> - July 24, 2015, 9:28 p.m.</div>
<pre class="content">
The previous patch introduced a flag that specified pages in a VMA
should be placed on the unevictable LRU, but they should not be made
present when the area is created.  This patch adds the ability to set
this state via the new mlock system calls.

We add MLOCK_ONFAULT for mlock2 and MCL_ONFAULT for mlockall.
MLOCK_ONFAULT will set the VM_LOCKONFAULT flag as well as the VM_LOCKED
flag for the target region.  MCL_CURRENT and MCL_ONFAULT are used to
lock current mappings.  With MCL_CURRENT all pages are made present and
with MCL_ONFAULT they are locked when faulted in.  When specified with
MCL_FUTURE all new mappings will be marked with VM_LOCKONFAULT.

Currently, mlockall() clears all VMA lock flags and then sets the
requested flags.  For instance, if a process has MCL_FUTURE and
MCL_CURRENT set, but they want to clear MCL_FUTURE this would be
accomplished by calling mlockall(MCL_CURRENT).  This still holds with
the introduction of MCL_ONFAULT.  Each call to mlockall() resets all
VMA flags to the values specified in the current call.  The new mlock2
system call behaves in the same way.  If a region is locked with
MLOCK_ONFAULT and a user wants to force it to be populated now, a second
call to mlock2(MLOCK_LOCKED) will accomplish this.

munlock() will unconditionally clear both vma flags.  munlockall()
unconditionally clears for VMA flags on all VMAs and in the
mm-&gt;def_flags field.
<span class="signed-off-by">
Signed-off-by: Eric B Munson &lt;emunson@akamai.com&gt;</span>
Cc: Michal Hocko &lt;mhocko@suse.cz&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: Jonathan Corbet &lt;corbet@lwn.net&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
Cc: linux-alpha@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-mips@linux-mips.org
Cc: linux-parisc@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org
Cc: sparclinux@vger.kernel.org
Cc: linux-xtensa@linux-xtensa.org
Cc: linux-arch@vger.kernel.org
Cc: linux-api@vger.kernel.org
Cc: linux-mm@kvack.org
---
Changes from V4:
* Split addition of VMA flag

Changes from V3:
* Do extensive search for VM_LOCKED and ensure that VM_LOCKONFAULT is also handled
 where appropriate
 arch/alpha/include/uapi/asm/mman.h   |  2 ++
 arch/mips/include/uapi/asm/mman.h    |  2 ++
 arch/parisc/include/uapi/asm/mman.h  |  2 ++
 arch/powerpc/include/uapi/asm/mman.h |  2 ++
 arch/sparc/include/uapi/asm/mman.h   |  2 ++
 arch/tile/include/uapi/asm/mman.h    |  3 +++
 arch/xtensa/include/uapi/asm/mman.h  |  2 ++
 include/uapi/asm-generic/mman.h      |  2 ++
 mm/mlock.c                           | 41 ++++++++++++++++++++++++------------
 9 files changed, 45 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 27, 2015, 7:15 a.m.</div>
<pre class="content">
On Fri, Jul 24, 2015 at 05:28:42PM -0400, Eric B Munson wrote:
<span class="quote">&gt; The previous patch introduced a flag that specified pages in a VMA</span>
<span class="quote">&gt; should be placed on the unevictable LRU, but they should not be made</span>
<span class="quote">&gt; present when the area is created.  This patch adds the ability to set</span>
<span class="quote">&gt; this state via the new mlock system calls.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We add MLOCK_ONFAULT for mlock2 and MCL_ONFAULT for mlockall.</span>
<span class="quote">&gt; MLOCK_ONFAULT will set the VM_LOCKONFAULT flag as well as the VM_LOCKED</span>
<span class="quote">&gt; flag for the target region.  MCL_CURRENT and MCL_ONFAULT are used to</span>
<span class="quote">&gt; lock current mappings.  With MCL_CURRENT all pages are made present and</span>
<span class="quote">&gt; with MCL_ONFAULT they are locked when faulted in.  When specified with</span>
<span class="quote">&gt; MCL_FUTURE all new mappings will be marked with VM_LOCKONFAULT.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Currently, mlockall() clears all VMA lock flags and then sets the</span>
<span class="quote">&gt; requested flags.  For instance, if a process has MCL_FUTURE and</span>
<span class="quote">&gt; MCL_CURRENT set, but they want to clear MCL_FUTURE this would be</span>
<span class="quote">&gt; accomplished by calling mlockall(MCL_CURRENT).  This still holds with</span>
<span class="quote">&gt; the introduction of MCL_ONFAULT.  Each call to mlockall() resets all</span>
<span class="quote">&gt; VMA flags to the values specified in the current call.  The new mlock2</span>
<span class="quote">&gt; system call behaves in the same way.  If a region is locked with</span>
<span class="quote">&gt; MLOCK_ONFAULT and a user wants to force it to be populated now, a second</span>
<span class="quote">&gt; call to mlock2(MLOCK_LOCKED) will accomplish this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; munlock() will unconditionally clear both vma flags.  munlockall()</span>
<span class="quote">&gt; unconditionally clears for VMA flags on all VMAs and in the</span>
<span class="quote">&gt; mm-&gt;def_flags field.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Eric B Munson &lt;emunson@akamai.com&gt;</span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.cz&gt;</span>
<span class="quote">&gt; Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
<span class="quote">&gt; Cc: Jonathan Corbet &lt;corbet@lwn.net&gt;</span>
<span class="quote">&gt; Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;</span>
<span class="quote">&gt; Cc: linux-alpha@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-mips@linux-mips.org</span>
<span class="quote">&gt; Cc: linux-parisc@vger.kernel.org</span>
<span class="quote">&gt; Cc: linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; Cc: sparclinux@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-xtensa@linux-xtensa.org</span>
<span class="quote">&gt; Cc: linux-arch@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-api@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changes from V4:</span>
<span class="quote">&gt; * Split addition of VMA flag</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes from V3:</span>
<span class="quote">&gt; * Do extensive search for VM_LOCKED and ensure that VM_LOCKONFAULT is also handled</span>
<span class="quote">&gt;  where appropriate</span>
<span class="quote">&gt;  arch/alpha/include/uapi/asm/mman.h   |  2 ++</span>
<span class="quote">&gt;  arch/mips/include/uapi/asm/mman.h    |  2 ++</span>
<span class="quote">&gt;  arch/parisc/include/uapi/asm/mman.h  |  2 ++</span>
<span class="quote">&gt;  arch/powerpc/include/uapi/asm/mman.h |  2 ++</span>
<span class="quote">&gt;  arch/sparc/include/uapi/asm/mman.h   |  2 ++</span>
<span class="quote">&gt;  arch/tile/include/uapi/asm/mman.h    |  3 +++</span>
<span class="quote">&gt;  arch/xtensa/include/uapi/asm/mman.h  |  2 ++</span>

Again, you can save few lines by moving some code into mman-common.h.

Otherwise looks good.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/alpha/include/uapi/asm/mman.h b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">index ec72436..77ae8db 100644</span>
<span class="p_header">--- a/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -37,8 +37,10 @@</span> <span class="p_context"></span>
 
 #define MCL_CURRENT	 8192		/* lock all currently mapped pages */
 #define MCL_FUTURE	16384		/* lock all additions to address space */
<span class="p_add">+#define MCL_ONFAULT	32768		/* lock all pages that are faulted in */</span>
 
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MADV_NORMAL	0		/* no further special treatment */
 #define MADV_RANDOM	1		/* expect random page references */
<span class="p_header">diff --git a/arch/mips/include/uapi/asm/mman.h b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">index 67c1cdf..71ed81d 100644</span>
<span class="p_header">--- a/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -61,11 +61,13 @@</span> <span class="p_context"></span>
  */
 #define MCL_CURRENT	1		/* lock all current mappings */
 #define MCL_FUTURE	2		/* lock all future mappings */
<span class="p_add">+#define MCL_ONFAULT	4		/* lock all pages that are faulted in */</span>
 
 /*
  * Flags for mlock
  */
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MADV_NORMAL	0		/* no further special treatment */
 #define MADV_RANDOM	1		/* expect random page references */
<span class="p_header">diff --git a/arch/parisc/include/uapi/asm/mman.h b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">index daab994..c0871ce 100644</span>
<span class="p_header">--- a/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -31,8 +31,10 @@</span> <span class="p_context"></span>
 
 #define MCL_CURRENT	1		/* lock all current mappings */
 #define MCL_FUTURE	2		/* lock all future mappings */
<span class="p_add">+#define MCL_ONFAULT	4		/* lock all pages that are faulted in */</span>
 
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MADV_NORMAL     0               /* no further special treatment */
 #define MADV_RANDOM     1               /* expect random page references */
<span class="p_header">diff --git a/arch/powerpc/include/uapi/asm/mman.h b/arch/powerpc/include/uapi/asm/mman.h</span>
<span class="p_header">index 189e85f..f93f7eb 100644</span>
<span class="p_header">--- a/arch/powerpc/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/powerpc/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -22,8 +22,10 @@</span> <span class="p_context"></span>
 
 #define MCL_CURRENT     0x2000          /* lock all currently mapped pages */
 #define MCL_FUTURE      0x4000          /* lock all additions to address space */
<span class="p_add">+#define MCL_ONFAULT	0x8000		/* lock all pages that are faulted in */</span>
 
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MAP_POPULATE	0x8000		/* populate (prefault) pagetables */
 #define MAP_NONBLOCK	0x10000		/* do not block on IO */
<span class="p_header">diff --git a/arch/sparc/include/uapi/asm/mman.h b/arch/sparc/include/uapi/asm/mman.h</span>
<span class="p_header">index 13d51be..8cd2ebc 100644</span>
<span class="p_header">--- a/arch/sparc/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/sparc/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -17,8 +17,10 @@</span> <span class="p_context"></span>
 
 #define MCL_CURRENT     0x2000          /* lock all currently mapped pages */
 #define MCL_FUTURE      0x4000          /* lock all additions to address space */
<span class="p_add">+#define MCL_ONFAULT	0x8000		/* lock all pages that are faulted in */</span>
 
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MAP_POPULATE	0x8000		/* populate (prefault) pagetables */
 #define MAP_NONBLOCK	0x10000		/* do not block on IO */
<span class="p_header">diff --git a/arch/tile/include/uapi/asm/mman.h b/arch/tile/include/uapi/asm/mman.h</span>
<span class="p_header">index f69ce48..acdd013 100644</span>
<span class="p_header">--- a/arch/tile/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/tile/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -36,11 +36,14 @@</span> <span class="p_context"></span>
  */
 #define MCL_CURRENT	1		/* lock all current mappings */
 #define MCL_FUTURE	2		/* lock all future mappings */
<span class="p_add">+#define MCL_ONFAULT	4		/* lock all pages that are faulted in */</span>
<span class="p_add">+</span>
 
 /*
  * Flags for mlock
  */
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 
 #endif /* _ASM_TILE_MMAN_H */
<span class="p_header">diff --git a/arch/xtensa/include/uapi/asm/mman.h b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">index 11f354f..5725a15 100644</span>
<span class="p_header">--- a/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -74,11 +74,13 @@</span> <span class="p_context"></span>
  */
 #define MCL_CURRENT	1		/* lock all current mappings */
 #define MCL_FUTURE	2		/* lock all future mappings */
<span class="p_add">+#define MCL_ONFAULT	4		/* lock all pages that are faulted in */</span>
 
 /*
  * Flags for mlock
  */
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #define MADV_NORMAL	0		/* no further special treatment */
 #define MADV_RANDOM	1		/* expect random page references */
<span class="p_header">diff --git a/include/uapi/asm-generic/mman.h b/include/uapi/asm-generic/mman.h</span>
<span class="p_header">index 242436b..555aab0 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman.h</span>
<span class="p_chunk">@@ -17,7 +17,9 @@</span> <span class="p_context"></span>
 
 #define MCL_CURRENT	1		/* lock all current mappings */
 #define MCL_FUTURE	2		/* lock all future mappings */
<span class="p_add">+#define MCL_ONFAULT	4		/* lock all pages that are faulted in */</span>
 
 #define MLOCK_LOCKED	0x01		/* Lock and populate the specified range */
<span class="p_add">+#define MLOCK_ONFAULT	0x02		/* Lock pages in range after they are faulted in, do not prefault */</span>
 
 #endif /* __ASM_GENERIC_MMAN_H */
<span class="p_header">diff --git a/mm/mlock.c b/mm/mlock.c</span>
<span class="p_header">index e98bdd4..3a99c80 100644</span>
<span class="p_header">--- a/mm/mlock.c</span>
<span class="p_header">+++ b/mm/mlock.c</span>
<span class="p_chunk">@@ -506,7 +506,8 @@</span> <span class="p_context"> static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,</span>
 
 	if (newflags == vma-&gt;vm_flags || (vma-&gt;vm_flags &amp; VM_SPECIAL) ||
 	    is_vm_hugetlb_page(vma) || vma == get_gate_vma(current-&gt;mm))
<span class="p_del">-		goto out;	/* don&#39;t set VM_LOCKED,  don&#39;t count */</span>
<span class="p_add">+		/* don&#39;t set VM_LOCKED or VM_LOCKONFAULT and don&#39;t count */</span>
<span class="p_add">+		goto out;</span>
 
 	pgoff = vma-&gt;vm_pgoff + ((start - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT);
 	*prev = vma_merge(mm, *prev, start, end, newflags, vma-&gt;anon_vma,
<span class="p_chunk">@@ -576,7 +577,7 @@</span> <span class="p_context"> static int apply_vma_lock_flags(unsigned long start, size_t len,</span>
 		prev = vma;
 
 	for (nstart = start ; ; ) {
<span class="p_del">-		vm_flags_t newflags = vma-&gt;vm_flags &amp; ~VM_LOCKED;</span>
<span class="p_add">+		vm_flags_t newflags = vma-&gt;vm_flags &amp; ~(VM_LOCKED | VM_LOCKONFAULT);</span>
 		newflags |= flags;
 
 		/* Here we know that  vma-&gt;vm_start &lt;= nstart &lt; vma-&gt;vm_end. */
<span class="p_chunk">@@ -645,9 +646,13 @@</span> <span class="p_context"> SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)</span>
 SYSCALL_DEFINE3(mlock2, unsigned long, start, size_t, len, int, flags)
 {
 	vm_flags_t vm_flags = VM_LOCKED;
<span class="p_del">-	if (!flags || (flags &amp; ~(MLOCK_LOCKED)))</span>
<span class="p_add">+	if (!flags || (flags &amp; ~(MLOCK_LOCKED | MLOCK_ONFAULT)) ||</span>
<span class="p_add">+	    flags == (MLOCK_LOCKED | MLOCK_ONFAULT))</span>
 		return -EINVAL;
 
<span class="p_add">+	if (flags &amp; MLOCK_ONFAULT)</span>
<span class="p_add">+		vm_flags |= VM_LOCKONFAULT;</span>
<span class="p_add">+</span>
 	return do_mlock(start, len, vm_flags);
 }
 
<span class="p_chunk">@@ -668,21 +673,30 @@</span> <span class="p_context"> SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len)</span>
 static int apply_mlockall_flags(int flags)
 {
 	struct vm_area_struct * vma, * prev = NULL;
<span class="p_add">+	vm_flags_t to_add = 0;</span>
 
<span class="p_del">-	if (flags &amp; MCL_FUTURE)</span>
<span class="p_add">+	current-&gt;mm-&gt;def_flags &amp;= ~(VM_LOCKED | VM_LOCKONFAULT);</span>
<span class="p_add">+	if (flags &amp; MCL_FUTURE) {</span>
 		current-&gt;mm-&gt;def_flags |= VM_LOCKED;
<span class="p_del">-	else</span>
<span class="p_del">-		current-&gt;mm-&gt;def_flags &amp;= ~VM_LOCKED;</span>
 
<span class="p_del">-	if (flags == MCL_FUTURE)</span>
<span class="p_del">-		goto out;</span>
<span class="p_add">+		if (flags == MCL_FUTURE)</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (flags &amp; MCL_ONFAULT)</span>
<span class="p_add">+			current-&gt;mm-&gt;def_flags |= VM_LOCKONFAULT;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (flags &amp; (MCL_ONFAULT | MCL_CURRENT)) {</span>
<span class="p_add">+		to_add |= VM_LOCKED;</span>
<span class="p_add">+		if (flags &amp; MCL_ONFAULT)</span>
<span class="p_add">+			to_add |= VM_LOCKONFAULT;</span>
<span class="p_add">+	}</span>
 
 	for (vma = current-&gt;mm-&gt;mmap; vma ; vma = prev-&gt;vm_next) {
 		vm_flags_t newflags;
 
<span class="p_del">-		newflags = vma-&gt;vm_flags &amp; ~VM_LOCKED;</span>
<span class="p_del">-		if (flags &amp; MCL_CURRENT)</span>
<span class="p_del">-			newflags |= VM_LOCKED;</span>
<span class="p_add">+		newflags = vma-&gt;vm_flags &amp; ~(VM_LOCKED | VM_LOCKONFAULT);</span>
<span class="p_add">+		newflags |= to_add;</span>
 
 		/* Ignore errors */
 		mlock_fixup(vma, &amp;prev, vma-&gt;vm_start, vma-&gt;vm_end, newflags);
<span class="p_chunk">@@ -697,7 +711,8 @@</span> <span class="p_context"> SYSCALL_DEFINE1(mlockall, int, flags)</span>
 	unsigned long lock_limit;
 	int ret = -EINVAL;
 
<span class="p_del">-	if (!flags || (flags &amp; ~(MCL_CURRENT | MCL_FUTURE)))</span>
<span class="p_add">+	if (!flags || (flags &amp; ~(MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT)) ||</span>
<span class="p_add">+	    (flags &amp; (MCL_CURRENT | MCL_ONFAULT)) == (MCL_CURRENT | MCL_ONFAULT))</span>
 		goto out;
 
 	ret = -EPERM;
<span class="p_chunk">@@ -717,7 +732,7 @@</span> <span class="p_context"> SYSCALL_DEFINE1(mlockall, int, flags)</span>
 	    capable(CAP_IPC_LOCK))
 		ret = apply_mlockall_flags(flags);
 	up_write(&amp;current-&gt;mm-&gt;mmap_sem);
<span class="p_del">-	if (!ret &amp;&amp; (flags &amp; MCL_CURRENT))</span>
<span class="p_add">+	if (!ret &amp;&amp; (flags &amp; (MCL_CURRENT | MCL_ONFAULT)))</span>
 		mm_populate(0, TASK_SIZE);
 out:
 	return ret;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



