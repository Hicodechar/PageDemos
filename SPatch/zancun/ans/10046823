
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/asm] x86/boot: Add early boot support when running with SEV active - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/asm] x86/boot: Add early boot support when running with SEV active</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 7, 2017, 2:47 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-1958b5fc401067662ec11a6fcbe0daa26c813603@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10046823/mbox/"
   >mbox</a>
|
   <a href="/patch/10046823/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10046823/">/patch/10046823/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CD3DC60247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:51:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BA98529DD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:51:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AF1DD2A140; Tue,  7 Nov 2017 14:51:13 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8895D29DD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:51:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S965133AbdKGOvI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 7 Nov 2017 09:51:08 -0500
Received: from terminus.zytor.com ([65.50.211.136]:46303 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933147AbdKGOvG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 7 Nov 2017 09:51:06 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id vA7ElT98027996;
	Tue, 7 Nov 2017 06:47:29 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id vA7ElTsT027989;
	Tue, 7 Nov 2017 06:47:29 -0800
Date: Tue, 7 Nov 2017 06:47:29 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Tom Lendacky &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-1958b5fc401067662ec11a6fcbe0daa26c813603@git.kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, tglx@linutronix.de,
	kirill.shutemov@linux.intel.com, luto@kernel.org,
	rkrcmar@redhat.com, keescook@chromium.org, labbott@redhat.com,
	hpa@zytor.com, bp@suse.de, brijesh.singh@amd.com,
	konrad.wilk@oracle.com, bp@alien8.de, pbonzini@redhat.com,
	thomas.lendacky@amd.com, mingo@kernel.org
Reply-To: konrad.wilk@oracle.com, mingo@kernel.org,
	thomas.lendacky@amd.com, pbonzini@redhat.com, bp@alien8.de,
	bp@suse.de, brijesh.singh@amd.com, labbott@redhat.com,
	hpa@zytor.com, luto@kernel.org, rkrcmar@redhat.com,
	keescook@chromium.org, tglx@linutronix.de,
	linux-kernel@vger.kernel.org, kirill.shutemov@linux.intel.com
In-Reply-To: &lt;20171020143059.3291-13-brijesh.singh@amd.com&gt;
References: &lt;20171020143059.3291-13-brijesh.singh@amd.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/asm] x86/boot: Add early boot support when running with
	SEV active
Git-Commit-ID: 1958b5fc401067662ec11a6fcbe0daa26c813603
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Nov. 7, 2017, 2:47 p.m.</div>
<pre class="content">
Commit-ID:  1958b5fc401067662ec11a6fcbe0daa26c813603
Gitweb:     https://git.kernel.org/tip/1958b5fc401067662ec11a6fcbe0daa26c813603
Author:     Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
AuthorDate: Fri, 20 Oct 2017 09:30:54 -0500
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Tue, 7 Nov 2017 15:35:58 +0100

x86/boot: Add early boot support when running with SEV active

Early in the boot process, add checks to determine if the kernel is
running with Secure Encrypted Virtualization (SEV) active.

Checking for SEV requires checking that the kernel is running under a
hypervisor (CPUID 0x00000001, bit 31), that the SEV feature is available
(CPUID 0x8000001f, bit 1) and then checking a non-interceptable SEV MSR
(0xc0010131, bit 0).

This check is required so that during early compressed kernel booting the
pagetables (both the boot pagetables and KASLR pagetables (if enabled) are
updated to include the encryption mask so that when the kernel is
decompressed into encrypted memory, it can boot properly.

After the kernel is decompressed and continues booting the same logic is
used to check if SEV is active and set a flag indicating so.  This allows
to distinguish between SME and SEV, each of which have unique differences
in how certain things are handled: e.g. DMA (always bounce buffered with
SEV) or EFI tables (always access decrypted with SME).
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="tested-by">Tested-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
Cc: Laura Abbott &lt;labbott@redhat.com&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: kvm@vger.kernel.org
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: Radim Krčmář &lt;rkrcmar@redhat.com&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Link: https://lkml.kernel.org/r/20171020143059.3291-13-brijesh.singh@amd.com

---
 arch/x86/boot/compressed/Makefile      |   1 +
 arch/x86/boot/compressed/head_64.S     |  16 +++++
 arch/x86/boot/compressed/mem_encrypt.S | 120 +++++++++++++++++++++++++++++++++
 arch/x86/boot/compressed/misc.h        |   2 +
 arch/x86/boot/compressed/pagetable.c   |   8 ++-
 arch/x86/include/asm/msr-index.h       |   3 +
 arch/x86/include/uapi/asm/kvm_para.h   |   1 -
 arch/x86/mm/mem_encrypt.c              |  50 +++++++++++---
 8 files changed, 186 insertions(+), 15 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile</span>
<span class="p_header">index 4b7575b..61827c2 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/Makefile</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/Makefile</span>
<span class="p_chunk">@@ -78,6 +78,7 @@</span> <span class="p_context"> vmlinux-objs-$(CONFIG_EARLY_PRINTK) += $(obj)/early_serial_console.o</span>
 vmlinux-objs-$(CONFIG_RANDOMIZE_BASE) += $(obj)/kaslr.o
 ifdef CONFIG_X86_64
 	vmlinux-objs-$(CONFIG_RANDOMIZE_BASE) += $(obj)/pagetable.o
<span class="p_add">+	vmlinux-objs-y += $(obj)/mem_encrypt.o</span>
 endif
 
 $(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
<span class="p_header">diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S</span>
<span class="p_header">index beb255b..20919b4 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/head_64.S</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/head_64.S</span>
<span class="p_chunk">@@ -131,6 +131,19 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
  /*
   * Build early 4G boot pagetable
   */
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If SEV is active then set the encryption mask in the page tables.</span>
<span class="p_add">+	 * This will insure that when the kernel is copied and decompressed</span>
<span class="p_add">+	 * it will be done so encrypted.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	call	get_sev_encryption_bit</span>
<span class="p_add">+	xorl	%edx, %edx</span>
<span class="p_add">+	testl	%eax, %eax</span>
<span class="p_add">+	jz	1f</span>
<span class="p_add">+	subl	$32, %eax	/* Encryption bit is always above bit 31 */</span>
<span class="p_add">+	bts	%eax, %edx	/* Set encryption mask for page tables */</span>
<span class="p_add">+1:</span>
<span class="p_add">+</span>
 	/* Initialize Page tables to 0 */
 	leal	pgtable(%ebx), %edi
 	xorl	%eax, %eax
<span class="p_chunk">@@ -141,12 +154,14 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
 	leal	pgtable + 0(%ebx), %edi
 	leal	0x1007 (%edi), %eax
 	movl	%eax, 0(%edi)
<span class="p_add">+	addl	%edx, 4(%edi)</span>
 
 	/* Build Level 3 */
 	leal	pgtable + 0x1000(%ebx), %edi
 	leal	0x1007(%edi), %eax
 	movl	$4, %ecx
 1:	movl	%eax, 0x00(%edi)
<span class="p_add">+	addl	%edx, 0x04(%edi)</span>
 	addl	$0x00001000, %eax
 	addl	$8, %edi
 	decl	%ecx
<span class="p_chunk">@@ -157,6 +172,7 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
 	movl	$0x00000183, %eax
 	movl	$2048, %ecx
 1:	movl	%eax, 0(%edi)
<span class="p_add">+	addl	%edx, 4(%edi)</span>
 	addl	$0x00200000, %eax
 	addl	$8, %edi
 	decl	%ecx
<span class="p_header">diff --git a/arch/x86/boot/compressed/mem_encrypt.S b/arch/x86/boot/compressed/mem_encrypt.S</span>
new file mode 100644
<span class="p_header">index 0000000..54f5f66</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/mem_encrypt.S</span>
<span class="p_chunk">@@ -0,0 +1,120 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * AMD Memory Encryption Support</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (C) 2017 Advanced Micro Devices, Inc.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Author: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/linkage.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/asm-offsets.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+	.text</span>
<span class="p_add">+	.code32</span>
<span class="p_add">+ENTRY(get_sev_encryption_bit)</span>
<span class="p_add">+	xor	%eax, %eax</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	push	%ebx</span>
<span class="p_add">+	push	%ecx</span>
<span class="p_add">+	push	%edx</span>
<span class="p_add">+	push	%edi</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * RIP-relative addressing is needed to access the encryption bit</span>
<span class="p_add">+	 * variable. Since we are running in 32-bit mode we need this call/pop</span>
<span class="p_add">+	 * sequence to get the proper relative addressing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	call	1f</span>
<span class="p_add">+1:	popl	%edi</span>
<span class="p_add">+	subl	$1b, %edi</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	enc_bit(%edi), %eax</span>
<span class="p_add">+	cmpl	$0, %eax</span>
<span class="p_add">+	jge	.Lsev_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if running under a hypervisor */</span>
<span class="p_add">+	movl	$1, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	bt	$31, %ecx		/* Check the hypervisor bit */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	$0x80000000, %eax	/* CPUID to check the highest leaf */</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	cmpl	$0x8000001f, %eax	/* See if 0x8000001f is available */</span>
<span class="p_add">+	jb	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SEV feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 1</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movl	$0x8000001f, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	bt	$1, %eax		/* Check if SEV is available */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	$MSR_AMD64_SEV, %ecx	/* Read the SEV MSR */</span>
<span class="p_add">+	rdmsr</span>
<span class="p_add">+	bt	$MSR_AMD64_SEV_ENABLED_BIT, %eax	/* Check if SEV is active */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	%ebx, %eax</span>
<span class="p_add">+	andl	$0x3f, %eax		/* Return the encryption bit location */</span>
<span class="p_add">+	movl	%eax, enc_bit(%edi)</span>
<span class="p_add">+	jmp	.Lsev_exit</span>
<span class="p_add">+</span>
<span class="p_add">+.Lno_sev:</span>
<span class="p_add">+	xor	%eax, %eax</span>
<span class="p_add">+	movl	%eax, enc_bit(%edi)</span>
<span class="p_add">+</span>
<span class="p_add">+.Lsev_exit:</span>
<span class="p_add">+	pop	%edi</span>
<span class="p_add">+	pop	%edx</span>
<span class="p_add">+	pop	%ecx</span>
<span class="p_add">+	pop	%ebx</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="p_add">+</span>
<span class="p_add">+	ret</span>
<span class="p_add">+ENDPROC(get_sev_encryption_bit)</span>
<span class="p_add">+</span>
<span class="p_add">+	.code64</span>
<span class="p_add">+ENTRY(get_sev_encryption_mask)</span>
<span class="p_add">+	xor	%rax, %rax</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	push	%rbp</span>
<span class="p_add">+	push	%rdx</span>
<span class="p_add">+</span>
<span class="p_add">+	movq	%rsp, %rbp		/* Save current stack pointer */</span>
<span class="p_add">+</span>
<span class="p_add">+	call	get_sev_encryption_bit	/* Get the encryption bit position */</span>
<span class="p_add">+	testl	%eax, %eax</span>
<span class="p_add">+	jz	.Lno_sev_mask</span>
<span class="p_add">+</span>
<span class="p_add">+	xor	%rdx, %rdx</span>
<span class="p_add">+	bts	%rax, %rdx		/* Create the encryption mask */</span>
<span class="p_add">+	mov	%rdx, %rax		/* ... and return it */</span>
<span class="p_add">+</span>
<span class="p_add">+.Lno_sev_mask:</span>
<span class="p_add">+	movq	%rbp, %rsp		/* Restore original stack pointer */</span>
<span class="p_add">+</span>
<span class="p_add">+	pop	%rdx</span>
<span class="p_add">+	pop	%rbp</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	ret</span>
<span class="p_add">+ENDPROC(get_sev_encryption_mask)</span>
<span class="p_add">+</span>
<span class="p_add">+	.data</span>
<span class="p_add">+enc_bit:</span>
<span class="p_add">+	.int	0xffffffff</span>
<span class="p_header">diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h</span>
<span class="p_header">index 32d4ec2..9d323dc 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/misc.h</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/misc.h</span>
<span class="p_chunk">@@ -109,4 +109,6 @@</span> <span class="p_context"> static inline void console_init(void)</span>
 { }
 #endif
 
<span class="p_add">+unsigned long get_sev_encryption_mask(void);</span>
<span class="p_add">+</span>
 #endif
<span class="p_header">diff --git a/arch/x86/boot/compressed/pagetable.c b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">index 972319f..d5364ca 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_chunk">@@ -77,16 +77,18 @@</span> <span class="p_context"> static unsigned long top_level_pgt;</span>
  * Mapping information structure passed to kernel_ident_mapping_init().
  * Due to relocation, pointers must be assigned at run time not build time.
  */
<span class="p_del">-static struct x86_mapping_info mapping_info = {</span>
<span class="p_del">-	.page_flag       = __PAGE_KERNEL_LARGE_EXEC,</span>
<span class="p_del">-};</span>
<span class="p_add">+static struct x86_mapping_info mapping_info;</span>
 
 /* Locates and clears a region for a new top level page table. */
 void initialize_identity_maps(void)
 {
<span class="p_add">+	unsigned long sev_me_mask = get_sev_encryption_mask();</span>
<span class="p_add">+</span>
 	/* Init mapping_info with run-time function/buffer pointers. */
 	mapping_info.alloc_pgt_page = alloc_pgt_page;
 	mapping_info.context = &amp;pgt_data;
<span class="p_add">+	mapping_info.page_flag = __PAGE_KERNEL_LARGE_EXEC | sev_me_mask;</span>
<span class="p_add">+	mapping_info.kernpg_flag = _KERNPG_TABLE | sev_me_mask;</span>
 
 	/*
 	 * It should be impossible for this not to already be true,
<span class="p_header">diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h</span>
<span class="p_header">index ab02261..34c4922 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/msr-index.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/msr-index.h</span>
<span class="p_chunk">@@ -324,6 +324,9 @@</span> <span class="p_context"></span>
 #define MSR_AMD64_IBSBRTARGET		0xc001103b
 #define MSR_AMD64_IBSOPDATA4		0xc001103d
 #define MSR_AMD64_IBS_REG_COUNT_MAX	8 /* includes MSR_AMD64_IBSBRTARGET */
<span class="p_add">+#define MSR_AMD64_SEV			0xc0010131</span>
<span class="p_add">+#define MSR_AMD64_SEV_ENABLED_BIT	0</span>
<span class="p_add">+#define MSR_AMD64_SEV_ENABLED		BIT_ULL(MSR_AMD64_SEV_ENABLED_BIT)</span>
 
 /* Fam 17h MSRs */
 #define MSR_F17H_IRPERF			0xc00000e9
<span class="p_header">diff --git a/arch/x86/include/uapi/asm/kvm_para.h b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">index 554aa8f..09cc064 100644</span>
<span class="p_header">--- a/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">+++ b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_chunk">@@ -110,5 +110,4 @@</span> <span class="p_context"> struct kvm_vcpu_pv_apf_data {</span>
 #define KVM_PV_EOI_ENABLED KVM_PV_EOI_MASK
 #define KVM_PV_EOI_DISABLED 0x0
 
<span class="p_del">-</span>
 #endif /* _UAPI_ASM_X86_KVM_PARA_H */
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index e8bfad7..fd9c7bb 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -313,7 +313,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 	if (sev_active())
 		dma_ops = &amp;sev_dma_ops;
 
<span class="p_del">-	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);</span>
<span class="p_add">+	pr_info(&quot;AMD %s active\n&quot;,</span>
<span class="p_add">+		sev_active() ? &quot;Secure Encrypted Virtualization (SEV)&quot;</span>
<span class="p_add">+			     : &quot;Secure Memory Encryption (SME)&quot;);</span>
 }
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
<span class="p_chunk">@@ -641,37 +643,63 @@</span> <span class="p_context"> void __init __nostackprotector sme_enable(struct boot_params *bp)</span>
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;
 	unsigned int eax, ebx, ecx, edx;
<span class="p_add">+	unsigned long feature_mask;</span>
 	bool active_by_default;
 	unsigned long me_mask;
 	char buffer[16];
 	u64 msr;
 
<span class="p_del">-	/* Check for the SME support leaf */</span>
<span class="p_add">+	/* Check for the SME/SEV support leaf */</span>
 	eax = 0x80000000;
 	ecx = 0;
 	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);
 	if (eax &lt; 0x8000001f)
 		return;
 
<span class="p_add">+#define AMD_SME_BIT	BIT(0)</span>
<span class="p_add">+#define AMD_SEV_BIT	BIT(1)</span>
 	/*
<span class="p_del">-	 * Check for the SME feature:</span>
<span class="p_del">-	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_del">-	 *     Secure Memory Encryption support</span>
<span class="p_del">-	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_del">-	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 * Set the feature mask (SME or SEV) based on whether we are</span>
<span class="p_add">+	 * running under a hypervisor.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	eax = 1;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	feature_mask = (ecx &amp; BIT(31)) ? AMD_SEV_BIT : AMD_SME_BIT;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SME/SEV feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX]</span>
<span class="p_add">+	 *   - Bit 0 - Secure Memory Encryption support</span>
<span class="p_add">+	 *   - Bit 1 - Secure Encrypted Virtualization support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX]</span>
<span class="p_add">+	 *   - Bits 5:0 - Pagetable bit position used to indicate encryption</span>
 	 */
 	eax = 0x8000001f;
 	ecx = 0;
 	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);
<span class="p_del">-	if (!(eax &amp; 1))</span>
<span class="p_add">+	if (!(eax &amp; feature_mask))</span>
 		return;
 
 	me_mask = 1UL &lt;&lt; (ebx &amp; 0x3f);
 
<span class="p_del">-	/* Check if SME is enabled */</span>
<span class="p_del">-	msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_del">-	if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+	/* Check if memory encryption is enabled */</span>
<span class="p_add">+	if (feature_mask == AMD_SME_BIT) {</span>
<span class="p_add">+		/* For SME, check the SYSCFG MSR */</span>
<span class="p_add">+		msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_add">+		if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/* For SEV, check the SEV MSR */</span>
<span class="p_add">+		msr = __rdmsr(MSR_AMD64_SEV);</span>
<span class="p_add">+		if (!(msr &amp; MSR_AMD64_SEV_ENABLED))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* SEV state cannot be controlled by a command line option */</span>
<span class="p_add">+		sme_me_mask = me_mask;</span>
<span class="p_add">+		sev_enabled = true;</span>
 		return;
<span class="p_add">+	}</span>
 
 	/*
 	 * Fixups have not been applied to phys_base yet and we&#39;re running

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



