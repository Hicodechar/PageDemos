
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,24/34] x86, swiotlb: Add memory encryption support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,24/34] x86, swiotlb: Add memory encryption support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2017, 7:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170607191721.28645.96519.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9772571/mbox/"
   >mbox</a>
|
   <a href="/patch/9772571/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9772571/">/patch/9772571/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	980FF60393 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 87B5328323
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7B95028521; Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9E84C28323
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752628AbdFGTRo (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Jun 2017 15:17:44 -0400
Received: from mail-sn1nam02on0044.outbound.protection.outlook.com
	([104.47.36.44]:56743
	&quot;EHLO NAM02-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752196AbdFGTRd (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Jun 2017 15:17:33 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=G9zjP0CeCTbpHU5vURtkrwlwFnt+mVVNQ8V7WvBmy7Y=;
	b=dhO3QThxMZryL2fmfRhS4Iu0vqwGnjOw/eauatbB/X/CFqOyien0SzLrmpaPCAIUR1EQG/uNCJJ7aExKtaS7w8o/nkSB6wZmgY8q2qm4f2TKuJRg6HIFpqWtIjLBJayNx1rdXwyPVMMcn7mMNB29Y1cVx9nOd6dSNGefkaOEhKk=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	CY4PR12MB1141.namprd12.prod.outlook.com (10.168.163.149) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1143.10; Wed, 7 Jun 2017 19:17:24 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v6 24/34] x86, swiotlb: Add memory encryption support
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, linux-mm@kvack.org,
	iommu@lists.linux-foundation.org
Cc: Rik van Riel &lt;riel@redhat.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;, Dave Young &lt;dyoung@redhat.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Wed, 07 Jun 2017 14:17:21 -0500
Message-ID: &lt;20170607191721.28645.96519.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR15CA0025.namprd15.prod.outlook.com (10.173.226.139)
	To
	CY4PR12MB1141.namprd12.prod.outlook.com (10.168.163.149)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PR12MB1141:
X-MS-Office365-Filtering-Correlation-Id: c8531afa-6427-4442-4b74-08d4add9d5c3
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(48565401081)(201703131423075)(201703031133081);
	SRVR:CY4PR12MB1141; 
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	3:+OWWrpGnu/mKf37Fryp8NJpE6zyjb/O8a0aPGGYqna9e9qEY0UaBA5Jy+0KKktLSHJOE+yi07jihZegymmeJX+0YkwQeZnxPmBMSdH7ogru2GPbq/d2D7p8+XdnZRiJ28kFBvtuWDK+hD9e55CcCFOrXXo7Wbe5GHM+xu36lp3dWq+wUgnb3IHurkGvLaDczP0xeL0uYtohFnGEMHNa0q22+grXdfdC+rYTT4q/GNcxT1LBuWRBlCCv8iElKOuxNmqQZIY9QE3Fvdgjpx9HiALm1OtWi+9rWhdwmtngNm9jMeD94vDhAE78nlyBGxJBQJP25Zpupem0x0PPD1SAb7jNNcY8baHccZFaExZf2f3k=;
	25:+O8UIbmKSi+oAKKqYwOQ3ctdSTbUTRIVD6Tk06SxeJ9LZD8O9+dSlZCmIkQLfSH3AgzDkGqCRmPV0B6x0tDSujIaSWe0vpQh2pl7DV9wFwY8xcTxamzshKxkRj99d4B0yT4OiqS3z/mV04wbtqNjD1EKogK7t3X6ey7KeMIPMqCiKFij0NMKYJayNXeeCl3YT/kHECmFvSPArAyAn5crwCT+JG91WDgKbNzrMKurcnUw5h3vHUV+i3M03pE/BcExXnNPiYwlvLGDTJ4D3qabm2cj35+652qTUrz4Zwj4uD5cCk7jVctSLzaPEuqtUrLUQG9BCFIrMIIa7/lqqatHjlqunTE3P5OUCp4ooRjTcw1koVA/a1hy4PGraTAOY9rIkQnobie7D4oYVD+wUrY/YlR8pBob8iJKgexWb5g1pGAg/GcAxNZbw1m70NqRZ4XBLJy+NPSnuiy/aIJCK9hgbf1iwyc8DV8rkV5Ip9CYXAo=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	31:OzrZhH45EOrkKroeD+QUWrjZJ4T4BXQF1mgL4F+mSlSi/MitJZrw5V91Tiu0aqOKh5R0pzYGIiyuOmSgUJGFX0UQoJ3lFEHML3drnrf/pfMBXGBB4g9DozpW6/AGcuEARnfo24vghnDmeIAHjS8APH62YRKjBnX2sVKWP+csk9NA/bxAUUQNAOUbZlrv6gwOCC2UBlHlNwwtcvuZGVLLkO6gG6hpZGbZxuhmeYlblzU=;
	20:eCMN8f3PflnL0LwxCprSWvUjPpnXEFNmweou/kd+EodEicfvXzNVWduhgMc1SUABsdTt8DMpZNEBm/ZHl7nyDmVW4sESwAv9iVOjT0ETCRIK5c4vOtc4EZ+yy0TSMqMeY/sDsmMrb0mBV2DALuSAGuDn3ddEPJWy/ckqMEtt/n874xotygqZDOEJ6PRVqBIMkfKnljky7bcGaXiIW+6RoiMk19qFjZpq4UuH6QJZRZHgsMOdlTDsX+mLCpyoCt5hnNA70VChMYTxtKl3YQ2Gr5V9btTtHZiJ3VcJDnmeiIDeyo+L78S/pMMD4otsHpOGFOxwBZn8pqQRu2WiQ5vpK20bulh4yUiJkyHdrAIc0vKMJL0rKsGiu3tS/OVnATK0zxGxMKuQ3UZzp0wfowX7cg93DUxnPP5b2tOqrAhGXbPJ3mmE1r12EQV4UoGufL5pfCN/yxhFxCPFIOWjgBeIPoCROdWl7CRliKf6IJskC18N46Ob3b9NigQvOMun2zZD
X-Microsoft-Antispam-PRVS: &lt;CY4PR12MB1141BDF42A4E0241DE55E938ECC80@CY4PR12MB1141.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(93006095)(93001095)(100000703101)(100105400095)(10201501046)(3002001)(6055026)(6041248)(20161123555025)(20161123558100)(20161123564025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123562025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY4PR12MB1141; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY4PR12MB1141; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQxOzQ6em1rR3daYzFoZGNyeUNZRFY0S3pQVXp6U3hU?=
	=?utf-8?B?OFZoYjlmcFFnaVF3cTlZWElYMWp6d3Vpa0g5OHVDY095YUVnWVhYRDlhazNO?=
	=?utf-8?B?SUxwMDk0RC8zU0lzNk5ja3EvR2tVRVdMVEp1eEVTTE9NREl1dytkTHJwcXNO?=
	=?utf-8?B?MUlvMFhlYnhWdGhJMGRCOVRoOWxNQ2VYemYwRFVHOFVyNU0wcGNkSzcyRmZF?=
	=?utf-8?B?cjZDNjRiQ1RmSmlaRTlHQXpOYlI3RzRndk43bThMVnpGb2x6MWJld1pzREox?=
	=?utf-8?B?SnFtOFRWcWlhVi9pZitlZ2I5Y0lKQVpJcGpCTG0yK3o0a1lJK08wQmMzR290?=
	=?utf-8?B?cVdlb0VlRmJ2M1MzVFd6OEFtVGlid2RCalFaa1Jqa2FkSEhzaWxSTzJHYlZJ?=
	=?utf-8?B?eFZzeVFnL2ppZXJHWjdJWW5adFNkd1p4QndUajJwV3B6NEtRUmp4eHpmMHNT?=
	=?utf-8?B?eFF4QUphWHhMYVVnakxSbklKTS81MUVXQVh1TDAyNGtudDRFV0FZRmpKSG56?=
	=?utf-8?B?MEEyTyszQlFLNSt4WVR4M2dXSW1scXlVMktCTS9ER0NiVnRaa29iYkk0NDAw?=
	=?utf-8?B?Z3VDMUI5UG5ybWVaNlQrWkVuY1JmbjdBTXVRUStJeDJmbFBFNXZqWGovbmlH?=
	=?utf-8?B?R0JzVTQ4MGhRTWJxVVNkWk9sbGEzOE9qbkFxWGprSjJnN2ZTL3JhT216YTlt?=
	=?utf-8?B?QTE3bHpZQ2VyalVabkVIdkdha0xPUmVreVBFalgwYURjbE1rLzF2ZmQraGg3?=
	=?utf-8?B?dzd1RUJHUDZyaGZoTkxTS1M0YTZjMmkyczYwUmhBZGJJL1pJQnFnalYwT0p1?=
	=?utf-8?B?SnJ1OHprR1E5SDVYb2VENGNvRUp4VTRlODh5ajk0YW5rRUZ0VVgycU1VRTVU?=
	=?utf-8?B?d2JLWlVqZWxvQ2xkbmxNUzZNaGlkejJ6TkxUYVY5NTBRMVR5b1FGUktXaWRJ?=
	=?utf-8?B?Nndac3hyeGpySkZUYWQ1NVdRSEhFZUVjZjErT0o3bFV0UmY4K1FhTFh2SFQ5?=
	=?utf-8?B?ZUJPSnlDWjZONkVvRnJsWFdLMDJBQk9EMkFkUHkwdjBjT0IvdnJUbkNtOG1U?=
	=?utf-8?B?cStVYW5INmJiQWZxbGt5SS8yUGRjbkQ2Z1ZuV25jUEVOQmtvTjUwclRheU5a?=
	=?utf-8?B?NTNSR3ltdmRVUWFTTmJNZ0tPblc3RWdUdkNhZ25sbXVUSkxhMi9mc3ZnWUlP?=
	=?utf-8?B?bWpuVWhodHoxVE0zNW8xbDhsNDF1UEIzcTF0K1MrZklaekQ0eEdtUVpmZzM5?=
	=?utf-8?B?T1lLakc5RDdRQTUwdlU1OFg4UXY1bGd5M09HL2h2YjhWOVhLVXFJcXJRV1JB?=
	=?utf-8?B?ckdjc3NBblFZc0ZtM2grL04zUDcydFNqa0R5V3czdFhlOUNaQzNKVDhGS3Fm?=
	=?utf-8?B?YzlUS2xET1hSWkl3QVA4czdrQ0RGTHdjQVg2L1FNc1VQME1xR2s2UTNYM1Zp?=
	=?utf-8?B?amZ1MWJ2Qyt6QmJQaVFhYzdBVmx4OTV3a0haRStKekUveFlWNGxNNVBxbDFh?=
	=?utf-8?B?RFZrRlVudE51OGpuQ2hhakgvazMyYllvVjN3cHpBdHRFK0xxdG5ZMEdCWUwy?=
	=?utf-8?B?Z1YxVjBZTnB0ZS9HN21pekExdGplbWhFYTFLYmthbUlmd2tNM2U5cWN3SVdB?=
	=?utf-8?Q?6JQWj9mtmuL9xKhF7ZO?=
X-Forefront-PRVS: 03319F6FEF
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39450400003)(39840400002)(39860400002)(39410400002)(39850400002)(39400400002)(9686003)(54906002)(55016002)(6506006)(66066001)(4326008)(47776003)(110136004)(103116003)(25786009)(38730400002)(72206003)(478600001)(83506001)(305945005)(7736002)(86362001)(76176999)(50466002)(53936002)(54356999)(97746001)(7416002)(7406005)(23676002)(1076002)(6116002)(33646002)(3846002)(50986999)(230700001)(53416004)(42186005)(5660300001)(4001350100001)(8676002)(81166006)(2906002)(2950100002)(6666003)(189998001)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY4PR12MB1141;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQxOzIzOkI3ZHBhSE85eS91c1F6Yk83aksxNDZrOXB6?=
	=?utf-8?B?Y2ZVR05ranBZTnRkWDRrckhvNmlPMldadEJybjlRNDBVaFNHaWpldUR3THNi?=
	=?utf-8?B?QXpHZ0QxRlF6ZFgvQzViaXlJcjFxNzQ3SFp5ckozRGJ4NjVoMEpLQlJsNmhZ?=
	=?utf-8?B?ME9VUnhvbEZ0d0VNRWExS3JZNGRQM3R4MldUd0xSa0lCdDlWZmtrSkUvY3V5?=
	=?utf-8?B?Um1GM3RUck9VaU5KOUtDUTZ6YmtMSXd2N1BSb08zUHNsS3p4N3RlVkdmQkRK?=
	=?utf-8?B?NlQyTHIwaHM4K3NhSHljRGNZVm1rYmtJcDVJNS9mdEhBTHQ5TVE0STBab3VW?=
	=?utf-8?B?enoyeWhGcmVPak8yaXBTSDdUN3YwelJ2eTRDVnBscUI2eHMvMGlZamFtbGgw?=
	=?utf-8?B?aER1bTIvZTR4bmlZenlKcktGMWF4eDBOQXAyYnRaTU1lR2dEaEg0bmdJY1oz?=
	=?utf-8?B?RG5HdFo0NjdtbjEvYks2ejNBZ25JSDlEbHNVazhrMFMrck1mcmpXMzZ5dHZl?=
	=?utf-8?B?c3JHOGxCWVJiM2NnR1QrRTQ2NWRwKytXc1JjUFlmdnRIdFkrSFRkeHpMaGly?=
	=?utf-8?B?QTVqOW9KWEx0WU9GaDRWMVM5enkxS3hRS2RtNXhDWENXOHd2SWdDaDVia1FT?=
	=?utf-8?B?dGNiK2N3VTV4b01QZHlRRk5VSGc3QVFsWm0yckFGR05uUmd1bXFoOHoyQWtS?=
	=?utf-8?B?bUZvWG9EeVlFZHNkMElKa1FHRmgrY3FqTFlBZURabHpuNlRXNmExejFFZ0w4?=
	=?utf-8?B?RHJpUlJqR0pIcHYzMnIxRzFKbzZUMWpSNlNIdHo5RlBpaHpkV0NQb3dTRnIv?=
	=?utf-8?B?aWQ1dTRnL0JNTDJEaFJjVHppeFcyQkkzT0xpTGZHdm52T2xrYjBZWVdHNHZv?=
	=?utf-8?B?dFRNSGF0cXE2aXlyZTFaZjg3d3NncE0yYWh2UXF1Smxyc3Z1SkpwcWlBY3Bp?=
	=?utf-8?B?SExYYWhJcUUyNTBhSWpQKy9UaFhYeWl3d3ZHN0hkblJDRFFrbjVjamt3S1la?=
	=?utf-8?B?NWtkc1BhMTZQRElkZGREZy9jTEtNSTRDdUtVc3ZNZlh4SVVXOEd6Q2hXWHZR?=
	=?utf-8?B?Q29OOXAxU3I4QStlUVdwWnVkSmYwYTFBcnJ6VVk5L1lML1JnOHNaeE1DTVhB?=
	=?utf-8?B?dGVoN0VNM2hFeEN3YUFqdTJ0Uk1WMUx6QW5CdGg1bUxvUGN0eXlFaE5JcG1K?=
	=?utf-8?B?aEJhaVpMa0RBelBWbG5XNFVOTDI2cGVjRW9lUk1uQzUyaDcyTnkwd2VUZWY4?=
	=?utf-8?B?My9zZlVZcFBGeTFNSkF3Vm9yNCtMZmtzWnNJd2c4UUJyNlBhLzRVMDEyOTk1?=
	=?utf-8?B?ejNrWkNucUtUU2s2MUdBZlF1SiszNHV6byt5TTNCWm9TQ1JNQllSeVM2eEc5?=
	=?utf-8?B?M3I1SlNFRHBwM05TQ0NycVZRdXY3OTJ2d3M2MHhyY3Q4L1p2M2dNdjFON3FU?=
	=?utf-8?B?bTVkb2ZMSkl6TTg5cnhlNWNSRW5ET1gzbW83bkl2ZDQrcC9sYlFzUnNBOUhJ?=
	=?utf-8?B?NnU3Ty9nVFdQdEtwbCtqOXhvRlpQWUtzaktvMzR6czJYSmpyaUlDUHNZd2Zj?=
	=?utf-8?B?OTFSU1VCZnoyTWVtekxUS1Jlamx0Qkp0QTQ1U0FkZGFPMDI2V3RudlVIOEhz?=
	=?utf-8?B?d1JRQ3prMm92QU1QbVlCWkRIRk13Ylk4SmJvTXRPVVJKelRuTm5ia2thZEFD?=
	=?utf-8?Q?BBUmxR1qCc154KEulY=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	6:F0D4YXx+6wWJXUMnTXxCVQYKAYE3JCLF6Qfv6kAbgp92kxVPwhgpryV9vYBGbz+vt5PeR/ERga24NYKzUHtwxXgiFOC+gdqwgN5fuGhT/O2SSQuFunijUbdiVPTkKGbsRf+93QtzXxDJjVWerIRtjYLbP81xVXj5BhuWvVQgZ1fEBiryEVrq2LK8eIAxQHV8gGQqywg09yEtQa9u1X9Rdkep8nKGo7EgJxu41t8QzbpzyHtR72NSHvp5SZHEJO0vo6bMNaxdZsDqqJMrqez4Cqs9bgQ45bvPgfu2bD5lqbKL1n2nlBy7cmemRzynhOzNXPvU5U/REnRC8qdMFqhkavyAypiXYGroaNpyNreWO612wufhVA1SV69vi7MEIGrBmUCv1N9ojpHiG9+1610Vsd+cQyGxaDYeTJ3gmsKFJCY5Ao4mXNet+iVSV4ZwvX5Dd1WqKeZULraq9qM41XxPVCvaQNniNKudTSwWQyX8YNjhTxgq5bQhj5i7slE3hYBNPMQJ04543n+6/Yl/YseDSJgz2OoSYtIpOahu0MwXAt8=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	5:U5+2MQnKPuYKQezd3P3IzJ5aI271APiF1VV+z6ANvK+nHqBlsdE5e/dFLUCeEWUAKicgdcZuEREuVNOcMUnO4QBtibXSntgTOFQIwjrRHdHMs4iDVMEcyqibacF6EKn05+AjTAZE4BzGpX7SCmgFjBKu3JUH3aseOn0j7cuPWlt3SQ3ftCJN3o4WmIZmtq7++IukNnuC/SdLZSttAjvpiaxB5kmzKDB2CAFzs78v01nPh4wT04PuRykr1zp5jjEZH41O6fU4sKmLDiwuNrX92NbRudjYfJXr0yati0e9VLpKvPwTjTl3GEYCc/oDWx5mY4GkUtGB/F7uWgIGNZHWga7umj97j9hmoNhHqHbkoJZD2PitXyiUZgWfOoaDTaRktTyUOTEsNo9+3EJesnhVWP9AeU3weq4kFiqLVG/85sAEjq9AHljF2UagXr2hR9Ia29pdGf3oD6V2G9/yhFMurOUV6ZkFXRgzJwDydYU2gAVCsgsXtqeqH4J8CgWt6jI8;
	24:FVmWWxdQW0s/BdEDyZ9xTFulYij6QFKRIlm/krr4FJVk77zzX2DQkl625TBS/GBQNPZ/yG6M5Kd1kYiD9SITFGNlglb79FPhrn+KrQeaG7s=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	7:vOyK8VaGzU1k/UpkybrHmzq1hdGMeyp+lOOWuNUMQ4lJH2GlUISAXsUSmTK3ixBWh4eM+znNH/wLpZM550No+7RCIMtLAzzIiSzrskWTo1mIWlsFgIB3PGNJRzGb4kcR67k3u3addozob8eA2TDdEO2TgkLUIsOvZSmKusmHWoaDzdfwLETOJTNOCskUYueRGvAAHQScDHC7NV2DswJGPmKBOh7U1CJJFLeZkWORbQ2wVmAmouDgAMSsQXHSIhUIeJ7XIFs+ByIXV8wLDUK0qMSgeB8kWrMTJTD2c9FdZgHRyha+4Ose3seTYDyNIXS+hqk0BJ3V5uJ9GGktjHO5Pg==;
	20:FzHkcgVv0QnQe3cI+K3Kf6p5nKFKPNWm/TwOcqMHB0NhCIZzUw6BJFz7NlBkl49Adn/RMiZP+P1ZTFXvNUYR272MQBLRt3zrm/rSMquSK8cA/f2zx+I8nlPtiO+gbzZo99AvVMFI5NoOnLN/G5lFEq8+4hY2gmko+agFdyvvzrD2z9kqGg0YYfdcO9+/v23/DdCGCYU77NKSnS5tOO+rXCGBugW2IElSAJGPXNAI7mcwcKepmAYoquDU656AymuE
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Jun 2017 19:17:24.6311
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1141
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 7, 2017, 7:17 p.m.</div>
<pre class="content">
Since DMA addresses will effectively look like 48-bit addresses when the
memory encryption mask is set, SWIOTLB is needed if the DMA mask of the
device performing the DMA does not support 48-bits. SWIOTLB will be
initialized to create decrypted bounce buffers for use by these devices.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/dma-mapping.h |    5 ++-
 arch/x86/include/asm/mem_encrypt.h |    5 +++
 arch/x86/kernel/pci-dma.c          |   11 +++++--
 arch/x86/kernel/pci-nommu.c        |    2 +
 arch/x86/kernel/pci-swiotlb.c      |   15 ++++++++--
 arch/x86/mm/mem_encrypt.c          |   22 ++++++++++++++
 include/linux/swiotlb.h            |    1 +
 init/main.c                        |   13 ++++++++
 lib/swiotlb.c                      |   56 +++++++++++++++++++++++++++++++-----
 9 files changed, 113 insertions(+), 17 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 14, 2017, 4:45 p.m.</div>
<pre class="content">
On Wed, Jun 07, 2017 at 02:17:21PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Since DMA addresses will effectively look like 48-bit addresses when the</span>
<span class="quote">&gt; memory encryption mask is set, SWIOTLB is needed if the DMA mask of the</span>
<span class="quote">&gt; device performing the DMA does not support 48-bits. SWIOTLB will be</span>
<span class="quote">&gt; initialized to create decrypted bounce buffers for use by these devices.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>

...
<span class="quote">

&gt; diff --git a/init/main.c b/init/main.c</span>
<span class="quote">&gt; index df58a41..7125b5f 100644</span>
<span class="quote">&gt; --- a/init/main.c</span>
<span class="quote">&gt; +++ b/init/main.c</span>
<span class="quote">&gt; @@ -488,6 +488,10 @@ void __init __weak thread_stack_cache_init(void)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void __init __weak mem_encrypt_init(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>

void __init __weak mem_encrypt_init(void) { }

saves some real estate. Please do that for the rest of the stubs you&#39;re
adding, for the next version.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Set up kernel memory allocators</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; @@ -640,6 +644,15 @@ asmlinkage __visible void __init start_kernel(void)</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	locking_selftest();</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * This needs to be called before any devices perform DMA</span>
<span class="quote">&gt; +	 * operations that might use the SWIOTLB bounce buffers.</span>
<span class="quote">&gt; +	 * This call will mark the bounce buffers as decrypted so</span>
<span class="quote">&gt; +	 * that their usage will not cause &quot;plain-text&quot; data to be</span>
<span class="quote">&gt; +	 * decrypted when accessed.</span>

s/This call/It/
<span class="quote">
&gt; +	 */</span>
<span class="quote">&gt; +	mem_encrypt_init();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_BLK_DEV_INITRD</span>
<span class="quote">&gt;  	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;</span>
<span class="quote">&gt;  	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {</span>
<span class="quote">&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="quote">&gt; index a8d74a7..74d6557 100644</span>
<span class="quote">&gt; --- a/lib/swiotlb.c</span>
<span class="quote">&gt; +++ b/lib/swiotlb.c</span>
<span class="quote">&gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/highmem.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/gfp.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/io.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/dma.h&gt;</span>
<span class="quote">&gt; @@ -155,6 +156,17 @@ unsigned long swiotlb_size_or_default(void)</span>
<span class="quote">&gt;  	return size ? size : (IO_TLB_DEFAULT_SIZE);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>

As above.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 14, 2017, 7:38 p.m.</div>
<pre class="content">
On 6/14/2017 11:45 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Jun 07, 2017 at 02:17:21PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Since DMA addresses will effectively look like 48-bit addresses when the</span>
<span class="quote">&gt;&gt; memory encryption mask is set, SWIOTLB is needed if the DMA mask of the</span>
<span class="quote">&gt;&gt; device performing the DMA does not support 48-bits. SWIOTLB will be</span>
<span class="quote">&gt;&gt; initialized to create decrypted bounce buffers for use by these devices.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; diff --git a/init/main.c b/init/main.c</span>
<span class="quote">&gt;&gt; index df58a41..7125b5f 100644</span>
<span class="quote">&gt;&gt; --- a/init/main.c</span>
<span class="quote">&gt;&gt; +++ b/init/main.c</span>
<span class="quote">&gt;&gt; @@ -488,6 +488,10 @@ void __init __weak thread_stack_cache_init(void)</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +void __init __weak mem_encrypt_init(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; void __init __weak mem_encrypt_init(void) { }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; saves some real estate. Please do that for the rest of the stubs you&#39;re</span>
<span class="quote">&gt; adding, for the next version.</span>

Ok, will do.

Thanks,
Tom
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   /*</span>
<span class="quote">&gt;&gt;    * Set up kernel memory allocators</span>
<span class="quote">&gt;&gt;    */</span>
<span class="quote">&gt;&gt; @@ -640,6 +644,15 @@ asmlinkage __visible void __init start_kernel(void)</span>
<span class="quote">&gt;&gt;   	 */</span>
<span class="quote">&gt;&gt;   	locking_selftest();</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * This needs to be called before any devices perform DMA</span>
<span class="quote">&gt;&gt; +	 * operations that might use the SWIOTLB bounce buffers.</span>
<span class="quote">&gt;&gt; +	 * This call will mark the bounce buffers as decrypted so</span>
<span class="quote">&gt;&gt; +	 * that their usage will not cause &quot;plain-text&quot; data to be</span>
<span class="quote">&gt;&gt; +	 * decrypted when accessed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; s/This call/It/</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	mem_encrypt_init();</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   #ifdef CONFIG_BLK_DEV_INITRD</span>
<span class="quote">&gt;&gt;   	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;</span>
<span class="quote">&gt;&gt;   	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {</span>
<span class="quote">&gt;&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; index a8d74a7..74d6557 100644</span>
<span class="quote">&gt;&gt; --- a/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; +++ b/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/highmem.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/gfp.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   #include &lt;asm/io.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/dma.h&gt;</span>
<span class="quote">&gt;&gt; @@ -155,6 +156,17 @@ unsigned long swiotlb_size_or_default(void)</span>
<span class="quote">&gt;&gt;   	return size ? size : (IO_TLB_DEFAULT_SIZE);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As above.</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">index 08a0838..d75430a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/io.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
<span class="p_add">+#include &lt;asm/mem_encrypt.h&gt;</span>
 
 #ifdef CONFIG_ISA
 # define ISA_DMA_BIT_MASK DMA_BIT_MASK(24)
<span class="p_chunk">@@ -62,12 +63,12 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 
 static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
 {
<span class="p_del">-	return paddr;</span>
<span class="p_add">+	return __sme_set(paddr);</span>
 }
 
 static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
 {
<span class="p_del">-	return daddr;</span>
<span class="p_add">+	return __sme_clr(daddr);</span>
 }
 #endif /* CONFIG_X86_DMA_REMAP */
 
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 61a7049..f1215a4 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -31,6 +31,11 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 
 void __init sme_early_init(void);
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0UL
<span class="p_header">diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">index 3a216ec..72d96d4 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-dma.c</span>
<span class="p_chunk">@@ -93,9 +93,12 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (gfpflags_allow_blocking(flag)) {
 		page = dma_alloc_from_contiguous(dev, count, get_order(size),
 						 flag);
<span class="p_del">-		if (page &amp;&amp; page_to_phys(page) + size &gt; dma_mask) {</span>
<span class="p_del">-			dma_release_from_contiguous(dev, page, count);</span>
<span class="p_del">-			page = NULL;</span>
<span class="p_add">+		if (page) {</span>
<span class="p_add">+			addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+			if (addr + size &gt; dma_mask) {</span>
<span class="p_add">+				dma_release_from_contiguous(dev, page, count);</span>
<span class="p_add">+				page = NULL;</span>
<span class="p_add">+			}</span>
 		}
 	}
 	/* fallback */
<span class="p_chunk">@@ -104,7 +107,7 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (!page)
 		return NULL;
 
<span class="p_del">-	addr = page_to_phys(page);</span>
<span class="p_add">+	addr = phys_to_dma(dev, page_to_phys(page));</span>
 	if (addr + size &gt; dma_mask) {
 		__free_pages(page, get_order(size));
 
<span class="p_header">diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">index a88952e..98b576a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_chunk">@@ -30,7 +30,7 @@</span> <span class="p_context"> static dma_addr_t nommu_map_page(struct device *dev, struct page *page,</span>
 				 enum dma_data_direction dir,
 				 unsigned long attrs)
 {
<span class="p_del">-	dma_addr_t bus = page_to_phys(page) + offset;</span>
<span class="p_add">+	dma_addr_t bus = phys_to_dma(dev, page_to_phys(page)) + offset;</span>
 	WARN_ON(size == 0);
 	if (!check_addr(&quot;map_single&quot;, dev, bus, size))
 		return DMA_ERROR_CODE;
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index 1e23577..cc1e106 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -12,6 +12,8 @@</span> <span class="p_context"></span>
 #include &lt;asm/dma.h&gt;
 #include &lt;asm/xen/swiotlb-xen.h&gt;
 #include &lt;asm/iommu_table.h&gt;
<span class="p_add">+#include &lt;asm/mem_encrypt.h&gt;</span>
<span class="p_add">+</span>
 int swiotlb __read_mostly;
 
 void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
<span class="p_chunk">@@ -79,8 +81,8 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_override(void)</span>
 		  pci_swiotlb_late_init);
 
 /*
<span class="p_del">- * if 4GB or more detected (and iommu=off not set) return 1</span>
<span class="p_del">- * and set swiotlb to 1.</span>
<span class="p_add">+ * If 4GB or more detected (and iommu=off not set) or if SME is active</span>
<span class="p_add">+ * then set swiotlb to 1 and return 1.</span>
  */
 int __init pci_swiotlb_detect_4gb(void)
 {
<span class="p_chunk">@@ -89,6 +91,15 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_4gb(void)</span>
 	if (!no_iommu &amp;&amp; max_possible_pfn &gt; MAX_DMA32_PFN)
 		swiotlb = 1;
 #endif
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If SME is active then swiotlb will be set to 1 so that bounce</span>
<span class="p_add">+	 * buffers are allocated and used for devices that do not support</span>
<span class="p_add">+	 * the addressing range required for the encryption mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sme_active())</span>
<span class="p_add">+		swiotlb = 1;</span>
<span class="p_add">+</span>
 	return swiotlb;
 }
 IOMMU_INIT(pci_swiotlb_detect_4gb,
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 2321f05..5d7c51d 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -16,11 +16,14 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 #include &lt;linux/mm.h&gt;
<span class="p_add">+#include &lt;linux/dma-mapping.h&gt;</span>
<span class="p_add">+#include &lt;linux/swiotlb.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/bootparam.h&gt;
<span class="p_add">+#include &lt;asm/set_memory.h&gt;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -194,6 +197,25 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */</span>
<span class="p_add">+	swiotlb_update_mem_attributes();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	WARN(PAGE_ALIGN(size) != size,</span>
<span class="p_add">+	     &quot;size is not page-aligned (%#lx)\n&quot;, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make the SWIOTLB buffer area decrypted */</span>
<span class="p_add">+	set_memory_decrypted((unsigned long)vaddr, size &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void)
 {
 }
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 4ee479f..15e7160 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -35,6 +35,7 @@</span> <span class="p_context"> enum swiotlb_force {</span>
 extern unsigned long swiotlb_nr_tbl(void);
 unsigned long swiotlb_size_or_default(void);
 extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);
<span class="p_add">+extern void __init swiotlb_update_mem_attributes(void);</span>
 
 /*
  * Enumeration for sync targets
<span class="p_header">diff --git a/init/main.c b/init/main.c</span>
<span class="p_header">index df58a41..7125b5f 100644</span>
<span class="p_header">--- a/init/main.c</span>
<span class="p_header">+++ b/init/main.c</span>
<span class="p_chunk">@@ -488,6 +488,10 @@</span> <span class="p_context"> void __init __weak thread_stack_cache_init(void)</span>
 }
 #endif
 
<span class="p_add">+void __init __weak mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Set up kernel memory allocators
  */
<span class="p_chunk">@@ -640,6 +644,15 @@</span> <span class="p_context"> asmlinkage __visible void __init start_kernel(void)</span>
 	 */
 	locking_selftest();
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This needs to be called before any devices perform DMA</span>
<span class="p_add">+	 * operations that might use the SWIOTLB bounce buffers.</span>
<span class="p_add">+	 * This call will mark the bounce buffers as decrypted so</span>
<span class="p_add">+	 * that their usage will not cause &quot;plain-text&quot; data to be</span>
<span class="p_add">+	 * decrypted when accessed.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mem_encrypt_init();</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;
 	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index a8d74a7..74d6557 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/gfp.h&gt;
 #include &lt;linux/scatterlist.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/io.h&gt;
 #include &lt;asm/dma.h&gt;
<span class="p_chunk">@@ -155,6 +156,17 @@</span> <span class="p_context"> unsigned long swiotlb_size_or_default(void)</span>
 	return size ? size : (IO_TLB_DEFAULT_SIZE);
 }
 
<span class="p_add">+void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* For swiotlb, clear memory encryption mask from dma addresses */</span>
<span class="p_add">+static dma_addr_t swiotlb_phys_to_dma(struct device *hwdev,</span>
<span class="p_add">+				      phys_addr_t address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_clr(phys_to_dma(hwdev, address));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Note that this doesn&#39;t work with highmem page */
 static dma_addr_t swiotlb_virt_to_bus(struct device *hwdev,
 				      volatile void *address)
<span class="p_chunk">@@ -183,6 +195,31 @@</span> <span class="p_context"> void swiotlb_print_info(void)</span>
 	       bytes &gt;&gt; 20, vstart, vend - 1);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Early SWIOTLB allocation may be too early to allow an architecture to</span>
<span class="p_add">+ * perform the desired operations.  This function allows the architecture to</span>
<span class="p_add">+ * call SWIOTLB when the operations are possible.  It needs to be called</span>
<span class="p_add">+ * before the SWIOTLB memory is used.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void __init swiotlb_update_mem_attributes(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *vaddr;</span>
<span class="p_add">+	unsigned long bytes;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (no_iotlb_memory || late_alloc)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_start);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_overflow_buffer);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_overflow);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)
 {
 	void *v_overflow_buffer;
<span class="p_chunk">@@ -320,6 +357,7 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	io_tlb_start = virt_to_phys(tlb);
 	io_tlb_end = io_tlb_start + bytes;
 
<span class="p_add">+	swiotlb_set_mem_attributes(tlb, bytes);</span>
 	memset(tlb, 0, bytes);
 
 	/*
<span class="p_chunk">@@ -330,6 +368,8 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	if (!v_overflow_buffer)
 		goto cleanup2;
 
<span class="p_add">+	swiotlb_set_mem_attributes(v_overflow_buffer, io_tlb_overflow);</span>
<span class="p_add">+	memset(v_overflow_buffer, 0, io_tlb_overflow);</span>
 	io_tlb_overflow_buffer = virt_to_phys(v_overflow_buffer);
 
 	/*
<span class="p_chunk">@@ -581,7 +621,7 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 		return SWIOTLB_MAP_ERROR;
 	}
 
<span class="p_del">-	start_dma_addr = phys_to_dma(hwdev, io_tlb_start);</span>
<span class="p_add">+	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);</span>
 	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,
 				      dir, attrs);
 }
<span class="p_chunk">@@ -702,7 +742,7 @@</span> <span class="p_context"> void swiotlb_tbl_sync_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 			goto err_warn;
 
 		ret = phys_to_virt(paddr);
<span class="p_del">-		dev_addr = phys_to_dma(hwdev, paddr);</span>
<span class="p_add">+		dev_addr = swiotlb_phys_to_dma(hwdev, paddr);</span>
 
 		/* Confirm address can be DMA&#39;d by device */
 		if (dev_addr + size - 1 &gt; dma_mask) {
<span class="p_chunk">@@ -812,10 +852,10 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	map = map_single(dev, phys, size, dir, attrs);
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
<span class="p_del">-		return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 	}
 
<span class="p_del">-	dev_addr = phys_to_dma(dev, map);</span>
<span class="p_add">+	dev_addr = swiotlb_phys_to_dma(dev, map);</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (dma_capable(dev, dev_addr, size))
<span class="p_chunk">@@ -824,7 +864,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);
 
<span class="p_del">-	return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+	return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_map_page);
 
<span class="p_chunk">@@ -958,7 +998,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 				sg_dma_len(sgl) = 0;
 				return 0;
 			}
<span class="p_del">-			sg-&gt;dma_address = phys_to_dma(hwdev, map);</span>
<span class="p_add">+			sg-&gt;dma_address = swiotlb_phys_to_dma(hwdev, map);</span>
 		} else
 			sg-&gt;dma_address = dev_addr;
 		sg_dma_len(sg) = sg-&gt;length;
<span class="p_chunk">@@ -1026,7 +1066,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
 {
<span class="p_del">-	return (dma_addr == phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
<span class="p_add">+	return (dma_addr == swiotlb_phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_mapping_error);
 
<span class="p_chunk">@@ -1039,6 +1079,6 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_del">-	return phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="p_add">+	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_supported);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



