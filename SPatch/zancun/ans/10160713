
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/8] powerpc/8xx: Only perform perf counting when perf is in use. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/8] powerpc/8xx: Only perform perf counting when perf is in use.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 12, 2018, 12:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;9eae58412d91e7218a47733b47e14faee9864476.1515759812.git.christophe.leroy@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10160713/mbox/"
   >mbox</a>
|
   <a href="/patch/10160713/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10160713/">/patch/10160713/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	61036602D8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:47:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4FFB7289C7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:47:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 44BFA289DC; Fri, 12 Jan 2018 12:47:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5865B289C7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:47:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933953AbeALMrY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 12 Jan 2018 07:47:24 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:57256 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933149AbeALMpY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 12 Jan 2018 07:45:24 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zJ2X40Bjkz9ttgP;
	Fri, 12 Jan 2018 13:45:08 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id pipELv39nVIJ; Fri, 12 Jan 2018 13:45:07 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zJ2X36lPbz9ttfp;
	Fri, 12 Jan 2018 13:45:07 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 787E28BE58;
	Fri, 12 Jan 2018 13:45:23 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id CVgtoC8nhh62; Fri, 12 Jan 2018 13:45:23 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 55BB28BE4E;
	Fri, 12 Jan 2018 13:45:23 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 4A65D6EE7C; Fri, 12 Jan 2018 13:45:23 +0100 (CET)
Message-Id: &lt;9eae58412d91e7218a47733b47e14faee9864476.1515759812.git.christophe.leroy@c-s.fr&gt;
In-Reply-To: &lt;bb30d80cc985d7307fa1286c9e6824230698919b.1515759812.git.christophe.leroy@c-s.fr&gt;
References: &lt;bb30d80cc985d7307fa1286c9e6824230698919b.1515759812.git.christophe.leroy@c-s.fr&gt;
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH 3/8] powerpc/8xx: Only perform perf counting when perf is in
	use.
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Fri, 12 Jan 2018 13:45:23 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 12, 2018, 12:45 p.m.</div>
<pre class="content">
In TLB miss handlers, updating the perf counter is only useful
when performing a perf analysis. As it has a noticeable overhead,
let&#39;s only do it when needed.

In order to do so, the exit of the miss handlers will be patched
when starting/stopping &#39;perf&#39;: the first register restore
instruction of each exit point will be replaced by a jump to
the counting code.

Once this is done, CONFIG_PPC_8xx_PERF_EVENT becomes useless as
this feature doesn&#39;t add any overhead.
<span class="signed-off-by">
Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 arch/powerpc/include/asm/ppc-opcode.h  |  2 ++
 arch/powerpc/kernel/entry_32.S         | 10 +++----
 arch/powerpc/kernel/head_8xx.S         | 47 ++++++++++++++++++++----------
 arch/powerpc/perf/8xx-pmu.c            | 52 +++++++++++++++++++++++++++++++---
 arch/powerpc/perf/Makefile             |  2 +-
 arch/powerpc/platforms/Kconfig.cputype |  7 -----
 6 files changed, 88 insertions(+), 32 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/ppc-opcode.h b/arch/powerpc/include/asm/ppc-opcode.h</span>
<span class="p_header">index ce0930d68857..ab5c1588b487 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/ppc-opcode.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/ppc-opcode.h</span>
<span class="p_chunk">@@ -236,6 +236,7 @@</span> <span class="p_context"></span>
 #define PPC_INST_RFCI			0x4c000066
 #define PPC_INST_RFDI			0x4c00004e
 #define PPC_INST_RFMCI			0x4c00004c
<span class="p_add">+#define PPC_INST_MFSPR			0x7c0002a6</span>
 #define PPC_INST_MFSPR_DSCR		0x7c1102a6
 #define PPC_INST_MFSPR_DSCR_MASK	0xfc1ffffe
 #define PPC_INST_MTSPR_DSCR		0x7c1103a6
<span class="p_chunk">@@ -383,6 +384,7 @@</span> <span class="p_context"></span>
 #define __PPC_ME64(s)	__PPC_MB64(s)
 #define __PPC_BI(s)	(((s) &amp; 0x1f) &lt;&lt; 16)
 #define __PPC_CT(t)	(((t) &amp; 0x0f) &lt;&lt; 21)
<span class="p_add">+#define __PPC_SPR(r)	((((r) &amp; 0x1f) &lt;&lt; 16) | ((((r) &gt;&gt; 5) &amp; 0x1f) &lt;&lt; 11))</span>
 
 /*
  * Only use the larx hint bit on 64bit CPUs. e500v1/v2 based CPUs will treat a
<span class="p_header">diff --git a/arch/powerpc/kernel/entry_32.S b/arch/powerpc/kernel/entry_32.S</span>
<span class="p_header">index e780e1fbf6c2..eb8d01bae8c6 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/entry_32.S</span>
<span class="p_header">+++ b/arch/powerpc/kernel/entry_32.S</span>
<span class="p_chunk">@@ -211,7 +211,7 @@</span> <span class="p_context"> transfer_to_handler_cont:</span>
 	mflr	r9
 	lwz	r11,0(r9)		/* virtual address of handler */
 	lwz	r9,4(r9)		/* where to go when done */
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#if defined(CONFIG_PPC_8xx) &amp;&amp; defined(CONFIG_PERF_EVENTS)</span>
 	mtspr	SPRN_NRI, r0
 #endif
 #ifdef CONFIG_TRACE_IRQFLAGS
<span class="p_chunk">@@ -301,7 +301,7 @@</span> <span class="p_context"> stack_ovf:</span>
 	lis	r9,StackOverflow@ha
 	addi	r9,r9,StackOverflow@l
 	LOAD_MSR_KERNEL(r10,MSR_KERNEL)
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#if defined(CONFIG_PPC_8xx) &amp;&amp; defined(CONFIG_PERF_EVENTS)</span>
 	mtspr	SPRN_NRI, r0
 #endif
 	mtspr	SPRN_SRR0,r9
<span class="p_chunk">@@ -430,7 +430,7 @@</span> <span class="p_context"> END_FTR_SECTION_IFSET(CPU_FTR_NEED_PAIRED_STWCX)</span>
 	lwz	r7,_NIP(r1)
 	lwz	r2,GPR2(r1)
 	lwz	r1,GPR1(r1)
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#if defined(CONFIG_PPC_8xx) &amp;&amp; defined(CONFIG_PERF_EVENTS)</span>
 	mtspr	SPRN_NRI, r0
 #endif
 	mtspr	SPRN_SRR0,r7
<span class="p_chunk">@@ -727,7 +727,7 @@</span> <span class="p_context"> fast_exception_return:</span>
 	lwz	r10,_LINK(r11)
 	mtlr	r10
 	REST_GPR(10, r11)
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#if defined(CONFIG_PPC_8xx) &amp;&amp; defined(CONFIG_PERF_EVENTS)</span>
 	mtspr	SPRN_NRI, r0
 #endif
 	mtspr	SPRN_SRR1,r9
<span class="p_chunk">@@ -978,7 +978,7 @@</span> <span class="p_context"> END_FTR_SECTION_IFSET(CPU_FTR_NEED_PAIRED_STWCX)</span>
 	.globl exc_exit_restart
 exc_exit_restart:
 	lwz	r12,_NIP(r1)
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#if defined(CONFIG_PPC_8xx) &amp;&amp; defined(CONFIG_PERF_EVENTS)</span>
 	mtspr	SPRN_NRI, r0
 #endif
 	mtspr	SPRN_SRR0,r12
<span class="p_header">diff --git a/arch/powerpc/kernel/head_8xx.S b/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_header">index eda582b96dbf..641c9a9d4db2 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_header">+++ b/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_chunk">@@ -304,12 +304,6 @@</span> <span class="p_context"> InstructionTLBMiss:</span>
 #if defined(ITLB_MISS_KERNEL) || defined(CONFIG_HUGETLB_PAGE)
 	mtspr	SPRN_SPRG_SCRATCH2, r12
 #endif
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_del">-	lis	r10, (itlb_miss_counter - PAGE_OFFSET)@ha</span>
<span class="p_del">-	lwz	r11, (itlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_del">-	addi	r11, r11, 1</span>
<span class="p_del">-	stw	r11, (itlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_del">-#endif</span>
 
 	/* If we are faulting a kernel address, we have to use the
 	 * kernel page tables.
<span class="p_chunk">@@ -392,6 +386,20 @@</span> <span class="p_context"> _ENTRY(ITLBMiss_cmp)</span>
 	mtspr	SPRN_MI_RPN, r10	/* Update TLB entry */
 
 	/* Restore registers */
<span class="p_add">+_ENTRY(itlb_miss_exit_1)</span>
<span class="p_add">+	mfspr	r10, SPRN_SPRG_SCRATCH0</span>
<span class="p_add">+	mfspr	r11, SPRN_SPRG_SCRATCH1</span>
<span class="p_add">+#if defined(ITLB_MISS_KERNEL) || defined(CONFIG_HUGETLB_PAGE)</span>
<span class="p_add">+	mfspr	r12, SPRN_SPRG_SCRATCH2</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	rfi</span>
<span class="p_add">+#ifdef CONFIG_PERF_EVENTS</span>
<span class="p_add">+_ENTRY(itlb_miss_perf)</span>
<span class="p_add">+	lis	r10, (itlb_miss_counter - PAGE_OFFSET)@ha</span>
<span class="p_add">+	lwz	r11, (itlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_add">+	addi	r11, r11, 1</span>
<span class="p_add">+	stw	r11, (itlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_add">+#endif</span>
 	mfspr	r10, SPRN_SPRG_SCRATCH0
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 #if defined(ITLB_MISS_KERNEL) || defined(CONFIG_HUGETLB_PAGE)
<span class="p_chunk">@@ -429,12 +437,6 @@</span> <span class="p_context"> DataStoreTLBMiss:</span>
 	mtspr	SPRN_SPRG_SCRATCH0, r10
 	mtspr	SPRN_SPRG_SCRATCH1, r11
 	mtspr	SPRN_SPRG_SCRATCH2, r12
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_del">-	lis	r10, (dtlb_miss_counter - PAGE_OFFSET)@ha</span>
<span class="p_del">-	lwz	r11, (dtlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_del">-	addi	r11, r11, 1</span>
<span class="p_del">-	stw	r11, (dtlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_del">-#endif</span>
 	mfcr	r12
 
 	/* If we are faulting a kernel address, we have to use the
<span class="p_chunk">@@ -526,6 +528,18 @@</span> <span class="p_context"> _ENTRY(DTLBMiss_jmp)</span>
 
 	/* Restore registers */
 	mtspr	SPRN_DAR, r11	/* Tag DAR */
<span class="p_add">+_ENTRY(dtlb_miss_exit_1)</span>
<span class="p_add">+	mfspr	r10, SPRN_SPRG_SCRATCH0</span>
<span class="p_add">+	mfspr	r11, SPRN_SPRG_SCRATCH1</span>
<span class="p_add">+	mfspr	r12, SPRN_SPRG_SCRATCH2</span>
<span class="p_add">+	rfi</span>
<span class="p_add">+#ifdef CONFIG_PERF_EVENTS</span>
<span class="p_add">+_ENTRY(dtlb_miss_perf)</span>
<span class="p_add">+	lis	r10, (dtlb_miss_counter - PAGE_OFFSET)@ha</span>
<span class="p_add">+	lwz	r11, (dtlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_add">+	addi	r11, r11, 1</span>
<span class="p_add">+	stw	r11, (dtlb_miss_counter - PAGE_OFFSET)@l(r10)</span>
<span class="p_add">+#endif</span>
 	mfspr	r10, SPRN_SPRG_SCRATCH0
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 	mfspr	r12, SPRN_SPRG_SCRATCH2
<span class="p_chunk">@@ -635,7 +649,7 @@</span> <span class="p_context"> DataBreakpoint:</span>
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 	rfi
 
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#ifdef CONFIG_PERF_EVENTS</span>
 	. = 0x1d00
 InstructionBreakpoint:
 	mtspr	SPRN_SPRG_SCRATCH0, r10
<span class="p_chunk">@@ -675,6 +689,7 @@</span> <span class="p_context"> DTLBMissIMMR:</span>
 
 	li	r11, RPN_PATTERN
 	mtspr	SPRN_DAR, r11	/* Tag DAR */
<span class="p_add">+_ENTRY(dtlb_miss_exit_2)</span>
 	mfspr	r10, SPRN_SPRG_SCRATCH0
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 	mfspr	r12, SPRN_SPRG_SCRATCH2
<span class="p_chunk">@@ -692,6 +707,7 @@</span> <span class="p_context"> DTLBMissLinear:</span>
 
 	li	r11, RPN_PATTERN
 	mtspr	SPRN_DAR, r11	/* Tag DAR */
<span class="p_add">+_ENTRY(dtlb_miss_exit_3)</span>
 	mfspr	r10, SPRN_SPRG_SCRATCH0
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 	mfspr	r12, SPRN_SPRG_SCRATCH2
<span class="p_chunk">@@ -708,6 +724,7 @@</span> <span class="p_context"> ITLBMissLinear:</span>
 			  _PAGE_PRESENT
 	mtspr	SPRN_MI_RPN, r10	/* Update TLB entry */
 
<span class="p_add">+_ENTRY(itlb_miss_exit_2)</span>
 	mfspr	r10, SPRN_SPRG_SCRATCH0
 	mfspr	r11, SPRN_SPRG_SCRATCH1
 	mfspr	r12, SPRN_SPRG_SCRATCH2
<span class="p_chunk">@@ -1039,7 +1056,7 @@</span> <span class="p_context"> initial_mmu:</span>
 #endif
 	/* Disable debug mode entry on breakpoints */
 	mfspr	r8, SPRN_DER
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#ifdef CONFIG_PERF_EVENTS</span>
 	rlwinm	r8, r8, 0, ~0xc
 #else
 	rlwinm	r8, r8, 0, ~0x8
<span class="p_chunk">@@ -1072,7 +1089,7 @@</span> <span class="p_context"> swapper_pg_dir:</span>
 abatron_pteptrs:
 	.space	8
 
<span class="p_del">-#ifdef CONFIG_PPC_8xx_PERF_EVENT</span>
<span class="p_add">+#ifdef CONFIG_PERF_EVENTS</span>
 	.globl	itlb_miss_counter
 itlb_miss_counter:
 	.space	4
<span class="p_header">diff --git a/arch/powerpc/perf/8xx-pmu.c b/arch/powerpc/perf/8xx-pmu.c</span>
<span class="p_header">index 3c39f05f0af3..6c0020d1c561 100644</span>
<span class="p_header">--- a/arch/powerpc/perf/8xx-pmu.c</span>
<span class="p_header">+++ b/arch/powerpc/perf/8xx-pmu.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/machdep.h&gt;
 #include &lt;asm/firmware.h&gt;
 #include &lt;asm/ptrace.h&gt;
<span class="p_add">+#include &lt;asm/code-patching.h&gt;</span>
 
 #define PERF_8xx_ID_CPU_CYCLES		1
 #define PERF_8xx_ID_HW_INSTRUCTIONS	2
<span class="p_chunk">@@ -30,8 +31,13 @@</span> <span class="p_context"></span>
 
 extern unsigned long itlb_miss_counter, dtlb_miss_counter;
 extern atomic_t instruction_counter;
<span class="p_add">+extern unsigned int itlb_miss_perf, dtlb_miss_perf;</span>
<span class="p_add">+extern unsigned int itlb_miss_exit_1, itlb_miss_exit_2;</span>
<span class="p_add">+extern unsigned int dtlb_miss_exit_1, dtlb_miss_exit_2, dtlb_miss_exit_3;</span>
 
 static atomic_t insn_ctr_ref;
<span class="p_add">+static atomic_t itlb_miss_ref;</span>
<span class="p_add">+static atomic_t dtlb_miss_ref;</span>
 
 static s64 get_insn_ctr(void)
 {
<span class="p_chunk">@@ -96,9 +102,24 @@</span> <span class="p_context"> static int mpc8xx_pmu_add(struct perf_event *event, int flags)</span>
 		val = get_insn_ctr();
 		break;
 	case PERF_8xx_ID_ITLB_LOAD_MISS:
<span class="p_add">+		if (atomic_inc_return(&amp;itlb_miss_ref) == 1) {</span>
<span class="p_add">+			unsigned long target = (unsigned long)&amp;itlb_miss_perf;</span>
<span class="p_add">+</span>
<span class="p_add">+			patch_branch(&amp;itlb_miss_exit_1, target, 0);</span>
<span class="p_add">+#ifndef CONFIG_PIN_TLB_TEXT</span>
<span class="p_add">+			patch_branch(&amp;itlb_miss_exit_2, target, 0);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		}</span>
 		val = itlb_miss_counter;
 		break;
 	case PERF_8xx_ID_DTLB_LOAD_MISS:
<span class="p_add">+		if (atomic_inc_return(&amp;dtlb_miss_ref) == 1) {</span>
<span class="p_add">+			unsigned long target = (unsigned long)&amp;dtlb_miss_perf;</span>
<span class="p_add">+</span>
<span class="p_add">+			patch_branch(&amp;dtlb_miss_exit_1, target, 0);</span>
<span class="p_add">+			patch_branch(&amp;dtlb_miss_exit_2, target, 0);</span>
<span class="p_add">+			patch_branch(&amp;dtlb_miss_exit_3, target, 0);</span>
<span class="p_add">+		}</span>
 		val = dtlb_miss_counter;
 		break;
 	}
<span class="p_chunk">@@ -143,13 +164,36 @@</span> <span class="p_context"> static void mpc8xx_pmu_read(struct perf_event *event)</span>
 
 static void mpc8xx_pmu_del(struct perf_event *event, int flags)
 {
<span class="p_add">+	/* mfspr r10, SPRN_SPRG_SCRATCH0 */</span>
<span class="p_add">+	unsigned int insn = PPC_INST_MFSPR | __PPC_RS(R10) |</span>
<span class="p_add">+			    __PPC_SPR(SPRN_SPRG_SCRATCH0);</span>
<span class="p_add">+</span>
 	mpc8xx_pmu_read(event);
<span class="p_del">-	if (event_type(event) != PERF_8xx_ID_HW_INSTRUCTIONS)</span>
<span class="p_del">-		return;</span>
 
 	/* If it was the last user, stop counting to avoid useles overhead */
<span class="p_del">-	if (atomic_dec_return(&amp;insn_ctr_ref) == 0)</span>
<span class="p_del">-		mtspr(SPRN_ICTRL, 7);</span>
<span class="p_add">+	switch (event_type(event)) {</span>
<span class="p_add">+	case PERF_8xx_ID_CPU_CYCLES:</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PERF_8xx_ID_HW_INSTRUCTIONS:</span>
<span class="p_add">+		if (atomic_dec_return(&amp;insn_ctr_ref) == 0)</span>
<span class="p_add">+			mtspr(SPRN_ICTRL, 7);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PERF_8xx_ID_ITLB_LOAD_MISS:</span>
<span class="p_add">+		if (atomic_dec_return(&amp;itlb_miss_ref) == 0) {</span>
<span class="p_add">+			patch_instruction(&amp;itlb_miss_exit_1, insn);</span>
<span class="p_add">+#ifndef CONFIG_PIN_TLB_TEXT</span>
<span class="p_add">+			patch_instruction(&amp;itlb_miss_exit_2, insn);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		}</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PERF_8xx_ID_DTLB_LOAD_MISS:</span>
<span class="p_add">+		if (atomic_dec_return(&amp;dtlb_miss_ref) == 0) {</span>
<span class="p_add">+			patch_instruction(&amp;dtlb_miss_exit_1, insn);</span>
<span class="p_add">+			patch_instruction(&amp;dtlb_miss_exit_2, insn);</span>
<span class="p_add">+			patch_instruction(&amp;dtlb_miss_exit_3, insn);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
 }
 
 static struct pmu mpc8xx_pmu = {
<span class="p_header">diff --git a/arch/powerpc/perf/Makefile b/arch/powerpc/perf/Makefile</span>
<span class="p_header">index 225c9c86d7c0..57ebc655d2ac 100644</span>
<span class="p_header">--- a/arch/powerpc/perf/Makefile</span>
<span class="p_header">+++ b/arch/powerpc/perf/Makefile</span>
<span class="p_chunk">@@ -15,7 +15,7 @@</span> <span class="p_context"> obj-$(CONFIG_FSL_EMB_PERF_EVENT_E500) += e500-pmu.o e6500-pmu.o</span>
 
 obj-$(CONFIG_HV_PERF_CTRS) += hv-24x7.o hv-gpci.o hv-common.o
 
<span class="p_del">-obj-$(CONFIG_PPC_8xx_PERF_EVENT) += 8xx-pmu.o</span>
<span class="p_add">+obj-$(CONFIG_PPC_8xx) += 8xx-pmu.o</span>
 
 obj-$(CONFIG_PPC64)		+= $(obj64-y)
 obj-$(CONFIG_PPC32)		+= $(obj32-y)
<span class="p_header">diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_header">index 73a7ea333e9e..8944b24d2218 100644</span>
<span class="p_header">--- a/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_header">+++ b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_chunk">@@ -168,13 +168,6 @@</span> <span class="p_context"> config PPC_FPU</span>
 	bool
 	default y if PPC64
 
<span class="p_del">-config PPC_8xx_PERF_EVENT</span>
<span class="p_del">-	bool &quot;PPC 8xx perf events&quot;</span>
<span class="p_del">-	depends on PPC_8xx &amp;&amp; PERF_EVENTS</span>
<span class="p_del">-	help</span>
<span class="p_del">-	  This is Performance Events support for PPC 8xx. The 8xx doesn&#39;t</span>
<span class="p_del">-	  have a PMU but some events are emulated using 8xx features.</span>
<span class="p_del">-</span>
 config FSL_EMB_PERFMON
 	bool &quot;Freescale Embedded Perfmon&quot;
 	depends on E500 || PPC_83xx

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



