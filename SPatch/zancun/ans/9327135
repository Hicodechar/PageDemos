
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,098/192,102/135] proc: revert /proc/&lt;pid&gt;/maps [stack:TID] annotation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,098/192,102/135] proc: revert /proc/&lt;pid&gt;/maps [stack:TID] annotation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 12, 2016, 5 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160912152203.052491949@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9327135/mbox/"
   >mbox</a>
|
   <a href="/patch/9327135/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9327135/">/patch/9327135/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DB03360231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 17:10:43 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C596F28E39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 17:10:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BA78B28E40; Mon, 12 Sep 2016 17:10:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E799D28E39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 17:10:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933347AbcILRKW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 12 Sep 2016 13:10:22 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:45415 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932502AbcILRKN (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 12 Sep 2016 13:10:13 -0400
Received: from localhost (pes75-3-78-192-101-3.fbxo.proxad.net
	[78.192.101.3])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id C544189E;
	Mon, 12 Sep 2016 17:10:12 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Siddhesh Poyarekar &lt;siddhesh.poyarekar@gmail.com&gt;,
	Shaohua Li &lt;shli@fb.com&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Sasha Levin &lt;alexander.levin@verizon.com&gt;
Subject: [PATCH 4.4 098/192] [PATCH 102/135] proc: revert /proc/&lt;pid&gt;/maps
	[stack:TID] annotation
Date: Mon, 12 Sep 2016 19:00:07 +0200
Message-Id: &lt;20160912152203.052491949@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20160912152158.855601725@linuxfoundation.org&gt;
References: &lt;20160912152158.855601725@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Sept. 12, 2016, 5 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------

[ Upstream commit 65376df582174ffcec9e6471bf5b0dd79ba05e4a ]

Commit b76437579d13 (&quot;procfs: mark thread stack correctly in
proc/&lt;pid&gt;/maps&quot;) added [stack:TID] annotation to /proc/&lt;pid&gt;/maps.

Finding the task of a stack VMA requires walking the entire thread list,
turning this into quadratic behavior: a thousand threads means a
thousand stacks, so the rendering of /proc/&lt;pid&gt;/maps needs to look at a
million combinations.

The cost is not in proportion to the usefulness as described in the
patch.

Drop the [stack:TID] annotation to make /proc/&lt;pid&gt;/maps (and
/proc/&lt;pid&gt;/numa_maps) usable again for higher thread counts.

The [stack] annotation inside /proc/&lt;pid&gt;/task/&lt;tid&gt;/maps is retained, as
identifying the stack VMA there is an O(1) operation.

Siddesh said:
 &quot;The end users needed a way to identify thread stacks programmatically and
  there wasn&#39;t a way to do that.  I&#39;m afraid I no longer remember (or have
  access to the resources that would aid my memory since I changed
  employers) the details of their requirement.  However, I did do this on my
  own time because I thought it was an interesting project for me and nobody
  really gave any feedback then as to its utility, so as far as I am
  concerned you could roll back the main thread maps information since the
  information is available in the thread-specific files&quot;
<span class="signed-off-by">
Signed-off-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
Cc: Siddhesh Poyarekar &lt;siddhesh.poyarekar@gmail.com&gt;
Cc: Shaohua Li &lt;shli@fb.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Sasha Levin &lt;alexander.levin@verizon.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 Documentation/filesystems/proc.txt |    9 +----
 fs/proc/task_mmu.c                 |   66 ++++++++++++-------------------------
 fs/proc/task_nommu.c               |   49 +++++++++++----------------
 include/linux/mm.h                 |    3 -
 mm/util.c                          |   27 ---------------
 5 files changed, 48 insertions(+), 106 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/Documentation/filesystems/proc.txt</span>
<span class="p_header">+++ b/Documentation/filesystems/proc.txt</span>
<span class="p_chunk">@@ -346,7 +346,7 @@</span> <span class="p_context"> address           perms offset  dev   in</span>
 a7cb1000-a7cb2000 ---p 00000000 00:00 0
 a7cb2000-a7eb2000 rw-p 00000000 00:00 0
 a7eb2000-a7eb3000 ---p 00000000 00:00 0
<span class="p_del">-a7eb3000-a7ed5000 rw-p 00000000 00:00 0          [stack:1001]</span>
<span class="p_add">+a7eb3000-a7ed5000 rw-p 00000000 00:00 0</span>
 a7ed5000-a8008000 r-xp 00000000 03:00 4222       /lib/libc.so.6
 a8008000-a800a000 r--p 00133000 03:00 4222       /lib/libc.so.6
 a800a000-a800b000 rw-p 00135000 03:00 4222       /lib/libc.so.6
<span class="p_chunk">@@ -378,7 +378,6 @@</span> <span class="p_context"> is not associated with a file:</span>
 
  [heap]                   = the heap of the program
  [stack]                  = the stack of the main process
<span class="p_del">- [stack:1001]             = the stack of the thread with tid 1001</span>
  [vdso]                   = the &quot;virtual dynamic shared object&quot;,
                             the kernel system call handler
 
<span class="p_chunk">@@ -386,10 +385,8 @@</span> <span class="p_context"> is not associated with a file:</span>
 
 The /proc/PID/task/TID/maps is a view of the virtual memory from the viewpoint
 of the individual tasks of a process. In this file you will see a mapping marked
<span class="p_del">-as [stack] if that task sees it as a stack. This is a key difference from the</span>
<span class="p_del">-content of /proc/PID/maps, where you will see all mappings that are being used</span>
<span class="p_del">-as stack by all of those tasks. Hence, for the example above, the task-level</span>
<span class="p_del">-map, i.e. /proc/PID/task/TID/maps for thread 1001 will look like this:</span>
<span class="p_add">+as [stack] if that task sees it as a stack. Hence, for the example above, the</span>
<span class="p_add">+task-level map, i.e. /proc/PID/task/TID/maps for thread 1001 will look like this:</span>
 
 08048000-08049000 r-xp 00000000 03:00 8312       /opt/test
 08049000-0804a000 rw-p 00001000 03:00 8312       /opt/test
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -248,23 +248,29 @@</span> <span class="p_context"> static int do_maps_open(struct inode *in</span>
 				sizeof(struct proc_maps_private));
 }
 
<span class="p_del">-static pid_t pid_of_stack(struct proc_maps_private *priv,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool is_pid)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Indicate if the VMA is a stack for the given task; for</span>
<span class="p_add">+ * /proc/PID/maps that is the stack of the main task.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int is_stack(struct proc_maps_private *priv,</span>
<span class="p_add">+		    struct vm_area_struct *vma, int is_pid)</span>
 {
<span class="p_del">-	struct inode *inode = priv-&gt;inode;</span>
<span class="p_del">-	struct task_struct *task;</span>
<span class="p_del">-	pid_t ret = 0;</span>
<span class="p_add">+	int stack = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_pid) {</span>
<span class="p_add">+		stack = vma-&gt;vm_start &lt;= vma-&gt;vm_mm-&gt;start_stack &amp;&amp;</span>
<span class="p_add">+			vma-&gt;vm_end &gt;= vma-&gt;vm_mm-&gt;start_stack;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct inode *inode = priv-&gt;inode;</span>
<span class="p_add">+		struct task_struct *task;</span>
 
<span class="p_del">-	rcu_read_lock();</span>
<span class="p_del">-	task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
<span class="p_del">-	if (task) {</span>
<span class="p_del">-		task = task_of_stack(task, vma, is_pid);</span>
<span class="p_add">+		rcu_read_lock();</span>
<span class="p_add">+		task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
 		if (task)
<span class="p_del">-			ret = task_pid_nr_ns(task, inode-&gt;i_sb-&gt;s_fs_info);</span>
<span class="p_add">+			stack = vma_is_stack_for_task(vma, task);</span>
<span class="p_add">+		rcu_read_unlock();</span>
 	}
<span class="p_del">-	rcu_read_unlock();</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return stack;</span>
 }
 
 static void
<span class="p_chunk">@@ -324,8 +330,6 @@</span> <span class="p_context"> show_map_vma(struct seq_file *m, struct</span>
 
 	name = arch_vma_name(vma);
 	if (!name) {
<span class="p_del">-		pid_t tid;</span>
<span class="p_del">-</span>
 		if (!mm) {
 			name = &quot;[vdso]&quot;;
 			goto done;
<span class="p_chunk">@@ -337,21 +341,8 @@</span> <span class="p_context"> show_map_vma(struct seq_file *m, struct</span>
 			goto done;
 		}
 
<span class="p_del">-		tid = pid_of_stack(priv, vma, is_pid);</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack)) {</span>
<span class="p_del">-				name = &quot;[stack]&quot;;</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				/* Thread stack in /proc/PID/maps */</span>
<span class="p_del">-				seq_pad(m, &#39; &#39;);</span>
<span class="p_del">-				seq_printf(m, &quot;[stack:%d]&quot;, tid);</span>
<span class="p_del">-			}</span>
<span class="p_del">-		}</span>
<span class="p_add">+		if (is_stack(priv, vma, is_pid))</span>
<span class="p_add">+			name = &quot;[stack]&quot;;</span>
 	}
 
 done:
<span class="p_chunk">@@ -1566,19 +1557,8 @@</span> <span class="p_context"> static int show_numa_map(struct seq_file</span>
 		seq_file_path(m, file, &quot;\n\t= &quot;);
 	} else if (vma-&gt;vm_start &lt;= mm-&gt;brk &amp;&amp; vma-&gt;vm_end &gt;= mm-&gt;start_brk) {
 		seq_puts(m, &quot; heap&quot;);
<span class="p_del">-	} else {</span>
<span class="p_del">-		pid_t tid = pid_of_stack(proc_priv, vma, is_pid);</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack))</span>
<span class="p_del">-				seq_puts(m, &quot; stack&quot;);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				seq_printf(m, &quot; stack:%d&quot;, tid);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	} else if (is_stack(proc_priv, vma, is_pid)) {</span>
<span class="p_add">+		seq_puts(m, &quot; stack&quot;);</span>
 	}
 
 	if (is_vm_hugetlb_page(vma))
<span class="p_header">--- a/fs/proc/task_nommu.c</span>
<span class="p_header">+++ b/fs/proc/task_nommu.c</span>
<span class="p_chunk">@@ -123,23 +123,26 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struc</span>
 	return size;
 }
 
<span class="p_del">-static pid_t pid_of_stack(struct proc_maps_private *priv,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool is_pid)</span>
<span class="p_add">+static int is_stack(struct proc_maps_private *priv,</span>
<span class="p_add">+		    struct vm_area_struct *vma, int is_pid)</span>
 {
<span class="p_del">-	struct inode *inode = priv-&gt;inode;</span>
<span class="p_del">-	struct task_struct *task;</span>
<span class="p_del">-	pid_t ret = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	rcu_read_lock();</span>
<span class="p_del">-	task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
<span class="p_del">-	if (task) {</span>
<span class="p_del">-		task = task_of_stack(task, vma, is_pid);</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	int stack = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_pid) {</span>
<span class="p_add">+		stack = vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_add">+			vma-&gt;vm_end &gt;= mm-&gt;start_stack;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct inode *inode = priv-&gt;inode;</span>
<span class="p_add">+		struct task_struct *task;</span>
<span class="p_add">+</span>
<span class="p_add">+		rcu_read_lock();</span>
<span class="p_add">+		task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
 		if (task)
<span class="p_del">-			ret = task_pid_nr_ns(task, inode-&gt;i_sb-&gt;s_fs_info);</span>
<span class="p_add">+			stack = vma_is_stack_for_task(vma, task);</span>
<span class="p_add">+		rcu_read_unlock();</span>
 	}
<span class="p_del">-	rcu_read_unlock();</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return stack;</span>
 }
 
 /*
<span class="p_chunk">@@ -181,21 +184,9 @@</span> <span class="p_context"> static int nommu_vma_show(struct seq_fil</span>
 	if (file) {
 		seq_pad(m, &#39; &#39;);
 		seq_file_path(m, file, &quot;&quot;);
<span class="p_del">-	} else if (mm) {</span>
<span class="p_del">-		pid_t tid = pid_of_stack(priv, vma, is_pid);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			seq_pad(m, &#39; &#39;);</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack))</span>
<span class="p_del">-				seq_printf(m, &quot;[stack]&quot;);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				seq_printf(m, &quot;[stack:%d]&quot;, tid);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	} else if (mm &amp;&amp; is_stack(priv, vma, is_pid)) {</span>
<span class="p_add">+		seq_pad(m, &#39; &#39;);</span>
<span class="p_add">+		seq_printf(m, &quot;[stack]&quot;);</span>
 	}
 
 	seq_putc(m, &#39;\n&#39;);
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1311,8 +1311,7 @@</span> <span class="p_context"> static inline int stack_guard_page_end(s</span>
 		!vma_growsup(vma-&gt;vm_next, addr);
 }
 
<span class="p_del">-extern struct task_struct *task_of_stack(struct task_struct *task,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool in_group);</span>
<span class="p_add">+int vma_is_stack_for_task(struct vm_area_struct *vma, struct task_struct *t);</span>
 
 extern unsigned long move_page_tables(struct vm_area_struct *vma,
 		unsigned long old_addr, struct vm_area_struct *new_vma,
<span class="p_header">--- a/mm/util.c</span>
<span class="p_header">+++ b/mm/util.c</span>
<span class="p_chunk">@@ -199,36 +199,11 @@</span> <span class="p_context"> void __vma_link_list(struct mm_struct *m</span>
 }
 
 /* Check if the vma is being used as a stack by this task */
<span class="p_del">-static int vm_is_stack_for_task(struct task_struct *t,</span>
<span class="p_del">-				struct vm_area_struct *vma)</span>
<span class="p_add">+int vma_is_stack_for_task(struct vm_area_struct *vma, struct task_struct *t)</span>
 {
 	return (vma-&gt;vm_start &lt;= KSTK_ESP(t) &amp;&amp; vma-&gt;vm_end &gt;= KSTK_ESP(t));
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Check if the vma is being used as a stack.</span>
<span class="p_del">- * If is_group is non-zero, check in the entire thread group or else</span>
<span class="p_del">- * just check in the current task. Returns the task_struct of the task</span>
<span class="p_del">- * that the vma is stack for. Must be called under rcu_read_lock().</span>
<span class="p_del">- */</span>
<span class="p_del">-struct task_struct *task_of_stack(struct task_struct *task,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool in_group)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (vm_is_stack_for_task(task, vma))</span>
<span class="p_del">-		return task;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (in_group) {</span>
<span class="p_del">-		struct task_struct *t;</span>
<span class="p_del">-</span>
<span class="p_del">-		for_each_thread(task, t) {</span>
<span class="p_del">-			if (vm_is_stack_for_task(t, vma))</span>
<span class="p_del">-				return t;</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return NULL;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #if defined(CONFIG_MMU) &amp;&amp; !defined(HAVE_ARCH_PICK_MMAP_LAYOUT)
 void arch_pick_mmap_layout(struct mm_struct *mm)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



