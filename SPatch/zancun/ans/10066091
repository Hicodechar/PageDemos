
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1,5/9] perf util: Remove a set of shadow stats static variables - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1,5/9] perf util: Remove a set of shadow stats static variables</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=94151">Jin, Yao</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 20, 2017, 2:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1511189024-19908-6-git-send-email-yao.jin@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10066091/mbox/"
   >mbox</a>
|
   <a href="/patch/10066091/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10066091/">/patch/10066091/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	54776602B7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 06:49:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4716329095
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 06:49:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3B81B290A5; Mon, 20 Nov 2017 06:49:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.0 required=2.0 tests=BAYES_00,
	DATE_IN_FUTURE_06_12, 
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 900D629095
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 06:49:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751281AbdKTGth (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Nov 2017 01:49:37 -0500
Received: from mga03.intel.com ([134.134.136.65]:7318 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751388AbdKTGsj (ORCPT &lt;rfc822;Linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Nov 2017 01:48:39 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	19 Nov 2017 22:48:39 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,425,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;3784712&quot;
Received: from skl.sh.intel.com ([10.239.161.21])
	by FMSMGA003.fm.intel.com with ESMTP; 19 Nov 2017 22:48:36 -0800
From: Jin Yao &lt;yao.jin@linux.intel.com&gt;
To: acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
	mingo@redhat.com, alexander.shishkin@linux.intel.com
Cc: Linux-kernel@vger.kernel.org, ak@linux.intel.com,
	kan.liang@intel.com, yao.jin@intel.com, Jin Yao &lt;yao.jin@linux.intel.com&gt;
Subject: [PATCH v1 5/9] perf util: Remove a set of shadow stats static
	variables
Date: Mon, 20 Nov 2017 22:43:40 +0800
Message-Id: &lt;1511189024-19908-6-git-send-email-yao.jin@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1511189024-19908-1-git-send-email-yao.jin@linux.intel.com&gt;
References: &lt;1511189024-19908-1-git-send-email-yao.jin@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=94151">Jin, Yao</a> - Nov. 20, 2017, 2:43 p.m.</div>
<pre class="content">
In previous patches, we have reconstructed the code and let
it not access the static variables directly.

This patch removes these static variables.
<span class="signed-off-by">
Signed-off-by: Jin Yao &lt;yao.jin@linux.intel.com&gt;</span>
---
 tools/perf/util/stat-shadow.c | 64 ++++++++++---------------------------------
 tools/perf/util/stat.h        |  1 +
 2 files changed, 16 insertions(+), 49 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Nov. 21, 2017, 3:17 p.m.</div>
<pre class="content">
On Mon, Nov 20, 2017 at 10:43:40PM +0800, Jin Yao wrote:
<span class="quote">&gt; In previous patches, we have reconstructed the code and let</span>
<span class="quote">&gt; it not access the static variables directly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch removes these static variables.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Jin Yao &lt;yao.jin@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  tools/perf/util/stat-shadow.c | 64 ++++++++++---------------------------------</span>
<span class="quote">&gt;  tools/perf/util/stat.h        |  1 +</span>
<span class="quote">&gt;  2 files changed, 16 insertions(+), 49 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; index 6f28782..74bcc4d 100644</span>
<span class="quote">&gt; --- a/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; +++ b/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; @@ -16,28 +16,6 @@</span>
<span class="quote">&gt;   * AGGR_NONE: Use matching CPU</span>
<span class="quote">&gt;   * AGGR_THREAD: Not supported?</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -static struct stats runtime_nsecs_stats[MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_cycles_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_stalled_cycles_front_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_stalled_cycles_back_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_branches_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_cacherefs_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_l1_dcache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_l1_icache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_ll_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_itlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_topdown_total_slots[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_smi_num_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct stats runtime_aperf_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="quote">&gt; -static struct rblist runtime_saved_values;</span>
<span class="quote">&gt;  static bool have_frontend_stalled;</span>

all this is about switching from array to rb_list for the --per-thread case,
which can be considered as a special use case.. how much do we suffer in
performance with new code? how about the &quot;perf stat -I 100&quot;, would it scale
ok for extreme cases (many events in -e or -dddd..)

jirka
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123">Andi Kleen</a> - Nov. 21, 2017, 6:03 p.m.</div>
<pre class="content">
<span class="quote">&gt; all this is about switching from array to rb_list for the --per-thread case,</span>
<span class="quote">&gt; which can be considered as a special use case.. how much do we suffer in</span>
<span class="quote">&gt; performance with new code? how about the &quot;perf stat -I 100&quot;, would it scale</span>
<span class="quote">&gt; ok for extreme cases (many events in -e or -dddd..)</span>

rbtrees scale by log N, with N being the entries in the tree.

Even in extreme cases, let&#39;s say 10000 events and 1000 cpus it would
need only 8 memory accesses and comparisons for each look up.
Even if we assume cache misses for all of the memory lookups,
at ~200ns per cache miss it&#39;s still only 1us per event, which 
is negligible.

In practice not all memory accesses will be misses because
the upper levels of the tree are almost certainly cached
from earlier accesses.


-Andi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Nov. 21, 2017, 9:19 p.m.</div>
<pre class="content">
On Tue, Nov 21, 2017 at 10:03:50AM -0800, Andi Kleen wrote:
<span class="quote">&gt; &gt; all this is about switching from array to rb_list for the --per-thread case,</span>
<span class="quote">&gt; &gt; which can be considered as a special use case.. how much do we suffer in</span>
<span class="quote">&gt; &gt; performance with new code? how about the &quot;perf stat -I 100&quot;, would it scale</span>
<span class="quote">&gt; &gt; ok for extreme cases (many events in -e or -dddd..)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; rbtrees scale by log N, with N being the entries in the tree.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Even in extreme cases, let&#39;s say 10000 events and 1000 cpus it would</span>
<span class="quote">&gt; need only 8 memory accesses and comparisons for each look up.</span>
<span class="quote">&gt; Even if we assume cache misses for all of the memory lookups,</span>
<span class="quote">&gt; at ~200ns per cache miss it&#39;s still only 1us per event, which </span>
<span class="quote">&gt; is negligible.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In practice not all memory accesses will be misses because</span>
<span class="quote">&gt; the upper levels of the tree are almost certainly cached</span>
<span class="quote">&gt; from earlier accesses.</span>

sounds good, thanks

jirka
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 6f28782..74bcc4d 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -16,28 +16,6 @@</span> <span class="p_context"></span>
  * AGGR_NONE: Use matching CPU
  * AGGR_THREAD: Not supported?
  */
<span class="p_del">-static struct stats runtime_nsecs_stats[MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cycles_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_stalled_cycles_front_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_stalled_cycles_back_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_branches_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cacherefs_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_l1_dcache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_l1_icache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_ll_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_itlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_topdown_total_slots[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_smi_num_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_aperf_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct rblist runtime_saved_values;</span>
 static bool have_frontend_stalled;
 
 static struct runtime_stat rt_stat;
<span class="p_chunk">@@ -191,36 +169,13 @@</span> <span class="p_context"> static int evsel_context(struct perf_evsel *evsel)</span>
 	return ctx;
 }
 
<span class="p_del">-void perf_stat__reset_shadow_stats(void)</span>
<span class="p_add">+static void reset_stat(struct runtime_stat *stat)</span>
 {
<span class="p_add">+	struct rblist *rblist;</span>
 	struct rb_node *pos, *next;
 
<span class="p_del">-	memset(runtime_nsecs_stats, 0, sizeof(runtime_nsecs_stats));</span>
<span class="p_del">-	memset(runtime_cycles_stats, 0, sizeof(runtime_cycles_stats));</span>
<span class="p_del">-	memset(runtime_stalled_cycles_front_stats, 0, sizeof(runtime_stalled_cycles_front_stats));</span>
<span class="p_del">-	memset(runtime_stalled_cycles_back_stats, 0, sizeof(runtime_stalled_cycles_back_stats));</span>
<span class="p_del">-	memset(runtime_branches_stats, 0, sizeof(runtime_branches_stats));</span>
<span class="p_del">-	memset(runtime_cacherefs_stats, 0, sizeof(runtime_cacherefs_stats));</span>
<span class="p_del">-	memset(runtime_l1_dcache_stats, 0, sizeof(runtime_l1_dcache_stats));</span>
<span class="p_del">-	memset(runtime_l1_icache_stats, 0, sizeof(runtime_l1_icache_stats));</span>
<span class="p_del">-	memset(runtime_ll_cache_stats, 0, sizeof(runtime_ll_cache_stats));</span>
<span class="p_del">-	memset(runtime_itlb_cache_stats, 0, sizeof(runtime_itlb_cache_stats));</span>
<span class="p_del">-	memset(runtime_dtlb_cache_stats, 0, sizeof(runtime_dtlb_cache_stats));</span>
<span class="p_del">-	memset(runtime_cycles_in_tx_stats, 0,</span>
<span class="p_del">-			sizeof(runtime_cycles_in_tx_stats));</span>
<span class="p_del">-	memset(runtime_transaction_stats, 0,</span>
<span class="p_del">-		sizeof(runtime_transaction_stats));</span>
<span class="p_del">-	memset(runtime_elision_stats, 0, sizeof(runtime_elision_stats));</span>
<span class="p_del">-	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));</span>
<span class="p_del">-	memset(runtime_topdown_total_slots, 0, sizeof(runtime_topdown_total_slots));</span>
<span class="p_del">-	memset(runtime_topdown_slots_retired, 0, sizeof(runtime_topdown_slots_retired));</span>
<span class="p_del">-	memset(runtime_topdown_slots_issued, 0, sizeof(runtime_topdown_slots_issued));</span>
<span class="p_del">-	memset(runtime_topdown_fetch_bubbles, 0, sizeof(runtime_topdown_fetch_bubbles));</span>
<span class="p_del">-	memset(runtime_topdown_recovery_bubbles, 0, sizeof(runtime_topdown_recovery_bubbles));</span>
<span class="p_del">-	memset(runtime_smi_num_stats, 0, sizeof(runtime_smi_num_stats));</span>
<span class="p_del">-	memset(runtime_aperf_stats, 0, sizeof(runtime_aperf_stats));</span>
<span class="p_del">-</span>
<span class="p_del">-	next = rb_first(&amp;runtime_saved_values.entries);</span>
<span class="p_add">+	rblist = &amp;stat-&gt;value_list;</span>
<span class="p_add">+	next = rb_first(&amp;rblist-&gt;entries);</span>
 	while (next) {
 		pos = next;
 		next = rb_next(pos);
<span class="p_chunk">@@ -230,6 +185,17 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 	}
 }
 
<span class="p_add">+void perf_stat__reset_shadow_stats(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	reset_stat(&amp;rt_stat);</span>
<span class="p_add">+	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__reset_shadow_per_stat(struct runtime_stat *stat)</span>
<span class="p_add">+{</span>
<span class="p_add">+	reset_stat(stat);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void update_runtime_stat(struct runtime_stat *stat,
 				enum stat_type type,
 				int ctx, int cpu, u64 count)
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 92671ed..7ed77b8 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -130,6 +130,7 @@</span> <span class="p_context"> void perf_stat__init_runtime_stat(struct runtime_stat *stat);</span>
 void perf_stat__free_runtime_stat(struct runtime_stat *stat);
 void perf_stat__init_shadow_stats(void);
 void perf_stat__reset_shadow_stats(void);
<span class="p_add">+void perf_stat__reset_shadow_per_stat(struct runtime_stat *stat);</span>
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,
 				    int cpu, struct runtime_stat *stat);
 struct perf_stat_output_ctx {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



