
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/2] sparc64: Fix pagetable freeing for hugepage regions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/2] sparc64: Fix pagetable freeing for hugepage regions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 23, 2016, 10:05 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1466719639-143815-2-git-send-email-nitin.m.gupta@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9196139/mbox/"
   >mbox</a>
|
   <a href="/patch/9196139/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9196139/">/patch/9196139/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5AAA36077D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 22:08:49 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4873628468
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 22:08:49 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3C0A628477; Thu, 23 Jun 2016 22:08:49 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BA98228468
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 22:08:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752245AbcFWWIa (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Jun 2016 18:08:30 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:30115 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751474AbcFWWI2 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Jun 2016 18:08:28 -0400
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id u5NM8Msq018624
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Thu, 23 Jun 2016 22:08:23 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0022.oracle.com (8.14.4/8.13.8) with ESMTP id
	u5NM8MYC000943
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 23 Jun 2016 22:08:22 GMT
Received: from abhmp0009.oracle.com (abhmp0009.oracle.com [141.146.116.15])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	u5NM8L4E009458; Thu, 23 Jun 2016 22:08:21 GMT
Received: from ca-qasparc20.us.oracle.com (/10.147.24.73)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 23 Jun 2016 15:08:20 -0700
From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;
To: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Cc: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Dominik Dingel &lt;dingel@linux.vnet.ibm.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	sparclinux@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH v2 2/2] sparc64: Fix pagetable freeing for hugepage regions
Date: Thu, 23 Jun 2016 15:05:36 -0700
Message-Id: &lt;1466719639-143815-2-git-send-email-nitin.m.gupta@oracle.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1466719639-143815-1-git-send-email-nitin.m.gupta@oracle.com&gt;
References: &lt;1466719639-143815-1-git-send-email-nitin.m.gupta@oracle.com&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a> - June 23, 2016, 10:05 p.m.</div>
<pre class="content">
8M pages now allocate page tables till PMD level only.
So, when freeing page table for 8M hugepage backed region,
make sure we don&#39;t try to access non-existent PTE level.
<span class="signed-off-by">
Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
---
 arch/sparc/include/asm/hugetlb.h |   12 ++---
 arch/sparc/mm/hugetlbpage.c      |   98 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 102 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - July 29, 2016, 4 a.m.</div>
<pre class="content">
<span class="from">From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
Date: Thu, 23 Jun 2016 15:05:36 -0700
<span class="quote">
&gt; 8M pages now allocate page tables till PMD level only.</span>
<span class="quote">&gt; So, when freeing page table for 8M hugepage backed region,</span>
<span class="quote">&gt; make sure we don&#39;t try to access non-existent PTE level.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>

The manner in which you have submitted this change breaks
bisectability.

The &quot;problem&quot; you are fixing here is introduced by you in patch #1.

You need to combine these two changes together, otherwise there is
an intermediate state where the kernel is broken by your changes.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/hugetlb.h b/arch/sparc/include/asm/hugetlb.h</span>
<span class="p_header">index 139e711..dcbf985 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/hugetlb.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/hugetlb.h</span>
<span class="p_chunk">@@ -31,14 +31,6 @@</span> <span class="p_context"> static inline int prepare_hugepage_range(struct file *file,</span>
 	return 0;
 }
 
<span class="p_del">-static inline void hugetlb_free_pgd_range(struct mmu_gather *tlb,</span>
<span class="p_del">-					  unsigned long addr, unsigned long end,</span>
<span class="p_del">-					  unsigned long floor,</span>
<span class="p_del">-					  unsigned long ceiling)</span>
<span class="p_del">-{</span>
<span class="p_del">-	free_pgd_range(tlb, addr, end, floor, ceiling);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void huge_ptep_clear_flush(struct vm_area_struct *vma,
 					 unsigned long addr, pte_t *ptep)
 {
<span class="p_chunk">@@ -82,4 +74,8 @@</span> <span class="p_context"> static inline void arch_clear_hugepage_flags(struct page *page)</span>
 {
 }
 
<span class="p_add">+void hugetlb_free_pgd_range(struct mmu_gather *tlb, unsigned long addr,</span>
<span class="p_add">+			    unsigned long end, unsigned long floor,</span>
<span class="p_add">+			    unsigned long ceiling);</span>
<span class="p_add">+</span>
 #endif /* _ASM_SPARC64_HUGETLB_H */
<span class="p_header">diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">index cafb5ca..494c390 100644</span>
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/mman.h&gt;
 #include &lt;asm/pgalloc.h&gt;
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
 #include &lt;asm/tlb.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/cacheflush.h&gt;
<span class="p_chunk">@@ -202,3 +203,100 @@</span> <span class="p_context"> int pud_huge(pud_t pud)</span>
 {
 	return 0;
 }
<span class="p_add">+</span>
<span class="p_add">+static void hugetlb_free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,</span>
<span class="p_add">+			   unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgtable_t token = pmd_pgtable(*pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd_clear(pmd);</span>
<span class="p_add">+	pte_free_tlb(tlb, token, addr);</span>
<span class="p_add">+	atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,</span>
<span class="p_add">+				   unsigned long addr, unsigned long end,</span>
<span class="p_add">+				   unsigned long floor, unsigned long ceiling)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+	unsigned long start;</span>
<span class="p_add">+</span>
<span class="p_add">+	start = addr;</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pmd_addr_end(addr, end);</span>
<span class="p_add">+		if (pmd_none(*pmd))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (is_hugetlb_pmd(*pmd))</span>
<span class="p_add">+			pmd_clear(pmd);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			hugetlb_free_pte_range(tlb, pmd, addr);</span>
<span class="p_add">+	} while (pmd++, addr = next, addr != end);</span>
<span class="p_add">+</span>
<span class="p_add">+	start &amp;= PUD_MASK;</span>
<span class="p_add">+	if (start &lt; floor)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	if (ceiling) {</span>
<span class="p_add">+		ceiling &amp;= PUD_MASK;</span>
<span class="p_add">+		if (!ceiling)</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (end - 1 &gt; ceiling - 1)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, start);</span>
<span class="p_add">+	pud_clear(pud);</span>
<span class="p_add">+	pmd_free_tlb(tlb, pmd, start);</span>
<span class="p_add">+	mm_dec_nr_pmds(tlb-&gt;mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void hugetlb_free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,</span>
<span class="p_add">+				   unsigned long addr, unsigned long end,</span>
<span class="p_add">+				   unsigned long floor, unsigned long ceiling)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+	unsigned long start;</span>
<span class="p_add">+</span>
<span class="p_add">+	start = addr;</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pud_addr_end(addr, end);</span>
<span class="p_add">+		if (pud_none_or_clear_bad(pud))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		hugetlb_free_pmd_range(tlb, pud, addr, next, floor,</span>
<span class="p_add">+				       ceiling);</span>
<span class="p_add">+	} while (pud++, addr = next, addr != end);</span>
<span class="p_add">+</span>
<span class="p_add">+	start &amp;= PGDIR_MASK;</span>
<span class="p_add">+	if (start &lt; floor)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	if (ceiling) {</span>
<span class="p_add">+		ceiling &amp;= PGDIR_MASK;</span>
<span class="p_add">+		if (!ceiling)</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (end - 1 &gt; ceiling - 1)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(pgd, start);</span>
<span class="p_add">+	pgd_clear(pgd);</span>
<span class="p_add">+	pud_free_tlb(tlb, pud, start);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void hugetlb_free_pgd_range(struct mmu_gather *tlb,</span>
<span class="p_add">+			    unsigned long addr, unsigned long end,</span>
<span class="p_add">+			    unsigned long floor, unsigned long ceiling)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(tlb-&gt;mm, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		if (pgd_none_or_clear_bad(pgd))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		hugetlb_free_pud_range(tlb, pgd, addr, next, floor, ceiling);</span>
<span class="p_add">+	} while (pgd++, addr = next, addr != end);</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



