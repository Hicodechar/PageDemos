
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,4/4] mm/hugetlb: Unmap pages to remove if page fault raced with hole punch - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,4/4] mm/hugetlb: Unmap pages to remove if page fault raced with hole punch</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 20, 2015, 11:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1445385142-29936-5-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7453861/mbox/"
   >mbox</a>
|
   <a href="/patch/7453861/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7453861/">/patch/7453861/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 5A8099F37F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 5D4B02089C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:49 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 35B03208A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753043AbbJTXxp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:45 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:46725 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752831AbbJTXx0 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:26 -0400
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id t9KNr3of028167
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 20 Oct 2015 23:53:03 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0021.oracle.com (8.13.8/8.13.8) with ESMTP id
	t9KNr2hr012474
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 20 Oct 2015 23:53:03 GMT
Received: from abhmp0001.oracle.com (abhmp0001.oracle.com [141.146.116.7])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id t9KNr27g020420; 
	Tue, 20 Oct 2015 23:53:02 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 20 Oct 2015 16:53:02 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v2 4/4] mm/hugetlb: Unmap pages to remove if page fault
	raced with hole punch
Date: Tue, 20 Oct 2015 16:52:22 -0700
Message-Id: &lt;1445385142-29936-5-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Oct. 20, 2015, 11:52 p.m.</div>
<pre class="content">
Page faults can race with fallocate hole punch.  If a page fault happens
between the unmap and remove operations, the page is not removed and
remains within the hole.  This is not the desired behavior.  If a page
is mapped, the remove operation (remove_inode_hugepages) will unmap the
page before removing.  The unmap within remove_inode_hugepages occurs
with the hugetlb_fault_mutex held so that no other faults can occur
until the page is removed.

The (unmodified) routine hugetlb_vmdelete_list was moved ahead of
remove_inode_hugepages to satisfy the new reference.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 fs/hugetlbfs/inode.c | 123 ++++++++++++++++++++++++++-------------------------
 1 file changed, 63 insertions(+), 60 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 719bbe0..f25b72f 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -324,11 +324,44 @@</span> <span class="p_context"> static void remove_huge_page(struct page *page)</span>
 	delete_from_page_cache(page);
 }
 
<span class="p_add">+static inline void</span>
<span class="p_add">+hugetlb_vmdelete_list(struct rb_root *root, pgoff_t start, pgoff_t end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * end == 0 indicates that the entire range after</span>
<span class="p_add">+	 * start should be unmapped.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	vma_interval_tree_foreach(vma, root, start, end ? end : ULONG_MAX) {</span>
<span class="p_add">+		unsigned long v_offset;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Can the expression below overflow on 32-bit arches?</span>
<span class="p_add">+		 * No, because the interval tree returns us only those vmas</span>
<span class="p_add">+		 * which overlap the truncated area starting at pgoff,</span>
<span class="p_add">+		 * and no vma on a 32-bit arch can span beyond the 4GB.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (vma-&gt;vm_pgoff &lt; start)</span>
<span class="p_add">+			v_offset = (start - vma-&gt;vm_pgoff) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			v_offset = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (end) {</span>
<span class="p_add">+			end = ((end - start) &lt;&lt; PAGE_SHIFT) +</span>
<span class="p_add">+			       vma-&gt;vm_start + v_offset;</span>
<span class="p_add">+			if (end &gt; vma-&gt;vm_end)</span>
<span class="p_add">+				end = vma-&gt;vm_end;</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			end = vma-&gt;vm_end;</span>
<span class="p_add">+</span>
<span class="p_add">+		unmap_hugepage_range(vma, vma-&gt;vm_start + v_offset, end, NULL);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
 
 /*
  * remove_inode_hugepages handles two distinct cases: truncation and hole
  * punch.  There are subtle differences in operation for each case.
<span class="p_del">-</span>
  * truncation is indicated by end of range being LLONG_MAX
  *	In this case, we first scan the range and release found pages.
  *	After releasing pages, hugetlb_unreserve_pages cleans up region/reserv
<span class="p_chunk">@@ -381,12 +414,25 @@</span> <span class="p_context"> static void remove_inode_hugepages(struct inode *inode, loff_t lstart,</span>
 		for (i = 0; i &lt; pagevec_count(&amp;pvec); ++i) {
 			struct page *page = pvec.pages[i];
 			u32 hash;
<span class="p_add">+			bool rsv_on_error;</span>
 
 			hash = hugetlb_fault_mutex_hash(h, current-&gt;mm,
 							&amp;pseudo_vma,
 							mapping, next, 0);
 			mutex_lock(&amp;hugetlb_fault_mutex_table[hash]);
 
<span class="p_add">+			/*</span>
<span class="p_add">+			 * If page is mapped, it was faulted in after being</span>
<span class="p_add">+			 * unmapped in caller.  Unmap (again) now after taking</span>
<span class="p_add">+			 * the fault mutex.  The mutex will prevent faults</span>
<span class="p_add">+			 * until we finish removing the page.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (page_mapped(page)) {</span>
<span class="p_add">+				hugetlb_vmdelete_list(&amp;mapping-&gt;i_mmap,</span>
<span class="p_add">+					next * pages_per_huge_page(h),</span>
<span class="p_add">+					(next + 1) * pages_per_huge_page(h));</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
 			lock_page(page);
 			if (page-&gt;index &gt;= end) {
 				unlock_page(page);
<span class="p_chunk">@@ -396,31 +442,23 @@</span> <span class="p_context"> static void remove_inode_hugepages(struct inode *inode, loff_t lstart,</span>
 			}
 
 			/*
<span class="p_del">-			 * If page is mapped, it was faulted in after being</span>
<span class="p_del">-			 * unmapped.  Do nothing in this race case.  In the</span>
<span class="p_del">-			 * normal case page is not mapped.</span>
<span class="p_add">+			 * We must free the huge page and remove from page</span>
<span class="p_add">+			 * cache (remove_huge_page) BEFORE removing the</span>
<span class="p_add">+			 * region/reserve map (hugetlb_unreserve_pages).</span>
<span class="p_add">+			 * In rare out of memory conditions, removal of the</span>
<span class="p_add">+			 * region/reserve map could fail.  Before free&#39;ing</span>
<span class="p_add">+			 * the page, note PagePrivate which is used in case</span>
<span class="p_add">+			 * of error.</span>
 			 */
<span class="p_del">-			if (!page_mapped(page)) {</span>
<span class="p_del">-				bool rsv_on_error = !PagePrivate(page);</span>
<span class="p_del">-				/*</span>
<span class="p_del">-				 * We must free the huge page and remove</span>
<span class="p_del">-				 * from page cache (remove_huge_page) BEFORE</span>
<span class="p_del">-				 * removing the region/reserve map</span>
<span class="p_del">-				 * (hugetlb_unreserve_pages).  In rare out</span>
<span class="p_del">-				 * of memory conditions, removal of the</span>
<span class="p_del">-				 * region/reserve map could fail.  Before</span>
<span class="p_del">-				 * free&#39;ing the page, note PagePrivate which</span>
<span class="p_del">-				 * is used in case of error.</span>
<span class="p_del">-				 */</span>
<span class="p_del">-				remove_huge_page(page);</span>
<span class="p_del">-				freed++;</span>
<span class="p_del">-				if (!truncate_op) {</span>
<span class="p_del">-					if (unlikely(hugetlb_unreserve_pages(</span>
<span class="p_del">-							inode, next,</span>
<span class="p_del">-							next + 1, 1)))</span>
<span class="p_del">-						hugetlb_fix_reserve_counts(</span>
<span class="p_del">-							inode, rsv_on_error);</span>
<span class="p_del">-				}</span>
<span class="p_add">+			rsv_on_error = !PagePrivate(page);</span>
<span class="p_add">+			remove_huge_page(page);</span>
<span class="p_add">+			freed++;</span>
<span class="p_add">+			if (!truncate_op) {</span>
<span class="p_add">+				if (unlikely(hugetlb_unreserve_pages(inode,</span>
<span class="p_add">+								next, next + 1,</span>
<span class="p_add">+								1)))</span>
<span class="p_add">+					hugetlb_fix_reserve_counts(inode,</span>
<span class="p_add">+								rsv_on_error);</span>
 			}
 
 			if (page-&gt;index &gt; next)
<span class="p_chunk">@@ -450,41 +488,6 @@</span> <span class="p_context"> static void hugetlbfs_evict_inode(struct inode *inode)</span>
 	clear_inode(inode);
 }
 
<span class="p_del">-static inline void</span>
<span class="p_del">-hugetlb_vmdelete_list(struct rb_root *root, pgoff_t start, pgoff_t end)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct vm_area_struct *vma;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * end == 0 indicates that the entire range after</span>
<span class="p_del">-	 * start should be unmapped.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	vma_interval_tree_foreach(vma, root, start, end ? end : ULONG_MAX) {</span>
<span class="p_del">-		unsigned long v_offset;</span>
<span class="p_del">-</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Can the expression below overflow on 32-bit arches?</span>
<span class="p_del">-		 * No, because the interval tree returns us only those vmas</span>
<span class="p_del">-		 * which overlap the truncated area starting at pgoff,</span>
<span class="p_del">-		 * and no vma on a 32-bit arch can span beyond the 4GB.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (vma-&gt;vm_pgoff &lt; start)</span>
<span class="p_del">-			v_offset = (start - vma-&gt;vm_pgoff) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_del">-		else</span>
<span class="p_del">-			v_offset = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (end) {</span>
<span class="p_del">-			end = ((end - start) &lt;&lt; PAGE_SHIFT) +</span>
<span class="p_del">-			       vma-&gt;vm_start + v_offset;</span>
<span class="p_del">-			if (end &gt; vma-&gt;vm_end)</span>
<span class="p_del">-				end = vma-&gt;vm_end;</span>
<span class="p_del">-		} else</span>
<span class="p_del">-			end = vma-&gt;vm_end;</span>
<span class="p_del">-</span>
<span class="p_del">-		unmap_hugepage_range(vma, vma-&gt;vm_start + v_offset, end, NULL);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int hugetlb_vmtruncate(struct inode *inode, loff_t offset)
 {
 	pgoff_t pgoff;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



