
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/mm] x86/mm: Prepare to expose larger address space to userspace - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/mm] x86/mm: Prepare to expose larger address space to userspace</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 21, 2017, 9:40 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-b569bab78d8df157a6f91070af827753e4d1787c@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9856407/mbox/"
   >mbox</a>
|
   <a href="/patch/9856407/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9856407/">/patch/9856407/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EF06360392 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:46:06 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CABB628616
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:46:06 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BF67D28778; Fri, 21 Jul 2017 09:46:06 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C77A328616
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:46:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754369AbdGUJqD (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 21 Jul 2017 05:46:03 -0400
Received: from terminus.zytor.com ([65.50.211.136]:53001 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754141AbdGUJqB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 21 Jul 2017 05:46:01 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v6L9eTs0008847;
	Fri, 21 Jul 2017 02:40:29 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v6L9eSIS008842;
	Fri, 21 Jul 2017 02:40:28 -0700
Date: Fri, 21 Jul 2017 02:40:28 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: &quot;tip-bot for Kirill A. Shutemov&quot; &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-b569bab78d8df157a6f91070af827753e4d1787c@git.kernel.org&gt;
Cc: torvalds@linux-foundation.org, luto@amacapital.net,
	dave.hansen@intel.com, linux-kernel@vger.kernel.org,
	peterz@infradead.org, tglx@linutronix.de, hpa@zytor.com,
	kirill.shutemov@linux.intel.com, mingo@kernel.org,
	akpm@linux-foundation.org
Reply-To: tglx@linutronix.de, peterz@infradead.org,
	akpm@linux-foundation.org, hpa@zytor.com,
	kirill.shutemov@linux.intel.com, mingo@kernel.org,
	dave.hansen@intel.com, linux-kernel@vger.kernel.org,
	torvalds@linux-foundation.org, luto@amacapital.net
In-Reply-To: &lt;20170716225954.74185-7-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170716225954.74185-7-kirill.shutemov@linux.intel.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86/mm: Prepare to expose larger address space to
	userspace
Git-Commit-ID: b569bab78d8df157a6f91070af827753e4d1787c
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - July 21, 2017, 9:40 a.m.</div>
<pre class="content">
Commit-ID:  b569bab78d8df157a6f91070af827753e4d1787c
Gitweb:     http://git.kernel.org/tip/b569bab78d8df157a6f91070af827753e4d1787c
Author:     Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
AuthorDate: Mon, 17 Jul 2017 01:59:52 +0300
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Fri, 21 Jul 2017 10:05:18 +0200

x86/mm: Prepare to expose larger address space to userspace

On x86, 5-level paging enables 56-bit userspace virtual address space.
Not all user space is ready to handle wide addresses. It&#39;s known that
at least some JIT compilers use higher bits in pointers to encode their
information. It collides with valid pointers with 5-level paging and
leads to crashes.

To mitigate this, we are not going to allocate virtual address space
above 47-bit by default.

But userspace can ask for allocation from full address space by
specifying hint address (with or without MAP_FIXED) above 47-bits.

If hint address set above 47-bit, but MAP_FIXED is not specified, we try
to look for unmapped area by specified address. If it&#39;s already
occupied, we look for unmapped area in *full* address space, rather than
from 47-bit window.

A high hint address would only affect the allocation in question, but not
any future mmap()s.

Specifying high hint address on older kernel or on machine without 5-level
paging support is safe. The hint will be ignored and kernel will fall back
to allocation from 47-bit address space.

This approach helps to easily make application&#39;s memory allocator aware
about large address space without manually tracking allocated virtual
address space.

The patch puts all machinery in place, but not yet allows userspace to have
mappings above 47-bit -- TASK_SIZE_MAX has to be raised to get the effect.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-arch@vger.kernel.org
Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20170716225954.74185-7-kirill.shutemov@linux.intel.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/include/asm/elf.h       |  2 +-
 arch/x86/include/asm/processor.h |  7 +++++--
 arch/x86/kernel/sys_x86_64.c     | 21 +++++++++++++++++----
 arch/x86/mm/hugetlbpage.c        | 21 +++++++++++++++++----
 arch/x86/mm/mmap.c               |  6 +++---
 5 files changed, 43 insertions(+), 14 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="p_header">index c7090ef..f87f4d7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/elf.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/elf.h</span>
<span class="p_chunk">@@ -305,7 +305,7 @@</span> <span class="p_context"> static inline int mmap_is_ia32(void)</span>
 }
 
 extern unsigned long task_size_32bit(void);
<span class="p_del">-extern unsigned long task_size_64bit(void);</span>
<span class="p_add">+extern unsigned long task_size_64bit(int full_addr_space);</span>
 extern unsigned long get_mmap_base(int is_legacy);
 
 #ifdef CONFIG_X86_32
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index c8d59fc..58fd40a3 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -808,6 +808,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  */
 #define IA32_PAGE_OFFSET	PAGE_OFFSET
 #define TASK_SIZE		PAGE_OFFSET
<span class="p_add">+#define TASK_SIZE_LOW		TASK_SIZE</span>
 #define TASK_SIZE_MAX		TASK_SIZE
 #define DEFAULT_MAP_WINDOW	TASK_SIZE
 #define STACK_TOP		TASK_SIZE
<span class="p_chunk">@@ -859,12 +860,14 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
 #define IA32_PAGE_OFFSET	((current-&gt;personality &amp; ADDR_LIMIT_3GB) ? \
 					0xc0000000 : 0xFFFFe000)
 
<span class="p_add">+#define TASK_SIZE_LOW		(test_thread_flag(TIF_ADDR32) ? \</span>
<span class="p_add">+					IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)</span>
 #define TASK_SIZE		(test_thread_flag(TIF_ADDR32) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
 #define TASK_SIZE_OF(child)	((test_tsk_thread_flag(child, TIF_ADDR32)) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
 
<span class="p_del">-#define STACK_TOP		TASK_SIZE</span>
<span class="p_add">+#define STACK_TOP		TASK_SIZE_LOW</span>
 #define STACK_TOP_MAX		TASK_SIZE_MAX
 
 #define INIT_THREAD  {						\
<span class="p_chunk">@@ -885,7 +888,7 @@</span> <span class="p_context"> extern void start_thread(struct pt_regs *regs, unsigned long new_ip,</span>
  * space during mmap&#39;s.
  */
 #define __TASK_UNMAPPED_BASE(task_size)	(PAGE_ALIGN(task_size / 3))
<span class="p_del">-#define TASK_UNMAPPED_BASE		__TASK_UNMAPPED_BASE(TASK_SIZE)</span>
<span class="p_add">+#define TASK_UNMAPPED_BASE		__TASK_UNMAPPED_BASE(TASK_SIZE_LOW)</span>
 
 #define KSTK_EIP(task)		(task_pt_regs(task)-&gt;ip)
 
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index f840e89..73e4d28 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -101,8 +101,8 @@</span> <span class="p_context"> out:</span>
 	return error;
 }
 
<span class="p_del">-static void find_start_end(unsigned long flags, unsigned long *begin,</span>
<span class="p_del">-			   unsigned long *end)</span>
<span class="p_add">+static void find_start_end(unsigned long addr, unsigned long flags,</span>
<span class="p_add">+		unsigned long *begin, unsigned long *end)</span>
 {
 	if (!in_compat_syscall() &amp;&amp; (flags &amp; MAP_32BIT)) {
 		/* This is usually used needed to map code in small
<span class="p_chunk">@@ -121,7 +121,10 @@</span> <span class="p_context"> static void find_start_end(unsigned long flags, unsigned long *begin,</span>
 	}
 
 	*begin	= get_mmap_base(1);
<span class="p_del">-	*end	= in_compat_syscall() ? task_size_32bit() : task_size_64bit();</span>
<span class="p_add">+	if (in_compat_syscall())</span>
<span class="p_add">+		*end = task_size_32bit();</span>
<span class="p_add">+	else</span>
<span class="p_add">+		*end = task_size_64bit(addr &gt; DEFAULT_MAP_WINDOW);</span>
 }
 
 unsigned long
<span class="p_chunk">@@ -140,7 +143,7 @@</span> <span class="p_context"> arch_get_unmapped_area(struct file *filp, unsigned long addr,</span>
 	if (flags &amp; MAP_FIXED)
 		return addr;
 
<span class="p_del">-	find_start_end(flags, &amp;begin, &amp;end);</span>
<span class="p_add">+	find_start_end(addr, flags, &amp;begin, &amp;end);</span>
 
 	if (len &gt; end)
 		return -ENOMEM;
<span class="p_chunk">@@ -204,6 +207,16 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 	info.length = len;
 	info.low_limit = PAGE_SIZE;
 	info.high_limit = get_mmap_base(0);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If hint address is above DEFAULT_MAP_WINDOW, look for unmapped area</span>
<span class="p_add">+	 * in the full address space.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * !in_compat_syscall() check to avoid high addresses for x32.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (addr &gt; DEFAULT_MAP_WINDOW &amp;&amp; !in_compat_syscall())</span>
<span class="p_add">+		info.high_limit += TASK_SIZE_MAX - DEFAULT_MAP_WINDOW;</span>
<span class="p_add">+</span>
 	info.align_mask = 0;
 	info.align_offset = pgoff &lt;&lt; PAGE_SHIFT;
 	if (filp) {
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 3cf89ad..6d06cf3 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -86,25 +86,38 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *file,</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = get_mmap_base(1);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If hint address is above DEFAULT_MAP_WINDOW, look for unmapped area</span>
<span class="p_add">+	 * in the full address space.</span>
<span class="p_add">+	 */</span>
 	info.high_limit = in_compat_syscall() ?
<span class="p_del">-		task_size_32bit() : task_size_64bit();</span>
<span class="p_add">+		task_size_32bit() : task_size_64bit(addr &gt; DEFAULT_MAP_WINDOW);</span>
<span class="p_add">+</span>
 	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);
 	info.align_offset = 0;
 	return vm_unmapped_area(&amp;info);
 }
 
 static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,
<span class="p_del">-		unsigned long addr0, unsigned long len,</span>
<span class="p_add">+		unsigned long addr, unsigned long len,</span>
 		unsigned long pgoff, unsigned long flags)
 {
 	struct hstate *h = hstate_file(file);
 	struct vm_unmapped_area_info info;
<span class="p_del">-	unsigned long addr;</span>
 
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
 	info.low_limit = PAGE_SIZE;
 	info.high_limit = get_mmap_base(0);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If hint address is above DEFAULT_MAP_WINDOW, look for unmapped area</span>
<span class="p_add">+	 * in the full address space.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (addr &gt; DEFAULT_MAP_WINDOW &amp;&amp; !in_compat_syscall())</span>
<span class="p_add">+		info.high_limit += TASK_SIZE_MAX - DEFAULT_MAP_WINDOW;</span>
<span class="p_add">+</span>
 	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);
 	info.align_offset = 0;
 	addr = vm_unmapped_area(&amp;info);
<span class="p_chunk">@@ -119,7 +132,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,</span>
 		VM_BUG_ON(addr != -ENOMEM);
 		info.flags = 0;
 		info.low_limit = TASK_UNMAPPED_BASE;
<span class="p_del">-		info.high_limit = TASK_SIZE;</span>
<span class="p_add">+		info.high_limit = TASK_SIZE_LOW;</span>
 		addr = vm_unmapped_area(&amp;info);
 	}
 
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index d258691..c15a50a 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -42,9 +42,9 @@</span> <span class="p_context"> unsigned long task_size_32bit(void)</span>
 	return IA32_PAGE_OFFSET;
 }
 
<span class="p_del">-unsigned long task_size_64bit(void)</span>
<span class="p_add">+unsigned long task_size_64bit(int full_addr_space)</span>
 {
<span class="p_del">-	return TASK_SIZE_MAX;</span>
<span class="p_add">+	return full_addr_space ? TASK_SIZE_MAX : DEFAULT_MAP_WINDOW;</span>
 }
 
 static unsigned long stack_maxrandom_size(unsigned long task_size)
<span class="p_chunk">@@ -142,7 +142,7 @@</span> <span class="p_context"> void arch_pick_mmap_layout(struct mm_struct *mm)</span>
 		mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;
 
 	arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,
<span class="p_del">-			arch_rnd(mmap64_rnd_bits), task_size_64bit());</span>
<span class="p_add">+			arch_rnd(mmap64_rnd_bits), task_size_64bit(0));</span>
 
 #ifdef CONFIG_HAVE_ARCH_COMPAT_MMAP_BASES
 	/*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



