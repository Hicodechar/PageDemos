
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v11,03/10] sparc64: Add support for ADI register fields, ASIs and traps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v11,03/10] sparc64: Add support for ADI register fields, ASIs and traps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 1, 2018, 6:01 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;e4ad304a57afeff9e3bd6f1fc57a927c943506b0.1517497017.git.khalid.aziz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10195789/mbox/"
   >mbox</a>
|
   <a href="/patch/10195789/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10195789/">/patch/10195789/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5437B60380 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Feb 2018 18:02:36 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 33FB428BE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Feb 2018 18:02:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 26FD628C1B; Thu,  1 Feb 2018 18:02:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D2B9A28BE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Feb 2018 18:02:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753142AbeBASCR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 1 Feb 2018 13:02:17 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:46578 &quot;EHLO
	userp2120.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753116AbeBASCJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 1 Feb 2018 13:02:09 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
	by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w11I1qV0147449; Thu, 1 Feb 2018 18:01:53 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references : in-reply-to
	: references; s=corp-2017-10-26;
	bh=HflT5AxpYmcH1h1C/rU4IAY126IvT2bfOyIFiXw3hn4=;
	b=JkoOLq6cGd4nmZnaqpot/X5QSLqW6J7aJsIRlmq0ysdGiOXQ4Asxs478gR7eL+rMdb1s
	na4l4eua6lfUyQuy9b0CxtZFfzQrfExJG69yviupQA2NuB5IRzbWmEiv9iRT52u3Rchk
	+NVT2EhfIqd9Vl+j7qDuOdwZVKFnLE7OiXinACAwsvfAtbZRMvRGi4jB3rZBcAc0bFIs
	nCI3aLY1cvWD1S6uIviVPRIvetaeontMby3NnmseGN6XYz3RO/edXQbgYHrn1ShOb5nZ
	f1WQix5u+O3/+JBSnSdz3YACK2LSTTnedySXGtcGv1xSz18QAUQ6V4joyQztJRvejrHE
	4g== 
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by userp2120.oracle.com with ESMTP id 2fv1xaa2k2-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Thu, 01 Feb 2018 18:01:53 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0022.oracle.com (8.14.4/8.14.4) with ESMTP id w11I1oHm019877
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Thu, 1 Feb 2018 18:01:50 GMT
Received: from abhmp0012.oracle.com (abhmp0012.oracle.com [141.146.116.18])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	w11I1nEo017441; Thu, 1 Feb 2018 18:01:49 GMT
Received: from concerto.us.oracle.com (/24.9.64.241)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 01 Feb 2018 10:01:49 -0800
From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
To: davem@davemloft.net, dave.hansen@linux.intel.com
Cc: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;, mhocko@suse.com,
	mingo@kernel.org, gregkh@linuxfoundation.org, glx@linutronix.de,
	kstewart@linuxfoundation.org, vijay.ac.kumar@oracle.com,
	kirill.shutemov@linux.intel.com, nitin.m.gupta@oracle.com,
	tom.hromatka@oracle.com, allen.pais@oracle.com,
	rob.gardner@oracle.com, david.j.aldridge@oracle.com,
	babu.moger@oracle.com, bob.picco@oracle.com,
	steven.sistare@oracle.com, pasha.tatashin@oracle.com,
	vegard.nossum@oracle.com, pombredanne@nexb.com,
	jane.chu@oracle.com, anthony.yznaga@oracle.com,
	sparclinux@vger.kernel.org, linux-kernel@vger.kernel.org,
	Khalid Aziz &lt;khalid@gonehiking.org&gt;
Subject: [PATCH v11 03/10] sparc64: Add support for ADI register fields,
	ASIs and traps
Date: Thu,  1 Feb 2018 11:01:11 -0700
Message-Id: &lt;e4ad304a57afeff9e3bd6f1fc57a927c943506b0.1517497017.git.khalid.aziz@oracle.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;cover.1517497017.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1517497017.git.khalid.aziz@oracle.com&gt;
In-Reply-To: &lt;cover.1517497017.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1517497017.git.khalid.aziz@oracle.com&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8792
	signatures=668660
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1802010231
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Feb. 1, 2018, 6:01 p.m.</div>
<pre class="content">
SPARC M7 processor adds new control register fields, ASIs and a new
trap to support the ADI (Application Data Integrity) feature. This
patch adds definitions for these register fields, ASIs and a handler
for the new precise memory corruption detected trap.
<span class="signed-off-by">
Signed-off-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
Cc: Khalid Aziz &lt;khalid@gonehiking.org&gt;
<span class="reviewed-by">Reviewed-by: Anthony Yznaga &lt;anthony.yznaga@oracle.com&gt;</span>
---
v10:
	- Updated copyright
v8:
	- Minor print formatting change as suggested by checkpatch
v6:
	- Added a missing nop in the delay slot in sun4v_mcd_detect_precise

v5:
	- Fixed indentation issues in assembly code

v4:
	- Broke patch up into smaller patches

v3:
	- Removed CONFIG_SPARC_ADI
	- Replaced prctl commands with mprotect
	- Added auxiliary vectors for ADI parameters
	- Enabled ADI for swappable pages

v2:
	- Fixed a build error

 arch/sparc/include/asm/hypervisor.h  |  2 ++
 arch/sparc/include/asm/pgtable_64.h  |  2 ++
 arch/sparc/include/asm/ttable.h      | 10 +++++++
 arch/sparc/include/uapi/asm/asi.h    |  5 ++++
 arch/sparc/include/uapi/asm/pstate.h | 10 +++++++
 arch/sparc/kernel/entry.h            |  3 ++
 arch/sparc/kernel/head_64.S          |  1 +
 arch/sparc/kernel/sun4v_mcd.S        | 18 ++++++++++++
 arch/sparc/kernel/traps_64.c         | 54 ++++++++++++++++++++++++++++++++++++
 arch/sparc/kernel/ttable_64.S        |  6 ++--
 10 files changed, 109 insertions(+), 2 deletions(-)
 create mode 100644 arch/sparc/kernel/sun4v_mcd.S
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - Feb. 1, 2018, 8:32 p.m.</div>
<pre class="content">
On Thu, 2018-02-01 at 11:01 -0700, Khalid Aziz wrote:
<span class="quote">&gt; diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
[]
<span class="quote">&gt; @@ -164,6 +164,8 @@ bool kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt;  #define _PAGE_E_4V	  _AC(0x0000000000000800,UL) /* side-Effect          */</span>
<span class="quote">&gt;  #define _PAGE_CP_4V	  _AC(0x0000000000000400,UL) /* Cacheable in P-Cache */</span>
<span class="quote">&gt;  #define _PAGE_CV_4V	  _AC(0x0000000000000200,UL) /* Cacheable in V-Cache */</span>
<span class="quote">&gt; +/* Bit 9 is used to enable MCD corruption detection instead on M7 */</span>
<span class="quote">&gt; +#define _PAGE_MCD_4V      _AC(0x0000000000000200,UL) /* Memory Corruption    */</span>

trivia:

There are some whitespace alignment issues here
<span class="quote">
&gt; diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
[]
<span class="quote">&gt; @@ -219,6 +219,16 @@</span>
<span class="quote">&gt;  	nop;						\</span>
<span class="quote">&gt;  	nop;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define SUN4V_MCD_PRECISE				\</span>
<span class="quote">&gt; +	ldxa	[%g0] ASI_SCRATCHPAD, %g2;		\</span>
<span class="quote">&gt; +	ldx	[%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;	\</span>
<span class="quote">&gt; +	ldx	[%g2 + HV_FAULT_D_CTX_OFFSET], %g5;	\</span>
<span class="quote">&gt; +	ba,pt	%xcc, etrap;				\</span>
<span class="quote">&gt; +	 rd	%pc, %g7;				\</span>
<span class="quote">&gt; +	ba,pt	%xcc, sun4v_mcd_detect_precise;		\</span>
<span class="quote">&gt; +	 nop;						\</span>
<span class="quote">&gt; +	nop;</span>

and here and elsewhere.

It would be nicer to make all these use
similar indentation.
<span class="quote">
&gt; diff --git a/arch/sparc/kernel/sun4v_mcd.S b/arch/sparc/kernel/sun4v_mcd.S</span>
[]
<span class="quote">&gt; +sun4v_mcd_detect_precise:</span>
<span class="quote">&gt; +	mov	%l4, %o1</span>
<span class="quote">&gt; +	mov 	%l5, %o2</span>
<span class="quote">&gt; +	call	sun4v_mem_corrupt_detect_precise</span>
<span class="quote">&gt; +	 add	%sp, PTREGS_OFF, %o0</span>
<span class="quote">&gt; +	ba,a,pt	%xcc, rtrap</span>
<span class="quote">&gt; +	 nop</span>

etc...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - Feb. 1, 2018, 8:39 p.m.</div>
<pre class="content">
<span class="from">From: Joe Perches &lt;joe@perches.com&gt;</span>
Date: Thu, 01 Feb 2018 12:32:02 -0800
<span class="quote">
&gt;&gt; diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
<span class="quote">&gt; []</span>
<span class="quote">&gt;&gt; @@ -219,6 +219,16 @@</span>
<span class="quote">&gt;&gt;  	nop;						\</span>
<span class="quote">&gt;&gt;  	nop;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +#define SUN4V_MCD_PRECISE				\</span>
<span class="quote">&gt;&gt; +	ldxa	[%g0] ASI_SCRATCHPAD, %g2;		\</span>
<span class="quote">&gt;&gt; +	ldx	[%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;	\</span>
<span class="quote">&gt;&gt; +	ldx	[%g2 + HV_FAULT_D_CTX_OFFSET], %g5;	\</span>
<span class="quote">&gt;&gt; +	ba,pt	%xcc, etrap;				\</span>
<span class="quote">&gt;&gt; +	 rd	%pc, %g7;				\</span>
<span class="quote">&gt;&gt; +	ba,pt	%xcc, sun4v_mcd_detect_precise;		\</span>
<span class="quote">&gt;&gt; +	 nop;						\</span>
<span class="quote">&gt;&gt; +	nop;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and here and elsewhere.</span>

Joe, this is intentional in Sparc assembler.

Branches on sparc have delay slots, and this is annotated by indenting
the delay slot instruction one space more than the branch preceeding
it.

Please make more constructive review comments than whitespace as these
patches have been under review for more than half a year.

Thank you very much.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8352">Sam Ravnborg</a> - Feb. 1, 2018, 9:49 p.m.</div>
<pre class="content">
<span class="quote">&gt; &gt;  #define _PAGE_E_4V	  _AC(0x0000000000000800,UL) /* side-Effect          */</span>
<span class="quote">&gt; &gt;  #define _PAGE_CP_4V	  _AC(0x0000000000000400,UL) /* Cacheable in P-Cache */</span>
<span class="quote">&gt; &gt;  #define _PAGE_CV_4V	  _AC(0x0000000000000200,UL) /* Cacheable in V-Cache */</span>
<span class="quote">&gt; &gt; +/* Bit 9 is used to enable MCD corruption detection instead on M7 */</span>
<span class="quote">&gt; &gt; +#define _PAGE_MCD_4V      _AC(0x0000000000000200,UL) /* Memory Corruption    */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; trivia:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There are some whitespace alignment issues here</span>
Looks like you are fouled by the use of tabs.
When you apply the patch it is fine.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
<span class="quote">&gt; []</span>
<span class="quote">&gt; &gt; @@ -219,6 +219,16 @@</span>
<span class="quote">&gt; &gt;  	nop;						\</span>
<span class="quote">&gt; &gt;  	nop;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#define SUN4V_MCD_PRECISE				\</span>
<span class="quote">&gt; &gt; +	ldxa	[%g0] ASI_SCRATCHPAD, %g2;		\</span>
<span class="quote">&gt; &gt; +	ldx	[%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;	\</span>
<span class="quote">&gt; &gt; +	ldx	[%g2 + HV_FAULT_D_CTX_OFFSET], %g5;	\</span>
<span class="quote">&gt; &gt; +	ba,pt	%xcc, etrap;				\</span>
<span class="quote">&gt; &gt; +	 rd	%pc, %g7;				\</span>
<span class="quote">&gt; &gt; +	ba,pt	%xcc, sun4v_mcd_detect_precise;		\</span>
<span class="quote">&gt; &gt; +	 nop;						\</span>
<span class="quote">&gt; &gt; +	nop;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and here and elsewhere.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It would be nicer to make all these use</span>
<span class="quote">&gt; similar indentation.</span>

The patch uses the sparc idiom to indent instructions
in the delay slot after a branch with one space.
So the space before the nop is mandatory and not a bug.

	Sam
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - Feb. 1, 2018, 10:09 p.m.</div>
<pre class="content">
On Thu, 2018-02-01 at 15:39 -0500, David Miller wrote:
<span class="quote">&gt; From: Joe Perches &lt;joe@perches.com&gt;</span>
<span class="quote">&gt; Date: Thu, 01 Feb 2018 12:32:02 -0800</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
<span class="quote">&gt; &gt; []</span>
<span class="quote">&gt; &gt;&gt; @@ -219,6 +219,16 @@</span>
<span class="quote">&gt; &gt;&gt;      nop;                                            \</span>
<span class="quote">&gt; &gt;&gt;      nop;</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; +#define SUN4V_MCD_PRECISE                           \</span>
<span class="quote">&gt; &gt;&gt; +    ldxa    [%g0] ASI_SCRATCHPAD, %g2;              \</span>
<span class="quote">&gt; &gt;&gt; +    ldx     [%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;    \</span>
<span class="quote">&gt; &gt;&gt; +    ldx     [%g2 + HV_FAULT_D_CTX_OFFSET], %g5;     \</span>
<span class="quote">&gt; &gt;&gt; +    ba,pt   %xcc, etrap;                            \</span>
<span class="quote">&gt; &gt;&gt; +     rd     %pc, %g7;                               \</span>
<span class="quote">&gt; &gt;&gt; +    ba,pt   %xcc, sun4v_mcd_detect_precise;         \</span>
<span class="quote">&gt; &gt;&gt; +     nop;                                           \</span>
<span class="quote">&gt; &gt;&gt; +    nop;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; and here and elsewhere.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Joe, this is intentional in Sparc assembler.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Branches on sparc have delay slots, and this is annotated by indenting</span>
<span class="quote">&gt; the delay slot instruction one space more than the branch preceeding</span>
<span class="quote">&gt; it.</span>

OK, that is new to me and seems a sensible convention.

btw:

There seem to be only a few instances where that
convention is not followed in arch/sparc/...

(maybe some missing or false positives below)

$ git ls-files arch/sparc/ | \
  xargs grep-2.5.4 -P -n &#39;^([ \t]+)b\w+,p.*\n\1[^ ]\S&#39; | \
  perl -p -e &#39;s/(:\d+:)/\1\n/&#39;
arch/sparc/include/asm/tsb.h:168:
	brz,pn		REG1, FAIL_LABEL; \
	sethi		%uhi(_PAGE_PUD_HUGE), REG2; \
arch/sparc/include/asm/ttable.h:281:
	ba,pt	%xcc, etrap_save;			\
	wrpr	%g1, %cwp;				\
arch/sparc/kernel/head_64.S:472:
	bne,pn	%icc, 49f
	add	%g7, 1, %g7
arch/sparc/kernel/head_64.S:474:
	bne,pt	%xcc, 41b
	add	%g1, 1, %g1
arch/sparc/kernel/rtrap_64.S:72:
		ba,pt			%xcc, rtrap_no_irq_enable
		nop
arch/sparc/kernel/rtrap_64.S:161:
		brz,pt			%l3, 1f
		mov			%g6, %l2
arch/sparc/lib/GENmemcpy.S:100:
	bne,pt		%XCC, 1b
	add		%o0, 1, %o0
arch/sparc/lib/M7memcpy.S:896:
	bgu,pt	%xcc, .Lsmallnotalign4	! loop til 3 or fewer bytes remain
	EX_ST(STORE(stb, %o3, %o0-1), memcpy_retl_o2_plus_4)
arch/sparc/lib/M7memcpy.S:902:
	bz,pt	%xcc, .Lsmallx
	EX_ST(STORE(stb, %o3, %o0), memcpy_retl_o2_plus_1)	! store one byte
arch/sparc/lib/M7memcpy.S:905:
	bz,pt	%xcc, .Lsmallx
	EX_ST(STORE(stb, %o3, %o0+1), memcpy_retl_o2_plus_1)! store second byte
arch/sparc/lib/NG2memcpy.S:299:
	bne,pt		%XCC, 1b
	add		%o0, 1, %o0
arch/sparc/lib/NG4fls.S:23:
	brz,pn	%o0, 1f
	LZCNT_O0_G2	!lzcnt	%o0, %g2
arch/sparc/lib/NGmemcpy.S:216:
	bne,pt		%XCC, 1b
	add		%o0, 1, %o0
arch/sparc/lib/csum_copy.S:103:
	ba,pt		%xcc, 1f
	LOAD(prefetch, %o0 + 0x140, #n_reads)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/hypervisor.h b/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_header">index 89a0c57aed59..83fdcc5e91db 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_chunk">@@ -566,6 +566,8 @@</span> <span class="p_context"> struct hv_fault_status {</span>
 #define HV_FAULT_TYPE_RESV1	13
 #define HV_FAULT_TYPE_UNALIGNED	14
 #define HV_FAULT_TYPE_INV_PGSZ	15
<span class="p_add">+#define HV_FAULT_TYPE_MCD	17</span>
<span class="p_add">+#define HV_FAULT_TYPE_MCD_DIS	18</span>
 /* Values 16 --&gt; -2 are reserved.  */
 #define HV_FAULT_TYPE_MULTIPLE	-1
 
<span class="p_header">diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">index 9937c5ff94a9..db5c83532cfd 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -164,6 +164,8 @@</span> <span class="p_context"> bool kern_addr_valid(unsigned long addr);</span>
 #define _PAGE_E_4V	  _AC(0x0000000000000800,UL) /* side-Effect          */
 #define _PAGE_CP_4V	  _AC(0x0000000000000400,UL) /* Cacheable in P-Cache */
 #define _PAGE_CV_4V	  _AC(0x0000000000000200,UL) /* Cacheable in V-Cache */
<span class="p_add">+/* Bit 9 is used to enable MCD corruption detection instead on M7 */</span>
<span class="p_add">+#define _PAGE_MCD_4V      _AC(0x0000000000000200,UL) /* Memory Corruption    */</span>
 #define _PAGE_P_4V	  _AC(0x0000000000000100,UL) /* Privileged Page      */
 #define _PAGE_EXEC_4V	  _AC(0x0000000000000080,UL) /* Executable Page      */
 #define _PAGE_W_4V	  _AC(0x0000000000000040,UL) /* Writable             */
<span class="p_header">diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
<span class="p_header">index ede2b66cf4a0..8f6469408019 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/ttable.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/ttable.h</span>
<span class="p_chunk">@@ -219,6 +219,16 @@</span> <span class="p_context"></span>
 	nop;						\
 	nop;
 
<span class="p_add">+#define SUN4V_MCD_PRECISE				\</span>
<span class="p_add">+	ldxa	[%g0] ASI_SCRATCHPAD, %g2;		\</span>
<span class="p_add">+	ldx	[%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;	\</span>
<span class="p_add">+	ldx	[%g2 + HV_FAULT_D_CTX_OFFSET], %g5;	\</span>
<span class="p_add">+	ba,pt	%xcc, etrap;				\</span>
<span class="p_add">+	 rd	%pc, %g7;				\</span>
<span class="p_add">+	ba,pt	%xcc, sun4v_mcd_detect_precise;		\</span>
<span class="p_add">+	 nop;						\</span>
<span class="p_add">+	nop;</span>
<span class="p_add">+</span>
 /* Before touching these macros, you owe it to yourself to go and
  * see how arch/sparc64/kernel/winfixup.S works... -DaveM
  *
<span class="p_header">diff --git a/arch/sparc/include/uapi/asm/asi.h b/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_header">index d371b269571a..fbb30a5b082f 100644</span>
<span class="p_header">--- a/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_header">+++ b/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_chunk">@@ -145,6 +145,8 @@</span> <span class="p_context"></span>
  * ASIs, &quot;(4V)&quot; designates SUN4V specific ASIs.  &quot;(NG4)&quot; designates SPARC-T4
  * and later ASIs.
  */
<span class="p_add">+#define ASI_MCD_PRIV_PRIMARY	0x02 /* (NG7) Privileged MCD version VA	*/</span>
<span class="p_add">+#define ASI_MCD_REAL		0x05 /* (NG7) Privileged MCD version PA	*/</span>
 #define ASI_PHYS_USE_EC		0x14 /* PADDR, E-cachable		*/
 #define ASI_PHYS_BYPASS_EC_E	0x15 /* PADDR, E-bit			*/
 #define ASI_BLK_AIUP_4V		0x16 /* (4V) Prim, user, block ld/st	*/
<span class="p_chunk">@@ -245,6 +247,9 @@</span> <span class="p_context"></span>
 #define ASI_UDBL_CONTROL_R	0x7f /* External UDB control regs rd low*/
 #define ASI_INTR_R		0x7f /* IRQ vector dispatch read	*/
 #define ASI_INTR_DATAN_R	0x7f /* (III) In irq vector data reg N	*/
<span class="p_add">+#define ASI_MCD_PRIMARY		0x90 /* (NG7) MCD version load/store	*/</span>
<span class="p_add">+#define ASI_MCD_ST_BLKINIT_PRIMARY	\</span>
<span class="p_add">+				0x92 /* (NG7) MCD store BLKINIT primary	*/</span>
 #define ASI_PIC			0xb0 /* (NG4) PIC registers		*/
 #define ASI_PST8_P		0xc0 /* Primary, 8 8-bit, partial	*/
 #define ASI_PST8_S		0xc1 /* Secondary, 8 8-bit, partial	*/
<span class="p_header">diff --git a/arch/sparc/include/uapi/asm/pstate.h b/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_header">index b6999c9e7e86..ceca96e685c2 100644</span>
<span class="p_header">--- a/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_header">+++ b/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_chunk">@@ -11,7 +11,12 @@</span> <span class="p_context"></span>
  * -----------------------------------------------------------------------
  *  63  12  11   10    9     8    7   6   5     4     3     2     1    0
  */
<span class="p_add">+/* IG on V9 conflicts with MCDE on M7. PSTATE_MCDE will only be used on</span>
<span class="p_add">+ * processors that support ADI which do not use IG, hence there is no</span>
<span class="p_add">+ * functional conflict</span>
<span class="p_add">+ */</span>
 #define PSTATE_IG   _AC(0x0000000000000800,UL) /* Interrupt Globals.	*/
<span class="p_add">+#define PSTATE_MCDE _AC(0x0000000000000800,UL) /* MCD Enable		*/</span>
 #define PSTATE_MG   _AC(0x0000000000000400,UL) /* MMU Globals.		*/
 #define PSTATE_CLE  _AC(0x0000000000000200,UL) /* Current Little Endian.*/
 #define PSTATE_TLE  _AC(0x0000000000000100,UL) /* Trap Little Endian.	*/
<span class="p_chunk">@@ -48,7 +53,12 @@</span> <span class="p_context"></span>
 #define TSTATE_ASI	_AC(0x00000000ff000000,UL) /* AddrSpace ID.	*/
 #define TSTATE_PIL	_AC(0x0000000000f00000,UL) /* %pil (Linux traps)*/
 #define TSTATE_PSTATE	_AC(0x00000000000fff00,UL) /* PSTATE.		*/
<span class="p_add">+/* IG on V9 conflicts with MCDE on M7. TSTATE_MCDE will only be used on</span>
<span class="p_add">+ * processors that support ADI which do not support IG, hence there is</span>
<span class="p_add">+ * no functional conflict</span>
<span class="p_add">+ */</span>
 #define TSTATE_IG	_AC(0x0000000000080000,UL) /* Interrupt Globals.*/
<span class="p_add">+#define TSTATE_MCDE	_AC(0x0000000000080000,UL) /* MCD enable.       */</span>
 #define TSTATE_MG	_AC(0x0000000000040000,UL) /* MMU Globals.	*/
 #define TSTATE_CLE	_AC(0x0000000000020000,UL) /* CurrLittleEndian.	*/
 #define TSTATE_TLE	_AC(0x0000000000010000,UL) /* TrapLittleEndian.	*/
<span class="p_header">diff --git a/arch/sparc/kernel/entry.h b/arch/sparc/kernel/entry.h</span>
<span class="p_header">index 7378567b601f..c746c0fd5d6b 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/entry.h</span>
<span class="p_header">+++ b/arch/sparc/kernel/entry.h</span>
<span class="p_chunk">@@ -160,6 +160,9 @@</span> <span class="p_context"> void sun4v_resum_overflow(struct pt_regs *regs);</span>
 void sun4v_nonresum_error(struct pt_regs *regs,
 			  unsigned long offset);
 void sun4v_nonresum_overflow(struct pt_regs *regs);
<span class="p_add">+void sun4v_mem_corrupt_detect_precise(struct pt_regs *regs,</span>
<span class="p_add">+				      unsigned long addr,</span>
<span class="p_add">+				      unsigned long context);</span>
 
 extern unsigned long sun4v_err_itlb_vaddr;
 extern unsigned long sun4v_err_itlb_ctx;
<span class="p_header">diff --git a/arch/sparc/kernel/head_64.S b/arch/sparc/kernel/head_64.S</span>
<span class="p_header">index a41e6e16eb36..540bfc98472c 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/head_64.S</span>
<span class="p_chunk">@@ -897,6 +897,7 @@</span> <span class="p_context"> sparc64_boot_end:</span>
 #include &quot;syscalls.S&quot;
 #include &quot;helpers.S&quot;
 #include &quot;sun4v_tlb_miss.S&quot;
<span class="p_add">+#include &quot;sun4v_mcd.S&quot;</span>
 #include &quot;sun4v_ivec.S&quot;
 #include &quot;ktlb.S&quot;
 #include &quot;tsb.S&quot;
<span class="p_header">diff --git a/arch/sparc/kernel/sun4v_mcd.S b/arch/sparc/kernel/sun4v_mcd.S</span>
new file mode 100644
<span class="p_header">index 000000000000..d6c69ebca110</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/sparc/kernel/sun4v_mcd.S</span>
<span class="p_chunk">@@ -0,0 +1,18 @@</span> <span class="p_context"></span>
<span class="p_add">+/* sun4v_mcd.S: Sun4v memory corruption detected precise exception handler</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (c) 2015 Oracle and/or its affiliates. All rights reserved.</span>
<span class="p_add">+ * Authors: Bob Picco &lt;bob.picco@oracle.com&gt;,</span>
<span class="p_add">+ *          Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This work is licensed under the terms of the GNU GPL, version 2.</span>
<span class="p_add">+ */</span>
<span class="p_add">+	.text</span>
<span class="p_add">+	.align 32</span>
<span class="p_add">+</span>
<span class="p_add">+sun4v_mcd_detect_precise:</span>
<span class="p_add">+	mov	%l4, %o1</span>
<span class="p_add">+	mov 	%l5, %o2</span>
<span class="p_add">+	call	sun4v_mem_corrupt_detect_precise</span>
<span class="p_add">+	 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_add">+	ba,a,pt	%xcc, rtrap</span>
<span class="p_add">+	 nop</span>
<span class="p_header">diff --git a/arch/sparc/kernel/traps_64.c b/arch/sparc/kernel/traps_64.c</span>
<span class="p_header">index 0a56dc257cb9..fc73baa588f6 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/traps_64.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/traps_64.c</span>
<span class="p_chunk">@@ -2656,6 +2656,60 @@</span> <span class="p_context"> void sun4v_do_mna(struct pt_regs *regs, unsigned long addr, unsigned long type_c</span>
 	force_sig_info(SIGBUS, &amp;info, current);
 }
 
<span class="p_add">+/* sun4v_mem_corrupt_detect_precise() - Handle precise exception on an ADI</span>
<span class="p_add">+ * tag mismatch.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * ADI version tag mismatch on a load from memory always results in a</span>
<span class="p_add">+ * precise exception. Tag mismatch on a store to memory will result in</span>
<span class="p_add">+ * precise exception if MCDPER or PMCDPER is set to 1.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void sun4v_mem_corrupt_detect_precise(struct pt_regs *regs, unsigned long addr,</span>
<span class="p_add">+				      unsigned long context)</span>
<span class="p_add">+{</span>
<span class="p_add">+	siginfo_t info;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (notify_die(DIE_TRAP, &quot;memory corruption precise exception&quot;, regs,</span>
<span class="p_add">+		       0, 0x8, SIGSEGV) == NOTIFY_STOP)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (regs-&gt;tstate &amp; TSTATE_PRIV) {</span>
<span class="p_add">+		/* MCD exception could happen because the task was running</span>
<span class="p_add">+		 * a system call with MCD enabled and passed a non-versioned</span>
<span class="p_add">+		 * pointer or pointer with bad version tag to  the system</span>
<span class="p_add">+		 * call.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		const struct exception_table_entry *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+		entry = search_exception_tables(regs-&gt;tpc);</span>
<span class="p_add">+		if (entry) {</span>
<span class="p_add">+			/* Looks like a bad syscall parameter */</span>
<span class="p_add">+#ifdef DEBUG_EXCEPTIONS</span>
<span class="p_add">+			pr_emerg(&quot;Exception: PC&lt;%016lx&gt; faddr&lt;UNKNOWN&gt;\n&quot;,</span>
<span class="p_add">+				 regs-&gt;tpc);</span>
<span class="p_add">+			pr_emerg(&quot;EX_TABLE: insn&lt;%016lx&gt; fixup&lt;%016lx&gt;\n&quot;,</span>
<span class="p_add">+				 regs-&gt;tpc, entry-&gt;fixup);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+			regs-&gt;tpc = entry-&gt;fixup;</span>
<span class="p_add">+			regs-&gt;tnpc = regs-&gt;tpc + 4;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pr_emerg(&quot;%s: ADDR[%016lx] CTX[%lx], going.\n&quot;,</span>
<span class="p_add">+			 __func__, addr, context);</span>
<span class="p_add">+		die_if_kernel(&quot;MCD precise&quot;, regs);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (test_thread_flag(TIF_32BIT)) {</span>
<span class="p_add">+		regs-&gt;tpc &amp;= 0xffffffff;</span>
<span class="p_add">+		regs-&gt;tnpc &amp;= 0xffffffff;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	info.si_signo = SIGSEGV;</span>
<span class="p_add">+	info.si_code = SEGV_ADIPERR;</span>
<span class="p_add">+	info.si_errno = 0;</span>
<span class="p_add">+	info.si_addr = (void __user *) addr;</span>
<span class="p_add">+	info.si_trapno = 0;</span>
<span class="p_add">+	force_sig_info(SIGSEGV, &amp;info, current);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void do_privop(struct pt_regs *regs)
 {
 	enum ctx_state prev_state = exception_enter();
<span class="p_header">diff --git a/arch/sparc/kernel/ttable_64.S b/arch/sparc/kernel/ttable_64.S</span>
<span class="p_header">index 18685fe69b91..86e737e59c7e 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/ttable_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/ttable_64.S</span>
<span class="p_chunk">@@ -26,8 +26,10 @@</span> <span class="p_context"> tl0_ill:	membar #Sync</span>
 		TRAP_7INSNS(do_illegal_instruction)
 tl0_privop:	TRAP(do_privop)
 tl0_resv012:	BTRAP(0x12) BTRAP(0x13) BTRAP(0x14) BTRAP(0x15) BTRAP(0x16) BTRAP(0x17)
<span class="p_del">-tl0_resv018:	BTRAP(0x18) BTRAP(0x19) BTRAP(0x1a) BTRAP(0x1b) BTRAP(0x1c) BTRAP(0x1d)</span>
<span class="p_del">-tl0_resv01e:	BTRAP(0x1e) BTRAP(0x1f)</span>
<span class="p_add">+tl0_resv018:	BTRAP(0x18) BTRAP(0x19)</span>
<span class="p_add">+tl0_mcd:	SUN4V_MCD_PRECISE</span>
<span class="p_add">+tl0_resv01b:	BTRAP(0x1b)</span>
<span class="p_add">+tl0_resv01c:	BTRAP(0x1c) BTRAP(0x1d)	BTRAP(0x1e) BTRAP(0x1f)</span>
 tl0_fpdis:	TRAP_NOSAVE(do_fpdis)
 tl0_fpieee:	TRAP_SAVEFPU(do_fpieee)
 tl0_fpother:	TRAP_NOSAVE(do_fpother_check_fitos)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



