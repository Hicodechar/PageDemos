
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/5] ia64: Reduce stack usage by iterating over nodemask - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/5] ia64: Reduce stack usage by iterating over nodemask</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 4, 2016, 11:17 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1462360670-27993-4-git-send-email-matt@codeblueprint.co.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9012351/mbox/"
   >mbox</a>
|
   <a href="/patch/9012351/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9012351/">/patch/9012351/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 6E45F9F1C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 May 2016 11:18:47 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B33A02039C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 May 2016 11:18:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E753A2039D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 May 2016 11:18:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757925AbcEDLSm (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 4 May 2016 07:18:42 -0400
Received: from mail-wm0-f42.google.com ([74.125.82.42]:35843 &quot;EHLO
	mail-wm0-f42.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1757779AbcEDLR6 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 4 May 2016 07:17:58 -0400
Received: by mail-wm0-f42.google.com with SMTP id n129so183991109wmn.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 04 May 2016 04:17:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=codeblueprint-co-uk.20150623.gappssmtp.com; s=20150623;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=yDg730J2olX2fEnpFzdXA/NvIxIgS77QADeWXUc1ryw=;
	b=ZLjwwY+taIbfi8KYtLoQlm9hRMUCrGWqOEj/o6069q8YaLoKHjQsyGweBjt3JZcZCs
	XXAbrl0E1O4rZfJljxsNDy6bxIBeZ6ZWLY0dWg9+vRZ0DHWPf4CrlvPh7BTaHwvdMn40
	V+vb+vjbC5twQ8oMFyTTEeXdCijHTsjZsqHIkSrH+ctWotkHLFGLKiGsvYBx5JR1NHTa
	Vnlz+nBoYiYf9i4K+SuhfrhaM0KO0yaN8SqQ5VuBjzhikAgEvkAMumOZ+MgctioGViGv
	4hZ+scDQUhubbYQpoQVN4vqwn9luPdlKp91Q6Yki0v9dZ/im4CFAyQlp4BXLzA+GsGUf
	rmig==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=yDg730J2olX2fEnpFzdXA/NvIxIgS77QADeWXUc1ryw=;
	b=NJMCZUrbQG9jMsCiWowHUXQT3ON3EKV9dCad/jkb9avkw7XhOpZ8PJFXdrlsis1U1a
	iFOZlLKYVmtT4bjzTNhO0hT2TDEnbvam7mqP1S/61toOG1YTGgzRQ2H65BpWTejj2cEr
	TWcsHqajzcRgKY6nFjsRJNq8v4KolkIR6Aw+Tt0SiRQef7PbLeaONJA1dVYYWeWmQmnz
	rS4DhpWaM16AgbneyTu5tXeElLfPq1kjExAmF+UhU3tzfGLzJVjvs67/Ox0NhYOYCc/4
	3/CoPf4vgoEJMQSKTNyCEzx/tDMy+mO6/VoSBpt+tsp6Kp1BS8NKgyFWSooqWuqZL0zi
	nkCg==
X-Gm-Message-State: AOPr4FXGOaVuaHuMNUUrkiclH/uRdpUMTBoBHDnpSINsdnmGZLbjlWHYYYuDjTbH5d/AeQ==
X-Received: by 10.194.216.33 with SMTP id on1mr8015854wjc.120.1462360676632; 
	Wed, 04 May 2016 04:17:56 -0700 (PDT)
Received: from localhost (bcdc58e5.skybroadband.com. [188.220.88.229])
	by smtp.gmail.com with ESMTPSA id
	kz1sm3600372wjc.46.2016.05.04.04.17.55
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 04 May 2016 04:17:56 -0700 (PDT)
From: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
To: Tony Luck &lt;tony.luck@intel.com&gt;, Fenghua Yu &lt;fenghua.yu@intel.com&gt;
Cc: Bjorn Helgaas &lt;helgaas@kernel.org&gt;, linux-ia64@vger.kernel.org,
	linux-kernel@vger.kernel.org, Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Subject: [PATCH 3/5] ia64: Reduce stack usage by iterating over nodemask
Date: Wed,  4 May 2016 12:17:48 +0100
Message-Id: &lt;1462360670-27993-4-git-send-email-matt@codeblueprint.co.uk&gt;
X-Mailer: git-send-email 2.7.3
In-Reply-To: &lt;1462360670-27993-1-git-send-email-matt@codeblueprint.co.uk&gt;
References: &lt;1462360670-27993-1-git-send-email-matt@codeblueprint.co.uk&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-9.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a> - May 4, 2016, 11:17 a.m.</div>
<pre class="content">
GCC complains about sn2_global_tlb_purge() because of the large stack
required by the function,

  arch/ia64/sn/kernel/sn2/sn2_smp.c: In function &#39;sn2_global_tlb_purge&#39;:
  arch/ia64/sn/kernel/sn2/sn2_smp.c:319:1: warning: the frame size of 2176 bytes is larger than 2048 bytes [-Wframe-larger-than=]

2048 bytes of the stack are consumed by the node ID array &#39;nasids[]&#39;.
But we don&#39;t actually need to put the ID array on the stack and can
use nodemask operations.

Cc: Tony Luck &lt;tony.luck@intel.com&gt;
Cc: Fenghua Yu &lt;fenghua.yu@intel.com&gt;
Cc: Bjorn Helgaas &lt;helgaas@kernel.org&gt;
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
---
 arch/ia64/sn/kernel/sn2/sn2_smp.c | 35 +++++++++++++++++++++++------------
 1 file changed, 23 insertions(+), 12 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ia64/sn/kernel/sn2/sn2_smp.c b/arch/ia64/sn/kernel/sn2/sn2_smp.c</span>
<span class="p_header">index f9c8d9fc5939..c98dc965fe82 100644</span>
<span class="p_header">--- a/arch/ia64/sn/kernel/sn2/sn2_smp.c</span>
<span class="p_header">+++ b/arch/ia64/sn/kernel/sn2/sn2_smp.c</span>
<span class="p_chunk">@@ -54,7 +54,7 @@</span> <span class="p_context"> sn2_ptc_deadlock_recovery_core(volatile unsigned long *, unsigned long,</span>
 			       volatile unsigned long *, unsigned long,
 			       volatile unsigned long *, unsigned long);
 void
<span class="p_del">-sn2_ptc_deadlock_recovery(short *, short, short, int,</span>
<span class="p_add">+sn2_ptc_deadlock_recovery(nodemask_t, short, short, int,</span>
 			  volatile unsigned long *, unsigned long,
 			  volatile unsigned long *, unsigned long);
 
<span class="p_chunk">@@ -169,7 +169,7 @@</span> <span class="p_context"> sn2_global_tlb_purge(struct mm_struct *mm, unsigned long start,</span>
 	int use_cpu_ptcga;
 	volatile unsigned long *ptc0, *ptc1;
 	unsigned long itc, itc2, flags, data0 = 0, data1 = 0, rr_value, old_rr = 0;
<span class="p_del">-	short nasids[MAX_NUMNODES], nix;</span>
<span class="p_add">+	short nix;</span>
 	nodemask_t nodes_flushed;
 	int active, max_active, deadlock, flush_opt = sn2_flush_opt;
 
<span class="p_chunk">@@ -218,9 +218,7 @@</span> <span class="p_context"> sn2_global_tlb_purge(struct mm_struct *mm, unsigned long start,</span>
 	}
 
 	itc = ia64_get_itc();
<span class="p_del">-	nix = 0;</span>
<span class="p_del">-	for_each_node_mask(cnode, nodes_flushed)</span>
<span class="p_del">-		nasids[nix++] = cnodeid_to_nasid(cnode);</span>
<span class="p_add">+	nix = nodes_weight(nodes_flushed);</span>
 
 	rr_value = (mm-&gt;context &lt;&lt; 3) | REGION_NUMBER(start);
 
<span class="p_chunk">@@ -270,8 +268,10 @@</span> <span class="p_context"> sn2_global_tlb_purge(struct mm_struct *mm, unsigned long start,</span>
 			data0 = (data0 &amp; ~SH2_PTC_ADDR_MASK) | (start &amp; SH2_PTC_ADDR_MASK);
 		deadlock = 0;
 		active = 0;
<span class="p_del">-		for (ibegin = 0, i = 0; i &lt; nix; i++) {</span>
<span class="p_del">-			nasid = nasids[i];</span>
<span class="p_add">+		ibegin = 0;</span>
<span class="p_add">+		i = 0;</span>
<span class="p_add">+		for_each_node_mask(cnode, nodes_flushed) {</span>
<span class="p_add">+			nasid = cnodeid_to_nasid(cnode);</span>
 			if (use_cpu_ptcga &amp;&amp; unlikely(nasid == mynasid)) {
 				ia64_ptcga(start, nbits &lt;&lt; 2);
 				ia64_srlz_i();
<span class="p_chunk">@@ -286,13 +286,14 @@</span> <span class="p_context"> sn2_global_tlb_purge(struct mm_struct *mm, unsigned long start,</span>
 				if ((deadlock = wait_piowc())) {
 					if (flush_opt == 1)
 						goto done;
<span class="p_del">-					sn2_ptc_deadlock_recovery(nasids, ibegin, i, mynasid, ptc0, data0, ptc1, data1);</span>
<span class="p_add">+					sn2_ptc_deadlock_recovery(nodes_flushed, ibegin, i, mynasid, ptc0, data0, ptc1, data1);</span>
 					if (reset_max_active_on_deadlock())
 						max_active = 1;
 				}
 				active = 0;
 				ibegin = i + 1;
 			}
<span class="p_add">+			i++;</span>
 		}
 		start += (1UL &lt;&lt; nbits);
 	} while (start &lt; end);
<span class="p_chunk">@@ -327,11 +328,12 @@</span> <span class="p_context"> done:</span>
  */
 
 void
<span class="p_del">-sn2_ptc_deadlock_recovery(short *nasids, short ib, short ie, int mynasid,</span>
<span class="p_add">+sn2_ptc_deadlock_recovery(nodemask_t nodes, short ib, short ie, int mynasid,</span>
 			  volatile unsigned long *ptc0, unsigned long data0,
 			  volatile unsigned long *ptc1, unsigned long data1)
 {
 	short nasid, i;
<span class="p_add">+	int cnode;</span>
 	unsigned long *piows, zeroval, n;
 
 	__this_cpu_inc(ptcstats.deadlocks);
<span class="p_chunk">@@ -339,17 +341,26 @@</span> <span class="p_context"> sn2_ptc_deadlock_recovery(short *nasids, short ib, short ie, int mynasid,</span>
 	piows = (unsigned long *) pda-&gt;pio_write_status_addr;
 	zeroval = pda-&gt;pio_write_status_val;
 
<span class="p_add">+	i = 0;</span>
<span class="p_add">+	for_each_node_mask(cnode, nodes) {</span>
<span class="p_add">+		if (i &lt; ib)</span>
<span class="p_add">+			goto next;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (i &gt; ie)</span>
<span class="p_add">+			break;</span>
 
<span class="p_del">-	for (i=ib; i &lt;= ie; i++) {</span>
<span class="p_del">-		nasid = nasids[i];</span>
<span class="p_add">+		nasid = cnodeid_to_nasid(cnode);</span>
 		if (local_node_uses_ptc_ga(is_shub1()) &amp;&amp; nasid == mynasid)
<span class="p_del">-			continue;</span>
<span class="p_add">+			goto next;</span>
<span class="p_add">+</span>
 		ptc0 = CHANGE_NASID(nasid, ptc0);
 		if (ptc1)
 			ptc1 = CHANGE_NASID(nasid, ptc1);
 
 		n = sn2_ptc_deadlock_recovery_core(ptc0, data0, ptc1, data1, piows, zeroval);
 		__this_cpu_add(ptcstats.deadlocks2, n);
<span class="p_add">+next:</span>
<span class="p_add">+		i++;</span>
 	}
 
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



