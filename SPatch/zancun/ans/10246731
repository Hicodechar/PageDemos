
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>selftests/vm: Update max va test to check for high address return. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    selftests/vm: Update max va test to check for high address return.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 28, 2018, 3:58 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180228035830.10089-1-aneesh.kumar@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10246731/mbox/"
   >mbox</a>
|
   <a href="/patch/10246731/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10246731/">/patch/10246731/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6E81B60362 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Feb 2018 04:03:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5F8B828CD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Feb 2018 04:03:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 53AC628CD7; Wed, 28 Feb 2018 04:03:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D385A28CD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Feb 2018 04:03:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752196AbeB1D6y (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 27 Feb 2018 22:58:54 -0500
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:56716 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1752172AbeB1D6v (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 27 Feb 2018 22:58:51 -0500
Received: from pps.filterd (m0098414.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id
	w1S3t7W4084548
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 27 Feb 2018 22:58:50 -0500
Received: from e38.co.us.ibm.com (e38.co.us.ibm.com [32.97.110.159])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2gdfyk9anx-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 27 Feb 2018 22:58:50 -0500
Received: from localhost
	by e38.co.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from
	&lt;aneesh.kumar@linux.vnet.ibm.com&gt;; Tue, 27 Feb 2018 20:58:49 -0700
Received: from b03cxnp07028.gho.boulder.ibm.com (9.17.130.15)
	by e38.co.us.ibm.com (192.168.1.138) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Tue, 27 Feb 2018 20:58:46 -0700
Received: from b03ledav006.gho.boulder.ibm.com
	(b03ledav006.gho.boulder.ibm.com [9.17.130.237])
	by b03cxnp07028.gho.boulder.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id w1S3wkV213041972; Tue, 27 Feb 2018 20:58:46 -0700
Received: from b03ledav006.gho.boulder.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 37A65C6043;
	Tue, 27 Feb 2018 20:58:46 -0700 (MST)
Received: from skywalker.ibmmodules.com (unknown [9.85.71.165])
	by b03ledav006.gho.boulder.ibm.com (Postfix) with ESMTP id 0861EC603C;
	Tue, 27 Feb 2018 20:58:43 -0700 (MST)
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
To: akpm@linux-foundation.org,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Subject: [PATCH] selftests/vm: Update max va test to check for high address
	return.
Date: Wed, 28 Feb 2018 09:28:30 +0530
X-Mailer: git-send-email 2.14.3
X-TM-AS-GCONF: 00
x-cbid: 18022803-0028-0000-0000-0000093C014A
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00008601; HX=3.00000241; KW=3.00000007;
	PH=3.00000004; SC=3.00000254; SDB=6.00996132; UDB=6.00506390;
	IPR=6.00775455; 
	MB=3.00019771; MTD=3.00000008; XFM=3.00000015; UTC=2018-02-28 03:58:48
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18022803-0029-0000-0000-000039C6EC3C
Message-Id: &lt;20180228035830.10089-1-aneesh.kumar@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2018-02-28_01:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1011 lowpriorityscore=0 impostorscore=0 adultscore=0
	classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1709140000
	definitions=main-1802280045
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Feb. 28, 2018, 3:58 a.m.</div>
<pre class="content">
mmap(-1,..) is expected to search from max supported VA top down. It should find
an address above ADDR_SWITCH_HINT. Explicitly check for this.

Also derefer the address even if we failed the addr check.
<span class="signed-off-by">
Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
---
 tools/testing/selftests/vm/va_128TBswitch.c | 27 ++++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Feb. 28, 2018, 8:08 a.m.</div>
<pre class="content">
&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt; writes:
<span class="quote">
&gt; mmap(-1,..) is expected to search from max supported VA top down. It should find</span>
<span class="quote">&gt; an address above ADDR_SWITCH_HINT. Explicitly check for this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Also derefer the address even if we failed the addr check.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>

One issue I noticed is how to make this conditional so that we can still
run the test on x86 with 4 level page table?
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  tools/testing/selftests/vm/va_128TBswitch.c | 27 ++++++++++++++++++++-------</span>
<span class="quote">&gt;  1 file changed, 20 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/tools/testing/selftests/vm/va_128TBswitch.c b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="quote">&gt; index e7fe734c374f..f68fa4bd8179 100644</span>
<span class="quote">&gt; --- a/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="quote">&gt; +++ b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="quote">&gt; @@ -44,6 +44,7 @@ struct testcase {</span>
<span class="quote">&gt;  	unsigned long flags;</span>
<span class="quote">&gt;  	const char *msg;</span>
<span class="quote">&gt;  	unsigned int low_addr_required:1;</span>
<span class="quote">&gt; +	unsigned int high_addr_required:1;</span>
<span class="quote">&gt;  	unsigned int keep_mapped:1;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -108,6 +109,7 @@ static struct testcase testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR)&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = HIGH_ADDR,</span>
<span class="quote">&gt; @@ -115,12 +117,14 @@ static struct testcase testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR) again&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = HIGH_ADDR,</span>
<span class="quote">&gt;  		.size = 2 * PAGE_SIZE,</span>
<span class="quote">&gt;  		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = (void *) -1,</span>
<span class="quote">&gt; @@ -128,12 +132,14 @@ static struct testcase testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(-1)&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = (void *) -1,</span>
<span class="quote">&gt;  		.size = 2 * PAGE_SIZE,</span>
<span class="quote">&gt;  		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(-1) again&quot;,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="quote">&gt; @@ -193,6 +199,7 @@ static struct testcase hugetlb_testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = HIGH_ADDR,</span>
<span class="quote">&gt; @@ -200,12 +207,14 @@ static struct testcase hugetlb_testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = HIGH_ADDR,</span>
<span class="quote">&gt;  		.size = HUGETLB_SIZE,</span>
<span class="quote">&gt;  		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = (void *) -1,</span>
<span class="quote">&gt; @@ -213,12 +222,14 @@ static struct testcase hugetlb_testcases[] = {</span>
<span class="quote">&gt;  		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,</span>
<span class="quote">&gt;  		.keep_mapped = 1,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = (void *) -1,</span>
<span class="quote">&gt;  		.size = HUGETLB_SIZE,</span>
<span class="quote">&gt;  		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="quote">&gt;  		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,</span>
<span class="quote">&gt; +		.high_addr_required = 1,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  	{</span>
<span class="quote">&gt;  		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),</span>
<span class="quote">&gt; @@ -257,14 +268,16 @@ static int run_test(struct testcase *test, int count)</span>
<span class="quote">&gt;  		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(ADDR_SWITCH_HINT)) {</span>
<span class="quote">&gt;  			printf(&quot;FAILED\n&quot;);</span>
<span class="quote">&gt;  			ret = 1;</span>
<span class="quote">&gt; -		} else {</span>
<span class="quote">&gt; -			/*</span>
<span class="quote">&gt; -			 * Do a dereference of the address returned so that we catch</span>
<span class="quote">&gt; -			 * bugs in page fault handling</span>
<span class="quote">&gt; -			 */</span>
<span class="quote">&gt; -			memset(p, 0, t-&gt;size);</span>
<span class="quote">&gt; +		} else if (t-&gt;high_addr_required &amp;&amp; p &lt; (void *)(ADDR_SWITCH_HINT)) {</span>
<span class="quote">&gt; +			printf(&quot;FAILED\n&quot;);</span>
<span class="quote">&gt; +			ret = 1;</span>
<span class="quote">&gt; +		} else</span>
<span class="quote">&gt;  			printf(&quot;OK\n&quot;);</span>
<span class="quote">&gt; -		}</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * Do a dereference of the address returned so that we catch</span>
<span class="quote">&gt; +		 * bugs in page fault handling</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		memset(p, 0, t-&gt;size);</span>
<span class="quote">&gt;  		if (!t-&gt;keep_mapped)</span>
<span class="quote">&gt;  			munmap(p, t-&gt;size);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.14.3</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 28, 2018, 10:58 a.m.</div>
<pre class="content">
On Wed, Feb 28, 2018 at 09:28:30AM +0530, Aneesh Kumar K.V wrote:
<span class="quote">&gt; mmap(-1,..) is expected to search from max supported VA top down. It should find</span>
<span class="quote">&gt; an address above ADDR_SWITCH_HINT. Explicitly check for this.</span>

Hm. I don&#39;t think this correct. -1 means the application supports any
address, not restricted to 47-bit address space. It doesn&#39;t mean the
application *require* the address to be above 47-bit.

At least on x86, -1 just shift upper boundary of address range where we
can look for unmapped area.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/testing/selftests/vm/va_128TBswitch.c b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="p_header">index e7fe734c374f..f68fa4bd8179 100644</span>
<span class="p_header">--- a/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="p_chunk">@@ -44,6 +44,7 @@</span> <span class="p_context"> struct testcase {</span>
 	unsigned long flags;
 	const char *msg;
 	unsigned int low_addr_required:1;
<span class="p_add">+	unsigned int high_addr_required:1;</span>
 	unsigned int keep_mapped:1;
 };
 
<span class="p_chunk">@@ -108,6 +109,7 @@</span> <span class="p_context"> static struct testcase testcases[] = {</span>
 		.flags = MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(HIGH_ADDR)&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = HIGH_ADDR,
<span class="p_chunk">@@ -115,12 +117,14 @@</span> <span class="p_context"> static struct testcase testcases[] = {</span>
 		.flags = MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(HIGH_ADDR) again&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = HIGH_ADDR,
 		.size = 2 * PAGE_SIZE,
 		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,
 		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = (void *) -1,
<span class="p_chunk">@@ -128,12 +132,14 @@</span> <span class="p_context"> static struct testcase testcases[] = {</span>
 		.flags = MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(-1)&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = (void *) -1,
 		.size = 2 * PAGE_SIZE,
 		.flags = MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(-1) again&quot;,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),
<span class="p_chunk">@@ -193,6 +199,7 @@</span> <span class="p_context"> static struct testcase hugetlb_testcases[] = {</span>
 		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = HIGH_ADDR,
<span class="p_chunk">@@ -200,12 +207,14 @@</span> <span class="p_context"> static struct testcase hugetlb_testcases[] = {</span>
 		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = HIGH_ADDR,
 		.size = HUGETLB_SIZE,
 		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,
 		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = (void *) -1,
<span class="p_chunk">@@ -213,12 +222,14 @@</span> <span class="p_context"> static struct testcase hugetlb_testcases[] = {</span>
 		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,
 		.keep_mapped = 1,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = (void *) -1,
 		.size = HUGETLB_SIZE,
 		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,
 		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,
<span class="p_add">+		.high_addr_required = 1,</span>
 	},
 	{
 		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),
<span class="p_chunk">@@ -257,14 +268,16 @@</span> <span class="p_context"> static int run_test(struct testcase *test, int count)</span>
 		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(ADDR_SWITCH_HINT)) {
 			printf(&quot;FAILED\n&quot;);
 			ret = 1;
<span class="p_del">-		} else {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Do a dereference of the address returned so that we catch</span>
<span class="p_del">-			 * bugs in page fault handling</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			memset(p, 0, t-&gt;size);</span>
<span class="p_add">+		} else if (t-&gt;high_addr_required &amp;&amp; p &lt; (void *)(ADDR_SWITCH_HINT)) {</span>
<span class="p_add">+			printf(&quot;FAILED\n&quot;);</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+		} else</span>
 			printf(&quot;OK\n&quot;);
<span class="p_del">-		}</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Do a dereference of the address returned so that we catch</span>
<span class="p_add">+		 * bugs in page fault handling</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		memset(p, 0, t-&gt;size);</span>
 		if (!t-&gt;keep_mapped)
 			munmap(p, t-&gt;size);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



