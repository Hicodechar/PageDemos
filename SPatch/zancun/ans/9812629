
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,RESEND,38/38] x86/mm: Add support to make use of Secure Memory Encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,RESEND,38/38] x86/mm: Add support to make use of Secure Memory Encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 27, 2017, 3:14 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170627151447.17428.56826.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9812629/mbox/"
   >mbox</a>
|
   <a href="/patch/9812629/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9812629/">/patch/9812629/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A7D1B6020A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:31:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 97A7D28687
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:31:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8BE5228589; Tue, 27 Jun 2017 15:31:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A466228687
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:31:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752837AbdF0Pbr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 27 Jun 2017 11:31:47 -0400
Received: from mail-sn1nam01on0045.outbound.protection.outlook.com
	([104.47.32.45]:37674
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752753AbdF0PO5 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 27 Jun 2017 11:14:57 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=tyiv9e6h7oBcQg9shnkfBL26rUn0KAyG5QUspnbXnec=;
	b=XkOi6hI66KwCvvRadC5/utgCb3CWH/TJpgXL46PSVC+9A34tWZpWyltv0Soz5SksK749QvGynLU9+7iBZ9VEnh5RwOgowVEymQR2IzicRQZySdh682Ev6hdyFbfgVB9EXoqqC/gOVxC5PyYE8JR8rBglRG+gxyRLKUeg4M/Fgo4=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	CY4PR12MB1144.namprd12.prod.outlook.com (10.168.164.136) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1199.15; Tue, 27 Jun 2017 15:14:51 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v8 RESEND 38/38] x86/mm: Add support to make use of Secure
	Memory Encryption
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, xen-devel@lists.xen.org,
	linux-mm@kvack.org, iommu@lists.linux-foundation.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Date: Tue, 27 Jun 2017 10:14:48 -0500
Message-ID: &lt;20170627151447.17428.56826.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170627150718.17428.81813.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170627150718.17428.81813.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR11CA0023.namprd11.prod.outlook.com (10.172.17.33) To
	CY4PR12MB1144.namprd12.prod.outlook.com (10.168.164.136)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 96b7d2c9-f149-481f-e336-08d4bd6f445b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095);
	SRVR:CY4PR12MB1144; 
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	3:2CYy+8FgcBH4kOHFcWXv1xccmgkq3jtRZNorGNfHE1W+dAnA8Nxc/J9DvV/h2oUkoUxT0+0QBYFt0WiGGuVUBHZwscxHJ7TSVHrIFp1bdQkPlXVXGpgX7l90DCk+Bk/EtmnuwUskNqrjkaNeeuGQyNcQ7zPJDPqHYR1j2mWaqTAaFnSOTFHS34EmeLIIgigVVMy20b8NwbUGt4pJGeCwtqAOBvvTAaqfum/k37bZrZsjvYU9GiiENZr7LRO90PK57uRwX0l/LX518m5eJxzwjyOAdPkrOcVscZ+6YW9hjSmawmDAABby1l3m9r9KSbsWZYIdeLXbQgStTIivI0R2Ag0EajKeOsbzxlUY4SIkwDDbThY8y10tJhMdl/M05CMTlzPRzkwMDTEAIt1GG8eqepUxXTFkaQanp6A8oGVTQz0ltXyGg+3md0lPIR/12M1s1pQwYRdoY3heXbBCqaPV4sJ9gtHSHTQmSUERiOHASZcSSshssNk/S0CgHOczn4KIkya0OEyfjJDEcwMUYkXIIa+Qo+rLZOiIThGzFtkub06LhnU6la9mqtVoZLW6Ep5WNv4kZ/yst7ZJ5TRzURpueptIlGL6Jb9oFnTJ0fyFPrDQTUeEN6PESseAXvsCJR4+u0Nm3eZyF3KORAb44Y98ibHKnizDu1FOYp71bMp8R/c4n+JvyWGM4A1heqUkguRa+kETC/Nuw2OIvABjRMYS6g==
X-MS-TrafficTypeDiagnostic: CY4PR12MB1144:
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	25:Aig8yDgV0iOLNFe/lVClPBJYDBqhGqPKaX1wUuW4ORr3FG9ju6TyXWZnT0pWNsaK+qWLdb+Bz79emrbz5xXZmDoIl22iwXtNMpmgaLR4sgH2NpoUKUVL2nmDMPRoJ5WUUSII7eM01HaIjkPDNQIaPIT7EM5rHFQWJ4Zja/LD3DtC4iuh8mcEe8Eg7i7/ns+4MHsNMnqQvZA3paky9MP2qbcPVZnEJ57IdmWWwMlXYh2PWy93fNSfPYipTAW6EAggxpjtsvPltgg4vR+rr6lD672yZLdYFf5Zc77/+wmNSeQM75RHQCZRg9b5pmoV101M2McNiK/wLZXZgQpleAtY4TPHrFFeH6CjWg/jr4h+TYSkHqTAW6/lloYoaI3OeAIS2bQF/VWNBegZ+05MStJlQJuTjyk9TKM5bRclfSoBDWv3A23jOYd3OLxp6y+tBkrUetDfvCZOUWJImrUidSQSqijmu6n0Ya7QFSgBPLabuEUZZzC3V5x/i9Nled3sP0ohQ5wKXAwTaMBSuMTF+N0DBs0N9it/pXPN+4ISq+FfZHuX40NjFfCZQjK53iak5V9dNjBRW7S5rJVlHyXaJEU5tVsWV6YJ0gSV0CLhumZteoUBbe9IVaN+2CqvUyHx0Vkud6RFgVmLN2hQfl1gi5MOhT5+lY5CG9rwobOj9kQ6QOO0efzFzJ7YpftNgLtXtm5r6z1tmh5QEvorZyIhY+MSO/MDEl5V24v12NJPBH8NRmTNrPlufC33kOuJYN9tX3tV4JJNMq2S+ii9sG2F5y9om9wrKS3PC4Q/pDPBhdZkynT3psSY5W4rGgn6v99pfqhhV6Q9kKFlmV612XsVhDnDD4AWpwYgv7k8Yd0skLAKM/loZCnp6pTx0YsFzfxUS0c7H0dXrL7MmZTgXYtKTSKbWeFY3OxVclArjH7jb4ogK
	+Q=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	31:3kIh0mkOW3StExCBA76uEB0KtqhdzVWLio0S2bAtTry5mVwe9jQ0wlbrO7c4sgwUNR6bid2brow4HwHT+L7SrC7YWDbXQh2ZT2kTcL3URmiWECDCFDpLHNVYaAz273sfmVyKIpTYBoGV32szDmlzVwKQDnDArheCH2+OV0TxQKAUBipuJP6lF2ZnHDg93GCtE4wCcG5iLJKEdPxd63jfVfwm1GnyudxyFLyjtKIe2goDEbqwI3D/j7rTediK4MWeTIpSto/wjRp2eXGG6prHenMojdGzIlOqKHnXHc0eUEmVaqO8hMymUm+dBAnYmcsqy9BarXasMv1vkMvBbPfRLGLpTOGKFYwepkNuc8/SggGpav/7573SMjRkc4ogIMM6ZbQ+FEvL3E0vKuQza5v5vE5UBRAV/aMZQxrqyKiMbaHdjwwXoL8mXnGtjvCSGaLeSgDmtCKEFk+SQ0u390yDBljkBqMzWzKK+x8IZXJBGf1nUzyTy8lf8uBjY+0ZMjiPdCxC+PQJMRJAqQqPVRco1UbMGW8WVJMY1tWsJwr4YpChlz6fJdS8QZ6NSN22h0vJNKHUG7R5xHhyyEYDNh2n+qxhNi4/fAoqZZ5rhacBFEjIjeDGjZtmcgu973cJbMPmN50dYIWXpCuSpO1hhjuvuw2Z45+C177/Vk/pEH8yL1c=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	20:zfDp1tpzZBt6Tm7kZAf6gt0Zti0eHmt/Afb+QGjz3TgZRnI5Bf5MKWwY2naR718S4WfTFtHmytzbq3eSf5WhKj5OaRKCNN/AGRZbUSrr4lrbnI1am+gnzkKcrTRdGTgjDy5uCy6TFOHVoZldfKmIwRSVSl2z3mCY8JS8Jm7EuI6tEd7my2+97fY0/mhFvA0uLc286h63HLaLkYh8+qcfTdOtcX0BKGKyEXD3zoqIXWovUrUj/mxqOEUrv8h4x/rPSB5pt/fy1+MrGpRgGbgwsGSgEwelhH0GelEpyEil4iPe1ZmErswE8A+mrYe8MoDTQxlRHsVRjeAJltlyZWAulp0Hk96JIckGGdN+5rNFkIFYhdA9bI5wqPdawMjqQCuDO78gussYgzEMYhZ7BQLkHIEk6NSsK/00unaxWsNhXxc6QxCU4KIwxvKb7GYmiqEL6YEaZwS3nBJS7QgYPX7Rbpw38UBuziJxyIelYUIbXdCGmyPf+K0iJCoJyQX0nJEV
X-Microsoft-Antispam-PRVS: &lt;CY4PR12MB1144C3273A6ECA7433197285ECDC0@CY4PR12MB1144.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(125551606395959)(133145235818549)(236129657087228)(767451399110)(167848164394848);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(5005006)(8121501046)(3002001)(93006095)(93001095)(10201501046)(100000703101)(100105400095)(6055026)(6041248)(20161123562025)(20161123560025)(20161123555025)(20161123564025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY4PR12MB1144; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY4PR12MB1144; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQ0OzQ6dElBZnd0RDV6VU52YTJzdkVYK1FkdG1MZFpT?=
	=?utf-8?B?aTF4dWlSUDBueG9OQUFneFlxMmI0WlNLd3duR3kySlBaNExhZkZGM0VKcStS?=
	=?utf-8?B?Lzd5R3R4Q2dwekh4cFg4bEQ1bGRQNytON3NOQVJyRzJmUFdGTjBLMWw1NlF0?=
	=?utf-8?B?Q0xtRTBkY2JVQXloV1ZWZFN0NFFuWmZDa0VnMkp1ZWI4UEFrYkZBUnRNd21H?=
	=?utf-8?B?OEEyelZMcUNOdGxjcTg1NDNvdzNMTjJvSXNHYWI1SEg2dkdLSWRlMWljemw1?=
	=?utf-8?B?aW1xZkM4djdIMllGQlNtUURMSTZxV2l5R3NxTWlFWnU3OVcvZy9na3JUUGhk?=
	=?utf-8?B?NGo4R2JYcjdkRElMV2RpQ1BzRDFIMGRsaVpkQ1BFZkJqNU9ncDQyazNwQmVr?=
	=?utf-8?B?UEIvcEdtVmRNMFI4bElJSkxRUUVKL01IVmJtMW8vQm10QlVyZ3FKVU5IbU4r?=
	=?utf-8?B?QVI5RVhjcGJqQUx3cTlUZTNtVFFhMGlDN3ZnNFIwOVdGWG42em93VzhCTkRB?=
	=?utf-8?B?U3VjbCt0eUNYQWJYd0ltSy9udGFUMjN2M0M3UkVmVG1vcFFvMHhyK1IyNjZC?=
	=?utf-8?B?eXpSZkpacHhubUtaa09IQjhNQW4rdGEwWXB5MUdsdk5jOW9RZDRXYUNyYVFw?=
	=?utf-8?B?UjB1K3BuR3R5NGlSbkEvVGtRMDRydm9KSU9HMzBSY2ZodVVKTHU0dCtzcTdw?=
	=?utf-8?B?czdQaFBqUW9abWVpanhZcERDMWhWTXk3SjZIOVZDRVdyQ0RFWWRVdk9aUXFR?=
	=?utf-8?B?V3cybFBmYVVnQVlQWllzZ01SVU1kZFJKMC9PT2xMS1Z2K2lKQzI2RUdUdUdl?=
	=?utf-8?B?aUMyekVWcGdEOG9XWGgwZ05OZU9yRW9LNFZrM2VCL0VhUjU1dkRxRVptUVQr?=
	=?utf-8?B?MUdQWkN6Uy8xK0dCMjF6RC8zQmV2dGgyeHM0Q01tZHdZZDdyYU5WTCtqNEhs?=
	=?utf-8?B?VjFPc0Q0OS9ENGprV0tmdGFSTWdLckw3cU5meDBwbHJJNlJlN3FaQlVzUkQx?=
	=?utf-8?B?dTRFQ2RSVFUvL2NBTDZFYTF4eVNJMnNxMjdiOWZobXRpNHRSdFpPWmtpZHM1?=
	=?utf-8?B?UjlJT0UwMG5KcUt5QTNkckZUODBxS2dBOWtqam9rd3dqMjRMd1V1bGF6aHpQ?=
	=?utf-8?B?UmRPcFlvbnZDbENITkZycGRSdXBoR2ZDYnJFdkl5QlBMNGNac3BoMnN1Zys1?=
	=?utf-8?B?YXlodlp6NHd1R3g1YTY0cEI2WkhzdW1veUVHQWNieEhTSlVDd3F2c0YzWmdJ?=
	=?utf-8?B?bzJJWVVwM1V2QVFKUlJvOGlhVDNXb1doem9IMGVXeDd0Nnd6QW9xRXJMZW44?=
	=?utf-8?B?WTNZR293eVNidHZvaEZxa0hZbWtxdGNlVzdKNTBRRzQzU09Hczk3ZWttRzlE?=
	=?utf-8?B?TUdvWElJVlRTQ0V0Z0hXRmlEYk5vckVwdisyRzArQ3VKeWVXU05tQWhGcm5K?=
	=?utf-8?B?U2d4Y2YybWlvNmk3MGVZTzkzVG9hUjRuRGJNb2Vmbm4rckpqOE1TVVgvNndV?=
	=?utf-8?B?bjAyMXFHWUFFUm41Q0ExNmg2NU0wSkJzLzFMbStYMGVFNWtNWjJFcExLS3Vv?=
	=?utf-8?B?NHVaaklaWTRjMVhDcCtlSTZzWFdyaENUSzlOWVZlVDVES0I2aWJ4TmVlVUdz?=
	=?utf-8?B?Z3JEbEJCeGFMUXFhd2VuQWM1anlSNlpNR0dSallqV21uMDNQNzQ1eFYvb0x6?=
	=?utf-8?B?aTQxVXNGVDVrMmE5bWNWZkRERU5pQVFONnlqRExEUnpHZ1dYSXo3WTZ0OEtQ?=
	=?utf-8?B?bW1yUmxsdWpLS2oxLzlaVE9SQ1M3Vi9XMjRJcUwyZ2cwa0xldWxOZ3paQU5Q?=
	=?utf-8?Q?WuKpx+3kBtM2?=
X-Forefront-PRVS: 0351D213B3
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39410400002)(39400400002)(39860400002)(39850400002)(39450400003)(39840400002)(4326008)(25786009)(76176999)(8676002)(4001350100001)(2906002)(478600001)(97746001)(50986999)(305945005)(6666003)(2950100002)(23676002)(54356999)(5660300001)(53936002)(86362001)(7736002)(7416002)(7406005)(110136004)(189998001)(47776003)(66066001)(38730400002)(50466002)(53416004)(42186005)(9686003)(103116003)(6506006)(83506001)(54906002)(55016002)(3846002)(81166006)(72206003)(230700001)(33646002)(6116002)(1076002)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY4PR12MB1144;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQ0OzIzOlZSK2JSUnBnMW5KSjRlNUxaK1lNS2h6Zm0r?=
	=?utf-8?B?NHdKMTJRZUxIOThuYW5oOElWUE9yR3QyM2FjeHdnNHBiMGFZRjQxa0tMbXRj?=
	=?utf-8?B?V2ZyVVVyd2kwc2VJN0FFaXBYQ212NlFONk1WNldKUUJvOGhycWY2ME5STFFp?=
	=?utf-8?B?SmlVaVRnaVphTUpFT01zcnpzRTJCa3BMQWdzQS9xMjU3UlFGWS9nVTFMcTYw?=
	=?utf-8?B?b1RSYXVPTUVmS2p5MUxOYlhJY04zWC8yN3I0dTcwUjE2OUJBdThFaU9qVGds?=
	=?utf-8?B?aGVqMEw1bzdGam5tZ0tVb3FkOUtKN3dOb0FsU0Z5bFY2Y1BXbWVxaDk0YklX?=
	=?utf-8?B?Zy9vWDhOT2pIbXVXNFVQU3lyRmhXVUs0UmJ2S1Q0VUo1NXRlMFlZTUdjQU91?=
	=?utf-8?B?SGlhZGVPVXpmS1N0M1RWNnU4WldOQzB1MDlCbXBBYkRJTmZYZm53U2VCSVlY?=
	=?utf-8?B?VFpjeEVBRUxsV0lRK1JQOXUzdWhZVS9sc1pUaXZkMEoxN21JMmpnbE43dEVI?=
	=?utf-8?B?alk1QVVHN09nTFhlaUR3cTA2Nk1WRjZxZW91YlNmNCtJZE5VNXFxT01rMUpR?=
	=?utf-8?B?TG5IMXhpTVR4R2taVUxaLytzaDRXKy9udHRBK09VeTNSL0xHOGRTbW9UMjR4?=
	=?utf-8?B?Slk2eUxwQmdQT2wyWmU0RjhERW85dkVTa3RBMWhnL05WRERkdmhNOFA2bi9R?=
	=?utf-8?B?aHlxbzlOT2lKbFc4c0kxMWdiVXp3WmovYXozbmEwM2k3Nk5UMlRYZHhMSXll?=
	=?utf-8?B?TlQwUllFQW9GRW11M2duWk5EMEkxdXFLeXY3ZXlsUG45dVN2RW13VHJoM214?=
	=?utf-8?B?Z21JeEFWbXpNa0JZVWp5ekdCdUk4aU1JSUNkUW5pK3Z2cDBLNlFQSHNSaTZX?=
	=?utf-8?B?M05MRWlQUlNWY24zZTBLV0VJbFZNcEZsTmNjOEtTU3creUpHRjNoMEtMUVZZ?=
	=?utf-8?B?OVNSNWxmdy9BdG92R09CMEdMRytaVlJHbGgzK1JMZkUzUTNYcXdHWGxlSjhl?=
	=?utf-8?B?L3JuWnMzaVU5a2VHSFFkY2xkcUliT3Y5a0d3TnVXNEppemRMaHpBRVc1dE55?=
	=?utf-8?B?czZRY2I0WU1Qa3QrdGJUN2tDbkdVb2YrYTZPK1RmK3E1Qnl3RkFhWHJVSWlr?=
	=?utf-8?B?bmdGdXVidXIyUDQ1VkFDNS9vL1RxL1FRcEdTd2lFdjVXSjNjd3NoUVQ1dDdH?=
	=?utf-8?B?VUxvV2dVZDI4ckt3UHRsMWRBM2dqZEhqeGhTZWdOaFRQUTJWOFlNblVyMmUz?=
	=?utf-8?B?WWpCaXpHWmF3WitSUW9tUFM1WUN2SkdkUHcrZ1orLzdPZVdVQUV3VzlwTHla?=
	=?utf-8?B?NnRFUEszalo0NTFQU3ErU2tKcDM0VlNqUUVVOWROMEhva2FFMVZxWWNIZU1L?=
	=?utf-8?B?UDgwVDNGc3dHWlRxSjFhVCtVaTRSSEJIY1JOb0tZM3RCM29LVmE4WHlpMklV?=
	=?utf-8?B?YmVPRlEwQXg1ZXU3VWtmUDJ3YnIyNEhvcXpVNnA0SXNxS1dMNVlZamNHVFNt?=
	=?utf-8?B?OUR1dXlxUHFoSTN1dWU0UXVEc05JcGpSRUxaY0lEUm1XWFZEVGdYVHV4U3dX?=
	=?utf-8?B?Mzl2My9RdmVneUZXTldvVjVTWmx3bHZIQlQwMTY4SVF4WW1BNzZXK3pEb0V1?=
	=?utf-8?B?SXYyTWE4ejNOY3NMejJoektsVWlmdUl5dGtwckZ0YkhRZjFhakZZWEw5Z3lh?=
	=?utf-8?Q?OmE1d4/ZD2axGcG3GM=3D?=
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQ0OzY6Uy9GWnB6OUdzcmtWRnNaL0NBTTFaZGlqRTBC?=
	=?utf-8?B?VU4zREM5MldjOFFwb2tXVzM0QnVGbXB4SmRmaHQrNVYzb3cvbDRrN3pFbnFu?=
	=?utf-8?B?MVhHWlpqNzRJdUxyMW5zeG8vVXlmbVJSTXkxMk1YL2xtWldDNThFb0dXWnpn?=
	=?utf-8?B?S1RpQlJwdC9BVnRMTFU2VjhSTFJQS2xOL0NxSnRNVlFXM0dzb1VlU0ZvdTF2?=
	=?utf-8?B?ZEtVM0lQYzBvcGQvL2I2MHc1UHRtalg1K1JhRGo0VS9IR0tYa2I5ZTArZGIx?=
	=?utf-8?B?cG5TU2NOOW9DcmU4ZDcyU2JpSkVtMzZEemwwQnJ5NDVqMk54WEs2aHJSOE9j?=
	=?utf-8?B?eis1VnNud294Tm8xb2tER2lmNUJLZ0RyWEx1bVROY3F4THNyUnVnaGdISHpI?=
	=?utf-8?B?a2FDV2RCdFZmQVgwbWZidDFqVjQ3K28zUCt6OXBJZWgvWjZGbzhXSzBWZCtN?=
	=?utf-8?B?ZVJHT0NXK01FODFGWnpFcWNYM2E4TEdDR3hMbjE1VHZyVVlveE5JMllzWFVs?=
	=?utf-8?B?eDZZd2ZjaU9xZ292ckZkQ1BFL3Z6bGRtenFZMEpNMlpDd2kwYjhKajk2d0w1?=
	=?utf-8?B?cERHOXB4dlpKMlRsbmxZekE5ZDQ1dWpRT2JqVk1WTDdmWnNSZHZZb0VvVjNq?=
	=?utf-8?B?a3VwZk80OExQcTNUK1MxMW92WGVaTHprc1FONXNYdFZSU3RFenMrVlVyMDlk?=
	=?utf-8?B?SlVLVHVOd3BPcUVGV2x6NUd3KzVkb2ZuZ2cvb0R2U3d2WFg3TVlxaitsT2Jq?=
	=?utf-8?B?Y0ZJTlE0U0ZkbUM2Z3pINEYwdzdQakZUaUxyL0N6UHpJLzNLeU1kYVEyZGZM?=
	=?utf-8?B?ZXRRUGVEcEpZUmxGRVkwaGdDb1RnM3RuYmIzOW5tOTRLK2IrQlVjL0NHS2Na?=
	=?utf-8?B?NFpBMzVhdEEzeHQxT2xtVG5xeVh6Qmw5REg0SmJybGtYUVlIeFlxdHFJNVh6?=
	=?utf-8?B?QVY5Z2xLc2ZJRldaSk05L0VJREIraHMzVHZIQjlucVBXOExlL2c3cExBQklh?=
	=?utf-8?B?NkpCaTBlK01wa1N6Wk9NWWs4M2h4enFMVmthN3EyWjFjdkwwZi9tRnBVTW1Q?=
	=?utf-8?B?TCs4KzJCamZpaHg1Um4yY25CL3hGYnZaK1RpcERVNzdHQ1diNjdIMERkZk42?=
	=?utf-8?B?bFRVWm5tT3B2WFl0dHlYK1NEVDdTTWlhSzNmR0xPcmt5MXFtSmVOSkhvMXc4?=
	=?utf-8?B?THRQcjVrSEZ2RndLYU1IRHB4MEh6SDc3aEE2a2VoZ2pDYklBRXQzK3B0WlVl?=
	=?utf-8?B?YUVTcXJQMlF1RytONHBPTlQvZEhTaVV4NWFJWEIzMUl2WmJVdldXZzZoZ0tZ?=
	=?utf-8?B?Y28yWnVlNTRrS1JtcVNNVkI5YkFiYWRpRWdPbG1nZ3hkTXpvSEtNeUs0ZnZ6?=
	=?utf-8?Q?YV0/UXo?=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	5:PsrmGI6BUz0RlIrBH1cc9cDd8qU+13BE2Y+E5qdjOrPqDG+IIApHEju7BMXwMsPZuua6xNw7VTiQgp5B46F8a/lk48JBYvuRNiF/N8iNcsmUqP2cav+Ng0rm+FPjeiWYv/kYOysIiIyDROrvBK/cFOJRWJgRfm0TfMptryTmcvFOHl53kHaGxJTdJ/8GmOPt1lERw8vb7TN6GK7saBzuSst4SFa04AbBt2tGKn/AC+7LBpxvD2cUflniFp9eKATnJq3KNDvjRpOKZr3EZQTUbPLLdCO3ibyFaDq/JVMG+x0zzQqPt+9HMr5kdy5smgTHPpNiXgjzd1uLberZ4/jruM9Ez4gXTvwwTYTJ1qDHsn65rzu15zsUjrKfizkT99I+zeN6Gnf4BsG5gYkbKVpNagRZGSsz76GQUJz8It2fyaA2LSB4+vpc+ZOkl5bOMdWkaQYQhCPd6x4X5dlu3pkOo9pYHC6XA6vKVYuPX7cvgYy1mRyCHj4g27mJa6KbyQsh;
	24:pGQ9L+wTDy9iPnz2Gx+cq/j1FB38giStcCxDnvRumAngvbiEjeSBVmutRP5S16Hr0MofteEQcG9szV99lRRRU1y9p4FwsEEsL/sFMOmphNQ=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	7:97uvKgt8cEcgRX5Okwt5SS/6Raiar/M8X9tj+u2GCQ41EixD5UDMvRK8TMiL3YsaRF+p3X0d6zkbz6wGgWGNpvir7L425v6xmIUnn6zXEH5omba5RquhosUI8I3XJtmC7pJ8O6/DEupM070kmb1nOE3XGIsbgouNiiiRpzeRn8Q+2nlsaqFHRiLJ1rBjIPvTs0ga0CIsDcN9KiXVSKGP+nL0edR88cZeNwb+i3BQ31EoOmew8sn/V3RxQJaQQrbhvQUAUQ7m9IPvC+YRPjtk6nn/ShC+nUtU0hOBGeOhhh8bVG1LqiDlWfPoG4NXHtcj0wspBIk+pYgFwnQtiB0fnMqQofBvuNeBGAt/Hr0qHN2g1H9d6Tl+270eeim/iMUu7D/i5T830+4x8b0DLlcLYuZ/Hpx74KjGUSjl65YN6OtUOVyvvsFFT8E8hhV6l0lwo76SLimAAL3bZ8jYrlR0SHBXROo1rUGHwrsaLqQ+I/WaDUsB2bxC0QcOJQi4b2atI3sPciojyUNL7O4WyRx/+SpQ26YvLK11EP5dV1WxaqD3zd7VzZRueRPD/+t15vT8BPr6ochubUE+d7mptWss+KIr+n7u/B3OMSCMzLD/v7Ztt20dLMA5sL0fkRDBNbjqBX2uadEA1WBnAjfnb51qBIePPNUP999xeFjEddrJaGK82rF+Y7YKmsDjJdS0DKBkIwtHoZJ/lt2tV/HtWb8lxeFR3K3dnvRnlY97pEck3ZoDNgv3Pu38gx+ZLl8DBy/Id1djYcqOTwqTG/FsRDO3S6e30lIc/9ET+XDtDMjVNZA=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	20:0o32JwWMuBf2rgujQMjaU/eGJbBB91B3jJgyQi+XkCMrIIASVGNKb0RFE/+bBq6bi5VADEMJtjq8uxzYkaTR9xlxyRhaC07yO4JXqxZLmvFCO2JFzZ4H/MnjkkT3lpTqQGmtZPXgyceu84cGYpRCdvhBBO2u4gmz73AFOp/FGVgrFO206+Q9/SG4AEZBY/yRoryl4ep2s00NZyPblShNXAbloqJ5Z6LLihFxx7MutbqUG6Uc07j9sgZh7urmQPJn
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 27 Jun 2017 15:14:51.8537
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1144
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 27, 2017, 3:14 p.m.</div>
<pre class="content">
Add support to check if SME has been enabled and if memory encryption
should be activated (checking of command line option based on the
configuration of the default state).  If memory encryption is to be
activated, then the encryption mask is set and the kernel is encrypted
&quot;in place.&quot;
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |    6 ++-
 arch/x86/kernel/head64.c           |    5 +-
 arch/x86/mm/mem_encrypt.c          |   77 ++++++++++++++++++++++++++++++++++++
 3 files changed, 83 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 7122c36..8e618fc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -17,6 +17,8 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/init.h&gt;
 
<span class="p_add">+#include &lt;asm/bootparam.h&gt;</span>
<span class="p_add">+</span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 extern unsigned long sme_me_mask;
<span class="p_chunk">@@ -38,7 +40,7 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 void __init sme_early_init(void);
 
 void __init sme_encrypt_kernel(void);
<span class="p_del">-void __init sme_enable(void);</span>
<span class="p_add">+void __init sme_enable(struct boot_params *bp);</span>
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
<span class="p_chunk">@@ -60,7 +62,7 @@</span> <span class="p_context"> static inline void __init sme_unmap_bootdata(char *real_mode_data) { }</span>
 static inline void __init sme_early_init(void) { }
 
 static inline void __init sme_encrypt_kernel(void) { }
<span class="p_del">-static inline void __init sme_enable(void) { }</span>
<span class="p_add">+static inline void __init sme_enable(struct boot_params *bp) { }</span>
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index 0cdb53b..925b292 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -45,7 +45,8 @@</span> <span class="p_context"> static void __head *fixup_pointer(void *ptr, unsigned long physaddr)</span>
 	return ptr - (void *)_text + (void *)physaddr;
 }
 
<span class="p_del">-unsigned long __head __startup_64(unsigned long physaddr)</span>
<span class="p_add">+unsigned long __head __startup_64(unsigned long physaddr,</span>
<span class="p_add">+				  struct boot_params *bp)</span>
 {
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
<span class="p_chunk">@@ -70,7 +71,7 @@</span> <span class="p_context"> unsigned long __head __startup_64(unsigned long physaddr)</span>
 		for (;;);
 
 	/* Activate Secure Memory Encryption (SME) if supported and enabled */
<span class="p_del">-	sme_enable();</span>
<span class="p_add">+	sme_enable(bp);</span>
 
 	/* Include the SME encryption mask in the fixup value */
 	load_delta += sme_get_me_mask();
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index e5d5439..053d540 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
 #include &lt;linux/swiotlb.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
<span class="p_chunk">@@ -23,6 +24,13 @@</span> <span class="p_context"></span>
 #include &lt;asm/set_memory.h&gt;
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/cmdline.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static char sme_cmdline_arg[] __initdata = &quot;mem_encrypt&quot;;</span>
<span class="p_add">+static char sme_cmdline_on[]  __initdata = &quot;on&quot;;</span>
<span class="p_add">+static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -190,6 +198,8 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 
 	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */
 	swiotlb_update_mem_attributes();
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);</span>
 }
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
<span class="p_chunk">@@ -513,6 +523,71 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	native_write_cr3(__native_read_cr3());
 }
 
<span class="p_del">-void __init sme_enable(void)</span>
<span class="p_add">+void __init __nostackp sme_enable(struct boot_params *bp)</span>
 {
<span class="p_add">+	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;</span>
<span class="p_add">+	unsigned int eax, ebx, ecx, edx;</span>
<span class="p_add">+	bool active_by_default;</span>
<span class="p_add">+	unsigned long me_mask;</span>
<span class="p_add">+	char buffer[16];</span>
<span class="p_add">+	u64 msr;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for the SME support leaf */</span>
<span class="p_add">+	eax = 0x80000000;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (eax &lt; 0x8000001f)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SME feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_add">+	 *     Secure Memory Encryption support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	eax = 0x8000001f;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (!(eax &amp; 1))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	me_mask = 1UL &lt;&lt; (ebx &amp; 0x3f);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if SME is enabled */</span>
<span class="p_add">+	msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_add">+	if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Fixups have not been applied to phys_base yet and we&#39;re running</span>
<span class="p_add">+	 * identity mapped, so we must obtain the address to the SME command</span>
<span class="p_add">+	 * line argument data using rip-relative addressing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_arg(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_arg)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_arg));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_on(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_on)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_on));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_off(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_off)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_off));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT))</span>
<span class="p_add">+		active_by_default = true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		active_by_default = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_ptr = (const char *)((u64)bp-&gt;hdr.cmd_line_ptr |</span>
<span class="p_add">+				     ((u64)bp-&gt;ext_cmd_line_ptr &lt;&lt; 32));</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_find_option(cmdline_ptr, cmdline_arg, buffer, sizeof(buffer));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!strncmp(buffer, cmdline_on, sizeof(buffer)))</span>
<span class="p_add">+		sme_me_mask = me_mask;</span>
<span class="p_add">+	else if (!strncmp(buffer, cmdline_off, sizeof(buffer)))</span>
<span class="p_add">+		sme_me_mask = 0;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		sme_me_mask = active_by_default ? me_mask : 0;</span>
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



