
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv7,10/11] arm64: Use __pa_symbol for kernel symbols - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv7,10/11] arm64: Use __pa_symbol for kernel symbols</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=130411">Laura Abbott</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 10, 2017, 9:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1484084150-1523-11-git-send-email-labbott@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9508563/mbox/"
   >mbox</a>
|
   <a href="/patch/9508563/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9508563/">/patch/9508563/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9BCF460231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 21:37:03 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8C6CA285C3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 21:37:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 810B0285C7; Tue, 10 Jan 2017 21:37:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D82E7285C5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 21:37:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753735AbdAJVgj (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 10 Jan 2017 16:36:39 -0500
Received: from mail-qk0-f172.google.com ([209.85.220.172]:35013 &quot;EHLO
	mail-qk0-f172.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753656AbdAJVgc (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 10 Jan 2017 16:36:32 -0500
Received: by mail-qk0-f172.google.com with SMTP id u25so573194904qki.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 10 Jan 2017 13:36:31 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=APEysw8cWzqsKYqdcLJTkZNlzLYavvWfdzf+X7oNyho=;
	b=lIPE5wmb4B5IfZTXGnhLJsb+gRYyuh78KYBxoexkLX8UOaQnuwiSJiAFiwNkHMUUNh
	SWU0AAZGUxjJDMh5k32/NpC79K1JVWMUSTXQOcYKYXfdFcy0ia1/1ZDDX6i3zfPcVj0T
	6GiW9ZVVycE/CgdbSSyDVN4FCumXzQzH2XBY7f3ogM4rm7LJwOdA/wPDUa875umRu/BL
	64Xq8F1NCMw2yULUpKKwUzH8AURpnWg8xOyLxGORIBaG2SsGVbi+xfbEMjyYK+ja7e0Z
	myJj86GeTPE7Yk9loTebpEe+07YX6TTjDGERfWgGqFLO/KJ/vySilv67vlsWKRErbqr1
	KAPA==
X-Gm-Message-State: AIkVDXKUY6TMCdaV8PKjrKcqtdthOJ34zh6jS46/xNZhy/01/6RyL52TTLORt5cVGA+yPpy8
X-Received: by 10.55.149.131 with SMTP id x125mr5057207qkd.128.1484084190838;
	Tue, 10 Jan 2017 13:36:30 -0800 (PST)
Received: from labbott-redhat-machine.redhat.com ([2601:602:9802:a8dc::6b06])
	by smtp.gmail.com with ESMTPSA id
	n188sm2406857qkc.30.2017.01.10.13.36.27
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 10 Jan 2017 13:36:29 -0800 (PST)
From: Laura Abbott &lt;labbott@redhat.com&gt;
To: Mark Rutland &lt;mark.rutland@arm.com&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Marc Zyngier &lt;marc.zyngier@arm.com&gt;,
	Lorenzo Pieralisi &lt;lorenzo.pieralisi@arm.com&gt;,
	Florian Fainelli &lt;f.fainelli@gmail.com&gt;
Cc: Laura Abbott &lt;labbott@redhat.com&gt;, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, x86@kernel.org,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;,
	linux-arm-kernel@lists.infradead.org
Subject: [PATCHv7 10/11] arm64: Use __pa_symbol for kernel symbols
Date: Tue, 10 Jan 2017 13:35:49 -0800
Message-Id: &lt;1484084150-1523-11-git-send-email-labbott@redhat.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1484084150-1523-1-git-send-email-labbott@redhat.com&gt;
References: &lt;1484084150-1523-1-git-send-email-labbott@redhat.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=130411">Laura Abbott</a> - Jan. 10, 2017, 9:35 p.m.</div>
<pre class="content">
__pa_symbol is technically the marcro that should be used for kernel
symbols. Switch to this as a pre-requisite for DEBUG_VIRTUAL which
will do bounds checking.
<span class="reviewed-by">
Reviewed-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="tested-by">Tested-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Laura Abbott &lt;labbott@redhat.com&gt;</span>
---
 arch/arm64/include/asm/kvm_mmu.h          |  4 ++--
 arch/arm64/include/asm/memory.h           |  1 +
 arch/arm64/include/asm/mmu_context.h      |  6 +++---
 arch/arm64/include/asm/pgtable.h          |  2 +-
 arch/arm64/kernel/acpi_parking_protocol.c |  3 ++-
 arch/arm64/kernel/cpu-reset.h             |  2 +-
 arch/arm64/kernel/cpufeature.c            |  3 ++-
 arch/arm64/kernel/hibernate.c             | 20 +++++--------------
 arch/arm64/kernel/insn.c                  |  2 +-
 arch/arm64/kernel/psci.c                  |  3 ++-
 arch/arm64/kernel/setup.c                 |  9 +++++----
 arch/arm64/kernel/smp_spin_table.c        |  3 ++-
 arch/arm64/kernel/vdso.c                  |  8 ++++++--
 arch/arm64/mm/init.c                      | 12 ++++++-----
 arch/arm64/mm/kasan_init.c                | 22 ++++++++++++++-------
 arch/arm64/mm/mmu.c                       | 33 ++++++++++++++++++++-----------
 16 files changed, 76 insertions(+), 57 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">index 6f72fe8..55772c1 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -47,7 +47,7 @@</span> <span class="p_context"></span>
  * If the page is in the bottom half, we have to use the top half. If
  * the page is in the top half, we have to use the bottom half:
  *
<span class="p_del">- * T = __virt_to_phys(__hyp_idmap_text_start)</span>
<span class="p_add">+ * T = __pa_symbol(__hyp_idmap_text_start)</span>
  * if (T &amp; BIT(VA_BITS - 1))
  *	HYP_VA_MIN = 0  //idmap in upper half
  * else
<span class="p_chunk">@@ -271,7 +271,7 @@</span> <span class="p_context"> static inline void __kvm_flush_dcache_pud(pud_t pud)</span>
 	kvm_flush_dcache_to_poc(page_address(page), PUD_SIZE);
 }
 
<span class="p_del">-#define kvm_virt_to_phys(x)		__virt_to_phys((unsigned long)(x))</span>
<span class="p_add">+#define kvm_virt_to_phys(x)		__pa_symbol(x)</span>
 
 void kvm_set_way_flush(struct kvm_vcpu *vcpu);
 void kvm_toggle_cache(struct kvm_vcpu *vcpu, bool was_enabled);
<span class="p_header">diff --git a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h</span>
<span class="p_header">index cd6e3ee..0ff237a 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/memory.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/memory.h</span>
<span class="p_chunk">@@ -210,6 +210,7 @@</span> <span class="p_context"> static inline void *phys_to_virt(phys_addr_t x)</span>
 #define __va(x)			((void *)__phys_to_virt((phys_addr_t)(x)))
 #define pfn_to_kaddr(pfn)	__va((pfn) &lt;&lt; PAGE_SHIFT)
 #define virt_to_pfn(x)      __phys_to_pfn(__virt_to_phys((unsigned long)(x)))
<span class="p_add">+#define sym_to_pfn(x)	    __phys_to_pfn(__pa_symbol(x))</span>
 
 /*
  *  virt_to_page(k)	convert a _valid_ virtual address to struct page *
<span class="p_header">diff --git a/arch/arm64/include/asm/mmu_context.h b/arch/arm64/include/asm/mmu_context.h</span>
<span class="p_header">index 0363fe8..63e9982 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -45,7 +45,7 @@</span> <span class="p_context"> static inline void contextidr_thread_switch(struct task_struct *next)</span>
  */
 static inline void cpu_set_reserved_ttbr0(void)
 {
<span class="p_del">-	unsigned long ttbr = virt_to_phys(empty_zero_page);</span>
<span class="p_add">+	unsigned long ttbr = __pa_symbol(empty_zero_page);</span>
 
 	write_sysreg(ttbr, ttbr0_el1);
 	isb();
<span class="p_chunk">@@ -114,7 +114,7 @@</span> <span class="p_context"> static inline void cpu_install_idmap(void)</span>
 	local_flush_tlb_all();
 	cpu_set_idmap_tcr_t0sz();
 
<span class="p_del">-	cpu_switch_mm(idmap_pg_dir, &amp;init_mm);</span>
<span class="p_add">+	cpu_switch_mm(lm_alias(idmap_pg_dir), &amp;init_mm);</span>
 }
 
 /*
<span class="p_chunk">@@ -129,7 +129,7 @@</span> <span class="p_context"> static inline void cpu_replace_ttbr1(pgd_t *pgd)</span>
 
 	phys_addr_t pgd_phys = virt_to_phys(pgd);
 
<span class="p_del">-	replace_phys = (void *)virt_to_phys(idmap_cpu_replace_ttbr1);</span>
<span class="p_add">+	replace_phys = (void *)__pa_symbol(idmap_cpu_replace_ttbr1);</span>
 
 	cpu_install_idmap();
 	replace_phys(pgd_phys);
<span class="p_header">diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">index ffbb9a5..090134c 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -52,7 +52,7 @@</span> <span class="p_context"> extern void __pgd_error(const char *file, int line, unsigned long val);</span>
  * for zero-mapped memory areas etc..
  */
 extern unsigned long empty_zero_page[PAGE_SIZE / sizeof(unsigned long)];
<span class="p_del">-#define ZERO_PAGE(vaddr)	pfn_to_page(PHYS_PFN(__pa(empty_zero_page)))</span>
<span class="p_add">+#define ZERO_PAGE(vaddr)	phys_to_page(__pa_symbol(empty_zero_page))</span>
 
 #define pte_ERROR(pte)		__pte_error(__FILE__, __LINE__, pte_val(pte))
 
<span class="p_header">diff --git a/arch/arm64/kernel/acpi_parking_protocol.c b/arch/arm64/kernel/acpi_parking_protocol.c</span>
<span class="p_header">index a32b401..1f5655c 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/acpi_parking_protocol.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/acpi_parking_protocol.c</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
  * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
  */
 #include &lt;linux/acpi.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 #include &lt;linux/types.h&gt;
 
 #include &lt;asm/cpu_ops.h&gt;
<span class="p_chunk">@@ -109,7 +110,7 @@</span> <span class="p_context"> static int acpi_parking_protocol_cpu_boot(unsigned int cpu)</span>
 	 * that read this address need to convert this address to the
 	 * Boot-Loader&#39;s endianness before jumping.
 	 */
<span class="p_del">-	writeq_relaxed(__pa(secondary_entry), &amp;mailbox-&gt;entry_point);</span>
<span class="p_add">+	writeq_relaxed(__pa_symbol(secondary_entry), &amp;mailbox-&gt;entry_point);</span>
 	writel_relaxed(cpu_entry-&gt;gic_cpu_id, &amp;mailbox-&gt;cpu_id);
 
 	arch_send_wakeup_ipi_mask(cpumask_of(cpu));
<span class="p_header">diff --git a/arch/arm64/kernel/cpu-reset.h b/arch/arm64/kernel/cpu-reset.h</span>
<span class="p_header">index d4e9ecb..6c2b1b4 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/cpu-reset.h</span>
<span class="p_header">+++ b/arch/arm64/kernel/cpu-reset.h</span>
<span class="p_chunk">@@ -24,7 +24,7 @@</span> <span class="p_context"> static inline void __noreturn cpu_soft_restart(unsigned long el2_switch,</span>
 
 	el2_switch = el2_switch &amp;&amp; !is_kernel_in_hyp_mode() &amp;&amp;
 		is_hyp_mode_available();
<span class="p_del">-	restart = (void *)virt_to_phys(__cpu_soft_restart);</span>
<span class="p_add">+	restart = (void *)__pa_symbol(__cpu_soft_restart);</span>
 
 	cpu_install_idmap();
 	restart(el2_switch, entry, arg0, arg1, arg2);
<span class="p_header">diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c</span>
<span class="p_header">index fdf8f04..0ec6a1e 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/cpufeature.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/cpufeature.c</span>
<span class="p_chunk">@@ -23,6 +23,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/sort.h&gt;
 #include &lt;linux/stop_machine.h&gt;
 #include &lt;linux/types.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 #include &lt;asm/cpu.h&gt;
 #include &lt;asm/cpufeature.h&gt;
 #include &lt;asm/cpu_ops.h&gt;
<span class="p_chunk">@@ -737,7 +738,7 @@</span> <span class="p_context"> static bool runs_at_el2(const struct arm64_cpu_capabilities *entry, int __unused</span>
 static bool hyp_offset_low(const struct arm64_cpu_capabilities *entry,
 			   int __unused)
 {
<span class="p_del">-	phys_addr_t idmap_addr = virt_to_phys(__hyp_idmap_text_start);</span>
<span class="p_add">+	phys_addr_t idmap_addr = __pa_symbol(__hyp_idmap_text_start);</span>
 
 	/*
 	 * Activate the lower HYP offset only if:
<span class="p_header">diff --git a/arch/arm64/kernel/hibernate.c b/arch/arm64/kernel/hibernate.c</span>
<span class="p_header">index fe301cb..3e94a45 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/hibernate.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/hibernate.c</span>
<span class="p_chunk">@@ -50,9 +50,6 @@</span> <span class="p_context"></span>
  */
 extern int in_suspend;
 
<span class="p_del">-/* Find a symbols alias in the linear map */</span>
<span class="p_del">-#define LMADDR(x)	phys_to_virt(virt_to_phys(x))</span>
<span class="p_del">-</span>
 /* Do we need to reset el2? */
 #define el2_reset_needed() (is_hyp_mode_available() &amp;&amp; !is_kernel_in_hyp_mode())
 
<span class="p_chunk">@@ -102,8 +99,8 @@</span> <span class="p_context"> static inline void arch_hdr_invariants(struct arch_hibernate_hdr_invariants *i)</span>
 
 int pfn_is_nosave(unsigned long pfn)
 {
<span class="p_del">-	unsigned long nosave_begin_pfn = virt_to_pfn(&amp;__nosave_begin);</span>
<span class="p_del">-	unsigned long nosave_end_pfn = virt_to_pfn(&amp;__nosave_end - 1);</span>
<span class="p_add">+	unsigned long nosave_begin_pfn = sym_to_pfn(&amp;__nosave_begin);</span>
<span class="p_add">+	unsigned long nosave_end_pfn = sym_to_pfn(&amp;__nosave_end - 1);</span>
 
 	return (pfn &gt;= nosave_begin_pfn) &amp;&amp; (pfn &lt;= nosave_end_pfn);
 }
<span class="p_chunk">@@ -125,12 +122,12 @@</span> <span class="p_context"> int arch_hibernation_header_save(void *addr, unsigned int max_size)</span>
 		return -EOVERFLOW;
 
 	arch_hdr_invariants(&amp;hdr-&gt;invariants);
<span class="p_del">-	hdr-&gt;ttbr1_el1		= virt_to_phys(swapper_pg_dir);</span>
<span class="p_add">+	hdr-&gt;ttbr1_el1		= __pa_symbol(swapper_pg_dir);</span>
 	hdr-&gt;reenter_kernel	= _cpu_resume;
 
 	/* We can&#39;t use __hyp_get_vectors() because kvm may still be loaded */
 	if (el2_reset_needed())
<span class="p_del">-		hdr-&gt;__hyp_stub_vectors = virt_to_phys(__hyp_stub_vectors);</span>
<span class="p_add">+		hdr-&gt;__hyp_stub_vectors = __pa_symbol(__hyp_stub_vectors);</span>
 	else
 		hdr-&gt;__hyp_stub_vectors = 0;
 
<span class="p_chunk">@@ -460,7 +457,6 @@</span> <span class="p_context"> int swsusp_arch_resume(void)</span>
 	void *zero_page;
 	size_t exit_size;
 	pgd_t *tmp_pg_dir;
<span class="p_del">-	void *lm_restore_pblist;</span>
 	phys_addr_t phys_hibernate_exit;
 	void __noreturn (*hibernate_exit)(phys_addr_t, phys_addr_t, void *,
 					  void *, phys_addr_t, phys_addr_t);
<span class="p_chunk">@@ -481,12 +477,6 @@</span> <span class="p_context"> int swsusp_arch_resume(void)</span>
 		goto out;
 
 	/*
<span class="p_del">-	 * Since we only copied the linear map, we need to find restore_pblist&#39;s</span>
<span class="p_del">-	 * linear map address.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	lm_restore_pblist = LMADDR(restore_pblist);</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
 	 * We need a zero page that is zero before &amp; after resume in order to
 	 * to break before make on the ttbr1 page tables.
 	 */
<span class="p_chunk">@@ -537,7 +527,7 @@</span> <span class="p_context"> int swsusp_arch_resume(void)</span>
 	}
 
 	hibernate_exit(virt_to_phys(tmp_pg_dir), resume_hdr.ttbr1_el1,
<span class="p_del">-		       resume_hdr.reenter_kernel, lm_restore_pblist,</span>
<span class="p_add">+		       resume_hdr.reenter_kernel, restore_pblist,</span>
 		       resume_hdr.__hyp_stub_vectors, virt_to_phys(zero_page));
 
 out:
<span class="p_header">diff --git a/arch/arm64/kernel/insn.c b/arch/arm64/kernel/insn.c</span>
<span class="p_header">index 94b62c1..682f1a6 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/insn.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/insn.c</span>
<span class="p_chunk">@@ -96,7 +96,7 @@</span> <span class="p_context"> static void __kprobes *patch_map(void *addr, int fixmap)</span>
 	if (module &amp;&amp; IS_ENABLED(CONFIG_DEBUG_SET_MODULE_RONX))
 		page = vmalloc_to_page(addr);
 	else if (!module)
<span class="p_del">-		page = pfn_to_page(PHYS_PFN(__pa(addr)));</span>
<span class="p_add">+		page = phys_to_page(__pa_symbol(addr));</span>
 	else
 		return addr;
 
<span class="p_header">diff --git a/arch/arm64/kernel/psci.c b/arch/arm64/kernel/psci.c</span>
<span class="p_header">index 42816be..e8edbf1 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/psci.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/psci.c</span>
<span class="p_chunk">@@ -20,6 +20,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/smp.h&gt;
 #include &lt;linux/delay.h&gt;
 #include &lt;linux/psci.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;uapi/linux/psci.h&gt;
 
<span class="p_chunk">@@ -45,7 +46,7 @@</span> <span class="p_context"> static int __init cpu_psci_cpu_prepare(unsigned int cpu)</span>
 
 static int cpu_psci_cpu_boot(unsigned int cpu)
 {
<span class="p_del">-	int err = psci_ops.cpu_on(cpu_logical_map(cpu), __pa(secondary_entry));</span>
<span class="p_add">+	int err = psci_ops.cpu_on(cpu_logical_map(cpu), __pa_symbol(secondary_entry));</span>
 	if (err)
 		pr_err(&quot;failed to boot CPU%d (%d)\n&quot;, cpu, err);
 
<span class="p_header">diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c</span>
<span class="p_header">index b051367..669fc9f 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/setup.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/setup.c</span>
<span class="p_chunk">@@ -42,6 +42,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/of_fdt.h&gt;
 #include &lt;linux/efi.h&gt;
 #include &lt;linux/psci.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;asm/acpi.h&gt;
 #include &lt;asm/fixmap.h&gt;
<span class="p_chunk">@@ -199,10 +200,10 @@</span> <span class="p_context"> static void __init request_standard_resources(void)</span>
 	struct memblock_region *region;
 	struct resource *res;
 
<span class="p_del">-	kernel_code.start   = virt_to_phys(_text);</span>
<span class="p_del">-	kernel_code.end     = virt_to_phys(__init_begin - 1);</span>
<span class="p_del">-	kernel_data.start   = virt_to_phys(_sdata);</span>
<span class="p_del">-	kernel_data.end     = virt_to_phys(_end - 1);</span>
<span class="p_add">+	kernel_code.start   = __pa_symbol(_text);</span>
<span class="p_add">+	kernel_code.end     = __pa_symbol(__init_begin - 1);</span>
<span class="p_add">+	kernel_data.start   = __pa_symbol(_sdata);</span>
<span class="p_add">+	kernel_data.end     = __pa_symbol(_end - 1);</span>
 
 	for_each_memblock(memory, region) {
 		res = alloc_bootmem_low(sizeof(*res));
<span class="p_header">diff --git a/arch/arm64/kernel/smp_spin_table.c b/arch/arm64/kernel/smp_spin_table.c</span>
<span class="p_header">index 9a00eee..9303465 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/smp_spin_table.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/smp_spin_table.c</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/of.h&gt;
 #include &lt;linux/smp.h&gt;
 #include &lt;linux/types.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/cpu_ops.h&gt;
<span class="p_chunk">@@ -98,7 +99,7 @@</span> <span class="p_context"> static int smp_spin_table_cpu_prepare(unsigned int cpu)</span>
 	 * boot-loader&#39;s endianess before jumping. This is mandated by
 	 * the boot protocol.
 	 */
<span class="p_del">-	writeq_relaxed(__pa(secondary_holding_pen), release_addr);</span>
<span class="p_add">+	writeq_relaxed(__pa_symbol(secondary_holding_pen), release_addr);</span>
 	__flush_dcache_area((__force void *)release_addr,
 			    sizeof(*release_addr));
 
<span class="p_header">diff --git a/arch/arm64/kernel/vdso.c b/arch/arm64/kernel/vdso.c</span>
<span class="p_header">index a2c2478..41b6e31 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/vdso.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/vdso.c</span>
<span class="p_chunk">@@ -123,6 +123,7 @@</span> <span class="p_context"> static int __init vdso_init(void)</span>
 {
 	int i;
 	struct page **vdso_pagelist;
<span class="p_add">+	unsigned long pfn;</span>
 
 	if (memcmp(&amp;vdso_start, &quot;\177ELF&quot;, 4)) {
 		pr_err(&quot;vDSO is not a valid ELF object!\n&quot;);
<span class="p_chunk">@@ -140,11 +141,14 @@</span> <span class="p_context"> static int __init vdso_init(void)</span>
 		return -ENOMEM;
 
 	/* Grab the vDSO data page. */
<span class="p_del">-	vdso_pagelist[0] = pfn_to_page(PHYS_PFN(__pa(vdso_data)));</span>
<span class="p_add">+	vdso_pagelist[0] = phys_to_page(__pa_symbol(vdso_data));</span>
<span class="p_add">+</span>
 
 	/* Grab the vDSO code pages. */
<span class="p_add">+	pfn = sym_to_pfn(&amp;vdso_start);</span>
<span class="p_add">+</span>
 	for (i = 0; i &lt; vdso_pages; i++)
<span class="p_del">-		vdso_pagelist[i + 1] = pfn_to_page(PHYS_PFN(__pa(&amp;vdso_start)) + i);</span>
<span class="p_add">+		vdso_pagelist[i + 1] = pfn_to_page(pfn + i);</span>
 
 	vdso_spec[0].pages = &amp;vdso_pagelist[0];
 	vdso_spec[1].pages = &amp;vdso_pagelist[1];
<span class="p_header">diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c</span>
<span class="p_header">index 716d122..8a27130 100644</span>
<span class="p_header">--- a/arch/arm64/mm/init.c</span>
<span class="p_header">+++ b/arch/arm64/mm/init.c</span>
<span class="p_chunk">@@ -36,6 +36,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/efi.h&gt;
 #include &lt;linux/swiotlb.h&gt;
 #include &lt;linux/vmalloc.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;asm/boot.h&gt;
 #include &lt;asm/fixmap.h&gt;
<span class="p_chunk">@@ -209,8 +210,8 @@</span> <span class="p_context"> void __init arm64_memblock_init(void)</span>
 	 * linear mapping. Take care not to clip the kernel which may be
 	 * high in memory.
 	 */
<span class="p_del">-	memblock_remove(max_t(u64, memstart_addr + linear_region_size, __pa(_end)),</span>
<span class="p_del">-			ULLONG_MAX);</span>
<span class="p_add">+	memblock_remove(max_t(u64, memstart_addr + linear_region_size,</span>
<span class="p_add">+			__pa_symbol(_end)), ULLONG_MAX);</span>
 	if (memstart_addr + linear_region_size &lt; memblock_end_of_DRAM()) {
 		/* ensure that memstart_addr remains sufficiently aligned */
 		memstart_addr = round_up(memblock_end_of_DRAM() - linear_region_size,
<span class="p_chunk">@@ -225,7 +226,7 @@</span> <span class="p_context"> void __init arm64_memblock_init(void)</span>
 	 */
 	if (memory_limit != (phys_addr_t)ULLONG_MAX) {
 		memblock_mem_limit_remove_map(memory_limit);
<span class="p_del">-		memblock_add(__pa(_text), (u64)(_end - _text));</span>
<span class="p_add">+		memblock_add(__pa_symbol(_text), (u64)(_end - _text));</span>
 	}
 
 	if (IS_ENABLED(CONFIG_BLK_DEV_INITRD) &amp;&amp; initrd_start) {
<span class="p_chunk">@@ -278,7 +279,7 @@</span> <span class="p_context"> void __init arm64_memblock_init(void)</span>
 	 * Register the kernel text, kernel data, initrd, and initial
 	 * pagetables with memblock.
 	 */
<span class="p_del">-	memblock_reserve(__pa(_text), _end - _text);</span>
<span class="p_add">+	memblock_reserve(__pa_symbol(_text), _end - _text);</span>
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (initrd_start) {
 		memblock_reserve(initrd_start, initrd_end - initrd_start);
<span class="p_chunk">@@ -484,7 +485,8 @@</span> <span class="p_context"> void __init mem_init(void)</span>
 
 void free_initmem(void)
 {
<span class="p_del">-	free_reserved_area(__va(__pa(__init_begin)), __va(__pa(__init_end)),</span>
<span class="p_add">+	free_reserved_area(lm_alias(__init_begin),</span>
<span class="p_add">+			   lm_alias(__init_end),</span>
 			   0, &quot;unused kernel&quot;);
 	/*
 	 * Unmap the __init region but leave the VM area in place. This
<span class="p_header">diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c</span>
<span class="p_header">index 757009d..201d918 100644</span>
<span class="p_header">--- a/arch/arm64/mm/kasan_init.c</span>
<span class="p_header">+++ b/arch/arm64/mm/kasan_init.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/kernel.h&gt;
 #include &lt;linux/memblock.h&gt;
 #include &lt;linux/start_kernel.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/kernel-pgtable.h&gt;
<span class="p_chunk">@@ -26,6 +27,13 @@</span> <span class="p_context"></span>
 
 static pgd_t tmp_pg_dir[PTRS_PER_PGD] __initdata __aligned(PGD_SIZE);
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The p*d_populate functions call virt_to_phys implicitly so they can&#39;t be used</span>
<span class="p_add">+ * directly on kernel symbols (bm_p*d). All the early functions are called too</span>
<span class="p_add">+ * early to use lm_alias so __p*d_populate functions must be used to populate</span>
<span class="p_add">+ * with the physical address from __pa_symbol.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
 static void __init kasan_early_pte_populate(pmd_t *pmd, unsigned long addr,
 					unsigned long end)
 {
<span class="p_chunk">@@ -33,12 +41,12 @@</span> <span class="p_context"> static void __init kasan_early_pte_populate(pmd_t *pmd, unsigned long addr,</span>
 	unsigned long next;
 
 	if (pmd_none(*pmd))
<span class="p_del">-		pmd_populate_kernel(&amp;init_mm, pmd, kasan_zero_pte);</span>
<span class="p_add">+		__pmd_populate(pmd, __pa_symbol(kasan_zero_pte), PMD_TYPE_TABLE);</span>
 
 	pte = pte_offset_kimg(pmd, addr);
 	do {
 		next = addr + PAGE_SIZE;
<span class="p_del">-		set_pte(pte, pfn_pte(virt_to_pfn(kasan_zero_page),</span>
<span class="p_add">+		set_pte(pte, pfn_pte(sym_to_pfn(kasan_zero_page),</span>
 					PAGE_KERNEL));
 	} while (pte++, addr = next, addr != end &amp;&amp; pte_none(*pte));
 }
<span class="p_chunk">@@ -51,7 +59,7 @@</span> <span class="p_context"> static void __init kasan_early_pmd_populate(pud_t *pud,</span>
 	unsigned long next;
 
 	if (pud_none(*pud))
<span class="p_del">-		pud_populate(&amp;init_mm, pud, kasan_zero_pmd);</span>
<span class="p_add">+		__pud_populate(pud, __pa_symbol(kasan_zero_pmd), PMD_TYPE_TABLE);</span>
 
 	pmd = pmd_offset_kimg(pud, addr);
 	do {
<span class="p_chunk">@@ -68,7 +76,7 @@</span> <span class="p_context"> static void __init kasan_early_pud_populate(pgd_t *pgd,</span>
 	unsigned long next;
 
 	if (pgd_none(*pgd))
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, kasan_zero_pud);</span>
<span class="p_add">+		__pgd_populate(pgd, __pa_symbol(kasan_zero_pud), PUD_TYPE_TABLE);</span>
 
 	pud = pud_offset_kimg(pgd, addr);
 	do {
<span class="p_chunk">@@ -148,7 +156,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 	 */
 	memcpy(tmp_pg_dir, swapper_pg_dir, sizeof(tmp_pg_dir));
 	dsb(ishst);
<span class="p_del">-	cpu_replace_ttbr1(tmp_pg_dir);</span>
<span class="p_add">+	cpu_replace_ttbr1(lm_alias(tmp_pg_dir));</span>
 
 	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);
 
<span class="p_chunk">@@ -199,10 +207,10 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 	 */
 	for (i = 0; i &lt; PTRS_PER_PTE; i++)
 		set_pte(&amp;kasan_zero_pte[i],
<span class="p_del">-			pfn_pte(virt_to_pfn(kasan_zero_page), PAGE_KERNEL_RO));</span>
<span class="p_add">+			pfn_pte(sym_to_pfn(kasan_zero_page), PAGE_KERNEL_RO));</span>
 
 	memset(kasan_zero_page, 0, PAGE_SIZE);
<span class="p_del">-	cpu_replace_ttbr1(swapper_pg_dir);</span>
<span class="p_add">+	cpu_replace_ttbr1(lm_alias(swapper_pg_dir));</span>
 
 	/* At this point kasan is fully initialized. Enable error messages */
 	init_task.kasan_depth = 0;
<span class="p_header">diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c</span>
<span class="p_header">index 17243e4..a434157 100644</span>
<span class="p_header">--- a/arch/arm64/mm/mmu.c</span>
<span class="p_header">+++ b/arch/arm64/mm/mmu.c</span>
<span class="p_chunk">@@ -28,6 +28,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/memblock.h&gt;
 #include &lt;linux/fs.h&gt;
 #include &lt;linux/io.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 #include &lt;asm/barrier.h&gt;
 #include &lt;asm/cputype.h&gt;
<span class="p_chunk">@@ -359,8 +360,8 @@</span> <span class="p_context"> static void create_mapping_late(phys_addr_t phys, unsigned long virt,</span>
 
 static void __init __map_memblock(pgd_t *pgd, phys_addr_t start, phys_addr_t end)
 {
<span class="p_del">-	unsigned long kernel_start = __pa(_text);</span>
<span class="p_del">-	unsigned long kernel_end = __pa(__init_begin);</span>
<span class="p_add">+	unsigned long kernel_start = __pa_symbol(_text);</span>
<span class="p_add">+	unsigned long kernel_end = __pa_symbol(__init_begin);</span>
 
 	/*
 	 * Take care not to create a writable alias for the
<span class="p_chunk">@@ -427,14 +428,14 @@</span> <span class="p_context"> void mark_rodata_ro(void)</span>
 	unsigned long section_size;
 
 	section_size = (unsigned long)_etext - (unsigned long)_text;
<span class="p_del">-	create_mapping_late(__pa(_text), (unsigned long)_text,</span>
<span class="p_add">+	create_mapping_late(__pa_symbol(_text), (unsigned long)_text,</span>
 			    section_size, PAGE_KERNEL_ROX);
 	/*
 	 * mark .rodata as read only. Use __init_begin rather than __end_rodata
 	 * to cover NOTES and EXCEPTION_TABLE.
 	 */
 	section_size = (unsigned long)__init_begin - (unsigned long)__start_rodata;
<span class="p_del">-	create_mapping_late(__pa(__start_rodata), (unsigned long)__start_rodata,</span>
<span class="p_add">+	create_mapping_late(__pa_symbol(__start_rodata), (unsigned long)__start_rodata,</span>
 			    section_size, PAGE_KERNEL_RO);
 
 	/* flush the TLBs after updating live kernel mappings */
<span class="p_chunk">@@ -446,7 +447,7 @@</span> <span class="p_context"> void mark_rodata_ro(void)</span>
 static void __init map_kernel_segment(pgd_t *pgd, void *va_start, void *va_end,
 				      pgprot_t prot, struct vm_struct *vma)
 {
<span class="p_del">-	phys_addr_t pa_start = __pa(va_start);</span>
<span class="p_add">+	phys_addr_t pa_start = __pa_symbol(va_start);</span>
 	unsigned long size = va_end - va_start;
 
 	BUG_ON(!PAGE_ALIGNED(pa_start));
<span class="p_chunk">@@ -494,7 +495,7 @@</span> <span class="p_context"> static void __init map_kernel(pgd_t *pgd)</span>
 		 */
 		BUG_ON(!IS_ENABLED(CONFIG_ARM64_16K_PAGES));
 		set_pud(pud_set_fixmap_offset(pgd, FIXADDR_START),
<span class="p_del">-			__pud(__pa(bm_pmd) | PUD_TYPE_TABLE));</span>
<span class="p_add">+			__pud(__pa_symbol(bm_pmd) | PUD_TYPE_TABLE));</span>
 		pud_clear_fixmap();
 	} else {
 		BUG();
<span class="p_chunk">@@ -525,7 +526,7 @@</span> <span class="p_context"> void __init paging_init(void)</span>
 	 */
 	cpu_replace_ttbr1(__va(pgd_phys));
 	memcpy(swapper_pg_dir, pgd, PAGE_SIZE);
<span class="p_del">-	cpu_replace_ttbr1(swapper_pg_dir);</span>
<span class="p_add">+	cpu_replace_ttbr1(lm_alias(swapper_pg_dir));</span>
 
 	pgd_clear_fixmap();
 	memblock_free(pgd_phys, PAGE_SIZE);
<span class="p_chunk">@@ -534,7 +535,7 @@</span> <span class="p_context"> void __init paging_init(void)</span>
 	 * We only reuse the PGD from the swapper_pg_dir, not the pud + pmd
 	 * allocated with it.
 	 */
<span class="p_del">-	memblock_free(__pa(swapper_pg_dir) + PAGE_SIZE,</span>
<span class="p_add">+	memblock_free(__pa_symbol(swapper_pg_dir) + PAGE_SIZE,</span>
 		      SWAPPER_DIR_SIZE - PAGE_SIZE);
 }
 
<span class="p_chunk">@@ -645,6 +646,12 @@</span> <span class="p_context"> static inline pte_t * fixmap_pte(unsigned long addr)</span>
 	return &amp;bm_pte[pte_index(addr)];
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The p*d_populate functions call virt_to_phys implicitly so they can&#39;t be used</span>
<span class="p_add">+ * directly on kernel symbols (bm_p*d). This function is called too early to use</span>
<span class="p_add">+ * lm_alias so __p*d_populate functions must be used to populate with the</span>
<span class="p_add">+ * physical address from __pa_symbol.</span>
<span class="p_add">+ */</span>
 void __init early_fixmap_init(void)
 {
 	pgd_t *pgd;
<span class="p_chunk">@@ -654,7 +661,7 @@</span> <span class="p_context"> void __init early_fixmap_init(void)</span>
 
 	pgd = pgd_offset_k(addr);
 	if (CONFIG_PGTABLE_LEVELS &gt; 3 &amp;&amp;
<span class="p_del">-	    !(pgd_none(*pgd) || pgd_page_paddr(*pgd) == __pa(bm_pud))) {</span>
<span class="p_add">+	    !(pgd_none(*pgd) || pgd_page_paddr(*pgd) == __pa_symbol(bm_pud))) {</span>
 		/*
 		 * We only end up here if the kernel mapping and the fixmap
 		 * share the top level pgd entry, which should only happen on
<span class="p_chunk">@@ -663,12 +670,14 @@</span> <span class="p_context"> void __init early_fixmap_init(void)</span>
 		BUG_ON(!IS_ENABLED(CONFIG_ARM64_16K_PAGES));
 		pud = pud_offset_kimg(pgd, addr);
 	} else {
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, bm_pud);</span>
<span class="p_add">+		if (pgd_none(*pgd))</span>
<span class="p_add">+			__pgd_populate(pgd, __pa_symbol(bm_pud), PUD_TYPE_TABLE);</span>
 		pud = fixmap_pud(addr);
 	}
<span class="p_del">-	pud_populate(&amp;init_mm, pud, bm_pmd);</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		__pud_populate(pud, __pa_symbol(bm_pmd), PMD_TYPE_TABLE);</span>
 	pmd = fixmap_pmd(addr);
<span class="p_del">-	pmd_populate_kernel(&amp;init_mm, pmd, bm_pte);</span>
<span class="p_add">+	__pmd_populate(pmd, __pa_symbol(bm_pte), PMD_TYPE_TABLE);</span>
 
 	/*
 	 * The boot-ioremap range spans multiple pmds, for which

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



