
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,RESEND,1/2] x86/UV: Introduce a helper function to check UV system at earlier stage - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,RESEND,1/2] x86/UV: Introduce a helper function to check UV system at earlier stage</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=73061">Baoquan He</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 7, 2017, 7:42 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1504770150-25456-2-git-send-email-bhe@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9941689/mbox/"
   >mbox</a>
|
   <a href="/patch/9941689/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9941689/">/patch/9941689/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	555C36035F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 07:42:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 46AB9284F4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 07:42:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3B4C32853B; Thu,  7 Sep 2017 07:42:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2F3CE284F4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 07:42:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754507AbdIGHmq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 7 Sep 2017 03:42:46 -0400
Received: from mx1.redhat.com ([209.132.183.28]:48482 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754443AbdIGHmo (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 7 Sep 2017 03:42:44 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 578AE4A70A;
	Thu,  7 Sep 2017 07:42:44 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 578AE4A70A
Authentication-Results: ext-mx09.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx09.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=bhe@redhat.com
Received: from x1.redhat.com (ovpn-12-34.pek2.redhat.com [10.72.12.34])
	by smtp.corp.redhat.com (Postfix) with ESMTP id EAA816031F;
	Thu,  7 Sep 2017 07:42:38 +0000 (UTC)
From: Baoquan He &lt;bhe@redhat.com&gt;
To: linux-kernel@vger.kernel.org, x86@kernel.org
Cc: mingo@redhat.com, tglx@linutronix.de, hpa@zytor.com,
	thgarnie@google.com, keescook@chromium.org,
	akpm@linux-foundation.org, yamada.masahiro@socionext.com,
	rja@hpe.com, frank.ramsay@hpe.com, Baoquan He &lt;bhe@redhat.com&gt;
Subject: [PATCH v2 RESEND 1/2] x86/UV: Introduce a helper function to check
	UV system at earlier stage
Date: Thu,  7 Sep 2017 15:42:29 +0800
Message-Id: &lt;1504770150-25456-2-git-send-email-bhe@redhat.com&gt;
In-Reply-To: &lt;1504770150-25456-1-git-send-email-bhe@redhat.com&gt;
References: &lt;1504770150-25456-1-git-send-email-bhe@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.38]);
	Thu, 07 Sep 2017 07:42:44 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73061">Baoquan He</a> - Sept. 7, 2017, 7:42 a.m.</div>
<pre class="content">
The BIOS on SGI UV system will report a UV system table which describes
specific firmware capabilities available to the Linux kernel at runtime.
This UV system table only exists on SGI UV system. And it&#39;s detected
in efi_init() which is at very early stage.

So introduce a new helper function is_early_uv_system() to identify if
a system is UV system. Later we will use it to check if the running
system is UV system in mm KASLR code.
<span class="signed-off-by">
Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;travis@sgi.com&gt;</span>
---
 arch/x86/include/asm/uv/uv.h | 6 ++++++
 1 file changed, 6 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73061">Baoquan He</a> - Sept. 14, 2017, 7:29 a.m.</div>
<pre class="content">
Add Dave to the CC list, he may have concerns about the code change.

On 09/07/17 at 03:42pm, Baoquan He wrote:
<span class="quote">&gt; The BIOS on SGI UV system will report a UV system table which describes</span>
<span class="quote">&gt; specific firmware capabilities available to the Linux kernel at runtime.</span>
<span class="quote">&gt; This UV system table only exists on SGI UV system. And it&#39;s detected</span>
<span class="quote">&gt; in efi_init() which is at very early stage.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So introduce a new helper function is_early_uv_system() to identify if</span>
<span class="quote">&gt; a system is UV system. Later we will use it to check if the running</span>
<span class="quote">&gt; system is UV system in mm KASLR code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="quote">&gt; Acked-by: Mike Travis &lt;travis@sgi.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/uv/uv.h | 6 ++++++</span>
<span class="quote">&gt;  1 file changed, 6 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/uv/uv.h b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; index b5a32231abd8..93d7ad8763ba 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; @@ -18,6 +18,11 @@ extern void uv_nmi_init(void);</span>
<span class="quote">&gt;  extern void uv_system_init(void);</span>
<span class="quote">&gt;  extern const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt;  						 const struct flush_tlb_info *info);</span>
<span class="quote">&gt; +#include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt; +static inline int is_early_uv_system(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !((efi.uv_systab == EFI_INVALID_TABLE_ADDR) || !efi.uv_systab);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #else	/* X86_UV */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -30,6 +35,7 @@ static inline const struct cpumask *</span>
<span class="quote">&gt;  uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt;  		    const struct flush_tlb_info *info)</span>
<span class="quote">&gt;  { return cpumask; }</span>
<span class="quote">&gt; +static inline int is_early_uv_system(void)	{ return 0; }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif	/* X86_UV */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.5.5</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=43581">Dave Young</a> - Sept. 14, 2017, 7:49 a.m.</div>
<pre class="content">
On 09/14/17 at 03:29pm, Baoquan He wrote:
<span class="quote">&gt; Add Dave to the CC list, he may have concerns about the code change.</span>

Baoquan, thanks for cc me
<span class="quote">
&gt; </span>
<span class="quote">&gt; On 09/07/17 at 03:42pm, Baoquan He wrote:</span>
<span class="quote">&gt; &gt; The BIOS on SGI UV system will report a UV system table which describes</span>
<span class="quote">&gt; &gt; specific firmware capabilities available to the Linux kernel at runtime.</span>
<span class="quote">&gt; &gt; This UV system table only exists on SGI UV system. And it&#39;s detected</span>
<span class="quote">&gt; &gt; in efi_init() which is at very early stage.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So introduce a new helper function is_early_uv_system() to identify if</span>
<span class="quote">&gt; &gt; a system is UV system. Later we will use it to check if the running</span>
<span class="quote">&gt; &gt; system is UV system in mm KASLR code.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Acked-by: Mike Travis &lt;travis@sgi.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/uv/uv.h | 6 ++++++</span>
<span class="quote">&gt; &gt;  1 file changed, 6 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/include/asm/uv/uv.h b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; index b5a32231abd8..93d7ad8763ba 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; @@ -18,6 +18,11 @@ extern void uv_nmi_init(void);</span>
<span class="quote">&gt; &gt;  extern void uv_system_init(void);</span>
<span class="quote">&gt; &gt;  extern const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; &gt;  						 const struct flush_tlb_info *info);</span>
<span class="quote">&gt; &gt; +#include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt; &gt; +static inline int is_early_uv_system(void)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return !((efi.uv_systab == EFI_INVALID_TABLE_ADDR) || !efi.uv_systab);</span>
<span class="quote">&gt; &gt; +}</span>


Sorry for jumping in late, I have two questions about the patch:

1) For efi tables, the only invalid value is EFI_INVALID_TABLE_ADDR, and
efi struct is initialized as EFI_INVALID_TABLE_ADDR by default so no
need to check &quot;|| !efi.uv_systab&quot;. Do we have any UV firmware specific
assumption that &quot;0&quot; is also possible to be assigned?

2) It seems adding this function in uv.h for separating this for uv
system only purpose. But I feel it is better to put it in efi.h instead.

uv_systab is already a member of struct efi, it is in efi.h so it is
natural to check the table exist or not. Then just include efi.h in
kaslr.c and use the function.

something like drivers/firmware/efi/esrt.c: esrt_table_exists()

Anyway I have no strong opinon, it looks more natural to me though.
<span class="quote">
&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #else	/* X86_UV */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; @@ -30,6 +35,7 @@ static inline const struct cpumask *</span>
<span class="quote">&gt; &gt;  uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; &gt;  		    const struct flush_tlb_info *info)</span>
<span class="quote">&gt; &gt;  { return cpumask; }</span>
<span class="quote">&gt; &gt; +static inline int is_early_uv_system(void)	{ return 0; }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #endif	/* X86_UV */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -- </span>
<span class="quote">&gt; &gt; 2.5.5</span>
<span class="quote">&gt; &gt; </span>

Thanks
Dave
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73061">Baoquan He</a> - Sept. 14, 2017, 8:08 a.m.</div>
<pre class="content">
On 09/14/17 at 03:49pm, Dave Young wrote:
<span class="quote">&gt; &gt; &gt; diff --git a/arch/x86/include/asm/uv/uv.h b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; &gt; index b5a32231abd8..93d7ad8763ba 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/x86/include/asm/uv/uv.h</span>
<span class="quote">&gt; &gt; &gt; @@ -18,6 +18,11 @@ extern void uv_nmi_init(void);</span>
<span class="quote">&gt; &gt; &gt;  extern void uv_system_init(void);</span>
<span class="quote">&gt; &gt; &gt;  extern const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; &gt; &gt;  						 const struct flush_tlb_info *info);</span>
<span class="quote">&gt; &gt; &gt; +#include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt; &gt; &gt; +static inline int is_early_uv_system(void)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	return !((efi.uv_systab == EFI_INVALID_TABLE_ADDR) || !efi.uv_systab);</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; </span>

Thanks for looking into this, Dave!
<span class="quote">
&gt; </span>
<span class="quote">&gt; Sorry for jumping in late, I have two questions about the patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 1) For efi tables, the only invalid value is EFI_INVALID_TABLE_ADDR, and</span>
<span class="quote">&gt; efi struct is initialized as EFI_INVALID_TABLE_ADDR by default so no</span>
<span class="quote">&gt; need to check &quot;|| !efi.uv_systab&quot;. Do we have any UV firmware specific</span>
<span class="quote">&gt; assumption that &quot;0&quot; is also possible to be assigned?</span>

Hmm, in uv_bios_init() it also checks the !efi.uv_systab case. And
EFI_INVALID_TABLE_ADDR checking is earlier, it won&#39;t affect the result
if it&#39;s EFI_INVALID_TABLE_ADDR. And !efi.uv_systab can make it safer
since it doesn&#39;t work either if efi.uv_systab is 0. Mainly it&#39;s not
harmful.

Mike, what&#39;s your thought? Should I only check the (efi.uv_systab ==
EFI_INVALID_TABLE_ADDR) case?
<span class="quote">
&gt; </span>
<span class="quote">&gt; 2) It seems adding this function in uv.h for separating this for uv</span>
<span class="quote">&gt; system only purpose. But I feel it is better to put it in efi.h instead.</span>

At the beginning I put it in efi.c, later Mike suggested putting it in
asm/uv/uv.h. You can also find the discussion in below link.
https://patchwork.kernel.org/patch/9732787/

Thanks
Baoquan
<span class="quote">
&gt; </span>
<span class="quote">&gt; uv_systab is already a member of struct efi, it is in efi.h so it is</span>
<span class="quote">&gt; natural to check the table exist or not. Then just include efi.h in</span>
<span class="quote">&gt; kaslr.c and use the function.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; something like drivers/firmware/efi/esrt.c: esrt_table_exists()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Anyway I have no strong opinon, it looks more natural to me though.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt;  #else	/* X86_UV */</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; @@ -30,6 +35,7 @@ static inline const struct cpumask *</span>
<span class="quote">&gt; &gt; &gt;  uv_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; &gt; &gt;  		    const struct flush_tlb_info *info)</span>
<span class="quote">&gt; &gt; &gt;  { return cpumask; }</span>
<span class="quote">&gt; &gt; &gt; +static inline int is_early_uv_system(void)	{ return 0; }</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt;  #endif	/* X86_UV */</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; -- </span>
<span class="quote">&gt; &gt; &gt; 2.5.5</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks</span>
<span class="quote">&gt; Dave</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/uv/uv.h b/arch/x86/include/asm/uv/uv.h</span>
<span class="p_header">index b5a32231abd8..93d7ad8763ba 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/uv/uv.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/uv/uv.h</span>
<span class="p_chunk">@@ -18,6 +18,11 @@</span> <span class="p_context"> extern void uv_nmi_init(void);</span>
 extern void uv_system_init(void);
 extern const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,
 						 const struct flush_tlb_info *info);
<span class="p_add">+#include &lt;linux/efi.h&gt;</span>
<span class="p_add">+static inline int is_early_uv_system(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !((efi.uv_systab == EFI_INVALID_TABLE_ADDR) || !efi.uv_systab);</span>
<span class="p_add">+}</span>
 
 #else	/* X86_UV */
 
<span class="p_chunk">@@ -30,6 +35,7 @@</span> <span class="p_context"> static inline const struct cpumask *</span>
 uv_flush_tlb_others(const struct cpumask *cpumask,
 		    const struct flush_tlb_info *info)
 { return cpumask; }
<span class="p_add">+static inline int is_early_uv_system(void)	{ return 0; }</span>
 
 #endif	/* X86_UV */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



