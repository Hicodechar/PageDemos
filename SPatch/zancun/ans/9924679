
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] x86: enable RCU based table free - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] x86: enable RCU based table free</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 28, 2017, 8:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170828082251.5562-1-vkuznets@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9924679/mbox/"
   >mbox</a>
|
   <a href="/patch/9924679/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9924679/">/patch/9924679/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C29A660329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Aug 2017 08:23:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AFA612868D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Aug 2017 08:23:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A456B28697; Mon, 28 Aug 2017 08:23:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1C81228696
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Aug 2017 08:23:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754547AbdH1IXA (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 28 Aug 2017 04:23:00 -0400
Received: from mx1.redhat.com ([209.132.183.28]:58926 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752980AbdH1IW4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 28 Aug 2017 04:22:56 -0400
Received: from smtp.corp.redhat.com
	(int-mx03.intmail.prod.int.phx2.redhat.com [10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 6748C61467;
	Mon, 28 Aug 2017 08:22:56 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 6748C61467
Authentication-Results: ext-mx10.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx10.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=vkuznets@redhat.com
Received: from vitty.brq.redhat.com (unknown [10.43.2.155])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 2250C60A9B;
	Mon, 28 Aug 2017 08:22:52 +0000 (UTC)
From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Jork Loeser &lt;Jork.Loeser@microsoft.com&gt;,
	KY Srinivasan &lt;kys@microsoft.com&gt;,
	Stephen Hemminger &lt;sthemmin@microsoft.com&gt;,
	Steven Rostedt &lt;rostedt@goodmis.org&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Andrew Cooper &lt;andrew.cooper3@citrix.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;, xen-devel@lists.xenproject.org
Subject: [PATCH v3] x86: enable RCU based table free
Date: Mon, 28 Aug 2017 10:22:51 +0200
Message-Id: &lt;20170828082251.5562-1-vkuznets@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Mon, 28 Aug 2017 08:22:56 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 28, 2017, 8:22 a.m.</div>
<pre class="content">
On x86 software page-table walkers depend on the fact that remote TLB flush
does an IPI: walk is performed lockless but with interrupts disabled and in
case the pagetable is freed the freeing CPU will get blocked as remote TLB
flush is required. On other architecture which don&#39;t require an IPI to do
remote TLB flush we have an RCU-based mechanism (see
include/asm-generic/tlb.h for more details).

In virtualized environments we may want to override .flush_tlb_others hook
in pv_mmu_ops and use a hypercall asking the hypervisor to do remote TLB
flush for us. This breaks the assumption about IPI. Xen PV does this for
years and the upcoming remote TLB flush for Hyper-V will do it too. This
is not safe, software pagetable walkers may step on an already freed page.

Solve the issue by enabling RCU-based table free mechanism. Testing with
kernbench and mmap/munmap microbenchmars didn&#39;t show any notable
performance impact.

Suggested-by: Peter Zijlstra &lt;peterz@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="acked-by">Acked-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="acked-by">Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
Changes since v2:
- Add Kirill&#39;s Acked-by.
- Add a comment to __tlb_remove_table [Peter Zijlstra]
---
 arch/x86/Kconfig           |  1 +
 arch/x86/include/asm/tlb.h | 14 ++++++++++++++
 arch/x86/mm/pgtable.c      |  8 ++++----
 3 files changed, 19 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 323cb065be5e..b0bfc27d05a2 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -167,6 +167,7 @@</span> <span class="p_context"> config X86</span>
 	select HAVE_HARDLOCKUP_DETECTOR_PERF	if PERF_EVENTS &amp;&amp; HAVE_PERF_EVENTS_NMI
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
<span class="p_add">+	select HAVE_RCU_TABLE_FREE</span>
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_RELIABLE_STACKTRACE		if X86_64 &amp;&amp; FRAME_POINTER &amp;&amp; STACK_VALIDATION
 	select HAVE_STACK_VALIDATION		if X86_64
<span class="p_header">diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="p_header">index c7797307fc2b..79a4ca6a9606 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlb.h</span>
<span class="p_chunk">@@ -15,4 +15,18 @@</span> <span class="p_context"></span>
 
 #include &lt;asm-generic/tlb.h&gt;
 
<span class="p_add">+/*</span>
<span class="p_add">+ * While x86 architecture in general requires an IPI to perform TLB</span>
<span class="p_add">+ * shootdown, enablement code for several hypervisors overrides</span>
<span class="p_add">+ * .flush_tlb_others hook in pv_mmu_ops and implements it by issuing</span>
<span class="p_add">+ * a hypercall. To keep software pagetable walkers safe in this case we</span>
<span class="p_add">+ * switch to RCU based table free (HAVE_RCU_TABLE_FREE). See the comment</span>
<span class="p_add">+ * below &#39;ifdef CONFIG_HAVE_RCU_TABLE_FREE&#39; in include/asm-generic/tlb.h</span>
<span class="p_add">+ * for more details.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void __tlb_remove_table(void *table)</span>
<span class="p_add">+{</span>
<span class="p_add">+	free_page_and_swap_cache(table);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_TLB_H */
<span class="p_header">diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="p_header">index 508a708eb9a6..218834a3e9ad 100644</span>
<span class="p_header">--- a/arch/x86/mm/pgtable.c</span>
<span class="p_header">+++ b/arch/x86/mm/pgtable.c</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"> void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
 {
 	pgtable_page_dtor(pte);
 	paravirt_release_pte(page_to_pfn(pte));
<span class="p_del">-	tlb_remove_page(tlb, pte);</span>
<span class="p_add">+	tlb_remove_table(tlb, pte);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 2
<span class="p_chunk">@@ -72,21 +72,21 @@</span> <span class="p_context"> void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
 	tlb-&gt;need_flush_all = 1;
 #endif
 	pgtable_pmd_page_dtor(page);
<span class="p_del">-	tlb_remove_page(tlb, page);</span>
<span class="p_add">+	tlb_remove_table(tlb, page);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
 void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)
 {
 	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(pud));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(pud));</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 4
 void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)
 {
 	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(p4d));</span>
 }
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



