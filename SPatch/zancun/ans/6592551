
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v4,6/9] mm/hugetlb: alloc_huge_page handle areas hole punched by fallocate - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v4,6/9] mm/hugetlb: alloc_huge_page handle areas hole punched by fallocate</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 11, 2015, 9:01 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1434056500-2434-7-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6592551/mbox/"
   >mbox</a>
|
   <a href="/patch/6592551/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6592551/">/patch/6592551/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 1F823C0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:03:00 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id F2C732041A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:02:59 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F24A0203FB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:02:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932658AbbFKVCq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 11 Jun 2015 17:02:46 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:26971 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754818AbbFKVCd (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 11 Jun 2015 17:02:33 -0400
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t5BL268Z028174
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 11 Jun 2015 21:02:06 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0021.oracle.com (8.13.8/8.13.8) with ESMTP id t5BL25cg018845
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 11 Jun 2015 21:02:05 GMT
Received: from abhmp0007.oracle.com (abhmp0007.oracle.com [141.146.116.13])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	t5BL24uY020484; Thu, 11 Jun 2015 21:02:05 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 11 Jun 2015 14:02:04 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC v4 PATCH 6/9] mm/hugetlb: alloc_huge_page handle areas hole
	punched by fallocate
Date: Thu, 11 Jun 2015 14:01:37 -0700
Message-Id: &lt;1434056500-2434-7-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1434056500-2434-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1434056500-2434-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 11, 2015, 9:01 p.m.</div>
<pre class="content">
Areas hole punched by fallocate will not have entries in the
region/reserve map.  However, shared mappings with min_size subpool
reservations may still have reserved pages.  alloc_huge_page needs
to handle this special case and do the proper accounting.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 48 +++++++++++++++++++++++++++---------------------
 1 file changed, 27 insertions(+), 21 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - June 15, 2015, 6:34 a.m.</div>
<pre class="content">
On Thu, Jun 11, 2015 at 02:01:37PM -0700, Mike Kravetz wrote:
<span class="quote">&gt; Areas hole punched by fallocate will not have entries in the</span>
<span class="quote">&gt; region/reserve map.  However, shared mappings with min_size subpool</span>
<span class="quote">&gt; reservations may still have reserved pages.  alloc_huge_page needs</span>
<span class="quote">&gt; to handle this special case and do the proper accounting.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 48 +++++++++++++++++++++++++++---------------------</span>
<span class="quote">&gt;  1 file changed, 27 insertions(+), 21 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index ecbaffe..9c295c9 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -692,19 +692,9 @@ static int vma_has_reserves(struct vm_area_struct *vma, long chg)</span>
<span class="quote">&gt;  			return 0;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (vma-&gt;vm_flags &amp; VM_MAYSHARE) {</span>
<span class="quote">&gt; -		/*</span>
<span class="quote">&gt; -		 * We know VM_NORESERVE is not set.  Therefore, there SHOULD</span>
<span class="quote">&gt; -		 * be a region map for all pages.  The only situation where</span>
<span class="quote">&gt; -		 * there is no region map is if a hole was punched via</span>
<span class="quote">&gt; -		 * fallocate.  In this case, there really are no reverves to</span>
<span class="quote">&gt; -		 * use.  This situation is indicated if chg != 0.</span>
<span class="quote">&gt; -		 */</span>
<span class="quote">&gt; -		if (chg)</span>
<span class="quote">&gt; -			return 0;</span>
<span class="quote">&gt; -		else</span>
<span class="quote">&gt; -			return 1;</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +	/* Shared mappings always use reserves */</span>
<span class="quote">&gt; +	if (vma-&gt;vm_flags &amp; VM_MAYSHARE)</span>
<span class="quote">&gt; +		return 1;</span>

This change completely reverts 5/9, so can you omit 5/9?
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Only the process that called mmap() has reserves for</span>
<span class="quote">&gt; @@ -1601,6 +1591,7 @@ static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	struct hstate *h = hstate_vma(vma);</span>
<span class="quote">&gt;  	struct page *page;</span>
<span class="quote">&gt;  	long chg, commit;</span>
<span class="quote">&gt; +	long gbl_chg;</span>
<span class="quote">&gt;  	int ret, idx;</span>
<span class="quote">&gt;  	struct hugetlb_cgroup *h_cg;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1608,24 +1599,39 @@ static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Processes that did not create the mapping will have no</span>
<span class="quote">&gt;  	 * reserves and will not have accounted against subpool</span>
<span class="quote">&gt; -	 * limit. Check that the subpool limit can be made before</span>
<span class="quote">&gt; -	 * satisfying the allocation MAP_NORESERVE mappings may also</span>
<span class="quote">&gt; -	 * need pages and subpool limit allocated allocated if no reserve</span>
<span class="quote">&gt; -	 * mapping overlaps.</span>
<span class="quote">&gt; +	 * limit. Check that the subpool limit will not be exceeded</span>
<span class="quote">&gt; +	 * before performing the allocation.  Allocations for</span>
<span class="quote">&gt; +	 * MAP_NORESERVE mappings also need to be checked against</span>
<span class="quote">&gt; +	 * any subpool limit.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * NOTE: Shared mappings with holes punched via fallocate</span>
<span class="quote">&gt; +	 * may still have reservations, even without entries in the</span>
<span class="quote">&gt; +	 * reserve map as indicated by vma_needs_reservation.  This</span>
<span class="quote">&gt; +	 * would be the case if hugepage_subpool_get_pages returns</span>
<span class="quote">&gt; +	 * zero to indicate no changes to the global reservation count</span>
<span class="quote">&gt; +	 * are necessary.  In this case, pass the output of</span>
<span class="quote">&gt; +	 * hugepage_subpool_get_pages (zero) to dequeue_huge_page_vma</span>
<span class="quote">&gt; +	 * so that the page is not counted against the global limit.</span>
<span class="quote">&gt; +	 * For MAP_NORESERVE mappings always pass the output of</span>
<span class="quote">&gt; +	 * vma_needs_reservation.  For race detection and error cleanup</span>
<span class="quote">&gt; +	 * use output of vma_needs_reservation as well.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	chg = vma_needs_reservation(h, vma, addr);</span>
<span class="quote">&gt; +	chg = gbl_chg = vma_needs_reservation(h, vma, addr);</span>
<span class="quote">&gt;  	if (chg &lt; 0)</span>
<span class="quote">&gt;  		return ERR_PTR(-ENOMEM);</span>
<span class="quote">&gt; -	if (chg || avoid_reserve)</span>
<span class="quote">&gt; -		if (hugepage_subpool_get_pages(spool, 1) &lt; 0)</span>
<span class="quote">&gt; +	if (chg || avoid_reserve) {</span>
<span class="quote">&gt; +		gbl_chg = hugepage_subpool_get_pages(spool, 1);</span>
<span class="quote">&gt; +		if (gbl_chg &lt; 0)</span>
<span class="quote">&gt;  			return ERR_PTR(-ENOSPC);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	ret = hugetlb_cgroup_charge_cgroup(idx, pages_per_huge_page(h), &amp;h_cg);</span>
<span class="quote">&gt;  	if (ret)</span>
<span class="quote">&gt;  		goto out_subpool_put;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt; -	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve, chg);</span>
<span class="quote">&gt; +	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve,</span>
<span class="quote">&gt; +					avoid_reserve ? chg : gbl_chg);</span>

You use chg or gbl_chg depending on avoid_reserve here, and below this line
there&#39;s code like below

	commit = vma_commit_reservation(h, vma, addr);
	if (unlikely(chg &gt; commit)) {
		...
	}

This also need to be changed to use chg or gbl_chg depending on avoid_reserve?

# I feel that this reserve-handling code in alloc_huge_page() is too complicated
# and hard to understand, so some cleanup like separating reserve parts into
# other new routine(s) might be helpful...

Thanks,
Naoya Horiguchi--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 15, 2015, 6:42 p.m.</div>
<pre class="content">
On 06/14/2015 11:34 PM, Naoya Horiguchi wrote:
<span class="quote">&gt; On Thu, Jun 11, 2015 at 02:01:37PM -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; Areas hole punched by fallocate will not have entries in the</span>
<span class="quote">&gt;&gt; region/reserve map.  However, shared mappings with min_size subpool</span>
<span class="quote">&gt;&gt; reservations may still have reserved pages.  alloc_huge_page needs</span>
<span class="quote">&gt;&gt; to handle this special case and do the proper accounting.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   mm/hugetlb.c | 48 +++++++++++++++++++++++++++---------------------</span>
<span class="quote">&gt;&gt;   1 file changed, 27 insertions(+), 21 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index ecbaffe..9c295c9 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -692,19 +692,9 @@ static int vma_has_reserves(struct vm_area_struct *vma, long chg)</span>
<span class="quote">&gt;&gt;   			return 0;</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	if (vma-&gt;vm_flags &amp; VM_MAYSHARE) {</span>
<span class="quote">&gt;&gt; -		/*</span>
<span class="quote">&gt;&gt; -		 * We know VM_NORESERVE is not set.  Therefore, there SHOULD</span>
<span class="quote">&gt;&gt; -		 * be a region map for all pages.  The only situation where</span>
<span class="quote">&gt;&gt; -		 * there is no region map is if a hole was punched via</span>
<span class="quote">&gt;&gt; -		 * fallocate.  In this case, there really are no reverves to</span>
<span class="quote">&gt;&gt; -		 * use.  This situation is indicated if chg != 0.</span>
<span class="quote">&gt;&gt; -		 */</span>
<span class="quote">&gt;&gt; -		if (chg)</span>
<span class="quote">&gt;&gt; -			return 0;</span>
<span class="quote">&gt;&gt; -		else</span>
<span class="quote">&gt;&gt; -			return 1;</span>
<span class="quote">&gt;&gt; -	}</span>
<span class="quote">&gt;&gt; +	/* Shared mappings always use reserves */</span>
<span class="quote">&gt;&gt; +	if (vma-&gt;vm_flags &amp; VM_MAYSHARE)</span>
<span class="quote">&gt;&gt; +		return 1;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This change completely reverts 5/9, so can you omit 5/9?</span>

That was a mistake.  This change should not be in the patch.  The
change from 5/9 needs to remain.  Sorry for confusion.  Thanks for
catching.
<span class="quote">
&gt;&gt;   	/*</span>
<span class="quote">&gt;&gt;   	 * Only the process that called mmap() has reserves for</span>
<span class="quote">&gt;&gt; @@ -1601,6 +1591,7 @@ static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;   	struct hstate *h = hstate_vma(vma);</span>
<span class="quote">&gt;&gt;   	struct page *page;</span>
<span class="quote">&gt;&gt;   	long chg, commit;</span>
<span class="quote">&gt;&gt; +	long gbl_chg;</span>
<span class="quote">&gt;&gt;   	int ret, idx;</span>
<span class="quote">&gt;&gt;   	struct hugetlb_cgroup *h_cg;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; @@ -1608,24 +1599,39 @@ static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;   	/*</span>
<span class="quote">&gt;&gt;   	 * Processes that did not create the mapping will have no</span>
<span class="quote">&gt;&gt;   	 * reserves and will not have accounted against subpool</span>
<span class="quote">&gt;&gt; -	 * limit. Check that the subpool limit can be made before</span>
<span class="quote">&gt;&gt; -	 * satisfying the allocation MAP_NORESERVE mappings may also</span>
<span class="quote">&gt;&gt; -	 * need pages and subpool limit allocated allocated if no reserve</span>
<span class="quote">&gt;&gt; -	 * mapping overlaps.</span>
<span class="quote">&gt;&gt; +	 * limit. Check that the subpool limit will not be exceeded</span>
<span class="quote">&gt;&gt; +	 * before performing the allocation.  Allocations for</span>
<span class="quote">&gt;&gt; +	 * MAP_NORESERVE mappings also need to be checked against</span>
<span class="quote">&gt;&gt; +	 * any subpool limit.</span>
<span class="quote">&gt;&gt; +	 *</span>
<span class="quote">&gt;&gt; +	 * NOTE: Shared mappings with holes punched via fallocate</span>
<span class="quote">&gt;&gt; +	 * may still have reservations, even without entries in the</span>
<span class="quote">&gt;&gt; +	 * reserve map as indicated by vma_needs_reservation.  This</span>
<span class="quote">&gt;&gt; +	 * would be the case if hugepage_subpool_get_pages returns</span>
<span class="quote">&gt;&gt; +	 * zero to indicate no changes to the global reservation count</span>
<span class="quote">&gt;&gt; +	 * are necessary.  In this case, pass the output of</span>
<span class="quote">&gt;&gt; +	 * hugepage_subpool_get_pages (zero) to dequeue_huge_page_vma</span>
<span class="quote">&gt;&gt; +	 * so that the page is not counted against the global limit.</span>
<span class="quote">&gt;&gt; +	 * For MAP_NORESERVE mappings always pass the output of</span>
<span class="quote">&gt;&gt; +	 * vma_needs_reservation.  For race detection and error cleanup</span>
<span class="quote">&gt;&gt; +	 * use output of vma_needs_reservation as well.</span>
<span class="quote">&gt;&gt;   	 */</span>
<span class="quote">&gt;&gt; -	chg = vma_needs_reservation(h, vma, addr);</span>
<span class="quote">&gt;&gt; +	chg = gbl_chg = vma_needs_reservation(h, vma, addr);</span>
<span class="quote">&gt;&gt;   	if (chg &lt; 0)</span>
<span class="quote">&gt;&gt;   		return ERR_PTR(-ENOMEM);</span>
<span class="quote">&gt;&gt; -	if (chg || avoid_reserve)</span>
<span class="quote">&gt;&gt; -		if (hugepage_subpool_get_pages(spool, 1) &lt; 0)</span>
<span class="quote">&gt;&gt; +	if (chg || avoid_reserve) {</span>
<span class="quote">&gt;&gt; +		gbl_chg = hugepage_subpool_get_pages(spool, 1);</span>
<span class="quote">&gt;&gt; +		if (gbl_chg &lt; 0)</span>
<span class="quote">&gt;&gt;   			return ERR_PTR(-ENOSPC);</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	ret = hugetlb_cgroup_charge_cgroup(idx, pages_per_huge_page(h), &amp;h_cg);</span>
<span class="quote">&gt;&gt;   	if (ret)</span>
<span class="quote">&gt;&gt;   		goto out_subpool_put;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;&gt; -	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve, chg);</span>
<span class="quote">&gt;&gt; +	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve,</span>
<span class="quote">&gt;&gt; +					avoid_reserve ? chg : gbl_chg);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You use chg or gbl_chg depending on avoid_reserve here, and below this line</span>
<span class="quote">&gt; there&#39;s code like below</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	commit = vma_commit_reservation(h, vma, addr);</span>
<span class="quote">&gt; 	if (unlikely(chg &gt; commit)) {</span>
<span class="quote">&gt; 		...</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This also need to be changed to use chg or gbl_chg depending on avoid_reserve?</span>

It should use chg only.  I attempted to address this at the end of the
Note above.
&quot; For race detection and error cleanup use output of vma_needs_reservation
  as well.&quot;
I will add more comments to make it clear.
<span class="quote">
&gt; # I feel that this reserve-handling code in alloc_huge_page() is too complicated</span>
<span class="quote">&gt; # and hard to understand, so some cleanup like separating reserve parts into</span>
<span class="quote">&gt; # other new routine(s) might be helpful...</span>

I agree, let me think about ways to split this up and hopefully make
it easier to understand.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index ecbaffe..9c295c9 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -692,19 +692,9 @@</span> <span class="p_context"> static int vma_has_reserves(struct vm_area_struct *vma, long chg)</span>
 			return 0;
 	}
 
<span class="p_del">-	if (vma-&gt;vm_flags &amp; VM_MAYSHARE) {</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * We know VM_NORESERVE is not set.  Therefore, there SHOULD</span>
<span class="p_del">-		 * be a region map for all pages.  The only situation where</span>
<span class="p_del">-		 * there is no region map is if a hole was punched via</span>
<span class="p_del">-		 * fallocate.  In this case, there really are no reverves to</span>
<span class="p_del">-		 * use.  This situation is indicated if chg != 0.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (chg)</span>
<span class="p_del">-			return 0;</span>
<span class="p_del">-		else</span>
<span class="p_del">-			return 1;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/* Shared mappings always use reserves */</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_MAYSHARE)</span>
<span class="p_add">+		return 1;</span>
 
 	/*
 	 * Only the process that called mmap() has reserves for
<span class="p_chunk">@@ -1601,6 +1591,7 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	struct hstate *h = hstate_vma(vma);
 	struct page *page;
 	long chg, commit;
<span class="p_add">+	long gbl_chg;</span>
 	int ret, idx;
 	struct hugetlb_cgroup *h_cg;
 
<span class="p_chunk">@@ -1608,24 +1599,39 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	/*
 	 * Processes that did not create the mapping will have no
 	 * reserves and will not have accounted against subpool
<span class="p_del">-	 * limit. Check that the subpool limit can be made before</span>
<span class="p_del">-	 * satisfying the allocation MAP_NORESERVE mappings may also</span>
<span class="p_del">-	 * need pages and subpool limit allocated allocated if no reserve</span>
<span class="p_del">-	 * mapping overlaps.</span>
<span class="p_add">+	 * limit. Check that the subpool limit will not be exceeded</span>
<span class="p_add">+	 * before performing the allocation.  Allocations for</span>
<span class="p_add">+	 * MAP_NORESERVE mappings also need to be checked against</span>
<span class="p_add">+	 * any subpool limit.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * NOTE: Shared mappings with holes punched via fallocate</span>
<span class="p_add">+	 * may still have reservations, even without entries in the</span>
<span class="p_add">+	 * reserve map as indicated by vma_needs_reservation.  This</span>
<span class="p_add">+	 * would be the case if hugepage_subpool_get_pages returns</span>
<span class="p_add">+	 * zero to indicate no changes to the global reservation count</span>
<span class="p_add">+	 * are necessary.  In this case, pass the output of</span>
<span class="p_add">+	 * hugepage_subpool_get_pages (zero) to dequeue_huge_page_vma</span>
<span class="p_add">+	 * so that the page is not counted against the global limit.</span>
<span class="p_add">+	 * For MAP_NORESERVE mappings always pass the output of</span>
<span class="p_add">+	 * vma_needs_reservation.  For race detection and error cleanup</span>
<span class="p_add">+	 * use output of vma_needs_reservation as well.</span>
 	 */
<span class="p_del">-	chg = vma_needs_reservation(h, vma, addr);</span>
<span class="p_add">+	chg = gbl_chg = vma_needs_reservation(h, vma, addr);</span>
 	if (chg &lt; 0)
 		return ERR_PTR(-ENOMEM);
<span class="p_del">-	if (chg || avoid_reserve)</span>
<span class="p_del">-		if (hugepage_subpool_get_pages(spool, 1) &lt; 0)</span>
<span class="p_add">+	if (chg || avoid_reserve) {</span>
<span class="p_add">+		gbl_chg = hugepage_subpool_get_pages(spool, 1);</span>
<span class="p_add">+		if (gbl_chg &lt; 0)</span>
 			return ERR_PTR(-ENOSPC);
<span class="p_add">+	}</span>
 
 	ret = hugetlb_cgroup_charge_cgroup(idx, pages_per_huge_page(h), &amp;h_cg);
 	if (ret)
 		goto out_subpool_put;
 
 	spin_lock(&amp;hugetlb_lock);
<span class="p_del">-	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve, chg);</span>
<span class="p_add">+	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve,</span>
<span class="p_add">+					avoid_reserve ? chg : gbl_chg);</span>
 	if (!page) {
 		spin_unlock(&amp;hugetlb_lock);
 		page = alloc_buddy_huge_page(h, NUMA_NO_NODE);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



