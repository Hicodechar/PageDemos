
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,19/29] signal: Consolidate {TS,TLF}_RESTORE_SIGMASK code - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,19/29] signal: Consolidate {TS,TLF}_RESTORE_SIGMASK code</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 26, 2016, 9:55 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;c99b29080117a1b9c9a6554528ce4f85868805a9.1466974736.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9199723/mbox/"
   >mbox</a>
|
   <a href="/patch/9199723/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9199723/">/patch/9199723/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5F7AD60752 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 26 Jun 2016 22:01:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4E2F62855A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 26 Jun 2016 22:01:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 421722855C; Sun, 26 Jun 2016 22:01:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 239832855A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 26 Jun 2016 22:01:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752276AbcFZWBk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 26 Jun 2016 18:01:40 -0400
Received: from mail.kernel.org ([198.145.29.136]:60280 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751862AbcFZV41 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 26 Jun 2016 17:56:27 -0400
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id A25AF201BB;
	Sun, 26 Jun 2016 21:56:24 +0000 (UTC)
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 49AE02026C;
	Sun, 26 Jun 2016 21:56:22 +0000 (UTC)
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, linux-arch@vger.kernel.org,
	Borislav Petkov &lt;bp@alien8.de&gt;, Nadav Amit &lt;nadav.amit@gmail.com&gt;,
	Kees Cook &lt;keescook@chromium.org&gt;, Brian Gerst &lt;brgerst@gmail.com&gt;,
	&quot;kernel-hardening@lists.openwall.com&quot; 
	&lt;kernel-hardening@lists.openwall.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;, Jann Horn &lt;jann@thejh.net&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Richard Henderson &lt;rth@twiddle.net&gt;,
	Ivan Kokshaysky &lt;ink@jurassic.park.msu.ru&gt;,
	Matt Turner &lt;mattst88@gmail.com&gt;, Tony Luck &lt;tony.luck@intel.com&gt;,
	Fenghua Yu &lt;fenghua.yu@intel.com&gt;, Michal Simek &lt;monstr@monstr.eu&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;,
	Rich Felker &lt;dalias@libc.org&gt;, &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Chris Metcalf &lt;cmetcalf@mellanox.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	linux-alpha@vger.kernel.org, linux-ia64@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org, linux-sh@vger.kernel.org,
	sparclinux@vger.kernel.org
Subject: [PATCH v4 19/29] signal: Consolidate {TS,TLF}_RESTORE_SIGMASK code
Date: Sun, 26 Jun 2016 14:55:41 -0700
Message-Id: &lt;c99b29080117a1b9c9a6554528ce4f85868805a9.1466974736.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;cover.1466974736.git.luto@kernel.org&gt;
References: &lt;cover.1466974736.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1466974736.git.luto@kernel.org&gt;
References: &lt;cover.1466974736.git.luto@kernel.org&gt;
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - June 26, 2016, 9:55 p.m.</div>
<pre class="content">
In general, there&#39;s no need for the &quot;restore sigmask&quot; flag to live in
ti-&gt;flags.  alpha, ia64, microblaze, powerpc, sh, sparc (64-bit only),
tile, and x86 use essentially identical alternative implementations,
placing the flag in ti-&gt;status.

Replace those optimized implementations with an equally good common
implementation that stores it in a bitfield in struct task_struct
and drop the custom implementations.

Additional architectures can opt in by removing their
TIF_RESTORE_SIGMASK defines.

Cc: Richard Henderson &lt;rth@twiddle.net&gt;
Cc: Ivan Kokshaysky &lt;ink@jurassic.park.msu.ru&gt;
Cc: Matt Turner &lt;mattst88@gmail.com&gt;
Cc: Tony Luck &lt;tony.luck@intel.com&gt;
Cc: Fenghua Yu &lt;fenghua.yu@intel.com&gt;
Cc: Michal Simek &lt;monstr@monstr.eu&gt;
Cc: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;
Cc: Paul Mackerras &lt;paulus@samba.org&gt;
Cc: Michael Ellerman &lt;mpe@ellerman.id.au&gt;
Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;
Cc: Rich Felker &lt;dalias@libc.org&gt;
Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Cc: Chris Metcalf &lt;cmetcalf@mellanox.com&gt;
Cc: x86@kernel.org
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-alpha@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-ia64@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org
Cc: linux-sh@vger.kernel.org
Cc: sparclinux@vger.kernel.org
Cc: linux-arch@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/alpha/include/asm/thread_info.h      | 27 -------------
 arch/ia64/include/asm/thread_info.h       | 28 --------------
 arch/microblaze/include/asm/thread_info.h | 27 -------------
 arch/powerpc/include/asm/thread_info.h    | 25 ------------
 arch/sh/include/asm/thread_info.h         | 26 -------------
 arch/sparc/include/asm/thread_info_64.h   | 24 ------------
 arch/tile/include/asm/thread_info.h       | 27 -------------
 arch/x86/include/asm/thread_info.h        | 24 ------------
 include/linux/sched.h                     | 63 +++++++++++++++++++++++++++++++
 include/linux/thread_info.h               | 41 --------------------
 10 files changed, 63 insertions(+), 249 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/alpha/include/asm/thread_info.h b/arch/alpha/include/asm/thread_info.h</span>
<span class="p_header">index 32e920a83ae5..e9e90bfa2b50 100644</span>
<span class="p_header">--- a/arch/alpha/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/alpha/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -86,33 +86,6 @@</span> <span class="p_context"> register struct thread_info *__current_thread_info __asm__(&quot;$8&quot;);</span>
 #define TS_UAC_NOPRINT		0x0001	/* ! Preserve the following three */
 #define TS_UAC_NOFIX		0x0002	/* ! flags as they match          */
 #define TS_UAC_SIGBUS		0x0004	/* ! userspace part of &#39;osf_sysinfo&#39; */
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0008	/* restore signal mask in do_signal() */</span>
<span class="p_del">-</span>
<span class="p_del">-#ifndef __ASSEMBLY__</span>
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, (unsigned long *)&amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif</span>
 
 #define SET_UNALIGN_CTL(task,value)	({				\
 	__u32 status = task_thread_info(task)-&gt;status &amp; ~UAC_BITMASK;	\
<span class="p_header">diff --git a/arch/ia64/include/asm/thread_info.h b/arch/ia64/include/asm/thread_info.h</span>
<span class="p_header">index f0a72e98e5a4..c7026429816b 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -121,32 +121,4 @@</span> <span class="p_context"> struct thread_info {</span>
 /* like TIF_ALLWORK_BITS but sans TIF_SYSCALL_TRACE or TIF_SYSCALL_AUDIT */
 #define TIF_WORK_MASK		(TIF_ALLWORK_MASK&amp;~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT))
 
<span class="p_del">-#define TS_RESTORE_SIGMASK	2	/* restore signal mask in do_signal() */</span>
<span class="p_del">-</span>
<span class="p_del">-#ifndef __ASSEMBLY__</span>
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, &amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif	/* !__ASSEMBLY__ */</span>
<span class="p_del">-</span>
 #endif /* _ASM_IA64_THREAD_INFO_H */
<span class="p_header">diff --git a/arch/microblaze/include/asm/thread_info.h b/arch/microblaze/include/asm/thread_info.h</span>
<span class="p_header">index 383f387b4eee..e7e8954e9815 100644</span>
<span class="p_header">--- a/arch/microblaze/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/microblaze/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -148,33 +148,6 @@</span> <span class="p_context"> static inline struct thread_info *current_thread_info(void)</span>
  */
 /* FPU was used by this task this quantum (SMP) */
 #define TS_USEDFPU		0x0001
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0002</span>
<span class="p_del">-</span>
<span class="p_del">-#ifndef __ASSEMBLY__</span>
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK 1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, (unsigned long *)&amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif</span>
 
 #endif /* __KERNEL__ */
 #endif /* _ASM_MICROBLAZE_THREAD_INFO_H */
<span class="p_header">diff --git a/arch/powerpc/include/asm/thread_info.h b/arch/powerpc/include/asm/thread_info.h</span>
<span class="p_header">index 8febc3f66d53..cfc35195f95e 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -134,40 +134,15 @@</span> <span class="p_context"> static inline struct thread_info *current_thread_info(void)</span>
 /* Don&#39;t move TLF_NAPPING without adjusting the code in entry_32.S */
 #define TLF_NAPPING		0	/* idle thread enabled NAP mode */
 #define TLF_SLEEPING		1	/* suspend code enabled SLEEP mode */
<span class="p_del">-#define TLF_RESTORE_SIGMASK	2	/* Restore signal mask in do_signal */</span>
 #define TLF_LAZY_MMU		3	/* tlb_batch is active */
 #define TLF_RUNLATCH		4	/* Is the runlatch enabled? */
 
 #define _TLF_NAPPING		(1 &lt;&lt; TLF_NAPPING)
 #define _TLF_SLEEPING		(1 &lt;&lt; TLF_SLEEPING)
<span class="p_del">-#define _TLF_RESTORE_SIGMASK	(1 &lt;&lt; TLF_RESTORE_SIGMASK)</span>
 #define _TLF_LAZY_MMU		(1 &lt;&lt; TLF_LAZY_MMU)
 #define _TLF_RUNLATCH		(1 &lt;&lt; TLF_RUNLATCH)
 
 #ifndef __ASSEMBLY__
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;local_flags |= _TLF_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, &amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;local_flags &amp;= ~_TLF_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;local_flags &amp; _TLF_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;local_flags &amp; _TLF_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;local_flags &amp;= ~_TLF_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
 
 static inline bool test_thread_local_flags(unsigned int flags)
 {
<span class="p_header">diff --git a/arch/sh/include/asm/thread_info.h b/arch/sh/include/asm/thread_info.h</span>
<span class="p_header">index 2afa321157be..6c65dcd470ab 100644</span>
<span class="p_header">--- a/arch/sh/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/sh/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -151,19 +151,10 @@</span> <span class="p_context"> extern void init_thread_xstate(void);</span>
  * ever touches our thread-synchronous status, so we don&#39;t
  * have to worry about atomic accesses.
  */
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0001	/* restore signal mask in do_signal() */</span>
 #define TS_USEDFPU		0x0002	/* FPU used by this task this quantum */
 
 #ifndef __ASSEMBLY__
 
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, (unsigned long *)&amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #define TI_FLAG_FAULT_CODE_SHIFT	24
 
 /*
<span class="p_chunk">@@ -182,23 +173,6 @@</span> <span class="p_context"> static inline unsigned int get_thread_fault_code(void)</span>
 	return ti-&gt;flags &gt;&gt; TI_FLAG_FAULT_CODE_SHIFT;
 }
 
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #endif	/* !__ASSEMBLY__ */
 
 #endif /* __KERNEL__ */
<span class="p_header">diff --git a/arch/sparc/include/asm/thread_info_64.h b/arch/sparc/include/asm/thread_info_64.h</span>
<span class="p_header">index bde59825d06c..3d7b925f6516 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/thread_info_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/thread_info_64.h</span>
<span class="p_chunk">@@ -222,32 +222,8 @@</span> <span class="p_context"> register struct thread_info *current_thread_info_reg asm(&quot;g6&quot;);</span>
  *
  * Note that there are only 8 bits available.
  */
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0001	/* restore signal mask in do_signal() */</span>
 
 #ifndef __ASSEMBLY__
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, &amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
 
 #define thread32_stack_is_64bit(__SP) (((__SP) &amp; 0x1) != 0)
 #define test_thread_64bit_stack(__SP) \
<span class="p_header">diff --git a/arch/tile/include/asm/thread_info.h b/arch/tile/include/asm/thread_info.h</span>
<span class="p_header">index c1467ac59ce6..b7659b8f1117 100644</span>
<span class="p_header">--- a/arch/tile/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/tile/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -166,32 +166,5 @@</span> <span class="p_context"> extern void _cpu_idle(void);</span>
 #ifdef __tilegx__
 #define TS_COMPAT		0x0001	/* 32-bit compatibility mode */
 #endif
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0008	/* restore signal mask in do_signal */</span>
<span class="p_del">-</span>
<span class="p_del">-#ifndef __ASSEMBLY__</span>
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, &amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif	/* !__ASSEMBLY__ */</span>
 
 #endif /* _ASM_TILE_THREAD_INFO_H */
<span class="p_header">diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h</span>
<span class="p_header">index 89bff044a6f5..b45ffdda3549 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/thread_info.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/thread_info.h</span>
<span class="p_chunk">@@ -219,32 +219,8 @@</span> <span class="p_context"> static inline unsigned long current_stack_pointer(void)</span>
  * have to worry about atomic accesses.
  */
 #define TS_COMPAT		0x0002	/* 32bit syscall active (64BIT)*/
<span class="p_del">-#define TS_RESTORE_SIGMASK	0x0008	/* restore signal mask in do_signal() */</span>
 
 #ifndef __ASSEMBLY__
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	ti-&gt;status |= TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	WARN_ON(!test_bit(TIF_SIGPENDING, (unsigned long *)&amp;ti-&gt;flags));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	current_thread_info()-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return current_thread_info()-&gt;status &amp; TS_RESTORE_SIGMASK;</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct thread_info *ti = current_thread_info();</span>
<span class="p_del">-	if (!(ti-&gt;status &amp; TS_RESTORE_SIGMASK))</span>
<span class="p_del">-		return false;</span>
<span class="p_del">-	ti-&gt;status &amp;= ~TS_RESTORE_SIGMASK;</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
 
 static inline bool in_ia32_syscall(void)
 {
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index 26869dba21f1..569df670407a 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -1545,6 +1545,9 @@</span> <span class="p_context"> struct task_struct {</span>
 	/* unserialized, strictly &#39;current&#39; */
 	unsigned in_execve:1; /* bit to tell LSMs we&#39;re in execve */
 	unsigned in_iowait:1;
<span class="p_add">+#if !defined(TIF_RESTORE_SIGMASK)</span>
<span class="p_add">+	unsigned restore_sigmask:1;</span>
<span class="p_add">+#endif</span>
 #ifdef CONFIG_MEMCG
 	unsigned memcg_may_oom:1;
 #ifndef CONFIG_SLOB
<span class="p_chunk">@@ -2664,6 +2667,66 @@</span> <span class="p_context"> extern void sigqueue_free(struct sigqueue *);</span>
 extern int send_sigqueue(struct sigqueue *,  struct task_struct *, int group);
 extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
 
<span class="p_add">+#ifdef TIF_RESTORE_SIGMASK</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Legacy restore_sigmask accessors.  These are inefficient on</span>
<span class="p_add">+ * SMP architectures because they require atomic operations.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * set_restore_sigmask() - make sure saved_sigmask processing gets done</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This sets TIF_RESTORE_SIGMASK and ensures that the arch signal code</span>
<span class="p_add">+ * will run before returning to user mode, to process the flag.  For</span>
<span class="p_add">+ * all callers, TIF_SIGPENDING is already set or it&#39;s no harm to set</span>
<span class="p_add">+ * it.  TIF_RESTORE_SIGMASK need not be in the set of bits that the</span>
<span class="p_add">+ * arch code will notice on return to user mode, in case those bits</span>
<span class="p_add">+ * are scarce.  We set TIF_SIGPENDING here to ensure that the arch</span>
<span class="p_add">+ * signal code always gets run when TIF_RESTORE_SIGMASK is set.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void set_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_add">+	WARN_ON(!test_thread_flag(TIF_SIGPENDING));</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void clear_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	clear_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline bool test_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return test_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return test_and_clear_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#else	/* TIF_RESTORE_SIGMASK */</span>
<span class="p_add">+</span>
<span class="p_add">+/* Higher-quality implementation, used if TIF_RESTORE_SIGMASK doesn&#39;t exist. */</span>
<span class="p_add">+static inline void set_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	current-&gt;restore_sigmask = true;</span>
<span class="p_add">+	WARN_ON(!test_thread_flag(TIF_SIGPENDING));</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void clear_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	current-&gt;restore_sigmask = false;</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline bool test_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return current-&gt;restore_sigmask;</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!current-&gt;restore_sigmask)</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	current-&gt;restore_sigmask = false;</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 static inline void restore_saved_sigmask(void)
 {
 	if (test_and_clear_restore_sigmask())
<span class="p_header">diff --git a/include/linux/thread_info.h b/include/linux/thread_info.h</span>
<span class="p_header">index b4c2a485b28a..352b1542f5cc 100644</span>
<span class="p_header">--- a/include/linux/thread_info.h</span>
<span class="p_header">+++ b/include/linux/thread_info.h</span>
<span class="p_chunk">@@ -105,47 +105,6 @@</span> <span class="p_context"> static inline int test_ti_thread_flag(struct thread_info *ti, int flag)</span>
 
 #define tif_need_resched() test_thread_flag(TIF_NEED_RESCHED)
 
<span class="p_del">-#if defined TIF_RESTORE_SIGMASK &amp;&amp; !defined HAVE_SET_RESTORE_SIGMASK</span>
<span class="p_del">-/*</span>
<span class="p_del">- * An arch can define its own version of set_restore_sigmask() to get the</span>
<span class="p_del">- * job done however works, with or without TIF_RESTORE_SIGMASK.</span>
<span class="p_del">- */</span>
<span class="p_del">-#define HAVE_SET_RESTORE_SIGMASK	1</span>
<span class="p_del">-</span>
<span class="p_del">-/**</span>
<span class="p_del">- * set_restore_sigmask() - make sure saved_sigmask processing gets done</span>
<span class="p_del">- *</span>
<span class="p_del">- * This sets TIF_RESTORE_SIGMASK and ensures that the arch signal code</span>
<span class="p_del">- * will run before returning to user mode, to process the flag.  For</span>
<span class="p_del">- * all callers, TIF_SIGPENDING is already set or it&#39;s no harm to set</span>
<span class="p_del">- * it.  TIF_RESTORE_SIGMASK need not be in the set of bits that the</span>
<span class="p_del">- * arch code will notice on return to user mode, in case those bits</span>
<span class="p_del">- * are scarce.  We set TIF_SIGPENDING here to ensure that the arch</span>
<span class="p_del">- * signal code always gets run when TIF_RESTORE_SIGMASK is set.</span>
<span class="p_del">- */</span>
<span class="p_del">-static inline void set_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	set_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_del">-	WARN_ON(!test_thread_flag(TIF_SIGPENDING));</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	clear_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return test_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline bool test_and_clear_restore_sigmask(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return test_and_clear_thread_flag(TIF_RESTORE_SIGMASK);</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif	/* TIF_RESTORE_SIGMASK &amp;&amp; !HAVE_SET_RESTORE_SIGMASK */</span>
<span class="p_del">-</span>
<span class="p_del">-#ifndef HAVE_SET_RESTORE_SIGMASK</span>
<span class="p_del">-#error &quot;no set_restore_sigmask() provided and default one won&#39;t work&quot;</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 #endif	/* __KERNEL__ */
 
 #endif /* _LINUX_THREAD_INFO_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



