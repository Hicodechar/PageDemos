
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot; - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot;</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 4, 2017, 10:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-675357362aeba19688440eb1aaa7991067f73b12@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10041827/mbox/"
   >mbox</a>
|
   <a href="/patch/10041827/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10041827/">/patch/10041827/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C50F96037D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 22:36:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ADCA8296C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 22:36:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A21B2296D7; Sat,  4 Nov 2017 22:36:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4F593296D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 22:36:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752362AbdKDWgs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 4 Nov 2017 18:36:48 -0400
Received: from terminus.zytor.com ([65.50.211.136]:49567 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751474AbdKDWgq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 4 Nov 2017 18:36:46 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id vA4MV5gi001366;
	Sat, 4 Nov 2017 15:31:05 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id vA4MV3v2001358;
	Sat, 4 Nov 2017 15:31:03 -0700
Date: Sat, 4 Nov 2017 15:31:03 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Andy Lutomirski &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-675357362aeba19688440eb1aaa7991067f73b12@git.kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, bp@alien8.de, bpetkov@suse.de,
	hpa@zytor.com, jpoimboe@redhat.com, torvalds@linux-foundation.org,
	brgerst@gmail.com, peterz@infradead.org, mingo@kernel.org,
	dvlasenk@redhat.com, tglx@linutronix.de, luto@kernel.org
Reply-To: mingo@kernel.org, peterz@infradead.org, tglx@linutronix.de,
	dvlasenk@redhat.com, luto@kernel.org, bpetkov@suse.de,
	linux-kernel@vger.kernel.org, bp@alien8.de, jpoimboe@redhat.com,
	torvalds@linux-foundation.org, brgerst@gmail.com, hpa@zytor.com
In-Reply-To: &lt;c513bbd4e653747213e05bc7062de000bf0202a5.1509793738.git.luto@kernel.org&gt;
References: &lt;c513bbd4e653747213e05bc7062de000bf0202a5.1509793738.git.luto@kernel.org&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle
	code&quot;
Git-Commit-ID: 675357362aeba19688440eb1aaa7991067f73b12
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Nov. 4, 2017, 10:31 p.m.</div>
<pre class="content">
Commit-ID:  675357362aeba19688440eb1aaa7991067f73b12
Gitweb:     https://git.kernel.org/tip/675357362aeba19688440eb1aaa7991067f73b12
Author:     Andy Lutomirski &lt;luto@kernel.org&gt;
AuthorDate: Sat, 4 Nov 2017 04:16:12 -0700
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Sat, 4 Nov 2017 15:01:50 +0100

Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot;

This reverts commit 43858b4f25cf0adc5c2ca9cf5ce5fdf2532941e5.

The reason I removed the leave_mm() calls in question is because the
heuristic wasn&#39;t needed after that patch.  With the original version
of my PCID series, we never flushed a &quot;lazy cpu&quot; (i.e. a CPU running
kernel thread) due a flush on the loaded mm.

Unfortunately, that caused architectural issues, so now I&#39;ve
reinstated these flushes on non-PCID systems in:

    commit b956575bed91 (&quot;x86/mm: Flush more aggressively in lazy TLB mode&quot;).

That, in turn, gives us a power management and occasionally
performance regression as compared to old kernels: a process that
goes into a deep idle state on a given CPU and gets its mm flushed
due to activity on a different CPU will wake the idle CPU.

Reinstate the old ugly heuristic: if a CPU goes into ACPI C3 or an
intel_idle state that is likely to cause a TLB flush gets its mm
switched to init_mm before going idle.

FWIW, this heuristic is lousy.  Whether we should change CR3 before
idle isn&#39;t a good hint except insofar as the performance hit is a bit
lower if the TLB is getting flushed by the idle code anyway.  What we
really want to know is whether we anticipate being idle long enough
that the mm is likely to be flushed before we wake up.  This is more a
matter of the expected latency than the idle state that gets chosen.
This heuristic also completely fails on systems that don&#39;t know
whether the TLB will be flushed (e.g. AMD systems?).  OTOH it may be a
bit obsolete anyway -- PCID systems don&#39;t presently benefit from this
heuristic at all.

We also shouldn&#39;t do this callback from innermost bit of the idle code
due to the RCU nastiness it causes.  All the information need is
available before rcu_idle_enter() needs to happen.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Borislav Petkov &lt;bpetkov@suse.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Fixes: 43858b4f25cf &quot;x86/mm: Stop calling leave_mm() in idle code&quot;
Link: http://lkml.kernel.org/r/c513bbd4e653747213e05bc7062de000bf0202a5.1509793738.git.luto@kernel.org
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/ia64/include/asm/acpi.h  |  2 ++
 arch/x86/include/asm/acpi.h   |  2 ++
 arch/x86/mm/tlb.c             | 17 ++++++++++++++---
 drivers/acpi/processor_idle.c |  2 ++
 drivers/idle/intel_idle.c     |  9 +++++----
 5 files changed, 25 insertions(+), 7 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ia64/include/asm/acpi.h b/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">index c86a947..a3d0211 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -112,6 +112,8 @@</span> <span class="p_context"> static inline void arch_acpi_set_pdc_bits(u32 *buf)</span>
 	buf[2] |= ACPI_PDC_EST_CAPABILITY_SMP;
 }
 
<span class="p_add">+#define acpi_unlazy_tlb(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_NUMA
 extern cpumask_t early_cpu_possible_map;
 #define for_each_possible_early_cpu(cpu)  \
<span class="p_header">diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="p_header">index 72d867f..8d0ec9d 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/acpi.h</span>
<span class="p_chunk">@@ -150,6 +150,8 @@</span> <span class="p_context"> static inline void disable_acpi(void) { }</span>
 extern int x86_acpi_numa_init(void);
 #endif /* CONFIG_ACPI_NUMA */
 
<span class="p_add">+#define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_APEI
 static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
 {
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 0f3d0ce..3118392cd 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 
 	switch_mm(NULL, &amp;init_mm, NULL);
 }
<span class="p_add">+EXPORT_SYMBOL_GPL(leave_mm);</span>
 
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
<span class="p_chunk">@@ -195,12 +196,22 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].ctx_id, next-&gt;context.ctx_id);
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].tlb_gen, next_tlb_gen);
 			write_cr3(build_cr3(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_del">-					TLB_FLUSH_ALL);</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * NB: This gets called via leave_mm() in the idle path</span>
<span class="p_add">+			 * where RCU functions differently.  Tracing normally</span>
<span class="p_add">+			 * uses RCU, so we need to use the _rcuidle variant.</span>
<span class="p_add">+			 *</span>
<span class="p_add">+			 * (There is no good reason for this.  The idle code should</span>
<span class="p_add">+			 *  be rearranged to call this before rcu_idle_enter().)</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
 		} else {
 			/* The new ASID is already up to date. */
 			write_cr3(build_cr3_noflush(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			/* See above wrt _rcuidle. */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
 		}
 
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
<span class="p_header">diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c</span>
<span class="p_header">index 2736e25..d50a7b6 100644</span>
<span class="p_header">--- a/drivers/acpi/processor_idle.c</span>
<span class="p_header">+++ b/drivers/acpi/processor_idle.c</span>
<span class="p_chunk">@@ -710,6 +710,8 @@</span> <span class="p_context"> static DEFINE_RAW_SPINLOCK(c3_lock);</span>
 static void acpi_idle_enter_bm(struct acpi_processor *pr,
 			       struct acpi_processor_cx *cx, bool timer_bc)
 {
<span class="p_add">+	acpi_unlazy_tlb(smp_processor_id());</span>
<span class="p_add">+</span>
 	/*
 	 * Must be done before busmaster disable as we might need to
 	 * access HPET !
<span class="p_header">diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c</span>
<span class="p_header">index 5dc7ea4..f0b06b1 100644</span>
<span class="p_header">--- a/drivers/idle/intel_idle.c</span>
<span class="p_header">+++ b/drivers/idle/intel_idle.c</span>
<span class="p_chunk">@@ -913,15 +913,16 @@</span> <span class="p_context"> static __cpuidle int intel_idle(struct cpuidle_device *dev,</span>
 	struct cpuidle_state *state = &amp;drv-&gt;states[index];
 	unsigned long eax = flg2MWAIT(state-&gt;flags);
 	unsigned int cstate;
<span class="p_add">+	int cpu = smp_processor_id();</span>
 
 	cstate = (((eax) &gt;&gt; MWAIT_SUBSTATE_SIZE) &amp; MWAIT_CSTATE_MASK) + 1;
 
 	/*
<span class="p_del">-	 * NB: if CPUIDLE_FLAG_TLB_FLUSHED is set, this idle transition</span>
<span class="p_del">-	 * will probably flush the TLB.  It&#39;s not guaranteed to flush</span>
<span class="p_del">-	 * the TLB, though, so it&#39;s not clear that we can do anything</span>
<span class="p_del">-	 * useful with this knowledge.</span>
<span class="p_add">+	 * leave_mm() to avoid costly and often unnecessary wakeups</span>
<span class="p_add">+	 * for flushing the user TLB&#39;s associated with the active mm.</span>
 	 */
<span class="p_add">+	if (state-&gt;flags &amp; CPUIDLE_FLAG_TLB_FLUSHED)</span>
<span class="p_add">+		leave_mm(cpu);</span>
 
 	if (!(lapic_timer_reliable_states &amp; (1 &lt;&lt; (cstate))))
 		tick_broadcast_enter();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



