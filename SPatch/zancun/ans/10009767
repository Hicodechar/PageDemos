
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v6.1,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v6.1,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 16, 2017, 7:51 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171016195104.122564-1-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10009767/mbox/"
   >mbox</a>
|
   <a href="/patch/10009767/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10009767/">/patch/10009767/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A0F35601D5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:51:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 87831286B6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:51:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7B42E286B8; Mon, 16 Oct 2017 19:51:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8EA80286B7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:51:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755860AbdJPTvW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Oct 2017 15:51:22 -0400
Received: from mail-sn1nam01on0082.outbound.protection.outlook.com
	([104.47.32.82]:11520
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1755645AbdJPTvU (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Oct 2017 15:51:20 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=LVNJtY4fk7tDPWwGm6lRTJYdlKR0IYXOIu22xoqNW8o=;
	b=TFz4Vktv9c8TYZPt56H/PQnnm/jrxvOINmiCRu4JNssXb7kDbU8385qGa+TC1CizcoGNa83QCqSePsCAtX01TKRz95GqyTEHaykRHW0NzG9bdMLBRYeC8wJMB0t3em6ocy/iknJZ8lEGlioTczoynHut47UzP3+BWoso6XkXiZM=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Mon, 16 Oct 2017 19:51:17 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: x86@kernel.org
Cc: bp@alien8.de, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	linux-kernel@vger.kernel.org, Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v6.1 02/17] x86/mm: Add Secure Encrypted
	Virtualization (SEV) support
Date: Mon, 16 Oct 2017 14:51:04 -0500
Message-Id: &lt;20171016195104.122564-1-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20171016153423.2980-3-brijesh.singh@amd.com&gt;
References: &lt;20171016153423.2980-3-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: DM5PR06CA0068.namprd06.prod.outlook.com (10.168.110.158)
	To SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: aa91e17b-c25c-495c-154d-08d514cf4446
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:SN1PR12MB0158; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	3:MHnuF80WS9dPZgbQquTBdPilZI6dQZ6q3In1QQ/RADSDiH+EXyIESQlNltgJm0RBPans9z7DCxnopo2KkwgpV49SqzXBmSeBAnW0QjDTmxebWILE8seKxlbhA7ivvz/LBsZxu2827dCcP0VFD4CNhLw2J8/+f7bhMx1iui2MDDksMFORXYM6Dl8KkMgu7MyLsWSuHiyFqd5vzzO1ZeVm+SsAjFCRRiYb0IDdi5Sve4v+cYiOL1zkBCoxNfFyke8e;
	25:6cjIM4c50Q7t3xIo3rf0W7LluD5PXdvdHiAkPEliaQFGN5+wkC2alp7KcP35QVwhDoM3NUgaGm6blT4M/dz1UsAWiglf3uZmm5i56gHcsPg1hzAw2b9l49OB3tNo+QWb1TxCRQgyO2S4pHiv2h5E9EPzxtEd7LSnSYBvddQ5/rFq3GzN5uWYFy583KRilfFF3QesyiggcijM4JysruWbcwBWLamPwU1e3RpraKH4E1TgMOV9TJmjWzc4dnDBMLYm9FKd5160naes4KvFVUm6zKKe5gB8lx4DDyAAHro/2cebWF93FJuzcBiz4bEVinDoMyn3xsfGxj4jQMR2XdqDCg==;
	31:oOIkuACQOYZSGWHF6Y2BZ1uFCNBjVFPP15hXVf7SYC8SHf2dgYFY6xCKStKzHWP8BVm6cAjRK9L1ioPCRvKogxAviELqwHshNEdUk+kH8desfQoRJu8MExjCP0qum3hRvwhTsofETfQCsLUx9KSNiVMehz17HF8w/0Q4hjr+UwqPhNYVi3j98RNo6IiZ5AKLlGtzhmoElT/Wn7MObRY9a201pC+W6gX5ZXgYgprT+0c=
X-MS-TrafficTypeDiagnostic: SN1PR12MB0158:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:MuNVSMvojQUcQmQ50kB3A2YoHoqaPrr7Cc5IQ7HBgWkeSbgzIZtoK1bRte5IPE5KbvXFSqmQVfE2Zj5GHOAP9Ils1lrFlMGB34zLv4kAkTHSBcWnrqJ+kqz4xceKVmbJ1K0mjnYnceU04AdQf6W27IogoEpfwHFoOGyLvEWzQ3oHqWJ+6aqnkkzUW7NSXKXSsfOmTVEbqjKUGU4d0ZK5DOeWm0QxH8Du/b3rjUqD6Ppz2favfa+F2BefDwEo+yPdUrW91a93Xp7iuTMZKvUuZi8oZ4/58c/s/QeQCekbIjatMXL5bUo1J41xLlBJmTMa7aDHUBw702d+/oT7rQOD7xcFUdctLRO3sRnwTvJWVp/0Ddnr5L787+FeglJiFESMoxDEI5lfJFICP8rvLYAkKivNoWHrgPZMjhLzMpRCyW+2ZR9nTEHexZyd9ocSCKeml/uaWSjvTI4qq+0nldmLa1Dws6Cw3kO/5Y71giWLfcEaSSVuyU4aB8PRFeNw2AkQ;
	4:myweNP0f8VIFPfO46bBudrfFCnBGsDs3STVS3n42PQdR4/vp27ncQJ7eBGxjG81xwJHh5yfGXe5aLnvlJP9FUya6dSTNl9sN5LBMZIe87pnP7NZk9/jI9cFDoF2aOw40ZyEbesRC7qBzGYWKxcwMxACuVD8f6MtB8IQA1EAjMGq/9KR7zdnB5N0Z47nHStnR2ysBHnL+i8lLjs6OFi02td0ZayEBZapX55OKqoWbAqrzp+F8MvcR/9Zc1gVsd0zQY21yVrce/wOUKke3SGDCKJsdgi4TBl3ymgXEd9UEh9YRBQr+4ECnGQsqlCH3oRPbzaPfqxXiBbkvyvDTrg03SQ==
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;SN1PR12MB015828CAE72555824F4BFD31E54F0@SN1PR12MB0158.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(93006095)(93001095)(100000703101)(100105400095)(3002001)(10201501046)(6055026)(6041248)(20161123564025)(20161123558100)(20161123562025)(20161123555025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR12MB0158; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR12MB0158; 
X-Forefront-PRVS: 0462918D61
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(376002)(39860400002)(346002)(189002)(199003)(50226002)(8936002)(81166006)(81156014)(8676002)(101416001)(97736004)(106356001)(76176999)(3846002)(6486002)(36756003)(6116002)(53416004)(105586002)(5003940100001)(2361001)(478600001)(50466002)(48376002)(25786009)(50986999)(2351001)(4326008)(2906002)(16526018)(1076002)(54906003)(68736007)(16586007)(5660300001)(316002)(53936002)(33646002)(86362001)(66066001)(189998001)(6916009)(2950100002)(305945005)(47776003)(6666003)(7736002)(309714004);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR12MB0158;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR12MB0158;
	23:45iyMiLR7x9Fq6lK8OL1pFM2WN+mIadPhTBCD1rjr?=
	=?us-ascii?Q?5J9Sru9BmPvje2AcUr54cjZJtYhnGeCIp+9jGGMQ7FM7V6j9lbQoNtn/BZQ3?=
	=?us-ascii?Q?QehcPAh9LWo94duv6Qtv0HdZCO1jA4/kkPiIat9XOZ3gWKPO7bTO30BIBzar?=
	=?us-ascii?Q?aGJ66TBjZIiKssuynYzs59ntCXI9+JftA5WIHy2JDOIuWqlHO3j/cEF/7czW?=
	=?us-ascii?Q?Sx3ldORKrzSabzDNwj2sl8mR+sftUcvYyR1CLYeppSoEf11GPRk+eg3+Vdd3?=
	=?us-ascii?Q?h/JpBJiKYiqQggRBs/oZXK4X7VOHfTSbo3F327UCXv/h+HdBiGWv0LDSESk5?=
	=?us-ascii?Q?dXjnoBFdspnzfz2i0/ekDMAeULFglEUzO2aNnfZtHYA70erFr2at/iFylroY?=
	=?us-ascii?Q?0A/ahTEim0oF8L/l9mVOge/fNzxfwNAJOtCsq42hMxPdY9Fv9LipPpw3kUPa?=
	=?us-ascii?Q?tmGfHdHYp1Xj9WojU+B6LXlZs58BmScHJ/yV8vNHLr7xnhrkwQFVQEV8lxNo?=
	=?us-ascii?Q?gi5ynaHDb2ovhT1nNiLdjIyJl2d7Q7Lm9sxLg+efSZg7r3hxeyTetID/c7DF?=
	=?us-ascii?Q?Lz6p+NEYU0JirVxF5g0tHAAVCZTDljPhXnzLB1FSJWFcEImq8GFJXaxbVd+P?=
	=?us-ascii?Q?/6zuLsPB1SHkGK/s3ZARrcgY592fOyeXzyB1Wz9yETk2rFqyPrr/KwfTunlC?=
	=?us-ascii?Q?qQzraJm2L+HWN+FbjwXuOO6qiFBNSPJyMTkKLrRSiN4yX5oIE/O5eGiVi1B5?=
	=?us-ascii?Q?GYOvQ1eLn+qFTRtne0Z/HZknyfQgcnzfxaJboh0KVfuY0PcrBai4Kqz2e2So?=
	=?us-ascii?Q?XocbF/GGBQ3y6QuCMc/HUXGbFPPbm4lLLIxWUbSrEksPJMW1fh6hHNVzhzi7?=
	=?us-ascii?Q?qNxcFUpJlka5XEn06Ako3DledaL4t58O8qBnLkDkbZ1SlGFMrKorq0Ur6kPz?=
	=?us-ascii?Q?UXdZjVVgTLaTdIBB9EwH3yrlS17i/r4xP2M2qWokEN3C0JgtRjMSFT4TsqHD?=
	=?us-ascii?Q?LlwaUfg4aJt04YTm546FPBaWZpOXMdJ1gYYyps74joDvrKLoCa6Cvh361oZr?=
	=?us-ascii?Q?bc2T0fGGje9kTjeibkpVW4IHo8ddnbYJiVKi1cxfnudbF36N6xj1HC4Gc6Us?=
	=?us-ascii?Q?mzDl7xJUzN4PQYNzERaMu0lyo+M55tZjX2/cAsjeK/TZlsy+MTiSszF76IbH?=
	=?us-ascii?Q?GiRK4udsr/jbcU=3D?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	6:3rvhaUogyohg9gWrg6pzH6JVRWm8h/p2KGYlDIHo6PcQYkrBotnO29nUQl1VhS8D/X1RmsDesTLsDR6b0po/E/23wnCYiVlDbw+gErXkVW40EsFMqua9jq/Gby2KvhioCEZYehV7ArOwkd2ZLcns/Xupilpny1/CcjWb2vVzw/tJCAHWoRg0nXGGQVfsnGTt1RrF4lGAVww3yL5tXzVw1wi1Z+nAnuzXNEZWByDwmqGQlT7luBlacw/iAiCdA3adqWzC97tO+tgYpTL8N0NGfpLautHhJ0Te8pIKIr5HELGyQdxnJDuP5HqjV6WHtCzuRG/AtnHDb4wPPzUHK9CROg==;
	5:fsgnYwrDQDI1gwS8yraoDNJFivkH8S2lys1RnOQ5G+B+aHQtt+/NocjaAhqgl1dIUdh/lXHUTvvww7575wtNuXSYDxNdbLFVUkCZSbSPCQAEE6QPj4xUHnBLfDl1CeXW2q9LhmMrR1EgSNIVvTfhHA==;
	24:DQ9U2TQFCZEsPVggHkBFscCnpP54XLeXSWmmKmrIeWkJ9KL3Qs0yV1dELCJj1c+gWYL2fEIqBO4OPKu+H2x7C5T4nSr9WuP2nJR3E4XDpO0=;
	7:lw8v6UHvfRmtpJnuneXLh2sOkK9JzgMy/OwehkSWWsqajMf8TGX9IV30v6t5433ZM9hxgDPTlGsFHuqSHfkZUNWkh/Li+RarJf0d0EeMLVgjx/0YlJN9S+m7FQRZeYrVNrRbVBEoXAbT6qbxp7wrycdeFdbHGyMeMQQrMHyiJgE1Q6JIoqbLx0hM3hl0qmQdCXqWw5t7IZeClwQEo2Bzq+eqS3JNWm359iiD5nDbJpY=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:93yK5Y/1YVnvNgOYkqI2EzjQIFLE0rt140g5RPYF9woz5G3dhesQCwr32lEzmO9p+EX+47r7YY/j67kcm1qpgNG+fhBm6bTyI1Y04MtSXOnI2U2L66JsQj+u3RzDEcBOvMpyEvp5YBm1LgLAd2RK1+F2ApvDIfi5G+goHQP5N2z+6OPvSU/LjcHO7LL1tbMlAFtPH0VTqZqBcbCiPLw4FC42bhTdAWt0vqL5h21rwwa4vBP23g9t7vFBg7Fxvbdu
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Oct 2017 19:51:17.3241
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR12MB0158
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Oct. 16, 2017, 7:51 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encrypted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org
Cc: x86@kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
---

Changes since v6:
 * do not initialise static sev_enabled to false

 arch/x86/include/asm/mem_encrypt.h |  6 ++++++
 arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++
 include/linux/mem_encrypt.h        |  7 +++++--
 3 files changed, 37 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 6a77c63540f7..2b024741bce9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void);</span>
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);
 
<span class="p_add">+bool sme_active(void);</span>
<span class="p_add">+bool sev_active(void);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_chunk">@@ -64,6 +67,9 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 16c5f37933a2..add836d3d174 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -42,6 +42,8 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 u64 sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+static bool sev_enabled __section(.data);</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_chunk">@@ -192,6 +194,30 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * SME and SEV are very similar but they are not the same, so there are</span>
<span class="p_add">+ * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="p_add">+ * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="p_add">+ * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The trampoline code is a good example for this requirement.  Before</span>
<span class="p_add">+ * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="p_add">+ * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="p_add">+ * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="p_add">+ * the trampoline area must be encrypted.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool sme_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="p_add">+</span>
<span class="p_add">+bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 265a9cd21cb4..b310a9c18113 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -23,11 +23,14 @@</span> <span class="p_context"></span>
 
 #define sme_me_mask	0ULL
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-static inline bool sme_active(void)</span>
<span class="p_add">+static inline bool mem_encrypt_active(void)</span>
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return sme_me_mask;</span>
 }
 
 static inline u64 sme_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



