
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,3/6] mm, page_alloc: pass preferred nid instead of zonelist to allocator - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,3/6] mm, page_alloc: pass preferred nid instead of zonelist to allocator</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 11, 2017, 2:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170411140609.3787-4-vbabka@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9675441/mbox/"
   >mbox</a>
|
   <a href="/patch/9675441/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9675441/">/patch/9675441/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D551060234 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 11 Apr 2017 14:07:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CA9DA28574
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 11 Apr 2017 14:07:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BD29528581; Tue, 11 Apr 2017 14:07:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D318528574
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 11 Apr 2017 14:07:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753452AbdDKOHu (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 11 Apr 2017 10:07:50 -0400
Received: from mx2.suse.de ([195.135.220.15]:49233 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752076AbdDKOGR (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 11 Apr 2017 10:06:17 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 1101BABE6;
	Tue, 11 Apr 2017 14:06:16 +0000 (UTC)
From: Vlastimil Babka &lt;vbabka@suse.cz&gt;
To: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, cgroups@vger.kernel.org,
	Li Zefan &lt;lizefan@huawei.com&gt;, Michal Hocko &lt;mhocko@kernel.org&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Christoph Lameter &lt;cl@linux.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;
Subject: [RFC 3/6] mm,
	page_alloc: pass preferred nid instead of zonelist to allocator
Date: Tue, 11 Apr 2017 16:06:06 +0200
Message-Id: &lt;20170411140609.3787-4-vbabka@suse.cz&gt;
X-Mailer: git-send-email 2.12.2
In-Reply-To: &lt;20170411140609.3787-1-vbabka@suse.cz&gt;
References: &lt;20170411140609.3787-1-vbabka@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - April 11, 2017, 2:06 p.m.</div>
<pre class="content">
The main allocator function __alloc_pages_nodemask() takes a zonelist pointer
as one of its parameters. All of its callers directly or indirectly obtain the
zonelist via node_zonelist() using a preferred node id and gfp_mask. We can
make the code a bit simpler by doing the zonelist lookup in
__alloc_pages_nodemask(), passing it a preferred node id instead (gfp_mask is
already another parameter).

There are some code size benefits thanks to removal of inlined node_zonelist():

bloat-o-meter add/remove: 2/2 grow/shrink: 4/36 up/down: 399/-1351 (-952)

This will also make things simpler if we proceed with converting cpusets to
zonelists.
<span class="signed-off-by">
Signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
---
 include/linux/gfp.h       | 11 +++++------
 include/linux/mempolicy.h |  6 +++---
 mm/hugetlb.c              | 15 +++++++++------
 mm/memory_hotplug.c       |  6 ++----
 mm/mempolicy.c            | 41 +++++++++++++++++++----------------------
 mm/page_alloc.c           | 10 +++++-----
 6 files changed, 43 insertions(+), 46 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="p_header">index 2b1a44f5bdb6..666af3c39d00 100644</span>
<span class="p_header">--- a/include/linux/gfp.h</span>
<span class="p_header">+++ b/include/linux/gfp.h</span>
<span class="p_chunk">@@ -432,14 +432,13 @@</span> <span class="p_context"> static inline void arch_alloc_page(struct page *page, int order) { }</span>
 #endif
 
 struct page *
<span class="p_del">-__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,</span>
<span class="p_del">-		       struct zonelist *zonelist, nodemask_t *nodemask);</span>
<span class="p_add">+__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,</span>
<span class="p_add">+							nodemask_t *nodemask);</span>
 
 static inline struct page *
<span class="p_del">-__alloc_pages(gfp_t gfp_mask, unsigned int order,</span>
<span class="p_del">-		struct zonelist *zonelist)</span>
<span class="p_add">+__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)</span>
 {
<span class="p_del">-	return __alloc_pages_nodemask(gfp_mask, order, zonelist, NULL);</span>
<span class="p_add">+	return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, NULL);</span>
 }
 
 /*
<span class="p_chunk">@@ -452,7 +451,7 @@</span> <span class="p_context"> __alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)</span>
 	VM_BUG_ON(nid &lt; 0 || nid &gt;= MAX_NUMNODES);
 	VM_WARN_ON(!node_online(nid));
 
<span class="p_del">-	return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));</span>
<span class="p_add">+	return __alloc_pages(gfp_mask, order, nid);</span>
 }
 
 /*
<span class="p_header">diff --git a/include/linux/mempolicy.h b/include/linux/mempolicy.h</span>
<span class="p_header">index 5f4d8281832b..ecb6cbeede5a 100644</span>
<span class="p_header">--- a/include/linux/mempolicy.h</span>
<span class="p_header">+++ b/include/linux/mempolicy.h</span>
<span class="p_chunk">@@ -146,7 +146,7 @@</span> <span class="p_context"> extern void mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new,</span>
 				enum mpol_rebind_step step);
 extern void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new);
 
<span class="p_del">-extern struct zonelist *huge_zonelist(struct vm_area_struct *vma,</span>
<span class="p_add">+extern int huge_node(struct vm_area_struct *vma,</span>
 				unsigned long addr, gfp_t gfp_flags,
 				struct mempolicy **mpol, nodemask_t **nodemask);
 extern bool init_nodemask_of_mempolicy(nodemask_t *mask);
<span class="p_chunk">@@ -269,13 +269,13 @@</span> <span class="p_context"> static inline void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)</span>
 {
 }
 
<span class="p_del">-static inline struct zonelist *huge_zonelist(struct vm_area_struct *vma,</span>
<span class="p_add">+static inline int huge_node(struct vm_area_struct *vma,</span>
 				unsigned long addr, gfp_t gfp_flags,
 				struct mempolicy **mpol, nodemask_t **nodemask)
 {
 	*mpol = NULL;
 	*nodemask = NULL;
<span class="p_del">-	return node_zonelist(0, gfp_flags);</span>
<span class="p_add">+	return 0;</span>
 }
 
 static inline bool init_nodemask_of_mempolicy(nodemask_t *m)
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index e5828875f7bb..9f1f399bb913 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -904,6 +904,8 @@</span> <span class="p_context"> static struct page *dequeue_huge_page_vma(struct hstate *h,</span>
 	struct page *page = NULL;
 	struct mempolicy *mpol;
 	nodemask_t *nodemask;
<span class="p_add">+	gfp_t gfp_mask;</span>
<span class="p_add">+	int nid;</span>
 	struct zonelist *zonelist;
 	struct zone *zone;
 	struct zoneref *z;
<span class="p_chunk">@@ -924,12 +926,13 @@</span> <span class="p_context"> static struct page *dequeue_huge_page_vma(struct hstate *h,</span>
 
 retry_cpuset:
 	cpuset_mems_cookie = read_mems_allowed_begin();
<span class="p_del">-	zonelist = huge_zonelist(vma, address,</span>
<span class="p_del">-					htlb_alloc_mask(h), &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h);</span>
<span class="p_add">+	nid = huge_node(vma, address, gfp_mask, &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+	zonelist = node_zonelist(nid, gfp_mask);</span>
 
 	for_each_zone_zonelist_nodemask(zone, z, zonelist,
 						MAX_NR_ZONES - 1, nodemask) {
<span class="p_del">-		if (cpuset_zone_allowed(zone, htlb_alloc_mask(h))) {</span>
<span class="p_add">+		if (cpuset_zone_allowed(zone, gfp_mask)) {</span>
 			page = dequeue_huge_page_node(h, zone_to_nid(zone));
 			if (page) {
 				if (avoid_reserve)
<span class="p_chunk">@@ -1545,13 +1548,13 @@</span> <span class="p_context"> static struct page *__hugetlb_alloc_buddy_huge_page(struct hstate *h,</span>
 	do {
 		struct page *page;
 		struct mempolicy *mpol;
<span class="p_del">-		struct zonelist *zl;</span>
<span class="p_add">+		int nid;</span>
 		nodemask_t *nodemask;
 
 		cpuset_mems_cookie = read_mems_allowed_begin();
<span class="p_del">-		zl = huge_zonelist(vma, addr, gfp, &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+		nid = huge_node(vma, addr, gfp, &amp;mpol, &amp;nodemask);</span>
 		mpol_cond_put(mpol);
<span class="p_del">-		page = __alloc_pages_nodemask(gfp, order, zl, nodemask);</span>
<span class="p_add">+		page = __alloc_pages_nodemask(gfp, order, nid, nodemask);</span>
 		if (page)
 			return page;
 	} while (read_mems_allowed_retry(cpuset_mems_cookie));
<span class="p_header">diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c</span>
<span class="p_header">index 76d4745513ee..79787a55ebc1 100644</span>
<span class="p_header">--- a/mm/memory_hotplug.c</span>
<span class="p_header">+++ b/mm/memory_hotplug.c</span>
<span class="p_chunk">@@ -1598,11 +1598,9 @@</span> <span class="p_context"> static struct page *new_node_page(struct page *page, unsigned long private,</span>
 		gfp_mask |= __GFP_HIGHMEM;
 
 	if (!nodes_empty(nmask))
<span class="p_del">-		new_page = __alloc_pages_nodemask(gfp_mask, 0,</span>
<span class="p_del">-					node_zonelist(nid, gfp_mask), &amp;nmask);</span>
<span class="p_add">+		new_page = __alloc_pages_nodemask(gfp_mask, 0, nid, &amp;nmask);</span>
 	if (!new_page)
<span class="p_del">-		new_page = __alloc_pages(gfp_mask, 0,</span>
<span class="p_del">-					node_zonelist(nid, gfp_mask));</span>
<span class="p_add">+		new_page = __alloc_pages(gfp_mask, 0, nid);</span>
 
 	return new_page;
 }
<span class="p_header">diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="p_header">index efeec8d2bce5..895d7a775f27 100644</span>
<span class="p_header">--- a/mm/mempolicy.c</span>
<span class="p_header">+++ b/mm/mempolicy.c</span>
<span class="p_chunk">@@ -1670,9 +1670,9 @@</span> <span class="p_context"> static nodemask_t *policy_nodemask(gfp_t gfp, struct mempolicy *policy)</span>
 	return NULL;
 }
 
<span class="p_del">-/* Return a zonelist indicated by gfp for node representing a mempolicy */</span>
<span class="p_del">-static struct zonelist *policy_zonelist(gfp_t gfp, struct mempolicy *policy,</span>
<span class="p_del">-	int nd)</span>
<span class="p_add">+/* Return the node id preferred by the given mempolicy, or the given id */</span>
<span class="p_add">+static int policy_node(gfp_t gfp, struct mempolicy *policy,</span>
<span class="p_add">+								int nd)</span>
 {
 	if (policy-&gt;mode == MPOL_PREFERRED &amp;&amp; !(policy-&gt;flags &amp; MPOL_F_LOCAL))
 		nd = policy-&gt;v.preferred_node;
<span class="p_chunk">@@ -1685,7 +1685,7 @@</span> <span class="p_context"> static struct zonelist *policy_zonelist(gfp_t gfp, struct mempolicy *policy,</span>
 		WARN_ON_ONCE(policy-&gt;mode == MPOL_BIND &amp;&amp; (gfp &amp; __GFP_THISNODE));
 	}
 
<span class="p_del">-	return node_zonelist(nd, gfp);</span>
<span class="p_add">+	return nd;</span>
 }
 
 /* Do dynamic interleaving for a process */
<span class="p_chunk">@@ -1793,38 +1793,37 @@</span> <span class="p_context"> static inline unsigned interleave_nid(struct mempolicy *pol,</span>
 
 #ifdef CONFIG_HUGETLBFS
 /*
<span class="p_del">- * huge_zonelist(@vma, @addr, @gfp_flags, @mpol)</span>
<span class="p_add">+ * huge_node(@vma, @addr, @gfp_flags, @mpol)</span>
  * @vma: virtual memory area whose policy is sought
  * @addr: address in @vma for shared policy lookup and interleave policy
  * @gfp_flags: for requested zone
  * @mpol: pointer to mempolicy pointer for reference counted mempolicy
  * @nodemask: pointer to nodemask pointer for MPOL_BIND nodemask
  *
<span class="p_del">- * Returns a zonelist suitable for a huge page allocation and a pointer</span>
<span class="p_add">+ * Returns a nid suitable for a huge page allocation and a pointer</span>
  * to the struct mempolicy for conditional unref after allocation.
  * If the effective policy is &#39;BIND, returns a pointer to the mempolicy&#39;s
  * @nodemask for filtering the zonelist.
  *
  * Must be protected by read_mems_allowed_begin()
  */
<span class="p_del">-struct zonelist *huge_zonelist(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="p_del">-				gfp_t gfp_flags, struct mempolicy **mpol,</span>
<span class="p_del">-				nodemask_t **nodemask)</span>
<span class="p_add">+int huge_node(struct vm_area_struct *vma, unsigned long addr, gfp_t gfp_flags,</span>
<span class="p_add">+				struct mempolicy **mpol, nodemask_t **nodemask)</span>
 {
<span class="p_del">-	struct zonelist *zl;</span>
<span class="p_add">+	int nid;</span>
 
 	*mpol = get_vma_policy(vma, addr);
 	*nodemask = NULL;	/* assume !MPOL_BIND */
 
 	if (unlikely((*mpol)-&gt;mode == MPOL_INTERLEAVE)) {
<span class="p_del">-		zl = node_zonelist(interleave_nid(*mpol, vma, addr,</span>
<span class="p_del">-				huge_page_shift(hstate_vma(vma))), gfp_flags);</span>
<span class="p_add">+		nid = interleave_nid(*mpol, vma, addr,</span>
<span class="p_add">+					huge_page_shift(hstate_vma(vma)));</span>
 	} else {
<span class="p_del">-		zl = policy_zonelist(gfp_flags, *mpol, numa_node_id());</span>
<span class="p_add">+		nid = policy_node(gfp_flags, *mpol, numa_node_id());</span>
 		if ((*mpol)-&gt;mode == MPOL_BIND)
 			*nodemask = &amp;(*mpol)-&gt;v.nodes;
 	}
<span class="p_del">-	return zl;</span>
<span class="p_add">+	return nid;</span>
 }
 
 /*
<span class="p_chunk">@@ -1926,12 +1925,10 @@</span> <span class="p_context"> bool mempolicy_nodemask_intersects(struct task_struct *tsk,</span>
 static struct page *alloc_page_interleave(gfp_t gfp, unsigned order,
 					unsigned nid)
 {
<span class="p_del">-	struct zonelist *zl;</span>
 	struct page *page;
 
<span class="p_del">-	zl = node_zonelist(nid, gfp);</span>
<span class="p_del">-	page = __alloc_pages(gfp, order, zl);</span>
<span class="p_del">-	if (page &amp;&amp; page_zone(page) == zonelist_zone(&amp;zl-&gt;_zonerefs[0]))</span>
<span class="p_add">+	page = __alloc_pages(gfp, order, nid);</span>
<span class="p_add">+	if (page &amp;&amp; page_to_nid(page) == nid)</span>
 		inc_zone_page_state(page, NUMA_INTERLEAVE_HIT);
 	return page;
 }
<span class="p_chunk">@@ -1965,8 +1962,8 @@</span> <span class="p_context"> alloc_pages_vma(gfp_t gfp, int order, struct vm_area_struct *vma,</span>
 {
 	struct mempolicy *pol;
 	struct page *page;
<span class="p_add">+	int preferred_nid;</span>
 	unsigned int cpuset_mems_cookie;
<span class="p_del">-	struct zonelist *zl;</span>
 	nodemask_t *nmask;
 
 retry_cpuset:
<span class="p_chunk">@@ -2009,8 +2006,8 @@</span> <span class="p_context"> alloc_pages_vma(gfp_t gfp, int order, struct vm_area_struct *vma,</span>
 	}
 
 	nmask = policy_nodemask(gfp, pol);
<span class="p_del">-	zl = policy_zonelist(gfp, pol, node);</span>
<span class="p_del">-	page = __alloc_pages_nodemask(gfp, order, zl, nmask);</span>
<span class="p_add">+	preferred_nid = policy_node(gfp, pol, node);</span>
<span class="p_add">+	page = __alloc_pages_nodemask(gfp, order, preferred_nid, nmask);</span>
 	mpol_cond_put(pol);
 out:
 	if (unlikely(!page &amp;&amp; read_mems_allowed_retry(cpuset_mems_cookie)))
<span class="p_chunk">@@ -2057,7 +2054,7 @@</span> <span class="p_context"> struct page *alloc_pages_current(gfp_t gfp, unsigned order)</span>
 		page = alloc_page_interleave(gfp, order, interleave_nodes(pol));
 	else
 		page = __alloc_pages_nodemask(gfp, order,
<span class="p_del">-				policy_zonelist(gfp, pol, numa_node_id()),</span>
<span class="p_add">+				policy_node(gfp, pol, numa_node_id()),</span>
 				policy_nodemask(gfp, pol));
 
 	if (unlikely(!page &amp;&amp; read_mems_allowed_retry(cpuset_mems_cookie)))
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 502d82f0e004..028db51c953b 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -3969,12 +3969,12 @@</span> <span class="p_context"> __alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,</span>
 }
 
 static inline bool prepare_alloc_pages(gfp_t gfp_mask, unsigned int order,
<span class="p_del">-		struct zonelist *zonelist, nodemask_t *nodemask,</span>
<span class="p_add">+		int preferred_nid, nodemask_t *nodemask,</span>
 		struct alloc_context *ac, gfp_t *alloc_mask,
 		unsigned int *alloc_flags)
 {
 	ac-&gt;high_zoneidx = gfp_zone(gfp_mask);
<span class="p_del">-	ac-&gt;zonelist = zonelist;</span>
<span class="p_add">+	ac-&gt;zonelist = node_zonelist(preferred_nid, gfp_mask);</span>
 	ac-&gt;nodemask = nodemask;
 	ac-&gt;migratetype = gfpflags_to_migratetype(gfp_mask);
 
<span class="p_chunk">@@ -4019,8 +4019,8 @@</span> <span class="p_context"> static inline void finalise_ac(gfp_t gfp_mask,</span>
  * This is the &#39;heart&#39; of the zoned buddy allocator.
  */
 struct page *
<span class="p_del">-__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,</span>
<span class="p_del">-			struct zonelist *zonelist, nodemask_t *nodemask)</span>
<span class="p_add">+__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,</span>
<span class="p_add">+							nodemask_t *nodemask)</span>
 {
 	struct page *page;
 	unsigned int alloc_flags = ALLOC_WMARK_LOW;
<span class="p_chunk">@@ -4028,7 +4028,7 @@</span> <span class="p_context"> __alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,</span>
 	struct alloc_context ac = { };
 
 	gfp_mask &amp;= gfp_allowed_mask;
<span class="p_del">-	if (!prepare_alloc_pages(gfp_mask, order, zonelist, nodemask, &amp;ac, &amp;alloc_mask, &amp;alloc_flags))</span>
<span class="p_add">+	if (!prepare_alloc_pages(gfp_mask, order, preferred_nid, nodemask, &amp;ac, &amp;alloc_mask, &amp;alloc_flags))</span>
 		return NULL;
 
 	finalise_ac(gfp_mask, order, &amp;ac);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



