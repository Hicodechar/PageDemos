
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v9,03/10] sparc64: Add support for ADI register fields, ASIs and traps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v9,03/10] sparc64: Add support for ADI register fields, ASIs and traps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 20, 2017, 4:57 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;6f4966d8c42a900be231da3b30bbc003488e1d7b.1508364660.git.khalid.aziz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10020647/mbox/"
   >mbox</a>
|
   <a href="/patch/10020647/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10020647/">/patch/10020647/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7FD1760211 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Oct 2017 16:59:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 77F1228650
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Oct 2017 16:59:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6B590286C8; Fri, 20 Oct 2017 16:59:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 589D328650
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Oct 2017 16:59:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753456AbdJTQ7M (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 20 Oct 2017 12:59:12 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:34436 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753397AbdJTQ7G (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 20 Oct 2017 12:59:06 -0400
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v9KGwQV7016858
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 20 Oct 2017 16:58:26 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id v9KGwQRr030493
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 20 Oct 2017 16:58:26 GMT
Received: from abhmp0019.oracle.com (abhmp0019.oracle.com [141.146.116.25])
	by userv0121.oracle.com (8.14.4/8.13.8) with ESMTP id
	v9KGwPFY010208; Fri, 20 Oct 2017 16:58:25 GMT
Received: from concerto.us.oracle.com (/24.9.64.241)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Fri, 20 Oct 2017 09:58:25 -0700
From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
To: davem@davemloft.net, dave.hansen@linux.intel.com
Cc: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;, mhocko@suse.com,
	chris.hyser@oracle.com, tushar.n.dave@oracle.com,
	sowmini.varadhan@oracle.com, mingo@kernel.org,
	kirill.shutemov@linux.intel.com, nitin.m.gupta@oracle.com,
	tom.hromatka@oracle.com, eric.saint.etienne@oracle.com,
	allen.pais@oracle.com, rob.gardner@oracle.com,
	david.j.aldridge@oracle.com, babu.moger@oracle.com,
	paul.gortmaker@windriver.com, bob.picco@oracle.com,
	steven.sistare@oracle.com, pasha.tatashin@oracle.com,
	Liam.Howlett@oracle.com, vegard.nossum@oracle.com,
	dan.carpenter@oracle.com, sparclinux@vger.kernel.org,
	linux-kernel@vger.kernel.org, Khalid Aziz &lt;khalid@gonehiking.org&gt;
Subject: [PATCH v9 03/10] sparc64: Add support for ADI register fields,
	ASIs and traps
Date: Fri, 20 Oct 2017 10:57:56 -0600
Message-Id: &lt;6f4966d8c42a900be231da3b30bbc003488e1d7b.1508364660.git.khalid.aziz@oracle.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;cover.1508364660.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1508364660.git.khalid.aziz@oracle.com&gt;
In-Reply-To: &lt;cover.1508364660.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1508364660.git.khalid.aziz@oracle.com&gt;
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Oct. 20, 2017, 4:57 p.m.</div>
<pre class="content">
SPARC M7 processor adds new control register fields, ASIs and a new
trap to support the ADI (Application Data Integrity) feature. This
patch adds definitions for these register fields, ASIs and a handler
for the new precise memory corruption detected trap.
<span class="signed-off-by">
Signed-off-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
Cc: Khalid Aziz &lt;khalid@gonehiking.org&gt;
---
v8:
	- Minor print formatting change as suggested by checkpatch
v6:
	- Added a missing nop in the delay slot in sun4v_mcd_detect_precise

v5:
	- Fixed indentation issues in assembly code

v4:
	- Broke patch up into smaller patches

v3:
	- Removed CONFIG_SPARC_ADI
	- Replaced prctl commands with mprotect
	- Added auxiliary vectors for ADI parameters
	- Enabled ADI for swappable pages

v2:
	- Fixed a build error

 arch/sparc/include/asm/hypervisor.h  |  2 ++
 arch/sparc/include/asm/pgtable_64.h  |  2 ++
 arch/sparc/include/asm/ttable.h      | 10 +++++++
 arch/sparc/include/uapi/asm/asi.h    |  5 ++++
 arch/sparc/include/uapi/asm/pstate.h | 10 +++++++
 arch/sparc/kernel/entry.h            |  3 ++
 arch/sparc/kernel/head_64.S          |  1 +
 arch/sparc/kernel/sun4v_mcd.S        | 17 ++++++++++++
 arch/sparc/kernel/traps_64.c         | 54 ++++++++++++++++++++++++++++++++++++
 arch/sparc/kernel/ttable_64.S        |  6 ++--
 10 files changed, 108 insertions(+), 2 deletions(-)
 create mode 100644 arch/sparc/kernel/sun4v_mcd.S
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/hypervisor.h b/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_header">index 73cb8978df58..31782f7996b3 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/hypervisor.h</span>
<span class="p_chunk">@@ -547,6 +547,8 @@</span> <span class="p_context"> struct hv_fault_status {</span>
 #define HV_FAULT_TYPE_RESV1	13
 #define HV_FAULT_TYPE_UNALIGNED	14
 #define HV_FAULT_TYPE_INV_PGSZ	15
<span class="p_add">+#define HV_FAULT_TYPE_MCD	17</span>
<span class="p_add">+#define HV_FAULT_TYPE_MCD_DIS	18</span>
 /* Values 16 --&gt; -2 are reserved.  */
 #define HV_FAULT_TYPE_MULTIPLE	-1
 
<span class="p_header">diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">index 6fbd931f0570..af045061f41e 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -163,6 +163,8 @@</span> <span class="p_context"> bool kern_addr_valid(unsigned long addr);</span>
 #define _PAGE_E_4V	  _AC(0x0000000000000800,UL) /* side-Effect          */
 #define _PAGE_CP_4V	  _AC(0x0000000000000400,UL) /* Cacheable in P-Cache */
 #define _PAGE_CV_4V	  _AC(0x0000000000000200,UL) /* Cacheable in V-Cache */
<span class="p_add">+/* Bit 9 is used to enable MCD corruption detection instead on M7 */</span>
<span class="p_add">+#define _PAGE_MCD_4V      _AC(0x0000000000000200,UL) /* Memory Corruption    */</span>
 #define _PAGE_P_4V	  _AC(0x0000000000000100,UL) /* Privileged Page      */
 #define _PAGE_EXEC_4V	  _AC(0x0000000000000080,UL) /* Executable Page      */
 #define _PAGE_W_4V	  _AC(0x0000000000000040,UL) /* Writable             */
<span class="p_header">diff --git a/arch/sparc/include/asm/ttable.h b/arch/sparc/include/asm/ttable.h</span>
<span class="p_header">index 82e7df296abc..d6510ab8fa4d 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/ttable.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/ttable.h</span>
<span class="p_chunk">@@ -218,6 +218,16 @@</span> <span class="p_context"></span>
 	nop;						\
 	nop;
 
<span class="p_add">+#define SUN4V_MCD_PRECISE				\</span>
<span class="p_add">+	ldxa	[%g0] ASI_SCRATCHPAD, %g2;		\</span>
<span class="p_add">+	ldx	[%g2 + HV_FAULT_D_ADDR_OFFSET], %g4;	\</span>
<span class="p_add">+	ldx	[%g2 + HV_FAULT_D_CTX_OFFSET], %g5;	\</span>
<span class="p_add">+	ba,pt	%xcc, etrap;				\</span>
<span class="p_add">+	 rd	%pc, %g7;				\</span>
<span class="p_add">+	ba,pt	%xcc, sun4v_mcd_detect_precise;		\</span>
<span class="p_add">+	 nop;						\</span>
<span class="p_add">+	nop;</span>
<span class="p_add">+</span>
 /* Before touching these macros, you owe it to yourself to go and
  * see how arch/sparc64/kernel/winfixup.S works... -DaveM
  *
<span class="p_header">diff --git a/arch/sparc/include/uapi/asm/asi.h b/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_header">index 7ad7203deaec..2bcdaa5321d3 100644</span>
<span class="p_header">--- a/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_header">+++ b/arch/sparc/include/uapi/asm/asi.h</span>
<span class="p_chunk">@@ -144,6 +144,8 @@</span> <span class="p_context"></span>
  * ASIs, &quot;(4V)&quot; designates SUN4V specific ASIs.  &quot;(NG4)&quot; designates SPARC-T4
  * and later ASIs.
  */
<span class="p_add">+#define ASI_MCD_PRIV_PRIMARY	0x02 /* (NG7) Privileged MCD version VA	*/</span>
<span class="p_add">+#define ASI_MCD_REAL		0x05 /* (NG7) Privileged MCD version PA	*/</span>
 #define ASI_PHYS_USE_EC		0x14 /* PADDR, E-cachable		*/
 #define ASI_PHYS_BYPASS_EC_E	0x15 /* PADDR, E-bit			*/
 #define ASI_BLK_AIUP_4V		0x16 /* (4V) Prim, user, block ld/st	*/
<span class="p_chunk">@@ -244,6 +246,9 @@</span> <span class="p_context"></span>
 #define ASI_UDBL_CONTROL_R	0x7f /* External UDB control regs rd low*/
 #define ASI_INTR_R		0x7f /* IRQ vector dispatch read	*/
 #define ASI_INTR_DATAN_R	0x7f /* (III) In irq vector data reg N	*/
<span class="p_add">+#define ASI_MCD_PRIMARY		0x90 /* (NG7) MCD version load/store	*/</span>
<span class="p_add">+#define ASI_MCD_ST_BLKINIT_PRIMARY	\</span>
<span class="p_add">+				0x92 /* (NG7) MCD store BLKINIT primary	*/</span>
 #define ASI_PIC			0xb0 /* (NG4) PIC registers		*/
 #define ASI_PST8_P		0xc0 /* Primary, 8 8-bit, partial	*/
 #define ASI_PST8_S		0xc1 /* Secondary, 8 8-bit, partial	*/
<span class="p_header">diff --git a/arch/sparc/include/uapi/asm/pstate.h b/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_header">index cf832e14aa05..d0521db9bb6f 100644</span>
<span class="p_header">--- a/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_header">+++ b/arch/sparc/include/uapi/asm/pstate.h</span>
<span class="p_chunk">@@ -10,7 +10,12 @@</span> <span class="p_context"></span>
  * -----------------------------------------------------------------------
  *  63  12  11   10    9     8    7   6   5     4     3     2     1    0
  */
<span class="p_add">+/* IG on V9 conflicts with MCDE on M7. PSTATE_MCDE will only be used on</span>
<span class="p_add">+ * processors that support ADI which do not use IG, hence there is no</span>
<span class="p_add">+ * functional conflict</span>
<span class="p_add">+ */</span>
 #define PSTATE_IG   _AC(0x0000000000000800,UL) /* Interrupt Globals.	*/
<span class="p_add">+#define PSTATE_MCDE _AC(0x0000000000000800,UL) /* MCD Enable		*/</span>
 #define PSTATE_MG   _AC(0x0000000000000400,UL) /* MMU Globals.		*/
 #define PSTATE_CLE  _AC(0x0000000000000200,UL) /* Current Little Endian.*/
 #define PSTATE_TLE  _AC(0x0000000000000100,UL) /* Trap Little Endian.	*/
<span class="p_chunk">@@ -47,7 +52,12 @@</span> <span class="p_context"></span>
 #define TSTATE_ASI	_AC(0x00000000ff000000,UL) /* AddrSpace ID.	*/
 #define TSTATE_PIL	_AC(0x0000000000f00000,UL) /* %pil (Linux traps)*/
 #define TSTATE_PSTATE	_AC(0x00000000000fff00,UL) /* PSTATE.		*/
<span class="p_add">+/* IG on V9 conflicts with MCDE on M7. TSTATE_MCDE will only be used on</span>
<span class="p_add">+ * processors that support ADI which do not support IG, hence there is</span>
<span class="p_add">+ * no functional conflict</span>
<span class="p_add">+ */</span>
 #define TSTATE_IG	_AC(0x0000000000080000,UL) /* Interrupt Globals.*/
<span class="p_add">+#define TSTATE_MCDE	_AC(0x0000000000080000,UL) /* MCD enable.       */</span>
 #define TSTATE_MG	_AC(0x0000000000040000,UL) /* MMU Globals.	*/
 #define TSTATE_CLE	_AC(0x0000000000020000,UL) /* CurrLittleEndian.	*/
 #define TSTATE_TLE	_AC(0x0000000000010000,UL) /* TrapLittleEndian.	*/
<span class="p_header">diff --git a/arch/sparc/kernel/entry.h b/arch/sparc/kernel/entry.h</span>
<span class="p_header">index 0f679421b468..207846855a4d 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/entry.h</span>
<span class="p_header">+++ b/arch/sparc/kernel/entry.h</span>
<span class="p_chunk">@@ -159,6 +159,9 @@</span> <span class="p_context"> void sun4v_resum_overflow(struct pt_regs *regs);</span>
 void sun4v_nonresum_error(struct pt_regs *regs,
 			  unsigned long offset);
 void sun4v_nonresum_overflow(struct pt_regs *regs);
<span class="p_add">+void sun4v_mem_corrupt_detect_precise(struct pt_regs *regs,</span>
<span class="p_add">+				      unsigned long addr,</span>
<span class="p_add">+				      unsigned long context);</span>
 
 extern unsigned long sun4v_err_itlb_vaddr;
 extern unsigned long sun4v_err_itlb_ctx;
<span class="p_header">diff --git a/arch/sparc/kernel/head_64.S b/arch/sparc/kernel/head_64.S</span>
<span class="p_header">index 78e0211753d2..0bd326b6ca58 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/head_64.S</span>
<span class="p_chunk">@@ -883,6 +883,7 @@</span> <span class="p_context"> sparc64_boot_end:</span>
 #include &quot;helpers.S&quot;
 #include &quot;hvcalls.S&quot;
 #include &quot;sun4v_tlb_miss.S&quot;
<span class="p_add">+#include &quot;sun4v_mcd.S&quot;</span>
 #include &quot;sun4v_ivec.S&quot;
 #include &quot;ktlb.S&quot;
 #include &quot;tsb.S&quot;
<span class="p_header">diff --git a/arch/sparc/kernel/sun4v_mcd.S b/arch/sparc/kernel/sun4v_mcd.S</span>
new file mode 100644
<span class="p_header">index 000000000000..92afb6248dbc</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/sparc/kernel/sun4v_mcd.S</span>
<span class="p_chunk">@@ -0,0 +1,17 @@</span> <span class="p_context"></span>
<span class="p_add">+/* sun4v_mcd.S: Sun4v memory corruption detected precise exception handler</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (C) 2015 Bob Picco &lt;bob.picco@oracle.com&gt;</span>
<span class="p_add">+ * Copyright (C) 2015 Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This work is licensed under the terms of the GNU GPL, version 2.</span>
<span class="p_add">+ */</span>
<span class="p_add">+	.text</span>
<span class="p_add">+	.align 32</span>
<span class="p_add">+</span>
<span class="p_add">+sun4v_mcd_detect_precise:</span>
<span class="p_add">+	mov	%l4, %o1</span>
<span class="p_add">+	mov 	%l5, %o2</span>
<span class="p_add">+	call	sun4v_mem_corrupt_detect_precise</span>
<span class="p_add">+	 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_add">+	ba,a,pt	%xcc, rtrap</span>
<span class="p_add">+	 nop</span>
<span class="p_header">diff --git a/arch/sparc/kernel/traps_64.c b/arch/sparc/kernel/traps_64.c</span>
<span class="p_header">index ad31af1dd726..0fe0eed3cecb 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/traps_64.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/traps_64.c</span>
<span class="p_chunk">@@ -2605,6 +2605,60 @@</span> <span class="p_context"> void sun4v_do_mna(struct pt_regs *regs, unsigned long addr, unsigned long type_c</span>
 	force_sig_info(SIGBUS, &amp;info, current);
 }
 
<span class="p_add">+/* sun4v_mem_corrupt_detect_precise() - Handle precise exception on an ADI</span>
<span class="p_add">+ * tag mismatch.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * ADI version tag mismatch on a load from memory always results in a</span>
<span class="p_add">+ * precise exception. Tag mismatch on a store to memory will result in</span>
<span class="p_add">+ * precise exception if MCDPER or PMCDPER is set to 1.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void sun4v_mem_corrupt_detect_precise(struct pt_regs *regs, unsigned long addr,</span>
<span class="p_add">+				      unsigned long context)</span>
<span class="p_add">+{</span>
<span class="p_add">+	siginfo_t info;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (notify_die(DIE_TRAP, &quot;memory corruption precise exception&quot;, regs,</span>
<span class="p_add">+		       0, 0x8, SIGSEGV) == NOTIFY_STOP)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (regs-&gt;tstate &amp; TSTATE_PRIV) {</span>
<span class="p_add">+		/* MCD exception could happen because the task was running</span>
<span class="p_add">+		 * a system call with MCD enabled and passed a non-versioned</span>
<span class="p_add">+		 * pointer or pointer with bad version tag to  the system</span>
<span class="p_add">+		 * call.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		const struct exception_table_entry *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+		entry = search_exception_tables(regs-&gt;tpc);</span>
<span class="p_add">+		if (entry) {</span>
<span class="p_add">+			/* Looks like a bad syscall parameter */</span>
<span class="p_add">+#ifdef DEBUG_EXCEPTIONS</span>
<span class="p_add">+			pr_emerg(&quot;Exception: PC&lt;%016lx&gt; faddr&lt;UNKNOWN&gt;\n&quot;,</span>
<span class="p_add">+				 regs-&gt;tpc);</span>
<span class="p_add">+			pr_emerg(&quot;EX_TABLE: insn&lt;%016lx&gt; fixup&lt;%016lx&gt;\n&quot;,</span>
<span class="p_add">+				 regs-&gt;tpc, entry-&gt;fixup);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+			regs-&gt;tpc = entry-&gt;fixup;</span>
<span class="p_add">+			regs-&gt;tnpc = regs-&gt;tpc + 4;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pr_emerg(&quot;%s: ADDR[%016lx] CTX[%lx], going.\n&quot;,</span>
<span class="p_add">+			 __func__, addr, context);</span>
<span class="p_add">+		die_if_kernel(&quot;MCD precise&quot;, regs);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (test_thread_flag(TIF_32BIT)) {</span>
<span class="p_add">+		regs-&gt;tpc &amp;= 0xffffffff;</span>
<span class="p_add">+		regs-&gt;tnpc &amp;= 0xffffffff;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	info.si_signo = SIGSEGV;</span>
<span class="p_add">+	info.si_code = SEGV_ADIPERR;</span>
<span class="p_add">+	info.si_errno = 0;</span>
<span class="p_add">+	info.si_addr = (void __user *) addr;</span>
<span class="p_add">+	info.si_trapno = 0;</span>
<span class="p_add">+	force_sig_info(SIGSEGV, &amp;info, current);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void do_privop(struct pt_regs *regs)
 {
 	enum ctx_state prev_state = exception_enter();
<span class="p_header">diff --git a/arch/sparc/kernel/ttable_64.S b/arch/sparc/kernel/ttable_64.S</span>
<span class="p_header">index efe93ab4a9c0..36a9708f93d9 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/ttable_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/ttable_64.S</span>
<span class="p_chunk">@@ -25,8 +25,10 @@</span> <span class="p_context"> tl0_ill:	membar #Sync</span>
 		TRAP_7INSNS(do_illegal_instruction)
 tl0_privop:	TRAP(do_privop)
 tl0_resv012:	BTRAP(0x12) BTRAP(0x13) BTRAP(0x14) BTRAP(0x15) BTRAP(0x16) BTRAP(0x17)
<span class="p_del">-tl0_resv018:	BTRAP(0x18) BTRAP(0x19) BTRAP(0x1a) BTRAP(0x1b) BTRAP(0x1c) BTRAP(0x1d)</span>
<span class="p_del">-tl0_resv01e:	BTRAP(0x1e) BTRAP(0x1f)</span>
<span class="p_add">+tl0_resv018:	BTRAP(0x18) BTRAP(0x19)</span>
<span class="p_add">+tl0_mcd:	SUN4V_MCD_PRECISE</span>
<span class="p_add">+tl0_resv01b:	BTRAP(0x1b)</span>
<span class="p_add">+tl0_resv01c:	BTRAP(0x1c) BTRAP(0x1d)	BTRAP(0x1e) BTRAP(0x1f)</span>
 tl0_fpdis:	TRAP_NOSAVE(do_fpdis)
 tl0_fpieee:	TRAP_SAVEFPU(do_fpieee)
 tl0_fpother:	TRAP_NOSAVE(do_fpother_check_fitos)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



