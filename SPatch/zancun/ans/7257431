
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[04/16] page-flags: define PG_locked behavior on compound pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [04/16] page-flags: define PG_locked behavior on compound pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 24, 2015, 2:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1443106264-78075-5-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7257431/mbox/"
   >mbox</a>
|
   <a href="/patch/7257431/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7257431/">/patch/7257431/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id E7E699F32B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Sep 2015 14:51:43 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id AA77C208BB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Sep 2015 14:51:42 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 448A0208D9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Sep 2015 14:51:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754765AbbIXOva (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 24 Sep 2015 10:51:30 -0400
Received: from mga02.intel.com ([134.134.136.20]:12335 &quot;EHLO mga02.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754494AbbIXOv2 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 24 Sep 2015 10:51:28 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by orsmga101.jf.intel.com with ESMTP; 24 Sep 2015 07:51:11 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.17,581,1437462000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;796482550&quot;
Received: from black.fi.intel.com ([10.237.72.93])
	by fmsmga001.fm.intel.com with ESMTP; 24 Sep 2015 07:51:07 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 13BF115E; Thu, 24 Sep 2015 17:51:06 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Christoph Lameter &lt;cl@gentwo.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Steve Capper &lt;steve.capper@linaro.org&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Jerome Marchand &lt;jmarchan@redhat.com&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 04/16] page-flags: define PG_locked behavior on compound
	pages
Date: Thu, 24 Sep 2015 17:50:52 +0300
Message-Id: &lt;1443106264-78075-5-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.5.1
In-Reply-To: &lt;1443106264-78075-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;20150921153509.fef7ecdf313ef74307c43b65@linux-foundation.org&gt;
	&lt;1443106264-78075-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Sept. 24, 2015, 2:50 p.m.</div>
<pre class="content">
lock_page() must operate on the whole compound page.  It doesn&#39;t make much
sense to lock part of compound page.  Change code to use head page&#39;s
PG_locked, if tail page is passed.

This patch also gets rid of custom helper functions -- __set_page_locked()
and __clear_page_locked().  They are replaced with helpers generated by
__SETPAGEFLAG/__CLEARPAGEFLAG.  Tail pages to these helper would trigger
VM_BUG_ON().

SLUB uses PG_locked as a bit spin locked.  IIUC, tail pages should never
appear there.  VM_BUG_ON() is added to make sure that this assumption is
correct.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 fs/cifs/file.c             |  8 ++++----
 include/linux/page-flags.h |  2 +-
 include/linux/pagemap.h    | 25 ++++++++-----------------
 mm/filemap.c               | 15 +++++++++------
 mm/ksm.c                   |  2 +-
 mm/memory-failure.c        |  2 +-
 mm/migrate.c               |  2 +-
 mm/shmem.c                 |  4 ++--
 mm/slub.c                  |  2 ++
 mm/swap_state.c            |  4 ++--
 mm/vmscan.c                |  2 +-
 11 files changed, 32 insertions(+), 36 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1731">Christoph Lameter</a> - Sept. 24, 2015, 4:08 p.m.</div>
<pre class="content">
On Thu, 24 Sep 2015, Kirill A. Shutemov wrote:
<span class="quote">
&gt; SLUB uses PG_locked as a bit spin locked.  IIUC, tail pages should never</span>
<span class="quote">&gt; appear there.  VM_BUG_ON() is added to make sure that this assumption is</span>
<span class="quote">&gt; correct.</span>

Correct. However, VM_BUG_ON is superfluous. If there is a tail page there
then the information in the page will be not as expected (free list
parameter f.e.) and things will fall apart rapidly with segfaults.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Sept. 24, 2015, 8:26 p.m.</div>
<pre class="content">
On Thu, Sep 24, 2015 at 11:08:29AM -0500, Christoph Lameter wrote:
<span class="quote">&gt; On Thu, 24 Sep 2015, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; SLUB uses PG_locked as a bit spin locked.  IIUC, tail pages should never</span>
<span class="quote">&gt; &gt; appear there.  VM_BUG_ON() is added to make sure that this assumption is</span>
<span class="quote">&gt; &gt; correct.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Correct. However, VM_BUG_ON is superfluous. If there is a tail page there</span>
<span class="quote">&gt; then the information in the page will be not as expected (free list</span>
<span class="quote">&gt; parameter f.e.) and things will fall apart rapidly with segfaults.</span>

Right. But would it provide any clues on what is going on?
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/cifs/file.c b/fs/cifs/file.c</span>
<span class="p_header">index e2a6af1508af..94f81962368c 100644</span>
<span class="p_header">--- a/fs/cifs/file.c</span>
<span class="p_header">+++ b/fs/cifs/file.c</span>
<span class="p_chunk">@@ -3390,13 +3390,13 @@</span> <span class="p_context"> readpages_get_pages(struct address_space *mapping, struct list_head *page_list,</span>
 	 * should have access to this page, we&#39;re safe to simply set
 	 * PG_locked without checking it first.
 	 */
<span class="p_del">-	__set_page_locked(page);</span>
<span class="p_add">+	__SetPageLocked(page);</span>
 	rc = add_to_page_cache_locked(page, mapping,
 				      page-&gt;index, GFP_KERNEL);
 
 	/* give up if we can&#39;t stick it in the cache */
 	if (rc) {
<span class="p_del">-		__clear_page_locked(page);</span>
<span class="p_add">+		__ClearPageLocked(page);</span>
 		return rc;
 	}
 
<span class="p_chunk">@@ -3417,10 +3417,10 @@</span> <span class="p_context"> readpages_get_pages(struct address_space *mapping, struct list_head *page_list,</span>
 		if (*bytes + PAGE_CACHE_SIZE &gt; rsize)
 			break;
 
<span class="p_del">-		__set_page_locked(page);</span>
<span class="p_add">+		__SetPageLocked(page);</span>
 		if (add_to_page_cache_locked(page, mapping, page-&gt;index,
 								GFP_KERNEL)) {
<span class="p_del">-			__clear_page_locked(page);</span>
<span class="p_add">+			__ClearPageLocked(page);</span>
 			break;
 		}
 		list_move_tail(&amp;page-&gt;lru, tmplist);
<span class="p_header">diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="p_header">index 1b3babe5ff69..26102813f0ac 100644</span>
<span class="p_header">--- a/include/linux/page-flags.h</span>
<span class="p_header">+++ b/include/linux/page-flags.h</span>
<span class="p_chunk">@@ -244,7 +244,7 @@</span> <span class="p_context"> static inline int __TestClearPage##uname(struct page *page) { return 0; }</span>
 #define TESTSCFLAG_FALSE(uname)						\
 	TESTSETFLAG_FALSE(uname) TESTCLEARFLAG_FALSE(uname)
 
<span class="p_del">-TESTPAGEFLAG(Locked, locked, PF_ANY)</span>
<span class="p_add">+__PAGEFLAG(Locked, locked, PF_NO_TAIL)</span>
 PAGEFLAG(Error, error, PF_ANY) TESTCLEARFLAG(Error, error, PF_ANY)
 PAGEFLAG(Referenced, referenced, PF_ANY) TESTCLEARFLAG(Referenced, referenced, PF_ANY)
 	__SETPAGEFLAG(Referenced, referenced, PF_ANY)
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index a6c78e00ea96..3e95fb6a77af 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -426,18 +426,9 @@</span> <span class="p_context"> extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
 				unsigned int flags);
 extern void unlock_page(struct page *page);
 
<span class="p_del">-static inline void __set_page_locked(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	__set_bit(PG_locked, &amp;page-&gt;flags);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void __clear_page_locked(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	__clear_bit(PG_locked, &amp;page-&gt;flags);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline int trylock_page(struct page *page)
 {
<span class="p_add">+	page = compound_head(page);</span>
 	return (likely(!test_and_set_bit_lock(PG_locked, &amp;page-&gt;flags)));
 }
 
<span class="p_chunk">@@ -490,9 +481,9 @@</span> <span class="p_context"> extern int wait_on_page_bit_killable_timeout(struct page *page,</span>
 
 static inline int wait_on_page_locked_killable(struct page *page)
 {
<span class="p_del">-	if (PageLocked(page))</span>
<span class="p_del">-		return wait_on_page_bit_killable(page, PG_locked);</span>
<span class="p_del">-	return 0;</span>
<span class="p_add">+	if (!PageLocked(page))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	return wait_on_page_bit_killable(compound_head(page), PG_locked);</span>
 }
 
 extern wait_queue_head_t *page_waitqueue(struct page *page);
<span class="p_chunk">@@ -511,7 +502,7 @@</span> <span class="p_context"> static inline void wake_up_page(struct page *page, int bit)</span>
 static inline void wait_on_page_locked(struct page *page)
 {
 	if (PageLocked(page))
<span class="p_del">-		wait_on_page_bit(page, PG_locked);</span>
<span class="p_add">+		wait_on_page_bit(compound_head(page), PG_locked);</span>
 }
 
 /* 
<span class="p_chunk">@@ -657,17 +648,17 @@</span> <span class="p_context"> int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask);</span>
 
 /*
  * Like add_to_page_cache_locked, but used to add newly allocated pages:
<span class="p_del">- * the page is new, so we can just run __set_page_locked() against it.</span>
<span class="p_add">+ * the page is new, so we can just run __SetPageLocked() against it.</span>
  */
 static inline int add_to_page_cache(struct page *page,
 		struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask)
 {
 	int error;
 
<span class="p_del">-	__set_page_locked(page);</span>
<span class="p_add">+	__SetPageLocked(page);</span>
 	error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 	if (unlikely(error))
<span class="p_del">-		__clear_page_locked(page);</span>
<span class="p_add">+		__ClearPageLocked(page);</span>
 	return error;
 }
 
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index 879747a42f6b..6cc2c17a0ca0 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -682,11 +682,11 @@</span> <span class="p_context"> int add_to_page_cache_lru(struct page *page, struct address_space *mapping,</span>
 	void *shadow = NULL;
 	int ret;
 
<span class="p_del">-	__set_page_locked(page);</span>
<span class="p_add">+	__SetPageLocked(page);</span>
 	ret = __add_to_page_cache_locked(page, mapping, offset,
 					 gfp_mask, &amp;shadow);
 	if (unlikely(ret))
<span class="p_del">-		__clear_page_locked(page);</span>
<span class="p_add">+		__ClearPageLocked(page);</span>
 	else {
 		/*
 		 * The page might have been evicted from cache only
<span class="p_chunk">@@ -809,6 +809,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(add_page_wait_queue);</span>
  */
 void unlock_page(struct page *page)
 {
<span class="p_add">+	page = compound_head(page);</span>
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
 	clear_bit_unlock(PG_locked, &amp;page-&gt;flags);
 	smp_mb__after_atomic();
<span class="p_chunk">@@ -873,18 +874,20 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(page_endio);</span>
  */
 void __lock_page(struct page *page)
 {
<span class="p_del">-	DEFINE_WAIT_BIT(wait, &amp;page-&gt;flags, PG_locked);</span>
<span class="p_add">+	struct page *page_head = compound_head(page);</span>
<span class="p_add">+	DEFINE_WAIT_BIT(wait, &amp;page_head-&gt;flags, PG_locked);</span>
 
<span class="p_del">-	__wait_on_bit_lock(page_waitqueue(page), &amp;wait, bit_wait_io,</span>
<span class="p_add">+	__wait_on_bit_lock(page_waitqueue(page_head), &amp;wait, bit_wait_io,</span>
 							TASK_UNINTERRUPTIBLE);
 }
 EXPORT_SYMBOL(__lock_page);
 
 int __lock_page_killable(struct page *page)
 {
<span class="p_del">-	DEFINE_WAIT_BIT(wait, &amp;page-&gt;flags, PG_locked);</span>
<span class="p_add">+	struct page *page_head = compound_head(page);</span>
<span class="p_add">+	DEFINE_WAIT_BIT(wait, &amp;page_head-&gt;flags, PG_locked);</span>
 
<span class="p_del">-	return __wait_on_bit_lock(page_waitqueue(page), &amp;wait,</span>
<span class="p_add">+	return __wait_on_bit_lock(page_waitqueue(page_head), &amp;wait,</span>
 					bit_wait_io, TASK_KILLABLE);
 }
 EXPORT_SYMBOL_GPL(__lock_page_killable);
<span class="p_header">diff --git a/mm/ksm.c b/mm/ksm.c</span>
<span class="p_header">index 7ee101eaacdf..bc7be0ee2080 100644</span>
<span class="p_header">--- a/mm/ksm.c</span>
<span class="p_header">+++ b/mm/ksm.c</span>
<span class="p_chunk">@@ -1884,7 +1884,7 @@</span> <span class="p_context"> struct page *ksm_might_need_to_copy(struct page *page,</span>
 
 		SetPageDirty(new_page);
 		__SetPageUptodate(new_page);
<span class="p_del">-		__set_page_locked(new_page);</span>
<span class="p_add">+		__SetPageLocked(new_page);</span>
 	}
 
 	return new_page;
<span class="p_header">diff --git a/mm/memory-failure.c b/mm/memory-failure.c</span>
<span class="p_header">index 8424b64711ac..5b965e27aaae 100644</span>
<span class="p_header">--- a/mm/memory-failure.c</span>
<span class="p_header">+++ b/mm/memory-failure.c</span>
<span class="p_chunk">@@ -1166,7 +1166,7 @@</span> <span class="p_context"> int memory_failure(unsigned long pfn, int trapno, int flags)</span>
 	/*
 	 * We ignore non-LRU pages for good reasons.
 	 * - PG_locked is only well defined for LRU pages and a few others
<span class="p_del">-	 * - to avoid races with __set_page_locked()</span>
<span class="p_add">+	 * - to avoid races with __SetPageLocked()</span>
 	 * - to avoid races with __SetPageSlab*() (and more non-atomic ops)
 	 * The check (unnecessarily) ignores LRU pages being isolated and
 	 * walked by the page reclaim code, however that&#39;s not a big loss.
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 94961f4654b7..bd19c7339f8c 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -1765,7 +1765,7 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 		flush_tlb_range(vma, mmun_start, mmun_end);
 
 	/* Prepare a page as a migration target */
<span class="p_del">-	__set_page_locked(new_page);</span>
<span class="p_add">+	__SetPageLocked(new_page);</span>
 	SetPageSwapBacked(new_page);
 
 	/* anon mapping, we can simply copy page-&gt;mapping to the new page: */
<span class="p_header">diff --git a/mm/shmem.c b/mm/shmem.c</span>
<span class="p_header">index 48ce82926d93..1425863f5322 100644</span>
<span class="p_header">--- a/mm/shmem.c</span>
<span class="p_header">+++ b/mm/shmem.c</span>
<span class="p_chunk">@@ -996,7 +996,7 @@</span> <span class="p_context"> static int shmem_replace_page(struct page **pagep, gfp_t gfp,</span>
 	copy_highpage(newpage, oldpage);
 	flush_dcache_page(newpage);
 
<span class="p_del">-	__set_page_locked(newpage);</span>
<span class="p_add">+	__SetPageLocked(newpage);</span>
 	SetPageUptodate(newpage);
 	SetPageSwapBacked(newpage);
 	set_page_private(newpage, swap_index);
<span class="p_chunk">@@ -1188,7 +1188,7 @@</span> <span class="p_context"> repeat:</span>
 		}
 
 		__SetPageSwapBacked(page);
<span class="p_del">-		__set_page_locked(page);</span>
<span class="p_add">+		__SetPageLocked(page);</span>
 		if (sgp == SGP_WRITE)
 			__SetPageReferenced(page);
 
<span class="p_header">diff --git a/mm/slub.c b/mm/slub.c</span>
<span class="p_header">index 999673c386d6..bda33cc4f7e4 100644</span>
<span class="p_header">--- a/mm/slub.c</span>
<span class="p_header">+++ b/mm/slub.c</span>
<span class="p_chunk">@@ -338,11 +338,13 @@</span> <span class="p_context"> static inline int oo_objects(struct kmem_cache_order_objects x)</span>
  */
 static __always_inline void slab_lock(struct page *page)
 {
<span class="p_add">+	VM_BUG_ON_PAGE(PageTail(page), page);</span>
 	bit_spin_lock(PG_locked, &amp;page-&gt;flags);
 }
 
 static __always_inline void slab_unlock(struct page *page)
 {
<span class="p_add">+	VM_BUG_ON_PAGE(PageTail(page), page);</span>
 	__bit_spin_unlock(PG_locked, &amp;page-&gt;flags);
 }
 
<span class="p_header">diff --git a/mm/swap_state.c b/mm/swap_state.c</span>
<span class="p_header">index d504adb7fa5f..d783872d746c 100644</span>
<span class="p_header">--- a/mm/swap_state.c</span>
<span class="p_header">+++ b/mm/swap_state.c</span>
<span class="p_chunk">@@ -353,7 +353,7 @@</span> <span class="p_context"> struct page *__read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,</span>
 		}
 
 		/* May fail (-ENOMEM) if radix-tree node allocation failed. */
<span class="p_del">-		__set_page_locked(new_page);</span>
<span class="p_add">+		__SetPageLocked(new_page);</span>
 		SetPageSwapBacked(new_page);
 		err = __add_to_swap_cache(new_page, entry);
 		if (likely(!err)) {
<span class="p_chunk">@@ -367,7 +367,7 @@</span> <span class="p_context"> struct page *__read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,</span>
 		}
 		radix_tree_preload_end();
 		ClearPageSwapBacked(new_page);
<span class="p_del">-		__clear_page_locked(new_page);</span>
<span class="p_add">+		__ClearPageLocked(new_page);</span>
 		/*
 		 * add_to_swap_cache() doesn&#39;t return -EEXIST, so we can safely
 		 * clear SWAP_HAS_CACHE flag.
<span class="p_header">diff --git a/mm/vmscan.c b/mm/vmscan.c</span>
<span class="p_header">index 38d04810e0ee..a0b8f08e6f62 100644</span>
<span class="p_header">--- a/mm/vmscan.c</span>
<span class="p_header">+++ b/mm/vmscan.c</span>
<span class="p_chunk">@@ -1184,7 +1184,7 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		 * we obviously don&#39;t have to worry about waking up a process
 		 * waiting on the page lock, because there are no references.
 		 */
<span class="p_del">-		__clear_page_locked(page);</span>
<span class="p_add">+		__ClearPageLocked(page);</span>
 free_it:
 		nr_reclaimed++;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



