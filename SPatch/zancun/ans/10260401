
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.1,17/65] x86/mm: Remove the UP asm/tlbflush.h code, always use the (formerly) SMP code - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.1,17/65] x86/mm: Remove the UP asm/tlbflush.h code, always use the (formerly) SMP code</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 6, 2018, 12:24 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180306002538.1761-18-pasha.tatashin@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10260401/mbox/"
   >mbox</a>
|
   <a href="/patch/10260401/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10260401/">/patch/10260401/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2AD8F60365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:37:02 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D5FA028D4F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:37:01 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B8D2F28D25; Tue,  6 Mar 2018 00:37:01 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 87D8528D22
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:37:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933719AbeCFAg5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 5 Mar 2018 19:36:57 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:34898 &quot;EHLO
	aserp2130.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933126AbeCFA0Y (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 5 Mar 2018 19:26:24 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
	by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w260Lu75115124; Tue, 6 Mar 2018 00:26:14 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : subject :
	date : message-id : in-reply-to : references; s=corp-2017-10-26;
	bh=teXhoEtwiZXsRWfzbmoQfyZzk1VDqIrNlsOf1zDDjOo=;
	b=aE4kLNMAwscl7A+8odILGqnZebxljiMqD3wt1Cjlfwz7f9mFhcc5i+8FChRoJorIV6lB
	HmTsI8X+6LeTdf8/ngF1fIxfjNvXS0nW7Scz17nxhat4nUTsfJE5cnnX8893CPd96m/5
	XZDv9NI6IWdAC5tgSSC2hi4RvesJRbEYcwR0xrwg1pw8A2Pr52ISEUCt1kh8FjEbjHW3
	b/RBySE85jRTg+bJDE7gOVjYnl2MZYVFA2Py6IoYbefBtLmfgp4Y/Qx2mseu0zhRLdAh
	etW8ZRRzITvLwcPcP6XVAROruLDSdjWdw5QGwVYjmPN8DGBpl/cmuk2Ff1w+X6ROcGOG
	Mg== 
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp2130.oracle.com with ESMTP id 2ghdxf8k4p-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 06 Mar 2018 00:26:14 +0000
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id w260QDoT025006
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Tue, 6 Mar 2018 00:26:13 GMT
Received: from abhmp0008.oracle.com (abhmp0008.oracle.com [141.146.116.14])
	by userv0121.oracle.com (8.14.4/8.13.8) with ESMTP id
	w260QDeA029069; Tue, 6 Mar 2018 00:26:13 GMT
Received: from localhost.localdomain (/98.216.35.41)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 05 Mar 2018 16:26:12 -0800
From: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;
To: steven.sistare@oracle.com, daniel.m.jordan@oracle.com,
	linux-kernel@vger.kernel.org, Alexander.Levin@microsoft.com,
	dan.j.williams@intel.com, sathyanarayanan.kuppuswamy@intel.com,
	pankaj.laxminarayan.bharadiya@intel.com, akuster@mvista.com,
	cminyard@mvista.com, pasha.tatashin@oracle.com,
	gregkh@linuxfoundation.org, stable@vger.kernel.org
Subject: [PATCH 4.1 17/65] x86/mm: Remove the UP asm/tlbflush.h code,
	always use the (formerly) SMP code
Date: Mon,  5 Mar 2018 19:24:50 -0500
Message-Id: &lt;20180306002538.1761-18-pasha.tatashin@oracle.com&gt;
X-Mailer: git-send-email 2.16.2
In-Reply-To: &lt;20180306002538.1761-1-pasha.tatashin@oracle.com&gt;
References: &lt;20180306002538.1761-1-pasha.tatashin@oracle.com&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8823
	signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1803060003
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a> - March 6, 2018, 12:24 a.m.</div>
<pre class="content">
<span class="from">From: Andy Lutomirski &lt;luto@kernel.org&gt;</span>

commit ce4a4e565f5264909a18c733b864c3f74467f69e upstream.

The UP asm/tlbflush.h generates somewhat nicer code than the SMP version.
Aside from that, it&#39;s fallen quite a bit behind the SMP code:

 - flush_tlb_mm_range() didn&#39;t flush individual pages if the range
   was small.

 - The lazy TLB code was much weaker.  This usually wouldn&#39;t matter,
   but, if a kernel thread flushed its lazy &quot;active_mm&quot; more than
   once (due to reclaim or similar), it wouldn&#39;t be unlazied and
   would instead pointlessly flush repeatedly.

 - Tracepoints were missing.

Aside from that, simply having the UP code around was a maintanence
burden, since it means that any change to the TLB flush code had to
make sure not to break it.

Simplify everything by deleting the UP code.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Arjan van de Ven &lt;arjan@linux.intel.com&gt;
Cc: Borislav Petkov &lt;bpetkov@suse.de&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;
Cc: Nadav Amit &lt;namit@vmware.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-mm@kvack.org
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
Cc: Hugh Dickins &lt;hughd@google.com&gt;
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

(cherry picked from commit b2e24274d50e0ecdf560ebe06dbed0cc648ad3f9)
<span class="signed-off-by">Signed-off-by: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;</span>

Conflicts:
	arch/x86/Kconfig
---
 arch/x86/include/asm/hardirq.h     |  2 +-
 arch/x86/include/asm/mmu.h         |  6 ---
 arch/x86/include/asm/mmu_context.h |  2 -
 arch/x86/include/asm/tlbflush.h    | 78 +-------------------------------------
 arch/x86/mm/init.c                 |  2 -
 arch/x86/mm/tlb.c                  | 17 +--------
 6 files changed, 4 insertions(+), 103 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/hardirq.h b/arch/x86/include/asm/hardirq.h</span>
<span class="p_header">index ebaf64d0a785..edd280d39a31 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/hardirq.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/hardirq.h</span>
<span class="p_chunk">@@ -21,8 +21,8 @@</span> <span class="p_context"> typedef struct {</span>
 #ifdef CONFIG_SMP
 	unsigned int irq_resched_count;
 	unsigned int irq_call_count;
<span class="p_del">-	unsigned int irq_tlb_count;</span>
 #endif
<span class="p_add">+	unsigned int irq_tlb_count;</span>
 #ifdef CONFIG_X86_THERMAL_VECTOR
 	unsigned int irq_thermal_count;
 #endif
<span class="p_header">diff --git a/arch/x86/include/asm/mmu.h b/arch/x86/include/asm/mmu.h</span>
<span class="p_header">index 364d27481a52..652517e86e01 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu.h</span>
<span class="p_chunk">@@ -22,12 +22,6 @@</span> <span class="p_context"> typedef struct {</span>
 	atomic_t perf_rdpmc_allowed;	/* nonzero if rdpmc is allowed */
 } mm_context_t;
 
<span class="p_del">-#ifdef CONFIG_SMP</span>
 void leave_mm(int cpu);
<span class="p_del">-#else</span>
<span class="p_del">-static inline void leave_mm(int cpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif</span>
 
 #endif /* _ASM_X86_MMU_H */
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index 2bf4bae1c65e..29292b7aa370 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -86,10 +86,8 @@</span> <span class="p_context"> void destroy_context(struct mm_struct *mm);</span>
 
 static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
 {
<span class="p_del">-#ifdef CONFIG_SMP</span>
 	if (this_cpu_read(cpu_tlbstate.state) == TLBSTATE_OK)
 		this_cpu_write(cpu_tlbstate.state, TLBSTATE_LAZY);
<span class="p_del">-#endif</span>
 }
 
 extern void switch_mm(struct mm_struct *prev, struct mm_struct *next,
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index f23ee750bb68..4f7017c9cae8 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/processor.h&gt;
 #include &lt;asm/special_insns.h&gt;
<span class="p_add">+#include &lt;asm/smp.h&gt;</span>
 
 static inline void __invpcid(unsigned long pcid, unsigned long addr,
 			     unsigned long type)
<span class="p_chunk">@@ -64,10 +65,8 @@</span> <span class="p_context"> static inline void invpcid_flush_all_nonglobals(void)</span>
 #endif
 
 struct tlb_state {
<span class="p_del">-#ifdef CONFIG_SMP</span>
 	struct mm_struct *active_mm;
 	int state;
<span class="p_del">-#endif</span>
 
 	/*
 	 * Access to this CR4 shadow and to H/W CR4 is protected by
<span class="p_chunk">@@ -208,79 +207,6 @@</span> <span class="p_context"> static inline void __flush_tlb_one(unsigned long addr)</span>
  * and page-granular flushes are available only on i486 and up.
  */
 
<span class="p_del">-#ifndef CONFIG_SMP</span>
<span class="p_del">-</span>
<span class="p_del">-/* &quot;_up&quot; is for UniProcessor.</span>
<span class="p_del">- *</span>
<span class="p_del">- * This is a helper for other header functions.  *Not* intended to be called</span>
<span class="p_del">- * directly.  All global TLB flushes need to either call this, or to bump the</span>
<span class="p_del">- * vm statistics themselves.</span>
<span class="p_del">- */</span>
<span class="p_del">-static inline void __flush_tlb_up(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);</span>
<span class="p_del">-	__flush_tlb();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_all(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);</span>
<span class="p_del">-	__flush_tlb_all();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void local_flush_tlb(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	__flush_tlb_up();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_mm(struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (mm == current-&gt;active_mm)</span>
<span class="p_del">-		__flush_tlb_up();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
<span class="p_del">-				  unsigned long addr)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (vma-&gt;vm_mm == current-&gt;active_mm)</span>
<span class="p_del">-		__flush_tlb_one(addr);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_range(struct vm_area_struct *vma,</span>
<span class="p_del">-				   unsigned long start, unsigned long end)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (vma-&gt;vm_mm == current-&gt;active_mm)</span>
<span class="p_del">-		__flush_tlb_up();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_mm_range(struct mm_struct *mm,</span>
<span class="p_del">-	   unsigned long start, unsigned long end, unsigned long vmflag)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (mm == current-&gt;active_mm)</span>
<span class="p_del">-		__flush_tlb_up();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void native_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="p_del">-					   struct mm_struct *mm,</span>
<span class="p_del">-					   unsigned long start,</span>
<span class="p_del">-					   unsigned long end)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void reset_lazy_tlbstate(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void flush_tlb_kernel_range(unsigned long start,</span>
<span class="p_del">-					  unsigned long end)</span>
<span class="p_del">-{</span>
<span class="p_del">-	flush_tlb_all();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-#else  /* SMP */</span>
<span class="p_del">-</span>
<span class="p_del">-#include &lt;asm/smp.h&gt;</span>
<span class="p_del">-</span>
 #define local_flush_tlb() __flush_tlb()
 
 #define flush_tlb_mm(mm)	flush_tlb_mm_range(mm, 0UL, TLB_FLUSH_ALL, 0UL)
<span class="p_chunk">@@ -311,8 +237,6 @@</span> <span class="p_context"> static inline void reset_lazy_tlbstate(void)</span>
 	this_cpu_write(cpu_tlbstate.active_mm, &amp;init_mm);
 }
 
<span class="p_del">-#endif	/* SMP */</span>
<span class="p_del">-</span>
 #ifndef CONFIG_PARAVIRT
 #define flush_tlb_others(mask, mm, start, end)	\
 	native_flush_tlb_others(mask, mm, start, end)
<span class="p_header">diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c</span>
<span class="p_header">index 3e1bb1c8daea..0a06e5a14278 100644</span>
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -752,10 +752,8 @@</span> <span class="p_context"> void __init zone_sizes_init(void)</span>
 }
 
 DEFINE_PER_CPU_SHARED_ALIGNED(struct tlb_state, cpu_tlbstate) = {
<span class="p_del">-#ifdef CONFIG_SMP</span>
 	.active_mm = &amp;init_mm,
 	.state = 0,
<span class="p_del">-#endif</span>
 	.cr4 = ~0UL,	/* fail hard if we screw up cr4 shadow initialization */
 };
 EXPORT_SYMBOL_GPL(cpu_tlbstate);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 77fdf801efde..95624d903c0e 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -15,7 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/debugfs.h&gt;
 
 /*
<span class="p_del">- *	Smarter SMP flushing macros.</span>
<span class="p_add">+ *	TLB flushing, formerly SMP-only</span>
  *		c/o Linus Torvalds.
  *
  *	These mean you can really definitely utterly forget about
<span class="p_chunk">@@ -28,8 +28,6 @@</span> <span class="p_context"></span>
  *	Implement flush IPI by CALL_FUNCTION_VECTOR, Alex Shi
  */
 
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-</span>
 struct flush_tlb_info {
 	struct mm_struct *flush_mm;
 	unsigned long flush_start;
<span class="p_chunk">@@ -59,8 +57,6 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 }
 EXPORT_SYMBOL_GPL(leave_mm);
 
<span class="p_del">-#endif /* CONFIG_SMP */</span>
<span class="p_del">-</span>
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
 {
<span class="p_chunk">@@ -77,10 +73,8 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	unsigned cpu = smp_processor_id();
 
 	if (likely(prev != next)) {
<span class="p_del">-#ifdef CONFIG_SMP</span>
 		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);
 		this_cpu_write(cpu_tlbstate.active_mm, next);
<span class="p_del">-#endif</span>
 		cpumask_set_cpu(cpu, mm_cpumask(next));
 
 		/*
<span class="p_chunk">@@ -135,9 +129,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 		 */
 		if (unlikely(prev-&gt;context.ldt != next-&gt;context.ldt))
 			load_mm_ldt(next);
<span class="p_del">-	}</span>
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-	  else {</span>
<span class="p_add">+	} else {</span>
 		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);
 		BUG_ON(this_cpu_read(cpu_tlbstate.active_mm) != next);
 
<span class="p_chunk">@@ -164,11 +156,8 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			load_mm_ldt(next);
 		}
 	}
<span class="p_del">-#endif</span>
 }
 
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-</span>
 /*
  * The flush IPI assumes that a thread switch happens in this order:
  * [cpu0: the cpu that switches]
<span class="p_chunk">@@ -416,5 +405,3 @@</span> <span class="p_context"> static int __init create_tlb_single_page_flush_ceiling(void)</span>
 	return 0;
 }
 late_initcall(create_tlb_single_page_flush_ceiling);
<span class="p_del">-</span>
<span class="p_del">-#endif /* CONFIG_SMP */</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



