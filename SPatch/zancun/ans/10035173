
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/6] hugetlbfs: implement memfd sealing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/6] hugetlbfs: implement memfd sealing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137831">Marc-André Lureau</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 31, 2017, 6:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171031184052.25253-5-marcandre.lureau@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10035173/mbox/"
   >mbox</a>
|
   <a href="/patch/10035173/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10035173/">/patch/10035173/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8AF2B60327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 18:42:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7F83928AB0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 18:42:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 744B328ABF; Tue, 31 Oct 2017 18:42:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0EEE928AB0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 18:42:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932945AbdJaSmF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 31 Oct 2017 14:42:05 -0400
Received: from mx1.redhat.com ([209.132.183.28]:60004 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932831AbdJaSlL (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 31 Oct 2017 14:41:11 -0400
Received: from smtp.corp.redhat.com
	(int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id B1F60806A0;
	Tue, 31 Oct 2017 18:41:11 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com B1F60806A0
Authentication-Results: ext-mx02.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx02.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=marcandre.lureau@redhat.com
Received: from localhost (ovpn-112-19.ams2.redhat.com [10.36.112.19])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 274364D72D;
	Tue, 31 Oct 2017 18:41:08 +0000 (UTC)
From: =?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= &lt;marcandre.lureau@redhat.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: aarcange@redhat.com, hughd@google.com, nyc@holomorphy.com,
	mike.kravetz@oracle.com,
	=?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= &lt;marcandre.lureau@redhat.com&gt;
Subject: [PATCH 4/6] hugetlbfs: implement memfd sealing
Date: Tue, 31 Oct 2017 19:40:50 +0100
Message-Id: &lt;20171031184052.25253-5-marcandre.lureau@redhat.com&gt;
In-Reply-To: &lt;20171031184052.25253-1-marcandre.lureau@redhat.com&gt;
References: &lt;20171031184052.25253-1-marcandre.lureau@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Tue, 31 Oct 2017 18:41:11 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137831">Marc-André Lureau</a> - Oct. 31, 2017, 6:40 p.m.</div>
<pre class="content">
Implements memfd sealing, similar to shmem:
- WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in
  memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.
- SHRINK: added similar check as shmem_setattr()
- GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()

Except write() operation that doesn&#39;t exist with hugetlbfs, that
should make sealing as close as it can be to shmem support.
<span class="signed-off-by">
Signed-off-by: Marc-André Lureau &lt;marcandre.lureau@redhat.com&gt;</span>
---
 fs/hugetlbfs/inode.c    | 29 +++++++++++++++++++++++++++--
 include/linux/hugetlb.h |  1 +
 2 files changed, 28 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 1, 2017, 11:44 p.m.</div>
<pre class="content">
On 10/31/2017 11:40 AM, Marc-André Lureau wrote:
<span class="quote">&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Marc-André Lureau &lt;marcandre.lureau@redhat.com&gt;</span>

Looks fine to me,
<span class="reviewed-by">Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59951">David Herrmann</a> - Nov. 3, 2017, 5:03 p.m.</div>
<pre class="content">
Hi

On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau
&lt;marcandre.lureau@redhat.com&gt; wrote:
<span class="quote">&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt; should make sealing as close as it can be to shmem support.</span>

SEAL, SHRINK, and GROW look fine to me.

Regarding WRITE you need to make sure there are no page references
left around. For instance, on shmem any process might trigger the
kernel to GUP mapped shmem pages for asynchronous IO, then unmap the
file and request F_SEAL_WRITE. In this case the seal must be rejected
*iff* the pages are still pinned. shmem does this by requiring the
page-refcounts to be 0. Preferably there would be some better
infrastructure that tells us whether someone operates on those pages,
but this does not exist right now. See shmem_wait_for_pins() for
details.

I have little knowledge on how hugetlbs integrate with the page-cache
and radix-tree, hence I&#39;d prefer if someone can explicitly ACK that
shmem_wait_for_pins() is suitable for hugetlbfs.

Otherwise, this series looks good to me (minus the #ifdef mess..).

Thanks
David
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 3, 2017, 5:12 p.m.</div>
<pre class="content">
On 11/03/2017 10:03 AM, David Herrmann wrote:
<span class="quote">&gt; Hi</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau</span>
<span class="quote">&gt; &lt;marcandre.lureau@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt;&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt;&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt;&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt;&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; SEAL, SHRINK, and GROW look fine to me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Regarding WRITE</span>

The commit message may not be clear.  However, hugetlbfs does not support
the write system call (or aio).  The only way to modify contents of a
hugetlbfs file is via mmap or hole punch/truncate.  So, we do not really
need to worry about those special (a)io cases for hugetlbfs.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59951">David Herrmann</a> - Nov. 3, 2017, 5:41 p.m.</div>
<pre class="content">
Hi

On Fri, Nov 3, 2017 at 6:12 PM, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">&gt; On 11/03/2017 10:03 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau</span>
<span class="quote">&gt;&gt; &lt;marcandre.lureau@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt;&gt;&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;&gt;&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt;&gt;&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt;&gt;&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt;&gt;&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; SEAL, SHRINK, and GROW look fine to me.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Regarding WRITE</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The commit message may not be clear.  However, hugetlbfs does not support</span>
<span class="quote">&gt; the write system call (or aio).  The only way to modify contents of a</span>
<span class="quote">&gt; hugetlbfs file is via mmap or hole punch/truncate.  So, we do not really</span>
<span class="quote">&gt; need to worry about those special (a)io cases for hugetlbfs.</span>

This is not about the write(2) syscall. Please consider this scenario
about shmem:

You create a memfd via memfd_create() and map it writable. You now
call another kernel syscall that takes as input _any mapped page
range_. You pass your mapped memfd-addresses to it. Those syscalls
tend to use get_user_pages() to pin arbitrary user-mapped pages, as
such this also affects shmem. In this case, those pages might stay
mapped even if you munmap() your memfd!

One example of this is using AIO-read() on any other file that
supports it, passing your mapped memfd as buffer to _read into_. The
operations supported on the memfd are irrelevant here.
The selftests contain a FUSE-based test for this, since FUSE allows
user-space to GUP pages for an arbitrary amount of time.

The original fix for this is:

    commit 05f65b5c70909ef686f865f0a85406d74d75f70f
    Author: David Herrmann &lt;dh.herrmann@gmail.com&gt;
    Date:   Fri Aug 8 14:25:36 2014 -0700

        shm: wait for pins to be released when sealing

Please have a look at this. Your patches use shmem_add_seals() almost
unchanged, and as such you call into shmem_wait_for_pins() on
hugetlbfs. I would really like to see an explicit ACK that this works
on hugetlbfs.

Thanks
David
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 3, 2017, 5:56 p.m.</div>
<pre class="content">
On 11/03/2017 10:41 AM, David Herrmann wrote:
<span class="quote">&gt; Hi</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Fri, Nov 3, 2017 at 6:12 PM, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt; On 11/03/2017 10:03 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau</span>
<span class="quote">&gt;&gt;&gt; &lt;marcandre.lureau@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt;&gt;&gt;&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;&gt;&gt;&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt;&gt;&gt;&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt;&gt;&gt;&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt;&gt;&gt;&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; SEAL, SHRINK, and GROW look fine to me.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Regarding WRITE</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The commit message may not be clear.  However, hugetlbfs does not support</span>
<span class="quote">&gt;&gt; the write system call (or aio).  The only way to modify contents of a</span>
<span class="quote">&gt;&gt; hugetlbfs file is via mmap or hole punch/truncate.  So, we do not really</span>
<span class="quote">&gt;&gt; need to worry about those special (a)io cases for hugetlbfs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is not about the write(2) syscall. Please consider this scenario</span>
<span class="quote">&gt; about shmem:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You create a memfd via memfd_create() and map it writable. You now</span>
<span class="quote">&gt; call another kernel syscall that takes as input _any mapped page</span>
<span class="quote">&gt; range_. You pass your mapped memfd-addresses to it. Those syscalls</span>
<span class="quote">&gt; tend to use get_user_pages() to pin arbitrary user-mapped pages, as</span>
<span class="quote">&gt; such this also affects shmem. In this case, those pages might stay</span>
<span class="quote">&gt; mapped even if you munmap() your memfd!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; One example of this is using AIO-read() on any other file that</span>
<span class="quote">&gt; supports it, passing your mapped memfd as buffer to _read into_. The</span>
<span class="quote">&gt; operations supported on the memfd are irrelevant here.</span>
<span class="quote">&gt; The selftests contain a FUSE-based test for this, since FUSE allows</span>
<span class="quote">&gt; user-space to GUP pages for an arbitrary amount of time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The original fix for this is:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     commit 05f65b5c70909ef686f865f0a85406d74d75f70f</span>
<span class="quote">&gt;     Author: David Herrmann &lt;dh.herrmann@gmail.com&gt;</span>
<span class="quote">&gt;     Date:   Fri Aug 8 14:25:36 2014 -0700</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;         shm: wait for pins to be released when sealing</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please have a look at this. Your patches use shmem_add_seals() almost</span>
<span class="quote">&gt; unchanged, and as such you call into shmem_wait_for_pins() on</span>
<span class="quote">&gt; hugetlbfs. I would really like to see an explicit ACK that this works</span>
<span class="quote">&gt; on hugetlbfs.</span>

Thanks for the explanation.  I missed that in your first reply.  I&#39;ll
look into this for hugetlbfs.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 3, 2017, 11:31 p.m.</div>
<pre class="content">
On 11/03/2017 10:56 AM, Mike Kravetz wrote:
<span class="quote">&gt; On 11/03/2017 10:41 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Fri, Nov 3, 2017 at 6:12 PM, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On 11/03/2017 10:03 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau</span>
<span class="quote">&gt;&gt;&gt;&gt; &lt;marcandre.lureau@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; SEAL, SHRINK, and GROW look fine to me.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Regarding WRITE</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The commit message may not be clear.  However, hugetlbfs does not support</span>
<span class="quote">&gt;&gt;&gt; the write system call (or aio).  The only way to modify contents of a</span>
<span class="quote">&gt;&gt;&gt; hugetlbfs file is via mmap or hole punch/truncate.  So, we do not really</span>
<span class="quote">&gt;&gt;&gt; need to worry about those special (a)io cases for hugetlbfs.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is not about the write(2) syscall. Please consider this scenario</span>
<span class="quote">&gt;&gt; about shmem:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You create a memfd via memfd_create() and map it writable. You now</span>
<span class="quote">&gt;&gt; call another kernel syscall that takes as input _any mapped page</span>
<span class="quote">&gt;&gt; range_. You pass your mapped memfd-addresses to it. Those syscalls</span>
<span class="quote">&gt;&gt; tend to use get_user_pages() to pin arbitrary user-mapped pages, as</span>
<span class="quote">&gt;&gt; such this also affects shmem. In this case, those pages might stay</span>
<span class="quote">&gt;&gt; mapped even if you munmap() your memfd!</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; One example of this is using AIO-read() on any other file that</span>
<span class="quote">&gt;&gt; supports it, passing your mapped memfd as buffer to _read into_. The</span>
<span class="quote">&gt;&gt; operations supported on the memfd are irrelevant here.</span>
<span class="quote">&gt;&gt; The selftests contain a FUSE-based test for this, since FUSE allows</span>
<span class="quote">&gt;&gt; user-space to GUP pages for an arbitrary amount of time.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The original fix for this is:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;     commit 05f65b5c70909ef686f865f0a85406d74d75f70f</span>
<span class="quote">&gt;&gt;     Author: David Herrmann &lt;dh.herrmann@gmail.com&gt;</span>
<span class="quote">&gt;&gt;     Date:   Fri Aug 8 14:25:36 2014 -0700</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;         shm: wait for pins to be released when sealing</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Please have a look at this. Your patches use shmem_add_seals() almost</span>
<span class="quote">&gt;&gt; unchanged, and as such you call into shmem_wait_for_pins() on</span>
<span class="quote">&gt;&gt; hugetlbfs. I would really like to see an explicit ACK that this works</span>
<span class="quote">&gt;&gt; on hugetlbfs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for the explanation.  I missed that in your first reply.  I&#39;ll</span>
<span class="quote">&gt; look into this for hugetlbfs.</span>

I reviewed the routines in the above commit and did not see anything that
would prevent them from working properly with hugetlbfs.  I modified the
fuse test to use hugetlbfs based mapping.  I also instrumented the above
routines and verified that tags were set/checked/cleared as designed for
hugetlb pages.  So, that is an ACK on working with hugetlbfs.

This does bring up the point that the fuse seals test should also be
modified to work with hugetlbfs as part of this series.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59951">David Herrmann</a> - Nov. 5, 2017, 12:07 p.m.</div>
<pre class="content">
Hi

On Sat, Nov 4, 2017 at 12:31 AM, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">&gt; On 11/03/2017 10:56 AM, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; On 11/03/2017 10:41 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On Fri, Nov 3, 2017 at 6:12 PM, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On 11/03/2017 10:03 AM, David Herrmann wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; On Tue, Oct 31, 2017 at 7:40 PM, Marc-André Lureau</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; &lt;marcandre.lureau@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Implements memfd sealing, similar to shmem:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; - WRITE: deny fallocate(PUNCH_HOLE). mmap() write is denied in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;   memfd_add_seals(). write() doesn&#39;t exist for hugetlbfs.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; - SHRINK: added similar check as shmem_setattr()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; - GROW: added similar check as shmem_setattr() &amp; shmem_fallocate()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Except write() operation that doesn&#39;t exist with hugetlbfs, that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; should make sealing as close as it can be to shmem support.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; SEAL, SHRINK, and GROW look fine to me.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Regarding WRITE</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; The commit message may not be clear.  However, hugetlbfs does not support</span>
<span class="quote">&gt;&gt;&gt;&gt; the write system call (or aio).  The only way to modify contents of a</span>
<span class="quote">&gt;&gt;&gt;&gt; hugetlbfs file is via mmap or hole punch/truncate.  So, we do not really</span>
<span class="quote">&gt;&gt;&gt;&gt; need to worry about those special (a)io cases for hugetlbfs.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This is not about the write(2) syscall. Please consider this scenario</span>
<span class="quote">&gt;&gt;&gt; about shmem:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; You create a memfd via memfd_create() and map it writable. You now</span>
<span class="quote">&gt;&gt;&gt; call another kernel syscall that takes as input _any mapped page</span>
<span class="quote">&gt;&gt;&gt; range_. You pass your mapped memfd-addresses to it. Those syscalls</span>
<span class="quote">&gt;&gt;&gt; tend to use get_user_pages() to pin arbitrary user-mapped pages, as</span>
<span class="quote">&gt;&gt;&gt; such this also affects shmem. In this case, those pages might stay</span>
<span class="quote">&gt;&gt;&gt; mapped even if you munmap() your memfd!</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; One example of this is using AIO-read() on any other file that</span>
<span class="quote">&gt;&gt;&gt; supports it, passing your mapped memfd as buffer to _read into_. The</span>
<span class="quote">&gt;&gt;&gt; operations supported on the memfd are irrelevant here.</span>
<span class="quote">&gt;&gt;&gt; The selftests contain a FUSE-based test for this, since FUSE allows</span>
<span class="quote">&gt;&gt;&gt; user-space to GUP pages for an arbitrary amount of time.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The original fix for this is:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;     commit 05f65b5c70909ef686f865f0a85406d74d75f70f</span>
<span class="quote">&gt;&gt;&gt;     Author: David Herrmann &lt;dh.herrmann@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt;     Date:   Fri Aug 8 14:25:36 2014 -0700</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;         shm: wait for pins to be released when sealing</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Please have a look at this. Your patches use shmem_add_seals() almost</span>
<span class="quote">&gt;&gt;&gt; unchanged, and as such you call into shmem_wait_for_pins() on</span>
<span class="quote">&gt;&gt;&gt; hugetlbfs. I would really like to see an explicit ACK that this works</span>
<span class="quote">&gt;&gt;&gt; on hugetlbfs.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks for the explanation.  I missed that in your first reply.  I&#39;ll</span>
<span class="quote">&gt;&gt; look into this for hugetlbfs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I reviewed the routines in the above commit and did not see anything that</span>
<span class="quote">&gt; would prevent them from working properly with hugetlbfs.  I modified the</span>
<span class="quote">&gt; fuse test to use hugetlbfs based mapping.  I also instrumented the above</span>
<span class="quote">&gt; routines and verified that tags were set/checked/cleared as designed for</span>
<span class="quote">&gt; hugetlb pages.  So, that is an ACK on working with hugetlbfs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This does bring up the point that the fuse seals test should also be</span>
<span class="quote">&gt; modified to work with hugetlbfs as part of this series.</span>

Perfect! Looks all good to me then!

Thanks
David
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index ea7b10357ac4..62d70b1b1ab9 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -510,8 +510,16 @@</span> <span class="p_context"> static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
 
 	if (hole_end &gt; hole_start) {
 		struct address_space *mapping = inode-&gt;i_mapping;
<span class="p_add">+		struct hugetlbfs_inode_info *info = HUGETLBFS_I(inode);</span>
 
 		inode_lock(inode);
<span class="p_add">+</span>
<span class="p_add">+		/* protected by i_mutex */</span>
<span class="p_add">+		if (info-&gt;seals &amp; F_SEAL_WRITE) {</span>
<span class="p_add">+			inode_unlock(inode);</span>
<span class="p_add">+			return -EPERM;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		i_mmap_lock_write(mapping);
 		if (!RB_EMPTY_ROOT(&amp;mapping-&gt;i_mmap.rb_root))
 			hugetlb_vmdelete_list(&amp;mapping-&gt;i_mmap,
<span class="p_chunk">@@ -529,6 +537,7 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 				loff_t len)
 {
 	struct inode *inode = file_inode(file);
<span class="p_add">+	struct hugetlbfs_inode_info *info = HUGETLBFS_I(inode);</span>
 	struct address_space *mapping = inode-&gt;i_mapping;
 	struct hstate *h = hstate_inode(inode);
 	struct vm_area_struct pseudo_vma;
<span class="p_chunk">@@ -560,6 +569,11 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 	if (error)
 		goto out;
 
<span class="p_add">+	if ((info-&gt;seals &amp; F_SEAL_GROW) &amp;&amp; offset + len &gt; inode-&gt;i_size) {</span>
<span class="p_add">+		error = -EPERM;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * Initialize a pseudo vma as this is required by the huge page
 	 * allocation routines.  If NUMA is configured, use page index
<span class="p_chunk">@@ -650,6 +664,7 @@</span> <span class="p_context"> static int hugetlbfs_setattr(struct dentry *dentry, struct iattr *attr)</span>
 	struct hstate *h = hstate_inode(inode);
 	int error;
 	unsigned int ia_valid = attr-&gt;ia_valid;
<span class="p_add">+	struct hugetlbfs_inode_info *info = HUGETLBFS_I(inode);</span>
 
 	BUG_ON(!inode);
 
<span class="p_chunk">@@ -658,10 +673,17 @@</span> <span class="p_context"> static int hugetlbfs_setattr(struct dentry *dentry, struct iattr *attr)</span>
 		return error;
 
 	if (ia_valid &amp; ATTR_SIZE) {
<span class="p_add">+		loff_t oldsize = inode-&gt;i_size;</span>
<span class="p_add">+		loff_t newsize = attr-&gt;ia_size;</span>
<span class="p_add">+</span>
 		error = -EINVAL;
<span class="p_del">-		if (attr-&gt;ia_size &amp; ~huge_page_mask(h))</span>
<span class="p_add">+		if (newsize &amp; ~huge_page_mask(h))</span>
 			return -EINVAL;
<span class="p_del">-		error = hugetlb_vmtruncate(inode, attr-&gt;ia_size);</span>
<span class="p_add">+		/* protected by i_mutex */</span>
<span class="p_add">+		if ((newsize &lt; oldsize &amp;&amp; (info-&gt;seals &amp; F_SEAL_SHRINK)) ||</span>
<span class="p_add">+		    (newsize &gt; oldsize &amp;&amp; (info-&gt;seals &amp; F_SEAL_GROW)))</span>
<span class="p_add">+			return -EPERM;</span>
<span class="p_add">+		error = hugetlb_vmtruncate(inode, newsize);</span>
 		if (error)
 			return error;
 	}
<span class="p_chunk">@@ -713,6 +735,8 @@</span> <span class="p_context"> static struct inode *hugetlbfs_get_inode(struct super_block *sb,</span>
 
 	inode = new_inode(sb);
 	if (inode) {
<span class="p_add">+		struct hugetlbfs_inode_info *info = HUGETLBFS_I(inode);</span>
<span class="p_add">+</span>
 		inode-&gt;i_ino = get_next_ino();
 		inode_init_owner(inode, dir, mode);
 		lockdep_set_class(&amp;inode-&gt;i_mapping-&gt;i_mmap_rwsem,
<span class="p_chunk">@@ -720,6 +744,7 @@</span> <span class="p_context"> static struct inode *hugetlbfs_get_inode(struct super_block *sb,</span>
 		inode-&gt;i_mapping-&gt;a_ops = &amp;hugetlbfs_aops;
 		inode-&gt;i_atime = inode-&gt;i_mtime = inode-&gt;i_ctime = current_time(inode);
 		inode-&gt;i_mapping-&gt;private_data = resv_map;
<span class="p_add">+		info-&gt;seals = F_SEAL_SEAL;</span>
 		switch (mode &amp; S_IFMT) {
 		default:
 			init_special_inode(inode, mode, dev);
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index f78daf54897d..128ef10902f3 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -281,6 +281,7 @@</span> <span class="p_context"> static inline struct hugetlbfs_sb_info *HUGETLBFS_SB(struct super_block *sb)</span>
 struct hugetlbfs_inode_info {
 	struct shared_policy policy;
 	struct inode vfs_inode;
<span class="p_add">+	unsigned int seals;</span>
 };
 
 static inline struct hugetlbfs_inode_info *HUGETLBFS_I(struct inode *inode)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



