
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] mm: Rework virtual memory accounting - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] mm: Rework virtual memory accounting</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7">Cyrill Gorcunov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 28, 2015, 9:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151228211015.GL2194@uranus&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7927211/mbox/"
   >mbox</a>
|
   <a href="/patch/7927211/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7927211/">/patch/7927211/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 7E042BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Dec 2015 21:10:45 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 92D6B201C8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Dec 2015 21:10:41 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CDCC2201C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Dec 2015 21:10:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752783AbbL1VKY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 28 Dec 2015 16:10:24 -0500
Received: from mail-lf0-f54.google.com ([209.85.215.54]:33781 &quot;EHLO
	mail-lf0-f54.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752703AbbL1VKU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 28 Dec 2015 16:10:20 -0500
Received: by mail-lf0-f54.google.com with SMTP id p203so205858934lfa.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 28 Dec 2015 13:10:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=date:from:to:cc:subject:message-id:mime-version:content-type
	:content-disposition:user-agent;
	bh=FDViluK+yz4Tx91k41ODl7M4ZS6LgXW9qob1/daF37s=;
	b=khVCeNpCitzzRtpqCr1SinR+XxJJws4IcT67NMI0O4AWgOCSC4+Ic8wsjS5BNPxf7Y
	UP5qgg7ke1zfSVGufSvjxDzseKcjUZUv5vRL3mjDa38WyMZqdTbyDkMV+ZmMyd2c4vgu
	aYj09ZL6CguX1EQMfPaCRv3xyjJ9jdwfvbWPgl9a5Zei0V8Qcm8BbfcYCSzB6W/WlgYI
	lNqt0MZgg1/p6wOOl94+krPVTsngoH0L96gil+vrYkr5YcR3V/VSZaLX4bvi94oc4uKs
	hM4o5qw33ruBxhbVj5QqP1qZeWG8wzxVDKTVYFily5vlJoXeR6gNQgsnFkQF23zR+tGo
	kFfw==
X-Received: by 10.25.207.135 with SMTP id f129mr16204330lfg.29.1451337018514;
	Mon, 28 Dec 2015 13:10:18 -0800 (PST)
Received: from uranus.localdomain ([5.18.180.33])
	by smtp.gmail.com with ESMTPSA id
	g7sm10605130lbs.34.2015.12.28.13.10.17
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 28 Dec 2015 13:10:17 -0800 (PST)
Received: by uranus.localdomain (Postfix, from userid 1000)
	id 6F6422127F; Tue, 29 Dec 2015 00:10:15 +0300 (MSK)
Date: Tue, 29 Dec 2015 00:10:15 +0300
From: Cyrill Gorcunov &lt;gorcunov@gmail.com&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;, Linux MM &lt;linux-mm@kvack.org&gt;
Cc: Quentin Casasnovas &lt;quentin.casasnovas@oracle.com&gt;,
	Vegard Nossum &lt;vegard.nossum@oracle.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linuxfoundation.org&gt;, Willy Tarreau &lt;w@1wt.eu&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;, Kees Cook &lt;keescook@google.com&gt;,
	Vladimir Davydov &lt;vdavydov@virtuozzo.com&gt;,
	Konstantin Khlebnikov &lt;koct9i@gmail.com&gt;,
	Pavel Emelyanov &lt;xemul@virtuozzo.com&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;
Subject: [PATCH RFC] mm: Rework virtual memory accounting
Message-ID: &lt;20151228211015.GL2194@uranus&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	T_DKIM_INVALID, 
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7">Cyrill Gorcunov</a> - Dec. 28, 2015, 9:10 p.m.</div>
<pre class="content">
Really sorry for delays. Konstantin, I slightly updated the
changelog (to point where problem came from). Linus are you
fine with accounting not only anonymous memory in VmData?

Guys, take a look please, comments are highly appreciated.
---
<span class="from">
From: Konstantin Khlebnikov &lt;koct9i@gmail.com&gt;</span>

When inspecting a vague code inside prctl(PR_SET_MM_MEM)
call (which testing the RLIMIT_DATA value to figure out
if we&#39;re allowed to assign new @start_brk, @brk, @start_data,
@end_data from mm_struct) it&#39;s been commited that RLIMIT_DATA
in a form it&#39;s implemented now doesn&#39;t do anything useful
because most of user-space libraries use mmap() syscall
for dynamic memory allocations.

Linus suggested to convert RLIMIT_DATA rlimit into something
suitable for anonymous memory accounting. But in this patch
we go further, and the changes are bundled together as:

 * keep vma counting if CONFIG_PROC_FS=n, will be used for limits
 * replace mm-&gt;shared_vm with better defined mm-&gt;data_vm
 * account anonymous executable areas as executable
 * account file-backed growsdown/up areas as stack
 * drop struct file* argument from vm_stat_account
 * enforce RLIMIT_DATA for size of data areas

This way code looks cleaner: now code/stack/data
classification depends only on vm_flags state:

 VM_EXEC &amp; ~VM_WRITE            -&gt; code  (VmExe + VmLib in proc)
 VM_GROWSUP | VM_GROWSDOWN      -&gt; stack (VmStk)
 VM_WRITE &amp; ~VM_SHARED &amp; !stack -&gt; data  (VmData)

The rest (VmSize - VmData - VmStk - VmExe - VmLib) could be
called &quot;shared&quot;, but that might be strange beast like
readonly-private or VM_IO area.

 - RLIMIT_AS            limits whole address space &quot;VmSize&quot;
 - RLIMIT_STACK         limits stack &quot;VmStk&quot; (but each vma individually)
 - RLIMIT_DATA          now limits &quot;VmData&quot;

CC: Quentin Casasnovas &lt;quentin.casasnovas@oracle.com&gt;
CC: Vegard Nossum &lt;vegard.nossum@oracle.com&gt;
CC: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
CC: Andrew Morton &lt;akpm@linuxfoundation.org&gt;
CC: Willy Tarreau &lt;w@1wt.eu&gt;
CC: Andy Lutomirski &lt;luto@amacapital.net&gt;
CC: Kees Cook &lt;keescook@google.com&gt;
CC: Vladimir Davydov &lt;vdavydov@virtuozzo.com&gt;
CC: Pavel Emelyanov &lt;xemul@virtuozzo.com&gt;
CC: Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;
<span class="signed-off-by">Signed-off-by: Konstantin Khlebnikov &lt;koct9i@gmail.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Cyrill Gorcunov &lt;gorcunov@openvz.org&gt;</span>
---
 arch/ia64/kernel/perfmon.c |    3 --
 fs/proc/task_mmu.c         |    7 ++---
 include/linux/mm.h         |   13 ++-------
 include/linux/mm_types.h   |    2 -
 kernel/fork.c              |    5 +--
 mm/debug.c                 |    4 +-
 mm/mmap.c                  |   63 ++++++++++++++++++++++-----------------------
 mm/mprotect.c              |    8 ++++-
 mm/mremap.c                |    7 ++---
 9 files changed, 53 insertions(+), 59 deletions(-)

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Dec. 28, 2015, 10:22 p.m.</div>
<pre class="content">
On Mon, Dec 28, 2015 at 1:10 PM, Cyrill Gorcunov &lt;gorcunov@gmail.com&gt; wrote:
<span class="quote">&gt; Really sorry for delays. Konstantin, I slightly updated the</span>
<span class="quote">&gt; changelog (to point where problem came from). Linus are you</span>
<span class="quote">&gt; fine with accounting not only anonymous memory in VmData?</span>

The patch looks ok to me. I guess if somebody relies on old behavior
we may have to tweak it a bit, but on the whole this looks sane and
I&#39;d be happy to merge it in the 4.5 merge window (and maybe even have
it marked for stable if it works out)

               Linus
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7">Cyrill Gorcunov</a> - Dec. 29, 2015, 9:43 a.m.</div>
<pre class="content">
On Mon, Dec 28, 2015 at 02:22:23PM -0800, Linus Torvalds wrote:
<span class="quote">&gt; On Mon, Dec 28, 2015 at 1:10 PM, Cyrill Gorcunov &lt;gorcunov@gmail.com&gt; wrote:</span>
<span class="quote">&gt; &gt; Really sorry for delays. Konstantin, I slightly updated the</span>
<span class="quote">&gt; &gt; changelog (to point where problem came from). Linus are you</span>
<span class="quote">&gt; &gt; fine with accounting not only anonymous memory in VmData?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch looks ok to me. I guess if somebody relies on old behavior</span>
<span class="quote">&gt; we may have to tweak it a bit, but on the whole this looks sane and</span>
<span class="quote">&gt; I&#39;d be happy to merge it in the 4.5 merge window (and maybe even have</span>
<span class="quote">&gt; it marked for stable if it works out)</span>

Thank you!
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=447">Christian Borntraeger</a> - Jan. 22, 2016, 7:42 p.m.</div>
<pre class="content">
On 12/28/2015 11:22 PM, Linus Torvalds wrote:
<span class="quote">&gt; On Mon, Dec 28, 2015 at 1:10 PM, Cyrill Gorcunov &lt;gorcunov@gmail.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Really sorry for delays. Konstantin, I slightly updated the</span>
<span class="quote">&gt;&gt; changelog (to point where problem came from). Linus are you</span>
<span class="quote">&gt;&gt; fine with accounting not only anonymous memory in VmData?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch looks ok to me. I guess if somebody relies on old behavior</span>
<span class="quote">&gt; we may have to tweak it a bit, but on the whole this looks sane and</span>
<span class="quote">&gt; I&#39;d be happy to merge it in the 4.5 merge window (and maybe even have</span>
<span class="quote">&gt; it marked for stable if it works out)</span>
<span class="quote">&gt; </span>

Just want to mention that this patch breaks older versions of valgrind 
(including the current release)
https://bugs.kde.org/show_bug.cgi?id=357833
It is fixed in trunk (and even triggered some good cleanups, so the valgrind
developers do NOT want it to get reverted). Rawhide already has the valgrind
fix, others might not, so if we consider this for stable, things might break
here and there, but in general this looks like a good cleanup.

Christian
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7">Cyrill Gorcunov</a> - Jan. 22, 2016, 8:20 p.m.</div>
<pre class="content">
On Fri, Jan 22, 2016 at 08:42:11PM +0100, Christian Borntraeger wrote:
<span class="quote">&gt; On 12/28/2015 11:22 PM, Linus Torvalds wrote:</span>
<span class="quote">&gt; &gt; On Mon, Dec 28, 2015 at 1:10 PM, Cyrill Gorcunov &lt;gorcunov@gmail.com&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; Really sorry for delays. Konstantin, I slightly updated the</span>
<span class="quote">&gt; &gt;&gt; changelog (to point where problem came from). Linus are you</span>
<span class="quote">&gt; &gt;&gt; fine with accounting not only anonymous memory in VmData?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The patch looks ok to me. I guess if somebody relies on old behavior</span>
<span class="quote">&gt; &gt; we may have to tweak it a bit, but on the whole this looks sane and</span>
<span class="quote">&gt; &gt; I&#39;d be happy to merge it in the 4.5 merge window (and maybe even have</span>
<span class="quote">&gt; &gt; it marked for stable if it works out)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just want to mention that this patch breaks older versions of valgrind </span>
<span class="quote">&gt; (including the current release)</span>
<span class="quote">&gt; https://bugs.kde.org/show_bug.cgi?id=357833</span>
<span class="quote">&gt; It is fixed in trunk (and even triggered some good cleanups, so the valgrind</span>
<span class="quote">&gt; developers do NOT want it to get reverted). Rawhide already has the valgrind</span>
<span class="quote">&gt; fix, others might not, so if we consider this for stable, things might break</span>
<span class="quote">&gt; here and there, but in general this looks like a good cleanup.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Christian</span>

Thanks a huge for the report, Christian. I think this won&#39;t go for stable
for now, lets see if there are other tools which do the same trick setting
up zero to rlimit data. If indeed this would make more problems than solve
it, we might need to find a way for backward compatibility.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Jan. 22, 2016, 8:21 p.m.</div>
<pre class="content">
On Fri, 22 Jan 2016 20:42:11 +0100 Christian Borntraeger &lt;borntraeger@de.ibm.com&gt; wrote:
<span class="quote">
&gt; On 12/28/2015 11:22 PM, Linus Torvalds wrote:</span>
<span class="quote">&gt; &gt; On Mon, Dec 28, 2015 at 1:10 PM, Cyrill Gorcunov &lt;gorcunov@gmail.com&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; Really sorry for delays. Konstantin, I slightly updated the</span>
<span class="quote">&gt; &gt;&gt; changelog (to point where problem came from). Linus are you</span>
<span class="quote">&gt; &gt;&gt; fine with accounting not only anonymous memory in VmData?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The patch looks ok to me. I guess if somebody relies on old behavior</span>
<span class="quote">&gt; &gt; we may have to tweak it a bit, but on the whole this looks sane and</span>
<span class="quote">&gt; &gt; I&#39;d be happy to merge it in the 4.5 merge window (and maybe even have</span>
<span class="quote">&gt; &gt; it marked for stable if it works out)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just want to mention that this patch breaks older versions of valgrind </span>
<span class="quote">&gt; (including the current release)</span>
<span class="quote">&gt; https://bugs.kde.org/show_bug.cgi?id=357833</span>
<span class="quote">&gt; It is fixed in trunk (and even triggered some good cleanups, so the valgrind</span>
<span class="quote">&gt; developers do NOT want it to get reverted). Rawhide already has the valgrind</span>
<span class="quote">&gt; fix, others might not, so if we consider this for stable, things might break</span>
<span class="quote">&gt; here and there, but in general this looks like a good cleanup.</span>
<span class="quote">&gt; </span>

OK, thanks - that sounds reasonable, although a bit worrisome - what
other userspace was affected?  In some cases people won&#39;t find out for
years...

84638335900f199 (&quot;mm: rework virtual memory accounting&quot;) did not have
the cc:stable tag so it should avoid the -stable dragnet.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Jan. 22, 2016, 8:30 p.m.</div>
<pre class="content">
On Fri, Jan 22, 2016 at 11:42 AM, Christian Borntraeger
&lt;borntraeger@de.ibm.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; Just want to mention that this patch breaks older versions of valgrind</span>
<span class="quote">&gt; (including the current release)</span>
<span class="quote">&gt; https://bugs.kde.org/show_bug.cgi?id=357833</span>

Ugh. Looks like valgrind is doing something that fundamentally can&#39;t
be &quot;tweaked&quot; around in the algorithm. Setting the data limit to zero
will never work with any model that starts accounting any mmap, so we
can&#39;t just tweak things a bit..
<span class="quote">
&gt; It is fixed in trunk (and even triggered some good cleanups, so the valgrind</span>
<span class="quote">&gt; developers do NOT want it to get reverted).</span>

Hmm. If we start getting complaints from users, I suspect we&#39;ll just
have to revert. The fact that the valgrind developers are ok with the
change doesn&#39;t much matter - all that matters is whether users are ok
with it.

The only saving grace is that valgrind is fairly specialized, so it&#39;s
not like it breaks some core workflow. But I could easily see people
who run valgrind as part of some regression suite having their
day-to-day work broken.

So I&#39;ll let it slide for now, but if I start seeing complaints, I
think we&#39;ll just have to revert and wait for fixed valgrind versions
to actually percolate out to people and re-do it later.. (The
&quot;percolate out to people&quot; tends to take a _loong_ time, though).

                 Linus
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">Index: linux-ml.git/arch/ia64/kernel/perfmon.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/arch/ia64/kernel/perfmon.c</span>
<span class="p_header">+++ linux-ml.git/arch/ia64/kernel/perfmon.c</span>
<span class="p_chunk">@@ -2332,8 +2332,7 @@</span> <span class="p_context"> pfm_smpl_buffer_alloc(struct task_struct</span>
 	 */
 	insert_vm_struct(mm, vma);
 
<span class="p_del">-	vm_stat_account(vma-&gt;vm_mm, vma-&gt;vm_flags, vma-&gt;vm_file,</span>
<span class="p_del">-							vma_pages(vma));</span>
<span class="p_add">+	vm_stat_account(vma-&gt;vm_mm, vma-&gt;vm_flags, vma_pages(vma));</span>
 	up_write(&amp;task-&gt;mm-&gt;mmap_sem);
 
 	/*
<span class="p_header">Index: linux-ml.git/fs/proc/task_mmu.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/fs/proc/task_mmu.c</span>
<span class="p_header">+++ linux-ml.git/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -22,7 +22,7 @@</span> <span class="p_context"></span>
 
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
<span class="p_del">-	unsigned long data, text, lib, swap, ptes, pmds;</span>
<span class="p_add">+	unsigned long text, lib, swap, ptes, pmds;</span>
 	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss;
 
 	/*
<span class="p_chunk">@@ -39,7 +39,6 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct</span>
 	if (hiwater_rss &lt; mm-&gt;hiwater_rss)
 		hiwater_rss = mm-&gt;hiwater_rss;
 
<span class="p_del">-	data = mm-&gt;total_vm - mm-&gt;shared_vm - mm-&gt;stack_vm;</span>
 	text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK)) &gt;&gt; 10;
 	lib = (mm-&gt;exec_vm &lt;&lt; (PAGE_SHIFT-10)) - text;
 	swap = get_mm_counter(mm, MM_SWAPENTS);
<span class="p_chunk">@@ -65,7 +64,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct</span>
 		mm-&gt;pinned_vm &lt;&lt; (PAGE_SHIFT-10),
 		hiwater_rss &lt;&lt; (PAGE_SHIFT-10),
 		total_rss &lt;&lt; (PAGE_SHIFT-10),
<span class="p_del">-		data &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="p_add">+		mm-&gt;data_vm &lt;&lt; (PAGE_SHIFT-10),</span>
 		mm-&gt;stack_vm &lt;&lt; (PAGE_SHIFT-10), text, lib,
 		ptes &gt;&gt; 10,
 		pmds &gt;&gt; 10,
<span class="p_chunk">@@ -85,7 +84,7 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struc</span>
 	*shared = get_mm_counter(mm, MM_FILEPAGES);
 	*text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK))
 								&gt;&gt; PAGE_SHIFT;
<span class="p_del">-	*data = mm-&gt;total_vm - mm-&gt;shared_vm;</span>
<span class="p_add">+	*data = mm-&gt;data_vm + mm-&gt;stack_vm;</span>
 	*resident = *shared + get_mm_counter(mm, MM_ANONPAGES);
 	return mm-&gt;total_vm;
 }
<span class="p_header">Index: linux-ml.git/include/linux/mm.h</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/include/linux/mm.h</span>
<span class="p_header">+++ linux-ml.git/include/linux/mm.h</span>
<span class="p_chunk">@@ -1898,7 +1898,9 @@</span> <span class="p_context"> extern void mm_drop_all_locks(struct mm_</span>
 extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
 extern struct file *get_mm_exe_file(struct mm_struct *mm);
 
<span class="p_del">-extern int may_expand_vm(struct mm_struct *mm, unsigned long npages);</span>
<span class="p_add">+extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);</span>
<span class="p_add">+extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);</span>
<span class="p_add">+</span>
 extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
 				   unsigned long addr, unsigned long len,
 				   unsigned long flags,
<span class="p_chunk">@@ -2116,15 +2118,6 @@</span> <span class="p_context"> typedef int (*pte_fn_t)(pte_t *pte, pgta</span>
 extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
 			       unsigned long size, pte_fn_t fn, void *data);
 
<span class="p_del">-#ifdef CONFIG_PROC_FS</span>
<span class="p_del">-void vm_stat_account(struct mm_struct *, unsigned long, struct file *, long);</span>
<span class="p_del">-#else</span>
<span class="p_del">-static inline void vm_stat_account(struct mm_struct *mm,</span>
<span class="p_del">-			unsigned long flags, struct file *file, long pages)</span>
<span class="p_del">-{</span>
<span class="p_del">-	mm-&gt;total_vm += pages;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif /* CONFIG_PROC_FS */</span>
 
 #ifdef CONFIG_DEBUG_PAGEALLOC
 extern bool _debug_pagealloc_enabled;
<span class="p_header">Index: linux-ml.git/include/linux/mm_types.h</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/include/linux/mm_types.h</span>
<span class="p_header">+++ linux-ml.git/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -426,7 +426,7 @@</span> <span class="p_context"> struct mm_struct {</span>
 	unsigned long total_vm;		/* Total pages mapped */
 	unsigned long locked_vm;	/* Pages that have PG_mlocked set */
 	unsigned long pinned_vm;	/* Refcount permanently increased */
<span class="p_del">-	unsigned long shared_vm;	/* Shared pages (files) */</span>
<span class="p_add">+	unsigned long data_vm;		/* VM_WRITE &amp; ~VM_SHARED/GROWSDOWN */</span>
 	unsigned long exec_vm;		/* VM_EXEC &amp; ~VM_WRITE */
 	unsigned long stack_vm;		/* VM_GROWSUP/DOWN */
 	unsigned long def_flags;
<span class="p_header">Index: linux-ml.git/kernel/fork.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/kernel/fork.c</span>
<span class="p_header">+++ linux-ml.git/kernel/fork.c</span>
<span class="p_chunk">@@ -413,7 +413,7 @@</span> <span class="p_context"> static int dup_mmap(struct mm_struct *mm</span>
 	RCU_INIT_POINTER(mm-&gt;exe_file, get_mm_exe_file(oldmm));
 
 	mm-&gt;total_vm = oldmm-&gt;total_vm;
<span class="p_del">-	mm-&gt;shared_vm = oldmm-&gt;shared_vm;</span>
<span class="p_add">+	mm-&gt;data_vm = oldmm-&gt;data_vm;</span>
 	mm-&gt;exec_vm = oldmm-&gt;exec_vm;
 	mm-&gt;stack_vm = oldmm-&gt;stack_vm;
 
<span class="p_chunk">@@ -432,8 +432,7 @@</span> <span class="p_context"> static int dup_mmap(struct mm_struct *mm</span>
 		struct file *file;
 
 		if (mpnt-&gt;vm_flags &amp; VM_DONTCOPY) {
<span class="p_del">-			vm_stat_account(mm, mpnt-&gt;vm_flags, mpnt-&gt;vm_file,</span>
<span class="p_del">-							-vma_pages(mpnt));</span>
<span class="p_add">+			vm_stat_account(mm, mpnt-&gt;vm_flags, -vma_pages(mpnt));</span>
 			continue;
 		}
 		charge = 0;
<span class="p_header">Index: linux-ml.git/mm/debug.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/mm/debug.c</span>
<span class="p_header">+++ linux-ml.git/mm/debug.c</span>
<span class="p_chunk">@@ -175,7 +175,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		&quot;mmap_base %lu mmap_legacy_base %lu highest_vm_end %lu\n&quot;
 		&quot;pgd %p mm_users %d mm_count %d nr_ptes %lu nr_pmds %lu map_count %d\n&quot;
 		&quot;hiwater_rss %lx hiwater_vm %lx total_vm %lx locked_vm %lx\n&quot;
<span class="p_del">-		&quot;pinned_vm %lx shared_vm %lx exec_vm %lx stack_vm %lx\n&quot;</span>
<span class="p_add">+		&quot;pinned_vm %lx data_vm %lx exec_vm %lx stack_vm %lx\n&quot;</span>
 		&quot;start_code %lx end_code %lx start_data %lx end_data %lx\n&quot;
 		&quot;start_brk %lx brk %lx start_stack %lx\n&quot;
 		&quot;arg_start %lx arg_end %lx env_start %lx env_end %lx\n&quot;
<span class="p_chunk">@@ -209,7 +209,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		mm_nr_pmds((struct mm_struct *)mm),
 		mm-&gt;map_count,
 		mm-&gt;hiwater_rss, mm-&gt;hiwater_vm, mm-&gt;total_vm, mm-&gt;locked_vm,
<span class="p_del">-		mm-&gt;pinned_vm, mm-&gt;shared_vm, mm-&gt;exec_vm, mm-&gt;stack_vm,</span>
<span class="p_add">+		mm-&gt;pinned_vm, mm-&gt;data_vm, mm-&gt;exec_vm, mm-&gt;stack_vm,</span>
 		mm-&gt;start_code, mm-&gt;end_code, mm-&gt;start_data, mm-&gt;end_data,
 		mm-&gt;start_brk, mm-&gt;brk, mm-&gt;start_stack,
 		mm-&gt;arg_start, mm-&gt;arg_end, mm-&gt;env_start, mm-&gt;env_end,
<span class="p_header">Index: linux-ml.git/mm/mmap.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/mm/mmap.c</span>
<span class="p_header">+++ linux-ml.git/mm/mmap.c</span>
<span class="p_chunk">@@ -1208,24 +1208,6 @@</span> <span class="p_context"> none:</span>
 	return NULL;
 }
 
<span class="p_del">-#ifdef CONFIG_PROC_FS</span>
<span class="p_del">-void vm_stat_account(struct mm_struct *mm, unsigned long flags,</span>
<span class="p_del">-						struct file *file, long pages)</span>
<span class="p_del">-{</span>
<span class="p_del">-	const unsigned long stack_flags</span>
<span class="p_del">-		= VM_STACK_FLAGS &amp; (VM_GROWSUP|VM_GROWSDOWN);</span>
<span class="p_del">-</span>
<span class="p_del">-	mm-&gt;total_vm += pages;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (file) {</span>
<span class="p_del">-		mm-&gt;shared_vm += pages;</span>
<span class="p_del">-		if ((flags &amp; (VM_EXEC|VM_WRITE)) == VM_EXEC)</span>
<span class="p_del">-			mm-&gt;exec_vm += pages;</span>
<span class="p_del">-	} else if (flags &amp; stack_flags)</span>
<span class="p_del">-		mm-&gt;stack_vm += pages;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif /* CONFIG_PROC_FS */</span>
<span class="p_del">-</span>
 /*
  * If a hint addr is less than mmap_min_addr change hint to be as
  * low as possible but still greater than mmap_min_addr
<span class="p_chunk">@@ -1544,7 +1526,7 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *f</span>
 	unsigned long charged = 0;
 
 	/* Check against address space limit. */
<span class="p_del">-	if (!may_expand_vm(mm, len &gt;&gt; PAGE_SHIFT)) {</span>
<span class="p_add">+	if (!may_expand_vm(mm, vm_flags, len &gt;&gt; PAGE_SHIFT)) {</span>
 		unsigned long nr_pages;
 
 		/*
<span class="p_chunk">@@ -1556,7 +1538,8 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *f</span>
 
 		nr_pages = count_vma_pages_range(mm, addr, addr + len);
 
<span class="p_del">-		if (!may_expand_vm(mm, (len &gt;&gt; PAGE_SHIFT) - nr_pages))</span>
<span class="p_add">+		if (!may_expand_vm(mm, vm_flags,</span>
<span class="p_add">+					(len &gt;&gt; PAGE_SHIFT) - nr_pages))</span>
 			return -ENOMEM;
 	}
 
<span class="p_chunk">@@ -1655,7 +1638,7 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *f</span>
 out:
 	perf_event_mmap(vma);
 
<span class="p_del">-	vm_stat_account(mm, vm_flags, file, len &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+	vm_stat_account(mm, vm_flags, len &gt;&gt; PAGE_SHIFT);</span>
 	if (vm_flags &amp; VM_LOCKED) {
 		if (!((vm_flags &amp; VM_SPECIAL) || is_vm_hugetlb_page(vma) ||
 					vma == get_gate_vma(current-&gt;mm)))
<span class="p_chunk">@@ -2102,7 +2085,7 @@</span> <span class="p_context"> static int acct_stack_growth(struct vm_a</span>
 	unsigned long new_start, actual_size;
 
 	/* address space limit tests */
<span class="p_del">-	if (!may_expand_vm(mm, grow))</span>
<span class="p_add">+	if (!may_expand_vm(mm, vma-&gt;vm_flags, grow))</span>
 		return -ENOMEM;
 
 	/* Stack limit test */
<span class="p_chunk">@@ -2199,8 +2182,7 @@</span> <span class="p_context"> int expand_upwards(struct vm_area_struct</span>
 				spin_lock(&amp;mm-&gt;page_table_lock);
 				if (vma-&gt;vm_flags &amp; VM_LOCKED)
 					mm-&gt;locked_vm += grow;
<span class="p_del">-				vm_stat_account(mm, vma-&gt;vm_flags,</span>
<span class="p_del">-						vma-&gt;vm_file, grow);</span>
<span class="p_add">+				vm_stat_account(mm, vma-&gt;vm_flags, grow);</span>
 				anon_vma_interval_tree_pre_update_vma(vma);
 				vma-&gt;vm_end = address;
 				anon_vma_interval_tree_post_update_vma(vma);
<span class="p_chunk">@@ -2275,8 +2257,7 @@</span> <span class="p_context"> int expand_downwards(struct vm_area_stru</span>
 				spin_lock(&amp;mm-&gt;page_table_lock);
 				if (vma-&gt;vm_flags &amp; VM_LOCKED)
 					mm-&gt;locked_vm += grow;
<span class="p_del">-				vm_stat_account(mm, vma-&gt;vm_flags,</span>
<span class="p_del">-						vma-&gt;vm_file, grow);</span>
<span class="p_add">+				vm_stat_account(mm, vma-&gt;vm_flags, grow);</span>
 				anon_vma_interval_tree_pre_update_vma(vma);
 				vma-&gt;vm_start = address;
 				vma-&gt;vm_pgoff -= grow;
<span class="p_chunk">@@ -2390,7 +2371,7 @@</span> <span class="p_context"> static void remove_vma_list(struct mm_st</span>
 
 		if (vma-&gt;vm_flags &amp; VM_ACCOUNT)
 			nr_accounted += nrpages;
<span class="p_del">-		vm_stat_account(mm, vma-&gt;vm_flags, vma-&gt;vm_file, -nrpages);</span>
<span class="p_add">+		vm_stat_account(mm, vma-&gt;vm_flags, -nrpages);</span>
 		vma = remove_vma(vma);
 	} while (vma);
 	vm_unacct_memory(nr_accounted);
<span class="p_chunk">@@ -2760,7 +2741,7 @@</span> <span class="p_context"> static unsigned long do_brk(unsigned lon</span>
 	}
 
 	/* Check against address space limits *after* clearing old maps... */
<span class="p_del">-	if (!may_expand_vm(mm, len &gt;&gt; PAGE_SHIFT))</span>
<span class="p_add">+	if (!may_expand_vm(mm, flags, len &gt;&gt; PAGE_SHIFT))</span>
 		return -ENOMEM;
 
 	if (mm-&gt;map_count &gt; sysctl_max_map_count)
<span class="p_chunk">@@ -2795,6 +2776,7 @@</span> <span class="p_context"> static unsigned long do_brk(unsigned lon</span>
 out:
 	perf_event_mmap(vma);
 	mm-&gt;total_vm += len &gt;&gt; PAGE_SHIFT;
<span class="p_add">+	mm-&gt;data_vm += len &gt;&gt; PAGE_SHIFT;</span>
 	if (flags &amp; VM_LOCKED)
 		mm-&gt;locked_vm += (len &gt;&gt; PAGE_SHIFT);
 	vma-&gt;vm_flags |= VM_SOFTDIRTY;
<span class="p_chunk">@@ -2986,7 +2968,7 @@</span> <span class="p_context"> out:</span>
  * Return true if the calling process may expand its vm space by the passed
  * number of pages
  */
<span class="p_del">-int may_expand_vm(struct mm_struct *mm, unsigned long npages)</span>
<span class="p_add">+bool may_expand_vm(struct mm_struct *mm, vm_flags_t flags, unsigned long npages)</span>
 {
 	unsigned long cur = mm-&gt;total_vm;	/* pages */
 	unsigned long lim;
<span class="p_chunk">@@ -2994,8 +2976,25 @@</span> <span class="p_context"> int may_expand_vm(struct mm_struct *mm,</span>
 	lim = rlimit(RLIMIT_AS) &gt;&gt; PAGE_SHIFT;
 
 	if (cur + npages &gt; lim)
<span class="p_del">-		return 0;</span>
<span class="p_del">-	return 1;</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((flags &amp; (VM_WRITE | VM_SHARED | (VM_STACK_FLAGS &amp;</span>
<span class="p_add">+				(VM_GROWSUP | VM_GROWSDOWN)))) == VM_WRITE)</span>
<span class="p_add">+		return mm-&gt;data_vm + npages &lt;= rlimit(RLIMIT_DATA);</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mm-&gt;total_vm += npages;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((flags &amp; (VM_EXEC | VM_WRITE)) == VM_EXEC)</span>
<span class="p_add">+		mm-&gt;exec_vm += npages;</span>
<span class="p_add">+	else if (flags &amp; (VM_STACK_FLAGS &amp; (VM_GROWSUP | VM_GROWSDOWN)))</span>
<span class="p_add">+		mm-&gt;stack_vm += npages;</span>
<span class="p_add">+	else if ((flags &amp; (VM_WRITE | VM_SHARED)) == VM_WRITE)</span>
<span class="p_add">+		mm-&gt;data_vm += npages;</span>
 }
 
 static int special_mapping_fault(struct vm_area_struct *vma,
<span class="p_chunk">@@ -3077,7 +3076,7 @@</span> <span class="p_context"> static struct vm_area_struct *__install_</span>
 	if (ret)
 		goto out;
 
<span class="p_del">-	mm-&gt;total_vm += len &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	vm_stat_account(mm, vma-&gt;vm_flags, len &gt;&gt; PAGE_SHIFT);</span>
 
 	perf_event_mmap(vma);
 
<span class="p_header">Index: linux-ml.git/mm/mprotect.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/mm/mprotect.c</span>
<span class="p_header">+++ linux-ml.git/mm/mprotect.c</span>
<span class="p_chunk">@@ -278,6 +278,10 @@</span> <span class="p_context"> mprotect_fixup(struct vm_area_struct *vm</span>
 	 * even if read-only so there is no need to account for them here
 	 */
 	if (newflags &amp; VM_WRITE) {
<span class="p_add">+		/* Check space limits when area turns into data. */</span>
<span class="p_add">+		if (!may_expand_vm(mm, newflags, nrpages) &amp;&amp;</span>
<span class="p_add">+				may_expand_vm(mm, oldflags, nrpages))</span>
<span class="p_add">+			return -ENOMEM;</span>
 		if (!(oldflags &amp; (VM_ACCOUNT|VM_WRITE|VM_HUGETLB|
 						VM_SHARED|VM_NORESERVE))) {
 			charged = nrpages;
<span class="p_chunk">@@ -334,8 +338,8 @@</span> <span class="p_context"> success:</span>
 		populate_vma_page_range(vma, start, end, NULL);
 	}
 
<span class="p_del">-	vm_stat_account(mm, oldflags, vma-&gt;vm_file, -nrpages);</span>
<span class="p_del">-	vm_stat_account(mm, newflags, vma-&gt;vm_file, nrpages);</span>
<span class="p_add">+	vm_stat_account(mm, oldflags, -nrpages);</span>
<span class="p_add">+	vm_stat_account(mm, newflags, nrpages);</span>
 	perf_event_mmap(vma);
 	return 0;
 
<span class="p_header">Index: linux-ml.git/mm/mremap.c</span>
===================================================================
<span class="p_header">--- linux-ml.git.orig/mm/mremap.c</span>
<span class="p_header">+++ linux-ml.git/mm/mremap.c</span>
<span class="p_chunk">@@ -317,7 +317,7 @@</span> <span class="p_context"> static unsigned long move_vma(struct vm_</span>
 	 * If this were a serious issue, we&#39;d add a flag to do_munmap().
 	 */
 	hiwater_vm = mm-&gt;hiwater_vm;
<span class="p_del">-	vm_stat_account(mm, vma-&gt;vm_flags, vma-&gt;vm_file, new_len&gt;&gt;PAGE_SHIFT);</span>
<span class="p_add">+	vm_stat_account(mm, vma-&gt;vm_flags, new_len &gt;&gt; PAGE_SHIFT);</span>
 
 	if (do_munmap(mm, old_addr, old_len) &lt; 0) {
 		/* OOM: unable to split vma, just get accounts right */
<span class="p_chunk">@@ -379,7 +379,8 @@</span> <span class="p_context"> static struct vm_area_struct *vma_to_res</span>
 			return ERR_PTR(-EAGAIN);
 	}
 
<span class="p_del">-	if (!may_expand_vm(mm, (new_len - old_len) &gt;&gt; PAGE_SHIFT))</span>
<span class="p_add">+	if (!may_expand_vm(mm, vma-&gt;vm_flags,</span>
<span class="p_add">+				(new_len - old_len) &gt;&gt; PAGE_SHIFT))</span>
 		return ERR_PTR(-ENOMEM);
 
 	if (vma-&gt;vm_flags &amp; VM_ACCOUNT) {
<span class="p_chunk">@@ -541,7 +542,7 @@</span> <span class="p_context"> SYSCALL_DEFINE5(mremap, unsigned long, a</span>
 				goto out;
 			}
 
<span class="p_del">-			vm_stat_account(mm, vma-&gt;vm_flags, vma-&gt;vm_file, pages);</span>
<span class="p_add">+			vm_stat_account(mm, vma-&gt;vm_flags, pages);</span>
 			if (vma-&gt;vm_flags &amp; VM_LOCKED) {
 				mm-&gt;locked_vm += pages;
 				locked = true;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



