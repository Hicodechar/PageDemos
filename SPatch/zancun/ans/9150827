
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,02/06] iommu/ipmmu-vmsa: Rework interrupt code and use bitmap for context - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,02/06] iommu/ipmmu-vmsa: Rework interrupt code and use bitmap for context</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 2, 2016, 3:55 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160602155540.31018.29838.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9150827/mbox/"
   >mbox</a>
|
   <a href="/patch/9150827/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9150827/">/patch/9150827/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	21E03607D9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 16:06:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 10C0820410
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 16:06:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0054726D17; Thu,  2 Jun 2016 16:06:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8132126D17
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 16:06:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933061AbcFBQGK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 2 Jun 2016 12:06:10 -0400
Received: from mail-pa0-f65.google.com ([209.85.220.65]:33468 &quot;EHLO
	mail-pa0-f65.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932169AbcFBQGG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 2 Jun 2016 12:06:06 -0400
Received: by mail-pa0-f65.google.com with SMTP id di3so3660856pab.0;
	Thu, 02 Jun 2016 09:06:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=kQQwBr/3glenL78qaqnN4w6B5bftafFrveND50RCRg8=;
	b=cF7mB1sUS/yZkckxT/GeQXbLkWqFh9ZosKMbDcoiiMjbC0AXbCuQ686+PbnMUJ5/1r
	RoYMwhj7A2+S/YWZEONRnQCsgQc2xzh8nOJbPmgUK8g38MUjgBpoxSNGyODyeNtbPqhc
	1gOrheISZqVPTBCiXJNMNlDmjk/O4auCQ1sDxSgtjpPF7/x9uAP1rgp4rveeEmAhxcmb
	IU4woICHCuGKtxxZi8WbG42lIYZg83Ypp+KqU1/6y560NDzAXBrmzvr5g/HjJ51CBR+V
	DyLKS46cu+QPsa+d1NcagSmfKVaO2XXbUj6VaPDZCfopJ2VS/dOVF6Uouy4NdpjJ8jCz
	fCXA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=kQQwBr/3glenL78qaqnN4w6B5bftafFrveND50RCRg8=;
	b=L0v++9p/zWiPH0EaOLdxGrtF5u0tgEs10hi6S3IjgjwbmiwktO9+pcLO3++fkDV0Wk
	cAOHBqosKlYEtMcnyB5czQQwb0W2yzXIoO+YjtBwVkxnJE+ziBuTOH3/PSzQN6fcJkAy
	pliaSHrOjjCdbWhwS3K+SchyI7OrVCPXeZ29H8+jmRhnr58Bzl5k5mOo2KKga+kpC56l
	XUjUJfQyZvKhCUCxALsE2edMcyv4PHTdrMiQSRwpcxmz39HoGxJXcYaLDSQb+Zrjw9w/
	2UaCZsoA7uC9FpydhtgaAuLAD9dmS8qhRpKisyF1MpWusf8+3qnt8KfJicOaT150bqhw
	BCCA==
X-Gm-Message-State: ALyK8tLi3Pd60rTlucdynQ9gwRnzVmSfl80/a2CnTZ8tQRV7M/hsjXp0mDc8cHGbpt+bDA==
X-Received: by 10.66.141.139 with SMTP id ro11mr6590662pab.74.1464883565328; 
	Thu, 02 Jun 2016 09:06:05 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	p1sm1854043pfb.73.2016.06.02.09.06.01
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 02 Jun 2016 09:06:03 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: iommu@lists.linux-foundation.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	joro@8bytes.org, linux-kernel@vger.kernel.org,
	linux-renesas-soc@vger.kernel.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;, robin.murphy@arm.com,
	m.szyprowski@samsung.com
Date: Fri, 03 Jun 2016 00:55:40 +0900
Message-Id: &lt;20160602155540.31018.29838.sendpatchset@little-apple&gt;
In-Reply-To: &lt;20160602155519.31018.59925.sendpatchset@little-apple&gt;
References: &lt;20160602155519.31018.59925.sendpatchset@little-apple&gt;
Subject: [PATCH v3 02/06] iommu/ipmmu-vmsa: Rework interrupt code and use
	bitmap for context
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - June 2, 2016, 3:55 p.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Introduce a bitmap for context handing and convert the
interrupt routine to handle all registered contexts.

At this point the number of contexts are still limited.

Also remove the use of the ARM specific mapping variable
from ipmmu_irq() to allow compile on ARM64.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
---

 Changes since V2: (Thanks again to Laurent!)
 - Introduce a spinlock together with the bitmap and domain array.
 - Break out code into separate functions for alloc and free.
 - Perform free after (instead of before) configuring hardware registers.
 - Use the spinlock to protect the domain array in the interrupt handler.

 Changes since V1: (Thanks to Laurent for feedback!)
 - Use simple find_first_zero()/set_bit()/clear_bit() for context management.
 - For allocation rely on spinlock held when calling ipmmu_domain_init_context()
 - For test/free use atomic bitops
 - Return IRQ_HANDLED if any of the contexts generated interrupts

 drivers/iommu/ipmmu-vmsa.c |   76 ++++++++++++++++++++++++++++++++++++++------
 1 file changed, 66 insertions(+), 10 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0002/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2016-06-02 21:10:37.350607110 +0900</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"></span>
  * the Free Software Foundation; version 2 of the License.
  */
 
<span class="p_add">+#include &lt;linux/bitmap.h&gt;</span>
 #include &lt;linux/delay.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
 #include &lt;linux/err.h&gt;
<span class="p_chunk">@@ -26,12 +27,17 @@</span> <span class="p_context"></span>
 
 #include &quot;io-pgtable.h&quot;
 
<span class="p_add">+#define IPMMU_CTX_MAX 1</span>
<span class="p_add">+</span>
 struct ipmmu_vmsa_device {
 	struct device *dev;
 	void __iomem *base;
 	struct list_head list;
 
 	unsigned int num_utlbs;
<span class="p_add">+	spinlock_t lock;			/* Protects ctx and domains[] */</span>
<span class="p_add">+	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);</span>
<span class="p_add">+	struct ipmmu_vmsa_domain *domains[IPMMU_CTX_MAX];</span>
 
 	struct dma_iommu_mapping *mapping;
 };
<span class="p_chunk">@@ -293,9 +299,29 @@</span> <span class="p_context"> static struct iommu_gather_ops ipmmu_gat</span>
  * Domain/Context Management
  */
 
<span class="p_add">+static int ipmmu_domain_allocate_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="p_add">+					 struct ipmmu_vmsa_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = find_first_zero_bit(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
<span class="p_add">+	if (ret != IPMMU_CTX_MAX) {</span>
<span class="p_add">+		mmu-&gt;domains[ret] = domain;</span>
<span class="p_add">+		set_bit(ret, mmu-&gt;ctx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int ipmmu_domain_init_context(struct ipmmu_vmsa_domain *domain)
 {
 	u64 ttbr;
<span class="p_add">+	int ret;</span>
 
 	/*
 	 * Allocate the page table operations.
<span class="p_chunk">@@ -325,10 +351,15 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 		return -EINVAL;
 
 	/*
<span class="p_del">-	 * TODO: When adding support for multiple contexts, find an unused</span>
<span class="p_del">-	 * context.</span>
<span class="p_add">+	 * Find an unused context.</span>
 	 */
<span class="p_del">-	domain-&gt;context_id = 0;</span>
<span class="p_add">+	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="p_add">+	if (ret == IPMMU_CTX_MAX) {</span>
<span class="p_add">+		free_io_pgtable_ops(domain-&gt;iop);</span>
<span class="p_add">+		return -EBUSY;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	domain-&gt;context_id = ret;</span>
 
 	/* TTBR0 */
 	ttbr = domain-&gt;cfg.arm_lpae_s1_cfg.ttbr[0];
<span class="p_chunk">@@ -370,6 +401,19 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	return 0;
 }
 
<span class="p_add">+static void ipmmu_domain_free_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="p_add">+				      unsigned int context_id)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	clear_bit(context_id, mmu-&gt;ctx);</span>
<span class="p_add">+	mmu-&gt;domains[context_id] = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void ipmmu_domain_destroy_context(struct ipmmu_vmsa_domain *domain)
 {
 	/*
<span class="p_chunk">@@ -380,6 +424,7 @@</span> <span class="p_context"> static void ipmmu_domain_destroy_context</span>
 	 */
 	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);
 	ipmmu_tlb_sync(domain);
<span class="p_add">+	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -437,16 +482,25 @@</span> <span class="p_context"> static irqreturn_t ipmmu_domain_irq(stru</span>
 static irqreturn_t ipmmu_irq(int irq, void *dev)
 {
 	struct ipmmu_vmsa_device *mmu = dev;
<span class="p_del">-	struct iommu_domain *io_domain;</span>
<span class="p_del">-	struct ipmmu_vmsa_domain *domain;</span>
<span class="p_add">+	irqreturn_t status = IRQ_NONE;</span>
<span class="p_add">+	unsigned int i;</span>
<span class="p_add">+	unsigned long flags;</span>
 
<span class="p_del">-	if (!mmu-&gt;mapping)</span>
<span class="p_del">-		return IRQ_NONE;</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check interrupts for all active contexts.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for (i = 0; i &lt; IPMMU_CTX_MAX; i++) {</span>
<span class="p_add">+		if (!mmu-&gt;domains[i])</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (ipmmu_domain_irq(mmu-&gt;domains[i]) == IRQ_HANDLED)</span>
<span class="p_add">+			status = IRQ_HANDLED;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	io_domain = mmu-&gt;mapping-&gt;domain;</span>
<span class="p_del">-	domain = to_vmsa_domain(io_domain);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
 
<span class="p_del">-	return ipmmu_domain_irq(domain);</span>
<span class="p_add">+	return status;</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -774,6 +828,8 @@</span> <span class="p_context"> static int ipmmu_probe(struct platform_d</span>
 
 	mmu-&gt;dev = &amp;pdev-&gt;dev;
 	mmu-&gt;num_utlbs = 32;
<span class="p_add">+	spin_lock_init(&amp;mmu-&gt;lock);</span>
<span class="p_add">+	bitmap_zero(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
 
 	/* Map I/O memory and request IRQ. */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



