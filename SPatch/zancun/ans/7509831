
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/3] ARC: mm: HIGHMEM: switch to using phys_addr_t for physical addresses - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/3] ARC: mm: HIGHMEM: switch to using phys_addr_t for physical addresses</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=48431">Vineet Gupta</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 28, 2015, 11:23 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1446031393-2312-4-git-send-email-vgupta@synopsys.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7509831/mbox/"
   >mbox</a>
|
   <a href="/patch/7509831/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7509831/">/patch/7509831/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 7C6ACBEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:25:35 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 75ABD206B1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:25:34 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 349CF20833
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:25:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S965471AbbJ1LZ3 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 28 Oct 2015 07:25:29 -0400
Received: from us01smtprelay-2.synopsys.com ([198.182.47.9]:33826 &quot;EHLO
	smtprelay.synopsys.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S965237AbbJ1LZ1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 28 Oct 2015 07:25:27 -0400
Received: from us02secmta1.synopsys.com (us02secmta1.synopsys.com
	[10.12.235.96])
	by smtprelay.synopsys.com (Postfix) with ESMTP id 407F824E0E8C;
	Wed, 28 Oct 2015 04:25:27 -0700 (PDT)
Received: from us02secmta1.internal.synopsys.com
	(us02secmta1.internal.synopsys.com [127.0.0.1])
	by us02secmta1.internal.synopsys.com (Service) with ESMTP id
	3DCCD4E220; Wed, 28 Oct 2015 04:25:27 -0700 (PDT)
Received: from mailhost.synopsys.com (unknown [10.13.184.66])
	by us02secmta1.internal.synopsys.com (Service) with ESMTP id
	E5B4B4E213; Wed, 28 Oct 2015 04:25:26 -0700 (PDT)
Received: from mailhost.synopsys.com (localhost [127.0.0.1])
	by mailhost.synopsys.com (Postfix) with ESMTP id CDAAF4A4;
	Wed, 28 Oct 2015 04:25:26 -0700 (PDT)
Received: from US01WEHTC2.internal.synopsys.com
	(us01wehtc2.internal.synopsys.com [10.12.239.237])
	by mailhost.synopsys.com (Postfix) with ESMTP id BB7A3472;
	Wed, 28 Oct 2015 04:25:15 -0700 (PDT)
Received: from IN01WEHTCB.internal.synopsys.com (10.144.199.106) by
	US01WEHTC2.internal.synopsys.com (10.12.239.237) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 04:24:38 -0700
Received: from IN01WEHTCA.internal.synopsys.com (10.144.199.103) by
	IN01WEHTCB.internal.synopsys.com (10.144.199.105) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 16:54:36 +0530
Received: from vineetg-E7440.internal.synopsys.com (10.12.197.182) by
	IN01WEHTCA.internal.synopsys.com (10.144.199.243) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 16:54:34 +0530
From: Vineet Gupta &lt;Vineet.Gupta1@synopsys.com&gt;
To: Max Filippov &lt;jcmvbkbc@gmail.com&gt;, Joonsoo Kim &lt;js1304@gmail.com&gt;,
	&quot;Mel Gorman&quot; &lt;mgorman@suse.de&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
CC: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;linux-snps-arc@lists.infraded.org&gt;,
	Alexey Brodkin &lt;Alexey.Brodkin@synopsys.com&gt;,
	Vineet Gupta &lt;Vineet.Gupta1@synopsys.com&gt;
Subject: [PATCH 3/3] ARC: mm: HIGHMEM: switch to using phys_addr_t for
	physical addresses
Date: Wed, 28 Oct 2015 16:53:13 +0530
Message-ID: &lt;1446031393-2312-4-git-send-email-vgupta@synopsys.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1446031393-2312-1-git-send-email-vgupta@synopsys.com&gt;
References: &lt;1446031393-2312-1-git-send-email-vgupta@synopsys.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.12.197.182]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=48431">Vineet Gupta</a> - Oct. 28, 2015, 11:23 a.m.</div>
<pre class="content">
This allows PAE40 support in next patch when we switch to &gt; 32-bits of
physical addresses
<span class="signed-off-by">
Signed-off-by: Vineet Gupta &lt;vgupta@synopsys.com&gt;</span>
---
 arch/arc/include/asm/cacheflush.h |  8 ++++----
 arch/arc/mm/cache.c               | 26 +++++++++++++-------------
 arch/arc/mm/tlb.c                 | 10 +++++-----
 3 files changed, 22 insertions(+), 22 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arc/include/asm/cacheflush.h b/arch/arc/include/asm/cacheflush.h</span>
<span class="p_header">index 0992d3dbcc65..fbe3587c4f36 100644</span>
<span class="p_header">--- a/arch/arc/include/asm/cacheflush.h</span>
<span class="p_header">+++ b/arch/arc/include/asm/cacheflush.h</span>
<span class="p_chunk">@@ -31,10 +31,10 @@</span> <span class="p_context"></span>
 
 void flush_cache_all(void);
 
<span class="p_del">-void flush_icache_range(unsigned long start, unsigned long end);</span>
<span class="p_del">-void __sync_icache_dcache(unsigned long paddr, unsigned long vaddr, int len);</span>
<span class="p_del">-void __inv_icache_page(unsigned long paddr, unsigned long vaddr);</span>
<span class="p_del">-void __flush_dcache_page(unsigned long paddr, unsigned long vaddr);</span>
<span class="p_add">+void flush_icache_range(unsigned long kstart, unsigned long kend);</span>
<span class="p_add">+void __sync_icache_dcache(phys_addr_t paddr, unsigned long vaddr, int len);</span>
<span class="p_add">+void __inv_icache_page(phys_addr_t paddr, unsigned long vaddr);</span>
<span class="p_add">+void __flush_dcache_page(phys_addr_t paddr, unsigned long vaddr);</span>
 
 #define ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE 1
 
<span class="p_header">diff --git a/arch/arc/mm/cache.c b/arch/arc/mm/cache.c</span>
<span class="p_header">index 08a7cc0ac100..6941db059ad8 100644</span>
<span class="p_header">--- a/arch/arc/mm/cache.c</span>
<span class="p_header">+++ b/arch/arc/mm/cache.c</span>
<span class="p_chunk">@@ -26,7 +26,7 @@</span> <span class="p_context"> int ioc_exists;</span>
 volatile int slc_enable = 1, ioc_enable = 1;
 unsigned long perip_space = ARC_UNCACHED_ADDR_SPACE;
 
<span class="p_del">-void (*_cache_line_loop_ic_fn)(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+void (*_cache_line_loop_ic_fn)(phys_addr_t paddr, unsigned long vaddr,</span>
 			       unsigned long sz, const int cacheop);
 
 void (*__dma_cache_wback_inv)(unsigned long start, unsigned long sz);
<span class="p_chunk">@@ -223,7 +223,7 @@</span> <span class="p_context"> slc_chk:</span>
  */
 
 static inline
<span class="p_del">-void __cache_line_loop_v2(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+void __cache_line_loop_v2(phys_addr_t paddr, unsigned long vaddr,</span>
 			  unsigned long sz, const int op)
 {
 	unsigned int aux_cmd;
<span class="p_chunk">@@ -261,7 +261,7 @@</span> <span class="p_context"> void __cache_line_loop_v2(unsigned long paddr, unsigned long vaddr,</span>
 }
 
 static inline
<span class="p_del">-void __cache_line_loop_v3(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+void __cache_line_loop_v3(phys_addr_t paddr, unsigned long vaddr,</span>
 			  unsigned long sz, const int op)
 {
 	unsigned int aux_cmd, aux_tag;
<span class="p_chunk">@@ -315,7 +315,7 @@</span> <span class="p_context"> void __cache_line_loop_v3(unsigned long paddr, unsigned long vaddr,</span>
  * specified in PTAG (similar to MMU v3)
  */
 static inline
<span class="p_del">-void __cache_line_loop_v4(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+void __cache_line_loop_v4(phys_addr_t paddr, unsigned long vaddr,</span>
 			  unsigned long sz, const int cacheop)
 {
 	unsigned int aux_cmd;
<span class="p_chunk">@@ -419,7 +419,7 @@</span> <span class="p_context"> static inline void __dc_entire_op(const int op)</span>
 /*
  * D-Cache Line ops: Per Line INV (discard or wback+discard) or FLUSH (wback)
  */
<span class="p_del">-static inline void __dc_line_op(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+static inline void __dc_line_op(phys_addr_t paddr, unsigned long vaddr,</span>
 				unsigned long sz, const int op)
 {
 	unsigned long flags;
<span class="p_chunk">@@ -452,7 +452,7 @@</span> <span class="p_context"> static inline void __ic_entire_inv(void)</span>
 }
 
 static inline void
<span class="p_del">-__ic_line_inv_vaddr_local(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+__ic_line_inv_vaddr_local(phys_addr_t paddr, unsigned long vaddr,</span>
 			  unsigned long sz)
 {
 	unsigned long flags;
<span class="p_chunk">@@ -469,7 +469,7 @@</span> <span class="p_context"> __ic_line_inv_vaddr_local(unsigned long paddr, unsigned long vaddr,</span>
 #else
 
 struct ic_inv_args {
<span class="p_del">-	unsigned long paddr, vaddr;</span>
<span class="p_add">+	phys_addr_t paddr, vaddr;</span>
 	int sz;
 };
 
<span class="p_chunk">@@ -480,7 +480,7 @@</span> <span class="p_context"> static void __ic_line_inv_vaddr_helper(void *info)</span>
         __ic_line_inv_vaddr_local(ic_inv-&gt;paddr, ic_inv-&gt;vaddr, ic_inv-&gt;sz);
 }
 
<span class="p_del">-static void __ic_line_inv_vaddr(unsigned long paddr, unsigned long vaddr,</span>
<span class="p_add">+static void __ic_line_inv_vaddr(phys_addr_t paddr, unsigned long vaddr,</span>
 				unsigned long sz)
 {
 	struct ic_inv_args ic_inv = {
<span class="p_chunk">@@ -501,7 +501,7 @@</span> <span class="p_context"> static void __ic_line_inv_vaddr(unsigned long paddr, unsigned long vaddr,</span>
 
 #endif /* CONFIG_ARC_HAS_ICACHE */
 
<span class="p_del">-noinline void slc_op(unsigned long paddr, unsigned long sz, const int op)</span>
<span class="p_add">+noinline void slc_op(phys_addr_t paddr, unsigned long sz, const int op)</span>
 {
 #ifdef CONFIG_ISA_ARCV2
 	/*
<span class="p_chunk">@@ -591,7 +591,7 @@</span> <span class="p_context"> void flush_dcache_page(struct page *page)</span>
 	} else if (page_mapped(page)) {
 
 		/* kernel reading from page with U-mapping */
<span class="p_del">-		unsigned long paddr = (unsigned long)page_address(page);</span>
<span class="p_add">+		phys_addr_t paddr = (unsigned long)page_address(page);</span>
 		unsigned long vaddr = page-&gt;index &lt;&lt; PAGE_CACHE_SHIFT;
 
 		if (addr_not_cache_congruent(paddr, vaddr))
<span class="p_chunk">@@ -739,14 +739,14 @@</span> <span class="p_context"> EXPORT_SYMBOL(flush_icache_range);</span>
  *    builtin kernel page will not have any virtual mappings.
  *    kprobe on loadable module will be kernel vaddr.
  */
<span class="p_del">-void __sync_icache_dcache(unsigned long paddr, unsigned long vaddr, int len)</span>
<span class="p_add">+void __sync_icache_dcache(phys_addr_t paddr, unsigned long vaddr, int len)</span>
 {
 	__dc_line_op(paddr, vaddr, len, OP_FLUSH_N_INV);
 	__ic_line_inv_vaddr(paddr, vaddr, len);
 }
 
 /* wrapper to compile time eliminate alignment checks in flush loop */
<span class="p_del">-void __inv_icache_page(unsigned long paddr, unsigned long vaddr)</span>
<span class="p_add">+void __inv_icache_page(phys_addr_t paddr, unsigned long vaddr)</span>
 {
 	__ic_line_inv_vaddr(paddr, vaddr, PAGE_SIZE);
 }
<span class="p_chunk">@@ -755,7 +755,7 @@</span> <span class="p_context"> void __inv_icache_page(unsigned long paddr, unsigned long vaddr)</span>
  * wrapper to clearout kernel or userspace mappings of a page
  * For kernel mappings @vaddr == @paddr
  */
<span class="p_del">-void __flush_dcache_page(unsigned long paddr, unsigned long vaddr)</span>
<span class="p_add">+void __flush_dcache_page(phys_addr_t paddr, unsigned long vaddr)</span>
 {
 	__dc_line_op(paddr, vaddr &amp; PAGE_MASK, PAGE_SIZE, OP_FLUSH_N_INV);
 }
<span class="p_header">diff --git a/arch/arc/mm/tlb.c b/arch/arc/mm/tlb.c</span>
<span class="p_header">index 5dcae21dd8dc..b5f28dc0f924 100644</span>
<span class="p_header">--- a/arch/arc/mm/tlb.c</span>
<span class="p_header">+++ b/arch/arc/mm/tlb.c</span>
<span class="p_chunk">@@ -499,7 +499,7 @@</span> <span class="p_context"> void flush_tlb_kernel_range(unsigned long start, unsigned long end)</span>
 /*
  * Routine to create a TLB entry
  */
<span class="p_del">-void create_tlb(struct vm_area_struct *vma, unsigned long address, pte_t *ptep)</span>
<span class="p_add">+void create_tlb(struct vm_area_struct *vma, unsigned long vaddr, pte_t *ptep)</span>
 {
 	unsigned long flags;
 	unsigned int asid_or_sasid, rwx;
<span class="p_chunk">@@ -535,9 +535,9 @@</span> <span class="p_context"> void create_tlb(struct vm_area_struct *vma, unsigned long address, pte_t *ptep)</span>
 
 	local_irq_save(flags);
 
<span class="p_del">-	tlb_paranoid_check(asid_mm(vma-&gt;vm_mm, smp_processor_id()), address);</span>
<span class="p_add">+	tlb_paranoid_check(asid_mm(vma-&gt;vm_mm, smp_processor_id()), vaddr);</span>
 
<span class="p_del">-	address &amp;= PAGE_MASK;</span>
<span class="p_add">+	vaddr &amp;= PAGE_MASK;</span>
 
 	/* update this PTE credentials */
 	pte_val(*ptep) |= (_PAGE_PRESENT | _PAGE_ACCESSED);
<span class="p_chunk">@@ -547,7 +547,7 @@</span> <span class="p_context"> void create_tlb(struct vm_area_struct *vma, unsigned long address, pte_t *ptep)</span>
 	/* ASID for this task */
 	asid_or_sasid = read_aux_reg(ARC_REG_PID) &amp; 0xff;
 
<span class="p_del">-	pd0 = address | asid_or_sasid | (pte_val(*ptep) &amp; PTE_BITS_IN_PD0);</span>
<span class="p_add">+	pd0 = vaddr | asid_or_sasid | (pte_val(*ptep) &amp; PTE_BITS_IN_PD0);</span>
 
 	/*
 	 * ARC MMU provides fully orthogonal access bits for K/U mode,
<span class="p_chunk">@@ -583,7 +583,7 @@</span> <span class="p_context"> void update_mmu_cache(struct vm_area_struct *vma, unsigned long vaddr_unaligned,</span>
 		      pte_t *ptep)
 {
 	unsigned long vaddr = vaddr_unaligned &amp; PAGE_MASK;
<span class="p_del">-	unsigned long paddr = pte_val(*ptep) &amp; PAGE_MASK;</span>
<span class="p_add">+	phys_addr_t paddr = pte_val(*ptep) &amp; PAGE_MASK;</span>
 	struct page *page = pfn_to_page(pte_pfn(*ptep));
 
 	create_tlb(vma, vaddr, ptep);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



