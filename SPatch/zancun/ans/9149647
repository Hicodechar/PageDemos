
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/4] mm/mmu_gather: Track page size with mmu gather and force flush if page size change - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/4] mm/mmu_gather: Track page size with mmu gather and force flush if page size change</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 2, 2016, 9:39 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1464860389-29019-3-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9149647/mbox/"
   >mbox</a>
|
   <a href="/patch/9149647/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9149647/">/patch/9149647/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AD93360751 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 09:40:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9D9F1263DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 09:40:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9269D2665D; Thu,  2 Jun 2016 09:40:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B237B269DA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 09:40:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932649AbcFBJkl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 2 Jun 2016 05:40:41 -0400
Received: from e17.ny.us.ibm.com ([129.33.205.207]:36133 &quot;EHLO
	e17.ny.us.ibm.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932441AbcFBJkP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 2 Jun 2016 05:40:15 -0400
Received: from localhost
	by e17.ny.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from
	&lt;aneesh.kumar@linux.vnet.ibm.com&gt;; Thu, 2 Jun 2016 05:40:14 -0400
Received: from d01dlp02.pok.ibm.com (9.56.250.167)
	by e17.ny.us.ibm.com (146.89.104.204) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Thu, 2 Jun 2016 05:40:12 -0400
X-IBM-Helo: d01dlp02.pok.ibm.com
X-IBM-MailFrom: aneesh.kumar@linux.vnet.ibm.com
X-IBM-RcptTo: mpe@ellerman.id.au; linux-mm@kvack.org;
	akpm@linux-foundation.org; linux-kernel@vger.kernel.org
Received: from b01cxnp23033.gho.pok.ibm.com (b01cxnp23033.gho.pok.ibm.com
	[9.57.198.28])
	by d01dlp02.pok.ibm.com (Postfix) with ESMTP id AAC116E8045;
	Thu,  2 Jun 2016 05:39:54 -0400 (EDT)
Received: from b01ledav001.gho.pok.ibm.com (b01ledav001.gho.pok.ibm.com
	[9.57.199.106])
	by b01cxnp23033.gho.pok.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP
	id u529eBjK37159044; Thu, 2 Jun 2016 09:40:11 GMT
Received: from b01ledav001.gho.pok.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 783D72803D;
	Thu,  2 Jun 2016 05:40:11 -0400 (EDT)
Received: from skywalker.in.ibm.com (unknown [9.124.35.108])
	by b01ledav001.gho.pok.ibm.com (Postfix) with ESMTP id 0950B2803E;
	Thu,  2 Jun 2016 05:40:09 -0400 (EDT)
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
To: akpm@linux-foundation.org, mpe@ellerman.id.au
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Subject: [PATCH 3/4] mm/mmu_gather: Track page size with mmu gather and
	force flush if page size change
Date: Thu,  2 Jun 2016 15:09:48 +0530
Message-Id: &lt;1464860389-29019-3-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1464860389-29019-1-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
References: &lt;1464860389-29019-1-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 16060209-0041-0000-0000-0000044B82EF
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - June 2, 2016, 9:39 a.m.</div>
<pre class="content">
This allows arch which need to do special handing with respect to
different page size when flushing tlb to implement the same in mmu gather
<span class="signed-off-by">
Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
---
 arch/arm/include/asm/tlb.h  | 18 +++++++++++++++
 arch/ia64/include/asm/tlb.h | 18 +++++++++++++++
 arch/s390/include/asm/tlb.h | 18 +++++++++++++++
 arch/sh/include/asm/tlb.h   | 18 +++++++++++++++
 arch/um/include/asm/tlb.h   | 18 +++++++++++++++
 include/asm-generic/tlb.h   | 56 +++++++++++++++++++++++++++++++++------------
 mm/huge_memory.c            |  2 +-
 mm/hugetlb.c                |  2 +-
 mm/memory.c                 | 13 ++++++++---
 9 files changed, 144 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/tlb.h b/arch/arm/include/asm/tlb.h</span>
<span class="p_header">index 45dea952b0e6..1e25cd80589e 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/tlb.h</span>
<span class="p_chunk">@@ -225,6 +225,24 @@</span> <span class="p_context"> static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
 	}
 }
 
<span class="p_add">+static inline bool __tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					  struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb,</span>
<span class="p_add">+					 struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void __pte_free_tlb(struct mmu_gather *tlb, pgtable_t pte,
 	unsigned long addr)
 {
<span class="p_header">diff --git a/arch/ia64/include/asm/tlb.h b/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">index 85005ab513e9..77e541cf0e5d 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -242,6 +242,24 @@</span> <span class="p_context"> static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
 	}
 }
 
<span class="p_add">+static inline bool __tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					  struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb,</span>
<span class="p_add">+					 struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Remove TLB entry for PTE mapped at virtual address ADDRESS.  This is called for any
  * PTE, not just those pointing to (normal) physical memory.
<span class="p_header">diff --git a/arch/s390/include/asm/tlb.h b/arch/s390/include/asm/tlb.h</span>
<span class="p_header">index 6b98cb3601d5..15711de10403 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/tlb.h</span>
<span class="p_chunk">@@ -98,6 +98,24 @@</span> <span class="p_context"> static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
 	free_page_and_swap_cache(page);
 }
 
<span class="p_add">+static inline bool __tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					  struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb,</span>
<span class="p_add">+					 struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * pte_free_tlb frees a pte table and clears the CRSTE for the
  * page table from the tlb.
<span class="p_header">diff --git a/arch/sh/include/asm/tlb.h b/arch/sh/include/asm/tlb.h</span>
<span class="p_header">index 3dec5e0734f5..025cdb1032f6 100644</span>
<span class="p_header">--- a/arch/sh/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/sh/include/asm/tlb.h</span>
<span class="p_chunk">@@ -109,6 +109,24 @@</span> <span class="p_context"> static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
 	__tlb_remove_page(tlb, page);
 }
 
<span class="p_add">+static inline bool __tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					  struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb,</span>
<span class="p_add">+					 struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #define pte_free_tlb(tlb, ptep, addr)	pte_free((tlb)-&gt;mm, ptep)
 #define pmd_free_tlb(tlb, pmdp, addr)	pmd_free((tlb)-&gt;mm, pmdp)
 #define pud_free_tlb(tlb, pudp, addr)	pud_free((tlb)-&gt;mm, pudp)
<span class="p_header">diff --git a/arch/um/include/asm/tlb.h b/arch/um/include/asm/tlb.h</span>
<span class="p_header">index c6638f8e5e90..821ff0acfe17 100644</span>
<span class="p_header">--- a/arch/um/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/um/include/asm/tlb.h</span>
<span class="p_chunk">@@ -110,6 +110,24 @@</span> <span class="p_context"> static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
 	__tlb_remove_page(tlb, page);
 }
 
<span class="p_add">+static inline bool __tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					  struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb,</span>
<span class="p_add">+					 struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /**
  * tlb_remove_tlb_entry - remember a pte unmapping for later tlb invalidation.
  *
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index 2ac8fe202e9a..3ca36c111b47 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -112,6 +112,7 @@</span> <span class="p_context"> struct mmu_gather {</span>
 	 * that that we can adjust the range after the flush
 	 */
 	unsigned long addr;
<span class="p_add">+	int page_size;</span>
 };
 
 #define HAVE_GENERIC_MMU_GATHER
<span class="p_chunk">@@ -120,25 +121,16 @@</span> <span class="p_context"> void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long</span>
 void tlb_flush_mmu(struct mmu_gather *tlb);
 void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start,
 							unsigned long end);
<span class="p_del">-bool __tlb_remove_page(struct mmu_gather *tlb, struct page *page);</span>
<span class="p_del">-</span>
<span class="p_del">-/* tlb_remove_page</span>
<span class="p_del">- *	Similar to __tlb_remove_page but will call tlb_flush_mmu() itself when</span>
<span class="p_del">- *	required.</span>
<span class="p_del">- */</span>
<span class="p_del">-static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (__tlb_remove_page(tlb, page)) {</span>
<span class="p_del">-		tlb_flush_mmu(tlb);</span>
<span class="p_del">-		__tlb_adjust_range(tlb, tlb-&gt;addr);</span>
<span class="p_del">-		__tlb_remove_page(tlb, page);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_add">+extern bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page,</span>
<span class="p_add">+				   int page_size);</span>
 
 static inline void __tlb_adjust_range(struct mmu_gather *tlb,
 				      unsigned long address)
 {
 	tlb-&gt;start = min(tlb-&gt;start, address);
<span class="p_add">+	/*</span>
<span class="p_add">+	 * IS it enough to update the range by PAGE_SIZE ?</span>
<span class="p_add">+	 */</span>
 	tlb-&gt;end = max(tlb-&gt;end, address + PAGE_SIZE);
 	/*
 	 * Track the last address with which we adjusted the range. This
<span class="p_chunk">@@ -148,6 +140,42 @@</span> <span class="p_context"> static inline void __tlb_adjust_range(struct mmu_gather *tlb,</span>
 	tlb-&gt;addr = address;
 }
 
<span class="p_add">+static inline void tlb_remove_page_size(struct mmu_gather *tlb,</span>
<span class="p_add">+					struct page *page, int page_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (__tlb_remove_page_size(tlb, page, page_size)) {</span>
<span class="p_add">+		tlb_flush_mmu(tlb);</span>
<span class="p_add">+		tlb-&gt;page_size = page_size;</span>
<span class="p_add">+		__tlb_adjust_range(tlb, tlb-&gt;addr);</span>
<span class="p_add">+		__tlb_remove_page_size(tlb, page, page_size);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static bool __tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __tlb_remove_page_size(tlb, page, PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* tlb_remove_page</span>
<span class="p_add">+ *	Similar to __tlb_remove_page but will call tlb_flush_mmu() itself when</span>
<span class="p_add">+ *	required.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tlb_remove_page_size(tlb, page, PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Used on reset</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool __tlb_remove_pte_page(struct mmu_gather *tlb, struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* active-&gt;nr should be zero when we call this */</span>
<span class="p_add">+	VM_BUG_ON_PAGE(tlb-&gt;active-&gt;nr, page);</span>
<span class="p_add">+	tlb-&gt;page_size = PAGE_SIZE;</span>
<span class="p_add">+	__tlb_adjust_range(tlb, tlb-&gt;addr);</span>
<span class="p_add">+	return __tlb_remove_page(tlb, page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void __tlb_reset_range(struct mmu_gather *tlb)
 {
 	if (tlb-&gt;fullmm) {
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 9ed58530f695..a5711093a829 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1694,7 +1694,7 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));
 		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);
 		spin_unlock(ptl);
<span class="p_del">-		tlb_remove_page(tlb, page);</span>
<span class="p_add">+		tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);</span>
 	}
 	return 1;
 }
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 8dd91cd5571c..3495c519583d 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3211,7 +3211,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		page_remove_rmap(page, true);
 
 		spin_unlock(ptl);
<span class="p_del">-		tlb_remove_page(tlb, page);</span>
<span class="p_add">+		tlb_remove_page_size(tlb, page, huge_page_size(h));</span>
 		/*
 		 * Bail out after unmapping reference page if supplied
 		 */
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index a01db5bc756b..c2e7ea955f06 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -233,6 +233,7 @@</span> <span class="p_context"> void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long</span>
 #ifdef CONFIG_HAVE_RCU_TABLE_FREE
 	tlb-&gt;batch = NULL;
 #endif
<span class="p_add">+	tlb-&gt;page_size = 0;</span>
 
 	__tlb_reset_range(tlb);
 }
<span class="p_chunk">@@ -294,12 +295,19 @@</span> <span class="p_context"> void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long e</span>
  *	When out of page slots we must call tlb_flush_mmu().
  *returns true if the caller should flush.
  */
<span class="p_del">-bool __tlb_remove_page(struct mmu_gather *tlb, struct page *page)</span>
<span class="p_add">+bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_size)</span>
 {
 	struct mmu_gather_batch *batch;
 
 	VM_BUG_ON(!tlb-&gt;end);
 
<span class="p_add">+	if (!tlb-&gt;page_size)</span>
<span class="p_add">+		tlb-&gt;page_size = page_size;</span>
<span class="p_add">+	else {</span>
<span class="p_add">+		if (page_size != tlb-&gt;page_size)</span>
<span class="p_add">+			return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	batch = tlb-&gt;active;
 	if (batch-&gt;nr == batch-&gt;max) {
 		if (!tlb_next_batch(tlb))
<span class="p_chunk">@@ -1207,8 +1215,7 @@</span> <span class="p_context"> again:</span>
 		tlb_flush_mmu_free(tlb);
 		if (pending_page) {
 			/* remove the page with new size */
<span class="p_del">-			__tlb_adjust_range(tlb, tlb-&gt;addr);</span>
<span class="p_del">-			__tlb_remove_page(tlb, pending_page);</span>
<span class="p_add">+			__tlb_remove_pte_page(tlb, pending_page);</span>
 			pending_page = NULL;
 		}
 		if (addr != end)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



