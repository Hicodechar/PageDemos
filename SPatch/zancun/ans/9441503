
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[5/5] mm: migrate: Add vm.accel_page_copy in sysfs to control whether to use multi-threaded to accelerate page copy. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [5/5] mm: migrate: Add vm.accel_page_copy in sysfs to control whether to use multi-threaded to accelerate page copy.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168825">Zi Yan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 22, 2016, 4:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161122162530.2370-6-zi.yan@sent.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9441503/mbox/"
   >mbox</a>
|
   <a href="/patch/9441503/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9441503/">/patch/9441503/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	769596075D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Nov 2016 16:26:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6A54D281A7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Nov 2016 16:26:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5B1EC284B9; Tue, 22 Nov 2016 16:26:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C5BB4284B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Nov 2016 16:26:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756251AbcKVQ0q (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 22 Nov 2016 11:26:46 -0500
Received: from out5-smtp.messagingengine.com ([66.111.4.29]:44519 &quot;EHLO
	out5-smtp.messagingengine.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1756109AbcKVQ01 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 22 Nov 2016 11:26:27 -0500
Received: from compute3.internal (compute3.nyi.internal [10.202.2.43])
	by mailout.nyi.internal (Postfix) with ESMTP id DE682206F3;
	Tue, 22 Nov 2016 11:26:25 -0500 (EST)
Received: from frontend2 ([10.202.2.161])
	by compute3.internal (MEProxy); Tue, 22 Nov 2016 11:26:25 -0500
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=sent.com; h=cc
	:date:from:in-reply-to:message-id:references:subject:to
	:x-me-sender:x-me-sender:x-sasl-enc:x-sasl-enc; s=mesmtp; bh=zkc
	tgXbKr5op59dhx/7Fwu73zrM=; b=CXAnvkWEvm3+IZthx4M9vcXu9kzfobn5X+g
	3y89iKadZJTUtk0sH24pTclehD+kcczoRjJw9sZsc+UOdGXjAPaJ5SwJoXIrjALV
	TlKplNUwvoFPO/T6BIELBWVhe+2JaKAoe6DODWpwNx+32gqSsnWZGNKGaAIBsMUY
	Cf4Cv+Ew=
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-sender:x-me-sender:x-sasl-enc
	:x-sasl-enc; s=smtpout; bh=zkctgXbKr5op59dhx/7Fwu73zrM=; b=PQI3/
	WwM2wRAsUyTHlQzMsOJkgRmHLxPt9tToWMvqFHy6gwa5cj3icuDLBBXDcv/15nlP
	J+7CZnqgycZhkbsFyISmvEYbgw9VaopRCKIAyR5Q/L4ujf7HfLqXbXZQcw/p2SRc
	MfRmgxwjpDGEPzsL3TYa0X4bAVM85EZw2/7l18=
X-ME-Sender: &lt;xms:sXE0WKzh1PdV5q1VyQkB0PDfozUBzMG-jnGxrIDFXjjTh2SwPI6hXg&gt;
X-Sasl-enc: kr7RxqCSVYuDB2w5VhXUg0hAyKb9AV7s/a6wS6zlciys 1479831985
Received: from tenansix.rutgers.edu (pool-165-230-225-59.nat.rutgers.edu
	[165.230.225.59])
	by mail.messagingengine.com (Postfix) with ESMTPA id 7E22825065;
	Tue, 22 Nov 2016 11:26:25 -0500 (EST)
From: Zi Yan &lt;zi.yan@sent.com&gt;
To: linux-kernel@vger.kernel.org, linux-mm@kvack.org
Cc: akpm@linux-foundation.org, minchan@kernel.org, vbabka@suse.cz,
	mgorman@techsingularity.net, kirill.shutemov@linux.intel.com,
	n-horiguchi@ah.jp.nec.com, khandual@linux.vnet.ibm.com,
	Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;, Zi Yan &lt;ziy@nvidia.com&gt;
Subject: [PATCH 5/5] mm: migrate: Add vm.accel_page_copy in sysfs to control
	whether to use multi-threaded to accelerate page copy.
Date: Tue, 22 Nov 2016 11:25:30 -0500
Message-Id: &lt;20161122162530.2370-6-zi.yan@sent.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161122162530.2370-1-zi.yan@sent.com&gt;
References: &lt;20161122162530.2370-1-zi.yan@sent.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168825">Zi Yan</a> - Nov. 22, 2016, 4:25 p.m.</div>
<pre class="content">
<span class="from">From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="from">
From: Zi Yan &lt;ziy@nvidia.com&gt;</span>

Since base page migration did not gain any speedup from
multi-threaded methods, we only accelerate the huge page case.
<span class="signed-off-by">
Signed-off-by: Zi Yan &lt;ziy@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
---
 kernel/sysctl.c | 11 +++++++++++
 mm/migrate.c    |  6 ++++++
 2 files changed, 17 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Nov. 24, 2016, 10:09 a.m.</div>
<pre class="content">
On 11/22/2016 09:55 PM, Zi Yan wrote:
<span class="quote">&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; From: Zi Yan &lt;ziy@nvidia.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since base page migration did not gain any speedup from</span>
<span class="quote">&gt; multi-threaded methods, we only accelerate the huge page case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Zi Yan &lt;ziy@nvidia.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  kernel/sysctl.c | 11 +++++++++++</span>
<span class="quote">&gt;  mm/migrate.c    |  6 ++++++</span>
<span class="quote">&gt;  2 files changed, 17 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/kernel/sysctl.c b/kernel/sysctl.c</span>
<span class="quote">&gt; index d54ce12..6c79444 100644</span>
<span class="quote">&gt; --- a/kernel/sysctl.c</span>
<span class="quote">&gt; +++ b/kernel/sysctl.c</span>
<span class="quote">&gt; @@ -98,6 +98,8 @@</span>
<span class="quote">&gt;  #if defined(CONFIG_SYSCTL)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +extern int accel_page_copy;</span>

Hmm, accel_mthread_copy because this is achieved by a multi threaded
copy mechanism.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  /* External variables not in a header file. */</span>
<span class="quote">&gt;  extern int suid_dumpable;</span>
<span class="quote">&gt;  #ifdef CONFIG_COREDUMP</span>
<span class="quote">&gt; @@ -1361,6 +1363,15 @@ static struct ctl_table vm_table[] = {</span>
<span class="quote">&gt;  		.proc_handler   = &amp;hugetlb_mempolicy_sysctl_handler,</span>
<span class="quote">&gt;  	},</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +	{</span>
<span class="quote">&gt; +		.procname	= &quot;accel_page_copy&quot;,</span>
<span class="quote">&gt; +		.data		= &amp;accel_page_copy,</span>
<span class="quote">&gt; +		.maxlen		= sizeof(accel_page_copy),</span>
<span class="quote">&gt; +		.mode		= 0644,</span>
<span class="quote">&gt; +		.proc_handler	= proc_dointvec,</span>
<span class="quote">&gt; +		.extra1		= &amp;zero,</span>
<span class="quote">&gt; +		.extra2		= &amp;one,</span>
<span class="quote">&gt; +	},</span>
<span class="quote">&gt;  	 {</span>
<span class="quote">&gt;  		.procname	= &quot;hugetlb_shm_group&quot;,</span>
<span class="quote">&gt;  		.data		= &amp;sysctl_hugetlb_shm_group,</span>
<span class="quote">&gt; diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="quote">&gt; index 244ece6..e64b490 100644</span>
<span class="quote">&gt; --- a/mm/migrate.c</span>
<span class="quote">&gt; +++ b/mm/migrate.c</span>
<span class="quote">&gt; @@ -48,6 +48,8 @@</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &quot;internal.h&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +int accel_page_copy = 1;</span>
<span class="quote">&gt; +</span>

So its enabled by default.
<span class="quote">
&gt;  /*</span>
<span class="quote">&gt;   * migrate_prep() needs to be called before we start compiling a list of pages</span>
<span class="quote">&gt;   * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is</span>
<span class="quote">&gt; @@ -651,6 +653,10 @@ static void copy_huge_page(struct page *dst, struct page *src,</span>
<span class="quote">&gt;  		nr_pages = hpage_nr_pages(src);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +	/* Try to accelerate page migration if it is not specified in mode  */</span>
<span class="quote">&gt; +	if (accel_page_copy)</span>
<span class="quote">&gt; +		mode |= MIGRATE_MT;</span>

So even if none of the system calls requested for a multi threaded copy,
this setting will override every thing and make it multi threaded.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123671">Zi Yan</a> - Nov. 28, 2016, 3:11 p.m.</div>
<pre class="content">
On 24 Nov 2016, at 5:09, Anshuman Khandual wrote:
<span class="quote">
&gt; On 11/22/2016 09:55 PM, Zi Yan wrote:</span>
<span class="quote">&gt;&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; From: Zi Yan &lt;ziy@nvidia.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Since base page migration did not gain any speedup from</span>
<span class="quote">&gt;&gt; multi-threaded methods, we only accelerate the huge page case.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Zi Yan &lt;ziy@nvidia.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  kernel/sysctl.c | 11 +++++++++++</span>
<span class="quote">&gt;&gt;  mm/migrate.c    |  6 ++++++</span>
<span class="quote">&gt;&gt;  2 files changed, 17 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/kernel/sysctl.c b/kernel/sysctl.c</span>
<span class="quote">&gt;&gt; index d54ce12..6c79444 100644</span>
<span class="quote">&gt;&gt; --- a/kernel/sysctl.c</span>
<span class="quote">&gt;&gt; +++ b/kernel/sysctl.c</span>
<span class="quote">&gt;&gt; @@ -98,6 +98,8 @@</span>
<span class="quote">&gt;&gt;  #if defined(CONFIG_SYSCTL)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +extern int accel_page_copy;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hmm, accel_mthread_copy because this is achieved by a multi threaded</span>
<span class="quote">&gt; copy mechanism.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  /* External variables not in a header file. */</span>
<span class="quote">&gt;&gt;  extern int suid_dumpable;</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_COREDUMP</span>
<span class="quote">&gt;&gt; @@ -1361,6 +1363,15 @@ static struct ctl_table vm_table[] = {</span>
<span class="quote">&gt;&gt;  		.proc_handler   = &amp;hugetlb_mempolicy_sysctl_handler,</span>
<span class="quote">&gt;&gt;  	},</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt; +	{</span>
<span class="quote">&gt;&gt; +		.procname	= &quot;accel_page_copy&quot;,</span>
<span class="quote">&gt;&gt; +		.data		= &amp;accel_page_copy,</span>
<span class="quote">&gt;&gt; +		.maxlen		= sizeof(accel_page_copy),</span>
<span class="quote">&gt;&gt; +		.mode		= 0644,</span>
<span class="quote">&gt;&gt; +		.proc_handler	= proc_dointvec,</span>
<span class="quote">&gt;&gt; +		.extra1		= &amp;zero,</span>
<span class="quote">&gt;&gt; +		.extra2		= &amp;one,</span>
<span class="quote">&gt;&gt; +	},</span>
<span class="quote">&gt;&gt;  	 {</span>
<span class="quote">&gt;&gt;  		.procname	= &quot;hugetlb_shm_group&quot;,</span>
<span class="quote">&gt;&gt;  		.data		= &amp;sysctl_hugetlb_shm_group,</span>
<span class="quote">&gt;&gt; diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="quote">&gt;&gt; index 244ece6..e64b490 100644</span>
<span class="quote">&gt;&gt; --- a/mm/migrate.c</span>
<span class="quote">&gt;&gt; +++ b/mm/migrate.c</span>
<span class="quote">&gt;&gt; @@ -48,6 +48,8 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &quot;internal.h&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +int accel_page_copy = 1;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So its enabled by default.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * migrate_prep() needs to be called before we start compiling a list of pages</span>
<span class="quote">&gt;&gt;   * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is</span>
<span class="quote">&gt;&gt; @@ -651,6 +653,10 @@ static void copy_huge_page(struct page *dst, struct page *src,</span>
<span class="quote">&gt;&gt;  		nr_pages = hpage_nr_pages(src);</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +	/* Try to accelerate page migration if it is not specified in mode  */</span>
<span class="quote">&gt;&gt; +	if (accel_page_copy)</span>
<span class="quote">&gt;&gt; +		mode |= MIGRATE_MT;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So even if none of the system calls requested for a multi threaded copy,</span>
<span class="quote">&gt; this setting will override every thing and make it multi threaded.</span>

This only accelerates huge page copies and achieves much higher
throughput and lower copy time. It should be used most of the time.

As you suggested in other email, I will make this optimization a config option.
If people enable it, they expect it is working. The sysctl interface just let
them disable this optimization when they think it is not going to help.


--
Best Regards
Yan Zi
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/kernel/sysctl.c b/kernel/sysctl.c</span>
<span class="p_header">index d54ce12..6c79444 100644</span>
<span class="p_header">--- a/kernel/sysctl.c</span>
<span class="p_header">+++ b/kernel/sysctl.c</span>
<span class="p_chunk">@@ -98,6 +98,8 @@</span> <span class="p_context"></span>
 #if defined(CONFIG_SYSCTL)
 
 
<span class="p_add">+extern int accel_page_copy;</span>
<span class="p_add">+</span>
 /* External variables not in a header file. */
 extern int suid_dumpable;
 #ifdef CONFIG_COREDUMP
<span class="p_chunk">@@ -1361,6 +1363,15 @@</span> <span class="p_context"> static struct ctl_table vm_table[] = {</span>
 		.proc_handler   = &amp;hugetlb_mempolicy_sysctl_handler,
 	},
 #endif
<span class="p_add">+	{</span>
<span class="p_add">+		.procname	= &quot;accel_page_copy&quot;,</span>
<span class="p_add">+		.data		= &amp;accel_page_copy,</span>
<span class="p_add">+		.maxlen		= sizeof(accel_page_copy),</span>
<span class="p_add">+		.mode		= 0644,</span>
<span class="p_add">+		.proc_handler	= proc_dointvec,</span>
<span class="p_add">+		.extra1		= &amp;zero,</span>
<span class="p_add">+		.extra2		= &amp;one,</span>
<span class="p_add">+	},</span>
 	 {
 		.procname	= &quot;hugetlb_shm_group&quot;,
 		.data		= &amp;sysctl_hugetlb_shm_group,
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 244ece6..e64b490 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -48,6 +48,8 @@</span> <span class="p_context"></span>
 
 #include &quot;internal.h&quot;
 
<span class="p_add">+int accel_page_copy = 1;</span>
<span class="p_add">+</span>
 /*
  * migrate_prep() needs to be called before we start compiling a list of pages
  * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is
<span class="p_chunk">@@ -651,6 +653,10 @@</span> <span class="p_context"> static void copy_huge_page(struct page *dst, struct page *src,</span>
 		nr_pages = hpage_nr_pages(src);
 	}
 
<span class="p_add">+	/* Try to accelerate page migration if it is not specified in mode  */</span>
<span class="p_add">+	if (accel_page_copy)</span>
<span class="p_add">+		mode |= MIGRATE_MT;</span>
<span class="p_add">+</span>
 	if (mode &amp; MIGRATE_MT)
 		rc = copy_page_mt(dst, src, nr_pages);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



