
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv4,1/2] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv4,1/2] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 15, 2016, 2:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460729545-5666-1-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8851511/mbox/"
   >mbox</a>
|
   <a href="/patch/8851511/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8851511/">/patch/8851511/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id D45B6BF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 14:28:52 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 1A2EA20379
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 14:28:52 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 28CBC20374
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 14:28:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751897AbcDOO2r (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 15 Apr 2016 10:28:47 -0400
Received: from mail-db3on0127.outbound.protection.outlook.com
	([157.55.234.127]:61535
	&quot;EHLO emea01-db3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751121AbcDOO2p (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 15 Apr 2016 10:28:45 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=NaCXk9v+KSJBBLdbApUa+DwLF2gHAQvOMf6qUL+D92A=;
	b=BaKrvI+J945eO7JCrCLHyLIrgU9PAZSgxdUvmJ7I2eohxWEHJyzX/3fzVCPfVEGKJVXYMtufxtwJjcm+Qk1iDpHfZe9clKOt2NzSLdHZtEn75e31BNsJ+iSc4KGxolJ0YLiuAQkyyiZ8FhnG4uwV2WFvaqzA8eaicqUUXVc8+Y4=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	VI1PR0801MB1311.eurprd08.prod.outlook.com (10.167.197.149) with
	Microsoft
	SMTP Server (TLS) id 15.1.447.15; Fri, 15 Apr 2016 14:13:37 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;mingo@redhat.com&gt;,
	&lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv4 1/2] x86/vdso: add mremap hook to vm_special_mapping
Date: Fri, 15 Apr 2016 17:12:24 +0300
Message-ID: &lt;1460729545-5666-1-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460388169-13340-1-git-send-email-dsafonov@virtuozzo.com&gt;
References: &lt;1460388169-13340-1-git-send-email-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: HE1PR03CA0004.eurprd03.prod.outlook.com (10.163.170.142)
	To
	VI1PR0801MB1311.eurprd08.prod.outlook.com (10.167.197.149)
X-MS-Office365-Filtering-Correlation-Id: d07bbf2e-5cdd-4ccf-babd-08d36538246e
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB1311;
	2:Ioe0PFB6u1iG9zuxegTVg5xG3Kl831gnd7kelWGBCHlpO7OnPPPCtn7pZWr+jziW/scKbzZRVgYxQqvVKaorW/nV86kHuhsrNScWoeT6w0STjD3O/WAOswAYChohIRYrM4kT89UduiOk6GFzFuP8hCSKXjhuWWAxfwCA97Lp6xcqWAfHChF9YS1lutk+8DOV;
	3:3ucXCb+CzJy21KYNYlh7La1kkss1tUMFqr3k5+c7akIfUgIb/dIdH5T3u4uWm6X0rzuuH7Fy8RuXP+LtGNVguytDcW9qzZ6B70MK6nX/iCM/ECfo83Z3M44h2t8mtq7a;
	25:XV8UTs0xB1y/K2CMF+r/KcGNnvx9v/+VobLjamy3HHOc0iesQ15GCwZGjPyZz3NlUh3ynepuAOcjRlPHJH+PIjx38VQ5m6vQm8QVzHGLbWajPHYp71w9A9V546K1zF0b2czVcZyx34bBib6RJUkuwFlvpvI3BSB2ohtis6j+rTQfjWwGqVQbtMI6yRqCUIgTgdZGIVS3tc+keNJfuodHO+6AwhgeT7iKC7FxhalOSYMoss7OuIedhLrI4JLwBLyNklmosAxG675TEFfbBtrAU8oNQYJgjXDe8kan6ufyKVwnp9t3mbJDqujLl1W+2gwKm5opO/QUeH1cvTDrrbxlisS/dPv/bY4f4iGt+uXvp/cqDuKLt6/x5TkQ9eH2IO2IxRva5AHYIIL9/BbOpTmkF1yxEalc7cTcayqqcTUXVg+uRXuxk9n+ujiNRPmc4Us8vSGxf7vuXftWmIZLEzPaTG39GESiOkSlucx/oxBxnsHTY992sGX61lOxhxD56opzDgo+tSKVr98DO62g2Huk/Q8mqd8YN5WdjIO7x5BSVbqWwLCXK+m8naOImcGT5C/q6Ly/J+DBpsgzY9fZAx5cKz2BzOsiIDpWo
	b0K/YhsR8QIQLYaCjZ9mB4HQCG5J5Jp
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:VI1PR0801MB1311;
X-Microsoft-Antispam-PRVS: &lt;VI1PR0801MB1311FB925AABA6F409F4212AD1680@VI1PR0801MB1311.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040130)(601004)(2401047)(5005006)(8121501046)(10201501046)(3002001)(6041046)(6043046);
	SRVR:VI1PR0801MB1311; BCL:0; PCL:0; RULEID:;
	SRVR:VI1PR0801MB1311; 
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB1311;
	4:YSDvJiWrL9x1hJOoFBi9oDMJdPUtn11Ohstv60hn3eK2Viw4fcgeaK4P3rDWbkPE2T/sYSCL80bDvhBTwuwJ/65nfqSHVDMFyHPf14fxf6kjQaGTz2DZsSqZljaI44rEQ3CxtFuxwnLusoT3ddv22zNZ2N8Hc5UY9fjUmZXGUMtgvKeiUE5MdHFi4dxtZx1R0jvd/nXk3OvCi/YCnA1G1xbLoiXgsk+7W7soJwFhRLQu0G8FRL/2jXr2TkBZYMvUCANRLLJTa7yL/sf/OTl6wWydGRXzmiyeF4Ww9hfkkmfkrr7QjxAWgS3rTKc9BQCO5zYFAIoV0mfszJ/4rXJ/Hd5ug2yKzfwG90RbIaNcOT858RK1B3keKbKQWGh6LiW5UAxNo3TKOgIUuRVGz/j095ZykzJSaM/n+7RN34YaOUI=
X-Forefront-PRVS: 0913EA1D60
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(92566002)(47776003)(50986999)(76176999)(81166005)(4326007)(77096005)(66066001)(5008740100001)(107886002)(2950100001)(48376002)(19580405001)(2351001)(110136002)(189998001)(86362001)(4001430100002)(53416004)(5003940100001)(36756003)(33646002)(50226001)(5004730100002)(50466002)(2906002)(586003)(3846002)(1096002)(42186005)(19580395003)(6116002)(229853001);
	DIR:OUT; SFP:1102; SCL:1; SRVR:VI1PR0801MB1311;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; VI1PR0801MB1311;
	23:wgFo6AN/Mdut+BpZSSZWdsScfQK39YqiVtaK2HA?=
	=?us-ascii?Q?YE7+LW/yl0ulXPWKo2qTilqRENwNCoD8/7xBVHHRXIyt4sfV24j/agPPUDMj?=
	=?us-ascii?Q?amMFYRM+mSqmrgXW9CPGV7CJGM36CDPJiDxIgKrde/V9rjAbnpK1b71kgJAn?=
	=?us-ascii?Q?uaq5mqGrkQV+gN+UNVkr4VvPHnIJHWP+CJai6iQYXLDyZ57oi7Me/DqtDEW0?=
	=?us-ascii?Q?6SfzZVjIQccd5wcjX+MrQimLto9R9mQPhxBF7T5SqufJoPVH4xQCAZuIBLRM?=
	=?us-ascii?Q?BRYJyOJksA70C/5Kz2jEynJwRWm1FiCATaX/BbRVSA6PVCg3UsJGWLQzk9cF?=
	=?us-ascii?Q?sUqlEIXM56zBJRyC+zCZTu2Hq0Nh3Gcq4rLltEXartn9p+M8tSwnra08mFyL?=
	=?us-ascii?Q?DyEc1eCHaDWN4SUjITYtPD818LqRTJoKL+kdA0HPTsDaBozXzgp86LAfQVHv?=
	=?us-ascii?Q?BLHPtYqnX/Cefgj/Z1X1Xf5X0q3bZyXsu+pB7pjeGUVBO38yD23NAAkJlVQO?=
	=?us-ascii?Q?MKDDOAl8kFcqSYmNao2JgF+I8K0fpaFvjZu82GRnnspLjPJABe615OR14tPQ?=
	=?us-ascii?Q?bOXFS/Bss1V9Z2BSJtgJulloPwfJ/fryQrUO1Cu/RM4aOI71OMfNJ2AFnYS7?=
	=?us-ascii?Q?Y5QtMz4eu2qXTpdbQgFnL1bAaj2BDsa2LLMFfyiIY/GHav3+A/c14z+Z11fv?=
	=?us-ascii?Q?iDecUItN48s8U1F8oqjd+jHNI+rhK+vRDaEGYtThqcNZjHM5iEL+IJVSPOQ5?=
	=?us-ascii?Q?vEXjwZDd/HwHtcoXtPt1lZLxmNVg5KFQhC0DBuDUIpmp5GAvW3X6IS5nMEyc?=
	=?us-ascii?Q?oZIdpDSnkLN+VFpeQqpU9k/UuNguqgGPYHR7QeogwSQ03vd4NQRfA90Ovps0?=
	=?us-ascii?Q?jvhHFQ8ToSOcIgPatgkQ+Aqe/Hnb5qLwZzkCtAJ3aRGdQEA1Q++vLu2A+cT7?=
	=?us-ascii?Q?Zf375gLf2WZUqOyC5vL2jXw9Yz4LAu96S04BUXTb/iQ=3D=3D?=
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB1311;
	5:nKSv4G6+G3vGn0shpBSrhKHWGPybB2QEvaTNIZ9EqXQwcs8hx1qMEdJWsf3NFR2NcUFi6bKmUPMVz+kFxkRvcb9+UU2Axf9QaIxqAe9VSVF9mmJ3GR2nVtWQTblycPGqHuKPu0/1yFwAXuJuTb623w==;
	24:HfVX9exZ3m1NR97ecVSr7kblfcOhHLmIzr3GiY4KJFO8hrUaMLmCogcPVfwLJOP9tC5W2EOgmm1YRKPp/5HPHxTDRkJD3g9/maPK4KzbXHs=;
	20:M+xxVfXsW910T/vnHbpjbWgLTU5VMRLeTLrC91mlaqbnlcy7NiYkRpnM/4+zWns4lFJgosaJEvoVzVvKAWl9Msdzy5d1id/hDVDSIBIcnerXtywXAZafN4zmwzhLuMzDCYoK6pVOWfwK6cCYsm446r3syrFYuZrbSCTGvXdNHpo=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Apr 2016 14:13:37.8806
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: VI1PR0801MB1311
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 15, 2016, 2:12 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32
v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;
    used is_ia32_task instead of ifdefs 
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 36 +++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 44 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - April 15, 2016, 4:58 p.m.</div>
<pre class="content">
On Fri, Apr 15, 2016 at 7:12 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;   Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;   #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;   #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;     used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/x86/entry/vdso/vma.c | 36 +++++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;  include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;  mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;  3 files changed, 44 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; index 10f704584922..d26517f3f88f 100644</span>
<span class="quote">&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt; @@ -98,10 +99,29 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;         return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt; -       .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; -       .fault = vdso_fault,</span>
<span class="quote">&gt; -};</span>

Ah, this is what I missed last time.  Looks good.
<span class="quote">
&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +                     struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="quote">&gt; +       const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (image-&gt;size != new_size)</span>
<span class="quote">&gt; +               return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (is_ia32_task()) {</span>
<span class="quote">&gt; +               struct pt_regs *regs = current_pt_regs();</span>
<span class="quote">&gt; +               unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="quote">&gt; +               unsigned long old_land_addr = vdso_land +</span>
<span class="quote">&gt; +                       (unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +               /* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt; +               if (regs-&gt;ip == old_land_addr)</span>
<span class="quote">&gt; +                       regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="quote">&gt; +       }</span>
<span class="quote">&gt; +       new_vma-&gt;vm_mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>

A couple minor things:

 - You&#39;re looking at both new_vma-&gt;vm_mm and current-&gt;mm.  Is there a
reason for that?  If they&#39;re different, I&#39;d be quite surprised, but
maybe it would make sense to check.

 - On second thought, the is_ia32_task() check is a little weird given
that you&#39;re planning on making the vdso image type.  It might make
sense to change that to in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32.

Other than that, looks good to me.

You could add a really simple test case to selftests/x86:

mremap(the vdso, somewhere else);
asm volatile (&quot;int $0x80&quot; : : &quot;a&quot; (__NR_exit), &quot;b&quot; (0));

That&#39;ll segfault if this fails and it&#39;ll work and return 0 if it works.

FWIW, there&#39;s one respect in which this code could be problematic down
the road: if syscalls ever start needing the vvar page, then this gets
awkward because you can&#39;t remap both at once.  Also, this is
fundamentally racy if multiple threads try to use it (but there&#39;s
nothing whatsoever the kernel could do about that).  In general, once
the call to change and relocate the vdso gets written, CRIU should
probably prefer to use it over mremap.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 18, 2016, 11:18 a.m.</div>
<pre class="content">
On 04/15/2016 07:58 PM, Andy Lutomirski wrote:
<span class="quote">&gt; A couple minor things:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   - You&#39;re looking at both new_vma-&gt;vm_mm and current-&gt;mm.  Is there a</span>
<span class="quote">&gt; reason for that?  If they&#39;re different, I&#39;d be quite surprised, but</span>
<span class="quote">&gt; maybe it would make sense to check.</span>

Ok, will add a check.
<span class="quote">
&gt;   - On second thought, the is_ia32_task() check is a little weird given</span>
<span class="quote">&gt; that you&#39;re planning on making the vdso image type.  It might make</span>
<span class="quote">&gt; sense to change that to in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32.</span>

Yes, we might be there remapping vdso_image_64 through int80, where
we shouldn&#39;t change landing. Thanks, will add a check.
<span class="quote">
&gt; Other than that, looks good to me.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You could add a really simple test case to selftests/x86:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; mremap(the vdso, somewhere else);</span>
<span class="quote">&gt; asm volatile (&quot;int $0x80&quot; : : &quot;a&quot; (__NR_exit), &quot;b&quot; (0));</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; That&#39;ll segfault if this fails and it&#39;ll work and return 0 if it works.</span>

Will add - for now I have tested this with kind the same program.
<span class="quote">
&gt; FWIW, there&#39;s one respect in which this code could be problematic down</span>
<span class="quote">&gt; the road: if syscalls ever start needing the vvar page, then this gets</span>
<span class="quote">&gt; awkward because you can&#39;t remap both at once.  Also, this is</span>
<span class="quote">&gt; fundamentally racy if multiple threads try to use it (but there&#39;s</span>
<span class="quote">&gt; nothing whatsoever the kernel could do about that).  In general, once</span>
<span class="quote">&gt; the call to change and relocate the vdso gets written, CRIU should</span>
<span class="quote">&gt; probably prefer to use it over mremap.</span>

Yes, but from my point of view, for the other reasons:
- on restore stage of CRIU, restorer maps VMAs that were dumped
on dump stage.
- this is done in one thread, as other threads may need those VMAs
to funciton.
- one of vmas, being restored is vDSO (which also was dumped), so
there is image for this blob.

So, ideally, I even would not need such API to remap blobs
from 64 to 32 (or backwards). This is ideally for other applications
that switches their mode. For CRIU *ideally* I do not need it, as
I have this vma&#39;s image dumped before - I only need remap to
fix contex.vdso pointer for proper landing and I&#39;m doing it in
one thread.

But, in the practice, one may migrate application from one
kernel to another. And for different kernel versions, there may
be different vDSO entries. For now (before compatible C/R)
we have checked if vDSO differ and if so, examine this different
vDSO symbols and add jump trampolines on places where
were entries in previous vDSO to a new one.
So, this is also true for 32-bit vDSO blob. That&#39;s why I need
this API for CRIU.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - April 18, 2016, 3:37 p.m.</div>
<pre class="content">
On Apr 18, 2016 4:19 AM, &quot;Dmitry Safonov&quot; &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; On 04/15/2016 07:58 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; A couple minor things:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   - You&#39;re looking at both new_vma-&gt;vm_mm and current-&gt;mm.  Is there a</span>
<span class="quote">&gt;&gt; reason for that?  If they&#39;re different, I&#39;d be quite surprised, but</span>
<span class="quote">&gt;&gt; maybe it would make sense to check.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ok, will add a check.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;   - On second thought, the is_ia32_task() check is a little weird given</span>
<span class="quote">&gt;&gt; that you&#39;re planning on making the vdso image type.  It might make</span>
<span class="quote">&gt;&gt; sense to change that to in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yes, we might be there remapping vdso_image_64 through int80, where</span>
<span class="quote">&gt; we shouldn&#39;t change landing. Thanks, will add a check.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Other than that, looks good to me.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You could add a really simple test case to selftests/x86:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; mremap(the vdso, somewhere else);</span>
<span class="quote">&gt;&gt; asm volatile (&quot;int $0x80&quot; : : &quot;a&quot; (__NR_exit), &quot;b&quot; (0));</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; That&#39;ll segfault if this fails and it&#39;ll work and return 0 if it works.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Will add - for now I have tested this with kind the same program.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; FWIW, there&#39;s one respect in which this code could be problematic down</span>
<span class="quote">&gt;&gt; the road: if syscalls ever start needing the vvar page, then this gets</span>
<span class="quote">&gt;&gt; awkward because you can&#39;t remap both at once.  Also, this is</span>
<span class="quote">&gt;&gt; fundamentally racy if multiple threads try to use it (but there&#39;s</span>
<span class="quote">&gt;&gt; nothing whatsoever the kernel could do about that).  In general, once</span>
<span class="quote">&gt;&gt; the call to change and relocate the vdso gets written, CRIU should</span>
<span class="quote">&gt;&gt; probably prefer to use it over mremap.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yes, but from my point of view, for the other reasons:</span>
<span class="quote">&gt; - on restore stage of CRIU, restorer maps VMAs that were dumped</span>
<span class="quote">&gt; on dump stage.</span>
<span class="quote">&gt; - this is done in one thread, as other threads may need those VMAs</span>
<span class="quote">&gt; to funciton.</span>
<span class="quote">&gt; - one of vmas, being restored is vDSO (which also was dumped), so</span>
<span class="quote">&gt; there is image for this blob.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So, ideally, I even would not need such API to remap blobs</span>
<span class="quote">&gt; from 64 to 32 (or backwards).</span>

If I&#39;m understanding you right, this won&#39;t work reliably.  The kernel
makes no promise that one kernel&#39;s vdso is compatible with another
kernel.  In fact, the internal interfaces have changed several times
and are changing again in 4.6.

You also need to put vvar at the correct offset from the text, and
vvar can&#39;t be dumped and restores at all, since the whole point is
that it changes at runtime.
<span class="quote">
&gt; This is ideally for other applications</span>
<span class="quote">&gt; that switches their mode. For CRIU *ideally* I do not need it, as</span>
<span class="quote">&gt; I have this vma&#39;s image dumped before - I only need remap to</span>
<span class="quote">&gt; fix contex.vdso pointer for proper landing and I&#39;m doing it in</span>
<span class="quote">&gt; one thread.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But, in the practice, one may migrate application from one</span>
<span class="quote">&gt; kernel to another. And for different kernel versions, there may</span>
<span class="quote">&gt; be different vDSO entries. For now (before compatible C/R)</span>
<span class="quote">&gt; we have checked if vDSO differ and if so, examine this different</span>
<span class="quote">&gt; vDSO symbols and add jump trampolines on places where</span>
<span class="quote">&gt; were entries in previous vDSO to a new one.</span>
<span class="quote">&gt; So, this is also true for 32-bit vDSO blob. That&#39;s why I need</span>
<span class="quote">&gt; this API for CRIU.</span>

Understood.

I like the mremap support regardless of whether CRIU ends up using it long-term.

--Andy
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..d26517f3f88f 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,29 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		      struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_ia32_task()) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	new_vma-&gt;vm_mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +182,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +221,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



