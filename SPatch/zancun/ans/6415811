
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] sparc: Resolve conflict between sparc v9 and M7 on usage of bit 9 of TTE - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] sparc: Resolve conflict between sparc v9 and M7 on usage of bit 9 of TTE</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 15, 2015, 5:48 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1431712095-9711-1-git-send-email-khalid.aziz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6415811/mbox/"
   >mbox</a>
|
   <a href="/patch/6415811/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6415811/">/patch/6415811/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 3D1639F318
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 May 2015 17:48:46 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C9561204D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 May 2015 17:48:44 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 49A5E204C9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 May 2015 17:48:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754979AbbEORsf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 15 May 2015 13:48:35 -0400
Received: from resqmta-po-07v.sys.comcast.net ([96.114.154.166]:44282 &quot;EHLO
	resqmta-po-07v.sys.comcast.net&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1754871AbbEORs3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 15 May 2015 13:48:29 -0400
Received: from resomta-po-04v.sys.comcast.net ([96.114.154.228])
	by resqmta-po-07v.sys.comcast.net with comcast
	id UHoU1q0054vw8ds01HoU4w; Fri, 15 May 2015 17:48:28 +0000
Received: from mail.gonehiking.org ([73.181.52.62])
	by resomta-po-04v.sys.comcast.net with comcast
	id UHoT1q00B1LXgTt01HoTqS; Fri, 15 May 2015 17:48:28 +0000
Received: from concerto.us.oracle.com (concerto-wl.internal [192.168.1.22])
	by mail.gonehiking.org (Postfix) with ESMTP id D9C2640E86;
	Fri, 15 May 2015 11:48:26 -0600 (MDT)
From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
To: davem@davemloft.net, bob.picco@oracle.com,
	kirill.shutemov@linux.intel.com, akpm@linux-foundation.org,
	sam@ravnborg.org, rickard_strandqvist@spectrumdigital.se,
	allen.pais@oracle.com, iamjoonsoo.kim@lge.com
Cc: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;, sparclinux@vger.kernel.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH v2] sparc: Resolve conflict between sparc v9 and M7 on usage
	of bit 9 of TTE
Date: Fri, 15 May 2015 11:48:15 -0600
Message-Id: &lt;1431712095-9711-1-git-send-email-khalid.aziz@oracle.com&gt;
X-Mailer: git-send-email 1.9.1
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=comcast.net;
	s=q20140121; t=1431712108;
	bh=P+TafELxL0Me0cL/xjE8qmqvDeOWTI2qH/jFb8biRFI=;
	h=Received:Received:Received:From:To:Subject:Date:Message-Id;
	b=cOMHI6IFK1+UAaGGqyL2DYOQ7o0HEOIM578z79CiKtDUkteFCcz23LT4VV/KEgsTo
	MIykEtxRQAe9CRHIpiUEn3ZELbNzmREwEIKJszn1xHfsLlwGc3h+m/kAJfFTtxPzs1
	zjGZdVFTv77dbPU13HvqoQ4OCAF13+jKGf/6hdYBxR6xAZudVf+tJx94mOunRol7Hc
	NSO5kWUIKAGBxCWq5RWyqEhHJspHg4YsAIlCsTEycLSIJ7cKflEV08JzP/Tyvp6W9O
	GBBKynI9Fz7X997Jy5dN4h+gzywvzfJ66HVyKbDrzvjJ+MvJBdIP335AiaM3voCFfC
	3DGP8LvfPHHGw==
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID,T_RP_MATCHES_RCVD,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - May 15, 2015, 5:48 p.m.</div>
<pre class="content">
sparc: Resolve conflict between sparc v9 and M7 on usage of bit 9 of TTE

Bit 9 of TTE is CV (Cacheable in V-cache) on sparc v9 processor while
the same bit 9 is MCDE (Memory Corruption Detection Enable) on M7
processor. This creates a conflicting usage of the same bit. Kernel
sets TTE.cv bit on all pages for sun4v architecture which works well
for sparc v9 but enables memory corruption detection on M7 processor
which is not the intent. This patch adds code to determine if kernel
is running on M7 processor and takes steps to not enable memory
corruption detection in TTE erroneously.
<span class="signed-off-by">
Signed-off-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
---
v2:
	- Fixed indentation in pgprot_noncached
	- Reduced the instances of computing right cacheability flag
	  for M7 vs older processor by computing it just once in a new
	  variable &quot;page_cache4v_flag&quot;
	- Tested on a M7 and T4

 arch/sparc/include/asm/pgtable_64.h | 22 ++++++++++-
 arch/sparc/include/asm/trap_block.h |  2 +
 arch/sparc/kernel/entry.h           |  2 +
 arch/sparc/kernel/setup_64.c        | 27 ++++++++++++++
 arch/sparc/kernel/vmlinux.lds.S     |  5 +++
 arch/sparc/mm/init_64.c             | 74 ++++++++++++++++++++++++++-----------
 6 files changed, 110 insertions(+), 22 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - May 24, 2015, 8 p.m.</div>
<pre class="content">
<span class="from">From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
Date: Fri, 15 May 2015 11:48:15 -0600
<span class="quote">
&gt; diff --git a/arch/sparc/kernel/setup_64.c b/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt; index c38d19f..606e3f9 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt; @@ -255,6 +255,30 @@ void sun4v_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void sun_m7_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
<span class="quote">&gt; +			     struct sun4v_2insn_patch_entry *end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	while (start &lt; end) {</span>
<span class="quote">&gt; +		unsigned long addr = start-&gt;addr;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		*(unsigned int *) (addr +  0) = start-&gt;insns[0];</span>
<span class="quote">&gt; +		/* We are updating an instruction. Make sure it is</span>
<span class="quote">&gt; +		 * written out</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		wmb();</span>
<span class="quote">&gt; +		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  0));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		*(unsigned int *) (addr +  4) = start-&gt;insns[1];</span>
<span class="quote">&gt; +		/* We are updating an instruction. Make sure it is</span>
<span class="quote">&gt; +		 * written out</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		wmb();</span>
<span class="quote">&gt; +		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  4));</span>

There is no reason to say this in a comment, none of the other code
patching routines mention this, and it&#39;s even more excessive to say it
twice in quick succession basically in the same place.

Please just remove these comments, anyone reading this code knows we
are code patching and will realize that there are memory barrier
requirements.

Alternatively if you think it&#39;s worth mentioning, submit a separate
patch that adds the comment to all of the code patching routines for
consistency.
<span class="quote">
&gt; @@ -267,6 +291,9 @@ static void __init sun4v_patch(void)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	sun4v_patch_2insn_range(&amp;__sun4v_2insn_patch,</span>
<span class="quote">&gt;  				&amp;__sun4v_2insn_patch_end);</span>
<span class="quote">&gt; +	if (sun4v_chip_type == SUN4V_CHIP_SPARC_M7)</span>
<span class="quote">&gt; +		sun_m7_patch_2insn_range(&amp;__sun_m7_2insn_patch,</span>
<span class="quote">&gt; +				&amp;__sun_m7_2insn_patch_end);</span>

When a function call spans multiple lines, the second and subsequent line
must start at exactly the first column after the openning parenthesis of
the first line.  You must use the appropriate number of TAB and SPACE
characters necessary to achieve this.

Look at how the sun4v_patch_2insn_range() call before the one you added is
indented.
<span class="quote">
&gt; @@ -2312,8 +2345,7 @@ int __meminit vmemmap_populate(unsigned long vstart, unsigned long vend,</span>
<span class="quote">&gt;  		    _PAGE_P_4U | _PAGE_W_4U);</span>
<span class="quote">&gt;  	if (tlb_type == hypervisor)</span>
<span class="quote">&gt;  		pte_base = (_PAGE_VALID | _PAGE_SZ4MB_4V |</span>
<span class="quote">&gt; -			    _PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="quote">&gt; -			    _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="quote">&gt; +			page_cache4v_flag | _PAGE_P_4V | _PAGE_W_4V);</span>

The existing indentation of these lines after the first of the
pte_base assignment were correct, please do not change how it is
indented.
<span class="quote">
&gt; @@ -2465,8 +2497,8 @@ static void __init sun4v_pgprot_init(void)</span>
<span class="quote">&gt;  	kern_linear_pte_xor[0] = (_PAGE_VALID | _PAGE_SZ4MB_4V) ^</span>
<span class="quote">&gt;  		PAGE_OFFSET;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; -	kern_linear_pte_xor[0] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="quote">&gt; -				   _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="quote">&gt; +	kern_linear_pte_xor[0] |= (page_cache4v_flag | _PAGE_P_4V |</span>
<span class="quote">&gt; +				_PAGE_W_4V);</span>

Likewise.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - May 26, 2015, 3:30 p.m.</div>
<pre class="content">
On 05/24/2015 02:00 PM, David Miller wrote:
<span class="quote">&gt; From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
<span class="quote">&gt; Date: Fri, 15 May 2015 11:48:15 -0600</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/sparc/kernel/setup_64.c b/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt;&gt; index c38d19f..606e3f9 100644</span>
<span class="quote">&gt;&gt; --- a/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt;&gt; +++ b/arch/sparc/kernel/setup_64.c</span>
<span class="quote">&gt;&gt; @@ -255,6 +255,30 @@ void sun4v_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +void sun_m7_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
<span class="quote">&gt;&gt; +			     struct sun4v_2insn_patch_entry *end)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	while (start &lt; end) {</span>
<span class="quote">&gt;&gt; +		unsigned long addr = start-&gt;addr;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		*(unsigned int *) (addr +  0) = start-&gt;insns[0];</span>
<span class="quote">&gt;&gt; +		/* We are updating an instruction. Make sure it is</span>
<span class="quote">&gt;&gt; +		 * written out</span>
<span class="quote">&gt;&gt; +		 */</span>
<span class="quote">&gt;&gt; +		wmb();</span>
<span class="quote">&gt;&gt; +		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  0));</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		*(unsigned int *) (addr +  4) = start-&gt;insns[1];</span>
<span class="quote">&gt;&gt; +		/* We are updating an instruction. Make sure it is</span>
<span class="quote">&gt;&gt; +		 * written out</span>
<span class="quote">&gt;&gt; +		 */</span>
<span class="quote">&gt;&gt; +		wmb();</span>
<span class="quote">&gt;&gt; +		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  4));</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is no reason to say this in a comment, none of the other code</span>
<span class="quote">&gt; patching routines mention this, and it&#39;s even more excessive to say it</span>
<span class="quote">&gt; twice in quick succession basically in the same place.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Please just remove these comments, anyone reading this code knows we</span>
<span class="quote">&gt; are code patching and will realize that there are memory barrier</span>
<span class="quote">&gt; requirements.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Alternatively if you think it&#39;s worth mentioning, submit a separate</span>
<span class="quote">&gt; patch that adds the comment to all of the code patching routines for</span>
<span class="quote">&gt; consistency.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -267,6 +291,9 @@ static void __init sun4v_patch(void)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	sun4v_patch_2insn_range(&amp;__sun4v_2insn_patch,</span>
<span class="quote">&gt;&gt;   				&amp;__sun4v_2insn_patch_end);</span>
<span class="quote">&gt;&gt; +	if (sun4v_chip_type == SUN4V_CHIP_SPARC_M7)</span>
<span class="quote">&gt;&gt; +		sun_m7_patch_2insn_range(&amp;__sun_m7_2insn_patch,</span>
<span class="quote">&gt;&gt; +				&amp;__sun_m7_2insn_patch_end);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; When a function call spans multiple lines, the second and subsequent line</span>
<span class="quote">&gt; must start at exactly the first column after the openning parenthesis of</span>
<span class="quote">&gt; the first line.  You must use the appropriate number of TAB and SPACE</span>
<span class="quote">&gt; characters necessary to achieve this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Look at how the sun4v_patch_2insn_range() call before the one you added is</span>
<span class="quote">&gt; indented.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -2312,8 +2345,7 @@ int __meminit vmemmap_populate(unsigned long vstart, unsigned long vend,</span>
<span class="quote">&gt;&gt;   		    _PAGE_P_4U | _PAGE_W_4U);</span>
<span class="quote">&gt;&gt;   	if (tlb_type == hypervisor)</span>
<span class="quote">&gt;&gt;   		pte_base = (_PAGE_VALID | _PAGE_SZ4MB_4V |</span>
<span class="quote">&gt;&gt; -			    _PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="quote">&gt;&gt; -			    _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="quote">&gt;&gt; +			page_cache4v_flag | _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The existing indentation of these lines after the first of the</span>
<span class="quote">&gt; pte_base assignment were correct, please do not change how it is</span>
<span class="quote">&gt; indented.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -2465,8 +2497,8 @@ static void __init sun4v_pgprot_init(void)</span>
<span class="quote">&gt;&gt;   	kern_linear_pte_xor[0] = (_PAGE_VALID | _PAGE_SZ4MB_4V) ^</span>
<span class="quote">&gt;&gt;   		PAGE_OFFSET;</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; -	kern_linear_pte_xor[0] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="quote">&gt;&gt; -				   _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="quote">&gt;&gt; +	kern_linear_pte_xor[0] |= (page_cache4v_flag | _PAGE_P_4V |</span>
<span class="quote">&gt;&gt; +				_PAGE_W_4V);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Likewise.</span>

All of these changes were caused by my addressing checkpatch barfing, 
but the way you suggest indenting is more readable. I will clean all 
this up, ignore checkpatch, test the updated patch and send a new version.

Thanks,
Khalid

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">index dc165eb..2a52c91 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -308,12 +308,26 @@</span> <span class="p_context"> static inline pte_t pte_modify(pte_t pte, pgprot_t prot)</span>
 	&quot;	sllx		%1, 32, %1\n&quot;
 	&quot;	or		%0, %1, %0\n&quot;
 	&quot;	.previous\n&quot;
<span class="p_add">+	&quot;	.section	.sun_m7_2insn_patch, \&quot;ax\&quot;\n&quot;</span>
<span class="p_add">+	&quot;	.word		661b\n&quot;</span>
<span class="p_add">+	&quot;	sethi		%%uhi(%4), %1\n&quot;</span>
<span class="p_add">+	&quot;	sethi		%%hi(%4), %0\n&quot;</span>
<span class="p_add">+	&quot;	.word		662b\n&quot;</span>
<span class="p_add">+	&quot;	or		%1, %%ulo(%4), %1\n&quot;</span>
<span class="p_add">+	&quot;	or		%0, %%lo(%4), %0\n&quot;</span>
<span class="p_add">+	&quot;	.word		663b\n&quot;</span>
<span class="p_add">+	&quot;	sllx		%1, 32, %1\n&quot;</span>
<span class="p_add">+	&quot;	or		%0, %1, %0\n&quot;</span>
<span class="p_add">+	&quot;	.previous\n&quot;</span>
 	: &quot;=r&quot; (mask), &quot;=r&quot; (tmp)
 	: &quot;i&quot; (_PAGE_PADDR_4U | _PAGE_MODIFIED_4U | _PAGE_ACCESSED_4U |
 	       _PAGE_CP_4U | _PAGE_CV_4U | _PAGE_E_4U |
 	       _PAGE_SPECIAL | _PAGE_PMD_HUGE | _PAGE_SZALL_4U),
 	  &quot;i&quot; (_PAGE_PADDR_4V | _PAGE_MODIFIED_4V | _PAGE_ACCESSED_4V |
 	       _PAGE_CP_4V | _PAGE_CV_4V | _PAGE_E_4V |
<span class="p_add">+	       _PAGE_SPECIAL | _PAGE_PMD_HUGE | _PAGE_SZALL_4V),</span>
<span class="p_add">+	  &quot;i&quot; (_PAGE_PADDR_4V | _PAGE_MODIFIED_4V | _PAGE_ACCESSED_4V |</span>
<span class="p_add">+	       _PAGE_CP_4V | _PAGE_E_4V |</span>
 	       _PAGE_SPECIAL | _PAGE_PMD_HUGE | _PAGE_SZALL_4V));
 
 	return __pte((pte_val(pte) &amp; mask) | (pgprot_val(prot) &amp; ~mask));
<span class="p_chunk">@@ -342,9 +356,15 @@</span> <span class="p_context"> static inline pgprot_t pgprot_noncached(pgprot_t prot)</span>
 	&quot;	andn		%0, %4, %0\n&quot;
 	&quot;	or		%0, %5, %0\n&quot;
 	&quot;	.previous\n&quot;
<span class="p_add">+	&quot;	.section	.sun_m7_2insn_patch, \&quot;ax\&quot;\n&quot;</span>
<span class="p_add">+	&quot;	.word		661b\n&quot;</span>
<span class="p_add">+	&quot;	andn		%0, %6, %0\n&quot;</span>
<span class="p_add">+	&quot;	or		%0, %5, %0\n&quot;</span>
<span class="p_add">+	&quot;	.previous\n&quot;</span>
 	: &quot;=r&quot; (val)
 	: &quot;0&quot; (val), &quot;i&quot; (_PAGE_CP_4U | _PAGE_CV_4U), &quot;i&quot; (_PAGE_E_4U),
<span class="p_del">-	             &quot;i&quot; (_PAGE_CP_4V | _PAGE_CV_4V), &quot;i&quot; (_PAGE_E_4V));</span>
<span class="p_add">+	             &quot;i&quot; (_PAGE_CP_4V | _PAGE_CV_4V), &quot;i&quot; (_PAGE_E_4V),</span>
<span class="p_add">+	             &quot;i&quot; (_PAGE_CP_4V));</span>
 
 	return __pgprot(val);
 }
<span class="p_header">diff --git a/arch/sparc/include/asm/trap_block.h b/arch/sparc/include/asm/trap_block.h</span>
<span class="p_header">index 6fd4436..ec9c04d 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/trap_block.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/trap_block.h</span>
<span class="p_chunk">@@ -79,6 +79,8 @@</span> <span class="p_context"> struct sun4v_2insn_patch_entry {</span>
 };
 extern struct sun4v_2insn_patch_entry __sun4v_2insn_patch,
 	__sun4v_2insn_patch_end;
<span class="p_add">+extern struct sun4v_2insn_patch_entry __sun_m7_2insn_patch,</span>
<span class="p_add">+	__sun_m7_2insn_patch_end;</span>
 
 
 #endif /* !(__ASSEMBLY__) */
<span class="p_header">diff --git a/arch/sparc/kernel/entry.h b/arch/sparc/kernel/entry.h</span>
<span class="p_header">index 07cc49e..0f67942 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/entry.h</span>
<span class="p_header">+++ b/arch/sparc/kernel/entry.h</span>
<span class="p_chunk">@@ -69,6 +69,8 @@</span> <span class="p_context"> void sun4v_patch_1insn_range(struct sun4v_1insn_patch_entry *,</span>
 			     struct sun4v_1insn_patch_entry *);
 void sun4v_patch_2insn_range(struct sun4v_2insn_patch_entry *,
 			     struct sun4v_2insn_patch_entry *);
<span class="p_add">+void sun_m7_patch_2insn_range(struct sun4v_2insn_patch_entry *,</span>
<span class="p_add">+			     struct sun4v_2insn_patch_entry *);</span>
 extern unsigned int dcache_parity_tl1_occurred;
 extern unsigned int icache_parity_tl1_occurred;
 
<span class="p_header">diff --git a/arch/sparc/kernel/setup_64.c b/arch/sparc/kernel/setup_64.c</span>
<span class="p_header">index c38d19f..606e3f9 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/setup_64.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/setup_64.c</span>
<span class="p_chunk">@@ -255,6 +255,30 @@</span> <span class="p_context"> void sun4v_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
 	}
 }
 
<span class="p_add">+void sun_m7_patch_2insn_range(struct sun4v_2insn_patch_entry *start,</span>
<span class="p_add">+			     struct sun4v_2insn_patch_entry *end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	while (start &lt; end) {</span>
<span class="p_add">+		unsigned long addr = start-&gt;addr;</span>
<span class="p_add">+</span>
<span class="p_add">+		*(unsigned int *) (addr +  0) = start-&gt;insns[0];</span>
<span class="p_add">+		/* We are updating an instruction. Make sure it is</span>
<span class="p_add">+		 * written out</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		wmb();</span>
<span class="p_add">+		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  0));</span>
<span class="p_add">+</span>
<span class="p_add">+		*(unsigned int *) (addr +  4) = start-&gt;insns[1];</span>
<span class="p_add">+		/* We are updating an instruction. Make sure it is</span>
<span class="p_add">+		 * written out</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		wmb();</span>
<span class="p_add">+		__asm__ __volatile__(&quot;flush	%0&quot; : : &quot;r&quot; (addr +  4));</span>
<span class="p_add">+</span>
<span class="p_add">+		start++;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void __init sun4v_patch(void)
 {
 	extern void sun4v_hvapi_init(void);
<span class="p_chunk">@@ -267,6 +291,9 @@</span> <span class="p_context"> static void __init sun4v_patch(void)</span>
 
 	sun4v_patch_2insn_range(&amp;__sun4v_2insn_patch,
 				&amp;__sun4v_2insn_patch_end);
<span class="p_add">+	if (sun4v_chip_type == SUN4V_CHIP_SPARC_M7)</span>
<span class="p_add">+		sun_m7_patch_2insn_range(&amp;__sun_m7_2insn_patch,</span>
<span class="p_add">+				&amp;__sun_m7_2insn_patch_end);</span>
 
 	sun4v_hvapi_init();
 }
<span class="p_header">diff --git a/arch/sparc/kernel/vmlinux.lds.S b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_header">index 0924305..f1a2f68 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -138,6 +138,11 @@</span> <span class="p_context"> SECTIONS</span>
 		*(.pause_3insn_patch)
 		__pause_3insn_patch_end = .;
 	}
<span class="p_add">+	.sun_m7_2insn_patch : {</span>
<span class="p_add">+		__sun_m7_2insn_patch = .;</span>
<span class="p_add">+		*(.sun_m7_2insn_patch)</span>
<span class="p_add">+		__sun_m7_2insn_patch_end = .;</span>
<span class="p_add">+	}</span>
 	PERCPU_SECTION(SMP_CACHE_BYTES)
 
 	. = ALIGN(PAGE_SIZE);
<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 4ca0d6b..8903c9f 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -54,6 +54,7 @@</span> <span class="p_context"></span>
 #include &quot;init_64.h&quot;
 
 unsigned long kern_linear_pte_xor[4] __read_mostly;
<span class="p_add">+static unsigned long page_cache4v_flag;</span>
 
 /* A bitmap, two bits for every 256MB of physical memory.  These two
  * bits determine what page size we use for kernel linear
<span class="p_chunk">@@ -1909,11 +1910,24 @@</span> <span class="p_context"> static void __init sun4u_linear_pte_xor_finalize(void)</span>
 
 static void __init sun4v_linear_pte_xor_finalize(void)
 {
<span class="p_add">+	unsigned long pagecv_flag;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Bit 9 of TTE is no longer CV bit on M7 processor and it instead</span>
<span class="p_add">+	 * enables MCD error. Do not set bit 9 on M7 processor.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	switch (sun4v_chip_type) {</span>
<span class="p_add">+	case SUN4V_CHIP_SPARC_M7:</span>
<span class="p_add">+		pagecv_flag = 0x00;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		pagecv_flag = _PAGE_CV_4V;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
 #ifndef CONFIG_DEBUG_PAGEALLOC
 	if (cpu_pgsz_mask &amp; HV_PGSZ_MASK_256MB) {
 		kern_linear_pte_xor[1] = (_PAGE_VALID | _PAGE_SZ256MB_4V) ^
 			PAGE_OFFSET;
<span class="p_del">-		kern_linear_pte_xor[1] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="p_add">+		kern_linear_pte_xor[1] |= (_PAGE_CP_4V | pagecv_flag |</span>
 					   _PAGE_P_4V | _PAGE_W_4V);
 	} else {
 		kern_linear_pte_xor[1] = kern_linear_pte_xor[0];
<span class="p_chunk">@@ -1922,7 +1936,7 @@</span> <span class="p_context"> static void __init sun4v_linear_pte_xor_finalize(void)</span>
 	if (cpu_pgsz_mask &amp; HV_PGSZ_MASK_2GB) {
 		kern_linear_pte_xor[2] = (_PAGE_VALID | _PAGE_SZ2GB_4V) ^
 			PAGE_OFFSET;
<span class="p_del">-		kern_linear_pte_xor[2] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="p_add">+		kern_linear_pte_xor[2] |= (_PAGE_CP_4V | pagecv_flag |</span>
 					   _PAGE_P_4V | _PAGE_W_4V);
 	} else {
 		kern_linear_pte_xor[2] = kern_linear_pte_xor[1];
<span class="p_chunk">@@ -1931,7 +1945,7 @@</span> <span class="p_context"> static void __init sun4v_linear_pte_xor_finalize(void)</span>
 	if (cpu_pgsz_mask &amp; HV_PGSZ_MASK_16GB) {
 		kern_linear_pte_xor[3] = (_PAGE_VALID | _PAGE_SZ16GB_4V) ^
 			PAGE_OFFSET;
<span class="p_del">-		kern_linear_pte_xor[3] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="p_add">+		kern_linear_pte_xor[3] |= (_PAGE_CP_4V | pagecv_flag |</span>
 					   _PAGE_P_4V | _PAGE_W_4V);
 	} else {
 		kern_linear_pte_xor[3] = kern_linear_pte_xor[2];
<span class="p_chunk">@@ -1958,6 +1972,13 @@</span> <span class="p_context"> static phys_addr_t __init available_memory(void)</span>
 	return available;
 }
 
<span class="p_add">+#define _PAGE_CACHE_4U	(_PAGE_CP_4U | _PAGE_CV_4U)</span>
<span class="p_add">+#define _PAGE_CACHE_4V	(_PAGE_CP_4V | _PAGE_CV_4V)</span>
<span class="p_add">+#define __DIRTY_BITS_4U	 (_PAGE_MODIFIED_4U | _PAGE_WRITE_4U | _PAGE_W_4U)</span>
<span class="p_add">+#define __DIRTY_BITS_4V	 (_PAGE_MODIFIED_4V | _PAGE_WRITE_4V | _PAGE_W_4V)</span>
<span class="p_add">+#define __ACCESS_BITS_4U (_PAGE_ACCESSED_4U | _PAGE_READ_4U | _PAGE_R)</span>
<span class="p_add">+#define __ACCESS_BITS_4V (_PAGE_ACCESSED_4V | _PAGE_READ_4V | _PAGE_R)</span>
<span class="p_add">+</span>
 /* We need to exclude reserved regions. This exclusion will include
  * vmlinux and initrd. To be more precise the initrd size could be used to
  * compute a new lower limit because it is freed later during initialization.
<span class="p_chunk">@@ -2034,6 +2055,25 @@</span> <span class="p_context"> void __init paging_init(void)</span>
 	memset(swapper_4m_tsb, 0x40, sizeof(swapper_4m_tsb));
 #endif
 
<span class="p_add">+	/* TTE.cv bit on sparc v9 occupies the same position as TTE.mcde</span>
<span class="p_add">+	 * bit on M7 processor. This is a conflicting usage of the same</span>
<span class="p_add">+	 * bit. Enabling TTE.cv on M7 would turn on Memory Corruption</span>
<span class="p_add">+	 * Detection error on all pages and this will lead to problems</span>
<span class="p_add">+	 * later. Kernel does not run with MCD enabled and hence rest</span>
<span class="p_add">+	 * of the required steps to fully configure memory corruption</span>
<span class="p_add">+	 * detection are not taken. We need to ensure TTE.mcde is not</span>
<span class="p_add">+	 * set on M7 processor. Compute the value of cacheability</span>
<span class="p_add">+	 * flag for use later taking this into consideration.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	switch (sun4v_chip_type) {</span>
<span class="p_add">+	case SUN4V_CHIP_SPARC_M7:</span>
<span class="p_add">+		page_cache4v_flag = _PAGE_CP_4V;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		page_cache4v_flag = _PAGE_CACHE_4V;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (tlb_type == hypervisor)
 		sun4v_pgprot_init();
 	else
<span class="p_chunk">@@ -2274,13 +2314,6 @@</span> <span class="p_context"> void free_initrd_mem(unsigned long start, unsigned long end)</span>
 }
 #endif
 
<span class="p_del">-#define _PAGE_CACHE_4U	(_PAGE_CP_4U | _PAGE_CV_4U)</span>
<span class="p_del">-#define _PAGE_CACHE_4V	(_PAGE_CP_4V | _PAGE_CV_4V)</span>
<span class="p_del">-#define __DIRTY_BITS_4U	 (_PAGE_MODIFIED_4U | _PAGE_WRITE_4U | _PAGE_W_4U)</span>
<span class="p_del">-#define __DIRTY_BITS_4V	 (_PAGE_MODIFIED_4V | _PAGE_WRITE_4V | _PAGE_W_4V)</span>
<span class="p_del">-#define __ACCESS_BITS_4U (_PAGE_ACCESSED_4U | _PAGE_READ_4U | _PAGE_R)</span>
<span class="p_del">-#define __ACCESS_BITS_4V (_PAGE_ACCESSED_4V | _PAGE_READ_4V | _PAGE_R)</span>
<span class="p_del">-</span>
 pgprot_t PAGE_KERNEL __read_mostly;
 EXPORT_SYMBOL(PAGE_KERNEL);
 
<span class="p_chunk">@@ -2312,8 +2345,7 @@</span> <span class="p_context"> int __meminit vmemmap_populate(unsigned long vstart, unsigned long vend,</span>
 		    _PAGE_P_4U | _PAGE_W_4U);
 	if (tlb_type == hypervisor)
 		pte_base = (_PAGE_VALID | _PAGE_SZ4MB_4V |
<span class="p_del">-			    _PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="p_del">-			    _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="p_add">+			page_cache4v_flag | _PAGE_P_4V | _PAGE_W_4V);</span>
 
 	pte_base |= _PAGE_PMD_HUGE;
 
<span class="p_chunk">@@ -2450,14 +2482,14 @@</span> <span class="p_context"> static void __init sun4v_pgprot_init(void)</span>
 	int i;
 
 	PAGE_KERNEL = __pgprot (_PAGE_PRESENT_4V | _PAGE_VALID |
<span class="p_del">-				_PAGE_CACHE_4V | _PAGE_P_4V |</span>
<span class="p_add">+				page_cache4v_flag | _PAGE_P_4V |</span>
 				__ACCESS_BITS_4V | __DIRTY_BITS_4V |
 				_PAGE_EXEC_4V);
 	PAGE_KERNEL_LOCKED = PAGE_KERNEL;
 
 	_PAGE_IE = _PAGE_IE_4V;
 	_PAGE_E = _PAGE_E_4V;
<span class="p_del">-	_PAGE_CACHE = _PAGE_CACHE_4V;</span>
<span class="p_add">+	_PAGE_CACHE = page_cache4v_flag;</span>
 
 #ifdef CONFIG_DEBUG_PAGEALLOC
 	kern_linear_pte_xor[0] = _PAGE_VALID ^ PAGE_OFFSET;
<span class="p_chunk">@@ -2465,8 +2497,8 @@</span> <span class="p_context"> static void __init sun4v_pgprot_init(void)</span>
 	kern_linear_pte_xor[0] = (_PAGE_VALID | _PAGE_SZ4MB_4V) ^
 		PAGE_OFFSET;
 #endif
<span class="p_del">-	kern_linear_pte_xor[0] |= (_PAGE_CP_4V | _PAGE_CV_4V |</span>
<span class="p_del">-				   _PAGE_P_4V | _PAGE_W_4V);</span>
<span class="p_add">+	kern_linear_pte_xor[0] |= (page_cache4v_flag | _PAGE_P_4V |</span>
<span class="p_add">+				_PAGE_W_4V);</span>
 
 	for (i = 1; i &lt; 4; i++)
 		kern_linear_pte_xor[i] = kern_linear_pte_xor[0];
<span class="p_chunk">@@ -2479,12 +2511,12 @@</span> <span class="p_context"> static void __init sun4v_pgprot_init(void)</span>
 			     _PAGE_SZ4MB_4V | _PAGE_SZ512K_4V |
 			     _PAGE_SZ64K_4V | _PAGE_SZ8K_4V);
 
<span class="p_del">-	page_none = _PAGE_PRESENT_4V | _PAGE_ACCESSED_4V | _PAGE_CACHE_4V;</span>
<span class="p_del">-	page_shared = (_PAGE_VALID | _PAGE_PRESENT_4V | _PAGE_CACHE_4V |</span>
<span class="p_add">+	page_none = _PAGE_PRESENT_4V | _PAGE_ACCESSED_4V | page_cache4v_flag;</span>
<span class="p_add">+	page_shared = (_PAGE_VALID | _PAGE_PRESENT_4V | page_cache4v_flag |</span>
 		       __ACCESS_BITS_4V | _PAGE_WRITE_4V | _PAGE_EXEC_4V);
<span class="p_del">-	page_copy   = (_PAGE_VALID | _PAGE_PRESENT_4V | _PAGE_CACHE_4V |</span>
<span class="p_add">+	page_copy   = (_PAGE_VALID | _PAGE_PRESENT_4V | page_cache4v_flag |</span>
 		       __ACCESS_BITS_4V | _PAGE_EXEC_4V);
<span class="p_del">-	page_readonly = (_PAGE_VALID | _PAGE_PRESENT_4V | _PAGE_CACHE_4V |</span>
<span class="p_add">+	page_readonly = (_PAGE_VALID | _PAGE_PRESENT_4V | page_cache4v_flag |</span>
 			 __ACCESS_BITS_4V | _PAGE_EXEC_4V);
 
 	page_exec_bit = _PAGE_EXEC_4V;
<span class="p_chunk">@@ -2542,7 +2574,7 @@</span> <span class="p_context"> static unsigned long kern_large_tte(unsigned long paddr)</span>
 	       _PAGE_EXEC_4U | _PAGE_L_4U | _PAGE_W_4U);
 	if (tlb_type == hypervisor)
 		val = (_PAGE_VALID | _PAGE_SZ4MB_4V |
<span class="p_del">-		       _PAGE_CP_4V | _PAGE_CV_4V | _PAGE_P_4V |</span>
<span class="p_add">+		       page_cache4v_flag | _PAGE_P_4V |</span>
 		       _PAGE_EXEC_4V | _PAGE_W_4V);
 
 	return val | paddr;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



