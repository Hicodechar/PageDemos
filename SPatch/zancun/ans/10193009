
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/2] iommu: Fix iommu_unmap and iommu_unmap_fast return type - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/2] iommu: Fix iommu_unmap and iommu_unmap_fast return type</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 31, 2018, 1:48 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1517363285-89304-2-git-send-email-suravee.suthikulpanit@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10193009/mbox/"
   >mbox</a>
|
   <a href="/patch/10193009/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10193009/">/patch/10193009/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	65F1560383 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 01:49:05 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 570922818A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 01:49:05 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4BA3028384; Wed, 31 Jan 2018 01:49:05 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ACAED2818A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 01:49:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752680AbeAaBsq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 30 Jan 2018 20:48:46 -0500
Received: from mail-by2nam01on0060.outbound.protection.outlook.com
	([104.47.34.60]:51968
	&quot;EHLO NAM01-BY2-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752530AbeAaBsj (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 30 Jan 2018 20:48:39 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=dZt+1s+9yAFAXVhy1C0j2O9JFhlixr0dNjL51XjT+Jo=;
	b=mj/iU5tLsBcGvbBgxXgbCzYXq9Klc0oVoSRAxQ4QJzmcyPq8ULRZRL3Rz3711D2owND7e0TizEK4CvM9wGEpd9QoUcYACHfEAfESaeGW+/uiwjGnqCV/g7xLN8wdNwLDeUor7svV6iJGZF1gSeNKVso2LWQqbhZGl+n4luRvPIs=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Suravee.Suthikulpanit@amd.com; 
Received: from ssuthiku-rhel74.localdomain (114.109.128.54) by
	MWHPR12MB1742.namprd12.prod.outlook.com (10.175.55.13) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.444.14; Wed, 31 Jan 2018 01:48:35 +0000
From: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
To: iommu@lists.linux-foundation.org, kvm@vger.kernel.org,
	linux-kernel@vger.kernel.org
Cc: joro@8bytes.org, jroedel@suse.de, alex.williamson@redhat.com,
	Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
Subject: [PATCH 1/2] iommu: Fix iommu_unmap and iommu_unmap_fast return type
Date: Tue, 30 Jan 2018 20:48:04 -0500
Message-Id: &lt;1517363285-89304-2-git-send-email-suravee.suthikulpanit@amd.com&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1517363285-89304-1-git-send-email-suravee.suthikulpanit@amd.com&gt;
References: &lt;1517363285-89304-1-git-send-email-suravee.suthikulpanit@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [114.109.128.54]
X-ClientProxiedBy: SG2PR06CA0102.apcprd06.prod.outlook.com (10.170.138.28) To
	MWHPR12MB1742.namprd12.prod.outlook.com (10.175.55.13)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: 71fa8fc9-8d27-44ed-43ff-08d5684cbf06
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(7020095)(4652020)(4534165)(4627221)(201703031133081)(201702281549075)(48565401081)(5600026)(4604075)(2017052603307)(7153060)(7193020);
	SRVR:MWHPR12MB1742; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	3:XSjKMPaoTOAkh+T+Wwn2/JgaZ8yp1lyxeW/nNBqatKoNfuxJ1xk2QXPm3sjGpK2wk0RRGdHkcYLqCYg9D1JaSrIY/Kjz3Vhhu9me4Ok/qMzPDl3j/+uwhXrJNqH7nG7FFvz3z6iqXTHDGuZ70pRFQP0368xCo0gw9RFS1GsqngcIpKVYj3x11oZiRlsahoIOYc+aGAOVbwvOZuG0eoYq8195IRO4LdW/DqSXPg0J0MfNezMFpxALQGfXVbmjYZy/;
	25:do4cciu+noho3luz/apzO2SLrwUxMtU1mpvB8RCy4apqEKrylYBY2kRkkesHeB2PKCpHec2yEt5M6CnkE4xGEi8GJYDdn2DcoSuN+Qo+1PKF1AkSWR5Ws2c+gHqtivhEPE0BQ7+CM5/M4wfhYNJnpFHi9Q4NKUZhUCjhhgkYyjSR9DA5UUZkz4NpQwAXtHymTl79qzF+vTkgYZld/JBoO53zZqwhDNydgw+Z7lRtHn2fy/uYK+OBy6ZVjSq8kUhGz6kZ2H64D/dxb0/VMIbyoi5on8Qp1X3bXY0pGSKnMfmRLi8WeJ0xKwWzHGT2sy3poifogiM1EOGemO7/cE8fug==;
	31:vZxwuK66h8UMI1YgM9RPPUG9AiYJB0z4PNbgDmbtfCzXAcInswnD8y01QTHEgHxIOKIJQud+Uokn91rkDkNyot3u3vNE6xfd5ZKF8/Bhde9aVlau2ankhzPwe/qrVvVIzYWciStsJ3XQ2FO3XiHwfAy7YN/0UR6c4gAUNyb9k2dBELwWonPReofz9dL4k2RNfSxEm7uzPvXPMT215X1snV7qYWq+0QSibKGp1v3b91Y=
X-MS-TrafficTypeDiagnostic: MWHPR12MB1742:
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	20:rjRr++I8viiMxA5VLsFJJVjt9rvL+axr8d/PL2jMDIAbuw4WTBtppReiUaWg1mT+WK/6c2Prg07PuUxEHNBwAkxfE9raPI+ZroNdJB2bFXXmAi9z7vsyHbwytjyJcVV8AENjNIGF3fywyML04n/Yd/UrWv7uK1Z+OcWX2jN9ZxSpg/PWmK5E9wQnGVvNIY2WMr0QfI0oxSqQq7rZr5BVwtwlXO2Gp2+E4N2UuITAECDNFoMPmd+qqT5q/pNQNrsGRTpKOmtKhRwTp6NEGP+skNEmekl67zV1O24zxkf5PJnjvpC8rvkEQUtuRibe/Wl1kage0Cg/RtrZlDZdb6n1vOSdfmjdtACXSsMZCk4syS69rRva4t7sFlGkYj2DnGh27H22xn9lmnY6C7k33MeQsFSFU5pGc79AJxEEper1O05l+aORRpzCqShO76buzv5HwF3ZYKBUR75xInEUPYJKrqbweL1cpi6AgisHxX4taPlFCcf6sqPXTrg34J+F88H9;
	4:i0kzpOMsa8elxFlgc9H/Wb9xEeJ9QmJIUKhFB7j1EMlPrWHxz6EkOBo78++4U/myuAyv2pHYSWIGLyYNgIwsWj2tmyX/rM656Cyl+/orfD8neKBQ1UBtpA1jrFW+eSYrJmUWpCH7XdgI3HPqGLOgLESFh8R/e22TGfhV6w8NV0O1XnKNCYxqxq40kv0SgvWWKrJ5ikvMDGgCAUAU8yoCTFgm04xWis1Z3Nrshy0zM2zWE8KXDDfxt3X0LkR9Ts86i5Ymfg6tHvK0BTe+WG8NM1w9axCLIH2MF8EoXwpLHK3R63Mnwc2IbcS0LtzR1t9I
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB174242B8544D8632E02D8DAAF3FB0@MWHPR12MB1742.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040501)(2401047)(5005006)(8121501046)(3231101)(2400082)(944501161)(3002001)(10201501046)(93006095)(93001095)(6055026)(6041288)(20161123564045)(20161123558120)(20161123562045)(20161123560045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(6072148)(201708071742011);
	SRVR:MWHPR12MB1742; BCL:0; PCL:0; RULEID:; SRVR:MWHPR12MB1742;
X-Forefront-PRVS: 056929CBB8
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(346002)(39860400002)(376002)(396003)(39380400002)(366004)(189003)(199004)(106356001)(53936002)(575784001)(6666003)(86362001)(2950100002)(4326008)(25786009)(66066001)(2906002)(68736007)(4720700003)(26005)(52116002)(6506007)(316002)(59450400001)(47776003)(386003)(6486002)(3846002)(48376002)(305945005)(478600001)(36756003)(50226002)(97736004)(105586002)(76176011)(51416003)(50466002)(72206003)(186003)(7736002)(16586007)(5660300001)(8676002)(16526019)(6116002)(6512007)(8936002)(81156014)(81166006);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1742;
	H:ssuthiku-rhel74.localdomain; FPR:; SPF:None;
	PTR:InfoNoRecords; MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1742;
	23:fvyfXNlphWU9NLu5Y/NSyBNw30P1WAew2XgBRvqei?=
	=?us-ascii?Q?K00nlwvegCStbWi9LgsSD/QlbRRIhpgxE4IOMT3h+EFiH5Bv25o/M3vUyO5O?=
	=?us-ascii?Q?9is0CZ6Q0joylX6K66h2v9ig/rhS4rX5/cHfcnoknkRp+GjrgrHnR2QOrwRK?=
	=?us-ascii?Q?kenGNIDGvO2RPn+TnNID6tT852eujccgBAHX9u6aMmsWicQOxrf/gY+EIUQf?=
	=?us-ascii?Q?LQs+RbNkMK/bD95bFcPvTw9EJ2tM2sgZ00etN9GDmg6Q6azEBfaaLapDpW5d?=
	=?us-ascii?Q?8cSpNbUSq7/9lzQxccc8+7rLpuM+/pICouDNHAkvH5qYWKZKPqQrZdxZbNW0?=
	=?us-ascii?Q?3Wa0Dm4d/n+ddrn1/8nrRJvoNgERYiv+g6fQuOqErWEDGQsig2gtsR08PUiH?=
	=?us-ascii?Q?vmZNdHZkbDNmdVn/I9JkOB8RXt2LHzecq8gH/xN2XZMWNp25aw3V1veISqjy?=
	=?us-ascii?Q?Gx83TH/8ukeKYvQTKK2phy2W/llqbqSdNNrWJxvlFZcCxzTeXbLazrMk/Avu?=
	=?us-ascii?Q?bVi69x39O3lc/knW3Yk63ZdFlA98cANiZyizPr0e6DhXWRFYn9V1buz/yr6o?=
	=?us-ascii?Q?T6XhFEAJ/uL6tB4ETq2uWOUJca9izWb0txaJgmZ8FlZ+rwbPxVaHZCXZohRX?=
	=?us-ascii?Q?YmOtauxwGWSnZqm1DSDaUCgN6QtybLsjFp45ItEZuiIHZAi5aVSkc1HDMp55?=
	=?us-ascii?Q?b3auLaRl+B/W9ZATjeQbAeH0p2oREea5up5YA679IWm3Z8AOdIr0voBfftlX?=
	=?us-ascii?Q?n6wFdu2YpZvPy2qEtd1E9+sPJkVAkSXrEvdRnjEgQO+yQ/+TUmiPA68auLCg?=
	=?us-ascii?Q?8aiVODePV1QlK+E3sCejGgfVWHm8bs68Mt8WB9fYKpWi3qo3BTUSodCBczvd?=
	=?us-ascii?Q?MuGNQZA7M4fS5MDvh9+3MIANNNCP+WBZmCcfPCjZ0GlkE+8D4OvHzB7bY9cB?=
	=?us-ascii?Q?Fgik25EkZovoj3irh728cE+rLxig9VY5WdCBR1L5d3Uy1qCEX9hTGSvCpOqF?=
	=?us-ascii?Q?PXG1Dhwpcf1JYlBW84A9hk2Ua88XQraUBFhxJQ9x3LUQJta3FpPEdRNvs8+6?=
	=?us-ascii?Q?cSC2AtdAFTbRM6Yn97M14mzXEC0Cg7o9V6G46DTMiuDZyqtZfJ3gXUrqSrZX?=
	=?us-ascii?Q?A8KmUw62xjdPc9n2s6bUN7rUzd128h3hP6zbjMWW1aOTVd/NwKy6G3EwDfV9?=
	=?us-ascii?Q?tOfnHlfazSboKE=3D?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	6:yDg4OKaFD3oxVfrZ9GfkW7qW6Ur9TUNRwLA9VPq0kaCsdie97D6Cmqa61x1nbKColO3UvoD96HN1MDCGAd4okG7EQiLVlfOAo7sSRaGP53t4OqW4Tg9Zg1BSMyMlAA3VWa3juQZER5m4SOsw3TSTUUQE6iw9uxtsm46VrHu1FuUo0shTS2VLJOR2jqr9H6PxVDV/W93H2ztWBYvOL+cREchyt6Vy8+sm5nY8GtwPJK21SGMjMcZAHlHibI42NE/d+rrozh2vbghS3ZIXyq1qo6ATf+wksJcRVYUeRRhbmC+YFh/uSCySwrW31h/iAMZ3vFbu/Vs/5EIV4bnL30OmtavSElwv1wP/5i5KpuuudJk=;
	5:sgzJym0ZRw3Ae+ftowifQRR9Sv/Rr1emKBEw/5wk+It5SoM045c62PdF61txOR6J2H5kjsVz7QV//ubZNCxIn8NpW//U4IWeZlhGhJHwzpL5HO3EdZNBanqX/4smznBtVe5mGJAffnSEK/AnP+7RWBbzRgZtiOqrwwxdo1PVXUY=;
	24:adyE7fDHjiHGIDIVt+To3gvD6fHMG11SwwPx/wyqvW8ThPqRlGpxzs1MMh9OYkxW3W6n343UnqZTVoNjZcuw48H4dkJA/wgnzF52wH1REKM=;
	7:AjS4NrX292ggbv37Q1gs620Y7XYhwEb+8sP76ZjpoYevrbGcTWIE3AR1nMxDBlrtswXWFeO3gBvsGEolIdmb0Piov4tzOqbeiKikt9tl/69lflHXYYOuyJFoRPSo92d5w+C23LTEZ8ayRFexwH7oVou2apu24Ut7+y39VMRwa8fUeMzCkg87rUgLvkI9LUAEQ2yJNKhurm0goNKmsVWWVSTqKBLkkPhGI7FB4fdZRtN3eCDM6tio+N4oCmunopZf
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	20:4f3ROStoORVjCaMmp6x8K4B+vGydSVKvB+j0pKGST4Ix0FfsZfHL7aB/n6DP9e1FITnWbDq/e1ng8iCBgs4lKjLenpPrDF9aFzd4ajcQGWvKe/I5wyO7JRW8mcGIEwJAe4FWM8j3nuEuUN3SOX1VRE1kpF7zdy9K0NOOZc/P0Kc/4ewLHgovfwFaO/ZBt6VvpB3nJdbmF+FF21pS2ifoyFVVLQVULtkwSC56UulM5VCvFEQmSx8oUG9fo0iihCZD
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 31 Jan 2018 01:48:35.3986
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 71fa8fc9-8d27-44ed-43ff-08d5684cbf06
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1742
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Jan. 31, 2018, 1:48 a.m.</div>
<pre class="content">
Currently, iommu_unmap and iommu_unmap_fast return unmapped
pages with size_t.  However, the actual value returned could
be error codes (&lt; 0), which can be misinterpreted as large
number of unmapped pages. Therefore, change the return type to ssize_t.

Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Alex Williamson &lt;alex.williamson@redhat.com&gt;
<span class="signed-off-by">Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
---
 drivers/iommu/amd_iommu.c   |  6 +++---
 drivers/iommu/intel-iommu.c |  4 ++--
 drivers/iommu/iommu.c       | 16 ++++++++--------
 include/linux/iommu.h       | 20 ++++++++++----------
 4 files changed, 23 insertions(+), 23 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Jan. 31, 2018, 6:02 p.m.</div>
<pre class="content">
Hi Suravee,

On 31/01/18 01:48, Suravee Suthikulpanit wrote:
<span class="quote">&gt; Currently, iommu_unmap and iommu_unmap_fast return unmapped</span>
<span class="quote">&gt; pages with size_t.  However, the actual value returned could</span>
<span class="quote">&gt; be error codes (&lt; 0), which can be misinterpreted as large</span>
<span class="quote">&gt; number of unmapped pages. Therefore, change the return type to ssize_t.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Joerg Roedel &lt;joro@8bytes.org&gt;</span>
<span class="quote">&gt; Cc: Alex Williamson &lt;alex.williamson@redhat.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu.c   |  6 +++---</span>
<span class="quote">&gt;   drivers/iommu/intel-iommu.c |  4 ++--</span>

Er, there are a few more drivers than that implementing iommu_ops ;)

It seems like it might be more sensible to fix the single instance of a 
driver returning -EINVAL (which appears to be a &quot;should never happen if 
used correctly&quot; kinda thing anyway) and leave the API-internal callback 
prototype as-is. I do agree the inconsistency of iommu_unmap() itself 
wants sorting, though (particularly the !IOMMU_API stubs which are wrong 
either way).

Robin.
<span class="quote">
&gt;   drivers/iommu/iommu.c       | 16 ++++++++--------</span>
<span class="quote">&gt;   include/linux/iommu.h       | 20 ++++++++++----------</span>
<span class="quote">&gt;   4 files changed, 23 insertions(+), 23 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; index 7d5eb00..3609f51 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; @@ -3030,11 +3030,11 @@ static int amd_iommu_map(struct iommu_domain *dom, unsigned long iova,</span>
<span class="quote">&gt;   	return ret;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static size_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
<span class="quote">&gt; -			   size_t page_size)</span>
<span class="quote">&gt; +static ssize_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
<span class="quote">&gt; +			       size_t page_size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct protection_domain *domain = to_pdomain(dom);</span>
<span class="quote">&gt; -	size_t unmap_size;</span>
<span class="quote">&gt; +	ssize_t unmap_size;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	if (domain-&gt;mode == PAGE_MODE_NONE)</span>
<span class="quote">&gt;   		return -EINVAL;</span>
<span class="quote">&gt; diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; index 4a2de34..15ba866 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; @@ -5068,8 +5068,8 @@ static int intel_iommu_map(struct iommu_domain *domain,</span>
<span class="quote">&gt;   	return ret;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static size_t intel_iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; -				unsigned long iova, size_t size)</span>
<span class="quote">&gt; +static ssize_t intel_iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				 unsigned long iova, size_t size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct dmar_domain *dmar_domain = to_dmar_domain(domain);</span>
<span class="quote">&gt;   	struct page *freelist = NULL;</span>
<span class="quote">&gt; diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; index 3de5c0b..8f7da8a 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; @@ -1557,12 +1557,12 @@ int iommu_map(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   EXPORT_SYMBOL_GPL(iommu_map);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static size_t __iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; -			    unsigned long iova, size_t size,</span>
<span class="quote">&gt; -			    bool sync)</span>
<span class="quote">&gt; +static ssize_t __iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; +			     unsigned long iova, size_t size,</span>
<span class="quote">&gt; +			     bool sync)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	const struct iommu_ops *ops = domain-&gt;ops;</span>
<span class="quote">&gt; -	size_t unmapped_page, unmapped = 0;</span>
<span class="quote">&gt; +	ssize_t unmapped_page, unmapped = 0;</span>
<span class="quote">&gt;   	unsigned long orig_iova = iova;</span>
<span class="quote">&gt;   	unsigned int min_pagesz;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; @@ -1617,15 +1617,15 @@ static size_t __iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt;   	return unmapped;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -size_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; -		   unsigned long iova, size_t size)</span>
<span class="quote">&gt; +ssize_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; +		    unsigned long iova, size_t size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	return __iommu_unmap(domain, iova, size, true);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   EXPORT_SYMBOL_GPL(iommu_unmap);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -size_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="quote">&gt; -			unsigned long iova, size_t size)</span>
<span class="quote">&gt; +ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="quote">&gt; +			 unsigned long iova, size_t size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	return __iommu_unmap(domain, iova, size, false);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; diff --git a/include/linux/iommu.h b/include/linux/iommu.h</span>
<span class="quote">&gt; index 41b8c57..78df048 100644</span>
<span class="quote">&gt; --- a/include/linux/iommu.h</span>
<span class="quote">&gt; +++ b/include/linux/iommu.h</span>
<span class="quote">&gt; @@ -199,8 +199,8 @@ struct iommu_ops {</span>
<span class="quote">&gt;   	void (*detach_dev)(struct iommu_domain *domain, struct device *dev);</span>
<span class="quote">&gt;   	int (*map)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   		   phys_addr_t paddr, size_t size, int prot);</span>
<span class="quote">&gt; -	size_t (*unmap)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; -		     size_t size);</span>
<span class="quote">&gt; +	ssize_t (*unmap)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; +			 size_t size);</span>
<span class="quote">&gt;   	size_t (*map_sg)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   			 struct scatterlist *sg, unsigned int nents, int prot);</span>
<span class="quote">&gt;   	void (*flush_iotlb_all)(struct iommu_domain *domain);</span>
<span class="quote">&gt; @@ -299,10 +299,10 @@ extern void iommu_detach_device(struct iommu_domain *domain,</span>
<span class="quote">&gt;   extern struct iommu_domain *iommu_get_domain_for_dev(struct device *dev);</span>
<span class="quote">&gt;   extern int iommu_map(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   		     phys_addr_t paddr, size_t size, int prot);</span>
<span class="quote">&gt; -extern size_t iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; -			  size_t size);</span>
<span class="quote">&gt; -extern size_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="quote">&gt; -			       unsigned long iova, size_t size);</span>
<span class="quote">&gt; +extern ssize_t iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; +			   size_t size);</span>
<span class="quote">&gt; +extern ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				unsigned long iova, size_t size);</span>
<span class="quote">&gt;   extern size_t default_iommu_map_sg(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   				struct scatterlist *sg,unsigned int nents,</span>
<span class="quote">&gt;   				int prot);</span>
<span class="quote">&gt; @@ -465,14 +465,14 @@ static inline int iommu_map(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt;   	return -ENODEV;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static inline int iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; -			      size_t size)</span>
<span class="quote">&gt; +static inline ssize_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				  unsigned long iova, size_t size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	return -ENODEV;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static inline int iommu_unmap_fast(struct iommu_domain *domain, unsigned long iova,</span>
<span class="quote">&gt; -				   int gfp_order)</span>
<span class="quote">&gt; +static inline ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				       unsigned long iova, int gfp_order)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	return -ENODEV;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Feb. 1, 2018, 5:03 a.m.</div>
<pre class="content">
Hi Robin,

On 2/1/18 1:02 AM, Robin Murphy wrote:
<span class="quote">&gt; Hi Suravee,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 31/01/18 01:48, Suravee Suthikulpanit wrote:</span>
<span class="quote">&gt;&gt; Currently, iommu_unmap and iommu_unmap_fast return unmapped</span>
<span class="quote">&gt;&gt; pages with size_t.  However, the actual value returned could</span>
<span class="quote">&gt;&gt; be error codes (&lt; 0), which can be misinterpreted as large</span>
<span class="quote">&gt;&gt; number of unmapped pages. Therefore, change the return type to ssize_t.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cc: Joerg Roedel &lt;joro@8bytes.org&gt;</span>
<span class="quote">&gt;&gt; Cc: Alex Williamson &lt;alex.williamson@redhat.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   drivers/iommu/amd_iommu.c   |  6 +++---</span>
<span class="quote">&gt;&gt;   drivers/iommu/intel-iommu.c |  4 ++--</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Er, there are a few more drivers than that implementing iommu_ops ;)</span>

Ahh right.
<span class="quote">&gt; </span>
<span class="quote">&gt; It seems like it might be more sensible to fix the single instance of a driver returning -EINVAL (which appears to be a &quot;should never happen if used correctly&quot; kinda thing anyway) and leave the API-internal callback prototype as-is. I do agree the inconsistency of iommu_unmap() itself wants sorting, though (particularly the !IOMMU_API stubs which are wrong either way).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Robin.</span>

Make sense. I&#39;ll leave the API alone, and change the code to not returning error then.
There are a few places to fix.

Thanks,
Suravee
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Feb. 1, 2018, 12:17 p.m.</div>
<pre class="content">
On 01/02/18 05:03, Suravee Suthikulpanit wrote:
<span class="quote">&gt; Hi Robin,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 2/1/18 1:02 AM, Robin Murphy wrote:</span>
<span class="quote">&gt;&gt; Hi Suravee,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 31/01/18 01:48, Suravee Suthikulpanit wrote:</span>
<span class="quote">&gt;&gt;&gt; Currently, iommu_unmap and iommu_unmap_fast return unmapped</span>
<span class="quote">&gt;&gt;&gt; pages with size_t.  However, the actual value returned could</span>
<span class="quote">&gt;&gt;&gt; be error codes (&lt; 0), which can be misinterpreted as large</span>
<span class="quote">&gt;&gt;&gt; number of unmapped pages. Therefore, change the return type to ssize_t.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Joerg Roedel &lt;joro@8bytes.org&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Alex Williamson &lt;alex.williamson@redhat.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;   drivers/iommu/amd_iommu.c   |  6 +++---</span>
<span class="quote">&gt;&gt;&gt;   drivers/iommu/intel-iommu.c |  4 ++--</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Er, there are a few more drivers than that implementing iommu_ops ;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ahh right.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It seems like it might be more sensible to fix the single instance of </span>
<span class="quote">&gt;&gt; a driver returning -EINVAL (which appears to be a &quot;should never happen </span>
<span class="quote">&gt;&gt; if used correctly&quot; kinda thing anyway) and leave the API-internal </span>
<span class="quote">&gt;&gt; callback prototype as-is. I do agree the inconsistency of </span>
<span class="quote">&gt;&gt; iommu_unmap() itself wants sorting, though (particularly the </span>
<span class="quote">&gt;&gt; !IOMMU_API stubs which are wrong either way).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Robin.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Make sense. I&#39;ll leave the API alone, and change the code to not </span>
<span class="quote">&gt; returning error then.</span>

Actually, on a second look I think that check in amd_iommu is 99% 
redundant anyway, since PAGE_MODE_NONE is only normally set for 
IOMMU_DOMAIN_IDENTITY domains, thus iommu_unmap() would have bailed out 
from the __IOMMU_DOMAIN_PAGING check before ops-&gt;unmap could be called. 
AFAICS the only way to hit it at all is if a caller somehow managed to 
get hold of the dev_state-&gt;domain set up in amd_iommu_init_device(), 
then tried to unmap something from that, which seems such a very wrong 
thing to do it should probably just crash and burn with extreme 
prejudice anyway.

Cheers,
Robin.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Feb. 2, 2018, 7:13 p.m.</div>
<pre class="content">
Hi Suravee,

I love your patch! Yet something to improve:

[auto build test ERROR on iommu/next]
[also build test ERROR on v4.15 next-20180202]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Suravee-Suthikulpanit/iommu-Fix-iommu_unmap-and-iommu_unmap_fast-return-type/20180203-015316
base:   https://git.kernel.org/pub/scm/linux/kernel/git/joro/iommu.git next
config: s390-allyesconfig (attached as .config)
compiler: s390x-linux-gnu-gcc (Debian 7.2.0-11) 7.2.0
reproduce:
        wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=s390 

All errors (new ones prefixed by &gt;&gt;):
<span class="quote">
&gt;&gt; drivers//iommu/s390-iommu.c:373:11: error: initialization from incompatible pointer type [-Werror=incompatible-pointer-types]</span>
     .unmap = s390_iommu_unmap,
              ^~~~~~~~~~~~~~~~
   drivers//iommu/s390-iommu.c:373:11: note: (near initialization for &#39;s390_iommu_ops.unmap&#39;)
   cc1: some warnings being treated as errors

vim +373 drivers//iommu/s390-iommu.c

f42c22351 Joerg Roedel    2017-04-27  365  
cceb84519 Arvind Yadav    2017-08-28  366  static const struct iommu_ops s390_iommu_ops = {
8128f23c4 Gerald Schaefer 2015-08-27  367  	.capable = s390_iommu_capable,
8128f23c4 Gerald Schaefer 2015-08-27  368  	.domain_alloc = s390_domain_alloc,
8128f23c4 Gerald Schaefer 2015-08-27  369  	.domain_free = s390_domain_free,
8128f23c4 Gerald Schaefer 2015-08-27  370  	.attach_dev = s390_iommu_attach_device,
8128f23c4 Gerald Schaefer 2015-08-27  371  	.detach_dev = s390_iommu_detach_device,
8128f23c4 Gerald Schaefer 2015-08-27  372  	.map = s390_iommu_map,
8128f23c4 Gerald Schaefer 2015-08-27 @373  	.unmap = s390_iommu_unmap,
8128f23c4 Gerald Schaefer 2015-08-27  374  	.iova_to_phys = s390_iommu_iova_to_phys,
8128f23c4 Gerald Schaefer 2015-08-27  375  	.add_device = s390_iommu_add_device,
8128f23c4 Gerald Schaefer 2015-08-27  376  	.remove_device = s390_iommu_remove_device,
0929deca4 Joerg Roedel    2017-06-15  377  	.device_group = generic_device_group,
8128f23c4 Gerald Schaefer 2015-08-27  378  	.pgsize_bitmap = S390_IOMMU_PGSIZES,
8128f23c4 Gerald Schaefer 2015-08-27  379  };
8128f23c4 Gerald Schaefer 2015-08-27  380  

:::::: The code at line 373 was first introduced by commit
:::::: 8128f23c436d0dd4f72412e1bf9256e424479dc3 iommu/s390: Add iommu api for s390 pci devices

:::::: TO: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;
:::::: CC: Joerg Roedel &lt;jroedel@suse.de&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Feb. 2, 2018, 7:41 p.m.</div>
<pre class="content">
Hi Suravee,

I love your patch! Yet something to improve:

[auto build test ERROR on iommu/next]
[also build test ERROR on v4.15 next-20180202]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Suravee-Suthikulpanit/iommu-Fix-iommu_unmap-and-iommu_unmap_fast-return-type/20180203-015316
base:   https://git.kernel.org/pub/scm/linux/kernel/git/joro/iommu.git next
config: sparc64-allyesconfig (attached as .config)
compiler: sparc64-linux-gnu-gcc (Debian 7.2.0-11) 7.2.0
reproduce:
        wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=sparc64 

All errors (new ones prefixed by &gt;&gt;):
<span class="quote">
&gt;&gt; drivers/iommu/qcom_iommu.c:592:12: error: initialization from incompatible pointer type [-Werror=incompatible-pointer-types]</span>
     .unmap  = qcom_iommu_unmap,
               ^~~~~~~~~~~~~~~~
   drivers/iommu/qcom_iommu.c:592:12: note: (near initialization for &#39;qcom_iommu_ops.unmap&#39;)
   cc1: some warnings being treated as errors

vim +592 drivers/iommu/qcom_iommu.c

0ae349a0f3 Rob Clark    2017-08-09  584  
0ae349a0f3 Rob Clark    2017-08-09  585  static const struct iommu_ops qcom_iommu_ops = {
0ae349a0f3 Rob Clark    2017-08-09  586  	.capable	= qcom_iommu_capable,
0ae349a0f3 Rob Clark    2017-08-09  587  	.domain_alloc	= qcom_iommu_domain_alloc,
0ae349a0f3 Rob Clark    2017-08-09  588  	.domain_free	= qcom_iommu_domain_free,
0ae349a0f3 Rob Clark    2017-08-09  589  	.attach_dev	= qcom_iommu_attach_dev,
0ae349a0f3 Rob Clark    2017-08-09  590  	.detach_dev	= qcom_iommu_detach_dev,
0ae349a0f3 Rob Clark    2017-08-09  591  	.map		= qcom_iommu_map,
0ae349a0f3 Rob Clark    2017-08-09 @592  	.unmap		= qcom_iommu_unmap,
0ae349a0f3 Rob Clark    2017-08-09  593  	.map_sg		= default_iommu_map_sg,
4d689b6194 Robin Murphy 2017-09-28  594  	.flush_iotlb_all = qcom_iommu_iotlb_sync,
4d689b6194 Robin Murphy 2017-09-28  595  	.iotlb_sync	= qcom_iommu_iotlb_sync,
0ae349a0f3 Rob Clark    2017-08-09  596  	.iova_to_phys	= qcom_iommu_iova_to_phys,
0ae349a0f3 Rob Clark    2017-08-09  597  	.add_device	= qcom_iommu_add_device,
0ae349a0f3 Rob Clark    2017-08-09  598  	.remove_device	= qcom_iommu_remove_device,
0ae349a0f3 Rob Clark    2017-08-09  599  	.device_group	= generic_device_group,
0ae349a0f3 Rob Clark    2017-08-09  600  	.of_xlate	= qcom_iommu_of_xlate,
0ae349a0f3 Rob Clark    2017-08-09  601  	.pgsize_bitmap	= SZ_4K | SZ_64K | SZ_1M | SZ_16M,
0ae349a0f3 Rob Clark    2017-08-09  602  };
0ae349a0f3 Rob Clark    2017-08-09  603  

:::::: The code at line 592 was first introduced by commit
:::::: 0ae349a0f33fb040a2bc228fdc6d60111455feab iommu/qcom: Add qcom_iommu

:::::: TO: Rob Clark &lt;robdclark@gmail.com&gt;
:::::: CC: Joerg Roedel &lt;jroedel@suse.de&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Feb. 2, 2018, 11:57 p.m.</div>
<pre class="content">
Hi Suravee,

I love your patch! Perhaps something to improve:

[auto build test WARNING on iommu/next]
[also build test WARNING on v4.15 next-20180202]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Suravee-Suthikulpanit/iommu-Fix-iommu_unmap-and-iommu_unmap_fast-return-type/20180203-015316
base:   https://git.kernel.org/pub/scm/linux/kernel/git/joro/iommu.git next
reproduce:
        # apt-get install sparse
        make ARCH=x86_64 allmodconfig
        make C=1 CF=-D__CHECK_ENDIAN__


sparse warnings: (new ones prefixed by &gt;&gt;)
<span class="quote">
&gt;&gt; drivers/iommu/qcom_iommu.c:592:27: sparse: incorrect type in initializer (different signedness) @@ expected long ( )( ... ) @@ got unsigned long ( )( ... ) @@</span>
   drivers/iommu/qcom_iommu.c:592:27: expected long ( )( ... )
   drivers/iommu/qcom_iommu.c:592:27: got unsigned long ( )( ... )
   drivers/iommu/qcom_iommu.c:592:12: error: initialization from incompatible pointer type
    .unmap = qcom_iommu_unmap,
    ^~~~~~~~~~~~~~~~
   drivers/iommu/qcom_iommu.c:592:12: note: (near initialization for &#39;qcom_iommu_ops.unmap&#39;)
   cc1: some warnings being treated as errors

vim +592 drivers/iommu/qcom_iommu.c

0ae349a0f3 Rob Clark    2017-08-09  584  
0ae349a0f3 Rob Clark    2017-08-09  585  static const struct iommu_ops qcom_iommu_ops = {
0ae349a0f3 Rob Clark    2017-08-09  586  	.capable	= qcom_iommu_capable,
0ae349a0f3 Rob Clark    2017-08-09  587  	.domain_alloc	= qcom_iommu_domain_alloc,
0ae349a0f3 Rob Clark    2017-08-09  588  	.domain_free	= qcom_iommu_domain_free,
0ae349a0f3 Rob Clark    2017-08-09  589  	.attach_dev	= qcom_iommu_attach_dev,
0ae349a0f3 Rob Clark    2017-08-09  590  	.detach_dev	= qcom_iommu_detach_dev,
0ae349a0f3 Rob Clark    2017-08-09  591  	.map		= qcom_iommu_map,
0ae349a0f3 Rob Clark    2017-08-09 @592  	.unmap		= qcom_iommu_unmap,
0ae349a0f3 Rob Clark    2017-08-09  593  	.map_sg		= default_iommu_map_sg,
4d689b6194 Robin Murphy 2017-09-28  594  	.flush_iotlb_all = qcom_iommu_iotlb_sync,
4d689b6194 Robin Murphy 2017-09-28  595  	.iotlb_sync	= qcom_iommu_iotlb_sync,
0ae349a0f3 Rob Clark    2017-08-09  596  	.iova_to_phys	= qcom_iommu_iova_to_phys,
0ae349a0f3 Rob Clark    2017-08-09  597  	.add_device	= qcom_iommu_add_device,
0ae349a0f3 Rob Clark    2017-08-09  598  	.remove_device	= qcom_iommu_remove_device,
0ae349a0f3 Rob Clark    2017-08-09  599  	.device_group	= generic_device_group,
0ae349a0f3 Rob Clark    2017-08-09  600  	.of_xlate	= qcom_iommu_of_xlate,
0ae349a0f3 Rob Clark    2017-08-09  601  	.pgsize_bitmap	= SZ_4K | SZ_64K | SZ_1M | SZ_16M,
0ae349a0f3 Rob Clark    2017-08-09  602  };
0ae349a0f3 Rob Clark    2017-08-09  603  

:::::: The code at line 592 was first introduced by commit
:::::: 0ae349a0f33fb040a2bc228fdc6d60111455feab iommu/qcom: Add qcom_iommu

:::::: TO: Rob Clark &lt;robdclark@gmail.com&gt;
:::::: CC: Joerg Roedel &lt;jroedel@suse.de&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 7d5eb00..3609f51 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -3030,11 +3030,11 @@</span> <span class="p_context"> static int amd_iommu_map(struct iommu_domain *dom, unsigned long iova,</span>
 	return ret;
 }
 
<span class="p_del">-static size_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
<span class="p_del">-			   size_t page_size)</span>
<span class="p_add">+static ssize_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
<span class="p_add">+			       size_t page_size)</span>
 {
 	struct protection_domain *domain = to_pdomain(dom);
<span class="p_del">-	size_t unmap_size;</span>
<span class="p_add">+	ssize_t unmap_size;</span>
 
 	if (domain-&gt;mode == PAGE_MODE_NONE)
 		return -EINVAL;
<span class="p_header">diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="p_header">index 4a2de34..15ba866 100644</span>
<span class="p_header">--- a/drivers/iommu/intel-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/intel-iommu.c</span>
<span class="p_chunk">@@ -5068,8 +5068,8 @@</span> <span class="p_context"> static int intel_iommu_map(struct iommu_domain *domain,</span>
 	return ret;
 }
 
<span class="p_del">-static size_t intel_iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_del">-				unsigned long iova, size_t size)</span>
<span class="p_add">+static ssize_t intel_iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_add">+				 unsigned long iova, size_t size)</span>
 {
 	struct dmar_domain *dmar_domain = to_dmar_domain(domain);
 	struct page *freelist = NULL;
<span class="p_header">diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c</span>
<span class="p_header">index 3de5c0b..8f7da8a 100644</span>
<span class="p_header">--- a/drivers/iommu/iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/iommu.c</span>
<span class="p_chunk">@@ -1557,12 +1557,12 @@</span> <span class="p_context"> int iommu_map(struct iommu_domain *domain, unsigned long iova,</span>
 }
 EXPORT_SYMBOL_GPL(iommu_map);
 
<span class="p_del">-static size_t __iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_del">-			    unsigned long iova, size_t size,</span>
<span class="p_del">-			    bool sync)</span>
<span class="p_add">+static ssize_t __iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_add">+			     unsigned long iova, size_t size,</span>
<span class="p_add">+			     bool sync)</span>
 {
 	const struct iommu_ops *ops = domain-&gt;ops;
<span class="p_del">-	size_t unmapped_page, unmapped = 0;</span>
<span class="p_add">+	ssize_t unmapped_page, unmapped = 0;</span>
 	unsigned long orig_iova = iova;
 	unsigned int min_pagesz;
 
<span class="p_chunk">@@ -1617,15 +1617,15 @@</span> <span class="p_context"> static size_t __iommu_unmap(struct iommu_domain *domain,</span>
 	return unmapped;
 }
 
<span class="p_del">-size_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_del">-		   unsigned long iova, size_t size)</span>
<span class="p_add">+ssize_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_add">+		    unsigned long iova, size_t size)</span>
 {
 	return __iommu_unmap(domain, iova, size, true);
 }
 EXPORT_SYMBOL_GPL(iommu_unmap);
 
<span class="p_del">-size_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="p_del">-			unsigned long iova, size_t size)</span>
<span class="p_add">+ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="p_add">+			 unsigned long iova, size_t size)</span>
 {
 	return __iommu_unmap(domain, iova, size, false);
 }
<span class="p_header">diff --git a/include/linux/iommu.h b/include/linux/iommu.h</span>
<span class="p_header">index 41b8c57..78df048 100644</span>
<span class="p_header">--- a/include/linux/iommu.h</span>
<span class="p_header">+++ b/include/linux/iommu.h</span>
<span class="p_chunk">@@ -199,8 +199,8 @@</span> <span class="p_context"> struct iommu_ops {</span>
 	void (*detach_dev)(struct iommu_domain *domain, struct device *dev);
 	int (*map)(struct iommu_domain *domain, unsigned long iova,
 		   phys_addr_t paddr, size_t size, int prot);
<span class="p_del">-	size_t (*unmap)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_del">-		     size_t size);</span>
<span class="p_add">+	ssize_t (*unmap)(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_add">+			 size_t size);</span>
 	size_t (*map_sg)(struct iommu_domain *domain, unsigned long iova,
 			 struct scatterlist *sg, unsigned int nents, int prot);
 	void (*flush_iotlb_all)(struct iommu_domain *domain);
<span class="p_chunk">@@ -299,10 +299,10 @@</span> <span class="p_context"> extern void iommu_detach_device(struct iommu_domain *domain,</span>
 extern struct iommu_domain *iommu_get_domain_for_dev(struct device *dev);
 extern int iommu_map(struct iommu_domain *domain, unsigned long iova,
 		     phys_addr_t paddr, size_t size, int prot);
<span class="p_del">-extern size_t iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_del">-			  size_t size);</span>
<span class="p_del">-extern size_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="p_del">-			       unsigned long iova, size_t size);</span>
<span class="p_add">+extern ssize_t iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_add">+			   size_t size);</span>
<span class="p_add">+extern ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="p_add">+				unsigned long iova, size_t size);</span>
 extern size_t default_iommu_map_sg(struct iommu_domain *domain, unsigned long iova,
 				struct scatterlist *sg,unsigned int nents,
 				int prot);
<span class="p_chunk">@@ -465,14 +465,14 @@</span> <span class="p_context"> static inline int iommu_map(struct iommu_domain *domain, unsigned long iova,</span>
 	return -ENODEV;
 }
 
<span class="p_del">-static inline int iommu_unmap(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_del">-			      size_t size)</span>
<span class="p_add">+static inline ssize_t iommu_unmap(struct iommu_domain *domain,</span>
<span class="p_add">+				  unsigned long iova, size_t size)</span>
 {
 	return -ENODEV;
 }
 
<span class="p_del">-static inline int iommu_unmap_fast(struct iommu_domain *domain, unsigned long iova,</span>
<span class="p_del">-				   int gfp_order)</span>
<span class="p_add">+static inline ssize_t iommu_unmap_fast(struct iommu_domain *domain,</span>
<span class="p_add">+				       unsigned long iova, int gfp_order)</span>
 {
 	return -ENODEV;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



