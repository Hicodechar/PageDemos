
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,05/10] mm: thp: enable thp migration in generic path - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,05/10] mm: thp: enable thp migration in generic path</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=123671">Zi Yan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 29, 2017, 2:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;c1e39aa0-8766-5a17-b5a7-aa76ee89e2c1@cs.rutgers.edu&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9753287/mbox/"
   >mbox</a>
|
   <a href="/patch/9753287/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9753287/">/patch/9753287/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9D2766038E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 May 2017 14:16:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8AAF527F86
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 May 2017 14:16:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7F8B42811E; Mon, 29 May 2017 14:16:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 24DEE27F86
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 May 2017 14:16:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751163AbdE2OQP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 29 May 2017 10:16:15 -0400
Received: from mail-bn3nam01on0116.outbound.protection.outlook.com
	([104.47.33.116]:36602
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751103AbdE2OQM (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 29 May 2017 10:16:12 -0400
Authentication-Results: cs.rutgers.edu; dkim=none (message not signed)
	header.d=none;cs.rutgers.edu; dmarc=none action=none
	header.from=cs.rutgers.edu;
Received: from [172.16.70.46] (128.6.37.253) by
	DM5PR14MB1659.namprd14.prod.outlook.com (10.171.156.17) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1124.9; Mon, 29 May 2017 14:16:05 +0000
Subject: Re: [PATCH v6 05/10] mm: thp: enable thp migration in generic path
From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;, kbuild-all@01.org,
	n-horiguchi@ah.jp.nec.com, kirill.shutemov@linux.intel.com,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	minchan@kernel.org, vbabka@suse.cz, mgorman@techsingularity.net,
	mhocko@kernel.org, khandual@linux.vnet.ibm.com,
	dnellans@nvidia.com, dave.hansen@intel.com
References: &lt;201705260111.PCjyEyr4%fengguang.wu@intel.com&gt;
	&lt;138B8C07-2A41-40AA-9B4C-5F85FEFD6F0D@cs.rutgers.edu&gt;
	&lt;20170525154328.61a2b2ceef37183895d5ce43@linux-foundation.org&gt;
	&lt;F8017E2F-74FB-4D9F-9900-D4D1085E1F30@cs.rutgers.edu&gt;
To: kbuild test robot &lt;lkp@intel.com&gt;
Message-ID: &lt;c1e39aa0-8766-5a17-b5a7-aa76ee89e2c1@cs.rutgers.edu&gt;
Date: Mon, 29 May 2017 10:13:53 -0400
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
	Thunderbird/52.1.1
MIME-Version: 1.0
In-Reply-To: &lt;F8017E2F-74FB-4D9F-9900-D4D1085E1F30@cs.rutgers.edu&gt;
Content-Type: multipart/signed; micalg=pgp-sha256;
	protocol=&quot;application/pgp-signature&quot;;
	boundary=&quot;keEUVb32kS2cUfX5SKEVHKMtbIat2U30b&quot;
X-Originating-IP: [128.6.37.253]
X-ClientProxiedBy: MWHPR04CA0037.namprd04.prod.outlook.com (10.172.163.23) To
	DM5PR14MB1659.namprd14.prod.outlook.com (10.171.156.17)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM5PR14MB1659:
X-MS-Office365-Filtering-Correlation-Id: eba0811d-42f6-4a20-6ca1-08d4a69d3fd3
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(201703131423075)(201703031133081);
	SRVR:DM5PR14MB1659; 
X-Microsoft-Exchange-Diagnostics: 1; DM5PR14MB1659;
	3:xm3GJs698fO9PBQ6KCo75KCdCpbg4Zk2Nm2xlDAGCdv0wo9t8+RyzIDcPrpgD7xXcXToTucjFlSSoHg0ZadAOXYtWm385s9RUXhKFHbsUKqzTTiqyQ7FodENhjOa7yTukPKEQXnmdne4ipa88jNjV+elmL5xqnVLCsNsA72TmXI44q+sf36AZ8Jvhdn7t382GQRqqLeLvdUAWpuucwXrTA+/ddfirZ/VUFwVVOmCsZh9qRWWL0hydWFY4ZaIO7bL9cNnKcGINdU7kgkFA6rS0WAonPaLQ9Onv9p6PETZv3fODxc3Y57uQzPhqCDT2YTZbXLsymxBBod6sROUezn/Ow==;
	25:ODFq84vwDwEIFyywWlHy1W8yd+z/EAUKPLbFMTHHDLdO/bpzjtu26Pdmh2lJRCN2Y9WikAn//p2Q52qSKhcwnhGS6sDCMTVbgfk2SHILfsYMP4sawePhCYbacUQhB/NyMHM8jpiTsfwAiMkJxBiDXpizja3Ow9XwsJemnDg1eSVirHYQ7VtycA22XjkvisWOsXcWmc0APbxlYJ+8Ikgt2PFld3tKeqDz6B5dDZ1NluNMVk5QdnZJ3tRtNt/iYb3mojq12fLmTDjAomubOfxjmv2ZwsUzBWmpUni/3YYzgOKheVWUaNQWzndYEXigwiLjaLaxcQ+MFoUSUSl7PJfu4FVtD9wU0CYuTen63SNwDVFL7vP8MKXxrz7m20hja4E33R2d6dCMpE3hcwZqmMjUko+rEp0GFd/DDbrGcTQaY5D7dYSzXgt4vSJjE5ahfqtPO6bU/oNzlUcZtwbfXEtkPoVi0Xsp0jMO0kzs2WyWMuY=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR14MB1659;
	31:W380AHUFLx9IiWCRhgnfoCZX35Olk2PTIANl510viQMiBhCqLf/tUNqGTBtHyBN2eElMgXIswwKMBjKtoGb4tNQ/Z1/I23xUYuMYH84yJxO8gP4c+u0ET6h9agGp6XUdxVs8KpWWu6Gaq+WpJenlAhGSgtp/oL9xiWQP5VQ7ZLQO3QYdjmmnxCWFUO095zJCN0CWsx6Wwd0S2bUm8gjmwC6YdBYIfVmSAUKqYk/psGE=;
	20:IuGBJ0PzWgnDmVMz4q102D5aXtkDJg4xgsUAirMpJwwYZ8jn2MJUFszkqm/z6+2+nE/TMO4bW4hyiNPwCYWttaciIpxi7VMt8kNVHsCVqdne8WFlp61Ign/Ti0VmvijON9XI7g5fCO2JccxG+0VYvEpQr5K17Urz/ARq9RHUG3yodFGL8ubV1+NBCDfaDS823ZZR9x1lmWa6GFe9bQ6Q5tv3yx5mm+wtCEeIaRklpfkplkVCIQGFsCGQcId2QEpMh9tCknaag/5unWqvWiTsI4XfKPODNZhVMjfTWNThP90xjlT7PEqMXeuL6iff8qcIq5hVMpkuwSkUvp9G3LktE5cTEG0wbQo6y4Qrebo4vAIvEeIS4oCgxDvETNq0fX57tJ9svsWuGuzSnA57RzryOoMhYHXFGt1M4+K9N39P5QFz5Uv/HEzwj03MhOWW0lq+/FTHGbKHamAHX5YmkFR+0KO1oR7k6ElsVOu5kLAfdBY2zURdK1fTAxKfkvNffU+M
X-Microsoft-Antispam-PRVS: &lt;DM5PR14MB16590F832EE3D48272D36D35A5F30@DM5PR14MB1659.namprd14.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(22074186197030)(166708455590820)(9452136761055)(183786458502308)(104084551191319)(228905959029699);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700073)(100105000095)(100000701073)(100105300095)(100000702073)(100105100095)(6040450)(601004)(2401047)(5005006)(8121501046)(100000703073)(100105400095)(10201501046)(3002001)(93006095)(93001095)(6041248)(20161123560025)(20161123555025)(20161123562025)(20161123558100)(20161123564025)(201703131423075)(201702281529075)(201702281528075)(201703061421075)(201703061406153)(6072148)(100000704073)(100105200095)(100000705073)(100105500095);
	SRVR:DM5PR14MB1659; BCL:0; PCL:0;
	RULEID:(100000800073)(100110000095)(100000801073)(100110300095)(100000802073)(100110100095)(100000803073)(100110400095)(100000804073)(100110200095)(100000805073)(100110500095);
	SRVR:DM5PR14MB1659; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; DM5PR14MB1659;
	4:wl967iEm+00TUwYdauq5nzvdaOLcdD15TarX4Nv+Oj?=
	=?us-ascii?Q?Utl5jROiiQz3CDF6NU7OtDfte+W1JrCR4pkTiftc/Mu6cgxIixlRWcQO2zvV?=
	=?us-ascii?Q?EyqqaBFwIriANp5lBRCmtMljroVRD1wp7usEob2TUI19c9kVJ7pgBes0jSmf?=
	=?us-ascii?Q?I2ausYQD3vjuhZSavJP2ysydXbEYRBVpspC14fdDi67QU5C6byAChwmZThc8?=
	=?us-ascii?Q?YSk3jeI0JF6V2k5gTQfTjvUi2Op4e3wWu9aEFQLczrUk0Di4CPfxyfaNPuh6?=
	=?us-ascii?Q?5dIL57TA9p4o0CaLKT519t3rX+/L+OlSWiRoOjhthFAo1yZz3pmYeOW+9/jt?=
	=?us-ascii?Q?todo6rR2E/RzYg8RtyHj3x3ABr5LMiE4PevXgBYFOw07it/YaMXxs3rVoFw2?=
	=?us-ascii?Q?LU+QRaRuaszYFKBbbEW7KDVdPDwTA8DOjCmGHMF6cZCtBk/ujr+14WuIkVmC?=
	=?us-ascii?Q?WjUivFehxrpb9hTSuplS86Fhg5R7/R0d+ipZRNKe08cmtdPZavzFhT5Vfzlc?=
	=?us-ascii?Q?HEhv6wGttlxgMzsy5XNRHECx7TMhgt1pf52ZMQO310OKIG1mN8SmfApqJyck?=
	=?us-ascii?Q?aKkBkGhBQ7i5to4NAjlhgOVxYkb31AFcPBkA7fFkc3afR8i/if7du2XqP1n1?=
	=?us-ascii?Q?d34MZWVMdaxlcTVmO/Sv9x1vkoUlU59VvFweelR1nDM/gbnBgIa0tRusPjef?=
	=?us-ascii?Q?t+dhNWhpJhPHdBI+ctbglt4TD/GG9GlnCdcxkNj1QvFDeEbjU/Ep2FSJC8nB?=
	=?us-ascii?Q?v4d6LrMnMKQtxZuS3gqUOADtsLAqGpwxXkgbXp7rzee+p8tTJiSJKvx00mmk?=
	=?us-ascii?Q?xTxgic70zgMliX+SKalIUgph/RINxMz1RPgccMb2kFwpZzfZAdkdHnZU2jWX?=
	=?us-ascii?Q?V46rJ/91HeJ++Pp1MDIA3FY/APOl3DdJ9+8lEGsYpavGHtDG8QtAA4EiOEmM?=
	=?us-ascii?Q?2HrZiuv0upCbuFHWWkqY8NYNkUqrV6c4RKJnVKCsEbi0hd85ebWNeaKVrr9f?=
	=?us-ascii?Q?RnVecDTpnR9YI7VLFN9o95+auf07Twe5T8pAYQrNI+DTS8It4wRA1kCfPEF2?=
	=?us-ascii?Q?T9gFIbBdV241Y1f559OxHtPRxXfT96DQl5uqZoV0ioX9ZQBNvZtmOTJmQo3V?=
	=?us-ascii?Q?73L+7NyjwzDn/oluSRkX6LWm7NwehYX/Sc/cIaLEw38xV7rlc3qugzwiOcEz?=
	=?us-ascii?Q?Fj9yfT/l+kKaXUQcF8MC91Lh75Ybl2xQl13kkdbHe6vSSRyEj5lwVSDlxO+H?=
	=?us-ascii?Q?Q7KGGzYrFY8KgbUluxi3C3naYTXo80F1oUmBd4MfN6BQJ6RSiLFWIqgZtZwR?=
	=?us-ascii?Q?rxKHmthewn12qxUnzyfjKSEijqQ3rTbTmqJYt6E85rDQUkBUarkTkSqhAfUU?=
	=?us-ascii?Q?8cZACtCiCK2/9jHl/HLpmlrlLV5tClMKSIxNG1uWG36kTs?=
X-Forefront-PRVS: 0322B4EDE1
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(6049001)(39840400002)(39400400002)(39410400002)(39450400003)(39850400002)(377454003)(24454002)(568964002)(42186005)(38730400002)(110136004)(31686004)(966005)(6246003)(478600001)(229853002)(66066001)(54356999)(25786009)(53546009)(50986999)(76176999)(93886004)(53936002)(4326008)(6306002)(65826007)(5660300001)(189998001)(2906002)(75432002)(4001350100001)(7416002)(7736002)(31696002)(21480400002)(88552002)(5890100001)(33646002)(6486002)(6916009)(575784001)(2950100002)(8676002)(6666003)(3846002)(42882006)(83506001)(81166006)(86362001)(77096006)(84326002)(6116002)(41533002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:DM5PR14MB1659; H:[172.16.70.46];
	FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; DM5PR14MB1659;
	23:gtDcOmoBU+uZcly5+IZHOKxNAmO50P6C1E8WGN/xZ?=
	=?us-ascii?Q?0CaFeQJ76X0jppeKmMHFjp3mm2aBrCS4AleSgJXqprtKsliHKkaMD/5X0pP4?=
	=?us-ascii?Q?8z/Q5AXmOiMdAHEz0qim04XS84MBV8F6GkOKU5pgJdYO+d+01jEeuLdFi+Ak?=
	=?us-ascii?Q?Qqd4322DsL0rzHqgVX0+0AyyTvf2vfShogSxO6R/PpWiOPhfelPHWp75S1HQ?=
	=?us-ascii?Q?FGu7l71EPyFi1RLB617i5uSeN/RJmd+7YghsssCwmt6ac9oxO9cTaIZK7ixM?=
	=?us-ascii?Q?ZZPwOyv9iFd3tsRU0Fwuj0rQKyLauTMveLF9BaQ7MP0tP3awrz8lift53AmT?=
	=?us-ascii?Q?mn+lxFNOFEgkHi79PDuTZXC/MV95BMYMHAIqp4pCcyqoBPE2XA38Pcsnem00?=
	=?us-ascii?Q?Jwjp9PEv6pIXyken1RVgI2Fc5LCIM3pFV5RhVGSy46K5UG/dKWBM1uwZQoQj?=
	=?us-ascii?Q?ayrMQqOP4F9CKJDAbuBA392sgok/maLuHInadiP+dS2jCNqlr7VMNWaXnLxz?=
	=?us-ascii?Q?6B/NEEfYpln3JpsvqQxEQbj10xSV/7dQ3zO3aICeKyoQZcuvVvyFa4sRX5YV?=
	=?us-ascii?Q?E3rwRcKhUXS13vacpS9RXaXipkzJ7defKX+DuGTFQ8hxj8Aab2JpyplFvi8r?=
	=?us-ascii?Q?ByuirQRV3rMYQ+mFcEu1DnNwREO4inWdCuLZYYrxwrumSGm4p9PgwG0LOwaX?=
	=?us-ascii?Q?9P82s9sfjJXd8fiWckvgbL7LgGlfOCjgT4TbBu6fMzin2emmbqDoVS6Xi22M?=
	=?us-ascii?Q?USwDU+Ud84dBbTj9GXWNhvS6aV8yahXTxerKdtia1CZD3YI4Gb+fHJUqMXcV?=
	=?us-ascii?Q?z0+S6qrB+/xGB/NWLZl68QmYRB7TccyfgFGQrW2kTpUwtAwbe7LUuRSo+O1b?=
	=?us-ascii?Q?+YGJalAMZhplx4jvgHEvDFPcEAKWhf9rasN9FbTLzZ6KkQ56hLTSJ/G0PMZb?=
	=?us-ascii?Q?NKJKLTQhEnUhHg1nabejJ5nnDRPVRnGCIw+hLZprAp4Oucf+vqCtDVvbcZip?=
	=?us-ascii?Q?PxJsV0zHpaIkCzEk5WNDHKxSqlh2Z/dZ+bysSuXLhCccONPs9XZav3EEMOh0?=
	=?us-ascii?Q?77fc4aIzOiCrJZKBgezIX51ybV709LMMscWF6rrFSiMlpHllFZsDPNzHWBb5?=
	=?us-ascii?Q?oflHk2sux+MIBOun3C6tza74uya8fUcTxABvNUAEPP6ypQYWDXB/40/1XCh+?=
	=?us-ascii?Q?vDIoXrXdoq70ojNT2qiS6uH/e1+XrJ0iIsT+utJtyJ6EmhzEWG7SObEjGtfw?=
	=?us-ascii?Q?oqyTwqvNKsdlDD8wsuZ165POZIvvH1xZzca73zciaQFfxuJWNeCFk8kuv48X?=
	=?us-ascii?Q?mh6GZZ1q/6vQhRJDnpx9+assfDxWYrWUl2LbNMhUyMam1lPt6bwfC8jKJexR?=
	=?us-ascii?Q?3Hbw6AAkoW4/3F81oHlQuuGpy/nurfAkNRFFlG1IyhThJeG?=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR14MB1659;
	6:W8pg9prmslCbBboJBtx52LZiP7k2yK8PZAzxlLCf9YYUkTYWZxvtErMxgi+Xic/wR9nrWEhzVMcPUddMaqmh493k8MIpTyWNXTjF7NXNreSLVPfNx0sTKxRHL8M3IR6GKQAOMaqNK3wn8PQm6tSKSw9Uq3kEgBFnl90u4z4grUZlD01LML63xU9OndxUBuDGg9WCpH3mGcgjWQh9BirVTMS3mV9B2wVUp2ld+IN/vRxOcZZK8Mzt6OVgaYxkHxwgjb7ud5QDzvV0UabX+XdiicHxv9UtiifP+Ch8TaTC33ZiaX+xyuLuEjwPBWzlKPEaiDnzDm9eDFd1buA+1ESOsLrK2SEtDDco4zg7PBh7PiLpJZGP2bgW1GrklClgrCdKu9KGf525eADlphy6z8jdFyI1gGbd1UDZYe0bd5JystSOhCjUOteZRuCs6qQgTufCXNftrsFEo0mHR5AWJphm2iLM9w3ViSJmaTYb4MAMsKeVBPVeHzv0EicT+gBeUwAEdUTpN/cEJMFpetyT29pH3Q==
X-Microsoft-Exchange-Diagnostics: 1; DM5PR14MB1659;
	5:CUenVC7OekBRjiVSJvUNgN1Y20q9icKd+6d+7O5Ga3m/2yd0s7mkMlIceCrExPqJhT/QCFW7cfg0TDYlLRN3POszE3h+Xx5IjpoikXosc2dqFNcgtqIHxSukr8NZpIKq2p/Fy7JQrP2Zym5fdXNM7euZGmO2BaTOyWqPKEJr1lhsD0eOS5MKhBzl4zGW6+BbAPbxwxA+QRHTAz47Bj0TyMPmAPlxwk7XGcapIOrb7U2ORGFX9wZzP5hdhL+OiH8B5Tw2PfJCgVYRjld9b1HW9n+Dj5+HXV/knDiW0h80M029DIorJ5WznylCgqvHqucA1g4Mf0fsLq/KpQMbxJwf5gLR0EA6EEHxlVg/lwYhG9F0a7kYPxmDwwL2wsoZXqXlr2vMkXUZH0MP8KjLI3oy16OZGs2r4mqc5kgzSIIg+JAvgmA+U0FVXxtPilG/KVazPJxIUcXpbU+8WwqG4VrtGg+T+Vhe2UcPUnEqHbwN++6yumAB9CS87wMi5omRDGp6;
	24:WTOBI7ilohlXQP0mOzpXn0rY/3XPVYWlTK+WKIsW4wKE0gHVsH+/9Rj/WEWnRJwExow2WdPWgpaCe7ccilzuB2q0I0t5XsVerCt64A3kmYs=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; DM5PR14MB1659;
	7:Xeaw69Tfv8m0FWWakGb56OrroRl4V1s9RFuJF2H7yD71X8k6JtSbObz/GZX3AguGeUJHlF+pyl6ihefUTgOVpkxlaAoNfdqZ0E/cs2oZS6thRpfxePPw3GPz+8nXwPdaBq4ybov/d5+T+2VhQemZbKthl29kZSnvOAIyh4mlbZlEF3dNKq6tX+s4H6An1EMIUHjWoyxjlgTyinMzq+ZQEYSo7ZgH2FjeD4G5a9XvkZt3wiUozzaKdUB/jcG5/xgafFiaHgbMbzc0GkYgHHMrbpYLOTixgxGlJSGQj9ExlH0z2bsi4V6i5mj03oRrgIQkbN9Z8tOPmNa0fymo/BJRkg==
X-OriginatorOrg: cs.rutgers.edu
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 May 2017 14:16:05.7290
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR14MB1659
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123671">Zi Yan</a> - May 29, 2017, 2:13 p.m.</div>
<pre class="content">
On 05/25/2017 07:35 PM, Zi Yan wrote:
<span class="quote">&gt; On 25 May 2017, at 18:43, Andrew Morton wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On Thu, 25 May 2017 13:19:54 -0400 &quot;Zi Yan&quot; &lt;zi.yan@cs.rutgers.edu&gt; wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 25 May 2017, at 13:06, kbuild test robot wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Hi Zi,</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; [auto build test WARNING on mmotm/master]</span>
<span class="quote">&gt;&gt;&gt;&gt; [also build test WARNING on v4.12-rc2 next-20170525]</span>
<span class="quote">&gt;&gt;&gt;&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improve the system]</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; url:    https://github.com/0day-ci/linux/commits/Zi-Yan/mm-page-migration-enhancement-for-thp/20170526-003749</span>
<span class="quote">&gt;&gt;&gt;&gt; base:   git://git.cmpxchg.org/linux-mmotm.git master</span>
<span class="quote">&gt;&gt;&gt;&gt; config: i386-randconfig-x016-201721 (attached as .config)</span>
<span class="quote">&gt;&gt;&gt;&gt; compiler: gcc-6 (Debian 6.2.0-3) 6.2.0 20160901</span>
<span class="quote">&gt;&gt;&gt;&gt; reproduce:</span>
<span class="quote">&gt;&gt;&gt;&gt;         # save the attached .config to linux build tree</span>
<span class="quote">&gt;&gt;&gt;&gt;         make ARCH=i386</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; All warnings (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;    In file included from fs/proc/task_mmu.c:15:0:</span>
<span class="quote">&gt;&gt;&gt;&gt;    include/linux/swapops.h: In function &#39;swp_entry_to_pmd&#39;:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; include/linux/swapops.h:222:16: warning: missing braces around initializer [-Wmissing-braces]</span>
<span class="quote">&gt;&gt;&gt;&gt;      return (pmd_t){{ 0 }};</span>
<span class="quote">&gt;&gt;&gt;&gt;                    ^</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The braces are added to eliminate the warning from &quot;m68k-linux-gcc (GCC) 4.9.0&quot;,</span>
<span class="quote">&gt;&gt;&gt; which has the bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I think we&#39;d prefer to have a warning on m68k than on i386!  Is there</span>
<span class="quote">&gt;&gt; something smarter we can do here?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I will remove the braces in the next version.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The bug is present in gcc 4.8 and 4.9 and m68k has newer gcc to use,</span>
<span class="quote">&gt; so kbuild test robot needs to upgrade its m68k gcc (maybe it has done it).</span>
<span class="quote">&gt;</span>

Removed the braces.

---
 arch/x86/include/asm/pgtable_64.h |  2 +
 include/linux/swapops.h           | 69 +++++++++++++++++++++++++++++++-
 mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---
 mm/migrate.c                      | 30 +++++++++++++-
 mm/page_vma_mapped.c              | 13 ++++--
 mm/pgtable-generic.c              |  3 +-
 mm/rmap.c                         | 11 +++++
 7 files changed, 200 insertions(+), 12 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 45b7a4094de0..eac7f8cf4ae0 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -208,7 +208,9 @@</span> <span class="p_context"> static inline int pgd_large(pgd_t pgd) { return 0; }</span>
 					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \
 					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
<span class="p_add">+#define __pmd_to_swp_entry(pmd)		((swp_entry_t) { pmd_val((pmd)) })</span>
 #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })
<span class="p_add">+#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
 
 extern int kern_addr_valid(unsigned long addr);
 extern void cleanup_highmap(void);
<span class="p_header">diff --git a/include/linux/swapops.h b/include/linux/swapops.h</span>
<span class="p_header">index 5c3a5f3e7eec..c543c6f25e8f 100644</span>
<span class="p_header">--- a/include/linux/swapops.h</span>
<span class="p_header">+++ b/include/linux/swapops.h</span>
<span class="p_chunk">@@ -103,7 +103,8 @@</span> <span class="p_context"> static inline void *swp_to_radix_entry(swp_entry_t entry)</span>
 #ifdef CONFIG_MIGRATION
 static inline swp_entry_t make_migration_entry(struct page *page, int write)
 {
<span class="p_del">-	BUG_ON(!PageLocked(page));</span>
<span class="p_add">+	BUG_ON(!PageLocked(compound_head(page)));</span>
<span class="p_add">+</span>
 	return swp_entry(write ? SWP_MIGRATION_WRITE : SWP_MIGRATION_READ,
 			page_to_pfn(page));
 }
<span class="p_chunk">@@ -126,7 +127,7 @@</span> <span class="p_context"> static inline struct page *migration_entry_to_page(swp_entry_t entry)</span>
 	 * Any use of migration entries may only occur while the
 	 * corresponding page is locked
 	 */
<span class="p_del">-	BUG_ON(!PageLocked(p));</span>
<span class="p_add">+	BUG_ON(!PageLocked(compound_head(p)));</span>
 	return p;
 }
 
<span class="p_chunk">@@ -163,6 +164,70 @@</span> <span class="p_context"> static inline int is_write_migration_entry(swp_entry_t entry)</span>
 
 #endif
 
<span class="p_add">+struct page_vma_mapped_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+extern void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void remove_migration_pmd(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *new);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="p_add">+	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="p_add">+	return __swp_entry_to_pmd(arch_entry);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void remove_migration_pmd(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *new)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+	return swp_entry(0, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+	return (pmd_t){ 0 };</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MEMORY_FAILURE
 
 extern atomic_long_t num_poisoned_pages __read_mostly;
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index b137f60bd983..05d8288c3eea 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1635,10 +1635,23 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		spin_unlock(ptl);
 		tlb_remove_page_size(tlb, pmd_page(orig_pmd), HPAGE_PMD_SIZE);
 	} else {
<span class="p_del">-		struct page *page = pmd_page(orig_pmd);</span>
<span class="p_del">-		page_remove_rmap(page, true);</span>
<span class="p_del">-		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_del">-		VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+		struct page *page = NULL;</span>
<span class="p_add">+		int migration = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmd_present(orig_pmd)) {</span>
<span class="p_add">+			page = pmd_page(orig_pmd);</span>
<span class="p_add">+			page_remove_rmap(page, true);</span>
<span class="p_add">+			VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_add">+			VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+			VM_BUG_ON(!is_pmd_migration_entry(orig_pmd));</span>
<span class="p_add">+			entry = pmd_to_swp_entry(orig_pmd);</span>
<span class="p_add">+			page = pfn_to_page(swp_offset(entry));</span>
<span class="p_add">+			migration = 1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		if (PageAnon(page)) {
 			zap_deposited_table(tlb-&gt;mm, pmd);
 			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);
<span class="p_chunk">@@ -1647,8 +1660,10 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 				zap_deposited_table(tlb-&gt;mm, pmd);
 			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);
 		}
<span class="p_add">+</span>
 		spin_unlock(ptl);
<span class="p_del">-		tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);</span>
<span class="p_add">+		if (!migration)</span>
<span class="p_add">+			tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);</span>
 	}
 	return 1;
 }
<span class="p_chunk">@@ -2688,3 +2703,62 @@</span> <span class="p_context"> static int __init split_huge_pages_debugfs(void)</span>
 }
 late_initcall(split_huge_pages_debugfs);
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = pvmw-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long address = pvmw-&gt;address;</span>
<span class="p_add">+	pmd_t pmdval;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(pvmw-&gt;pmd &amp;&amp; !pvmw-&gt;pte))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, address,</span>
<span class="p_add">+			address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_cache_range(vma, address, address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	pmdval = pmdp_huge_clear_flush(vma, address, pvmw-&gt;pmd);</span>
<span class="p_add">+	if (pmd_dirty(pmdval))</span>
<span class="p_add">+		set_page_dirty(page);</span>
<span class="p_add">+	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="p_add">+	pmdval = swp_entry_to_pmd(entry);</span>
<span class="p_add">+	set_pmd_at(mm, address, pvmw-&gt;pmd, pmdval);</span>
<span class="p_add">+	page_remove_rmap(page, true);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, address,</span>
<span class="p_add">+			address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void remove_migration_pmd(struct page_vma_mapped_walk *pvmw, struct page *new)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = pvmw-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long address = pvmw-&gt;address;</span>
<span class="p_add">+	unsigned long mmun_start = address &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="p_add">+	pmd_t pmde;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(pvmw-&gt;pmd &amp;&amp; !pvmw-&gt;pte))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	entry = pmd_to_swp_entry(*pvmw-&gt;pmd);</span>
<span class="p_add">+	get_page(new);</span>
<span class="p_add">+	pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="p_add">+	if (is_write_migration_entry(entry))</span>
<span class="p_add">+		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="p_add">+	set_pmd_at(mm, mmun_start, pvmw-&gt;pmd, pmde);</span>
<span class="p_add">+	flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		mlock_vma_page(new);</span>
<span class="p_add">+	update_mmu_cache_pmd(vma, address, pvmw-&gt;pmd);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 051cc1555d36..37c3eb14cbaa 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -215,6 +215,13 @@</span> <span class="p_context"> static bool remove_migration_pte(struct page *page, struct vm_area_struct *vma,</span>
 			new = page - pvmw.page-&gt;index +
 				linear_page_index(vma, pvmw.address);
 
<span class="p_add">+		/* PMD-mapped THP migration entry */</span>
<span class="p_add">+		if (!pvmw.pte &amp;&amp; pvmw.page) {</span>
<span class="p_add">+			VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page), page);</span>
<span class="p_add">+			remove_migration_pmd(&amp;pvmw, new);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		get_page(new);
 		pte = pte_mkold(mk_pte(new, READ_ONCE(vma-&gt;vm_page_prot)));
 		if (pte_swp_soft_dirty(*pvmw.pte))
<span class="p_chunk">@@ -329,6 +336,27 @@</span> <span class="p_context"> void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
 	__migration_entry_wait(mm, pte, ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	if (!is_pmd_migration_entry(*pmd))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="p_add">+	if (!get_page_unless_zero(page))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	wait_on_page_locked(page);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLOCK
 /* Returns true if all buffers are successfully locked */
 static bool buffer_migrate_lock_buffers(struct buffer_head *head,
<span class="p_chunk">@@ -1087,7 +1115,7 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 		goto out;
 	}
 
<span class="p_del">-	if (unlikely(PageTransHuge(page))) {</span>
<span class="p_add">+	if (unlikely(PageTransHuge(page) &amp;&amp; !PageTransHuge(newpage))) {</span>
 		lock_page(page);
 		rc = split_huge_page(page);
 		unlock_page(page);
<span class="p_header">diff --git a/mm/page_vma_mapped.c b/mm/page_vma_mapped.c</span>
<span class="p_header">index de9c40d7304a..e209a12d8722 100644</span>
<span class="p_header">--- a/mm/page_vma_mapped.c</span>
<span class="p_header">+++ b/mm/page_vma_mapped.c</span>
<span class="p_chunk">@@ -137,16 +137,23 @@</span> <span class="p_context"> bool page_vma_mapped_walk(struct page_vma_mapped_walk *pvmw)</span>
 	if (!pud_present(*pud))
 		return false;
 	pvmw-&gt;pmd = pmd_offset(pud, pvmw-&gt;address);
<span class="p_del">-	if (pmd_trans_huge(*pvmw-&gt;pmd)) {</span>
<span class="p_add">+	if (pmd_trans_huge(*pvmw-&gt;pmd) || is_pmd_migration_entry(*pvmw-&gt;pmd)) {</span>
 		pvmw-&gt;ptl = pmd_lock(mm, pvmw-&gt;pmd);
<span class="p_del">-		if (!pmd_present(*pvmw-&gt;pmd))</span>
<span class="p_del">-			return not_found(pvmw);</span>
 		if (likely(pmd_trans_huge(*pvmw-&gt;pmd))) {
 			if (pvmw-&gt;flags &amp; PVMW_MIGRATION)
 				return not_found(pvmw);
 			if (pmd_page(*pvmw-&gt;pmd) != page)
 				return not_found(pvmw);
 			return true;
<span class="p_add">+		} else if (!pmd_present(*pvmw-&gt;pmd)) {</span>
<span class="p_add">+			if (unlikely(is_migration_entry(pmd_to_swp_entry(*pvmw-&gt;pmd)))) {</span>
<span class="p_add">+				swp_entry_t entry = pmd_to_swp_entry(*pvmw-&gt;pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+				if (migration_entry_to_page(entry) != page)</span>
<span class="p_add">+					return not_found(pvmw);</span>
<span class="p_add">+				return true;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			return not_found(pvmw);</span>
 		} else {
 			/* THP pmd was split under us: handle on pte level */
 			spin_unlock(pvmw-&gt;ptl);
<span class="p_header">diff --git a/mm/pgtable-generic.c b/mm/pgtable-generic.c</span>
<span class="p_header">index c99d9512a45b..1175f6a24fdb 100644</span>
<span class="p_header">--- a/mm/pgtable-generic.c</span>
<span class="p_header">+++ b/mm/pgtable-generic.c</span>
<span class="p_chunk">@@ -124,7 +124,8 @@</span> <span class="p_context"> pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
 {
 	pmd_t pmd;
 	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);
<span class="p_del">-	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="p_add">+	VM_BUG_ON((pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="p_add">+			   !pmd_devmap(*pmdp)) || !pmd_present(*pmdp));</span>
 	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);
 	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);
 	return pmd;
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index d6056310513f..6e1146a97021 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1304,6 +1304,7 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	bool ret = true;
 	enum ttu_flags flags = (enum ttu_flags)arg;
 
<span class="p_add">+</span>
 	/* munlock has nothing to gain from examining un-locked vmas */
 	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))
 		return true;
<span class="p_chunk">@@ -1314,6 +1315,16 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	}
 
 	while (page_vma_mapped_walk(&amp;pvmw)) {
<span class="p_add">+		/* PMD-mapped THP migration entry */</span>
<span class="p_add">+		if (flags &amp; TTU_MIGRATION) {</span>
<span class="p_add">+			if (!pvmw.pte &amp;&amp; page) {</span>
<span class="p_add">+				VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page),</span>
<span class="p_add">+						page);</span>
<span class="p_add">+				set_pmd_migration_entry(&amp;pvmw, page);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		/*
 		 * If the page is mlock()d, we cannot swap it out.
 		 * If it&#39;s recently referenced (perhaps page_referenced

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



