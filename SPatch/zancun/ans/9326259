
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm: split gfp_mask and mapping flags into separate fields - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm: split gfp_mask and mapping flags into separate fields</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 12, 2016, 11:48 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160912114852.GI14524@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9326259/mbox/"
   >mbox</a>
|
   <a href="/patch/9326259/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9326259/">/patch/9326259/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	003E96077F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 11:49:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5E3828D34
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 11:49:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DA39A28D38; Mon, 12 Sep 2016 11:49:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5022128D34
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Sep 2016 11:49:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758142AbcILLtD (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 12 Sep 2016 07:49:03 -0400
Received: from mail-wm0-f65.google.com ([74.125.82.65]:32876 &quot;EHLO
	mail-wm0-f65.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756086AbcILLs7 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 12 Sep 2016 07:48:59 -0400
Received: by mail-wm0-f65.google.com with SMTP id b187so13219672wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 12 Sep 2016 04:48:59 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=+NZqE56O1EIIP0IT8R+wF7xwvDmritKuqOEKjXORu90=;
	b=NYZq05npXuE8Mv4kqslWYyY6MFAgdoS+g4uxnqMBkXquZ0cM9MgmyFAAB7XxUBsaAc
	gW34axllMsiepjCLE7BtJTBLRaAEKaM0XODK51Coyt1b6HxEcaVs96MlGwHP40BXHr0m
	MpE02ERNA9yrOTGEYpPxjyVBNuWT/5S/6ksTGMeVm91qqWH6zjyPFk48ekgSBNEpKTew
	ZcFxS7ijTkO0MsoG8mZfBIwQ25IA7vPEcY+HbDD8SZl1Ppw68HYpKO6YxzhT3kfRTmi8
	oxjnWgcI1LQ1Ajheyz3GznEXxjx18yvmtrRPb40frUtAfn43bcyIyuxc0b9GS9GmYZFR
	IwxQ==
X-Gm-Message-State: AE9vXwN0o4QD0Ub/FsWf1ktn+JhhmHw7GhMljqAA1p81lrfQOXEawSBGNnqROQkxFjGkbQ==
X-Received: by 10.194.202.166 with SMTP id kj6mr4806447wjc.72.1473680938235; 
	Mon, 12 Sep 2016 04:48:58 -0700 (PDT)
Received: from localhost ([80.188.202.66]) by smtp.gmail.com with ESMTPSA id
	r194sm3347984wmf.22.2016.09.12.04.48.57
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Mon, 12 Sep 2016 04:48:57 -0700 (PDT)
Date: Mon, 12 Sep 2016 13:48:57 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-mm@kvack.org, LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [PATCH 2/2] mm: split gfp_mask and mapping flags into separate
	fields
Message-ID: &lt;20160912114852.GI14524@dhcp22.suse.cz&gt;
References: &lt;20160901091347.GC12147@dhcp22.suse.cz&gt;
	&lt;20160912111608.2588-1-mhocko@kernel.org&gt;
	&lt;20160912111608.2588-3-mhocko@kernel.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20160912111608.2588-3-mhocko@kernel.org&gt;
User-Agent: Mutt/1.6.0 (2016-04-01)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Sept. 12, 2016, 11:48 a.m.</div>
<pre class="content">
Errr, the gfp_mask move behind private_lock didn&#39;t make it into the
commit. Here is the updated patch. Btw. with this patch we can drop
mm-check-that-we-havent-used-more-than-32-bits-in-address_spaceflags.patch
---
From a8200e0de375886bbb41bbae4df7fa65ec619d05 Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Mon, 12 Sep 2016 12:50:09 +0200
Subject: [PATCH] mm: split gfp_mask and mapping flags into separate fields

mapping-&gt;flags currently encodes two different things into a single
flag. It contains sticky gfp_mask for page cache allocations and AS_
codes used to report errors/enospace and other states which are mapping
specific. Condensing the two semantically unrelated things saves few
bytes but it also complicates other things. For one thing the gfp flags
space is reduced and in fact we are already running out of available
bits. It can be assumed that more gfp flags will be necessary later on.

To not introduce the address_space grow (at least on x86_64) we can
stick it right after private_lock because we have a hole there.

struct address_space {
        struct inode *             host;                 /*     0     8 */
        struct radix_tree_root     page_tree;            /*     8    16 */
        spinlock_t                 tree_lock;            /*    24     4 */
        atomic_t                   i_mmap_writable;      /*    28     4 */
        struct rb_root             i_mmap;               /*    32     8 */
        struct rw_semaphore        i_mmap_rwsem;         /*    40    40 */
        /* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
        long unsigned int          nrpages;              /*    80     8 */
        long unsigned int          nrexceptional;        /*    88     8 */
        long unsigned int          writeback_index;      /*    96     8 */
        const struct address_space_operations  * a_ops;  /*   104     8 */
        long unsigned int          flags;                /*   112     8 */
        spinlock_t                 private_lock;         /*   120     4 */

        /* XXX 4 bytes hole, try to pack */

        /* --- cacheline 2 boundary (128 bytes) --- */
        struct list_head           private_list;         /*   128    16 */
        void *                     private_data;         /*   144     8 */

        /* size: 152, cachelines: 3, members: 14 */
        /* sum members: 148, holes: 1, sum holes: 4 */
        /* last cacheline: 24 bytes */
};
<span class="signed-off-by">
Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/fs.h      |  3 ++-
 include/linux/pagemap.h | 20 +++++++++-----------
 2 files changed, 11 insertions(+), 12 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/fs.h b/include/linux/fs.h</span>
<span class="p_header">index cd8a5e1d5580..34b9d88cb788 100644</span>
<span class="p_header">--- a/include/linux/fs.h</span>
<span class="p_header">+++ b/include/linux/fs.h</span>
<span class="p_chunk">@@ -443,8 +443,9 @@</span> <span class="p_context"> struct address_space {</span>
 	unsigned long		nrexceptional;
 	pgoff_t			writeback_index;/* writeback starts here */
 	const struct address_space_operations *a_ops;	/* methods */
<span class="p_del">-	unsigned long		flags;		/* error bits/gfp mask */</span>
<span class="p_add">+	unsigned long		flags;		/* error bits */</span>
 	spinlock_t		private_lock;	/* for use by the address_space */
<span class="p_add">+	gfp_t			gfp_mask;	/* implicit gfp mask for allocations */</span>
 	struct list_head	private_list;	/* ditto */
 	void			*private_data;	/* ditto */
 } __attribute__((aligned(sizeof(long))));
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index 76f151ab4f62..0385a954465c 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -16,17 +16,16 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb_inline.h&gt;
 
 /*
<span class="p_del">- * Bits in mapping-&gt;flags.  The lower __GFP_BITS_SHIFT bits are the page</span>
<span class="p_del">- * allocation mode flags.</span>
<span class="p_add">+ * Bits in mapping-&gt;flags.</span>
  */
 enum mapping_flags {
<span class="p_del">-	AS_EIO		= __GFP_BITS_SHIFT + 0,	/* IO error on async write */</span>
<span class="p_del">-	AS_ENOSPC	= __GFP_BITS_SHIFT + 1,	/* ENOSPC on async write */</span>
<span class="p_del">-	AS_MM_ALL_LOCKS	= __GFP_BITS_SHIFT + 2,	/* under mm_take_all_locks() */</span>
<span class="p_del">-	AS_UNEVICTABLE	= __GFP_BITS_SHIFT + 3,	/* e.g., ramdisk, SHM_LOCK */</span>
<span class="p_del">-	AS_EXITING	= __GFP_BITS_SHIFT + 4, /* final truncate in progress */</span>
<span class="p_add">+	AS_EIO		= 0,	/* IO error on async write */</span>
<span class="p_add">+	AS_ENOSPC	= 1,	/* ENOSPC on async write */</span>
<span class="p_add">+	AS_MM_ALL_LOCKS	= 2,	/* under mm_take_all_locks() */</span>
<span class="p_add">+	AS_UNEVICTABLE	= 3,	/* e.g., ramdisk, SHM_LOCK */</span>
<span class="p_add">+	AS_EXITING	= 4, 	/* final truncate in progress */</span>
 	/* writeback related tags are not used */
<span class="p_del">-	AS_NO_WRITEBACK_TAGS = __GFP_BITS_SHIFT + 5,</span>
<span class="p_add">+	AS_NO_WRITEBACK_TAGS = 5,</span>
 
 	AS_LAST_FLAG,
 };
<span class="p_chunk">@@ -80,7 +79,7 @@</span> <span class="p_context"> static inline int mapping_use_writeback_tags(struct address_space *mapping)</span>
 
 static inline gfp_t mapping_gfp_mask(struct address_space * mapping)
 {
<span class="p_del">-	return (__force gfp_t)mapping-&gt;flags &amp; __GFP_BITS_MASK;</span>
<span class="p_add">+	return mapping-&gt;gfp_mask;</span>
 }
 
 /* Restricts the given gfp_mask to what the mapping allows. */
<span class="p_chunk">@@ -96,8 +95,7 @@</span> <span class="p_context"> static inline gfp_t mapping_gfp_constraint(struct address_space *mapping,</span>
  */
 static inline void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)
 {
<span class="p_del">-	m-&gt;flags = (m-&gt;flags &amp; ~(__force unsigned long)__GFP_BITS_MASK) |</span>
<span class="p_del">-				(__force unsigned long)mask;</span>
<span class="p_add">+	m-&gt;gfp_mask = mask;</span>
 }
 
 void release_pages(struct page **pages, int nr, bool cold);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



