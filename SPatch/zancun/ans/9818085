
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] KVM: nVMX: Advertise VMFUNC to L1 hypervisor - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] KVM: nVMX: Advertise VMFUNC to L1 hypervisor</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=68131">Bandan Das</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 29, 2017, 11:29 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170629232956.12300-3-bsd@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9818085/mbox/"
   >mbox</a>
|
   <a href="/patch/9818085/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9818085/">/patch/9818085/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	81D2D6020A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Jun 2017 23:30:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 68E8D2851E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Jun 2017 23:30:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5DE0228526; Thu, 29 Jun 2017 23:30:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F2B8C2851E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Jun 2017 23:30:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752042AbdF2Xan (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 29 Jun 2017 19:30:43 -0400
Received: from mx1.redhat.com ([209.132.183.28]:35588 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751827AbdF2Xal (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 29 Jun 2017 19:30:41 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id AC04CED187;
	Thu, 29 Jun 2017 23:30:34 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com AC04CED187
Authentication-Results: ext-mx10.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx10.extmail.prod.ext.phx2.redhat.com;
	spf=pass smtp.mailfrom=bsd@redhat.com
DKIM-Filter: OpenDKIM Filter v2.11.0 mx1.redhat.com AC04CED187
Received: from gigantic.usersys.redhat.com (dhcp-17-169.bos.redhat.com
	[10.18.17.169])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 3B8B07D4F5;
	Thu, 29 Jun 2017 23:30:34 +0000 (UTC)
From: Bandan Das &lt;bsd@redhat.com&gt;
To: kvm@vger.kernel.org
Cc: pbonzini@redhat.com, linux-kernel@vger.kernel.org
Subject: [PATCH 2/2] KVM: nVMX: Advertise VMFUNC to L1 hypervisor
Date: Thu, 29 Jun 2017 19:29:56 -0400
Message-Id: &lt;20170629232956.12300-3-bsd@redhat.com&gt;
In-Reply-To: &lt;20170629232956.12300-1-bsd@redhat.com&gt;
References: &lt;20170629232956.12300-1-bsd@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.39]);
	Thu, 29 Jun 2017 23:30:34 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68131">Bandan Das</a> - June 29, 2017, 11:29 p.m.</div>
<pre class="content">
Advertise VMFUNC and EPTP switching function to the L1
hypervisor. Change nested_vmx_exit_handled() to return false
for VMFUNC so L0 can handle it.
<span class="signed-off-by">
Signed-off-by: Bandan Das &lt;bsd@redhat.com&gt;</span>
---
 arch/x86/include/asm/vmx.h |  4 ++++
 arch/x86/kvm/vmx.c         | 18 ++++++++++++++++++
 2 files changed, 22 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/vmx.h b/arch/x86/include/asm/vmx.h</span>
<span class="p_header">index e06783e..5f63a2e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/vmx.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/vmx.h</span>
<span class="p_chunk">@@ -192,6 +192,8 @@</span> <span class="p_context"> enum vmcs_field {</span>
 	APIC_ACCESS_ADDR_HIGH		= 0x00002015,
 	POSTED_INTR_DESC_ADDR           = 0x00002016,
 	POSTED_INTR_DESC_ADDR_HIGH      = 0x00002017,
<span class="p_add">+	VM_FUNCTION_CONTROL             = 0x00002018,</span>
<span class="p_add">+	VM_FUNCTION_CONTROL_HIGH        = 0x00002019,</span>
 	EPT_POINTER                     = 0x0000201a,
 	EPT_POINTER_HIGH                = 0x0000201b,
 	EOI_EXIT_BITMAP0                = 0x0000201c,
<span class="p_chunk">@@ -202,6 +204,8 @@</span> <span class="p_context"> enum vmcs_field {</span>
 	EOI_EXIT_BITMAP2_HIGH           = 0x00002021,
 	EOI_EXIT_BITMAP3                = 0x00002022,
 	EOI_EXIT_BITMAP3_HIGH           = 0x00002023,
<span class="p_add">+	EPTP_LIST_ADDRESS               = 0x00002024,</span>
<span class="p_add">+	EPTP_LIST_ADDRESS_HIGH          = 0x00002025,</span>
 	VMREAD_BITMAP                   = 0x00002026,
 	VMWRITE_BITMAP                  = 0x00002028,
 	XSS_EXIT_BITMAP                 = 0x0000202C,
<span class="p_header">diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c</span>
<span class="p_header">index 75049c0..bf06bef 100644</span>
<span class="p_header">--- a/arch/x86/kvm/vmx.c</span>
<span class="p_header">+++ b/arch/x86/kvm/vmx.c</span>
<span class="p_chunk">@@ -767,11 +767,13 @@</span> <span class="p_context"> static const unsigned short vmcs_field_to_offset_table[] = {</span>
 	FIELD64(VIRTUAL_APIC_PAGE_ADDR, virtual_apic_page_addr),
 	FIELD64(APIC_ACCESS_ADDR, apic_access_addr),
 	FIELD64(POSTED_INTR_DESC_ADDR, posted_intr_desc_addr),
<span class="p_add">+	FIELD64(VM_FUNCTION_CONTROL, vm_function_control),</span>
 	FIELD64(EPT_POINTER, ept_pointer),
 	FIELD64(EOI_EXIT_BITMAP0, eoi_exit_bitmap0),
 	FIELD64(EOI_EXIT_BITMAP1, eoi_exit_bitmap1),
 	FIELD64(EOI_EXIT_BITMAP2, eoi_exit_bitmap2),
 	FIELD64(EOI_EXIT_BITMAP3, eoi_exit_bitmap3),
<span class="p_add">+	FIELD64(EPTP_LIST_ADDRESS, eptp_list_address),</span>
 	FIELD64(XSS_EXIT_BITMAP, xss_exit_bitmap),
 	FIELD64(GUEST_PHYSICAL_ADDRESS, guest_physical_address),
 	FIELD64(VMCS_LINK_POINTER, vmcs_link_pointer),
<span class="p_chunk">@@ -2806,6 +2808,13 @@</span> <span class="p_context"> static void nested_vmx_setup_ctls_msrs(struct vcpu_vmx *vmx)</span>
 	} else
 		vmx-&gt;nested.nested_vmx_ept_caps = 0;
 
<span class="p_add">+	if (cpu_has_vmx_vmfunc()) {</span>
<span class="p_add">+		vmx-&gt;nested.nested_vmx_secondary_ctls_high |=</span>
<span class="p_add">+			SECONDARY_EXEC_ENABLE_VMFUNC;</span>
<span class="p_add">+		vmx-&gt;nested.nested_vmx_vmfunc_controls =</span>
<span class="p_add">+			vmx_vmfunc_controls() &amp; 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * Old versions of KVM use the single-context version without
 	 * checking for support, so declare that it is supported even
<span class="p_chunk">@@ -8215,6 +8224,8 @@</span> <span class="p_context"> static bool nested_vmx_exit_handled(struct kvm_vcpu *vcpu)</span>
 	case EXIT_REASON_PML_FULL:
 		/* We emulate PML support to L1. */
 		return false;
<span class="p_add">+	case EXIT_REASON_VMFUNC:</span>
<span class="p_add">+		return false;</span>
 	default:
 		return true;
 	}
<span class="p_chunk">@@ -10309,6 +10320,13 @@</span> <span class="p_context"> static int prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12,</span>
 		vmx_flush_tlb_ept_only(vcpu);
 	}
 
<span class="p_add">+	if (nested_cpu_has_eptp_switching(vmcs12)) {</span>
<span class="p_add">+		vmcs_write64(VM_FUNCTION_CONTROL,</span>
<span class="p_add">+			     vmcs12-&gt;vm_function_control &amp; 1);</span>
<span class="p_add">+		vmcs_write64(EPTP_LIST_ADDRESS,</span>
<span class="p_add">+			     page_to_phys(vmx-&gt;nested.shadow_eptp_list));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * This sets GUEST_CR0 to vmcs12-&gt;guest_cr0, possibly modifying those
 	 * bits which we consider mandatory enabled.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



