
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2] mm,sched: include memalloc info when printing debug dump of a task. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2] mm,sched: include memalloc info when printing debug dump of a task.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 16, 2017, 11:57 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1510833448-19918-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10061005/mbox/"
   >mbox</a>
|
   <a href="/patch/10061005/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10061005/">/patch/10061005/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7FC8B60230 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 11:58:09 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 72714267EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 11:58:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 655DD2A913; Thu, 16 Nov 2017 11:58:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C7E56267EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 11:58:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759731AbdKPL6E (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 16 Nov 2017 06:58:04 -0500
Received: from www262.sakura.ne.jp ([202.181.97.72]:65253 &quot;EHLO
	www262.sakura.ne.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1759250AbdKPL5z (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 16 Nov 2017 06:57:55 -0500
Received: from fsav110.sakura.ne.jp (fsav110.sakura.ne.jp [27.133.134.237])
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id
	vAGBvq3s057993; Thu, 16 Nov 2017 20:57:52 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72) by fsav110.sakura.ne.jp
	(F-Secure/fsigk_smtp/530/fsav110.sakura.ne.jp); 
	Thu, 16 Nov 2017 20:57:52 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav110.sakura.ne.jp)
Received: from ccsecurity.localdomain (softbank126072090071.bbtec.net
	[126.72.90.71]) (authenticated bits=0)
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id vAGBvgM0057950
	(version=TLSv1/SSLv3 cipher=DHE-RSA-CAMELLIA256-SHA bits=256
	verify=NO); Thu, 16 Nov 2017 20:57:52 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
From: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: akpm@linux-foundation.org, mikhail.v.gavrilov@gmail.com,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Cong Wang &lt;xiyou.wangcong@gmail.com&gt;, Dave Chinner &lt;david@fromorbit.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Jan Kara &lt;jack@suse.cz&gt;,
	Jens Axboe &lt;axboe@kernel.dk&gt;, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Tejun Heo &lt;tj@kernel.org&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	&quot;yuwang.yuwang&quot; &lt;yuwang.yuwang@alibaba-inc.com&gt;
Subject: [RFC PATCH v2] mm,
	sched: include memalloc info when printing debug dump of a task.
Date: Thu, 16 Nov 2017 20:57:28 +0900
Message-Id: &lt;1510833448-19918-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;
X-Mailer: git-send-email 1.8.3.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - Nov. 16, 2017, 11:57 a.m.</div>
<pre class="content">
When analyzing memory allocation stalls, ability to cleanly take snapshots
for knowing how far progress is made is important. But warn_alloc() was
too problematic and was reverted by commit 400e22499dd92613 (&quot;mm: don&#39;t
warn about allocations which stall for too long&quot;). This patch demonstrates
what I referred as &quot;asynchronous approach which can obtain information
during stalls with possibly relevant threads&quot; in that commit.

I have been proposing memory allocation watchdog kernel thread [1], but
so far nobody seems to be interested in using ability to take snapshots
cleanly.

  [1] http://lkml.kernel.org/r/1495331504-12480-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp .

This patch is subset of the watchdog, which introduces a state tracking of
__GFP_DIRECT_RECLAIM memory allocations and prints MemAlloc: line to e.g.
SysRq-t output, like an example shown below which was fixed by commit
db73ee0d46379922 (&quot;mm, vmscan: do not loop on too_many_isolated for ever&quot;).

----------
[  222.194538] a.out           R  running task        0  1976   1019 0x00000080
[  222.197091] MemAlloc: a.out(1976) flags=0x400840 switches=286 seq=142 gfp=0x1c2004a(GFP_NOFS|__GFP_HIGHMEM|__GFP_HARDWALL|__GFP_MOVABLE|__GFP_WRITE) order=0 delay=175646
[  222.202617] Call Trace:
[  222.203987]  __schedule+0x23f/0x5d0
[  222.205624]  _cond_resched+0x2d/0x40
[  222.207271]  shrink_page_list+0x61/0xb70
[  222.208960]  shrink_inactive_list+0x24c/0x510
[  222.210794]  shrink_node_memcg+0x360/0x780
[  222.212556]  ? shrink_slab.part.44+0x239/0x2c0
[  222.214409]  shrink_node+0xdc/0x310
[  222.215994]  ? shrink_node+0xdc/0x310
[  222.217617]  do_try_to_free_pages+0xea/0x360
[  222.219416]  try_to_free_pages+0xbd/0xf0
[  222.221120]  __alloc_pages_slowpath+0x464/0xe50
[  222.222992]  ? io_schedule_timeout+0x19/0x40
[  222.224790]  __alloc_pages_nodemask+0x253/0x2c0
[  222.226677]  alloc_pages_current+0x65/0xd0
[  222.228427]  __page_cache_alloc+0x81/0x90
[  222.230301]  pagecache_get_page+0xa6/0x210
[  222.232388]  grab_cache_page_write_begin+0x1e/0x40
[  222.234333]  iomap_write_begin.constprop.17+0x56/0x110
[  222.236375]  iomap_write_actor+0x8f/0x160
[  222.238115]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.240219]  iomap_apply+0x9a/0x110
[  222.241813]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.243925]  iomap_file_buffered_write+0x69/0x90
[  222.245828]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.247968]  xfs_file_buffered_aio_write+0xb7/0x200 [xfs]
[  222.250108]  xfs_file_write_iter+0x8d/0x130 [xfs]
[  222.252045]  __vfs_write+0xef/0x150
[  222.253635]  vfs_write+0xb0/0x190
[  222.255184]  SyS_write+0x50/0xc0
[  222.256689]  do_syscall_64+0x62/0x170
[  222.258312]  entry_SYSCALL64_slow_path+0x25/0x25
----------

----------
[  406.416809] a.out           R  running task        0  1976   1019 0x00000080
[  406.416811] MemAlloc: a.out(1976) flags=0x400840 switches=440 seq=142 gfp=0x1c2004a(GFP_NOFS|__GFP_HIGHMEM|__GFP_HARDWALL|__GFP_MOVABLE|__GFP_WRITE) order=0 delay=359866
[  406.416811] Call Trace:
[  406.416813]  __schedule+0x23f/0x5d0
[  406.416814]  _cond_resched+0x2d/0x40
[  406.416816]  wait_iff_congested+0x73/0x100
[  406.416817]  ? wait_woken+0x80/0x80
[  406.416819]  shrink_inactive_list+0x36a/0x510
[  406.416820]  shrink_node_memcg+0x360/0x780
[  406.416822]  ? shrink_slab.part.44+0x239/0x2c0
[  406.416824]  shrink_node+0xdc/0x310
[  406.416825]  ? shrink_node+0xdc/0x310
[  406.416827]  do_try_to_free_pages+0xea/0x360
[  406.416828]  try_to_free_pages+0xbd/0xf0
[  406.416829]  __alloc_pages_slowpath+0x464/0xe50
[  406.416831]  ? io_schedule_timeout+0x19/0x40
[  406.416832]  __alloc_pages_nodemask+0x253/0x2c0
[  406.416834]  alloc_pages_current+0x65/0xd0
[  406.416835]  __page_cache_alloc+0x81/0x90
[  406.416837]  pagecache_get_page+0xa6/0x210
[  406.416838]  grab_cache_page_write_begin+0x1e/0x40
[  406.416839]  iomap_write_begin.constprop.17+0x56/0x110
[  406.416841]  iomap_write_actor+0x8f/0x160
[  406.416842]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416844]  iomap_apply+0x9a/0x110
[  406.416845]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416846]  iomap_file_buffered_write+0x69/0x90
[  406.416848]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416857]  xfs_file_buffered_aio_write+0xb7/0x200 [xfs]
[  406.416866]  xfs_file_write_iter+0x8d/0x130 [xfs]
[  406.416867]  __vfs_write+0xef/0x150
[  406.416869]  vfs_write+0xb0/0x190
[  406.416870]  SyS_write+0x50/0xc0
[  406.416871]  do_syscall_64+0x62/0x170
[  406.416872]  entry_SYSCALL64_slow_path+0x25/0x25
----------

This patch traces at the page fault handler and the mempool allocator
in addition to the page allocator, for the page fault handler does
sleeping operations other than calling the page allocator and the mempool
allocator fails to track accumulated delay due to __GFP_NORETRY.

This patch also provides administrators ability to take administrator-
controlled actions based on some threshold by polling like khungtaskd
kernel thread using e.g. SystemTap script, for this patch can record
the timestamp of beginning of memory allocation request without risk of
overflowing array capacity and/or skipping probes. For example, a
SystemTap script shown below will roughly mimic the watchdog.

----------
stap -DSTP_NO_OVERLOAD=1 -g - &lt;&lt; &quot;EOF&quot;
%{
#include &lt;linux/sched/debug.h&gt;

/**
 * is_stalling_task - Check a task&#39;s memalloc variable.
 *
 * @task:   A task to check.
 * @expire: Timeout in jiffies.
 *
 * Returns true if a task is stalling, false otherwise.
 */
static inline bool is_stalling_task(const struct task_struct *task,
                                    const unsigned long expire)
{
        const struct memalloc_info *m = &amp;task-&gt;memalloc;

        return m-&gt;in_flight &amp;&amp; time_after_eq(expire, m-&gt;start);
}

/**
 * check_memalloc_stalling_tasks - Check for memory allocation stalls.
 *
 * @timeout: Timeout in jiffies.
 *
 * Returns number of stalling tasks.
 */
static int check_memalloc_stalling_tasks(unsigned long timeout)
{
        struct task_struct *g, *p;
        const unsigned long expire = jiffies - timeout;
        unsigned int sigkill_pending = 0;
        unsigned int exiting_tasks = 0;
        unsigned int memdie_pending = 0;
        unsigned int stalling_tasks = 0;

        /* Count stalling tasks, dying and victim tasks. */
        rcu_read_lock();
        for_each_process_thread(g, p) {
                if (test_tsk_thread_flag(p, TIF_MEMDIE))
                        memdie_pending++;
                if (fatal_signal_pending(p))
                        sigkill_pending++;
                if ((p-&gt;flags &amp; PF_EXITING) &amp;&amp; p-&gt;state != TASK_DEAD)
                        exiting_tasks++;
                if (is_stalling_task(p, expire))
                        stalling_tasks++;
        }
        rcu_read_unlock();
        if (!stalling_tasks)
                return 0;
        /* Report stalling tasks, dying and victim tasks. */
        pr_warn(&quot;MemAlloc-Info: stalling=%u dying=%u exiting=%u victim=%u\n&quot;,
                stalling_tasks, sigkill_pending, exiting_tasks, memdie_pending);
        sigkill_pending = 0;
        exiting_tasks = 0;
        memdie_pending = 0;
        stalling_tasks = 0;
        rcu_read_lock();
        for_each_process_thread(g, p) {
                bool report = false;

                if (test_tsk_thread_flag(p, TIF_MEMDIE)) {
                        report = true;
                        memdie_pending++;
                }
                if (fatal_signal_pending(p)) {
                        report = true;
                        sigkill_pending++;
                }
                if ((p-&gt;flags &amp; PF_EXITING) &amp;&amp; p-&gt;state != TASK_DEAD) {
                        report = true;
                        exiting_tasks++;
                }
                if (is_stalling_task(p, expire)) {
                        report = true;
                        stalling_tasks++;
                }
                if (p-&gt;flags &amp; PF_KSWAPD)
                        report = true;
                if (unlikely(report))
                        sched_show_task(p);
        }
        rcu_read_unlock();
        /* Show lock information. (SysRq-d) */
        debug_show_all_locks();
        pr_warn(&quot;MemAlloc-Info: stalling=%u dying=%u exiting=%u victim=%u\n&quot;,
                stalling_tasks, sigkill_pending, exiting_tasks, memdie_pending);
        return stalling_tasks;
}
%}

probe timer.s(120)
{
        %{ check_memalloc_stalling_tasks(60 * HZ) %}
}
EOF
----------

For another example, we can modify the script shown above to enable
various tracepoints for obtaining more detailed information when
check_memalloc_stalling_tasks() returned non-zero and then disable them
when check_memalloc_stalling_tasks() returned zero. This will help
unattended recording for analyzing memory allocation stalls which
previously required manual operations.
<span class="signed-off-by">
Signed-off-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;</span>
Cc: Tejun Heo &lt;tj@kernel.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: Jan Kara &lt;jack@suse.cz&gt;
Cc: Oleg Nesterov &lt;oleg@redhat.com&gt;
Cc: Jens Axboe &lt;axboe@kernel.dk&gt;
Cc: Dave Chinner &lt;david@fromorbit.com&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;
Cc: Cong Wang &lt;xiyou.wangcong@gmail.com&gt;
Cc: yuwang.yuwang &lt;yuwang.yuwang@alibaba-inc.com&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
---
 include/linux/gfp.h   |  8 ++++++++
 include/linux/sched.h | 15 +++++++++++++++
 kernel/fork.c         |  4 ++++
 kernel/sched/core.c   | 15 +++++++++++++++
 lib/Kconfig.debug     |  8 ++++++++
 mm/memory.c           |  5 +++++
 mm/mempool.c          |  9 ++++++++-
 mm/page_alloc.c       | 29 +++++++++++++++++++++++++++++
 8 files changed, 92 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="p_header">index 1a4582b..47b7d13 100644</span>
<span class="p_header">--- a/include/linux/gfp.h</span>
<span class="p_header">+++ b/include/linux/gfp.h</span>
<span class="p_chunk">@@ -483,6 +483,14 @@</span> <span class="p_context"> static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,</span>
 	return __alloc_pages_node(nid, gfp_mask, order);
 }
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+extern void start_memalloc_timer(const gfp_t gfp_mask, const int order);</span>
<span class="p_add">+extern void stop_memalloc_timer(const gfp_t gfp_mask);</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define start_memalloc_timer(gfp_mask, order) do { } while (0)</span>
<span class="p_add">+#define stop_memalloc_timer(gfp_mask) do { } while (0)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_NUMA
 extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);
 
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index a5dc7c9..00a5513 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -517,6 +517,18 @@</span> <span class="p_context"> struct wake_q_node {</span>
 	struct wake_q_node *next;
 };
 
<span class="p_add">+struct memalloc_info {</span>
<span class="p_add">+	/* Is current thread doing (nested) memory allocation? */</span>
<span class="p_add">+	u8 in_flight;</span>
<span class="p_add">+	/* For progress monitoring. */</span>
<span class="p_add">+	unsigned int sequence;</span>
<span class="p_add">+	/* Started time in jiffies as of in_flight == 1. */</span>
<span class="p_add">+	unsigned long start;</span>
<span class="p_add">+	/* Requested order and gfp flags as of in_flight == 1. */</span>
<span class="p_add">+	unsigned int order;</span>
<span class="p_add">+	gfp_t gfp;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/*
<span class="p_chunk">@@ -1098,6 +1110,9 @@</span> <span class="p_context"> struct task_struct {</span>
 	/* Used by LSM modules for access restriction: */
 	void				*security;
 #endif
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	struct memalloc_info		memalloc;</span>
<span class="p_add">+#endif</span>
 
 	/*
 	 * New fields for task_struct should be added above here, so that
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index a01574a..97ea0da 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -1763,6 +1763,10 @@</span> <span class="p_context"> static __latent_entropy struct task_struct *copy_process(</span>
 	p-&gt;sequential_io_avg	= 0;
 #endif
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	p-&gt;memalloc.sequence = 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	/* Perform scheduler related setup. Assign this task to a CPU. */
 	retval = sched_fork(clone_flags, p);
 	if (retval)
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">index 75554f3..2bbfb2b 100644</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -5170,6 +5170,20 @@</span> <span class="p_context"> static int sched_rr_get_interval(pid_t pid, struct timespec64 *t)</span>
 }
 #endif
 
<span class="p_add">+static inline void print_memalloc_info(struct task_struct *p)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	const struct memalloc_info *m = &amp;p-&gt;memalloc;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(m-&gt;in_flight))</span>
<span class="p_add">+		pr_info(&quot;MemAlloc: %s(%u) flags=0x%x switches=%lu seq=%u gfp=0x%x(%pGg) order=%u delay=%lu%s\n&quot;,</span>
<span class="p_add">+			p-&gt;comm, p-&gt;pid, p-&gt;flags, p-&gt;nvcsw + p-&gt;nivcsw,</span>
<span class="p_add">+			m-&gt;sequence, m-&gt;gfp, &amp;m-&gt;gfp, m-&gt;order,</span>
<span class="p_add">+			jiffies - m-&gt;start, (p-&gt;state &amp; TASK_UNINTERRUPTIBLE) ?</span>
<span class="p_add">+			&quot; uninterruptible&quot; : &quot;&quot;);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void sched_show_task(struct task_struct *p)
 {
 	unsigned long free = 0;
<span class="p_chunk">@@ -5194,6 +5208,7 @@</span> <span class="p_context"> void sched_show_task(struct task_struct *p)</span>
 		task_pid_nr(p), ppid,
 		(unsigned long)task_thread_info(p)-&gt;flags);
 
<span class="p_add">+	print_memalloc_info(p);</span>
 	print_worker_info(KERN_INFO, p);
 	show_stack(p, NULL);
 	put_task_stack(p);
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index 947d3e2..6c9a247 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -942,6 +942,14 @@</span> <span class="p_context"> config WQ_WATCHDOG</span>
 	  state.  This can be configured through kernel parameter
 	  &quot;workqueue.watchdog_thresh&quot; and its sysfs counterpart.
 
<span class="p_add">+config DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	bool &quot;Print memory allocation status line to thread dumps&quot;</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  Say Y here to emit memory allocation status line when e.g. SysRq-t</span>
<span class="p_add">+	  is requested, in order to help anayzing problems under memory</span>
<span class="p_add">+	  pressure.</span>
<span class="p_add">+</span>
 endmenu # &quot;Debug lockups and hangs&quot;
 
 config PANIC_ON_OOPS
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 85e7a87..70a8040 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -4070,6 +4070,7 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 		unsigned int flags)
 {
 	int ret;
<span class="p_add">+	gfp_t mask;</span>
 
 	__set_current_state(TASK_RUNNING);
 
<span class="p_chunk">@@ -4091,6 +4092,9 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 	if (flags &amp; FAULT_FLAG_USER)
 		mem_cgroup_oom_enable();
 
<span class="p_add">+	mask = __get_fault_gfp_mask(vma);</span>
<span class="p_add">+	start_memalloc_timer(mask, 0);</span>
<span class="p_add">+</span>
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		ret = hugetlb_fault(vma-&gt;vm_mm, vma, address, flags);
 	else
<span class="p_chunk">@@ -4108,6 +4112,7 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 			mem_cgroup_oom_synchronize(false);
 	}
 
<span class="p_add">+	stop_memalloc_timer(mask);</span>
 	return ret;
 }
 EXPORT_SYMBOL_GPL(handle_mm_fault);
<span class="p_header">diff --git a/mm/mempool.c b/mm/mempool.c</span>
<span class="p_header">index 7d8c5a0..e7b7532 100644</span>
<span class="p_header">--- a/mm/mempool.c</span>
<span class="p_header">+++ b/mm/mempool.c</span>
<span class="p_chunk">@@ -325,11 +325,14 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 
 	gfp_temp = gfp_mask &amp; ~(__GFP_DIRECT_RECLAIM|__GFP_IO);
 
<span class="p_add">+	start_memalloc_timer(gfp_temp, -1);</span>
 repeat_alloc:
 
 	element = pool-&gt;alloc(gfp_temp, pool-&gt;pool_data);
<span class="p_del">-	if (likely(element != NULL))</span>
<span class="p_add">+	if (likely(element != NULL)) {</span>
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return element;
<span class="p_add">+	}</span>
 
 	spin_lock_irqsave(&amp;pool-&gt;lock, flags);
 	if (likely(pool-&gt;curr_nr)) {
<span class="p_chunk">@@ -342,6 +345,7 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 		 * for debugging.
 		 */
 		kmemleak_update_trace(element);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return element;
 	}
 
<span class="p_chunk">@@ -351,13 +355,16 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 	 */
 	if (gfp_temp != gfp_mask) {
 		spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		gfp_temp = gfp_mask;
<span class="p_add">+		start_memalloc_timer(gfp_temp, -1);</span>
 		goto repeat_alloc;
 	}
 
 	/* We must not sleep if !__GFP_DIRECT_RECLAIM */
 	if (!(gfp_mask &amp; __GFP_DIRECT_RECLAIM)) {
 		spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return NULL;
 	}
 
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index f34124a..61a6ab0 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -4198,6 +4198,33 @@</span> <span class="p_context"> static inline void finalise_ac(gfp_t gfp_mask,</span>
 					ac-&gt;high_zoneidx, ac-&gt;nodemask);
 }
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+</span>
<span class="p_add">+void start_memalloc_timer(const gfp_t gfp_mask, const int order)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct memalloc_info *m = &amp;current-&gt;memalloc;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* We don&#39;t check for stalls for !__GFP_DIRECT_RECLAIM allocations. */</span>
<span class="p_add">+	if (!(gfp_mask &amp; __GFP_DIRECT_RECLAIM))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	/* Record the beginning of memory allocation request. */</span>
<span class="p_add">+	if (!m-&gt;in_flight) {</span>
<span class="p_add">+		m-&gt;sequence++;</span>
<span class="p_add">+		m-&gt;start = jiffies;</span>
<span class="p_add">+		m-&gt;order = order;</span>
<span class="p_add">+		m-&gt;gfp = gfp_mask;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	m-&gt;in_flight++;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void stop_memalloc_timer(const gfp_t gfp_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (gfp_mask &amp; __GFP_DIRECT_RECLAIM)</span>
<span class="p_add">+		current-&gt;memalloc.in_flight--;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * This is the &#39;heart&#39; of the zoned buddy allocator.
  */
<span class="p_chunk">@@ -4218,6 +4245,7 @@</span> <span class="p_context"> struct page *</span>
 	finalise_ac(gfp_mask, order, &amp;ac);
 
 	/* First allocation attempt */
<span class="p_add">+	start_memalloc_timer(alloc_mask, order);</span>
 	page = get_page_from_freelist(alloc_mask, order, alloc_flags, &amp;ac);
 	if (likely(page))
 		goto out;
<span class="p_chunk">@@ -4247,6 +4275,7 @@</span> <span class="p_context"> struct page *</span>
 		page = NULL;
 	}
 
<span class="p_add">+	stop_memalloc_timer(alloc_mask);</span>
 	trace_mm_page_alloc(page, order, alloc_mask, ac.migratetype);
 
 	return page;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



