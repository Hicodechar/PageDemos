
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,1/2] proc: mm: export PTE sizes directly in smaps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,1/2] proc: mm: export PTE sizes directly in smaps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137981">Fan Du</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 24, 2017, 10:49 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1508842174-17005-1-git-send-email-fan.du@intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10024129/mbox/"
   >mbox</a>
|
   <a href="/patch/10024129/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10024129/">/patch/10024129/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E57C860245 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Oct 2017 10:50:57 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E0684289C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Oct 2017 10:50:57 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D41AB289F9; Tue, 24 Oct 2017 10:50:57 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 07CB6289C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Oct 2017 10:50:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932421AbdJXKuz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 Oct 2017 06:50:55 -0400
Received: from mga06.intel.com ([134.134.136.31]:24790 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932230AbdJXKuw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 Oct 2017 06:50:52 -0400
Received: from orsmga004.jf.intel.com ([10.7.209.38])
	by orsmga104.jf.intel.com with ESMTP; 24 Oct 2017 03:50:51 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.43,427,1503385200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;141619375&quot;
Received: from zz23f_aep_wp03.sh.intel.com ([10.239.85.176])
	by orsmga004.jf.intel.com with ESMTP; 24 Oct 2017 03:50:49 -0700
From: Fan Du &lt;fan.du@intel.com&gt;
To: akpm@linux-foundation.org, hch@lst.de, dan.j.williams@intel.com,
	dave.hansen@intel.com
Cc: linux-kernel@vger.kernel.org, Fan Du &lt;fan.du@intel.com&gt;
Subject: [PATCHv2 1/2] proc: mm: export PTE sizes directly in smaps
Date: Tue, 24 Oct 2017 18:49:33 +0800
Message-Id: &lt;1508842174-17005-1-git-send-email-fan.du@intel.com&gt;
X-Mailer: git-send-email 1.8.3.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137981">Fan Du</a> - Oct. 24, 2017, 10:49 a.m.</div>
<pre class="content">
/proc/$pid/smaps has a number of fields that are intended to imply the
kinds of PTEs used to map memory.  &quot;AnonHugePages&quot; obviously tells you
how many PMDs are being used.  &quot;MMUPageSize&quot; along with the &quot;Hugetlb&quot;
fields tells you how many PTEs you have for a huge page.

The current mechanisms work fine when we have one or two page sizes.
But, they start to get a bit muddled when we mix page sizes inside
one VMA.  For instance, the DAX folks were proposing adding a set of
fields like:

	DevicePages:
	DeviceHugePages:
	DeviceGiganticPages:
	DeviceGinormousPages:

to unmuddle things when page sizes get mixed.  That&#39;s fine, but
it does require userspace know the mapping from our various
arbitrary names to hardware page sizes on each architecture and
kernel configuration.  That seems rather suboptimal.

What folks really want is to know how much memory is mapped with
each page size.  How about we just do *that* instead?

Patch attached.  Seems harmless enough.  Seems to compile on a
bunch of random architectures.  Makes smaps look like this:

Private_Hugetlb:       0 kB
Swap:                  0 kB
SwapPss:               0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Locked:                0 kB
Ptes@4kB:	      32 kB
Ptes@2MB:	    2048 kB

The format I used here should be unlikely to break smaps parsers
unless they&#39;re looking for &quot;kB&quot; and now match the &#39;Ptes@4kB&#39; instead
of the one at the end of the line.

Note: hugetlbfs PTEs are unusual.  We can have more than one &quot;pte_t&quot;
for each hugetlbfs &quot;page&quot;.  arm64 has this configuration, and probably
others.  The code should now handle when an hstate&#39;s size is not equal
to one of the page table entry sizes.  For instance, it assumes that
hstates between PMD_SIZE and PUD_SIZE are made up of multiple PMDs
and prints them as such.

I&#39;ve tested this on x86 with normal 4k ptes, anonymous huge pages,
1G hugetlbfs and 2M hugetlbfs pages.

1. I&#39;d like to thank Dan Williams for showing me a mirror as I
   complained about the bozo that introduced &#39;AnonHugePages&#39;.

[Fan]
Rebase the original patch from Dave Hansen by fixing a couple of compile
issues.
<span class="signed-off-by">
Signed-off-by: Fan Du &lt;fan.du@intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
---
 Documentation/filesystems/proc.txt |   6 +++
 fs/proc/task_mmu.c                 | 106 ++++++++++++++++++++++++++++++++++++-
 mm/hugetlb.c                       |  11 ++++
 3 files changed, 121 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/filesystems/proc.txt b/Documentation/filesystems/proc.txt</span>
<span class="p_header">index adba21b..a11ab80 100644</span>
<span class="p_header">--- a/Documentation/filesystems/proc.txt</span>
<span class="p_header">+++ b/Documentation/filesystems/proc.txt</span>
<span class="p_chunk">@@ -423,6 +423,9 @@</span> <span class="p_context"> SwapPss:               0 kB</span>
 KernelPageSize:        4 kB
 MMUPageSize:           4 kB
 Locked:                0 kB
<span class="p_add">+Ptes@4kB:	       4 kB</span>
<span class="p_add">+Ptes@2MB:	    8192 kB</span>
<span class="p_add">+</span>
 VmFlags: rd ex mr mw me dw
 
 the first of these lines shows the same information as is displayed for the
<span class="p_chunk">@@ -460,6 +463,9 @@</span> <span class="p_context"> replaced by copy-on-write) part of the underlying shmem object out on swap.</span>
 &quot;SwapPss&quot; shows proportional swap share of this mapping. Unlike &quot;Swap&quot;, this
 does not take into account swapped out page of underlying shmem objects.
 &quot;Locked&quot; indicates whether the mapping is locked in memory or not.
<span class="p_add">+&quot;Ptes@...&quot; lines show how many page table entries are currently in place and</span>
<span class="p_add">+pointing to memory.  There is an entry for each size present in the hardware</span>
<span class="p_add">+page tables for this mapping.</span>
 
 &quot;VmFlags&quot; field deserves a separate description. This member represents the kernel
 flags associated with the particular virtual memory area in two letter encoded
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 5589b4b..30dbf37 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -451,6 +451,9 @@</span> <span class="p_context"> struct mem_size_stats {</span>
 	unsigned long shared_hugetlb;
 	unsigned long private_hugetlb;
 	unsigned long first_vma_start;
<span class="p_add">+	unsigned long rss_pte;</span>
<span class="p_add">+	unsigned long rss_pmd;</span>
<span class="p_add">+	unsigned long rss_pud;</span>
 	u64 pss;
 	u64 pss_locked;
 	u64 swap_pss;
<span class="p_chunk">@@ -529,6 +532,7 @@</span> <span class="p_context"> static void smaps_pte_entry(pte_t *pte, unsigned long addr,</span>
 
 	if (pte_present(*pte)) {
 		page = vm_normal_page(vma, addr, *pte);
<span class="p_add">+		mss-&gt;rss_pte += PAGE_SIZE;</span>
 	} else if (is_swap_pte(*pte)) {
 		swp_entry_t swpent = pte_to_swp_entry(*pte);
 
<span class="p_chunk">@@ -590,6 +594,7 @@</span> <span class="p_context"> static void smaps_pmd_entry(pmd_t *pmd, unsigned long addr,</span>
 		/* pass */;
 	else
 		VM_BUG_ON_PAGE(1, page);
<span class="p_add">+	mss-&gt;rss_pmd += PMD_SIZE;</span>
 	smaps_account(mss, page, true, pmd_young(*pmd), pmd_dirty(*pmd));
 }
 #else
<span class="p_chunk">@@ -699,6 +704,30 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
 }
 
 #ifdef CONFIG_HUGETLB_PAGE
<span class="p_add">+/*</span>
<span class="p_add">+ * Most architectures have a 1:1 mapping of PTEs to hugetlb page</span>
<span class="p_add">+ * sizes, but there are some outliers like arm64 that use</span>
<span class="p_add">+ * multiple hardware PTEs to make a hugetlb &quot;page&quot;.  Do not</span>
<span class="p_add">+ * assume that all &#39;hpage_size&#39;s are not exactly at a page table</span>
<span class="p_add">+ * size boundary.  Instead, accept arbitrary &#39;hpage_size&#39;s and</span>
<span class="p_add">+ * assume they are made up of the next-smallest size.  We do not</span>
<span class="p_add">+ * handle PGD-sized hpages and hugetlb_add_hstate() will WARN()</span>
<span class="p_add">+ * if it sees one.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Note also that the page walker code only calls us once per</span>
<span class="p_add">+ * huge &#39;struct page&#39;, *not* once per PTE in the page tables.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void smaps_hugetlb_present_hpage(struct mem_size_stats *mss,</span>
<span class="p_add">+					unsigned long hpage_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (hpage_size &gt;= PUD_SIZE)</span>
<span class="p_add">+		mss-&gt;rss_pud += hpage_size;</span>
<span class="p_add">+	else if (hpage_size &gt;= PMD_SIZE)</span>
<span class="p_add">+		mss-&gt;rss_pmd += hpage_size;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		mss-&gt;rss_pte += hpage_size;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,
 				 unsigned long addr, unsigned long end,
 				 struct mm_walk *walk)
<span class="p_chunk">@@ -719,11 +748,14 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
 	}
 	if (page) {
 		int mapcount = page_mapcount(page);
<span class="p_add">+		unsigned long hpage_size = huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+</span>
<span class="p_add">+		smaps_hugetlb_present_hpage(mss, hpage_size);</span>
 
 		if (mapcount &gt;= 2)
<span class="p_del">-			mss-&gt;shared_hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+			mss-&gt;shared_hugetlb += hpage_size;</span>
 		else
<span class="p_del">-			mss-&gt;private_hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+			mss-&gt;private_hugetlb += hpage_size;</span>
 	}
 	return 0;
 }
<span class="p_chunk">@@ -733,6 +765,75 @@</span> <span class="p_context"> void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
 {
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * What units should we use for a given number?  We want</span>
<span class="p_add">+ * 2048 to be 2k, so we return &#39;k&#39;.  1048576 should be</span>
<span class="p_add">+ * 1M, so we return &#39;M&#39;.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static char size_unit(unsigned long long nr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This &#39; &#39; might look a bit goofy in the output.  But, why</span>
<span class="p_add">+	 * bother doing anything.  Do we even have a &lt;1k page size?</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;10))</span>
<span class="p_add">+		return &#39; &#39;;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;20))</span>
<span class="p_add">+		return &#39;k&#39;;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;30))</span>
<span class="p_add">+		return &#39;M&#39;;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;40))</span>
<span class="p_add">+		return &#39;G&#39;;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;50))</span>
<span class="p_add">+		return &#39;T&#39;;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;60))</span>
<span class="p_add">+		return &#39;P&#39;;</span>
<span class="p_add">+	return &#39;E&#39;;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * How should we shift down a a given number to scale it</span>
<span class="p_add">+ * with the units we are printing it as? 2048 to be 2k,</span>
<span class="p_add">+ * so we want it shifted down by 10.  1048576 should be</span>
<span class="p_add">+ * 1M, so we want it shifted down by 20.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int size_shift(unsigned long long nr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;10))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;20))</span>
<span class="p_add">+		return 10;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;30))</span>
<span class="p_add">+		return 20;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;40))</span>
<span class="p_add">+		return 30;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;50))</span>
<span class="p_add">+		return 40;</span>
<span class="p_add">+	if (nr &lt; (1ULL&lt;&lt;60))</span>
<span class="p_add">+		return 50;</span>
<span class="p_add">+	return 60;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void show_one_smap_pte(struct seq_file *m, unsigned long bytes_rss,</span>
<span class="p_add">+		unsigned long pte_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	seq_printf(m, &quot;Ptes@%ld%cB:	%8lu kB\n&quot;,</span>
<span class="p_add">+			pte_size &gt;&gt; size_shift(pte_size),</span>
<span class="p_add">+			size_unit(pte_size),</span>
<span class="p_add">+			bytes_rss &gt;&gt; 10);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void show_smap_ptes(struct seq_file *m, struct mem_size_stats *mss)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Only print the entries for page sizes present in the VMA */</span>
<span class="p_add">+	if (mss-&gt;rss_pte)</span>
<span class="p_add">+		show_one_smap_pte(m, mss-&gt;rss_pte, PAGE_SIZE);</span>
<span class="p_add">+	if (mss-&gt;rss_pmd)</span>
<span class="p_add">+		show_one_smap_pte(m, mss-&gt;rss_pmd, PMD_SIZE);</span>
<span class="p_add">+	if (mss-&gt;rss_pud)</span>
<span class="p_add">+		show_one_smap_pte(m, mss-&gt;rss_pud, PUD_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct proc_maps_private *priv = m-&gt;private;
<span class="p_chunk">@@ -852,6 +953,7 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));
 
 	if (!rollup_mode) {
<span class="p_add">+		show_smap_ptes(m, mss);</span>
 		arch_show_smap(m, vma);
 		show_smap_vma_flags(m, vma);
 	}
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 424b0ef..b98b2ce 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2836,6 +2836,17 @@</span> <span class="p_context"> void __init hugetlb_add_hstate(unsigned int order)</span>
 					huge_page_size(h)/1024);
 
 	parsed_hstate = h;
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * PGD_SIZE isn&#39;t widely made available by architecures,</span>
<span class="p_add">+	 * so use PUD_SIZE*PTRS_PER_PUD as a substitute.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Check for sizes that might be mapped by a PGD.  There</span>
<span class="p_add">+	 * are none of these known today, but be on the lookout.</span>
<span class="p_add">+	 * If this trips, we will need to update the mss-&gt;rss_*</span>
<span class="p_add">+	 * code in fs/proc/task_mmu.c.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON_ONCE((PAGE_SIZE &lt;&lt; order) &gt;= PUD_SIZE * PTRS_PER_PUD);</span>
 }
 
 static int __init hugetlb_nrpages_setup(char *s)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



