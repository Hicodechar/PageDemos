
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,7/8] mm/hugetlb: Introduce set_huge_swap_pte_at() helper - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,7/8] mm/hugetlb: Introduce set_huge_swap_pte_at() helper</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 19, 2017, 5:01 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170619170145.25577-8-punit.agrawal@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9796901/mbox/"
   >mbox</a>
|
   <a href="/patch/9796901/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9796901/">/patch/9796901/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6E2E46020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 17:03:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 54B6327F8F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 17:03:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4962727F92; Mon, 19 Jun 2017 17:03:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D72F51FF0B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 17:03:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752654AbdFSRDZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 19 Jun 2017 13:03:25 -0400
Received: from foss.arm.com ([217.140.101.70]:54620 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751096AbdFSRDX (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 19 Jun 2017 13:03:23 -0400
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id BE64B165C;
	Mon, 19 Jun 2017 10:03:02 -0700 (PDT)
Received: from localhost (e105922-lin.cambridge.arm.com [10.1.207.56])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id
	8BE3A3F41F; Mon, 19 Jun 2017 10:03:02 -0700 (PDT)
From: Punit Agrawal &lt;punit.agrawal@arm.com&gt;
To: akpm@linux-foundation.org
Cc: Punit Agrawal &lt;punit.agrawal@arm.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	catalin.marinas@arm.com, will.deacon@arm.com,
	n-horiguchi@ah.jp.nec.com, kirill.shutemov@linux.intel.com,
	mike.kravetz@oracle.com, steve.capper@arm.com,
	mark.rutland@arm.com, linux-arch@vger.kernel.org,
	aneesh.kumar@linux.vnet.ibm.com
Subject: [PATCH v5 7/8] mm/hugetlb: Introduce set_huge_swap_pte_at() helper
Date: Mon, 19 Jun 2017 18:01:44 +0100
Message-Id: &lt;20170619170145.25577-8-punit.agrawal@arm.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170619170145.25577-1-punit.agrawal@arm.com&gt;
References: &lt;20170619170145.25577-1-punit.agrawal@arm.com&gt;
X-ARM-No-Footer: FoSSMail
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a> - June 19, 2017, 5:01 p.m.</div>
<pre class="content">
set_huge_pte_at(), an architecture callback to populate hugepage ptes,
does not provide the range of virtual memory that is targeted. This
leads to ambiguity when dealing with swap entries on architectures that
support hugepages consisting of contiguous ptes.

Fix the problem by introducing an overridable helper for architectures
needing this support. The helper is called when populating the page
tables with swap entries. The size of the targeted region is provided to
the helper to help determine the number of entries to be updated.

Provide a default implementation that maintains the current behaviour.
<span class="signed-off-by">
Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
<span class="acked-by">Acked-by: Steve Capper &lt;steve.capper@arm.com&gt;</span>
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
---
 include/linux/hugetlb.h | 13 +++++++++++++
 mm/hugetlb.c            |  8 +++++---
 2 files changed, 18 insertions(+), 3 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index 23010a3b2047..af859564509e 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -502,6 +502,14 @@</span> <span class="p_context"> static inline void hugetlb_count_sub(long l, struct mm_struct *mm)</span>
 {
 	atomic_long_sub(l, &amp;mm-&gt;hugetlb_usage);
 }
<span class="p_add">+</span>
<span class="p_add">+#ifndef set_huge_swap_pte_at</span>
<span class="p_add">+static inline void set_huge_swap_pte_at(struct mm_struct *mm, unsigned long addr,</span>
<span class="p_add">+					pte_t *ptep, pte_t pte, unsigned long sz)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_huge_pte_at(mm, addr, ptep, pte);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
 #else	/* CONFIG_HUGETLB_PAGE */
 struct hstate {};
 #define alloc_huge_page(v, a, r) NULL
<span class="p_chunk">@@ -546,6 +554,11 @@</span> <span class="p_context"> static inline void hugetlb_report_usage(struct seq_file *f, struct mm_struct *m)</span>
 static inline void hugetlb_count_sub(long l, struct mm_struct *mm)
 {
 }
<span class="p_add">+</span>
<span class="p_add">+static inline void set_huge_swap_pte_at(struct mm_struct *mm, unsigned long addr,</span>
<span class="p_add">+					pte_t *ptep, pte_t pte, unsigned long sz)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif	/* CONFIG_HUGETLB_PAGE */
 
 static inline spinlock_t *huge_pte_lock(struct hstate *h,
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index b20620ff3751..2017f3f89ab7 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3263,9 +3263,10 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 				 */
 				make_migration_entry_read(&amp;swp_entry);
 				entry = swp_entry_to_pte(swp_entry);
<span class="p_del">-				set_huge_pte_at(src, addr, src_pte, entry);</span>
<span class="p_add">+				set_huge_swap_pte_at(src, addr, src_pte,</span>
<span class="p_add">+						     entry, sz);</span>
 			}
<span class="p_del">-			set_huge_pte_at(dst, addr, dst_pte, entry);</span>
<span class="p_add">+			set_huge_swap_pte_at(dst, addr, dst_pte, entry, sz);</span>
 		} else {
 			if (cow) {
 				huge_ptep_set_wrprotect(src, addr, src_pte);
<span class="p_chunk">@@ -4282,7 +4283,8 @@</span> <span class="p_context"> unsigned long hugetlb_change_protection(struct vm_area_struct *vma,</span>
 
 				make_migration_entry_read(&amp;entry);
 				newpte = swp_entry_to_pte(entry);
<span class="p_del">-				set_huge_pte_at(mm, address, ptep, newpte);</span>
<span class="p_add">+				set_huge_swap_pte_at(mm, address, ptep,</span>
<span class="p_add">+						     newpte, huge_page_size(h));</span>
 				pages++;
 			}
 			spin_unlock(ptl);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



