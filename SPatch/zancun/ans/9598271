
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[08/10] perf, tools, stat: Output JSON MetricExpr metric - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [08/10] perf, tools, stat: Output JSON MetricExpr metric</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 1, 2017, 6:49 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170301064924.32172-9-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9598271/mbox/"
   >mbox</a>
|
   <a href="/patch/9598271/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9598271/">/patch/9598271/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9E00A600CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Mar 2017 11:25:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 708CA284CB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Mar 2017 11:25:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 61B53284DD; Wed,  1 Mar 2017 11:25:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 659E128428
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Mar 2017 11:25:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752523AbdCALZJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 1 Mar 2017 06:25:09 -0500
Received: from mga06.intel.com ([134.134.136.31]:3834 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752180AbdCALYx (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 1 Mar 2017 06:24:53 -0500
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by orsmga104.jf.intel.com with ESMTP; 28 Feb 2017 22:49:43 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.35,224,1484035200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;939284580&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.35])
	by orsmga003.jf.intel.com with ESMTP; 28 Feb 2017 22:49:28 -0800
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 00E13300B4E; Tue, 28 Feb 2017 22:49:29 -0800 (PST)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@kernel.org
Cc: jolsa@kernel.org, linux-kernel@vger.kernel.org,
	Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 08/10] perf, tools, stat: Output JSON MetricExpr metric
Date: Tue, 28 Feb 2017 22:49:22 -0800
Message-Id: &lt;20170301064924.32172-9-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20170301064924.32172-1-andi@firstfloor.org&gt;
References: &lt;20170301064924.32172-1-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - March 1, 2017, 6:49 a.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Add generic infrastructure to perf stat to output ratios for &quot;MetricExpr&quot;
entries in the event lists. Many events are more useful as ratios
than in raw form, typically some count in relation to total ticks.

Transfer the MetricExpr information from the alias to the evsel.

We mark the events that need to be collected for MetricExpr, and also
link the events using them with a pointer. The code is careful
to always prefer the right event in the same group to minimize
multiplexing errors. At the moment only a single relation is supported.

Then add a rblist to the stat shadow code that remembers stats based
on the cpu and context.

Then finally update and retrieve and print these values similarly to the
existing hardcoded perf metrics. We use the simple expression parser
added earlier to evaluate the expression.

Normally we just output the result without further commentary,
but for --metric-only this would lead to empty columns. So for this
case use the original event as description.

So far there is no attempt to automatically add the MetricExpr event,
if it is missing, however we suggest it to the user.

$ perf stat -a -I 1000 -e &#39;{unc_p_clockticks,unc_p_freq_max_os_cycles}&#39;
     1.000228813        800,139,950      unc_p_clockticks
     1.000228813        789,833,783      unc_p_freq_max_os_cycles  #     98.7
     2.000654229        800,308,990      unc_p_clockticks
     2.000654229        396,214,238      unc_p_freq_max_os_cycles  #     49.5

$ perf stat -a -I 1000 -e &#39;{unc_p_clockticks,unc_p_freq_max_os_cycles}&#39; --metric-only
     1.000206740     48.0
     2.000451543     48.1

v2: Change from DivideBy to MetricExpr
v3: Use expr__ prefix.  Support more than one other event.
<span class="signed-off-by">Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/builtin-stat.c      |   3 +
 tools/perf/util/evsel.c        |   3 +
 tools/perf/util/evsel.h        |   3 +
 tools/perf/util/parse-events.c |   1 +
 tools/perf/util/pmu.c          |   2 +
 tools/perf/util/pmu.h          |   1 +
 tools/perf/util/stat-shadow.c  | 188 +++++++++++++++++++++++++++++++++++++++++
 tools/perf/util/stat.h         |   2 +
 8 files changed, 203 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - March 7, 2017, 10:03 a.m.</div>
<pre class="content">
On Tue, Feb 28, 2017 at 10:49:22PM -0800, Andi Kleen wrote:
<span class="quote">&gt; From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add generic infrastructure to perf stat to output ratios for &quot;MetricExpr&quot;</span>
<span class="quote">&gt; entries in the event lists. Many events are more useful as ratios</span>
<span class="quote">&gt; than in raw form, typically some count in relation to total ticks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Transfer the MetricExpr information from the alias to the evsel.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We mark the events that need to be collected for MetricExpr, and also</span>
<span class="quote">&gt; link the events using them with a pointer. The code is careful</span>
<span class="quote">&gt; to always prefer the right event in the same group to minimize</span>
<span class="quote">&gt; multiplexing errors. At the moment only a single relation is supported.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Then add a rblist to the stat shadow code that remembers stats based</span>
<span class="quote">&gt; on the cpu and context.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Then finally update and retrieve and print these values similarly to the</span>
<span class="quote">&gt; existing hardcoded perf metrics. We use the simple expression parser</span>
<span class="quote">&gt; added earlier to evaluate the expression.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Normally we just output the result without further commentary,</span>
<span class="quote">&gt; but for --metric-only this would lead to empty columns. So for this</span>
<span class="quote">&gt; case use the original event as description.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So far there is no attempt to automatically add the MetricExpr event,</span>
<span class="quote">&gt; if it is missing, however we suggest it to the user.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; $ perf stat -a -I 1000 -e &#39;{unc_p_clockticks,unc_p_freq_max_os_cycles}&#39;</span>
<span class="quote">&gt;      1.000228813        800,139,950      unc_p_clockticks</span>
<span class="quote">&gt;      1.000228813        789,833,783      unc_p_freq_max_os_cycles  #     98.7</span>
<span class="quote">&gt;      2.000654229        800,308,990      unc_p_clockticks</span>
<span class="quote">&gt;      2.000654229        396,214,238      unc_p_freq_max_os_cycles  #     49.5</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; $ perf stat -a -I 1000 -e &#39;{unc_p_clockticks,unc_p_freq_max_os_cycles}&#39; --metric-only</span>
<span class="quote">&gt;      1.000206740     48.0</span>
<span class="quote">&gt;      2.000451543     48.1</span>

The comment above suggest I&#39;ll see &#39;original event as description&#39; in this example??

However, could you just make those metric names working in here?
Displaying original event for metric value is misleading.

jirka
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 389c8e457bf0..a6cc5ad479b9 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -1141,6 +1141,7 @@</span> <span class="p_context"> static void printout(int id, int nr, struct perf_evsel *counter, double uval,</span>
 	out.print_metric = pm;
 	out.new_line = nl;
 	out.ctx = &amp;os;
<span class="p_add">+	out.force_header = false;</span>
 
 	if (csv_output &amp;&amp; !metric_only) {
 		print_noise(counter, noise);
<span class="p_chunk">@@ -1478,6 +1479,7 @@</span> <span class="p_context"> static void print_metric_headers(const char *prefix, bool no_indent)</span>
 		out.ctx = &amp;os;
 		out.print_metric = print_metric_header;
 		out.new_line = new_line_metric;
<span class="p_add">+		out.force_header = true;</span>
 		os.evsel = counter;
 		perf_stat__print_shadow_stats(counter, 0,
 					      0,
<span class="p_chunk">@@ -2460,6 +2462,7 @@</span> <span class="p_context"> int cmd_stat(int argc, const char **argv, const char *prefix __maybe_unused)</span>
 	argc = parse_options_subcommand(argc, argv, stat_options, stat_subcommands,
 					(const char **) stat_usage,
 					PARSE_OPT_STOP_AT_NON_OPTION);
<span class="p_add">+	perf_stat__collect_metric_expr(evsel_list);</span>
 	perf_stat__init_shadow_stats();
 
 	if (csv_sep) {
<span class="p_header">diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c</span>
<span class="p_header">index ac59710b79e0..a25dc688ab74 100644</span>
<span class="p_header">--- a/tools/perf/util/evsel.c</span>
<span class="p_header">+++ b/tools/perf/util/evsel.c</span>
<span class="p_chunk">@@ -236,6 +236,9 @@</span> <span class="p_context"> void perf_evsel__init(struct perf_evsel *evsel,</span>
 	evsel-&gt;sample_size = __perf_evsel__sample_size(attr-&gt;sample_type);
 	perf_evsel__calc_id_pos(evsel);
 	evsel-&gt;cmdline_group_boundary = false;
<span class="p_add">+	evsel-&gt;metric_expr   = NULL;</span>
<span class="p_add">+	evsel-&gt;metric_events = NULL;</span>
<span class="p_add">+	evsel-&gt;collect_stat  = false;</span>
 }
 
 struct perf_evsel *perf_evsel__new_idx(struct perf_event_attr *attr, int idx)
<span class="p_header">diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h</span>
<span class="p_header">index bd2e9b112d49..8f1f61826fdf 100644</span>
<span class="p_header">--- a/tools/perf/util/evsel.h</span>
<span class="p_header">+++ b/tools/perf/util/evsel.h</span>
<span class="p_chunk">@@ -132,6 +132,9 @@</span> <span class="p_context"> struct perf_evsel {</span>
 	struct list_head	config_terms;
 	int			bpf_fd;
 	bool			merged_stat;
<span class="p_add">+	const char *		metric_expr;</span>
<span class="p_add">+	struct perf_evsel	**metric_events;</span>
<span class="p_add">+	bool			collect_stat;</span>
 };
 
 union u64_swap {
<span class="p_header">diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c</span>
<span class="p_header">index d693e2acbda7..fcb0b6854642 100644</span>
<span class="p_header">--- a/tools/perf/util/parse-events.c</span>
<span class="p_header">+++ b/tools/perf/util/parse-events.c</span>
<span class="p_chunk">@@ -1254,6 +1254,7 @@</span> <span class="p_context"> int parse_events_add_pmu(struct parse_events_evlist *data,</span>
 		evsel-&gt;scale = info.scale;
 		evsel-&gt;per_pkg = info.per_pkg;
 		evsel-&gt;snapshot = info.snapshot;
<span class="p_add">+		evsel-&gt;metric_expr = info.metric_expr;</span>
 	}
 
 	return evsel ? 0 : -ENOMEM;
<span class="p_header">diff --git a/tools/perf/util/pmu.c b/tools/perf/util/pmu.c</span>
<span class="p_header">index 0583e1bdc762..4d9632390ab1 100644</span>
<span class="p_header">--- a/tools/perf/util/pmu.c</span>
<span class="p_header">+++ b/tools/perf/util/pmu.c</span>
<span class="p_chunk">@@ -985,6 +985,7 @@</span> <span class="p_context"> int perf_pmu__check_alias(struct perf_pmu *pmu, struct list_head *head_terms,</span>
 	info-&gt;unit     = NULL;
 	info-&gt;scale    = 0.0;
 	info-&gt;snapshot = false;
<span class="p_add">+	info-&gt;metric_expr = NULL;</span>
 
 	list_for_each_entry_safe(term, h, head_terms, list) {
 		alias = pmu_find_alias(pmu, term);
<span class="p_chunk">@@ -1000,6 +1001,7 @@</span> <span class="p_context"> int perf_pmu__check_alias(struct perf_pmu *pmu, struct list_head *head_terms,</span>
 
 		if (alias-&gt;per_pkg)
 			info-&gt;per_pkg = true;
<span class="p_add">+		info-&gt;metric_expr = alias-&gt;metric_expr;</span>
 
 		list_del(&amp;term-&gt;list);
 		free(term);
<span class="p_header">diff --git a/tools/perf/util/pmu.h b/tools/perf/util/pmu.h</span>
<span class="p_header">index 3dccb15f29e9..27f078ccc594 100644</span>
<span class="p_header">--- a/tools/perf/util/pmu.h</span>
<span class="p_header">+++ b/tools/perf/util/pmu.h</span>
<span class="p_chunk">@@ -31,6 +31,7 @@</span> <span class="p_context"> struct perf_pmu {</span>
 
 struct perf_pmu_info {
 	const char *unit;
<span class="p_add">+	const char *metric_expr;</span>
 	double scale;
 	bool per_pkg;
 	bool snapshot;
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 8a2bbd2a4d82..e8e76744fa32 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -3,6 +3,9 @@</span> <span class="p_context"></span>
 #include &quot;stat.h&quot;
 #include &quot;color.h&quot;
 #include &quot;pmu.h&quot;
<span class="p_add">+#include &quot;rblist.h&quot;</span>
<span class="p_add">+#include &quot;evlist.h&quot;</span>
<span class="p_add">+#include &quot;expr.h&quot;</span>
 
 enum {
 	CTX_BIT_USER	= 1 &lt;&lt; 0,
<span class="p_chunk">@@ -41,13 +44,73 @@</span> <span class="p_context"> static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
 static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];
<span class="p_add">+static struct rblist runtime_saved_values;</span>
 static bool have_frontend_stalled;
 
 struct stats walltime_nsecs_stats;
 
<span class="p_add">+struct saved_value {</span>
<span class="p_add">+	struct rb_node rb_node;</span>
<span class="p_add">+	struct perf_evsel *evsel;</span>
<span class="p_add">+	int cpu;</span>
<span class="p_add">+	int ctx;</span>
<span class="p_add">+	struct stats stats;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int saved_value_cmp(struct rb_node *rb_node, const void *entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *a = container_of(rb_node,</span>
<span class="p_add">+					     struct saved_value,</span>
<span class="p_add">+					     rb_node);</span>
<span class="p_add">+	const struct saved_value *b = entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (a-&gt;ctx != b-&gt;ctx)</span>
<span class="p_add">+		return a-&gt;ctx - b-&gt;ctx;</span>
<span class="p_add">+	if (a-&gt;cpu != b-&gt;cpu)</span>
<span class="p_add">+		return a-&gt;cpu - b-&gt;cpu;</span>
<span class="p_add">+	return a-&gt;evsel - b-&gt;evsel;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct rb_node *saved_value_new(struct rblist *rblist __maybe_unused,</span>
<span class="p_add">+				     const void *entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *nd = malloc(sizeof(struct saved_value));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!nd)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+	memcpy(nd, entry, sizeof(struct saved_value));</span>
<span class="p_add">+	return &amp;nd-&gt;rb_node;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct saved_value *saved_value_lookup(struct perf_evsel *evsel,</span>
<span class="p_add">+					      int cpu, int ctx,</span>
<span class="p_add">+					      bool create)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct rb_node *nd;</span>
<span class="p_add">+	struct saved_value dm = {</span>
<span class="p_add">+		.cpu = cpu,</span>
<span class="p_add">+		.ctx = ctx,</span>
<span class="p_add">+		.evsel = evsel,</span>
<span class="p_add">+	};</span>
<span class="p_add">+	nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+	if (nd)</span>
<span class="p_add">+		return container_of(nd, struct saved_value, rb_node);</span>
<span class="p_add">+	if (create) {</span>
<span class="p_add">+		rblist__add_node(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+		nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+		if (nd)</span>
<span class="p_add">+			return container_of(nd, struct saved_value, rb_node);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void perf_stat__init_shadow_stats(void)
 {
 	have_frontend_stalled = pmu_have_event(&quot;cpu&quot;, &quot;stalled-cycles-frontend&quot;);
<span class="p_add">+	rblist__init(&amp;runtime_saved_values);</span>
<span class="p_add">+	runtime_saved_values.node_cmp = saved_value_cmp;</span>
<span class="p_add">+	runtime_saved_values.node_new = saved_value_new;</span>
<span class="p_add">+	/* No delete for now */</span>
 }
 
 static int evsel_context(struct perf_evsel *evsel)
<span class="p_chunk">@@ -70,6 +133,8 @@</span> <span class="p_context"> static int evsel_context(struct perf_evsel *evsel)</span>
 
 void perf_stat__reset_shadow_stats(void)
 {
<span class="p_add">+	struct rb_node *pos, *next;</span>
<span class="p_add">+</span>
 	memset(runtime_nsecs_stats, 0, sizeof(runtime_nsecs_stats));
 	memset(runtime_cycles_stats, 0, sizeof(runtime_cycles_stats));
 	memset(runtime_stalled_cycles_front_stats, 0, sizeof(runtime_stalled_cycles_front_stats));
<span class="p_chunk">@@ -92,6 +157,15 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 	memset(runtime_topdown_slots_issued, 0, sizeof(runtime_topdown_slots_issued));
 	memset(runtime_topdown_fetch_bubbles, 0, sizeof(runtime_topdown_fetch_bubbles));
 	memset(runtime_topdown_recovery_bubbles, 0, sizeof(runtime_topdown_recovery_bubbles));
<span class="p_add">+</span>
<span class="p_add">+	next = rb_first(&amp;runtime_saved_values.entries);</span>
<span class="p_add">+	while (next) {</span>
<span class="p_add">+		pos = next;</span>
<span class="p_add">+		next = rb_next(pos);</span>
<span class="p_add">+		memset(&amp;container_of(pos, struct saved_value, rb_node)-&gt;stats,</span>
<span class="p_add">+		       0,</span>
<span class="p_add">+		       sizeof(struct stats));</span>
<span class="p_add">+	}</span>
 }
 
 /*
<span class="p_chunk">@@ -143,6 +217,12 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
 		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count[0]);
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))
 		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count[0]);
<span class="p_add">+</span>
<span class="p_add">+	if (counter-&gt;collect_stat) {</span>
<span class="p_add">+		struct saved_value *v = saved_value_lookup(counter, cpu, ctx,</span>
<span class="p_add">+							   true);</span>
<span class="p_add">+		update_stats(&amp;v-&gt;stats, count[0]);</span>
<span class="p_add">+	}</span>
 }
 
 /* used for get_ratio_color() */
<span class="p_chunk">@@ -172,6 +252,88 @@</span> <span class="p_context"> static const char *get_ratio_color(enum grc_type type, double ratio)</span>
 	return color;
 }
 
<span class="p_add">+static struct perf_evsel *perf_stat__find_event(struct perf_evlist *evsel_list,</span>
<span class="p_add">+						const char *name)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct perf_evsel *c2;</span>
<span class="p_add">+</span>
<span class="p_add">+	evlist__for_each_entry (evsel_list, c2) {</span>
<span class="p_add">+		if (!strcasecmp(c2-&gt;name, name))</span>
<span class="p_add">+			return c2;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Mark MetricExpr target events and link events using them to them. */</span>
<span class="p_add">+void perf_stat__collect_metric_expr(struct perf_evlist *evsel_list)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct perf_evsel *counter, *leader, **metric_events, *oc;</span>
<span class="p_add">+	bool found;</span>
<span class="p_add">+	const char **metric_names;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+	int num_metric_names;</span>
<span class="p_add">+</span>
<span class="p_add">+	evlist__for_each_entry(evsel_list, counter) {</span>
<span class="p_add">+		bool invalid = false;</span>
<span class="p_add">+</span>
<span class="p_add">+		leader = counter-&gt;leader;</span>
<span class="p_add">+		if (!counter-&gt;metric_expr)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		metric_events = counter-&gt;metric_events;</span>
<span class="p_add">+		if (!metric_events) {</span>
<span class="p_add">+			if (expr__find_other(counter-&gt;metric_expr, counter-&gt;name,</span>
<span class="p_add">+						&amp;metric_names, &amp;num_metric_names) &lt; 0)</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			metric_events = calloc(sizeof(struct perf_evsel *),</span>
<span class="p_add">+					       num_metric_names + 1);</span>
<span class="p_add">+			if (!metric_events)</span>
<span class="p_add">+				return;</span>
<span class="p_add">+			counter-&gt;metric_events = metric_events;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; num_metric_names; i++) {</span>
<span class="p_add">+			found = false;</span>
<span class="p_add">+			if (leader) {</span>
<span class="p_add">+				/* Search in group */</span>
<span class="p_add">+				for_each_group_member (oc, leader) {</span>
<span class="p_add">+					if (!strcasecmp(oc-&gt;name, metric_names[i])) {</span>
<span class="p_add">+						found = true;</span>
<span class="p_add">+						break;</span>
<span class="p_add">+					}</span>
<span class="p_add">+				}</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!found) {</span>
<span class="p_add">+				/* Search ignoring groups */</span>
<span class="p_add">+				oc = perf_stat__find_event(evsel_list, metric_names[i]);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!oc) {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * Adding events automatically would be difficult, because</span>
<span class="p_add">+				 * it would risk creating groups that are not schedulable.</span>
<span class="p_add">+				 * perf stat doesn&#39;t understand all the scheduling constraints</span>
<span class="p_add">+				 * of events. So we ask the user instead to add the missing</span>
<span class="p_add">+				 * events.</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				fprintf(stderr, &quot;Add %s event to groups to get metric expression for %s\n&quot;,</span>
<span class="p_add">+						metric_names[i],</span>
<span class="p_add">+						counter-&gt;name);</span>
<span class="p_add">+				invalid = true;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			metric_events[i] = oc;</span>
<span class="p_add">+			oc-&gt;collect_stat = true;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		metric_events[i] = NULL;</span>
<span class="p_add">+		free(metric_names);</span>
<span class="p_add">+		if (invalid) {</span>
<span class="p_add">+			free(metric_events);</span>
<span class="p_add">+			counter-&gt;metric_events = NULL;</span>
<span class="p_add">+			counter-&gt;metric_expr = NULL;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void print_stalled_cycles_frontend(int cpu,
 					  struct perf_evsel *evsel, double avg,
 					  struct perf_stat_output_ctx *out)
<span class="p_chunk">@@ -614,6 +776,32 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 					be_bound * 100.);
 		else
 			print_metric(ctxp, NULL, NULL, name, 0);
<span class="p_add">+	} else if (evsel-&gt;metric_expr) {</span>
<span class="p_add">+		struct parse_ctx pctx;</span>
<span class="p_add">+		int i;</span>
<span class="p_add">+</span>
<span class="p_add">+		expr__ctx_init(&amp;pctx);</span>
<span class="p_add">+		expr__add_id(&amp;pctx, evsel-&gt;name, avg);</span>
<span class="p_add">+		for (i = 0; evsel-&gt;metric_events[i]; i++) {</span>
<span class="p_add">+			struct saved_value *v;</span>
<span class="p_add">+</span>
<span class="p_add">+			v = saved_value_lookup(evsel-&gt;metric_events[i], cpu, ctx, false);</span>
<span class="p_add">+			if (!v)</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			expr__add_id(&amp;pctx, evsel-&gt;metric_events[i]-&gt;name,</span>
<span class="p_add">+					     avg_stats(&amp;v-&gt;stats));</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (!evsel-&gt;metric_events[i]) {</span>
<span class="p_add">+			const char *p = evsel-&gt;metric_expr;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (expr__parse(&amp;ratio, &amp;pctx, &amp;p) == 0)</span>
<span class="p_add">+				print_metric(ctxp, NULL, &quot;%8.1f&quot;,</span>
<span class="p_add">+					out-&gt;force_header ? evsel-&gt;name : &quot;&quot;,</span>
<span class="p_add">+					ratio);</span>
<span class="p_add">+			else</span>
<span class="p_add">+				print_metric(ctxp, NULL, NULL, &quot;&quot;, 0);</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;&quot;, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
 		char unit_buf[10];
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index c29bb94c48a4..0a65ae23f495 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -85,11 +85,13 @@</span> <span class="p_context"> struct perf_stat_output_ctx {</span>
 	void *ctx;
 	print_metric_t print_metric;
 	new_line_t new_line;
<span class="p_add">+	bool force_header;</span>
 };
 
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
 				   struct perf_stat_output_ctx *out);
<span class="p_add">+void perf_stat__collect_metric_expr(struct perf_evlist *);</span>
 
 int perf_evlist__alloc_stats(struct perf_evlist *evlist, bool alloc_raw);
 void perf_evlist__free_stats(struct perf_evlist *evlist);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



