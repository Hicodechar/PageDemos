
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] iommu/dma/pci: account pci host bridge dma_mask for IOVA allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] iommu/dma/pci: account pci host bridge dma_mask for IOVA allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 20, 2017, 8:57 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;6c34297b77de0fc7fc4b44b17749cfd2@mail.gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9633307/mbox/"
   >mbox</a>
|
   <a href="/patch/9633307/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9633307/">/patch/9633307/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	684406020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 09:06:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5527627B2F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 09:06:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 496912810E; Mon, 20 Mar 2017 09:06:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 593F727C2D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 09:06:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753447AbdCTJGM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Mar 2017 05:06:12 -0400
Received: from mail-pg0-f52.google.com ([74.125.83.52]:34615 &quot;EHLO
	mail-pg0-f52.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753186AbdCTJFy (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Mar 2017 05:05:54 -0400
Received: by mail-pg0-f52.google.com with SMTP id 21so40913877pgg.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 20 Mar 2017 02:05:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=broadcom.com; s=google;
	h=from:mime-version:thread-index:date:message-id:subject:to:cc;
	bh=5ATJ06QSTE4j6j70161BqBXw7kL1z+S4NC9BS9c1/os=;
	b=h1V9NUTbxcQ4+EaGKC16zFuj4chhS2mkAn9wgcS1uDvsjwqPB+TrbBj39LUNpedmbr
	hR2D3zybwIUThbeou75yMA5U8OM0JwtuwMBg62fqmojTacbSUrx25QyZka6IuTkOHFkt
	2njZRin/J2MtYBKh6/i6eo3CGQrFTLb9kbHfs=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:mime-version:thread-index:date:message-id
	:subject:to:cc;
	bh=5ATJ06QSTE4j6j70161BqBXw7kL1z+S4NC9BS9c1/os=;
	b=X8GUAWfqh15zLkIKutWX0Ttd5pxnGhu3LDNSSEkG8LnPEF8Y56XUFdDNnL36sZjIXu
	fp2hkEwvlJ19F4SrJkQRck7XYniZ83i+hK5MQeY8/62Kzt7+ikibqQonJJ33s5xrUAJJ
	P7qDgxj+0uQosQy3ZX2MOkkqz16Hm4x8B4lG14qbMMpialidmNodRDRTk46ghdnrnhPh
	A+l7K6liSug+gqHviD/zEOpbNTrsJblHYu2Fdv3TpoeptovCB0GZNQn1TBfRg4XJIOGD
	4lnf80DssE0ZDEVx/T5V/a5KTz4R7URsmDIqgfUtLR7GKzniTO0D56Y+np44WYIVAYBd
	Hzxg==
X-Gm-Message-State: AFeK/H0IlruZs27tAfmUTiJ3i8yKBj/SjVTy6ysKB9qR7RBzJYHSqfJgBNecwXN8w7yeDDTCeY3vT/R2i2fqU6vS
X-Received: by 10.99.142.67 with SMTP id k64mr24030979pge.31.1490000272815; 
	Mon, 20 Mar 2017 01:57:52 -0700 (PDT)
From: Oza Oza &lt;oza.oza@broadcom.com&gt;
MIME-Version: 1.0
X-Mailer: Microsoft Outlook 14.0
Thread-Index: AdKhWA4pEe45/tEqQoiQhCyPjX12jw==
Date: Mon, 20 Mar 2017 14:27:51 +0530
Message-ID: &lt;6c34297b77de0fc7fc4b44b17749cfd2@mail.gmail.com&gt;
Subject: [RFC PATCH] iommu/dma/pci: account pci host bridge dma_mask for
	IOVA allocation
To: Joerg Roedel &lt;joro@8bytes.org&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;, linux-pci@vger.kernel.org
Cc: iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, devicetree@vger.kernel.org,
	bcm-kernel-feedback-list@broadcom.com
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a> - March 20, 2017, 8:57 a.m.</div>
<pre class="content">
+  linux-pci

Regards,
Oza.

-----Original Message-----
<span class="from">From: Oza Pawandeep [mailto:oza.oza@broadcom.com]</span>
Sent: Friday, March 17, 2017 11:41 AM
To: Joerg Roedel; Robin Murphy
Cc: iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;
linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;
bcm-kernel-feedback-list@broadcom.com; Oza Pawandeep
Subject: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for IOVA
allocation

It is possible that PCI device supports 64-bit DMA addressing, and thus
it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host
bridge may have limitations on the inbound transaction addressing. As an
example, consider NVME SSD device connected to iproc-PCIe controller.

Currently, the IOMMU DMA ops only considers PCI device dma_mask when
allocating an IOVA. This is particularly problematic on
ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to PA for
in-bound transactions only after PCI Host has forwarded these transactions
on SOC IO bus. This means on such ARM/ARM64 SOCs the IOVA of in-bound
transactions has to honor the addressing restrictions of the PCI Host.

this patch is inspired by
http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.html
http://www.spinics.net/lists/arm-kernel/msg566947.html

but above inspiraiton solves the half of the problem.
the rest of the problem is descrbied below, what we face on iproc based
SOCs.

current pcie frmework and of framework integration assumes dma-ranges in a
way where memory-mapped devices define their dma-ranges.
dma-ranges: (child-bus-address, parent-bus-address, length).

but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;

of_dma_configure is specifically witten to take care of memory mapped
devices.
but no implementation exists for pci to take care of pcie based memory
ranges.
in fact pci world doesnt seem to define standard dma-ranges since there is
an absense of the same, the dma_mask used to remain 32bit because of
0 size return (parsed by of_dma_configure())

this patch also implements of_pci_get_dma_ranges to cater to pci world
dma-ranges.
so then the returned size get best possible (largest) dma_mask.
for e.g.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;; we should get
dev-&gt;coherent_dma_mask=0x7fffffffff.

conclusion: there are following problems
1) linux pci and iommu framework integration has glitches with respect to
dma-ranges
2) pci linux framework look very uncertain about dma-ranges, rather
binding is not defined
   the way it is defined for memory mapped devices.
   rcar and iproc based SOCs use their custom one dma-ranges
   (rather can be standard)
3) even if in case of default parser of_dma_get_ranges,:
   it throws and erro&quot;
   &quot;no dma-ranges found for node&quot;
   because of the bug which exists.
   following lines should be moved to the end of while(1)
	839                 node = of_get_next_parent(node);
	840                 if (!node)
	841                         break;
<span class="reviewed-by">
Reviewed-by: Anup Patel &lt;anup.patel@broadcom.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Scott Branden &lt;scott.branden@broadcom.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;</span>

*dev,
 			unsigned char busno, unsigned char bus_max, @@
-83,6 +84,11 @@ static inline int of_pci_get_host_bridge_resources(struct
device_node *dev,  {
 	return -EINVAL;
 }
+
+static inline int of_pci_get_dma_ranges(struct device_node *np, u64
+*dma_addr, u64 *paddr, u64 *size) {
+	return -EINVAL;
+}
 #endif

 #if defined(CONFIG_OF) &amp;&amp; defined(CONFIG_PCI_MSI)
--
1.9.1
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - March 20, 2017, 3:43 p.m.</div>
<pre class="content">
On 20/03/17 08:57, Oza Oza wrote:
<span class="quote">&gt; +  linux-pci</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Oza.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Oza Pawandeep [mailto:oza.oza@broadcom.com]</span>
<span class="quote">&gt; Sent: Friday, March 17, 2017 11:41 AM</span>
<span class="quote">&gt; To: Joerg Roedel; Robin Murphy</span>
<span class="quote">&gt; Cc: iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;</span>
<span class="quote">&gt; bcm-kernel-feedback-list@broadcom.com; Oza Pawandeep</span>
<span class="quote">&gt; Subject: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for IOVA</span>
<span class="quote">&gt; allocation</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>
<span class="quote">&gt; bridge may have limitations on the inbound transaction addressing. As an</span>
<span class="quote">&gt; example, consider NVME SSD device connected to iproc-PCIe controller.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Currently, the IOMMU DMA ops only considers PCI device dma_mask when</span>
<span class="quote">&gt; allocating an IOVA. This is particularly problematic on</span>
<span class="quote">&gt; ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to PA for</span>
<span class="quote">&gt; in-bound transactions only after PCI Host has forwarded these transactions</span>
<span class="quote">&gt; on SOC IO bus. This means on such ARM/ARM64 SOCs the IOVA of in-bound</span>
<span class="quote">&gt; transactions has to honor the addressing restrictions of the PCI Host.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; this patch is inspired by</span>
<span class="quote">&gt; http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.html</span>
<span class="quote">&gt; http://www.spinics.net/lists/arm-kernel/msg566947.html</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; but above inspiraiton solves the half of the problem.</span>
<span class="quote">&gt; the rest of the problem is descrbied below, what we face on iproc based</span>
<span class="quote">&gt; SOCs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; current pcie frmework and of framework integration assumes dma-ranges in a</span>
<span class="quote">&gt; way where memory-mapped devices define their dma-ranges.</span>
<span class="quote">&gt; dma-ranges: (child-bus-address, parent-bus-address, length).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; of_dma_configure is specifically witten to take care of memory mapped</span>
<span class="quote">&gt; devices.</span>
<span class="quote">&gt; but no implementation exists for pci to take care of pcie based memory</span>
<span class="quote">&gt; ranges.</span>
<span class="quote">&gt; in fact pci world doesnt seem to define standard dma-ranges since there is</span>
<span class="quote">&gt; an absense of the same, the dma_mask used to remain 32bit because of</span>
<span class="quote">&gt; 0 size return (parsed by of_dma_configure())</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; this patch also implements of_pci_get_dma_ranges to cater to pci world</span>
<span class="quote">&gt; dma-ranges.</span>
<span class="quote">&gt; so then the returned size get best possible (largest) dma_mask.</span>
<span class="quote">&gt; for e.g.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;; we should get</span>
<span class="quote">&gt; dev-&gt;coherent_dma_mask=0x7fffffffff.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; conclusion: there are following problems</span>
<span class="quote">&gt; 1) linux pci and iommu framework integration has glitches with respect to</span>
<span class="quote">&gt; dma-ranges</span>
<span class="quote">&gt; 2) pci linux framework look very uncertain about dma-ranges, rather</span>
<span class="quote">&gt; binding is not defined</span>
<span class="quote">&gt;    the way it is defined for memory mapped devices.</span>
<span class="quote">&gt;    rcar and iproc based SOCs use their custom one dma-ranges</span>
<span class="quote">&gt;    (rather can be standard)</span>
<span class="quote">&gt; 3) even if in case of default parser of_dma_get_ranges,:</span>
<span class="quote">&gt;    it throws and erro&quot;</span>
<span class="quote">&gt;    &quot;no dma-ranges found for node&quot;</span>
<span class="quote">&gt;    because of the bug which exists.</span>
<span class="quote">&gt;    following lines should be moved to the end of while(1)</span>
<span class="quote">&gt; 	839                 node = of_get_next_parent(node);</span>
<span class="quote">&gt; 	840                 if (!node)</span>
<span class="quote">&gt; 	841                         break;</span>

Right, having made sense of this and looked into things myself I think I
understand now; what this boils down to is that the existing
implementation of of_dma_get_range() expects always to be given a leaf
device_node, and doesn&#39;t cope with being given a device_node for the
given device&#39;s parent bus directly. That&#39;s really all there is; it&#39;s not
specific to PCI (there are other probeable and DMA-capable buses whose
children aren&#39;t described in DT, like the fsl-mc thing), and it
definitely doesn&#39;t have anything to do with IOMMUs.

Now, that&#39;s certainly something to fix, but AFAICS this patch doesn&#39;t do
that, only adds some PCI-specific code which is never called.

DMA mask inheritance for arm64 is another issue, which again is general,
but does tend to be more visible in the IOMMU case. That still needs
some work on the APCI side - all the DT-centric approaches so far either
regress or at best do nothing for ACPI. I&#39;ve made a note to try to look
into that soon, but from what I recall I fear there is still an open
question about what to do for a default in the absence of IORT or _DMA
(once the current assumption that drivers can override our arbitrary
default at will is closed down).

In the meantime, have you tried 4.11-rc1 or later on the affected
system? One of the ulterior motives behind 122fac030e91 was that in many
cases it also happens to paper over most versions of this problem for
PCI devices, and makes the IOMMU at least useable (on systems which
don&#39;t need to dma_map_*() vast amounts of RAM all at once) while we fix
the underlying things properly.

Robin.
<span class="quote">
&gt; Reviewed-by: Anup Patel &lt;anup.patel@broadcom.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Scott Branden &lt;scott.branden@broadcom.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig index</span>
<span class="quote">&gt; 8c7c244..20cfff7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -217,6 +217,9 @@ config NEED_DMA_MAP_STATE  config NEED_SG_DMA_LENGTH</span>
<span class="quote">&gt;  	def_bool y</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="quote">&gt; +	def_bool y</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  config SMP</span>
<span class="quote">&gt;  	def_bool y</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; b/arch/arm64/include/asm/device.h index 73d5bab..64b4dc3 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; @@ -20,6 +20,7 @@ struct dev_archdata {</span>
<span class="quote">&gt;  #ifdef CONFIG_IOMMU_API</span>
<span class="quote">&gt;  	void *iommu;			/* private IOMMU data */</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +	u64 parent_dma_mask;</span>
<span class="quote">&gt;  	bool dma_coherent;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 81cdb2e..5845ecd 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -564,6 +564,7 @@ static void flush_page(struct device *dev, const void</span>
<span class="quote">&gt; *virt, phys_addr_t phys)</span>
<span class="quote">&gt;  	__dma_flush_area(virt, PAGE_SIZE);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static void *__iommu_alloc_attrs(struct device *dev, size_t size,</span>
<span class="quote">&gt;  				 dma_addr_t *handle, gfp_t gfp,</span>
<span class="quote">&gt;  				 unsigned long attrs)</span>
<span class="quote">&gt; @@ -795,6 +796,20 @@ static void __iommu_unmap_sg_attrs(struct device</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static int __iommu_set_dma_mask(struct device *dev, u64 mask) {</span>
<span class="quote">&gt; +	/* device is not DMA capable */</span>
<span class="quote">&gt; +	if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static const struct dma_map_ops iommu_dma_ops = {</span>
<span class="quote">&gt;  	.alloc = __iommu_alloc_attrs,</span>
<span class="quote">&gt;  	.free = __iommu_free_attrs,</span>
<span class="quote">&gt; @@ -811,8 +826,21 @@ static void __iommu_unmap_sg_attrs(struct device</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  	.map_resource = iommu_dma_map_resource,</span>
<span class="quote">&gt;  	.unmap_resource = iommu_dma_unmap_resource,</span>
<span class="quote">&gt;  	.mapping_error = iommu_dma_mapping_error,</span>
<span class="quote">&gt; +	.set_dma_mask = __iommu_set_dma_mask,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +int dma_set_coherent_mask(struct device *dev, u64 mask) {</span>
<span class="quote">&gt; +	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="quote">&gt; +	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	dev-&gt;coherent_dma_mask = mask;</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * TODO: Right now __iommu_setup_dma_ops() gets called too early to do</span>
<span class="quote">&gt;   * everything it needs to - the device is only partially created and the</span>
<span class="quote">&gt; @@ -975,6 +1003,8 @@ void arch_setup_dma_ops(struct device *dev, u64</span>
<span class="quote">&gt; dma_base, u64 size,</span>
<span class="quote">&gt;  	if (!dev-&gt;dma_ops)</span>
<span class="quote">&gt;  		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;  	__iommu_setup_dma_ops(dev, dma_base, size, iommu);  } diff --git</span>
<span class="quote">&gt; a/drivers/of/of_pci.c b/drivers/of/of_pci.c index 0ee42c3..5804717 100644</span>
<span class="quote">&gt; --- a/drivers/of/of_pci.c</span>
<span class="quote">&gt; +++ b/drivers/of/of_pci.c</span>
<span class="quote">&gt; @@ -283,6 +283,51 @@ int of_pci_get_host_bridge_resources(struct</span>
<span class="quote">&gt; device_node *dev,</span>
<span class="quote">&gt;  	return err;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(of_pci_get_host_bridge_resources);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="quote">&gt; +*paddr, u64 *size) {</span>
<span class="quote">&gt; +	struct device_node *node = of_node_get(np);</span>
<span class="quote">&gt; +	int rlen, naddr, nsize, pna;</span>
<span class="quote">&gt; +	int ret = 0;</span>
<span class="quote">&gt; +	const int na = 3, ns = 2;</span>
<span class="quote">&gt; +	struct of_pci_range_parser parser;</span>
<span class="quote">&gt; +	struct of_pci_range range;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!node)</span>
<span class="quote">&gt; +		return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.node = node;</span>
<span class="quote">&gt; +	parser.pna = of_n_addr_cells(node);</span>
<span class="quote">&gt; +	parser.np = parser.pna + na + ns;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.range = of_get_property(node, &quot;dma-ranges&quot;, &amp;rlen);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!parser.range) {</span>
<span class="quote">&gt; +		pr_debug(&quot;pcie device has no dma-ranges defined for</span>
<span class="quote">&gt; node(%s)\n&quot;, np-&gt;full_name);</span>
<span class="quote">&gt; +		ret = -ENODEV;</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.end = parser.range + rlen / sizeof(__be32);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* how do we take care of multiple dma windows ?. */</span>
<span class="quote">&gt; +	for_each_of_pci_range(&amp;parser, &amp;range) {</span>
<span class="quote">&gt; +		*dma_addr = range.pci_addr;</span>
<span class="quote">&gt; +		*size = range.size;</span>
<span class="quote">&gt; +		*paddr = range.cpu_addr;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pr_debug(&quot;dma_addr(%llx) cpu_addr(%llx) size(%llx)\n&quot;,</span>
<span class="quote">&gt; +		 *dma_addr, *paddr, *size);</span>
<span class="quote">&gt; +		 *dma_addr = range.pci_addr;</span>
<span class="quote">&gt; +		 *size = range.size;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +out:</span>
<span class="quote">&gt; +	of_node_put(node);</span>
<span class="quote">&gt; +	return ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(of_pci_get_dma_ranges);</span>
<span class="quote">&gt;  #endif /* CONFIG_OF_ADDRESS */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #ifdef CONFIG_PCI_MSI</span>
<span class="quote">&gt; diff --git a/include/linux/of_pci.h b/include/linux/of_pci.h index</span>
<span class="quote">&gt; 0e0974e..907ace0 100644</span>
<span class="quote">&gt; --- a/include/linux/of_pci.h</span>
<span class="quote">&gt; +++ b/include/linux/of_pci.h</span>
<span class="quote">&gt; @@ -76,6 +76,7 @@ static inline void of_pci_check_probe_only(void) { }</span>
<span class="quote">&gt; int of_pci_get_host_bridge_resources(struct device_node *dev,</span>
<span class="quote">&gt;  			unsigned char busno, unsigned char bus_max,</span>
<span class="quote">&gt;  			struct list_head *resources, resource_size_t</span>
<span class="quote">&gt; *io_base);</span>
<span class="quote">&gt; +int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="quote">&gt; +*paddr, u64 *size);</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  static inline int of_pci_get_host_bridge_resources(struct device_node</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  			unsigned char busno, unsigned char bus_max, @@</span>
<span class="quote">&gt; -83,6 +84,11 @@ static inline int of_pci_get_host_bridge_resources(struct</span>
<span class="quote">&gt; device_node *dev,  {</span>
<span class="quote">&gt;  	return -EINVAL;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int of_pci_get_dma_ranges(struct device_node *np, u64</span>
<span class="quote">&gt; +*dma_addr, u64 *paddr, u64 *size) {</span>
<span class="quote">&gt; +	return -EINVAL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #if defined(CONFIG_OF) &amp;&amp; defined(CONFIG_PCI_MSI)</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 1.9.1</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a> - March 25, 2017, 5:34 a.m.</div>
<pre class="content">
Hi Robin,

I have made 3 separate patches now, which gives clear idea about the
changes.
we can have discussion there.

Regards,
Oza.

-----Original Message-----
<span class="from">From: Robin Murphy [mailto:robin.murphy@arm.com]</span>
Sent: Monday, March 20, 2017 9:14 PM
To: Oza Oza
Cc: Joerg Roedel; linux-pci@vger.kernel.org;
iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;
linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;
bcm-kernel-feedback-list@broadcom.com
Subject: Re: [RFC PATCH] iommu/dma/pci: account pci host bridge dma_mask for
IOVA allocation

On 20/03/17 08:57, Oza Oza wrote:
<span class="quote">&gt; +  linux-pci</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Oza.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Oza Pawandeep [mailto:oza.oza@broadcom.com]</span>
<span class="quote">&gt; Sent: Friday, March 17, 2017 11:41 AM</span>
<span class="quote">&gt; To: Joerg Roedel; Robin Murphy</span>
<span class="quote">&gt; Cc: iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;</span>
<span class="quote">&gt; bcm-kernel-feedback-list@broadcom.com; Oza Pawandeep</span>
<span class="quote">&gt; Subject: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for</span>
<span class="quote">&gt; IOVA allocation</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It is possible that PCI device supports 64-bit DMA addressing, and</span>
<span class="quote">&gt; thus it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however</span>
<span class="quote">&gt; PCI host bridge may have limitations on the inbound transaction</span>
<span class="quote">&gt; addressing. As an example, consider NVME SSD device connected to</span>
<span class="quote">&gt; iproc-PCIe controller.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Currently, the IOMMU DMA ops only considers PCI device dma_mask when</span>
<span class="quote">&gt; allocating an IOVA. This is particularly problematic on</span>
<span class="quote">&gt; ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to PA for</span>
<span class="quote">&gt; in-bound transactions only after PCI Host has forwarded these</span>
<span class="quote">&gt; transactions on SOC IO bus. This means on such ARM/ARM64 SOCs the IOVA</span>
<span class="quote">&gt; of in-bound transactions has to honor the addressing restrictions of the</span>
<span class="quote">&gt; PCI Host.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; this patch is inspired by</span>
<span class="quote">&gt; http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.ht</span>
<span class="quote">&gt; ml http://www.spinics.net/lists/arm-kernel/msg566947.html</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; but above inspiraiton solves the half of the problem.</span>
<span class="quote">&gt; the rest of the problem is descrbied below, what we face on iproc</span>
<span class="quote">&gt; based SOCs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; current pcie frmework and of framework integration assumes dma-ranges</span>
<span class="quote">&gt; in a way where memory-mapped devices define their dma-ranges.</span>
<span class="quote">&gt; dma-ranges: (child-bus-address, parent-bus-address, length).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; of_dma_configure is specifically witten to take care of memory mapped</span>
<span class="quote">&gt; devices.</span>
<span class="quote">&gt; but no implementation exists for pci to take care of pcie based memory</span>
<span class="quote">&gt; ranges.</span>
<span class="quote">&gt; in fact pci world doesnt seem to define standard dma-ranges since</span>
<span class="quote">&gt; there is an absense of the same, the dma_mask used to remain 32bit</span>
<span class="quote">&gt; because of</span>
<span class="quote">&gt; 0 size return (parsed by of_dma_configure())</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; this patch also implements of_pci_get_dma_ranges to cater to pci world</span>
<span class="quote">&gt; dma-ranges.</span>
<span class="quote">&gt; so then the returned size get best possible (largest) dma_mask.</span>
<span class="quote">&gt; for e.g.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;; we should get</span>
<span class="quote">&gt; dev-&gt;coherent_dma_mask=0x7fffffffff.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; conclusion: there are following problems</span>
<span class="quote">&gt; 1) linux pci and iommu framework integration has glitches with respect</span>
<span class="quote">&gt; to dma-ranges</span>
<span class="quote">&gt; 2) pci linux framework look very uncertain about dma-ranges, rather</span>
<span class="quote">&gt; binding is not defined</span>
<span class="quote">&gt;    the way it is defined for memory mapped devices.</span>
<span class="quote">&gt;    rcar and iproc based SOCs use their custom one dma-ranges</span>
<span class="quote">&gt;    (rather can be standard)</span>
<span class="quote">&gt; 3) even if in case of default parser of_dma_get_ranges,:</span>
<span class="quote">&gt;    it throws and erro&quot;</span>
<span class="quote">&gt;    &quot;no dma-ranges found for node&quot;</span>
<span class="quote">&gt;    because of the bug which exists.</span>
<span class="quote">&gt;    following lines should be moved to the end of while(1)</span>
<span class="quote">&gt; 	839                 node = of_get_next_parent(node);</span>
<span class="quote">&gt; 	840                 if (!node)</span>
<span class="quote">&gt; 	841                         break;</span>

Right, having made sense of this and looked into things myself I think I
understand now; what this boils down to is that the existing implementation
of of_dma_get_range() expects always to be given a leaf device_node, and
doesn&#39;t cope with being given a device_node for the given device&#39;s parent
bus directly. That&#39;s really all there is; it&#39;s not specific to PCI (there
are other probeable and DMA-capable buses whose children aren&#39;t described in
DT, like the fsl-mc thing), and it definitely doesn&#39;t have anything to do
with IOMMUs.

Now, that&#39;s certainly something to fix, but AFAICS this patch doesn&#39;t do
that, only adds some PCI-specific code which is never called.

DMA mask inheritance for arm64 is another issue, which again is general, but
does tend to be more visible in the IOMMU case. That still needs some work
on the APCI side - all the DT-centric approaches so far either regress or at
best do nothing for ACPI. I&#39;ve made a note to try to look into that soon,
but from what I recall I fear there is still an open question about what to
do for a default in the absence of IORT or _DMA (once the current assumption
that drivers can override our arbitrary default at will is closed down).

In the meantime, have you tried 4.11-rc1 or later on the affected system?
One of the ulterior motives behind 122fac030e91 was that in many cases it
also happens to paper over most versions of this problem for PCI devices,
and makes the IOMMU at least useable (on systems which don&#39;t need to
dma_map_*() vast amounts of RAM all at once) while we fix the underlying
things properly.

Robin.
<span class="quote">
&gt; Reviewed-by: Anup Patel &lt;anup.patel@broadcom.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Scott Branden &lt;scott.branden@broadcom.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig index</span>
<span class="quote">&gt; 8c7c244..20cfff7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -217,6 +217,9 @@ config NEED_DMA_MAP_STATE  config NEED_SG_DMA_LENGTH</span>
<span class="quote">&gt;  	def_bool y</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="quote">&gt; +	def_bool y</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  config SMP</span>
<span class="quote">&gt;  	def_bool y</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; b/arch/arm64/include/asm/device.h index 73d5bab..64b4dc3 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/device.h</span>
<span class="quote">&gt; @@ -20,6 +20,7 @@ struct dev_archdata {  #ifdef CONFIG_IOMMU_API</span>
<span class="quote">&gt;  	void *iommu;			/* private IOMMU data */</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +	u64 parent_dma_mask;</span>
<span class="quote">&gt;  	bool dma_coherent;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 81cdb2e..5845ecd 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -564,6 +564,7 @@ static void flush_page(struct device *dev, const</span>
<span class="quote">&gt; void *virt, phys_addr_t phys)</span>
<span class="quote">&gt;  	__dma_flush_area(virt, PAGE_SIZE);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static void *__iommu_alloc_attrs(struct device *dev, size_t size,</span>
<span class="quote">&gt;  				 dma_addr_t *handle, gfp_t gfp,</span>
<span class="quote">&gt;  				 unsigned long attrs)</span>
<span class="quote">&gt; @@ -795,6 +796,20 @@ static void __iommu_unmap_sg_attrs(struct device</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static int __iommu_set_dma_mask(struct device *dev, u64 mask) {</span>
<span class="quote">&gt; +	/* device is not DMA capable */</span>
<span class="quote">&gt; +	if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static const struct dma_map_ops iommu_dma_ops = {</span>
<span class="quote">&gt;  	.alloc = __iommu_alloc_attrs,</span>
<span class="quote">&gt;  	.free = __iommu_free_attrs,</span>
<span class="quote">&gt; @@ -811,8 +826,21 @@ static void __iommu_unmap_sg_attrs(struct device</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  	.map_resource = iommu_dma_map_resource,</span>
<span class="quote">&gt;  	.unmap_resource = iommu_dma_unmap_resource,</span>
<span class="quote">&gt;  	.mapping_error = iommu_dma_mapping_error,</span>
<span class="quote">&gt; +	.set_dma_mask = __iommu_set_dma_mask,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +int dma_set_coherent_mask(struct device *dev, u64 mask) {</span>
<span class="quote">&gt; +	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="quote">&gt; +	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	dev-&gt;coherent_dma_mask = mask;</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * TODO: Right now __iommu_setup_dma_ops() gets called too early to do</span>
<span class="quote">&gt;   * everything it needs to - the device is only partially created and</span>
<span class="quote">&gt; the @@ -975,6 +1003,8 @@ void arch_setup_dma_ops(struct device *dev,</span>
<span class="quote">&gt; u64 dma_base, u64 size,</span>
<span class="quote">&gt;  	if (!dev-&gt;dma_ops)</span>
<span class="quote">&gt;  		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;  	__iommu_setup_dma_ops(dev, dma_base, size, iommu);  } diff --git</span>
<span class="quote">&gt; a/drivers/of/of_pci.c b/drivers/of/of_pci.c index 0ee42c3..5804717</span>
<span class="quote">&gt; 100644</span>
<span class="quote">&gt; --- a/drivers/of/of_pci.c</span>
<span class="quote">&gt; +++ b/drivers/of/of_pci.c</span>
<span class="quote">&gt; @@ -283,6 +283,51 @@ int of_pci_get_host_bridge_resources(struct</span>
<span class="quote">&gt; device_node *dev,</span>
<span class="quote">&gt;  	return err;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(of_pci_get_host_bridge_resources);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="quote">&gt; +*paddr, u64 *size) {</span>
<span class="quote">&gt; +	struct device_node *node = of_node_get(np);</span>
<span class="quote">&gt; +	int rlen, naddr, nsize, pna;</span>
<span class="quote">&gt; +	int ret = 0;</span>
<span class="quote">&gt; +	const int na = 3, ns = 2;</span>
<span class="quote">&gt; +	struct of_pci_range_parser parser;</span>
<span class="quote">&gt; +	struct of_pci_range range;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!node)</span>
<span class="quote">&gt; +		return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.node = node;</span>
<span class="quote">&gt; +	parser.pna = of_n_addr_cells(node);</span>
<span class="quote">&gt; +	parser.np = parser.pna + na + ns;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.range = of_get_property(node, &quot;dma-ranges&quot;, &amp;rlen);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!parser.range) {</span>
<span class="quote">&gt; +		pr_debug(&quot;pcie device has no dma-ranges defined for</span>
<span class="quote">&gt; node(%s)\n&quot;, np-&gt;full_name);</span>
<span class="quote">&gt; +		ret = -ENODEV;</span>
<span class="quote">&gt; +		goto out;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	parser.end = parser.range + rlen / sizeof(__be32);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* how do we take care of multiple dma windows ?. */</span>
<span class="quote">&gt; +	for_each_of_pci_range(&amp;parser, &amp;range) {</span>
<span class="quote">&gt; +		*dma_addr = range.pci_addr;</span>
<span class="quote">&gt; +		*size = range.size;</span>
<span class="quote">&gt; +		*paddr = range.cpu_addr;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pr_debug(&quot;dma_addr(%llx) cpu_addr(%llx) size(%llx)\n&quot;,</span>
<span class="quote">&gt; +		 *dma_addr, *paddr, *size);</span>
<span class="quote">&gt; +		 *dma_addr = range.pci_addr;</span>
<span class="quote">&gt; +		 *size = range.size;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +out:</span>
<span class="quote">&gt; +	of_node_put(node);</span>
<span class="quote">&gt; +	return ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(of_pci_get_dma_ranges);</span>
<span class="quote">&gt;  #endif /* CONFIG_OF_ADDRESS */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #ifdef CONFIG_PCI_MSI</span>
<span class="quote">&gt; diff --git a/include/linux/of_pci.h b/include/linux/of_pci.h index</span>
<span class="quote">&gt; 0e0974e..907ace0 100644</span>
<span class="quote">&gt; --- a/include/linux/of_pci.h</span>
<span class="quote">&gt; +++ b/include/linux/of_pci.h</span>
<span class="quote">&gt; @@ -76,6 +76,7 @@ static inline void of_pci_check_probe_only(void) { }</span>
<span class="quote">&gt; int of_pci_get_host_bridge_resources(struct device_node *dev,</span>
<span class="quote">&gt;  			unsigned char busno, unsigned char bus_max,</span>
<span class="quote">&gt;  			struct list_head *resources, resource_size_t *io_base);</span>
<span class="quote">&gt; +int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="quote">&gt; +*paddr, u64 *size);</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  static inline int of_pci_get_host_bridge_resources(struct device_node</span>
<span class="quote">&gt; *dev,</span>
<span class="quote">&gt;  			unsigned char busno, unsigned char bus_max, @@</span>
<span class="quote">&gt; -83,6 +84,11 @@ static inline int</span>
<span class="quote">&gt; of_pci_get_host_bridge_resources(struct</span>
<span class="quote">&gt; device_node *dev,  {</span>
<span class="quote">&gt;  	return -EINVAL;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int of_pci_get_dma_ranges(struct device_node *np, u64</span>
<span class="quote">&gt; +*dma_addr, u64 *paddr, u64 *size) {</span>
<span class="quote">&gt; +	return -EINVAL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #if defined(CONFIG_OF) &amp;&amp; defined(CONFIG_PCI_MSI)</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 1.9.1</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig index</span>
8c7c244..20cfff7 100644
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -217,6 +217,9 @@</span> <span class="p_context"> config NEED_DMA_MAP_STATE  config NEED_SG_DMA_LENGTH</span>
 	def_bool y

<span class="p_add">+config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config SMP
 	def_bool y

<span class="p_header">diff --git a/arch/arm64/include/asm/device.h</span>
b/arch/arm64/include/asm/device.h index 73d5bab..64b4dc3 100644
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -20,6 +20,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 #ifdef CONFIG_IOMMU_API
 	void *iommu;			/* private IOMMU data */
 #endif
<span class="p_add">+	u64 parent_dma_mask;</span>
 	bool dma_coherent;
 };

<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 81cdb2e..5845ecd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -564,6 +564,7 @@</span> <span class="p_context"> static void flush_page(struct device *dev, const void</span>
*virt, phys_addr_t phys)
 	__dma_flush_area(virt, PAGE_SIZE);
 }

<span class="p_add">+</span>
 static void *__iommu_alloc_attrs(struct device *dev, size_t size,
 				 dma_addr_t *handle, gfp_t gfp,
 				 unsigned long attrs)
<span class="p_chunk">@@ -795,6 +796,20 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device</span>
*dev,
 	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);  }

<span class="p_add">+static int __iommu_set_dma_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct dma_map_ops iommu_dma_ops = {
 	.alloc = __iommu_alloc_attrs,
 	.free = __iommu_free_attrs,
<span class="p_chunk">@@ -811,8 +826,21 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device</span>
*dev,
 	.map_resource = iommu_dma_map_resource,
 	.unmap_resource = iommu_dma_unmap_resource,
 	.mapping_error = iommu_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __iommu_set_dma_mask,</span>
 };

<span class="p_add">+int dma_set_coherent_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="p_add">+	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = mask;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /*
  * TODO: Right now __iommu_setup_dma_ops() gets called too early to do
  * everything it needs to - the device is only partially created and the
<span class="p_chunk">@@ -975,6 +1003,8 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64</span>
dma_base, u64 size,
 	if (!dev-&gt;dma_ops)
 		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;

<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);  } diff --git
a/drivers/of/of_pci.c b/drivers/of/of_pci.c index 0ee42c3..5804717 100644
<span class="p_header">--- a/drivers/of/of_pci.c</span>
<span class="p_header">+++ b/drivers/of/of_pci.c</span>
<span class="p_chunk">@@ -283,6 +283,51 @@</span> <span class="p_context"> int of_pci_get_host_bridge_resources(struct</span>
device_node *dev,
 	return err;
 }
 EXPORT_SYMBOL_GPL(of_pci_get_host_bridge_resources);
<span class="p_add">+</span>
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size) {</span>
<span class="p_add">+	struct device_node *node = of_node_get(np);</span>
<span class="p_add">+	int rlen, naddr, nsize, pna;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	const int na = 3, ns = 2;</span>
<span class="p_add">+	struct of_pci_range_parser parser;</span>
<span class="p_add">+	struct of_pci_range range;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!node)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.node = node;</span>
<span class="p_add">+	parser.pna = of_n_addr_cells(node);</span>
<span class="p_add">+	parser.np = parser.pna + na + ns;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.range = of_get_property(node, &quot;dma-ranges&quot;, &amp;rlen);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!parser.range) {</span>
<span class="p_add">+		pr_debug(&quot;pcie device has no dma-ranges defined for</span>
node(%s)\n&quot;, np-&gt;full_name);
<span class="p_add">+		ret = -ENODEV;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.end = parser.range + rlen / sizeof(__be32);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* how do we take care of multiple dma windows ?. */</span>
<span class="p_add">+	for_each_of_pci_range(&amp;parser, &amp;range) {</span>
<span class="p_add">+		*dma_addr = range.pci_addr;</span>
<span class="p_add">+		*size = range.size;</span>
<span class="p_add">+		*paddr = range.cpu_addr;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_debug(&quot;dma_addr(%llx) cpu_addr(%llx) size(%llx)\n&quot;,</span>
<span class="p_add">+		 *dma_addr, *paddr, *size);</span>
<span class="p_add">+		 *dma_addr = range.pci_addr;</span>
<span class="p_add">+		 *size = range.size;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	of_node_put(node);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(of_pci_get_dma_ranges);</span>
 #endif /* CONFIG_OF_ADDRESS */

 #ifdef CONFIG_PCI_MSI
<span class="p_header">diff --git a/include/linux/of_pci.h b/include/linux/of_pci.h index</span>
0e0974e..907ace0 100644
<span class="p_header">--- a/include/linux/of_pci.h</span>
<span class="p_header">+++ b/include/linux/of_pci.h</span>
<span class="p_chunk">@@ -76,6 +76,7 @@</span> <span class="p_context"> static inline void of_pci_check_probe_only(void) { }</span>
int of_pci_get_host_bridge_resources(struct device_node *dev,
 			unsigned char busno, unsigned char bus_max,
 			struct list_head *resources, resource_size_t
*io_base);
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size);</span>
 #else
 static inline int of_pci_get_host_bridge_resources(struct device_node

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



