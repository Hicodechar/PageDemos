
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,03/10] mm/hugetlb: expose hugetlb fault mutex for use by fallocate - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,03/10] mm/hugetlb: expose hugetlb fault mutex for use by fallocate</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 21, 2015, 6:09 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437502184-14269-4-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6837491/mbox/"
   >mbox</a>
|
   <a href="/patch/6837491/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6837491/">/patch/6837491/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id A1EACC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B185020690
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F00CF206DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933718AbbGUSLk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 21 Jul 2015 14:11:40 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:28796 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933473AbbGUSLb (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 21 Jul 2015 14:11:31 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t6LIAdJ5023603
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 21 Jul 2015 18:10:40 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id
	t6LIAdKU019976
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 21 Jul 2015 18:10:39 GMT
Received: from abhmp0017.oracle.com (abhmp0017.oracle.com [141.146.116.23])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	t6LIA56S029051; Tue, 21 Jul 2015 18:10:39 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 21 Jul 2015 11:10:05 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v4 03/10] mm/hugetlb: expose hugetlb fault mutex for use by
	fallocate
Date: Tue, 21 Jul 2015 11:09:37 -0700
Message-Id: &lt;1437502184-14269-4-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1437502184-14269-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1437502184-14269-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 21, 2015, 6:09 p.m.</div>
<pre class="content">
hugetlb page faults are currently synchronized by the table of
mutexes (htlb_fault_mutex_table).  fallocate code will need to
synchronize with the page fault code when it allocates or
deletes pages.  Expose interfaces so that fallocate operations
can be synchronized with page faults.  Minor name changes to
be more consistent with other global hugetlb symbols.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 include/linux/hugetlb.h |  5 +++++
 mm/hugetlb.c            | 20 ++++++++++----------
 2 files changed, 15 insertions(+), 10 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - July 22, 2015, 10:03 p.m.</div>
<pre class="content">
On Tue, 21 Jul 2015 11:09:37 -0700 Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">
&gt; Minor name changes to</span>
<span class="quote">&gt; be more consistent with other global hugetlb symbols.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	kfree(htlb_fault_mutex_table);</span>
<span class="quote">&gt; +	kfree(hugetlb_fault_mutex_table);</span>

yay ;)
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index 667cf44..933da39 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -88,6 +88,11 @@</span> <span class="p_context"> int dequeue_hwpoisoned_huge_page(struct page *page);</span>
 bool isolate_huge_page(struct page *page, struct list_head *list);
 void putback_active_hugepage(struct page *page);
 void free_huge_page(struct page *page);
<span class="p_add">+extern struct mutex *hugetlb_fault_mutex_table;</span>
<span class="p_add">+u32 hugetlb_fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="p_add">+				struct vm_area_struct *vma,</span>
<span class="p_add">+				struct address_space *mapping,</span>
<span class="p_add">+				pgoff_t idx, unsigned long address);</span>
 
 #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE
 pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index a573396..db19f4e 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -64,7 +64,7 @@</span> <span class="p_context"> DEFINE_SPINLOCK(hugetlb_lock);</span>
  * prevent spurious OOMs when the hugepage pool is fully utilized.
  */
 static int num_fault_mutexes;
<span class="p_del">-static struct mutex *htlb_fault_mutex_table ____cacheline_aligned_in_smp;</span>
<span class="p_add">+struct mutex *hugetlb_fault_mutex_table ____cacheline_aligned_in_smp;</span>
 
 /* Forward declaration */
 static int hugetlb_acct_memory(struct hstate *h, long delta);
<span class="p_chunk">@@ -2484,7 +2484,7 @@</span> <span class="p_context"> static void __exit hugetlb_exit(void)</span>
 	}
 
 	kobject_put(hugepages_kobj);
<span class="p_del">-	kfree(htlb_fault_mutex_table);</span>
<span class="p_add">+	kfree(hugetlb_fault_mutex_table);</span>
 }
 module_exit(hugetlb_exit);
 
<span class="p_chunk">@@ -2517,12 +2517,12 @@</span> <span class="p_context"> static int __init hugetlb_init(void)</span>
 #else
 	num_fault_mutexes = 1;
 #endif
<span class="p_del">-	htlb_fault_mutex_table =</span>
<span class="p_add">+	hugetlb_fault_mutex_table =</span>
 		kmalloc(sizeof(struct mutex) * num_fault_mutexes, GFP_KERNEL);
<span class="p_del">-	BUG_ON(!htlb_fault_mutex_table);</span>
<span class="p_add">+	BUG_ON(!hugetlb_fault_mutex_table);</span>
 
 	for (i = 0; i &lt; num_fault_mutexes; i++)
<span class="p_del">-		mutex_init(&amp;htlb_fault_mutex_table[i]);</span>
<span class="p_add">+		mutex_init(&amp;hugetlb_fault_mutex_table[i]);</span>
 	return 0;
 }
 module_init(hugetlb_init);
<span class="p_chunk">@@ -3456,7 +3456,7 @@</span> <span class="p_context"> backout_unlocked:</span>
 }
 
 #ifdef CONFIG_SMP
<span class="p_del">-static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="p_add">+u32 hugetlb_fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 			    struct vm_area_struct *vma,
 			    struct address_space *mapping,
 			    pgoff_t idx, unsigned long address)
<span class="p_chunk">@@ -3481,7 +3481,7 @@</span> <span class="p_context"> static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
  * For uniprocesor systems we always use a single mutex, so just
  * return 0 and avoid the hashing overhead.
  */
<span class="p_del">-static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="p_add">+u32 hugetlb_fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 			    struct vm_area_struct *vma,
 			    struct address_space *mapping,
 			    pgoff_t idx, unsigned long address)
<span class="p_chunk">@@ -3529,8 +3529,8 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	 * get spurious allocation failures if two CPUs race to instantiate
 	 * the same page in the page cache.
 	 */
<span class="p_del">-	hash = fault_mutex_hash(h, mm, vma, mapping, idx, address);</span>
<span class="p_del">-	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+	hash = hugetlb_fault_mutex_hash(h, mm, vma, mapping, idx, address);</span>
<span class="p_add">+	mutex_lock(&amp;hugetlb_fault_mutex_table[hash]);</span>
 
 	entry = huge_ptep_get(ptep);
 	if (huge_pte_none(entry)) {
<span class="p_chunk">@@ -3615,7 +3615,7 @@</span> <span class="p_context"> out_ptl:</span>
 		put_page(pagecache_page);
 	}
 out_mutex:
<span class="p_del">-	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+	mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);</span>
 	/*
 	 * Generally it&#39;s safe to hold refcount during waiting page lock. But
 	 * here we just wait to defer the next page fault to avoid busy loop and

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



