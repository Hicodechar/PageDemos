
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.3,138/157] ARM/arm64: KVM: test properly for a PTEs uncachedness - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.3,138/157] ARM/arm64: KVM: test properly for a PTEs uncachedness</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 27, 2016, 6:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160127180940.056903570@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8137111/mbox/"
   >mbox</a>
|
   <a href="/patch/8137111/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8137111/">/patch/8137111/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 75E6D9F38B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Jan 2016 18:32:02 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C111420253
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Jan 2016 18:32:00 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A97D72024F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Jan 2016 18:31:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S935274AbcA0Sb4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 27 Jan 2016 13:31:56 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:50856 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S935118AbcA0SYq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 27 Jan 2016 13:24:46 -0500
Received: from localhost (unknown [104.135.8.89])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 26F111020;
	Wed, 27 Jan 2016 18:24:38 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Pavel Fedin &lt;p.fedin@samsung.com&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;
Subject: [PATCH 4.3 138/157] ARM/arm64: KVM: test properly for a PTEs
	uncachedness
Date: Wed, 27 Jan 2016 10:13:25 -0800
Message-Id: &lt;20160127180940.056903570@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;20160127180932.533735338@linuxfoundation.org&gt;
References: &lt;20160127180932.533735338@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 27, 2016, 6:13 p.m.</div>
<pre class="content">
4.3-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>

commit e6fab54423450d699a09ec2b899473a541f61971 upstream.

The open coded tests for checking whether a PTE maps a page as
uncached use a flawed &#39;(pte_val(xxx) &amp; CONST) != CONST&#39; pattern,
which is not guaranteed to work since the type of a mapping is
not a set of mutually exclusive bits

For HYP mappings, the type is an index into the MAIR table (i.e, the
index itself does not contain any information whatsoever about the
type of the mapping), and for stage-2 mappings it is a bit field where
normal memory and device types are defined as follows:

    #define MT_S2_NORMAL            0xf
    #define MT_S2_DEVICE_nGnRE      0x1

I.e., masking *and* comparing with the latter matches on the former,
and we have been getting lucky merely because the S2 device mappings
also have the PTE_UXN bit set, or we would misidentify memory mappings
as device mappings.

Since the unmap_range() code path (which contains one instance of the
flawed test) is used both for HYP mappings and stage-2 mappings, and
considering the difference between the two, it is non-trivial to fix
this by rewriting the tests in place, as it would involve passing
down the type of mapping through all the functions.

However, since HYP mappings and stage-2 mappings both deal with host
physical addresses, we can simply check whether the mapping is backed
by memory that is managed by the host kernel, and only perform the
D-cache maintenance if this is the case.
<span class="signed-off-by">
Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Pavel Fedin &lt;p.fedin@samsung.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/arm/kvm/mmu.c |   15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68151">Christoffer Dall</a> - Feb. 1, 2016, 11:02 a.m.</div>
<pre class="content">
On Wed, Jan 27, 2016 at 10:13:25AM -0800, Greg Kroah-Hartman wrote:
<span class="quote">&gt; 4.3-stable review patch.  If anyone has any objections, please let me know.</span>

This patch should not be applied independently without the fix in
mainline:

0de58f852875a0f0dcfb120bb8433e4e73c7803b
(ARM/arm64: KVM: correct PTE uncachedness check, 2015-12-03)

Thanks,
-Christoffer
<span class="quote">
&gt; ------------------</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; commit e6fab54423450d699a09ec2b899473a541f61971 upstream.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The open coded tests for checking whether a PTE maps a page as</span>
<span class="quote">&gt; uncached use a flawed &#39;(pte_val(xxx) &amp; CONST) != CONST&#39; pattern,</span>
<span class="quote">&gt; which is not guaranteed to work since the type of a mapping is</span>
<span class="quote">&gt; not a set of mutually exclusive bits</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For HYP mappings, the type is an index into the MAIR table (i.e, the</span>
<span class="quote">&gt; index itself does not contain any information whatsoever about the</span>
<span class="quote">&gt; type of the mapping), and for stage-2 mappings it is a bit field where</span>
<span class="quote">&gt; normal memory and device types are defined as follows:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     #define MT_S2_NORMAL            0xf</span>
<span class="quote">&gt;     #define MT_S2_DEVICE_nGnRE      0x1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I.e., masking *and* comparing with the latter matches on the former,</span>
<span class="quote">&gt; and we have been getting lucky merely because the S2 device mappings</span>
<span class="quote">&gt; also have the PTE_UXN bit set, or we would misidentify memory mappings</span>
<span class="quote">&gt; as device mappings.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since the unmap_range() code path (which contains one instance of the</span>
<span class="quote">&gt; flawed test) is used both for HYP mappings and stage-2 mappings, and</span>
<span class="quote">&gt; considering the difference between the two, it is non-trivial to fix</span>
<span class="quote">&gt; this by rewriting the tests in place, as it would involve passing</span>
<span class="quote">&gt; down the type of mapping through all the functions.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; However, since HYP mappings and stage-2 mappings both deal with host</span>
<span class="quote">&gt; physical addresses, we can simply check whether the mapping is backed</span>
<span class="quote">&gt; by memory that is managed by the host kernel, and only perform the</span>
<span class="quote">&gt; D-cache maintenance if this is the case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Pavel Fedin &lt;p.fedin@samsung.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/kvm/mmu.c |   15 +++++++--------</span>
<span class="quote">&gt;  1 file changed, 7 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; @@ -98,6 +98,11 @@ static void kvm_flush_dcache_pud(pud_t p</span>
<span class="quote">&gt;  	__kvm_flush_dcache_pud(pud);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !pfn_valid(pfn);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * stage2_dissolve_pmd() - clear and flush huge PMD entry</span>
<span class="quote">&gt;   * @kvm:	pointer to kvm structure.</span>
<span class="quote">&gt; @@ -213,7 +218,7 @@ static void unmap_ptes(struct kvm *kvm,</span>
<span class="quote">&gt;  			kvm_tlb_flush_vmid_ipa(kvm, addr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  			/* No need to invalidate the cache for device mappings */</span>
<span class="quote">&gt; -			if ((pte_val(old_pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="quote">&gt; +			if (!kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
<span class="quote">&gt;  				kvm_flush_dcache_pte(old_pte);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  			put_page(virt_to_page(pte));</span>
<span class="quote">&gt; @@ -305,8 +310,7 @@ static void stage2_flush_ptes(struct kvm</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pte = pte_offset_kernel(pmd, addr);</span>
<span class="quote">&gt;  	do {</span>
<span class="quote">&gt; -		if (!pte_none(*pte) &amp;&amp;</span>
<span class="quote">&gt; -		    (pte_val(*pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="quote">&gt; +		if (!pte_none(*pte) &amp;&amp; !kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
<span class="quote">&gt;  			kvm_flush_dcache_pte(*pte);</span>
<span class="quote">&gt;  	} while (pte++, addr += PAGE_SIZE, addr != end);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -1037,11 +1041,6 @@ static bool kvm_is_write_fault(struct kv</span>
<span class="quote">&gt;  	return kvm_vcpu_dabt_iswrite(vcpu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	return !pfn_valid(pfn);</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * stage2_wp_ptes - write protect PMD range</span>
<span class="quote">&gt;   * @pmd:	pointer to pmd entry</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=130491">Pavel Fedin</a> - Feb. 1, 2016, 1:07 p.m.</div>
<pre class="content">
Hello!
<span class="quote">
&gt; This patch should not be applied independently without the fix in</span>
<span class="quote">&gt; mainline:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 0de58f852875a0f0dcfb120bb8433e4e73c7803b</span>
<span class="quote">&gt; (ARM/arm64: KVM: correct PTE uncachedness check, 2015-12-03)</span>

 It&#39;s ok, both are queued.

Kind regards,
Pavel Fedin
Senior Engineer
Samsung Electronics Research center Russia
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/arm/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/kvm/mmu.c</span>
<span class="p_chunk">@@ -98,6 +98,11 @@</span> <span class="p_context"> static void kvm_flush_dcache_pud(pud_t p</span>
 	__kvm_flush_dcache_pud(pud);
 }
 
<span class="p_add">+static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !pfn_valid(pfn);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /**
  * stage2_dissolve_pmd() - clear and flush huge PMD entry
  * @kvm:	pointer to kvm structure.
<span class="p_chunk">@@ -213,7 +218,7 @@</span> <span class="p_context"> static void unmap_ptes(struct kvm *kvm,</span>
 			kvm_tlb_flush_vmid_ipa(kvm, addr);
 
 			/* No need to invalidate the cache for device mappings */
<span class="p_del">-			if ((pte_val(old_pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="p_add">+			if (!kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
 				kvm_flush_dcache_pte(old_pte);
 
 			put_page(virt_to_page(pte));
<span class="p_chunk">@@ -305,8 +310,7 @@</span> <span class="p_context"> static void stage2_flush_ptes(struct kvm</span>
 
 	pte = pte_offset_kernel(pmd, addr);
 	do {
<span class="p_del">-		if (!pte_none(*pte) &amp;&amp;</span>
<span class="p_del">-		    (pte_val(*pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="p_add">+		if (!pte_none(*pte) &amp;&amp; !kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
 			kvm_flush_dcache_pte(*pte);
 	} while (pte++, addr += PAGE_SIZE, addr != end);
 }
<span class="p_chunk">@@ -1037,11 +1041,6 @@</span> <span class="p_context"> static bool kvm_is_write_fault(struct kv</span>
 	return kvm_vcpu_dabt_iswrite(vcpu);
 }
 
<span class="p_del">-static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return !pfn_valid(pfn);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /**
  * stage2_wp_ptes - write protect PMD range
  * @pmd:	pointer to pmd entry

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



