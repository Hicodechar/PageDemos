
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/platform] x86/platform/uv/BAU: Add payload descriptor qualifier - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/platform] x86/platform/uv/BAU: Add payload descriptor qualifier</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 13, 2017, 1:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-e9be36443cecda1be20b2cc3b891676ff2af9dff@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9620897/mbox/"
   >mbox</a>
|
   <a href="/patch/9620897/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9620897/">/patch/9620897/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3FCAA604A9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Mar 2017 13:40:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 31FC32849F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Mar 2017 13:40:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 26AD5284CC; Mon, 13 Mar 2017 13:40:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D5432849F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Mar 2017 13:40:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752414AbdCMNkk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 13 Mar 2017 09:40:40 -0400
Received: from terminus.zytor.com ([65.50.211.136]:57842 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750860AbdCMNkc (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 13 Mar 2017 09:40:32 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v2DDeMr5029230;
	Mon, 13 Mar 2017 06:40:22 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v2DDeMEf029218;
	Mon, 13 Mar 2017 06:40:22 -0700
Date: Mon, 13 Mar 2017 06:40:22 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Andrew Banman &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-e9be36443cecda1be20b2cc3b891676ff2af9dff@git.kernel.org&gt;
Cc: abanman@hpe.com, tglx@linutronix.de, linux-kernel@vger.kernel.org,
	mike.travis@hpe.com, hpa@zytor.com, mingo@kernel.org
Reply-To: abanman@hpe.com, tglx@linutronix.de,
	linux-kernel@vger.kernel.org, hpa@zytor.com, mike.travis@hpe.com,
	mingo@kernel.org
In-Reply-To: &lt;1489077734-111753-3-git-send-email-abanman@hpe.com&gt;
References: &lt;1489077734-111753-3-git-send-email-abanman@hpe.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/platform] x86/platform/uv/BAU: Add payload descriptor
	qualifier
Git-Commit-ID: e9be36443cecda1be20b2cc3b891676ff2af9dff
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - March 13, 2017, 1:40 p.m.</div>
<pre class="content">
Commit-ID:  e9be36443cecda1be20b2cc3b891676ff2af9dff
Gitweb:     http://git.kernel.org/tip/e9be36443cecda1be20b2cc3b891676ff2af9dff
Author:     Andrew Banman &lt;abanman@hpe.com&gt;
AuthorDate: Thu, 9 Mar 2017 10:42:10 -0600
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Mon, 13 Mar 2017 14:26:28 +0100

x86/platform/uv/BAU: Add payload descriptor qualifier

On UV4, the destination agent verifies each message by checking the
descriptor qualifier field of the message payload. Messages without this
field set to 0x534749 will cause a hub error to assert. Split
bau_message_payload into uv1_2_3 and uv4 versions to account for the
different payload formats.

Enforce the size of each field by using the appropriate u** integer type.
Replace extraneous comments with KernelDoc comment.
<span class="signed-off-by">
Signed-off-by: Andrew Banman &lt;abanman@hpe.com&gt;</span>
<span class="acked-by">Acked-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;mike.travis@hpe.com&gt;</span>
Cc: sivanich@hpe.com
Cc: rja@hpe.com
Cc: akpm@linux-foundation.org
Link: http://lkml.kernel.org/r/1489077734-111753-3-git-send-email-abanman@hpe.com
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>

---
 arch/x86/include/asm/uv/uv_bau.h | 41 ++++++++++++++++++++++++++++------------
 arch/x86/platform/uv/tlb_uv.c    | 27 ++++++++++++++++++--------
 2 files changed, 48 insertions(+), 20 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/uv/uv_bau.h b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">index 768093f..dcd63ed 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_chunk">@@ -185,6 +185,8 @@</span> <span class="p_context"></span>
 #define MSG_REGULAR			1
 #define MSG_RETRY			2
 
<span class="p_add">+#define BAU_DESC_QUALIFIER		0x534749</span>
<span class="p_add">+</span>
 enum uv_bau_version {
 	UV_BAU_V1 = 1,
 	UV_BAU_V2,
<span class="p_chunk">@@ -229,20 +231,32 @@</span> <span class="p_context"> struct bau_local_cpumask {</span>
  *   the s/w ack bit vector  ]
  */
 
<span class="p_del">-/*</span>
<span class="p_del">- * The payload is software-defined for INTD transactions</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * struct uv1_2_3_bau_msg_payload - defines payload for INTD transactions</span>
<span class="p_add">+ * @address:		Signifies a page or all TLB&#39;s of the cpu</span>
<span class="p_add">+ * @sending_cpu:	CPU from which the message originates</span>
<span class="p_add">+ * @acknowledge_count:	CPUs on the destination Hub that received the interrupt</span>
  */
<span class="p_del">-struct bau_msg_payload {</span>
<span class="p_del">-	unsigned long	address;		/* signifies a page or all</span>
<span class="p_del">-						   TLB&#39;s of the cpu */</span>
<span class="p_del">-	/* 64 bits */</span>
<span class="p_del">-	unsigned short	sending_cpu;		/* filled in by sender */</span>
<span class="p_del">-	/* 16 bits */</span>
<span class="p_del">-	unsigned short	acknowledge_count;	/* filled in by destination */</span>
<span class="p_del">-	/* 16 bits */</span>
<span class="p_del">-	unsigned int	reserved1:32;		/* not usable */</span>
<span class="p_add">+struct uv1_2_3_bau_msg_payload {</span>
<span class="p_add">+	u64 address;</span>
<span class="p_add">+	u16 sending_cpu;</span>
<span class="p_add">+	u16 acknowledge_count;</span>
 };
 
<span class="p_add">+/**</span>
<span class="p_add">+ * struct uv4_bau_msg_payload - defines payload for INTD transactions</span>
<span class="p_add">+ * @address:		Signifies a page or all TLB&#39;s of the cpu</span>
<span class="p_add">+ * @sending_cpu:	CPU from which the message originates</span>
<span class="p_add">+ * @acknowledge_count:	CPUs on the destination Hub that received the interrupt</span>
<span class="p_add">+ * @qualifier:		Set by source to verify origin of INTD broadcast</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct uv4_bau_msg_payload {</span>
<span class="p_add">+	u64 address;</span>
<span class="p_add">+	u16 sending_cpu;</span>
<span class="p_add">+	u16 acknowledge_count;</span>
<span class="p_add">+	u32 reserved:8;</span>
<span class="p_add">+	u32 qualifier:24;</span>
<span class="p_add">+};</span>
 
 /*
  * UV1 Message header:  16 bytes (128 bits) (bytes 0x30-0x3f of descriptor)
<span class="p_chunk">@@ -418,7 +432,10 @@</span> <span class="p_context"> struct bau_desc {</span>
 		struct uv2_3_bau_msg_header	uv2_3_hdr;
 	} header;
 
<span class="p_del">-	struct bau_msg_payload			payload;</span>
<span class="p_add">+	union bau_payload_header {</span>
<span class="p_add">+		struct uv1_2_3_bau_msg_payload	uv1_2_3;</span>
<span class="p_add">+		struct uv4_bau_msg_payload	uv4;</span>
<span class="p_add">+	} payload;</span>
 };
 /* UV1:
  *   -payload--    ---------header------
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index f4f5aa6..70721c4 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -1114,15 +1114,12 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
 						unsigned long end,
 						unsigned int cpu)
 {
<span class="p_del">-	int locals = 0;</span>
<span class="p_del">-	int remotes = 0;</span>
<span class="p_del">-	int hubs = 0;</span>
<span class="p_add">+	int locals = 0, remotes = 0, hubs = 0;</span>
 	struct bau_desc *bau_desc;
 	struct cpumask *flush_mask;
 	struct ptc_stats *stat;
 	struct bau_control *bcp;
<span class="p_del">-	unsigned long descriptor_status;</span>
<span class="p_del">-	unsigned long status;</span>
<span class="p_add">+	unsigned long descriptor_status, status, address;</span>
 
 	bcp = &amp;per_cpu(bau_control, cpu);
 
<span class="p_chunk">@@ -1171,10 +1168,24 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
 	record_send_statistics(stat, locals, hubs, remotes, bau_desc);
 
 	if (!end || (end - start) &lt;= PAGE_SIZE)
<span class="p_del">-		bau_desc-&gt;payload.address = start;</span>
<span class="p_add">+		address = start;</span>
 	else
<span class="p_del">-		bau_desc-&gt;payload.address = TLB_FLUSH_ALL;</span>
<span class="p_del">-	bau_desc-&gt;payload.sending_cpu = cpu;</span>
<span class="p_add">+		address = TLB_FLUSH_ALL;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (bcp-&gt;uvhub_version) {</span>
<span class="p_add">+	case UV_BAU_V1:</span>
<span class="p_add">+	case UV_BAU_V2:</span>
<span class="p_add">+	case UV_BAU_V3:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.sending_cpu = cpu;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case UV_BAU_V4:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.sending_cpu = cpu;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.qualifier = BAU_DESC_QUALIFIER;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * uv_flush_send_and_wait returns 0 if all cpu&#39;s were messaged,
 	 * or 1 if it gave up and the original cpumask should be returned.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



