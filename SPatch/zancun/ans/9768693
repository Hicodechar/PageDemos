
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv7,08/14] x86/boot/64: Rename init_level4_pgt and early_level4_pgt - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv7,08/14] x86/boot/64: Rename init_level4_pgt and early_level4_pgt</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 6, 2017, 11:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170606113133.22974-9-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9768693/mbox/"
   >mbox</a>
|
   <a href="/patch/9768693/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9768693/">/patch/9768693/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	23C646034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Jun 2017 11:32:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 148AB2841C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Jun 2017 11:32:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0975B2841E; Tue,  6 Jun 2017 11:32:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3E83428453
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Jun 2017 11:32:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751757AbdFFLcD (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 6 Jun 2017 07:32:03 -0400
Received: from mga07.intel.com ([134.134.136.100]:23487 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751703AbdFFLbz (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 6 Jun 2017 07:31:55 -0400
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by orsmga105.jf.intel.com with ESMTP; 06 Jun 2017 04:31:44 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.39,306,1493708400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;977334941&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga003.jf.intel.com with ESMTP; 06 Jun 2017 04:31:40 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 99B9163B; Tue,  6 Jun 2017 14:31:35 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	linux-arch@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv7 08/14] x86/boot/64: Rename init_level4_pgt and
	early_level4_pgt
Date: Tue,  6 Jun 2017 14:31:27 +0300
Message-Id: &lt;20170606113133.22974-9-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170606113133.22974-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170606113133.22974-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - June 6, 2017, 11:31 a.m.</div>
<pre class="content">
With CONFIG_X86_5LEVEL=y, level 4 is no longer top level of page tables.

Let&#39;s give these variable more generic names: init_top_pgt and
early_top_pgt.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
---
 arch/x86/include/asm/pgtable.h     |  2 +-
 arch/x86/include/asm/pgtable_64.h  |  4 ++--
 arch/x86/kernel/espfix_64.c        |  2 +-
 arch/x86/kernel/head64.c           | 18 +++++++++---------
 arch/x86/kernel/head_64.S          | 14 +++++++-------
 arch/x86/kernel/machine_kexec_64.c |  2 +-
 arch/x86/mm/dump_pagetables.c      |  2 +-
 arch/x86/mm/kasan_init_64.c        | 12 ++++++------
 arch/x86/realmode/init.c           |  2 +-
 arch/x86/xen/mmu_pv.c              | 16 ++++++++--------
 arch/x86/xen/xen-pvh.S             |  2 +-
 11 files changed, 38 insertions(+), 38 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index 942482ac36a8..77037b6f1caa 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -922,7 +922,7 @@</span> <span class="p_context"> extern pgd_t trampoline_pgd_entry;</span>
 static inline void __meminit init_trampoline_default(void)
 {
 	/* Default trampoline pgd value */
<span class="p_del">-	trampoline_pgd_entry = init_level4_pgt[pgd_index(__PAGE_OFFSET)];</span>
<span class="p_add">+	trampoline_pgd_entry = init_top_pgt[pgd_index(__PAGE_OFFSET)];</span>
 }
 # ifdef CONFIG_RANDOMIZE_MEMORY
 void __meminit init_trampoline(void);
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 12ea31274eb6..affcb2a9c563 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -20,9 +20,9 @@</span> <span class="p_context"> extern pmd_t level2_kernel_pgt[512];</span>
 extern pmd_t level2_fixmap_pgt[512];
 extern pmd_t level2_ident_pgt[512];
 extern pte_t level1_fixmap_pgt[512];
<span class="p_del">-extern pgd_t init_level4_pgt[];</span>
<span class="p_add">+extern pgd_t init_top_pgt[];</span>
 
<span class="p_del">-#define swapper_pg_dir init_level4_pgt</span>
<span class="p_add">+#define swapper_pg_dir init_top_pgt</span>
 
 extern void paging_init(void);
 
<span class="p_header">diff --git a/arch/x86/kernel/espfix_64.c b/arch/x86/kernel/espfix_64.c</span>
<span class="p_header">index 8e598a1ad986..6b91e2eb8d3f 100644</span>
<span class="p_header">--- a/arch/x86/kernel/espfix_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/espfix_64.c</span>
<span class="p_chunk">@@ -125,7 +125,7 @@</span> <span class="p_context"> void __init init_espfix_bsp(void)</span>
 	p4d_t *p4d;
 
 	/* Install the espfix pud into the kernel page directory */
<span class="p_del">-	pgd = &amp;init_level4_pgt[pgd_index(ESPFIX_BASE_ADDR)];</span>
<span class="p_add">+	pgd = &amp;init_top_pgt[pgd_index(ESPFIX_BASE_ADDR)];</span>
 	p4d = p4d_alloc(&amp;init_mm, pgd, ESPFIX_BASE_ADDR);
 	p4d_populate(&amp;init_mm, p4d, espfix_pud_page);
 
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index b59c550b1d3a..f8a2f34fa15d 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -33,7 +33,7 @@</span> <span class="p_context"></span>
 /*
  * Manage page tables very early on.
  */
<span class="p_del">-extern pgd_t early_level4_pgt[PTRS_PER_PGD];</span>
<span class="p_add">+extern pgd_t early_top_pgt[PTRS_PER_PGD];</span>
 extern pmd_t early_dynamic_pgts[EARLY_DYNAMIC_PAGE_TABLES][PTRS_PER_PMD];
 static unsigned int __initdata next_early_pgt;
 pmdval_t early_pmd_flags = __PAGE_KERNEL_LARGE &amp; ~(_PAGE_GLOBAL | _PAGE_NX);
<span class="p_chunk">@@ -67,7 +67,7 @@</span> <span class="p_context"> void __init __startup_64(unsigned long physaddr)</span>
 
 	/* Fixup the physical addresses in the page table */
 
<span class="p_del">-	pgd = fixup_pointer(&amp;early_level4_pgt, physaddr);</span>
<span class="p_add">+	pgd = fixup_pointer(&amp;early_top_pgt, physaddr);</span>
 	pgd[pgd_index(__START_KERNEL_map)] += load_delta;
 
 	pud = fixup_pointer(&amp;level3_kernel_pgt, physaddr);
<span class="p_chunk">@@ -124,9 +124,9 @@</span> <span class="p_context"> void __init __startup_64(unsigned long physaddr)</span>
 /* Wipe all early page tables except for the kernel symbol map */
 static void __init reset_early_page_tables(void)
 {
<span class="p_del">-	memset(early_level4_pgt, 0, sizeof(pgd_t)*(PTRS_PER_PGD-1));</span>
<span class="p_add">+	memset(early_top_pgt, 0, sizeof(pgd_t)*(PTRS_PER_PGD-1));</span>
 	next_early_pgt = 0;
<span class="p_del">-	write_cr3(__pa_nodebug(early_level4_pgt));</span>
<span class="p_add">+	write_cr3(__pa_nodebug(early_top_pgt));</span>
 }
 
 /* Create a new PMD entry */
<span class="p_chunk">@@ -138,11 +138,11 @@</span> <span class="p_context"> int __init early_make_pgtable(unsigned long address)</span>
 	pmdval_t pmd, *pmd_p;
 
 	/* Invalid address or early pgt is done ?  */
<span class="p_del">-	if (physaddr &gt;= MAXMEM || read_cr3() != __pa_nodebug(early_level4_pgt))</span>
<span class="p_add">+	if (physaddr &gt;= MAXMEM || read_cr3() != __pa_nodebug(early_top_pgt))</span>
 		return -1;
 
 again:
<span class="p_del">-	pgd_p = &amp;early_level4_pgt[pgd_index(address)].pgd;</span>
<span class="p_add">+	pgd_p = &amp;early_top_pgt[pgd_index(address)].pgd;</span>
 	pgd = *pgd_p;
 
 	/*
<span class="p_chunk">@@ -239,7 +239,7 @@</span> <span class="p_context"> asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)</span>
 
 	clear_bss();
 
<span class="p_del">-	clear_page(init_level4_pgt);</span>
<span class="p_add">+	clear_page(init_top_pgt);</span>
 
 	kasan_early_init();
 
<span class="p_chunk">@@ -254,8 +254,8 @@</span> <span class="p_context"> asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)</span>
 	 */
 	load_ucode_bsp();
 
<span class="p_del">-	/* set init_level4_pgt kernel high mapping*/</span>
<span class="p_del">-	init_level4_pgt[511] = early_level4_pgt[511];</span>
<span class="p_add">+	/* set init_top_pgt kernel high mapping*/</span>
<span class="p_add">+	init_top_pgt[511] = early_top_pgt[511];</span>
 
 	x86_64_start_reservations(real_mode_data);
 }
<span class="p_header">diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S</span>
<span class="p_header">index 1432d530fa35..0ae0bad4d4d5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/x86/kernel/head_64.S</span>
<span class="p_chunk">@@ -77,7 +77,7 @@</span> <span class="p_context"> startup_64:</span>
 	call	__startup_64
 	popq	%rsi
 
<span class="p_del">-	movq	$(early_level4_pgt - __START_KERNEL_map), %rax</span>
<span class="p_add">+	movq	$(early_top_pgt - __START_KERNEL_map), %rax</span>
 	jmp 1f
 ENTRY(secondary_startup_64)
 	/*
<span class="p_chunk">@@ -97,7 +97,7 @@</span> <span class="p_context"> ENTRY(secondary_startup_64)</span>
 	/* Sanitize CPU configuration */
 	call verify_cpu
 
<span class="p_del">-	movq	$(init_level4_pgt - __START_KERNEL_map), %rax</span>
<span class="p_add">+	movq	$(init_top_pgt - __START_KERNEL_map), %rax</span>
 1:
 
 	/* Enable PAE mode and PGE */
<span class="p_chunk">@@ -328,7 +328,7 @@</span> <span class="p_context"> GLOBAL(name)</span>
 	.endr
 
 	__INITDATA
<span class="p_del">-NEXT_PAGE(early_level4_pgt)</span>
<span class="p_add">+NEXT_PAGE(early_top_pgt)</span>
 	.fill	511,8,0
 	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE
 
<span class="p_chunk">@@ -338,14 +338,14 @@</span> <span class="p_context"> NEXT_PAGE(early_dynamic_pgts)</span>
 	.data
 
 #ifndef CONFIG_XEN
<span class="p_del">-NEXT_PAGE(init_level4_pgt)</span>
<span class="p_add">+NEXT_PAGE(init_top_pgt)</span>
 	.fill	512,8,0
 #else
<span class="p_del">-NEXT_PAGE(init_level4_pgt)</span>
<span class="p_add">+NEXT_PAGE(init_top_pgt)</span>
 	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE
<span class="p_del">-	.org    init_level4_pgt + L4_PAGE_OFFSET*8, 0</span>
<span class="p_add">+	.org    init_top_pgt + L4_PAGE_OFFSET*8, 0</span>
 	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE
<span class="p_del">-	.org    init_level4_pgt + L4_START_KERNEL*8, 0</span>
<span class="p_add">+	.org    init_top_pgt + L4_START_KERNEL*8, 0</span>
 	/* (2^48-(2*1024*1024*1024))/(2^39) = 511 */
 	.quad   level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE
 
<span class="p_header">diff --git a/arch/x86/kernel/machine_kexec_64.c b/arch/x86/kernel/machine_kexec_64.c</span>
<span class="p_header">index 6f5ca4ebe6e5..cb0a30473c23 100644</span>
<span class="p_header">--- a/arch/x86/kernel/machine_kexec_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/machine_kexec_64.c</span>
<span class="p_chunk">@@ -347,7 +347,7 @@</span> <span class="p_context"> void machine_kexec(struct kimage *image)</span>
 void arch_crash_save_vmcoreinfo(void)
 {
 	VMCOREINFO_NUMBER(phys_base);
<span class="p_del">-	VMCOREINFO_SYMBOL(init_level4_pgt);</span>
<span class="p_add">+	VMCOREINFO_SYMBOL(init_top_pgt);</span>
 
 #ifdef CONFIG_NUMA
 	VMCOREINFO_SYMBOL(node_data);
<span class="p_header">diff --git a/arch/x86/mm/dump_pagetables.c b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">index bce6990b1d81..0470826d2bdc 100644</span>
<span class="p_header">--- a/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">+++ b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_chunk">@@ -431,7 +431,7 @@</span> <span class="p_context"> static void ptdump_walk_pgd_level_core(struct seq_file *m, pgd_t *pgd,</span>
 				       bool checkwx)
 {
 #ifdef CONFIG_X86_64
<span class="p_del">-	pgd_t *start = (pgd_t *) &amp;init_level4_pgt;</span>
<span class="p_add">+	pgd_t *start = (pgd_t *) &amp;init_top_pgt;</span>
 #else
 	pgd_t *start = swapper_pg_dir;
 #endif
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 0c7d8129bed6..88215ac16b24 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -12,7 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/sections.h&gt;
 
<span class="p_del">-extern pgd_t early_level4_pgt[PTRS_PER_PGD];</span>
<span class="p_add">+extern pgd_t early_top_pgt[PTRS_PER_PGD];</span>
 extern struct range pfn_mapped[E820_MAX_ENTRIES];
 
 static int __init map_range(struct range *range)
<span class="p_chunk">@@ -109,8 +109,8 @@</span> <span class="p_context"> void __init kasan_early_init(void)</span>
 	for (i = 0; CONFIG_PGTABLE_LEVELS &gt;= 5 &amp;&amp; i &lt; PTRS_PER_P4D; i++)
 		kasan_zero_p4d[i] = __p4d(p4d_val);
 
<span class="p_del">-	kasan_map_early_shadow(early_level4_pgt);</span>
<span class="p_del">-	kasan_map_early_shadow(init_level4_pgt);</span>
<span class="p_add">+	kasan_map_early_shadow(early_top_pgt);</span>
<span class="p_add">+	kasan_map_early_shadow(init_top_pgt);</span>
 }
 
 void __init kasan_init(void)
<span class="p_chunk">@@ -121,8 +121,8 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 	register_die_notifier(&amp;kasan_die_notifier);
 #endif
 
<span class="p_del">-	memcpy(early_level4_pgt, init_level4_pgt, sizeof(early_level4_pgt));</span>
<span class="p_del">-	load_cr3(early_level4_pgt);</span>
<span class="p_add">+	memcpy(early_top_pgt, init_top_pgt, sizeof(early_top_pgt));</span>
<span class="p_add">+	load_cr3(early_top_pgt);</span>
 	__flush_tlb_all();
 
 	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);
<span class="p_chunk">@@ -148,7 +148,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),
 			(void *)KASAN_SHADOW_END);
 
<span class="p_del">-	load_cr3(init_level4_pgt);</span>
<span class="p_add">+	load_cr3(init_top_pgt);</span>
 	__flush_tlb_all();
 
 	/*
<span class="p_header">diff --git a/arch/x86/realmode/init.c b/arch/x86/realmode/init.c</span>
<span class="p_header">index a163a90af4aa..cd4be19c36dc 100644</span>
<span class="p_header">--- a/arch/x86/realmode/init.c</span>
<span class="p_header">+++ b/arch/x86/realmode/init.c</span>
<span class="p_chunk">@@ -102,7 +102,7 @@</span> <span class="p_context"> static void __init setup_real_mode(void)</span>
 
 	trampoline_pgd = (u64 *) __va(real_mode_header-&gt;trampoline_pgd);
 	trampoline_pgd[0] = trampoline_pgd_entry.pgd;
<span class="p_del">-	trampoline_pgd[511] = init_level4_pgt[511].pgd;</span>
<span class="p_add">+	trampoline_pgd[511] = init_top_pgt[511].pgd;</span>
 #endif
 }
 
<span class="p_header">diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">index 21beb37114b7..2082115805bd 100644</span>
<span class="p_header">--- a/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">+++ b/arch/x86/xen/mmu_pv.c</span>
<span class="p_chunk">@@ -1465,8 +1465,8 @@</span> <span class="p_context"> static void xen_write_cr3(unsigned long cr3)</span>
  * At the start of the day - when Xen launches a guest, it has already
  * built pagetables for the guest. We diligently look over them
  * in xen_setup_kernel_pagetable and graft as appropriate them in the
<span class="p_del">- * init_level4_pgt and its friends. Then when we are happy we load</span>
<span class="p_del">- * the new init_level4_pgt - and continue on.</span>
<span class="p_add">+ * init_top_pgt and its friends. Then when we are happy we load</span>
<span class="p_add">+ * the new init_top_pgt - and continue on.</span>
  *
  * The generic code starts (start_kernel) and &#39;init_mem_mapping&#39; sets
  * up the rest of the pagetables. When it has completed it loads the cr3.
<span class="p_chunk">@@ -1909,12 +1909,12 @@</span> <span class="p_context"> void __init xen_setup_kernel_pagetable(pgd_t *pgd, unsigned long max_pfn)</span>
 	pt_end = pt_base + xen_start_info-&gt;nr_pt_frames;
 
 	/* Zap identity mapping */
<span class="p_del">-	init_level4_pgt[0] = __pgd(0);</span>
<span class="p_add">+	init_top_pgt[0] = __pgd(0);</span>
 
 	/* Pre-constructed entries are in pfn, so convert to mfn */
 	/* L4[272] -&gt; level3_ident_pgt  */
 	/* L4[511] -&gt; level3_kernel_pgt */
<span class="p_del">-	convert_pfn_mfn(init_level4_pgt);</span>
<span class="p_add">+	convert_pfn_mfn(init_top_pgt);</span>
 
 	/* L3_i[0] -&gt; level2_ident_pgt */
 	convert_pfn_mfn(level3_ident_pgt);
<span class="p_chunk">@@ -1945,10 +1945,10 @@</span> <span class="p_context"> void __init xen_setup_kernel_pagetable(pgd_t *pgd, unsigned long max_pfn)</span>
 	/* Copy the initial P-&gt;M table mappings if necessary. */
 	i = pgd_index(xen_start_info-&gt;mfn_list);
 	if (i &amp;&amp; i &lt; pgd_index(__START_KERNEL_map))
<span class="p_del">-		init_level4_pgt[i] = ((pgd_t *)xen_start_info-&gt;pt_base)[i];</span>
<span class="p_add">+		init_top_pgt[i] = ((pgd_t *)xen_start_info-&gt;pt_base)[i];</span>
 
 	/* Make pagetable pieces RO */
<span class="p_del">-	set_page_prot(init_level4_pgt, PAGE_KERNEL_RO);</span>
<span class="p_add">+	set_page_prot(init_top_pgt, PAGE_KERNEL_RO);</span>
 	set_page_prot(level3_ident_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level3_kernel_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level3_user_vsyscall, PAGE_KERNEL_RO);
<span class="p_chunk">@@ -1959,7 +1959,7 @@</span> <span class="p_context"> void __init xen_setup_kernel_pagetable(pgd_t *pgd, unsigned long max_pfn)</span>
 
 	/* Pin down new L4 */
 	pin_pagetable_pfn(MMUEXT_PIN_L4_TABLE,
<span class="p_del">-			  PFN_DOWN(__pa_symbol(init_level4_pgt)));</span>
<span class="p_add">+			  PFN_DOWN(__pa_symbol(init_top_pgt)));</span>
 
 	/* Unpin Xen-provided one */
 	pin_pagetable_pfn(MMUEXT_UNPIN_TABLE, PFN_DOWN(__pa(pgd)));
<span class="p_chunk">@@ -1969,7 +1969,7 @@</span> <span class="p_context"> void __init xen_setup_kernel_pagetable(pgd_t *pgd, unsigned long max_pfn)</span>
 	 * attach it to, so make sure we just set kernel pgd.
 	 */
 	xen_mc_batch();
<span class="p_del">-	__xen_write_cr3(true, __pa(init_level4_pgt));</span>
<span class="p_add">+	__xen_write_cr3(true, __pa(init_top_pgt));</span>
 	xen_mc_issue(PARAVIRT_LAZY_CPU);
 
 	/* We can&#39;t that easily rip out L3 and L2, as the Xen pagetables are
<span class="p_header">diff --git a/arch/x86/xen/xen-pvh.S b/arch/x86/xen/xen-pvh.S</span>
<span class="p_header">index 5e246716d58f..e1a5fbeae08d 100644</span>
<span class="p_header">--- a/arch/x86/xen/xen-pvh.S</span>
<span class="p_header">+++ b/arch/x86/xen/xen-pvh.S</span>
<span class="p_chunk">@@ -87,7 +87,7 @@</span> <span class="p_context"> ENTRY(pvh_start_xen)</span>
 	wrmsr
 
 	/* Enable pre-constructed page tables. */
<span class="p_del">-	mov $_pa(init_level4_pgt), %eax</span>
<span class="p_add">+	mov $_pa(init_top_pgt), %eax</span>
 	mov %eax, %cr3
 	mov $(X86_CR0_PG | X86_CR0_PE), %eax
 	mov %eax, %cr0

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



