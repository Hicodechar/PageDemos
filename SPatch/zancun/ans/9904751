
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM-v25,17/19] mm/migrate: allow migrate_vma() to alloc new page on empty entry v4 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM-v25,17/19] mm/migrate: allow migrate_vma() to alloc new page on empty entry v4</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 17, 2017, 12:05 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170817000548.32038-18-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9904751/mbox/"
   >mbox</a>
|
   <a href="/patch/9904751/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9904751/">/patch/9904751/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3003260231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:32 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2245628955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:32 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1705D28A71; Thu, 17 Aug 2017 00:06:32 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5793E28955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752467AbdHQAG1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Aug 2017 20:06:27 -0400
Received: from mx1.redhat.com ([209.132.183.28]:32998 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752403AbdHQAGX (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Aug 2017 20:06:23 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 575EB769E9;
	Thu, 17 Aug 2017 00:06:23 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 575EB769E9
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=jglisse@redhat.com
Received: from localhost.localdomain.com (ovpn-120-132.rdu2.redhat.com
	[10.10.120.132])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 3CFFFE9958;
	Thu, 17 Aug 2017 00:06:22 +0000 (UTC)
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	David Nellans &lt;dnellans@nvidia.com&gt;,
	Balbir Singh &lt;bsingharora@gmail.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
Subject: [HMM-v25 17/19] mm/migrate: allow migrate_vma() to alloc new page
	on empty entry v4
Date: Wed, 16 Aug 2017 20:05:46 -0400
Message-Id: &lt;20170817000548.32038-18-jglisse@redhat.com&gt;
In-Reply-To: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
References: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 17 Aug 2017 00:06:23 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - Aug. 17, 2017, 12:05 a.m.</div>
<pre class="content">
This allow caller of migrate_vma() to allocate new page for empty CPU
page table entry (pte_none or back by zero page). This is only for
anonymous memory and it won&#39;t allow new page to be instanced if the
userfaultfd is armed.

This is useful to device driver that want to migrate a range of virtual
address and would rather allocate new memory than having to fault later
on.

Changed since v3:
  - support zero pfn entry
  - improve commit message
Changed sinve v2:
  - differentiate between empty CPU page table entry and non empty
  - improve code comments explaining how this works
Changed since v1:
  - 5 level page table fix
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
---
 include/linux/migrate.h |   9 +++
 mm/migrate.c            | 205 +++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 205 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/migrate.h b/include/linux/migrate.h</span>
<span class="p_header">index 8dc8f0a3f1af..d4e6d12a0b40 100644</span>
<span class="p_header">--- a/include/linux/migrate.h</span>
<span class="p_header">+++ b/include/linux/migrate.h</span>
<span class="p_chunk">@@ -218,6 +218,15 @@</span> <span class="p_context"> static inline unsigned long migrate_pfn(unsigned long pfn)</span>
  * driver should avoid setting MIGRATE_PFN_ERROR unless it is really in an
  * unrecoverable state.
  *
<span class="p_add">+ * For empty entry inside CPU page table (pte_none() or pmd_none() is true) we</span>
<span class="p_add">+ * do set MIGRATE_PFN_MIGRATE flag inside the corresponding source array thus</span>
<span class="p_add">+ * allowing device driver to allocate device memory for those unback virtual</span>
<span class="p_add">+ * address. For this the device driver simply have to allocate device memory</span>
<span class="p_add">+ * and properly set the destination entry like for regular migration. Note that</span>
<span class="p_add">+ * this can still fails and thus inside the device driver must check if the</span>
<span class="p_add">+ * migration was successful for those entry inside the finalize_and_map()</span>
<span class="p_add">+ * callback just like for regular migration.</span>
<span class="p_add">+ *</span>
  * THE alloc_and_copy() CALLBACK MUST NOT CHANGE ANY OF THE SRC ARRAY ENTRIES
  * OR BAD THINGS WILL HAPPEN !
  *
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 6c8a9826da32..5500e3738354 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -37,6 +37,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb_cgroup.h&gt;
 #include &lt;linux/gfp.h&gt;
 #include &lt;linux/memremap.h&gt;
<span class="p_add">+#include &lt;linux/userfaultfd_k.h&gt;</span>
 #include &lt;linux/balloon_compaction.h&gt;
 #include &lt;linux/mmu_notifier.h&gt;
 #include &lt;linux/page_idle.h&gt;
<span class="p_chunk">@@ -2152,6 +2153,22 @@</span> <span class="p_context"> static int migrate_vma_collect_hole(unsigned long start,</span>
 	unsigned long addr;
 
 	for (addr = start &amp; PAGE_MASK; addr &lt; end; addr += PAGE_SIZE) {
<span class="p_add">+		migrate-&gt;src[migrate-&gt;npages++] = MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+		migrate-&gt;dst[migrate-&gt;npages] = 0;</span>
<span class="p_add">+		migrate-&gt;cpages++;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int migrate_vma_collect_skip(unsigned long start,</span>
<span class="p_add">+				    unsigned long end,</span>
<span class="p_add">+				    struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct migrate_vma *migrate = walk-&gt;private;</span>
<span class="p_add">+	unsigned long addr;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (addr = start &amp; PAGE_MASK; addr &lt; end; addr += PAGE_SIZE) {</span>
 		migrate-&gt;dst[migrate-&gt;npages] = 0;
 		migrate-&gt;src[migrate-&gt;npages++] = 0;
 	}
<span class="p_chunk">@@ -2189,7 +2206,7 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 			spin_unlock(ptl);
 			split_huge_pmd(vma, pmdp, addr);
 			if (pmd_trans_unstable(pmdp))
<span class="p_del">-				return migrate_vma_collect_hole(start, end,</span>
<span class="p_add">+				return migrate_vma_collect_skip(start, end,</span>
 								walk);
 		} else {
 			int ret;
<span class="p_chunk">@@ -2197,19 +2214,22 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 			get_page(page);
 			spin_unlock(ptl);
 			if (unlikely(!trylock_page(page)))
<span class="p_del">-				return migrate_vma_collect_hole(start, end,</span>
<span class="p_add">+				return migrate_vma_collect_skip(start, end,</span>
 								walk);
 			ret = split_huge_page(page);
 			unlock_page(page);
 			put_page(page);
<span class="p_del">-			if (ret || pmd_none(*pmdp))</span>
<span class="p_add">+			if (ret)</span>
<span class="p_add">+				return migrate_vma_collect_skip(start, end,</span>
<span class="p_add">+								walk);</span>
<span class="p_add">+			if (pmd_none(*pmdp))</span>
 				return migrate_vma_collect_hole(start, end,
 								walk);
 		}
 	}
 
 	if (unlikely(pmd_bad(*pmdp)))
<span class="p_del">-		return migrate_vma_collect_hole(start, end, walk);</span>
<span class="p_add">+		return migrate_vma_collect_skip(start, end, walk);</span>
 
 	ptep = pte_offset_map_lock(mm, pmdp, addr, &amp;ptl);
 	arch_enter_lazy_mmu_mode();
<span class="p_chunk">@@ -2224,7 +2244,9 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 		pfn = pte_pfn(pte);
 
 		if (pte_none(pte)) {
<span class="p_del">-			mpfn = pfn = 0;</span>
<span class="p_add">+			mpfn = MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+			migrate-&gt;cpages++;</span>
<span class="p_add">+			pfn = 0;</span>
 			goto next;
 		}
 
<span class="p_chunk">@@ -2246,6 +2268,12 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 			if (is_write_device_private_entry(entry))
 				mpfn |= MIGRATE_PFN_WRITE;
 		} else {
<span class="p_add">+			if (is_zero_pfn(pfn)) {</span>
<span class="p_add">+				mpfn = MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+				migrate-&gt;cpages++;</span>
<span class="p_add">+				pfn = 0;</span>
<span class="p_add">+				goto next;</span>
<span class="p_add">+			}</span>
 			page = vm_normal_page(migrate-&gt;vma, addr, pte);
 			mpfn = migrate_pfn(pfn) | MIGRATE_PFN_MIGRATE;
 			mpfn |= pte_write(pte) ? MIGRATE_PFN_WRITE : 0;
<span class="p_chunk">@@ -2565,6 +2593,135 @@</span> <span class="p_context"> static void migrate_vma_unmap(struct migrate_vma *migrate)</span>
 	}
 }
 
<span class="p_add">+static void migrate_vma_insert_page(struct migrate_vma *migrate,</span>
<span class="p_add">+				    unsigned long addr,</span>
<span class="p_add">+				    struct page *page,</span>
<span class="p_add">+				    unsigned long *src,</span>
<span class="p_add">+				    unsigned long *dst)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = migrate-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	struct mem_cgroup *memcg;</span>
<span class="p_add">+	bool flush = false;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pte_t entry;</span>
<span class="p_add">+	pgd_t *pgdp;</span>
<span class="p_add">+	p4d_t *p4dp;</span>
<span class="p_add">+	pud_t *pudp;</span>
<span class="p_add">+	pmd_t *pmdp;</span>
<span class="p_add">+	pte_t *ptep;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Only allow populating anonymous memory */</span>
<span class="p_add">+	if (!vma_is_anonymous(vma))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgdp = pgd_offset(mm, addr);</span>
<span class="p_add">+	p4dp = p4d_alloc(mm, pgdp, addr);</span>
<span class="p_add">+	if (!p4dp)</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+	pudp = pud_alloc(mm, p4dp, addr);</span>
<span class="p_add">+	if (!pudp)</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+	pmdp = pmd_alloc(mm, pudp, addr);</span>
<span class="p_add">+	if (!pmdp)</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_trans_huge(*pmdp) || pmd_devmap(*pmdp))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Use pte_alloc() instead of pte_alloc_map().  We can&#39;t run</span>
<span class="p_add">+	 * pte_offset_map() on pmds where a huge pmd might be created</span>
<span class="p_add">+	 * from a different thread.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * pte_alloc_map() is safe to use under down_write(mmap_sem) or when</span>
<span class="p_add">+	 * parallel threads are excluded by other means.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Here we only have down_read(mmap_sem).</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (pte_alloc(mm, pmdp, addr))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* See the comment in pte_alloc_one_map() */</span>
<span class="p_add">+	if (unlikely(pmd_trans_unstable(pmdp)))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(anon_vma_prepare(vma)))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+	if (mem_cgroup_try_charge(page, vma-&gt;vm_mm, GFP_KERNEL, &amp;memcg, false))</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The memory barrier inside __SetPageUptodate makes sure that</span>
<span class="p_add">+	 * preceding stores to the page contents become visible before</span>
<span class="p_add">+	 * the set_pte_at() write.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	__SetPageUptodate(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_zone_device_page(page) &amp;&amp; is_device_private_page(page)) {</span>
<span class="p_add">+		swp_entry_t swp_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+		swp_entry = make_device_private_entry(page, vma-&gt;vm_flags &amp; VM_WRITE);</span>
<span class="p_add">+		entry = swp_entry_to_pte(swp_entry);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		entry = mk_pte(page, vma-&gt;vm_page_prot);</span>
<span class="p_add">+		if (vma-&gt;vm_flags &amp; VM_WRITE)</span>
<span class="p_add">+			entry = pte_mkwrite(pte_mkdirty(entry));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ptep = pte_offset_map_lock(mm, pmdp, addr, &amp;ptl);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_present(*ptep)) {</span>
<span class="p_add">+		unsigned long pfn = pte_pfn(*ptep);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!is_zero_pfn(pfn)) {</span>
<span class="p_add">+			pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+			mem_cgroup_cancel_charge(page, memcg, false);</span>
<span class="p_add">+			goto abort;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		flush = true;</span>
<span class="p_add">+	} else if (!pte_none(*ptep)) {</span>
<span class="p_add">+		pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+		mem_cgroup_cancel_charge(page, memcg, false);</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for usefaultfd but do not deliver the fault. Instead,</span>
<span class="p_add">+	 * just back off.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (userfaultfd_missing(vma)) {</span>
<span class="p_add">+		pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+		mem_cgroup_cancel_charge(page, memcg, false);</span>
<span class="p_add">+		goto abort;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	inc_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_add">+	page_add_new_anon_rmap(page, vma, addr, false);</span>
<span class="p_add">+	mem_cgroup_commit_charge(page, memcg, false, false);</span>
<span class="p_add">+	if (!is_zone_device_page(page))</span>
<span class="p_add">+		lru_cache_add_active_or_unevictable(page, vma);</span>
<span class="p_add">+	get_page(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (flush) {</span>
<span class="p_add">+		flush_cache_page(vma, addr, pte_pfn(*ptep));</span>
<span class="p_add">+		ptep_clear_flush_notify(vma, addr, ptep);</span>
<span class="p_add">+		set_pte_at_notify(mm, addr, ptep, entry);</span>
<span class="p_add">+		update_mmu_cache(vma, addr, ptep);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/* No need to invalidate - it was non-present before */</span>
<span class="p_add">+		set_pte_at(mm, addr, ptep, entry);</span>
<span class="p_add">+		update_mmu_cache(vma, addr, ptep);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+	*src = MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+	return;</span>
<span class="p_add">+</span>
<span class="p_add">+abort:</span>
<span class="p_add">+	*src &amp;= ~MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * migrate_vma_pages() - migrate meta-data from src page to dst page
  * @migrate: migrate struct containing all migration information
<span class="p_chunk">@@ -2577,7 +2734,10 @@</span> <span class="p_context"> static void migrate_vma_pages(struct migrate_vma *migrate)</span>
 {
 	const unsigned long npages = migrate-&gt;npages;
 	const unsigned long start = migrate-&gt;start;
<span class="p_del">-	unsigned long addr, i;</span>
<span class="p_add">+	struct vm_area_struct *vma = migrate-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long addr, i, mmu_start;</span>
<span class="p_add">+	bool notified = false;</span>
 
 	for (i = 0, addr = start; i &lt; npages; addr += PAGE_SIZE, i++) {
 		struct page *newpage = migrate_pfn_to_page(migrate-&gt;dst[i]);
<span class="p_chunk">@@ -2585,10 +2745,27 @@</span> <span class="p_context"> static void migrate_vma_pages(struct migrate_vma *migrate)</span>
 		struct address_space *mapping;
 		int r;
 
<span class="p_del">-		if (!page || !newpage)</span>
<span class="p_add">+		if (!newpage) {</span>
<span class="p_add">+			migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;</span>
 			continue;
<span class="p_del">-		if (!(migrate-&gt;src[i] &amp; MIGRATE_PFN_MIGRATE))</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!page) {</span>
<span class="p_add">+			if (!(migrate-&gt;src[i] &amp; MIGRATE_PFN_MIGRATE)) {</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!notified) {</span>
<span class="p_add">+				mmu_start = addr;</span>
<span class="p_add">+				notified = true;</span>
<span class="p_add">+				mmu_notifier_invalidate_range_start(mm,</span>
<span class="p_add">+								mmu_start,</span>
<span class="p_add">+								migrate-&gt;end);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			migrate_vma_insert_page(migrate, addr, newpage,</span>
<span class="p_add">+						&amp;migrate-&gt;src[i],</span>
<span class="p_add">+						&amp;migrate-&gt;dst[i]);</span>
 			continue;
<span class="p_add">+		}</span>
 
 		mapping = page_mapping(page);
 
<span class="p_chunk">@@ -2616,6 +2793,10 @@</span> <span class="p_context"> static void migrate_vma_pages(struct migrate_vma *migrate)</span>
 		if (r != MIGRATEPAGE_SUCCESS)
 			migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;
 	}
<span class="p_add">+</span>
<span class="p_add">+	if (notified)</span>
<span class="p_add">+		mmu_notifier_invalidate_range_end(mm, mmu_start,</span>
<span class="p_add">+						  migrate-&gt;end);</span>
 }
 
 /*
<span class="p_chunk">@@ -2638,8 +2819,14 @@</span> <span class="p_context"> static void migrate_vma_finalize(struct migrate_vma *migrate)</span>
 		struct page *newpage = migrate_pfn_to_page(migrate-&gt;dst[i]);
 		struct page *page = migrate_pfn_to_page(migrate-&gt;src[i]);
 
<span class="p_del">-		if (!page)</span>
<span class="p_add">+		if (!page) {</span>
<span class="p_add">+			if (newpage) {</span>
<span class="p_add">+				unlock_page(newpage);</span>
<span class="p_add">+				put_page(newpage);</span>
<span class="p_add">+			}</span>
 			continue;
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		if (!(migrate-&gt;src[i] &amp; MIGRATE_PFN_MIGRATE) || !newpage) {
 			if (newpage) {
 				unlock_page(newpage);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



