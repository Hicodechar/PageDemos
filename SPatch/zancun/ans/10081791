
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/6] x86/mm/kaiser: Support PCID without INVPCID - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/6] x86/mm/kaiser: Support PCID without INVPCID</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 29, 2017, 10:33 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171129103512.819130098@infradead.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10081791/mbox/"
   >mbox</a>
|
   <a href="/patch/10081791/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10081791/">/patch/10081791/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5CC306020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Nov 2017 10:36:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 56F102969A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Nov 2017 10:36:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4B6022976B; Wed, 29 Nov 2017 10:36:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8985E2969A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Nov 2017 10:36:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932386AbdK2KgI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 29 Nov 2017 05:36:08 -0500
Received: from merlin.infradead.org ([205.233.59.134]:37664 &quot;EHLO
	merlin.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932308AbdK2KgE (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 29 Nov 2017 05:36:04 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=merlin.20170209;
	h=Content-Type:MIME-Version:References:
	Subject:Cc:To:From:Date:Message-Id:Sender:Reply-To:Content-Transfer-Encoding:
	Content-ID:Content-Description:Resent-Date:Resent-From:Resent-Sender:
	Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:List-Id:List-Help:
	List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=l/HEFqX9mxdKSh7CxTiwf4i+O54louhNr0sM2eMnx34=;
	b=cmKgHw82rw91lOOPnxnseV6SES
	eZeKK+/3xK+aVKosJBGitNKBCzp6AEDHAZqxnSLRHVWgl6m26gPNJthZe5vARF2Jj/C2++wnFgp/M
	IAKRh+/RGQw2P2VhiHJZIkYGh4Bnyt6GmkSIQu79ABAkDivu9XCslvGq+C/zHhGm0s6A12+ng8Cwc
	iKFSpLZ/OEZwSAxdy7cUbrqaDx6TUGIkH5N4umwTmItGY8syZdi3613J956woxZ63gt1xpnqjx2Ew
	hd5GI3Ok1KChPvgYWlztDC8nRKWa7rbQNJtA6B1bqVnFvKZ5usffUUROIB5Jr14MNQiTHFg2q3vHS
	3Uw3O7xA==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100]
	helo=hirez.programming.kicks-ass.net)
	by merlin.infradead.org with esmtpsa (Exim 4.87 #1 (Red Hat Linux))
	id 1eJziM-0007FV-E0; Wed, 29 Nov 2017 10:35:38 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 0)
	id 16618207153D8; Wed, 29 Nov 2017 11:35:36 +0100 (CET)
Message-Id: &lt;20171129103512.819130098@infradead.org&gt;
User-Agent: quilt/0.63-1
Date: Wed, 29 Nov 2017 11:33:05 +0100
From: Peter Zijlstra &lt;peterz@infradead.org&gt;
To: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;, Denys Vlasenko &lt;dvlasenk@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, daniel.gruss@iaik.tugraz.at,
	hughd@google.com, keescook@google.com, linux-mm@kvack.org,
	michael.schwarz@iaik.tugraz.at, moritz.lipp@iaik.tugraz.at,
	richard.fellner@student.tugraz.at, Andy Lutomirski &lt;luto@amacapital.net&gt;
Subject: [PATCH 4/6] x86/mm/kaiser: Support PCID without INVPCID
References: &lt;20171129103301.131535445@infradead.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline;
	filename=peterz-kaiser-support-pcid-noinvpcid.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 29, 2017, 10:33 a.m.</div>
<pre class="content">
Instead of relying on INVPCID to shoot down user PCID, delay the
invalidate until we switch to the user page-tables.

This gets rid of the INVPCID dependence for KAISER PCID.

XXX we could do a much larger ALTERNATIVE, there is no point in
testing the mask if we don&#39;t have PCID support.

Suggested-by: Andy Lutomirski &lt;luto@amacapital.net&gt;
<span class="signed-off-by">Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
---
 arch/x86/entry/calling.h        |   29 +++++++++++++++++------
 arch/x86/include/asm/tlbflush.h |   39 +++++++++++++++++++++++--------
 arch/x86/mm/init.c              |   13 ----------
 arch/x86/mm/tlb.c               |   49 +---------------------------------------
 4 files changed, 53 insertions(+), 77 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 29, 2017, 10:48 a.m.</div>
<pre class="content">
On Wed, Nov 29, 2017 at 11:33:05AM +0100, Peter Zijlstra wrote:
<span class="quote">&gt; +DECLARE_PER_CPU(unsigned long, user_asid_flush_mask);</span>

Ah, I meant to make that: DECLARE_BITMAP(TLB_NR_DYN_ASIDS)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 29, 2017, 12:31 p.m.</div>
<pre class="content">
On Wed, Nov 29, 2017 at 11:33:05AM +0100, Peter Zijlstra wrote:
<span class="quote">&gt; @@ -220,7 +215,27 @@ For 32-bit we have the following convent</span>
<span class="quote">&gt;  .macro SWITCH_TO_USER_CR3 scratch_reg:req</span>
<span class="quote">&gt;  	STATIC_JUMP_IF_FALSE .Lend_\@, kaiser_enabled_key, def=1</span>
<span class="quote">&gt;  	mov	%cr3, \scratch_reg</span>
<span class="quote">&gt; -	ADJUST_USER_CR3 \scratch_reg</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Test if the ASID needs a flush.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	push	\scratch_reg			/* preserve CR3 */</span>

So I was just staring at disasm of a few functions and I noticed this
one reads like push, while others read like pushq.

So does the stupid assembler thing really do a 32bit push if you provide
it with a 64bit register?
<span class="quote">
&gt; +	andq	$(0x7FF), \scratch_reg		/* mask ASID */</span>
<span class="quote">&gt; +	bt	\scratch_reg, PER_CPU_VAR(user_asid_flush_mask)</span>
<span class="quote">&gt; +	jnc	.Lnoflush_\@</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Flush needed, clear the bit */</span>
<span class="quote">&gt; +	btr	\scratch_reg, PER_CPU_VAR(user_asid_flush_mask)</span>
<span class="quote">&gt; +	pop	\scratch_reg			/* original CR3 */</span>
<span class="quote">&gt; +	jmp	.Ldo_\@</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +.Lnoflush_\@:</span>
<span class="quote">&gt; +	pop	\scratch_reg			/* original CR3 */</span>
<span class="quote">&gt; +	ALTERNATIVE &quot;&quot;, &quot;bts $63, \scratch_reg&quot;, X86_FEATURE_PCID</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +.Ldo_\@:</span>
<span class="quote">&gt; +	/* Flip the PGD and ASID to the user version */</span>
<span class="quote">&gt; +	orq     $(KAISER_SWITCH_MASK), \scratch_reg</span>
<span class="quote">&gt;  	mov	\scratch_reg, %cr3</span>
<span class="quote">&gt;  .Lend_\@:</span>
<span class="quote">&gt;  .endm</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 29, 2017, 1:38 p.m.</div>
<pre class="content">
On Wed, Nov 29, 2017 at 01:31:58PM +0100, Peter Zijlstra wrote:
<span class="quote">&gt; On Wed, Nov 29, 2017 at 11:33:05AM +0100, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; @@ -220,7 +215,27 @@ For 32-bit we have the following convent</span>
<span class="quote">&gt; &gt;  .macro SWITCH_TO_USER_CR3 scratch_reg:req</span>
<span class="quote">&gt; &gt;  	STATIC_JUMP_IF_FALSE .Lend_\@, kaiser_enabled_key, def=1</span>
<span class="quote">&gt; &gt;  	mov	%cr3, \scratch_reg</span>
<span class="quote">&gt; &gt; -	ADJUST_USER_CR3 \scratch_reg</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; +	 * Test if the ASID needs a flush.</span>
<span class="quote">&gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; +	push	\scratch_reg			/* preserve CR3 */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I was just staring at disasm of a few functions and I noticed this</span>
<span class="quote">&gt; one reads like push, while others read like pushq.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So does the stupid assembler thing really do a 32bit push if you provide</span>
<span class="quote">&gt; it with a 64bit register?</span>

N/m, I just really cannot read straight today. The pushq&#39;s were a mem64,
not a r64 argument to push.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/entry/calling.h</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h</span>
<span class="p_chunk">@@ -4,6 +4,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/cpufeatures.h&gt;
 #include &lt;asm/page_types.h&gt;
 #include &lt;asm/pgtable_types.h&gt;
<span class="p_add">+#include &lt;asm/percpu.h&gt;</span>
 
 /*
 
<span class="p_chunk">@@ -203,12 +204,6 @@</span> <span class="p_context"> For 32-bit we have the following convent</span>
 	andq    $(~KAISER_SWITCH_MASK), \reg
 .endm
 
<span class="p_del">-.macro ADJUST_USER_CR3 reg:req</span>
<span class="p_del">-	ALTERNATIVE &quot;&quot;, &quot;bts $63, \reg&quot;, X86_FEATURE_PCID</span>
<span class="p_del">-	/* Set user PCID bit, and move CR3 up a page to the user page tables: */</span>
<span class="p_del">-	orq     $(KAISER_SWITCH_MASK), \reg</span>
<span class="p_del">-.endm</span>
<span class="p_del">-</span>
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
 	STATIC_JUMP_IF_FALSE .Lend_\@, kaiser_enabled_key, def=1
 	mov	%cr3, \scratch_reg
<span class="p_chunk">@@ -220,7 +215,27 @@</span> <span class="p_context"> For 32-bit we have the following convent</span>
 .macro SWITCH_TO_USER_CR3 scratch_reg:req
 	STATIC_JUMP_IF_FALSE .Lend_\@, kaiser_enabled_key, def=1
 	mov	%cr3, \scratch_reg
<span class="p_del">-	ADJUST_USER_CR3 \scratch_reg</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Test if the ASID needs a flush.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	push	\scratch_reg			/* preserve CR3 */</span>
<span class="p_add">+	andq	$(0x7FF), \scratch_reg		/* mask ASID */</span>
<span class="p_add">+	bt	\scratch_reg, PER_CPU_VAR(user_asid_flush_mask)</span>
<span class="p_add">+	jnc	.Lnoflush_\@</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Flush needed, clear the bit */</span>
<span class="p_add">+	btr	\scratch_reg, PER_CPU_VAR(user_asid_flush_mask)</span>
<span class="p_add">+	pop	\scratch_reg			/* original CR3 */</span>
<span class="p_add">+	jmp	.Ldo_\@</span>
<span class="p_add">+</span>
<span class="p_add">+.Lnoflush_\@:</span>
<span class="p_add">+	pop	\scratch_reg			/* original CR3 */</span>
<span class="p_add">+	ALTERNATIVE &quot;&quot;, &quot;bts $63, \scratch_reg&quot;, X86_FEATURE_PCID</span>
<span class="p_add">+</span>
<span class="p_add">+.Ldo_\@:</span>
<span class="p_add">+	/* Flip the PGD and ASID to the user version */</span>
<span class="p_add">+	orq     $(KAISER_SWITCH_MASK), \scratch_reg</span>
 	mov	\scratch_reg, %cr3
 .Lend_\@:
 .endm
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -348,19 +348,37 @@</span> <span class="p_context"> static inline void cr4_set_bits_and_upda</span>
 
 extern void initialize_tlbstate_and_flush(void);
 
<span class="p_add">+DECLARE_PER_CPU(unsigned long, user_asid_flush_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Given an ASID, flush the corresponding user ASID.</span>
<span class="p_add">+ * We can delay this until the next time we switch to it.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * See SWITCH_TO_USER_CR3.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void flush_user_asid(u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* There is no user ASID if KAISER is off */</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_KAISER))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We only have a single ASID if PCID is off and the CR3</span>
<span class="p_add">+	 * write will have flushed it.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!cpu_feature_enabled(X86_FEATURE_PCID))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!kaiser_enabled)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	__set_bit(kern_asid(asid), this_cpu_ptr(&amp;user_asid_flush_mask));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void __native_flush_tlb(void)
 {
 	if (!cpu_feature_enabled(X86_FEATURE_INVPCID)) {
<span class="p_del">-		/*</span>
<span class="p_del">-		 * native_write_cr3() only clears the current PCID if</span>
<span class="p_del">-		 * CR4 has X86_CR4_PCIDE set.  In other words, this does</span>
<span class="p_del">-		 * not fully flush the TLB if PCIDs are in use.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * With KAISER and PCIDs, that means that we did not</span>
<span class="p_del">-		 * flush the user PCID.  Warn if it gets called.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (IS_ENABLED(CONFIG_KAISER) &amp;&amp; kaiser_enabled)</span>
<span class="p_del">-			WARN_ON_ONCE(this_cpu_read(cpu_tlbstate.cr4) &amp; X86_CR4_PCIDE);</span>
<span class="p_add">+		flush_user_asid(this_cpu_read(cpu_tlbstate.loaded_mm_asid));</span>
 
 		/*
 		 * If current-&gt;mm == NULL then we borrow a mm
<span class="p_chunk">@@ -436,6 +454,7 @@</span> <span class="p_context"> static inline void __native_flush_tlb_si</span>
 	 * early.
 	 */
 	if (!this_cpu_has(X86_FEATURE_INVPCID_SINGLE)) {
<span class="p_add">+		flush_user_asid(loaded_mm_asid);</span>
 		asm volatile(&quot;invlpg (%0)&quot; ::&quot;r&quot; (addr) : &quot;memory&quot;);
 		return;
 	}
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -211,19 +211,6 @@</span> <span class="p_context"> static void setup_pcid(void)</span>
 
 	if (boot_cpu_has(X86_FEATURE_PGE)) {
 		/*
<span class="p_del">-		 * KAISER uses a PCID for the kernel and another</span>
<span class="p_del">-		 * for userspace.  Both PCIDs need to be flushed</span>
<span class="p_del">-		 * when the TLB flush functions are called.  But,</span>
<span class="p_del">-		 * flushing *another* PCID is insane without</span>
<span class="p_del">-		 * INVPCID.  Just avoid using PCIDs at all if we</span>
<span class="p_del">-		 * have KAISER and do not have INVPCID.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (!IS_ENABLED(CONFIG_X86_GLOBAL_PAGES) &amp;&amp;</span>
<span class="p_del">-		    kaiser_enabled &amp;&amp; !boot_cpu_has(X86_FEATURE_INVPCID)) {</span>
<span class="p_del">-			setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="p_del">-			return;</span>
<span class="p_del">-		}</span>
<span class="p_del">-		/*</span>
 		 * This can&#39;t be cr4_set_bits_and_update_boot() --
 		 * the trampoline code can&#39;t handle CR4.PCIDE and
 		 * it wouldn&#39;t do any good anyway.  Despite the name,
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -101,59 +101,14 @@</span> <span class="p_context"> static void choose_new_asid(struct mm_st</span>
 	*need_flush = true;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Given a kernel asid, flush the corresponding KAISER</span>
<span class="p_del">- * user ASID.</span>
<span class="p_del">- */</span>
<span class="p_del">-static void flush_user_asid(pgd_t *pgd, u16 kern_asid)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* There is no user ASID if KAISER is off */</span>
<span class="p_del">-	if (!IS_ENABLED(CONFIG_KAISER))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * We only have a single ASID if PCID is off and the CR3</span>
<span class="p_del">-	 * write will have flushed it.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (!cpu_feature_enabled(X86_FEATURE_PCID))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!kaiser_enabled)</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * With PCIDs enabled, write_cr3() only flushes TLB</span>
<span class="p_del">-	 * entries for the current (kernel) ASID.  This leaves</span>
<span class="p_del">-	 * old TLB entries for the user ASID in place and we must</span>
<span class="p_del">-	 * flush that context separately.  We can theoretically</span>
<span class="p_del">-	 * delay doing this until we actually load up the</span>
<span class="p_del">-	 * userspace CR3, but do it here for simplicity.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (cpu_feature_enabled(X86_FEATURE_INVPCID)) {</span>
<span class="p_del">-		invpcid_flush_single_context(user_asid(kern_asid));</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * On systems with PCIDs, but no INVPCID, the only</span>
<span class="p_del">-		 * way to flush a PCID is a CR3 write.  Note that</span>
<span class="p_del">-		 * we use the kernel page tables with the *user*</span>
<span class="p_del">-		 * ASID here.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		unsigned long user_asid_flush_cr3;</span>
<span class="p_del">-		user_asid_flush_cr3 = build_cr3(pgd, user_asid(kern_asid));</span>
<span class="p_del">-		write_cr3(user_asid_flush_cr3);</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * We do not use PCIDs with KAISER unless we also</span>
<span class="p_del">-		 * have INVPCID.  Getting here is unexpected.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		WARN_ON_ONCE(1);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_add">+__visible DEFINE_PER_CPU(unsigned long, user_asid_flush_mask);</span>
 
 static void load_new_mm_cr3(pgd_t *pgdir, u16 new_asid, bool need_flush)
 {
 	unsigned long new_mm_cr3;
 
 	if (need_flush) {
<span class="p_del">-		flush_user_asid(pgdir, new_asid);</span>
<span class="p_add">+		flush_user_asid(new_asid);</span>
 		new_mm_cr3 = build_cr3(pgdir, new_asid);
 	} else {
 		new_mm_cr3 = build_cr3_noflush(pgdir, new_asid);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



