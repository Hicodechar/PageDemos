
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/5] mm, oom_reaper: report success/failure - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/5] mm, oom_reaper: report success/failure</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 3, 2016, 1:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1454505240-23446-5-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8202611/mbox/"
   >mbox</a>
|
   <a href="/patch/8202611/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8202611/">/patch/8202611/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 90D84BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:14:39 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id F11DB202C8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:14:38 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 4B361202BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:14:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755119AbcBCNOf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Feb 2016 08:14:35 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:35388 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752468AbcBCNOL (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Feb 2016 08:14:11 -0500
Received: by mail-wm0-f68.google.com with SMTP id l66so7361917wml.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Feb 2016 05:14:10 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=1iYznxv5xVBX6xTP+hlJJuNbpzNRU5XOq838IF2dm2o=;
	b=LgPpFisbKgC4Yo7kWhtSRk1167RkxocVc2nvdDJC4ol70tEN0aF05rypaGPbtogNf/
	3C9xeQTMWZmIkkvyL3vJ5KB2OjqO6Iiwxy94F5eX/tl9ZOQsnlmWOTN103D02oCVZa9X
	OVOm2iUjJ6KAcSo+Ht4WHyLAAp55Y+PhlNL8ro1ZDWfsIyBjqNcUN4g4uQzwz/9XBZst
	6nxMuslspO01GbFPCHuO51h1YUWSq94V3hVT2jFzZEqhWqHP9fl1TN9mmxB/24Ek1N8v
	u6zw1kBIxXeaYPYJpGqIDXgROHuD9vyGkJwoGLqC09bM2H/tlqeFVrZlJZoQqzLIyUp1
	kx0g==
X-Gm-Message-State: AG10YOSYTSAuzxZZHFm3Nek37zOTofv3JbuhX+Aw8DcfLAYhS1U0n9N/i2ElTqCgGXFGjA==
X-Received: by 10.28.137.135 with SMTP id l129mr3714230wmd.38.1454505250436; 
	Wed, 03 Feb 2016 05:14:10 -0800 (PST)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	v22sm7890597wmv.12.2016.02.03.05.14.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Wed, 03 Feb 2016 05:14:10 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Andrea Argangeli &lt;andrea@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 4/5] mm, oom_reaper: report success/failure
Date: Wed,  3 Feb 2016 14:13:59 +0100
Message-Id: &lt;1454505240-23446-5-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1454505240-23446-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1454505240-23446-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 3, 2016, 1:13 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Inform about the successful/failed oom_reaper attempts and dump all the
held locks to tell us more who is blocking the progress.
<span class="signed-off-by">
Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 mm/oom_kill.c | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Feb. 3, 2016, 11:10 p.m.</div>
<pre class="content">
On Wed, 3 Feb 2016, Michal Hocko wrote:
<span class="quote">
&gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; index 8e345126d73e..b87acdca2a41 100644</span>
<span class="quote">&gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; @@ -420,6 +420,7 @@ static struct task_struct *oom_reaper_th;</span>
<span class="quote">&gt;  static struct task_struct *task_to_reap;</span>
<span class="quote">&gt;  static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define K(x) ((x) &lt;&lt; (PAGE_SHIFT-10))</span>
<span class="quote">&gt;  static bool __oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct mmu_gather tlb;</span>
<span class="quote">&gt; @@ -476,6 +477,11 @@ static bool __oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt; +	pr_info(&quot;oom_reaper: reaped process :%d (%s) anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lulB\n&quot;,</span>
<span class="quote">&gt; +			task_pid_nr(tsk), tsk-&gt;comm,</span>
<span class="quote">&gt; +			K(get_mm_counter(mm, MM_ANONPAGES)),</span>
<span class="quote">&gt; +			K(get_mm_counter(mm, MM_FILEPAGES)),</span>
<span class="quote">&gt; +			K(get_mm_counter(mm, MM_SHMEMPAGES)));</span>
<span class="quote">&gt;  	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>

This is a bit misleading, it would appear that the rss values are what was 
reaped when in fact they represent just the values of the mm being reaped.  
We have already printed these values as an artifact in the kernel log.

I think it would be helpful to show anon-rss after reaping, however, so we 
can compare to the previous anon-rss that was reported.  And, I agree that 
leaving behind a message in the kernel log that reaping has been 
successful is worthwhile.  So this line should just show what anon-rss is 
after reaping and make it clear that this is not the memory reaped.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 4, 2016, 6:46 a.m.</div>
<pre class="content">
On Wed 03-02-16 15:10:57, David Rientjes wrote:
<span class="quote">&gt; On Wed, 3 Feb 2016, Michal Hocko wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; index 8e345126d73e..b87acdca2a41 100644</span>
<span class="quote">&gt; &gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; @@ -420,6 +420,7 @@ static struct task_struct *oom_reaper_th;</span>
<span class="quote">&gt; &gt;  static struct task_struct *task_to_reap;</span>
<span class="quote">&gt; &gt;  static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#define K(x) ((x) &lt;&lt; (PAGE_SHIFT-10))</span>
<span class="quote">&gt; &gt;  static bool __oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	struct mmu_gather tlb;</span>
<span class="quote">&gt; &gt; @@ -476,6 +477,11 @@ static bool __oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt;  		}</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt; &gt; +	pr_info(&quot;oom_reaper: reaped process :%d (%s) anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lulB\n&quot;,</span>
<span class="quote">&gt; &gt; +			task_pid_nr(tsk), tsk-&gt;comm,</span>
<span class="quote">&gt; &gt; +			K(get_mm_counter(mm, MM_ANONPAGES)),</span>
<span class="quote">&gt; &gt; +			K(get_mm_counter(mm, MM_FILEPAGES)),</span>
<span class="quote">&gt; &gt; +			K(get_mm_counter(mm, MM_SHMEMPAGES)));</span>
<span class="quote">&gt; &gt;  	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	/*</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is a bit misleading, it would appear that the rss values are what was </span>
<span class="quote">&gt; reaped when in fact they represent just the values of the mm being reaped.  </span>
<span class="quote">&gt; We have already printed these values as an artifact in the kernel log.</span>

Yes and the idea was to provide the after state to compare before and
after. That&#39;s why I have kept the similar format. Just dropped the
virtual memory size because that doesn&#39;t make any sense in this context
now.
<span class="quote">
&gt; I think it would be helpful to show anon-rss after reaping, however, so we </span>
<span class="quote">&gt; can compare to the previous anon-rss that was reported.  And, I agree that </span>
<span class="quote">&gt; leaving behind a message in the kernel log that reaping has been </span>
<span class="quote">&gt; successful is worthwhile.  So this line should just show what anon-rss is </span>
<span class="quote">&gt; after reaping and make it clear that this is not the memory reaped.</span>

Does
&quot;oom_reaper: reaped process %d (%s) current memory anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB &quot;

sound any better?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Feb. 4, 2016, 10:31 p.m.</div>
<pre class="content">
On Thu, 4 Feb 2016, Michal Hocko wrote:
<span class="quote">
&gt; &gt; I think it would be helpful to show anon-rss after reaping, however, so we </span>
<span class="quote">&gt; &gt; can compare to the previous anon-rss that was reported.  And, I agree that </span>
<span class="quote">&gt; &gt; leaving behind a message in the kernel log that reaping has been </span>
<span class="quote">&gt; &gt; successful is worthwhile.  So this line should just show what anon-rss is </span>
<span class="quote">&gt; &gt; after reaping and make it clear that this is not the memory reaped.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Does</span>
<span class="quote">&gt; &quot;oom_reaper: reaped process %d (%s) current memory anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB &quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; sound any better?</span>

oom_reaper: reaped process %d (%s), now anon-rss:%lukB

would probably be better until additional support is added to do other 
kinds of reaping other than just primarily heap.  This should help to 
quantify the exact amount of memory that could be reaped (or otherwise 
unmapped) iff oom_reaper has to get involved rather than fluctations that 
have nothing to do with it.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 8e345126d73e..b87acdca2a41 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -420,6 +420,7 @@</span> <span class="p_context"> static struct task_struct *oom_reaper_th;</span>
 static struct task_struct *task_to_reap;
 static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);
 
<span class="p_add">+#define K(x) ((x) &lt;&lt; (PAGE_SHIFT-10))</span>
 static bool __oom_reap_task(struct task_struct *tsk)
 {
 	struct mmu_gather tlb;
<span class="p_chunk">@@ -476,6 +477,11 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 		}
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
<span class="p_add">+	pr_info(&quot;oom_reaper: reaped process :%d (%s) anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lulB\n&quot;,</span>
<span class="p_add">+			task_pid_nr(tsk), tsk-&gt;comm,</span>
<span class="p_add">+			K(get_mm_counter(mm, MM_ANONPAGES)),</span>
<span class="p_add">+			K(get_mm_counter(mm, MM_FILEPAGES)),</span>
<span class="p_add">+			K(get_mm_counter(mm, MM_SHMEMPAGES)));</span>
 	up_read(&amp;mm-&gt;mmap_sem);
 
 	/*
<span class="p_chunk">@@ -492,14 +498,21 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	return ret;
 }
 
<span class="p_add">+#define MAX_OOM_REAP_RETRIES 10</span>
 static void oom_reap_task(struct task_struct *tsk)
 {
 	int attempts = 0;
 
 	/* Retry the down_read_trylock(mmap_sem) a few times */
<span class="p_del">-	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_task(tsk))</span>
<span class="p_add">+	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task(tsk))</span>
 		schedule_timeout_idle(HZ/10);
 
<span class="p_add">+	if (attempts &gt; MAX_OOM_REAP_RETRIES) {</span>
<span class="p_add">+		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="p_add">+				task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="p_add">+		debug_show_all_locks();</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/* Drop a reference taken by wake_oom_reaper */
 	put_task_struct(tsk);
 }
<span class="p_chunk">@@ -646,7 +659,6 @@</span> <span class="p_context"> static bool process_shares_mm(struct task_struct *p, struct mm_struct *mm)</span>
 	return false;
 }
 
<span class="p_del">-#define K(x) ((x) &lt;&lt; (PAGE_SHIFT-10))</span>
 /*
  * Must be called while holding a reference to p, which will be released upon
  * returning.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



