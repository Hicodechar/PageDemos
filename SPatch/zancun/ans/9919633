
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] x86: enable RCU based table free - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] x86: enable RCU based table free</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 24, 2017, 9:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170824092258.12375-1-vkuznets@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9919633/mbox/"
   >mbox</a>
|
   <a href="/patch/9919633/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9919633/">/patch/9919633/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	ED9B260327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 09:23:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E1D2B28BA8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 09:23:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D677128BD2; Thu, 24 Aug 2017 09:23:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 27A4C28BA8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 09:23:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751763AbdHXJXF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 24 Aug 2017 05:23:05 -0400
Received: from mx1.redhat.com ([209.132.183.28]:45812 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751274AbdHXJXD (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 24 Aug 2017 05:23:03 -0400
Received: from smtp.corp.redhat.com
	(int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7671B7E423;
	Thu, 24 Aug 2017 09:23:03 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 7671B7E423
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=vkuznets@redhat.com
Received: from vitty.brq.redhat.com (unknown [10.43.2.155])
	by smtp.corp.redhat.com (Postfix) with ESMTP id A12B071C5E;
	Thu, 24 Aug 2017 09:22:59 +0000 (UTC)
From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, xen-devel@lists.xenproject.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Jork Loeser &lt;Jork.Loeser@microsoft.com&gt;,
	KY Srinivasan &lt;kys@microsoft.com&gt;,
	Stephen Hemminger &lt;sthemmin@microsoft.com&gt;,
	Steven Rostedt &lt;rostedt@goodmis.org&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Andrew Cooper &lt;andrew.cooper3@citrix.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;
Subject: [PATCH v2] x86: enable RCU based table free
Date: Thu, 24 Aug 2017 11:22:58 +0200
Message-Id: &lt;20170824092258.12375-1-vkuznets@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 24 Aug 2017 09:23:03 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 24, 2017, 9:22 a.m.</div>
<pre class="content">
On x86 software page-table walkers depend on the fact that remote TLB flush
does an IPI: walk is performed lockless but with interrupts disabled and in
case the pagetable is freed the freeing CPU will get blocked as remote TLB
flush is required. On other architecture which don&#39;t require an IPI to do
remote TLB flush we have an RCU-based mechanism (see
include/asm-generic/tlb.h for more details).

In virtualized environments we may want to override .flush_tlb_others hook
in pv_mmu_ops and use a hypercall asking the hypervisor to do remote TLB
flush for us. This breaks the assumption about IPI. Xen PV does this for
years and the upcoming remote TLB flush for Hyper-V will do it too. This
is not safe, software pagetable walkers may step on an already freed page.

Solve the issue by enabling RCU-based table free mechanism. Testing with
kernbench and mmap/munmap microbenchmars didn&#39;t show any notable
performance impact.

Suggested-by: Peter Zijlstra &lt;peterz@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="acked-by">Acked-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
---
Changes since v1:
- Enable HAVE_RCU_TABLE_FREE unconditionally to avoid different code pathes
  for no reason [Linus Torvalds]
---
 arch/x86/Kconfig           | 1 +
 arch/x86/include/asm/tlb.h | 5 +++++
 arch/x86/mm/pgtable.c      | 8 ++++----
 3 files changed, 10 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Aug. 24, 2017, 9:49 a.m.</div>
<pre class="content">
On Thu, Aug 24, 2017 at 11:22:58AM +0200, Vitaly Kuznetsov wrote:
<span class="quote">&gt; On x86 software page-table walkers depend on the fact that remote TLB flush</span>
<span class="quote">&gt; does an IPI: walk is performed lockless but with interrupts disabled and in</span>
<span class="quote">&gt; case the pagetable is freed the freeing CPU will get blocked as remote TLB</span>
<span class="quote">&gt; flush is required. On other architecture which don&#39;t require an IPI to do</span>
<span class="quote">&gt; remote TLB flush we have an RCU-based mechanism (see</span>
<span class="quote">&gt; include/asm-generic/tlb.h for more details).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In virtualized environments we may want to override .flush_tlb_others hook</span>
<span class="quote">&gt; in pv_mmu_ops and use a hypercall asking the hypervisor to do remote TLB</span>
<span class="quote">&gt; flush for us. This breaks the assumption about IPI. Xen PV does this for</span>
<span class="quote">&gt; years and the upcoming remote TLB flush for Hyper-V will do it too. This</span>
<span class="quote">&gt; is not safe, software pagetable walkers may step on an already freed page.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Solve the issue by enabling RCU-based table free mechanism. Testing with</span>
<span class="quote">&gt; kernbench and mmap/munmap microbenchmars didn&#39;t show any notable</span>
<span class="quote">&gt; performance impact.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Suggested-by: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="quote">&gt; Acked-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changes since v1:</span>
<span class="quote">&gt; - Enable HAVE_RCU_TABLE_FREE unconditionally to avoid different code pathes</span>
<span class="quote">&gt;   for no reason [Linus Torvalds]</span>
<span class="acked-by">
Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Aug. 24, 2017, 2:34 p.m.</div>
<pre class="content">
On Thu, Aug 24, 2017 at 11:22:58AM +0200, Vitaly Kuznetsov wrote:
<span class="quote">
&gt; diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt; index c7797307fc2b..d43a7fcafee9 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt; @@ -15,4 +15,9 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm-generic/tlb.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline void __tlb_remove_table(void *table)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	free_page_and_swap_cache(table);</span>
<span class="quote">&gt; +}</span>

Most other archs have this in pgtable.h, only ARM* has it in tlb.h.

And should we put a comment on explaining _why_ we have RCU_TABLE_FREE
enabled?
<span class="quote">
&gt;  #endif /* _ASM_X86_TLB_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; index 508a708eb9a6..218834a3e9ad 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; @@ -56,7 +56,7 @@ void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pgtable_page_dtor(pte);</span>
<span class="quote">&gt;  	paravirt_release_pte(page_to_pfn(pte));</span>
<span class="quote">&gt; -	tlb_remove_page(tlb, pte);</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, pte);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="quote">&gt; @@ -72,21 +72,21 @@ void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
<span class="quote">&gt;  	tlb-&gt;need_flush_all = 1;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	pgtable_pmd_page_dtor(page);</span>
<span class="quote">&gt; -	tlb_remove_page(tlb, page);</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, page);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="quote">&gt;  void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; -	tlb_remove_page(tlb, virt_to_page(pud));</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, virt_to_page(pud));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 4</span>
<span class="quote">&gt;  void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; -	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
<span class="quote">&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.13.5</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 24, 2017, 3:27 p.m.</div>
<pre class="content">
Peter Zijlstra &lt;peterz@infradead.org&gt; writes:
<span class="quote">
&gt; On Thu, Aug 24, 2017 at 11:22:58AM +0200, Vitaly Kuznetsov wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt; index c7797307fc2b..d43a7fcafee9 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt; @@ -15,4 +15,9 @@</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #include &lt;asm-generic/tlb.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +static inline void __tlb_remove_table(void *table)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	free_page_and_swap_cache(table);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Most other archs have this in pgtable.h, only ARM* has it in tlb.h.</span>
<span class="quote">&gt;</span>

Sure, I can move it in v3 if nobody objects.
<span class="quote">
&gt; And should we put a comment on explaining _why_ we have RCU_TABLE_FREE</span>
<span class="quote">&gt; enabled?</span>

Do you think adding something like

/*
 * While x86 architecture in general requires an IPI to perform TLB
 * shootdown, enablement code for several hypervisors overrides
 * .flush_tlb_others hook in pv_mmu_ops and implements it by issuing
 * a hypercall. To keep software pagetable walkers safe in this case we 
 * switch to RCU based table free (HAVE_RCU_TABLE_FREE). See the comment
 * below &#39;ifdef CONFIG_HAVE_RCU_TABLE_FREE&#39; in include/asm-generic/tlb.h
 * for more details.
 */

before __tlb_remove_table would suffice? Or do you see a better place
for such comment?

Actually, after enabling HAVE_RCU_TABLE_FREE on x86 we may consider
switching to this mechanism globally: it seems to have negligible effect
on performace (and all major arches will already have it). One step at a
time, though.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Aug. 24, 2017, 4:06 p.m.</div>
<pre class="content">
On Thu, Aug 24, 2017 at 05:27:21PM +0200, Vitaly Kuznetsov wrote:
<span class="quote">&gt; Do you think adding something like</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;  * While x86 architecture in general requires an IPI to perform TLB</span>
<span class="quote">&gt;  * shootdown, enablement code for several hypervisors overrides</span>
<span class="quote">&gt;  * .flush_tlb_others hook in pv_mmu_ops and implements it by issuing</span>
<span class="quote">&gt;  * a hypercall. To keep software pagetable walkers safe in this case we </span>
<span class="quote">&gt;  * switch to RCU based table free (HAVE_RCU_TABLE_FREE). See the comment</span>
<span class="quote">&gt;  * below &#39;ifdef CONFIG_HAVE_RCU_TABLE_FREE&#39; in include/asm-generic/tlb.h</span>
<span class="quote">&gt;  * for more details.</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; before __tlb_remove_table would suffice? Or do you see a better place</span>
<span class="quote">&gt; for such comment?</span>

Yes, that seems fine. Thanks!
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 25, 2017, 7:10 a.m.</div>
<pre class="content">
Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt; writes:
<span class="quote">
&gt; Peter Zijlstra &lt;peterz@infradead.org&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On Thu, Aug 24, 2017 at 11:22:58AM +0200, Vitaly Kuznetsov wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt;&gt; index c7797307fc2b..d43a7fcafee9 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/include/asm/tlb.h</span>
<span class="quote">&gt;&gt;&gt; @@ -15,4 +15,9 @@</span>
<span class="quote">&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;  #include &lt;asm-generic/tlb.h&gt;</span>
<span class="quote">&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt; +static inline void __tlb_remove_table(void *table)</span>
<span class="quote">&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt; +	free_page_and_swap_cache(table);</span>
<span class="quote">&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Most other archs have this in pgtable.h, only ARM* has it in tlb.h.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Sure, I can move it in v3 if nobody objects.</span>
<span class="quote">&gt;</span>

Well, turns out it is going to be a bit tricky. 

free_page_and_swap_cache() is defined in linux/swap.h but we can&#39;t just
include it from arch/x86/include/asm/pgtable.h as pgtable.h itself is
included from swap.h:

...
In file included from ./include/linux/mm.h:70:0,
                 from ./include/linux/memcontrol.h:29,
                 from ./include/linux/swap.h:8,
                 from ./include/linux/suspend.h:4,
                 from arch/x86/kernel/asm-offsets.c:12:
./arch/x86/include/asm/pgtable.h: In function ‘__tlb_remove_table’:
./arch/x86/include/asm/pgtable.h:1252:2: error: implicit declaration of function ‘free_page_and_swap_cache’; did you mean ‘file_write_and_wait_range’? [-Werror=implicit-function-declaration]
  free_page_and_swap_cache(table);
  ^~~~~~~~~~~~~~~~~~~~~~~~
...

An easy solution would be to make __tlb_remove_table() a define instead
of inline but personally I&#39;d rather prefer to follow ARM and leave it in
tlb.h.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 323cb065be5e..b0bfc27d05a2 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -167,6 +167,7 @@</span> <span class="p_context"> config X86</span>
 	select HAVE_HARDLOCKUP_DETECTOR_PERF	if PERF_EVENTS &amp;&amp; HAVE_PERF_EVENTS_NMI
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
<span class="p_add">+	select HAVE_RCU_TABLE_FREE</span>
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_RELIABLE_STACKTRACE		if X86_64 &amp;&amp; FRAME_POINTER &amp;&amp; STACK_VALIDATION
 	select HAVE_STACK_VALIDATION		if X86_64
<span class="p_header">diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="p_header">index c7797307fc2b..d43a7fcafee9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlb.h</span>
<span class="p_chunk">@@ -15,4 +15,9 @@</span> <span class="p_context"></span>
 
 #include &lt;asm-generic/tlb.h&gt;
 
<span class="p_add">+static inline void __tlb_remove_table(void *table)</span>
<span class="p_add">+{</span>
<span class="p_add">+	free_page_and_swap_cache(table);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_TLB_H */
<span class="p_header">diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="p_header">index 508a708eb9a6..218834a3e9ad 100644</span>
<span class="p_header">--- a/arch/x86/mm/pgtable.c</span>
<span class="p_header">+++ b/arch/x86/mm/pgtable.c</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"> void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
 {
 	pgtable_page_dtor(pte);
 	paravirt_release_pte(page_to_pfn(pte));
<span class="p_del">-	tlb_remove_page(tlb, pte);</span>
<span class="p_add">+	tlb_remove_table(tlb, pte);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 2
<span class="p_chunk">@@ -72,21 +72,21 @@</span> <span class="p_context"> void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
 	tlb-&gt;need_flush_all = 1;
 #endif
 	pgtable_pmd_page_dtor(page);
<span class="p_del">-	tlb_remove_page(tlb, page);</span>
<span class="p_add">+	tlb_remove_table(tlb, page);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
 void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)
 {
 	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(pud));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(pud));</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 4
 void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)
 {
 	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(p4d));</span>
 }
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



