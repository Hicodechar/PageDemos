
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[07/44] xen-swiotlb: consolidate xen_swiotlb_dma_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [07/44] xen-swiotlb: consolidate xen_swiotlb_dma_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 8, 2017, 1:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170608132609.32662-8-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9774717/mbox/"
   >mbox</a>
|
   <a href="/patch/9774717/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9774717/">/patch/9774717/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	71ECB60393 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 13:27:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 626F728451
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 13:27:12 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 56EC728520; Thu,  8 Jun 2017 13:27:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 75D4628451
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 13:27:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751775AbdFHN1A (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Jun 2017 09:27:00 -0400
Received: from bombadil.infradead.org ([65.50.211.133]:33800 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751748AbdFHN04 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Jun 2017 09:26:56 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=3oaiNZW5ZaHbyPxTpuGKgIuRdDLxwqHfpQDI1LH8u0E=;
	b=dKuGXIuw4/U9XoFhcvqS1UFVT
	G/L+9vCOLYCT7n7KZDVWyd/R9gKdut6XkyYH30mPmiHh5dRY/sXWIKAGimI3RFkmfM5XYmeR/kAmO
	luTbkmIt1kJWRj5mPXI1iO/vm9aqnAVZskxsuEuM+Sawygb1L1NobKk7q3ixA0p6/Jpj4JFBLyfi5
	6UzAlAbcMq1CWsZSLSG19a9jQzV8+5ACPoAcNkQR5zWEiP/6UisHCo+xU/5J8T+NIUOs++ucLxOpi
	TC6gPV0GHCP4JFYnQjfX/PAS7VrQP8aYQ2BRcwMypX4EoN5xoupcibmltH3VkfbsqVYgoG+Lpyy0j
	GHsVkVPsQ==;
Received: from clnet-p099-196.ikbnet.co.at ([83.175.99.196] helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.87 #1 (Red Hat
	Linux)) id 1dIxSW-0005Ml-Pt; Thu, 08 Jun 2017 13:26:45 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: x86@kernel.org, linux-arm-kernel@lists.infradead.org,
	xen-devel@lists.xenproject.org, linux-c6x-dev@linux-c6x.org,
	linux-hexagon@vger.kernel.org, linux-ia64@vger.kernel.org,
	linux-mips@linux-mips.org, openrisc@lists.librecores.org,
	linuxppc-dev@lists.ozlabs.org, linux-s390@vger.kernel.org,
	linux-sh@vger.kernel.org, sparclinux@vger.kernel.org,
	linux-xtensa@linux-xtensa.org, dmaengine@vger.kernel.org,
	linux-tegra@vger.kernel.org, dri-devel@lists.freedesktop.org,
	linux-samsung-soc@vger.kernel.org,
	iommu@lists.linux-foundation.org, netdev@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH 07/44] xen-swiotlb: consolidate xen_swiotlb_dma_ops
Date: Thu,  8 Jun 2017 15:25:32 +0200
Message-Id: &lt;20170608132609.32662-8-hch@lst.de&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170608132609.32662-1-hch@lst.de&gt;
References: &lt;20170608132609.32662-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - June 8, 2017, 1:25 p.m.</div>
<pre class="content">
ARM and x86 had duplicated versions of the dma_ops structure, the
only difference is that x86 hasn&#39;t wired up the set_dma_mask,
mmap, and get_sgtable ops yet.  On x86 all of them are identical
to the generic version, so they aren&#39;t needed but harmless.

All the symbols used only for xen_swiotlb_dma_ops can now be marked
static as well.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 arch/arm/xen/mm.c              | 17 --------
 arch/x86/xen/pci-swiotlb-xen.c | 14 -------
 drivers/xen/swiotlb-xen.c      | 93 ++++++++++++++++++++++--------------------
 include/xen/swiotlb-xen.h      | 62 +---------------------------
 4 files changed, 49 insertions(+), 137 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3407">Konrad Rzeszutek Wilk</a> - June 11, 2017, 2:36 a.m.</div>
<pre class="content">
On Thu, Jun 08, 2017 at 03:25:32PM +0200, Christoph Hellwig wrote:
<span class="quote">&gt; ARM and x86 had duplicated versions of the dma_ops structure, the</span>
<span class="quote">&gt; only difference is that x86 hasn&#39;t wired up the set_dma_mask,</span>
<span class="quote">&gt; mmap, and get_sgtable ops yet.  On x86 all of them are identical</span>
<span class="quote">&gt; to the generic version, so they aren&#39;t needed but harmless.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; All the symbols used only for xen_swiotlb_dma_ops can now be marked</span>
<span class="quote">&gt; static as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/xen/mm.c              | 17 --------</span>
<span class="quote">&gt;  arch/x86/xen/pci-swiotlb-xen.c | 14 -------</span>
<span class="quote">&gt;  drivers/xen/swiotlb-xen.c      | 93 ++++++++++++++++++++++--------------------</span>
<span class="quote">&gt;  include/xen/swiotlb-xen.h      | 62 +---------------------------</span>
<span class="quote">&gt;  4 files changed, 49 insertions(+), 137 deletions(-)</span>

Yeeey!
<span class="reviewed-by">
Reviewed-by: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/xen/mm.c b/arch/arm/xen/mm.c</span>
<span class="p_header">index f0325d96b97a..785d2a562a23 100644</span>
<span class="p_header">--- a/arch/arm/xen/mm.c</span>
<span class="p_header">+++ b/arch/arm/xen/mm.c</span>
<span class="p_chunk">@@ -185,23 +185,6 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(xen_destroy_contiguous_region);</span>
 const struct dma_map_ops *xen_dma_ops;
 EXPORT_SYMBOL(xen_dma_ops);
 
<span class="p_del">-static const struct dma_map_ops xen_swiotlb_dma_ops = {</span>
<span class="p_del">-	.alloc = xen_swiotlb_alloc_coherent,</span>
<span class="p_del">-	.free = xen_swiotlb_free_coherent,</span>
<span class="p_del">-	.sync_single_for_cpu = xen_swiotlb_sync_single_for_cpu,</span>
<span class="p_del">-	.sync_single_for_device = xen_swiotlb_sync_single_for_device,</span>
<span class="p_del">-	.sync_sg_for_cpu = xen_swiotlb_sync_sg_for_cpu,</span>
<span class="p_del">-	.sync_sg_for_device = xen_swiotlb_sync_sg_for_device,</span>
<span class="p_del">-	.map_sg = xen_swiotlb_map_sg_attrs,</span>
<span class="p_del">-	.unmap_sg = xen_swiotlb_unmap_sg_attrs,</span>
<span class="p_del">-	.map_page = xen_swiotlb_map_page,</span>
<span class="p_del">-	.unmap_page = xen_swiotlb_unmap_page,</span>
<span class="p_del">-	.dma_supported = xen_swiotlb_dma_supported,</span>
<span class="p_del">-	.set_dma_mask = xen_swiotlb_set_dma_mask,</span>
<span class="p_del">-	.mmap = xen_swiotlb_dma_mmap,</span>
<span class="p_del">-	.get_sgtable = xen_swiotlb_get_sgtable,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 int __init xen_mm_init(void)
 {
 	struct gnttab_cache_flush cflush;
<span class="p_header">diff --git a/arch/x86/xen/pci-swiotlb-xen.c b/arch/x86/xen/pci-swiotlb-xen.c</span>
<span class="p_header">index 42b08f8fc2ca..37c6056a7bba 100644</span>
<span class="p_header">--- a/arch/x86/xen/pci-swiotlb-xen.c</span>
<span class="p_header">+++ b/arch/x86/xen/pci-swiotlb-xen.c</span>
<span class="p_chunk">@@ -18,20 +18,6 @@</span> <span class="p_context"></span>
 
 int xen_swiotlb __read_mostly;
 
<span class="p_del">-static const struct dma_map_ops xen_swiotlb_dma_ops = {</span>
<span class="p_del">-	.alloc = xen_swiotlb_alloc_coherent,</span>
<span class="p_del">-	.free = xen_swiotlb_free_coherent,</span>
<span class="p_del">-	.sync_single_for_cpu = xen_swiotlb_sync_single_for_cpu,</span>
<span class="p_del">-	.sync_single_for_device = xen_swiotlb_sync_single_for_device,</span>
<span class="p_del">-	.sync_sg_for_cpu = xen_swiotlb_sync_sg_for_cpu,</span>
<span class="p_del">-	.sync_sg_for_device = xen_swiotlb_sync_sg_for_device,</span>
<span class="p_del">-	.map_sg = xen_swiotlb_map_sg_attrs,</span>
<span class="p_del">-	.unmap_sg = xen_swiotlb_unmap_sg_attrs,</span>
<span class="p_del">-	.map_page = xen_swiotlb_map_page,</span>
<span class="p_del">-	.unmap_page = xen_swiotlb_unmap_page,</span>
<span class="p_del">-	.dma_supported = xen_swiotlb_dma_supported,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 /*
  * pci_xen_swiotlb_detect - set xen_swiotlb to 1 if necessary
  *
<span class="p_header">diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">index 8dab0d3dc172..a0f006daab48 100644</span>
<span class="p_header">--- a/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">+++ b/drivers/xen/swiotlb-xen.c</span>
<span class="p_chunk">@@ -295,7 +295,8 @@</span> <span class="p_context"> int __ref xen_swiotlb_init(int verbose, bool early)</span>
 		free_pages((unsigned long)xen_io_tlb_start, order);
 	return rc;
 }
<span class="p_del">-void *</span>
<span class="p_add">+</span>
<span class="p_add">+static void *</span>
 xen_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
 			   dma_addr_t *dma_handle, gfp_t flags,
 			   unsigned long attrs)
<span class="p_chunk">@@ -346,9 +347,8 @@</span> <span class="p_context"> xen_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 	memset(ret, 0, size);
 	return ret;
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_alloc_coherent);</span>
 
<span class="p_del">-void</span>
<span class="p_add">+static void</span>
 xen_swiotlb_free_coherent(struct device *hwdev, size_t size, void *vaddr,
 			  dma_addr_t dev_addr, unsigned long attrs)
 {
<span class="p_chunk">@@ -369,8 +369,6 @@</span> <span class="p_context"> xen_swiotlb_free_coherent(struct device *hwdev, size_t size, void *vaddr,</span>
 
 	xen_free_coherent_pages(hwdev, size, vaddr, (dma_addr_t)phys, attrs);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_free_coherent);</span>
<span class="p_del">-</span>
 
 /*
  * Map a single buffer of the indicated size for DMA in streaming mode.  The
<span class="p_chunk">@@ -379,7 +377,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(xen_swiotlb_free_coherent);</span>
  * Once the device is given the dma address, the device owns this memory until
  * either xen_swiotlb_unmap_page or xen_swiotlb_dma_sync_single is performed.
  */
<span class="p_del">-dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
<span class="p_add">+static dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
 				unsigned long offset, size_t size,
 				enum dma_data_direction dir,
 				unsigned long attrs)
<span class="p_chunk">@@ -429,7 +427,6 @@</span> <span class="p_context"> dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
 
 	return DMA_ERROR_CODE;
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_map_page);</span>
 
 /*
  * Unmap a single streaming mode DMA translation.  The dma_addr and size must
<span class="p_chunk">@@ -467,13 +464,12 @@</span> <span class="p_context"> static void xen_unmap_single(struct device *hwdev, dma_addr_t dev_addr,</span>
 	dma_mark_clean(phys_to_virt(paddr), size);
 }
 
<span class="p_del">-void xen_swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
<span class="p_add">+static void xen_swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 			    size_t size, enum dma_data_direction dir,
 			    unsigned long attrs)
 {
 	xen_unmap_single(hwdev, dev_addr, size, dir, attrs);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_unmap_page);</span>
 
 /*
  * Make physical memory consistent for a single streaming mode DMA translation
<span class="p_chunk">@@ -516,7 +512,6 @@</span> <span class="p_context"> xen_swiotlb_sync_single_for_cpu(struct device *hwdev, dma_addr_t dev_addr,</span>
 {
 	xen_swiotlb_sync_single(hwdev, dev_addr, size, dir, SYNC_FOR_CPU);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_sync_single_for_cpu);</span>
 
 void
 xen_swiotlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,
<span class="p_chunk">@@ -524,7 +519,25 @@</span> <span class="p_context"> xen_swiotlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,</span>
 {
 	xen_swiotlb_sync_single(hwdev, dev_addr, size, dir, SYNC_FOR_DEVICE);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_sync_single_for_device);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Unmap a set of streaming mode DMA translations.  Again, cpu read rules</span>
<span class="p_add">+ * concerning calls here are the same as for swiotlb_unmap_page() above.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void</span>
<span class="p_add">+xen_swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
<span class="p_add">+			   int nelems, enum dma_data_direction dir,</span>
<span class="p_add">+			   unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct scatterlist *sg;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(dir == DMA_NONE);</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_sg(sgl, sg, nelems, i)</span>
<span class="p_add">+		xen_unmap_single(hwdev, sg-&gt;dma_address, sg_dma_len(sg), dir, attrs);</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
 
 /*
  * Map a set of buffers described by scatterlist in streaming mode for DMA.
<span class="p_chunk">@@ -542,7 +555,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(xen_swiotlb_sync_single_for_device);</span>
  * Device ownership issues as mentioned above for xen_swiotlb_map_page are the
  * same here.
  */
<span class="p_del">-int</span>
<span class="p_add">+static int</span>
 xen_swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl,
 			 int nelems, enum dma_data_direction dir,
 			 unsigned long attrs)
<span class="p_chunk">@@ -599,27 +612,6 @@</span> <span class="p_context"> xen_swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
 	}
 	return nelems;
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_map_sg_attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * Unmap a set of streaming mode DMA translations.  Again, cpu read rules</span>
<span class="p_del">- * concerning calls here are the same as for swiotlb_unmap_page() above.</span>
<span class="p_del">- */</span>
<span class="p_del">-void</span>
<span class="p_del">-xen_swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
<span class="p_del">-			   int nelems, enum dma_data_direction dir,</span>
<span class="p_del">-			   unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct scatterlist *sg;</span>
<span class="p_del">-	int i;</span>
<span class="p_del">-</span>
<span class="p_del">-	BUG_ON(dir == DMA_NONE);</span>
<span class="p_del">-</span>
<span class="p_del">-	for_each_sg(sgl, sg, nelems, i)</span>
<span class="p_del">-		xen_unmap_single(hwdev, sg-&gt;dma_address, sg_dma_len(sg), dir, attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_unmap_sg_attrs);</span>
 
 /*
  * Make physical memory consistent for a set of streaming mode DMA translations
<span class="p_chunk">@@ -641,21 +633,19 @@</span> <span class="p_context"> xen_swiotlb_sync_sg(struct device *hwdev, struct scatterlist *sgl,</span>
 					sg_dma_len(sg), dir, target);
 }
 
<span class="p_del">-void</span>
<span class="p_add">+static void</span>
 xen_swiotlb_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,
 			    int nelems, enum dma_data_direction dir)
 {
 	xen_swiotlb_sync_sg(hwdev, sg, nelems, dir, SYNC_FOR_CPU);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_sync_sg_for_cpu);</span>
 
<span class="p_del">-void</span>
<span class="p_add">+static void</span>
 xen_swiotlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,
 			       int nelems, enum dma_data_direction dir)
 {
 	xen_swiotlb_sync_sg(hwdev, sg, nelems, dir, SYNC_FOR_DEVICE);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_sync_sg_for_device);</span>
 
 /*
  * Return whether the given device DMA address mask can be supported
<span class="p_chunk">@@ -663,14 +653,13 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(xen_swiotlb_sync_sg_for_device);</span>
  * during bus mastering, then you would pass 0x00ffffff as the mask to
  * this function.
  */
<span class="p_del">-int</span>
<span class="p_add">+static int</span>
 xen_swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
 	return xen_virt_to_bus(xen_io_tlb_end - 1) &lt;= mask;
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_dma_supported);</span>
 
<span class="p_del">-int</span>
<span class="p_add">+static int</span>
 xen_swiotlb_set_dma_mask(struct device *dev, u64 dma_mask)
 {
 	if (!dev-&gt;dma_mask || !xen_swiotlb_dma_supported(dev, dma_mask))
<span class="p_chunk">@@ -680,14 +669,13 @@</span> <span class="p_context"> xen_swiotlb_set_dma_mask(struct device *dev, u64 dma_mask)</span>
 
 	return 0;
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_set_dma_mask);</span>
 
 /*
  * Create userspace mapping for the DMA-coherent memory.
  * This function should be called with the pages from the current domain only,
  * passing pages mapped from other domains would lead to memory corruption.
  */
<span class="p_del">-int</span>
<span class="p_add">+static int</span>
 xen_swiotlb_dma_mmap(struct device *dev, struct vm_area_struct *vma,
 		     void *cpu_addr, dma_addr_t dma_addr, size_t size,
 		     unsigned long attrs)
<span class="p_chunk">@@ -699,13 +687,12 @@</span> <span class="p_context"> xen_swiotlb_dma_mmap(struct device *dev, struct vm_area_struct *vma,</span>
 #endif
 	return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_dma_mmap);</span>
 
 /*
  * This function should be called with the pages from the current domain only,
  * passing pages mapped from other domains would lead to memory corruption.
  */
<span class="p_del">-int</span>
<span class="p_add">+static int</span>
 xen_swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,
 			void *cpu_addr, dma_addr_t handle, size_t size,
 			unsigned long attrs)
<span class="p_chunk">@@ -727,4 +714,20 @@</span> <span class="p_context"> xen_swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
 #endif
 	return dma_common_get_sgtable(dev, sgt, cpu_addr, handle, size);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(xen_swiotlb_get_sgtable);</span>
<span class="p_add">+</span>
<span class="p_add">+const struct dma_map_ops xen_swiotlb_dma_ops = {</span>
<span class="p_add">+	.alloc = xen_swiotlb_alloc_coherent,</span>
<span class="p_add">+	.free = xen_swiotlb_free_coherent,</span>
<span class="p_add">+	.sync_single_for_cpu = xen_swiotlb_sync_single_for_cpu,</span>
<span class="p_add">+	.sync_single_for_device = xen_swiotlb_sync_single_for_device,</span>
<span class="p_add">+	.sync_sg_for_cpu = xen_swiotlb_sync_sg_for_cpu,</span>
<span class="p_add">+	.sync_sg_for_device = xen_swiotlb_sync_sg_for_device,</span>
<span class="p_add">+	.map_sg = xen_swiotlb_map_sg_attrs,</span>
<span class="p_add">+	.unmap_sg = xen_swiotlb_unmap_sg_attrs,</span>
<span class="p_add">+	.map_page = xen_swiotlb_map_page,</span>
<span class="p_add">+	.unmap_page = xen_swiotlb_unmap_page,</span>
<span class="p_add">+	.dma_supported = xen_swiotlb_dma_supported,</span>
<span class="p_add">+	.set_dma_mask = xen_swiotlb_set_dma_mask,</span>
<span class="p_add">+	.mmap = xen_swiotlb_dma_mmap,</span>
<span class="p_add">+	.get_sgtable = xen_swiotlb_get_sgtable,</span>
<span class="p_add">+};</span>
<span class="p_header">diff --git a/include/xen/swiotlb-xen.h b/include/xen/swiotlb-xen.h</span>
<span class="p_header">index 1f6d78f044b6..ed2de363da33 100644</span>
<span class="p_header">--- a/include/xen/swiotlb-xen.h</span>
<span class="p_header">+++ b/include/xen/swiotlb-xen.h</span>
<span class="p_chunk">@@ -1,69 +1,9 @@</span> <span class="p_context"></span>
 #ifndef __LINUX_SWIOTLB_XEN_H
 #define __LINUX_SWIOTLB_XEN_H
 
<span class="p_del">-#include &lt;linux/dma-direction.h&gt;</span>
<span class="p_del">-#include &lt;linux/scatterlist.h&gt;</span>
 #include &lt;linux/swiotlb.h&gt;
 
 extern int xen_swiotlb_init(int verbose, bool early);
<span class="p_add">+extern const struct dma_map_ops xen_swiotlb_dma_ops;</span>
 
<span class="p_del">-extern void</span>
<span class="p_del">-*xen_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
<span class="p_del">-			    dma_addr_t *dma_handle, gfp_t flags,</span>
<span class="p_del">-			    unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_free_coherent(struct device *hwdev, size_t size,</span>
<span class="p_del">-			  void *vaddr, dma_addr_t dma_handle,</span>
<span class="p_del">-			  unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
<span class="p_del">-				       unsigned long offset, size_t size,</span>
<span class="p_del">-				       enum dma_data_direction dir,</span>
<span class="p_del">-				       unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void xen_swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
<span class="p_del">-				   size_t size, enum dma_data_direction dir,</span>
<span class="p_del">-				   unsigned long attrs);</span>
<span class="p_del">-extern int</span>
<span class="p_del">-xen_swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
<span class="p_del">-			 int nelems, enum dma_data_direction dir,</span>
<span class="p_del">-			 unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
<span class="p_del">-			   int nelems, enum dma_data_direction dir,</span>
<span class="p_del">-			   unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_sync_single_for_cpu(struct device *hwdev, dma_addr_t dev_addr,</span>
<span class="p_del">-				size_t size, enum dma_data_direction dir);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,</span>
<span class="p_del">-			    int nelems, enum dma_data_direction dir);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,</span>
<span class="p_del">-				   size_t size, enum dma_data_direction dir);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void</span>
<span class="p_del">-xen_swiotlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,</span>
<span class="p_del">-			       int nelems, enum dma_data_direction dir);</span>
<span class="p_del">-</span>
<span class="p_del">-extern int</span>
<span class="p_del">-xen_swiotlb_dma_supported(struct device *hwdev, u64 mask);</span>
<span class="p_del">-</span>
<span class="p_del">-extern int</span>
<span class="p_del">-xen_swiotlb_set_dma_mask(struct device *dev, u64 dma_mask);</span>
<span class="p_del">-</span>
<span class="p_del">-extern int</span>
<span class="p_del">-xen_swiotlb_dma_mmap(struct device *dev, struct vm_area_struct *vma,</span>
<span class="p_del">-		     void *cpu_addr, dma_addr_t dma_addr, size_t size,</span>
<span class="p_del">-		     unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern int</span>
<span class="p_del">-xen_swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="p_del">-			void *cpu_addr, dma_addr_t handle, size_t size,</span>
<span class="p_del">-			unsigned long attrs);</span>
 #endif /* __LINUX_SWIOTLB_XEN_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



