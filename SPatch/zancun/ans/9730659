
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,06/08] iommu/ipmmu-vmsa: Use fwspec iommu_priv on ARM64 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,06/08] iommu/ipmmu-vmsa: Use fwspec iommu_priv on ARM64</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 17, 2017, 10:07 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;149501564036.21593.16964345443958773870.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9730659/mbox/"
   >mbox</a>
|
   <a href="/patch/9730659/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9730659/">/patch/9730659/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7950760138 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 May 2017 10:12:05 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 68A5A205AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 May 2017 10:12:05 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5D9302872D; Wed, 17 May 2017 10:12:05 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.3 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI, RCVD_IN_SORBS_SPAM,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B8CE4205AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 May 2017 10:12:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754163AbdEQKMC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 17 May 2017 06:12:02 -0400
Received: from mail-pg0-f68.google.com ([74.125.83.68]:32923 &quot;EHLO
	mail-pg0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753920AbdEQKL6 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 17 May 2017 06:11:58 -0400
Received: by mail-pg0-f68.google.com with SMTP id s62so1280637pgc.0;
	Wed, 17 May 2017 03:11:52 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=SfT9w08upsZK4VD3WNzHAkNnWFp5x/MurxAy44O9Quk=;
	b=lp8s1wEw+LVhPakPS90i9RoHwg0l4xclYqrxbn/DwVoEzoT/1bjSlCgb6+YQWIUZxX
	LAGjqZ7fNxehYwy3OFIvVw0JnNtjhMRXPj+dHlKXQoWVKXkvCvHRLRyhLILgcSgn6OHe
	4wYpM002V3epA/m0+qw6FrRD/LvkoNxuP4qwfI8VOxsYvb/8hkjkdO2UEJWGnDO3eE0N
	5Z4mqIw04shUJODsl+o2GnFUi6REBoVZF8cuEF9ClvoUvJZ8J8nJGC1zB34VnpmvhygU
	Bvs5JVeFWRFVQADand0XVoU6EG5LU18/N2ijKSyX0jjKO4A+M2rEAgXLJu5CexrrqrvM
	8Kxw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=SfT9w08upsZK4VD3WNzHAkNnWFp5x/MurxAy44O9Quk=;
	b=NhjsX+WZ3MHfdrzD3YrKsJhgpCpDZwqmGrR8J/x4WniHg/KLN4sR7jpgE51F9g49wU
	VUQSiq+HcTP5ECNMEXE3tU+YWWPUT2rURXMB13PzjFRtYXMTh27DA2P8EQPEfDNvvdrK
	ekA3MCrb6t6bFY457CeMmEOkn2JmFmcSPvAJbou3sMQgpWb6hXWXY1zZBa5Ld4Dp8kcG
	5MToE8GLbvvCqPjAUbPQLH5h6Tn4XEWbjz6gU+FkqVm7noRfbbJYVbomJCs7bajNcdbM
	C1INjwZQdHWTJnqdMax4e1unOYHPKanArqWJJ+hBcWMp2AZC6MTIlIE4FnB5bI1t84/B
	YCUg==
X-Gm-Message-State: AODbwcCjuoJ+fmyAI+4tEXC4LDH7/DPG6OceggrcSOW37DWFL8ghJUwt
	PrPfvXSfcp4xbA==
X-Received: by 10.84.217.139 with SMTP id p11mr3352734pli.146.1495015907443; 
	Wed, 17 May 2017 03:11:47 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	p84sm3520009pfi.25.2017.05.17.03.11.43
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 17 May 2017 03:11:45 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: joro@8bytes.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	sricharan@codeaurora.org, will.deacon@arm.com,
	linux-kernel@vger.kernel.org, linux-renesas-soc@vger.kernel.org,
	iommu@lists.linux-foundation.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;, robin.murphy@arm.com,
	m.szyprowski@samsung.com
Date: Wed, 17 May 2017 19:07:20 +0900
Message-Id: &lt;149501564036.21593.16964345443958773870.sendpatchset@little-apple&gt;
In-Reply-To: &lt;149501557669.21593.1017116915706613060.sendpatchset@little-apple&gt;
References: &lt;149501557669.21593.1017116915706613060.sendpatchset@little-apple&gt;
Subject: [PATCH v8 06/08] iommu/ipmmu-vmsa: Use fwspec iommu_priv on ARM64
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - May 17, 2017, 10:07 a.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Convert from archdata to iommu_priv via iommu_fwspec on ARM64 but
let 32-bit ARM keep on using archdata for now.

Once the 32-bit ARM code and the IPMMU driver is able to move over
to CONFIG_IOMMU_DMA=y then coverting to fwspec via -&gt;of_xlate() will
be easy.

For now fwspec ids and num_ids are not used to allow code sharing between
32-bit and 64-bit ARM code inside the driver.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
---

 Changes since V7:
 - Rewrote code to use iommu_fwspec, thanks Robin!
 - Dropped reviewed-by from Joerg, also skipped tag from Geert

 drivers/iommu/ipmmu-vmsa.c |   97 ++++++++++++++++++++++++++------------------
 1 file changed, 58 insertions(+), 39 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0011/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2017-05-17 16:45:07.510607110 +0900</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"> struct ipmmu_vmsa_domain {</span>
 	spinlock_t lock;			/* Protects mappings */
 };
 
<span class="p_del">-struct ipmmu_vmsa_archdata {</span>
<span class="p_add">+struct ipmmu_vmsa_iommu_priv {</span>
 	struct ipmmu_vmsa_device *mmu;
 	unsigned int *utlbs;
 	unsigned int num_utlbs;
<span class="p_chunk">@@ -72,6 +72,24 @@</span> <span class="p_context"> static struct ipmmu_vmsa_domain *to_vmsa</span>
 	return container_of(dom, struct ipmmu_vmsa_domain, io_domain);
 }
 
<span class="p_add">+</span>
<span class="p_add">+static struct ipmmu_vmsa_iommu_priv *to_priv(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined(CONFIG_ARM)</span>
<span class="p_add">+	return dev-&gt;archdata.iommu;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return dev-&gt;iommu_fwspec-&gt;iommu_priv;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+static void set_priv(struct device *dev, struct ipmmu_vmsa_iommu_priv *p)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined(CONFIG_ARM)</span>
<span class="p_add">+	dev-&gt;archdata.iommu = p;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	dev-&gt;iommu_fwspec-&gt;iommu_priv = p;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #define TLB_LOOP_TIMEOUT		100	/* 100us */
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -543,8 +561,8 @@</span> <span class="p_context"> static void ipmmu_domain_free(struct iom</span>
 static int ipmmu_attach_device(struct iommu_domain *io_domain,
 			       struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_del">-	struct ipmmu_vmsa_device *mmu = archdata-&gt;mmu;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
<span class="p_add">+	struct ipmmu_vmsa_device *mmu = priv-&gt;mmu;</span>
 	struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);
 	unsigned long flags;
 	unsigned int i;
<span class="p_chunk">@@ -577,8 +595,8 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 	if (ret &lt; 0)
 		return ret;
 
<span class="p_del">-	for (i = 0; i &lt; archdata-&gt;num_utlbs; ++i)</span>
<span class="p_del">-		ipmmu_utlb_enable(domain, archdata-&gt;utlbs[i]);</span>
<span class="p_add">+	for (i = 0; i &lt; priv-&gt;num_utlbs; ++i)</span>
<span class="p_add">+		ipmmu_utlb_enable(domain, priv-&gt;utlbs[i]);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -586,12 +604,12 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 static void ipmmu_detach_device(struct iommu_domain *io_domain,
 				struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
 	struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);
 	unsigned int i;
 
<span class="p_del">-	for (i = 0; i &lt; archdata-&gt;num_utlbs; ++i)</span>
<span class="p_del">-		ipmmu_utlb_disable(domain, archdata-&gt;utlbs[i]);</span>
<span class="p_add">+	for (i = 0; i &lt; priv-&gt;num_utlbs; ++i)</span>
<span class="p_add">+		ipmmu_utlb_disable(domain, priv-&gt;utlbs[i]);</span>
 
 	/*
 	 * TODO: Optimize by disabling the context when no device is attached.
<span class="p_chunk">@@ -654,7 +672,7 @@</span> <span class="p_context"> static int ipmmu_find_utlbs(struct ipmmu</span>
 
 static int ipmmu_init_platform_device(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv;</span>
 	struct ipmmu_vmsa_device *mmu;
 	unsigned int *utlbs;
 	unsigned int i;
<span class="p_chunk">@@ -697,17 +715,17 @@</span> <span class="p_context"> static int ipmmu_init_platform_device(st</span>
 		}
 	}
 
<span class="p_del">-	archdata = kzalloc(sizeof(*archdata), GFP_KERNEL);</span>
<span class="p_del">-	if (!archdata) {</span>
<span class="p_add">+	priv = kzalloc(sizeof(*priv), GFP_KERNEL);</span>
<span class="p_add">+	if (!priv) {</span>
 		ret = -ENOMEM;
 		goto error;
 	}
 
<span class="p_del">-	archdata-&gt;mmu = mmu;</span>
<span class="p_del">-	archdata-&gt;utlbs = utlbs;</span>
<span class="p_del">-	archdata-&gt;num_utlbs = num_utlbs;</span>
<span class="p_del">-	archdata-&gt;dev = dev;</span>
<span class="p_del">-	dev-&gt;archdata.iommu = archdata;</span>
<span class="p_add">+	priv-&gt;mmu = mmu;</span>
<span class="p_add">+	priv-&gt;utlbs = utlbs;</span>
<span class="p_add">+	priv-&gt;num_utlbs = num_utlbs;</span>
<span class="p_add">+	priv-&gt;dev = dev;</span>
<span class="p_add">+	set_priv(dev, priv);</span>
 	return 0;
 
 error:
<span class="p_chunk">@@ -727,12 +745,11 @@</span> <span class="p_context"> static struct iommu_domain *ipmmu_domain</span>
 
 static int ipmmu_add_device(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata;</span>
 	struct ipmmu_vmsa_device *mmu = NULL;
 	struct iommu_group *group;
 	int ret;
 
<span class="p_del">-	if (dev-&gt;archdata.iommu) {</span>
<span class="p_add">+	if (to_priv(dev)) {</span>
 		dev_warn(dev, &quot;IOMMU driver already assigned to device %s\n&quot;,
 			 dev_name(dev));
 		return -EINVAL;
<span class="p_chunk">@@ -768,8 +785,7 @@</span> <span class="p_context"> static int ipmmu_add_device(struct devic</span>
 	 * - Make the mapping size configurable ? We currently use a 2GB mapping
 	 *   at a 1GB offset to ensure that NULL VAs will fault.
 	 */
<span class="p_del">-	archdata = dev-&gt;archdata.iommu;</span>
<span class="p_del">-	mmu = archdata-&gt;mmu;</span>
<span class="p_add">+	mmu = to_priv(dev)-&gt;mmu;</span>
 	if (!mmu-&gt;mapping) {
 		struct dma_iommu_mapping *mapping;
 
<span class="p_chunk">@@ -800,24 +816,24 @@</span> <span class="p_context"> error:</span>
 	if (!IS_ERR_OR_NULL(group))
 		iommu_group_remove_device(dev);
 
<span class="p_del">-	kfree(archdata-&gt;utlbs);</span>
<span class="p_del">-	kfree(archdata);</span>
<span class="p_del">-	dev-&gt;archdata.iommu = NULL;</span>
<span class="p_add">+	kfree(to_priv(dev)-&gt;utlbs);</span>
<span class="p_add">+	kfree(to_priv(dev));</span>
<span class="p_add">+	set_priv(dev, NULL);</span>
 
 	return ret;
 }
 
 static void ipmmu_remove_device(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
 
 	arm_iommu_detach_device(dev);
 	iommu_group_remove_device(dev);
 
<span class="p_del">-	kfree(archdata-&gt;utlbs);</span>
<span class="p_del">-	kfree(archdata);</span>
<span class="p_add">+	kfree(priv-&gt;utlbs);</span>
<span class="p_add">+	kfree(priv);</span>
 
<span class="p_del">-	dev-&gt;archdata.iommu = NULL;</span>
<span class="p_add">+	set_priv(dev, NULL);</span>
 }
 
 static const struct iommu_ops ipmmu_ops = {
<span class="p_chunk">@@ -874,11 +890,14 @@</span> <span class="p_context"> static void ipmmu_domain_free_dma(struct</span>
 
 static int ipmmu_add_device_dma(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_add">+	struct iommu_fwspec *fwspec = dev-&gt;iommu_fwspec;</span>
 	struct iommu_group *group;
 
<span class="p_del">-	/* The device has been verified in xlate() */</span>
<span class="p_del">-	if (!archdata)</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Only let through devices that have been verified in xlate()</span>
<span class="p_add">+	 * We may get called with dev-&gt;iommu_fwspec set to NULL.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!fwspec || !fwspec-&gt;iommu_priv)</span>
 		return -ENODEV;
 
 	group = iommu_group_get_for_dev(dev);
<span class="p_chunk">@@ -886,17 +905,17 @@</span> <span class="p_context"> static int ipmmu_add_device_dma(struct d</span>
 		return PTR_ERR(group);
 
 	spin_lock(&amp;ipmmu_slave_devices_lock);
<span class="p_del">-	list_add(&amp;archdata-&gt;list, &amp;ipmmu_slave_devices);</span>
<span class="p_add">+	list_add(&amp;to_priv(dev)-&gt;list, &amp;ipmmu_slave_devices);</span>
 	spin_unlock(&amp;ipmmu_slave_devices_lock);
 	return 0;
 }
 
 static void ipmmu_remove_device_dma(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
 
 	spin_lock(&amp;ipmmu_slave_devices_lock);
<span class="p_del">-	list_del(&amp;archdata-&gt;list);</span>
<span class="p_add">+	list_del(&amp;priv-&gt;list);</span>
 	spin_unlock(&amp;ipmmu_slave_devices_lock);
 
 	iommu_group_remove_device(dev);
<span class="p_chunk">@@ -904,16 +923,16 @@</span> <span class="p_context"> static void ipmmu_remove_device_dma(stru</span>
 
 static struct device *ipmmu_find_sibling_device(struct device *dev)
 {
<span class="p_del">-	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;</span>
<span class="p_del">-	struct ipmmu_vmsa_archdata *sibling_archdata = NULL;</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
<span class="p_add">+	struct ipmmu_vmsa_iommu_priv *sibling_priv = NULL;</span>
 	bool found = false;
 
 	spin_lock(&amp;ipmmu_slave_devices_lock);
 
<span class="p_del">-	list_for_each_entry(sibling_archdata, &amp;ipmmu_slave_devices, list) {</span>
<span class="p_del">-		if (archdata == sibling_archdata)</span>
<span class="p_add">+	list_for_each_entry(sibling_priv, &amp;ipmmu_slave_devices, list) {</span>
<span class="p_add">+		if (priv == sibling_priv)</span>
 			continue;
<span class="p_del">-		if (sibling_archdata-&gt;mmu == archdata-&gt;mmu) {</span>
<span class="p_add">+		if (sibling_priv-&gt;mmu == priv-&gt;mmu) {</span>
 			found = true;
 			break;
 		}
<span class="p_chunk">@@ -921,7 +940,7 @@</span> <span class="p_context"> static struct device *ipmmu_find_sibling</span>
 
 	spin_unlock(&amp;ipmmu_slave_devices_lock);
 
<span class="p_del">-	return found ? sibling_archdata-&gt;dev : NULL;</span>
<span class="p_add">+	return found ? sibling_priv-&gt;dev : NULL;</span>
 }
 
 static struct iommu_group *ipmmu_find_group_dma(struct device *dev)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



