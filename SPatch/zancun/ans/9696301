
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,14/20] fs: retrofit old error reporting API onto new infrastructure - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,14/20] fs: retrofit old error reporting API onto new infrastructure</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=440">Jeff Layton</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 24, 2017, 1:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170424132259.8680-15-jlayton@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9696301/mbox/"
   >mbox</a>
|
   <a href="/patch/9696301/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9696301/">/patch/9696301/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	92E9060389 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Apr 2017 13:29:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 84456282E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Apr 2017 13:29:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 78F9328305; Mon, 24 Apr 2017 13:29:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A623E282E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Apr 2017 13:29:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1171366AbdDXN3s (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 24 Apr 2017 09:29:48 -0400
Received: from mx1.redhat.com ([209.132.183.28]:51386 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1171135AbdDXNY0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 24 Apr 2017 09:24:26 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id AF9B9C04BD25;
	Mon, 24 Apr 2017 13:24:20 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com AF9B9C04BD25
Authentication-Results: ext-mx07.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx07.extmail.prod.ext.phx2.redhat.com;
	spf=pass smtp.mailfrom=jlayton@redhat.com
DKIM-Filter: OpenDKIM Filter v2.11.0 mx1.redhat.com AF9B9C04BD25
Received: from tleilax.poochiereds.net (ovpn-121-37.rdu2.redhat.com
	[10.10.121.37])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 95E9F88F11;
	Mon, 24 Apr 2017 13:24:18 +0000 (UTC)
From: Jeff Layton &lt;jlayton@redhat.com&gt;
To: linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-btrfs@vger.kernel.org, linux-ext4@vger.kernel.org,
	linux-cifs@vger.kernel.org, linux-mm@kvack.org,
	jfs-discussion@lists.sourceforge.net, linux-xfs@vger.kernel.org,
	cluster-devel@redhat.com, linux-f2fs-devel@lists.sourceforge.net,
	v9fs-developer@lists.sourceforge.net, osd-dev@open-osd.org,
	linux-nilfs@vger.kernel.org, linux-block@vger.kernel.org
Cc: dhowells@redhat.com, akpm@linux-foundation.org, hch@infradead.org,
	ross.zwisler@linux.intel.com, mawilcox@microsoft.com,
	jack@suse.com, viro@zeniv.linux.org.uk, corbet@lwn.net,
	neilb@suse.de, clm@fb.com, tytso@mit.edu, axboe@kernel.dk
Subject: [PATCH v3 14/20] fs: retrofit old error reporting API onto new
	infrastructure
Date: Mon, 24 Apr 2017 09:22:53 -0400
Message-Id: &lt;20170424132259.8680-15-jlayton@redhat.com&gt;
In-Reply-To: &lt;20170424132259.8680-1-jlayton@redhat.com&gt;
References: &lt;20170424132259.8680-1-jlayton@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.31]);
	Mon, 24 Apr 2017 13:24:21 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=440">Jeff Layton</a> - April 24, 2017, 1:22 p.m.</div>
<pre class="content">
Now that we have a better way to store and report errors that occur
during writeback, we need to convert the existing codebase to use it. We
could just adapt all of the filesystem code and related infrastructure
to the new API, but that&#39;s a lot of churn.

When it comes to setting errors in the mapping, filemap_set_wb_error is
a drop-in replacement for mapping_set_error. Turn that function into a
simple wrapper around the new one.

Because we want to ensure that writeback errors are always reported at
fsync time, inject filemap_report_wb_error calls much closer to the
syscall boundary, in call_fsync.

For fsync calls (and things like the nfsd equivalent), we either return
the error that the fsync operation returns, or the one returned by
filemap_report_wb_error. In both cases, we advance the file-&gt;f_wb_err to
the latest value. This allows us to provide new fsync semantics that
will return errors that may have occurred previously and been viewed
via other file descriptors.

The final piece of the puzzle is what to do about filemap_check_errors
calls that are being called directly or via filemap_* functions. Here,
we must take a little &quot;creative license&quot;.

Since we now handle advancing the file-&gt;f_wb_err value at the generic
filesystem layer, we no longer need those callers to clear errors out
of the mapping or advance an errseq_t.

A lot of the existing codebase relies on being getting an error back
from those functions when there is a writeback problem, so we do still
want to have them report writeback errors somehow.

When reporting writeback errors, we will always report errors that have
occurred since a particular point in time. With the old writeback error
reporting, the time we used was &quot;since it was last tested/cleared&quot; which
is entirely arbitrary and potentially racy. Now, we can at least report
the latest error that has occurred since an arbitrary point in time
(represented as a sampled errseq_t value).

In the case where we don&#39;t have a struct file to work with, this patch
just has the wrappers sample the current mapping-&gt;wb_err value, and use
that as an arbitrary point from which to check for errors.

That&#39;s probably not &quot;correct&quot; in all cases, particularly in the case of
something like filemap_fdatawait, but I&#39;m not sure it&#39;s any worse than
what we already have, and this gives us a basis from which to work.

A lot of those callers will likely want to change to a model where they
sample the errseq_t much earlier (perhaps when starting a transaction),
store it in an appropriate place and then use that value later when
checking to see if an error occurred.

That will almost certainly take some involvement from other subsystem
maintainers. I&#39;m quite open to adding new API functions to help enable
this if that would be helpful, but I don&#39;t really want to do that until
I better understand what&#39;s needed.
<span class="signed-off-by">
Signed-off-by: Jeff Layton &lt;jlayton@redhat.com&gt;</span>
---
 Documentation/filesystems/vfs.txt |  9 ++++-----
 fs/btrfs/file.c                   | 10 ++--------
 fs/btrfs/tree-log.c               |  9 ++-------
 fs/f2fs/file.c                    |  3 +++
 fs/f2fs/node.c                    |  6 +-----
 fs/fuse/file.c                    |  7 +++++--
 fs/libfs.c                        |  6 ++++--
 include/linux/fs.h                | 17 ++++++++++-------
 include/linux/pagemap.h           |  8 ++------
 mm/filemap.c                      | 33 +++++++++++----------------------
 10 files changed, 44 insertions(+), 64 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/filesystems/vfs.txt b/Documentation/filesystems/vfs.txt</span>
<span class="p_header">index ed06fb39822b..f201a77873f7 100644</span>
<span class="p_header">--- a/Documentation/filesystems/vfs.txt</span>
<span class="p_header">+++ b/Documentation/filesystems/vfs.txt</span>
<span class="p_chunk">@@ -577,7 +577,7 @@</span> <span class="p_context"> written at any point after PG_Dirty is clear.  Once it is known to be</span>
 safe, PG_Writeback is cleared.
 
 If there is an error during writeback, then the address_space should be
<span class="p_del">-marked with an error (typically using filemap_set_wb_error), in order to</span>
<span class="p_add">+marked with an error (typically using mapping_set_error), in order to</span>
 ensure that the error can later be reported to the application when an
 fsync is issued.
 
<span class="p_chunk">@@ -893,10 +893,9 @@</span> <span class="p_context"> otherwise noted.</span>
 
   release: called when the last reference to an open file is closed
 
<span class="p_del">-  fsync: called by the fsync(2) system call. Filesystems that use the</span>
<span class="p_del">-	pagecache should call filemap_report_wb_error before returning</span>
<span class="p_del">-	to ensure that any errors that occurred during writeback are</span>
<span class="p_del">-	reported and the file&#39;s error sequence advanced.</span>
<span class="p_add">+  fsync: called by the fsync(2) system call. Errors that were previously</span>
<span class="p_add">+	 recorded using mapping_set_error will automatically be returned to</span>
<span class="p_add">+	 the application and the file&#39;s error sequence advanced.</span>
 
   fasync: called by the fcntl(2) system call when asynchronous
 	(non-blocking) mode is enabled for a file
<span class="p_header">diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c</span>
<span class="p_header">index 520cb7230b2d..e15faf240b51 100644</span>
<span class="p_header">--- a/fs/btrfs/file.c</span>
<span class="p_header">+++ b/fs/btrfs/file.c</span>
<span class="p_chunk">@@ -1962,6 +1962,7 @@</span> <span class="p_context"> int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)</span>
 	int ret = 0;
 	bool full_sync = 0;
 	u64 len;
<span class="p_add">+	errseq_t wb_since = READ_ONCE(file-&gt;f_wb_err);</span>
 
 	/*
 	 * The range length can be represented by u64, we have to do the typecasts
<span class="p_chunk">@@ -2079,14 +2080,7 @@</span> <span class="p_context"> int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)</span>
 		 */
 		clear_bit(BTRFS_INODE_NEEDS_FULL_SYNC,
 			  &amp;BTRFS_I(inode)-&gt;runtime_flags);
<span class="p_del">-		/*</span>
<span class="p_del">-		 * An ordered extent might have started before and completed</span>
<span class="p_del">-		 * already with io errors, in which case the inode was not</span>
<span class="p_del">-		 * updated and we end up here. So check the inode&#39;s mapping</span>
<span class="p_del">-		 * flags for any errors that might have happened while doing</span>
<span class="p_del">-		 * writeback of file data.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		ret = filemap_check_errors(inode-&gt;i_mapping);</span>
<span class="p_add">+		ret = filemap_check_wb_error(inode-&gt;i_mapping, wb_since);</span>
 		inode_unlock(inode);
 		goto out;
 	}
<span class="p_header">diff --git a/fs/btrfs/tree-log.c b/fs/btrfs/tree-log.c</span>
<span class="p_header">index a59674c3e69e..d0a123dbb199 100644</span>
<span class="p_header">--- a/fs/btrfs/tree-log.c</span>
<span class="p_header">+++ b/fs/btrfs/tree-log.c</span>
<span class="p_chunk">@@ -3972,12 +3972,6 @@</span> <span class="p_context"> static int wait_ordered_extents(struct btrfs_trans_handle *trans,</span>
 			    test_bit(BTRFS_ORDERED_IOERR, &amp;ordered-&gt;flags)));
 
 		if (test_bit(BTRFS_ORDERED_IOERR, &amp;ordered-&gt;flags)) {
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Clear the AS_EIO/AS_ENOSPC flags from the inode&#39;s</span>
<span class="p_del">-			 * i_mapping flags, so that the next fsync won&#39;t get</span>
<span class="p_del">-			 * an outdated io error too.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			filemap_check_errors(inode-&gt;i_mapping);</span>
 			*ordered_io_error = true;
 			break;
 		}
<span class="p_chunk">@@ -4171,6 +4165,7 @@</span> <span class="p_context"> static int btrfs_log_changed_extents(struct btrfs_trans_handle *trans,</span>
 	u64 test_gen;
 	int ret = 0;
 	int num = 0;
<span class="p_add">+	errseq_t since = filemap_sample_wb_error(inode-&gt;vfs_inode.i_mapping);</span>
 
 	INIT_LIST_HEAD(&amp;extents);
 
<span class="p_chunk">@@ -4214,7 +4209,7 @@</span> <span class="p_context"> static int btrfs_log_changed_extents(struct btrfs_trans_handle *trans,</span>
 	 * without writing to the log tree and the fsync must report the
 	 * file data write error and not commit the current transaction.
 	 */
<span class="p_del">-	ret = filemap_check_errors(inode-&gt;vfs_inode.i_mapping);</span>
<span class="p_add">+	ret = filemap_check_wb_error(inode-&gt;vfs_inode.i_mapping, since);</span>
 	if (ret)
 		ctx-&gt;io_err = ret;
 process:
<span class="p_header">diff --git a/fs/f2fs/file.c b/fs/f2fs/file.c</span>
<span class="p_header">index 5f7317875a67..7ce13281925f 100644</span>
<span class="p_header">--- a/fs/f2fs/file.c</span>
<span class="p_header">+++ b/fs/f2fs/file.c</span>
<span class="p_chunk">@@ -187,6 +187,7 @@</span> <span class="p_context"> static int f2fs_do_sync_file(struct file *file, loff_t start, loff_t end,</span>
 		.nr_to_write = LONG_MAX,
 		.for_reclaim = 0,
 	};
<span class="p_add">+	errseq_t since = READ_ONCE(file-&gt;f_wb_err);</span>
 
 	if (unlikely(f2fs_readonly(inode-&gt;i_sb)))
 		return 0;
<span class="p_chunk">@@ -265,6 +266,8 @@</span> <span class="p_context"> static int f2fs_do_sync_file(struct file *file, loff_t start, loff_t end,</span>
 	}
 
 	ret = wait_on_node_pages_writeback(sbi, ino);
<span class="p_add">+	if (ret == 0)</span>
<span class="p_add">+		ret = filemap_check_wb_error(NODE_MAPPING(sbi), since);</span>
 	if (ret)
 		goto out;
 
<span class="p_header">diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c</span>
<span class="p_header">index 481aa8dc79f4..b3ef9504fd8b 100644</span>
<span class="p_header">--- a/fs/f2fs/node.c</span>
<span class="p_header">+++ b/fs/f2fs/node.c</span>
<span class="p_chunk">@@ -1630,7 +1630,7 @@</span> <span class="p_context"> int wait_on_node_pages_writeback(struct f2fs_sb_info *sbi, nid_t ino)</span>
 {
 	pgoff_t index = 0, end = ULONG_MAX;
 	struct pagevec pvec;
<span class="p_del">-	int ret2, ret = 0;</span>
<span class="p_add">+	int ret = 0;</span>
 
 	pagevec_init(&amp;pvec, 0);
 
<span class="p_chunk">@@ -1658,10 +1658,6 @@</span> <span class="p_context"> int wait_on_node_pages_writeback(struct f2fs_sb_info *sbi, nid_t ino)</span>
 		pagevec_release(&amp;pvec);
 		cond_resched();
 	}
<span class="p_del">-</span>
<span class="p_del">-	ret2 = filemap_check_errors(NODE_MAPPING(sbi));</span>
<span class="p_del">-	if (!ret)</span>
<span class="p_del">-		ret = ret2;</span>
 	return ret;
 }
 
<span class="p_header">diff --git a/fs/fuse/file.c b/fs/fuse/file.c</span>
<span class="p_header">index 07d0efcb050c..e1ced9cfb090 100644</span>
<span class="p_header">--- a/fs/fuse/file.c</span>
<span class="p_header">+++ b/fs/fuse/file.c</span>
<span class="p_chunk">@@ -398,6 +398,7 @@</span> <span class="p_context"> static int fuse_flush(struct file *file, fl_owner_t id)</span>
 	struct fuse_req *req;
 	struct fuse_flush_in inarg;
 	int err;
<span class="p_add">+	errseq_t since = READ_ONCE(file-&gt;f_wb_err);</span>
 
 	if (is_bad_inode(inode))
 		return -EIO;
<span class="p_chunk">@@ -413,7 +414,7 @@</span> <span class="p_context"> static int fuse_flush(struct file *file, fl_owner_t id)</span>
 	fuse_sync_writes(inode);
 	inode_unlock(inode);
 
<span class="p_del">-	err = filemap_check_errors(file-&gt;f_mapping);</span>
<span class="p_add">+	err = filemap_check_wb_error(file-&gt;f_mapping, since);</span>
 	if (err)
 		return err;
 
<span class="p_chunk">@@ -446,6 +447,7 @@</span> <span class="p_context"> int fuse_fsync_common(struct file *file, loff_t start, loff_t end,</span>
 	FUSE_ARGS(args);
 	struct fuse_fsync_in inarg;
 	int err;
<span class="p_add">+	errseq_t since;</span>
 
 	if (is_bad_inode(inode))
 		return -EIO;
<span class="p_chunk">@@ -461,6 +463,7 @@</span> <span class="p_context"> int fuse_fsync_common(struct file *file, loff_t start, loff_t end,</span>
 	if (err)
 		goto out;
 
<span class="p_add">+	since = READ_ONCE(file-&gt;f_wb_err);</span>
 	fuse_sync_writes(inode);
 
 	/*
<span class="p_chunk">@@ -468,7 +471,7 @@</span> <span class="p_context"> int fuse_fsync_common(struct file *file, loff_t start, loff_t end,</span>
 	 * filemap_write_and_wait_range() does not catch errors.
 	 * We have to do this directly after fuse_sync_writes()
 	 */
<span class="p_del">-	err = filemap_check_errors(file-&gt;f_mapping);</span>
<span class="p_add">+	err = filemap_check_wb_error(file-&gt;f_mapping, since);</span>
 	if (err)
 		goto out;
 
<span class="p_header">diff --git a/fs/libfs.c b/fs/libfs.c</span>
<span class="p_header">index 12a48ee442d3..23319d74fa42 100644</span>
<span class="p_header">--- a/fs/libfs.c</span>
<span class="p_header">+++ b/fs/libfs.c</span>
<span class="p_chunk">@@ -991,8 +991,10 @@</span> <span class="p_context"> int __generic_file_fsync(struct file *file, loff_t start, loff_t end,</span>
 
 out:
 	inode_unlock(inode);
<span class="p_del">-	err = filemap_check_errors(inode-&gt;i_mapping);</span>
<span class="p_del">-	return ret ? : err;</span>
<span class="p_add">+	if (!ret)</span>
<span class="p_add">+		ret = filemap_check_wb_error(inode-&gt;i_mapping,</span>
<span class="p_add">+						READ_ONCE(file-&gt;f_wb_err));</span>
<span class="p_add">+	return ret;</span>
 }
 EXPORT_SYMBOL(__generic_file_fsync);
 
<span class="p_header">diff --git a/include/linux/fs.h b/include/linux/fs.h</span>
<span class="p_header">index 69a89f667c7f..ca185f026258 100644</span>
<span class="p_header">--- a/include/linux/fs.h</span>
<span class="p_header">+++ b/include/linux/fs.h</span>
<span class="p_chunk">@@ -1741,12 +1741,6 @@</span> <span class="p_context"> static inline int call_mmap(struct file *file, struct vm_area_struct *vma)</span>
 	return file-&gt;f_op-&gt;mmap(file, vma);
 }
 
<span class="p_del">-static inline int call_fsync(struct file *file, loff_t start, loff_t end,</span>
<span class="p_del">-			     int datasync)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return file-&gt;f_op-&gt;fsync(file, start, end, datasync);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,
 			      unsigned long nr_segs, unsigned long fast_segs,
 			      struct iovec *fast_pointer,
<span class="p_chunk">@@ -2523,7 +2517,6 @@</span> <span class="p_context"> extern int __filemap_fdatawrite_range(struct address_space *mapping,</span>
 				loff_t start, loff_t end, int sync_mode);
 extern int filemap_fdatawrite_range(struct address_space *mapping,
 				loff_t start, loff_t end);
<span class="p_del">-extern int filemap_check_errors(struct address_space *mapping);</span>
 extern int __must_check filemap_report_wb_error(struct file *file);
 
 /**
<span class="p_chunk">@@ -2546,6 +2539,16 @@</span> <span class="p_context"> static inline errseq_t filemap_sample_wb_error(struct address_space *mapping)</span>
 	return errseq_sample(&amp;mapping-&gt;wb_err);
 }
 
<span class="p_add">+static inline int call_fsync(struct file *file, loff_t start, loff_t end,</span>
<span class="p_add">+			     int datasync)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret, ret2;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = file-&gt;f_op-&gt;fsync(file, start, end, datasync);</span>
<span class="p_add">+	ret2 = filemap_report_wb_error(file);</span>
<span class="p_add">+	return ret ? : ret2;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
 			   int datasync);
 extern int vfs_fsync(struct file *file, int datasync);
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index 84943e8057ef..32512ffc15fa 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -14,6 +14,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/hardirq.h&gt; /* for in_interrupt() */
 #include &lt;linux/hugetlb_inline.h&gt;
<span class="p_add">+#include &lt;linux/errseq.h&gt;</span>
 
 /*
  * Bits in mapping-&gt;flags.
<span class="p_chunk">@@ -30,12 +31,7 @@</span> <span class="p_context"> enum mapping_flags {</span>
 
 static inline void mapping_set_error(struct address_space *mapping, int error)
 {
<span class="p_del">-	if (unlikely(error)) {</span>
<span class="p_del">-		if (error == -ENOSPC)</span>
<span class="p_del">-			set_bit(AS_ENOSPC, &amp;mapping-&gt;flags);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			set_bit(AS_EIO, &amp;mapping-&gt;flags);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	return errseq_set(&amp;mapping-&gt;wb_err, error);</span>
 }
 
 static inline void mapping_set_unevictable(struct address_space *mapping)
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index ee1a798acfc1..d94a76d4e023 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -36,6 +36,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/memcontrol.h&gt;
 #include &lt;linux/cleancache.h&gt;
 #include &lt;linux/rmap.h&gt;
<span class="p_add">+#include &lt;linux/errseq.h&gt;</span>
 #include &quot;internal.h&quot;
 
 #define CREATE_TRACE_POINTS
<span class="p_chunk">@@ -295,20 +296,6 @@</span> <span class="p_context"> void delete_from_page_cache(struct page *page)</span>
 }
 EXPORT_SYMBOL(delete_from_page_cache);
 
<span class="p_del">-int filemap_check_errors(struct address_space *mapping)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int ret = 0;</span>
<span class="p_del">-	/* Check for outstanding write errors */</span>
<span class="p_del">-	if (test_bit(AS_ENOSPC, &amp;mapping-&gt;flags) &amp;&amp;</span>
<span class="p_del">-	    test_and_clear_bit(AS_ENOSPC, &amp;mapping-&gt;flags))</span>
<span class="p_del">-		ret = -ENOSPC;</span>
<span class="p_del">-	if (test_bit(AS_EIO, &amp;mapping-&gt;flags) &amp;&amp;</span>
<span class="p_del">-	    test_and_clear_bit(AS_EIO, &amp;mapping-&gt;flags))</span>
<span class="p_del">-		ret = -EIO;</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL(filemap_check_errors);</span>
<span class="p_del">-</span>
 /**
  * __filemap_fdatawrite_range - start writeback on mapping dirty pages in range
  * @mapping:	address space structure to write
<span class="p_chunk">@@ -431,9 +418,10 @@</span> <span class="p_context"> int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte,</span>
 			    loff_t end_byte)
 {
 	int ret, ret2;
<span class="p_add">+	errseq_t since = filemap_sample_wb_error(mapping);</span>
 
 	ret = __filemap_fdatawait_range(mapping, start_byte, end_byte);
<span class="p_del">-	ret2 = filemap_check_errors(mapping);</span>
<span class="p_add">+	ret2 = filemap_check_wb_error(mapping, since);</span>
 	if (!ret)
 		ret = ret2;
 
<span class="p_chunk">@@ -489,6 +477,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(filemap_fdatawait);</span>
 int filemap_write_and_wait(struct address_space *mapping)
 {
 	int err = 0;
<span class="p_add">+	errseq_t since = filemap_sample_wb_error(mapping);</span>
 
 	if ((!dax_mapping(mapping) &amp;&amp; mapping-&gt;nrpages) ||
 	    (dax_mapping(mapping) &amp;&amp; mapping-&gt;nrexceptional)) {
<span class="p_chunk">@@ -500,12 +489,12 @@</span> <span class="p_context"> int filemap_write_and_wait(struct address_space *mapping)</span>
 		 * thing (e.g. bug) happened, so we avoid waiting for it.
 		 */
 		if (err != -EIO) {
<span class="p_del">-			int err2 = filemap_fdatawait(mapping);</span>
<span class="p_add">+			filemap_fdatawait_keep_errors(mapping);</span>
 			if (!err)
<span class="p_del">-				err = err2;</span>
<span class="p_add">+				err = filemap_check_wb_error(mapping, since);</span>
 		}
 	} else {
<span class="p_del">-		err = filemap_check_errors(mapping);</span>
<span class="p_add">+		err = filemap_check_wb_error(mapping, since);</span>
 	}
 	return err;
 }
<span class="p_chunk">@@ -526,6 +515,7 @@</span> <span class="p_context"> int filemap_write_and_wait_range(struct address_space *mapping,</span>
 				 loff_t lstart, loff_t lend)
 {
 	int err = 0;
<span class="p_add">+	errseq_t since = filemap_sample_wb_error(mapping);</span>
 
 	if ((!dax_mapping(mapping) &amp;&amp; mapping-&gt;nrpages) ||
 	    (dax_mapping(mapping) &amp;&amp; mapping-&gt;nrexceptional)) {
<span class="p_chunk">@@ -533,13 +523,12 @@</span> <span class="p_context"> int filemap_write_and_wait_range(struct address_space *mapping,</span>
 						 WB_SYNC_ALL);
 		/* See comment of filemap_write_and_wait() */
 		if (err != -EIO) {
<span class="p_del">-			int err2 = filemap_fdatawait_range(mapping,</span>
<span class="p_del">-						lstart, lend);</span>
<span class="p_add">+			__filemap_fdatawait_range(mapping, lstart, lend);</span>
 			if (!err)
<span class="p_del">-				err = err2;</span>
<span class="p_add">+				err = filemap_check_wb_error(mapping, since);</span>
 		}
 	} else {
<span class="p_del">-		err = filemap_check_errors(mapping);</span>
<span class="p_add">+		err = filemap_check_wb_error(mapping, since);</span>
 	}
 	return err;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



