
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[21/30] x86, mm: put mmu-to-h/w ASID translation in one place - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [21/30] x86, mm: put mmu-to-h/w ASID translation in one place</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 10, 2017, 7:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171110193146.5908BE13@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10053631/mbox/"
   >mbox</a>
|
   <a href="/patch/10053631/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10053631/">/patch/10053631/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	52FBA60365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 19:34:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 442952B43C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 19:34:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 390372B43F; Fri, 10 Nov 2017 19:34:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C142E2B43C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 19:34:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754877AbdKJTeS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 10 Nov 2017 14:34:18 -0500
Received: from mga05.intel.com ([192.55.52.43]:10120 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754550AbdKJTcF (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 10 Nov 2017 14:32:05 -0500
Received: from orsmga004.jf.intel.com ([10.7.209.38])
	by fmsmga105.fm.intel.com with ESMTP; 10 Nov 2017 11:32:05 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,375,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;148378887&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.119])
	by orsmga004.jf.intel.com with ESMTP; 10 Nov 2017 11:32:05 -0800
Subject: [PATCH 21/30] x86, mm: put mmu-to-h/w ASID translation in one place
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, dave.hansen@linux.intel.com,
	moritz.lipp@iaik.tugraz.at, daniel.gruss@iaik.tugraz.at,
	michael.schwarz@iaik.tugraz.at, richard.fellner@student.tugraz.at,
	luto@kernel.org, torvalds@linux-foundation.org,
	keescook@google.com, hughd@google.com, x86@kernel.org
From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Date: Fri, 10 Nov 2017 11:31:46 -0800
References: &lt;20171110193058.BECA7D88@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20171110193058.BECA7D88@viggo.jf.intel.com&gt;
Message-Id: &lt;20171110193146.5908BE13@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Nov. 10, 2017, 7:31 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

There are effectively two ASID types:
1. The one stored in the mmu_context that goes from 0-&gt;5
2. The one programmed into the hardware that goes from 1-&gt;6

This consolidates the locations where converting beween the two
(by doing +1) to a single place which gives us a nice place to
comment.  KAISER will also need to, given an ASID, know which
hardware ASID to flush for the userspace mapping.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
Cc: Moritz Lipp &lt;moritz.lipp@iaik.tugraz.at&gt;
Cc: Daniel Gruss &lt;daniel.gruss@iaik.tugraz.at&gt;
Cc: Michael Schwarz &lt;michael.schwarz@iaik.tugraz.at&gt;
Cc: Richard Fellner &lt;richard.fellner@student.tugraz.at&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Kees Cook &lt;keescook@google.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: x86@kernel.org
---

 b/arch/x86/include/asm/tlbflush.h |   30 ++++++++++++++++++------------
 1 file changed, 18 insertions(+), 12 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 10, 2017, 10:03 p.m.</div>
<pre class="content">
On Fri, Nov 10, 2017 at 11:31 AM, Dave Hansen
&lt;dave.hansen@linux.intel.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There are effectively two ASID types:</span>
<span class="quote">&gt; 1. The one stored in the mmu_context that goes from 0-&gt;5</span>
<span class="quote">&gt; 2. The one programmed into the hardware that goes from 1-&gt;6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This consolidates the locations where converting beween the two</span>
<span class="quote">&gt; (by doing +1) to a single place which gives us a nice place to</span>
<span class="quote">&gt; comment.  KAISER will also need to, given an ASID, know which</span>
<span class="quote">&gt; hardware ASID to flush for the userspace mapping.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; Cc: Moritz Lipp &lt;moritz.lipp@iaik.tugraz.at&gt;</span>
<span class="quote">&gt; Cc: Daniel Gruss &lt;daniel.gruss@iaik.tugraz.at&gt;</span>
<span class="quote">&gt; Cc: Michael Schwarz &lt;michael.schwarz@iaik.tugraz.at&gt;</span>
<span class="quote">&gt; Cc: Richard Fellner &lt;richard.fellner@student.tugraz.at&gt;</span>
<span class="quote">&gt; Cc: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Kees Cook &lt;keescook@google.com&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  b/arch/x86/include/asm/tlbflush.h |   30 ++++++++++++++++++------------</span>
<span class="quote">&gt;  1 file changed, 18 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff -puN arch/x86/include/asm/tlbflush.h~kaiser-pcid-pre-build-kern arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/tlbflush.h~kaiser-pcid-pre-build-kern        2017-11-10 11:22:16.521244931 -0800</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/tlbflush.h   2017-11-10 11:22:16.525244931 -0800</span>
<span class="quote">&gt; @@ -87,21 +87,26 @@ static inline u64 inc_mm_tlb_gen(struct</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  #define MAX_ASID_AVAILABLE ((1&lt;&lt;CR3_AVAIL_ASID_BITS) - 2)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -/*</span>
<span class="quote">&gt; - * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="quote">&gt; - * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="quote">&gt; - * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="quote">&gt; - * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="quote">&gt; - * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="quote">&gt; - * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="quote">&gt; - * deterministically.</span>
<span class="quote">&gt; - */</span>
<span class="quote">&gt; +static inline u16 kern_asid(u16 asid)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);</span>
<span class="quote">&gt; +       /*</span>
<span class="quote">&gt; +        * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="quote">&gt; +        * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="quote">&gt; +        * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="quote">&gt; +        * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="quote">&gt; +        * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="quote">&gt; +        * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="quote">&gt; +        * deterministically.</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       return asid + 1;</span>
<span class="quote">&gt; +}</span>

This seems really error-prone.  Maybe we should have a pcid_t type and
make all the interfaces that want a h/w PCID take pcid_t.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Nov. 10, 2017, 10:09 p.m.</div>
<pre class="content">
On 11/10/2017 02:03 PM, Andy Lutomirski wrote:
<span class="quote">&gt;&gt; +static inline u16 kern_asid(u16 asid)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);</span>
<span class="quote">&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt; +        * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="quote">&gt;&gt; +        * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="quote">&gt;&gt; +        * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="quote">&gt;&gt; +        * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="quote">&gt;&gt; +        * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="quote">&gt;&gt; +        * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="quote">&gt;&gt; +        * deterministically.</span>
<span class="quote">&gt;&gt; +        */</span>
<span class="quote">&gt;&gt; +       return asid + 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; This seems really error-prone.  Maybe we should have a pcid_t type and</span>
<span class="quote">&gt; make all the interfaces that want a h/w PCID take pcid_t.</span>

Yeah, totally agree.  I actually had a nasty bug or two around this area
because of this.

I divided them among hw_asid_t and sw_asid_t.  You can turn a sw_asid_t
into a kernel hw_asid_t or a user hw_asid_t.  But, it cause too much
churn across the TLB flushing code so I shelved it for now.

I&#39;d love to come back nd fix this up properly though.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 10, 2017, 10:10 p.m.</div>
<pre class="content">
On Fri, Nov 10, 2017 at 2:09 PM, Dave Hansen
&lt;dave.hansen@linux.intel.com&gt; wrote:
<span class="quote">&gt; On 11/10/2017 02:03 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt; +static inline u16 kern_asid(u16 asid)</span>
<span class="quote">&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt; +       VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);</span>
<span class="quote">&gt;&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt;&gt; +        * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="quote">&gt;&gt;&gt; +        * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="quote">&gt;&gt;&gt; +        * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="quote">&gt;&gt;&gt; +        * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="quote">&gt;&gt;&gt; +        * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="quote">&gt;&gt;&gt; +        * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="quote">&gt;&gt;&gt; +        * deterministically.</span>
<span class="quote">&gt;&gt;&gt; +        */</span>
<span class="quote">&gt;&gt;&gt; +       return asid + 1;</span>
<span class="quote">&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt; This seems really error-prone.  Maybe we should have a pcid_t type and</span>
<span class="quote">&gt;&gt; make all the interfaces that want a h/w PCID take pcid_t.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yeah, totally agree.  I actually had a nasty bug or two around this area</span>
<span class="quote">&gt; because of this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I divided them among hw_asid_t and sw_asid_t.  You can turn a sw_asid_t</span>
<span class="quote">&gt; into a kernel hw_asid_t or a user hw_asid_t.  But, it cause too much</span>
<span class="quote">&gt; churn across the TLB flushing code so I shelved it for now.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;d love to come back nd fix this up properly though.</span>

In the long run, I would go with int for the sw asid and pcid_t for
the PCID.  After all, we index arrays with the SW one.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/x86/include/asm/tlbflush.h~kaiser-pcid-pre-build-kern arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h~kaiser-pcid-pre-build-kern	2017-11-10 11:22:16.521244931 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h	2017-11-10 11:22:16.525244931 -0800</span>
<span class="p_chunk">@@ -87,21 +87,26 @@</span> <span class="p_context"> static inline u64 inc_mm_tlb_gen(struct</span>
  */
 #define MAX_ASID_AVAILABLE ((1&lt;&lt;CR3_AVAIL_ASID_BITS) - 2)
 
<span class="p_del">-/*</span>
<span class="p_del">- * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="p_del">- * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="p_del">- * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="p_del">- * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="p_del">- * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="p_del">- * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="p_del">- * deterministically.</span>
<span class="p_del">- */</span>
<span class="p_add">+static inline u16 kern_asid(u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="p_add">+	 * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="p_add">+	 * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="p_add">+	 * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="p_add">+	 * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="p_add">+	 * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="p_add">+	 * deterministically.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return asid + 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 struct pgd_t;
 static inline unsigned long build_cr3(pgd_t *pgd, u16 asid)
 {
 	if (static_cpu_has(X86_FEATURE_PCID)) {
<span class="p_del">-		VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);</span>
<span class="p_del">-		return __sme_pa(pgd) | (asid + 1);</span>
<span class="p_add">+		return __sme_pa(pgd) | kern_asid(asid);</span>
 	} else {
 		VM_WARN_ON_ONCE(asid != 0);
 		return __sme_pa(pgd);
<span class="p_chunk">@@ -111,7 +116,8 @@</span> <span class="p_context"> static inline unsigned long build_cr3(pg</span>
 static inline unsigned long build_cr3_noflush(pgd_t *pgd, u16 asid)
 {
 	VM_WARN_ON_ONCE(asid &gt; MAX_ASID_AVAILABLE);
<span class="p_del">-	return __sme_pa(pgd) | (asid + 1) | CR3_NOFLUSH;</span>
<span class="p_add">+	VM_WARN_ON_ONCE(!this_cpu_has(X86_FEATURE_PCID));</span>
<span class="p_add">+	return __sme_pa(pgd) | kern_asid(asid) | CR3_NOFLUSH;</span>
 }
 
 #ifdef CONFIG_PARAVIRT

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



