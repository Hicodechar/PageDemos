
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.2,065/110] arm64: kernel: fix tcr_el1.t0sz restore on systems with extended idmap - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.2,065/110] arm64: kernel: fix tcr_el1.t0sz restore on systems with extended idmap</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 6, 2015, 7:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151106191706.909413720@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7572791/mbox/"
   >mbox</a>
|
   <a href="/patch/7572791/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7572791/">/patch/7572791/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id E02549F1C4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Nov 2015 20:36:01 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3DE552074E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Nov 2015 20:36:00 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B0202207C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Nov 2015 20:35:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1162962AbbKFUeW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 6 Nov 2015 15:34:22 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:47315 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S966303AbbKFTWU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 6 Nov 2015 14:22:20 -0500
Received: from localhost (unknown [104.135.10.71])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 3B03A8EF;
	Fri,  6 Nov 2015 19:22:19 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Lorenzo Pieralisi &lt;lorenzo.pieralisi@arm.com&gt;,
	James Morse &lt;james.morse@arm.com&gt;, Will Deacon &lt;will.deacon@arm.com&gt;
Subject: [PATCH 4.2 065/110] arm64: kernel: fix tcr_el1.t0sz restore on
	systems with extended idmap
Date: Fri,  6 Nov 2015 11:19:12 -0800
Message-Id: &lt;20151106191706.909413720@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.6.2
In-Reply-To: &lt;20151106191703.247930828@linuxfoundation.org&gt;
References: &lt;20151106191703.247930828@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Nov. 6, 2015, 7:19 p.m.</div>
<pre class="content">
4.2-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Lorenzo Pieralisi &lt;lorenzo.pieralisi@arm.com&gt;</span>

commit e13d918a19a7b6cba62b32884f5e336e764c2cc6 upstream.

Commit dd006da21646 (&quot;arm64: mm: increase VA range of identity map&quot;)
introduced a mechanism to extend the virtual memory map range
to support arm64 systems with system RAM located at very high offset,
where the identity mapping used to enable/disable the MMU requires
additional translation levels to map the physical memory at an equal
virtual offset.

The kernel detects at boot time the tcr_el1.t0sz value required by the
identity mapping and sets-up the tcr_el1.t0sz register field accordingly,
any time the identity map is required in the kernel (ie when enabling the
MMU).

After enabling the MMU, in the cold boot path the kernel resets the
tcr_el1.t0sz to its default value (ie the actual configuration value for
the system virtual address space) so that after enabling the MMU the
memory space translated by ttbr0_el1 is restored as expected.

Commit dd006da21646 (&quot;arm64: mm: increase VA range of identity map&quot;)
also added code to set-up the tcr_el1.t0sz value when the kernel resumes
from low-power states with the MMU off through cpu_resume() in order to
effectively use the identity mapping to enable the MMU but failed to add
the code required to restore the tcr_el1.t0sz to its default value, when
the core returns to the kernel with the MMU enabled, so that the kernel
might end up running with tcr_el1.t0sz value set-up for the identity
mapping which can be lower than the value required by the actual virtual
address space, resulting in an erroneous set-up.

This patchs adds code in the resume path that restores the tcr_el1.t0sz
default value upon core resume, mirroring this way the cold boot path
behaviour therefore fixing the issue.

Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Fixes: dd006da21646 (&quot;arm64: mm: increase VA range of identity map&quot;)
<span class="acked-by">Acked-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Lorenzo Pieralisi &lt;lorenzo.pieralisi@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: James Morse &lt;james.morse@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/arm64/kernel/suspend.c |   22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/arm64/kernel/suspend.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/suspend.c</span>
<span class="p_chunk">@@ -80,17 +80,21 @@</span> <span class="p_context"> int cpu_suspend(unsigned long arg, int (</span>
 	if (ret == 0) {
 		/*
 		 * We are resuming from reset with TTBR0_EL1 set to the
<span class="p_del">-		 * idmap to enable the MMU; restore the active_mm mappings in</span>
<span class="p_del">-		 * TTBR0_EL1 unless the active_mm == &amp;init_mm, in which case</span>
<span class="p_del">-		 * the thread entered cpu_suspend with TTBR0_EL1 set to</span>
<span class="p_del">-		 * reserved TTBR0 page tables and should be restored as such.</span>
<span class="p_add">+		 * idmap to enable the MMU; set the TTBR0 to the reserved</span>
<span class="p_add">+		 * page tables to prevent speculative TLB allocations, flush</span>
<span class="p_add">+		 * the local tlb and set the default tcr_el1.t0sz so that</span>
<span class="p_add">+		 * the TTBR0 address space set-up is properly restored.</span>
<span class="p_add">+		 * If the current active_mm != &amp;init_mm we entered cpu_suspend</span>
<span class="p_add">+		 * with mappings in TTBR0 that must be restored, so we switch</span>
<span class="p_add">+		 * them back to complete the address space configuration</span>
<span class="p_add">+		 * restoration before returning.</span>
 		 */
<span class="p_del">-		if (mm == &amp;init_mm)</span>
<span class="p_del">-			cpu_set_reserved_ttbr0();</span>
<span class="p_del">-		else</span>
<span class="p_del">-			cpu_switch_mm(mm-&gt;pgd, mm);</span>
<span class="p_del">-</span>
<span class="p_add">+		cpu_set_reserved_ttbr0();</span>
 		flush_tlb_all();
<span class="p_add">+		cpu_set_default_tcr_t0sz();</span>
<span class="p_add">+</span>
<span class="p_add">+		if (mm != &amp;init_mm)</span>
<span class="p_add">+			cpu_switch_mm(mm-&gt;pgd, mm);</span>
 
 		/*
 		 * Restore per-cpu offset before any kernel

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



