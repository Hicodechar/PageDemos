
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>KVM: arm/arm64: replacing per-VM&#39;s per-CPU variable - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    KVM: arm/arm64: replacing per-VM&#39;s per-CPU variable</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173249">Hao Peng</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 13, 2018, 9:03 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1520974993-40423-1-git-send-email-peng.hao2@zte.com.cn&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10278559/mbox/"
   >mbox</a>
|
   <a href="/patch/10278559/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10278559/">/patch/10278559/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C0F6060231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Mar 2018 12:51:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B24FD28FDF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Mar 2018 12:51:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AE5B22909B; Tue, 13 Mar 2018 12:51:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.0 required=2.0 tests=BAYES_00,
	DATE_IN_FUTURE_06_12, 
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 018D728FDF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Mar 2018 12:51:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752283AbeCMMvG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 13 Mar 2018 08:51:06 -0400
Received: from mxhk.zte.com.cn ([63.217.80.70]:39882 &quot;EHLO mxhk.zte.com.cn&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751405AbeCMMvF (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 13 Mar 2018 08:51:05 -0400
Received: from mse01.zte.com.cn (unknown [10.30.3.20])
	by Forcepoint Email with ESMTPS id 8D0FD454A5116B32E67C;
	Tue, 13 Mar 2018 20:51:02 +0800 (CST)
Received: from notes_smtp.zte.com.cn ([10.30.1.239])
	by mse01.zte.com.cn with ESMTP id w2DCossS097844;
	Tue, 13 Mar 2018 20:50:54 +0800 (GMT-8)
	(envelope-from peng.hao2@zte.com.cn)
Received: from localhost.localdomain.localdomain ([10.74.120.59])
	by szsmtp06.zte.com.cn (Lotus Domino Release 8.5.3FP6)
	with ESMTP id 2018031320505927-1869959 ;
	Tue, 13 Mar 2018 20:50:59 +0800 
From: Peng Hao &lt;peng.hao2@zte.com.cn&gt;
To: marc.zyngier@arm.com, linux@armlinux.org.uk,
	catalin.marinas@arm.com, will.deacon@arm.com, cdall@kernel.org
Cc: linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
	linux-kernel@vger.kernel.org, Peng Hao &lt;peng.hao2@zte.com.cn&gt;
Subject: [PATCH] KVM: arm/arm64: replacing per-VM&#39;s per-CPU variable
Date: Wed, 14 Mar 2018 05:03:13 +0800
Message-Id: &lt;1520974993-40423-1-git-send-email-peng.hao2@zte.com.cn&gt;
X-Mailer: git-send-email 1.8.3.1
X-MIMETrack: Itemize by SMTP Server on SZSMTP06/server/zte_ltd(Release
	8.5.3FP6|November 21, 2013) at 2018-03-13 20:50:59,
	Serialize by Router on notes_smtp/zte_ltd(Release 9.0.1FP7|August 17,
	2016) at 2018-03-13 20:50:50,
	Serialize complete at 2018-03-13 20:50:50
X-MAIL: mse01.zte.com.cn w2DCossS097844
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - March 13, 2018, 1:01 p.m.</div>
<pre class="content">
[You&#39;re repeatedly posting to the kvmarm mailing list without being
subscribed to it. I&#39;ve flushed the queue now, but please consider
subscribing to the list, it will help everyone]

On 13/03/18 21:03, Peng Hao wrote:
<span class="quote">&gt; Using a global per-CPU variable instead of per-VM&#39;s per-CPU variable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Peng Hao &lt;peng.hao2@zte.com.cn&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/include/asm/kvm_host.h   |  3 ---</span>
<span class="quote">&gt;  arch/arm64/include/asm/kvm_host.h |  3 ---</span>
<span class="quote">&gt;  virt/kvm/arm/arm.c                | 26 ++++++--------------------</span>
<span class="quote">&gt;  3 files changed, 6 insertions(+), 26 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; index 248b930..4224f3b 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; @@ -59,9 +59,6 @@ struct kvm_arch {</span>
<span class="quote">&gt;  	/* VTTBR value associated with below pgd and vmid */</span>
<span class="quote">&gt;  	u64    vttbr;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Anything that is not used directly from assembly code goes</span>
<span class="quote">&gt;  	 * here.</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; index 596f8e4..5035a08 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; @@ -67,9 +67,6 @@ struct kvm_arch {</span>
<span class="quote">&gt;  	/* VTTBR value associated with above pgd and vmid */</span>
<span class="quote">&gt;  	u64    vttbr;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/* The maximum number of vCPUs depends on the used GIC model */</span>
<span class="quote">&gt;  	int max_vcpus;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; index 86941f6..a67ffb0 100644</span>
<span class="quote">&gt; --- a/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; +++ b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; @@ -59,6 +59,8 @@</span>
<span class="quote">&gt;  /* Per-CPU variable containing the currently running vcpu. */</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_arm_running_vcpu);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_last_ran_vcpu);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /* The VMID used in the VTTBR */</span>
<span class="quote">&gt;  static atomic64_t kvm_vmid_gen = ATOMIC64_INIT(1);</span>
<span class="quote">&gt;  static u32 kvm_next_vmid;</span>
<span class="quote">&gt; @@ -115,18 +117,11 @@ void kvm_arch_check_processor_compat(void *rtn)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	int ret, cpu;</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (type)</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	kvm-&gt;arch.last_vcpu_ran = alloc_percpu(typeof(*kvm-&gt;arch.last_vcpu_ran));</span>
<span class="quote">&gt; -	if (!kvm-&gt;arch.last_vcpu_ran)</span>
<span class="quote">&gt; -		return -ENOMEM;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	for_each_possible_cpu(cpu)</span>
<span class="quote">&gt; -		*per_cpu_ptr(kvm-&gt;arch.last_vcpu_ran, cpu) = -1;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	ret = kvm_alloc_stage2_pgd(kvm);</span>
<span class="quote">&gt;  	if (ret)</span>
<span class="quote">&gt;  		goto out_fail_alloc;</span>
<span class="quote">&gt; @@ -147,9 +142,7 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  out_free_stage2_pgd:</span>
<span class="quote">&gt;  	kvm_free_stage2_pgd(kvm);</span>
<span class="quote">&gt; -out_fail_alloc:</span>
<span class="quote">&gt; -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt; +out_fail_alloc:</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -179,9 +172,6 @@ void kvm_arch_destroy_vm(struct kvm *kvm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kvm_vgic_destroy(kvm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	for (i = 0; i &lt; KVM_MAX_VCPUS; ++i) {</span>
<span class="quote">&gt;  		if (kvm-&gt;vcpus[i]) {</span>
<span class="quote">&gt;  			kvm_arch_vcpu_free(kvm-&gt;vcpus[i]);</span>
<span class="quote">&gt; @@ -343,17 +333,13 @@ int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	int *last_ran;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	last_ran = this_cpu_ptr(vcpu-&gt;kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * We might get preempted before the vCPU actually runs, but</span>
<span class="quote">&gt;  	 * over-invalidation doesn&#39;t affect correctness.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	if (*last_ran != vcpu-&gt;vcpu_id) {</span>
<span class="quote">&gt; +	if (per_cpu(kvm_last_ran_vcpu, cpu) != vcpu) {</span>
<span class="quote">&gt;  		kvm_call_hyp(__kvm_tlb_flush_local_vmid, vcpu);</span>
<span class="quote">&gt; -		*last_ran = vcpu-&gt;vcpu_id;</span>
<span class="quote">&gt; +		per_cpu(kvm_last_ran_vcpu, cpu) = vcpu;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	vcpu-&gt;cpu = cpu;</span>
<span class="quote">&gt; </span>

Have you read and understood what this code is about? The whole point of
this code is to track physical CPUs on a per-VM basis. Making it global
completely defeats the point, and can result in guest memory corruption.
Please see commit 94d0e5980d67.

Thanks,

	M.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - March 13, 2018, 7:33 p.m.</div>
<pre class="content">
On 13/03/18 13:01, Marc Zyngier wrote:
<span class="quote">&gt; [You&#39;re repeatedly posting to the kvmarm mailing list without being</span>
<span class="quote">&gt; subscribed to it. I&#39;ve flushed the queue now, but please consider</span>
<span class="quote">&gt; subscribing to the list, it will help everyone]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 13/03/18 21:03, Peng Hao wrote:</span>
<span class="quote">&gt;&gt; Using a global per-CPU variable instead of per-VM&#39;s per-CPU variable.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Peng Hao &lt;peng.hao2@zte.com.cn&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/arm/include/asm/kvm_host.h   |  3 ---</span>
<span class="quote">&gt;&gt;   arch/arm64/include/asm/kvm_host.h |  3 ---</span>
<span class="quote">&gt;&gt;   virt/kvm/arm/arm.c                | 26 ++++++--------------------</span>
<span class="quote">&gt;&gt;   3 files changed, 6 insertions(+), 26 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; index 248b930..4224f3b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; @@ -59,9 +59,6 @@ struct kvm_arch {</span>
<span class="quote">&gt;&gt;   	/* VTTBR value associated with below pgd and vmid */</span>
<span class="quote">&gt;&gt;   	u64    vttbr;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt;&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;   	/*</span>
<span class="quote">&gt;&gt;   	 * Anything that is not used directly from assembly code goes</span>
<span class="quote">&gt;&gt;   	 * here.</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; index 596f8e4..5035a08 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; @@ -67,9 +67,6 @@ struct kvm_arch {</span>
<span class="quote">&gt;&gt;   	/* VTTBR value associated with above pgd and vmid */</span>
<span class="quote">&gt;&gt;   	u64    vttbr;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt;&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;   	/* The maximum number of vCPUs depends on the used GIC model */</span>
<span class="quote">&gt;&gt;   	int max_vcpus;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt;&gt; index 86941f6..a67ffb0 100644</span>
<span class="quote">&gt;&gt; --- a/virt/kvm/arm/arm.c</span>
<span class="quote">&gt;&gt; +++ b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt;&gt; @@ -59,6 +59,8 @@</span>
<span class="quote">&gt;&gt;   /* Per-CPU variable containing the currently running vcpu. */</span>
<span class="quote">&gt;&gt;   static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_arm_running_vcpu);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_last_ran_vcpu);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   /* The VMID used in the VTTBR */</span>
<span class="quote">&gt;&gt;   static atomic64_t kvm_vmid_gen = ATOMIC64_INIT(1);</span>
<span class="quote">&gt;&gt;   static u32 kvm_next_vmid;</span>
<span class="quote">&gt;&gt; @@ -115,18 +117,11 @@ void kvm_arch_check_processor_compat(void *rtn)</span>
<span class="quote">&gt;&gt;    */</span>
<span class="quote">&gt;&gt;   int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; -	int ret, cpu;</span>
<span class="quote">&gt;&gt; +	int ret;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	if (type)</span>
<span class="quote">&gt;&gt;   		return -EINVAL;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	kvm-&gt;arch.last_vcpu_ran = alloc_percpu(typeof(*kvm-&gt;arch.last_vcpu_ran));</span>
<span class="quote">&gt;&gt; -	if (!kvm-&gt;arch.last_vcpu_ran)</span>
<span class="quote">&gt;&gt; -		return -ENOMEM;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt; -	for_each_possible_cpu(cpu)</span>
<span class="quote">&gt;&gt; -		*per_cpu_ptr(kvm-&gt;arch.last_vcpu_ran, cpu) = -1;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;   	ret = kvm_alloc_stage2_pgd(kvm);</span>
<span class="quote">&gt;&gt;   	if (ret)</span>
<span class="quote">&gt;&gt;   		goto out_fail_alloc;</span>
<span class="quote">&gt;&gt; @@ -147,9 +142,7 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt;&gt;   	return ret;</span>
<span class="quote">&gt;&gt;   out_free_stage2_pgd:</span>
<span class="quote">&gt;&gt;   	kvm_free_stage2_pgd(kvm);</span>
<span class="quote">&gt;&gt; -out_fail_alloc:</span>
<span class="quote">&gt;&gt; -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt;&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt;&gt; +out_fail_alloc:</span>
<span class="quote">&gt;&gt;   	return ret;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; @@ -179,9 +172,6 @@ void kvm_arch_destroy_vm(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	kvm_vgic_destroy(kvm);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt;&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;   	for (i = 0; i &lt; KVM_MAX_VCPUS; ++i) {</span>
<span class="quote">&gt;&gt;   		if (kvm-&gt;vcpus[i]) {</span>
<span class="quote">&gt;&gt;   			kvm_arch_vcpu_free(kvm-&gt;vcpus[i]);</span>
<span class="quote">&gt;&gt; @@ -343,17 +333,13 @@ int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; -	int *last_ran;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt; -	last_ran = this_cpu_ptr(vcpu-&gt;kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;   	/*</span>
<span class="quote">&gt;&gt;   	 * We might get preempted before the vCPU actually runs, but</span>
<span class="quote">&gt;&gt;   	 * over-invalidation doesn&#39;t affect correctness.</span>
<span class="quote">&gt;&gt;   	 */</span>
<span class="quote">&gt;&gt; -	if (*last_ran != vcpu-&gt;vcpu_id) {</span>
<span class="quote">&gt;&gt; +	if (per_cpu(kvm_last_ran_vcpu, cpu) != vcpu) {</span>
<span class="quote">&gt;&gt;   		kvm_call_hyp(__kvm_tlb_flush_local_vmid, vcpu);</span>
<span class="quote">&gt;&gt; -		*last_ran = vcpu-&gt;vcpu_id;</span>
<span class="quote">&gt;&gt; +		per_cpu(kvm_last_ran_vcpu, cpu) = vcpu;</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	vcpu-&gt;cpu = cpu;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Have you read and understood what this code is about? The whole point of</span>
<span class="quote">&gt; this code is to track physical CPUs on a per-VM basis. Making it global</span>
<span class="quote">&gt; completely defeats the point, and can result in guest memory corruption.</span>
<span class="quote">&gt; Please see commit 94d0e5980d67.</span>

I won&#39;t comment on the patch itself (AFAICS it is rather broken), but I 
suppose there is a grain of sense in the general idea, since the set of 
physical CPUs itself is fundamentally a global thing. Given a large 
number of pCPUs and a large number of VMs it could well be more 
space-efficient to keep a single per-pCPU record of a {vmid,vcpu_id} 
tuple or some other *globally-unique* vCPU namespace (I guess just the 
struct kvm_vcpu pointer might work, but then it would be hard to avoid 
unnecessary invalidation when switching VMIDs entirely).

Robin.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173249">Hao Peng</a> - March 13, 2018, 9:03 p.m.</div>
<pre class="content">
Using a global per-CPU variable instead of per-VM&#39;s per-CPU variable.
<span class="signed-off-by">
Signed-off-by: Peng Hao &lt;peng.hao2@zte.com.cn&gt;</span>
---
 arch/arm/include/asm/kvm_host.h   |  3 ---
 arch/arm64/include/asm/kvm_host.h |  3 ---
 virt/kvm/arm/arm.c                | 26 ++++++--------------------
 3 files changed, 6 insertions(+), 26 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - March 13, 2018, 9:31 p.m.</div>
<pre class="content">
On Tue, 13 Mar 2018 19:33:55 +0000,
Robin Murphy wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; On 13/03/18 13:01, Marc Zyngier wrote:</span>
<span class="quote">&gt; &gt; [You&#39;re repeatedly posting to the kvmarm mailing list without being</span>
<span class="quote">&gt; &gt; subscribed to it. I&#39;ve flushed the queue now, but please consider</span>
<span class="quote">&gt; &gt; subscribing to the list, it will help everyone]</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On 13/03/18 21:03, Peng Hao wrote:</span>
<span class="quote">&gt; &gt;&gt; Using a global per-CPU variable instead of per-VM&#39;s per-CPU variable.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Peng Hao &lt;peng.hao2@zte.com.cn&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;   arch/arm/include/asm/kvm_host.h   |  3 ---</span>
<span class="quote">&gt; &gt;&gt;   arch/arm64/include/asm/kvm_host.h |  3 ---</span>
<span class="quote">&gt; &gt;&gt;   virt/kvm/arm/arm.c                | 26 ++++++--------------------</span>
<span class="quote">&gt; &gt;&gt;   3 files changed, 6 insertions(+), 26 deletions(-)</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; index 248b930..4224f3b 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; @@ -59,9 +59,6 @@ struct kvm_arch {</span>
<span class="quote">&gt; &gt;&gt;   	/* VTTBR value associated with below pgd and vmid */</span>
<span class="quote">&gt; &gt;&gt;   	u64    vttbr;</span>
<span class="quote">&gt; &gt;&gt;   -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt; &gt;&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;   	/*</span>
<span class="quote">&gt; &gt;&gt;   	 * Anything that is not used directly from assembly code goes</span>
<span class="quote">&gt; &gt;&gt;   	 * here.</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; index 596f8e4..5035a08 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/include/asm/kvm_host.h</span>
<span class="quote">&gt; &gt;&gt; @@ -67,9 +67,6 @@ struct kvm_arch {</span>
<span class="quote">&gt; &gt;&gt;   	/* VTTBR value associated with above pgd and vmid */</span>
<span class="quote">&gt; &gt;&gt;   	u64    vttbr;</span>
<span class="quote">&gt; &gt;&gt;   -	/* The last vcpu id that ran on each physical CPU */</span>
<span class="quote">&gt; &gt;&gt; -	int __percpu *last_vcpu_ran;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;   	/* The maximum number of vCPUs depends on the used GIC model */</span>
<span class="quote">&gt; &gt;&gt;   	int max_vcpus;</span>
<span class="quote">&gt; &gt;&gt;   diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; &gt;&gt; index 86941f6..a67ffb0 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; &gt;&gt; +++ b/virt/kvm/arm/arm.c</span>
<span class="quote">&gt; &gt;&gt; @@ -59,6 +59,8 @@</span>
<span class="quote">&gt; &gt;&gt;   /* Per-CPU variable containing the currently running vcpu. */</span>
<span class="quote">&gt; &gt;&gt;   static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_arm_running_vcpu);</span>
<span class="quote">&gt; &gt;&gt;   +static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_last_ran_vcpu);</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;   /* The VMID used in the VTTBR */</span>
<span class="quote">&gt; &gt;&gt;   static atomic64_t kvm_vmid_gen = ATOMIC64_INIT(1);</span>
<span class="quote">&gt; &gt;&gt;   static u32 kvm_next_vmid;</span>
<span class="quote">&gt; &gt;&gt; @@ -115,18 +117,11 @@ void kvm_arch_check_processor_compat(void *rtn)</span>
<span class="quote">&gt; &gt;&gt;    */</span>
<span class="quote">&gt; &gt;&gt;   int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt; &gt;&gt;   {</span>
<span class="quote">&gt; &gt;&gt; -	int ret, cpu;</span>
<span class="quote">&gt; &gt;&gt; +	int ret;</span>
<span class="quote">&gt; &gt;&gt;     	if (type)</span>
<span class="quote">&gt; &gt;&gt;   		return -EINVAL;</span>
<span class="quote">&gt; &gt;&gt;   -	kvm-&gt;arch.last_vcpu_ran =</span>
<span class="quote">&gt; &gt;&gt; alloc_percpu(typeof(*kvm-&gt;arch.last_vcpu_ran));</span>
<span class="quote">&gt; &gt;&gt; -	if (!kvm-&gt;arch.last_vcpu_ran)</span>
<span class="quote">&gt; &gt;&gt; -		return -ENOMEM;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt; -	for_each_possible_cpu(cpu)</span>
<span class="quote">&gt; &gt;&gt; -		*per_cpu_ptr(kvm-&gt;arch.last_vcpu_ran, cpu) = -1;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;   	ret = kvm_alloc_stage2_pgd(kvm);</span>
<span class="quote">&gt; &gt;&gt;   	if (ret)</span>
<span class="quote">&gt; &gt;&gt;   		goto out_fail_alloc;</span>
<span class="quote">&gt; &gt;&gt; @@ -147,9 +142,7 @@ int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
<span class="quote">&gt; &gt;&gt;   	return ret;</span>
<span class="quote">&gt; &gt;&gt;   out_free_stage2_pgd:</span>
<span class="quote">&gt; &gt;&gt;   	kvm_free_stage2_pgd(kvm);</span>
<span class="quote">&gt; &gt;&gt; -out_fail_alloc:</span>
<span class="quote">&gt; &gt;&gt; -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; &gt;&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt; &gt;&gt; +out_fail_alloc:</span>
<span class="quote">&gt; &gt;&gt;   	return ret;</span>
<span class="quote">&gt; &gt;&gt;   }</span>
<span class="quote">&gt; &gt;&gt;   @@ -179,9 +172,6 @@ void kvm_arch_destroy_vm(struct kvm *kvm)</span>
<span class="quote">&gt; &gt;&gt;     	kvm_vgic_destroy(kvm);</span>
<span class="quote">&gt; &gt;&gt;   -	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; &gt;&gt; -	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;   	for (i = 0; i &lt; KVM_MAX_VCPUS; ++i) {</span>
<span class="quote">&gt; &gt;&gt;   		if (kvm-&gt;vcpus[i]) {</span>
<span class="quote">&gt; &gt;&gt;   			kvm_arch_vcpu_free(kvm-&gt;vcpus[i]);</span>
<span class="quote">&gt; &gt;&gt; @@ -343,17 +333,13 @@ int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt; &gt;&gt;     void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)</span>
<span class="quote">&gt; &gt;&gt;   {</span>
<span class="quote">&gt; &gt;&gt; -	int *last_ran;</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt; -	last_ran = this_cpu_ptr(vcpu-&gt;kvm-&gt;arch.last_vcpu_ran);</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;   	/*</span>
<span class="quote">&gt; &gt;&gt;   	 * We might get preempted before the vCPU actually runs, but</span>
<span class="quote">&gt; &gt;&gt;   	 * over-invalidation doesn&#39;t affect correctness.</span>
<span class="quote">&gt; &gt;&gt;   	 */</span>
<span class="quote">&gt; &gt;&gt; -	if (*last_ran != vcpu-&gt;vcpu_id) {</span>
<span class="quote">&gt; &gt;&gt; +	if (per_cpu(kvm_last_ran_vcpu, cpu) != vcpu) {</span>
<span class="quote">&gt; &gt;&gt;   		kvm_call_hyp(__kvm_tlb_flush_local_vmid, vcpu);</span>
<span class="quote">&gt; &gt;&gt; -		*last_ran = vcpu-&gt;vcpu_id;</span>
<span class="quote">&gt; &gt;&gt; +		per_cpu(kvm_last_ran_vcpu, cpu) = vcpu;</span>
<span class="quote">&gt; &gt;&gt;   	}</span>
<span class="quote">&gt; &gt;&gt;     	vcpu-&gt;cpu = cpu;</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Have you read and understood what this code is about? The whole point of</span>
<span class="quote">&gt; &gt; this code is to track physical CPUs on a per-VM basis. Making it global</span>
<span class="quote">&gt; &gt; completely defeats the point, and can result in guest memory corruption.</span>
<span class="quote">&gt; &gt; Please see commit 94d0e5980d67.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I won&#39;t comment on the patch itself (AFAICS it is rather broken), but</span>
<span class="quote">&gt; I suppose there is a grain of sense in the general idea, since the set</span>
<span class="quote">&gt; of physical CPUs itself is fundamentally a global thing. Given a large</span>
<span class="quote">&gt; number of pCPUs and a large number of VMs it could well be more</span>
<span class="quote">&gt; space-efficient to keep a single per-pCPU record of a {vmid,vcpu_id}</span>
<span class="quote">&gt; tuple or some other *globally-unique* vCPU namespace (I guess just the</span>
<span class="quote">&gt; struct kvm_vcpu pointer might work, but then it would be hard to avoid</span>
<span class="quote">&gt; unnecessary invalidation when switching VMIDs entirely).</span>

The main issue with this approach is to come up with a data structure
that allows quick retrieval/replacement, doesn&#39;t have weird locking
requirements and doesn&#39;t require to allocate memory unexpectedly.

The advantage of the current approach is to sidestep these potential
issues altogether by having a single, up-front allocation and zero
locking requirements. I fully appreciate that in the long run, we may
need to move away from it. I&#39;m not quite sure what to replace it
with. Something like a per-CPU btree seems like a possibility.

	M.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h</span>
<span class="p_header">index 248b930..4224f3b 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -59,9 +59,6 @@</span> <span class="p_context"> struct kvm_arch {</span>
 	/* VTTBR value associated with below pgd and vmid */
 	u64    vttbr;
 
<span class="p_del">-	/* The last vcpu id that ran on each physical CPU */</span>
<span class="p_del">-	int __percpu *last_vcpu_ran;</span>
<span class="p_del">-</span>
 	/*
 	 * Anything that is not used directly from assembly code goes
 	 * here.
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_header">index 596f8e4..5035a08 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -67,9 +67,6 @@</span> <span class="p_context"> struct kvm_arch {</span>
 	/* VTTBR value associated with above pgd and vmid */
 	u64    vttbr;
 
<span class="p_del">-	/* The last vcpu id that ran on each physical CPU */</span>
<span class="p_del">-	int __percpu *last_vcpu_ran;</span>
<span class="p_del">-</span>
 	/* The maximum number of vCPUs depends on the used GIC model */
 	int max_vcpus;
 
<span class="p_header">diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c</span>
<span class="p_header">index 86941f6..a67ffb0 100644</span>
<span class="p_header">--- a/virt/kvm/arm/arm.c</span>
<span class="p_header">+++ b/virt/kvm/arm/arm.c</span>
<span class="p_chunk">@@ -59,6 +59,8 @@</span> <span class="p_context"></span>
 /* Per-CPU variable containing the currently running vcpu. */
 static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_arm_running_vcpu);
 
<span class="p_add">+static DEFINE_PER_CPU(struct kvm_vcpu *, kvm_last_ran_vcpu);</span>
<span class="p_add">+</span>
 /* The VMID used in the VTTBR */
 static atomic64_t kvm_vmid_gen = ATOMIC64_INIT(1);
 static u32 kvm_next_vmid;
<span class="p_chunk">@@ -115,18 +117,11 @@</span> <span class="p_context"> void kvm_arch_check_processor_compat(void *rtn)</span>
  */
 int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)
 {
<span class="p_del">-	int ret, cpu;</span>
<span class="p_add">+	int ret;</span>
 
 	if (type)
 		return -EINVAL;
 
<span class="p_del">-	kvm-&gt;arch.last_vcpu_ran = alloc_percpu(typeof(*kvm-&gt;arch.last_vcpu_ran));</span>
<span class="p_del">-	if (!kvm-&gt;arch.last_vcpu_ran)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-	for_each_possible_cpu(cpu)</span>
<span class="p_del">-		*per_cpu_ptr(kvm-&gt;arch.last_vcpu_ran, cpu) = -1;</span>
<span class="p_del">-</span>
 	ret = kvm_alloc_stage2_pgd(kvm);
 	if (ret)
 		goto out_fail_alloc;
<span class="p_chunk">@@ -147,9 +142,7 @@</span> <span class="p_context"> int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)</span>
 	return ret;
 out_free_stage2_pgd:
 	kvm_free_stage2_pgd(kvm);
<span class="p_del">-out_fail_alloc:</span>
<span class="p_del">-	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="p_del">-	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="p_add">+out_fail_alloc:</span>
 	return ret;
 }
 
<span class="p_chunk">@@ -179,9 +172,6 @@</span> <span class="p_context"> void kvm_arch_destroy_vm(struct kvm *kvm)</span>
 
 	kvm_vgic_destroy(kvm);
 
<span class="p_del">-	free_percpu(kvm-&gt;arch.last_vcpu_ran);</span>
<span class="p_del">-	kvm-&gt;arch.last_vcpu_ran = NULL;</span>
<span class="p_del">-</span>
 	for (i = 0; i &lt; KVM_MAX_VCPUS; ++i) {
 		if (kvm-&gt;vcpus[i]) {
 			kvm_arch_vcpu_free(kvm-&gt;vcpus[i]);
<span class="p_chunk">@@ -343,17 +333,13 @@</span> <span class="p_context"> int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)</span>
 
 void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)
 {
<span class="p_del">-	int *last_ran;</span>
<span class="p_del">-</span>
<span class="p_del">-	last_ran = this_cpu_ptr(vcpu-&gt;kvm-&gt;arch.last_vcpu_ran);</span>
<span class="p_del">-</span>
 	/*
 	 * We might get preempted before the vCPU actually runs, but
 	 * over-invalidation doesn&#39;t affect correctness.
 	 */
<span class="p_del">-	if (*last_ran != vcpu-&gt;vcpu_id) {</span>
<span class="p_add">+	if (per_cpu(kvm_last_ran_vcpu, cpu) != vcpu) {</span>
 		kvm_call_hyp(__kvm_tlb_flush_local_vmid, vcpu);
<span class="p_del">-		*last_ran = vcpu-&gt;vcpu_id;</span>
<span class="p_add">+		per_cpu(kvm_last_ran_vcpu, cpu) = vcpu;</span>
 	}
 
 	vcpu-&gt;cpu = cpu;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



