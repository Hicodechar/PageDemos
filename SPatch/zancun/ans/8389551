
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:efi/core] x86/efi: Map EFI_MEMORY_{XP,RO} memory region bits to EFI page tables - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:efi/core] x86/efi: Map EFI_MEMORY_{XP,RO} memory region bits to EFI page tables</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=156171">=?UTF-8?B?dGlwLWJvdCBmb3IgU2FpIFByYW5lZXRoIDx0aXBib3RAenl0b3IuY29tPg==?=@zytor.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 22, 2016, 12:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-6d0cc887d571e96f928be83f094322451fd4bf6f@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8389551/mbox/"
   >mbox</a>
|
   <a href="/patch/8389551/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8389551/">/patch/8389551/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 57F199F1D4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Feb 2016 09:17:25 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 151DC201C8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Feb 2016 09:17:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3061F20219
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Feb 2016 09:17:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752059AbcBWJRK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 23 Feb 2016 04:17:10 -0500
Received: from terminus.zytor.com ([198.137.202.10]:58384 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1757639AbcBWJK4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 23 Feb 2016 04:10:56 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.14.7) with ESMTP id u1N98awV026433;
	Tue, 23 Feb 2016 01:09:17 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.14.8/Submit) id u1MCHIGj014152;
	Mon, 22 Feb 2016 04:17:18 -0800
Date: Mon, 22 Feb 2016 04:17:18 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: =?UTF-8?B?dGlwLWJvdCBmb3IgU2FpIFByYW5lZXRoIDx0aXBib3RAenl0b3IuY29tPg==?=@zytor.com
Message-ID: &lt;tip-6d0cc887d571e96f928be83f094322451fd4bf6f@git.kernel.org&gt;
Cc: dvlasenk@redhat.com, toshi.kani@hp.com, tglx@linutronix.de,
	peterz@infradead.org, akpm@linux-foundation.org,
	ricardo.neri@intel.com, ard.biesheuvel@linaro.org,
	matt@codeblueprint.co.uk, mingo@kernel.org, luto@amacapital.net,
	sai.praneeth.prakhya@intel.com, bp@alien8.de,
	ravi.v.shankar@intel.com, keescook@chromium.org, jlee@suse.com,
	torvalds@linux-foundation.org, mcgrof@suse.com, brgerst@gmail.com,
	linux-kernel@vger.kernel.org, hpa@zytor.com
Reply-To: ricardo.neri@intel.com, peterz@infradead.org, tglx@linutronix.de, 
	akpm@linux-foundation.org, toshi.kani@hp.com,
	dvlasenk@redhat.com, mcgrof@suse.com,
	linux-kernel@vger.kernel.org, brgerst@gmail.com, hpa@zytor.com,
	ravi.v.shankar@intel.com, keescook@chromium.org,
	torvalds@linux-foundation.org, jlee@suse.com,
	sai.praneeth.prakhya@intel.com, luto@amacapital.net,
	bp@alien8.de, ard.biesheuvel@linaro.org,
	matt@codeblueprint.co.uk, mingo@kernel.org
In-Reply-To: &lt;1455712566-16727-13-git-send-email-matt@codeblueprint.co.uk&gt;
References: &lt;1455712566-16727-13-git-send-email-matt@codeblueprint.co.uk&gt;
To: =?UTF-8?B?bGludXgtdGlwLWNvbW1pdHNAdmdlci5rZXJuZWwub3Jn?=@zytor.com
Subject: =?UTF-8?B?W3RpcDplZmkvY29yZV0geDg2L2VmaTogTWFwIEVGSV9NRU1PUllfe1hQLFJPfSA=?=
	=?UTF-8?B?bWVtb3J5IHJlZ2lvbiBiaXRzIHRvIEVGSSBwYWdlIHRhYmxlcw==?=
Git-Commit-ID: =?UTF-8?B?NmQwY2M4ODdkNTcxZTk2ZjkyOGJlODNmMDk0MzIyNDUxZmQ0YmY2Zg==?=
X-Mailer: =?UTF-8?B?dGlwLWdpdC1sb2ctZGFlbW9u?=
Robot-ID: =?UTF-8?B?PHRpcC1ib3QuZ2l0Lmtlcm5lbC5vcmc+?=
Robot-Unsubscribe: =?UTF-8?B?Q29udGFjdCA8bWFpbHRvOmhwYUBrZXJuZWwub3JnPiB0byBnZXQgYmxhY2tsaXM=?=
	=?UTF-8?B?dGVkIGZyb20gdGhlc2UgZW1haWxz?=
MIME-Version: =?UTF-8?B?MS4w?=
Content-Transfer-Encoding: =?UTF-8?B?OGJpdA==?=
Content-Type: =?UTF-8?B?dGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOA==?=
Content-Disposition: =?UTF-8?B?aW5saW5l?=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=0.1 required=5.0 tests=BAYES_00, DATE_IN_PAST_12_24,
	FROM_EXCESS_BASE64,RP_MATCHES_RCVD,UNPARSEABLE_RELAY autolearn=no
	version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=156171">=?UTF-8?B?dGlwLWJvdCBmb3IgU2FpIFByYW5lZXRoIDx0aXBib3RAenl0b3IuY29tPg==?=@zytor.com</a> - Feb. 22, 2016, 12:17 p.m.</div>
<pre class="content">
Commit-ID:  6d0cc887d571e96f928be83f094322451fd4bf6f
Gitweb:     http://git.kernel.org/tip/6d0cc887d571e96f928be83f094322451fd4bf6f
Author:     Sai Praneeth &lt;sai.praneeth.prakhya@intel.com&gt;
AuthorDate: Wed, 17 Feb 2016 12:36:05 +0000
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Mon, 22 Feb 2016 08:26:28 +0100

x86/efi: Map EFI_MEMORY_{XP,RO} memory region bits to EFI page tables

Now that we have EFI memory region bits that indicate which regions do
not need execute permission or read/write permission in the page tables,
let&#39;s use them.

We also check for EFI_NX_PE_DATA and only enforce the restrictive
mappings if it&#39;s present (to allow us to ignore buggy firmware that sets
bits it didn&#39;t mean to and to preserve backwards compatibility).

Instead of assuming that firmware would set appropriate attributes in
memory descriptor like EFI_MEMORY_RO for code and EFI_MEMORY_XP for
data, we can expect some firmware out there which might only set *type*
in memory descriptor to be EFI_RUNTIME_SERVICES_CODE or
EFI_RUNTIME_SERVICES_DATA leaving away attribute. This will lead to
improper mappings of EFI runtime regions. In order to avoid it, we check
attribute and type of memory descriptor to update mappings and moreover
Windows works this way.
<span class="signed-off-by">
Signed-off-by: Sai Praneeth Prakhya &lt;sai.praneeth.prakhya@intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Lee, Chun-Yi &lt;jlee@suse.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Luis R. Rodriguez &lt;mcgrof@suse.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Ravi Shankar &lt;ravi.v.shankar@intel.com&gt;
Cc: Ricardo Neri &lt;ricardo.neri@intel.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Toshi Kani &lt;toshi.kani@hp.com&gt;
Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/1455712566-16727-13-git-send-email-matt@codeblueprint.co.uk
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/include/asm/efi.h     |  2 +-
 arch/x86/platform/efi/efi.c    |  9 +++++++--
 arch/x86/platform/efi/efi_32.c |  2 +-
 arch/x86/platform/efi/efi_64.c | 45 ++++++++++++++++++++++++++++++++++++++----
 4 files changed, 50 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 8fd9e63..7bb206f 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -141,7 +141,7 @@</span> <span class="p_context"> extern int __init efi_setup_page_tables(unsigned long pa_memmap, unsigned num_pa</span>
 extern void __init efi_cleanup_page_tables(unsigned long pa_memmap, unsigned num_pages);
 extern void __init old_map_region(efi_memory_desc_t *md);
 extern void __init runtime_code_page_mkexec(void);
<span class="p_del">-extern void __init efi_runtime_mkexec(void);</span>
<span class="p_add">+extern void __init efi_runtime_update_mappings(void);</span>
 extern void __init efi_dump_pagetable(void);
 extern void __init efi_apply_memmap_quirks(void);
 extern int __init efi_reuse_config(u64 tables, int nr_tables);
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index e80826e..994a7df8 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -934,7 +934,6 @@</span> <span class="p_context"> static void __init __efi_enter_virtual_mode(void)</span>
 	}
 
 	efi_sync_low_kernel_mappings();
<span class="p_del">-	efi_dump_pagetable();</span>
 
 	if (efi_is_native()) {
 		status = phys_efi_set_virtual_address_map(
<span class="p_chunk">@@ -972,7 +971,13 @@</span> <span class="p_context"> static void __init __efi_enter_virtual_mode(void)</span>
 
 	efi.set_virtual_address_map = NULL;
 
<span class="p_del">-	efi_runtime_mkexec();</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Apply more restrictive page table mapping attributes now that</span>
<span class="p_add">+	 * SVAM() has been called and the firmware has performed all</span>
<span class="p_add">+	 * necessary relocation fixups for the new virtual addresses.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	efi_runtime_update_mappings();</span>
<span class="p_add">+	efi_dump_pagetable();</span>
 
 	/*
 	 * We mapped the descriptor array into the EFI pagetable above
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index 58d669b..338402b 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -90,7 +90,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	__flush_tlb_all();
 }
 
<span class="p_del">-void __init efi_runtime_mkexec(void)</span>
<span class="p_add">+void __init efi_runtime_update_mappings(void)</span>
 {
 	if (__supported_pte_mask &amp; _PAGE_NX)
 		runtime_code_page_mkexec();
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index b0965b2..40d2f44 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -393,13 +393,50 @@</span> <span class="p_context"> void __init parse_efi_setup(u64 phys_addr, u32 data_len)</span>
 	efi_setup = phys_addr + sizeof(struct setup_data);
 }
 
<span class="p_del">-void __init efi_runtime_mkexec(void)</span>
<span class="p_add">+void __init efi_runtime_update_mappings(void)</span>
 {
<span class="p_del">-	if (!efi_enabled(EFI_OLD_MEMMAP))</span>
<span class="p_add">+	unsigned long pfn;</span>
<span class="p_add">+	pgd_t *pgd = efi_pgd;</span>
<span class="p_add">+	efi_memory_desc_t *md;</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="p_add">+		if (__supported_pte_mask &amp; _PAGE_NX)</span>
<span class="p_add">+			runtime_code_page_mkexec();</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!efi_enabled(EFI_NX_PE_DATA))</span>
 		return;
 
<span class="p_del">-	if (__supported_pte_mask &amp; _PAGE_NX)</span>
<span class="p_del">-		runtime_code_page_mkexec();</span>
<span class="p_add">+	for (p = memmap.map; p &lt; memmap.map_end; p += memmap.desc_size) {</span>
<span class="p_add">+		unsigned long pf = 0;</span>
<span class="p_add">+		md = p;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_RUNTIME))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_WB))</span>
<span class="p_add">+			pf |= _PAGE_PCD;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((md-&gt;attribute &amp; EFI_MEMORY_XP) ||</span>
<span class="p_add">+			(md-&gt;type == EFI_RUNTIME_SERVICES_DATA))</span>
<span class="p_add">+			pf |= _PAGE_NX;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_RO) &amp;&amp;</span>
<span class="p_add">+			(md-&gt;type != EFI_RUNTIME_SERVICES_CODE))</span>
<span class="p_add">+			pf |= _PAGE_RW;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Update the 1:1 mapping */</span>
<span class="p_add">+		pfn = md-&gt;phys_addr &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		if (kernel_map_pages_in_pgd(pgd, pfn, md-&gt;phys_addr, md-&gt;num_pages, pf))</span>
<span class="p_add">+			pr_warn(&quot;Error mapping PA 0x%llx -&gt; VA 0x%llx!\n&quot;,</span>
<span class="p_add">+				   md-&gt;phys_addr, md-&gt;virt_addr);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (kernel_map_pages_in_pgd(pgd, pfn, md-&gt;virt_addr, md-&gt;num_pages, pf))</span>
<span class="p_add">+			pr_warn(&quot;Error mapping PA 0x%llx -&gt; VA 0x%llx!\n&quot;,</span>
<span class="p_add">+				   md-&gt;phys_addr, md-&gt;virt_addr);</span>
<span class="p_add">+	}</span>
 }
 
 void __init efi_dump_pagetable(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



