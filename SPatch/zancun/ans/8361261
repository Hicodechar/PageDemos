
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,7/7] kprobes: port to linker table - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,7/7] kprobes: port to linker table</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153261">Luis R. Rodriguez</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 19, 2016, 1:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1455889559-9428-8-git-send-email-mcgrof@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8361261/mbox/"
   >mbox</a>
|
   <a href="/patch/8361261/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8361261/">/patch/8361261/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id B7BF19F2F0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Feb 2016 13:47:04 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 1F8532045B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Feb 2016 13:47:03 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 4BE7D204C9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Feb 2016 13:47:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1948157AbcBSNq4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 19 Feb 2016 08:46:56 -0500
Received: from mail.kernel.org ([198.145.29.136]:51033 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1425895AbcBSNqY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 19 Feb 2016 08:46:24 -0500
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C9CBE204AF;
	Fri, 19 Feb 2016 13:46:21 +0000 (UTC)
Received: from garbanzo.do-not-panic.com (c-73-15-241-2.hsd1.ca.comcast.net
	[73.15.241.2])
	(using TLSv1.2 with cipher AES128-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id EA297204E7;
	Fri, 19 Feb 2016 13:46:18 +0000 (UTC)
From: &quot;Luis R. Rodriguez&quot; &lt;mcgrof@kernel.org&gt;
To: hpa@zytor.com, tglx@linutronix.de, mingo@redhat.com, bp@alien8.de
Cc: x86@kernel.org, linux-kernel@vger.kernel.org, luto@amacapital.net,
	boris.ostrovsky@oracle.com, rusty@rustcorp.com.au,
	david.vrabel@citrix.com, konrad.wilk@oracle.com, mcb30@ipxe.org,
	jgross@suse.com, ming.lei@canonical.com,
	gregkh@linuxfoundation.org, arnd@arndb.de,
	linux-arch@vger.kernel.org, linux@arm.linux.org.uk,
	benh@kernel.crashing.org, jbaron@akamai.com, ananth@in.ibm.com,
	anil.s.keshavamurthy@intel.com, davem@davemloft.net,
	masami.hiramatsu.pt@hitachi.com, andriy.shevchenko@linux.intel.com,
	dwmw2@infradead.org, xen-devel@lists.xensource.com,
	&quot;Luis R. Rodriguez&quot; &lt;mcgrof@kernel.org&gt;
Subject: [RFC v2 7/7] kprobes: port to linker table
Date: Fri, 19 Feb 2016 05:45:59 -0800
Message-Id: &lt;1455889559-9428-8-git-send-email-mcgrof@kernel.org&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1455889559-9428-1-git-send-email-mcgrof@kernel.org&gt;
References: &lt;1455889559-9428-1-git-send-email-mcgrof@kernel.org&gt;
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153261">Luis R. Rodriguez</a> - Feb. 19, 2016, 1:45 p.m.</div>
<pre class="content">
kprobe makes use of two custom sections:

type       name                  begin                    end
init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist
text      .kprobes.text     __kprobes_text_start        __kprobes_text_end

Port these to the linker table generic solution. This lets
us remove all the custom kprobe section declarations on the
linker script.

Tested with CONFIG_KPROBES_SANITY_TEST, it passes with:

Kprobe smoke test: started
Kprobe smoke test: passed successfully

Then tested CONFIG_SAMPLE_KPROBES on do_fork, and the
kprobe bites and kicks as expected. Lastly tried registering
a kprobe on a kprobe blacklisted symbol (NOKPROBE_SYMBOL()),
and confirms that fails to work.
<span class="signed-off-by">
Signed-off-by: Luis R. Rodriguez &lt;mcgrof@kernel.org&gt;</span>
---
 arch/arc/kernel/vmlinux.lds.S        |  1 -
 arch/arm/kernel/entry-armv.S         |  2 +-
 arch/arm/kernel/vmlinux.lds.S        |  1 -
 arch/avr32/kernel/entry-avr32b.S     |  4 ++--
 arch/avr32/kernel/vmlinux.lds.S      |  1 -
 arch/blackfin/kernel/vmlinux.lds.S   |  1 -
 arch/c6x/kernel/vmlinux.lds.S        |  1 -
 arch/hexagon/kernel/vmlinux.lds.S    |  1 -
 arch/ia64/kernel/jprobes.S           |  2 +-
 arch/ia64/kernel/vmlinux.lds.S       |  1 -
 arch/ia64/lib/flush.S                |  4 ++--
 arch/metag/kernel/vmlinux.lds.S      |  1 -
 arch/microblaze/kernel/vmlinux.lds.S |  1 -
 arch/mips/kernel/vmlinux.lds.S       |  1 -
 arch/mn10300/kernel/vmlinux.lds.S    |  1 -
 arch/nios2/kernel/vmlinux.lds.S      |  1 -
 arch/openrisc/kernel/vmlinux.lds.S   |  1 -
 arch/parisc/kernel/vmlinux.lds.S     |  1 -
 arch/powerpc/include/asm/ppc_asm.h   |  6 +++---
 arch/powerpc/kernel/vmlinux.lds.S    |  1 -
 arch/s390/kernel/entry.S             |  4 ++--
 arch/s390/kernel/kprobes.c           |  2 +-
 arch/s390/kernel/mcount.S            |  2 +-
 arch/s390/kernel/vmlinux.lds.S       |  1 -
 arch/score/kernel/vmlinux.lds.S      |  1 -
 arch/sh/kernel/vmlinux.lds.S         |  1 -
 arch/sparc/kernel/vmlinux.lds.S      |  1 -
 arch/sparc/mm/ultra.S                |  2 +-
 arch/tile/kernel/vmlinux.lds.S       |  1 -
 arch/x86/kernel/kprobes/core.c       | 10 ++++++----
 arch/x86/kernel/vmlinux.lds.S        |  1 -
 include/asm-generic/sections.h       |  4 ++--
 include/asm-generic/vmlinux.lds.h    | 16 ----------------
 include/linux/compiler.h             |  3 ++-
 include/linux/kprobes.h              |  7 +++++--
 kernel/kprobes.c                     | 16 +++++++---------
 scripts/mod/modpost.c                |  3 ++-
 scripts/recordmcount.c               |  3 ++-
 scripts/recordmcount.pl              |  2 +-
 39 files changed, 41 insertions(+), 72 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=709">Russell King - ARM Linux</a> - Feb. 19, 2016, 2:15 p.m.</div>
<pre class="content">
On Fri, Feb 19, 2016 at 05:45:59AM -0800, Luis R. Rodriguez wrote:
<span class="quote">&gt; kprobe makes use of two custom sections:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; type       name                  begin                    end</span>
<span class="quote">&gt; init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist</span>
<span class="quote">&gt; text      .kprobes.text     __kprobes_text_start        __kprobes_text_end</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Port these to the linker table generic solution. This lets</span>
<span class="quote">&gt; us remove all the custom kprobe section declarations on the</span>
<span class="quote">&gt; linker script.</span>

I don&#39;t like this.  You create this &quot;table&quot; thing, which you use for
tables, and then you go and use it for something else - for kprobes
text which is not a table.  The kprobes text section is a section for
text which is not kprobe-able.

So, it seems to be a complete mis-nomer to me.  Maybe you can explain
the rationale here?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89251">Luis R. Rodriguez</a> - Feb. 19, 2016, 2:55 p.m.</div>
<pre class="content">
On Fri, Feb 19, 2016 at 02:15:11PM +0000, Russell King - ARM Linux wrote:
<span class="quote">&gt; On Fri, Feb 19, 2016 at 05:45:59AM -0800, Luis R. Rodriguez wrote:</span>
<span class="quote">&gt; &gt; kprobe makes use of two custom sections:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; type       name                  begin                    end</span>
<span class="quote">&gt; &gt; init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist</span>
<span class="quote">&gt; &gt; text      .kprobes.text     __kprobes_text_start        __kprobes_text_end</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Port these to the linker table generic solution. This lets</span>
<span class="quote">&gt; &gt; us remove all the custom kprobe section declarations on the</span>
<span class="quote">&gt; &gt; linker script.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t like this.  You create this &quot;table&quot; thing, which you use for</span>
<span class="quote">&gt; tables, and then you go and use it for something else - for kprobes</span>
<span class="quote">&gt; text which is not a table.  The kprobes text section is a section for</span>
<span class="quote">&gt; text which is not kprobe-able.</span>

No the thing about linker tables is its generalizing custom section solutions
we have scattered all over the place.
<span class="quote">
&gt; So, it seems to be a complete mis-nomer to me.  Maybe you can explain</span>
<span class="quote">&gt; the rationale here?</span>

Sure, so each custom section solution requires modifying the linker script.
With linker tables we end up only with a few basic types of tables, a
read-only, text, data, init init_data, etc. A linker table belongs to one of
these. The linker table provides a means by which to describe explicitly
what type of section you are using for your solution but also allows us
to enable such custom solutions without furthering the custom linker
script.

  Luis
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8103">Masami Hiramatsu</a> - Feb. 22, 2016, 1:34 a.m.</div>
<pre class="content">
<span class="quote">&gt;From: Luis R. Rodriguez [mailto:mcgrof@kernel.org]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;kprobe makes use of two custom sections:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;type       name                  begin                    end</span>
<span class="quote">&gt;init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist</span>
<span class="quote">&gt;text      .kprobes.text     __kprobes_text_start        __kprobes_text_end</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Port these to the linker table generic solution. This lets</span>
<span class="quote">&gt;us remove all the custom kprobe section declarations on the</span>
<span class="quote">&gt;linker script.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Tested with CONFIG_KPROBES_SANITY_TEST, it passes with:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Kprobe smoke test: started</span>
<span class="quote">&gt;Kprobe smoke test: passed successfully</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Then tested CONFIG_SAMPLE_KPROBES on do_fork, and the</span>
<span class="quote">&gt;kprobe bites and kicks as expected. Lastly tried registering</span>
<span class="quote">&gt;a kprobe on a kprobe blacklisted symbol (NOKPROBE_SYMBOL()),</span>
<span class="quote">&gt;and confirms that fails to work.</span>

Could you also check to run the testcases by using ftracetest as below?

$ cd tools/testing/selftests/ftrace/
$ sudo ./ftracetest

And I&#39;m not sure about linker table. Is that possible to support
__kprobes prefix, which moves the functions into kprobes.text?
Actually, I&#39;m on the way to replacing __kprobes to NOKPROBE_SYMBOL
macro, since NOKPROBE_SYMBOL() doesn&#39;t effect the kernel text itself.
On x86, it is already replaced (see commit 820aede0209a), and same
work should be done on other archs. So, could you hold this after
that? I think we should remove .kprobes.text first and move to 
linker table.

Thank you,
<span class="quote">

&gt;</span>
<span class="quote">&gt;Signed-off-by: Luis R. Rodriguez &lt;mcgrof@kernel.org&gt;</span>
<span class="quote">&gt;---</span>
<span class="quote">&gt; arch/arc/kernel/vmlinux.lds.S        |  1 -</span>
<span class="quote">&gt; arch/arm/kernel/entry-armv.S         |  2 +-</span>
<span class="quote">&gt; arch/arm/kernel/vmlinux.lds.S        |  1 -</span>
<span class="quote">&gt; arch/avr32/kernel/entry-avr32b.S     |  4 ++--</span>
<span class="quote">&gt; arch/avr32/kernel/vmlinux.lds.S      |  1 -</span>
<span class="quote">&gt; arch/blackfin/kernel/vmlinux.lds.S   |  1 -</span>
<span class="quote">&gt; arch/c6x/kernel/vmlinux.lds.S        |  1 -</span>
<span class="quote">&gt; arch/hexagon/kernel/vmlinux.lds.S    |  1 -</span>
<span class="quote">&gt; arch/ia64/kernel/jprobes.S           |  2 +-</span>
<span class="quote">&gt; arch/ia64/kernel/vmlinux.lds.S       |  1 -</span>
<span class="quote">&gt; arch/ia64/lib/flush.S                |  4 ++--</span>
<span class="quote">&gt; arch/metag/kernel/vmlinux.lds.S      |  1 -</span>
<span class="quote">&gt; arch/microblaze/kernel/vmlinux.lds.S |  1 -</span>
<span class="quote">&gt; arch/mips/kernel/vmlinux.lds.S       |  1 -</span>
<span class="quote">&gt; arch/mn10300/kernel/vmlinux.lds.S    |  1 -</span>
<span class="quote">&gt; arch/nios2/kernel/vmlinux.lds.S      |  1 -</span>
<span class="quote">&gt; arch/openrisc/kernel/vmlinux.lds.S   |  1 -</span>
<span class="quote">&gt; arch/parisc/kernel/vmlinux.lds.S     |  1 -</span>
<span class="quote">&gt; arch/powerpc/include/asm/ppc_asm.h   |  6 +++---</span>
<span class="quote">&gt; arch/powerpc/kernel/vmlinux.lds.S    |  1 -</span>
<span class="quote">&gt; arch/s390/kernel/entry.S             |  4 ++--</span>
<span class="quote">&gt; arch/s390/kernel/kprobes.c           |  2 +-</span>
<span class="quote">&gt; arch/s390/kernel/mcount.S            |  2 +-</span>
<span class="quote">&gt; arch/s390/kernel/vmlinux.lds.S       |  1 -</span>
<span class="quote">&gt; arch/score/kernel/vmlinux.lds.S      |  1 -</span>
<span class="quote">&gt; arch/sh/kernel/vmlinux.lds.S         |  1 -</span>
<span class="quote">&gt; arch/sparc/kernel/vmlinux.lds.S      |  1 -</span>
<span class="quote">&gt; arch/sparc/mm/ultra.S                |  2 +-</span>
<span class="quote">&gt; arch/tile/kernel/vmlinux.lds.S       |  1 -</span>
<span class="quote">&gt; arch/x86/kernel/kprobes/core.c       | 10 ++++++----</span>
<span class="quote">&gt; arch/x86/kernel/vmlinux.lds.S        |  1 -</span>
<span class="quote">&gt; include/asm-generic/sections.h       |  4 ++--</span>
<span class="quote">&gt; include/asm-generic/vmlinux.lds.h    | 16 ----------------</span>
<span class="quote">&gt; include/linux/compiler.h             |  3 ++-</span>
<span class="quote">&gt; include/linux/kprobes.h              |  7 +++++--</span>
<span class="quote">&gt; kernel/kprobes.c                     | 16 +++++++---------</span>
<span class="quote">&gt; scripts/mod/modpost.c                |  3 ++-</span>
<span class="quote">&gt; scripts/recordmcount.c               |  3 ++-</span>
<span class="quote">&gt; scripts/recordmcount.pl              |  2 +-</span>
<span class="quote">&gt; 39 files changed, 41 insertions(+), 72 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/arch/arc/kernel/vmlinux.lds.S b/arch/arc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 894e696bddaa..52f23df2b9b6 100644</span>
<span class="quote">&gt;--- a/arch/arc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/arc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -98,7 +98,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 		*(.gnu.warning)</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt;diff --git a/arch/arm/kernel/entry-armv.S b/arch/arm/kernel/entry-armv.S</span>
<span class="quote">&gt;index 3ce377f7251f..4959a83833fd 100644</span>
<span class="quote">&gt;--- a/arch/arm/kernel/entry-armv.S</span>
<span class="quote">&gt;+++ b/arch/arm/kernel/entry-armv.S</span>
<span class="quote">&gt;@@ -83,7 +83,7 @@</span>
<span class="quote">&gt; 	.endm</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #ifdef CONFIG_KPROBES</span>
<span class="quote">&gt;-	.section	.kprobes.text,&quot;ax&quot;,%progbits</span>
<span class="quote">&gt;+	.section	.text.tbl.kprobes.all,&quot;ax&quot;,%progbits</span>
<span class="quote">&gt; #else</span>
<span class="quote">&gt; 	.text</span>
<span class="quote">&gt; #endif</span>
<span class="quote">&gt;diff --git a/arch/arm/kernel/vmlinux.lds.S b/arch/arm/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 8b60fde5ce48..8de7921ac331 100644</span>
<span class="quote">&gt;--- a/arch/arm/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/arm/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -108,7 +108,6 @@ SECTIONS</span>
<span class="quote">&gt; 			TEXT_TEXT</span>
<span class="quote">&gt; 			SCHED_TEXT</span>
<span class="quote">&gt; 			LOCK_TEXT</span>
<span class="quote">&gt;-			KPROBES_TEXT</span>
<span class="quote">&gt; 			*(.gnu.warning)</span>
<span class="quote">&gt; 			*(.glue_7)</span>
<span class="quote">&gt; 			*(.glue_7t)</span>
<span class="quote">&gt;diff --git a/arch/avr32/kernel/entry-avr32b.S b/arch/avr32/kernel/entry-avr32b.S</span>
<span class="quote">&gt;index 7301f4806bbe..c0fe699d0a21 100644</span>
<span class="quote">&gt;--- a/arch/avr32/kernel/entry-avr32b.S</span>
<span class="quote">&gt;+++ b/arch/avr32/kernel/entry-avr32b.S</span>
<span class="quote">&gt;@@ -605,7 +605,7 @@ fault_exit_work:</span>
<span class="quote">&gt; 	brcc	fault_resume_user</span>
<span class="quote">&gt; 	rjmp	enter_monitor_mode</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;, @progbits</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;, @progbits</span>
<span class="quote">&gt; 	.type	handle_debug, @function</span>
<span class="quote">&gt; handle_debug:</span>
<span class="quote">&gt; 	sub	sp, 4		/* r12_orig */</span>
<span class="quote">&gt;@@ -826,7 +826,7 @@ irq_level\level:</span>
<span class="quote">&gt; 	IRQ_LEVEL 2</span>
<span class="quote">&gt; 	IRQ_LEVEL 3</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;, @progbits</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;, @progbits</span>
<span class="quote">&gt; 	.type	enter_monitor_mode, @function</span>
<span class="quote">&gt; enter_monitor_mode:</span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt;diff --git a/arch/avr32/kernel/vmlinux.lds.S b/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index a4589176bed5..bf4f3f1f9dbb 100644</span>
<span class="quote">&gt;--- a/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -49,7 +49,6 @@ SECTIONS</span>
<span class="quote">&gt; 		_stext = .;</span>
<span class="quote">&gt; 		*(.ex.text)</span>
<span class="quote">&gt; 		*(.irq.text)</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;diff --git a/arch/blackfin/kernel/vmlinux.lds.S b/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index c9eec84aa258..8a193fad4c5d 100644</span>
<span class="quote">&gt;--- a/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -35,7 +35,6 @@ SECTIONS</span>
<span class="quote">&gt; #endif</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; #ifdef CONFIG_ROMKERNEL</span>
<span class="quote">&gt; 		__sinittext = .;</span>
<span class="quote">&gt; 		INIT_TEXT</span>
<span class="quote">&gt;diff --git a/arch/c6x/kernel/vmlinux.lds.S b/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 5a6e141d1641..a23bed62cec3 100644</span>
<span class="quote">&gt;--- a/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -72,7 +72,6 @@ SECTIONS</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 		*(.gnu.warning)</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt;diff --git a/arch/hexagon/kernel/vmlinux.lds.S b/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 5f268c1071b3..a358b699ec64 100644</span>
<span class="quote">&gt;--- a/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -51,7 +51,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt; 	_etext = .;</span>
<span class="quote">&gt;diff --git a/arch/ia64/kernel/jprobes.S b/arch/ia64/kernel/jprobes.S</span>
<span class="quote">&gt;index f69389c7be1d..c6c23a3e92fb 100644</span>
<span class="quote">&gt;--- a/arch/ia64/kernel/jprobes.S</span>
<span class="quote">&gt;+++ b/arch/ia64/kernel/jprobes.S</span>
<span class="quote">&gt;@@ -50,7 +50,7 @@</span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt; 	 * void jprobe_break(void)</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
<span class="quote">&gt; ENTRY(jprobe_break)</span>
<span class="quote">&gt; 	break.m __IA64_BREAK_JPROBE</span>
<span class="quote">&gt; END(jprobe_break)</span>
<span class="quote">&gt;diff --git a/arch/ia64/kernel/vmlinux.lds.S b/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index dc506b05ffbd..884f36d38989 100644</span>
<span class="quote">&gt;--- a/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -47,7 +47,6 @@ SECTIONS {</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		*(.gnu.linkonce.t*)</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/arch/ia64/lib/flush.S b/arch/ia64/lib/flush.S</span>
<span class="quote">&gt;index 1d8c88860063..7f257810e858 100644</span>
<span class="quote">&gt;--- a/arch/ia64/lib/flush.S</span>
<span class="quote">&gt;+++ b/arch/ia64/lib/flush.S</span>
<span class="quote">&gt;@@ -20,7 +20,7 @@</span>
<span class="quote">&gt; 	 *</span>
<span class="quote">&gt; 	 *	Note: &quot;in0&quot; and &quot;in1&quot; are preserved for debugging purposes.</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt;-	.section .kprobes.text,&quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all,&quot;ax&quot;</span>
<span class="quote">&gt; GLOBAL_ENTRY(flush_icache_range)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	.prologue</span>
<span class="quote">&gt;@@ -72,7 +72,7 @@ END(flush_icache_range)</span>
<span class="quote">&gt; 	 *</span>
<span class="quote">&gt; 	 *	Note: &quot;in0&quot; and &quot;in1&quot; are preserved for debugging purposes.</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt;-	.section .kprobes.text,&quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all,&quot;ax&quot;</span>
<span class="quote">&gt; GLOBAL_ENTRY(clflush_cache_range)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	.prologue</span>
<span class="quote">&gt;diff --git a/arch/metag/kernel/vmlinux.lds.S b/arch/metag/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index e12055e88bfe..da1689c85bc8 100644</span>
<span class="quote">&gt;--- a/arch/metag/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/metag/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -22,7 +22,6 @@ SECTIONS</span>
<span class="quote">&gt; 	TEXT_TEXT</span>
<span class="quote">&gt; 	SCHED_TEXT</span>
<span class="quote">&gt; 	LOCK_TEXT</span>
<span class="quote">&gt;-	KPROBES_TEXT</span>
<span class="quote">&gt; 	IRQENTRY_TEXT</span>
<span class="quote">&gt; 	*(.text.*)</span>
<span class="quote">&gt; 	*(.gnu.warning)</span>
<span class="quote">&gt;diff --git a/arch/microblaze/kernel/vmlinux.lds.S b/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index be9488d69734..94c1c5574a77 100644</span>
<span class="quote">&gt;--- a/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -34,7 +34,6 @@ SECTIONS {</span>
<span class="quote">&gt; 		EXIT_CALL</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		. = ALIGN (4) ;</span>
<span class="quote">&gt; 		_etext = . ;</span>
<span class="quote">&gt;diff --git a/arch/mips/kernel/vmlinux.lds.S b/arch/mips/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 0a93e83cd014..9183e9235651 100644</span>
<span class="quote">&gt;--- a/arch/mips/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/mips/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -56,7 +56,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.text.*)</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt;diff --git a/arch/mn10300/kernel/vmlinux.lds.S b/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 13c4814c29f8..ead5efc01802 100644</span>
<span class="quote">&gt;--- a/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -31,7 +31,6 @@ SECTIONS</span>
<span class="quote">&gt; 	TEXT_TEXT</span>
<span class="quote">&gt; 	SCHED_TEXT</span>
<span class="quote">&gt; 	LOCK_TEXT</span>
<span class="quote">&gt;-	KPROBES_TEXT</span>
<span class="quote">&gt; 	*(.fixup)</span>
<span class="quote">&gt; 	*(.gnu.warning)</span>
<span class="quote">&gt; 	} = 0xcb</span>
<span class="quote">&gt;diff --git a/arch/nios2/kernel/vmlinux.lds.S b/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 326fab40a9de..dc8a84183700 100644</span>
<span class="quote">&gt;--- a/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -39,7 +39,6 @@ SECTIONS</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 	} =0</span>
<span class="quote">&gt; 	_etext = .;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/arch/openrisc/kernel/vmlinux.lds.S b/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 2d69a853b742..b010cb75edc4 100644</span>
<span class="quote">&gt;--- a/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -48,7 +48,6 @@ SECTIONS</span>
<span class="quote">&gt; 	  TEXT_TEXT</span>
<span class="quote">&gt; 	  SCHED_TEXT</span>
<span class="quote">&gt; 	  LOCK_TEXT</span>
<span class="quote">&gt;-	  KPROBES_TEXT</span>
<span class="quote">&gt; 	  IRQENTRY_TEXT</span>
<span class="quote">&gt; 	  *(.fixup)</span>
<span class="quote">&gt; 	  *(.text.__*)</span>
<span class="quote">&gt;diff --git a/arch/parisc/kernel/vmlinux.lds.S b/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 308f29081d46..9d9dc4984465 100644</span>
<span class="quote">&gt;--- a/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -70,7 +70,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.text.do_softirq)</span>
<span class="quote">&gt; 		*(.text.sys_exit)</span>
<span class="quote">&gt;diff --git a/arch/powerpc/include/asm/ppc_asm.h b/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="quote">&gt;index 499d9f89435a..4e36e86338f3 100644</span>
<span class="quote">&gt;--- a/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="quote">&gt;+++ b/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="quote">&gt;@@ -218,7 +218,7 @@ name: \</span>
<span class="quote">&gt; 	.localentry name,.-name</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #define _KPROBE(name) \</span>
<span class="quote">&gt;-	.section &quot;.kprobes.text&quot;,&quot;a&quot;; \</span>
<span class="quote">&gt;+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;; \</span>
<span class="quote">&gt; 	.align 2 ; \</span>
<span class="quote">&gt; 	.type name,@function; \</span>
<span class="quote">&gt; 	.globl name; \</span>
<span class="quote">&gt;@@ -248,7 +248,7 @@ GLUE(.,name):</span>
<span class="quote">&gt; #define _GLOBAL_TOC(name) _GLOBAL(name)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #define _KPROBE(name) \</span>
<span class="quote">&gt;-	.section &quot;.kprobes.text&quot;,&quot;a&quot;; \</span>
<span class="quote">&gt;+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;; \</span>
<span class="quote">&gt; 	.align 2 ; \</span>
<span class="quote">&gt; 	.globl name; \</span>
<span class="quote">&gt; 	.globl GLUE(.,name); \</span>
<span class="quote">&gt;@@ -280,7 +280,7 @@ n:</span>
<span class="quote">&gt; #define _GLOBAL_TOC(name) _GLOBAL(name)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #define _KPROBE(n)	\</span>
<span class="quote">&gt;-	.section &quot;.kprobes.text&quot;,&quot;a&quot;;	\</span>
<span class="quote">&gt;+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;;	\</span>
<span class="quote">&gt; 	.globl	n;	\</span>
<span class="quote">&gt; n:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/arch/powerpc/kernel/vmlinux.lds.S b/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index d41fd0af8980..8779ae180783 100644</span>
<span class="quote">&gt;--- a/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -53,7 +53,6 @@ SECTIONS</span>
<span class="quote">&gt; 		*(.text .fixup __ftr_alt_* .ref.text)</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #ifdef CONFIG_PPC32</span>
<span class="quote">&gt;diff --git a/arch/s390/kernel/entry.S b/arch/s390/kernel/entry.S</span>
<span class="quote">&gt;index cd5a191381b9..b09aa9ab5a1f 100644</span>
<span class="quote">&gt;--- a/arch/s390/kernel/entry.S</span>
<span class="quote">&gt;+++ b/arch/s390/kernel/entry.S</span>
<span class="quote">&gt;@@ -162,7 +162,7 @@ _PIF_WORK	= (_PIF_PER_TRAP)</span>
<span class="quote">&gt; 		tm	off+\addr, \mask</span>
<span class="quote">&gt; 	.endm</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;  * Scheduler resume function, called by switch_to</span>
<span class="quote">&gt;@@ -965,7 +965,7 @@ ENTRY(restart_int_handler)</span>
<span class="quote">&gt; 	brc	2,2b</span>
<span class="quote">&gt; 3:	j	3b</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #ifdef CONFIG_CHECK_STACK</span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;diff --git a/arch/s390/kernel/kprobes.c b/arch/s390/kernel/kprobes.c</span>
<span class="quote">&gt;index 250f5972536a..376d4bd487c5 100644</span>
<span class="quote">&gt;--- a/arch/s390/kernel/kprobes.c</span>
<span class="quote">&gt;+++ b/arch/s390/kernel/kprobes.c</span>
<span class="quote">&gt;@@ -288,7 +288,7 @@ static void kprobe_reenter_check(struct kprobe_ctlblk *kcb, struct kprobe *p)</span>
<span class="quote">&gt; 	default:</span>
<span class="quote">&gt; 		/*</span>
<span class="quote">&gt; 		 * A kprobe on the code path to single step an instruction</span>
<span class="quote">&gt;-		 * is a BUG. The code path resides in the .kprobes.text</span>
<span class="quote">&gt;+		 * is a BUG. The code path resides in the .text.tbl.kprobes.all</span>
<span class="quote">&gt; 		 * section and is executed with interrupts disabled.</span>
<span class="quote">&gt; 		 */</span>
<span class="quote">&gt; 		printk(KERN_EMERG &quot;Invalid kprobe detected at %p.\n&quot;, p-&gt;addr);</span>
<span class="quote">&gt;diff --git a/arch/s390/kernel/mcount.S b/arch/s390/kernel/mcount.S</span>
<span class="quote">&gt;index e499370fbccb..4572045b968e 100644</span>
<span class="quote">&gt;--- a/arch/s390/kernel/mcount.S</span>
<span class="quote">&gt;+++ b/arch/s390/kernel/mcount.S</span>
<span class="quote">&gt;@@ -10,7 +10,7 @@</span>
<span class="quote">&gt; #include &lt;asm/ftrace.h&gt;</span>
<span class="quote">&gt; #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ENTRY(ftrace_stub)</span>
<span class="quote">&gt; 	br	%r14</span>
<span class="quote">&gt;diff --git a/arch/s390/kernel/vmlinux.lds.S b/arch/s390/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 445657fe658c..4614b5bcab5e 100644</span>
<span class="quote">&gt;--- a/arch/s390/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/s390/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -26,7 +26,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 		*(.gnu.warning)</span>
<span class="quote">&gt;diff --git a/arch/score/kernel/vmlinux.lds.S b/arch/score/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 7274b5c4287e..36ebcb3b1215 100644</span>
<span class="quote">&gt;--- a/arch/score/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/score/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -41,7 +41,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		*(.text.*)</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 		. = ALIGN (4) ;</span>
<span class="quote">&gt;diff --git a/arch/sh/kernel/vmlinux.lds.S b/arch/sh/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index db88cbf9eafd..af4f37375345 100644</span>
<span class="quote">&gt;--- a/arch/sh/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/sh/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -37,7 +37,6 @@ SECTIONS</span>
<span class="quote">&gt; 		EXTRA_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt; 		*(.gnu.warning)</span>
<span class="quote">&gt;diff --git a/arch/sparc/kernel/vmlinux.lds.S b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index f1a2f688b28a..a1c8e3a3ebb6 100644</span>
<span class="quote">&gt;--- a/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -46,7 +46,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.gnu.warning)</span>
<span class="quote">&gt; 	} = 0</span>
<span class="quote">&gt;diff --git a/arch/sparc/mm/ultra.S b/arch/sparc/mm/ultra.S</span>
<span class="quote">&gt;index b4f4733abc6e..a08fb40656ac 100644</span>
<span class="quote">&gt;--- a/arch/sparc/mm/ultra.S</span>
<span class="quote">&gt;+++ b/arch/sparc/mm/ultra.S</span>
<span class="quote">&gt;@@ -148,7 +148,7 @@ __spitfire_flush_tlb_mm_slow:</span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;  * The following code flushes one page_size worth.</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt;-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="quote">&gt;+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
<span class="quote">&gt; 	.align		32</span>
<span class="quote">&gt; 	.globl		__flush_icache_page</span>
<span class="quote">&gt; __flush_icache_page:	/* %o0 = phys_page */</span>
<span class="quote">&gt;diff --git a/arch/tile/kernel/vmlinux.lds.S b/arch/tile/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 0e059a0101ea..0f04268fc394 100644</span>
<span class="quote">&gt;--- a/arch/tile/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/tile/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -43,7 +43,6 @@ SECTIONS</span>
<span class="quote">&gt;     HEAD_TEXT</span>
<span class="quote">&gt;     SCHED_TEXT</span>
<span class="quote">&gt;     LOCK_TEXT</span>
<span class="quote">&gt;-    KPROBES_TEXT</span>
<span class="quote">&gt;     IRQENTRY_TEXT</span>
<span class="quote">&gt;     __fix_text_end = .;   /* tile-cpack won&#39;t rearrange before this */</span>
<span class="quote">&gt;     ALIGN_FUNCTION();</span>
<span class="quote">&gt;diff --git a/arch/x86/kernel/kprobes/core.c b/arch/x86/kernel/kprobes/core.c</span>
<span class="quote">&gt;index 1deffe6cc873..dde4ec0e0185 100644</span>
<span class="quote">&gt;--- a/arch/x86/kernel/kprobes/core.c</span>
<span class="quote">&gt;+++ b/arch/x86/kernel/kprobes/core.c</span>
<span class="quote">&gt;@@ -577,7 +577,10 @@ static int reenter_kprobe(struct kprobe *p, struct pt_regs *regs,</span>
<span class="quote">&gt; 	case KPROBE_REENTER:</span>
<span class="quote">&gt; 		/* A probe has been hit in the codepath leading up to, or just</span>
<span class="quote">&gt; 		 * after, single-stepping of a probed instruction. This entire</span>
<span class="quote">&gt;-		 * codepath should strictly reside in .kprobes.text section.</span>
<span class="quote">&gt;+		 * codepath should strictly reside in the kprobes section:</span>
<span class="quote">&gt;+		 *</span>
<span class="quote">&gt;+		 * SECTION_TBL(SECTION_TEXT, kprobes, all)</span>
<span class="quote">&gt;+		 *</span>
<span class="quote">&gt; 		 * Raise a BUG or we&#39;ll continue in an endless reentering loop</span>
<span class="quote">&gt; 		 * and eventually a stack overflow.</span>
<span class="quote">&gt; 		 */</span>
<span class="quote">&gt;@@ -1114,10 +1117,9 @@ NOKPROBE_SYMBOL(longjmp_break_handler);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; bool arch_within_kprobe_blacklist(unsigned long addr)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;-	return  (addr &gt;= (unsigned long)__kprobes_text_start &amp;&amp;</span>
<span class="quote">&gt;-		 addr &lt; (unsigned long)__kprobes_text_end) ||</span>
<span class="quote">&gt;+	return  (LINKTABLE_ADDR_WITHIN(kprobes, addr) ||</span>
<span class="quote">&gt; 		(addr &gt;= (unsigned long)__entry_text_start &amp;&amp;</span>
<span class="quote">&gt;-		 addr &lt; (unsigned long)__entry_text_end);</span>
<span class="quote">&gt;+		 addr &lt; (unsigned long)__entry_text_end));</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; int __init arch_init_kprobes(void)</span>
<span class="quote">&gt;diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;index 74e4bf11f562..80a9f9106d2a 100644</span>
<span class="quote">&gt;--- a/arch/x86/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;+++ b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;@@ -99,7 +99,6 @@ SECTIONS</span>
<span class="quote">&gt; 		TEXT_TEXT</span>
<span class="quote">&gt; 		SCHED_TEXT</span>
<span class="quote">&gt; 		LOCK_TEXT</span>
<span class="quote">&gt;-		KPROBES_TEXT</span>
<span class="quote">&gt; 		ENTRY_TEXT</span>
<span class="quote">&gt; 		IRQENTRY_TEXT</span>
<span class="quote">&gt; 		*(.fixup)</span>
<span class="quote">&gt;diff --git a/include/asm-generic/sections.h b/include/asm-generic/sections.h</span>
<span class="quote">&gt;index f5ea98bd85d2..0438aab5cb58 100644</span>
<span class="quote">&gt;--- a/include/asm-generic/sections.h</span>
<span class="quote">&gt;+++ b/include/asm-generic/sections.h</span>
<span class="quote">&gt;@@ -24,7 +24,7 @@</span>
<span class="quote">&gt;  * Following global variables are optional and may be unavailable on some</span>
<span class="quote">&gt;  * architectures and/or kernel configurations.</span>
<span class="quote">&gt;  *	_text, _data</span>
<span class="quote">&gt;- *	__kprobes_text_start, __kprobes_text_end</span>
<span class="quote">&gt;+ *	LINKTABLE_START(kprobes), LINKTABLE_END(kprobes)</span>
<span class="quote">&gt;  *	__entry_text_start, __entry_text_end</span>
<span class="quote">&gt;  *	__ctors_start, __ctors_end</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt;@@ -35,7 +35,7 @@ extern char __init_begin[], __init_end[];</span>
<span class="quote">&gt; extern char _sinittext[], _einittext[];</span>
<span class="quote">&gt; extern char _end[];</span>
<span class="quote">&gt; extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];</span>
<span class="quote">&gt;-extern char __kprobes_text_start[], __kprobes_text_end[];</span>
<span class="quote">&gt;+DECLARE_LINKTABLE_TEXT(char, kprobes);</span>
<span class="quote">&gt; extern char __entry_text_start[], __entry_text_end[];</span>
<span class="quote">&gt; extern char __start_rodata[], __end_rodata[];</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h</span>
<span class="quote">&gt;index c5fcac902cbe..f1420714a549 100644</span>
<span class="quote">&gt;--- a/include/asm-generic/vmlinux.lds.h</span>
<span class="quote">&gt;+++ b/include/asm-generic/vmlinux.lds.h</span>
<span class="quote">&gt;@@ -112,15 +112,6 @@</span>
<span class="quote">&gt; #define BRANCH_PROFILE()</span>
<span class="quote">&gt; #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-#ifdef CONFIG_KPROBES</span>
<span class="quote">&gt;-#define KPROBE_BLACKLIST()	. = ALIGN(8);				      \</span>
<span class="quote">&gt;-				VMLINUX_SYMBOL(__start_kprobe_blacklist) = .; \</span>
<span class="quote">&gt;-				*(_kprobe_blacklist)			      \</span>
<span class="quote">&gt;-				VMLINUX_SYMBOL(__stop_kprobe_blacklist) = .;</span>
<span class="quote">&gt;-#else</span>
<span class="quote">&gt;-#define KPROBE_BLACKLIST()</span>
<span class="quote">&gt;-#endif</span>
<span class="quote">&gt;-</span>
<span class="quote">&gt; #ifdef CONFIG_EVENT_TRACING</span>
<span class="quote">&gt; #define FTRACE_EVENTS()	. = ALIGN(8);					\</span>
<span class="quote">&gt; 			VMLINUX_SYMBOL(__start_ftrace_events) = .;	\</span>
<span class="quote">&gt;@@ -433,12 +424,6 @@</span>
<span class="quote">&gt; 		*(.spinlock.text)					\</span>
<span class="quote">&gt; 		VMLINUX_SYMBOL(__lock_text_end) = .;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-#define KPROBES_TEXT							\</span>
<span class="quote">&gt;-		ALIGN_FUNCTION();					\</span>
<span class="quote">&gt;-		VMLINUX_SYMBOL(__kprobes_text_start) = .;		\</span>
<span class="quote">&gt;-		*(.kprobes.text)					\</span>
<span class="quote">&gt;-		VMLINUX_SYMBOL(__kprobes_text_end) = .;</span>
<span class="quote">&gt;-</span>
<span class="quote">&gt; #define ENTRY_TEXT							\</span>
<span class="quote">&gt; 		ALIGN_FUNCTION();					\</span>
<span class="quote">&gt; 		VMLINUX_SYMBOL(__entry_text_start) = .;			\</span>
<span class="quote">&gt;@@ -504,7 +489,6 @@</span>
<span class="quote">&gt; 	*(.init.rodata)							\</span>
<span class="quote">&gt; 	FTRACE_EVENTS()							\</span>
<span class="quote">&gt; 	TRACE_SYSCALLS()						\</span>
<span class="quote">&gt;-	KPROBE_BLACKLIST()						\</span>
<span class="quote">&gt; 	MEM_DISCARD(init.rodata)					\</span>
<span class="quote">&gt; 	CLK_OF_TABLES()							\</span>
<span class="quote">&gt; 	RESERVEDMEM_OF_TABLES()						\</span>
<span class="quote">&gt;diff --git a/include/linux/compiler.h b/include/linux/compiler.h</span>
<span class="quote">&gt;index 00b042c49ccd..8e33fc1ffd3c 100644</span>
<span class="quote">&gt;--- a/include/linux/compiler.h</span>
<span class="quote">&gt;+++ b/include/linux/compiler.h</span>
<span class="quote">&gt;@@ -546,7 +546,8 @@ static __always_inline void __write_once_size(volatile void *p, void *res, int s</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; /* Ignore/forbid kprobes attach on very low level functions marked by this attribute: */</span>
<span class="quote">&gt; #ifdef CONFIG_KPROBES</span>
<span class="quote">&gt;-# define __kprobes	__attribute__((__section__(&quot;.kprobes.text&quot;)))</span>
<span class="quote">&gt;+#include &lt;linux/sections.h&gt;</span>
<span class="quote">&gt;+# define __kprobes	__attribute__((__section__(SECTION_TBL(SECTION_TEXT, kprobes, all))))</span>
<span class="quote">&gt; # define nokprobe_inline	__always_inline</span>
<span class="quote">&gt; #else</span>
<span class="quote">&gt; # define __kprobes</span>
<span class="quote">&gt;diff --git a/include/linux/kprobes.h b/include/linux/kprobes.h</span>
<span class="quote">&gt;index 8f6849084248..544eb59cdbb9 100644</span>
<span class="quote">&gt;--- a/include/linux/kprobes.h</span>
<span class="quote">&gt;+++ b/include/linux/kprobes.h</span>
<span class="quote">&gt;@@ -42,8 +42,12 @@</span>
<span class="quote">&gt; #include &lt;linux/ftrace.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #ifdef CONFIG_KPROBES</span>
<span class="quote">&gt;+#include &lt;linux/tables.h&gt;</span>
<span class="quote">&gt; #include &lt;asm/kprobes.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;+DECLARE_LINKTABLE_TEXT(char, kprobes);</span>
<span class="quote">&gt;+DECLARE_LINKTABLE_INIT_DATA(unsigned long, _kprobe_blacklist);</span>
<span class="quote">&gt;+</span>
<span class="quote">&gt; /* kprobe_status settings */</span>
<span class="quote">&gt; #define KPROBE_HIT_ACTIVE	0x00000001</span>
<span class="quote">&gt; #define KPROBE_HIT_SS		0x00000002</span>
<span class="quote">&gt;@@ -487,8 +491,7 @@ static inline int enable_jprobe(struct jprobe *jp)</span>
<span class="quote">&gt;  * by using this macro.</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt; #define __NOKPROBE_SYMBOL(fname)			\</span>
<span class="quote">&gt;-static unsigned long __used				\</span>
<span class="quote">&gt;-	__attribute__((section(&quot;_kprobe_blacklist&quot;)))	\</span>
<span class="quote">&gt;+static LINKTABLE_INIT_DATA(_kprobe_blacklist, all)		\</span>
<span class="quote">&gt; 	_kbl_addr_##fname = (unsigned long)fname;</span>
<span class="quote">&gt; #define NOKPROBE_SYMBOL(fname)	__NOKPROBE_SYMBOL(fname)</span>
<span class="quote">&gt; #else</span>
<span class="quote">&gt;diff --git a/kernel/kprobes.c b/kernel/kprobes.c</span>
<span class="quote">&gt;index d10ab6b9b5e0..d816c659f358 100644</span>
<span class="quote">&gt;--- a/kernel/kprobes.c</span>
<span class="quote">&gt;+++ b/kernel/kprobes.c</span>
<span class="quote">&gt;@@ -1328,8 +1328,7 @@ out:</span>
<span class="quote">&gt; bool __weak arch_within_kprobe_blacklist(unsigned long addr)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	/* The __kprobes marked functions and entry code must not be probed */</span>
<span class="quote">&gt;-	return addr &gt;= (unsigned long)__kprobes_text_start &amp;&amp;</span>
<span class="quote">&gt;-	       addr &lt; (unsigned long)__kprobes_text_end;</span>
<span class="quote">&gt;+	return LINKTABLE_ADDR_WITHIN(kprobes, addr);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; bool within_kprobe_blacklist(unsigned long addr)</span>
<span class="quote">&gt;@@ -2054,14 +2053,13 @@ NOKPROBE_SYMBOL(dump_kprobe);</span>
<span class="quote">&gt;  * since a kprobe need not necessarily be at the beginning</span>
<span class="quote">&gt;  * of a function.</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt;-static int __init populate_kprobe_blacklist(unsigned long *start,</span>
<span class="quote">&gt;-					     unsigned long *end)</span>
<span class="quote">&gt;+static int __init populate_kprobe_blacklist(void)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	unsigned long *iter;</span>
<span class="quote">&gt; 	struct kprobe_blacklist_entry *ent;</span>
<span class="quote">&gt; 	unsigned long entry, offset = 0, size = 0;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	for (iter = start; iter &lt; end; iter++) {</span>
<span class="quote">&gt;+	LINKTABLE_FOR_EACH(iter, _kprobe_blacklist) {</span>
<span class="quote">&gt; 		entry = arch_deref_entry_point((void *)*iter);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 		if (!kernel_text_address(entry) ||</span>
<span class="quote">&gt;@@ -2126,8 +2124,9 @@ static struct notifier_block kprobe_module_nb = {</span>
<span class="quote">&gt; };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; /* Markers of _kprobe_blacklist section */</span>
<span class="quote">&gt;-extern unsigned long __start_kprobe_blacklist[];</span>
<span class="quote">&gt;-extern unsigned long __stop_kprobe_blacklist[];</span>
<span class="quote">&gt;+DEFINE_LINKTABLE_INIT_DATA(unsigned long, _kprobe_blacklist);</span>
<span class="quote">&gt;+/* Actual kprobes linker table */</span>
<span class="quote">&gt;+DEFINE_LINKTABLE_TEXT(char, kprobes);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; static int __init init_kprobes(void)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;@@ -2141,8 +2140,7 @@ static int __init init_kprobes(void)</span>
<span class="quote">&gt; 		raw_spin_lock_init(&amp;(kretprobe_table_locks[i].lock));</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;-	err = populate_kprobe_blacklist(__start_kprobe_blacklist,</span>
<span class="quote">&gt;-					__stop_kprobe_blacklist);</span>
<span class="quote">&gt;+	err = populate_kprobe_blacklist();</span>
<span class="quote">&gt; 	if (err) {</span>
<span class="quote">&gt; 		pr_err(&quot;kprobes: failed to populate blacklist: %d\n&quot;, err);</span>
<span class="quote">&gt; 		pr_err(&quot;Please take care of using kprobes.\n&quot;);</span>
<span class="quote">&gt;diff --git a/scripts/mod/modpost.c b/scripts/mod/modpost.c</span>
<span class="quote">&gt;index 48958d3cec9e..b0a8f519efb8 100644</span>
<span class="quote">&gt;--- a/scripts/mod/modpost.c</span>
<span class="quote">&gt;+++ b/scripts/mod/modpost.c</span>
<span class="quote">&gt;@@ -22,6 +22,7 @@</span>
<span class="quote">&gt; #include &quot;../../include/generated/autoconf.h&quot;</span>
<span class="quote">&gt; #include &quot;../../include/linux/license.h&quot;</span>
<span class="quote">&gt; #include &quot;../../include/linux/export.h&quot;</span>
<span class="quote">&gt;+#include &quot;../../include/linux/sections.h&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; /* Are we using CONFIG_MODVERSIONS? */</span>
<span class="quote">&gt; static int modversions = 0;</span>
<span class="quote">&gt;@@ -888,7 +889,7 @@ static void check_section(const char *modname, struct elf_info *elf,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #define DATA_SECTIONS &quot;.data&quot;, &quot;.data.rel&quot;</span>
<span class="quote">&gt; #define TEXT_SECTIONS &quot;.text&quot;, &quot;.text.unlikely&quot;, &quot;.sched.text&quot;, \</span>
<span class="quote">&gt;-		&quot;.kprobes.text&quot;</span>
<span class="quote">&gt;+		SECTION_TBL(SECTION_TEXT, kprobes, all)</span>
<span class="quote">&gt; #define OTHER_TEXT_SECTIONS &quot;.ref.text&quot;, &quot;.head.text&quot;, &quot;.spinlock.text&quot;, \</span>
<span class="quote">&gt; 		&quot;.fixup&quot;, &quot;.entry.text&quot;, &quot;.exception.text&quot;, &quot;.text.*&quot;, \</span>
<span class="quote">&gt; 		&quot;.coldtext&quot;</span>
<span class="quote">&gt;diff --git a/scripts/recordmcount.c b/scripts/recordmcount.c</span>
<span class="quote">&gt;index e167592793a7..f37dac17f033 100644</span>
<span class="quote">&gt;--- a/scripts/recordmcount.c</span>
<span class="quote">&gt;+++ b/scripts/recordmcount.c</span>
<span class="quote">&gt;@@ -32,6 +32,7 @@</span>
<span class="quote">&gt; #include &lt;stdlib.h&gt;</span>
<span class="quote">&gt; #include &lt;string.h&gt;</span>
<span class="quote">&gt; #include &lt;unistd.h&gt;</span>
<span class="quote">&gt;+#include &quot;../../include/linux/sections.h&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #ifndef EM_METAG</span>
<span class="quote">&gt; /* Remove this when these make it to the standard system elf.h. */</span>
<span class="quote">&gt;@@ -356,7 +357,7 @@ is_mcounted_section_name(char const *const txtname)</span>
<span class="quote">&gt; 		strcmp(&quot;.sched.text&quot;,    txtname) == 0 ||</span>
<span class="quote">&gt; 		strcmp(&quot;.spinlock.text&quot;, txtname) == 0 ||</span>
<span class="quote">&gt; 		strcmp(&quot;.irqentry.text&quot;, txtname) == 0 ||</span>
<span class="quote">&gt;-		strcmp(&quot;.kprobes.text&quot;, txtname) == 0 ||</span>
<span class="quote">&gt;+		strcmp(SECTION_TBL(SECTION_TEXT, kprobe, all), txtname) == 0 ||</span>
<span class="quote">&gt; 		strcmp(&quot;.text.unlikely&quot;, txtname) == 0;</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/scripts/recordmcount.pl b/scripts/recordmcount.pl</span>
<span class="quote">&gt;index 96e2486a6fc4..63e13009dda9 100755</span>
<span class="quote">&gt;--- a/scripts/recordmcount.pl</span>
<span class="quote">&gt;+++ b/scripts/recordmcount.pl</span>
<span class="quote">&gt;@@ -134,7 +134,7 @@ my %text_sections = (</span>
<span class="quote">&gt;      &quot;.sched.text&quot; =&gt; 1,</span>
<span class="quote">&gt;      &quot;.spinlock.text&quot; =&gt; 1,</span>
<span class="quote">&gt;      &quot;.irqentry.text&quot; =&gt; 1,</span>
<span class="quote">&gt;-     &quot;.kprobes.text&quot; =&gt; 1,</span>
<span class="quote">&gt;+     &quot;.text.tbl.kprobes.all&quot; =&gt; 1,</span>
<span class="quote">&gt;      &quot;.text.unlikely&quot; =&gt; 1,</span>
<span class="quote">&gt; );</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;--</span>
<span class="quote">&gt;2.7.0</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153261">Luis R. Rodriguez</a> - Feb. 23, 2016, 12:52 a.m.</div>
<pre class="content">
On Mon, Feb 22, 2016 at 01:34:05AM +0000, ???? / HIRAMATU?MASAMI wrote:
<span class="quote">&gt; &gt;From: Luis R. Rodriguez [mailto:mcgrof@kernel.org]</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;kprobe makes use of two custom sections:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;type       name                  begin                    end</span>
<span class="quote">&gt; &gt;init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist</span>
<span class="quote">&gt; &gt;text      .kprobes.text     __kprobes_text_start        __kprobes_text_end</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Port these to the linker table generic solution. This lets</span>
<span class="quote">&gt; &gt;us remove all the custom kprobe section declarations on the</span>
<span class="quote">&gt; &gt;linker script.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Tested with CONFIG_KPROBES_SANITY_TEST, it passes with:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Kprobe smoke test: started</span>
<span class="quote">&gt; &gt;Kprobe smoke test: passed successfully</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Then tested CONFIG_SAMPLE_KPROBES on do_fork, and the</span>
<span class="quote">&gt; &gt;kprobe bites and kicks as expected. Lastly tried registering</span>
<span class="quote">&gt; &gt;a kprobe on a kprobe blacklisted symbol (NOKPROBE_SYMBOL()),</span>
<span class="quote">&gt; &gt;and confirms that fails to work.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Could you also check to run the testcases by using ftracetest as below?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; $ cd tools/testing/selftests/ftrace/</span>
<span class="quote">&gt; $ sudo ./ftracetest</span>

Sure, it all passed:

$ sudo ./ftracetest
=== Ftrace unit tests ===
[1] Basic trace file check	[PASS]
[2] Basic test for tracers	[PASS]
[3] Basic trace clock test	[PASS]
[4] Basic event tracing check	[PASS]
[5] event tracing - enable/disable with event level files	[PASS]
[6] event tracing - enable/disable with subsystem level files	[PASS]
[7] event tracing - enable/disable with top level files	[PASS]
[8] ftrace - function graph filters with stack tracer	[PASS]
[9] ftrace - function graph filters	[PASS]
[10] ftrace - function profiler with function tracing	[PASS]
[11] Test creation and deletion of trace instances	[PASS]
[12] Kprobe dynamic event - adding and removing	[PASS]
[13] Kprobe dynamic event - busy event check	[PASS]
[14] Kprobe dynamic event with arguments	[PASS]
[15] Kprobe dynamic event with function tracer	[PASS]
[16] Kretprobe dynamic event with arguments	[PASS]

# of passed:  16
# of failed:  0
# of unresolved:  0
# of untested:  0
# of unsupported:  0
# of xfailed:  0
# of undefined(test bug):  0
<span class="quote">
&gt; And I&#39;m not sure about linker table.</span>

So there&#39;s really a few parts to the linker table work, out of
the ones that relate to kprobes:

  * linker tables try to generalize our section use, and provide some
    helpers for common section use
  * provides helpers to make it easier to make custom section,
    but by re-using standard sections
  * when a custom section uses standard sections and helpers
    we also get a few gains:
    - developers reviewing code can more easily get a quicker
      understanding and have expectations set of how the code
      feature using the custom section could be used
    - people grep&#39;ing on the kernel can more easily find
      specific types of custom section use by looking for
      the type of interest
    - developers adding features do not need to modify
      any linker scripts (vmlinux.lds.S) to make use of
      custom sections

In kprobe&#39;s case, since it uses two custom sections, we have
only a small use for the first case: .kprobe.text is just used
as a place holder for future developer annotated special cased
executable code. It also makes use of the generic helpers:
LINKTABLE_ADDR_WITHIN(), LINKTABLE_START(), LINKTABLE_END().

The second use case, for the _kprobe_blacklist, makes much more
use of the more advanced linker table helpers, for instance the
iterator LINKTABLE_FOR_EACH().

For both though we now have each custom section&#39;s actual section
clearly highlighted:

  * kprobes: .text (SECTION_TEXT)
  * kprobe blacklist: init.data (SECTION_INIT_DATA)

A reader / developer can more easily gain an understanding
of how the above custom sections could be used just by its
type.

Another feature of linker tables, but outside of the scope of how kprobe
would use linker tables, is the ability to enable folks to avoid code
bit rot by using table-$(CONFIG_FOO) instead of oby-$(CONFIG_FOO) on
init paths of code but since this is outside of the scope of how kprobe would
use I leave that just as a reference as another part of linker table.
Unless of course you want to make people force compile all kprobe
support code but only have it linked in when actually enabled. That
would be outside of the scope and purpose of this patch though.
<span class="quote">
&gt; Is that possible to support</span>
<span class="quote">&gt; __kprobes prefix, which moves the functions into kprobes.text?</span>

Absolutely, the respective change was just to annotate and make
it clear the section kprobes were using:

-# define __kprobes     __attribute__((__section__(&quot;.kprobes.text&quot;)))
+#include &lt;linux/sections.h&gt;
+# define __kprobes     __attribute__((__section__(SECTION_TBL(SECTION_TEXT, kprobes, all))))
<span class="quote">
&gt; Actually, I&#39;m on the way to replacing __kprobes to NOKPROBE_SYMBOL</span>
<span class="quote">&gt; macro, since NOKPROBE_SYMBOL() doesn&#39;t effect the kernel text itself.</span>
<span class="quote">&gt; On x86, it is already replaced (see commit 820aede0209a), and same</span>
<span class="quote">&gt; work should be done on other archs. So, could you hold this after</span>
<span class="quote">&gt; that?</span>

Sure.
<span class="quote">
&gt; I think we should remove .kprobes.text first </span>

You mean just remove the incorrect users of .kprobes.text because as I read
what you described above we have abuse of __kprobes use to protect against
kprobes being introduced on those routines, and we should be using
NOKPROBE_SYMBOL() instead. So from what I gather its not that you will
remove .kprobes.text but rather clean our current abuse of __kprobes
for protection to use NOKPROBE_SYMBOL() instead. Is that right?
<span class="quote">
&gt; and move to  linker table.</span>

Sure, can you Cc me on your patches? I can follow up later.

  Luis
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153261">Luis R. Rodriguez</a> - July 21, 2016, 11:53 p.m.</div>
<pre class="content">
On Tue, Feb 23, 2016 at 01:52:44AM +0100, Luis R. Rodriguez wrote:
<span class="quote">&gt; On Mon, Feb 22, 2016 at 01:34:05AM +0000, 平松雅巳 / HIRAMATU，MASAMI wrote:</span>
<span class="quote">&gt; &gt; &gt;From: Luis R. Rodriguez [mailto:mcgrof@kernel.org]</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;kprobe makes use of two custom sections:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;type       name                  begin                    end</span>
<span class="quote">&gt; &gt; &gt;init.data _kprobe_blacklist __start_kprobe_blacklist	__stop_kprobe_blacklist</span>
<span class="quote">&gt; &gt; &gt;text      .kprobes.text     __kprobes_text_start        __kprobes_text_end</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Port these to the linker table generic solution. This lets</span>
<span class="quote">&gt; &gt; &gt;us remove all the custom kprobe section declarations on the</span>
<span class="quote">&gt; &gt; &gt;linker script.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Tested with CONFIG_KPROBES_SANITY_TEST, it passes with:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Kprobe smoke test: started</span>
<span class="quote">&gt; &gt; &gt;Kprobe smoke test: passed successfully</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Then tested CONFIG_SAMPLE_KPROBES on do_fork, and the</span>
<span class="quote">&gt; &gt; &gt;kprobe bites and kicks as expected. Lastly tried registering</span>
<span class="quote">&gt; &gt; &gt;a kprobe on a kprobe blacklisted symbol (NOKPROBE_SYMBOL()),</span>
<span class="quote">&gt; &gt; &gt;and confirms that fails to work.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Could you also check to run the testcases by using ftracetest as below?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; $ cd tools/testing/selftests/ftrace/</span>
<span class="quote">&gt; &gt; $ sudo ./ftracetest</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sure, it all passed:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; $ sudo ./ftracetest</span>
<span class="quote">&gt; === Ftrace unit tests ===</span>
<span class="quote">&gt; [1] Basic trace file check	[PASS]</span>
<span class="quote">&gt; [2] Basic test for tracers	[PASS]</span>
<span class="quote">&gt; [3] Basic trace clock test	[PASS]</span>
<span class="quote">&gt; [4] Basic event tracing check	[PASS]</span>
<span class="quote">&gt; [5] event tracing - enable/disable with event level files	[PASS]</span>
<span class="quote">&gt; [6] event tracing - enable/disable with subsystem level files	[PASS]</span>
<span class="quote">&gt; [7] event tracing - enable/disable with top level files	[PASS]</span>
<span class="quote">&gt; [8] ftrace - function graph filters with stack tracer	[PASS]</span>
<span class="quote">&gt; [9] ftrace - function graph filters	[PASS]</span>
<span class="quote">&gt; [10] ftrace - function profiler with function tracing	[PASS]</span>
<span class="quote">&gt; [11] Test creation and deletion of trace instances	[PASS]</span>
<span class="quote">&gt; [12] Kprobe dynamic event - adding and removing	[PASS]</span>
<span class="quote">&gt; [13] Kprobe dynamic event - busy event check	[PASS]</span>
<span class="quote">&gt; [14] Kprobe dynamic event with arguments	[PASS]</span>
<span class="quote">&gt; [15] Kprobe dynamic event with function tracer	[PASS]</span>
<span class="quote">&gt; [16] Kretprobe dynamic event with arguments	[PASS]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; # of passed:  16</span>
<span class="quote">&gt; # of failed:  0</span>
<span class="quote">&gt; # of unresolved:  0</span>
<span class="quote">&gt; # of untested:  0</span>
<span class="quote">&gt; # of unsupported:  0</span>
<span class="quote">&gt; # of xfailed:  0</span>
<span class="quote">&gt; # of undefined(test bug):  0</span>

The number of tests have grown, this still passes in the new rebase.
<span class="quote">
&gt; &gt; And I&#39;m not sure about linker table.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So there&#39;s really a few parts to the linker table work, out of</span>
<span class="quote">&gt; the ones that relate to kprobes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   * linker tables try to generalize our section use, and provide some</span>
<span class="quote">&gt;     helpers for common section use</span>
<span class="quote">&gt;   * provides helpers to make it easier to make custom section,</span>
<span class="quote">&gt;     but by re-using standard sections</span>
<span class="quote">&gt;   * when a custom section uses standard sections and helpers</span>
<span class="quote">&gt;     we also get a few gains:</span>
<span class="quote">&gt;     - developers reviewing code can more easily get a quicker</span>
<span class="quote">&gt;       understanding and have expectations set of how the code</span>
<span class="quote">&gt;       feature using the custom section could be used</span>
<span class="quote">&gt;     - people grep&#39;ing on the kernel can more easily find</span>
<span class="quote">&gt;       specific types of custom section use by looking for</span>
<span class="quote">&gt;       the type of interest</span>
<span class="quote">&gt;     - developers adding features do not need to modify</span>
<span class="quote">&gt;       any linker scripts (vmlinux.lds.S) to make use of</span>
<span class="quote">&gt;       custom sections</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In kprobe&#39;s case, since it uses two custom sections, we have</span>
<span class="quote">&gt; only a small use for the first case: .kprobe.text is just used</span>
<span class="quote">&gt; as a place holder for future developer annotated special cased</span>
<span class="quote">&gt; executable code. It also makes use of the generic helpers:</span>
<span class="quote">&gt; LINKTABLE_ADDR_WITHIN(), LINKTABLE_START(), LINKTABLE_END().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The second use case, for the _kprobe_blacklist, makes much more</span>
<span class="quote">&gt; use of the more advanced linker table helpers, for instance the</span>
<span class="quote">&gt; iterator LINKTABLE_FOR_EACH().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For both though we now have each custom section&#39;s actual section</span>
<span class="quote">&gt; clearly highlighted:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   * kprobes: .text (SECTION_TEXT)</span>
<span class="quote">&gt;   * kprobe blacklist: init.data (SECTION_INIT_DATA)</span>

I ended up splitting this in two patches, in the new v3 series
kprobes will go under a simple section range, while the blacklist
stuff gets its linker table.
<span class="quote">
&gt; A reader / developer can more easily gain an understanding</span>
<span class="quote">&gt; of how the above custom sections could be used just by its</span>
<span class="quote">&gt; type.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Another feature of linker tables, but outside of the scope of how kprobe</span>
<span class="quote">&gt; would use linker tables, is the ability to enable folks to avoid code</span>
<span class="quote">&gt; bit rot by using table-$(CONFIG_FOO) instead of oby-$(CONFIG_FOO) on</span>
<span class="quote">&gt; init paths of code but since this is outside of the scope of how kprobe would</span>
<span class="quote">&gt; use I leave that just as a reference as another part of linker table.</span>
<span class="quote">&gt; Unless of course you want to make people force compile all kprobe</span>
<span class="quote">&gt; support code but only have it linked in when actually enabled. That</span>
<span class="quote">&gt; would be outside of the scope and purpose of this patch though.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Is that possible to support</span>
<span class="quote">&gt; &gt; __kprobes prefix, which moves the functions into kprobes.text?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Absolutely, the respective change was just to annotate and make</span>
<span class="quote">&gt; it clear the section kprobes were using:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -# define __kprobes     __attribute__((__section__(&quot;.kprobes.text&quot;)))</span>
<span class="quote">&gt; +#include &lt;linux/sections.h&gt;</span>
<span class="quote">&gt; +# define __kprobes     __attribute__((__section__(SECTION_TBL(SECTION_TEXT, kprobes, all))))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Actually, I&#39;m on the way to replacing __kprobes to NOKPROBE_SYMBOL</span>
<span class="quote">&gt; &gt; macro, since NOKPROBE_SYMBOL() doesn&#39;t effect the kernel text itself.</span>
<span class="quote">&gt; &gt; On x86, it is already replaced (see commit 820aede0209a), and same</span>
<span class="quote">&gt; &gt; work should be done on other archs. So, could you hold this after</span>
<span class="quote">&gt; &gt; that?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sure.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; I think we should remove .kprobes.text first </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You mean just remove the incorrect users of .kprobes.text because as I read</span>
<span class="quote">&gt; what you described above we have abuse of __kprobes use to protect against</span>
<span class="quote">&gt; kprobes being introduced on those routines, and we should be using</span>
<span class="quote">&gt; NOKPROBE_SYMBOL() instead. So from what I gather its not that you will</span>
<span class="quote">&gt; remove .kprobes.text but rather clean our current abuse of __kprobes</span>
<span class="quote">&gt; for protection to use NOKPROBE_SYMBOL() instead. Is that right?</span>

I never heard back :(
<span class="quote">
&gt; &gt; and move to  linker table.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sure, can you Cc me on your patches? I can follow up later.</span>

And I was never Cc&#39;d on these patches so its unclear if this work
is done. I&#39;ll be posting a v3 series now.

  Luis
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arc/kernel/vmlinux.lds.S b/arch/arc/kernel/vmlinux.lds.S</span>
<span class="p_header">index 894e696bddaa..52f23df2b9b6 100644</span>
<span class="p_header">--- a/arch/arc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/arc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -98,7 +98,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		*(.fixup)
 		*(.gnu.warning)
 	}
<span class="p_header">diff --git a/arch/arm/kernel/entry-armv.S b/arch/arm/kernel/entry-armv.S</span>
<span class="p_header">index 3ce377f7251f..4959a83833fd 100644</span>
<span class="p_header">--- a/arch/arm/kernel/entry-armv.S</span>
<span class="p_header">+++ b/arch/arm/kernel/entry-armv.S</span>
<span class="p_chunk">@@ -83,7 +83,7 @@</span> <span class="p_context"></span>
 	.endm
 
 #ifdef CONFIG_KPROBES
<span class="p_del">-	.section	.kprobes.text,&quot;ax&quot;,%progbits</span>
<span class="p_add">+	.section	.text.tbl.kprobes.all,&quot;ax&quot;,%progbits</span>
 #else
 	.text
 #endif
<span class="p_header">diff --git a/arch/arm/kernel/vmlinux.lds.S b/arch/arm/kernel/vmlinux.lds.S</span>
<span class="p_header">index 8b60fde5ce48..8de7921ac331 100644</span>
<span class="p_header">--- a/arch/arm/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/arm/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -108,7 +108,6 @@</span> <span class="p_context"> SECTIONS</span>
 			TEXT_TEXT
 			SCHED_TEXT
 			LOCK_TEXT
<span class="p_del">-			KPROBES_TEXT</span>
 			*(.gnu.warning)
 			*(.glue_7)
 			*(.glue_7t)
<span class="p_header">diff --git a/arch/avr32/kernel/entry-avr32b.S b/arch/avr32/kernel/entry-avr32b.S</span>
<span class="p_header">index 7301f4806bbe..c0fe699d0a21 100644</span>
<span class="p_header">--- a/arch/avr32/kernel/entry-avr32b.S</span>
<span class="p_header">+++ b/arch/avr32/kernel/entry-avr32b.S</span>
<span class="p_chunk">@@ -605,7 +605,7 @@</span> <span class="p_context"> fault_exit_work:</span>
 	brcc	fault_resume_user
 	rjmp	enter_monitor_mode
 
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;, @progbits</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;, @progbits</span>
 	.type	handle_debug, @function
 handle_debug:
 	sub	sp, 4		/* r12_orig */
<span class="p_chunk">@@ -826,7 +826,7 @@</span> <span class="p_context"> irq_level\level:</span>
 	IRQ_LEVEL 2
 	IRQ_LEVEL 3
 
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;, @progbits</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;, @progbits</span>
 	.type	enter_monitor_mode, @function
 enter_monitor_mode:
 	/*
<span class="p_header">diff --git a/arch/avr32/kernel/vmlinux.lds.S b/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="p_header">index a4589176bed5..bf4f3f1f9dbb 100644</span>
<span class="p_header">--- a/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/avr32/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -49,7 +49,6 @@</span> <span class="p_context"> SECTIONS</span>
 		_stext = .;
 		*(.ex.text)
 		*(.irq.text)
<span class="p_del">-		KPROBES_TEXT</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_header">diff --git a/arch/blackfin/kernel/vmlinux.lds.S b/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="p_header">index c9eec84aa258..8a193fad4c5d 100644</span>
<span class="p_header">--- a/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/blackfin/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -35,7 +35,6 @@</span> <span class="p_context"> SECTIONS</span>
 #endif
 		LOCK_TEXT
 		IRQENTRY_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 #ifdef CONFIG_ROMKERNEL
 		__sinittext = .;
 		INIT_TEXT
<span class="p_header">diff --git a/arch/c6x/kernel/vmlinux.lds.S b/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="p_header">index 5a6e141d1641..a23bed62cec3 100644</span>
<span class="p_header">--- a/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/c6x/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -72,7 +72,6 @@</span> <span class="p_context"> SECTIONS</span>
 		SCHED_TEXT
 		LOCK_TEXT
 		IRQENTRY_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		*(.fixup)
 		*(.gnu.warning)
 	}
<span class="p_header">diff --git a/arch/hexagon/kernel/vmlinux.lds.S b/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="p_header">index 5f268c1071b3..a358b699ec64 100644</span>
<span class="p_header">--- a/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/hexagon/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -51,7 +51,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		*(.fixup)
 	}
 	_etext = .;
<span class="p_header">diff --git a/arch/ia64/kernel/jprobes.S b/arch/ia64/kernel/jprobes.S</span>
<span class="p_header">index f69389c7be1d..c6c23a3e92fb 100644</span>
<span class="p_header">--- a/arch/ia64/kernel/jprobes.S</span>
<span class="p_header">+++ b/arch/ia64/kernel/jprobes.S</span>
<span class="p_chunk">@@ -50,7 +50,7 @@</span> <span class="p_context"></span>
 	/*
 	 * void jprobe_break(void)
 	 */
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
 ENTRY(jprobe_break)
 	break.m __IA64_BREAK_JPROBE
 END(jprobe_break)
<span class="p_header">diff --git a/arch/ia64/kernel/vmlinux.lds.S b/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="p_header">index dc506b05ffbd..884f36d38989 100644</span>
<span class="p_header">--- a/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/ia64/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -47,7 +47,6 @@</span> <span class="p_context"> SECTIONS {</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		*(.gnu.linkonce.t*)
 	}
 
<span class="p_header">diff --git a/arch/ia64/lib/flush.S b/arch/ia64/lib/flush.S</span>
<span class="p_header">index 1d8c88860063..7f257810e858 100644</span>
<span class="p_header">--- a/arch/ia64/lib/flush.S</span>
<span class="p_header">+++ b/arch/ia64/lib/flush.S</span>
<span class="p_chunk">@@ -20,7 +20,7 @@</span> <span class="p_context"></span>
 	 *
 	 *	Note: &quot;in0&quot; and &quot;in1&quot; are preserved for debugging purposes.
 	 */
<span class="p_del">-	.section .kprobes.text,&quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all,&quot;ax&quot;</span>
 GLOBAL_ENTRY(flush_icache_range)
 
 	.prologue
<span class="p_chunk">@@ -72,7 +72,7 @@</span> <span class="p_context"> END(flush_icache_range)</span>
 	 *
 	 *	Note: &quot;in0&quot; and &quot;in1&quot; are preserved for debugging purposes.
 	 */
<span class="p_del">-	.section .kprobes.text,&quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all,&quot;ax&quot;</span>
 GLOBAL_ENTRY(clflush_cache_range)
 
 	.prologue
<span class="p_header">diff --git a/arch/metag/kernel/vmlinux.lds.S b/arch/metag/kernel/vmlinux.lds.S</span>
<span class="p_header">index e12055e88bfe..da1689c85bc8 100644</span>
<span class="p_header">--- a/arch/metag/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/metag/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -22,7 +22,6 @@</span> <span class="p_context"> SECTIONS</span>
 	TEXT_TEXT
 	SCHED_TEXT
 	LOCK_TEXT
<span class="p_del">-	KPROBES_TEXT</span>
 	IRQENTRY_TEXT
 	*(.text.*)
 	*(.gnu.warning)
<span class="p_header">diff --git a/arch/microblaze/kernel/vmlinux.lds.S b/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="p_header">index be9488d69734..94c1c5574a77 100644</span>
<span class="p_header">--- a/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/microblaze/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -34,7 +34,6 @@</span> <span class="p_context"> SECTIONS {</span>
 		EXIT_CALL
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		. = ALIGN (4) ;
 		_etext = . ;
<span class="p_header">diff --git a/arch/mips/kernel/vmlinux.lds.S b/arch/mips/kernel/vmlinux.lds.S</span>
<span class="p_header">index 0a93e83cd014..9183e9235651 100644</span>
<span class="p_header">--- a/arch/mips/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/mips/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -56,7 +56,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		*(.text.*)
 		*(.fixup)
<span class="p_header">diff --git a/arch/mn10300/kernel/vmlinux.lds.S b/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="p_header">index 13c4814c29f8..ead5efc01802 100644</span>
<span class="p_header">--- a/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/mn10300/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -31,7 +31,6 @@</span> <span class="p_context"> SECTIONS</span>
 	TEXT_TEXT
 	SCHED_TEXT
 	LOCK_TEXT
<span class="p_del">-	KPROBES_TEXT</span>
 	*(.fixup)
 	*(.gnu.warning)
 	} = 0xcb
<span class="p_header">diff --git a/arch/nios2/kernel/vmlinux.lds.S b/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="p_header">index 326fab40a9de..dc8a84183700 100644</span>
<span class="p_header">--- a/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/nios2/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -39,7 +39,6 @@</span> <span class="p_context"> SECTIONS</span>
 		SCHED_TEXT
 		LOCK_TEXT
 		IRQENTRY_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 	} =0
 	_etext = .;
 
<span class="p_header">diff --git a/arch/openrisc/kernel/vmlinux.lds.S b/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="p_header">index 2d69a853b742..b010cb75edc4 100644</span>
<span class="p_header">--- a/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/openrisc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -48,7 +48,6 @@</span> <span class="p_context"> SECTIONS</span>
 	  TEXT_TEXT
 	  SCHED_TEXT
 	  LOCK_TEXT
<span class="p_del">-	  KPROBES_TEXT</span>
 	  IRQENTRY_TEXT
 	  *(.fixup)
 	  *(.text.__*)
<span class="p_header">diff --git a/arch/parisc/kernel/vmlinux.lds.S b/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="p_header">index 308f29081d46..9d9dc4984465 100644</span>
<span class="p_header">--- a/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/parisc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -70,7 +70,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		*(.text.do_softirq)
 		*(.text.sys_exit)
<span class="p_header">diff --git a/arch/powerpc/include/asm/ppc_asm.h b/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="p_header">index 499d9f89435a..4e36e86338f3 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/ppc_asm.h</span>
<span class="p_chunk">@@ -218,7 +218,7 @@</span> <span class="p_context"> name: \</span>
 	.localentry name,.-name
 
 #define _KPROBE(name) \
<span class="p_del">-	.section &quot;.kprobes.text&quot;,&quot;a&quot;; \</span>
<span class="p_add">+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;; \</span>
 	.align 2 ; \
 	.type name,@function; \
 	.globl name; \
<span class="p_chunk">@@ -248,7 +248,7 @@</span> <span class="p_context"> GLUE(.,name):</span>
 #define _GLOBAL_TOC(name) _GLOBAL(name)
 
 #define _KPROBE(name) \
<span class="p_del">-	.section &quot;.kprobes.text&quot;,&quot;a&quot;; \</span>
<span class="p_add">+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;; \</span>
 	.align 2 ; \
 	.globl name; \
 	.globl GLUE(.,name); \
<span class="p_chunk">@@ -280,7 +280,7 @@</span> <span class="p_context"> n:</span>
 #define _GLOBAL_TOC(name) _GLOBAL(name)
 
 #define _KPROBE(n)	\
<span class="p_del">-	.section &quot;.kprobes.text&quot;,&quot;a&quot;;	\</span>
<span class="p_add">+	.section &quot;.text.tbl.kprobes.all&quot;,&quot;a&quot;;	\</span>
 	.globl	n;	\
 n:
 
<span class="p_header">diff --git a/arch/powerpc/kernel/vmlinux.lds.S b/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="p_header">index d41fd0af8980..8779ae180783 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/powerpc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -53,7 +53,6 @@</span> <span class="p_context"> SECTIONS</span>
 		*(.text .fixup __ftr_alt_* .ref.text)
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 
 #ifdef CONFIG_PPC32
<span class="p_header">diff --git a/arch/s390/kernel/entry.S b/arch/s390/kernel/entry.S</span>
<span class="p_header">index cd5a191381b9..b09aa9ab5a1f 100644</span>
<span class="p_header">--- a/arch/s390/kernel/entry.S</span>
<span class="p_header">+++ b/arch/s390/kernel/entry.S</span>
<span class="p_chunk">@@ -162,7 +162,7 @@</span> <span class="p_context"> _PIF_WORK	= (_PIF_PER_TRAP)</span>
 		tm	off+\addr, \mask
 	.endm
 
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
 
 /*
  * Scheduler resume function, called by switch_to
<span class="p_chunk">@@ -965,7 +965,7 @@</span> <span class="p_context"> ENTRY(restart_int_handler)</span>
 	brc	2,2b
 3:	j	3b
 
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
 
 #ifdef CONFIG_CHECK_STACK
 /*
<span class="p_header">diff --git a/arch/s390/kernel/kprobes.c b/arch/s390/kernel/kprobes.c</span>
<span class="p_header">index 250f5972536a..376d4bd487c5 100644</span>
<span class="p_header">--- a/arch/s390/kernel/kprobes.c</span>
<span class="p_header">+++ b/arch/s390/kernel/kprobes.c</span>
<span class="p_chunk">@@ -288,7 +288,7 @@</span> <span class="p_context"> static void kprobe_reenter_check(struct kprobe_ctlblk *kcb, struct kprobe *p)</span>
 	default:
 		/*
 		 * A kprobe on the code path to single step an instruction
<span class="p_del">-		 * is a BUG. The code path resides in the .kprobes.text</span>
<span class="p_add">+		 * is a BUG. The code path resides in the .text.tbl.kprobes.all</span>
 		 * section and is executed with interrupts disabled.
 		 */
 		printk(KERN_EMERG &quot;Invalid kprobe detected at %p.\n&quot;, p-&gt;addr);
<span class="p_header">diff --git a/arch/s390/kernel/mcount.S b/arch/s390/kernel/mcount.S</span>
<span class="p_header">index e499370fbccb..4572045b968e 100644</span>
<span class="p_header">--- a/arch/s390/kernel/mcount.S</span>
<span class="p_header">+++ b/arch/s390/kernel/mcount.S</span>
<span class="p_chunk">@@ -10,7 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/ftrace.h&gt;
 #include &lt;asm/ptrace.h&gt;
 
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
 
 ENTRY(ftrace_stub)
 	br	%r14
<span class="p_header">diff --git a/arch/s390/kernel/vmlinux.lds.S b/arch/s390/kernel/vmlinux.lds.S</span>
<span class="p_header">index 445657fe658c..4614b5bcab5e 100644</span>
<span class="p_header">--- a/arch/s390/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/s390/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -26,7 +26,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		*(.fixup)
 		*(.gnu.warning)
<span class="p_header">diff --git a/arch/score/kernel/vmlinux.lds.S b/arch/score/kernel/vmlinux.lds.S</span>
<span class="p_header">index 7274b5c4287e..36ebcb3b1215 100644</span>
<span class="p_header">--- a/arch/score/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/score/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -41,7 +41,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		*(.text.*)
 		*(.fixup)
 		. = ALIGN (4) ;
<span class="p_header">diff --git a/arch/sh/kernel/vmlinux.lds.S b/arch/sh/kernel/vmlinux.lds.S</span>
<span class="p_header">index db88cbf9eafd..af4f37375345 100644</span>
<span class="p_header">--- a/arch/sh/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/sh/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -37,7 +37,6 @@</span> <span class="p_context"> SECTIONS</span>
 		EXTRA_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		*(.fixup)
 		*(.gnu.warning)
<span class="p_header">diff --git a/arch/sparc/kernel/vmlinux.lds.S b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_header">index f1a2f688b28a..a1c8e3a3ebb6 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -46,7 +46,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		IRQENTRY_TEXT
 		*(.gnu.warning)
 	} = 0
<span class="p_header">diff --git a/arch/sparc/mm/ultra.S b/arch/sparc/mm/ultra.S</span>
<span class="p_header">index b4f4733abc6e..a08fb40656ac 100644</span>
<span class="p_header">--- a/arch/sparc/mm/ultra.S</span>
<span class="p_header">+++ b/arch/sparc/mm/ultra.S</span>
<span class="p_chunk">@@ -148,7 +148,7 @@</span> <span class="p_context"> __spitfire_flush_tlb_mm_slow:</span>
 /*
  * The following code flushes one page_size worth.
  */
<span class="p_del">-	.section .kprobes.text, &quot;ax&quot;</span>
<span class="p_add">+	.section .text.tbl.kprobes.all, &quot;ax&quot;</span>
 	.align		32
 	.globl		__flush_icache_page
 __flush_icache_page:	/* %o0 = phys_page */
<span class="p_header">diff --git a/arch/tile/kernel/vmlinux.lds.S b/arch/tile/kernel/vmlinux.lds.S</span>
<span class="p_header">index 0e059a0101ea..0f04268fc394 100644</span>
<span class="p_header">--- a/arch/tile/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/tile/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -43,7 +43,6 @@</span> <span class="p_context"> SECTIONS</span>
     HEAD_TEXT
     SCHED_TEXT
     LOCK_TEXT
<span class="p_del">-    KPROBES_TEXT</span>
     IRQENTRY_TEXT
     __fix_text_end = .;   /* tile-cpack won&#39;t rearrange before this */
     ALIGN_FUNCTION();
<span class="p_header">diff --git a/arch/x86/kernel/kprobes/core.c b/arch/x86/kernel/kprobes/core.c</span>
<span class="p_header">index 1deffe6cc873..dde4ec0e0185 100644</span>
<span class="p_header">--- a/arch/x86/kernel/kprobes/core.c</span>
<span class="p_header">+++ b/arch/x86/kernel/kprobes/core.c</span>
<span class="p_chunk">@@ -577,7 +577,10 @@</span> <span class="p_context"> static int reenter_kprobe(struct kprobe *p, struct pt_regs *regs,</span>
 	case KPROBE_REENTER:
 		/* A probe has been hit in the codepath leading up to, or just
 		 * after, single-stepping of a probed instruction. This entire
<span class="p_del">-		 * codepath should strictly reside in .kprobes.text section.</span>
<span class="p_add">+		 * codepath should strictly reside in the kprobes section:</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * SECTION_TBL(SECTION_TEXT, kprobes, all)</span>
<span class="p_add">+		 *</span>
 		 * Raise a BUG or we&#39;ll continue in an endless reentering loop
 		 * and eventually a stack overflow.
 		 */
<span class="p_chunk">@@ -1114,10 +1117,9 @@</span> <span class="p_context"> NOKPROBE_SYMBOL(longjmp_break_handler);</span>
 
 bool arch_within_kprobe_blacklist(unsigned long addr)
 {
<span class="p_del">-	return  (addr &gt;= (unsigned long)__kprobes_text_start &amp;&amp;</span>
<span class="p_del">-		 addr &lt; (unsigned long)__kprobes_text_end) ||</span>
<span class="p_add">+	return  (LINKTABLE_ADDR_WITHIN(kprobes, addr) ||</span>
 		(addr &gt;= (unsigned long)__entry_text_start &amp;&amp;
<span class="p_del">-		 addr &lt; (unsigned long)__entry_text_end);</span>
<span class="p_add">+		 addr &lt; (unsigned long)__entry_text_end));</span>
 }
 
 int __init arch_init_kprobes(void)
<span class="p_header">diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_header">index 74e4bf11f562..80a9f9106d2a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -99,7 +99,6 @@</span> <span class="p_context"> SECTIONS</span>
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
<span class="p_del">-		KPROBES_TEXT</span>
 		ENTRY_TEXT
 		IRQENTRY_TEXT
 		*(.fixup)
<span class="p_header">diff --git a/include/asm-generic/sections.h b/include/asm-generic/sections.h</span>
<span class="p_header">index f5ea98bd85d2..0438aab5cb58 100644</span>
<span class="p_header">--- a/include/asm-generic/sections.h</span>
<span class="p_header">+++ b/include/asm-generic/sections.h</span>
<span class="p_chunk">@@ -24,7 +24,7 @@</span> <span class="p_context"></span>
  * Following global variables are optional and may be unavailable on some
  * architectures and/or kernel configurations.
  *	_text, _data
<span class="p_del">- *	__kprobes_text_start, __kprobes_text_end</span>
<span class="p_add">+ *	LINKTABLE_START(kprobes), LINKTABLE_END(kprobes)</span>
  *	__entry_text_start, __entry_text_end
  *	__ctors_start, __ctors_end
  */
<span class="p_chunk">@@ -35,7 +35,7 @@</span> <span class="p_context"> extern char __init_begin[], __init_end[];</span>
 extern char _sinittext[], _einittext[];
 extern char _end[];
 extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
<span class="p_del">-extern char __kprobes_text_start[], __kprobes_text_end[];</span>
<span class="p_add">+DECLARE_LINKTABLE_TEXT(char, kprobes);</span>
 extern char __entry_text_start[], __entry_text_end[];
 extern char __start_rodata[], __end_rodata[];
 
<span class="p_header">diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h</span>
<span class="p_header">index c5fcac902cbe..f1420714a549 100644</span>
<span class="p_header">--- a/include/asm-generic/vmlinux.lds.h</span>
<span class="p_header">+++ b/include/asm-generic/vmlinux.lds.h</span>
<span class="p_chunk">@@ -112,15 +112,6 @@</span> <span class="p_context"></span>
 #define BRANCH_PROFILE()
 #endif
 
<span class="p_del">-#ifdef CONFIG_KPROBES</span>
<span class="p_del">-#define KPROBE_BLACKLIST()	. = ALIGN(8);				      \</span>
<span class="p_del">-				VMLINUX_SYMBOL(__start_kprobe_blacklist) = .; \</span>
<span class="p_del">-				*(_kprobe_blacklist)			      \</span>
<span class="p_del">-				VMLINUX_SYMBOL(__stop_kprobe_blacklist) = .;</span>
<span class="p_del">-#else</span>
<span class="p_del">-#define KPROBE_BLACKLIST()</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 #ifdef CONFIG_EVENT_TRACING
 #define FTRACE_EVENTS()	. = ALIGN(8);					\
 			VMLINUX_SYMBOL(__start_ftrace_events) = .;	\
<span class="p_chunk">@@ -433,12 +424,6 @@</span> <span class="p_context"></span>
 		*(.spinlock.text)					\
 		VMLINUX_SYMBOL(__lock_text_end) = .;
 
<span class="p_del">-#define KPROBES_TEXT							\</span>
<span class="p_del">-		ALIGN_FUNCTION();					\</span>
<span class="p_del">-		VMLINUX_SYMBOL(__kprobes_text_start) = .;		\</span>
<span class="p_del">-		*(.kprobes.text)					\</span>
<span class="p_del">-		VMLINUX_SYMBOL(__kprobes_text_end) = .;</span>
<span class="p_del">-</span>
 #define ENTRY_TEXT							\
 		ALIGN_FUNCTION();					\
 		VMLINUX_SYMBOL(__entry_text_start) = .;			\
<span class="p_chunk">@@ -504,7 +489,6 @@</span> <span class="p_context"></span>
 	*(.init.rodata)							\
 	FTRACE_EVENTS()							\
 	TRACE_SYSCALLS()						\
<span class="p_del">-	KPROBE_BLACKLIST()						\</span>
 	MEM_DISCARD(init.rodata)					\
 	CLK_OF_TABLES()							\
 	RESERVEDMEM_OF_TABLES()						\
<span class="p_header">diff --git a/include/linux/compiler.h b/include/linux/compiler.h</span>
<span class="p_header">index 00b042c49ccd..8e33fc1ffd3c 100644</span>
<span class="p_header">--- a/include/linux/compiler.h</span>
<span class="p_header">+++ b/include/linux/compiler.h</span>
<span class="p_chunk">@@ -546,7 +546,8 @@</span> <span class="p_context"> static __always_inline void __write_once_size(volatile void *p, void *res, int s</span>
 
 /* Ignore/forbid kprobes attach on very low level functions marked by this attribute: */
 #ifdef CONFIG_KPROBES
<span class="p_del">-# define __kprobes	__attribute__((__section__(&quot;.kprobes.text&quot;)))</span>
<span class="p_add">+#include &lt;linux/sections.h&gt;</span>
<span class="p_add">+# define __kprobes	__attribute__((__section__(SECTION_TBL(SECTION_TEXT, kprobes, all))))</span>
 # define nokprobe_inline	__always_inline
 #else
 # define __kprobes
<span class="p_header">diff --git a/include/linux/kprobes.h b/include/linux/kprobes.h</span>
<span class="p_header">index 8f6849084248..544eb59cdbb9 100644</span>
<span class="p_header">--- a/include/linux/kprobes.h</span>
<span class="p_header">+++ b/include/linux/kprobes.h</span>
<span class="p_chunk">@@ -42,8 +42,12 @@</span> <span class="p_context"></span>
 #include &lt;linux/ftrace.h&gt;
 
 #ifdef CONFIG_KPROBES
<span class="p_add">+#include &lt;linux/tables.h&gt;</span>
 #include &lt;asm/kprobes.h&gt;
 
<span class="p_add">+DECLARE_LINKTABLE_TEXT(char, kprobes);</span>
<span class="p_add">+DECLARE_LINKTABLE_INIT_DATA(unsigned long, _kprobe_blacklist);</span>
<span class="p_add">+</span>
 /* kprobe_status settings */
 #define KPROBE_HIT_ACTIVE	0x00000001
 #define KPROBE_HIT_SS		0x00000002
<span class="p_chunk">@@ -487,8 +491,7 @@</span> <span class="p_context"> static inline int enable_jprobe(struct jprobe *jp)</span>
  * by using this macro.
  */
 #define __NOKPROBE_SYMBOL(fname)			\
<span class="p_del">-static unsigned long __used				\</span>
<span class="p_del">-	__attribute__((section(&quot;_kprobe_blacklist&quot;)))	\</span>
<span class="p_add">+static LINKTABLE_INIT_DATA(_kprobe_blacklist, all)		\</span>
 	_kbl_addr_##fname = (unsigned long)fname;
 #define NOKPROBE_SYMBOL(fname)	__NOKPROBE_SYMBOL(fname)
 #else
<span class="p_header">diff --git a/kernel/kprobes.c b/kernel/kprobes.c</span>
<span class="p_header">index d10ab6b9b5e0..d816c659f358 100644</span>
<span class="p_header">--- a/kernel/kprobes.c</span>
<span class="p_header">+++ b/kernel/kprobes.c</span>
<span class="p_chunk">@@ -1328,8 +1328,7 @@</span> <span class="p_context"> out:</span>
 bool __weak arch_within_kprobe_blacklist(unsigned long addr)
 {
 	/* The __kprobes marked functions and entry code must not be probed */
<span class="p_del">-	return addr &gt;= (unsigned long)__kprobes_text_start &amp;&amp;</span>
<span class="p_del">-	       addr &lt; (unsigned long)__kprobes_text_end;</span>
<span class="p_add">+	return LINKTABLE_ADDR_WITHIN(kprobes, addr);</span>
 }
 
 bool within_kprobe_blacklist(unsigned long addr)
<span class="p_chunk">@@ -2054,14 +2053,13 @@</span> <span class="p_context"> NOKPROBE_SYMBOL(dump_kprobe);</span>
  * since a kprobe need not necessarily be at the beginning
  * of a function.
  */
<span class="p_del">-static int __init populate_kprobe_blacklist(unsigned long *start,</span>
<span class="p_del">-					     unsigned long *end)</span>
<span class="p_add">+static int __init populate_kprobe_blacklist(void)</span>
 {
 	unsigned long *iter;
 	struct kprobe_blacklist_entry *ent;
 	unsigned long entry, offset = 0, size = 0;
 
<span class="p_del">-	for (iter = start; iter &lt; end; iter++) {</span>
<span class="p_add">+	LINKTABLE_FOR_EACH(iter, _kprobe_blacklist) {</span>
 		entry = arch_deref_entry_point((void *)*iter);
 
 		if (!kernel_text_address(entry) ||
<span class="p_chunk">@@ -2126,8 +2124,9 @@</span> <span class="p_context"> static struct notifier_block kprobe_module_nb = {</span>
 };
 
 /* Markers of _kprobe_blacklist section */
<span class="p_del">-extern unsigned long __start_kprobe_blacklist[];</span>
<span class="p_del">-extern unsigned long __stop_kprobe_blacklist[];</span>
<span class="p_add">+DEFINE_LINKTABLE_INIT_DATA(unsigned long, _kprobe_blacklist);</span>
<span class="p_add">+/* Actual kprobes linker table */</span>
<span class="p_add">+DEFINE_LINKTABLE_TEXT(char, kprobes);</span>
 
 static int __init init_kprobes(void)
 {
<span class="p_chunk">@@ -2141,8 +2140,7 @@</span> <span class="p_context"> static int __init init_kprobes(void)</span>
 		raw_spin_lock_init(&amp;(kretprobe_table_locks[i].lock));
 	}
 
<span class="p_del">-	err = populate_kprobe_blacklist(__start_kprobe_blacklist,</span>
<span class="p_del">-					__stop_kprobe_blacklist);</span>
<span class="p_add">+	err = populate_kprobe_blacklist();</span>
 	if (err) {
 		pr_err(&quot;kprobes: failed to populate blacklist: %d\n&quot;, err);
 		pr_err(&quot;Please take care of using kprobes.\n&quot;);
<span class="p_header">diff --git a/scripts/mod/modpost.c b/scripts/mod/modpost.c</span>
<span class="p_header">index 48958d3cec9e..b0a8f519efb8 100644</span>
<span class="p_header">--- a/scripts/mod/modpost.c</span>
<span class="p_header">+++ b/scripts/mod/modpost.c</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"></span>
 #include &quot;../../include/generated/autoconf.h&quot;
 #include &quot;../../include/linux/license.h&quot;
 #include &quot;../../include/linux/export.h&quot;
<span class="p_add">+#include &quot;../../include/linux/sections.h&quot;</span>
 
 /* Are we using CONFIG_MODVERSIONS? */
 static int modversions = 0;
<span class="p_chunk">@@ -888,7 +889,7 @@</span> <span class="p_context"> static void check_section(const char *modname, struct elf_info *elf,</span>
 
 #define DATA_SECTIONS &quot;.data&quot;, &quot;.data.rel&quot;
 #define TEXT_SECTIONS &quot;.text&quot;, &quot;.text.unlikely&quot;, &quot;.sched.text&quot;, \
<span class="p_del">-		&quot;.kprobes.text&quot;</span>
<span class="p_add">+		SECTION_TBL(SECTION_TEXT, kprobes, all)</span>
 #define OTHER_TEXT_SECTIONS &quot;.ref.text&quot;, &quot;.head.text&quot;, &quot;.spinlock.text&quot;, \
 		&quot;.fixup&quot;, &quot;.entry.text&quot;, &quot;.exception.text&quot;, &quot;.text.*&quot;, \
 		&quot;.coldtext&quot;
<span class="p_header">diff --git a/scripts/recordmcount.c b/scripts/recordmcount.c</span>
<span class="p_header">index e167592793a7..f37dac17f033 100644</span>
<span class="p_header">--- a/scripts/recordmcount.c</span>
<span class="p_header">+++ b/scripts/recordmcount.c</span>
<span class="p_chunk">@@ -32,6 +32,7 @@</span> <span class="p_context"></span>
 #include &lt;stdlib.h&gt;
 #include &lt;string.h&gt;
 #include &lt;unistd.h&gt;
<span class="p_add">+#include &quot;../../include/linux/sections.h&quot;</span>
 
 #ifndef EM_METAG
 /* Remove this when these make it to the standard system elf.h. */
<span class="p_chunk">@@ -356,7 +357,7 @@</span> <span class="p_context"> is_mcounted_section_name(char const *const txtname)</span>
 		strcmp(&quot;.sched.text&quot;,    txtname) == 0 ||
 		strcmp(&quot;.spinlock.text&quot;, txtname) == 0 ||
 		strcmp(&quot;.irqentry.text&quot;, txtname) == 0 ||
<span class="p_del">-		strcmp(&quot;.kprobes.text&quot;, txtname) == 0 ||</span>
<span class="p_add">+		strcmp(SECTION_TBL(SECTION_TEXT, kprobe, all), txtname) == 0 ||</span>
 		strcmp(&quot;.text.unlikely&quot;, txtname) == 0;
 }
 
<span class="p_header">diff --git a/scripts/recordmcount.pl b/scripts/recordmcount.pl</span>
<span class="p_header">index 96e2486a6fc4..63e13009dda9 100755</span>
<span class="p_header">--- a/scripts/recordmcount.pl</span>
<span class="p_header">+++ b/scripts/recordmcount.pl</span>
<span class="p_chunk">@@ -134,7 +134,7 @@</span> <span class="p_context"> my %text_sections = (</span>
      &quot;.sched.text&quot; =&gt; 1,
      &quot;.spinlock.text&quot; =&gt; 1,
      &quot;.irqentry.text&quot; =&gt; 1,
<span class="p_del">-     &quot;.kprobes.text&quot; =&gt; 1,</span>
<span class="p_add">+     &quot;.text.tbl.kprobes.all&quot; =&gt; 1,</span>
      &quot;.text.unlikely&quot; =&gt; 1,
 );
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



