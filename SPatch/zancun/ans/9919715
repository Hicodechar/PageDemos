
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/3] KVM: x86: simplify handling of PKRU - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/3] KVM: x86: simplify handling of PKRU</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 24, 2017, 10:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1503569573-55057-3-git-send-email-pbonzini@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9919715/mbox/"
   >mbox</a>
|
   <a href="/patch/9919715/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9919715/">/patch/9919715/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	97D4E60327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 10:13:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 89D2D28BD2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 10:13:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7EBC628BD7; Thu, 24 Aug 2017 10:13:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.3 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI, RCVD_IN_SORBS_SPAM,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A0C3E28BD2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 24 Aug 2017 10:13:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752314AbdHXKNG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 24 Aug 2017 06:13:06 -0400
Received: from mail-wr0-f193.google.com ([209.85.128.193]:36156 &quot;EHLO
	mail-wr0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751342AbdHXKNC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 24 Aug 2017 06:13:02 -0400
Received: by mail-wr0-f193.google.com with SMTP id u17so1299074wrf.3;
	Thu, 24 Aug 2017 03:13:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=edpGBjb31urxWucTHtcC3RuTTkZisVxkGeOBQWf/ZkU=;
	b=O+ceS4lWXTFrWB4Dz/LdReaDRsylU07lguq7WVoOo0mjmW6PujWgNFv3RD0l59Wikq
	MhZqRYhoSqG5eFWJW874hNv+8W2pAFGGi3hAwnpYPcfZ71VwY+2EI8Q6OAyYFG2MOrxR
	xrJEFf5p6I+80GcblqRD5PRggPW2LALtIg3zvw3qz1OMw4cbOzatHwQxAhhTSvq+FNkD
	IjO4UHu9Ifmf40Y79pVWTuwBvHcswJDjjgCSAfjYZxbiv+5WcwE5sJ0Qdf2+dprPFKTx
	T2eeL1vz4nRA8ZMS8tX7Txuv+hVFR1vdWz6sKy/8zAFWCGn8MG3rSQwY/KlB/4AlV6Jr
	gw5g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=edpGBjb31urxWucTHtcC3RuTTkZisVxkGeOBQWf/ZkU=;
	b=pJ75BxufJgvX5LJHsvjPabKUuAGAN/V6FjlEWNsVmFETA2EJaVcn+HRWJw20XTQKEp
	K9/ZdJWN0tphL8cXA7pCB0MM8EdNg1O3vPntLewMUyCXASxniHJP0vo43p4wX3nYTjNc
	A1o1W6xzbuK06+F+jDO1TWkfJftutSfD5DHLWNoeCSUB+9a8HBvccs0O+26qpNsviaXs
	55c0VaT8ooFLZaRpUXZzvJ9B80NH4LJzX0wci9uIFpDTrx5ijCFoHN0HYOcBssgEdysN
	WccbBzgcMm3tFnYN/Z4XnfTyFonHvHNmZWjBYaGFkDprdbwUDACYrNccl2oKSZUPSXvR
	GfFw==
X-Gm-Message-State: AHYfb5h70kybo665dCDc9dRsTGuzp42owDCoBEreVoJDCtdEhEd0p5IU
	OqpD+3nA2yr1z2O8XTk=
X-Received: by 10.223.177.25 with SMTP id l25mr3148660wra.14.1503569580789; 
	Thu, 24 Aug 2017 03:13:00 -0700 (PDT)
Received: from 640k.lan (94-39-192-75.adsl-ull.clienti.tiscali.it.
	[94.39.192.75]) by smtp.gmail.com with ESMTPSA id
	f80sm3022399wmh.16.2017.08.24.03.12.59
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 24 Aug 2017 03:13:00 -0700 (PDT)
From: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: junkang.fjk@alibaba-inc.com, yang.zhang.wz@gmail.com
Subject: [PATCH 2/3] KVM: x86: simplify handling of PKRU
Date: Thu, 24 Aug 2017 12:12:52 +0200
Message-Id: &lt;1503569573-55057-3-git-send-email-pbonzini@redhat.com&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1503569573-55057-1-git-send-email-pbonzini@redhat.com&gt;
References: &lt;1503569573-55057-1-git-send-email-pbonzini@redhat.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - Aug. 24, 2017, 10:12 a.m.</div>
<pre class="content">
Move it to struct kvm_arch_vcpu, replacing guest_pkru_valid with a
simple comparison against the host value of the register.  The write of
PKRU in addition can be skipped if the guest has not enabled the feature.
Once we do this, we need not test OSPKE in the host anymore, because
guest_CR4.PKE=1 implies host_CR4.PKE=1.

The static PKU test is kept to elide the code on older CPUs.

Suggested-by: Yang Zhang &lt;zy107165@alibaba-inc.com&gt;
Fixes: 1be0e61c1f255faaeab04a390e00c8b9b9042870
<span class="signed-off-by">Signed-off-by: Paolo Bonzini &lt;pbonzini@redhat.com&gt;</span>
---
 arch/x86/include/asm/kvm_host.h |  1 +
 arch/x86/kvm/kvm_cache_regs.h   |  5 -----
 arch/x86/kvm/mmu.h              |  2 +-
 arch/x86/kvm/svm.c              |  7 -------
 arch/x86/kvm/vmx.c              | 25 ++++++++-----------------
 5 files changed, 10 insertions(+), 30 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=171221">David Hildenbrand</a> - Aug. 24, 2017, 6 p.m.</div>
<pre class="content">
On 24.08.2017 12:12, Paolo Bonzini wrote:
<span class="quote">&gt; Move it to struct kvm_arch_vcpu, replacing guest_pkru_valid with a</span>
<span class="quote">&gt; simple comparison against the host value of the register.  The write of</span>
<span class="quote">&gt; PKRU in addition can be skipped if the guest has not enabled the feature.</span>
<span class="quote">&gt; Once we do this, we need not test OSPKE in the host anymore, because</span>
<span class="quote">&gt; guest_CR4.PKE=1 implies host_CR4.PKE=1.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The static PKU test is kept to elide the code on older CPUs.</span>

From what I can tell, this looks good to me!
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">index 87ac4fba6d8e..f4d120a3e22e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -492,6 +492,7 @@</span> <span class="p_context"> struct kvm_vcpu_arch {</span>
 	unsigned long cr4;
 	unsigned long cr4_guest_owned_bits;
 	unsigned long cr8;
<span class="p_add">+	u32 pkru;</span>
 	u32 hflags;
 	u64 efer;
 	u64 apic_base;
<span class="p_header">diff --git a/arch/x86/kvm/kvm_cache_regs.h b/arch/x86/kvm/kvm_cache_regs.h</span>
<span class="p_header">index 762cdf2595f9..e1e89ee4af75 100644</span>
<span class="p_header">--- a/arch/x86/kvm/kvm_cache_regs.h</span>
<span class="p_header">+++ b/arch/x86/kvm/kvm_cache_regs.h</span>
<span class="p_chunk">@@ -84,11 +84,6 @@</span> <span class="p_context"> static inline u64 kvm_read_edx_eax(struct kvm_vcpu *vcpu)</span>
 		| ((u64)(kvm_register_read(vcpu, VCPU_REGS_RDX) &amp; -1u) &lt;&lt; 32);
 }
 
<span class="p_del">-static inline u32 kvm_read_pkru(struct kvm_vcpu *vcpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return kvm_x86_ops-&gt;get_pkru(vcpu);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void enter_guest_mode(struct kvm_vcpu *vcpu)
 {
 	vcpu-&gt;arch.hflags |= HF_GUEST_MASK;
<span class="p_header">diff --git a/arch/x86/kvm/mmu.h b/arch/x86/kvm/mmu.h</span>
<span class="p_header">index d7d248a000dd..4b9a3ae6b725 100644</span>
<span class="p_header">--- a/arch/x86/kvm/mmu.h</span>
<span class="p_header">+++ b/arch/x86/kvm/mmu.h</span>
<span class="p_chunk">@@ -185,7 +185,7 @@</span> <span class="p_context"> static inline u8 permission_fault(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,</span>
 		* index of the protection domain, so pte_pkey * 2 is
 		* is the index of the first bit for the domain.
 		*/
<span class="p_del">-		pkru_bits = (kvm_read_pkru(vcpu) &gt;&gt; (pte_pkey * 2)) &amp; 3;</span>
<span class="p_add">+		pkru_bits = (vcpu-&gt;arch.pkru &gt;&gt; (pte_pkey * 2)) &amp; 3;</span>
 
 		/* clear present bit, replace PFEC.RSVD with ACC_USER_MASK. */
 		offset = (pfec &amp; ~1) +
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index 1107626938cc..52e88bda35ea 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -1777,11 +1777,6 @@</span> <span class="p_context"> static void svm_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags)</span>
 	to_svm(vcpu)-&gt;vmcb-&gt;save.rflags = rflags;
 }
 
<span class="p_del">-static u32 svm_get_pkru(struct kvm_vcpu *vcpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void svm_cache_reg(struct kvm_vcpu *vcpu, enum kvm_reg reg)
 {
 	switch (reg) {
<span class="p_chunk">@@ -5413,8 +5408,6 @@</span> <span class="p_context"> static void svm_setup_mce(struct kvm_vcpu *vcpu)</span>
 	.get_rflags = svm_get_rflags,
 	.set_rflags = svm_set_rflags,
 
<span class="p_del">-	.get_pkru = svm_get_pkru,</span>
<span class="p_del">-</span>
 	.tlb_flush = svm_flush_tlb,
 
 	.run = svm_vcpu_run,
<span class="p_header">diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c</span>
<span class="p_header">index 9b21b1223035..c6ef2940119b 100644</span>
<span class="p_header">--- a/arch/x86/kvm/vmx.c</span>
<span class="p_header">+++ b/arch/x86/kvm/vmx.c</span>
<span class="p_chunk">@@ -636,8 +636,6 @@</span> <span class="p_context"> struct vcpu_vmx {</span>
 
 	u64 current_tsc_ratio;
 
<span class="p_del">-	bool guest_pkru_valid;</span>
<span class="p_del">-	u32 guest_pkru;</span>
 	u32 host_pkru;
 
 	/*
<span class="p_chunk">@@ -2383,11 +2381,6 @@</span> <span class="p_context"> static void vmx_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags)</span>
 		to_vmx(vcpu)-&gt;emulation_required = emulation_required(vcpu);
 }
 
<span class="p_del">-static u32 vmx_get_pkru(struct kvm_vcpu *vcpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return to_vmx(vcpu)-&gt;guest_pkru;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static u32 vmx_get_interrupt_shadow(struct kvm_vcpu *vcpu)
 {
 	u32 interruptibility = vmcs_read32(GUEST_INTERRUPTIBILITY_INFO);
<span class="p_chunk">@@ -9020,8 +9013,10 @@</span> <span class="p_context"> static void __noclone vmx_vcpu_run(struct kvm_vcpu *vcpu)</span>
 	if (vcpu-&gt;guest_debug &amp; KVM_GUESTDBG_SINGLESTEP)
 		vmx_set_interrupt_shadow(vcpu, 0);
 
<span class="p_del">-	if (vmx-&gt;guest_pkru_valid)</span>
<span class="p_del">-		__write_pkru(vmx-&gt;guest_pkru);</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PKU) &amp;&amp;</span>
<span class="p_add">+	    kvm_read_cr4_bits(vcpu, X86_CR4_PKE) &amp;&amp;</span>
<span class="p_add">+	    vcpu-&gt;arch.pkru != vmx-&gt;host_pkru)</span>
<span class="p_add">+		__write_pkru(vcpu-&gt;arch.pkru);</span>
 
 	atomic_switch_perf_msrs(vmx);
 	debugctlmsr = get_debugctlmsr();
<span class="p_chunk">@@ -9169,13 +9164,11 @@</span> <span class="p_context"> static void __noclone vmx_vcpu_run(struct kvm_vcpu *vcpu)</span>
 	 * back on host, so it is safe to read guest PKRU from current
 	 * XSAVE.
 	 */
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_OSPKE)) {</span>
<span class="p_del">-		vmx-&gt;guest_pkru = __read_pkru();</span>
<span class="p_del">-		if (vmx-&gt;guest_pkru != vmx-&gt;host_pkru) {</span>
<span class="p_del">-			vmx-&gt;guest_pkru_valid = true;</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PKU) &amp;&amp;</span>
<span class="p_add">+	    kvm_read_cr4_bits(vcpu, X86_CR4_PKE)) {</span>
<span class="p_add">+		vcpu-&gt;arch.pkru = __read_pkru();</span>
<span class="p_add">+		if (vcpu-&gt;arch.pkru != vmx-&gt;host_pkru)</span>
 			__write_pkru(vmx-&gt;host_pkru);
<span class="p_del">-		} else</span>
<span class="p_del">-			vmx-&gt;guest_pkru_valid = false;</span>
 	}
 
 	/*
<span class="p_chunk">@@ -11682,8 +11675,6 @@</span> <span class="p_context"> static void vmx_setup_mce(struct kvm_vcpu *vcpu)</span>
 	.get_rflags = vmx_get_rflags,
 	.set_rflags = vmx_set_rflags,
 
<span class="p_del">-	.get_pkru = vmx_get_pkru,</span>
<span class="p_del">-</span>
 	.tlb_flush = vmx_flush_tlb,
 
 	.run = vmx_vcpu_run,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



