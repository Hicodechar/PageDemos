
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>tile: support delivering NMIs for multicore backtrace - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    tile: support delivering NMIs for multicore backtrace</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=114591">Chris Metcalf</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 5, 2015, 5:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1430847939-8040-1-git-send-email-cmetcalf@ezchip.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6340681/mbox/"
   >mbox</a>
|
   <a href="/patch/6340681/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6340681/">/patch/6340681/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id D07D8BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 May 2015 17:45:58 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 91FE320114
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 May 2015 17:45:57 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 173EE20149
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 May 2015 17:45:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S965519AbbEERps (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 5 May 2015 13:45:48 -0400
Received: from mail-db3on0094.outbound.protection.outlook.com
	([157.55.234.94]:36032
	&quot;EHLO emea01-db3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S965493AbbEERpp (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 5 May 2015 13:45:45 -0400
Received: from HE1PR02CA0042.eurprd02.prod.outlook.com (25.162.33.52) by
	DB5PR02MB0774.eurprd02.prod.outlook.com (25.161.243.145) with
	Microsoft SMTP
	Server (TLS) id 15.1.154.19; Tue, 5 May 2015 17:45:43 +0000
Received: from DB3FFO11FD010.protection.gbl (2a01:111:f400:7e04::139) by
	HE1PR02CA0042.outlook.office365.com (2a01:111:e400:5149::52) with
	Microsoft SMTP Server (TLS) id 15.1.154.19 via Frontend Transport;
	Tue, 5 May 2015 17:45:42 +0000
Authentication-Results: spf=fail (sender IP is 12.216.194.146)
	smtp.mailfrom=ezchip.com; ezchip.com; dkim=none (message not signed)
	header.d=none;
Received-SPF: Fail (protection.outlook.com: domain of ezchip.com does not
	designate 12.216.194.146 as permitted sender)
	receiver=protection.outlook.com; client-ip=12.216.194.146;
	helo=ld-1.internal.tilera.com;
Received: from ld-1.internal.tilera.com (12.216.194.146) by
	DB3FFO11FD010.mail.protection.outlook.com (10.47.216.166) with
	Microsoft SMTP Server (TLS) id 15.1.160.8 via Frontend Transport;
	Tue, 5 May 2015 17:45:41 +0000
Received: (from cmetcalf@localhost)
	by ld-1.internal.tilera.com (8.14.4/8.14.4/Submit) id t45Hjeu3008079; 
	Tue, 5 May 2015 13:45:40 -0400
From: Chris Metcalf &lt;cmetcalf@ezchip.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: Chris Metcalf &lt;cmetcalf@ezchip.com&gt;
Subject: [PATCH] tile: support delivering NMIs for multicore backtrace
Date: Tue, 5 May 2015 13:45:39 -0400
Message-ID: &lt;1430847939-8040-1-git-send-email-cmetcalf@ezchip.com&gt;
X-Mailer: git-send-email 2.1.2
X-EOPAttributedMessage: 0
X-Forefront-Antispam-Report: CIP:12.216.194.146; CTRY:US; IPV:NLI; EFV:NLI;
	SFV:NSPM;
	SFS:(10009020)(6009001)(339900001)(199003)(189002)(19580395003)(92566002)(50986999)(87936001)(6806004)(85426001)(86362001)(50226001)(2351001)(46102003)(229853001)(5001960100002)(48376002)(33646002)(77156002)(107886002)(106466001)(575784001)(104016003)(42186005)(19580405001)(50466002)(110136002)(62966003)(47776003)(450100001)(36756003)(105606002)(21314002)(4001430100001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:DB5PR02MB0774;
	H:ld-1.internal.tilera.com; FPR:; SPF:Fail; MLV:sfv; A:1; MX:1;
	LANG:en; 
MIME-Version: 1.0
Content-Type: text/plain
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:DB5PR02MB0774;
X-Microsoft-Antispam-PRVS: &lt;DB5PR02MB0774BC5C3B7ED6BD9B331403AFD10@DB5PR02MB0774.eurprd02.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(601004)(5005006)(3002001); SRVR:DB5PR02MB0774; BCL:0;
	PCL:0; RULEID:; SRVR:DB5PR02MB0774; 
X-Forefront-PRVS: 0567A15835
X-OriginatorOrg: ezchip.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 05 May 2015 17:45:41.2083
	(UTC)
X-MS-Exchange-CrossTenant-Id: 0fc16e0a-3cd3-4092-8b2f-0a42cff122c3
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=0fc16e0a-3cd3-4092-8b2f-0a42cff122c3;
	Ip=[12.216.194.146]; Helo=[ld-1.internal.tilera.com]
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB5PR02MB0774
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=114591">Chris Metcalf</a> - May 5, 2015, 5:45 p.m.</div>
<pre class="content">
A new hypervisor service was added some time ago (MDE 4.2.1 or
later, or MDE 4.3 or later) that allows cores to request NMIs
to be delivered to other cores.  Use this facility to deliver
a request that causes a backtrace to be generated on each core,
and hook it into the magic SysRq functionality.
<span class="signed-off-by">
Signed-off-by: Chris Metcalf &lt;cmetcalf@ezchip.com&gt;</span>
---
 arch/tile/include/asm/irq.h       |   5 ++
 arch/tile/include/asm/traps.h     |   8 +++
 arch/tile/include/hv/hypervisor.h |  60 +++++++++++++++++++++-
 arch/tile/kernel/hvglue.S         |   3 +-
 arch/tile/kernel/hvglue_trace.c   |   4 ++
 arch/tile/kernel/intvec_64.S      |   6 +++
 arch/tile/kernel/process.c        | 102 ++++++++++++++++++++++++++++++++++++++
 arch/tile/kernel/traps.c          |  12 +++++
 8 files changed, 198 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/tile/include/asm/irq.h b/arch/tile/include/asm/irq.h</span>
<span class="p_header">index 1fe86911838b..84a924034bdb 100644</span>
<span class="p_header">--- a/arch/tile/include/asm/irq.h</span>
<span class="p_header">+++ b/arch/tile/include/asm/irq.h</span>
<span class="p_chunk">@@ -78,4 +78,9 @@</span> <span class="p_context"> void tile_irq_activate(unsigned int irq, int tile_irq_type);</span>
 
 void setup_irq_regs(void);
 
<span class="p_add">+#ifdef __tilegx__</span>
<span class="p_add">+void arch_trigger_all_cpu_backtrace(bool self);</span>
<span class="p_add">+#define arch_trigger_all_cpu_backtrace arch_trigger_all_cpu_backtrace</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif /* _ASM_TILE_IRQ_H */
<span class="p_header">diff --git a/arch/tile/include/asm/traps.h b/arch/tile/include/asm/traps.h</span>
<span class="p_header">index 4b99a1c3aab2..11c82270c1f5 100644</span>
<span class="p_header">--- a/arch/tile/include/asm/traps.h</span>
<span class="p_header">+++ b/arch/tile/include/asm/traps.h</span>
<span class="p_chunk">@@ -52,6 +52,14 @@</span> <span class="p_context"> void do_timer_interrupt(struct pt_regs *, int fault_num);</span>
 /* kernel/messaging.c */
 void hv_message_intr(struct pt_regs *, int intnum);
 
<span class="p_add">+#define	TILE_NMI_DUMP_STACK	1	/* Dump stack for sysrq+&#39;l&#39; */</span>
<span class="p_add">+</span>
<span class="p_add">+/* kernel/process.c */</span>
<span class="p_add">+void do_nmi_dump_stack(struct pt_regs *regs);</span>
<span class="p_add">+</span>
<span class="p_add">+/* kernel/traps.c */</span>
<span class="p_add">+void do_nmi(struct pt_regs *, int fault_num, unsigned long reason);</span>
<span class="p_add">+</span>
 /* kernel/irq.c */
 void tile_dev_intr(struct pt_regs *, int intnum);
 
<span class="p_header">diff --git a/arch/tile/include/hv/hypervisor.h b/arch/tile/include/hv/hypervisor.h</span>
<span class="p_header">index e0e6af4e783b..f10b332b3b65 100644</span>
<span class="p_header">--- a/arch/tile/include/hv/hypervisor.h</span>
<span class="p_header">+++ b/arch/tile/include/hv/hypervisor.h</span>
<span class="p_chunk">@@ -321,8 +321,11 @@</span> <span class="p_context"></span>
 /** hv_console_set_ipi */
 #define HV_DISPATCH_CONSOLE_SET_IPI               63
 
<span class="p_add">+/** hv_send_nmi */</span>
<span class="p_add">+#define HV_DISPATCH_SEND_NMI                      65</span>
<span class="p_add">+</span>
 /** One more than the largest dispatch value */
<span class="p_del">-#define _HV_DISPATCH_END                          64</span>
<span class="p_add">+#define _HV_DISPATCH_END                          66</span>
 
 
 #ifndef __ASSEMBLER__
<span class="p_chunk">@@ -1253,6 +1256,11 @@</span> <span class="p_context"> void hv_downcall_dispatch(void);</span>
 #define INT_DMATLB_ACCESS_DWNCL  INT_DMA_CPL
 /** Device interrupt downcall interrupt vector */
 #define INT_DEV_INTR_DWNCL       INT_WORLD_ACCESS
<span class="p_add">+/** NMI downcall interrupt vector */</span>
<span class="p_add">+#define INT_NMI_DWNCL            64</span>
<span class="p_add">+</span>
<span class="p_add">+#define HV_NMI_FLAG_FORCE    0x1  /**&lt; Force an NMI downcall regardless of</span>
<span class="p_add">+               the ICS bit of the client. */</span>
 
 #ifndef __ASSEMBLER__
 
<span class="p_chunk">@@ -1780,6 +1788,56 @@</span> <span class="p_context"> int hv_dev_poll(int devhdl, __hv32 events, HV_IntArg intarg);</span>
 int hv_dev_poll_cancel(int devhdl);
 
 
<span class="p_add">+/** NMI information */</span>
<span class="p_add">+typedef struct</span>
<span class="p_add">+{</span>
<span class="p_add">+  /** Result: negative error, or HV_NMI_RESULT_xxx. */</span>
<span class="p_add">+  int result;</span>
<span class="p_add">+</span>
<span class="p_add">+  /** PC from interrupted remote core (if result != HV_NMI_RESULT_FAIL_HV). */</span>
<span class="p_add">+  HV_VirtAddr pc;</span>
<span class="p_add">+</span>
<span class="p_add">+} HV_NMI_Info;</span>
<span class="p_add">+</span>
<span class="p_add">+/** NMI issued successfully. */</span>
<span class="p_add">+#define HV_NMI_RESULT_OK        0</span>
<span class="p_add">+</span>
<span class="p_add">+/** NMI not issued: remote tile running at client PL with ICS set. */</span>
<span class="p_add">+#define HV_NMI_RESULT_FAIL_ICS  1</span>
<span class="p_add">+</span>
<span class="p_add">+/** NMI not issued: remote tile waiting in hypervisor. */</span>
<span class="p_add">+#define HV_NMI_RESULT_FAIL_HV   2</span>
<span class="p_add">+</span>
<span class="p_add">+/** Force an NMI downcall regardless of the ICS bit of the client. */</span>
<span class="p_add">+#define HV_NMI_FLAG_FORCE    0x1</span>
<span class="p_add">+</span>
<span class="p_add">+/** Send an NMI interrupt request to a particular tile.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  This will cause the NMI to be issued on the remote tile regardless</span>
<span class="p_add">+ *  of the state of the client interrupt mask.  However, if the remote</span>
<span class="p_add">+ *  tile is in the hypervisor, it will not execute the NMI, and</span>
<span class="p_add">+ *  HV_NMI_RESULT_FAIL_HV will be returned.  Similarly, if the remote</span>
<span class="p_add">+ *  tile is in a client interrupt critical section at the time of the</span>
<span class="p_add">+ *  NMI, it will not execute the NMI, and HV_NMI_RESULT_FAIL_ICS will</span>
<span class="p_add">+ *  be returned.  In this second case, however, if HV_NMI_FLAG_FORCE</span>
<span class="p_add">+ *  is set in flags, then the remote tile will enter its NMI interrupt</span>
<span class="p_add">+ *  vector regardless.  Forcing the NMI vector during an interrupt</span>
<span class="p_add">+ *  critical section will mean that the client can not safely continue</span>
<span class="p_add">+ *  execution after handling the interrupt.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  @param tile Tile to which the NMI request is sent.</span>
<span class="p_add">+ *  @param info NMI information which is defined by and interpreted by the</span>
<span class="p_add">+ *         supervisor, is passed to the specified tile, and is</span>
<span class="p_add">+ *         stored in the SPR register SYSTEM_SAVE_{CLIENT_PL}_2 on the</span>
<span class="p_add">+ *         specified tile when entering the NMI handler routine.</span>
<span class="p_add">+ *         Typically, this parameter stores the NMI type, or an aligned</span>
<span class="p_add">+ *         VA plus some special bits, etc.</span>
<span class="p_add">+ *  @param flags Flags (HV_NMI_FLAG_xxx).</span>
<span class="p_add">+ *  @return Information about the requested NMI.</span>
<span class="p_add">+ */</span>
<span class="p_add">+HV_NMI_Info hv_send_nmi(HV_Coord tile, unsigned long info, __hv64 flags);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /** Scatter-gather list for preada/pwritea calls. */
 typedef struct
 #if CHIP_VA_WIDTH() &lt;= 32
<span class="p_header">diff --git a/arch/tile/kernel/hvglue.S b/arch/tile/kernel/hvglue.S</span>
<span class="p_header">index 2ab456622391..d78ee2ad610c 100644</span>
<span class="p_header">--- a/arch/tile/kernel/hvglue.S</span>
<span class="p_header">+++ b/arch/tile/kernel/hvglue.S</span>
<span class="p_chunk">@@ -71,4 +71,5 @@</span> <span class="p_context"> gensym hv_flush_all, 0x6e0, 32</span>
 gensym hv_get_ipi_pte, 0x700, 32
 gensym hv_set_pte_super_shift, 0x720, 32
 gensym hv_console_set_ipi, 0x7e0, 32
<span class="p_del">-gensym hv_glue_internals, 0x800, 30720</span>
<span class="p_add">+gensym hv_send_nmi, 0x820, 32</span>
<span class="p_add">+gensym hv_glue_internals, 0x820, 30688</span>
<span class="p_header">diff --git a/arch/tile/kernel/hvglue_trace.c b/arch/tile/kernel/hvglue_trace.c</span>
<span class="p_header">index 85c74ad29312..add0d71395c6 100644</span>
<span class="p_header">--- a/arch/tile/kernel/hvglue_trace.c</span>
<span class="p_header">+++ b/arch/tile/kernel/hvglue_trace.c</span>
<span class="p_chunk">@@ -75,6 +75,7 @@</span> <span class="p_context"></span>
 #define hv_get_ipi_pte _hv_get_ipi_pte
 #define hv_set_pte_super_shift _hv_set_pte_super_shift
 #define hv_console_set_ipi _hv_console_set_ipi
<span class="p_add">+#define hv_send_nmi _hv_send_nmi</span>
 #include &lt;hv/hypervisor.h&gt;
 #undef hv_init
 #undef hv_install_context
<span class="p_chunk">@@ -134,6 +135,7 @@</span> <span class="p_context"></span>
 #undef hv_get_ipi_pte
 #undef hv_set_pte_super_shift
 #undef hv_console_set_ipi
<span class="p_add">+#undef hv_send_nmi</span>
 
 /*
  * Provide macros based on &lt;linux/syscalls.h&gt; to provide a wrapper
<span class="p_chunk">@@ -264,3 +266,5 @@</span> <span class="p_context"> HV_WRAP9(int, hv_flush_remote, HV_PhysAddr, cache_pa,</span>
 	 HV_VirtAddr, tlb_va, unsigned long, tlb_length,
 	 unsigned long, tlb_pgsize, unsigned long*, tlb_cpumask,
 	 HV_Remote_ASID*, asids, int, asidcount)
<span class="p_add">+HV_WRAP3(HV_NMI_Info, hv_send_nmi, HV_Coord, tile, unsigned long, info,</span>
<span class="p_add">+	 __hv64, flags)</span>
<span class="p_header">diff --git a/arch/tile/kernel/intvec_64.S b/arch/tile/kernel/intvec_64.S</span>
<span class="p_header">index 5b67efcecabd..800b91d3f9dc 100644</span>
<span class="p_header">--- a/arch/tile/kernel/intvec_64.S</span>
<span class="p_header">+++ b/arch/tile/kernel/intvec_64.S</span>
<span class="p_chunk">@@ -515,6 +515,10 @@</span> <span class="p_context"> intvec_\vecname:</span>
 	.ifc \c_routine, handle_perf_interrupt
 	mfspr   r2, AUX_PERF_COUNT_STS
 	.endif
<span class="p_add">+	.ifc \c_routine, do_nmi</span>
<span class="p_add">+	mfspr   r2, SPR_SYSTEM_SAVE_K_2   /* nmi type */</span>
<span class="p_add">+	.else</span>
<span class="p_add">+	.endif</span>
 	.endif
 	.endif
 	.endif
<span class="p_chunk">@@ -1571,3 +1575,5 @@</span> <span class="p_context"> intrpt_start:</span>
 
 	/* Synthetic interrupt delivered only by the simulator */
 	int_hand     INT_BREAKPOINT, BREAKPOINT, do_breakpoint
<span class="p_add">+	/* Synthetic interrupt delivered by hv */</span>
<span class="p_add">+	int_hand     INT_NMI_DWNCL, NMI_DWNCL, do_nmi, handle_nmi</span>
<span class="p_header">diff --git a/arch/tile/kernel/process.c b/arch/tile/kernel/process.c</span>
<span class="p_header">index b403c2e3e263..cb3e66d45374 100644</span>
<span class="p_header">--- a/arch/tile/kernel/process.c</span>
<span class="p_header">+++ b/arch/tile/kernel/process.c</span>
<span class="p_chunk">@@ -27,6 +27,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/kernel.h&gt;
 #include &lt;linux/tracehook.h&gt;
 #include &lt;linux/signal.h&gt;
<span class="p_add">+#include &lt;linux/delay.h&gt;</span>
 #include &lt;linux/context_tracking.h&gt;
 #include &lt;asm/stack.h&gt;
 #include &lt;asm/switch_to.h&gt;
<span class="p_chunk">@@ -574,3 +575,104 @@</span> <span class="p_context"> void show_regs(struct pt_regs *regs)</span>
 
 	dump_stack_regs(regs);
 }
<span class="p_add">+</span>
<span class="p_add">+/* To ensure stack dump on tiles occurs one by one. */</span>
<span class="p_add">+static DEFINE_SPINLOCK(backtrace_lock);</span>
<span class="p_add">+/* To ensure no backtrace occurs before all of the stack dump are done. */</span>
<span class="p_add">+static atomic_t backtrace_cpus;</span>
<span class="p_add">+/* The cpu mask to avoid reentrance. */</span>
<span class="p_add">+static struct cpumask backtrace_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+void do_nmi_dump_stack(struct pt_regs *regs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int is_idle = is_idle_task(current) &amp;&amp; !in_interrupt();</span>
<span class="p_add">+	int cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+	nmi_enter();</span>
<span class="p_add">+	cpu = smp_processor_id();</span>
<span class="p_add">+	if (WARN_ON_ONCE(!cpumask_test_and_clear_cpu(cpu, &amp;backtrace_mask)))</span>
<span class="p_add">+		goto done;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;backtrace_lock);</span>
<span class="p_add">+	if (is_idle)</span>
<span class="p_add">+		pr_info(&quot;CPU: %d idle\n&quot;, cpu);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		show_regs(regs);</span>
<span class="p_add">+	spin_unlock(&amp;backtrace_lock);</span>
<span class="p_add">+	atomic_dec(&amp;backtrace_cpus);</span>
<span class="p_add">+done:</span>
<span class="p_add">+	nmi_exit();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef __tilegx__</span>
<span class="p_add">+void arch_trigger_all_cpu_backtrace(bool self)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct cpumask mask;</span>
<span class="p_add">+	HV_Coord tile;</span>
<span class="p_add">+	unsigned int timeout;</span>
<span class="p_add">+	int cpu;</span>
<span class="p_add">+	int ongoing;</span>
<span class="p_add">+	HV_NMI_Info info[NR_CPUS];</span>
<span class="p_add">+</span>
<span class="p_add">+	ongoing = atomic_cmpxchg(&amp;backtrace_cpus, 0, num_online_cpus() - 1);</span>
<span class="p_add">+	if (ongoing != 0) {</span>
<span class="p_add">+		pr_err(&quot;Trying to do all-cpu backtrace.\n&quot;);</span>
<span class="p_add">+		pr_err(&quot;But another all-cpu backtrace is ongoing (%d cpus left)\n&quot;,</span>
<span class="p_add">+		       ongoing);</span>
<span class="p_add">+		if (self) {</span>
<span class="p_add">+			pr_err(&quot;Reporting the stack on this cpu only.\n&quot;);</span>
<span class="p_add">+			dump_stack();</span>
<span class="p_add">+		}</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	cpumask_copy(&amp;mask, cpu_online_mask);</span>
<span class="p_add">+	cpumask_clear_cpu(smp_processor_id(), &amp;mask);</span>
<span class="p_add">+	cpumask_copy(&amp;backtrace_mask, &amp;mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Backtrace for myself first. */</span>
<span class="p_add">+	if (self)</span>
<span class="p_add">+		dump_stack();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Tentatively dump stack on remote tiles via NMI. */</span>
<span class="p_add">+	timeout = 100;</span>
<span class="p_add">+	while (!cpumask_empty(&amp;mask) &amp;&amp; timeout) {</span>
<span class="p_add">+		for_each_cpu(cpu, &amp;mask) {</span>
<span class="p_add">+			tile.x = cpu_x(cpu);</span>
<span class="p_add">+			tile.y = cpu_y(cpu);</span>
<span class="p_add">+			info[cpu] = hv_send_nmi(tile, TILE_NMI_DUMP_STACK, 0);</span>
<span class="p_add">+			if (info[cpu].result == HV_NMI_RESULT_OK)</span>
<span class="p_add">+				cpumask_clear_cpu(cpu, &amp;mask);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		mdelay(10);</span>
<span class="p_add">+		timeout--;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Warn about cpus stuck in ICS and decrement their counts here. */</span>
<span class="p_add">+	if (!cpumask_empty(&amp;mask)) {</span>
<span class="p_add">+		for_each_cpu(cpu, &amp;mask) {</span>
<span class="p_add">+			switch (info[cpu].result) {</span>
<span class="p_add">+			case HV_NMI_RESULT_FAIL_ICS:</span>
<span class="p_add">+				pr_warn(&quot;Skipping stack dump of cpu %d in ICS at pc %#llx\n&quot;,</span>
<span class="p_add">+					cpu, info[cpu].pc);</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			case HV_NMI_RESULT_FAIL_HV:</span>
<span class="p_add">+				pr_warn(&quot;Skipping stack dump of cpu %d in hypervisor\n&quot;,</span>
<span class="p_add">+					cpu);</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			case HV_ENOSYS:</span>
<span class="p_add">+				pr_warn(&quot;Hypervisor too old to allow remote stack dumps.\n&quot;);</span>
<span class="p_add">+				goto skip_for_each;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			default:  /* should not happen */</span>
<span class="p_add">+				pr_warn(&quot;Skipping stack dump of cpu %d [%d,%#llx]\n&quot;,</span>
<span class="p_add">+					cpu, info[cpu].result, info[cpu].pc);</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+skip_for_each:</span>
<span class="p_add">+		atomic_sub(cpumask_weight(&amp;mask), &amp;backtrace_cpus);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* __tilegx_ */</span>
<span class="p_header">diff --git a/arch/tile/kernel/traps.c b/arch/tile/kernel/traps.c</span>
<span class="p_header">index 312fc134c1cb..855f7316f1ee 100644</span>
<span class="p_header">--- a/arch/tile/kernel/traps.c</span>
<span class="p_header">+++ b/arch/tile/kernel/traps.c</span>
<span class="p_chunk">@@ -395,6 +395,18 @@</span> <span class="p_context"> done:</span>
 	exception_exit(prev_state);
 }
 
<span class="p_add">+void do_nmi(struct pt_regs *regs, int fault_num, unsigned long reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	switch (reason) {</span>
<span class="p_add">+	case TILE_NMI_DUMP_STACK:</span>
<span class="p_add">+		do_nmi_dump_stack(regs);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		panic(&quot;Unexpected do_nmi type %ld&quot;, reason);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void kernel_double_fault(int dummy, ulong pc, ulong lr, ulong sp, ulong r52)
 {
 	_dump_stack(dummy, pc, lr, sp, r52);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



