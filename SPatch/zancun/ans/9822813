
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,082/101] ravb: Fix use-after-free on `ifconfig eth0 down` - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,082/101] ravb: Fix use-after-free on `ifconfig eth0 down`</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 3, 2017, 1:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170703133348.163995750@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9822813/mbox/"
   >mbox</a>
|
   <a href="/patch/9822813/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9822813/">/patch/9822813/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5FFF860237 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 13:40:02 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 50C8D284F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 13:40:02 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4404428553; Mon,  3 Jul 2017 13:40:02 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 74FBB2856A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 13:40:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932078AbdGCNjw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 3 Jul 2017 09:39:52 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:35178 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754801AbdGCNjo (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 3 Jul 2017 09:39:44 -0400
Received: from localhost (LFbn-1-12253-150.w90-92.abo.wanadoo.fr
	[90.92.67.150])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 0841E8D4;
	Mon,  3 Jul 2017 13:39:43 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Eugeniu Rosca &lt;erosca@de.adit-jv.com&gt;,
	Sergei Shtylyov &lt;sergei.shtylyov@cogentembedded.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Sasha Levin &lt;alexander.levin@verizon.com&gt;
Subject: [PATCH 4.4 082/101] ravb: Fix use-after-free on `ifconfig eth0 down`
Date: Mon,  3 Jul 2017 15:35:22 +0200
Message-Id: &lt;20170703133348.163995750@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.13.2
In-Reply-To: &lt;20170703133334.237346187@linuxfoundation.org&gt;
References: &lt;20170703133334.237346187@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - July 3, 2017, 1:35 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Eugeniu Rosca &lt;erosca@de.adit-jv.com&gt;</span>


[ Upstream commit 79514ef670e9e575a1fe36922268c439d0f0ca8a ]

Commit a47b70ea86bd (&quot;ravb: unmap descriptors when freeing rings&quot;) has
introduced the issue seen in [1] reproduced on H3ULCB board.

Fix this by relocating the RX skb ringbuffer free operation, so that
swiotlb page unmapping can be done first. Freeing of aligned TX buffers
is not relevant to the issue seen in [1]. Still, reposition TX free
calls as well, to have all kfree() operations performed consistently
_after_ dma_unmap_*()/dma_free_*().

[1] Console screenshot with the problem reproduced:

salvator-x login: root
root@salvator-x:~# ifconfig eth0 up
Micrel KSZ9031 Gigabit PHY e6800000.ethernet-ffffffff:00: \
       attached PHY driver [Micrel KSZ9031 Gigabit PHY]   \
       (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=235)
IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready
root@salvator-x:~#
root@salvator-x:~# ifconfig eth0 down
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
==================================================================
BUG: KASAN: use-after-free in swiotlb_tbl_unmap_single+0xc4/0x35c
Write of size 1538 at addr ffff8006d884f780 by task ifconfig/1649

CPU: 0 PID: 1649 Comm: ifconfig Not tainted 4.12.0-rc4-00004-g112eb07287d1 #32
Hardware name: Renesas H3ULCB board based on r8a7795 (DT)
Call trace:
[&lt;ffff20000808f11c&gt;] dump_backtrace+0x0/0x3a4
[&lt;ffff20000808f4d4&gt;] show_stack+0x14/0x1c
[&lt;ffff20000865970c&gt;] dump_stack+0xf8/0x150
[&lt;ffff20000831f8b0&gt;] print_address_description+0x7c/0x330
[&lt;ffff200008320010&gt;] kasan_report+0x2e0/0x2f4
[&lt;ffff20000831eac0&gt;] check_memory_region+0x20/0x14c
[&lt;ffff20000831f054&gt;] memcpy+0x48/0x68
[&lt;ffff20000869ed50&gt;] swiotlb_tbl_unmap_single+0xc4/0x35c
[&lt;ffff20000869fcf4&gt;] unmap_single+0x90/0xa4
[&lt;ffff20000869fd14&gt;] swiotlb_unmap_page+0xc/0x14
[&lt;ffff2000080a2974&gt;] __swiotlb_unmap_page+0xcc/0xe4
[&lt;ffff2000088acdb8&gt;] ravb_ring_free+0x514/0x870
[&lt;ffff2000088b25dc&gt;] ravb_close+0x288/0x36c
[&lt;ffff200008aaf8c4&gt;] __dev_close_many+0x14c/0x174
[&lt;ffff200008aaf9b4&gt;] __dev_close+0xc8/0x144
[&lt;ffff200008ac2100&gt;] __dev_change_flags+0xd8/0x194
[&lt;ffff200008ac221c&gt;] dev_change_flags+0x60/0xb0
[&lt;ffff200008ba2dec&gt;] devinet_ioctl+0x484/0x9d4
[&lt;ffff200008ba7b78&gt;] inet_ioctl+0x190/0x194
[&lt;ffff200008a78c44&gt;] sock_do_ioctl+0x78/0xa8
[&lt;ffff200008a7a128&gt;] sock_ioctl+0x110/0x3c4
[&lt;ffff200008365a70&gt;] vfs_ioctl+0x90/0xa0
[&lt;ffff200008365dbc&gt;] do_vfs_ioctl+0x148/0xc38
[&lt;ffff2000083668f0&gt;] SyS_ioctl+0x44/0x74
[&lt;ffff200008083770&gt;] el0_svc_naked+0x24/0x28

The buggy address belongs to the page:
page:ffff7e001b6213c0 count:0 mapcount:0 mapping:          (null) index:0x0
flags: 0x4000000000000000()
raw: 4000000000000000 0000000000000000 0000000000000000 00000000ffffffff
raw: 0000000000000000 ffff7e001b6213e0 0000000000000000 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff8006d884f680: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
 ffff8006d884f700: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
&gt;ffff8006d884f780: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                   ^
 ffff8006d884f800: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
 ffff8006d884f880: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
==================================================================
Disabling lock debugging due to kernel taint
root@salvator-x:~#

Fixes: a47b70ea86bd (&quot;ravb: unmap descriptors when freeing rings&quot;)
Signed-off-by: Eugeniu Rosca &lt;erosca@de.adit-jv.com&gt;
Acked-by: Sergei Shtylyov &lt;sergei.shtylyov@cogentembedded.com&gt;
Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
Signed-off-by: Sasha Levin &lt;alexander.levin@verizon.com&gt;
Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
<span class="p_del">---</span>
 drivers/net/ethernet/renesas/ravb_main.c |   24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

<span class="p_header">--- a/drivers/net/ethernet/renesas/ravb_main.c</span>
<span class="p_header">+++ b/drivers/net/ethernet/renesas/ravb_main.c</span>
<span class="p_chunk">@@ -221,18 +221,6 @@</span> <span class="p_context"> static void ravb_ring_free(struct net_de</span>
 	int ring_size;
 	int i;
 
<span class="p_del">-	/* Free RX skb ringbuffer */</span>
<span class="p_del">-	if (priv-&gt;rx_skb[q]) {</span>
<span class="p_del">-		for (i = 0; i &lt; priv-&gt;num_rx_ring[q]; i++)</span>
<span class="p_del">-			dev_kfree_skb(priv-&gt;rx_skb[q][i]);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	kfree(priv-&gt;rx_skb[q]);</span>
<span class="p_del">-	priv-&gt;rx_skb[q] = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Free aligned TX buffers */</span>
<span class="p_del">-	kfree(priv-&gt;tx_align[q]);</span>
<span class="p_del">-	priv-&gt;tx_align[q] = NULL;</span>
<span class="p_del">-</span>
 	if (priv-&gt;rx_ring[q]) {
 		for (i = 0; i &lt; priv-&gt;num_rx_ring[q]; i++) {
 			struct ravb_ex_rx_desc *desc = &amp;priv-&gt;rx_ring[q][i];
<span class="p_chunk">@@ -261,6 +249,18 @@</span> <span class="p_context"> static void ravb_ring_free(struct net_de</span>
 		priv-&gt;tx_ring[q] = NULL;
 	}
 
<span class="p_add">+	/* Free RX skb ringbuffer */</span>
<span class="p_add">+	if (priv-&gt;rx_skb[q]) {</span>
<span class="p_add">+		for (i = 0; i &lt; priv-&gt;num_rx_ring[q]; i++)</span>
<span class="p_add">+			dev_kfree_skb(priv-&gt;rx_skb[q][i]);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	kfree(priv-&gt;rx_skb[q]);</span>
<span class="p_add">+	priv-&gt;rx_skb[q] = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Free aligned TX buffers */</span>
<span class="p_add">+	kfree(priv-&gt;tx_align[q]);</span>
<span class="p_add">+	priv-&gt;tx_align[q] = NULL;</span>
<span class="p_add">+</span>
 	/* Free TX skb ringbuffer.
 	 * SKBs are freed by ravb_tx_free() call above.
 	 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



