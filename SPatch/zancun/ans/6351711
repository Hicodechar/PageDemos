
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,06/15] mm: use pagefault_disabled() to check for disabled pagefaults - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,06/15] mm: use pagefault_disabled() to check for disabled pagefaults</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=103951">David Hildenbrand</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 6, 2015, 5:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1430934639-2131-7-git-send-email-dahi@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6351711/mbox/"
   >mbox</a>
|
   <a href="/patch/6351711/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6351711/">/patch/6351711/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 6020F9F1C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 May 2015 17:51:30 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8453C202F2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 May 2015 17:51:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 6EBF4202EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 May 2015 17:51:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752874AbbEFRvE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 6 May 2015 13:51:04 -0400
Received: from e06smtp15.uk.ibm.com ([195.75.94.111]:57728 &quot;EHLO
	e06smtp15.uk.ibm.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752745AbbEFRux (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 6 May 2015 13:50:53 -0400
Received: from /spool/local
	by e06smtp15.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;dahi@linux.vnet.ibm.com&gt;;
	Wed, 6 May 2015 18:50:51 +0100
Received: from d06dlp01.portsmouth.uk.ibm.com (9.149.20.13)
	by e06smtp15.uk.ibm.com (192.168.101.145) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Wed, 6 May 2015 18:50:49 +0100
Received: from b06cxnps4074.portsmouth.uk.ibm.com
	(d06relay11.portsmouth.uk.ibm.com [9.149.109.196])
	by d06dlp01.portsmouth.uk.ibm.com (Postfix) with ESMTP id
	AE01D17D8042; Wed,  6 May 2015 18:51:33 +0100 (BST)
Received: from d06av05.portsmouth.uk.ibm.com (d06av05.portsmouth.uk.ibm.com
	[9.149.37.229])
	by b06cxnps4074.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id t46Homd654722710; Wed, 6 May 2015 17:50:48 GMT
Received: from d06av05.portsmouth.uk.ibm.com (localhost [127.0.0.1])
	by d06av05.portsmouth.uk.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with
	ESMTP id t46Hoj0t027634; Wed, 6 May 2015 11:50:48 -0600
Received: from tuxmaker.boeblingen.de.ibm.com
	(tuxmaker.boeblingen.de.ibm.com [9.152.85.9])
	by d06av05.portsmouth.uk.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with
	ESMTP id t46Hoe53027360; Wed, 6 May 2015 11:50:45 -0600
From: David Hildenbrand &lt;dahi@linux.vnet.ibm.com&gt;
To: linux-kernel@vger.kernel.org
Cc: dahi@linux.vnet.ibm.com, mingo@redhat.com, peterz@infradead.org,
	yang.shi@windriver.com, bigeasy@linutronix.de,
	benh@kernel.crashing.org, paulus@samba.org,
	akpm@linux-foundation.org, heiko.carstens@de.ibm.com,
	schwidefsky@de.ibm.com, borntraeger@de.ibm.com, mst@redhat.com,
	tglx@linutronix.de, David.Laight@ACULAB.COM, hughd@google.com,
	hocko@suse.cz, ralf@linux-mips.org, herbert@gondor.apana.org.au,
	linux@arm.linux.org.uk, airlied@linux.ie, daniel.vetter@intel.com,
	linux-mm@kvack.org, linux-arch@vger.kernel.org
Subject: [PATCH RFC 06/15] mm: use pagefault_disabled() to check for
	disabled pagefaults
Date: Wed,  6 May 2015 19:50:30 +0200
Message-Id: &lt;1430934639-2131-7-git-send-email-dahi@linux.vnet.ibm.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1430934639-2131-1-git-send-email-dahi@linux.vnet.ibm.com&gt;
References: &lt;1430934639-2131-1-git-send-email-dahi@linux.vnet.ibm.com&gt;
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 15050617-0021-0000-0000-000003D02E82
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=103951">David Hildenbrand</a> - May 6, 2015, 5:50 p.m.</div>
<pre class="content">
Now that the pagefault disabled counter is in place, we can replace
the in_atomic() checks by pagefault_disabled() checks.

If a fault happens while in_atomic(), it can only be a bug in the code.
Either a pagefault_disable() call is missing or the specific *in_atomic()
variants of uaccess should have been used. That&#39;s what might_fault()
checks when calling might_sleep().

pagefault_disable() is defined in linux/uaccess.h, so let&#39;s properly
add that include to all relevant files.

This patch is based on a patch from Thomas Gleixner.
<span class="signed-off-by">
Signed-off-by: David Hildenbrand &lt;dahi@linux.vnet.ibm.com&gt;</span>
---
 arch/alpha/mm/fault.c      | 5 ++---
 arch/arc/mm/fault.c        | 2 +-
 arch/arm/mm/fault.c        | 2 +-
 arch/arm64/mm/fault.c      | 2 +-
 arch/avr32/mm/fault.c      | 4 ++--
 arch/cris/mm/fault.c       | 4 ++--
 arch/frv/mm/fault.c        | 4 ++--
 arch/ia64/mm/fault.c       | 4 ++--
 arch/m32r/mm/fault.c       | 4 ++--
 arch/m68k/mm/fault.c       | 4 ++--
 arch/metag/mm/fault.c      | 2 +-
 arch/microblaze/mm/fault.c | 6 +++---
 arch/mips/mm/fault.c       | 4 ++--
 arch/mn10300/mm/fault.c    | 4 ++--
 arch/nios2/mm/fault.c      | 2 +-
 arch/parisc/kernel/traps.c | 4 ++--
 arch/parisc/mm/fault.c     | 4 ++--
 arch/powerpc/mm/fault.c    | 9 +++++----
 arch/s390/mm/fault.c       | 2 +-
 arch/score/mm/fault.c      | 3 ++-
 arch/sh/mm/fault.c         | 3 ++-
 arch/sparc/mm/fault_32.c   | 4 ++--
 arch/sparc/mm/fault_64.c   | 4 ++--
 arch/sparc/mm/init_64.c    | 2 +-
 arch/tile/mm/fault.c       | 4 ++--
 arch/um/kernel/trap.c      | 4 ++--
 arch/unicore32/mm/fault.c  | 2 +-
 arch/x86/mm/fault.c        | 5 +++--
 arch/xtensa/mm/fault.c     | 4 ++--
 29 files changed, 55 insertions(+), 52 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/alpha/mm/fault.c b/arch/alpha/mm/fault.c</span>
<span class="p_header">index 9d0ac09..f702a27 100644</span>
<span class="p_header">--- a/arch/alpha/mm/fault.c</span>
<span class="p_header">+++ b/arch/alpha/mm/fault.c</span>
<span class="p_chunk">@@ -23,8 +23,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/smp.h&gt;
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_del">-</span>
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 extern void die_if_kernel(char *,struct pt_regs *,long, unsigned long *);
 
<span class="p_chunk">@@ -107,7 +106,7 @@</span> <span class="p_context"> do_page_fault(unsigned long address, unsigned long mmcsr,</span>
 
 	/* If we&#39;re in an interrupt context, or have no user context,
 	   we must not take the fault.  */
<span class="p_del">-	if (!mm || in_atomic())</span>
<span class="p_add">+	if (!mm || pagefault_disabled())</span>
 		goto no_context;
 
 #ifdef CONFIG_ALPHA_LARGE_VMALLOC
<span class="p_header">diff --git a/arch/arc/mm/fault.c b/arch/arc/mm/fault.c</span>
<span class="p_header">index 6a2e006..2f632a0 100644</span>
<span class="p_header">--- a/arch/arc/mm/fault.c</span>
<span class="p_header">+++ b/arch/arc/mm/fault.c</span>
<span class="p_chunk">@@ -86,7 +86,7 @@</span> <span class="p_context"> void do_page_fault(unsigned long address, struct pt_regs *regs)</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c</span>
<span class="p_header">index 6333d9c..841a1b6 100644</span>
<span class="p_header">--- a/arch/arm/mm/fault.c</span>
<span class="p_header">+++ b/arch/arm/mm/fault.c</span>
<span class="p_chunk">@@ -276,7 +276,7 @@</span> <span class="p_context"> do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c</span>
<span class="p_header">index 96da131..d93c129 100644</span>
<span class="p_header">--- a/arch/arm64/mm/fault.c</span>
<span class="p_header">+++ b/arch/arm64/mm/fault.c</span>
<span class="p_chunk">@@ -211,7 +211,7 @@</span> <span class="p_context"> static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,</span>
 	 * If we&#39;re in an interrupt or have no user context, we must not take
 	 * the fault.
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/avr32/mm/fault.c b/arch/avr32/mm/fault.c</span>
<span class="p_header">index d223a8b..09f7ced 100644</span>
<span class="p_header">--- a/arch/avr32/mm/fault.c</span>
<span class="p_header">+++ b/arch/avr32/mm/fault.c</span>
<span class="p_chunk">@@ -14,11 +14,11 @@</span> <span class="p_context"></span>
 #include &lt;linux/pagemap.h&gt;
 #include &lt;linux/kdebug.h&gt;
 #include &lt;linux/kprobes.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/sysreg.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 
 #ifdef CONFIG_KPROBES
 static inline int notify_page_fault(struct pt_regs *regs, int trap)
<span class="p_chunk">@@ -81,7 +81,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(unsigned long ecr, struct pt_regs *regs)</span>
 	 * If we&#39;re in an interrupt or have no user context, we must
 	 * not take the fault...
 	 */
<span class="p_del">-	if (in_atomic() || !mm || regs-&gt;sr &amp; SYSREG_BIT(GM))</span>
<span class="p_add">+	if (pagefault_disabled() || !mm || regs-&gt;sr &amp; SYSREG_BIT(GM))</span>
 		goto no_context;
 
 	local_irq_enable();
<span class="p_header">diff --git a/arch/cris/mm/fault.c b/arch/cris/mm/fault.c</span>
<span class="p_header">index 83f12f2..41f83a7 100644</span>
<span class="p_header">--- a/arch/cris/mm/fault.c</span>
<span class="p_header">+++ b/arch/cris/mm/fault.c</span>
<span class="p_chunk">@@ -8,7 +8,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/module.h&gt;
 #include &lt;linux/wait.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 #include &lt;arch/system.h&gt;
 
 extern int find_fixup_code(struct pt_regs *);
<span class="p_chunk">@@ -113,7 +113,7 @@</span> <span class="p_context"> do_page_fault(unsigned long address, struct pt_regs *regs,</span>
 	 * user context, we must not take the fault.
 	 */
 
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/frv/mm/fault.c b/arch/frv/mm/fault.c</span>
<span class="p_header">index ec4917d..d1f67d1 100644</span>
<span class="p_header">--- a/arch/frv/mm/fault.c</span>
<span class="p_header">+++ b/arch/frv/mm/fault.c</span>
<span class="p_chunk">@@ -19,9 +19,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/kernel.h&gt;
 #include &lt;linux/ptrace.h&gt;
 #include &lt;linux/hardirq.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/pgtable.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/gdb-stub.h&gt;
 
 /*****************************************************************************/
<span class="p_chunk">@@ -78,7 +78,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(int datammu, unsigned long esr0, unsigned long ear</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(__frame))
<span class="p_header">diff --git a/arch/ia64/mm/fault.c b/arch/ia64/mm/fault.c</span>
<span class="p_header">index ba5ba7a..5a636aa 100644</span>
<span class="p_header">--- a/arch/ia64/mm/fault.c</span>
<span class="p_header">+++ b/arch/ia64/mm/fault.c</span>
<span class="p_chunk">@@ -11,10 +11,10 @@</span> <span class="p_context"></span>
 #include &lt;linux/kprobes.h&gt;
 #include &lt;linux/kdebug.h&gt;
 #include &lt;linux/prefetch.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/processor.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 
 extern int die(char *, struct pt_regs *, long);
 
<span class="p_chunk">@@ -96,7 +96,7 @@</span> <span class="p_context"> ia64_do_page_fault (unsigned long address, unsigned long isr, struct pt_regs *re</span>
 	/*
 	 * If we&#39;re in an interrupt or have no user context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 #ifdef CONFIG_VIRTUAL_MEM_MAP
<span class="p_header">diff --git a/arch/m32r/mm/fault.c b/arch/m32r/mm/fault.c</span>
<span class="p_header">index e3d4d48901..4e1892e 100644</span>
<span class="p_header">--- a/arch/m32r/mm/fault.c</span>
<span class="p_header">+++ b/arch/m32r/mm/fault.c</span>
<span class="p_chunk">@@ -24,9 +24,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/vt_kern.h&gt;		/* For unblank_screen() */
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/m32r.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/hardirq.h&gt;
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/tlbflush.h&gt;
<span class="p_chunk">@@ -114,7 +114,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(struct pt_regs *regs, unsigned long error_code,</span>
 	 * If we&#39;re in an interrupt or have no user context or are running in an
 	 * atomic region then we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto bad_area_nosemaphore;
 
 	if (error_code &amp; ACE_USERMODE)
<span class="p_header">diff --git a/arch/m68k/mm/fault.c b/arch/m68k/mm/fault.c</span>
<span class="p_header">index b2f04ae..156309b0 100644</span>
<span class="p_header">--- a/arch/m68k/mm/fault.c</span>
<span class="p_header">+++ b/arch/m68k/mm/fault.c</span>
<span class="p_chunk">@@ -10,10 +10,10 @@</span> <span class="p_context"></span>
 #include &lt;linux/ptrace.h&gt;
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/traps.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 
 extern void die_if_kernel(char *, struct pt_regs *, long);
<span class="p_chunk">@@ -81,7 +81,7 @@</span> <span class="p_context"> int do_page_fault(struct pt_regs *regs, unsigned long address,</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/metag/mm/fault.c b/arch/metag/mm/fault.c</span>
<span class="p_header">index 2de5dc6..713700d 100644</span>
<span class="p_header">--- a/arch/metag/mm/fault.c</span>
<span class="p_header">+++ b/arch/metag/mm/fault.c</span>
<span class="p_chunk">@@ -105,7 +105,7 @@</span> <span class="p_context"> int do_page_fault(struct pt_regs *regs, unsigned long address,</span>
 
 	mm = tsk-&gt;mm;
 
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/microblaze/mm/fault.c b/arch/microblaze/mm/fault.c</span>
<span class="p_header">index d46a5eb..6a75a42 100644</span>
<span class="p_header">--- a/arch/microblaze/mm/fault.c</span>
<span class="p_header">+++ b/arch/microblaze/mm/fault.c</span>
<span class="p_chunk">@@ -107,13 +107,13 @@</span> <span class="p_context"> void do_page_fault(struct pt_regs *regs, unsigned long address,</span>
 	if ((error_code &amp; 0x13) == 0x13 || (error_code &amp; 0x11) == 0x11)
 		is_write = 0;
 
<span class="p_del">-	if (unlikely(in_atomic() || !mm)) {</span>
<span class="p_add">+	if (unlikely(pagefault_disabled() || !mm)) {</span>
 		if (kernel_mode(regs))
 			goto bad_area_nosemaphore;
 
<span class="p_del">-		/* in_atomic() in user mode is really bad,</span>
<span class="p_add">+		/* pagefault_disabled() in user mode is really bad,</span>
 		   as is current-&gt;mm == NULL. */
<span class="p_del">-		pr_emerg(&quot;Page fault in user mode with in_atomic(), mm = %p\n&quot;,</span>
<span class="p_add">+		pr_emerg(&quot;Page fault in user mode with pagefault_disabled(), mm = %p\n&quot;,</span>
 									mm);
 		pr_emerg(&quot;r15 = %lx  MSR = %lx\n&quot;,
 		       regs-&gt;r15, regs-&gt;msr);
<span class="p_header">diff --git a/arch/mips/mm/fault.c b/arch/mips/mm/fault.c</span>
<span class="p_header">index 7ff8637..ccba212 100644</span>
<span class="p_header">--- a/arch/mips/mm/fault.c</span>
<span class="p_header">+++ b/arch/mips/mm/fault.c</span>
<span class="p_chunk">@@ -21,10 +21,10 @@</span> <span class="p_context"></span>
 #include &lt;linux/module.h&gt;
 #include &lt;linux/kprobes.h&gt;
 #include &lt;linux/perf_event.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/branch.h&gt;
 #include &lt;asm/mmu_context.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/ptrace.h&gt;
 #include &lt;asm/highmem.h&gt;		/* For VMALLOC_END */
 #include &lt;linux/kdebug.h&gt;
<span class="p_chunk">@@ -94,7 +94,7 @@</span> <span class="p_context"> static void __kprobes __do_page_fault(struct pt_regs *regs, unsigned long write,</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto bad_area_nosemaphore;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/mn10300/mm/fault.c b/arch/mn10300/mm/fault.c</span>
<span class="p_header">index 0c2cc5d..1d441a8 100644</span>
<span class="p_header">--- a/arch/mn10300/mm/fault.c</span>
<span class="p_header">+++ b/arch/mn10300/mm/fault.c</span>
<span class="p_chunk">@@ -23,8 +23,8 @@</span> <span class="p_context"></span>
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/init.h&gt;
 #include &lt;linux/vt_kern.h&gt;		/* For unblank_screen() */
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/hardirq.h&gt;
 #include &lt;asm/cpu-regs.h&gt;
<span class="p_chunk">@@ -168,7 +168,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(struct pt_regs *regs, unsigned long fault_code,</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if ((fault_code &amp; MMUFCR_xFC_ACCESS) == MMUFCR_xFC_ACCESS_USR)
<span class="p_header">diff --git a/arch/nios2/mm/fault.c b/arch/nios2/mm/fault.c</span>
<span class="p_header">index 0c9b6af..fdae091 100644</span>
<span class="p_header">--- a/arch/nios2/mm/fault.c</span>
<span class="p_header">+++ b/arch/nios2/mm/fault.c</span>
<span class="p_chunk">@@ -77,7 +77,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(struct pt_regs *regs, unsigned long cause,</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto bad_area_nosemaphore;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/parisc/kernel/traps.c b/arch/parisc/kernel/traps.c</span>
<span class="p_header">index 47ee620..e72483c 100644</span>
<span class="p_header">--- a/arch/parisc/kernel/traps.c</span>
<span class="p_header">+++ b/arch/parisc/kernel/traps.c</span>
<span class="p_chunk">@@ -26,9 +26,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/console.h&gt;
 #include &lt;linux/bug.h&gt;
 #include &lt;linux/ratelimit.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/assembly.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/io.h&gt;
 #include &lt;asm/irq.h&gt;
 #include &lt;asm/traps.h&gt;
<span class="p_chunk">@@ -800,7 +800,7 @@</span> <span class="p_context"> void notrace handle_interruption(int code, struct pt_regs *regs)</span>
 	     * unless pagefault_disable() was called before.
 	     */
 
<span class="p_del">-	    if (fault_space == 0 &amp;&amp; !in_atomic())</span>
<span class="p_add">+	    if (fault_space == 0 &amp;&amp; !pagefault_disabled())</span>
 	    {
 		pdc_chassis_send_status(PDC_CHASSIS_DIRECT_PANIC);
 		parisc_terminate(&quot;Kernel Fault&quot;, regs, code, fault_address);
<span class="p_header">diff --git a/arch/parisc/mm/fault.c b/arch/parisc/mm/fault.c</span>
<span class="p_header">index e5120e6..15503ad 100644</span>
<span class="p_header">--- a/arch/parisc/mm/fault.c</span>
<span class="p_header">+++ b/arch/parisc/mm/fault.c</span>
<span class="p_chunk">@@ -15,8 +15,8 @@</span> <span class="p_context"></span>
 #include &lt;linux/sched.h&gt;
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/traps.h&gt;
 
 /* Various important other fields */
<span class="p_chunk">@@ -207,7 +207,7 @@</span> <span class="p_context"> void do_page_fault(struct pt_regs *regs, unsigned long code,</span>
 	int fault;
 	unsigned int flags;
 
<span class="p_del">-	if (in_atomic())</span>
<span class="p_add">+	if (pagefault_disabled())</span>
 		goto no_context;
 
 	tsk = current;
<span class="p_header">diff --git a/arch/powerpc/mm/fault.c b/arch/powerpc/mm/fault.c</span>
<span class="p_header">index b396868..04658b5 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/fault.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/fault.c</span>
<span class="p_chunk">@@ -33,13 +33,13 @@</span> <span class="p_context"></span>
 #include &lt;linux/ratelimit.h&gt;
 #include &lt;linux/context_tracking.h&gt;
 #include &lt;linux/hugetlb.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/firmware.h&gt;
 #include &lt;asm/page.h&gt;
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/mmu.h&gt;
 #include &lt;asm/mmu_context.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/siginfo.h&gt;
 #include &lt;asm/debug.h&gt;
<span class="p_chunk">@@ -272,15 +272,16 @@</span> <span class="p_context"> int __kprobes do_page_fault(struct pt_regs *regs, unsigned long address,</span>
 	if (!arch_irq_disabled_regs(regs))
 		local_irq_enable();
 
<span class="p_del">-	if (in_atomic() || mm == NULL) {</span>
<span class="p_add">+	if (pagefault_disabled() || mm == NULL) {</span>
 		if (!user_mode(regs)) {
 			rc = SIGSEGV;
 			goto bail;
 		}
<span class="p_del">-		/* in_atomic() in user mode is really bad,</span>
<span class="p_add">+		/* pagefault_disabled() in user mode is really bad,</span>
 		   as is current-&gt;mm == NULL. */
 		printk(KERN_EMERG &quot;Page fault in user mode with &quot;
<span class="p_del">-		       &quot;in_atomic() = %d mm = %p\n&quot;, in_atomic(), mm);</span>
<span class="p_add">+		       &quot;pagefault_disabled() = %d mm = %p\n&quot;,</span>
<span class="p_add">+		       pagefault_disabled(), mm);</span>
 		printk(KERN_EMERG &quot;NIP = %lx  MSR = %lx\n&quot;,
 		       regs-&gt;nip, regs-&gt;msr);
 		die(&quot;Weird page fault&quot;, regs, SIGSEGV);
<span class="p_header">diff --git a/arch/s390/mm/fault.c b/arch/s390/mm/fault.c</span>
<span class="p_header">index 76515bc..a3dcc10 100644</span>
<span class="p_header">--- a/arch/s390/mm/fault.c</span>
<span class="p_header">+++ b/arch/s390/mm/fault.c</span>
<span class="p_chunk">@@ -399,7 +399,7 @@</span> <span class="p_context"> static inline int do_exception(struct pt_regs *regs, int access)</span>
 	 * user context.
 	 */
 	fault = VM_FAULT_BADCONTEXT;
<span class="p_del">-	if (unlikely(!user_space_fault(regs) || in_atomic() || !mm))</span>
<span class="p_add">+	if (unlikely(!user_space_fault(regs) || pagefault_disabled() || !mm))</span>
 		goto out;
 
 	address = trans_exc_code &amp; __FAIL_ADDR_MASK;
<span class="p_header">diff --git a/arch/score/mm/fault.c b/arch/score/mm/fault.c</span>
<span class="p_header">index 6860beb..37a6c2e 100644</span>
<span class="p_header">--- a/arch/score/mm/fault.c</span>
<span class="p_header">+++ b/arch/score/mm/fault.c</span>
<span class="p_chunk">@@ -34,6 +34,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/string.h&gt;
 #include &lt;linux/types.h&gt;
 #include &lt;linux/ptrace.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 /*
  * This routine handles page faults.  It determines the address,
<span class="p_chunk">@@ -73,7 +74,7 @@</span> <span class="p_context"> asmlinkage void do_page_fault(struct pt_regs *regs, unsigned long write,</span>
 	* If we&#39;re in an interrupt or have no user
 	* context, we must not take the fault..
 	*/
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto bad_area_nosemaphore;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/sh/mm/fault.c b/arch/sh/mm/fault.c</span>
<span class="p_header">index a58fec9..f7a83a9 100644</span>
<span class="p_header">--- a/arch/sh/mm/fault.c</span>
<span class="p_header">+++ b/arch/sh/mm/fault.c</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/kprobes.h&gt;
 #include &lt;linux/perf_event.h&gt;
 #include &lt;linux/kdebug.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 #include &lt;asm/io_trapped.h&gt;
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/tlbflush.h&gt;
<span class="p_chunk">@@ -440,7 +441,7 @@</span> <span class="p_context"> asmlinkage void __kprobes do_page_fault(struct pt_regs *regs,</span>
 	 * If we&#39;re in an interrupt, have no user context or are running
 	 * in an atomic region then we must not take the fault:
 	 */
<span class="p_del">-	if (unlikely(in_atomic() || !mm)) {</span>
<span class="p_add">+	if (unlikely(pagefault_disabled() || !mm)) {</span>
 		bad_area_nosemaphore(regs, error_code, address);
 		return;
 	}
<span class="p_header">diff --git a/arch/sparc/mm/fault_32.c b/arch/sparc/mm/fault_32.c</span>
<span class="p_header">index 70d8171..c399e7b 100644</span>
<span class="p_header">--- a/arch/sparc/mm/fault_32.c</span>
<span class="p_header">+++ b/arch/sparc/mm/fault_32.c</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/perf_event.h&gt;
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/kdebug.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/page.h&gt;
 #include &lt;asm/pgtable.h&gt;
<span class="p_chunk">@@ -29,7 +30,6 @@</span> <span class="p_context"></span>
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/smp.h&gt;
 #include &lt;asm/traps.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 
 #include &quot;mm_32.h&quot;
 
<span class="p_chunk">@@ -196,7 +196,7 @@</span> <span class="p_context"> asmlinkage void do_sparc_fault(struct pt_regs *regs, int text_fault, int write,</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);
<span class="p_header">diff --git a/arch/sparc/mm/fault_64.c b/arch/sparc/mm/fault_64.c</span>
<span class="p_header">index 4798232..0ff9e50 100644</span>
<span class="p_header">--- a/arch/sparc/mm/fault_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/fault_64.c</span>
<span class="p_chunk">@@ -22,12 +22,12 @@</span> <span class="p_context"></span>
 #include &lt;linux/kdebug.h&gt;
 #include &lt;linux/percpu.h&gt;
 #include &lt;linux/context_tracking.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 
 #include &lt;asm/page.h&gt;
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/openprom.h&gt;
 #include &lt;asm/oplib.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/asi.h&gt;
 #include &lt;asm/lsu.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_chunk">@@ -330,7 +330,7 @@</span> <span class="p_context"> asmlinkage void __kprobes do_sparc64_fault(struct pt_regs *regs)</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto intr_or_no_mm;
 
 	perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);
<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 4ca0d6b..795ea96 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -2706,7 +2706,7 @@</span> <span class="p_context"> void hugetlb_setup(struct pt_regs *regs)</span>
 	struct mm_struct *mm = current-&gt;mm;
 	struct tsb_config *tp;
 
<span class="p_del">-	if (in_atomic() || !mm) {</span>
<span class="p_add">+	if (pagefault_disabled() || !mm) {</span>
 		const struct exception_table_entry *entry;
 
 		entry = search_exception_tables(regs-&gt;tpc);
<span class="p_header">diff --git a/arch/tile/mm/fault.c b/arch/tile/mm/fault.c</span>
<span class="p_header">index e83cc99..3f4f58d 100644</span>
<span class="p_header">--- a/arch/tile/mm/fault.c</span>
<span class="p_header">+++ b/arch/tile/mm/fault.c</span>
<span class="p_chunk">@@ -354,9 +354,9 @@</span> <span class="p_context"> static int handle_page_fault(struct pt_regs *regs,</span>
 
 	/*
 	 * If we&#39;re in an interrupt, have no user context or are running in an
<span class="p_del">-	 * atomic region then we must not take the fault.</span>
<span class="p_add">+	 * region with pagefaults disabled then we must not take the fault.</span>
 	 */
<span class="p_del">-	if (in_atomic() || !mm) {</span>
<span class="p_add">+	if (pagefault_disabled() || !mm) {</span>
 		vma = NULL;  /* happy compiler */
 		goto bad_area_nosemaphore;
 	}
<span class="p_header">diff --git a/arch/um/kernel/trap.c b/arch/um/kernel/trap.c</span>
<span class="p_header">index 8e4daf4..7317c87 100644</span>
<span class="p_header">--- a/arch/um/kernel/trap.c</span>
<span class="p_header">+++ b/arch/um/kernel/trap.c</span>
<span class="p_chunk">@@ -35,10 +35,10 @@</span> <span class="p_context"> int handle_page_fault(unsigned long address, unsigned long ip,</span>
 	*code_out = SEGV_MAPERR;
 
 	/*
<span class="p_del">-	 * If the fault was during atomic operation, don&#39;t take the fault, just</span>
<span class="p_add">+	 * If the fault was with pagefaults disabled, don&#39;t take the fault, just</span>
 	 * fail.
 	 */
<span class="p_del">-	if (in_atomic())</span>
<span class="p_add">+	if (pagefault_disabled())</span>
 		goto out_nosemaphore;
 
 	if (is_user)
<span class="p_header">diff --git a/arch/unicore32/mm/fault.c b/arch/unicore32/mm/fault.c</span>
<span class="p_header">index 0dc922d..b3cf385 100644</span>
<span class="p_header">--- a/arch/unicore32/mm/fault.c</span>
<span class="p_header">+++ b/arch/unicore32/mm/fault.c</span>
<span class="p_chunk">@@ -218,7 +218,7 @@</span> <span class="p_context"> static int do_pf(unsigned long addr, unsigned int fsr, struct pt_regs *regs)</span>
 	 * If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm)</span>
<span class="p_add">+	if (pagefault_disabled() || !mm)</span>
 		goto no_context;
 
 	if (user_mode(regs))
<span class="p_header">diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c</span>
<span class="p_header">index 181c53b..be394b1 100644</span>
<span class="p_header">--- a/arch/x86/mm/fault.c</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c</span>
<span class="p_chunk">@@ -13,6 +13,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb.h&gt;		/* hstate_index_to_shift	*/
 #include &lt;linux/prefetch.h&gt;		/* prefetchw			*/
 #include &lt;linux/context_tracking.h&gt;	/* exception_enter(), ...	*/
<span class="p_add">+#include &lt;linux/uaccess.h&gt;		/* pagefault_disabled()		*/</span>
 
 #include &lt;asm/traps.h&gt;			/* dotraplinkage, ...		*/
 #include &lt;asm/pgalloc.h&gt;		/* pgd_*(), ...			*/
<span class="p_chunk">@@ -1126,9 +1127,9 @@</span> <span class="p_context"> __do_page_fault(struct pt_regs *regs, unsigned long error_code,</span>
 
 	/*
 	 * If we&#39;re in an interrupt, have no user context or are running
<span class="p_del">-	 * in an atomic region then we must not take the fault:</span>
<span class="p_add">+	 * in a region with pagefaults disabled then we must not take the fault</span>
 	 */
<span class="p_del">-	if (unlikely(in_atomic() || !mm)) {</span>
<span class="p_add">+	if (unlikely(pagefault_disabled() || !mm)) {</span>
 		bad_area_nosemaphore(regs, error_code, address);
 		return;
 	}
<span class="p_header">diff --git a/arch/xtensa/mm/fault.c b/arch/xtensa/mm/fault.c</span>
<span class="p_header">index 9e3571a..99ba449 100644</span>
<span class="p_header">--- a/arch/xtensa/mm/fault.c</span>
<span class="p_header">+++ b/arch/xtensa/mm/fault.c</span>
<span class="p_chunk">@@ -15,10 +15,10 @@</span> <span class="p_context"></span>
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/module.h&gt;
 #include &lt;linux/hardirq.h&gt;
<span class="p_add">+#include &lt;linux/uaccess.h&gt;</span>
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/hardirq.h&gt;
<span class="p_del">-#include &lt;asm/uaccess.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 
 DEFINE_PER_CPU(unsigned long, asid_cache) = ASID_USER_FIRST;
<span class="p_chunk">@@ -57,7 +57,7 @@</span> <span class="p_context"> void do_page_fault(struct pt_regs *regs)</span>
 	/* If we&#39;re in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
<span class="p_del">-	if (in_atomic() || !mm) {</span>
<span class="p_add">+	if (pagefault_disabled() || !mm) {</span>
 		bad_page_fault(regs, address, SIGSEGV);
 		return;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



