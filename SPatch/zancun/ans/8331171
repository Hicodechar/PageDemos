
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm/hugetlb: Fix incorrect proc nr_hugepages value - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm/hugetlb: Fix incorrect proc nr_hugepages value</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=154701">Vaishali Thakkar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 16, 2016, 7:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1455651806-25977-1-git-send-email-vaishali.thakkar@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8331171/mbox/"
   >mbox</a>
|
   <a href="/patch/8331171/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8331171/">/patch/8331171/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 8557EC02AA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Feb 2016 19:44:23 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id BFE1C202B8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Feb 2016 19:44:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 00FC0202D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Feb 2016 19:44:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751562AbcBPToT (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 16 Feb 2016 14:44:19 -0500
Received: from userp1040.oracle.com ([156.151.31.81]:37802 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750719AbcBPToR (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 16 Feb 2016 14:44:17 -0500
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id u1GJi6sN019894
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 16 Feb 2016 19:44:06 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id u1GJi5jt009123
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 16 Feb 2016 19:44:05 GMT
Received: from abhmp0003.oracle.com (abhmp0003.oracle.com [141.146.116.9])
	by userv0121.oracle.com (8.13.8/8.13.8) with ESMTP id u1GJi4hJ027917; 
	Tue, 16 Feb 2016 19:44:04 GMT
Received: from vaishali.oracle.com (/116.75.92.12)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 16 Feb 2016 11:44:03 -0800
From: Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: n-horiguchi@ah.jp.nec.com, mike.kravetz@oracle.com,
	hillf.zj@alibaba-inc.com, kirill.shutemov@linux.intel.com,
	dave.hansen@linux.intel.com, paul.gortmaker@windriver.com,
	linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;
Subject: [PATCH] mm/hugetlb: Fix incorrect proc nr_hugepages value
Date: Wed, 17 Feb 2016 01:13:26 +0530
Message-Id: &lt;1455651806-25977-1-git-send-email-vaishali.thakkar@oracle.com&gt;
X-Mailer: git-send-email 2.1.4
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=154701">Vaishali Thakkar</a> - Feb. 16, 2016, 7:43 p.m.</div>
<pre class="content">
Currently incorrect default hugepage pool size is reported by proc
nr_hugepages when number of pages for the default huge page size is
specified twice.

When multiple huge page sizes are supported, /proc/sys/vm/nr_hugepages
indicates the current number of pre-allocated huge pages of the default
size. Basically /proc/sys/vm/nr_hugepages displays default_hstate-&gt;
max_huge_pages and after boot time pre-allocation, max_huge_pages should
equal the number of pre-allocated pages (nr_hugepages).

Test case:

Note that this is specific to x86 architecture.

Boot the kernel with command line option &#39;default_hugepagesz=1G
hugepages=X hugepagesz=2M hugepages=Y hugepagesz=1G hugepages=Z&#39;. After
boot, &#39;cat /proc/sys/vm/nr_hugepages&#39; and &#39;sysctl -a | grep hugepages&#39;
returns the value X.  However, dmesg output shows that Z huge pages were
pre-allocated.

So, the root cause of the problem here is that the global variable
default_hstate_max_huge_pages is set if a default huge page size is
specified (directly or indirectly) on the command line. After the
command line processing in hugetlb_init, if default_hstate_max_huge_pages
is set, the value is assigned to default_hstae.max_huge_pages. However,
default_hstate.max_huge_pages may have already been set based on the
number of pre-allocated huge pages of default_hstate size.

The solution to this problem is if hstate-&gt;max_huge_pages is already set
then it should not set as a result of global max_huge_pages value.
Basically if the value of the variable hugepages is set multiple times
on a command line for a specific supported hugepagesize then proc layer
should consider the last specified value.
<span class="signed-off-by">
Signed-off-by: Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;</span>
---
The patch contains one line over 80 characters as I think limiting that
line to 80 characters makes code look bit ugly. But if anyone is having
issue with that then I am fine with limiting it to 80 chracters.
---
 mm/hugetlb.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Feb. 17, 2016, 3:37 a.m.</div>
<pre class="content">
On Wed, Feb 17, 2016 at 01:13:26AM +0530, Vaishali Thakkar wrote:
<span class="quote">&gt; Currently incorrect default hugepage pool size is reported by proc</span>
<span class="quote">&gt; nr_hugepages when number of pages for the default huge page size is</span>
<span class="quote">&gt; specified twice.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When multiple huge page sizes are supported, /proc/sys/vm/nr_hugepages</span>
<span class="quote">&gt; indicates the current number of pre-allocated huge pages of the default</span>
<span class="quote">&gt; size. Basically /proc/sys/vm/nr_hugepages displays default_hstate-&gt;</span>
<span class="quote">&gt; max_huge_pages and after boot time pre-allocation, max_huge_pages should</span>
<span class="quote">&gt; equal the number of pre-allocated pages (nr_hugepages).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Test case:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that this is specific to x86 architecture.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Boot the kernel with command line option &#39;default_hugepagesz=1G</span>
<span class="quote">&gt; hugepages=X hugepagesz=2M hugepages=Y hugepagesz=1G hugepages=Z&#39;. After</span>
<span class="quote">&gt; boot, &#39;cat /proc/sys/vm/nr_hugepages&#39; and &#39;sysctl -a | grep hugepages&#39;</span>
<span class="quote">&gt; returns the value X.  However, dmesg output shows that Z huge pages were</span>
<span class="quote">&gt; pre-allocated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So, the root cause of the problem here is that the global variable</span>
<span class="quote">&gt; default_hstate_max_huge_pages is set if a default huge page size is</span>
<span class="quote">&gt; specified (directly or indirectly) on the command line. After the</span>
<span class="quote">&gt; command line processing in hugetlb_init, if default_hstate_max_huge_pages</span>
<span class="quote">&gt; is set, the value is assigned to default_hstae.max_huge_pages. However,</span>
<span class="quote">&gt; default_hstate.max_huge_pages may have already been set based on the</span>
<span class="quote">&gt; number of pre-allocated huge pages of default_hstate size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The solution to this problem is if hstate-&gt;max_huge_pages is already set</span>
<span class="quote">&gt; then it should not set as a result of global max_huge_pages value.</span>
<span class="quote">&gt; Basically if the value of the variable hugepages is set multiple times</span>
<span class="quote">&gt; on a command line for a specific supported hugepagesize then proc layer</span>
<span class="quote">&gt; should consider the last specified value.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;</span>

Looks good to me.
<span class="reviewed-by">
Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt; The patch contains one line over 80 characters as I think limiting that</span>
<span class="quote">&gt; line to 80 characters makes code look bit ugly. But if anyone is having</span>
<span class="quote">&gt; issue with that then I am fine with limiting it to 80 chracters.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 6 ++++--</span>
<span class="quote">&gt;  1 file changed, 4 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 06ae13e..01f2b48 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -2630,8 +2630,10 @@ static int __init hugetlb_init(void)</span>
<span class="quote">&gt;  			hugetlb_add_hstate(HUGETLB_PAGE_ORDER);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	default_hstate_idx = hstate_index(size_to_hstate(default_hstate_size));</span>
<span class="quote">&gt; -	if (default_hstate_max_huge_pages)</span>
<span class="quote">&gt; -		default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt; +	if (default_hstate_max_huge_pages) {</span>
<span class="quote">&gt; +		if (!default_hstate.max_huge_pages)</span>
<span class="quote">&gt; +			default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	hugetlb_init_hstates();</span>
<span class="quote">&gt;  	gather_bootmem_prealloc();</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.1.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 17, 2016, 9:59 a.m.</div>
<pre class="content">
On Wed, Feb 17, 2016 at 01:13:26AM +0530, Vaishali Thakkar wrote:
<span class="quote">&gt; Currently incorrect default hugepage pool size is reported by proc</span>
<span class="quote">&gt; nr_hugepages when number of pages for the default huge page size is</span>
<span class="quote">&gt; specified twice.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When multiple huge page sizes are supported, /proc/sys/vm/nr_hugepages</span>
<span class="quote">&gt; indicates the current number of pre-allocated huge pages of the default</span>
<span class="quote">&gt; size. Basically /proc/sys/vm/nr_hugepages displays default_hstate-&gt;</span>
<span class="quote">&gt; max_huge_pages and after boot time pre-allocation, max_huge_pages should</span>
<span class="quote">&gt; equal the number of pre-allocated pages (nr_hugepages).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Test case:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that this is specific to x86 architecture.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Boot the kernel with command line option &#39;default_hugepagesz=1G</span>
<span class="quote">&gt; hugepages=X hugepagesz=2M hugepages=Y hugepagesz=1G hugepages=Z&#39;. After</span>
<span class="quote">&gt; boot, &#39;cat /proc/sys/vm/nr_hugepages&#39; and &#39;sysctl -a | grep hugepages&#39;</span>
<span class="quote">&gt; returns the value X.  However, dmesg output shows that Z huge pages were</span>
<span class="quote">&gt; pre-allocated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So, the root cause of the problem here is that the global variable</span>
<span class="quote">&gt; default_hstate_max_huge_pages is set if a default huge page size is</span>
<span class="quote">&gt; specified (directly or indirectly) on the command line. After the</span>
<span class="quote">&gt; command line processing in hugetlb_init, if default_hstate_max_huge_pages</span>
<span class="quote">&gt; is set, the value is assigned to default_hstae.max_huge_pages. However,</span>
<span class="quote">&gt; default_hstate.max_huge_pages may have already been set based on the</span>
<span class="quote">&gt; number of pre-allocated huge pages of default_hstate size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The solution to this problem is if hstate-&gt;max_huge_pages is already set</span>
<span class="quote">&gt; then it should not set as a result of global max_huge_pages value.</span>
<span class="quote">&gt; Basically if the value of the variable hugepages is set multiple times</span>
<span class="quote">&gt; on a command line for a specific supported hugepagesize then proc layer</span>
<span class="quote">&gt; should consider the last specified value.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; The patch contains one line over 80 characters as I think limiting that</span>
<span class="quote">&gt; line to 80 characters makes code look bit ugly. But if anyone is having</span>
<span class="quote">&gt; issue with that then I am fine with limiting it to 80 chracters.</span>

What about this?

	if (default_hstate_max_huge_pages &amp;&amp; !default_hstate.max_huge_pages)
		default_hstate.max_huge_pages =	default_hstate_max_huge_pages;
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 6 ++++--</span>
<span class="quote">&gt;  1 file changed, 4 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 06ae13e..01f2b48 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -2630,8 +2630,10 @@ static int __init hugetlb_init(void)</span>
<span class="quote">&gt;  			hugetlb_add_hstate(HUGETLB_PAGE_ORDER);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	default_hstate_idx = hstate_index(size_to_hstate(default_hstate_size));</span>
<span class="quote">&gt; -	if (default_hstate_max_huge_pages)</span>
<span class="quote">&gt; -		default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt; +	if (default_hstate_max_huge_pages) {</span>
<span class="quote">&gt; +		if (!default_hstate.max_huge_pages)</span>
<span class="quote">&gt; +			default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	hugetlb_init_hstates();</span>
<span class="quote">&gt;  	gather_bootmem_prealloc();</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.1.4</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=154701">Vaishali Thakkar</a> - Feb. 17, 2016, 10:30 a.m.</div>
<pre class="content">
On Wednesday 17 February 2016 03:29 PM, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Wed, Feb 17, 2016 at 01:13:26AM +0530, Vaishali Thakkar wrote:</span>
<span class="quote">&gt;&gt; Currently incorrect default hugepage pool size is reported by proc</span>
<span class="quote">&gt;&gt; nr_hugepages when number of pages for the default huge page size is</span>
<span class="quote">&gt;&gt; specified twice.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; When multiple huge page sizes are supported, /proc/sys/vm/nr_hugepages</span>
<span class="quote">&gt;&gt; indicates the current number of pre-allocated huge pages of the default</span>
<span class="quote">&gt;&gt; size. Basically /proc/sys/vm/nr_hugepages displays default_hstate-&gt;</span>
<span class="quote">&gt;&gt; max_huge_pages and after boot time pre-allocation, max_huge_pages should</span>
<span class="quote">&gt;&gt; equal the number of pre-allocated pages (nr_hugepages).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Test case:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Note that this is specific to x86 architecture.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Boot the kernel with command line option &#39;default_hugepagesz=1G</span>
<span class="quote">&gt;&gt; hugepages=X hugepagesz=2M hugepages=Y hugepagesz=1G hugepages=Z&#39;. After</span>
<span class="quote">&gt;&gt; boot, &#39;cat /proc/sys/vm/nr_hugepages&#39; and &#39;sysctl -a | grep hugepages&#39;</span>
<span class="quote">&gt;&gt; returns the value X.  However, dmesg output shows that Z huge pages were</span>
<span class="quote">&gt;&gt; pre-allocated.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; So, the root cause of the problem here is that the global variable</span>
<span class="quote">&gt;&gt; default_hstate_max_huge_pages is set if a default huge page size is</span>
<span class="quote">&gt;&gt; specified (directly or indirectly) on the command line. After the</span>
<span class="quote">&gt;&gt; command line processing in hugetlb_init, if default_hstate_max_huge_pages</span>
<span class="quote">&gt;&gt; is set, the value is assigned to default_hstae.max_huge_pages. However,</span>
<span class="quote">&gt;&gt; default_hstate.max_huge_pages may have already been set based on the</span>
<span class="quote">&gt;&gt; number of pre-allocated huge pages of default_hstate size.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The solution to this problem is if hstate-&gt;max_huge_pages is already set</span>
<span class="quote">&gt;&gt; then it should not set as a result of global max_huge_pages value.</span>
<span class="quote">&gt;&gt; Basically if the value of the variable hugepages is set multiple times</span>
<span class="quote">&gt;&gt; on a command line for a specific supported hugepagesize then proc layer</span>
<span class="quote">&gt;&gt; should consider the last specified value.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Vaishali Thakkar &lt;vaishali.thakkar@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; The patch contains one line over 80 characters as I think limiting that</span>
<span class="quote">&gt;&gt; line to 80 characters makes code look bit ugly. But if anyone is having</span>
<span class="quote">&gt;&gt; issue with that then I am fine with limiting it to 80 chracters.</span>
<span class="quote">&gt; What about this?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	if (default_hstate_max_huge_pages &amp;&amp; !default_hstate.max_huge_pages)</span>
<span class="quote">&gt; 		default_hstate.max_huge_pages =	default_hstate_max_huge_pages;</span>

Yes, it does the same thing. I thought about it. But to me somehow it looks
hard to read. So, personally I don&#39;t prefer it.

Do you want me to change this?
<span class="quote">
&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  mm/hugetlb.c | 6 ++++--</span>
<span class="quote">&gt;&gt;  1 file changed, 4 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index 06ae13e..01f2b48 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -2630,8 +2630,10 @@ static int __init hugetlb_init(void)</span>
<span class="quote">&gt;&gt;  			hugetlb_add_hstate(HUGETLB_PAGE_ORDER);</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;  	default_hstate_idx = hstate_index(size_to_hstate(default_hstate_size));</span>
<span class="quote">&gt;&gt; -	if (default_hstate_max_huge_pages)</span>
<span class="quote">&gt;&gt; -		default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt;&gt; +	if (default_hstate_max_huge_pages) {</span>
<span class="quote">&gt;&gt; +		if (!default_hstate.max_huge_pages)</span>
<span class="quote">&gt;&gt; +			default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	hugetlb_init_hstates();</span>
<span class="quote">&gt;&gt;  	gather_bootmem_prealloc();</span>
<span class="quote">&gt;&gt; -- </span>
<span class="quote">&gt;&gt; 2.1.4</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt;&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt;&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt;&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 06ae13e..01f2b48 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2630,8 +2630,10 @@</span> <span class="p_context"> static int __init hugetlb_init(void)</span>
 			hugetlb_add_hstate(HUGETLB_PAGE_ORDER);
 	}
 	default_hstate_idx = hstate_index(size_to_hstate(default_hstate_size));
<span class="p_del">-	if (default_hstate_max_huge_pages)</span>
<span class="p_del">-		default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="p_add">+	if (default_hstate_max_huge_pages) {</span>
<span class="p_add">+		if (!default_hstate.max_huge_pages)</span>
<span class="p_add">+			default_hstate.max_huge_pages = default_hstate_max_huge_pages;</span>
<span class="p_add">+	}</span>
 
 	hugetlb_init_hstates();
 	gather_bootmem_prealloc();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



