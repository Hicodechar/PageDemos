
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[12/13] x86/efi: Map EFI_MEMORY_{XP,RO} memory region bits to EFI page tables - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [12/13] x86/efi: Map EFI_MEMORY_{XP,RO} memory region bits to EFI page tables</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 17, 2016, 12:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1455712566-16727-13-git-send-email-matt@codeblueprint.co.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8338341/mbox/"
   >mbox</a>
|
   <a href="/patch/8338341/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8338341/">/patch/8338341/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 64B499F38B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Feb 2016 12:36:44 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8EF85202B8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Feb 2016 12:36:43 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A2CAC20375
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Feb 2016 12:36:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1422920AbcBQMgj (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 17 Feb 2016 07:36:39 -0500
Received: from mail-wm0-f54.google.com ([74.125.82.54]:35695 &quot;EHLO
	mail-wm0-f54.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1422846AbcBQMge (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 17 Feb 2016 07:36:34 -0500
Received: by mail-wm0-f54.google.com with SMTP id c200so211248275wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 17 Feb 2016 04:36:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=codeblueprint-co-uk.20150623.gappssmtp.com; s=20150623;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=3c9qavAO/waNJ7zDGvzxfp3imOfx+WHb6T4d87vklmw=;
	b=pW+E24oOSUsCOATwAX+tVrDK9BXe7wHz4aOfl2jVErrV174GzR3JeIwVO5AlI/84wf
	n8St7laFyFOISuqwOx7Yk5ZDLI/4ThoKDGSs1iSetiDFideJDAOxe3pG6RHih98YzAR7
	XpPVqj9+xWkVdi1SANlZ838iwAVHSm13xMF5E/7P/DFssceM2UcxSSowjWI+6ibbiGZv
	iPGlKR7hbYeChgMPt4yVXbbVaSGu4KC8z8eAq0b5J97B2jnQa7lvaQbzxTARSxrJOa6Q
	iznpx6tsP6eedErJTx94IPrx4Eu9ELhdv9cLGymN1rNNws//nt9xGrw/STRiWyv3NCGS
	6cIw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=3c9qavAO/waNJ7zDGvzxfp3imOfx+WHb6T4d87vklmw=;
	b=cd22lpgmhW4IYVG6uhgXEa6SlsUF5+drezl+PXCXUFaZarf8dtwSpJTAHs1+Rsf4h8
	HWo5ZRv/VIICQFAeUgNozrtbdLlVoihLQmpS+z0XNE0HUfEqQN/5N+BS+/SxVKLapcF9
	jaFiHFfxn2dwRFxe9P5x5pXOqZMEPYL/9j/3JfGd7d+cvBFeyECic0aerqJSdLprUPUX
	kvLTn7tRUF4yGdUA4JRY0AMB1j//CrLw3Nq/YSokXiwBc9X64xk81TtkGdT9a06wpcDU
	A9kUoRSH3fwWoUzp8GOs0QTRXnqrj2hDzvTfyy6JMmt5TFzodSh+VHBK8HvKcARnvx8m
	MJ3g==
X-Gm-Message-State: AG10YORsUD17nf9cvxamzx0ax33r58KYuvEgP7W4Vc7cz3U6amZ1kiBmhS8IqJQe0CHeOg==
X-Received: by 10.194.209.204 with SMTP id mo12mr1795120wjc.69.1455712593038;
	Wed, 17 Feb 2016 04:36:33 -0800 (PST)
Received: from localhost (5ec16434.skybroadband.com. [94.193.100.52])
	by smtp.gmail.com with ESMTPSA id
	ka7sm1340258wjb.8.2016.02.17.04.36.31
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 17 Feb 2016 04:36:32 -0800 (PST)
From: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
To: Ingo Molnar &lt;mingo@kernel.org&gt;, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Sai Praneeth &lt;sai.praneeth.prakhya@intel.com&gt;,
	linux-kernel@vger.kernel.org, linux-efi@vger.kernel.org,
	Borislav Petkov &lt;bp@alien8.de&gt;, &quot;Lee, Chun-Yi&quot; &lt;jlee@suse.com&gt;,
	Ricardo Neri &lt;ricardo.neri@intel.com&gt;,
	Ravi Shankar &lt;ravi.v.shankar@intel.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Subject: [PATCH 12/13] x86/efi: Map EFI_MEMORY_{XP,
	RO} memory region bits to EFI page tables
Date: Wed, 17 Feb 2016 12:36:05 +0000
Message-Id: &lt;1455712566-16727-13-git-send-email-matt@codeblueprint.co.uk&gt;
X-Mailer: git-send-email 2.6.2
In-Reply-To: &lt;1455712566-16727-1-git-send-email-matt@codeblueprint.co.uk&gt;
References: &lt;1455712566-16727-1-git-send-email-matt@codeblueprint.co.uk&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a> - Feb. 17, 2016, 12:36 p.m.</div>
<pre class="content">
<span class="from">From: Sai Praneeth &lt;sai.praneeth.prakhya@intel.com&gt;</span>

Now that we have EFI memory region bits that indicate which regions do
not need execute permission or read/write permission in the page tables,
let&#39;s use them.

We also check for EFI_NX_PE_DATA and only enforce the restrictive
mappings if it&#39;s present (to allow us to ignore buggy firmware that sets
bits it didn&#39;t mean to and to preserve backwards compatibility).

Instead of assuming that firmware would set appropriate attributes in
memory descriptor like EFI_MEMORY_RO for code and EFI_MEMORY_XP for
data, we can expect some firmware out there which might only set *type*
in memory descriptor to be EFI_RUNTIME_SERVICES_CODE or
EFI_RUNTIME_SERVICES_DATA leaving away attribute. This will lead to
improper mappings of EFI runtime regions. In order to avoid it, we check
attribute and type of memory descriptor to update mappings and moreover
Windows works this way.

Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: &quot;Lee, Chun-Yi&quot; &lt;jlee@suse.com&gt;
Cc: Ricardo Neri &lt;ricardo.neri@intel.com&gt;
Cc: Ravi Shankar &lt;ravi.v.shankar@intel.com&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
<span class="signed-off-by">Signed-off-by: Sai Praneeth Prakhya &lt;sai.praneeth.prakhya@intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
---
 arch/x86/include/asm/efi.h     |  2 +-
 arch/x86/platform/efi/efi.c    |  9 +++++++--
 arch/x86/platform/efi/efi_32.c |  2 +-
 arch/x86/platform/efi/efi_64.c | 45 ++++++++++++++++++++++++++++++++++++++----
 4 files changed, 50 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 8fd9e637629a..7bb206f73915 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -141,7 +141,7 @@</span> <span class="p_context"> extern int __init efi_setup_page_tables(unsigned long pa_memmap, unsigned num_pa</span>
 extern void __init efi_cleanup_page_tables(unsigned long pa_memmap, unsigned num_pages);
 extern void __init old_map_region(efi_memory_desc_t *md);
 extern void __init runtime_code_page_mkexec(void);
<span class="p_del">-extern void __init efi_runtime_mkexec(void);</span>
<span class="p_add">+extern void __init efi_runtime_update_mappings(void);</span>
 extern void __init efi_dump_pagetable(void);
 extern void __init efi_apply_memmap_quirks(void);
 extern int __init efi_reuse_config(u64 tables, int nr_tables);
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index e80826e6f3a9..994a7df84a7b 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -934,7 +934,6 @@</span> <span class="p_context"> static void __init __efi_enter_virtual_mode(void)</span>
 	}
 
 	efi_sync_low_kernel_mappings();
<span class="p_del">-	efi_dump_pagetable();</span>
 
 	if (efi_is_native()) {
 		status = phys_efi_set_virtual_address_map(
<span class="p_chunk">@@ -972,7 +971,13 @@</span> <span class="p_context"> static void __init __efi_enter_virtual_mode(void)</span>
 
 	efi.set_virtual_address_map = NULL;
 
<span class="p_del">-	efi_runtime_mkexec();</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Apply more restrictive page table mapping attributes now that</span>
<span class="p_add">+	 * SVAM() has been called and the firmware has performed all</span>
<span class="p_add">+	 * necessary relocation fixups for the new virtual addresses.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	efi_runtime_update_mappings();</span>
<span class="p_add">+	efi_dump_pagetable();</span>
 
 	/*
 	 * We mapped the descriptor array into the EFI pagetable above
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index 58d669bc8250..338402b91d2e 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -90,7 +90,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	__flush_tlb_all();
 }
 
<span class="p_del">-void __init efi_runtime_mkexec(void)</span>
<span class="p_add">+void __init efi_runtime_update_mappings(void)</span>
 {
 	if (__supported_pte_mask &amp; _PAGE_NX)
 		runtime_code_page_mkexec();
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index b0965b27e47f..40d2f447a9dd 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -393,13 +393,50 @@</span> <span class="p_context"> void __init parse_efi_setup(u64 phys_addr, u32 data_len)</span>
 	efi_setup = phys_addr + sizeof(struct setup_data);
 }
 
<span class="p_del">-void __init efi_runtime_mkexec(void)</span>
<span class="p_add">+void __init efi_runtime_update_mappings(void)</span>
 {
<span class="p_del">-	if (!efi_enabled(EFI_OLD_MEMMAP))</span>
<span class="p_add">+	unsigned long pfn;</span>
<span class="p_add">+	pgd_t *pgd = efi_pgd;</span>
<span class="p_add">+	efi_memory_desc_t *md;</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="p_add">+		if (__supported_pte_mask &amp; _PAGE_NX)</span>
<span class="p_add">+			runtime_code_page_mkexec();</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!efi_enabled(EFI_NX_PE_DATA))</span>
 		return;
 
<span class="p_del">-	if (__supported_pte_mask &amp; _PAGE_NX)</span>
<span class="p_del">-		runtime_code_page_mkexec();</span>
<span class="p_add">+	for (p = memmap.map; p &lt; memmap.map_end; p += memmap.desc_size) {</span>
<span class="p_add">+		unsigned long pf = 0;</span>
<span class="p_add">+		md = p;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_RUNTIME))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_WB))</span>
<span class="p_add">+			pf |= _PAGE_PCD;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((md-&gt;attribute &amp; EFI_MEMORY_XP) ||</span>
<span class="p_add">+			(md-&gt;type == EFI_RUNTIME_SERVICES_DATA))</span>
<span class="p_add">+			pf |= _PAGE_NX;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(md-&gt;attribute &amp; EFI_MEMORY_RO) &amp;&amp;</span>
<span class="p_add">+			(md-&gt;type != EFI_RUNTIME_SERVICES_CODE))</span>
<span class="p_add">+			pf |= _PAGE_RW;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Update the 1:1 mapping */</span>
<span class="p_add">+		pfn = md-&gt;phys_addr &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		if (kernel_map_pages_in_pgd(pgd, pfn, md-&gt;phys_addr, md-&gt;num_pages, pf))</span>
<span class="p_add">+			pr_warn(&quot;Error mapping PA 0x%llx -&gt; VA 0x%llx!\n&quot;,</span>
<span class="p_add">+				   md-&gt;phys_addr, md-&gt;virt_addr);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (kernel_map_pages_in_pgd(pgd, pfn, md-&gt;virt_addr, md-&gt;num_pages, pf))</span>
<span class="p_add">+			pr_warn(&quot;Error mapping PA 0x%llx -&gt; VA 0x%llx!\n&quot;,</span>
<span class="p_add">+				   md-&gt;phys_addr, md-&gt;virt_addr);</span>
<span class="p_add">+	}</span>
 }
 
 void __init efi_dump_pagetable(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



