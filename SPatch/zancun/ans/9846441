
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,3/3] mm: shm: Use new hugetlb size encoding definitions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,3/3] mm: shm: Use new hugetlb size encoding definitions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 17, 2017, 10:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1500330481-28476-4-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9846441/mbox/"
   >mbox</a>
|
   <a href="/patch/9846441/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9846441/">/patch/9846441/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	067F960386 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 22:30:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2D73C26224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 22:30:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 20BBF27F54; Mon, 17 Jul 2017 22:30:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 83DF926224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 22:30:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751461AbdGQW3t (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 17 Jul 2017 18:29:49 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:39034 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751341AbdGQW3r (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 17 Jul 2017 18:29:47 -0400
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v6HMSQGN025848
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 17 Jul 2017 22:28:26 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id
	v6HMSPXv029705
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Mon, 17 Jul 2017 22:28:26 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	v6HMSOBC024897; Mon, 17 Jul 2017 22:28:25 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 17 Jul 2017 15:28:24 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Matthew Wilcox &lt;willy@infradead.org&gt;, akpm@linux-foundation.org,
	mhocko@suse.com, ak@linux.intel.com, mtk.manpages@gmail.com,
	Davidlohr Bueso &lt;dbueso@suse.de&gt;, khandual@linux.vnet.ibm.com,
	aneesh.kumar@linux.vnet.ibm.com, aarcange@redhat.com,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 3/3] mm: shm: Use new hugetlb size encoding definitions
Date: Mon, 17 Jul 2017 15:28:01 -0700
Message-Id: &lt;1500330481-28476-4-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.7.5
In-Reply-To: &lt;1500330481-28476-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;20170328175408.GD7838@bombadil.infradead.org&gt;
	&lt;1500330481-28476-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 17, 2017, 10:28 p.m.</div>
<pre class="content">
Use the common definitions from hugetlb_encode.h header file for
encoding hugetlb size definitions in shmget system call flags.  In
addition, move these definitions to the from the internal to user
(uapi) header file.

Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 include/linux/shm.h      | 17 -----------------
 include/uapi/linux/shm.h | 23 +++++++++++++++++++++--
 2 files changed, 21 insertions(+), 19 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 26, 2017, 9:53 a.m.</div>
<pre class="content">
On Mon 17-07-17 15:28:01, Mike Kravetz wrote:
<span class="quote">&gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt; (uapi) header file.</span>

s@to the from@from@
<span class="quote">
&gt; </span>
<span class="quote">&gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/shm.h      | 17 -----------------</span>
<span class="quote">&gt;  include/uapi/linux/shm.h | 23 +++++++++++++++++++++--</span>
<span class="quote">&gt;  2 files changed, 21 insertions(+), 19 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/shm.h b/include/linux/shm.h</span>
<span class="quote">&gt; index 04e8818..d56285a 100644</span>
<span class="quote">&gt; --- a/include/linux/shm.h</span>
<span class="quote">&gt; +++ b/include/linux/shm.h</span>
<span class="quote">&gt; @@ -27,23 +27,6 @@ struct shmid_kernel /* private to the kernel */</span>
<span class="quote">&gt;  /* shm_mode upper byte flags */</span>
<span class="quote">&gt;  #define	SHM_DEST	01000	/* segment will be destroyed on last detach */</span>
<span class="quote">&gt;  #define SHM_LOCKED      02000   /* segment will not be swapped */</span>
<span class="quote">&gt; -#define SHM_HUGETLB     04000   /* segment will use huge TLB pages */</span>
<span class="quote">&gt; -#define SHM_NORESERVE   010000  /* don&#39;t check for reservations */</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -/* Bits [26:31] are reserved */</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -/*</span>
<span class="quote">&gt; - * When SHM_HUGETLB is set bits [26:31] encode the log2 of the huge page size.</span>
<span class="quote">&gt; - * This gives us 6 bits, which is enough until someone invents 128 bit address</span>
<span class="quote">&gt; - * spaces.</span>
<span class="quote">&gt; - *</span>
<span class="quote">&gt; - * Assume these are all power of twos.</span>
<span class="quote">&gt; - * When 0 use the default page size.</span>
<span class="quote">&gt; - */</span>
<span class="quote">&gt; -#define SHM_HUGE_SHIFT  26</span>
<span class="quote">&gt; -#define SHM_HUGE_MASK   0x3f</span>
<span class="quote">&gt; -#define SHM_HUGE_2MB    (21 &lt;&lt; SHM_HUGE_SHIFT)</span>
<span class="quote">&gt; -#define SHM_HUGE_1GB    (30 &lt;&lt; SHM_HUGE_SHIFT)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_SYSVIPC</span>
<span class="quote">&gt;  struct sysv_shm {</span>
<span class="quote">&gt; diff --git a/include/uapi/linux/shm.h b/include/uapi/linux/shm.h</span>
<span class="quote">&gt; index 1fbf24e..329bc17 100644</span>
<span class="quote">&gt; --- a/include/uapi/linux/shm.h</span>
<span class="quote">&gt; +++ b/include/uapi/linux/shm.h</span>
<span class="quote">&gt; @@ -3,6 +3,7 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;linux/ipc.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/errno.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm-generic/hugetlb_encode.h&gt;</span>
<span class="quote">&gt;  #ifndef __KERNEL__</span>
<span class="quote">&gt;  #include &lt;unistd.h&gt;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; @@ -40,11 +41,29 @@ struct shmid_ds {</span>
<span class="quote">&gt;  /* Include the definition of shmid64_ds and shminfo64 */</span>
<span class="quote">&gt;  #include &lt;asm/shmbuf.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -/* permission flag for shmget */</span>
<span class="quote">&gt; +/* shmget() shmflg values. */</span>
<span class="quote">&gt; +/* The bottom nine bits are the same as open(2) mode flags */</span>
<span class="quote">&gt;  #define SHM_R		0400	/* or S_IRUGO from &lt;linux/stat.h&gt; */</span>
<span class="quote">&gt;  #define SHM_W		0200	/* or S_IWUGO from &lt;linux/stat.h&gt; */</span>
<span class="quote">&gt; +/* Bits 9 &amp; 10 are IPC_CREAT and IPC_EXCL */</span>
<span class="quote">&gt; +#define SHM_HUGETLB	04000	/* segment will use huge TLB pages */</span>
<span class="quote">&gt; +#define	SHM_NORESERVE	010000	/* don&#39;t check for reservations */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -/* mode for attach */</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Huge page size encoding when SHM_HUGETLB is specified, and a huge page</span>
<span class="quote">&gt; + * size other than the default is desired.  See hugetlb_encode.h</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define SHM_HUGE_SHIFT	HUGETLB_FLAG_ENCODE_SHIFT</span>
<span class="quote">&gt; +#define SHM_HUGE_MASK	HUGETLB_FLAG_ENCODE_MASK</span>
<span class="quote">&gt; +#define MAP_HUGE_512KB	HUGETLB_FLAG_ENCODE_512KB</span>
<span class="quote">&gt; +#define MAP_HUGE_1MB	HUGETLB_FLAG_ENCODE_1MB</span>
<span class="quote">&gt; +#define MAP_HUGE_2MB	HUGETLB_FLAG_ENCODE_2MB</span>
<span class="quote">&gt; +#define MAP_HUGE_8MB	HUGETLB_FLAG_ENCODE_8MB</span>
<span class="quote">&gt; +#define MAP_HUGE_16MB	HUGETLB_FLAG_ENCODE_16MB</span>
<span class="quote">&gt; +#define MAP_HUGE_1GB	HUGETLB_FLAG_ENCODE_1GB</span>
<span class="quote">&gt; +#define MAP_HUGE_16GB	HUGETLB_FLAG_ENCODE__16GB</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* shmat() shmflg values */</span>
<span class="quote">&gt;  #define	SHM_RDONLY	010000	/* read-only access */</span>
<span class="quote">&gt;  #define	SHM_RND		020000	/* round attach address to SHMLBA boundary */</span>
<span class="quote">&gt;  #define	SHM_REMAP	040000	/* take-over region on attach */</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.5</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 26, 2017, 10:07 a.m.</div>
<pre class="content">
On Wed 26-07-17 11:53:38, Michal Hocko wrote:
<span class="quote">&gt; On Mon 17-07-17 15:28:01, Mike Kravetz wrote:</span>
<span class="quote">&gt; &gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt; &gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt; &gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt; &gt; (uapi) header file.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; s@to the from@from@</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Btw. man page mentions only 2MB and 1GB, we should document others and
note that each arch might support only subset of them
<span class="quote">
&gt; &gt; +#define MAP_HUGE_512KB	HUGETLB_FLAG_ENCODE_512KB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_1MB	HUGETLB_FLAG_ENCODE_1MB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_2MB	HUGETLB_FLAG_ENCODE_2MB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_8MB	HUGETLB_FLAG_ENCODE_8MB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_16MB	HUGETLB_FLAG_ENCODE_16MB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_1GB	HUGETLB_FLAG_ENCODE_1GB</span>
<span class="quote">&gt; &gt; +#define MAP_HUGE_16GB	HUGETLB_FLAG_ENCODE__16GB</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 26, 2017, 5:39 p.m.</div>
<pre class="content">
On 07/26/2017 03:07 AM, Michal Hocko wrote:
<span class="quote">&gt; On Wed 26-07-17 11:53:38, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt; On Mon 17-07-17 15:28:01, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt;&gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt;&gt;&gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt;&gt;&gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt;&gt;&gt; (uapi) header file.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; s@to the from@from@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Btw. man page mentions only 2MB and 1GB, we should document others and</span>
<span class="quote">&gt; note that each arch might support only subset of them</span>

Thanks for looking at these Michal.
BTW, those definitions below are wrong.  They should be SHM_HUGE_*. :(

In the overview of this RFC, I mentioned still needing to address the
comment from Aneesh about splitting SHM_HUGE_* definitions into arch
specific header files.  This is how it is done for mmap.  If an arch
supports multiple huge page sizes, the &#39;asm/mman.h&#39; contains definitions
for those sizes.  There will be a bit of churn (such as header file
renaming) to do this for shm as well.  So, I keep going back and forth
asking myself &#39;is it worth it&#39;?  Some things to consider.

- We should be consistent between mmap and shm.  Also remember, that I
  will propose adding the same type of encoding to memfd_create.  So,
  three system calls will use the encoding.  They should be consistent.
- Adding the arch specific definitions seems the &#39;most correct&#39;, as a
  user can not use a definition not supported by the arch.  However,
  even if an arch supports a huge page size it does not mean that the
  running kernel supports that size.  Therefore, the folllowing is in
  the man page.
  &quot;The  range  of  huge page sizes that are supported by the system
   can be discovered by listing  the  subdirectories  in
   /sys/kernel/mm/hugepages.&quot;
- Another alternative is to make all known huge page sizes available
  to all users.  This is &#39;easier&#39; as the definitions can likely reside
  in a common header file.  The user will  need to determine what
  huge page sizes are supported by the running kernel as mentioned in
  the man page.

Any thoughts/suggestions on these alternatives?  I&#39;ll send out another
patch set based on comments.  In any case, I think mmap and shm need to
be the same.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172187">willy@infradead.org</a> - July 26, 2017, 6:48 p.m.</div>
<pre class="content">
On Wed, Jul 26, 2017 at 10:39:30AM -0700, Mike Kravetz wrote:
<span class="quote">&gt; In the overview of this RFC, I mentioned still needing to address the</span>
<span class="quote">&gt; comment from Aneesh about splitting SHM_HUGE_* definitions into arch</span>
<span class="quote">&gt; specific header files.  This is how it is done for mmap.  If an arch</span>
<span class="quote">&gt; supports multiple huge page sizes, the &#39;asm/mman.h&#39; contains definitions</span>
<span class="quote">&gt; for those sizes.  There will be a bit of churn (such as header file</span>
<span class="quote">&gt; renaming) to do this for shm as well.  So, I keep going back and forth</span>
<span class="quote">&gt; asking myself &#39;is it worth it&#39;?  Some things to consider.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - We should be consistent between mmap and shm.  Also remember, that I</span>
<span class="quote">&gt;   will propose adding the same type of encoding to memfd_create.  So,</span>
<span class="quote">&gt;   three system calls will use the encoding.  They should be consistent.</span>

I think mmap is wrong here.  User programs are generally not architecture
specific, so they&#39;ll have to test with ifdefs or something awful.
For all we know, POWER 14 and whatever x86 CPU comes out in 2030 will
support (nearly) arbitrary page sizes like Itanium does, and a user
program compiled today should be able to take advantage of it.
<span class="quote">
&gt; - Adding the arch specific definitions seems the &#39;most correct&#39;, as a</span>
<span class="quote">&gt;   user can not use a definition not supported by the arch.  However,</span>
<span class="quote">&gt;   even if an arch supports a huge page size it does not mean that the</span>
<span class="quote">&gt;   running kernel supports that size.  Therefore, the folllowing is in</span>
<span class="quote">&gt;   the man page.</span>
<span class="quote">&gt;   &quot;The  range  of  huge page sizes that are supported by the system</span>
<span class="quote">&gt;    can be discovered by listing  the  subdirectories  in</span>
<span class="quote">&gt;    /sys/kernel/mm/hugepages.&quot;</span>
<span class="quote">&gt; - Another alternative is to make all known huge page sizes available</span>
<span class="quote">&gt;   to all users.  This is &#39;easier&#39; as the definitions can likely reside</span>
<span class="quote">&gt;   in a common header file.  The user will  need to determine what</span>
<span class="quote">&gt;   huge page sizes are supported by the running kernel as mentioned in</span>
<span class="quote">&gt;   the man page.</span>

That&#39;s my preference.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 27, 2017, 7:50 a.m.</div>
<pre class="content">
On Wed 26-07-17 10:39:30, Mike Kravetz wrote:
<span class="quote">&gt; On 07/26/2017 03:07 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Wed 26-07-17 11:53:38, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt;&gt; On Mon 17-07-17 15:28:01, Mike Kravetz wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt; &gt;&gt;&gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt; &gt;&gt;&gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt; &gt;&gt;&gt; (uapi) header file.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; s@to the from@from@</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Btw. man page mentions only 2MB and 1GB, we should document others and</span>
<span class="quote">&gt; &gt; note that each arch might support only subset of them</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for looking at these Michal.</span>
<span class="quote">&gt; BTW, those definitions below are wrong.  They should be SHM_HUGE_*. :(</span>

Ups, and I completely missed that.
<span class="quote">
&gt; In the overview of this RFC, I mentioned still needing to address the</span>
<span class="quote">&gt; comment from Aneesh about splitting SHM_HUGE_* definitions into arch</span>
<span class="quote">&gt; specific header files.  This is how it is done for mmap.  If an arch</span>
<span class="quote">&gt; supports multiple huge page sizes, the &#39;asm/mman.h&#39; contains definitions</span>
<span class="quote">&gt; for those sizes.  There will be a bit of churn (such as header file</span>
<span class="quote">&gt; renaming) to do this for shm as well.  So, I keep going back and forth</span>
<span class="quote">&gt; asking myself &#39;is it worth it&#39;?</span>

Why cannot we use a generic header? Btw. I think it would be better for
MMAP definitions as well.
<span class="quote">
&gt; Some things to consider.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - We should be consistent between mmap and shm.  Also remember, that I</span>
<span class="quote">&gt;   will propose adding the same type of encoding to memfd_create.  So,</span>
<span class="quote">&gt;   three system calls will use the encoding.  They should be consistent.</span>

agreed
<span class="quote">
&gt; - Adding the arch specific definitions seems the &#39;most correct&#39;, as a</span>
<span class="quote">&gt;   user can not use a definition not supported by the arch.  However,</span>
<span class="quote">&gt;   even if an arch supports a huge page size it does not mean that the</span>
<span class="quote">&gt;   running kernel supports that size.  Therefore, the folllowing is in</span>
<span class="quote">&gt;   the man page.</span>
<span class="quote">&gt;   &quot;The  range  of  huge page sizes that are supported by the system</span>
<span class="quote">&gt;    can be discovered by listing  the  subdirectories  in</span>
<span class="quote">&gt;    /sys/kernel/mm/hugepages.&quot;</span>

Doesn&#39;t the respective call return -EINVAL on the unsupported hugepage
size?
<span class="quote">
&gt; - Another alternative is to make all known huge page sizes available</span>
<span class="quote">&gt;   to all users.  This is &#39;easier&#39; as the definitions can likely reside</span>
<span class="quote">&gt;   in a common header file.  The user will  need to determine what</span>
<span class="quote">&gt;   huge page sizes are supported by the running kernel as mentioned in</span>
<span class="quote">&gt;   the man page.</span>

yes I think this makes more sense.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 27, 2017, 9:18 p.m.</div>
<pre class="content">
On 07/27/2017 12:50 AM, Michal Hocko wrote:
<span class="quote">&gt; On Wed 26-07-17 10:39:30, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; On 07/26/2017 03:07 AM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt; On Wed 26-07-17 11:53:38, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Mon 17-07-17 15:28:01, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; (uapi) header file.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; s@to the from@from@</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Btw. man page mentions only 2MB and 1GB, we should document others and</span>
<span class="quote">&gt;&gt;&gt; note that each arch might support only subset of them</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks for looking at these Michal.</span>
<span class="quote">&gt;&gt; BTW, those definitions below are wrong.  They should be SHM_HUGE_*. :(</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ups, and I completely missed that.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; In the overview of this RFC, I mentioned still needing to address the</span>
<span class="quote">&gt;&gt; comment from Aneesh about splitting SHM_HUGE_* definitions into arch</span>
<span class="quote">&gt;&gt; specific header files.  This is how it is done for mmap.  If an arch</span>
<span class="quote">&gt;&gt; supports multiple huge page sizes, the &#39;asm/mman.h&#39; contains definitions</span>
<span class="quote">&gt;&gt; for those sizes.  There will be a bit of churn (such as header file</span>
<span class="quote">&gt;&gt; renaming) to do this for shm as well.  So, I keep going back and forth</span>
<span class="quote">&gt;&gt; asking myself &#39;is it worth it&#39;?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why cannot we use a generic header? Btw. I think it would be better for</span>
<span class="quote">&gt; MMAP definitions as well.</span>

I assume you are asking about a uapi asm-generic header file?  Currently
mmap has two such files:  mman.h and mman-common.h.  In order to get the
definitions in such files, arch specific header files must #include the
asm-generic headers.  There are arch specific mmap headers today that do
not include either of the asm-generic headers.  And, they have their own
definitions for MAP_HUGE_SHIFT.  So, it seems we can not use one of the
existing mmap asm-generic header files.  Rather, we would need to create
a new one and have that included by all arch specific files.

However, ALL the MAP_HUGE_* definitions in all the arch specific and
asm-generic header files are the same.  It would be possible to just put
all those MAP_HUGE_* definitions in the primary uapi header file
(include/uapi/linux/mman.h).  If there was ever a need for arch specific
values in the future, we could split them out at that time.
<span class="quote">
&gt;&gt; Some things to consider.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; - We should be consistent between mmap and shm.  Also remember, that I</span>
<span class="quote">&gt;&gt;   will propose adding the same type of encoding to memfd_create.  So,</span>
<span class="quote">&gt;&gt;   three system calls will use the encoding.  They should be consistent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; agreed</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; - Adding the arch specific definitions seems the &#39;most correct&#39;, as a</span>
<span class="quote">&gt;&gt;   user can not use a definition not supported by the arch.  However,</span>
<span class="quote">&gt;&gt;   even if an arch supports a huge page size it does not mean that the</span>
<span class="quote">&gt;&gt;   running kernel supports that size.  Therefore, the folllowing is in</span>
<span class="quote">&gt;&gt;   the man page.</span>
<span class="quote">&gt;&gt;   &quot;The  range  of  huge page sizes that are supported by the system</span>
<span class="quote">&gt;&gt;    can be discovered by listing  the  subdirectories  in</span>
<span class="quote">&gt;&gt;    /sys/kernel/mm/hugepages.&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Doesn&#39;t the respective call return -EINVAL on the unsupported hugepage</span>
<span class="quote">&gt; size?</span>

Yes, it does.
<span class="quote">
&gt;&gt; - Another alternative is to make all known huge page sizes available</span>
<span class="quote">&gt;&gt;   to all users.  This is &#39;easier&#39; as the definitions can likely reside</span>
<span class="quote">&gt;&gt;   in a common header file.  The user will  need to determine what</span>
<span class="quote">&gt;&gt;   huge page sizes are supported by the running kernel as mentioned in</span>
<span class="quote">&gt;&gt;   the man page.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; yes I think this makes more sense.</span>

Ok, thanks.

The only remaining question is what kind of common header to use:
1) An asm-generic header file in case there may be arch specific differences
   in the future.
2) Use the primary uapi header file in include/uapi/linux/mman|shm.h.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 28, 2017, 6:30 a.m.</div>
<pre class="content">
On Thu 27-07-17 14:18:11, Mike Kravetz wrote:
<span class="quote">&gt; On 07/27/2017 12:50 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Wed 26-07-17 10:39:30, Mike Kravetz wrote:</span>
<span class="quote">&gt; &gt;&gt; On 07/26/2017 03:07 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; On Wed 26-07-17 11:53:38, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; On Mon 17-07-17 15:28:01, Mike Kravetz wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; Use the common definitions from hugetlb_encode.h header file for</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; encoding hugetlb size definitions in shmget system call flags.  In</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; addition, move these definitions to the from the internal to user</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; (uapi) header file.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; s@to the from@from@</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; Suggested-by: Matthew Wilcox &lt;willy@infradead.org&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; with s@HUGETLB_FLAG_ENCODE__16GB@HUGETLB_FLAG_ENCODE_16GB@</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Btw. man page mentions only 2MB and 1GB, we should document others and</span>
<span class="quote">&gt; &gt;&gt;&gt; note that each arch might support only subset of them</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Thanks for looking at these Michal.</span>
<span class="quote">&gt; &gt;&gt; BTW, those definitions below are wrong.  They should be SHM_HUGE_*. :(</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Ups, and I completely missed that.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; In the overview of this RFC, I mentioned still needing to address the</span>
<span class="quote">&gt; &gt;&gt; comment from Aneesh about splitting SHM_HUGE_* definitions into arch</span>
<span class="quote">&gt; &gt;&gt; specific header files.  This is how it is done for mmap.  If an arch</span>
<span class="quote">&gt; &gt;&gt; supports multiple huge page sizes, the &#39;asm/mman.h&#39; contains definitions</span>
<span class="quote">&gt; &gt;&gt; for those sizes.  There will be a bit of churn (such as header file</span>
<span class="quote">&gt; &gt;&gt; renaming) to do this for shm as well.  So, I keep going back and forth</span>
<span class="quote">&gt; &gt;&gt; asking myself &#39;is it worth it&#39;?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Why cannot we use a generic header? Btw. I think it would be better for</span>
<span class="quote">&gt; &gt; MMAP definitions as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I assume you are asking about a uapi asm-generic header file?  Currently</span>
<span class="quote">&gt; mmap has two such files:  mman.h and mman-common.h.  In order to get the</span>
<span class="quote">&gt; definitions in such files, arch specific header files must #include the</span>
<span class="quote">&gt; asm-generic headers.  There are arch specific mmap headers today that do</span>
<span class="quote">&gt; not include either of the asm-generic headers.  And, they have their own</span>
<span class="quote">&gt; definitions for MAP_HUGE_SHIFT.  So, it seems we can not use one of the</span>
<span class="quote">&gt; existing mmap asm-generic header files.  Rather, we would need to create</span>
<span class="quote">&gt; a new one and have that included by all arch specific files.</span>

yes, add a new one like you did in your first patch
<span class="quote">
&gt; However, ALL the MAP_HUGE_* definitions in all the arch specific and</span>
<span class="quote">&gt; asm-generic header files are the same.  It would be possible to just put</span>
<span class="quote">&gt; all those MAP_HUGE_* definitions in the primary uapi header file</span>
<span class="quote">&gt; (include/uapi/linux/mman.h).  If there was ever a need for arch specific</span>
<span class="quote">&gt; values in the future, we could split them out at that time.</span>

agreed

[...]
<span class="quote">
&gt; &gt;&gt; - Another alternative is to make all known huge page sizes available</span>
<span class="quote">&gt; &gt;&gt;   to all users.  This is &#39;easier&#39; as the definitions can likely reside</span>
<span class="quote">&gt; &gt;&gt;   in a common header file.  The user will  need to determine what</span>
<span class="quote">&gt; &gt;&gt;   huge page sizes are supported by the running kernel as mentioned in</span>
<span class="quote">&gt; &gt;&gt;   the man page.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; yes I think this makes more sense.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ok, thanks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The only remaining question is what kind of common header to use:</span>
<span class="quote">&gt; 1) An asm-generic header file in case there may be arch specific differences</span>
<span class="quote">&gt;    in the future.</span>
<span class="quote">&gt; 2) Use the primary uapi header file in include/uapi/linux/mman|shm.h.</span>

I would use the primary one and only got the arch specific if we ever
need to do arch specific thing.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/shm.h b/include/linux/shm.h</span>
<span class="p_header">index 04e8818..d56285a 100644</span>
<span class="p_header">--- a/include/linux/shm.h</span>
<span class="p_header">+++ b/include/linux/shm.h</span>
<span class="p_chunk">@@ -27,23 +27,6 @@</span> <span class="p_context"> struct shmid_kernel /* private to the kernel */</span>
 /* shm_mode upper byte flags */
 #define	SHM_DEST	01000	/* segment will be destroyed on last detach */
 #define SHM_LOCKED      02000   /* segment will not be swapped */
<span class="p_del">-#define SHM_HUGETLB     04000   /* segment will use huge TLB pages */</span>
<span class="p_del">-#define SHM_NORESERVE   010000  /* don&#39;t check for reservations */</span>
<span class="p_del">-</span>
<span class="p_del">-/* Bits [26:31] are reserved */</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * When SHM_HUGETLB is set bits [26:31] encode the log2 of the huge page size.</span>
<span class="p_del">- * This gives us 6 bits, which is enough until someone invents 128 bit address</span>
<span class="p_del">- * spaces.</span>
<span class="p_del">- *</span>
<span class="p_del">- * Assume these are all power of twos.</span>
<span class="p_del">- * When 0 use the default page size.</span>
<span class="p_del">- */</span>
<span class="p_del">-#define SHM_HUGE_SHIFT  26</span>
<span class="p_del">-#define SHM_HUGE_MASK   0x3f</span>
<span class="p_del">-#define SHM_HUGE_2MB    (21 &lt;&lt; SHM_HUGE_SHIFT)</span>
<span class="p_del">-#define SHM_HUGE_1GB    (30 &lt;&lt; SHM_HUGE_SHIFT)</span>
 
 #ifdef CONFIG_SYSVIPC
 struct sysv_shm {
<span class="p_header">diff --git a/include/uapi/linux/shm.h b/include/uapi/linux/shm.h</span>
<span class="p_header">index 1fbf24e..329bc17 100644</span>
<span class="p_header">--- a/include/uapi/linux/shm.h</span>
<span class="p_header">+++ b/include/uapi/linux/shm.h</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/ipc.h&gt;
 #include &lt;linux/errno.h&gt;
<span class="p_add">+#include &lt;asm-generic/hugetlb_encode.h&gt;</span>
 #ifndef __KERNEL__
 #include &lt;unistd.h&gt;
 #endif
<span class="p_chunk">@@ -40,11 +41,29 @@</span> <span class="p_context"> struct shmid_ds {</span>
 /* Include the definition of shmid64_ds and shminfo64 */
 #include &lt;asm/shmbuf.h&gt;
 
<span class="p_del">-/* permission flag for shmget */</span>
<span class="p_add">+/* shmget() shmflg values. */</span>
<span class="p_add">+/* The bottom nine bits are the same as open(2) mode flags */</span>
 #define SHM_R		0400	/* or S_IRUGO from &lt;linux/stat.h&gt; */
 #define SHM_W		0200	/* or S_IWUGO from &lt;linux/stat.h&gt; */
<span class="p_add">+/* Bits 9 &amp; 10 are IPC_CREAT and IPC_EXCL */</span>
<span class="p_add">+#define SHM_HUGETLB	04000	/* segment will use huge TLB pages */</span>
<span class="p_add">+#define	SHM_NORESERVE	010000	/* don&#39;t check for reservations */</span>
 
<span class="p_del">-/* mode for attach */</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Huge page size encoding when SHM_HUGETLB is specified, and a huge page</span>
<span class="p_add">+ * size other than the default is desired.  See hugetlb_encode.h</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define SHM_HUGE_SHIFT	HUGETLB_FLAG_ENCODE_SHIFT</span>
<span class="p_add">+#define SHM_HUGE_MASK	HUGETLB_FLAG_ENCODE_MASK</span>
<span class="p_add">+#define MAP_HUGE_512KB	HUGETLB_FLAG_ENCODE_512KB</span>
<span class="p_add">+#define MAP_HUGE_1MB	HUGETLB_FLAG_ENCODE_1MB</span>
<span class="p_add">+#define MAP_HUGE_2MB	HUGETLB_FLAG_ENCODE_2MB</span>
<span class="p_add">+#define MAP_HUGE_8MB	HUGETLB_FLAG_ENCODE_8MB</span>
<span class="p_add">+#define MAP_HUGE_16MB	HUGETLB_FLAG_ENCODE_16MB</span>
<span class="p_add">+#define MAP_HUGE_1GB	HUGETLB_FLAG_ENCODE_1GB</span>
<span class="p_add">+#define MAP_HUGE_16GB	HUGETLB_FLAG_ENCODE__16GB</span>
<span class="p_add">+</span>
<span class="p_add">+/* shmat() shmflg values */</span>
 #define	SHM_RDONLY	010000	/* read-only access */
 #define	SHM_RND		020000	/* round attach address to SHMLBA boundary */
 #define	SHM_REMAP	040000	/* take-over region on attach */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



