
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.14,063/159] ACPI / APEI: Replace ioremap_page_range() with fixmap - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.14,063/159] ACPI / APEI: Replace ioremap_page_range() with fixmap</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 22, 2017, 8:45 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171222084627.174297006@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10129459/mbox/"
   >mbox</a>
|
   <a href="/patch/10129459/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10129459/">/patch/10129459/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E5E686019C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:48:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CB291290F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:48:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C00D229803; Fri, 22 Dec 2017 09:48:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1102C290F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:48:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756519AbdLVJsE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 22 Dec 2017 04:48:04 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:37584 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S965147AbdLVJBA (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 22 Dec 2017 04:01:00 -0500
Received: from localhost (LFbn-1-12262-44.w90-92.abo.wanadoo.fr
	[90.92.75.44])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 3A85897A;
	Fri, 22 Dec 2017 09:00:59 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Fengguang Wu &lt;fengguang.wu@intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	James Morse &lt;james.morse@arm.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Tyler Baicar &lt;tbaicar@codeaurora.org&gt;, Toshi Kani &lt;toshi.kani@hpe.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rafael.j.wysocki@intel.com&gt;
Subject: [PATCH 4.14 063/159] ACPI / APEI: Replace ioremap_page_range() with
	fixmap
Date: Fri, 22 Dec 2017 09:45:48 +0100
Message-Id: &lt;20171222084627.174297006@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20171222084623.668990192@linuxfoundation.org&gt;
References: &lt;20171222084623.668990192@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Dec. 22, 2017, 8:45 a.m.</div>
<pre class="content">
4.14-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: James Morse &lt;james.morse@arm.com&gt;</span>

commit 4f89fa286f6729312e227e7c2d764e8e7b9d340e upstream.

Replace ghes_io{re,un}map_pfn_{nmi,irq}()s use of ioremap_page_range()
with __set_fixmap() as ioremap_page_range() may sleep to allocate a new
level of page-table, even if its passed an existing final-address to
use in the mapping.

The GHES driver can only be enabled for architectures that select
HAVE_ACPI_APEI: Add fixmap entries to both x86 and arm64.

clear_fixmap() does the TLB invalidation in __set_fixmap() for arm64
and __set_pte_vaddr() for x86. In each case its the same as the
respective arch_apei_flush_tlb_one().

Reported-by: Fengguang Wu &lt;fengguang.wu@intel.com&gt;
Suggested-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
<span class="signed-off-by">Signed-off-by: James Morse &lt;james.morse@arm.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="tested-by">Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="tested-by">Tested-by: Toshi Kani &lt;toshi.kani@hpe.com&gt;</span>
[ For the arm64 bits: ]
<span class="acked-by">Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
[ For the x86 bits: ]
<span class="acked-by">Acked-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Rafael J. Wysocki &lt;rafael.j.wysocki@intel.com&gt;</span>
Cc: All applicable &lt;stable@vger.kernel.org&gt;
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/arm64/include/asm/fixmap.h |    7 ++++++
 arch/x86/include/asm/fixmap.h   |    6 +++++
 drivers/acpi/apei/ghes.c        |   44 ++++++++++++----------------------------
 3 files changed, 27 insertions(+), 30 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/arm64/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -51,6 +51,13 @@</span> <span class="p_context"> enum fixed_addresses {</span>
 
 	FIX_EARLYCON_MEM_BASE,
 	FIX_TEXT_POKE0,
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ACPI_APEI_GHES</span>
<span class="p_add">+	/* Used for GHES mapping from assorted contexts */</span>
<span class="p_add">+	FIX_APEI_GHES_IRQ,</span>
<span class="p_add">+	FIX_APEI_GHES_NMI,</span>
<span class="p_add">+#endif /* CONFIG_ACPI_APEI_GHES */</span>
<span class="p_add">+</span>
 	__end_of_permanent_fixed_addresses,
 
 	/*
<span class="p_header">--- a/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -104,6 +104,12 @@</span> <span class="p_context"> enum fixed_addresses {</span>
 	FIX_GDT_REMAP_BEGIN,
 	FIX_GDT_REMAP_END = FIX_GDT_REMAP_BEGIN + NR_CPUS - 1,
 
<span class="p_add">+#ifdef CONFIG_ACPI_APEI_GHES</span>
<span class="p_add">+	/* Used for GHES mapping from assorted contexts */</span>
<span class="p_add">+	FIX_APEI_GHES_IRQ,</span>
<span class="p_add">+	FIX_APEI_GHES_NMI,</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	__end_of_permanent_fixed_addresses,
 
 	/*
<span class="p_header">--- a/drivers/acpi/apei/ghes.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/ghes.c</span>
<span class="p_chunk">@@ -51,6 +51,7 @@</span> <span class="p_context"></span>
 #include &lt;acpi/actbl1.h&gt;
 #include &lt;acpi/ghes.h&gt;
 #include &lt;acpi/apei.h&gt;
<span class="p_add">+#include &lt;asm/fixmap.h&gt;</span>
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;ras/ras_event.h&gt;
 
<span class="p_chunk">@@ -112,7 +113,7 @@</span> <span class="p_context"> static DEFINE_MUTEX(ghes_list_mutex);</span>
  * Because the memory area used to transfer hardware error information
  * from BIOS to Linux can be determined only in NMI, IRQ or timer
  * handler, but general ioremap can not be used in atomic context, so
<span class="p_del">- * a special version of atomic ioremap is implemented for that.</span>
<span class="p_add">+ * the fixmap is used instead.</span>
  */
 
 /*
<span class="p_chunk">@@ -126,8 +127,8 @@</span> <span class="p_context"> static DEFINE_MUTEX(ghes_list_mutex);</span>
 /* virtual memory area for atomic ioremap */
 static struct vm_struct *ghes_ioremap_area;
 /*
<span class="p_del">- * These 2 spinlock is used to prevent atomic ioremap virtual memory</span>
<span class="p_del">- * area from being mapped simultaneously.</span>
<span class="p_add">+ * These 2 spinlocks are used to prevent the fixmap entries from being used</span>
<span class="p_add">+ * simultaneously.</span>
  */
 static DEFINE_RAW_SPINLOCK(ghes_ioremap_lock_nmi);
 static DEFINE_SPINLOCK(ghes_ioremap_lock_irq);
<span class="p_chunk">@@ -159,53 +160,36 @@</span> <span class="p_context"> static void ghes_ioremap_exit(void)</span>
 
 static void __iomem *ghes_ioremap_pfn_nmi(u64 pfn)
 {
<span class="p_del">-	unsigned long vaddr;</span>
 	phys_addr_t paddr;
 	pgprot_t prot;
 
<span class="p_del">-	vaddr = (unsigned long)GHES_IOREMAP_NMI_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_del">-</span>
 	paddr = pfn &lt;&lt; PAGE_SHIFT;
 	prot = arch_apei_get_mem_attribute(paddr);
<span class="p_del">-	ioremap_page_range(vaddr, vaddr + PAGE_SIZE, paddr, prot);</span>
<span class="p_add">+	__set_fixmap(FIX_APEI_GHES_NMI, paddr, prot);</span>
 
<span class="p_del">-	return (void __iomem *)vaddr;</span>
<span class="p_add">+	return (void __iomem *) fix_to_virt(FIX_APEI_GHES_NMI);</span>
 }
 
 static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)
 {
<span class="p_del">-	unsigned long vaddr;</span>
 	phys_addr_t paddr;
 	pgprot_t prot;
 
<span class="p_del">-	vaddr = (unsigned long)GHES_IOREMAP_IRQ_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_del">-</span>
 	paddr = pfn &lt;&lt; PAGE_SHIFT;
 	prot = arch_apei_get_mem_attribute(paddr);
<span class="p_add">+	__set_fixmap(FIX_APEI_GHES_IRQ, paddr, prot);</span>
 
<span class="p_del">-	ioremap_page_range(vaddr, vaddr + PAGE_SIZE, paddr, prot);</span>
<span class="p_del">-</span>
<span class="p_del">-	return (void __iomem *)vaddr;</span>
<span class="p_add">+	return (void __iomem *) fix_to_virt(FIX_APEI_GHES_IRQ);</span>
 }
 
<span class="p_del">-static void ghes_iounmap_nmi(void __iomem *vaddr_ptr)</span>
<span class="p_add">+static void ghes_iounmap_nmi(void)</span>
 {
<span class="p_del">-	unsigned long vaddr = (unsigned long __force)vaddr_ptr;</span>
<span class="p_del">-	void *base = ghes_ioremap_area-&gt;addr;</span>
<span class="p_del">-</span>
<span class="p_del">-	BUG_ON(vaddr != (unsigned long)GHES_IOREMAP_NMI_PAGE(base));</span>
<span class="p_del">-	unmap_kernel_range_noflush(vaddr, PAGE_SIZE);</span>
<span class="p_del">-	arch_apei_flush_tlb_one(vaddr);</span>
<span class="p_add">+	clear_fixmap(FIX_APEI_GHES_NMI);</span>
 }
 
<span class="p_del">-static void ghes_iounmap_irq(void __iomem *vaddr_ptr)</span>
<span class="p_add">+static void ghes_iounmap_irq(void)</span>
 {
<span class="p_del">-	unsigned long vaddr = (unsigned long __force)vaddr_ptr;</span>
<span class="p_del">-	void *base = ghes_ioremap_area-&gt;addr;</span>
<span class="p_del">-</span>
<span class="p_del">-	BUG_ON(vaddr != (unsigned long)GHES_IOREMAP_IRQ_PAGE(base));</span>
<span class="p_del">-	unmap_kernel_range_noflush(vaddr, PAGE_SIZE);</span>
<span class="p_del">-	arch_apei_flush_tlb_one(vaddr);</span>
<span class="p_add">+	clear_fixmap(FIX_APEI_GHES_IRQ);</span>
 }
 
 static int ghes_estatus_pool_init(void)
<span class="p_chunk">@@ -361,10 +345,10 @@</span> <span class="p_context"> static void ghes_copy_tofrom_phys(void *</span>
 		paddr += trunk;
 		buffer += trunk;
 		if (in_nmi) {
<span class="p_del">-			ghes_iounmap_nmi(vaddr);</span>
<span class="p_add">+			ghes_iounmap_nmi();</span>
 			raw_spin_unlock(&amp;ghes_ioremap_lock_nmi);
 		} else {
<span class="p_del">-			ghes_iounmap_irq(vaddr);</span>
<span class="p_add">+			ghes_iounmap_irq();</span>
 			spin_unlock_irqrestore(&amp;ghes_ioremap_lock_irq, flags);
 		}
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



