
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv9,26/36] mm: rework mapcount accounting to enable 4k mapping of THPs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv9,26/36] mm: rework mapcount accounting to enable 4k mapping of THPs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 20, 2015, 2:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437402069-105900-27-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6827941/mbox/"
   >mbox</a>
|
   <a href="/patch/6827941/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6827941/">/patch/6827941/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 12A86C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jul 2015 14:25:26 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 7180120627
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jul 2015 14:25:24 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id AE1A82062E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jul 2015 14:25:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932895AbbGTOZI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Jul 2015 10:25:08 -0400
Received: from mga01.intel.com ([192.55.52.88]:56135 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932489AbbGTOVd (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Jul 2015 10:21:33 -0400
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by fmsmga101.fm.intel.com with ESMTP; 20 Jul 2015 07:21:30 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.15,508,1432623600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;527157333&quot;
Received: from black.fi.intel.com ([10.237.72.157])
	by FMSMGA003.fm.intel.com with ESMTP; 20 Jul 2015 07:21:22 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id A450F89E; Mon, 20 Jul 2015 17:21:11 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Christoph Lameter &lt;cl@gentwo.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Steve Capper &lt;steve.capper@linaro.org&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Jerome Marchand &lt;jmarchan@redhat.com&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv9 26/36] mm: rework mapcount accounting to enable 4k mapping
	of THPs
Date: Mon, 20 Jul 2015 17:20:59 +0300
Message-Id: &lt;1437402069-105900-27-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1437402069-105900-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1437402069-105900-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - July 20, 2015, 2:20 p.m.</div>
<pre class="content">
We&#39;re going to allow mapping of individual 4k pages of THP compound.
It means we need to track mapcount on per small page basis.

Straight-forward approach is to use -&gt;_mapcount in all subpages to track
how many time this subpage is mapped with PMDs or PTEs combined. But
this is rather expensive: mapping or unmapping of a THP page with PMD
would require HPAGE_PMD_NR atomic operations instead of single we have
now.

The idea is to store separately how many times the page was mapped as
whole -- compound_mapcount. This frees up -&gt;_mapcount in subpages to
track PTE mapcount.

We use the same approach as with compound page destructor and compound
order to store compound_mapcount: use space in first tail page,
-&gt;mapping this time.

Any time we map/unmap whole compound page (THP or hugetlb) -- we
increment/decrement compound_mapcount. When we map part of compound page
with PTE we operate on -&gt;_mapcount of the subpage.

page_mapcount() counts both: PTE and PMD mappings of the page.

Basically, we have mapcount for a subpage spread over two counters.
It makes tricky to detect when last mapcount for a page goes away.

We introduced PageDoubleMap() for this. When we split THP PMD for the
first time and there&#39;s other PMD mapping left we offset up -&gt;_mapcount
in all subpages by one and set PG_double_map on the compound page.
These additional references go away with last compound_mapcount.

This approach provides a way to detect when last mapcount goes away on
per small page basis without introducing new overhead for most common
cases.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="tested-by">Tested-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
---
 include/linux/mm.h         | 26 +++++++++++-
 include/linux/mm_types.h   |  1 +
 include/linux/page-flags.h | 37 +++++++++++++++++
 include/linux/rmap.h       |  4 +-
 mm/debug.c                 |  5 ++-
 mm/huge_memory.c           |  2 +-
 mm/hugetlb.c               |  4 +-
 mm/memory.c                |  2 +-
 mm/migrate.c               |  2 +-
 mm/page_alloc.c            | 14 +++++--
 mm/rmap.c                  | 99 +++++++++++++++++++++++++++++++++++-----------
 11 files changed, 161 insertions(+), 35 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1608">Jerome Marchand</a> - July 31, 2015, 3:04 p.m.</div>
<pre class="content">
On 07/20/2015 04:20 PM, Kirill A. Shutemov wrote:
<span class="quote">&gt; We&#39;re going to allow mapping of individual 4k pages of THP compound.</span>
<span class="quote">&gt; It means we need to track mapcount on per small page basis.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Straight-forward approach is to use -&gt;_mapcount in all subpages to track</span>
<span class="quote">&gt; how many time this subpage is mapped with PMDs or PTEs combined. But</span>
<span class="quote">&gt; this is rather expensive: mapping or unmapping of a THP page with PMD</span>
<span class="quote">&gt; would require HPAGE_PMD_NR atomic operations instead of single we have</span>
<span class="quote">&gt; now.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The idea is to store separately how many times the page was mapped as</span>
<span class="quote">&gt; whole -- compound_mapcount. This frees up -&gt;_mapcount in subpages to</span>
<span class="quote">&gt; track PTE mapcount.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We use the same approach as with compound page destructor and compound</span>
<span class="quote">&gt; order to store compound_mapcount: use space in first tail page,</span>
<span class="quote">&gt; -&gt;mapping this time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Any time we map/unmap whole compound page (THP or hugetlb) -- we</span>
<span class="quote">&gt; increment/decrement compound_mapcount. When we map part of compound page</span>
<span class="quote">&gt; with PTE we operate on -&gt;_mapcount of the subpage.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; page_mapcount() counts both: PTE and PMD mappings of the page.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Basically, we have mapcount for a subpage spread over two counters.</span>
<span class="quote">&gt; It makes tricky to detect when last mapcount for a page goes away.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We introduced PageDoubleMap() for this. When we split THP PMD for the</span>
<span class="quote">&gt; first time and there&#39;s other PMD mapping left we offset up -&gt;_mapcount</span>
<span class="quote">&gt; in all subpages by one and set PG_double_map on the compound page.</span>
<span class="quote">&gt; These additional references go away with last compound_mapcount.</span>

So this stays even if all PTE mappings goes and the page is again mapped
only with PMD. I&#39;m not sure how often that happen and if it&#39;s an issue
worth caring about.
<span class="acked-by">
Acked-by: Jerome Marchand &lt;jmarchan@redhat.com&gt;</span>
<span class="quote">
&gt; </span>
<span class="quote">&gt; This approach provides a way to detect when last mapcount goes away on</span>
<span class="quote">&gt; per small page basis without introducing new overhead for most common</span>
<span class="quote">&gt; cases.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; Tested-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/mm.h         | 26 +++++++++++-</span>
<span class="quote">&gt;  include/linux/mm_types.h   |  1 +</span>
<span class="quote">&gt;  include/linux/page-flags.h | 37 +++++++++++++++++</span>
<span class="quote">&gt;  include/linux/rmap.h       |  4 +-</span>
<span class="quote">&gt;  mm/debug.c                 |  5 ++-</span>
<span class="quote">&gt;  mm/huge_memory.c           |  2 +-</span>
<span class="quote">&gt;  mm/hugetlb.c               |  4 +-</span>
<span class="quote">&gt;  mm/memory.c                |  2 +-</span>
<span class="quote">&gt;  mm/migrate.c               |  2 +-</span>
<span class="quote">&gt;  mm/page_alloc.c            | 14 +++++--</span>
<span class="quote">&gt;  mm/rmap.c                  | 99 +++++++++++++++++++++++++++++++++++-----------</span>
<span class="quote">&gt;  11 files changed, 161 insertions(+), 35 deletions(-)</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Aug. 3, 2015, 10:43 a.m.</div>
<pre class="content">
On Fri, Jul 31, 2015 at 05:04:18PM +0200, Jerome Marchand wrote:
<span class="quote">&gt; On 07/20/2015 04:20 PM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; We&#39;re going to allow mapping of individual 4k pages of THP compound.</span>
<span class="quote">&gt; &gt; It means we need to track mapcount on per small page basis.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Straight-forward approach is to use -&gt;_mapcount in all subpages to track</span>
<span class="quote">&gt; &gt; how many time this subpage is mapped with PMDs or PTEs combined. But</span>
<span class="quote">&gt; &gt; this is rather expensive: mapping or unmapping of a THP page with PMD</span>
<span class="quote">&gt; &gt; would require HPAGE_PMD_NR atomic operations instead of single we have</span>
<span class="quote">&gt; &gt; now.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The idea is to store separately how many times the page was mapped as</span>
<span class="quote">&gt; &gt; whole -- compound_mapcount. This frees up -&gt;_mapcount in subpages to</span>
<span class="quote">&gt; &gt; track PTE mapcount.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We use the same approach as with compound page destructor and compound</span>
<span class="quote">&gt; &gt; order to store compound_mapcount: use space in first tail page,</span>
<span class="quote">&gt; &gt; -&gt;mapping this time.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Any time we map/unmap whole compound page (THP or hugetlb) -- we</span>
<span class="quote">&gt; &gt; increment/decrement compound_mapcount. When we map part of compound page</span>
<span class="quote">&gt; &gt; with PTE we operate on -&gt;_mapcount of the subpage.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; page_mapcount() counts both: PTE and PMD mappings of the page.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Basically, we have mapcount for a subpage spread over two counters.</span>
<span class="quote">&gt; &gt; It makes tricky to detect when last mapcount for a page goes away.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We introduced PageDoubleMap() for this. When we split THP PMD for the</span>
<span class="quote">&gt; &gt; first time and there&#39;s other PMD mapping left we offset up -&gt;_mapcount</span>
<span class="quote">&gt; &gt; in all subpages by one and set PG_double_map on the compound page.</span>
<span class="quote">&gt; &gt; These additional references go away with last compound_mapcount.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So this stays even if all PTE mappings goes and the page is again mapped</span>
<span class="quote">&gt; only with PMD. I&#39;m not sure how often that happen and if it&#39;s an issue</span>
<span class="quote">&gt; worth caring about.</span>

We don&#39;t have a cheap way to detect this situation and it shouldn&#39;t
happen often enough to care.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1608">Jerome Marchand</a> - Aug. 3, 2015, 11:41 a.m.</div>
<pre class="content">
On 08/03/2015 12:43 PM, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Fri, Jul 31, 2015 at 05:04:18PM +0200, Jerome Marchand wrote:</span>
<span class="quote">&gt;&gt; On 07/20/2015 04:20 PM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt;&gt;&gt; We&#39;re going to allow mapping of individual 4k pages of THP compound.</span>
<span class="quote">&gt;&gt;&gt; It means we need to track mapcount on per small page basis.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Straight-forward approach is to use -&gt;_mapcount in all subpages to track</span>
<span class="quote">&gt;&gt;&gt; how many time this subpage is mapped with PMDs or PTEs combined. But</span>
<span class="quote">&gt;&gt;&gt; this is rather expensive: mapping or unmapping of a THP page with PMD</span>
<span class="quote">&gt;&gt;&gt; would require HPAGE_PMD_NR atomic operations instead of single we have</span>
<span class="quote">&gt;&gt;&gt; now.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The idea is to store separately how many times the page was mapped as</span>
<span class="quote">&gt;&gt;&gt; whole -- compound_mapcount. This frees up -&gt;_mapcount in subpages to</span>
<span class="quote">&gt;&gt;&gt; track PTE mapcount.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; We use the same approach as with compound page destructor and compound</span>
<span class="quote">&gt;&gt;&gt; order to store compound_mapcount: use space in first tail page,</span>
<span class="quote">&gt;&gt;&gt; -&gt;mapping this time.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Any time we map/unmap whole compound page (THP or hugetlb) -- we</span>
<span class="quote">&gt;&gt;&gt; increment/decrement compound_mapcount. When we map part of compound page</span>
<span class="quote">&gt;&gt;&gt; with PTE we operate on -&gt;_mapcount of the subpage.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; page_mapcount() counts both: PTE and PMD mappings of the page.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Basically, we have mapcount for a subpage spread over two counters.</span>
<span class="quote">&gt;&gt;&gt; It makes tricky to detect when last mapcount for a page goes away.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; We introduced PageDoubleMap() for this. When we split THP PMD for the</span>
<span class="quote">&gt;&gt;&gt; first time and there&#39;s other PMD mapping left we offset up -&gt;_mapcount</span>
<span class="quote">&gt;&gt;&gt; in all subpages by one and set PG_double_map on the compound page.</span>
<span class="quote">&gt;&gt;&gt; These additional references go away with last compound_mapcount.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; So this stays even if all PTE mappings goes and the page is again mapped</span>
<span class="quote">&gt;&gt; only with PMD. I&#39;m not sure how often that happen and if it&#39;s an issue</span>
<span class="quote">&gt;&gt; worth caring about.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We don&#39;t have a cheap way to detect this situation and it shouldn&#39;t</span>
<span class="quote">&gt; happen often enough to care.</span>
<span class="quote">&gt; </span>

I thought so.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index b6fb5293259a..0370329aff96 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -396,6 +396,19 @@</span> <span class="p_context"> static inline int is_vmalloc_or_module_addr(const void *x)</span>
 
 extern void kvfree(const void *addr);
 
<span class="p_add">+static inline atomic_t *compound_mapcount_ptr(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return &amp;page[1].compound_mapcount;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int compound_mapcount(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!PageCompound(page))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	return atomic_read(compound_mapcount_ptr(page)) + 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * The atomic page-&gt;_mapcount, starts from -1: so that transitions
  * both from it and to it can be tracked, using atomic_inc_and_test
<span class="p_chunk">@@ -408,8 +421,17 @@</span> <span class="p_context"> static inline void page_mapcount_reset(struct page *page)</span>
 
 static inline int page_mapcount(struct page *page)
 {
<span class="p_add">+	int ret;</span>
 	VM_BUG_ON_PAGE(PageSlab(page), page);
<span class="p_del">-	return atomic_read(&amp;page-&gt;_mapcount) + 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = atomic_read(&amp;page-&gt;_mapcount) + 1;</span>
<span class="p_add">+	if (PageCompound(page)) {</span>
<span class="p_add">+		page = compound_head(page);</span>
<span class="p_add">+		ret += atomic_read(compound_mapcount_ptr(page)) + 1;</span>
<span class="p_add">+		if (PageDoubleMap(page))</span>
<span class="p_add">+			ret--;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return ret;</span>
 }
 
 static inline int page_count(struct page *page)
<span class="p_chunk">@@ -891,7 +913,7 @@</span> <span class="p_context"> static inline pgoff_t page_file_index(struct page *page)</span>
  */
 static inline int page_mapped(struct page *page)
 {
<span class="p_del">-	return atomic_read(&amp;(page)-&gt;_mapcount) &gt;= 0;</span>
<span class="p_add">+	return atomic_read(&amp;(page)-&gt;_mapcount) + compound_mapcount(page) &gt;= 0;</span>
 }
 
 /*
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index b762eef188c3..991f1394d425 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -56,6 +56,7 @@</span> <span class="p_context"> struct page {</span>
 						 * see PAGE_MAPPING_ANON below.
 						 */
 		void *s_mem;			/* slab first object */
<span class="p_add">+		atomic_t compound_mapcount;	/* first tail page */</span>
 	};
 
 	/* Second double word */
<span class="p_header">diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="p_header">index f10f9c0030dd..d22adfd0a4c4 100644</span>
<span class="p_header">--- a/include/linux/page-flags.h</span>
<span class="p_header">+++ b/include/linux/page-flags.h</span>
<span class="p_chunk">@@ -127,6 +127,9 @@</span> <span class="p_context"> enum pageflags {</span>
 
 	/* SLOB */
 	PG_slob_free = PG_private,
<span class="p_add">+</span>
<span class="p_add">+	/* Compound pages. Stored in first tail page&#39;s flags */</span>
<span class="p_add">+	PG_double_map = PG_private_2,</span>
 };
 
 #ifndef __GENERATING_BOUNDS_H
<span class="p_chunk">@@ -593,10 +596,44 @@</span> <span class="p_context"> static inline int PageTransTail(struct page *page)</span>
 	return PageTail(page);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * PageDoubleMap indicates that the compound page is mapped with PTEs as well</span>
<span class="p_add">+ * as PMDs.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This is required for optimization of rmap oprations for THP: we can postpone</span>
<span class="p_add">+ * per small page mapcount accounting (and its overhead from atomic operations)</span>
<span class="p_add">+ * until the first PMD split.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * For the page PageDoubleMap means -&gt;_mapcount in all sub-pages is offset up</span>
<span class="p_add">+ * by one. This reference will go away with last compound_mapcount.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * See also __split_huge_pmd_locked() and page_remove_anon_compound_rmap().</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int PageDoubleMap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+	return test_bit(PG_double_map, &amp;page[1].flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int TestSetPageDoubleMap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+	return test_and_set_bit(PG_double_map, &amp;page[1].flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int TestClearPageDoubleMap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+	return test_and_clear_bit(PG_double_map, &amp;page[1].flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #else
 TESTPAGEFLAG_FALSE(TransHuge)
 TESTPAGEFLAG_FALSE(TransCompound)
 TESTPAGEFLAG_FALSE(TransTail)
<span class="p_add">+TESTPAGEFLAG_FALSE(DoubleMap)</span>
<span class="p_add">+	TESTSETFLAG_FALSE(DoubleMap)</span>
<span class="p_add">+	TESTCLEARFLAG_FALSE(DoubleMap)</span>
 #endif
 
 /*
<span class="p_header">diff --git a/include/linux/rmap.h b/include/linux/rmap.h</span>
<span class="p_header">index 082928aba785..6b6233fafb53 100644</span>
<span class="p_header">--- a/include/linux/rmap.h</span>
<span class="p_header">+++ b/include/linux/rmap.h</span>
<span class="p_chunk">@@ -184,9 +184,9 @@</span> <span class="p_context"> void hugepage_add_anon_rmap(struct page *, struct vm_area_struct *,</span>
 void hugepage_add_new_anon_rmap(struct page *, struct vm_area_struct *,
 				unsigned long);
 
<span class="p_del">-static inline void page_dup_rmap(struct page *page)</span>
<span class="p_add">+static inline void page_dup_rmap(struct page *page, bool compound)</span>
 {
<span class="p_del">-	atomic_inc(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+	atomic_inc(compound ? compound_mapcount_ptr(page) : &amp;page-&gt;_mapcount);</span>
 }
 
 /*
<span class="p_header">diff --git a/mm/debug.c b/mm/debug.c</span>
<span class="p_header">index 9dfcd77e7354..4a82f639b964 100644</span>
<span class="p_header">--- a/mm/debug.c</span>
<span class="p_header">+++ b/mm/debug.c</span>
<span class="p_chunk">@@ -80,9 +80,12 @@</span> <span class="p_context"> static void dump_flags(unsigned long flags,</span>
 void dump_page_badflags(struct page *page, const char *reason,
 		unsigned long badflags)
 {
<span class="p_del">-	pr_emerg(&quot;page:%p count:%d mapcount:%d mapping:%p index:%#lx\n&quot;,</span>
<span class="p_add">+	pr_emerg(&quot;page:%p count:%d mapcount:%d mapping:%p index:%#lx&quot;,</span>
 		  page, atomic_read(&amp;page-&gt;_count), page_mapcount(page),
 		  page-&gt;mapping, page-&gt;index);
<span class="p_add">+	if (PageCompound(page))</span>
<span class="p_add">+		pr_cont(&quot; compound_mapcount: %d&quot;, compound_mapcount(page));</span>
<span class="p_add">+	pr_cont(&quot;\n&quot;);</span>
 	BUILD_BUG_ON(ARRAY_SIZE(pageflag_names) != __NR_PAGEFLAGS);
 	dump_flags(page-&gt;flags, pageflag_names, ARRAY_SIZE(pageflag_names));
 	if (reason)
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index c825397aafce..52a20e92d51a 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -960,7 +960,7 @@</span> <span class="p_context"> int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	src_page = pmd_page(pmd);
 	VM_BUG_ON_PAGE(!PageHead(src_page), src_page);
 	get_page(src_page);
<span class="p_del">-	page_dup_rmap(src_page);</span>
<span class="p_add">+	page_dup_rmap(src_page, true);</span>
 	add_mm_counter(dst_mm, MM_ANONPAGES, HPAGE_PMD_NR);
 
 	pmdp_set_wrprotect(src_mm, addr, src_pmd);
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 399ea11a8813..05b2f53be237 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2795,7 +2795,7 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 			entry = huge_ptep_get(src_pte);
 			ptepage = pte_page(entry);
 			get_page(ptepage);
<span class="p_del">-			page_dup_rmap(ptepage);</span>
<span class="p_add">+			page_dup_rmap(ptepage, true);</span>
 			set_huge_pte_at(dst, addr, dst_pte, entry);
 		}
 		spin_unlock(src_ptl);
<span class="p_chunk">@@ -3256,7 +3256,7 @@</span> <span class="p_context"> retry:</span>
 		ClearPagePrivate(page);
 		hugepage_add_new_anon_rmap(page, vma, address);
 	} else
<span class="p_del">-		page_dup_rmap(page);</span>
<span class="p_add">+		page_dup_rmap(page, true);</span>
 	new_pte = make_huge_pte(vma, page, ((vma-&gt;vm_flags &amp; VM_WRITE)
 				&amp;&amp; (vma-&gt;vm_flags &amp; VM_SHARED)));
 	set_huge_pte_at(mm, address, ptep, new_pte);
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 7a782e48477c..074edab89b52 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -867,7 +867,7 @@</span> <span class="p_context"> copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	page = vm_normal_page(vma, addr, pte);
 	if (page) {
 		get_page(page);
<span class="p_del">-		page_dup_rmap(page);</span>
<span class="p_add">+		page_dup_rmap(page, false);</span>
 		if (PageAnon(page))
 			rss[MM_ANONPAGES]++;
 		else
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 4870a1daa8ae..67970faf544d 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -164,7 +164,7 @@</span> <span class="p_context"> static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
 		if (PageAnon(new))
 			hugepage_add_anon_rmap(new, vma, addr);
 		else
<span class="p_del">-			page_dup_rmap(new);</span>
<span class="p_add">+			page_dup_rmap(new, false);</span>
 	} else if (PageAnon(new))
 		page_add_anon_rmap(new, vma, addr, false);
 	else
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 10ac1c9cac3c..cfd3a34e41f1 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -450,6 +450,7 @@</span> <span class="p_context"> void prep_compound_page(struct page *page, unsigned long order)</span>
 		smp_wmb();
 		__SetPageTail(p);
 	}
<span class="p_add">+	atomic_set(compound_mapcount_ptr(page), -1);</span>
 }
 
 #ifdef CONFIG_DEBUG_PAGEALLOC
<span class="p_chunk">@@ -714,7 +715,7 @@</span> <span class="p_context"> static inline int free_pages_check(struct page *page)</span>
 	const char *bad_reason = NULL;
 	unsigned long bad_flags = 0;
 
<span class="p_del">-	if (unlikely(page_mapcount(page)))</span>
<span class="p_add">+	if (unlikely(atomic_read(&amp;page-&gt;_mapcount) != -1))</span>
 		bad_reason = &quot;nonzero mapcount&quot;;
 	if (unlikely(page-&gt;mapping != NULL))
 		bad_reason = &quot;non-NULL mapping&quot;;
<span class="p_chunk">@@ -823,7 +824,14 @@</span> <span class="p_context"> static void free_one_page(struct zone *zone,</span>
 
 static int free_tail_pages_check(struct page *head_page, struct page *page)
 {
<span class="p_del">-	if (page-&gt;mapping != TAIL_MAPPING) {</span>
<span class="p_add">+	/* mapping in first tail page is used for compound_mapcount() */</span>
<span class="p_add">+	if (page - head_page == 1) {</span>
<span class="p_add">+		if (unlikely(compound_mapcount(page))) {</span>
<span class="p_add">+			bad_page(page, &quot;nonzero compound_mapcount&quot;, 0);</span>
<span class="p_add">+			page-&gt;mapping = NULL;</span>
<span class="p_add">+			return 1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else if (page-&gt;mapping != TAIL_MAPPING) {</span>
 		bad_page(page, &quot;corrupted mapping in tail page&quot;, 0);
 		page-&gt;mapping = NULL;
 		return 1;
<span class="p_chunk">@@ -1286,7 +1294,7 @@</span> <span class="p_context"> static inline int check_new_page(struct page *page)</span>
 	const char *bad_reason = NULL;
 	unsigned long bad_flags = 0;
 
<span class="p_del">-	if (unlikely(page_mapcount(page)))</span>
<span class="p_add">+	if (unlikely(atomic_read(&amp;page-&gt;_mapcount) != -1))</span>
 		bad_reason = &quot;nonzero mapcount&quot;;
 	if (unlikely(page-&gt;mapping != NULL))
 		bad_reason = &quot;non-NULL mapping&quot;;
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index bc1db51958da..ed89c6256579 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1139,7 +1139,7 @@</span> <span class="p_context"> static void __page_check_anon_rmap(struct page *page,</span>
 	 * over the call to page_add_new_anon_rmap.
 	 */
 	BUG_ON(page_anon_vma(page)-&gt;root != vma-&gt;anon_vma-&gt;root);
<span class="p_del">-	BUG_ON(page-&gt;index != linear_page_index(vma, address));</span>
<span class="p_add">+	BUG_ON(page_to_pgoff(page) != linear_page_index(vma, address));</span>
 #endif
 }
 
<span class="p_chunk">@@ -1169,9 +1169,29 @@</span> <span class="p_context"> void page_add_anon_rmap(struct page *page,</span>
 void do_page_add_anon_rmap(struct page *page,
 	struct vm_area_struct *vma, unsigned long address, int flags)
 {
<span class="p_del">-	int first = atomic_inc_and_test(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+	bool compound = flags &amp; RMAP_COMPOUND;</span>
<span class="p_add">+	bool first;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (PageTransCompound(page)) {</span>
<span class="p_add">+		VM_BUG_ON_PAGE(!PageLocked(page), page);</span>
<span class="p_add">+		if (compound) {</span>
<span class="p_add">+			atomic_t *mapcount;</span>
<span class="p_add">+</span>
<span class="p_add">+			VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="p_add">+			mapcount = compound_mapcount_ptr(page);</span>
<span class="p_add">+			first = atomic_inc_and_test(mapcount);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/* Anon THP always mapped first with PMD */</span>
<span class="p_add">+			first = 0;</span>
<span class="p_add">+			VM_BUG_ON_PAGE(!page_mapcount(page), page);</span>
<span class="p_add">+			atomic_inc(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		VM_BUG_ON_PAGE(compound, page);</span>
<span class="p_add">+		first = atomic_inc_and_test(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (first) {
<span class="p_del">-		bool compound = flags &amp; RMAP_COMPOUND;</span>
 		int nr = compound ? hpage_nr_pages(page) : 1;
 		/*
 		 * We use the irq-unsafe __{inc|mod}_zone_page_stat because
<span class="p_chunk">@@ -1190,6 +1210,7 @@</span> <span class="p_context"> void do_page_add_anon_rmap(struct page *page,</span>
 		return;
 
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
<span class="p_add">+</span>
 	/* address might be in next vma when migration races vma_adjust */
 	if (first)
 		__page_set_anon_rmap(page, vma, address,
<span class="p_chunk">@@ -1216,10 +1237,16 @@</span> <span class="p_context"> void page_add_new_anon_rmap(struct page *page,</span>
 
 	VM_BUG_ON_VMA(address &lt; vma-&gt;vm_start || address &gt;= vma-&gt;vm_end, vma);
 	SetPageSwapBacked(page);
<span class="p_del">-	atomic_set(&amp;page-&gt;_mapcount, 0); /* increment count (starts at -1) */</span>
 	if (compound) {
 		VM_BUG_ON_PAGE(!PageTransHuge(page), page);
<span class="p_add">+		/* increment count (starts at -1) */</span>
<span class="p_add">+		atomic_set(compound_mapcount_ptr(page), 0);</span>
 		__inc_zone_page_state(page, NR_ANON_TRANSPARENT_HUGEPAGES);
<span class="p_add">+	} else {</span>
<span class="p_add">+		/* Anon THP always mapped first with PMD */</span>
<span class="p_add">+		VM_BUG_ON_PAGE(PageTransCompound(page), page);</span>
<span class="p_add">+		/* increment count (starts at -1) */</span>
<span class="p_add">+		atomic_set(&amp;page-&gt;_mapcount, 0);</span>
 	}
 	__mod_zone_page_state(page_zone(page), NR_ANON_PAGES, nr);
 	__page_set_anon_rmap(page, vma, address, 1);
<span class="p_chunk">@@ -1249,12 +1276,15 @@</span> <span class="p_context"> static void page_remove_file_rmap(struct page *page)</span>
 
 	memcg = mem_cgroup_begin_page_stat(page);
 
<span class="p_del">-	/* page still mapped by someone else? */</span>
<span class="p_del">-	if (!atomic_add_negative(-1, &amp;page-&gt;_mapcount))</span>
<span class="p_add">+	/* Hugepages are not counted in NR_FILE_MAPPED for now. */</span>
<span class="p_add">+	if (unlikely(PageHuge(page))) {</span>
<span class="p_add">+		/* hugetlb pages are always mapped with pmds */</span>
<span class="p_add">+		atomic_dec(compound_mapcount_ptr(page));</span>
 		goto out;
<span class="p_add">+	}</span>
 
<span class="p_del">-	/* Hugepages are not counted in NR_FILE_MAPPED for now. */</span>
<span class="p_del">-	if (unlikely(PageHuge(page)))</span>
<span class="p_add">+	/* page still mapped by someone else? */</span>
<span class="p_add">+	if (!atomic_add_negative(-1, &amp;page-&gt;_mapcount))</span>
 		goto out;
 
 	/*
<span class="p_chunk">@@ -1271,6 +1301,39 @@</span> <span class="p_context"> out:</span>
 	mem_cgroup_end_page_stat(memcg);
 }
 
<span class="p_add">+static void page_remove_anon_compound_rmap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int i, nr;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!atomic_add_negative(-1, compound_mapcount_ptr(page)))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Hugepages are not counted in NR_ANON_PAGES for now. */</span>
<span class="p_add">+	if (unlikely(PageHuge(page)))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_TRANSPARENT_HUGEPAGE))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	__dec_zone_page_state(page, NR_ANON_TRANSPARENT_HUGEPAGES);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (TestClearPageDoubleMap(page)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Subpages can be mapped with PTEs too. Check how many of</span>
<span class="p_add">+		 * themi are still mapped.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		for (i = 0, nr = 0; i &lt; HPAGE_PMD_NR; i++) {</span>
<span class="p_add">+			if (atomic_add_negative(-1, &amp;page[i]._mapcount))</span>
<span class="p_add">+				nr++;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		nr = HPAGE_PMD_NR;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (nr)</span>
<span class="p_add">+		__mod_zone_page_state(page_zone(page), NR_ANON_PAGES, -nr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /**
  * page_remove_rmap - take down pte mapping from a page
  * @page:	page to remove mapping from
<span class="p_chunk">@@ -1280,33 +1343,25 @@</span> <span class="p_context"> out:</span>
  */
 void page_remove_rmap(struct page *page, bool compound)
 {
<span class="p_del">-	int nr = compound ? hpage_nr_pages(page) : 1;</span>
<span class="p_del">-</span>
 	if (!PageAnon(page)) {
 		VM_BUG_ON_PAGE(compound &amp;&amp; !PageHuge(page), page);
 		page_remove_file_rmap(page);
 		return;
 	}
 
<span class="p_add">+	if (compound)</span>
<span class="p_add">+		return page_remove_anon_compound_rmap(page);</span>
<span class="p_add">+</span>
 	/* page still mapped by someone else? */
 	if (!atomic_add_negative(-1, &amp;page-&gt;_mapcount))
 		return;
 
<span class="p_del">-	/* Hugepages are not counted in NR_ANON_PAGES for now. */</span>
<span class="p_del">-	if (unlikely(PageHuge(page)))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
 	/*
 	 * We use the irq-unsafe __{inc|mod}_zone_page_stat because
 	 * these counters are not modified in interrupt context, and
 	 * pte lock(a spinlock) is held, which implies preemption disabled.
 	 */
<span class="p_del">-	if (compound) {</span>
<span class="p_del">-		VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="p_del">-		__dec_zone_page_state(page, NR_ANON_TRANSPARENT_HUGEPAGES);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	__mod_zone_page_state(page_zone(page), NR_ANON_PAGES, -nr);</span>
<span class="p_add">+	__dec_zone_page_state(page, NR_ANON_PAGES);</span>
 
 	if (unlikely(PageMlocked(page)))
 		clear_page_mlock(page);
<span class="p_chunk">@@ -1760,7 +1815,7 @@</span> <span class="p_context"> void hugepage_add_anon_rmap(struct page *page,</span>
 	BUG_ON(!PageLocked(page));
 	BUG_ON(!anon_vma);
 	/* address might be in next vma when migration races vma_adjust */
<span class="p_del">-	first = atomic_inc_and_test(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+	first = atomic_inc_and_test(compound_mapcount_ptr(page));</span>
 	if (first)
 		__hugepage_set_anon_rmap(page, vma, address, 0);
 }
<span class="p_chunk">@@ -1769,7 +1824,7 @@</span> <span class="p_context"> void hugepage_add_new_anon_rmap(struct page *page,</span>
 			struct vm_area_struct *vma, unsigned long address)
 {
 	BUG_ON(address &lt; vma-&gt;vm_start || address &gt;= vma-&gt;vm_end);
<span class="p_del">-	atomic_set(&amp;page-&gt;_mapcount, 0);</span>
<span class="p_add">+	atomic_set(compound_mapcount_ptr(page), 0);</span>
 	__hugepage_set_anon_rmap(page, vma, address, 1);
 }
 #endif /* CONFIG_HUGETLB_PAGE */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



