
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, hugetlb: do not allocate non-migrateable gigantic pages from movable zones - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, hugetlb: do not allocate non-migrateable gigantic pages from movable zones</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 3, 2017, 8:35 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170803083549.21407-1-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9878437/mbox/"
   >mbox</a>
|
   <a href="/patch/9878437/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9878437/">/patch/9878437/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E64FF60360 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Aug 2017 08:36:02 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CAFF42886A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Aug 2017 08:36:02 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BFD532887D; Thu,  3 Aug 2017 08:36:02 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A993F2886A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Aug 2017 08:36:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751890AbdHCIf6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 3 Aug 2017 04:35:58 -0400
Received: from mail-wm0-f67.google.com ([74.125.82.67]:36755 &quot;EHLO
	mail-wm0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751186AbdHCIf4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 3 Aug 2017 04:35:56 -0400
Received: by mail-wm0-f67.google.com with SMTP id d40so1292516wma.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 03 Aug 2017 01:35:55 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=+qriFefvy9mULf2wPGYyS6hlMDbb+EleAzPoS/QSSS0=;
	b=IHKDAiRoncpvvt1DAxPmA58BtEloftM2ipHa28K7doehw5GJHUeAsYnn3mmc03tJ0G
	vPGXQyivW7aZgqOo0Pv/kpko2EH93k8ZhiqtUqVN8g4hCQBAb8m4YzkNYOF1j30gWz50
	wUJSlDJvMpToD2nfy1rOCUvtWe5wAYZZxhbWr0YfNZK5jlOQsAbDRpeaKQIOEVrER/gu
	nJbg2xL3npJ7ulQQrcKGGID47iQnLXdXEXnbuUKNPCzHDYgj4DDpNsgz22QpCqWrfAh2
	nbD87IXDbZppkqadboLEteEFFQ/U77BIWBFW63BXlpv9oYhaFG9GBZbQt12wzISpJOU1
	tXgw==
X-Gm-Message-State: AHYfb5h0J/12I021qStr1Ng9kVqXzjV3U/PEP70P0yiQ+29Vj1Z0O9hC
	BTJsTFd6KMDw+A==
X-Received: by 10.28.47.67 with SMTP id v64mr579476wmv.84.1501749354911;
	Thu, 03 Aug 2017 01:35:54 -0700 (PDT)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	e9sm1723461wmi.40.2017.08.03.01.35.54
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 03 Aug 2017 01:35:54 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Luiz Capitulino &lt;lcapitulino@redhat.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	&lt;linux-mm@kvack.org&gt;, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH] mm,
	hugetlb: do not allocate non-migrateable gigantic pages from
	movable zones
Date: Thu,  3 Aug 2017 10:35:49 +0200
Message-Id: &lt;20170803083549.21407-1-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.13.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Aug. 3, 2017, 8:35 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

alloc_gigantic_page doesn&#39;t consider movability of the gigantic hugetlb
when scanning eligible ranges for the allocation. As 1GB hugetlb pages
are not movable currently this can break the movable zone assumption
that all allocations are migrateable and as such break memory hotplug.

Reorganize the code and use the standard zonelist allocations scheme
that we use for standard hugetbl pages. htlb_alloc_mask will ensure that
only migratable hugetlb pages will ever see a movable zone.

Fixes: 944d9fec8d7a (&quot;hugetlb: add support for gigantic page allocation at runtime&quot;)
<span class="reviewed-by">Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---

Hi,
I have posted this previously more or less as an RFC [1] because the
patch is a result of a code review not a real bug report. I wanted to
know more about the motivation why the original patch (944d9fec8d7a)
did the allocation that way but the more I think about it the more I am
convinced that this was just an omission because not everybody is aware
of zone movable semantic.

Mike has reviewed the code and did some smoke testing. I&#39;ve done some
testing as well.

Therefore I am sending the patch for inclusion.

[1] http://lkml.kernel.org/r/20170726105004.GI2981@dhcp22.suse.cz

 mm/hugetlb.c | 35 ++++++++++++++++++++---------------
 1 file changed, 20 insertions(+), 15 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index bc48ee783dd9..60530bb3d228 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1066,11 +1066,11 @@</span> <span class="p_context"> static void free_gigantic_page(struct page *page, unsigned int order)</span>
 }
 
 static int __alloc_gigantic_page(unsigned long start_pfn,
<span class="p_del">-				unsigned long nr_pages)</span>
<span class="p_add">+				unsigned long nr_pages, gfp_t gfp_mask)</span>
 {
 	unsigned long end_pfn = start_pfn + nr_pages;
 	return alloc_contig_range(start_pfn, end_pfn, MIGRATE_MOVABLE,
<span class="p_del">-				  GFP_KERNEL);</span>
<span class="p_add">+				  gfp_mask);</span>
 }
 
 static bool pfn_range_valid_gigantic(struct zone *z,
<span class="p_chunk">@@ -1108,19 +1108,24 @@</span> <span class="p_context"> static bool zone_spans_last_pfn(const struct zone *zone,</span>
 	return zone_spans_pfn(zone, last_pfn);
 }
 
<span class="p_del">-static struct page *alloc_gigantic_page(int nid, unsigned int order)</span>
<span class="p_add">+static struct page *alloc_gigantic_page(int nid, struct hstate *h)</span>
 {
<span class="p_add">+	unsigned int order = huge_page_order(h);</span>
 	unsigned long nr_pages = 1 &lt;&lt; order;
 	unsigned long ret, pfn, flags;
<span class="p_del">-	struct zone *z;</span>
<span class="p_add">+	struct zonelist *zonelist;</span>
<span class="p_add">+	struct zone *zone;</span>
<span class="p_add">+	struct zoneref *z;</span>
<span class="p_add">+	gfp_t gfp_mask;</span>
 
<span class="p_del">-	z = NODE_DATA(nid)-&gt;node_zones;</span>
<span class="p_del">-	for (; z - NODE_DATA(nid)-&gt;node_zones &lt; MAX_NR_ZONES; z++) {</span>
<span class="p_del">-		spin_lock_irqsave(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h) | __GFP_THISNODE;</span>
<span class="p_add">+	zonelist = node_zonelist(nid, gfp_mask);</span>
<span class="p_add">+	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), NULL) {</span>
<span class="p_add">+		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
 
<span class="p_del">-		pfn = ALIGN(z-&gt;zone_start_pfn, nr_pages);</span>
<span class="p_del">-		while (zone_spans_last_pfn(z, pfn, nr_pages)) {</span>
<span class="p_del">-			if (pfn_range_valid_gigantic(z, pfn, nr_pages)) {</span>
<span class="p_add">+		pfn = ALIGN(zone-&gt;zone_start_pfn, nr_pages);</span>
<span class="p_add">+		while (zone_spans_last_pfn(zone, pfn, nr_pages)) {</span>
<span class="p_add">+			if (pfn_range_valid_gigantic(zone, pfn, nr_pages)) {</span>
 				/*
 				 * We release the zone lock here because
 				 * alloc_contig_range() will also lock the zone
<span class="p_chunk">@@ -1128,16 +1133,16 @@</span> <span class="p_context"> static struct page *alloc_gigantic_page(int nid, unsigned int order)</span>
 				 * spinning on this lock, it may win the race
 				 * and cause alloc_contig_range() to fail...
 				 */
<span class="p_del">-				spin_unlock_irqrestore(&amp;z-&gt;lock, flags);</span>
<span class="p_del">-				ret = __alloc_gigantic_page(pfn, nr_pages);</span>
<span class="p_add">+				spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="p_add">+				ret = __alloc_gigantic_page(pfn, nr_pages, gfp_mask);</span>
 				if (!ret)
 					return pfn_to_page(pfn);
<span class="p_del">-				spin_lock_irqsave(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+				spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
 			}
 			pfn += nr_pages;
 		}
 
<span class="p_del">-		spin_unlock_irqrestore(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
 	}
 
 	return NULL;
<span class="p_chunk">@@ -1150,7 +1155,7 @@</span> <span class="p_context"> static struct page *alloc_fresh_gigantic_page_node(struct hstate *h, int nid)</span>
 {
 	struct page *page;
 
<span class="p_del">-	page = alloc_gigantic_page(nid, huge_page_order(h));</span>
<span class="p_add">+	page = alloc_gigantic_page(nid, h);</span>
 	if (page) {
 		prep_compound_gigantic_page(page, huge_page_order(h));
 		prep_new_huge_page(h, page, nid);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



