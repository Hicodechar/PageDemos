
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>powerpc/mm/radix: fix STD_MMU_64 typo - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    powerpc/mm/radix: fix STD_MMU_64 typo</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109431">Valentin Rothberg</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 3, 2016, 6:59 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1462258767-83025-1-git-send-email-valentinrothberg@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9000671/mbox/"
   >mbox</a>
|
   <a href="/patch/9000671/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9000671/">/patch/9000671/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 8107ABF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 May 2016 07:01:09 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E2FF420272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 May 2016 07:01:08 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 35D3020270
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 May 2016 07:01:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755402AbcECHBE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 3 May 2016 03:01:04 -0400
Received: from mail-wm0-f54.google.com ([74.125.82.54]:37540 &quot;EHLO
	mail-wm0-f54.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752411AbcECHBB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 3 May 2016 03:01:01 -0400
Received: by mail-wm0-f54.google.com with SMTP id a17so21187277wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 03 May 2016 00:01:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=from:to:cc:subject:date:message-id;
	bh=9c/JmpomSD5wRW0YaXVdz6TklXITs8xlHtk9YHcYsWQ=;
	b=SU1yU17vPlgBchmE/AJxdZilOKCjWQ9Wm1i4O12cBQxpTXvk4VAeNfAO7+KFCy/Z+B
	iratvosLFAwTM5XNZ+Fwmxay52xVh/Uzynb0evwvHUEu4oX3zLleiGUBLKdyx9jskTAX
	nIwcypHW29V/yU/HatpeRIbh1GbtS6HxJurcWWVW529f0eXE6okH+itRkZE8xHS/zzXL
	RHdwKlrJUAw6AF7JknTU/ZGgfaiZQDjbb6rKYXPa323V2Y5DxdCj/IlOMXJLy8Nu3tmQ
	nOgzS9cpf9p5zZoOLgHbEJzQuUHtoYbbsZBt6uKs/3vg7KA1GGW6mFF12af6XJSh/vAQ
	1c0g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=9c/JmpomSD5wRW0YaXVdz6TklXITs8xlHtk9YHcYsWQ=;
	b=Ug3Sy09H/MJm1niErs4DE4H5QXbhzCi6iiZ85+t/LzUF/b2s4H6hXzbTUOe782GcTX
	R3gUNCHPC8ROTnIyvDekVOT3AW3q21secyY2l++b3i2/D4ifdhZyAVUXPksz836Lo3Xw
	GoHp7feyXhnTWCHCDwO+52jqLOrg2RkmRVbxE+kSqwGpPjv4D1Vd+l6i0fn0JtK4Pah3
	2ELWnDPeKyiA1Fgk90BoVC9KIDzBk1LD38zDcKdAul57aP7fKhkxnfO6xd4Kkn3kcWG+
	MBl44ogmEkdB/PsqlxmCMl4CKhteN+F/jGJRHgnrQGzK8yruwyJ8+iCmPGUa45xg6pIH
	JWJA==
X-Gm-Message-State: AOPr4FUC48cyewoRM8cJnibFuuII0Hva9jGuZnDcNm4VFMPH3paCsmdrxICppWsEDr+5ig==
X-Received: by 10.194.175.70 with SMTP id by6mr982887wjc.19.1462258860156;
	Tue, 03 May 2016 00:01:00 -0700 (PDT)
Received: from localhost.localdomain
	(i4lab-dhcp156.informatik.uni-erlangen.de. [131.188.42.156])
	by smtp.gmail.com with ESMTPSA id
	lh1sm2094874wjb.20.2016.05.03.00.00.58
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 03 May 2016 00:00:58 -0700 (PDT)
From: Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;
To: aneesh.kumar@linux.vnet.ibm.com, mpe@ellerman.id.au
Cc: linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org,
	Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;
Subject: [PATCH] powerpc/mm/radix: fix STD_MMU_64 typo
Date: Tue,  3 May 2016 08:59:27 +0200
Message-Id: &lt;1462258767-83025-1-git-send-email-valentinrothberg@gmail.com&gt;
X-Mailer: git-send-email 2.7.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	RP_MATCHES_RCVD, 
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109431">Valentin Rothberg</a> - May 3, 2016, 6:59 a.m.</div>
<pre class="content">
s/MMU_STD_64/STD_MMU_64/

Fixes: 11ffc1cfa4c2 (&quot;powerpc/mm/radix: Use STD_MMU_64 to properly
                      isolate hash related code&quot;)
<span class="signed-off-by">Signed-off-by: Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;</span>
---

I only compile tested this change.  The issue has been detected with
scripts/checkkconfigsymbols.py

 arch/powerpc/kernel/mce_power.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - May 3, 2016, 9:13 a.m.</div>
<pre class="content">
Valentin Rothberg &lt;valentinrothberg@gmail.com&gt; writes:
<span class="quote">
&gt; s/MMU_STD_64/STD_MMU_64/</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Fixes: 11ffc1cfa4c2 (&quot;powerpc/mm/radix: Use STD_MMU_64 to properly</span>
<span class="quote">&gt;                       isolate hash related code&quot;)</span>
<span class="quote">&gt; Signed-off-by: Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;</span>
<span class="reviewed-by">
Reviewed-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I only compile tested this change.  The issue has been detected with</span>
<span class="quote">&gt; scripts/checkkconfigsymbols.py</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/powerpc/kernel/mce_power.c | 10 +++++-----</span>
<span class="quote">&gt;  1 file changed, 5 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/powerpc/kernel/mce_power.c b/arch/powerpc/kernel/mce_power.c</span>
<span class="quote">&gt; index bec70338672e..7353991c4ece 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/kernel/mce_power.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/kernel/mce_power.c</span>
<span class="quote">&gt; @@ -80,7 +80,7 @@ void __flush_tlb_power9(unsigned int action)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /* flush SLBs and reload */</span>
<span class="quote">&gt; -#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_STD_MMU_64</span>
<span class="quote">&gt;  static void flush_and_reload_slb(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct slb_shadow *slb;</span>
<span class="quote">&gt; @@ -125,7 +125,7 @@ static long mce_handle_derror(uint64_t dsisr, uint64_t slb_error_bits)</span>
<span class="quote">&gt;  	 * reset the error bits whenever we handle them so that at the end</span>
<span class="quote">&gt;  	 * we can check whether we handled all of them or not.</span>
<span class="quote">&gt;  	 * */</span>
<span class="quote">&gt; -#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_STD_MMU_64</span>
<span class="quote">&gt;  	if (dsisr &amp; slb_error_bits) {</span>
<span class="quote">&gt;  		flush_and_reload_slb();</span>
<span class="quote">&gt;  		/* reset error bits */</span>
<span class="quote">&gt; @@ -157,7 +157,7 @@ static long mce_handle_common_ierror(uint64_t srr1)</span>
<span class="quote">&gt;  	switch (P7_SRR1_MC_IFETCH(srr1)) {</span>
<span class="quote">&gt;  	case 0:</span>
<span class="quote">&gt;  		break;</span>
<span class="quote">&gt; -#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_STD_MMU_64</span>
<span class="quote">&gt;  	case P7_SRR1_MC_IFETCH_SLB_PARITY:</span>
<span class="quote">&gt;  	case P7_SRR1_MC_IFETCH_SLB_MULTIHIT:</span>
<span class="quote">&gt;  		/* flush and reload SLBs for SLB errors. */</span>
<span class="quote">&gt; @@ -184,7 +184,7 @@ static long mce_handle_ierror_p7(uint64_t srr1)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	handled = mce_handle_common_ierror(srr1);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_STD_MMU_64</span>
<span class="quote">&gt;  	if (P7_SRR1_MC_IFETCH(srr1) == P7_SRR1_MC_IFETCH_SLB_BOTH) {</span>
<span class="quote">&gt;  		flush_and_reload_slb();</span>
<span class="quote">&gt;  		handled = 1;</span>
<span class="quote">&gt; @@ -332,7 +332,7 @@ static long mce_handle_ierror_p8(uint64_t srr1)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	handled = mce_handle_common_ierror(srr1);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_STD_MMU_64</span>
<span class="quote">&gt;  	if (P7_SRR1_MC_IFETCH(srr1) == P8_SRR1_MC_IFETCH_ERAT_MULTIHIT) {</span>
<span class="quote">&gt;  		flush_and_reload_slb();</span>
<span class="quote">&gt;  		handled = 1;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.4</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - May 4, 2016, 10:40 p.m.</div>
<pre class="content">
On Tue, 2016-03-05 at 06:59:27 UTC, Valentin Rothberg wrote:
<span class="quote">&gt; s/MMU_STD_64/STD_MMU_64/</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 11ffc1cfa4c2 (&quot;powerpc/mm/radix: Use STD_MMU_64 to properly</span>
<span class="quote">&gt;                       isolate hash related code&quot;)</span>
<span class="quote">&gt; Signed-off-by: Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>

Applied to powerpc next, thanks.

https://git.kernel.org/powerpc/c/ce7da681b8fdb374a401652a93

cheers
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/kernel/mce_power.c b/arch/powerpc/kernel/mce_power.c</span>
<span class="p_header">index bec70338672e..7353991c4ece 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/mce_power.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/mce_power.c</span>
<span class="p_chunk">@@ -80,7 +80,7 @@</span> <span class="p_context"> void __flush_tlb_power9(unsigned int action)</span>
 
 
 /* flush SLBs and reload */
<span class="p_del">-#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="p_add">+#ifdef CONFIG_PPC_STD_MMU_64</span>
 static void flush_and_reload_slb(void)
 {
 	struct slb_shadow *slb;
<span class="p_chunk">@@ -125,7 +125,7 @@</span> <span class="p_context"> static long mce_handle_derror(uint64_t dsisr, uint64_t slb_error_bits)</span>
 	 * reset the error bits whenever we handle them so that at the end
 	 * we can check whether we handled all of them or not.
 	 * */
<span class="p_del">-#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="p_add">+#ifdef CONFIG_PPC_STD_MMU_64</span>
 	if (dsisr &amp; slb_error_bits) {
 		flush_and_reload_slb();
 		/* reset error bits */
<span class="p_chunk">@@ -157,7 +157,7 @@</span> <span class="p_context"> static long mce_handle_common_ierror(uint64_t srr1)</span>
 	switch (P7_SRR1_MC_IFETCH(srr1)) {
 	case 0:
 		break;
<span class="p_del">-#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="p_add">+#ifdef CONFIG_PPC_STD_MMU_64</span>
 	case P7_SRR1_MC_IFETCH_SLB_PARITY:
 	case P7_SRR1_MC_IFETCH_SLB_MULTIHIT:
 		/* flush and reload SLBs for SLB errors. */
<span class="p_chunk">@@ -184,7 +184,7 @@</span> <span class="p_context"> static long mce_handle_ierror_p7(uint64_t srr1)</span>
 
 	handled = mce_handle_common_ierror(srr1);
 
<span class="p_del">-#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="p_add">+#ifdef CONFIG_PPC_STD_MMU_64</span>
 	if (P7_SRR1_MC_IFETCH(srr1) == P7_SRR1_MC_IFETCH_SLB_BOTH) {
 		flush_and_reload_slb();
 		handled = 1;
<span class="p_chunk">@@ -332,7 +332,7 @@</span> <span class="p_context"> static long mce_handle_ierror_p8(uint64_t srr1)</span>
 
 	handled = mce_handle_common_ierror(srr1);
 
<span class="p_del">-#ifdef CONFIG_PPC_MMU_STD_64</span>
<span class="p_add">+#ifdef CONFIG_PPC_STD_MMU_64</span>
 	if (P7_SRR1_MC_IFETCH(srr1) == P8_SRR1_MC_IFETCH_ERAT_MULTIHIT) {
 		flush_and_reload_slb();
 		handled = 1;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



