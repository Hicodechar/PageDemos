
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/1] powerpc/irq: tidy up inconsistent context in migrate_irqs() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/1] powerpc/irq: tidy up inconsistent context in migrate_irqs()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2015, 11:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1450265518.8726.2.camel@ellerman.id.au&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7860921/mbox/"
   >mbox</a>
|
   <a href="/patch/7860921/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7860921/">/patch/7860921/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 919E0BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 11:32:15 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 50176202D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 11:32:14 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F351F202AE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 11:32:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753662AbbLPLcJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Dec 2015 06:32:09 -0500
Received: from ozlabs.org ([103.22.144.67]:39279 &quot;EHLO ozlabs.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751167AbbLPLcG (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Dec 2015 06:32:06 -0500
Received: from authenticated.ozlabs.org (localhost [127.0.0.1])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128
	bits)) (No client certificate requested)
	by ozlabs.org (Postfix) with ESMTPSA id 2C4031402C9;
	Wed, 16 Dec 2015 22:32:04 +1100 (AEDT)
Message-ID: &lt;1450265518.8726.2.camel@ellerman.id.au&gt;
Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in
	migrate_irqs()
From: Michael Ellerman &lt;mpe@ellerman.id.au&gt;
To: Daniel Axtens &lt;dja@axtens.net&gt;,
	Zhang Zhuoyu &lt;hellozzy1988@126.com&gt;, benh@kernel.crashing.org,
	paulus@samba.org, tglx@linutronix.de, jiang.liu@linux.intel.com,
	zhangzhuoyu@cmss.chinamobile.com
Cc: linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org
Date: Wed, 16 Dec 2015 22:31:58 +1100
In-Reply-To: &lt;878u4vapsm.fsf@gamma.ozlabs.ibm.com&gt;
References: &lt;1450242896-8322-1-git-send-email-hellozzy1988@126.com&gt;
	&lt;878u4vapsm.fsf@gamma.ozlabs.ibm.com&gt;
Content-Type: text/plain; charset=&quot;UTF-8&quot;
X-Mailer: Evolution 3.16.5-1ubuntu3 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - Dec. 16, 2015, 11:31 a.m.</div>
<pre class="content">
On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A couple of things.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">
&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;d be more comfortable removing them if I understood why they were</span>
<span class="quote">&gt; added. But they&#39;ve been around since the beginning of git history so</span>
<span class="quote">&gt; that could be a bit difficult.</span>

It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below, named
fixup_irqs()).

But I suspect those lines are actually there very deliberately.

The function is migrating interrupts off the recently offlined cpu, because we
don&#39;t want to take interrupts on an offline cpu.

After it&#39;s finished doing the migration, it wants to make sure there are no
interrupts that have already been latched by the offline cpu. So it briefly
enables interrupts, waits a bit for the interrupts to fire, and the disables
them again.

Whether that actually works I couldn&#39;t say, it is very old code, and it&#39;s used
on platforms where I don&#39;t ever test cpu hotplug (85xx &amp; powermac).

cheers


commit d58830b9a740ad1c3b089196d4afdaea251dc701
Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;
Date:   Fri Mar 4 17:34:00 2005 -0800

    [PATCH] ppc64: generic hotplug cpu support
    
    Patch provides a generic hotplug cpu implementation, with the only current
    user being pmac.  This doesn&#39;t replace real hotplug code as is currently
    used by LPAR systems.  Ben i can add the additional pmac specific code to
    put the processor into a sleeping state seperately.  Thanks to Nathan for
    testing.
<span class="signed-off-by">    
    Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="signed-off-by">    Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="signed-off-by">    Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59011">Denis Kirjanov</a> - Dec. 16, 2015, 11:54 a.m.</div>
<pre class="content">
On 12/16/15, Michael Ellerman &lt;mpe@ellerman.id.au&gt; wrote:
<span class="quote">&gt; On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:</span>
<span class="quote">&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; A couple of things.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;d be more comfortable removing them if I understood why they were</span>
<span class="quote">&gt;&gt; added. But they&#39;ve been around since the beginning of git history so</span>
<span class="quote">&gt;&gt; that could be a bit difficult.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below, named</span>
<span class="quote">&gt; fixup_irqs()).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But I suspect those lines are actually there very deliberately.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The function is migrating interrupts off the recently offlined cpu, because</span>
<span class="quote">&gt; we</span>
<span class="quote">&gt; don&#39;t want to take interrupts on an offline cpu.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; After it&#39;s finished doing the migration, it wants to make sure there are no</span>
<span class="quote">&gt; interrupts that have already been latched by the offline cpu. So it briefly</span>
<span class="quote">&gt; enables interrupts, waits a bit for the interrupts to fire, and the disables</span>
<span class="quote">&gt; them again.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Whether that actually works I couldn&#39;t say, it is very old code, and it&#39;s</span>
<span class="quote">&gt; used</span>
<span class="quote">&gt; on platforms where I don&#39;t ever test cpu hotplug (85xx &amp; powermac).</span>

Yeah, it would be nice to test this change. I&#39;ll try it on my quad-core pmac
machine
<span class="quote">
&gt;</span>
<span class="quote">&gt; cheers</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; commit d58830b9a740ad1c3b089196d4afdaea251dc701</span>
<span class="quote">&gt; Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; Date:   Fri Mar 4 17:34:00 2005 -0800</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;     [PATCH] ppc64: generic hotplug cpu support</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;     Patch provides a generic hotplug cpu implementation, with the only</span>
<span class="quote">&gt; current</span>
<span class="quote">&gt;     user being pmac.  This doesn&#39;t replace real hotplug code as is currently</span>
<span class="quote">&gt;     used by LPAR systems.  Ben i can add the additional pmac specific code</span>
<span class="quote">&gt; to</span>
<span class="quote">&gt;     put the processor into a sleeping state seperately.  Thanks to Nathan</span>
<span class="quote">&gt; for</span>
<span class="quote">&gt;     testing.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;     Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt;     Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="quote">&gt;     Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig</span>
<span class="quote">&gt; index a7933ab62e98..861f4460ad02 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/ppc64/Kconfig</span>
<span class="quote">&gt; @@ -313,7 +313,7 @@ source &quot;drivers/pci/Kconfig&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  config HOTPLUG_CPU</span>
<span class="quote">&gt;  	bool &quot;Support for hot-pluggable CPUs&quot;</span>
<span class="quote">&gt; -	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="quote">&gt; +	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES || PPC_PMAC)</span>
<span class="quote">&gt;  	select HOTPLUG</span>
<span class="quote">&gt;  	---help---</span>
<span class="quote">&gt;  	  Say Y here to be able to turn CPUs off and on.</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; index 398b4682127b..51eb6af14a8f 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; @@ -293,6 +293,10 @@ static int native_idle(void)</span>
<span class="quote">&gt;  			power4_idle();</span>
<span class="quote">&gt;  		if (need_resched())</span>
<span class="quote">&gt;  			schedule();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="quote">&gt; +		    system_state == SYSTEM_RUNNING)</span>
<span class="quote">&gt; +			cpu_die();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; index 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; @@ -116,6 +116,35 @@ skip:</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; +void fixup_irqs(cpumask_t map)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned int irq;</span>
<span class="quote">&gt; +	static int warned;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for_each_irq(irq) {</span>
<span class="quote">&gt; +		cpumask_t mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="quote">&gt; +		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="quote">&gt; +			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; +			mask = map;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="quote">&gt; +			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="quote">&gt; +		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="quote">&gt; +			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	local_irq_enable();</span>
<span class="quote">&gt; +	mdelay(1);</span>
<span class="quote">&gt; +	local_irq_disable();</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  extern int noirqdebug;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; index f603397b7b04..0426892749c6 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; @@ -320,8 +320,9 @@ static  void __init pSeries_discover_pic(void)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -static void pSeries_cpu_die(void)</span>
<span class="quote">&gt; +static void pSeries_mach_cpu_die(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	idle_task_exit();</span>
<span class="quote">&gt;  	local_irq_disable();</span>
<span class="quote">&gt;  	/* Some hardware requires clearing the CPPR, while other hardware does not</span>
<span class="quote">&gt;  	 * it is safe either way</span>
<span class="quote">&gt; @@ -599,7 +600,7 @@ struct machdep_calls __initdata pSeries_md = {</span>
<span class="quote">&gt;  	.power_off		= rtas_power_off,</span>
<span class="quote">&gt;  	.halt			= rtas_halt,</span>
<span class="quote">&gt;  	.panic			= rtas_os_term,</span>
<span class="quote">&gt; -	.cpu_die		= pSeries_cpu_die,</span>
<span class="quote">&gt; +	.cpu_die		= pSeries_mach_cpu_die,</span>
<span class="quote">&gt;  	.get_boot_time		= pSeries_get_boot_time,</span>
<span class="quote">&gt;  	.get_rtc_time		= pSeries_get_rtc_time,</span>
<span class="quote">&gt;  	.set_rtc_time		= pSeries_set_rtc_time,</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/pmac_setup.c b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; index 41fa6e95a06f..5c56fc956245 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; @@ -439,6 +439,9 @@ static int __init pmac_probe(int platform)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  struct machdep_calls __initdata pmac_md = {</span>
<span class="quote">&gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; +	.cpu_die		= generic_mach_cpu_die,</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  	.probe			= pmac_probe,</span>
<span class="quote">&gt;  	.setup_arch		= pmac_setup_arch,</span>
<span class="quote">&gt;  	.init_early		= pmac_init_early,</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/pmac_smp.c b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; index e0b37079943c..c27588ede2fe 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; @@ -308,4 +308,9 @@ struct smp_ops_t core99_smp_ops __pmacdata = {</span>
<span class="quote">&gt;  void __init pmac_setup_smp(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	smp_ops = &amp;core99_smp_ops;</span>
<span class="quote">&gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; +	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="quote">&gt; +	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="quote">&gt; +	smp_ops-&gt;cpu_die = generic_cpu_die;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/setup.c b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; index d98c320828e5..078c3551ce8a 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; @@ -1377,9 +1377,6 @@ early_param(&quot;xmon&quot;, early_xmon);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  void cpu_die(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	idle_task_exit();</span>
<span class="quote">&gt;  	if (ppc_md.cpu_die)</span>
<span class="quote">&gt;  		ppc_md.cpu_die();</span>
<span class="quote">&gt; -	local_irq_disable();</span>
<span class="quote">&gt; -	for (;;);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; index a9e43792f8fe..cde1947432a1 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/sysdev.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/notifier.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/atomic.h&gt;</span>
<span class="quote">&gt; @@ -406,10 +407,89 @@ void __devinit smp_prepare_boot_cpu(void)</span>
<span class="quote">&gt;  	current_set[boot_cpuid] = current-&gt;thread_info;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; +/* State of each CPU during hotplug phases */</span>
<span class="quote">&gt; +DEFINE_PER_CPU(int, cpu_state) = { 0 };</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int generic_cpu_disable(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned int cpu = smp_processor_id();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (cpu == boot_cpuid)</span>
<span class="quote">&gt; +		return -EBUSY;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	systemcfg-&gt;processorCount--;</span>
<span class="quote">&gt; +	cpu_clear(cpu, cpu_online_map);</span>
<span class="quote">&gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int generic_cpu_enable(unsigned int cpu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	/* Do the normal bootup if we haven&#39;t</span>
<span class="quote">&gt; +	 * already bootstrapped. */</span>
<span class="quote">&gt; +	if (system_state != SYSTEM_RUNNING)</span>
<span class="quote">&gt; +		return -ENOSYS;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* get the target out of it&#39;s holding state */</span>
<span class="quote">&gt; +	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="quote">&gt; +	wmb();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	while (!cpu_online(cpu))</span>
<span class="quote">&gt; +		cpu_relax();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; +	/* counter the irq disable in fixup_irqs */</span>
<span class="quote">&gt; +	local_irq_enable();</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void generic_cpu_die(unsigned int cpu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int i;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (i = 0; i &lt; 100; i++) {</span>
<span class="quote">&gt; +		rmb();</span>
<span class="quote">&gt; +		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="quote">&gt; +			return;</span>
<span class="quote">&gt; +		msleep(100);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void generic_mach_cpu_die(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned int cpu;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	local_irq_disable();</span>
<span class="quote">&gt; +	cpu = smp_processor_id();</span>
<span class="quote">&gt; +	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="quote">&gt; +	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="quote">&gt; +	wmb();</span>
<span class="quote">&gt; +	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="quote">&gt; +		cpu_relax();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	flush_tlb_pending();</span>
<span class="quote">&gt; +	cpu_set(cpu, cpu_online_map);</span>
<span class="quote">&gt; +	local_irq_enable();</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int __devinit cpu_enable(unsigned int cpu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (smp_ops-&gt;cpu_enable)</span>
<span class="quote">&gt; +		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return -ENOSYS;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  int __devinit __cpu_up(unsigned int cpu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int c;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	if (!cpu_enable(cpu))</span>
<span class="quote">&gt; +		return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */</span>
<span class="quote">&gt;  	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))</span>
<span class="quote">&gt;  		return -ENOENT;</span>
<span class="quote">&gt; diff --git a/arch/ppc64/kernel/sysfs.c b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; index bbc9dcda17f7..0925694c3ce5 100644</span>
<span class="quote">&gt; --- a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; +++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; @@ -18,7 +18,7 @@</span>
<span class="quote">&gt;  #include &lt;asm/systemcfg.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/paca.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/lppaca.h&gt;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +#include &lt;asm/machdep.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct cpu, cpu_devices);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -413,9 +413,7 @@ static int __init topology_init(void)</span>
<span class="quote">&gt;  		 * CPU.  For instance, the boot cpu might never be valid</span>
<span class="quote">&gt;  		 * for hotplugging.</span>
<span class="quote">&gt;  		 */</span>
<span class="quote">&gt; -#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; -		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt; +		if (!ppc_md.cpu_die)</span>
<span class="quote">&gt;  			c-&gt;no_control = 1;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  		if (cpu_online(cpu) || (c-&gt;no_control == 0)) {</span>
<span class="quote">&gt; diff --git a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; index 476d2185ffd1..03fe499c7604 100644</span>
<span class="quote">&gt; --- a/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; +++ b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; @@ -30,6 +30,7 @@ struct smp_ops_t {</span>
<span class="quote">&gt;  	void  (*setup_cpu)(int nr);</span>
<span class="quote">&gt;  	void  (*take_timebase)(void);</span>
<span class="quote">&gt;  	void  (*give_timebase)(void);</span>
<span class="quote">&gt; +	int   (*cpu_enable)(unsigned int nr);</span>
<span class="quote">&gt;  	int   (*cpu_disable)(void);</span>
<span class="quote">&gt;  	void  (*cpu_die)(unsigned int nr);</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt; diff --git a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; index 965980bbbb57..c8646fa999c2 100644</span>
<span class="quote">&gt; --- a/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; +++ b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; @@ -29,7 +29,7 @@</span>
<span class="quote">&gt;  extern int boot_cpuid;</span>
<span class="quote">&gt;  extern int boot_cpuid_phys;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="quote">&gt; +extern void cpu_die(void);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -37,6 +37,13 @@ extern void smp_send_debugger_break(int cpu);</span>
<span class="quote">&gt;  struct pt_regs;</span>
<span class="quote">&gt;  extern void smp_message_recv(int, struct pt_regs *);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; +extern void fixup_irqs(cpumask_t map);</span>
<span class="quote">&gt; +int generic_cpu_disable(void);</span>
<span class="quote">&gt; +int generic_cpu_enable(unsigned int cpu);</span>
<span class="quote">&gt; +void generic_cpu_die(unsigned int cpu);</span>
<span class="quote">&gt; +void generic_mach_cpu_die(void);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define __smp_processor_id() (get_paca()-&gt;paca_index)</span>
<span class="quote">&gt;  #define hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149511">Zhang Zhuoyu</a> - Dec. 16, 2015, 2:45 p.m.</div>
<pre class="content">
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Denis Kirjanov [mailto:kda@linux-powerpc.org]</span>
<span class="quote">&gt; Sent: Wednesday, December 16, 2015 7:55 PM</span>
<span class="quote">&gt; To: Michael Ellerman</span>
<span class="quote">&gt; Cc: Daniel Axtens; Zhang Zhuoyu; benh@kernel.crashing.org;</span>
<span class="quote">&gt; paulus@samba.org; tglx@linutronix.de; jiang.liu@linux.intel.com;</span>
<span class="quote">&gt; zhangzhuoyu@cmss.chinamobile.com; linuxppc-dev@lists.ozlabs.org; linux-</span>
<span class="quote">&gt; kernel@vger.kernel.org</span>
<span class="quote">&gt; Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt; migrate_irqs()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 12/16/15, Michael Ellerman &lt;mpe@ellerman.id.au&gt; wrote:</span>
<span class="quote">&gt; &gt; On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:</span>
<span class="quote">&gt; &gt;&gt; Hi,</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; A couple of things.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>

Mmm, My mistake, I will correct it next time.
<span class="quote">
&gt; &gt;&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; I&#39;d be more comfortable removing them if I understood why they were</span>
<span class="quote">&gt; &gt;&gt; added. But they&#39;ve been around since the beginning of git history so</span>
<span class="quote">&gt; &gt;&gt; that could be a bit difficult.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below, named</span>
<span class="quote">&gt; &gt; fixup_irqs()).</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; But I suspect those lines are actually there very deliberately.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; The function is migrating interrupts off the recently offlined cpu,</span>
<span class="quote">&gt; &gt; because we don&#39;t want to take interrupts on an offline cpu.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; After it&#39;s finished doing the migration, it wants to make sure there</span>
<span class="quote">&gt; &gt; are no interrupts that have already been latched by the offline cpu.</span>
<span class="quote">&gt; &gt; So it briefly enables interrupts, waits a bit for the interrupts to</span>
<span class="quote">&gt; &gt; fire, and the disables them again.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Whether that actually works I couldn&#39;t say, it is very old code, and</span>
<span class="quote">&gt; &gt; it&#39;s used on platforms where I don&#39;t ever test cpu hotplug (85xx &amp;</span>
<span class="quote">&gt; &gt; powermac).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah, it would be nice to test this change. I&#39;ll try it on my quad-core pmac</span>
<span class="quote">&gt; machine</span>
<span class="quote">&gt; </span>

Thanks Michael for help explaining the code logic, it also resolved my doubts.
These snippets are suspected when I did PM benchmark on FSL MPC85xx series(T1040, T4240), 
For T4240, which has 24 CPUs, it waits 1ms in migrate_irqs()each time a CPU is plugged offline,
it seems a waste of time. I also did a test on T1040, after plugging offline/online CPU hundreds of times,
system works well. If you have any other suggestion on how to test, I&#39;d like to do more benchmark.
(1)for((i=0; i&lt;1000; i++)); do echo 0 &gt; /sys/devices/system/cpu/cpu1/online; 
sleep 1; echo 1 &gt; /sys/devices/system/cpu/cpu1/online; done
(2)root@t1040rdb:~# cat /proc/interrupts
           CPU0       CPU1       CPU2       CPU3
 36:        393          1        223          1   OpenPIC    36 Level     serial
LOC:       1946       1486       1555       1361   Local timer interrupts
DBL:       7371       9707       9390       7568   Doorbell interrupts
(3)root@t1040rdb:~# ps
  PID TTY          TIME CMD
 2751 ttyS0    00:00:00 sh
 2757 ttyS0    00:00:00 ps
root@t1040rdb:~# taskset -pc 1 2751
pid 2751&#39;s current affinity list: 0-3
pid 2751&#39;s new affinity list: 1
root@t1040rdb:~#
root@t1040rdb:~#
root@t1040rdb:~#
root@t1040rdb:~# echo &quot;hello&quot;
hello
root@t1040rdb:~#
<span class="quote">
&gt; &gt;</span>
<span class="quote">&gt; &gt; cheers</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; commit d58830b9a740ad1c3b089196d4afdaea251dc701</span>
<span class="quote">&gt; &gt; Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt; Date:   Fri Mar 4 17:34:00 2005 -0800</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;     [PATCH] ppc64: generic hotplug cpu support</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;     Patch provides a generic hotplug cpu implementation, with the only</span>
<span class="quote">&gt; &gt; current</span>
<span class="quote">&gt; &gt;     user being pmac.  This doesn&#39;t replace real hotplug code as is currently</span>
<span class="quote">&gt; &gt;     used by LPAR systems.  Ben i can add the additional pmac specific</span>
<span class="quote">&gt; &gt; code to</span>
<span class="quote">&gt; &gt;     put the processor into a sleeping state seperately.  Thanks to</span>
<span class="quote">&gt; &gt; Nathan for</span>
<span class="quote">&gt; &gt;     testing.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;     Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt;     Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="quote">&gt; &gt;     Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig index</span>
<span class="quote">&gt; &gt; a7933ab62e98..861f4460ad02 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt; @@ -313,7 +313,7 @@ source &quot;drivers/pci/Kconfig&quot;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  config HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;  	bool &quot;Support for hot-pluggable CPUs&quot;</span>
<span class="quote">&gt; &gt; -	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="quote">&gt; &gt; +	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES ||</span>
<span class="quote">&gt; PPC_PMAC)</span>
<span class="quote">&gt; &gt;  	select HOTPLUG</span>
<span class="quote">&gt; &gt;  	---help---</span>
<span class="quote">&gt; &gt;  	  Say Y here to be able to turn CPUs off and on.</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c index</span>
<span class="quote">&gt; &gt; 398b4682127b..51eb6af14a8f 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt; @@ -293,6 +293,10 @@ static int native_idle(void)</span>
<span class="quote">&gt; &gt;  			power4_idle();</span>
<span class="quote">&gt; &gt;  		if (need_resched())</span>
<span class="quote">&gt; &gt;  			schedule();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="quote">&gt; &gt; +		    system_state == SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt; +			cpu_die();</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c index</span>
<span class="quote">&gt; &gt; 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt; @@ -116,6 +116,35 @@ skip:</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; +void fixup_irqs(cpumask_t map)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	unsigned int irq;</span>
<span class="quote">&gt; &gt; +	static int warned;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	for_each_irq(irq) {</span>
<span class="quote">&gt; &gt; +		cpumask_t mask;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="quote">&gt; &gt; +		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="quote">&gt; &gt; +			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt; +			mask = map;</span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; &gt; +		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="quote">&gt; &gt; +			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="quote">&gt; &gt; +		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="quote">&gt; &gt; +			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; +	mdelay(1);</span>
<span class="quote">&gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  extern int noirqdebug;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  /*</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; index f603397b7b04..0426892749c6 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; @@ -320,8 +320,9 @@ static  void __init pSeries_discover_pic(void)</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; -static void pSeries_cpu_die(void)</span>
<span class="quote">&gt; &gt; +static void pSeries_mach_cpu_die(void)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; +	idle_task_exit();</span>
<span class="quote">&gt; &gt;  	local_irq_disable();</span>
<span class="quote">&gt; &gt;  	/* Some hardware requires clearing the CPPR, while other hardware</span>
<span class="quote">&gt; does not</span>
<span class="quote">&gt; &gt;  	 * it is safe either way</span>
<span class="quote">&gt; &gt; @@ -599,7 +600,7 @@ struct machdep_calls __initdata pSeries_md = {</span>
<span class="quote">&gt; &gt;  	.power_off		= rtas_power_off,</span>
<span class="quote">&gt; &gt;  	.halt			= rtas_halt,</span>
<span class="quote">&gt; &gt;  	.panic			= rtas_os_term,</span>
<span class="quote">&gt; &gt; -	.cpu_die		= pSeries_cpu_die,</span>
<span class="quote">&gt; &gt; +	.cpu_die		= pSeries_mach_cpu_die,</span>
<span class="quote">&gt; &gt;  	.get_boot_time		= pSeries_get_boot_time,</span>
<span class="quote">&gt; &gt;  	.get_rtc_time		= pSeries_get_rtc_time,</span>
<span class="quote">&gt; &gt;  	.set_rtc_time		= pSeries_set_rtc_time,</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; b/arch/ppc64/kernel/pmac_setup.c index 41fa6e95a06f..5c56fc956245</span>
<span class="quote">&gt; &gt; 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; @@ -439,6 +439,9 @@ static int __init pmac_probe(int platform)  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  struct machdep_calls __initdata pmac_md = {</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; +	.cpu_die		= generic_mach_cpu_die,</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  	.probe			= pmac_probe,</span>
<span class="quote">&gt; &gt;  	.setup_arch		= pmac_setup_arch,</span>
<span class="quote">&gt; &gt;  	.init_early		= pmac_init_early,</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; b/arch/ppc64/kernel/pmac_smp.c index e0b37079943c..c27588ede2fe</span>
<span class="quote">&gt; 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; @@ -308,4 +308,9 @@ struct smp_ops_t core99_smp_ops __pmacdata = {</span>
<span class="quote">&gt; &gt; void __init pmac_setup_smp(void)  {</span>
<span class="quote">&gt; &gt;  	smp_ops = &amp;core99_smp_ops;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; +	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="quote">&gt; &gt; +	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="quote">&gt; &gt; +	smp_ops-&gt;cpu_die = generic_cpu_die;</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/setup.c b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; index d98c320828e5..078c3551ce8a 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; @@ -1377,9 +1377,6 @@ early_param(&quot;xmon&quot;, early_xmon);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  void cpu_die(void)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; -	idle_task_exit();</span>
<span class="quote">&gt; &gt;  	if (ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt;  		ppc_md.cpu_die();</span>
<span class="quote">&gt; &gt; -	local_irq_disable();</span>
<span class="quote">&gt; &gt; -	for (;;);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c index</span>
<span class="quote">&gt; &gt; a9e43792f8fe..cde1947432a1 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt; &gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;linux/sysdev.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; &gt; +#include &lt;linux/notifier.h&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/atomic.h&gt;</span>
<span class="quote">&gt; &gt; @@ -406,10 +407,89 @@ void __devinit smp_prepare_boot_cpu(void)</span>
<span class="quote">&gt; &gt;  	current_set[boot_cpuid] = current-&gt;thread_info;  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; +/* State of each CPU during hotplug phases */ DEFINE_PER_CPU(int,</span>
<span class="quote">&gt; &gt; +cpu_state) = { 0 };</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +int generic_cpu_disable(void)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	unsigned int cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	if (cpu == boot_cpuid)</span>
<span class="quote">&gt; &gt; +		return -EBUSY;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	systemcfg-&gt;processorCount--;</span>
<span class="quote">&gt; &gt; +	cpu_clear(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +int generic_cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; +	/* Do the normal bootup if we haven&#39;t</span>
<span class="quote">&gt; &gt; +	 * already bootstrapped. */</span>
<span class="quote">&gt; &gt; +	if (system_state != SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt; +		return -ENOSYS;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	/* get the target out of it&#39;s holding state */</span>
<span class="quote">&gt; &gt; +	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="quote">&gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	while (!cpu_online(cpu))</span>
<span class="quote">&gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt; +	/* counter the irq disable in fixup_irqs */</span>
<span class="quote">&gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +void generic_cpu_die(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; +	int i;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	for (i = 0; i &lt; 100; i++) {</span>
<span class="quote">&gt; &gt; +		rmb();</span>
<span class="quote">&gt; &gt; +		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="quote">&gt; &gt; +			return;</span>
<span class="quote">&gt; &gt; +		msleep(100);</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu); }</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +void generic_mach_cpu_die(void)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	unsigned int cpu;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt; +	cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt; +	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="quote">&gt; &gt; +	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="quote">&gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt; +	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="quote">&gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	flush_tlb_pending();</span>
<span class="quote">&gt; &gt; +	cpu_set(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static int __devinit cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; +	if (smp_ops-&gt;cpu_enable)</span>
<span class="quote">&gt; &gt; +		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	return -ENOSYS;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  int __devinit __cpu_up(unsigned int cpu)  {</span>
<span class="quote">&gt; &gt;  	int c;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +	if (!cpu_enable(cpu))</span>
<span class="quote">&gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */</span>
<span class="quote">&gt; &gt;  	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))</span>
<span class="quote">&gt; &gt;  		return -ENOENT;</span>
<span class="quote">&gt; &gt; diff --git a/arch/ppc64/kernel/sysfs.c b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; index bbc9dcda17f7..0925694c3ce5 100644</span>
<span class="quote">&gt; &gt; --- a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; +++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; @@ -18,7 +18,7 @@</span>
<span class="quote">&gt; &gt;  #include &lt;asm/systemcfg.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/paca.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/lppaca.h&gt;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; +#include &lt;asm/machdep.h&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  static DEFINE_PER_CPU(struct cpu, cpu_devices);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; @@ -413,9 +413,7 @@ static int __init topology_init(void)</span>
<span class="quote">&gt; &gt;  		 * CPU.  For instance, the boot cpu might never be valid</span>
<span class="quote">&gt; &gt;  		 * for hotplugging.</span>
<span class="quote">&gt; &gt;  		 */</span>
<span class="quote">&gt; &gt; -#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; -		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="quote">&gt; &gt; -#endif</span>
<span class="quote">&gt; &gt; +		if (!ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt;  			c-&gt;no_control = 1;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  		if (cpu_online(cpu) || (c-&gt;no_control == 0)) { diff --git</span>
<span class="quote">&gt; &gt; a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h index</span>
<span class="quote">&gt; &gt; 476d2185ffd1..03fe499c7604 100644</span>
<span class="quote">&gt; &gt; --- a/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt; +++ b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt; @@ -30,6 +30,7 @@ struct smp_ops_t {</span>
<span class="quote">&gt; &gt;  	void  (*setup_cpu)(int nr);</span>
<span class="quote">&gt; &gt;  	void  (*take_timebase)(void);</span>
<span class="quote">&gt; &gt;  	void  (*give_timebase)(void);</span>
<span class="quote">&gt; &gt; +	int   (*cpu_enable)(unsigned int nr);</span>
<span class="quote">&gt; &gt;  	int   (*cpu_disable)(void);</span>
<span class="quote">&gt; &gt;  	void  (*cpu_die)(unsigned int nr);</span>
<span class="quote">&gt; &gt;  };</span>
<span class="quote">&gt; &gt; diff --git a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h index</span>
<span class="quote">&gt; &gt; 965980bbbb57..c8646fa999c2 100644</span>
<span class="quote">&gt; &gt; --- a/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt; +++ b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt; @@ -29,7 +29,7 @@</span>
<span class="quote">&gt; &gt;  extern int boot_cpuid;</span>
<span class="quote">&gt; &gt;  extern int boot_cpuid_phys;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; -extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="quote">&gt; &gt; +extern void cpu_die(void);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; @@ -37,6 +37,13 @@ extern void smp_send_debugger_break(int cpu);</span>
<span class="quote">&gt; &gt; struct pt_regs;  extern void smp_message_recv(int, struct pt_regs *);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; +extern void fixup_irqs(cpumask_t map); int generic_cpu_disable(void);</span>
<span class="quote">&gt; &gt; +int generic_cpu_enable(unsigned int cpu); void</span>
<span class="quote">&gt; &gt; +generic_cpu_die(unsigned int cpu); void generic_mach_cpu_die(void);</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #define __smp_processor_id() (get_paca()-&gt;paca_index)  #define</span>
<span class="quote">&gt; &gt; hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; _______________________________________________</span>
<span class="quote">&gt; &gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; &gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; &gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149511">Zhang Zhuoyu</a> - Dec. 23, 2015, 2:35 a.m.</div>
<pre class="content">
Hi, Denis

Any test result on pmac machine for this patch? 

Zhuoyu
<span class="quote">
&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Zhang Zhuoyu [mailto:zhangzhuoyu@cmss.chinamobile.com]</span>
<span class="quote">&gt; Sent: Wednesday, December 16, 2015 10:46 PM</span>
<span class="quote">&gt; To: &#39;Denis Kirjanov&#39;; &#39;Michael Ellerman&#39;</span>
<span class="quote">&gt; Cc: &#39;Daniel Axtens&#39;; &#39;Zhang Zhuoyu&#39;; &#39;benh@kernel.crashing.org&#39;;</span>
<span class="quote">&gt; &#39;paulus@samba.org&#39;; &#39;tglx@linutronix.de&#39;; &#39;jiang.liu@linux.intel.com&#39;;</span>
<span class="quote">&gt; &#39;linuxppc-dev@lists.ozlabs.org&#39;; &#39;linux-kernel@vger.kernel.org&#39;</span>
<span class="quote">&gt; Subject: RE: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt; migrate_irqs()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; -----Original Message-----</span>
<span class="quote">&gt; &gt; From: Denis Kirjanov [mailto:kda@linux-powerpc.org]</span>
<span class="quote">&gt; &gt; Sent: Wednesday, December 16, 2015 7:55 PM</span>
<span class="quote">&gt; &gt; To: Michael Ellerman</span>
<span class="quote">&gt; &gt; Cc: Daniel Axtens; Zhang Zhuoyu; benh@kernel.crashing.org;</span>
<span class="quote">&gt; &gt; paulus@samba.org; tglx@linutronix.de; jiang.liu@linux.intel.com;</span>
<span class="quote">&gt; &gt; zhangzhuoyu@cmss.chinamobile.com; linuxppc-dev@lists.ozlabs.org;</span>
<span class="quote">&gt; &gt; linux- kernel@vger.kernel.org</span>
<span class="quote">&gt; &gt; Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt; &gt; migrate_irqs()</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; On 12/16/15, Michael Ellerman &lt;mpe@ellerman.id.au&gt; wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:</span>
<span class="quote">&gt; &gt; &gt;&gt; Hi,</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; A couple of things.</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Mmm, My mistake, I will correct it next time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt;&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; I&#39;d be more comfortable removing them if I understood why they were</span>
<span class="quote">&gt; &gt; &gt;&gt; added. But they&#39;ve been around since the beginning of git history</span>
<span class="quote">&gt; &gt; &gt;&gt; so that could be a bit difficult.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below,</span>
<span class="quote">&gt; &gt; &gt; named fixup_irqs()).</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; But I suspect those lines are actually there very deliberately.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; The function is migrating interrupts off the recently offlined cpu,</span>
<span class="quote">&gt; &gt; &gt; because we don&#39;t want to take interrupts on an offline cpu.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; After it&#39;s finished doing the migration, it wants to make sure there</span>
<span class="quote">&gt; &gt; &gt; are no interrupts that have already been latched by the offline cpu.</span>
<span class="quote">&gt; &gt; &gt; So it briefly enables interrupts, waits a bit for the interrupts to</span>
<span class="quote">&gt; &gt; &gt; fire, and the disables them again.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; Whether that actually works I couldn&#39;t say, it is very old code, and</span>
<span class="quote">&gt; &gt; &gt; it&#39;s used on platforms where I don&#39;t ever test cpu hotplug (85xx &amp;</span>
<span class="quote">&gt; &gt; &gt; powermac).</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Yeah, it would be nice to test this change. I&#39;ll try it on my</span>
<span class="quote">&gt; &gt; quad-core pmac machine</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks Michael for help explaining the code logic, it also resolved my doubts.</span>
<span class="quote">&gt; These snippets are suspected when I did PM benchmark on FSL MPC85xx</span>
<span class="quote">&gt; series(T1040, T4240), For T4240, which has 24 CPUs, it waits 1ms in</span>
<span class="quote">&gt; migrate_irqs()each time a CPU is plugged offline, it seems a waste of time. I</span>
<span class="quote">&gt; also did a test on T1040, after plugging offline/online CPU hundreds of times,</span>
<span class="quote">&gt; system works well. If you have any other suggestion on how to test, I&#39;d like</span>
<span class="quote">&gt; to do more benchmark.</span>
<span class="quote">&gt; (1)for((i=0; i&lt;1000; i++)); do echo 0 &gt; /sys/devices/system/cpu/cpu1/online;</span>
<span class="quote">&gt; sleep 1; echo 1 &gt; /sys/devices/system/cpu/cpu1/online; done</span>
<span class="quote">&gt; (2)root@t1040rdb:~# cat /proc/interrupts</span>
<span class="quote">&gt;            CPU0       CPU1       CPU2       CPU3</span>
<span class="quote">&gt;  36:        393          1        223          1   OpenPIC    36 Level     serial</span>
<span class="quote">&gt; LOC:       1946       1486       1555       1361   Local timer interrupts</span>
<span class="quote">&gt; DBL:       7371       9707       9390       7568   Doorbell interrupts</span>
<span class="quote">&gt; (3)root@t1040rdb:~# ps</span>
<span class="quote">&gt;   PID TTY          TIME CMD</span>
<span class="quote">&gt;  2751 ttyS0    00:00:00 sh</span>
<span class="quote">&gt;  2757 ttyS0    00:00:00 ps</span>
<span class="quote">&gt; root@t1040rdb:~# taskset -pc 1 2751</span>
<span class="quote">&gt; pid 2751&#39;s current affinity list: 0-3</span>
<span class="quote">&gt; pid 2751&#39;s new affinity list: 1</span>
<span class="quote">&gt; root@t1040rdb:~#</span>
<span class="quote">&gt; root@t1040rdb:~#</span>
<span class="quote">&gt; root@t1040rdb:~#</span>
<span class="quote">&gt; root@t1040rdb:~# echo &quot;hello&quot;</span>
<span class="quote">&gt; hello</span>
<span class="quote">&gt; root@t1040rdb:~#</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; cheers</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; commit d58830b9a740ad1c3b089196d4afdaea251dc701</span>
<span class="quote">&gt; &gt; &gt; Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt; &gt; Date:   Fri Mar 4 17:34:00 2005 -0800</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;     [PATCH] ppc64: generic hotplug cpu support</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;     Patch provides a generic hotplug cpu implementation, with the</span>
<span class="quote">&gt; &gt; &gt; only current</span>
<span class="quote">&gt; &gt; &gt;     user being pmac.  This doesn&#39;t replace real hotplug code as is currently</span>
<span class="quote">&gt; &gt; &gt;     used by LPAR systems.  Ben i can add the additional pmac</span>
<span class="quote">&gt; &gt; &gt; specific code to</span>
<span class="quote">&gt; &gt; &gt;     put the processor into a sleeping state seperately.  Thanks to</span>
<span class="quote">&gt; &gt; &gt; Nathan for</span>
<span class="quote">&gt; &gt; &gt;     testing.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;     Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt; &gt;     Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="quote">&gt; &gt; &gt;     Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig index</span>
<span class="quote">&gt; &gt; &gt; a7933ab62e98..861f4460ad02 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt; &gt; @@ -313,7 +313,7 @@ source &quot;drivers/pci/Kconfig&quot;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  config HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt;  	bool &quot;Support for hot-pluggable CPUs&quot;</span>
<span class="quote">&gt; &gt; &gt; -	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="quote">&gt; &gt; &gt; +	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES ||</span>
<span class="quote">&gt; &gt; PPC_PMAC)</span>
<span class="quote">&gt; &gt; &gt;  	select HOTPLUG</span>
<span class="quote">&gt; &gt; &gt;  	---help---</span>
<span class="quote">&gt; &gt; &gt;  	  Say Y here to be able to turn CPUs off and on.</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt; &gt; index 398b4682127b..51eb6af14a8f 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt; &gt; @@ -293,6 +293,10 @@ static int native_idle(void)</span>
<span class="quote">&gt; &gt; &gt;  			power4_idle();</span>
<span class="quote">&gt; &gt; &gt;  		if (need_resched())</span>
<span class="quote">&gt; &gt; &gt;  			schedule();</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="quote">&gt; &gt; &gt; +		    system_state == SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt; &gt; +			cpu_die();</span>
<span class="quote">&gt; &gt; &gt;  	}</span>
<span class="quote">&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c index</span>
<span class="quote">&gt; &gt; &gt; 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt; &gt; @@ -116,6 +116,35 @@ skip:</span>
<span class="quote">&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; +void fixup_irqs(cpumask_t map)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	unsigned int irq;</span>
<span class="quote">&gt; &gt; &gt; +	static int warned;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	for_each_irq(irq) {</span>
<span class="quote">&gt; &gt; &gt; +		cpumask_t mask;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="quote">&gt; &gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="quote">&gt; &gt; &gt; +		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="quote">&gt; &gt; &gt; +			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt; &gt; +			mask = map;</span>
<span class="quote">&gt; &gt; &gt; +		}</span>
<span class="quote">&gt; &gt; &gt; +		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="quote">&gt; &gt; &gt; +			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="quote">&gt; &gt; &gt; +		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="quote">&gt; &gt; &gt; +			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; &gt; +	mdelay(1);</span>
<span class="quote">&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt;  extern int noirqdebug;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  /*</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; &gt; b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; &gt; index f603397b7b04..0426892749c6 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt; &gt; @@ -320,8 +320,9 @@ static  void __init pSeries_discover_pic(void)</span>
<span class="quote">&gt; &gt; &gt;  	}</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; -static void pSeries_cpu_die(void)</span>
<span class="quote">&gt; &gt; &gt; +static void pSeries_mach_cpu_die(void)</span>
<span class="quote">&gt; &gt; &gt;  {</span>
<span class="quote">&gt; &gt; &gt; +	idle_task_exit();</span>
<span class="quote">&gt; &gt; &gt;  	local_irq_disable();</span>
<span class="quote">&gt; &gt; &gt;  	/* Some hardware requires clearing the CPPR, while other hardware</span>
<span class="quote">&gt; &gt; does not</span>
<span class="quote">&gt; &gt; &gt;  	 * it is safe either way</span>
<span class="quote">&gt; &gt; &gt; @@ -599,7 +600,7 @@ struct machdep_calls __initdata pSeries_md = {</span>
<span class="quote">&gt; &gt; &gt;  	.power_off		= rtas_power_off,</span>
<span class="quote">&gt; &gt; &gt;  	.halt			= rtas_halt,</span>
<span class="quote">&gt; &gt; &gt;  	.panic			= rtas_os_term,</span>
<span class="quote">&gt; &gt; &gt; -	.cpu_die		= pSeries_cpu_die,</span>
<span class="quote">&gt; &gt; &gt; +	.cpu_die		= pSeries_mach_cpu_die,</span>
<span class="quote">&gt; &gt; &gt;  	.get_boot_time		= pSeries_get_boot_time,</span>
<span class="quote">&gt; &gt; &gt;  	.get_rtc_time		= pSeries_get_rtc_time,</span>
<span class="quote">&gt; &gt; &gt;  	.set_rtc_time		= pSeries_set_rtc_time,</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_setup.c index 41fa6e95a06f..5c56fc956245</span>
<span class="quote">&gt; &gt; &gt; 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt; &gt; @@ -439,6 +439,9 @@ static int __init pmac_probe(int platform)  }</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  struct machdep_calls __initdata pmac_md = {</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; +	.cpu_die		= generic_mach_cpu_die,</span>
<span class="quote">&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt;  	.probe			= pmac_probe,</span>
<span class="quote">&gt; &gt; &gt;  	.setup_arch		= pmac_setup_arch,</span>
<span class="quote">&gt; &gt; &gt;  	.init_early		= pmac_init_early,</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_smp.c index e0b37079943c..c27588ede2fe</span>
<span class="quote">&gt; &gt; 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt; &gt; @@ -308,4 +308,9 @@ struct smp_ops_t core99_smp_ops __pmacdata =</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; &gt; &gt; void __init pmac_setup_smp(void)  {</span>
<span class="quote">&gt; &gt; &gt;  	smp_ops = &amp;core99_smp_ops;</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; +	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="quote">&gt; &gt; &gt; +	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="quote">&gt; &gt; &gt; +	smp_ops-&gt;cpu_die = generic_cpu_die; #endif</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/setup.c b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; &gt; index d98c320828e5..078c3551ce8a 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt; &gt; @@ -1377,9 +1377,6 @@ early_param(&quot;xmon&quot;, early_xmon);</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  void cpu_die(void)</span>
<span class="quote">&gt; &gt; &gt;  {</span>
<span class="quote">&gt; &gt; &gt; -	idle_task_exit();</span>
<span class="quote">&gt; &gt; &gt;  	if (ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt; &gt;  		ppc_md.cpu_die();</span>
<span class="quote">&gt; &gt; &gt; -	local_irq_disable();</span>
<span class="quote">&gt; &gt; &gt; -	for (;;);</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c index</span>
<span class="quote">&gt; &gt; &gt; a9e43792f8fe..cde1947432a1 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt; &gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;linux/sysdev.h&gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; &gt; &gt; +#include &lt;linux/notifier.h&gt;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;asm/atomic.h&gt;</span>
<span class="quote">&gt; &gt; &gt; @@ -406,10 +407,89 @@ void __devinit smp_prepare_boot_cpu(void)</span>
<span class="quote">&gt; &gt; &gt;  	current_set[boot_cpuid] = current-&gt;thread_info;  }</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; +/* State of each CPU during hotplug phases */ DEFINE_PER_CPU(int,</span>
<span class="quote">&gt; &gt; &gt; +cpu_state) = { 0 };</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +int generic_cpu_disable(void)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	unsigned int cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	if (cpu == boot_cpuid)</span>
<span class="quote">&gt; &gt; &gt; +		return -EBUSY;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	systemcfg-&gt;processorCount--;</span>
<span class="quote">&gt; &gt; &gt; +	cpu_clear(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +int generic_cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; &gt; +	/* Do the normal bootup if we haven&#39;t</span>
<span class="quote">&gt; &gt; &gt; +	 * already bootstrapped. */</span>
<span class="quote">&gt; &gt; &gt; +	if (system_state != SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt; &gt; +		return -ENOSYS;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	/* get the target out of it&#39;s holding state */</span>
<span class="quote">&gt; &gt; &gt; +	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="quote">&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	while (!cpu_online(cpu))</span>
<span class="quote">&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt; &gt; +	/* counter the irq disable in fixup_irqs */</span>
<span class="quote">&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +void generic_cpu_die(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; &gt; +	int i;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	for (i = 0; i &lt; 100; i++) {</span>
<span class="quote">&gt; &gt; &gt; +		rmb();</span>
<span class="quote">&gt; &gt; &gt; +		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="quote">&gt; &gt; &gt; +			return;</span>
<span class="quote">&gt; &gt; &gt; +		msleep(100);</span>
<span class="quote">&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; +	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu); }</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +void generic_mach_cpu_die(void)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	unsigned int cpu;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt; &gt; +	cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt; &gt; +	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="quote">&gt; &gt; &gt; +	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="quote">&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt; &gt; +	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="quote">&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	flush_tlb_pending();</span>
<span class="quote">&gt; &gt; &gt; +	cpu_set(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +static int __devinit cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt; &gt; +	if (smp_ops-&gt;cpu_enable)</span>
<span class="quote">&gt; &gt; &gt; +		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	return -ENOSYS;</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt;  int __devinit __cpu_up(unsigned int cpu)  {</span>
<span class="quote">&gt; &gt; &gt;  	int c;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; +	if (!cpu_enable(cpu))</span>
<span class="quote">&gt; &gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt;  	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */</span>
<span class="quote">&gt; &gt; &gt;  	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))</span>
<span class="quote">&gt; &gt; &gt;  		return -ENOENT;</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/sysfs.c b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; &gt; index bbc9dcda17f7..0925694c3ce5 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt; &gt; @@ -18,7 +18,7 @@</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;asm/systemcfg.h&gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;asm/paca.h&gt;</span>
<span class="quote">&gt; &gt; &gt;  #include &lt;asm/lppaca.h&gt;</span>
<span class="quote">&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; +#include &lt;asm/machdep.h&gt;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  static DEFINE_PER_CPU(struct cpu, cpu_devices);</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; @@ -413,9 +413,7 @@ static int __init topology_init(void)</span>
<span class="quote">&gt; &gt; &gt;  		 * CPU.  For instance, the boot cpu might never be valid</span>
<span class="quote">&gt; &gt; &gt;  		 * for hotplugging.</span>
<span class="quote">&gt; &gt; &gt;  		 */</span>
<span class="quote">&gt; &gt; &gt; -#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; -		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="quote">&gt; &gt; &gt; -#endif</span>
<span class="quote">&gt; &gt; &gt; +		if (!ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt; &gt;  			c-&gt;no_control = 1;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  		if (cpu_online(cpu) || (c-&gt;no_control == 0)) { diff --git</span>
<span class="quote">&gt; &gt; &gt; a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; index</span>
<span class="quote">&gt; &gt; &gt; 476d2185ffd1..03fe499c7604 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt; &gt; +++ b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt; &gt; @@ -30,6 +30,7 @@ struct smp_ops_t {</span>
<span class="quote">&gt; &gt; &gt;  	void  (*setup_cpu)(int nr);</span>
<span class="quote">&gt; &gt; &gt;  	void  (*take_timebase)(void);</span>
<span class="quote">&gt; &gt; &gt;  	void  (*give_timebase)(void);</span>
<span class="quote">&gt; &gt; &gt; +	int   (*cpu_enable)(unsigned int nr);</span>
<span class="quote">&gt; &gt; &gt;  	int   (*cpu_disable)(void);</span>
<span class="quote">&gt; &gt; &gt;  	void  (*cpu_die)(unsigned int nr);  }; diff --git</span>
<span class="quote">&gt; &gt; &gt; a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h index</span>
<span class="quote">&gt; &gt; &gt; 965980bbbb57..c8646fa999c2 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt; &gt; +++ b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt; &gt; @@ -29,7 +29,7 @@</span>
<span class="quote">&gt; &gt; &gt;  extern int boot_cpuid;</span>
<span class="quote">&gt; &gt; &gt;  extern int boot_cpuid_phys;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; -extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="quote">&gt; &gt; &gt; +extern void cpu_die(void);</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; @@ -37,6 +37,13 @@ extern void smp_send_debugger_break(int cpu);</span>
<span class="quote">&gt; &gt; &gt; struct pt_regs;  extern void smp_message_recv(int, struct pt_regs</span>
<span class="quote">&gt; &gt; &gt; *);</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt; &gt; +extern void fixup_irqs(cpumask_t map); int</span>
<span class="quote">&gt; &gt; &gt; +generic_cpu_disable(void); int generic_cpu_enable(unsigned int</span>
<span class="quote">&gt; &gt; &gt; +cpu); void generic_cpu_die(unsigned int cpu); void</span>
<span class="quote">&gt; &gt; &gt; +generic_mach_cpu_die(void); #endif</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  #define __smp_processor_id() (get_paca()-&gt;paca_index)  #define</span>
<span class="quote">&gt; &gt; &gt; hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; _______________________________________________</span>
<span class="quote">&gt; &gt; &gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; &gt; &gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; &gt; &gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59011">Denis Kirjanov</a> - Dec. 23, 2015, 9:55 p.m.</div>
<pre class="content">
On 12/23/15, Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt; wrote:
<span class="quote">&gt; Hi, Denis</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Any test result on pmac machine for this patch?</span>

Hi,

So I ran the tests by writing to cpuN/online.

with your change I&#39;m observing lines like the following:
[  713.436922] NOHZ: local_softirq_pending 08

Thanks!
<span class="quote">
&gt;</span>
<span class="quote">&gt; Zhuoyu</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; -----Original Message-----</span>
<span class="quote">&gt;&gt; From: Zhang Zhuoyu [mailto:zhangzhuoyu@cmss.chinamobile.com]</span>
<span class="quote">&gt;&gt; Sent: Wednesday, December 16, 2015 10:46 PM</span>
<span class="quote">&gt;&gt; To: &#39;Denis Kirjanov&#39;; &#39;Michael Ellerman&#39;</span>
<span class="quote">&gt;&gt; Cc: &#39;Daniel Axtens&#39;; &#39;Zhang Zhuoyu&#39;; &#39;benh@kernel.crashing.org&#39;;</span>
<span class="quote">&gt;&gt; &#39;paulus@samba.org&#39;; &#39;tglx@linutronix.de&#39;; &#39;jiang.liu@linux.intel.com&#39;;</span>
<span class="quote">&gt;&gt; &#39;linuxppc-dev@lists.ozlabs.org&#39;; &#39;linux-kernel@vger.kernel.org&#39;</span>
<span class="quote">&gt;&gt; Subject: RE: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt;&gt; migrate_irqs()</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; -----Original Message-----</span>
<span class="quote">&gt;&gt; &gt; From: Denis Kirjanov [mailto:kda@linux-powerpc.org]</span>
<span class="quote">&gt;&gt; &gt; Sent: Wednesday, December 16, 2015 7:55 PM</span>
<span class="quote">&gt;&gt; &gt; To: Michael Ellerman</span>
<span class="quote">&gt;&gt; &gt; Cc: Daniel Axtens; Zhang Zhuoyu; benh@kernel.crashing.org;</span>
<span class="quote">&gt;&gt; &gt; paulus@samba.org; tglx@linutronix.de; jiang.liu@linux.intel.com;</span>
<span class="quote">&gt;&gt; &gt; zhangzhuoyu@cmss.chinamobile.com; linuxppc-dev@lists.ozlabs.org;</span>
<span class="quote">&gt;&gt; &gt; linux- kernel@vger.kernel.org</span>
<span class="quote">&gt;&gt; &gt; Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt;&gt; &gt; migrate_irqs()</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; On 12/16/15, Michael Ellerman &lt;mpe@ellerman.id.au&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; &gt; On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; Hi,</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; A couple of things.</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Mmm, My mistake, I will correct it next time.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; I&#39;d be more comfortable removing them if I understood why they were</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; added. But they&#39;ve been around since the beginning of git history</span>
<span class="quote">&gt;&gt; &gt; &gt;&gt; so that could be a bit difficult.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below,</span>
<span class="quote">&gt;&gt; &gt; &gt; named fixup_irqs()).</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; But I suspect those lines are actually there very deliberately.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; The function is migrating interrupts off the recently offlined cpu,</span>
<span class="quote">&gt;&gt; &gt; &gt; because we don&#39;t want to take interrupts on an offline cpu.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; After it&#39;s finished doing the migration, it wants to make sure there</span>
<span class="quote">&gt;&gt; &gt; &gt; are no interrupts that have already been latched by the offline cpu.</span>
<span class="quote">&gt;&gt; &gt; &gt; So it briefly enables interrupts, waits a bit for the interrupts to</span>
<span class="quote">&gt;&gt; &gt; &gt; fire, and the disables them again.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; Whether that actually works I couldn&#39;t say, it is very old code, and</span>
<span class="quote">&gt;&gt; &gt; &gt; it&#39;s used on platforms where I don&#39;t ever test cpu hotplug (85xx &amp;</span>
<span class="quote">&gt;&gt; &gt; &gt; powermac).</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Yeah, it would be nice to test this change. I&#39;ll try it on my</span>
<span class="quote">&gt;&gt; &gt; quad-core pmac machine</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks Michael for help explaining the code logic, it also resolved my</span>
<span class="quote">&gt;&gt; doubts.</span>
<span class="quote">&gt;&gt; These snippets are suspected when I did PM benchmark on FSL MPC85xx</span>
<span class="quote">&gt;&gt; series(T1040, T4240), For T4240, which has 24 CPUs, it waits 1ms in</span>
<span class="quote">&gt;&gt; migrate_irqs()each time a CPU is plugged offline, it seems a waste of</span>
<span class="quote">&gt;&gt; time. I</span>
<span class="quote">&gt;&gt; also did a test on T1040, after plugging offline/online CPU hundreds of</span>
<span class="quote">&gt;&gt; times,</span>
<span class="quote">&gt;&gt; system works well. If you have any other suggestion on how to test, I&#39;d</span>
<span class="quote">&gt;&gt; like</span>
<span class="quote">&gt;&gt; to do more benchmark.</span>
<span class="quote">&gt;&gt; (1)for((i=0; i&lt;1000; i++)); do echo 0 &gt;</span>
<span class="quote">&gt;&gt; /sys/devices/system/cpu/cpu1/online;</span>
<span class="quote">&gt;&gt; sleep 1; echo 1 &gt; /sys/devices/system/cpu/cpu1/online; done</span>
<span class="quote">&gt;&gt; (2)root@t1040rdb:~# cat /proc/interrupts</span>
<span class="quote">&gt;&gt;            CPU0       CPU1       CPU2       CPU3</span>
<span class="quote">&gt;&gt;  36:        393          1        223          1   OpenPIC    36 Level</span>
<span class="quote">&gt;&gt; serial</span>
<span class="quote">&gt;&gt; LOC:       1946       1486       1555       1361   Local timer interrupts</span>
<span class="quote">&gt;&gt; DBL:       7371       9707       9390       7568   Doorbell interrupts</span>
<span class="quote">&gt;&gt; (3)root@t1040rdb:~# ps</span>
<span class="quote">&gt;&gt;   PID TTY          TIME CMD</span>
<span class="quote">&gt;&gt;  2751 ttyS0    00:00:00 sh</span>
<span class="quote">&gt;&gt;  2757 ttyS0    00:00:00 ps</span>
<span class="quote">&gt;&gt; root@t1040rdb:~# taskset -pc 1 2751</span>
<span class="quote">&gt;&gt; pid 2751&#39;s current affinity list: 0-3</span>
<span class="quote">&gt;&gt; pid 2751&#39;s new affinity list: 1</span>
<span class="quote">&gt;&gt; root@t1040rdb:~#</span>
<span class="quote">&gt;&gt; root@t1040rdb:~#</span>
<span class="quote">&gt;&gt; root@t1040rdb:~#</span>
<span class="quote">&gt;&gt; root@t1040rdb:~# echo &quot;hello&quot;</span>
<span class="quote">&gt;&gt; hello</span>
<span class="quote">&gt;&gt; root@t1040rdb:~#</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; cheers</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; commit d58830b9a740ad1c3b089196d4afdaea251dc701</span>
<span class="quote">&gt;&gt; &gt; &gt; Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; Date:   Fri Mar 4 17:34:00 2005 -0800</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;     [PATCH] ppc64: generic hotplug cpu support</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;     Patch provides a generic hotplug cpu implementation, with the</span>
<span class="quote">&gt;&gt; &gt; &gt; only current</span>
<span class="quote">&gt;&gt; &gt; &gt;     user being pmac.  This doesn&#39;t replace real hotplug code as is</span>
<span class="quote">&gt;&gt; &gt; &gt; currently</span>
<span class="quote">&gt;&gt; &gt; &gt;     used by LPAR systems.  Ben i can add the additional pmac</span>
<span class="quote">&gt;&gt; &gt; &gt; specific code to</span>
<span class="quote">&gt;&gt; &gt; &gt;     put the processor into a sleeping state seperately.  Thanks to</span>
<span class="quote">&gt;&gt; &gt; &gt; Nathan for</span>
<span class="quote">&gt;&gt; &gt; &gt;     testing.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;     Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;     Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;     Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig index</span>
<span class="quote">&gt;&gt; &gt; &gt; a7933ab62e98..861f4460ad02 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/Kconfig</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/Kconfig</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -313,7 +313,7 @@ source &quot;drivers/pci/Kconfig&quot;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  config HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt;  	bool &quot;Support for hot-pluggable CPUs&quot;</span>
<span class="quote">&gt;&gt; &gt; &gt; -	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="quote">&gt;&gt; &gt; &gt; +	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES ||</span>
<span class="quote">&gt;&gt; &gt; PPC_PMAC)</span>
<span class="quote">&gt;&gt; &gt; &gt;  	select HOTPLUG</span>
<span class="quote">&gt;&gt; &gt; &gt;  	---help---</span>
<span class="quote">&gt;&gt; &gt; &gt;  	  Say Y here to be able to turn CPUs off and on.</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt;&gt; &gt; &gt; index 398b4682127b..51eb6af14a8f 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -293,6 +293,10 @@ static int native_idle(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  			power4_idle();</span>
<span class="quote">&gt;&gt; &gt; &gt;  		if (need_resched())</span>
<span class="quote">&gt;&gt; &gt; &gt;  			schedule();</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="quote">&gt;&gt; &gt; &gt; +		    system_state == SYSTEM_RUNNING)</span>
<span class="quote">&gt;&gt; &gt; &gt; +			cpu_die();</span>
<span class="quote">&gt;&gt; &gt; &gt;  	}</span>
<span class="quote">&gt;&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c index</span>
<span class="quote">&gt;&gt; &gt; &gt; 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -116,6 +116,35 @@ skip:</span>
<span class="quote">&gt;&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; +void fixup_irqs(cpumask_t map)</span>
<span class="quote">&gt;&gt; &gt; &gt; +{</span>
<span class="quote">&gt;&gt; &gt; &gt; +	unsigned int irq;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	static int warned;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	for_each_irq(irq) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +		cpumask_t mask;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="quote">&gt;&gt; &gt; &gt; +			continue;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt;&gt; &gt; &gt; +			mask = map;</span>
<span class="quote">&gt;&gt; &gt; &gt; +		}</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="quote">&gt;&gt; &gt; &gt; +			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="quote">&gt;&gt; &gt; &gt; +		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="quote">&gt;&gt; &gt; &gt; +			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	}</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	mdelay(1);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt;  extern int noirqdebug;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  /*</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; index f603397b7b04..0426892749c6 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -320,8 +320,9 @@ static  void __init pSeries_discover_pic(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  	}</span>
<span class="quote">&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; -static void pSeries_cpu_die(void)</span>
<span class="quote">&gt;&gt; &gt; &gt; +static void pSeries_mach_cpu_die(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  {</span>
<span class="quote">&gt;&gt; &gt; &gt; +	idle_task_exit();</span>
<span class="quote">&gt;&gt; &gt; &gt;  	local_irq_disable();</span>
<span class="quote">&gt;&gt; &gt; &gt;  	/* Some hardware requires clearing the CPPR, while other hardware</span>
<span class="quote">&gt;&gt; &gt; does not</span>
<span class="quote">&gt;&gt; &gt; &gt;  	 * it is safe either way</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -599,7 +600,7 @@ struct machdep_calls __initdata pSeries_md = {</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.power_off		= rtas_power_off,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.halt			= rtas_halt,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.panic			= rtas_os_term,</span>
<span class="quote">&gt;&gt; &gt; &gt; -	.cpu_die		= pSeries_cpu_die,</span>
<span class="quote">&gt;&gt; &gt; &gt; +	.cpu_die		= pSeries_mach_cpu_die,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.get_boot_time		= pSeries_get_boot_time,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.get_rtc_time		= pSeries_get_rtc_time,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.set_rtc_time		= pSeries_set_rtc_time,</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_setup.c index 41fa6e95a06f..5c56fc956245</span>
<span class="quote">&gt;&gt; &gt; &gt; 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -439,6 +439,9 @@ static int __init pmac_probe(int platform)  }</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  struct machdep_calls __initdata pmac_md = {</span>
<span class="quote">&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; +	.cpu_die		= generic_mach_cpu_die,</span>
<span class="quote">&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.probe			= pmac_probe,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.setup_arch		= pmac_setup_arch,</span>
<span class="quote">&gt;&gt; &gt; &gt;  	.init_early		= pmac_init_early,</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_smp.c index e0b37079943c..c27588ede2fe</span>
<span class="quote">&gt;&gt; &gt; 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -308,4 +308,9 @@ struct smp_ops_t core99_smp_ops __pmacdata =</span>
<span class="quote">&gt;&gt; {</span>
<span class="quote">&gt;&gt; &gt; &gt; void __init pmac_setup_smp(void)  {</span>
<span class="quote">&gt;&gt; &gt; &gt;  	smp_ops = &amp;core99_smp_ops;</span>
<span class="quote">&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_die = generic_cpu_die; #endif</span>
<span class="quote">&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/setup.c b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; index d98c320828e5..078c3551ce8a 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -1377,9 +1377,6 @@ early_param(&quot;xmon&quot;, early_xmon);</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  void cpu_die(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  {</span>
<span class="quote">&gt;&gt; &gt; &gt; -	idle_task_exit();</span>
<span class="quote">&gt;&gt; &gt; &gt;  	if (ppc_md.cpu_die)</span>
<span class="quote">&gt;&gt; &gt; &gt;  		ppc_md.cpu_die();</span>
<span class="quote">&gt;&gt; &gt; &gt; -	local_irq_disable();</span>
<span class="quote">&gt;&gt; &gt; &gt; -	for (;;);</span>
<span class="quote">&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c index</span>
<span class="quote">&gt;&gt; &gt; &gt; a9e43792f8fe..cde1947432a1 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;linux/sysdev.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; +#include &lt;linux/notifier.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;asm/atomic.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -406,10 +407,89 @@ void __devinit smp_prepare_boot_cpu(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  	current_set[boot_cpuid] = current-&gt;thread_info;  }</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; +/* State of each CPU during hotplug phases */ DEFINE_PER_CPU(int,</span>
<span class="quote">&gt;&gt; &gt; &gt; +cpu_state) = { 0 };</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +int generic_cpu_disable(void)</span>
<span class="quote">&gt;&gt; &gt; &gt; +{</span>
<span class="quote">&gt;&gt; &gt; &gt; +	unsigned int cpu = smp_processor_id();</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	if (cpu == boot_cpuid)</span>
<span class="quote">&gt;&gt; &gt; &gt; +		return -EBUSY;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	systemcfg-&gt;processorCount--;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	cpu_clear(cpu, cpu_online_map);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +int generic_cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +	/* Do the normal bootup if we haven&#39;t</span>
<span class="quote">&gt;&gt; &gt; &gt; +	 * already bootstrapped. */</span>
<span class="quote">&gt;&gt; &gt; &gt; +	if (system_state != SYSTEM_RUNNING)</span>
<span class="quote">&gt;&gt; &gt; &gt; +		return -ENOSYS;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	/* get the target out of it&#39;s holding state */</span>
<span class="quote">&gt;&gt; &gt; &gt; +	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	while (!cpu_online(cpu))</span>
<span class="quote">&gt;&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	/* counter the irq disable in fixup_irqs */</span>
<span class="quote">&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +void generic_cpu_die(unsigned int cpu) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +	int i;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	for (i = 0; i &lt; 100; i++) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +		rmb();</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="quote">&gt;&gt; &gt; &gt; +			return;</span>
<span class="quote">&gt;&gt; &gt; &gt; +		msleep(100);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	}</span>
<span class="quote">&gt;&gt; &gt; &gt; +	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu); }</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +void generic_mach_cpu_die(void)</span>
<span class="quote">&gt;&gt; &gt; &gt; +{</span>
<span class="quote">&gt;&gt; &gt; &gt; +	unsigned int cpu;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	cpu = smp_processor_id();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="quote">&gt;&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	flush_tlb_pending();</span>
<span class="quote">&gt;&gt; &gt; &gt; +	cpu_set(cpu, cpu_online_map);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +static int __devinit cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt;&gt; &gt; &gt; +	if (smp_ops-&gt;cpu_enable)</span>
<span class="quote">&gt;&gt; &gt; &gt; +		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt; +	return -ENOSYS;</span>
<span class="quote">&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt;  int __devinit __cpu_up(unsigned int cpu)  {</span>
<span class="quote">&gt;&gt; &gt; &gt;  	int c;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; +	if (!cpu_enable(cpu))</span>
<span class="quote">&gt;&gt; &gt; &gt; +		return 0;</span>
<span class="quote">&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; &gt;  	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */</span>
<span class="quote">&gt;&gt; &gt; &gt;  	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))</span>
<span class="quote">&gt;&gt; &gt; &gt;  		return -ENOENT;</span>
<span class="quote">&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/sysfs.c b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt;&gt; &gt; &gt; index bbc9dcda17f7..0925694c3ce5 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -18,7 +18,7 @@</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;asm/systemcfg.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;asm/paca.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #include &lt;asm/lppaca.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; -</span>
<span class="quote">&gt;&gt; &gt; &gt; +#include &lt;asm/machdep.h&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  static DEFINE_PER_CPU(struct cpu, cpu_devices);</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -413,9 +413,7 @@ static int __init topology_init(void)</span>
<span class="quote">&gt;&gt; &gt; &gt;  		 * CPU.  For instance, the boot cpu might never be valid</span>
<span class="quote">&gt;&gt; &gt; &gt;  		 * for hotplugging.</span>
<span class="quote">&gt;&gt; &gt; &gt;  		 */</span>
<span class="quote">&gt;&gt; &gt; &gt; -#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; -		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="quote">&gt;&gt; &gt; &gt; -#endif</span>
<span class="quote">&gt;&gt; &gt; &gt; +		if (!ppc_md.cpu_die)</span>
<span class="quote">&gt;&gt; &gt; &gt;  			c-&gt;no_control = 1;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  		if (cpu_online(cpu) || (c-&gt;no_control == 0)) { diff --git</span>
<span class="quote">&gt;&gt; &gt; &gt; a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt;&gt; index</span>
<span class="quote">&gt;&gt; &gt; &gt; 476d2185ffd1..03fe499c7604 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -30,6 +30,7 @@ struct smp_ops_t {</span>
<span class="quote">&gt;&gt; &gt; &gt;  	void  (*setup_cpu)(int nr);</span>
<span class="quote">&gt;&gt; &gt; &gt;  	void  (*take_timebase)(void);</span>
<span class="quote">&gt;&gt; &gt; &gt;  	void  (*give_timebase)(void);</span>
<span class="quote">&gt;&gt; &gt; &gt; +	int   (*cpu_enable)(unsigned int nr);</span>
<span class="quote">&gt;&gt; &gt; &gt;  	int   (*cpu_disable)(void);</span>
<span class="quote">&gt;&gt; &gt; &gt;  	void  (*cpu_die)(unsigned int nr);  }; diff --git</span>
<span class="quote">&gt;&gt; &gt; &gt; a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h index</span>
<span class="quote">&gt;&gt; &gt; &gt; 965980bbbb57..c8646fa999c2 100644</span>
<span class="quote">&gt;&gt; &gt; &gt; --- a/include/asm-ppc64/smp.h</span>
<span class="quote">&gt;&gt; &gt; &gt; +++ b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -29,7 +29,7 @@</span>
<span class="quote">&gt;&gt; &gt; &gt;  extern int boot_cpuid;</span>
<span class="quote">&gt;&gt; &gt; &gt;  extern int boot_cpuid_phys;</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; -extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="quote">&gt;&gt; &gt; &gt; +extern void cpu_die(void);</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; @@ -37,6 +37,13 @@ extern void smp_send_debugger_break(int cpu);</span>
<span class="quote">&gt;&gt; &gt; &gt; struct pt_regs;  extern void smp_message_recv(int, struct pt_regs</span>
<span class="quote">&gt;&gt; &gt; &gt; *);</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt;&gt; &gt; &gt; +extern void fixup_irqs(cpumask_t map); int</span>
<span class="quote">&gt;&gt; &gt; &gt; +generic_cpu_disable(void); int generic_cpu_enable(unsigned int</span>
<span class="quote">&gt;&gt; &gt; &gt; +cpu); void generic_cpu_die(unsigned int cpu); void</span>
<span class="quote">&gt;&gt; &gt; &gt; +generic_mach_cpu_die(void); #endif</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt;  #define __smp_processor_id() (get_paca()-&gt;paca_index)  #define</span>
<span class="quote">&gt;&gt; &gt; &gt; hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; _______________________________________________</span>
<span class="quote">&gt;&gt; &gt; &gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt;&gt; &gt; &gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt;&gt; &gt; &gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149511">Zhang Zhuoyu</a> - Dec. 24, 2015, 7:05 a.m.</div>
<pre class="content">
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Denis Kirjanov [mailto:kda@linux-powerpc.org]</span>
<span class="quote">&gt; Sent: Thursday, December 24, 2015 6:04 AM</span>
<span class="quote">&gt; To: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt; Cc: Michael Ellerman &lt;mpe@ellerman.id.au&gt;; linux-kernel@vger.kernel.org;</span>
<span class="quote">&gt; paulus@samba.org; tglx@linutronix.de; linuxppc-dev@lists.ozlabs.org;</span>
<span class="quote">&gt; jiang.liu@linux.intel.com; Daniel Axtens &lt;dja@axtens.net&gt;</span>
<span class="quote">&gt; Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context in</span>
<span class="quote">&gt; migrate_irqs()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 12/24/15, Denis Kirjanov &lt;kda@linux-powerpc.org&gt; wrote:</span>
<span class="quote">&gt; &gt; On 12/23/15, Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; Hi, Denis</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Any test result on pmac machine for this patch?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Hi,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; So I ran the tests by writing to cpuN/online.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; with your change I&#39;m observing lines like the following:</span>
<span class="quote">&gt; &gt; [  713.436922] NOHZ: local_softirq_pending 08</span>
<span class="quote">&gt; </span>

Hi, 

It is a NOHZ warning, NOHZ will check for whether there are softirqs pending when an online CPU goes
idle, this warning cannot be triggered by offlining CPU, you should check which driver&#39;s
softirq is preventing CPU goes idle.
<span class="quote">

&gt; Another bad thing that the current powerpc/next kernel crashed on pmac</span>
<span class="quote">&gt; (without this change) while enabling/disabling cpu cores :/ I&#39;ve attached the</span>
<span class="quote">&gt; screenshot</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Thanks!</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Zhuoyu</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; -----Original Message-----</span>
<span class="quote">&gt; &gt;&gt;&gt; From: Zhang Zhuoyu [mailto:zhangzhuoyu@cmss.chinamobile.com]</span>
<span class="quote">&gt; &gt;&gt;&gt; Sent: Wednesday, December 16, 2015 10:46 PM</span>
<span class="quote">&gt; &gt;&gt;&gt; To: &#39;Denis Kirjanov&#39;; &#39;Michael Ellerman&#39;</span>
<span class="quote">&gt; &gt;&gt;&gt; Cc: &#39;Daniel Axtens&#39;; &#39;Zhang Zhuoyu&#39;; &#39;benh@kernel.crashing.org&#39;;</span>
<span class="quote">&gt; &gt;&gt;&gt; &#39;paulus@samba.org&#39;; &#39;tglx@linutronix.de&#39;;</span>
<span class="quote">&gt; &gt;&gt;&gt; &#39;jiang.liu@linux.intel.com&#39;; &#39;linuxppc-dev@lists.ozlabs.org&#39;; &#39;linux-</span>
<span class="quote">&gt; kernel@vger.kernel.org&#39;</span>
<span class="quote">&gt; &gt;&gt;&gt; Subject: RE: [PATCH 1/1] powerpc/irq: tidy up inconsistent context</span>
<span class="quote">&gt; &gt;&gt;&gt; in</span>
<span class="quote">&gt; &gt;&gt;&gt; migrate_irqs()</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; -----Original Message-----</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; From: Denis Kirjanov [mailto:kda@linux-powerpc.org]</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; Sent: Wednesday, December 16, 2015 7:55 PM</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; To: Michael Ellerman</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; Cc: Daniel Axtens; Zhang Zhuoyu; benh@kernel.crashing.org;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; paulus@samba.org; tglx@linutronix.de; jiang.liu@linux.intel.com;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; zhangzhuoyu@cmss.chinamobile.com; linuxppc-dev@lists.ozlabs.org;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; linux- kernel@vger.kernel.org</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; Subject: Re: [PATCH 1/1] powerpc/irq: tidy up inconsistent context</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; in</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; migrate_irqs()</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; On 12/16/15, Michael Ellerman &lt;mpe@ellerman.id.au&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; On Wed, 2015-12-16 at 17:08 +1100, Daniel Axtens wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; Hi,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; A couple of things.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; Firstly, your two email addresses don&#39;t match:</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; Zhang Zhuoyu &lt;hellozzy1988@126.com&gt; writes:</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; &gt; From: Zhang Zhuoyu &lt;zhangzhuoyu@cmss.chinamobile.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Mmm, My mistake, I will correct it next time.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; These lines do seem odd! Are they causing a problem?</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; I&#39;d be more comfortable removing them if I understood why they</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; were added. But they&#39;ve been around since the beginning of git</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;&gt; history so that could be a bit difficult.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; It&#39;s in the fullhist tree, but that doesn&#39;t tell us much (below,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; named fixup_irqs()).</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; But I suspect those lines are actually there very deliberately.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; The function is migrating interrupts off the recently offlined</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; cpu, because we don&#39;t want to take interrupts on an offline cpu.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; After it&#39;s finished doing the migration, it wants to make sure</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; there are no interrupts that have already been latched by the offline</span>
<span class="quote">&gt; cpu.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; So it briefly enables interrupts, waits a bit for the interrupts</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; to fire, and the disables them again.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; Whether that actually works I couldn&#39;t say, it is very old code,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; and it&#39;s used on platforms where I don&#39;t ever test cpu hotplug</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; (85xx &amp; powermac).</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; Yeah, it would be nice to test this change. I&#39;ll try it on my</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; quad-core pmac machine</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Thanks Michael for help explaining the code logic, it also resolved</span>
<span class="quote">&gt; &gt;&gt;&gt; my doubts.</span>
<span class="quote">&gt; &gt;&gt;&gt; These snippets are suspected when I did PM benchmark on FSL</span>
<span class="quote">&gt; MPC85xx</span>
<span class="quote">&gt; &gt;&gt;&gt; series(T1040, T4240), For T4240, which has 24 CPUs, it waits 1ms in</span>
<span class="quote">&gt; &gt;&gt;&gt; migrate_irqs()each time a CPU is plugged offline, it seems a waste</span>
<span class="quote">&gt; &gt;&gt;&gt; of time. I also did a test on T1040, after plugging offline/online</span>
<span class="quote">&gt; &gt;&gt;&gt; CPU hundreds of times, system works well. If you have any other</span>
<span class="quote">&gt; &gt;&gt;&gt; suggestion on how to test, I&#39;d like to do more benchmark.</span>
<span class="quote">&gt; &gt;&gt;&gt; (1)for((i=0; i&lt;1000; i++)); do echo 0 &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; /sys/devices/system/cpu/cpu1/online;</span>
<span class="quote">&gt; &gt;&gt;&gt; sleep 1; echo 1 &gt; /sys/devices/system/cpu/cpu1/online; done</span>
<span class="quote">&gt; &gt;&gt;&gt; (2)root@t1040rdb:~# cat /proc/interrupts</span>
<span class="quote">&gt; &gt;&gt;&gt;            CPU0       CPU1       CPU2       CPU3</span>
<span class="quote">&gt; &gt;&gt;&gt;  36:        393          1        223          1   OpenPIC    36 Level</span>
<span class="quote">&gt; &gt;&gt;&gt; serial</span>
<span class="quote">&gt; &gt;&gt;&gt; LOC:       1946       1486       1555       1361   Local timer</span>
<span class="quote">&gt; &gt;&gt;&gt; interrupts</span>
<span class="quote">&gt; &gt;&gt;&gt; DBL:       7371       9707       9390       7568   Doorbell interrupts</span>
<span class="quote">&gt; &gt;&gt;&gt; (3)root@t1040rdb:~# ps</span>
<span class="quote">&gt; &gt;&gt;&gt;   PID TTY          TIME CMD</span>
<span class="quote">&gt; &gt;&gt;&gt;  2751 ttyS0    00:00:00 sh</span>
<span class="quote">&gt; &gt;&gt;&gt;  2757 ttyS0    00:00:00 ps</span>
<span class="quote">&gt; &gt;&gt;&gt; root@t1040rdb:~# taskset -pc 1 2751</span>
<span class="quote">&gt; &gt;&gt;&gt; pid 2751&#39;s current affinity list: 0-3 pid 2751&#39;s new affinity list:</span>
<span class="quote">&gt; &gt;&gt;&gt; 1 root@t1040rdb:~# root@t1040rdb:~# root@t1040rdb:~#</span>
<span class="quote">&gt; &gt;&gt;&gt; root@t1040rdb:~# echo &quot;hello&quot;</span>
<span class="quote">&gt; &gt;&gt;&gt; hello</span>
<span class="quote">&gt; &gt;&gt;&gt; root@t1040rdb:~#</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; cheers</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; commit d58830b9a740ad1c3b089196d4afdaea251dc701</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; Author: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; Date:   Fri Mar 4 17:34:00 2005 -0800</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     [PATCH] ppc64: generic hotplug cpu support</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     Patch provides a generic hotplug cpu implementation, with</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; the only current</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     user being pmac.  This doesn&#39;t replace real hotplug code as</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; is currently</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     used by LPAR systems.  Ben i can add the additional pmac</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; specific code to</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     put the processor into a sleeping state seperately.  Thanks</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; to Nathan for</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     testing.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     Signed-off-by: Zwane Mwaikambo &lt;zwane@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     Signed-off-by: Andrew Morton &lt;akpm@osdl.org&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;     Signed-off-by: Linus Torvalds &lt;torvalds@osdl.org&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; a7933ab62e98..861f4460ad02 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/Kconfig</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -313,7 +313,7 @@ source &quot;drivers/pci/Kconfig&quot;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  config HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	bool &quot;Support for hot-pluggable CPUs&quot;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES ||</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; PPC_PMAC)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	select HOTPLUG</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	---help---</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	  Say Y here to be able to turn CPUs off and on.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; index 398b4682127b..51eb6af14a8f 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/idle.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -293,6 +293,10 @@ static int native_idle(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  			power4_idle();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		if (need_resched())</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  			schedule();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		    system_state == SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			cpu_die();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/irq.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -116,6 +116,35 @@ skip:</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +void fixup_irqs(cpumask_t map)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	unsigned int irq;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	static int warned;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	for_each_irq(irq) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		cpumask_t mask;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			mask = map;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	mdelay(1);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  extern int noirqdebug;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  /*</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; index f603397b7b04..0426892749c6 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -320,8 +320,9 @@ static  void __init pSeries_discover_pic(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -static void pSeries_cpu_die(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +static void pSeries_mach_cpu_die(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	idle_task_exit();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	local_irq_disable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	/* Some hardware requires clearing the CPPR, while other</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; hardware</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; does not</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	 * it is safe either way</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -599,7 +600,7 @@ struct machdep_calls __initdata pSeries_md =</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.power_off		= rtas_power_off,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.halt			= rtas_halt,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.panic			= rtas_os_term,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -	.cpu_die		= pSeries_cpu_die,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	.cpu_die		= pSeries_mach_cpu_die,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.get_boot_time		= pSeries_get_boot_time,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.get_rtc_time		= pSeries_get_rtc_time,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.set_rtc_time		= pSeries_set_rtc_time,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_setup.c index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 41fa6e95a06f..5c56fc956245</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -439,6 +439,9 @@ static int __init pmac_probe(int platform)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  struct machdep_calls __initdata pmac_md = {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	.cpu_die		= generic_mach_cpu_die,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.probe			= pmac_probe,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.setup_arch		= pmac_setup_arch,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	.init_early		= pmac_init_early,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/pmac_smp.c index</span>
<span class="quote">&gt; e0b37079943c..c27588ede2fe</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -308,4 +308,9 @@ struct smp_ops_t core99_smp_ops</span>
<span class="quote">&gt; __pmacdata =</span>
<span class="quote">&gt; &gt;&gt;&gt; {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; void __init pmac_setup_smp(void)  {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	smp_ops = &amp;core99_smp_ops;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	smp_ops-&gt;cpu_die = generic_cpu_die; #endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/setup.c index d98c320828e5..078c3551ce8a</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/setup.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -1377,9 +1377,6 @@ early_param(&quot;xmon&quot;, early_xmon);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  void cpu_die(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -	idle_task_exit();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	if (ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		ppc_md.cpu_die();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -	local_irq_disable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -	for (;;);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; a9e43792f8fe..cde1947432a1 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/smp.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;linux/sysdev.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#include &lt;linux/notifier.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;asm/ptrace.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;asm/atomic.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -406,10 +407,89 @@ void __devinit</span>
<span class="quote">&gt; smp_prepare_boot_cpu(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	current_set[boot_cpuid] = current-&gt;thread_info;  }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +/* State of each CPU during hotplug phases */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +DEFINE_PER_CPU(int,</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +cpu_state) = { 0 };</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +int generic_cpu_disable(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	unsigned int cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	if (cpu == boot_cpuid)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		return -EBUSY;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	systemcfg-&gt;processorCount--;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	cpu_clear(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +int generic_cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	/* Do the normal bootup if we haven&#39;t</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	 * already bootstrapped. */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	if (system_state != SYSTEM_RUNNING)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		return -ENOSYS;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	/* get the target out of it&#39;s holding state */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	while (!cpu_online(cpu))</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	fixup_irqs(cpu_online_map);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	/* counter the irq disable in fixup_irqs */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +void generic_cpu_die(unsigned int cpu) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	int i;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	for (i = 0; i &lt; 100; i++) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		rmb();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +			return;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		msleep(100);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu); }</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +void generic_mach_cpu_die(void) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	unsigned int cpu;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	local_irq_disable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	cpu = smp_processor_id();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	wmb();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		cpu_relax();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	flush_tlb_pending();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	cpu_set(cpu, cpu_online_map);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	local_irq_enable();</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +static int __devinit cpu_enable(unsigned int cpu) {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	if (smp_ops-&gt;cpu_enable)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	return -ENOSYS;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  int __devinit __cpu_up(unsigned int cpu)  {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	int c;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	if (!cpu_enable(cpu))</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		return -ENOENT;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; diff --git a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; b/arch/ppc64/kernel/sysfs.c index bbc9dcda17f7..0925694c3ce5</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -18,7 +18,7 @@</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;asm/systemcfg.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;asm/paca.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #include &lt;asm/lppaca.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#include &lt;asm/machdep.h&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  static DEFINE_PER_CPU(struct cpu, cpu_devices);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -413,9 +413,7 @@ static int __init topology_init(void)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		 * CPU.  For instance, the boot cpu might never be</span>
<span class="quote">&gt; valid</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		 * for hotplugging.</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		 */</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -#endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +		if (!ppc_md.cpu_die)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  			c-&gt;no_control = 1;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  		if (cpu_online(cpu) || (c-&gt;no_control == 0)) { diff --git</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt;&gt;&gt; index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 476d2185ffd1..03fe499c7604 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/include/asm-ppc64/machdep.h</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -30,6 +30,7 @@ struct smp_ops_t {</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	void  (*setup_cpu)(int nr);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	void  (*take_timebase)(void);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	void  (*give_timebase)(void);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +	int   (*cpu_enable)(unsigned int nr);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	int   (*cpu_disable)(void);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  	void  (*cpu_die)(unsigned int nr);  }; diff --git</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h index</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; 965980bbbb57..c8646fa999c2 100644</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; --- a/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +++ b/include/asm-ppc64/smp.h</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -29,7 +29,7 @@</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  extern int boot_cpuid;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  extern int boot_cpuid_phys;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; -extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +extern void cpu_die(void);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; @@ -37,6 +37,13 @@ extern void smp_send_debugger_break(int</span>
<span class="quote">&gt; cpu);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; struct pt_regs;  extern void smp_message_recv(int, struct</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; pt_regs *);</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +extern void fixup_irqs(cpumask_t map); int</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +generic_cpu_disable(void); int generic_cpu_enable(unsigned int</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +cpu); void generic_cpu_die(unsigned int cpu); void</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; +generic_mach_cpu_die(void); #endif</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;  #define __smp_processor_id() (get_paca()-&gt;paca_index)  #define</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; _______________________________________________</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; &gt;&gt;&gt; &gt; &gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; _______________________________________________</span>
<span class="quote">&gt; &gt;&gt; Linuxppc-dev mailing list</span>
<span class="quote">&gt; &gt;&gt; Linuxppc-dev@lists.ozlabs.org</span>
<span class="quote">&gt; &gt;&gt; https://lists.ozlabs.org/listinfo/linuxppc-dev</span>
<span class="quote">&gt; &gt;</span>



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ppc64/Kconfig b/arch/ppc64/Kconfig</span>
<span class="p_header">index a7933ab62e98..861f4460ad02 100644</span>
<span class="p_header">--- a/arch/ppc64/Kconfig</span>
<span class="p_header">+++ b/arch/ppc64/Kconfig</span>
<span class="p_chunk">@@ -313,7 +313,7 @@</span> <span class="p_context"> source &quot;drivers/pci/Kconfig&quot;</span>
 
 config HOTPLUG_CPU
 	bool &quot;Support for hot-pluggable CPUs&quot;
<span class="p_del">-	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; PPC_PSERIES</span>
<span class="p_add">+	depends on SMP &amp;&amp; EXPERIMENTAL &amp;&amp; (PPC_PSERIES || PPC_PMAC)</span>
 	select HOTPLUG
 	---help---
 	  Say Y here to be able to turn CPUs off and on.
<span class="p_header">diff --git a/arch/ppc64/kernel/idle.c b/arch/ppc64/kernel/idle.c</span>
<span class="p_header">index 398b4682127b..51eb6af14a8f 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/idle.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/idle.c</span>
<span class="p_chunk">@@ -293,6 +293,10 @@</span> <span class="p_context"> static int native_idle(void)</span>
 			power4_idle();
 		if (need_resched())
 			schedule();
<span class="p_add">+</span>
<span class="p_add">+		if (cpu_is_offline(smp_processor_id()) &amp;&amp;</span>
<span class="p_add">+		    system_state == SYSTEM_RUNNING)</span>
<span class="p_add">+			cpu_die();</span>
 	}
 	return 0;
 }
<span class="p_header">diff --git a/arch/ppc64/kernel/irq.c b/arch/ppc64/kernel/irq.c</span>
<span class="p_header">index 0ea8016146a2..4fd7f203c1e3 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/irq.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/irq.c</span>
<span class="p_chunk">@@ -116,6 +116,35 @@</span> <span class="p_context"> skip:</span>
 	return 0;
 }
 
<span class="p_add">+#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_add">+void fixup_irqs(cpumask_t map)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int irq;</span>
<span class="p_add">+	static int warned;</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_irq(irq) {</span>
<span class="p_add">+		cpumask_t mask;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (irq_desc[irq].status &amp; IRQ_PER_CPU)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		cpus_and(mask, irq_affinity[irq], map);</span>
<span class="p_add">+		if (any_online_cpu(mask) == NR_CPUS) {</span>
<span class="p_add">+			printk(&quot;Breaking affinity for irq %i\n&quot;, irq);</span>
<span class="p_add">+			mask = map;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (irq_desc[irq].handler-&gt;set_affinity)</span>
<span class="p_add">+			irq_desc[irq].handler-&gt;set_affinity(irq, mask);</span>
<span class="p_add">+		else if (irq_desc[irq].action &amp;&amp; !(warned++))</span>
<span class="p_add">+			printk(&quot;Cannot set affinity for irq %i\n&quot;, irq);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+	mdelay(1);</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 extern int noirqdebug;
 
 /*
<span class="p_header">diff --git a/arch/ppc64/kernel/pSeries_setup.c b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="p_header">index f603397b7b04..0426892749c6 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/pSeries_setup.c</span>
<span class="p_chunk">@@ -320,8 +320,9 @@</span> <span class="p_context"> static  void __init pSeries_discover_pic(void)</span>
 	}
 }
 
<span class="p_del">-static void pSeries_cpu_die(void)</span>
<span class="p_add">+static void pSeries_mach_cpu_die(void)</span>
 {
<span class="p_add">+	idle_task_exit();</span>
 	local_irq_disable();
 	/* Some hardware requires clearing the CPPR, while other hardware does not
 	 * it is safe either way
<span class="p_chunk">@@ -599,7 +600,7 @@</span> <span class="p_context"> struct machdep_calls __initdata pSeries_md = {</span>
 	.power_off		= rtas_power_off,
 	.halt			= rtas_halt,
 	.panic			= rtas_os_term,
<span class="p_del">-	.cpu_die		= pSeries_cpu_die,</span>
<span class="p_add">+	.cpu_die		= pSeries_mach_cpu_die,</span>
 	.get_boot_time		= pSeries_get_boot_time,
 	.get_rtc_time		= pSeries_get_rtc_time,
 	.set_rtc_time		= pSeries_set_rtc_time,
<span class="p_header">diff --git a/arch/ppc64/kernel/pmac_setup.c b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="p_header">index 41fa6e95a06f..5c56fc956245 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/pmac_setup.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/pmac_setup.c</span>
<span class="p_chunk">@@ -439,6 +439,9 @@</span> <span class="p_context"> static int __init pmac_probe(int platform)</span>
 }
 
 struct machdep_calls __initdata pmac_md = {
<span class="p_add">+#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_add">+	.cpu_die		= generic_mach_cpu_die,</span>
<span class="p_add">+#endif</span>
 	.probe			= pmac_probe,
 	.setup_arch		= pmac_setup_arch,
 	.init_early		= pmac_init_early,
<span class="p_header">diff --git a/arch/ppc64/kernel/pmac_smp.c b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="p_header">index e0b37079943c..c27588ede2fe 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/pmac_smp.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/pmac_smp.c</span>
<span class="p_chunk">@@ -308,4 +308,9 @@</span> <span class="p_context"> struct smp_ops_t core99_smp_ops __pmacdata = {</span>
 void __init pmac_setup_smp(void)
 {
 	smp_ops = &amp;core99_smp_ops;
<span class="p_add">+#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_add">+	smp_ops-&gt;cpu_enable = generic_cpu_enable;</span>
<span class="p_add">+	smp_ops-&gt;cpu_disable = generic_cpu_disable;</span>
<span class="p_add">+	smp_ops-&gt;cpu_die = generic_cpu_die;</span>
<span class="p_add">+#endif</span>
 }
<span class="p_header">diff --git a/arch/ppc64/kernel/setup.c b/arch/ppc64/kernel/setup.c</span>
<span class="p_header">index d98c320828e5..078c3551ce8a 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/setup.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/setup.c</span>
<span class="p_chunk">@@ -1377,9 +1377,6 @@</span> <span class="p_context"> early_param(&quot;xmon&quot;, early_xmon);</span>
 
 void cpu_die(void)
 {
<span class="p_del">-	idle_task_exit();</span>
 	if (ppc_md.cpu_die)
 		ppc_md.cpu_die();
<span class="p_del">-	local_irq_disable();</span>
<span class="p_del">-	for (;;);</span>
 }
<span class="p_header">diff --git a/arch/ppc64/kernel/smp.c b/arch/ppc64/kernel/smp.c</span>
<span class="p_header">index a9e43792f8fe..cde1947432a1 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/smp.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/smp.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/err.h&gt;
 #include &lt;linux/sysdev.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/notifier.h&gt;</span>
 
 #include &lt;asm/ptrace.h&gt;
 #include &lt;asm/atomic.h&gt;
<span class="p_chunk">@@ -406,10 +407,89 @@</span> <span class="p_context"> void __devinit smp_prepare_boot_cpu(void)</span>
 	current_set[boot_cpuid] = current-&gt;thread_info;
 }
 
<span class="p_add">+#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_add">+/* State of each CPU during hotplug phases */</span>
<span class="p_add">+DEFINE_PER_CPU(int, cpu_state) = { 0 };</span>
<span class="p_add">+</span>
<span class="p_add">+int generic_cpu_disable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int cpu = smp_processor_id();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (cpu == boot_cpuid)</span>
<span class="p_add">+		return -EBUSY;</span>
<span class="p_add">+</span>
<span class="p_add">+	systemcfg-&gt;processorCount--;</span>
<span class="p_add">+	cpu_clear(cpu, cpu_online_map);</span>
<span class="p_add">+	fixup_irqs(cpu_online_map);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int generic_cpu_enable(unsigned int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Do the normal bootup if we haven&#39;t</span>
<span class="p_add">+	 * already bootstrapped. */</span>
<span class="p_add">+	if (system_state != SYSTEM_RUNNING)</span>
<span class="p_add">+		return -ENOSYS;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* get the target out of it&#39;s holding state */</span>
<span class="p_add">+	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;</span>
<span class="p_add">+	wmb();</span>
<span class="p_add">+</span>
<span class="p_add">+	while (!cpu_online(cpu))</span>
<span class="p_add">+		cpu_relax();</span>
<span class="p_add">+</span>
<span class="p_add">+	fixup_irqs(cpu_online_map);</span>
<span class="p_add">+	/* counter the irq disable in fixup_irqs */</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void generic_cpu_die(unsigned int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; 100; i++) {</span>
<span class="p_add">+		rmb();</span>
<span class="p_add">+		if (per_cpu(cpu_state, cpu) == CPU_DEAD)</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		msleep(100);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	printk(KERN_ERR &quot;CPU%d didn&#39;t die...\n&quot;, cpu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void generic_mach_cpu_die(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+	cpu = smp_processor_id();</span>
<span class="p_add">+	printk(KERN_DEBUG &quot;CPU%d offline\n&quot;, cpu);</span>
<span class="p_add">+	__get_cpu_var(cpu_state) = CPU_DEAD;</span>
<span class="p_add">+	wmb();</span>
<span class="p_add">+	while (__get_cpu_var(cpu_state) != CPU_UP_PREPARE)</span>
<span class="p_add">+		cpu_relax();</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_tlb_pending();</span>
<span class="p_add">+	cpu_set(cpu, cpu_online_map);</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+static int __devinit cpu_enable(unsigned int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (smp_ops-&gt;cpu_enable)</span>
<span class="p_add">+		return smp_ops-&gt;cpu_enable(cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	return -ENOSYS;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int __devinit __cpu_up(unsigned int cpu)
 {
 	int c;
 
<span class="p_add">+	if (!cpu_enable(cpu))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
 	/* At boot, don&#39;t bother with non-present cpus -JSCHOPP */
 	if (system_state &lt; SYSTEM_RUNNING &amp;&amp; !cpu_present(cpu))
 		return -ENOENT;
<span class="p_header">diff --git a/arch/ppc64/kernel/sysfs.c b/arch/ppc64/kernel/sysfs.c</span>
<span class="p_header">index bbc9dcda17f7..0925694c3ce5 100644</span>
<span class="p_header">--- a/arch/ppc64/kernel/sysfs.c</span>
<span class="p_header">+++ b/arch/ppc64/kernel/sysfs.c</span>
<span class="p_chunk">@@ -18,7 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/systemcfg.h&gt;
 #include &lt;asm/paca.h&gt;
 #include &lt;asm/lppaca.h&gt;
<span class="p_del">-</span>
<span class="p_add">+#include &lt;asm/machdep.h&gt;</span>
 
 static DEFINE_PER_CPU(struct cpu, cpu_devices);
 
<span class="p_chunk">@@ -413,9 +413,7 @@</span> <span class="p_context"> static int __init topology_init(void)</span>
 		 * CPU.  For instance, the boot cpu might never be valid
 		 * for hotplugging.
 		 */
<span class="p_del">-#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_del">-		if (systemcfg-&gt;platform != PLATFORM_PSERIES_LPAR)</span>
<span class="p_del">-#endif</span>
<span class="p_add">+		if (!ppc_md.cpu_die)</span>
 			c-&gt;no_control = 1;
 
 		if (cpu_online(cpu) || (c-&gt;no_control == 0)) {
<span class="p_header">diff --git a/include/asm-ppc64/machdep.h b/include/asm-ppc64/machdep.h</span>
<span class="p_header">index 476d2185ffd1..03fe499c7604 100644</span>
<span class="p_header">--- a/include/asm-ppc64/machdep.h</span>
<span class="p_header">+++ b/include/asm-ppc64/machdep.h</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"> struct smp_ops_t {</span>
 	void  (*setup_cpu)(int nr);
 	void  (*take_timebase)(void);
 	void  (*give_timebase)(void);
<span class="p_add">+	int   (*cpu_enable)(unsigned int nr);</span>
 	int   (*cpu_disable)(void);
 	void  (*cpu_die)(unsigned int nr);
 };
<span class="p_header">diff --git a/include/asm-ppc64/smp.h b/include/asm-ppc64/smp.h</span>
<span class="p_header">index 965980bbbb57..c8646fa999c2 100644</span>
<span class="p_header">--- a/include/asm-ppc64/smp.h</span>
<span class="p_header">+++ b/include/asm-ppc64/smp.h</span>
<span class="p_chunk">@@ -29,7 +29,7 @@</span> <span class="p_context"></span>
 extern int boot_cpuid;
 extern int boot_cpuid_phys;
 
<span class="p_del">-extern void cpu_die(void) __attribute__((noreturn));</span>
<span class="p_add">+extern void cpu_die(void);</span>
 
 #ifdef CONFIG_SMP
 
<span class="p_chunk">@@ -37,6 +37,13 @@</span> <span class="p_context"> extern void smp_send_debugger_break(int cpu);</span>
 struct pt_regs;
 extern void smp_message_recv(int, struct pt_regs *);
 
<span class="p_add">+#ifdef CONFIG_HOTPLUG_CPU</span>
<span class="p_add">+extern void fixup_irqs(cpumask_t map);</span>
<span class="p_add">+int generic_cpu_disable(void);</span>
<span class="p_add">+int generic_cpu_enable(unsigned int cpu);</span>
<span class="p_add">+void generic_cpu_die(unsigned int cpu);</span>
<span class="p_add">+void generic_mach_cpu_die(void);</span>
<span class="p_add">+#endif</span>
 
 #define __smp_processor_id() (get_paca()-&gt;paca_index)
 #define hard_smp_processor_id() (get_paca()-&gt;hw_cpu_id)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



