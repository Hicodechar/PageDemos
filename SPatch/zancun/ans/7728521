
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86_64: enable SWIOTLB if system has SRAT memory regions above MAX_DMA32_PFN - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86_64: enable SWIOTLB if system has SRAT memory regions above MAX_DMA32_PFN</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=26722">Igor Mammedov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2015, 5:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1448904938-92922-1-git-send-email-imammedo@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7728521/mbox/"
   >mbox</a>
|
   <a href="/patch/7728521/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7728521/">/patch/7728521/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id AD17B9F1C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 17:36:00 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C7A7620549
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 17:35:59 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id C5A9220562
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 17:35:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754205AbbK3Rfr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 30 Nov 2015 12:35:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:58182 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751909AbbK3Rfq (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 30 Nov 2015 12:35:46 -0500
Received: from int-mx14.intmail.prod.int.phx2.redhat.com
	(int-mx14.intmail.prod.int.phx2.redhat.com [10.5.11.27])
	by mx1.redhat.com (Postfix) with ESMTPS id C72F98C1B0;
	Mon, 30 Nov 2015 17:35:45 +0000 (UTC)
Received: from dell-r430-03.lab.eng.brq.redhat.com
	(dell-r430-03.lab.eng.brq.redhat.com [10.34.112.60])
	by int-mx14.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id tAUHZgDT003260; Mon, 30 Nov 2015 12:35:42 -0500
From: Igor Mammedov &lt;imammedo@redhat.com&gt;
To: linux-kernel@vger.kernel.org
Cc: tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
	konrad.wilk@oracle.com, rjw@rjwysocki.net, lenb@kernel.org,
	imammedo@redhat.com, linux-acpi@vger.kernel.org,
	akataria@vmware.com, fujita.tomonori@lab.ntt.co.jp, revers@redhat.com
Subject: [PATCH] x86_64: enable SWIOTLB if system has SRAT memory regions
	above MAX_DMA32_PFN
Date: Mon, 30 Nov 2015 18:35:38 +0100
Message-Id: &lt;1448904938-92922-1-git-send-email-imammedo@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.27
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=26722">Igor Mammedov</a> - Nov. 30, 2015, 5:35 p.m.</div>
<pre class="content">
when memory hotplug enabled system is booted with less
than 4GB of RAM and then later more RAM is hotplugged
32-bit devices stop functioning with following error:

 nommu_map_single: overflow 327b4f8c0+1522 of device mask ffffffff

the reason for this is that if x86_64 system were booted
with RAM less than 4GB, it doesn&#39;t enable SWIOTLB and
when memory is hotplugged beyond MAX_DMA32_PFN, devices
that expect 32-bit addresses can&#39;t handle 64-bit addresses.

Fix it by tracking max possible PFN when parsing
memory affinity structures from SRAT ACPI table and
enable SWIOTLB if there is hotpluggable memory
regions beyond MAX_DMA32_PFN.

It fixes KVM guests when they use emulated devices
(reproduces with ata_piix, e1000 and usb devices,
 RHBZ: 1275941, 1275977, 1271527)
It also fixes the HyperV, VMWare with emulated devices
which are affected by this issue as well.

Systems that have RAM less than 4GB and do not use
memory hotplug but still have hotplug regions in SRAT
(i.e. broken BIOS that can&#39;t disable mem hotplug)
can disable memory hotplug with &#39;acpi_no_memhotplug = 1&#39;
to avoid automatic SWIOTLB initialization.

Tested on QEMU/KVM and HyperV.
<span class="signed-off-by">
Signed-off-by: Igor Mammedov &lt;imammedo@redhat.com&gt;</span>
---
 arch/x86/include/asm/acpi.h    |  5 +++++
 arch/x86/kernel/pci-swiotlb.c  |  4 ++++
 arch/x86/mm/srat.c             | 15 +++++++++++++++
 drivers/acpi/acpi_memhotplug.c |  2 +-
 4 files changed, 25 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Dec. 1, 2015, 2:45 a.m.</div>
<pre class="content">
On 11/30/2015 12:35 PM, Igor Mammedov wrote:
<span class="quote">&gt; when memory hotplug enabled system is booted with less</span>
<span class="quote">&gt; than 4GB of RAM and then later more RAM is hotplugged</span>
<span class="quote">&gt; 32-bit devices stop functioning with following error:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  nommu_map_single: overflow 327b4f8c0+1522 of device mask ffffffff</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; the reason for this is that if x86_64 system were booted</span>
<span class="quote">&gt; with RAM less than 4GB, it doesn&#39;t enable SWIOTLB and</span>
<span class="quote">&gt; when memory is hotplugged beyond MAX_DMA32_PFN, devices</span>
<span class="quote">&gt; that expect 32-bit addresses can&#39;t handle 64-bit addresses.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fix it by tracking max possible PFN when parsing</span>
<span class="quote">&gt; memory affinity structures from SRAT ACPI table and</span>
<span class="quote">&gt; enable SWIOTLB if there is hotpluggable memory</span>
<span class="quote">&gt; regions beyond MAX_DMA32_PFN.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It fixes KVM guests when they use emulated devices</span>
<span class="quote">&gt; (reproduces with ata_piix, e1000 and usb devices,</span>
<span class="quote">&gt;  RHBZ: 1275941, 1275977, 1271527)</span>
<span class="quote">&gt; It also fixes the HyperV, VMWare with emulated devices</span>
<span class="quote">&gt; which are affected by this issue as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Systems that have RAM less than 4GB and do not use</span>
<span class="quote">&gt; memory hotplug but still have hotplug regions in SRAT</span>
<span class="quote">&gt; (i.e. broken BIOS that can&#39;t disable mem hotplug)</span>
<span class="quote">&gt; can disable memory hotplug with &#39;acpi_no_memhotplug = 1&#39;</span>
<span class="quote">&gt; to avoid automatic SWIOTLB initialization.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Tested on QEMU/KVM and HyperV.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Igor Mammedov &lt;imammedo@redhat.com&gt;</span>
<span class="acked-by">
Acked-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Dec. 4, 2015, 8:20 a.m.</div>
<pre class="content">
* Igor Mammedov &lt;imammedo@redhat.com&gt; wrote:
<span class="quote">
&gt; diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; index 94c18eb..53d7951 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; @@ -147,6 +147,7 @@ static inline void disable_acpi(void) { }</span>
<span class="quote">&gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt;  extern int acpi_numa;</span>
<span class="quote">&gt;  extern int x86_acpi_numa_init(void);</span>
<span class="quote">&gt; +unsigned long acpi_get_max_possible_pfn(void);</span>
<span class="quote">&gt;  #endif /* CONFIG_ACPI_NUMA */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="quote">&gt; @@ -170,4 +171,8 @@ static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; +extern bool acpi_no_memhotplug;</span>
<span class="quote">&gt; +#endif /* CONFIG_ACPI_HOTPLUG_MEMORY */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif /* _ASM_X86_ACPI_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; index adf0392..61d5ba5 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; @@ -88,7 +88,11 @@ int __init pci_swiotlb_detect_4gb(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	/* don&#39;t initialize swiotlb if iommu=off (no_iommu=1) */</span>
<span class="quote">&gt;  #ifdef CONFIG_X86_64</span>
<span class="quote">&gt; +#ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; +	if (!no_iommu &amp;&amp; acpi_get_max_possible_pfn() &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	if (!no_iommu &amp;&amp; max_pfn &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		swiotlb = 1;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	return swiotlb;</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/srat.c b/arch/x86/mm/srat.c</span>
<span class="quote">&gt; index c2aea63..21b33f0 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/srat.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/srat.c</span>
<span class="quote">&gt; @@ -153,10 +153,20 @@ acpi_numa_processor_affinity_init(struct acpi_srat_cpu_affinity *pa)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_MEMORY_HOTPLUG</span>
<span class="quote">&gt;  static inline int save_add_info(void) {return 1;}</span>
<span class="quote">&gt; +static unsigned long max_possible_pfn __initdata;</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  static inline int save_add_info(void) {return 0;}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +unsigned long __init acpi_get_max_possible_pfn(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; +	if (!acpi_no_memhotplug)</span>
<span class="quote">&gt; +		return max_possible_pfn;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +	return max_pfn;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /* Callback for parsing of the Proximity Domain &lt;-&gt; Memory Area mappings */</span>
<span class="quote">&gt;  int __init</span>
<span class="quote">&gt;  acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)</span>
<span class="quote">&gt; @@ -203,6 +213,11 @@ acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)</span>
<span class="quote">&gt;  		pr_warn(&quot;SRAT: Failed to mark hotplug range [mem %#010Lx-%#010Lx] in memblock\n&quot;,</span>
<span class="quote">&gt;  			(unsigned long long)start, (unsigned long long)end - 1);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_MEMORY_HOTPLUG</span>
<span class="quote">&gt; +	if (max_possible_pfn &lt; PFN_UP(end - 1))</span>
<span class="quote">&gt; +		max_possible_pfn = PFN_UP(end - 1);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  out_err_bad_srat:</span>
<span class="quote">&gt;  	bad_srat();</span>
<span class="quote">&gt; diff --git a/drivers/acpi/acpi_memhotplug.c b/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; index 6b0d3ef..ae38f57 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; +++ b/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; @@ -357,7 +357,7 @@ static void acpi_memory_device_remove(struct acpi_device *device)</span>
<span class="quote">&gt;  	acpi_memory_device_free(mem_device);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static bool __initdata acpi_no_memhotplug;</span>
<span class="quote">&gt; +bool __initdata acpi_no_memhotplug;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void __init acpi_memory_hotplug_init(void)</span>
<span class="quote">&gt;  {</span>

So I don&#39;t disagree with the fix in principle, but the implementation here is 
rather ugly - it spreads new non-obvious #ifdefs across various critical parts of 
the kernel.

For example this:
<span class="quote">
&gt;  #ifdef CONFIG_X86_64</span>
<span class="quote">&gt; +#ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; +	if (!no_iommu &amp;&amp; acpi_get_max_possible_pfn() &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	if (!no_iommu &amp;&amp; max_pfn &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		swiotlb = 1;</span>
<span class="quote">&gt;  #endif</span>

could be cleaned up by introducing a proper max_possible_pfn variable, and setting 
it from the ACPI code - instead of exporting acpi_get_max_possible_pfn().

Another pattern is:
<span class="quote">
&gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; +	if (!acpi_no_memhotplug)</span>
<span class="quote">&gt; +		return max_possible_pfn;</span>
<span class="quote">&gt; +#endif</span>

this should be driven from the acpi_no_memhotplug knob, instead of spreading 
acpi_no_memhotplug uses to other callsites.

Furthermore, please split these various steps up into multiple steps (and first do 
the preparatory changes, then fix the bug in the end) - to make it easier to 
bisect and analyze if we regress existing functionality somewhere.

Thanks,

	Ingo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=26722">Igor Mammedov</a> - Dec. 4, 2015, 11:08 a.m.</div>
<pre class="content">
On Fri, 4 Dec 2015 09:20:50 +0100
Ingo Molnar &lt;mingo@kernel.org&gt; wrote:
<span class="quote">
&gt; </span>
<span class="quote">&gt; * Igor Mammedov &lt;imammedo@redhat.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; &gt; index 94c18eb..53d7951 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/include/asm/acpi.h</span>
<span class="quote">&gt; &gt; @@ -147,6 +147,7 @@ static inline void disable_acpi(void) { }</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; &gt;  extern int acpi_numa;</span>
<span class="quote">&gt; &gt;  extern int x86_acpi_numa_init(void);</span>
<span class="quote">&gt; &gt; +unsigned long acpi_get_max_possible_pfn(void);</span>
<span class="quote">&gt; &gt;  #endif /* CONFIG_ACPI_NUMA */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="quote">&gt; &gt; @@ -170,4 +171,8 @@ static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; &gt; +extern bool acpi_no_memhotplug;</span>
<span class="quote">&gt; &gt; +#endif /* CONFIG_ACPI_HOTPLUG_MEMORY */</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  #endif /* _ASM_X86_ACPI_H */</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; &gt; index adf0392..61d5ba5 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; &gt; @@ -88,7 +88,11 @@ int __init pci_swiotlb_detect_4gb(void)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	/* don&#39;t initialize swiotlb if iommu=off (no_iommu=1) */</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_X86_64</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; &gt; +	if (!no_iommu &amp;&amp; acpi_get_max_possible_pfn() &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; &gt; +#else</span>
<span class="quote">&gt; &gt;  	if (!no_iommu &amp;&amp; max_pfn &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  		swiotlb = 1;</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt;  	return swiotlb;</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/mm/srat.c b/arch/x86/mm/srat.c</span>
<span class="quote">&gt; &gt; index c2aea63..21b33f0 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/mm/srat.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/mm/srat.c</span>
<span class="quote">&gt; &gt; @@ -153,10 +153,20 @@ acpi_numa_processor_affinity_init(struct acpi_srat_cpu_affinity *pa)</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_MEMORY_HOTPLUG</span>
<span class="quote">&gt; &gt;  static inline int save_add_info(void) {return 1;}</span>
<span class="quote">&gt; &gt; +static unsigned long max_possible_pfn __initdata;</span>
<span class="quote">&gt; &gt;  #else</span>
<span class="quote">&gt; &gt;  static inline int save_add_info(void) {return 0;}</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +unsigned long __init acpi_get_max_possible_pfn(void)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; &gt; +	if (!acpi_no_memhotplug)</span>
<span class="quote">&gt; &gt; +		return max_possible_pfn;</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +	return max_pfn;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  /* Callback for parsing of the Proximity Domain &lt;-&gt; Memory Area mappings */</span>
<span class="quote">&gt; &gt;  int __init</span>
<span class="quote">&gt; &gt;  acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)</span>
<span class="quote">&gt; &gt; @@ -203,6 +213,11 @@ acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)</span>
<span class="quote">&gt; &gt;  		pr_warn(&quot;SRAT: Failed to mark hotplug range [mem %#010Lx-%#010Lx] in memblock\n&quot;,</span>
<span class="quote">&gt; &gt;  			(unsigned long long)start, (unsigned long long)end - 1);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_MEMORY_HOTPLUG</span>
<span class="quote">&gt; &gt; +	if (max_possible_pfn &lt; PFN_UP(end - 1))</span>
<span class="quote">&gt; &gt; +		max_possible_pfn = PFN_UP(end - 1);</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  out_err_bad_srat:</span>
<span class="quote">&gt; &gt;  	bad_srat();</span>
<span class="quote">&gt; &gt; diff --git a/drivers/acpi/acpi_memhotplug.c b/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; &gt; index 6b0d3ef..ae38f57 100644</span>
<span class="quote">&gt; &gt; --- a/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; &gt; +++ b/drivers/acpi/acpi_memhotplug.c</span>
<span class="quote">&gt; &gt; @@ -357,7 +357,7 @@ static void acpi_memory_device_remove(struct acpi_device *device)</span>
<span class="quote">&gt; &gt;  	acpi_memory_device_free(mem_device);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -static bool __initdata acpi_no_memhotplug;</span>
<span class="quote">&gt; &gt; +bool __initdata acpi_no_memhotplug;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  void __init acpi_memory_hotplug_init(void)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I don&#39;t disagree with the fix in principle, but the implementation here is </span>
<span class="quote">&gt; rather ugly - it spreads new non-obvious #ifdefs across various critical parts of </span>
<span class="quote">&gt; the kernel.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For example this:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_X86_64</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; &gt; +	if (!no_iommu &amp;&amp; acpi_get_max_possible_pfn() &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; &gt; +#else</span>
<span class="quote">&gt; &gt;  	if (!no_iommu &amp;&amp; max_pfn &gt; MAX_DMA32_PFN)</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  		swiotlb = 1;</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; could be cleaned up by introducing a proper max_possible_pfn variable, and setting </span>
<span class="quote">&gt; it from the ACPI code - instead of exporting acpi_get_max_possible_pfn().</span>
Thanks for review,
I&#39;ll try to drop #ifdefs as suggested and split it
in several patches.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Another pattern is:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="quote">&gt; &gt; +	if (!acpi_no_memhotplug)</span>
on the second thought,
we don&#39;t need need this knob to force disabling
SWIOTLB initialization since there is an existing
&quot;no_iommu&quot; option to do it, so I&#39;ll drop this check.
<span class="quote">

&gt; &gt; +		return max_possible_pfn;</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; this should be driven from the acpi_no_memhotplug knob, instead of spreading </span>
<span class="quote">&gt; acpi_no_memhotplug uses to other callsites.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Furthermore, please split these various steps up into multiple steps (and first do </span>
<span class="quote">&gt; the preparatory changes, then fix the bug in the end) - to make it easier to </span>
<span class="quote">&gt; bisect and analyze if we regress existing functionality somewhere.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	Ingo</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="p_header">index 94c18eb..53d7951 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/acpi.h</span>
<span class="p_chunk">@@ -147,6 +147,7 @@</span> <span class="p_context"> static inline void disable_acpi(void) { }</span>
 #ifdef CONFIG_ACPI_NUMA
 extern int acpi_numa;
 extern int x86_acpi_numa_init(void);
<span class="p_add">+unsigned long acpi_get_max_possible_pfn(void);</span>
 #endif /* CONFIG_ACPI_NUMA */
 
 #define acpi_unlazy_tlb(x)	leave_mm(x)
<span class="p_chunk">@@ -170,4 +171,8 @@</span> <span class="p_context"> static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
 }
 #endif
 
<span class="p_add">+#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="p_add">+extern bool acpi_no_memhotplug;</span>
<span class="p_add">+#endif /* CONFIG_ACPI_HOTPLUG_MEMORY */</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_ACPI_H */
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index adf0392..61d5ba5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -88,7 +88,11 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_4gb(void)</span>
 {
 	/* don&#39;t initialize swiotlb if iommu=off (no_iommu=1) */
 #ifdef CONFIG_X86_64
<span class="p_add">+#ifdef CONFIG_ACPI_NUMA</span>
<span class="p_add">+	if (!no_iommu &amp;&amp; acpi_get_max_possible_pfn() &gt; MAX_DMA32_PFN)</span>
<span class="p_add">+#else</span>
 	if (!no_iommu &amp;&amp; max_pfn &gt; MAX_DMA32_PFN)
<span class="p_add">+#endif</span>
 		swiotlb = 1;
 #endif
 	return swiotlb;
<span class="p_header">diff --git a/arch/x86/mm/srat.c b/arch/x86/mm/srat.c</span>
<span class="p_header">index c2aea63..21b33f0 100644</span>
<span class="p_header">--- a/arch/x86/mm/srat.c</span>
<span class="p_header">+++ b/arch/x86/mm/srat.c</span>
<span class="p_chunk">@@ -153,10 +153,20 @@</span> <span class="p_context"> acpi_numa_processor_affinity_init(struct acpi_srat_cpu_affinity *pa)</span>
 
 #ifdef CONFIG_MEMORY_HOTPLUG
 static inline int save_add_info(void) {return 1;}
<span class="p_add">+static unsigned long max_possible_pfn __initdata;</span>
 #else
 static inline int save_add_info(void) {return 0;}
 #endif
 
<span class="p_add">+unsigned long __init acpi_get_max_possible_pfn(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_ACPI_HOTPLUG_MEMORY</span>
<span class="p_add">+	if (!acpi_no_memhotplug)</span>
<span class="p_add">+		return max_possible_pfn;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	return max_pfn;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Callback for parsing of the Proximity Domain &lt;-&gt; Memory Area mappings */
 int __init
 acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)
<span class="p_chunk">@@ -203,6 +213,11 @@</span> <span class="p_context"> acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)</span>
 		pr_warn(&quot;SRAT: Failed to mark hotplug range [mem %#010Lx-%#010Lx] in memblock\n&quot;,
 			(unsigned long long)start, (unsigned long long)end - 1);
 
<span class="p_add">+#ifdef CONFIG_MEMORY_HOTPLUG</span>
<span class="p_add">+	if (max_possible_pfn &lt; PFN_UP(end - 1))</span>
<span class="p_add">+		max_possible_pfn = PFN_UP(end - 1);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	return 0;
 out_err_bad_srat:
 	bad_srat();
<span class="p_header">diff --git a/drivers/acpi/acpi_memhotplug.c b/drivers/acpi/acpi_memhotplug.c</span>
<span class="p_header">index 6b0d3ef..ae38f57 100644</span>
<span class="p_header">--- a/drivers/acpi/acpi_memhotplug.c</span>
<span class="p_header">+++ b/drivers/acpi/acpi_memhotplug.c</span>
<span class="p_chunk">@@ -357,7 +357,7 @@</span> <span class="p_context"> static void acpi_memory_device_remove(struct acpi_device *device)</span>
 	acpi_memory_device_free(mem_device);
 }
 
<span class="p_del">-static bool __initdata acpi_no_memhotplug;</span>
<span class="p_add">+bool __initdata acpi_no_memhotplug;</span>
 
 void __init acpi_memory_hotplug_init(void)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



