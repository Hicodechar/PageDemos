
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,pull] x86 updates for 4.13 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,pull] x86 updates for 4.13</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 9, 2017, 9:14 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.20.1707091108460.2493@nanos&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9831735/mbox/"
   >mbox</a>
|
   <a href="/patch/9831735/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9831735/">/patch/9831735/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	77B80602A0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  9 Jul 2017 09:15:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5590627F60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  9 Jul 2017 09:15:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 34B422823E; Sun,  9 Jul 2017 09:15:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3228E27F60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  9 Jul 2017 09:15:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752078AbdGIJPF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 9 Jul 2017 05:15:05 -0400
Received: from Galois.linutronix.de ([146.0.238.70]:35505 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751763AbdGIJPD (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 9 Jul 2017 05:15:03 -0400
Received: from localhost ([127.0.0.1]) by Galois.linutronix.de with esmtps
	(TLS1.2:DHE_RSA_AES_256_CBC_SHA256:256) (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1dU8HY-0005GN-5C; Sun, 09 Jul 2017 11:13:36 +0200
Date: Sun, 9 Jul 2017 11:14:54 +0200 (CEST)
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
cc: LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Subject: [GIT pull] x86 updates for 4.13
Message-ID: &lt;alpine.DEB.2.20.1707091108460.2493@nanos&gt;
User-Agent: Alpine 2.20 (DEB 67 2015-01-07)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - July 9, 2017, 9:14 a.m.</div>
<pre class="content">
Linus,

please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

The x86 updates contain:

    - A fix for a longstanding PAT bug, where PAT was reported on CPUs that
      do not support it, which leads to wrong caching attributes and
      missing MTRR updates

    - Prevent overwriting of the e820 firmware table, which causes kexec
      kernels to lose the fake mptable which is stored there.

    - Cleanup of the UV/BAU code, removing unused code and making
      local functions static.

Thanks,

	tglx

------------------&gt;
Chen Yu (3):
      x86/boot/e820: Avoid overwriting e820_table_firmware
      x86/boot/e820: Rename the e820_table_firmware to e820_table_kexec
      x86/boot/e820: Introduce the bootloader provided e820_table_firmware[] table

Colin Ian King (1):
      x86/platform/uv/BAU: Minor cleanup, make some local functions static

Mikulas Patocka (1):
      x86/mm/pat: Don&#39;t report PAT on CPUs that don&#39;t support it


 arch/x86/include/asm/e820/api.h   |  1 +
 arch/x86/include/asm/pat.h        |  1 +
 arch/x86/kernel/e820.c            | 49 ++++++++++++++++++++++++++++-----------
 arch/x86/kernel/kexec-bzimage64.c |  4 ++--
 arch/x86/kernel/setup.c           |  7 ++++++
 arch/x86/mm/pat.c                 | 28 ++++++++++------------
 arch/x86/platform/uv/tlb_uv.c     | 31 +++++--------------------
 7 files changed, 65 insertions(+), 56 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/e820/api.h b/arch/x86/include/asm/e820/api.h</span>
<span class="p_header">index 8e0f8b85b209..a504adc661a4 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/e820/api.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/e820/api.h</span>
<span class="p_chunk">@@ -4,6 +4,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/e820/types.h&gt;
 
 extern struct e820_table *e820_table;
<span class="p_add">+extern struct e820_table *e820_table_kexec;</span>
 extern struct e820_table *e820_table_firmware;
 
 extern unsigned long pci_mem_start;
<span class="p_header">diff --git a/arch/x86/include/asm/pat.h b/arch/x86/include/asm/pat.h</span>
<span class="p_header">index 0b1ff4c1c14e..fffb2794dd89 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pat.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pat.h</span>
<span class="p_chunk">@@ -7,6 +7,7 @@</span> <span class="p_context"></span>
 bool pat_enabled(void);
 void pat_disable(const char *reason);
 extern void pat_init(void);
<span class="p_add">+extern void init_cache_modes(void);</span>
 
 extern int reserve_memtype(u64 start, u64 end,
 		enum page_cache_mode req_pcm, enum page_cache_mode *ret_pcm);
<span class="p_header">diff --git a/arch/x86/kernel/e820.c b/arch/x86/kernel/e820.c</span>
<span class="p_header">index d78a586ba8dc..532da61d605c 100644</span>
<span class="p_header">--- a/arch/x86/kernel/e820.c</span>
<span class="p_header">+++ b/arch/x86/kernel/e820.c</span>
<span class="p_chunk">@@ -20,10 +20,12 @@</span> <span class="p_context"></span>
 #include &lt;asm/setup.h&gt;
 
 /*
<span class="p_del">- * We organize the E820 table into two main data structures:</span>
<span class="p_add">+ * We organize the E820 table into three main data structures:</span>
  *
  * - &#39;e820_table_firmware&#39;: the original firmware version passed to us by the
<span class="p_del">- *   bootloader - not modified by the kernel. We use this to:</span>
<span class="p_add">+ *   bootloader - not modified by the kernel. It is composed of two parts:</span>
<span class="p_add">+ *   the first 128 E820 memory entries in boot_params.e820_table and the remaining</span>
<span class="p_add">+ *   (if any) entries of the SETUP_E820_EXT nodes. We use this to:</span>
  *
  *       - inform the user about the firmware&#39;s notion of memory layout
  *         via /sys/firmware/memmap
<span class="p_chunk">@@ -31,6 +33,14 @@</span> <span class="p_context"></span>
  *       - the hibernation code uses it to generate a kernel-independent MD5
  *         fingerprint of the physical memory layout of a system.
  *
<span class="p_add">+ * - &#39;e820_table_kexec&#39;: a slightly modified (by the kernel) firmware version</span>
<span class="p_add">+ *   passed to us by the bootloader - the major difference between</span>
<span class="p_add">+ *   e820_table_firmware[] and this one is that, the latter marks the setup_data</span>
<span class="p_add">+ *   list created by the EFI boot stub as reserved, so that kexec can reuse the</span>
<span class="p_add">+ *   setup_data information in the second kernel. Besides, e820_table_kexec[]</span>
<span class="p_add">+ *   might also be modified by the kexec itself to fake a mptable.</span>
<span class="p_add">+ *   We use this to:</span>
<span class="p_add">+ *</span>
  *       - kexec, which is a bootloader in disguise, uses the original E820
  *         layout to pass to the kexec-ed kernel. This way the original kernel
  *         can have a restricted E820 map while the kexec()-ed kexec-kernel
<span class="p_chunk">@@ -46,9 +56,11 @@</span> <span class="p_context"></span>
  * specific memory layout data during early bootup.
  */
 static struct e820_table e820_table_init		__initdata;
<span class="p_add">+static struct e820_table e820_table_kexec_init		__initdata;</span>
 static struct e820_table e820_table_firmware_init	__initdata;
 
 struct e820_table *e820_table __refdata			= &amp;e820_table_init;
<span class="p_add">+struct e820_table *e820_table_kexec __refdata		= &amp;e820_table_kexec_init;</span>
 struct e820_table *e820_table_firmware __refdata	= &amp;e820_table_firmware_init;
 
 /* For PCI or other memory-mapped resources */
<span class="p_chunk">@@ -470,9 +482,9 @@</span> <span class="p_context"> u64 __init e820__range_update(u64 start, u64 size, enum e820_type old_type, enum</span>
 	return __e820__range_update(e820_table, start, size, old_type, new_type);
 }
 
<span class="p_del">-static u64 __init e820__range_update_firmware(u64 start, u64 size, enum e820_type old_type, enum e820_type  new_type)</span>
<span class="p_add">+static u64 __init e820__range_update_kexec(u64 start, u64 size, enum e820_type old_type, enum e820_type  new_type)</span>
 {
<span class="p_del">-	return __e820__range_update(e820_table_firmware, start, size, old_type, new_type);</span>
<span class="p_add">+	return __e820__range_update(e820_table_kexec, start, size, old_type, new_type);</span>
 }
 
 /* Remove a range of memory from the E820 table: */
<span class="p_chunk">@@ -546,9 +558,9 @@</span> <span class="p_context"> void __init e820__update_table_print(void)</span>
 	e820__print_table(&quot;modified&quot;);
 }
 
<span class="p_del">-static void __init e820__update_table_firmware(void)</span>
<span class="p_add">+static void __init e820__update_table_kexec(void)</span>
 {
<span class="p_del">-	e820__update_table(e820_table_firmware);</span>
<span class="p_add">+	e820__update_table(e820_table_kexec);</span>
 }
 
 #define MAX_GAP_END 0x100000000ull
<span class="p_chunk">@@ -623,7 +635,7 @@</span> <span class="p_context"> __init void e820__setup_pci_gap(void)</span>
 /*
  * Called late during init, in free_initmem().
  *
<span class="p_del">- * Initial e820_table and e820_table_firmware are largish __initdata arrays.</span>
<span class="p_add">+ * Initial e820_table and e820_table_kexec are largish __initdata arrays.</span>
  *
  * Copy them to a (usually much smaller) dynamically allocated area that is
  * sized precisely after the number of e820 entries.
<span class="p_chunk">@@ -643,6 +655,12 @@</span> <span class="p_context"> __init void e820__reallocate_tables(void)</span>
 	memcpy(n, e820_table, size);
 	e820_table = n;
 
<span class="p_add">+	size = offsetof(struct e820_table, entries) + sizeof(struct e820_entry)*e820_table_kexec-&gt;nr_entries;</span>
<span class="p_add">+	n = kmalloc(size, GFP_KERNEL);</span>
<span class="p_add">+	BUG_ON(!n);</span>
<span class="p_add">+	memcpy(n, e820_table_kexec, size);</span>
<span class="p_add">+	e820_table_kexec = n;</span>
<span class="p_add">+</span>
 	size = offsetof(struct e820_table, entries) + sizeof(struct e820_entry)*e820_table_firmware-&gt;nr_entries;
 	n = kmalloc(size, GFP_KERNEL);
 	BUG_ON(!n);
<span class="p_chunk">@@ -669,6 +687,9 @@</span> <span class="p_context"> void __init e820__memory_setup_extended(u64 phys_addr, u32 data_len)</span>
 	__append_e820_table(extmap, entries);
 	e820__update_table(e820_table);
 
<span class="p_add">+	memcpy(e820_table_kexec, e820_table, sizeof(*e820_table_kexec));</span>
<span class="p_add">+	memcpy(e820_table_firmware, e820_table, sizeof(*e820_table_firmware));</span>
<span class="p_add">+</span>
 	early_memunmap(sdata, data_len);
 	pr_info(&quot;e820: extended physical RAM map:\n&quot;);
 	e820__print_table(&quot;extended&quot;);
<span class="p_chunk">@@ -727,7 +748,7 @@</span> <span class="p_context"> core_initcall(e820__register_nvs_regions);</span>
 /*
  * Allocate the requested number of bytes with the requsted alignment
  * and return (the physical address) to the caller. Also register this
<span class="p_del">- * range in the &#39;firmware&#39; E820 table as a reserved range.</span>
<span class="p_add">+ * range in the &#39;kexec&#39; E820 table as a reserved range.</span>
  *
  * This allows kexec to fake a new mptable, as if it came from the real
  * system.
<span class="p_chunk">@@ -738,9 +759,9 @@</span> <span class="p_context"> u64 __init e820__memblock_alloc_reserved(u64 size, u64 align)</span>
 
 	addr = __memblock_alloc_base(size, align, MEMBLOCK_ALLOC_ACCESSIBLE);
 	if (addr) {
<span class="p_del">-		e820__range_update_firmware(addr, size, E820_TYPE_RAM, E820_TYPE_RESERVED);</span>
<span class="p_del">-		pr_info(&quot;e820: update e820_table_firmware for e820__memblock_alloc_reserved()\n&quot;);</span>
<span class="p_del">-		e820__update_table_firmware();</span>
<span class="p_add">+		e820__range_update_kexec(addr, size, E820_TYPE_RAM, E820_TYPE_RESERVED);</span>
<span class="p_add">+		pr_info(&quot;e820: update e820_table_kexec for e820__memblock_alloc_reserved()\n&quot;);</span>
<span class="p_add">+		e820__update_table_kexec();</span>
 	}
 
 	return addr;
<span class="p_chunk">@@ -923,13 +944,13 @@</span> <span class="p_context"> void __init e820__reserve_setup_data(void)</span>
 	while (pa_data) {
 		data = early_memremap(pa_data, sizeof(*data));
 		e820__range_update(pa_data, sizeof(*data)+data-&gt;len, E820_TYPE_RAM, E820_TYPE_RESERVED_KERN);
<span class="p_add">+		e820__range_update_kexec(pa_data, sizeof(*data)+data-&gt;len, E820_TYPE_RAM, E820_TYPE_RESERVED_KERN);</span>
 		pa_data = data-&gt;next;
 		early_memunmap(data, sizeof(*data));
 	}
 
 	e820__update_table(e820_table);
<span class="p_del">-</span>
<span class="p_del">-	memcpy(e820_table_firmware, e820_table, sizeof(*e820_table_firmware));</span>
<span class="p_add">+	e820__update_table(e820_table_kexec);</span>
 
 	pr_info(&quot;extended physical RAM map:\n&quot;);
 	e820__print_table(&quot;reserve setup_data&quot;);
<span class="p_chunk">@@ -1062,6 +1083,7 @@</span> <span class="p_context"> void __init e820__reserve_resources(void)</span>
 		res++;
 	}
 
<span class="p_add">+	/* Expose the bootloader-provided memory layout to the sysfs. */</span>
 	for (i = 0; i &lt; e820_table_firmware-&gt;nr_entries; i++) {
 		struct e820_entry *entry = e820_table_firmware-&gt;entries + i;
 
<span class="p_chunk">@@ -1175,6 +1197,7 @@</span> <span class="p_context"> void __init e820__memory_setup(void)</span>
 
 	who = x86_init.resources.memory_setup();
 
<span class="p_add">+	memcpy(e820_table_kexec, e820_table, sizeof(*e820_table_kexec));</span>
 	memcpy(e820_table_firmware, e820_table, sizeof(*e820_table_firmware));
 
 	pr_info(&quot;e820: BIOS-provided physical RAM map:\n&quot;);
<span class="p_header">diff --git a/arch/x86/kernel/kexec-bzimage64.c b/arch/x86/kernel/kexec-bzimage64.c</span>
<span class="p_header">index 9d7fd5e6689a..fb095ba0c02f 100644</span>
<span class="p_header">--- a/arch/x86/kernel/kexec-bzimage64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/kexec-bzimage64.c</span>
<span class="p_chunk">@@ -100,14 +100,14 @@</span> <span class="p_context"> static int setup_e820_entries(struct boot_params *params)</span>
 {
 	unsigned int nr_e820_entries;
 
<span class="p_del">-	nr_e820_entries = e820_table_firmware-&gt;nr_entries;</span>
<span class="p_add">+	nr_e820_entries = e820_table_kexec-&gt;nr_entries;</span>
 
 	/* TODO: Pass entries more than E820_MAX_ENTRIES_ZEROPAGE in bootparams setup data */
 	if (nr_e820_entries &gt; E820_MAX_ENTRIES_ZEROPAGE)
 		nr_e820_entries = E820_MAX_ENTRIES_ZEROPAGE;
 
 	params-&gt;e820_entries = nr_e820_entries;
<span class="p_del">-	memcpy(&amp;params-&gt;e820_table, &amp;e820_table_firmware-&gt;entries, nr_e820_entries*sizeof(struct e820_entry));</span>
<span class="p_add">+	memcpy(&amp;params-&gt;e820_table, &amp;e820_table_kexec-&gt;entries, nr_e820_entries*sizeof(struct e820_entry));</span>
 
 	return 0;
 }
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 65622f07e633..3486d0498800 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -1076,6 +1076,13 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	max_possible_pfn = max_pfn;
 
 	/*
<span class="p_add">+	 * This call is required when the CPU does not support PAT. If</span>
<span class="p_add">+	 * mtrr_bp_init() invoked it already via pat_init() the call has no</span>
<span class="p_add">+	 * effect.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	init_cache_modes();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
 	 * Define random base addresses for memory sections after max_pfn is
 	 * defined and before each memory section base is used.
 	 */
<span class="p_header">diff --git a/arch/x86/mm/pat.c b/arch/x86/mm/pat.c</span>
<span class="p_header">index 9b78685b66e6..45979502f64b 100644</span>
<span class="p_header">--- a/arch/x86/mm/pat.c</span>
<span class="p_header">+++ b/arch/x86/mm/pat.c</span>
<span class="p_chunk">@@ -37,14 +37,14 @@</span> <span class="p_context"></span>
 #undef pr_fmt
 #define pr_fmt(fmt) &quot;&quot; fmt
 
<span class="p_del">-static bool boot_cpu_done;</span>
<span class="p_del">-</span>
<span class="p_del">-static int __read_mostly __pat_enabled = IS_ENABLED(CONFIG_X86_PAT);</span>
<span class="p_del">-static void init_cache_modes(void);</span>
<span class="p_add">+static bool __read_mostly boot_cpu_done;</span>
<span class="p_add">+static bool __read_mostly pat_disabled = !IS_ENABLED(CONFIG_X86_PAT);</span>
<span class="p_add">+static bool __read_mostly pat_initialized;</span>
<span class="p_add">+static bool __read_mostly init_cm_done;</span>
 
 void pat_disable(const char *reason)
 {
<span class="p_del">-	if (!__pat_enabled)</span>
<span class="p_add">+	if (pat_disabled)</span>
 		return;
 
 	if (boot_cpu_done) {
<span class="p_chunk">@@ -52,10 +52,8 @@</span> <span class="p_context"> void pat_disable(const char *reason)</span>
 		return;
 	}
 
<span class="p_del">-	__pat_enabled = 0;</span>
<span class="p_add">+	pat_disabled = true;</span>
 	pr_info(&quot;x86/PAT: %s\n&quot;, reason);
<span class="p_del">-</span>
<span class="p_del">-	init_cache_modes();</span>
 }
 
 static int __init nopat(char *str)
<span class="p_chunk">@@ -67,7 +65,7 @@</span> <span class="p_context"> early_param(&quot;nopat&quot;, nopat);</span>
 
 bool pat_enabled(void)
 {
<span class="p_del">-	return !!__pat_enabled;</span>
<span class="p_add">+	return pat_initialized;</span>
 }
 EXPORT_SYMBOL_GPL(pat_enabled);
 
<span class="p_chunk">@@ -205,6 +203,8 @@</span> <span class="p_context"> static void __init_cache_modes(u64 pat)</span>
 		update_cache_mode_entry(i, cache);
 	}
 	pr_info(&quot;x86/PAT: Configuration [0-7]: %s\n&quot;, pat_msg);
<span class="p_add">+</span>
<span class="p_add">+	init_cm_done = true;</span>
 }
 
 #define PAT(x, y)	((u64)PAT_ ## y &lt;&lt; ((x)*8))
<span class="p_chunk">@@ -225,6 +225,7 @@</span> <span class="p_context"> static void pat_bsp_init(u64 pat)</span>
 	}
 
 	wrmsrl(MSR_IA32_CR_PAT, pat);
<span class="p_add">+	pat_initialized = true;</span>
 
 	__init_cache_modes(pat);
 }
<span class="p_chunk">@@ -242,10 +243,9 @@</span> <span class="p_context"> static void pat_ap_init(u64 pat)</span>
 	wrmsrl(MSR_IA32_CR_PAT, pat);
 }
 
<span class="p_del">-static void init_cache_modes(void)</span>
<span class="p_add">+void init_cache_modes(void)</span>
 {
 	u64 pat = 0;
<span class="p_del">-	static int init_cm_done;</span>
 
 	if (init_cm_done)
 		return;
<span class="p_chunk">@@ -287,8 +287,6 @@</span> <span class="p_context"> static void init_cache_modes(void)</span>
 	}
 
 	__init_cache_modes(pat);
<span class="p_del">-</span>
<span class="p_del">-	init_cm_done = 1;</span>
 }
 
 /**
<span class="p_chunk">@@ -306,10 +304,8 @@</span> <span class="p_context"> void pat_init(void)</span>
 	u64 pat;
 	struct cpuinfo_x86 *c = &amp;boot_cpu_data;
 
<span class="p_del">-	if (!pat_enabled()) {</span>
<span class="p_del">-		init_cache_modes();</span>
<span class="p_add">+	if (pat_disabled)</span>
 		return;
<span class="p_del">-	}</span>
 
 	if ((c-&gt;x86_vendor == X86_VENDOR_INTEL) &amp;&amp;
 	    (((c-&gt;x86 == 0x6) &amp;&amp; (c-&gt;x86_model &lt;= 0xd)) ||
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index 2983faab5b18..d4a61ddf9e62 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -588,31 +588,11 @@</span> <span class="p_context"> static unsigned long uv2_3_read_status(unsigned long offset, int rshft, int desc</span>
 }
 
 /*
<span class="p_del">- * Return whether the status of the descriptor that is normally used for this</span>
<span class="p_del">- * cpu (the one indexed by its hub-relative cpu number) is busy.</span>
<span class="p_del">- * The status of the original 32 descriptors is always reflected in the 64</span>
<span class="p_del">- * bits of UVH_LB_BAU_SB_ACTIVATION_STATUS_0.</span>
<span class="p_del">- * The bit provided by the activation_status_2 register is irrelevant to</span>
<span class="p_del">- * the status if it is only being tested for busy or not busy.</span>
<span class="p_del">- */</span>
<span class="p_del">-int normal_busy(struct bau_control *bcp)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int cpu = bcp-&gt;uvhub_cpu;</span>
<span class="p_del">-	int mmr_offset;</span>
<span class="p_del">-	int right_shift;</span>
<span class="p_del">-</span>
<span class="p_del">-	mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_del">-	right_shift = cpu * UV_ACT_STATUS_SIZE;</span>
<span class="p_del">-	return (((((read_lmmr(mmr_offset) &gt;&gt; right_shift) &amp;</span>
<span class="p_del">-				UV_ACT_STATUS_MASK)) &lt;&lt; 1) == UV2H_DESC_BUSY);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * Entered when a bau descriptor has gone into a permanent busy wait because
  * of a hardware bug.
  * Workaround the bug.
  */
<span class="p_del">-int handle_uv2_busy(struct bau_control *bcp)</span>
<span class="p_add">+static int handle_uv2_busy(struct bau_control *bcp)</span>
 {
 	struct ptc_stats *stat = bcp-&gt;statp;
 
<span class="p_chunk">@@ -917,8 +897,9 @@</span> <span class="p_context"> static void handle_cmplt(int completion_status, struct bau_desc *bau_desc,</span>
  * Returns 1 if it gives up entirely and the original cpu mask is to be
  * returned to the kernel.
  */
<span class="p_del">-int uv_flush_send_and_wait(struct cpumask *flush_mask, struct bau_control *bcp,</span>
<span class="p_del">-	struct bau_desc *bau_desc)</span>
<span class="p_add">+static int uv_flush_send_and_wait(struct cpumask *flush_mask,</span>
<span class="p_add">+				  struct bau_control *bcp,</span>
<span class="p_add">+				  struct bau_desc *bau_desc)</span>
 {
 	int seq_number = 0;
 	int completion_stat = 0;
<span class="p_chunk">@@ -1212,8 +1193,8 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
  * Search the message queue for any &#39;other&#39; unprocessed message with the
  * same software acknowledge resource bit vector as the &#39;msg&#39; message.
  */
<span class="p_del">-struct bau_pq_entry *find_another_by_swack(struct bau_pq_entry *msg,</span>
<span class="p_del">-					   struct bau_control *bcp)</span>
<span class="p_add">+static struct bau_pq_entry *find_another_by_swack(struct bau_pq_entry *msg,</span>
<span class="p_add">+						  struct bau_control *bcp)</span>
 {
 	struct bau_pq_entry *msg_next = msg + 1;
 	unsigned char swack_vec = msg-&gt;swack_vec;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



