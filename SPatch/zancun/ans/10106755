
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, hugetlbfs: include mm.h for vm_operations_struct - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, hugetlbfs: include mm.h for vm_operations_struct</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=79">Stephen Rothwell</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 12, 2017, 11:48 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171212224843.077fa51a@canb.auug.org.au&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10106755/mbox/"
   >mbox</a>
|
   <a href="/patch/10106755/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10106755/">/patch/10106755/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4B5C06032B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 11:48:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 358C829B82
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 11:48:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2925429B8A; Tue, 12 Dec 2017 11:48:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 82D8C29B82
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 11:48:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751643AbdLLLst (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Dec 2017 06:48:49 -0500
Received: from ozlabs.org ([103.22.144.67]:39401 &quot;EHLO ozlabs.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750853AbdLLLsq (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Dec 2017 06:48:46 -0500
Received: from authenticated.ozlabs.org (localhost [127.0.0.1])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by ozlabs.org (Postfix) with ESMTPSA id 3ywylJ14MCz9s83;
	Tue, 12 Dec 2017 22:48:44 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=canb.auug.org.au;
	s=201702; t=1513079324;
	bh=I7paUMKAvzYR2YM7ziNzmOGMeqH3kxESwVThuUv0G0I=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=tX+fKKFlMizeetb56GecUrzVZAI8LcVuCA58IOpiVbu+iroPl9k4e6aAMEnxp9rLh
	WN6i15iIdeI7oeCCuWzMSNDbX0oMWWsO3DsNl4SluTX5Nx+DWHi0ZqnSBAJ8ecCIj8
	Vl/BiVyspEUXwtBVZgIYsSt2CN/UuB9hsZHF2D/F6D67gDr+/nVr76Q8rzl5L67Q8x
	a6XJ1JY1UKYTvnOAJcRzwxOsdIiZcDoJCYk7ETHelf9AM+wjaXi6EANuC6M1cNAsA2
	R1mTHu9ANbsdIea6nyn4VPeresOgruDCP294f5H5U6cd0oc/WKxDISbDnyCIctPuy2
	d+JVHwg2l1/yw==
Date: Tue, 12 Dec 2017 22:48:43 +1100
From: Stephen Rothwell &lt;sfr@canb.auug.org.au&gt;
To: Michal Hocko &lt;mhocko@kernel.org&gt;
Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	linux-kernel@vger.kernel.org
Subject: Re: [PATCH] mm, hugetlbfs: include mm.h for vm_operations_struct
Message-ID: &lt;20171212224843.077fa51a@canb.auug.org.au&gt;
In-Reply-To: &lt;20171212074722.GG4779@dhcp22.suse.cz&gt;
References: &lt;20171211162243.233177-1-arnd@arndb.de&gt;
	&lt;20171212074722.GG4779@dhcp22.suse.cz&gt;
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=&quot;MP_/cfpRivBd+X8RjgX_=Bjfv.d&quot;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=79">Stephen Rothwell</a> - Dec. 12, 2017, 11:48 a.m.</div>
<pre class="content">
Hi Michal,

On Tue, 12 Dec 2017 08:47:22 +0100 Michal Hocko &lt;mhocko@kernel.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; On Mon 11-12-17 17:21:27, Arnd Bergmann wrote:</span>
<span class="quote">&gt; &gt; The infiniband umem code causes a build failure in some configurations:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; In file included from drivers/infiniband/core/umem_odp.c:41:0:</span>
<span class="quote">&gt; &gt; include/linux/hugetlb.h: In function &#39;vma_kernel_pagesize&#39;:</span>
<span class="quote">&gt; &gt; include/linux/hugetlb.h:262:32: error: dereferencing pointer to incomplete type &#39;const struct vm_operations_struct&#39;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Including the header file that defines the structure is sufficient to</span>
<span class="quote">&gt; &gt; avoid this.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Fixes: ac9284a6b670 (&quot;mm, hugetlbfs: introduce -&gt;pagesize() to vm_operations_struct&quot;)</span>
<span class="quote">&gt; &gt; Signed-off-by: Arnd Bergmann &lt;arnd@arndb.de&gt;  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve tried to do the same but the compilation failed for other</span>
<span class="quote">&gt; arches/configs. See http://lkml.kernel.org/r/20171210113715.GE20234@dhcp22.suse.cz</span>

I sent a patch yesterday for that particular powerpc failure ... You
were not CC&#39;d, but I have attached the email.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/hugetlb.h b/arch/powerpc/include/asm/hugetlb.h</span>
<span class="p_header">index 14c9d44f355b..3cc6ca1bdaf2 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/hugetlb.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/hugetlb.h</span>
<span class="p_chunk">@@ -123,6 +123,7 @@</span> <span class="p_context"> void hugetlb_free_pgd_range(struct mmu_gather *tlb, unsigned long addr,</span>
  * to override the version in mm/hugetlb.c
  */
 #define vma_mmu_pagesize vma_mmu_pagesize
<span class="p_add">+unsigned long vma_mmu_pagesize(struct vm_area_struct *vma);</span>
 
 /*
  * If the arch doesn&#39;t supply something else, assume that hugepage
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index c354befab724..b0f1f6768336 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -264,19 +264,6 @@</span> <span class="p_context"> static inline unsigned long vma_kernel_pagesize(struct vm_area_struct *vma)</span>
 	return PAGE_SIZE;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Return the page size being used by the MMU to back a VMA. In the majority</span>
<span class="p_del">- * of cases, the page size used by the kernel matches the MMU size. On</span>
<span class="p_del">- * architectures where it differs, an architecture-specific version of this</span>
<span class="p_del">- * function is required.</span>
<span class="p_del">- */</span>
<span class="p_del">-#ifndef vma_mmu_pagesize</span>
<span class="p_del">-static inline unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return vma_kernel_pagesize(vma);</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 #ifdef CONFIG_HUGETLBFS
 struct hugetlbfs_sb_info {
 	long	max_inodes;   /* inodes allowed */
<span class="p_chunk">@@ -615,6 +602,19 @@</span> <span class="p_context"> static inline void set_huge_swap_pte_at(struct mm_struct *mm, unsigned long addr</span>
 }
 #endif	/* CONFIG_HUGETLB_PAGE */
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Return the page size being used by the MMU to back a VMA. In the majority</span>
<span class="p_add">+ * of cases, the page size used by the kernel matches the MMU size. On</span>
<span class="p_add">+ * architectures where it differs, an architecture-specific version of this</span>
<span class="p_add">+ * function is required.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifndef vma_mmu_pagesize</span>
<span class="p_add">+static inline unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return vma_kernel_pagesize(vma);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 static inline spinlock_t *huge_pte_lock(struct hstate *h,
 					struct mm_struct *mm, pte_t *pte)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



