
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>powerpc/mm: Implemented default_hugepagesz verification for powerpc - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    powerpc/mm: Implemented default_hugepagesz verification for powerpc</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=175147">Victor Aoqui</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 3, 2017, 8:05 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170703200559.3743-1-victora@br.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9823935/mbox/"
   >mbox</a>
|
   <a href="/patch/9823935/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9823935/">/patch/9823935/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	45EC6604D9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 20:06:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 37154274A3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 20:06:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2A20927F54; Mon,  3 Jul 2017 20:06:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3E31F274A3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  3 Jul 2017 20:06:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752815AbdGCUGJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 3 Jul 2017 16:06:09 -0400
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:44822 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1752267AbdGCUGG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 3 Jul 2017 16:06:06 -0400
Received: from pps.filterd (m0098416.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v63K3VTk167026
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 3 Jul 2017 16:06:06 -0400
Received: from e24smtp03.br.ibm.com (e24smtp03.br.ibm.com [32.104.18.24])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2bfjk4343x-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 03 Jul 2017 16:06:05 -0400
Received: from localhost
	by e24smtp03.br.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;victora@linux.vnet.ibm.com&gt;; 
	Mon, 3 Jul 2017 17:06:04 -0300
Received: from d24relay04.br.ibm.com (9.18.232.146)
	by e24smtp03.br.ibm.com (10.172.0.139) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Mon, 3 Jul 2017 17:06:03 -0300
Received: from d24av02.br.ibm.com (d24av02.br.ibm.com [9.8.31.93])
	by d24relay04.br.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id
	v63K62eZ58720398
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 3 Jul 2017 17:06:02 -0300
Received: from d24av02.br.ibm.com (localhost [127.0.0.1])
	by d24av02.br.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with ESMTP id
	v63K636J024983
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 3 Jul 2017 17:06:03 -0300
Received: from localhost ([9.85.168.173])
	by d24av02.br.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with ESMTP id
	v63K61uI024956; Mon, 3 Jul 2017 17:06:02 -0300
From: Victor Aoqui &lt;victora@br.ibm.com&gt;
To: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org,
	aneesh.kumar@linux.vnet.ibm.com, mpe@ellerman.id.au
Cc: victora@br.ibm.com, victora@linux.vnet.ibm.com
Subject: [PATCH] powerpc/mm: Implemented default_hugepagesz verification for
	powerpc
Date: Mon,  3 Jul 2017 17:05:59 -0300
X-Mailer: git-send-email 2.11.0 (Apple Git-81)
X-TM-AS-MML: disable
x-cbid: 17070320-0024-0000-0000-000001874AF5
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17070320-0025-0000-0000-0000164F5590
Message-Id: &lt;20170703200559.3743-1-victora@br.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-07-03_13:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=0
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1703280000
	definitions=main-1707030328
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=175147">Victor Aoqui</a> - July 3, 2017, 8:05 p.m.</div>
<pre class="content">
Implemented default hugepage size verification (default_hugepagesz=)
in order to allow allocation of defined number of pages (hugepages=)
only for supported hugepage sizes.
<span class="signed-off-by">
Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
---
 arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - July 5, 2017, 4:26 a.m.</div>
<pre class="content">
On Tuesday 04 July 2017 01:35 AM, Victor Aoqui wrote:
<span class="quote">&gt; Implemented default hugepage size verification (default_hugepagesz=)</span>
<span class="quote">&gt; in order to allow allocation of defined number of pages (hugepages=)</span>
<span class="quote">&gt; only for supported hugepage sizes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++</span>
<span class="quote">&gt;   1 file changed, 15 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index a4f33de..464e72e 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -797,6 +797,21 @@ static int __init hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static int __init default_hugepage_setup_sz(char *str)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +        unsigned long long size;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        size = memparse(str, &amp;str);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if (add_huge_page_size(size) != 0) {</span>
<span class="quote">&gt; +                hugetlb_bad_size();</span>
<span class="quote">&gt; +                pr_err(&quot;Invalid default huge page size specified(%llu)\n&quot;, size);</span>
<span class="quote">&gt; +        }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        return 1;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +__setup(&quot;default_hugepagesz=&quot;, default_hugepage_setup_sz);</span>

isn&#39;t that a behavior change in what we have now ? . Right now if size 
specified is not supported, we fallback to HPAGE_SIZE.

mm/hugetlb.c

	if (!size_to_hstate(default_hstate_size)) {
		default_hstate_size = HPAGE_SIZE;
		if (!size_to_hstate(default_hstate_size))
			hugetlb_add_hstate(HUGETLB_PAGE_ORDER);
	}
<span class="quote">

&gt; +</span>
<span class="quote">&gt;   struct kmem_cache *hugepte_cache;</span>
<span class="quote">&gt;   static int __init hugetlbpage_init(void)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; </span>

Even if we want to do this, this should be done in generic code and 
should not be powerpc specific

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - July 5, 2017, 4:31 a.m.</div>
<pre class="content">
On 07/04/2017 01:35 AM, Victor Aoqui wrote:
<span class="quote">&gt; Implemented default hugepage size verification (default_hugepagesz=)</span>
<span class="quote">&gt; in order to allow allocation of defined number of pages (hugepages=)</span>
<span class="quote">&gt; only for supported hugepage sizes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 15 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index a4f33de..464e72e 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -797,6 +797,21 @@ static int __init hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static int __init default_hugepage_setup_sz(char *str)</span>

The function name should be hugetlb_default_size_setup in
sync with the generic function hugetlb_default_setup for the
same parameter default_hugepagesz.
<span class="quote">
&gt; +{</span>
<span class="quote">&gt; +        unsigned long long size;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        size = memparse(str, &amp;str);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if (add_huge_page_size(size) != 0) {</span>

I am little bit confused here. Do we always follow another
&#39;hugepages=&#39; element after &#39;default_hugepagesz&#39; ? If not,
then we dont have to do &#39;add_huge_page_size&#39;. But then
that function checks for valid huge page sizes and skips
adding hstate if its already added. So I guess it okay.
<span class="quote">
&gt; +                hugetlb_bad_size();</span>
<span class="quote">&gt; +                pr_err(&quot;Invalid default huge page size specified(%llu)\n&quot;, size);</span>

Error message should have &#39;ppc&#39; some where to indicate that
the arch rejected the size not core MM.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=175185">victora</a> - July 5, 2017, 4:03 p.m.</div>
<pre class="content">
Em 2017-07-05 01:26, Aneesh Kumar K.V escreveu:
<span class="quote">&gt; On Tuesday 04 July 2017 01:35 AM, Victor Aoqui wrote:</span>
<span class="quote">&gt;&gt; Implemented default hugepage size verification (default_hugepagesz=)</span>
<span class="quote">&gt;&gt; in order to allow allocation of defined number of pages (hugepages=)</span>
<span class="quote">&gt;&gt; only for supported hugepage sizes.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++</span>
<span class="quote">&gt;&gt;   1 file changed, 15 insertions(+)</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index a4f33de..464e72e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -797,6 +797,21 @@ static int __init hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; +static int __init default_hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +        unsigned long long size;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        size = memparse(str, &amp;str);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        if (add_huge_page_size(size) != 0) {</span>
<span class="quote">&gt;&gt; +                hugetlb_bad_size();</span>
<span class="quote">&gt;&gt; +                pr_err(&quot;Invalid default huge page size </span>
<span class="quote">&gt;&gt; specified(%llu)\n&quot;, size);</span>
<span class="quote">&gt;&gt; +        }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        return 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +__setup(&quot;default_hugepagesz=&quot;, default_hugepage_setup_sz);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; isn&#39;t that a behavior change in what we have now ? . Right now if size</span>
<span class="quote">&gt; specified is not supported, we fallback to HPAGE_SIZE.</span>

Yes, it is. However, is this a correct behavior? If we specify an 
unsupported value, for example default_hugepagesz=1M and hugepages=1000, 
1M will be ignored and 1000 pages of 16M (arch default) will be 
allocated. This could lead to non-expected out of of memory/performance 
issue.
<span class="quote">
&gt; </span>
<span class="quote">&gt; mm/hugetlb.c</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; if (!size_to_hstate(default_hstate_size)) {</span>
<span class="quote">&gt; 	default_hstate_size = HPAGE_SIZE;</span>
<span class="quote">&gt; 	if (!size_to_hstate(default_hstate_size))</span>
<span class="quote">&gt; 		hugetlb_add_hstate(HUGETLB_PAGE_ORDER);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   struct kmem_cache *hugepte_cache;</span>
<span class="quote">&gt;&gt;   static int __init hugetlbpage_init(void)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Even if we want to do this, this should be done in generic code and</span>
<span class="quote">&gt; should not be powerpc specific</span>
<span class="quote">&gt; </span>

The verification of supported powerpc hugepage size (hugepagesz=) is 
being performed on add_huge_page_size(), which is currently defined in 
arch/powerpc/mm/hugetlbpage.c. I think it makes more sense to implement 
default_hugepagesz= verification on arch/powerpc, don&#39;t you think?
<span class="quote">
&gt; -aneesh</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=175185">victora</a> - July 5, 2017, 4:09 p.m.</div>
<pre class="content">
Em 2017-07-05 01:31, Anshuman Khandual escreveu:
<span class="quote">&gt; On 07/04/2017 01:35 AM, Victor Aoqui wrote:</span>
<span class="quote">&gt;&gt; Implemented default hugepage size verification (default_hugepagesz=)</span>
<span class="quote">&gt;&gt; in order to allow allocation of defined number of pages (hugepages=)</span>
<span class="quote">&gt;&gt; only for supported hugepage sizes.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++</span>
<span class="quote">&gt;&gt;  1 file changed, 15 insertions(+)</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index a4f33de..464e72e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -797,6 +797,21 @@ static int __init hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; +static int __init default_hugepage_setup_sz(char *str)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The function name should be hugetlb_default_size_setup in</span>
<span class="quote">&gt; sync with the generic function hugetlb_default_setup for the</span>
<span class="quote">&gt; same parameter default_hugepagesz.</span>
<span class="quote">&gt; </span>

Yes, makes sense to me.
<span class="quote">
&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +        unsigned long long size;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        size = memparse(str, &amp;str);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        if (add_huge_page_size(size) != 0) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am little bit confused here. Do we always follow another</span>
<span class="quote">&gt; &#39;hugepages=&#39; element after &#39;default_hugepagesz&#39; ? If not,</span>
<span class="quote">&gt; then we dont have to do &#39;add_huge_page_size&#39;. But then</span>
<span class="quote">&gt; that function checks for valid huge page sizes and skips</span>
<span class="quote">&gt; adding hstate if its already added. So I guess it okay.</span>
<span class="quote">&gt; </span>

&#39;default_hugepagesz=&#39; is not always followed by &#39;hugepages=&#39;, but if we 
specify &#39;hugepages=&#39; along with &#39;default_hugepagesz=&#39; it will try to 
allocate the hugepage size specified. If the size is not supported by 
hardware, it will try to allocate the number of pages specified with the 
default hugepage size of the arch, which is not the desired behavior. So 
calling add_huge_page_size would verify if the hugepage size is 
supported and in case it&#39;s not, hugepages will not be allocated.
<span class="quote">
&gt;&gt; +                hugetlb_bad_size();</span>
<span class="quote">&gt;&gt; +                pr_err(&quot;Invalid default huge page size </span>
<span class="quote">&gt;&gt; specified(%llu)\n&quot;, size);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Error message should have &#39;ppc&#39; some where to indicate that</span>
<span class="quote">&gt; the arch rejected the size not core MM.</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=175185">victora</a> - July 12, 2017, 3:15 p.m.</div>
<pre class="content">
Em 2017-07-05 13:03, victora escreveu:
<span class="quote">&gt; Em 2017-07-05 01:26, Aneesh Kumar K.V escreveu:</span>
<span class="quote">&gt;&gt; On Tuesday 04 July 2017 01:35 AM, Victor Aoqui wrote:</span>
<span class="quote">&gt;&gt;&gt; Implemented default hugepage size verification (default_hugepagesz=)</span>
<span class="quote">&gt;&gt;&gt; in order to allow allocation of defined number of pages (hugepages=)</span>
<span class="quote">&gt;&gt;&gt; only for supported hugepage sizes.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Victor Aoqui &lt;victora@br.ibm.com&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 15 +++++++++++++++</span>
<span class="quote">&gt;&gt;&gt;   1 file changed, 15 insertions(+)</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; index a4f33de..464e72e 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; @@ -797,6 +797,21 @@ static int __init hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;&gt;&gt;   }</span>
<span class="quote">&gt;&gt;&gt;   __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; +static int __init default_hugepage_setup_sz(char *str)</span>
<span class="quote">&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt; +        unsigned long long size;</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +        size = memparse(str, &amp;str);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +        if (add_huge_page_size(size) != 0) {</span>
<span class="quote">&gt;&gt;&gt; +                hugetlb_bad_size();</span>
<span class="quote">&gt;&gt;&gt; +                pr_err(&quot;Invalid default huge page size </span>
<span class="quote">&gt;&gt;&gt; specified(%llu)\n&quot;, size);</span>
<span class="quote">&gt;&gt;&gt; +        }</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +        return 1;</span>
<span class="quote">&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;&gt; +__setup(&quot;default_hugepagesz=&quot;, default_hugepage_setup_sz);</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; isn&#39;t that a behavior change in what we have now ? . Right now if size</span>
<span class="quote">&gt;&gt; specified is not supported, we fallback to HPAGE_SIZE.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, it is. However, is this a correct behavior? If we specify an</span>
<span class="quote">&gt; unsupported value, for example default_hugepagesz=1M and</span>
<span class="quote">&gt; hugepages=1000, 1M will be ignored and 1000 pages of 16M (arch</span>
<span class="quote">&gt; default) will be allocated. This could lead to non-expected out of of</span>
<span class="quote">&gt; memory/performance issue.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; mm/hugetlb.c</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; if (!size_to_hstate(default_hstate_size)) {</span>
<span class="quote">&gt;&gt; 	default_hstate_size = HPAGE_SIZE;</span>
<span class="quote">&gt;&gt; 	if (!size_to_hstate(default_hstate_size))</span>
<span class="quote">&gt;&gt; 		hugetlb_add_hstate(HUGETLB_PAGE_ORDER);</span>
<span class="quote">&gt;&gt; }</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;   struct kmem_cache *hugepte_cache;</span>
<span class="quote">&gt;&gt;&gt;   static int __init hugetlbpage_init(void)</span>
<span class="quote">&gt;&gt;&gt;   {</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Even if we want to do this, this should be done in generic code and</span>
<span class="quote">&gt;&gt; should not be powerpc specific</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The verification of supported powerpc hugepage size (hugepagesz=) is</span>
<span class="quote">&gt; being performed on add_huge_page_size(), which is currently defined in</span>
<span class="quote">&gt; arch/powerpc/mm/hugetlbpage.c. I think it makes more sense to</span>
<span class="quote">&gt; implement default_hugepagesz= verification on arch/powerpc, don&#39;t you</span>
<span class="quote">&gt; think?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; -aneesh</span>

Hi Aneesh,

Did you have time to review the comments above?

Thanks
Victor
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">index a4f33de..464e72e 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -797,6 +797,21 @@</span> <span class="p_context"> static int __init hugepage_setup_sz(char *str)</span>
 }
 __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);
 
<span class="p_add">+static int __init default_hugepage_setup_sz(char *str)</span>
<span class="p_add">+{</span>
<span class="p_add">+        unsigned long long size;</span>
<span class="p_add">+</span>
<span class="p_add">+        size = memparse(str, &amp;str);</span>
<span class="p_add">+</span>
<span class="p_add">+        if (add_huge_page_size(size) != 0) {</span>
<span class="p_add">+                hugetlb_bad_size();</span>
<span class="p_add">+                pr_err(&quot;Invalid default huge page size specified(%llu)\n&quot;, size);</span>
<span class="p_add">+        }</span>
<span class="p_add">+</span>
<span class="p_add">+        return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+__setup(&quot;default_hugepagesz=&quot;, default_hugepage_setup_sz);</span>
<span class="p_add">+</span>
 struct kmem_cache *hugepte_cache;
 static int __init hugetlbpage_init(void)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



