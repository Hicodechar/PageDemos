
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/2] KVM: x86: fix APIC page invalidation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/2] KVM: x86: fix APIC page invalidation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=69351">Radim Kr?má?</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2017, 6:05 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171130180546.4331-1-rkrcmar@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10085507/mbox/"
   >mbox</a>
|
   <a href="/patch/10085507/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10085507/">/patch/10085507/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A24CA6035E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8FA7A29957
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 839F32A21D; Thu, 30 Nov 2017 18:06:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.9 required=2.0 tests=BAYES_00,HK_RANDOM_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 300DA29957
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753728AbdK3SGG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Nov 2017 13:06:06 -0500
Received: from mx1.redhat.com ([209.132.183.28]:55966 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751712AbdK3SGE (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Nov 2017 13:06:04 -0500
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id A863E883D8;
	Thu, 30 Nov 2017 18:06:04 +0000 (UTC)
Received: from flask (ovpn-204-21.brq.redhat.com [10.40.204.21])
	by smtp.corp.redhat.com (Postfix) with SMTP id 30061620B3;
	Thu, 30 Nov 2017 18:06:00 +0000 (UTC)
Received: by flask (sSMTP sendmail emulation);
	Thu, 30 Nov 2017 19:05:59 +0100
From: =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;
To: =?UTF-8?q?Fabian=20Gr=C3=BCnbichler?= &lt;f.gruenbichler@proxmox.com&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	kvm@vger.kernel.org, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
Subject: [PATCH 1/2] KVM: x86: fix APIC page invalidation
Date: Thu, 30 Nov 2017 19:05:45 +0100
Message-Id: &lt;20171130180546.4331-1-rkrcmar@redhat.com&gt;
In-Reply-To: &lt;20171130161933.GB1606@flask&gt;
References: &lt;20171130161933.GB1606@flask&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Thu, 30 Nov 2017 18:06:04 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=69351">Radim Kr?má?</a> - Nov. 30, 2017, 6:05 p.m.</div>
<pre class="content">
Implementation of the unpinned APIC page didn&#39;t update the VMCS address
cache when invalidation was done through range mmu notifiers.
This became a problem when the page notifier was removed.

Re-introduce the arch-specific helper and call it from ...range_start.

Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)
Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)
<span class="signed-off-by">Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
---
 arch/x86/include/asm/kvm_host.h |  3 +++
 arch/x86/kvm/x86.c              | 14 ++++++++++++++
 virt/kvm/kvm_main.c             |  8 ++++++++
 3 files changed, 25 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176987">Fabian Grünbichler</a> - Dec. 1, 2017, 12:21 p.m.</div>
<pre class="content">
On Thu, Nov 30, 2017 at 07:05:45PM +0100, Radim Krčmář wrote:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>

Thanks for the fast reaction!

Some initial test rounds with just Patch 1 applied on top of 4.13.8 show
no blue screens, will do more tests also with 4.14.3 on Monday and
report back.

4.15-rc1 crashes for unrelated reasons, but I can re-run the tests once
a stable-enough rc has been cut..
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - Dec. 1, 2017, 3:27 p.m.</div>
<pre class="content">
On 30/11/2017 19:05, Radim Krčmář wrote:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;  3 files changed, 25 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; index 977de5fb968b..c16c3f924863 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; @@ -1435,4 +1435,7 @@ static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
<span class="quote">&gt;  #define put_smstate(type, buf, offset, val)                      \</span>
<span class="quote">&gt;  	*(type *)((buf) + (offset) - 0x7e00) = val</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif /* _ASM_X86_KVM_HOST_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; index eee8e7faf1af..a219974cdb89 100644</span>
<span class="quote">&gt; --- a/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; +++ b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; @@ -6778,6 +6778,20 @@ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  	kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long apic_address;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * The physical address of apic access page is stored in the VMCS.</span>
<span class="quote">&gt; +	 * Update it when it becomes invalid.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; +	if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="quote">&gt; +		kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct page *page = NULL;</span>
<span class="quote">&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; index c01cff064ec5..b7f4689e373f 100644</span>
<span class="quote">&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; @@ -135,6 +135,11 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
<span class="quote">&gt;  static unsigned long long kvm_createvm_count;</span>
<span class="quote">&gt;  static unsigned long long kvm_active_vms;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  bool kvm_is_reserved_pfn(kvm_pfn_t pfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (pfn_valid(pfn))</span>
<span class="quote">&gt; @@ -360,6 +365,9 @@ static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;  		kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; </span>
<span class="reviewed-by">
Reviewed-by: Paolo Bonzini &lt;pbonzini@redhat.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=965">Andrea Arcangeli</a> - Dec. 3, 2017, 5:28 p.m.</div>
<pre class="content">
On Thu, Nov 30, 2017 at 07:05:45PM +0100, Radim Krčmář wrote:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="reviewed-by">
Reviewed-by: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>

Cc: &lt;stable@vger.kernel.org&gt;

Thanks,
Andrea
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a> - Dec. 6, 2017, 2:32 a.m.</div>
<pre class="content">
2017-12-01 2:05 GMT+08:00 Radim Krčmář &lt;rkrcmar@redhat.com&gt;:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="tested-by">
Tested-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>

I observe the windows 2016 guest hang during boot on a heavy memory
overcommit host, and this commit fixes it.

Regards,
Wanpeng Li
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;  3 files changed, 25 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; index 977de5fb968b..c16c3f924863 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; @@ -1435,4 +1435,7 @@ static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
<span class="quote">&gt;  #define put_smstate(type, buf, offset, val)                      \</span>
<span class="quote">&gt;         *(type *)((buf) + (offset) - 0x7e00) = val</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +               unsigned long start, unsigned long end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif /* _ASM_X86_KVM_HOST_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; index eee8e7faf1af..a219974cdb89 100644</span>
<span class="quote">&gt; --- a/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; +++ b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; @@ -6778,6 +6778,20 @@ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;         kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       unsigned long apic_address;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       /*</span>
<span class="quote">&gt; +        * The physical address of apic access page is stored in the VMCS.</span>
<span class="quote">&gt; +        * Update it when it becomes invalid.</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; +       if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="quote">&gt; +               kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;         struct page *page = NULL;</span>
<span class="quote">&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; index c01cff064ec5..b7f4689e373f 100644</span>
<span class="quote">&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; @@ -135,6 +135,11 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
<span class="quote">&gt;  static unsigned long long kvm_createvm_count;</span>
<span class="quote">&gt;  static unsigned long long kvm_active_vms;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  bool kvm_is_reserved_pfn(kvm_pfn_t pfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;         if (pfn_valid(pfn))</span>
<span class="quote">&gt; @@ -360,6 +365,9 @@ static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;                 kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;         srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.14.2</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176987">Fabian Grünbichler</a> - Dec. 6, 2017, 8:15 a.m.</div>
<pre class="content">
On Thu, Nov 30, 2017 at 07:05:45PM +0100, Radim Krčmář wrote:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="tested-by">
Tested-by: Fabian Grünbichler &lt;f.gruenbichler@proxmox.com&gt;</span>

no further issues observed with this patch applied on top of 4.13 and
4.14 - thanks!
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;  3 files changed, 25 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; index 977de5fb968b..c16c3f924863 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt; @@ -1435,4 +1435,7 @@ static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
<span class="quote">&gt;  #define put_smstate(type, buf, offset, val)                      \</span>
<span class="quote">&gt;  	*(type *)((buf) + (offset) - 0x7e00) = val</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif /* _ASM_X86_KVM_HOST_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; index eee8e7faf1af..a219974cdb89 100644</span>
<span class="quote">&gt; --- a/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; +++ b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt; @@ -6778,6 +6778,20 @@ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  	kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long apic_address;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * The physical address of apic access page is stored in the VMCS.</span>
<span class="quote">&gt; +	 * Update it when it becomes invalid.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; +	if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="quote">&gt; +		kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct page *page = NULL;</span>
<span class="quote">&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; index c01cff064ec5..b7f4689e373f 100644</span>
<span class="quote">&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; @@ -135,6 +135,11 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
<span class="quote">&gt;  static unsigned long long kvm_createvm_count;</span>
<span class="quote">&gt;  static unsigned long long kvm_active_vms;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt; +		unsigned long start, unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  bool kvm_is_reserved_pfn(kvm_pfn_t pfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (pfn_valid(pfn))</span>
<span class="quote">&gt; @@ -360,6 +365,9 @@ static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;  		kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.14.2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=169973">王金浦</a> - Dec. 6, 2017, 9:50 a.m.</div>
<pre class="content">
2017-12-06 3:32 GMT+01:00 Wanpeng Li &lt;kernellwp@gmail.com&gt;:
<span class="quote">&gt; 2017-12-01 2:05 GMT+08:00 Radim Krčmář &lt;rkrcmar@redhat.com&gt;:</span>
<span class="quote">&gt;&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt;&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt;&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt;&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt;&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
So the patch should be backport to v3.18+?

Thanks,
Jack
<span class="quote">&gt;</span>
<span class="quote">&gt; Tested-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I observe the windows 2016 guest hang during boot on a heavy memory</span>
<span class="quote">&gt; overcommit host, and this commit fixes it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Wanpeng Li</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;&gt;  3 files changed, 25 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; index 977de5fb968b..c16c3f924863 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt; @@ -1435,4 +1435,7 @@ static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
<span class="quote">&gt;&gt;  #define put_smstate(type, buf, offset, val)                      \</span>
<span class="quote">&gt;&gt;         *(type *)((buf) + (offset) - 0x7e00) = val</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt; +               unsigned long start, unsigned long end);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #endif /* _ASM_X86_KVM_HOST_H */</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt; index eee8e7faf1af..a219974cdb89 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt; @@ -6778,6 +6778,20 @@ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;         kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       unsigned long apic_address;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt; +        * The physical address of apic access page is stored in the VMCS.</span>
<span class="quote">&gt;&gt; +        * Update it when it becomes invalid.</span>
<span class="quote">&gt;&gt; +        */</span>
<span class="quote">&gt;&gt; +       apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;&gt; +       if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="quote">&gt;&gt; +               kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;         struct page *page = NULL;</span>
<span class="quote">&gt;&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt; index c01cff064ec5..b7f4689e373f 100644</span>
<span class="quote">&gt;&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt; @@ -135,6 +135,11 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
<span class="quote">&gt;&gt;  static unsigned long long kvm_createvm_count;</span>
<span class="quote">&gt;&gt;  static unsigned long long kvm_active_vms;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  bool kvm_is_reserved_pfn(kvm_pfn_t pfn)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;         if (pfn_valid(pfn))</span>
<span class="quote">&gt;&gt; @@ -360,6 +365,9 @@ static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;&gt;                 kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;         spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;         srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; 2.14.2</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt;&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt;&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt;&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - Dec. 6, 2017, 10 a.m.</div>
<pre class="content">
On 06/12/2017 10:50, 王金浦 wrote:
<span class="quote">&gt; 2017-12-06 3:32 GMT+01:00 Wanpeng Li &lt;kernellwp@gmail.com&gt;:</span>
<span class="quote">&gt;&gt; 2017-12-01 2:05 GMT+08:00 Radim Krčmář &lt;rkrcmar@redhat.com&gt;:</span>
<span class="quote">&gt;&gt;&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS address</span>
<span class="quote">&gt;&gt;&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt;&gt;&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Re-introduce the arch-specific helper and call it from ...range_start.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt;&gt;&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic v2&quot;)</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; So the patch should be backport to v3.18+?</span>

In practice the invalidate_page callback was enough because the APIC
page is allocated with alloc_page().  But it doesn&#39;t hurt.

Paolo
<span class="quote">
&gt; Thanks,</span>
<span class="quote">&gt; Jack</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I observe the windows 2016 guest hang during boot on a heavy memory</span>
<span class="quote">&gt;&gt; overcommit host, and this commit fixes it.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Regards,</span>
<span class="quote">&gt;&gt; Wanpeng Li</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;&gt;&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;&gt;&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;&gt;&gt;  3 files changed, 25 insertions(+)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt;&gt; index 977de5fb968b..c16c3f924863 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="quote">&gt;&gt;&gt; @@ -1435,4 +1435,7 @@ static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
<span class="quote">&gt;&gt;&gt;  #define put_smstate(type, buf, offset, val)                      \</span>
<span class="quote">&gt;&gt;&gt;         *(type *)((buf) + (offset) - 0x7e00) = val</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt;&gt; +               unsigned long start, unsigned long end);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;  #endif /* _ASM_X86_KVM_HOST_H */</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt;&gt; index eee8e7faf1af..a219974cdb89 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/kvm/x86.c</span>
<span class="quote">&gt;&gt;&gt; @@ -6778,6 +6778,20 @@ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;&gt;         kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="quote">&gt;&gt;&gt;  }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; +void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt;&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt; +       unsigned long apic_address;</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt;&gt; +        * The physical address of apic access page is stored in the VMCS.</span>
<span class="quote">&gt;&gt;&gt; +        * Update it when it becomes invalid.</span>
<span class="quote">&gt;&gt;&gt; +        */</span>
<span class="quote">&gt;&gt;&gt; +       apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;&gt;&gt; +       if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="quote">&gt;&gt;&gt; +               kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="quote">&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;  void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;         struct page *page = NULL;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt;&gt; index c01cff064ec5..b7f4689e373f 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt;&gt;&gt; @@ -135,6 +135,11 @@ static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
<span class="quote">&gt;&gt;&gt;  static unsigned long long kvm_createvm_count;</span>
<span class="quote">&gt;&gt;&gt;  static unsigned long long kvm_active_vms;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; +__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="quote">&gt;&gt;&gt; +               unsigned long start, unsigned long end)</span>
<span class="quote">&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;  bool kvm_is_reserved_pfn(kvm_pfn_t pfn)</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;         if (pfn_valid(pfn))</span>
<span class="quote">&gt;&gt;&gt; @@ -360,6 +365,9 @@ static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;&gt;&gt;                 kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;         spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +       kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;         srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;&gt;&gt;  }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; --</span>
<span class="quote">&gt;&gt;&gt; 2.14.2</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; --</span>
<span class="quote">&gt;&gt;&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt;&gt;&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt;&gt;&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt;&gt;&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19351">Richard Purdie</a> - Dec. 13, 2017, 12:54 p.m.</div>
<pre class="content">
On Thu, 2017-11-30 at 19:05 +0100, Radim Krčmář wrote:
<span class="quote">&gt; Implementation of the unpinned APIC page didn&#39;t update the VMCS</span>
<span class="quote">&gt; address</span>
<span class="quote">&gt; cache when invalidation was done through range mmu notifiers.</span>
<span class="quote">&gt; This became a problem when the page notifier was removed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-introduce the arch-specific helper and call it from</span>
<span class="quote">&gt; ...range_start.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 38b9917350cb (&quot;kvm: vmx: Implement set_apic_access_page_addr&quot;)</span>
<span class="quote">&gt; Fixes: 369ea8242c0f (&quot;mm/rmap: update to new mmu_notifier semantic</span>
<span class="quote">&gt; v2&quot;)</span>
<span class="quote">&gt; Signed-off-by: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/kvm_host.h |  3 +++</span>
<span class="quote">&gt;  arch/x86/kvm/x86.c              | 14 ++++++++++++++</span>
<span class="quote">&gt;  virt/kvm/kvm_main.c             |  8 ++++++++</span>
<span class="quote">&gt;  3 files changed, 25 insertions(+)</span>

Thanks for this. I&#39;ve been chasing APIC related hangs booting images
with qemu-system-x86_64 on 4.13 and 4.14 host kernels where the guest
doesn&#39;t have x2apic enabled.

I can confirm this fixes issues the Yocto Project automated testing
infrastructure was seeing.

I&#39;d like to add support for backporting this in stable.
<span class="tested-by">
Tested-by: Richard Purdie &lt;richard.purdie@linuxfoundation.org&gt;</span>

Cheers,

Richard
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">index 977de5fb968b..c16c3f924863 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -1435,4 +1435,7 @@</span> <span class="p_context"> static inline int kvm_cpu_get_apicid(int mps_cpu)</span>
 #define put_smstate(type, buf, offset, val)                      \
 	*(type *)((buf) + (offset) - 0x7e00) = val
 
<span class="p_add">+void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="p_add">+		unsigned long start, unsigned long end);</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_KVM_HOST_H */
<span class="p_header">diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="p_header">index eee8e7faf1af..a219974cdb89 100644</span>
<span class="p_header">--- a/arch/x86/kvm/x86.c</span>
<span class="p_header">+++ b/arch/x86/kvm/x86.c</span>
<span class="p_chunk">@@ -6778,6 +6778,20 @@</span> <span class="p_context"> static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
 	kvm_x86_ops-&gt;tlb_flush(vcpu);
 }
 
<span class="p_add">+void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long apic_address;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The physical address of apic access page is stored in the VMCS.</span>
<span class="p_add">+	 * Update it when it becomes invalid.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	apic_address = gfn_to_hva(kvm, APIC_DEFAULT_PHYS_BASE &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+	if (start &lt;= apic_address &amp;&amp; apic_address &lt; end)</span>
<span class="p_add">+		kvm_make_all_cpus_request(kvm, KVM_REQ_APIC_PAGE_RELOAD);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)
 {
 	struct page *page = NULL;
<span class="p_header">diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="p_header">index c01cff064ec5..b7f4689e373f 100644</span>
<span class="p_header">--- a/virt/kvm/kvm_main.c</span>
<span class="p_header">+++ b/virt/kvm/kvm_main.c</span>
<span class="p_chunk">@@ -135,6 +135,11 @@</span> <span class="p_context"> static void kvm_uevent_notify_change(unsigned int type, struct kvm *kvm);</span>
 static unsigned long long kvm_createvm_count;
 static unsigned long long kvm_active_vms;
 
<span class="p_add">+__weak void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 bool kvm_is_reserved_pfn(kvm_pfn_t pfn)
 {
 	if (pfn_valid(pfn))
<span class="p_chunk">@@ -360,6 +365,9 @@</span> <span class="p_context"> static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
 		kvm_flush_remote_tlbs(kvm);
 
 	spin_unlock(&amp;kvm-&gt;mmu_lock);
<span class="p_add">+</span>
<span class="p_add">+	kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="p_add">+</span>
 	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



