
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv5,22/36] mm, hugetlb: switch hugetlbfs to multi-order radix-tree entries - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv5,22/36] mm, hugetlb: switch hugetlbfs to multi-order radix-tree entries</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 29, 2016, 11:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161129112304.90056-23-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9451561/mbox/"
   >mbox</a>
|
   <a href="/patch/9451561/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9451561/">/patch/9451561/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7225B60710 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Nov 2016 11:26:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 51CE5282F5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Nov 2016 11:26:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4342428113; Tue, 29 Nov 2016 11:26:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 455B628113
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Nov 2016 11:26:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756857AbcK2L0f (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 29 Nov 2016 06:26:35 -0500
Received: from mga01.intel.com ([192.55.52.88]:60698 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1757330AbcK2LYJ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 29 Nov 2016 06:24:09 -0500
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by fmsmga101.fm.intel.com with ESMTP; 29 Nov 2016 03:24:07 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.31,568,1473145200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;10982509&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga002.jf.intel.com with ESMTP; 29 Nov 2016 03:24:03 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 05AB7AD0; Tue, 29 Nov 2016 13:23:12 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: &quot;Theodore Ts&#39;o&quot; &lt;tytso@mit.edu&gt;,
	Andreas Dilger &lt;adilger.kernel@dilger.ca&gt;, Jan Kara &lt;jack@suse.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Alexander Viro &lt;viro@zeniv.linux.org.uk&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Matthew Wilcox &lt;willy@infradead.org&gt;,
	Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;,
	linux-ext4@vger.kernel.org, linux-fsdevel@vger.kernel.org,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	linux-block@vger.kernel.org, Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv5 22/36] mm,
	hugetlb: switch hugetlbfs to multi-order radix-tree entries
Date: Tue, 29 Nov 2016 14:22:50 +0300
Message-Id: &lt;20161129112304.90056-23-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161129112304.90056-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20161129112304.90056-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Nov. 29, 2016, 11:22 a.m.</div>
<pre class="content">
<span class="from">From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

Currently, hugetlb pages are linked to page cache on the basis of hugepage
offset (derived from vma_hugecache_offset()) for historical reason, which
doesn&#39;t match to the generic usage of page cache and requires some routines
to covert page offset &lt;=&gt; hugepage offset in common path. This patch
adjusts code for multi-order radix-tree to avoid the situation.

Main change is on the behavior of page-&gt;index for hugetlbfs. Before this
patch, it represented hugepage offset, but with this patch it represents
page offset. So index-related code have to be updated.
Note that hugetlb_fault_mutex_hash() and reservation region handling are
still working with hugepage offset.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
[kirill.shutemov@linux.intel.com: reject fixed]
<span class="signed-off-by">Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 fs/hugetlbfs/inode.c    | 22 ++++++++++------------
 include/linux/pagemap.h | 23 +++--------------------
 mm/filemap.c            | 12 +++++-------
 mm/hugetlb.c            | 19 ++++++-------------
 mm/truncate.c           |  8 ++++----
 5 files changed, 28 insertions(+), 56 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - Nov. 30, 2016, 9:48 a.m.</div>
<pre class="content">
On Tuesday, November 29, 2016 7:23 PM Kirill A. Shutemov wrote:
<span class="quote">&gt; @@ -607,10 +605,10 @@ static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  		/* Set numa allocation policy based on index */</span>
<span class="quote">&gt; -		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index);</span>
<span class="quote">&gt; +		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index &gt;&gt; huge_page_order(h));</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  		/* addr is the offset within the file (zero based) */</span>
<span class="quote">&gt; -		addr = index * hpage_size;</span>
<span class="quote">&gt; +		addr = index &lt;&lt; PAGE_SHIFT &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  		/* mutex taken here, fault path and hole punch */</span>
<span class="quote">&gt;  		hash = hugetlb_fault_mutex_hash(h, mm, &amp;pseudo_vma, mapping,</span>

Seems we can&#39;t use index in computing hash as long as it isn&#39;t in huge page size.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Nov. 30, 2016, 1:15 p.m.</div>
<pre class="content">
On Wed, Nov 30, 2016 at 05:48:05PM +0800, Hillf Danton wrote:
<span class="quote">&gt; On Tuesday, November 29, 2016 7:23 PM Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; @@ -607,10 +605,10 @@ static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
<span class="quote">&gt; &gt;  		}</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  		/* Set numa allocation policy based on index */</span>
<span class="quote">&gt; &gt; -		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index);</span>
<span class="quote">&gt; &gt; +		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index &gt;&gt; huge_page_order(h));</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  		/* addr is the offset within the file (zero based) */</span>
<span class="quote">&gt; &gt; -		addr = index * hpage_size;</span>
<span class="quote">&gt; &gt; +		addr = index &lt;&lt; PAGE_SHIFT &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  		/* mutex taken here, fault path and hole punch */</span>
<span class="quote">&gt; &gt;  		hash = hugetlb_fault_mutex_hash(h, mm, &amp;pseudo_vma, mapping,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Seems we can&#39;t use index in computing hash as long as it isn&#39;t in huge page size.</span>

Look at changes in hugetlb_fault_mutex_hash(): we shift the index right by
huge_page_order(), before calculating the hash. I don&#39;t see a problem
here.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - Dec. 1, 2016, 3:10 a.m.</div>
<pre class="content">
On Wednesday, November 30, 2016 9:16 PM Kirill A. Shutemov wrote:
<span class="quote">&gt; On Wed, Nov 30, 2016 at 05:48:05PM +0800, Hillf Danton wrote:</span>
<span class="quote">&gt; &gt; On Tuesday, November 29, 2016 7:23 PM Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; @@ -607,10 +605,10 @@ static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
<span class="quote">&gt; &gt; &gt;  		}</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  		/* Set numa allocation policy based on index */</span>
<span class="quote">&gt; &gt; &gt; -		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index);</span>
<span class="quote">&gt; &gt; &gt; +		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index &gt;&gt; huge_page_order(h));</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  		/* addr is the offset within the file (zero based) */</span>
<span class="quote">&gt; &gt; &gt; -		addr = index * hpage_size;</span>
<span class="quote">&gt; &gt; &gt; +		addr = index &lt;&lt; PAGE_SHIFT &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;  		/* mutex taken here, fault path and hole punch */</span>
<span class="quote">&gt; &gt; &gt;  		hash = hugetlb_fault_mutex_hash(h, mm, &amp;pseudo_vma, mapping,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Seems we can&#39;t use index in computing hash as long as it isn&#39;t in huge page size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Look at changes in hugetlb_fault_mutex_hash(): we shift the index right by</span>
<span class="quote">&gt; huge_page_order(), before calculating the hash. I don&#39;t see a problem</span>
<span class="quote">&gt; here.</span>
<span class="quote">&gt; </span>
You are right. I missed that critical point.

thanks
Hillf
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 4fb7b10f3a05..45992c839794 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -388,8 +388,8 @@</span> <span class="p_context"> static void remove_inode_hugepages(struct inode *inode, loff_t lstart,</span>
 {
 	struct hstate *h = hstate_inode(inode);
 	struct address_space *mapping = &amp;inode-&gt;i_data;
<span class="p_del">-	const pgoff_t start = lstart &gt;&gt; huge_page_shift(h);</span>
<span class="p_del">-	const pgoff_t end = lend &gt;&gt; huge_page_shift(h);</span>
<span class="p_add">+	const pgoff_t start = lstart &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	const pgoff_t end = lend &gt;&gt; PAGE_SHIFT;</span>
 	struct vm_area_struct pseudo_vma;
 	struct pagevec pvec;
 	pgoff_t next;
<span class="p_chunk">@@ -446,8 +446,7 @@</span> <span class="p_context"> static void remove_inode_hugepages(struct inode *inode, loff_t lstart,</span>
 
 				i_mmap_lock_write(mapping);
 				hugetlb_vmdelete_list(&amp;mapping-&gt;i_mmap,
<span class="p_del">-					next * pages_per_huge_page(h),</span>
<span class="p_del">-					(next + 1) * pages_per_huge_page(h));</span>
<span class="p_add">+					next, next + 1);</span>
 				i_mmap_unlock_write(mapping);
 			}
 
<span class="p_chunk">@@ -466,7 +465,8 @@</span> <span class="p_context"> static void remove_inode_hugepages(struct inode *inode, loff_t lstart,</span>
 			freed++;
 			if (!truncate_op) {
 				if (unlikely(hugetlb_unreserve_pages(inode,
<span class="p_del">-							next, next + 1, 1)))</span>
<span class="p_add">+						(next) &lt;&lt; huge_page_order(h),</span>
<span class="p_add">+						(next + 1) &lt;&lt; huge_page_order(h), 1)))</span>
 					hugetlb_fix_reserve_counts(inode);
 			}
 
<span class="p_chunk">@@ -550,8 +550,6 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 	struct hstate *h = hstate_inode(inode);
 	struct vm_area_struct pseudo_vma;
 	struct mm_struct *mm = current-&gt;mm;
<span class="p_del">-	loff_t hpage_size = huge_page_size(h);</span>
<span class="p_del">-	unsigned long hpage_shift = huge_page_shift(h);</span>
 	pgoff_t start, index, end;
 	int error;
 	u32 hash;
<span class="p_chunk">@@ -567,8 +565,8 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 	 * For this range, start is rounded down and end is rounded up
 	 * as well as being converted to page offsets.
 	 */
<span class="p_del">-	start = offset &gt;&gt; hpage_shift;</span>
<span class="p_del">-	end = (offset + len + hpage_size - 1) &gt;&gt; hpage_shift;</span>
<span class="p_add">+	start = offset &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	end = (offset + len + huge_page_size(h) - 1) &gt;&gt; PAGE_SHIFT;</span>
 
 	inode_lock(inode);
 
<span class="p_chunk">@@ -586,7 +584,7 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 	pseudo_vma.vm_flags = (VM_HUGETLB | VM_MAYSHARE | VM_SHARED);
 	pseudo_vma.vm_file = file;
 
<span class="p_del">-	for (index = start; index &lt; end; index++) {</span>
<span class="p_add">+	for (index = start; index &lt; end; index += pages_per_huge_page(h)) {</span>
 		/*
 		 * This is supposed to be the vaddr where the page is being
 		 * faulted in, but we have no vaddr here.
<span class="p_chunk">@@ -607,10 +605,10 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 		}
 
 		/* Set numa allocation policy based on index */
<span class="p_del">-		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index);</span>
<span class="p_add">+		hugetlb_set_vma_policy(&amp;pseudo_vma, inode, index &gt;&gt; huge_page_order(h));</span>
 
 		/* addr is the offset within the file (zero based) */
<span class="p_del">-		addr = index * hpage_size;</span>
<span class="p_add">+		addr = index &lt;&lt; PAGE_SHIFT &amp; ~huge_page_mask(h);</span>
 
 		/* mutex taken here, fault path and hole punch */
 		hash = hugetlb_fault_mutex_hash(h, mm, &amp;pseudo_vma, mapping,
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index faa3fa173939..bb0b7022421e 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -398,10 +398,9 @@</span> <span class="p_context"> static inline struct page *read_mapping_page(struct address_space *mapping,</span>
 }
 
 /*
<span class="p_del">- * Get index of the page with in radix-tree</span>
<span class="p_del">- * (TODO: remove once hugetlb pages will have -&gt;index in PAGE_SIZE)</span>
<span class="p_add">+ * Get the offset in PAGE_SIZE.</span>
  */
<span class="p_del">-static inline pgoff_t page_to_index(struct page *page)</span>
<span class="p_add">+static inline pgoff_t page_to_pgoff(struct page *page)</span>
 {
 	pgoff_t pgoff;
 
<span class="p_chunk">@@ -418,18 +417,6 @@</span> <span class="p_context"> static inline pgoff_t page_to_index(struct page *page)</span>
 }
 
 /*
<span class="p_del">- * Get the offset in PAGE_SIZE.</span>
<span class="p_del">- * (TODO: hugepage should have -&gt;index in PAGE_SIZE)</span>
<span class="p_del">- */</span>
<span class="p_del">-static inline pgoff_t page_to_pgoff(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (unlikely(PageHeadHuge(page)))</span>
<span class="p_del">-		return page-&gt;index &lt;&lt; compound_order(page);</span>
<span class="p_del">-</span>
<span class="p_del">-	return page_to_index(page);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * Return byte-offset into filesystem object for page.
  */
 static inline loff_t page_offset(struct page *page)
<span class="p_chunk">@@ -442,15 +429,11 @@</span> <span class="p_context"> static inline loff_t page_file_offset(struct page *page)</span>
 	return ((loff_t)page_index(page)) &lt;&lt; PAGE_SHIFT;
 }
 
<span class="p_del">-extern pgoff_t linear_hugepage_index(struct vm_area_struct *vma,</span>
<span class="p_del">-				     unsigned long address);</span>
<span class="p_del">-</span>
 static inline pgoff_t linear_page_index(struct vm_area_struct *vma,
 					unsigned long address)
 {
 	pgoff_t pgoff;
<span class="p_del">-	if (unlikely(is_vm_hugetlb_page(vma)))</span>
<span class="p_del">-		return linear_hugepage_index(vma, address);</span>
<span class="p_add">+</span>
 	pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;
 	pgoff += vma-&gt;vm_pgoff;
 	return pgoff;
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index 52be2b457208..33974ad1a8ec 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -165,10 +165,7 @@</span> <span class="p_context"> static void page_cache_tree_delete(struct address_space *mapping,</span>
 {
 	struct radix_tree_node *node;
 	void **slot;
<span class="p_del">-	int nr;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* hugetlb pages are represented by one entry in the radix tree */</span>
<span class="p_del">-	nr = PageHuge(page) ? 1 : hpage_nr_pages(page);</span>
<span class="p_add">+	int nr = hpage_nr_pages(page);</span>
 
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
 	VM_BUG_ON_PAGE(PageTail(page), page);
<span class="p_chunk">@@ -1420,16 +1417,17 @@</span> <span class="p_context"> unsigned find_get_pages(struct address_space *mapping, pgoff_t start,</span>
 		}
 
 		/* For multi-order entries, find relevant subpage */
<span class="p_del">-		if (PageTransHuge(page)) {</span>
<span class="p_add">+		if (PageCompound(page)) {</span>
 			VM_BUG_ON(index - page-&gt;index &lt; 0);
<span class="p_del">-			VM_BUG_ON(index - page-&gt;index &gt;= HPAGE_PMD_NR);</span>
<span class="p_add">+			VM_BUG_ON(index - page-&gt;index &gt;=</span>
<span class="p_add">+					1 &lt;&lt; compound_order(page));</span>
 			page += index - page-&gt;index;
 		}
 
 		pages[ret] = page;
 		if (++ret == nr_pages)
 			break;
<span class="p_del">-		if (!PageTransCompound(page))</span>
<span class="p_add">+		if (PageHuge(page) || !PageTransCompound(page))</span>
 			continue;
 		for (refs = 0; ret &lt; nr_pages &amp;&amp;
 				(index + 1) % HPAGE_PMD_NR;
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 3faec05b1875..f359653f31ff 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -622,13 +622,6 @@</span> <span class="p_context"> static pgoff_t vma_hugecache_offset(struct hstate *h,</span>
 			(vma-&gt;vm_pgoff &gt;&gt; huge_page_order(h));
 }
 
<span class="p_del">-pgoff_t linear_hugepage_index(struct vm_area_struct *vma,</span>
<span class="p_del">-				     unsigned long address)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return vma_hugecache_offset(hstate_vma(vma), vma, address);</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(linear_hugepage_index);</span>
<span class="p_del">-</span>
 /*
  * Return the size of the pages allocated when backing a VMA. In the majority
  * cases this will be same size as used by the page table entries.
<span class="p_chunk">@@ -3658,7 +3651,7 @@</span> <span class="p_context"> static struct page *hugetlbfs_pagecache_page(struct hstate *h,</span>
 	pgoff_t idx;
 
 	mapping = vma-&gt;vm_file-&gt;f_mapping;
<span class="p_del">-	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="p_add">+	idx = linear_page_index(vma, address);</span>
 
 	return find_lock_page(mapping, idx);
 }
<span class="p_chunk">@@ -3675,7 +3668,7 @@</span> <span class="p_context"> static bool hugetlbfs_pagecache_present(struct hstate *h,</span>
 	struct page *page;
 
 	mapping = vma-&gt;vm_file-&gt;f_mapping;
<span class="p_del">-	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="p_add">+	idx = linear_page_index(vma, address);</span>
 
 	page = find_get_page(mapping, idx);
 	if (page)
<span class="p_chunk">@@ -3730,7 +3723,7 @@</span> <span class="p_context"> static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 retry:
 	page = find_lock_page(mapping, idx);
 	if (!page) {
<span class="p_del">-		size = i_size_read(mapping-&gt;host) &gt;&gt; huge_page_shift(h);</span>
<span class="p_add">+		size = i_size_read(mapping-&gt;host) &gt;&gt; PAGE_SHIFT;</span>
 		if (idx &gt;= size)
 			goto out;
 		page = alloc_huge_page(vma, address, 0);
<span class="p_chunk">@@ -3791,7 +3784,7 @@</span> <span class="p_context"> static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	}
 
 	ptl = huge_pte_lock(h, mm, ptep);
<span class="p_del">-	size = i_size_read(mapping-&gt;host) &gt;&gt; huge_page_shift(h);</span>
<span class="p_add">+	size = i_size_read(mapping-&gt;host) &gt;&gt; PAGE_SHIFT;</span>
 	if (idx &gt;= size)
 		goto backout;
 
<span class="p_chunk">@@ -3839,7 +3832,7 @@</span> <span class="p_context"> u32 hugetlb_fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 
 	if (vma-&gt;vm_flags &amp; VM_SHARED) {
 		key[0] = (unsigned long) mapping;
<span class="p_del">-		key[1] = idx;</span>
<span class="p_add">+		key[1] = idx &gt;&gt; huge_page_order(h);</span>
 	} else {
 		key[0] = (unsigned long) mm;
 		key[1] = address &gt;&gt; huge_page_shift(h);
<span class="p_chunk">@@ -3895,7 +3888,7 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	}
 
 	mapping = vma-&gt;vm_file-&gt;f_mapping;
<span class="p_del">-	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="p_add">+	idx = linear_page_index(vma, address);</span>
 
 	/*
 	 * Serialize hugepage allocation and instantiation, so that we don&#39;t
<span class="p_header">diff --git a/mm/truncate.c b/mm/truncate.c</span>
<span class="p_header">index 6df4b06a190f..7508c2c7e4ed 100644</span>
<span class="p_header">--- a/mm/truncate.c</span>
<span class="p_header">+++ b/mm/truncate.c</span>
<span class="p_chunk">@@ -267,7 +267,7 @@</span> <span class="p_context"> void truncate_inode_pages_range(struct address_space *mapping,</span>
 
 			if (!trylock_page(page))
 				continue;
<span class="p_del">-			WARN_ON(page_to_index(page) != index);</span>
<span class="p_add">+			WARN_ON(page_to_pgoff(page) != index);</span>
 			if (PageWriteback(page)) {
 				unlock_page(page);
 				continue;
<span class="p_chunk">@@ -383,7 +383,7 @@</span> <span class="p_context"> restart:	cond_resched();</span>
 			}
 
 			lock_page(page);
<span class="p_del">-			WARN_ON(page_to_index(page) != index);</span>
<span class="p_add">+			WARN_ON(page_to_pgoff(page) != index);</span>
 			wait_on_page_writeback(page);
 
 			if (PageTransHuge(page)) {
<span class="p_chunk">@@ -533,7 +533,7 @@</span> <span class="p_context"> unsigned long invalidate_mapping_pages(struct address_space *mapping,</span>
 			if (!trylock_page(page))
 				continue;
 
<span class="p_del">-			WARN_ON(page_to_index(page) != index);</span>
<span class="p_add">+			WARN_ON(page_to_pgoff(page) != index);</span>
 
 			/* Is &#39;start&#39; or &#39;end&#39; in the middle of THP ? */
 			if (PageTransHuge(page) &amp;&amp;
<span class="p_chunk">@@ -650,7 +650,7 @@</span> <span class="p_context"> int invalidate_inode_pages2_range(struct address_space *mapping,</span>
 			}
 
 			lock_page(page);
<span class="p_del">-			WARN_ON(page_to_index(page) != index);</span>
<span class="p_add">+			WARN_ON(page_to_pgoff(page) != index);</span>
 			if (page-&gt;mapping != mapping) {
 				unlock_page(page);
 				continue;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



