
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,4/8] APEI: GHES: reserve a virtual page for SEI context - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,4/8] APEI: GHES: reserve a virtual page for SEI context</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63041">Xie XiuQi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 30, 2017, 10:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1490869877-118713-14-git-send-email-xiexiuqi@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9653757/mbox/"
   >mbox</a>
|
   <a href="/patch/9653757/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9653757/">/patch/9653757/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F334B6034C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:41:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DF5342857B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:41:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D419628581; Thu, 30 Mar 2017 10:41:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 43BCF2857B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:41:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933634AbdC3KlR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Mar 2017 06:41:17 -0400
Received: from szxga03-in.huawei.com ([45.249.212.189]:4916 &quot;EHLO
	dggrg03-dlp.huawei.com&quot; rhost-flags-OK-FAIL-OK-FAIL)
	by vger.kernel.org with ESMTP id S933333AbdC3Ket (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Mar 2017 06:34:49 -0400
Received: from 172.30.72.55 (EHLO DGGEML403-HUB.china.huawei.com)
	([172.30.72.55])
	by dggrg03-dlp.huawei.com (MOS 4.4.6-GA FastPath queued)
	with ESMTP id AKX60252; Thu, 30 Mar 2017 18:34:43 +0800 (CST)
Received: from localhost.localdomain.localdomain (10.175.113.25) by
	DGGEML403-HUB.china.huawei.com (10.3.17.33) with Microsoft SMTP
	Server id 14.3.301.0; Thu, 30 Mar 2017 18:34:34 +0800
From: Xie XiuQi &lt;xiexiuqi@huawei.com&gt;
To: &lt;christoffer.dall@linaro.org&gt;, &lt;marc.zyngier@arm.com&gt;,
	&lt;catalin.marinas@arm.com&gt;, &lt;will.deacon@arm.com&gt;,
	&lt;james.morse@arm.com&gt;, &lt;fu.wei@linaro.org&gt;, &lt;rostedt@goodmis.org&gt;,
	&lt;hanjun.guo@linaro.org&gt;, &lt;shiju.jose@huawei.com&gt;
CC: &lt;linux-arm-kernel@lists.infradead.org&gt;,
	&lt;kvmarm@lists.cs.columbia.edu&gt;, &lt;kvm@vger.kernel.org&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, &lt;linux-acpi@vger.kernel.org&gt;,
	&lt;gengdongjiu@huawei.com&gt;, &lt;zhengqiang10@huawei.com&gt;,
	&lt;wuquanming@huawei.com&gt;, &lt;xiexiuqi@huawei.com&gt;,
	&lt;wangxiongfeng2@huawei.com&gt;
Subject: [PATCH v3 4/8] APEI: GHES: reserve a virtual page for SEI context
Date: Thu, 30 Mar 2017 18:31:13 +0800
Message-ID: &lt;1490869877-118713-14-git-send-email-xiexiuqi@huawei.com&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1490869877-118713-1-git-send-email-xiexiuqi@huawei.com&gt;
References: &lt;1490869877-118713-1-git-send-email-xiexiuqi@huawei.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.175.113.25]
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A090203.58DCDF45.001B, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, ip=0.0.0.0,
	so=2014-11-16 11:51:01, dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 8b3af72c762b4cafb45ff8ce09f8cf50
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63041">Xie XiuQi</a> - March 30, 2017, 10:31 a.m.</div>
<pre class="content">
On arm64 platform, SEI may interrupt code which had interrupts masked.
But SEI could be masked, so it&#39;s not treated as NMI, however SEA is
treated as NMI.

So, the  memory area used to transfer hardware error information from
BIOS to Linux can be determined only in NMI, SEI(arm64), IRQ or timer
handler.

In this patch, we add a virtual page for SEI context.
<span class="signed-off-by">
Signed-off-by: Xie XiuQi &lt;xiexiuqi@huawei.com&gt;</span>
---
 drivers/acpi/apei/ghes.c | 98 +++++++++++++++++++++++-------------------------
 1 file changed, 47 insertions(+), 51 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/acpi/apei/ghes.c b/drivers/acpi/apei/ghes.c</span>
<span class="p_header">index 045d101..b1f9b1f 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/ghes.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/ghes.c</span>
<span class="p_chunk">@@ -108,26 +108,33 @@</span> <span class="p_context"></span>
 
 /*
  * Because the memory area used to transfer hardware error information
<span class="p_del">- * from BIOS to Linux can be determined only in NMI, IRQ or timer</span>
<span class="p_del">- * handler, but general ioremap can not be used in atomic context, so</span>
<span class="p_del">- * a special version of atomic ioremap is implemented for that.</span>
<span class="p_add">+ * from BIOS to Linux can be determined only in NMI, SEI (ARM64), IRQ or</span>
<span class="p_add">+ * timer handler, but general ioremap can not be used in atomic context,</span>
<span class="p_add">+ * so a special version of atomic ioremap is implemented for that.</span>
  */
 
 /*
<span class="p_del">- * Two virtual pages are used, one for IRQ/PROCESS context, the other for</span>
<span class="p_del">- * NMI context (optionally).</span>
<span class="p_add">+ * 3 virtual pages are used, one for IRQ/PROCESS context, one for SEI</span>
<span class="p_add">+ * (on ARM64 platform), and the other for NMI context (optionally).</span>
  */
<span class="p_add">+#ifdef CONFIG_ACPI_APEI_SEI</span>
<span class="p_add">+#define GHES_IOREMAP_PAGES           3</span>
<span class="p_add">+#define GHES_IOREMAP_SEI_PAGE(base)	((base) + PAGE_SIZE*2)</span>
<span class="p_add">+#else</span>
 #define GHES_IOREMAP_PAGES           2
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #define GHES_IOREMAP_IRQ_PAGE(base)	(base)
 #define GHES_IOREMAP_NMI_PAGE(base)	((base) + PAGE_SIZE)
 
 /* virtual memory area for atomic ioremap */
 static struct vm_struct *ghes_ioremap_area;
 /*
<span class="p_del">- * These 2 spinlock is used to prevent atomic ioremap virtual memory</span>
<span class="p_add">+ * These 3 spinlock is used to prevent atomic ioremap virtual memory</span>
  * area from being mapped simultaneously.
  */
 static DEFINE_RAW_SPINLOCK(ghes_ioremap_lock_nmi);
<span class="p_add">+static DEFINE_SPINLOCK(ghes_ioremap_lock_sei);</span>
 static DEFINE_SPINLOCK(ghes_ioremap_lock_irq);
 
 static struct gen_pool *ghes_estatus_pool;
<span class="p_chunk">@@ -155,54 +162,55 @@</span> <span class="p_context"> static void ghes_ioremap_exit(void)</span>
 	free_vm_area(ghes_ioremap_area);
 }
 
<span class="p_del">-static void __iomem *ghes_ioremap_pfn_nmi(u64 pfn)</span>
<span class="p_add">+static void __iomem *ghes_ioremap_pfn(u64 pfn)</span>
 {
<span class="p_del">-	unsigned long vaddr;</span>
<span class="p_add">+	unsigned long vaddr, flags = 0;</span>
 	phys_addr_t paddr;
 	pgprot_t prot;
 
<span class="p_del">-	vaddr = (unsigned long)GHES_IOREMAP_NMI_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_del">-</span>
<span class="p_del">-	paddr = pfn &lt;&lt; PAGE_SHIFT;</span>
<span class="p_del">-	prot = arch_apei_get_mem_attribute(paddr);</span>
<span class="p_del">-	ioremap_page_range(vaddr, vaddr + PAGE_SIZE, paddr, prot);</span>
<span class="p_del">-</span>
<span class="p_del">-	return (void __iomem *)vaddr;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long vaddr, paddr;</span>
<span class="p_del">-	pgprot_t prot;</span>
<span class="p_del">-</span>
<span class="p_del">-	vaddr = (unsigned long)GHES_IOREMAP_IRQ_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_add">+	if (in_nmi()) {</span>
<span class="p_add">+		raw_spin_lock(&amp;ghes_ioremap_lock_nmi);</span>
<span class="p_add">+		vaddr = (unsigned long)GHES_IOREMAP_NMI_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_add">+	} else if (this_cpu_read(sei_in_process)) {</span>
<span class="p_add">+		spin_lock_irqsave(&amp;ghes_ioremap_lock_sei, flags);</span>
<span class="p_add">+		vaddr = (unsigned long)GHES_IOREMAP_SEI_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		spin_lock_irqsave(&amp;ghes_ioremap_lock_irq, flags);</span>
<span class="p_add">+		vaddr = (unsigned long)GHES_IOREMAP_IRQ_PAGE(ghes_ioremap_area-&gt;addr);</span>
<span class="p_add">+	}</span>
 
 	paddr = pfn &lt;&lt; PAGE_SHIFT;
 	prot = arch_apei_get_mem_attribute(paddr);
<span class="p_del">-</span>
 	ioremap_page_range(vaddr, vaddr + PAGE_SIZE, paddr, prot);
 
 	return (void __iomem *)vaddr;
 }
 
<span class="p_del">-static void ghes_iounmap_nmi(void __iomem *vaddr_ptr)</span>
<span class="p_add">+static void ghes_iounmap(void __iomem *vaddr_ptr)</span>
 {
 	unsigned long vaddr = (unsigned long __force)vaddr_ptr;
 	void *base = ghes_ioremap_area-&gt;addr;
<span class="p_add">+	unsigned long page, flags = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (in_nmi()) {</span>
<span class="p_add">+		page = (unsigned long)GHES_IOREMAP_NMI_PAGE(base);</span>
<span class="p_add">+	} else if (this_cpu_read(sei_in_process)) {</span>
<span class="p_add">+		page = (unsigned long)GHES_IOREMAP_SEI_PAGE(base);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		page = (unsigned long)GHES_IOREMAP_IRQ_PAGE(base);</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	BUG_ON(vaddr != (unsigned long)GHES_IOREMAP_NMI_PAGE(base));</span>
<span class="p_add">+	BUG_ON(vaddr != page);</span>
 	unmap_kernel_range_noflush(vaddr, PAGE_SIZE);
 	arch_apei_flush_tlb_one(vaddr);
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void ghes_iounmap_irq(void __iomem *vaddr_ptr)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long vaddr = (unsigned long __force)vaddr_ptr;</span>
<span class="p_del">-	void *base = ghes_ioremap_area-&gt;addr;</span>
 
<span class="p_del">-	BUG_ON(vaddr != (unsigned long)GHES_IOREMAP_IRQ_PAGE(base));</span>
<span class="p_del">-	unmap_kernel_range_noflush(vaddr, PAGE_SIZE);</span>
<span class="p_del">-	arch_apei_flush_tlb_one(vaddr);</span>
<span class="p_add">+	if (in_nmi()) {</span>
<span class="p_add">+		raw_spin_unlock(&amp;ghes_ioremap_lock_nmi);</span>
<span class="p_add">+	} else if (this_cpu_read(sei_in_process)) {</span>
<span class="p_add">+		spin_unlock_irqrestore(&amp;ghes_ioremap_lock_sei, flags);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		spin_unlock_irqrestore(&amp;ghes_ioremap_lock_irq, flags);</span>
<span class="p_add">+	}</span>
 }
 
 static int ghes_estatus_pool_init(void)
<span class="p_chunk">@@ -327,20 +335,13 @@</span> <span class="p_context"> static void ghes_copy_tofrom_phys(void *buffer, u64 paddr, u32 len,</span>
 				  int from_phys)
 {
 	void __iomem *vaddr;
<span class="p_del">-	unsigned long flags = 0;</span>
<span class="p_del">-	int in_nmi = in_nmi();</span>
 	u64 offset;
 	u32 trunk;
 
 	while (len &gt; 0) {
 		offset = paddr - (paddr &amp; PAGE_MASK);
<span class="p_del">-		if (in_nmi) {</span>
<span class="p_del">-			raw_spin_lock(&amp;ghes_ioremap_lock_nmi);</span>
<span class="p_del">-			vaddr = ghes_ioremap_pfn_nmi(paddr &gt;&gt; PAGE_SHIFT);</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			spin_lock_irqsave(&amp;ghes_ioremap_lock_irq, flags);</span>
<span class="p_del">-			vaddr = ghes_ioremap_pfn_irq(paddr &gt;&gt; PAGE_SHIFT);</span>
<span class="p_del">-		}</span>
<span class="p_add">+		vaddr = ghes_ioremap_pfn(paddr &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+</span>
 		trunk = PAGE_SIZE - offset;
 		trunk = min(trunk, len);
 		if (from_phys)
<span class="p_chunk">@@ -350,13 +351,8 @@</span> <span class="p_context"> static void ghes_copy_tofrom_phys(void *buffer, u64 paddr, u32 len,</span>
 		len -= trunk;
 		paddr += trunk;
 		buffer += trunk;
<span class="p_del">-		if (in_nmi) {</span>
<span class="p_del">-			ghes_iounmap_nmi(vaddr);</span>
<span class="p_del">-			raw_spin_unlock(&amp;ghes_ioremap_lock_nmi);</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			ghes_iounmap_irq(vaddr);</span>
<span class="p_del">-			spin_unlock_irqrestore(&amp;ghes_ioremap_lock_irq, flags);</span>
<span class="p_del">-		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ghes_iounmap(vaddr);</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



