
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,2/4] mm: Add function to support extra actions on swap in/out - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,2/4] mm: Add function to support extra actions on swap in/out</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 11, 2017, 4:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;c24c7a844c61d6f8d57dd3791ad7ab5f05305c6b.1483999591.git.khalid.aziz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9510573/mbox/"
   >mbox</a>
|
   <a href="/patch/9510573/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9510573/">/patch/9510573/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5C3EC6075C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Jan 2017 16:16:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5BDEF2842F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Jan 2017 16:16:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4F22C28577; Wed, 11 Jan 2017 16:16:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=2.0 tests=BAYES_00, UNPARSEABLE_RELAY
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D1DC52842F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Jan 2017 16:16:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1765426AbdAKQPt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 11 Jan 2017 11:15:49 -0500
Received: from aserp1040.oracle.com ([141.146.126.69]:42150 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1758056AbdAKQPq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 11 Jan 2017 11:15:46 -0500
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v0BGEFfg028702
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 11 Jan 2017 16:14:16 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id
	v0BGEEjI025077
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Wed, 11 Jan 2017 16:14:15 GMT
Received: from abhmp0015.oracle.com (abhmp0015.oracle.com [141.146.116.21])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	v0BGECA1006747; Wed, 11 Jan 2017 16:14:13 GMT
Received: from concerto.us.oracle.com (/10.159.92.74)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 11 Jan 2017 08:14:12 -0800
From: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
To: akpm@linux-foundation.org, davem@davemloft.net, arnd@arndb.de
Cc: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;,
	kirill.shutemov@linux.intel.com, mhocko@suse.com,
	jmarchan@redhat.com, vbabka@suse.cz, dan.j.williams@intel.com,
	lstoakes@gmail.com, dave.hansen@linux.intel.com,
	hannes@cmpxchg.org, mgorman@suse.de, hughd@google.com,
	vdavydov.dev@gmail.com, minchan@kernel.org, namit@vmware.com,
	linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org, sparclinux@vger.kernel.org,
	Khalid Aziz &lt;khalid@gonehiking.org&gt;
Subject: [PATCH v4 2/4] mm: Add function to support extra actions on swap
	in/out
Date: Wed, 11 Jan 2017 09:12:52 -0700
Message-Id: &lt;c24c7a844c61d6f8d57dd3791ad7ab5f05305c6b.1483999591.git.khalid.aziz@oracle.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;cover.1483999591.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1483999591.git.khalid.aziz@oracle.com&gt;
In-Reply-To: &lt;cover.1483999591.git.khalid.aziz@oracle.com&gt;
References: &lt;cover.1483999591.git.khalid.aziz@oracle.com&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Jan. 11, 2017, 4:12 p.m.</div>
<pre class="content">
If a processor supports special metadata for a page, for example ADI
version tags on SPARC M7, this metadata must be saved when the page is
swapped out. The same metadata must be restored when the page is swapped
back in. This patch adds a new function, set_swp_pte_at(), to set pte
upon a swap in/out of page that allows kernel to take special action
like saving and restoring version tags after or before setting a new pte
or saving a swap pte. For architectures that do not need to take special
action on page swap, this function defaults to set_pte_at().
<span class="signed-off-by">
Signed-off-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
Cc: Khalid Aziz &lt;khalid@gonehiking.org&gt;
---
 include/asm-generic/pgtable.h | 5 +++++
 mm/memory.c                   | 2 +-
 mm/rmap.c                     | 4 ++--
 3 files changed, 8 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Jan. 11, 2017, 4:56 p.m.</div>
<pre class="content">
On 01/11/2017 08:12 AM, Khalid Aziz wrote:
<span class="quote">&gt; +#ifndef set_swp_pte_at</span>
<span class="quote">&gt; +#define set_swp_pte_at(mm, addr, ptep, pte, oldpte)	\</span>
<span class="quote">&gt; +		set_pte_at(mm, addr, ptep, pte)</span>
<span class="quote">&gt; +#endif</span>

BTW, thanks for the *much* improved description of the series.  This is
way easier to understand.

I really don&#39;t think this is the interface we want, though.
set_swp_pte_at() is really doing *two* things:
1. Detecting _PAGE_MCD_4V and squirreling the MCD data away at swap-out
2. Reading back in the MCD data at swap-on

You&#39;re effectively using (!pte_none(pte) &amp;&amp; !pte_present(pte)) to
determine whether you&#39;re at swap in or swap out time.  That&#39;s goofy, IMNHO.

It isn&#39;t obvious from the context, but this hunk is creating a migration
PTE.  Why is ADI tag manipulation needed?  We&#39;re just changing the
physical address of the underlying memory, but neither the
application-visible contents nor the tags are changing.
<span class="quote">
&gt; @@ -1539,7 +1539,7 @@ static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt;  		if (pte_soft_dirty(pteval))</span>
<span class="quote">&gt;  			swp_pte = pte_swp_mksoft_dirty(swp_pte);</span>
<span class="quote">&gt; -		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt; +		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
<span class="quote">&gt;  	} else if (PageAnon(page)) {</span>
<span class="quote">&gt;  		swp_entry_t entry = { .val = page_private(page) };</span>
<span class="quote">&gt;  		pte_t swp_pte;</span>

Which means you&#39;re down to a single call that does swap-out, and a
single call that does swap-in.  There&#39;s no reason to hide all your code
behind set_pte_at().

Just add a new arch-specific call that takes the VMA and the swap PTE
and stores the ADI bit in there, here:
<span class="quote">
&gt; @@ -1572,7 +1572,7 @@ static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt;  		if (pte_soft_dirty(pteval))</span>
<span class="quote">&gt;  			swp_pte = pte_swp_mksoft_dirty(swp_pte);</span>
<span class="quote">&gt; -		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt; +		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
<span class="quote">&gt;  	} else</span>

and in do_swap_page(), do the opposite with a second, new call.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Jan. 11, 2017, 5:15 p.m.</div>
<pre class="content">
On 01/11/2017 09:56 AM, Dave Hansen wrote:
<span class="quote">&gt; On 01/11/2017 08:12 AM, Khalid Aziz wrote:</span>
<span class="quote">&gt;&gt; +#ifndef set_swp_pte_at</span>
<span class="quote">&gt;&gt; +#define set_swp_pte_at(mm, addr, ptep, pte, oldpte)	\</span>
<span class="quote">&gt;&gt; +		set_pte_at(mm, addr, ptep, pte)</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; BTW, thanks for the *much* improved description of the series.  This is</span>
<span class="quote">&gt; way easier to understand.</span>

Your feedback was very helpful in getting me there.
<span class="quote">
&gt;</span>
<span class="quote">&gt; I really don&#39;t think this is the interface we want, though.</span>
<span class="quote">&gt; set_swp_pte_at() is really doing *two* things:</span>
<span class="quote">&gt; 1. Detecting _PAGE_MCD_4V and squirreling the MCD data away at swap-out</span>
<span class="quote">&gt; 2. Reading back in the MCD data at swap-on</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You&#39;re effectively using (!pte_none(pte) &amp;&amp; !pte_present(pte)) to</span>
<span class="quote">&gt; determine whether you&#39;re at swap in or swap out time.  That&#39;s goofy, IMNHO.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It isn&#39;t obvious from the context, but this hunk is creating a migration</span>
<span class="quote">&gt; PTE.  Why is ADI tag manipulation needed?  We&#39;re just changing the</span>
<span class="quote">&gt; physical address of the underlying memory, but neither the</span>
<span class="quote">&gt; application-visible contents nor the tags are changing.</span>

Memory controller associates tags with physical memory. MMU verifies 
these tags against the tag embedded in VA. If physical memory is moved, 
tags must move with it.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; @@ -1539,7 +1539,7 @@ static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  		swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt;&gt;  		if (pte_soft_dirty(pteval))</span>
<span class="quote">&gt;&gt;  			swp_pte = pte_swp_mksoft_dirty(swp_pte);</span>
<span class="quote">&gt;&gt; -		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt;&gt; +		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
<span class="quote">&gt;&gt;  	} else if (PageAnon(page)) {</span>
<span class="quote">&gt;&gt;  		swp_entry_t entry = { .val = page_private(page) };</span>
<span class="quote">&gt;&gt;  		pte_t swp_pte;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Which means you&#39;re down to a single call that does swap-out, and a</span>
<span class="quote">&gt; single call that does swap-in.  There&#39;s no reason to hide all your code</span>
<span class="quote">&gt; behind set_pte_at().</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Just add a new arch-specific call that takes the VMA and the swap PTE</span>
<span class="quote">&gt; and stores the ADI bit in there, here:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -1572,7 +1572,7 @@ static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  		swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt;&gt;  		if (pte_soft_dirty(pteval))</span>
<span class="quote">&gt;&gt;  			swp_pte = pte_swp_mksoft_dirty(swp_pte);</span>
<span class="quote">&gt;&gt; -		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt;&gt; +		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
<span class="quote">&gt;&gt;  	} else</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; and in do_swap_page(), do the opposite with a second, new call.</span>

That does sound simpler. I will give it more thought.

Thanks,
Khalid
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h</span>
<span class="p_header">index c4f8fd2..5043e5a 100644</span>
<span class="p_header">--- a/include/asm-generic/pgtable.h</span>
<span class="p_header">+++ b/include/asm-generic/pgtable.h</span>
<span class="p_chunk">@@ -294,6 +294,11 @@</span> <span class="p_context"> static inline int pmd_same(pmd_t pmd_a, pmd_t pmd_b)</span>
 # define pte_accessible(mm, pte)	((void)(pte), 1)
 #endif
 
<span class="p_add">+#ifndef set_swp_pte_at</span>
<span class="p_add">+#define set_swp_pte_at(mm, addr, ptep, pte, oldpte)	\</span>
<span class="p_add">+		set_pte_at(mm, addr, ptep, pte)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef flush_tlb_fix_spurious_fault
 #define flush_tlb_fix_spurious_fault(vma, address) flush_tlb_page(vma, address)
 #endif
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index e18c57b..1cc3b55 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -2642,7 +2642,7 @@</span> <span class="p_context"> int do_swap_page(struct fault_env *fe, pte_t orig_pte)</span>
 	flush_icache_page(vma, page);
 	if (pte_swp_soft_dirty(orig_pte))
 		pte = pte_mksoft_dirty(pte);
<span class="p_del">-	set_pte_at(vma-&gt;vm_mm, fe-&gt;address, fe-&gt;pte, pte);</span>
<span class="p_add">+	set_swp_pte_at(vma-&gt;vm_mm, fe-&gt;address, fe-&gt;pte, pte, orig_pte);</span>
 	if (page == swapcache) {
 		do_page_add_anon_rmap(page, vma, fe-&gt;address, exclusive);
 		mem_cgroup_commit_charge(page, memcg, true, false);
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 1ef3640..d58cb94 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1539,7 +1539,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		swp_pte = swp_entry_to_pte(entry);
 		if (pte_soft_dirty(pteval))
 			swp_pte = pte_swp_mksoft_dirty(swp_pte);
<span class="p_del">-		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="p_add">+		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
 	} else if (PageAnon(page)) {
 		swp_entry_t entry = { .val = page_private(page) };
 		pte_t swp_pte;
<span class="p_chunk">@@ -1572,7 +1572,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		swp_pte = swp_entry_to_pte(entry);
 		if (pte_soft_dirty(pteval))
 			swp_pte = pte_swp_mksoft_dirty(swp_pte);
<span class="p_del">-		set_pte_at(mm, address, pte, swp_pte);</span>
<span class="p_add">+		set_swp_pte_at(mm, address, pte, swp_pte, pteval);</span>
 	} else
 		dec_mm_counter(mm, mm_counter_file(page));
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



