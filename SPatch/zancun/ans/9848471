
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,01/10] x86/kasan: Use the same shadow offset for 4- and 5-level paging - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,01/10] x86/kasan: Use the same shadow offset for 4- and 5-level paging</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 18, 2017, 2:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170718141517.52202-2-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9848471/mbox/"
   >mbox</a>
|
   <a href="/patch/9848471/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9848471/">/patch/9848471/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	075C3602C8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Jul 2017 14:21:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EBF741FF54
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Jul 2017 14:21:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E09B82852B; Tue, 18 Jul 2017 14:21:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F115C1FF54
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Jul 2017 14:21:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752473AbdGROVr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Jul 2017 10:21:47 -0400
Received: from mga01.intel.com ([192.55.52.88]:51030 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751591AbdGROPi (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Jul 2017 10:15:38 -0400
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by fmsmga101.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	18 Jul 2017 07:15:24 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.40,378,1496127600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;112658911&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga002.jf.intel.com with ESMTP; 18 Jul 2017 07:15:19 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id C9828185; Tue, 18 Jul 2017 17:15:18 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Subject: [PATCHv2 01/10] x86/kasan: Use the same shadow offset for 4- and
	5-level paging
Date: Tue, 18 Jul 2017 17:15:08 +0300
Message-Id: &lt;20170718141517.52202-2-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170718141517.52202-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170718141517.52202-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - July 18, 2017, 2:15 p.m.</div>
<pre class="content">
We are going to support boot-time switching between 4- and 5-level
paging. For KASAN it means we cannot have different KASAN_SHADOW_OFFSET
for different paging modes: the constant is passed to gcc to generate
code and cannot be changed at runtime.

This patch changes KASAN code to use 0xdffffc0000000000 as shadow offset
for both 4- and 5-level paging.

For 5-level paging it means that shadow memory region is not aligned to
PGD boundary anymore and we have to handle unaligned parts of the region
properly.

In addition, we have to exclude paravirt code from KASAN instrumentation
as we now use set_pgd() before KASAN is fully setup.
<span class="signed-off-by">
Signed-off-by: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
[kirill.shutemov@linux.intel.com: clenaup, changelog message]
<span class="signed-off-by">Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 arch/x86/Kconfig            |  1 -
 arch/x86/kernel/Makefile    |  3 +-
 arch/x86/mm/kasan_init_64.c | 86 ++++++++++++++++++++++++++++++++++-----------
 3 files changed, 67 insertions(+), 23 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index add693b0239e..4f94fda5dba5 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -299,7 +299,6 @@</span> <span class="p_context"> config ARCH_SUPPORTS_DEBUG_PAGEALLOC</span>
 config KASAN_SHADOW_OFFSET
 	hex
 	depends on KASAN
<span class="p_del">-	default 0xdff8000000000000 if X86_5LEVEL</span>
 	default 0xdffffc0000000000
 
 config HAVE_INTEL_TXT
<span class="p_header">diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile</span>
<span class="p_header">index a01892bdd61a..7f67b8316be0 100644</span>
<span class="p_header">--- a/arch/x86/kernel/Makefile</span>
<span class="p_header">+++ b/arch/x86/kernel/Makefile</span>
<span class="p_chunk">@@ -24,7 +24,8 @@</span> <span class="p_context"> endif</span>
 KASAN_SANITIZE_head$(BITS).o				:= n
 KASAN_SANITIZE_dumpstack.o				:= n
 KASAN_SANITIZE_dumpstack_$(BITS).o			:= n
<span class="p_del">-KASAN_SANITIZE_stacktrace.o := n</span>
<span class="p_add">+KASAN_SANITIZE_stacktrace.o				:= n</span>
<span class="p_add">+KASAN_SANITIZE_paravirt.o				:= n</span>
 
 OBJECT_FILES_NON_STANDARD_head_$(BITS).o		:= y
 OBJECT_FILES_NON_STANDARD_relocate_kernel_$(BITS).o	:= y
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 02c9d7553409..0691cc0f91ac 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -15,6 +15,8 @@</span> <span class="p_context"></span>
 extern pgd_t early_top_pgt[PTRS_PER_PGD];
 extern struct range pfn_mapped[E820_MAX_ENTRIES];
 
<span class="p_add">+static p4d_t tmp_p4d_table[PTRS_PER_P4D] __initdata __aligned(PAGE_SIZE);</span>
<span class="p_add">+</span>
 static int __init map_range(struct range *range)
 {
 	unsigned long start;
<span class="p_chunk">@@ -30,8 +32,9 @@</span> <span class="p_context"> static void __init clear_pgds(unsigned long start,</span>
 			unsigned long end)
 {
 	pgd_t *pgd;
<span class="p_add">+	unsigned long pgd_end = end &amp; PGDIR_MASK;</span>
 
<span class="p_del">-	for (; start &lt; end; start += PGDIR_SIZE) {</span>
<span class="p_add">+	for (; start &lt; pgd_end; start += PGDIR_SIZE) {</span>
 		pgd = pgd_offset_k(start);
 		/*
 		 * With folded p4d, pgd_clear() is nop, use p4d_clear()
<span class="p_chunk">@@ -42,29 +45,60 @@</span> <span class="p_context"> static void __init clear_pgds(unsigned long start,</span>
 		else
 			pgd_clear(pgd);
 	}
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset_k(start);</span>
<span class="p_add">+	for (; start &lt; end; start += P4D_SIZE)</span>
<span class="p_add">+		p4d_clear(p4d_offset(pgd, start));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline p4d_t *early_p4d_offset(pgd_t *pgd, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long p4d;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_X86_5LEVEL))</span>
<span class="p_add">+		return (p4d_t *)pgd;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = __pa_nodebug(pgd_val(*pgd)) &amp; PTE_PFN_MASK;</span>
<span class="p_add">+	p4d += __START_KERNEL_map - phys_base;</span>
<span class="p_add">+	return (p4d_t *)p4d + p4d_index(addr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_p4d_populate(pgd_t *pgd,</span>
<span class="p_add">+		unsigned long addr,</span>
<span class="p_add">+		unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t pgd_entry;</span>
<span class="p_add">+	p4d_t *p4d, p4d_entry;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pgd_none(*pgd)) {</span>
<span class="p_add">+		pgd_entry = __pgd(_KERNPG_TABLE | __pa_nodebug(kasan_zero_p4d));</span>
<span class="p_add">+		set_pgd(pgd, pgd_entry);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = early_p4d_offset(pgd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = p4d_addr_end(addr, end);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!p4d_none(*p4d))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		p4d_entry = __p4d(_KERNPG_TABLE | __pa_nodebug(kasan_zero_pud));</span>
<span class="p_add">+		set_p4d(p4d, p4d_entry);</span>
<span class="p_add">+	} while (p4d++, addr = next, addr != end &amp;&amp; p4d_none(*p4d));</span>
 }
 
 static void __init kasan_map_early_shadow(pgd_t *pgd)
 {
<span class="p_del">-	int i;</span>
<span class="p_del">-	unsigned long start = KASAN_SHADOW_START;</span>
<span class="p_add">+	unsigned long addr = KASAN_SHADOW_START &amp; PGDIR_MASK;</span>
 	unsigned long end = KASAN_SHADOW_END;
<span class="p_add">+	unsigned long next;</span>
 
<span class="p_del">-	for (i = pgd_index(start); start &lt; end; i++) {</span>
<span class="p_del">-		switch (CONFIG_PGTABLE_LEVELS) {</span>
<span class="p_del">-		case 4:</span>
<span class="p_del">-			pgd[i] = __pgd(__pa_nodebug(kasan_zero_pud) |</span>
<span class="p_del">-					_KERNPG_TABLE);</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		case 5:</span>
<span class="p_del">-			pgd[i] = __pgd(__pa_nodebug(kasan_zero_p4d) |</span>
<span class="p_del">-					_KERNPG_TABLE);</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		default:</span>
<span class="p_del">-			BUILD_BUG();</span>
<span class="p_del">-		}</span>
<span class="p_del">-		start += PGDIR_SIZE;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	pgd += pgd_index(addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_p4d_populate(pgd, addr, next);</span>
<span class="p_add">+	} while (pgd++, addr = next, addr != end);</span>
 }
 
 #ifdef CONFIG_KASAN_INLINE
<span class="p_chunk">@@ -101,7 +135,7 @@</span> <span class="p_context"> void __init kasan_early_init(void)</span>
 	for (i = 0; i &lt; PTRS_PER_PUD; i++)
 		kasan_zero_pud[i] = __pud(pud_val);
 
<span class="p_del">-	for (i = 0; CONFIG_PGTABLE_LEVELS &gt;= 5 &amp;&amp; i &lt; PTRS_PER_P4D; i++)</span>
<span class="p_add">+	for (i = 0; IS_ENABLED(CONFIG_X86_5LEVEL) &amp;&amp; i &lt; PTRS_PER_P4D; i++)</span>
 		kasan_zero_p4d[i] = __p4d(p4d_val);
 
 	kasan_map_early_shadow(early_top_pgt);
<span class="p_chunk">@@ -117,12 +151,22 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 #endif
 
 	memcpy(early_top_pgt, init_top_pgt, sizeof(early_top_pgt));
<span class="p_add">+</span>
<span class="p_add">+	if (IS_ENABLED(CONFIG_X86_5LEVEL)) {</span>
<span class="p_add">+		void *ptr;</span>
<span class="p_add">+</span>
<span class="p_add">+		ptr = (void *)pgd_page_vaddr(*pgd_offset_k(KASAN_SHADOW_END));</span>
<span class="p_add">+		memcpy(tmp_p4d_table, (void *)ptr, sizeof(tmp_p4d_table));</span>
<span class="p_add">+		set_pgd(&amp;early_top_pgt[pgd_index(KASAN_SHADOW_END)],</span>
<span class="p_add">+				__pgd(__pa(tmp_p4d_table) | _KERNPG_TABLE));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	load_cr3(early_top_pgt);
 	__flush_tlb_all();
 
<span class="p_del">-	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+	clear_pgds(KASAN_SHADOW_START &amp; PGDIR_MASK, KASAN_SHADOW_END);</span>
 
<span class="p_del">-	kasan_populate_zero_shadow((void *)KASAN_SHADOW_START,</span>
<span class="p_add">+	kasan_populate_zero_shadow((void *)(KASAN_SHADOW_START &amp; PGDIR_MASK),</span>
 			kasan_mem_to_shadow((void *)PAGE_OFFSET));
 
 	for (i = 0; i &lt; E820_MAX_ENTRIES; i++) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



