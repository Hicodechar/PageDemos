
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[20/33] mm: do not enforce PKEY permissions on &quot;foreign&quot; mm access - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [20/33] mm: do not enforce PKEY permissions on &quot;foreign&quot; mm access</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 12, 2016, 9:02 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160212210220.9EC8AC72@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8297641/mbox/"
   >mbox</a>
|
   <a href="/patch/8297641/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8297641/">/patch/8297641/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id B0439C02AA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Feb 2016 21:02:39 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 9D9D7204AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Feb 2016 21:02:38 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 69854204B0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Feb 2016 21:02:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751739AbcBLVC1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 12 Feb 2016 16:02:27 -0500
Received: from mga14.intel.com ([192.55.52.115]:27075 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751238AbcBLVCW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 12 Feb 2016 16:02:22 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga103.fm.intel.com with ESMTP; 12 Feb 2016 13:02:22 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.22,437,1449561600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;914103985&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.121])
	by fmsmga002.fm.intel.com with ESMTP; 12 Feb 2016 13:02:21 -0800
Subject: [PATCH 20/33] mm: do not enforce PKEY permissions on &quot;foreign&quot; mm
	access
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, x86@kernel.org, torvalds@linux-foundation.org,
	Dave Hansen &lt;dave@sr71.net&gt;, dave.hansen@linux.intel.com,
	linux-arch@vger.kernel.org
From: Dave Hansen &lt;dave@sr71.net&gt;
Date: Fri, 12 Feb 2016 13:02:21 -0800
References: &lt;20160212210152.9CAD15B0@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20160212210152.9CAD15B0@viggo.jf.intel.com&gt;
Message-Id: &lt;20160212210220.9EC8AC72@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Feb. 12, 2016, 9:02 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

We try to enforce protection keys in software the same way that we
do in hardware.  (See long example below).

But, we only want to do this when accessing our *own* process&#39;s
memory.  If GDB set PKRU[6].AD=1 (disable access to PKEY 6), then
tried to PTRACE_POKE a target process which just happened to have
some mprotect_pkey(pkey=6) memory, we do *not* want to deny the
debugger access to that memory.  PKRU is fundamentally a
thread-local structure and we do not want to enforce it on access
to _another_ thread&#39;s data.

This gets especially tricky when we have workqueues or other
delayed-work mechanisms that might run in a random process&#39;s context.
We can check that we only enforce pkeys when operating on our *own* mm,
but delayed work gets performed when a random user context is active.
We might end up with a situation where a delayed-work gup fails when
running randomly under its &quot;own&quot; task but succeeds when running under
another process.  We want to avoid that.

To avoid that, we use the new GUP flag: FOLL_REMOTE and add a
fault flag: FAULT_FLAG_REMOTE.  They indicate that we are
walking an mm which is not guranteed to be the same as
current-&gt;mm and should not be subject to protection key
enforcement.

Thanks to Jerome Glisse for pointing out this scenario.

*** Why do we enforce protection keys in software?? ***

Imagine that we disabled access to the memory pointer to by &#39;buf&#39;.
The, we implemented sys_write() like this:

	sys_read(fd, buf, len...)
	{
		struct page *page = follow_page(buf);
		void *buf_mapped = kmap(page);
		memcpy(buf_mapped, fd_data, len);
		...
	}

This writes to &#39;buf&#39; via a *kernel* mapping, without a protection
key.  While this implementation does the same thing:

	sys_read(fd, buf, len...)
	{
		copy_to_user(buf, fd_data, len);
		...
	}

but would hit a protection key fault because the userspace &#39;buf&#39;
mapping has a protection key set.

To provide consistency, and to make key-protected memory work
as much like mprotect()ed memory as possible, we try to enforce
the same protections as the hardware would when the *kernel* walks
the page tables (and other mm structures).
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
Cc: linux-arch@vger.kernel.org
---

 b/arch/powerpc/include/asm/mmu_context.h   |    3 ++-
 b/arch/s390/include/asm/mmu_context.h      |    3 ++-
 b/arch/unicore32/include/asm/mmu_context.h |    3 ++-
 b/arch/x86/include/asm/mmu_context.h       |    5 +++--
 b/drivers/iommu/amd_iommu_v2.c             |    1 +
 b/include/asm-generic/mm_hooks.h           |    3 ++-
 b/include/linux/mm.h                       |    1 +
 b/mm/gup.c                                 |   15 ++++++++++-----
 b/mm/ksm.c                                 |   10 ++++++++--
 b/mm/memory.c                              |    3 ++-
 10 files changed, 33 insertions(+), 14 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/powerpc/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.650540035 -0800</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h	2016-02-12 10:44:22.668540858 -0800</span>
<span class="p_chunk">@@ -148,7 +148,8 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_del">-static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
<span class="p_add">+		bool write, bool foreign)</span>
 {
 	/* by default, allow everything */
 	return true;
<span class="p_header">diff -puN arch/s390/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/s390/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.652540127 -0800</span>
<span class="p_header">+++ b/arch/s390/include/asm/mmu_context.h	2016-02-12 10:44:22.669540904 -0800</span>
<span class="p_chunk">@@ -130,7 +130,8 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_del">-static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
<span class="p_add">+		bool write, bool foreign)</span>
 {
 	/* by default, allow everything */
 	return true;
<span class="p_header">diff -puN arch/unicore32/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/unicore32/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.654540218 -0800</span>
<span class="p_header">+++ b/arch/unicore32/include/asm/mmu_context.h	2016-02-12 10:44:22.669540904 -0800</span>
<span class="p_chunk">@@ -97,7 +97,8 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_del">-static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
<span class="p_add">+		bool write, bool foreign)</span>
 {
 	/* by default, allow everything */
 	return true;
<span class="p_header">diff -puN arch/x86/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.655540264 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h	2016-02-12 10:44:22.669540904 -0800</span>
<span class="p_chunk">@@ -322,10 +322,11 @@</span> <span class="p_context"> static inline bool vma_is_foreign(struct</span>
 	return false;
 }
 
<span class="p_del">-static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
<span class="p_add">+		bool write, bool foreign)</span>
 {
 	/* allow access if the VMA is not one from this process */
<span class="p_del">-	if (vma_is_foreign(vma))</span>
<span class="p_add">+	if (foreign || vma_is_foreign(vma))</span>
 		return true;
 	return __pkru_allows_pkey(vma_pkey(vma), write);
 }
<span class="p_header">diff -puN drivers/iommu/amd_iommu_v2.c~pkeys-14-gup-fault-foreign-flag drivers/iommu/amd_iommu_v2.c</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_v2.c~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.657540355 -0800</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_v2.c	2016-02-12 10:44:22.670540949 -0800</span>
<span class="p_chunk">@@ -526,6 +526,7 @@</span> <span class="p_context"> static void do_fault(struct work_struct</span>
 		flags |= FAULT_FLAG_USER;
 	if (fault-&gt;flags &amp; PPR_FAULT_WRITE)
 		flags |= FAULT_FLAG_WRITE;
<span class="p_add">+	flags |= FAULT_FLAG_REMOTE;</span>
 
 	down_read(&amp;mm-&gt;mmap_sem);
 	vma = find_extend_vma(mm, address);
<span class="p_header">diff -puN include/asm-generic/mm_hooks.h~pkeys-14-gup-fault-foreign-flag include/asm-generic/mm_hooks.h</span>
<span class="p_header">--- a/include/asm-generic/mm_hooks.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.658540401 -0800</span>
<span class="p_header">+++ b/include/asm-generic/mm_hooks.h	2016-02-12 10:44:22.670540949 -0800</span>
<span class="p_chunk">@@ -26,7 +26,8 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_del">-static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
<span class="p_add">+		bool write, bool foreign)</span>
 {
 	/* by default, allow everything */
 	return true;
<span class="p_header">diff -puN include/linux/mm.h~pkeys-14-gup-fault-foreign-flag include/linux/mm.h</span>
<span class="p_header">--- a/include/linux/mm.h~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.660540492 -0800</span>
<span class="p_header">+++ b/include/linux/mm.h	2016-02-12 10:44:22.671540995 -0800</span>
<span class="p_chunk">@@ -251,6 +251,7 @@</span> <span class="p_context"> extern pgprot_t protection_map[16];</span>
 #define FAULT_FLAG_KILLABLE	0x10	/* The fault task is in SIGKILL killable region */
 #define FAULT_FLAG_TRIED	0x20	/* Second try */
 #define FAULT_FLAG_USER		0x40	/* The fault originated in userspace */
<span class="p_add">+#define FAULT_FLAG_REMOTE	0x80	/* faulting for non current tsk/mm */</span>
 
 /*
  * vm_fault is filled by the the pagefault handler and passed to the vma&#39;s
<span class="p_header">diff -puN mm/gup.c~pkeys-14-gup-fault-foreign-flag mm/gup.c</span>
<span class="p_header">--- a/mm/gup.c~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.662540584 -0800</span>
<span class="p_header">+++ b/mm/gup.c	2016-02-12 10:44:22.672541041 -0800</span>
<span class="p_chunk">@@ -365,6 +365,8 @@</span> <span class="p_context"> static int faultin_page(struct task_stru</span>
 		return -ENOENT;
 	if (*flags &amp; FOLL_WRITE)
 		fault_flags |= FAULT_FLAG_WRITE;
<span class="p_add">+	if (*flags &amp; FOLL_REMOTE)</span>
<span class="p_add">+		fault_flags |= FAULT_FLAG_REMOTE;</span>
 	if (nonblocking)
 		fault_flags |= FAULT_FLAG_ALLOW_RETRY;
 	if (*flags &amp; FOLL_NOWAIT)
<span class="p_chunk">@@ -415,11 +417,13 @@</span> <span class="p_context"> static int faultin_page(struct task_stru</span>
 static int check_vma_flags(struct vm_area_struct *vma, unsigned long gup_flags)
 {
 	vm_flags_t vm_flags = vma-&gt;vm_flags;
<span class="p_add">+	int write = (gup_flags &amp; FOLL_WRITE);</span>
<span class="p_add">+	int foreign = (gup_flags &amp; FOLL_REMOTE);</span>
 
 	if (vm_flags &amp; (VM_IO | VM_PFNMAP))
 		return -EFAULT;
 
<span class="p_del">-	if (gup_flags &amp; FOLL_WRITE) {</span>
<span class="p_add">+	if (write) {</span>
 		if (!(vm_flags &amp; VM_WRITE)) {
 			if (!(gup_flags &amp; FOLL_FORCE))
 				return -EFAULT;
<span class="p_chunk">@@ -445,7 +449,7 @@</span> <span class="p_context"> static int check_vma_flags(struct vm_are</span>
 		if (!(vm_flags &amp; VM_MAYREAD))
 			return -EFAULT;
 	}
<span class="p_del">-	if (!arch_vma_access_permitted(vma, (gup_flags &amp; FOLL_WRITE)))</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, write, foreign))</span>
 		return -EFAULT;
 	return 0;
 }
<span class="p_chunk">@@ -615,7 +619,8 @@</span> <span class="p_context"> EXPORT_SYMBOL(__get_user_pages);</span>
 
 bool vma_permits_fault(struct vm_area_struct *vma, unsigned int fault_flags)
 {
<span class="p_del">-	bool write = !!(fault_flags &amp; FAULT_FLAG_WRITE);</span>
<span class="p_add">+	bool write   = !!(fault_flags &amp; FAULT_FLAG_WRITE);</span>
<span class="p_add">+	bool foreign = !!(fault_flags &amp; FAULT_FLAG_REMOTE);</span>
 	vm_flags_t vm_flags = write ? VM_WRITE : VM_READ;
 
 	if (!(vm_flags &amp; vma-&gt;vm_flags))
<span class="p_chunk">@@ -623,9 +628,9 @@</span> <span class="p_context"> bool vma_permits_fault(struct vm_area_st</span>
 
 	/*
 	 * The architecture might have a hardware protection
<span class="p_del">-	 * mechanism other than read/write that can deny access</span>
<span class="p_add">+	 * mechanism other than read/write that can deny access.</span>
 	 */
<span class="p_del">-	if (!arch_vma_access_permitted(vma, write))</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, write, foreign))</span>
 		return false;
 
 	return true;
<span class="p_header">diff -puN mm/ksm.c~pkeys-14-gup-fault-foreign-flag mm/ksm.c</span>
<span class="p_header">--- a/mm/ksm.c~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.663540630 -0800</span>
<span class="p_header">+++ b/mm/ksm.c	2016-02-12 10:44:22.673541087 -0800</span>
<span class="p_chunk">@@ -359,6 +359,10 @@</span> <span class="p_context"> static inline bool ksm_test_exit(struct</span>
  * in case the application has unmapped and remapped mm,addr meanwhile.
  * Could a ksm page appear anywhere else?  Actually yes, in a VM_PFNMAP
  * mmap of /dev/mem or /dev/kmem, where we would not want to touch it.
<span class="p_add">+ *</span>
<span class="p_add">+ * FAULT_FLAG/FOLL_REMOTE are because we do this outside the context</span>
<span class="p_add">+ * of the process that owns &#39;vma&#39;.  We also do not want to enforce</span>
<span class="p_add">+ * protection keys here anyway.</span>
  */
 static int break_ksm(struct vm_area_struct *vma, unsigned long addr)
 {
<span class="p_chunk">@@ -367,12 +371,14 @@</span> <span class="p_context"> static int break_ksm(struct vm_area_stru</span>
 
 	do {
 		cond_resched();
<span class="p_del">-		page = follow_page(vma, addr, FOLL_GET | FOLL_MIGRATION);</span>
<span class="p_add">+		page = follow_page(vma, addr,</span>
<span class="p_add">+				FOLL_GET | FOLL_MIGRATION | FOLL_REMOTE);</span>
 		if (IS_ERR_OR_NULL(page))
 			break;
 		if (PageKsm(page))
 			ret = handle_mm_fault(vma-&gt;vm_mm, vma, addr,
<span class="p_del">-							FAULT_FLAG_WRITE);</span>
<span class="p_add">+							FAULT_FLAG_WRITE |</span>
<span class="p_add">+							FAULT_FLAG_REMOTE);</span>
 		else
 			ret = VM_FAULT_WRITE;
 		put_page(page);
<span class="p_header">diff -puN mm/memory.c~pkeys-14-gup-fault-foreign-flag mm/memory.c</span>
<span class="p_header">--- a/mm/memory.c~pkeys-14-gup-fault-foreign-flag	2016-02-12 10:44:22.665540721 -0800</span>
<span class="p_header">+++ b/mm/memory.c	2016-02-12 10:44:22.674541132 -0800</span>
<span class="p_chunk">@@ -3358,7 +3358,8 @@</span> <span class="p_context"> static int __handle_mm_fault(struct mm_s</span>
 	pmd_t *pmd;
 	pte_t *pte;
 
<span class="p_del">-	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE))</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE,</span>
<span class="p_add">+					    flags &amp; FAULT_FLAG_REMOTE))</span>
 		return VM_FAULT_SIGSEGV;
 
 	if (unlikely(is_vm_hugetlb_page(vma)))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



