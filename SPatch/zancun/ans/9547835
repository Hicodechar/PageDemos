
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,3/9] arm: KVM: Handle trappable TLB instructions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,3/9] arm: KVM: Handle trappable TLB instructions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 31, 2017, 5:16 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170131171630.26898-4-punit.agrawal@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9547835/mbox/"
   >mbox</a>
|
   <a href="/patch/9547835/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9547835/">/patch/9547835/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AEA776016C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Jan 2017 17:19:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9EE88283EF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Jan 2017 17:19:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9201328409; Tue, 31 Jan 2017 17:19:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EA8C6283EF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Jan 2017 17:19:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751793AbdAaRT1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 31 Jan 2017 12:19:27 -0500
Received: from foss.arm.com ([217.140.101.70]:42728 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750881AbdAaRSY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 31 Jan 2017 12:18:24 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 736A314F6;
	Tue, 31 Jan 2017 09:17:25 -0800 (PST)
Received: from localhost (e105922-lin.cambridge.arm.com [10.1.195.25])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id
	447F33F24D; Tue, 31 Jan 2017 09:17:25 -0800 (PST)
From: Punit Agrawal &lt;punit.agrawal@arm.com&gt;
To: kvmarm@lists.cs.columbia.edu, linux-arm-kernel@lists.infradead.org
Cc: Punit Agrawal &lt;punit.agrawal@arm.com&gt;,
	linux-kernel@vger.kernel.org, kvm@vger.kernel.org,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Marc Zyngier &lt;marc.zyngier@arm.com&gt;, Will Deacon &lt;will.deacon@arm.com&gt;,
	Mark Rutland &lt;mark.rutland@arm.com&gt;
Subject: [PATCH v4 3/9] arm: KVM: Handle trappable TLB instructions
Date: Tue, 31 Jan 2017 17:16:24 +0000
Message-Id: &lt;20170131171630.26898-4-punit.agrawal@arm.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170131171630.26898-1-punit.agrawal@arm.com&gt;
References: &lt;20170131171630.26898-1-punit.agrawal@arm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a> - Jan. 31, 2017, 5:16 p.m.</div>
<pre class="content">
It is possible to enable selective trapping of guest TLB maintenance
instructions executed in lower privilege levels to HYP mode. This
feature can be used to monitor guest TLB operations.

Add support to emulate the TLB instructions when their execution traps
to hyp mode. Also keep track of the number of emulated operations.
<span class="signed-off-by">
Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
Cc: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;
Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;
---
 arch/arm/include/asm/kvm_asm.h  |  2 ++
 arch/arm/include/asm/kvm_host.h |  1 +
 arch/arm/kvm/coproc.c           | 56 +++++++++++++++++++++++++++++++++++++++++
 arch/arm/kvm/hyp/tlb.c          | 33 ++++++++++++++++++++++++
 4 files changed, 92 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">index 8ef05381984b..782034a5a3c3 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -67,6 +67,8 @@</span> <span class="p_context"> extern void __kvm_flush_vm_context(void);</span>
 extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);
 extern void __kvm_tlb_flush_vmid(struct kvm *kvm);
 extern void __kvm_tlb_flush_local_vmid(struct kvm_vcpu *vcpu);
<span class="p_add">+extern void __kvm_emulate_tlb_invalidate(struct kvm *kvm, u32 opcode,</span>
<span class="p_add">+					 u64 regval);</span>
 
 extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);
 
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_host.h b/arch/arm/include/asm/kvm_host.h</span>
<span class="p_header">index d5423ab15ed5..26f0c8a0b790 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -205,6 +205,7 @@</span> <span class="p_context"> struct kvm_vcpu_stat {</span>
 	u64 mmio_exit_user;
 	u64 mmio_exit_kernel;
 	u64 exits;
<span class="p_add">+	u64 tlb_invalidate;</span>
 };
 
 #define vcpu_cp15(v,r)	(v)-&gt;arch.ctxt.cp15[r]
<span class="p_header">diff --git a/arch/arm/kvm/coproc.c b/arch/arm/kvm/coproc.c</span>
<span class="p_header">index 3e5e4194ef86..b978b0bf211e 100644</span>
<span class="p_header">--- a/arch/arm/kvm/coproc.c</span>
<span class="p_header">+++ b/arch/arm/kvm/coproc.c</span>
<span class="p_chunk">@@ -205,6 +205,24 @@</span> <span class="p_context"> static bool access_dcsw(struct kvm_vcpu *vcpu,</span>
 	return true;
 }
 
<span class="p_add">+static bool emulate_tlb_invalidate(struct kvm_vcpu *vcpu,</span>
<span class="p_add">+				   const struct coproc_params *p,</span>
<span class="p_add">+				   const struct coproc_reg *r)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Based on system register encoding from ARM v8 ARM</span>
<span class="p_add">+	 * (DDI 0487A.k F5.1.103)</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	u32 opcode = p-&gt;Op1 &lt;&lt; 21 | p-&gt;CRn &lt;&lt; 16 | p-&gt;Op2 &lt;&lt; 5 | p-&gt;CRm &lt;&lt; 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	kvm_call_hyp(__kvm_emulate_tlb_invalidate,</span>
<span class="p_add">+		     vcpu-&gt;kvm, opcode, p-&gt;Rt1);</span>
<span class="p_add">+	trace_kvm_tlb_invalidate(*vcpu_pc(vcpu), opcode);</span>
<span class="p_add">+	++vcpu-&gt;stat.tlb_invalidate;</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Generic accessor for VM registers. Only called as long as HCR_TVM
  * is set.  If the guest enables the MMU, we stop trapping the VM
<span class="p_chunk">@@ -354,6 +372,44 @@</span> <span class="p_context"> static const struct coproc_reg cp15_regs[] = {</span>
 	{ CRn( 7), CRm( 6), Op1( 0), Op2( 2), is32, access_dcsw},
 	{ CRn( 7), CRm(10), Op1( 0), Op2( 2), is32, access_dcsw},
 	{ CRn( 7), CRm(14), Op1( 0), Op2( 2), is32, access_dcsw},
<span class="p_add">+</span>
<span class="p_add">+	/* TLBIALLIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 0), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 1), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIASIDIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 2), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAAIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 3), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVALIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 5), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAALIS */</span>
<span class="p_add">+	{ CRn( 8), CRm( 3), Op1( 0), Op2( 7), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* ITLBIALL */</span>
<span class="p_add">+	{ CRn( 8), CRm( 5), Op1( 0), Op2( 0), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* ITLBIMVA */</span>
<span class="p_add">+	{ CRn( 8), CRm( 5), Op1( 0), Op2( 1), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* ITLBIASID */</span>
<span class="p_add">+	{ CRn( 8), CRm( 5), Op1( 0), Op2( 2), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* DTLBIALL */</span>
<span class="p_add">+	{ CRn( 8), CRm( 6), Op1( 0), Op2( 0), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* DTLBIMVA */</span>
<span class="p_add">+	{ CRn( 8), CRm( 6), Op1( 0), Op2( 1), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* DTLBIASID */</span>
<span class="p_add">+	{ CRn( 8), CRm( 6), Op1( 0), Op2( 2), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIALL */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 0), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVA */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 1), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIASID */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 2), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAA */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 3), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAL */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 5), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+	/* TLBIMVAAL */</span>
<span class="p_add">+	{ CRn( 8), CRm( 7), Op1( 0), Op2( 7), is32, emulate_tlb_invalidate},</span>
<span class="p_add">+</span>
 	/*
 	 * L2CTLR access (guest wants to know #CPUs).
 	 */
<span class="p_header">diff --git a/arch/arm/kvm/hyp/tlb.c b/arch/arm/kvm/hyp/tlb.c</span>
<span class="p_header">index 6d810af2d9fd..d2b86100d1bb 100644</span>
<span class="p_header">--- a/arch/arm/kvm/hyp/tlb.c</span>
<span class="p_header">+++ b/arch/arm/kvm/hyp/tlb.c</span>
<span class="p_chunk">@@ -76,3 +76,36 @@</span> <span class="p_context"> void __hyp_text __kvm_flush_vm_context(void)</span>
 	write_sysreg(0, ICIALLUIS);
 	dsb(ish);
 }
<span class="p_add">+</span>
<span class="p_add">+static void __hyp_text __switch_to_guest_regime(struct kvm *kvm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	write_sysreg(kvm-&gt;arch.vttbr, VTTBR);</span>
<span class="p_add">+	isb();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __hyp_text __switch_to_host_regime(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	write_sysreg(0, VTTBR);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __hyp_text</span>
<span class="p_add">+__kvm_emulate_tlb_invalidate(struct kvm *kvm, u32 opcode, u64 regval)</span>
<span class="p_add">+{</span>
<span class="p_add">+	kvm = kern_hyp_va(kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	__switch_to_guest_regime(kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 *  TLB maintenance operations are broadcast to</span>
<span class="p_add">+	 *  inner-shareable domain when HCR_FB is set (default for</span>
<span class="p_add">+	 *  KVM).</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 *  Nuke all Stage 1 TLB entries for the VM. This will kill</span>
<span class="p_add">+	 *  performance but it&#39;s always safe to do as we don&#39;t leave</span>
<span class="p_add">+	 *  behind any strays in the TLB</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	write_sysreg(0, TLBIALLIS);</span>
<span class="p_add">+	isb();</span>
<span class="p_add">+</span>
<span class="p_add">+	__switch_to_host_regime();</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



