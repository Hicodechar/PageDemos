
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] hugetlbfs: check for pgoff value overflow - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] hugetlbfs: check for pgoff value overflow</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2018, 12:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180309002726.7248-1-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10269455/mbox/"
   >mbox</a>
|
   <a href="/patch/10269455/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10269455/">/patch/10269455/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3305260594 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 00:28:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 23B632879C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 00:28:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 17CDE2883D; Fri,  9 Mar 2018 00:28:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_HI,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 84CBD2879C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 00:28:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751462AbeCIA2u (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Mar 2018 19:28:50 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:39332 &quot;EHLO
	userp2120.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750878AbeCIA2r (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Mar 2018 19:28:47 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
	by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w290R5Rn150719; Fri, 9 Mar 2018 00:27:38 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references;
	s=corp-2017-10-26; 
	bh=F5QmSVAbNX3Ljy7xp+CErEhonDbV+OERk0TRHYnd5xI=;
	b=DF9oHlvj3ab0WLYwaCZPdbWi9jJWnIBMUvUTKczrlkqotzwIZjD91p4Lb5QCPiXltCBs
	HdVDRs7hFoJtO356c8fZEFZ1GS/lUQGJDQIo9EnOvBSyxeLOMdXoYPCdvMlck9Bh9zro
	FfBOpC2dqdSLSLUS17zDSlH33ueKfVfhvyninHQoB99jV135uT6tuWSA1EXw2iVgbCWb
	wXvBjzu9TGCFfXHDdo5Cmf3HCPIGP+ePVkTCvLxEQMjupJNEJbzOnBQYJyc/sxKr4cDN
	FHRz9qlRjyCcx85pIM31ekaSgcpiHSj0TyNnnmtSNQwhrmTVM9KP1grwug73IXJYx4mM
	0g== 
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp2120.oracle.com with ESMTP id 2gkfmpr0qg-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 09 Mar 2018 00:27:38 +0000
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id
	w290RaK2029518
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 9 Mar 2018 00:27:37 GMT
Received: from abhmp0013.oracle.com (abhmp0013.oracle.com [141.146.116.19])
	by aserv0121.oracle.com (8.14.4/8.13.8) with ESMTP id
	w290RaC4029137; Fri, 9 Mar 2018 00:27:36 GMT
Received: from monkey.oracle.com (/98.246.252.205)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 08 Mar 2018 16:27:36 -0800
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	bugzilla-daemon@bugzilla.kernel.org
Cc: Michal Hocko &lt;mhocko@kernel.org&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Nic Losby &lt;blurbdust@gmail.com&gt;, Yisheng Xie &lt;xieyisheng1@huawei.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;, stable@vger.kernel.org
Subject: [PATCH v3] hugetlbfs: check for pgoff value overflow
Date: Thu,  8 Mar 2018 16:27:26 -0800
Message-Id: &lt;20180309002726.7248-1-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;20180306133135.4dc344e478d98f0e29f47698@linux-foundation.org&gt;
References: &lt;20180306133135.4dc344e478d98f0e29f47698@linux-foundation.org&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8826
	signatures=668687
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1803090004
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 9, 2018, 12:27 a.m.</div>
<pre class="content">
A vma with vm_pgoff large enough to overflow a loff_t type when
converted to a byte offset can be passed via the remap_file_pages
system call.  The hugetlbfs mmap routine uses the byte offset to
calculate reservations and file size.

A sequence such as:
  mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
  remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);
will result in the following when task exits/file closed,
  kernel BUG at mm/hugetlb.c:749!
Call Trace:
  hugetlbfs_evict_inode+0x2f/0x40
  evict+0xcb/0x190
  __dentry_kill+0xcb/0x150
  __fput+0x164/0x1e0
  task_work_run+0x84/0xa0
  exit_to_usermode_loop+0x7d/0x80
  do_syscall_64+0x18b/0x190
  entry_SYSCALL_64_after_hwframe+0x3d/0xa2

The overflowed pgoff value causes hugetlbfs to try to set up a
mapping with a negative range (end &lt; start) that leaves invalid
state which causes the BUG.

The previous overflow fix to this code was incomplete and did not
take the remap_file_pages system call into account.

Fixes: 045c7a3f53d9 (&quot;hugetlbfs: fix offset overflow in hugetlbfs mmap&quot;)
Cc: &lt;stable@vger.kernel.org&gt;
Reported-by: Nic Losby &lt;blurbdust@gmail.com&gt;
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
Changes in v3
  * Use a simpler mask computation as suggested by Andrew Morton
Changes in v2
  * Use bitmask for overflow check as suggested by Yisheng Xie
  * Add explicit (from &gt; to) check when setting up reservations
  * Cc stable

 fs/hugetlbfs/inode.c | 16 +++++++++++++---
 mm/hugetlb.c         |  6 ++++++
 2 files changed, 19 insertions(+), 3 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 8fe1b0aa2896..e46117dc006a 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -108,6 +108,15 @@</span> <span class="p_context"> static void huge_pagevec_release(struct pagevec *pvec)</span>
 	pagevec_reinit(pvec);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Mask used when checking the page offset value passed in via system</span>
<span class="p_add">+ * calls.  This value will be converted to a loff_t which is signed.</span>
<span class="p_add">+ * Therefore, we want to check the upper PAGE_SHIFT + 1 bits of the</span>
<span class="p_add">+ * value.  The extra bit (- 1 in the shift value) is to take the sign</span>
<span class="p_add">+ * bit into account.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define PGOFF_LOFFT_MAX (PAGE_MASK &lt;&lt; (BITS_PER_LONG - (2 * PAGE_SHIFT) - 1))</span>
<span class="p_add">+</span>
 static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 {
 	struct inode *inode = file_inode(file);
<span class="p_chunk">@@ -127,12 +136,13 @@</span> <span class="p_context"> static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
 	vma-&gt;vm_ops = &amp;hugetlb_vm_ops;
 
 	/*
<span class="p_del">-	 * Offset passed to mmap (before page shift) could have been</span>
<span class="p_del">-	 * negative when represented as a (l)off_t.</span>
<span class="p_add">+	 * page based offset in vm_pgoff could be sufficiently large to</span>
<span class="p_add">+	 * overflow a (l)off_t when converted to byte offset.</span>
 	 */
<span class="p_del">-	if (((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt; 0)</span>
<span class="p_add">+	if (vma-&gt;vm_pgoff &amp; PGOFF_LOFFT_MAX)</span>
 		return -EINVAL;
 
<span class="p_add">+	/* must be huge page aligned */</span>
 	if (vma-&gt;vm_pgoff &amp; (~huge_page_mask(h) &gt;&gt; PAGE_SHIFT))
 		return -EINVAL;
 
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 7c204e3d132b..8eeade0a0b7a 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -4374,6 +4374,12 @@</span> <span class="p_context"> int hugetlb_reserve_pages(struct inode *inode,</span>
 	struct resv_map *resv_map;
 	long gbl_reserve;
 
<span class="p_add">+	/* This should never happen */</span>
<span class="p_add">+	if (from &gt; to) {</span>
<span class="p_add">+		VM_WARN(1, &quot;%s called with a negative range\n&quot;, __func__);</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * Only apply hugepage reservation if asked. At fault time, an
 	 * attempt will be made for VM_NORESERVE to allocate a page

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



