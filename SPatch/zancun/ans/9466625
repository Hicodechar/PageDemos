
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[QEMU] x86: implement la57 paging mode - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [QEMU] x86: implement la57 paging mode</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 8, 2016, 4:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161208162150.148763-2-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9466625/mbox/"
   >mbox</a>
|
   <a href="/patch/9466625/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9466625/">/patch/9466625/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BE0A5607D4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:22:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AC667285BF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:22:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A0C7B285C2; Thu,  8 Dec 2016 16:22:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 56715285C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:22:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932461AbcLHQW1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Dec 2016 11:22:27 -0500
Received: from mga05.intel.com ([192.55.52.43]:2698 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753999AbcLHQWX (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Dec 2016 11:22:23 -0500
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga105.fm.intel.com with ESMTP; 08 Dec 2016 08:22:21 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.33,320,1477983600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1079300564&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga001.fm.intel.com with ESMTP; 08 Dec 2016 08:22:14 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id F12E295; Thu,  8 Dec 2016 18:22:13 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	linux-arch@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	qemu-devel@nongnu.org
Subject: [QEMU, PATCH] x86: implement la57 paging mode
Date: Thu,  8 Dec 2016 19:21:22 +0300
Message-Id: &lt;20161208162150.148763-2-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161208162150.148763-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20161208162150.148763-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Dec. 8, 2016, 4:21 p.m.</div>
<pre class="content">
The new paging more is extension of IA32e mode with more additional page
table level.

It brings support of 57-bit vitrual address space (128PB) and 52-bit
physical address space (4PB).

The structure of new page table level is identical to pml4.

The feature is enumerated with CPUID.(EAX=07H, ECX=0):ECX[bit 16].

CR4.LA57[bit 12] need to be set when pageing enables to activate 5-level
paging mode.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
Cc: qemu-devel@nongnu.org
---
 target-i386/arch_memory_mapping.c |  42 ++++++++--
 target-i386/cpu.c                 |  16 ++--
 target-i386/cpu.h                 |   2 +
 target-i386/helper.c              |  54 ++++++++++--
 target-i386/monitor.c             | 167 ++++++++++++++++++++++++++++++++------
 target-i386/translate.c           |   2 +
 6 files changed, 238 insertions(+), 45 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=169613">no-reply@patchew.org</a> - Dec. 8, 2016, 4:48 p.m.</div>
<pre class="content">
Hi,

Your series seems to have some coding style problems. See output below for
more information:

Subject: [Qemu-devel] [QEMU, PATCH] x86: implement la57 paging mode
Type: series
Message-id: 20161208162150.148763-2-kirill.shutemov@linux.intel.com

=== TEST SCRIPT BEGIN ===
#!/bin/bash

BASE=base
n=1
total=$(git log --oneline $BASE.. | wc -l)
failed=0

# Useful git options
git config --local diff.renamelimit 0
git config --local diff.renames True

commits=&quot;$(git log --format=%H --reverse $BASE..)&quot;
for c in $commits; do
    echo &quot;Checking PATCH $n/$total: $(git log -n 1 --format=%s $c)...&quot;
    if ! git show $c --format=email | ./scripts/checkpatch.pl --mailback -; then
        failed=1
        echo
    fi
    n=$((n+1))
done

exit $failed
=== TEST SCRIPT END ===

Updating 3c8cf5a9c21ff8782164d1def7f44bd888713384
Switched to a new branch &#39;test&#39;
509e387 x86: implement la57 paging mode

=== OUTPUT BEGIN ===
Checking PATCH 1/1: x86: implement la57 paging mode...
ERROR: space prohibited before that close parenthesis &#39;)&#39;
#311: FILE: target-i386/monitor.c:108:
+                        print_pte(mon, env, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21), pde,

ERROR: space prohibited before that close parenthesis &#39;)&#39;
#320: FILE: target-i386/monitor.c:116:
+                                print_pte(mon, env, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21)

WARNING: line over 80 characters
#347: FILE: target-i386/monitor.c:148:
+                        print_pte(mon, env, (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30),

WARNING: line over 80 characters
#359: FILE: target-i386/monitor.c:158:
+                                    print_pte(mon, env, (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) +

WARNING: line over 80 characters
#467: FILE: target-i386/monitor.c:464:
+                                    cpu_physical_memory_read(pd_addr + l3 * 8, &amp;pde, 8);

ERROR: line over 90 characters
#469: FILE: target-i386/monitor.c:466:
+                                    end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) + (l3 &lt;&lt; 21);

WARNING: line over 80 characters
#472: FILE: target-i386/monitor.c:469:
+                                            prot = pde &amp; (PG_USER_MASK | PG_RW_MASK |

WARNING: line over 80 characters
#475: FILE: target-i386/monitor.c:472:
+                                            mem_print(mon, &amp;start, &amp;last_prot, end, prot);

WARNING: line over 80 characters
#480: FILE: target-i386/monitor.c:477:
+                                                                         + l4 * 8,

WARNING: line over 80 characters
#481: FILE: target-i386/monitor.c:478:
+                                                                         &amp;pte, 8);

ERROR: line over 90 characters
#483: FILE: target-i386/monitor.c:480:
+                                                end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) +

ERROR: line over 90 characters
#486: FILE: target-i386/monitor.c:483:
+                                                    prot = pte &amp; (PG_USER_MASK | PG_RW_MASK |

WARNING: line over 80 characters
#487: FILE: target-i386/monitor.c:484:
+                                                                  PG_PRESENT_MASK);

ERROR: line over 90 characters
#492: FILE: target-i386/monitor.c:489:
+                                                mem_print(mon, &amp;start, &amp;last_prot, end, prot);

WARNING: line over 80 characters
#497: FILE: target-i386/monitor.c:494:
+                                        mem_print(mon, &amp;start, &amp;last_prot, end, prot);

total: 6 errors, 9 warnings, 481 lines checked

Your patch has style problems, please review.  If any of these errors
are false positives report them to the maintainer, see
CHECKPATCH in MAINTAINERS.

=== OUTPUT END ===

Test command exited with code: 1


---
Email generated automatically by Patchew [http://patchew.org/].
Please send your feedback to patchew-devel@freelists.org
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/target-i386/arch_memory_mapping.c b/target-i386/arch_memory_mapping.c</span>
<span class="p_header">index 88f341e1bbd0..826aee597b13 100644</span>
<span class="p_header">--- a/target-i386/arch_memory_mapping.c</span>
<span class="p_header">+++ b/target-i386/arch_memory_mapping.c</span>
<span class="p_chunk">@@ -220,7 +220,8 @@</span> <span class="p_context"> static void walk_pdpe(MemoryMappingList *list, AddressSpace *as,</span>
 
 /* IA-32e Paging */
 static void walk_pml4e(MemoryMappingList *list, AddressSpace *as,
<span class="p_del">-                       hwaddr pml4e_start_addr, int32_t a20_mask)</span>
<span class="p_add">+                       hwaddr pml4e_start_addr, int32_t a20_mask,</span>
<span class="p_add">+                       target_ulong start_line_addr)</span>
 {
     hwaddr pml4e_addr, pdpe_start_addr;
     uint64_t pml4e;
<span class="p_chunk">@@ -236,11 +237,34 @@</span> <span class="p_context"> static void walk_pml4e(MemoryMappingList *list, AddressSpace *as,</span>
             continue;
         }
 
<span class="p_del">-        line_addr = ((i &amp; 0x1ffULL) &lt;&lt; 39) | (0xffffULL &lt;&lt; 48);</span>
<span class="p_add">+        line_addr = start_line_addr | ((i &amp; 0x1ffULL) &lt;&lt; 39);</span>
         pdpe_start_addr = (pml4e &amp; PLM4_ADDR_MASK) &amp; a20_mask;
         walk_pdpe(list, as, pdpe_start_addr, a20_mask, line_addr);
     }
 }
<span class="p_add">+</span>
<span class="p_add">+static void walk_pml5e(MemoryMappingList *list, AddressSpace *as,</span>
<span class="p_add">+                       hwaddr pml5e_start_addr, int32_t a20_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+    hwaddr pml5e_addr, pml4e_start_addr;</span>
<span class="p_add">+    uint64_t pml5e;</span>
<span class="p_add">+    target_ulong line_addr;</span>
<span class="p_add">+    int i;</span>
<span class="p_add">+</span>
<span class="p_add">+    for (i = 0; i &lt; 512; i++) {</span>
<span class="p_add">+        pml5e_addr = (pml5e_start_addr + i * 8) &amp; a20_mask;</span>
<span class="p_add">+        pml5e = address_space_ldq(as, pml5e_addr, MEMTXATTRS_UNSPECIFIED,</span>
<span class="p_add">+                                  NULL);</span>
<span class="p_add">+        if (!(pml5e &amp; PG_PRESENT_MASK)) {</span>
<span class="p_add">+            /* not present */</span>
<span class="p_add">+            continue;</span>
<span class="p_add">+        }</span>
<span class="p_add">+</span>
<span class="p_add">+        line_addr = (0x7fULL &lt;&lt; 57) | ((i &amp; 0x1ffULL) &lt;&lt; 48);</span>
<span class="p_add">+        pml4e_start_addr = (pml5e &amp; PLM4_ADDR_MASK) &amp; a20_mask;</span>
<span class="p_add">+        walk_pml4e(list, as, pml4e_start_addr, a20_mask, line_addr);</span>
<span class="p_add">+    }</span>
<span class="p_add">+}</span>
 #endif
 
 void x86_cpu_get_memory_mapping(CPUState *cs, MemoryMappingList *list,
<span class="p_chunk">@@ -257,10 +281,18 @@</span> <span class="p_context"> void x86_cpu_get_memory_mapping(CPUState *cs, MemoryMappingList *list,</span>
     if (env-&gt;cr[4] &amp; CR4_PAE_MASK) {
 #ifdef TARGET_X86_64
         if (env-&gt;hflags &amp; HF_LMA_MASK) {
<span class="p_del">-            hwaddr pml4e_addr;</span>
<span class="p_add">+            if (env-&gt;cr[4] &amp; CR4_LA57_MASK) {</span>
<span class="p_add">+                hwaddr pml5e_addr;</span>
<span class="p_add">+</span>
<span class="p_add">+                pml5e_addr = (env-&gt;cr[3] &amp; PLM4_ADDR_MASK) &amp; env-&gt;a20_mask;</span>
<span class="p_add">+                walk_pml5e(list, cs-&gt;as, pml5e_addr, env-&gt;a20_mask);</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                hwaddr pml4e_addr;</span>
 
<span class="p_del">-            pml4e_addr = (env-&gt;cr[3] &amp; PLM4_ADDR_MASK) &amp; env-&gt;a20_mask;</span>
<span class="p_del">-            walk_pml4e(list, cs-&gt;as, pml4e_addr, env-&gt;a20_mask);</span>
<span class="p_add">+                pml4e_addr = (env-&gt;cr[3] &amp; PLM4_ADDR_MASK) &amp; env-&gt;a20_mask;</span>
<span class="p_add">+                walk_pml4e(list, cs-&gt;as, pml4e_addr, env-&gt;a20_mask,</span>
<span class="p_add">+                        0xffffULL &lt;&lt; 48);</span>
<span class="p_add">+            }</span>
         } else
 #endif
         {
<span class="p_header">diff --git a/target-i386/cpu.c b/target-i386/cpu.c</span>
<span class="p_header">index de1f30eeda63..a4b9832b5916 100644</span>
<span class="p_header">--- a/target-i386/cpu.c</span>
<span class="p_header">+++ b/target-i386/cpu.c</span>
<span class="p_chunk">@@ -238,7 +238,8 @@</span> <span class="p_context"> static void x86_cpu_vendor_words2str(char *dst, uint32_t vendor1,</span>
           CPUID_7_0_EBX_HLE, CPUID_7_0_EBX_AVX2,
           CPUID_7_0_EBX_INVPCID, CPUID_7_0_EBX_RTM,
           CPUID_7_0_EBX_RDSEED */
<span class="p_del">-#define TCG_7_0_ECX_FEATURES (CPUID_7_0_ECX_PKU | CPUID_7_0_ECX_OSPKE)</span>
<span class="p_add">+#define TCG_7_0_ECX_FEATURES (CPUID_7_0_ECX_PKU | CPUID_7_0_ECX_OSPKE | \</span>
<span class="p_add">+          CPUID_7_0_ECX_LA57)</span>
 #define TCG_7_0_EDX_FEATURES 0
 #define TCG_APM_FEATURES 0
 #define TCG_6_EAX_FEATURES CPUID_6_EAX_ARAT
<span class="p_chunk">@@ -435,7 +436,7 @@</span> <span class="p_context"> static FeatureWordInfo feature_word_info[FEATURE_WORDS] = {</span>
             &quot;ospke&quot;, NULL, NULL, NULL,
             NULL, NULL, NULL, NULL,
             NULL, NULL, NULL, NULL,
<span class="p_del">-            NULL, NULL, NULL, NULL,</span>
<span class="p_add">+            &quot;la57&quot;, NULL, NULL, NULL,</span>
             NULL, NULL, &quot;rdpid&quot;, NULL,
             NULL, NULL, NULL, NULL,
             NULL, NULL, NULL, NULL,
<span class="p_chunk">@@ -2742,10 +2743,13 @@</span> <span class="p_context"> void cpu_x86_cpuid(CPUX86State *env, uint32_t index, uint32_t count,</span>
     case 0x80000008:
         /* virtual &amp; phys address size in low 2 bytes. */
         if (env-&gt;features[FEAT_8000_0001_EDX] &amp; CPUID_EXT2_LM) {
<span class="p_del">-            /* 64 bit processor, 48 bits virtual, configurable</span>
<span class="p_del">-             * physical bits.</span>
<span class="p_del">-             */</span>
<span class="p_del">-            *eax = 0x00003000 + cpu-&gt;phys_bits;</span>
<span class="p_add">+            /* 64 bit processor */</span>
<span class="p_add">+            *eax = cpu-&gt;phys_bits; /* configurable physical bits */</span>
<span class="p_add">+            if  (env-&gt;features[FEAT_7_0_ECX] &amp; CPUID_7_0_ECX_LA57) {</span>
<span class="p_add">+                *eax |= 0x00003900; /* 57 bits virtual */</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                *eax |= 0x00003000; /* 48 bits virtual */</span>
<span class="p_add">+            }</span>
         } else {
             *eax = cpu-&gt;phys_bits;
         }
<span class="p_header">diff --git a/target-i386/cpu.h b/target-i386/cpu.h</span>
<span class="p_header">index c60572402272..0ba880fc2632 100644</span>
<span class="p_header">--- a/target-i386/cpu.h</span>
<span class="p_header">+++ b/target-i386/cpu.h</span>
<span class="p_chunk">@@ -224,6 +224,7 @@</span> <span class="p_context"></span>
 #define CR4_OSFXSR_SHIFT 9
 #define CR4_OSFXSR_MASK (1U &lt;&lt; CR4_OSFXSR_SHIFT)
 #define CR4_OSXMMEXCPT_MASK  (1U &lt;&lt; 10)
<span class="p_add">+#define CR4_LA57_MASK   (1U &lt;&lt; 12)</span>
 #define CR4_VMXE_MASK   (1U &lt;&lt; 13)
 #define CR4_SMXE_MASK   (1U &lt;&lt; 14)
 #define CR4_FSGSBASE_MASK (1U &lt;&lt; 16)
<span class="p_chunk">@@ -628,6 +629,7 @@</span> <span class="p_context"> typedef uint32_t FeatureWordArray[FEATURE_WORDS];</span>
 #define CPUID_7_0_ECX_UMIP     (1U &lt;&lt; 2)
 #define CPUID_7_0_ECX_PKU      (1U &lt;&lt; 3)
 #define CPUID_7_0_ECX_OSPKE    (1U &lt;&lt; 4)
<span class="p_add">+#define CPUID_7_0_ECX_LA57     (1U &lt;&lt; 16)</span>
 #define CPUID_7_0_ECX_RDPID    (1U &lt;&lt; 22)
 
 #define CPUID_7_0_EDX_AVX512_4VNNIW (1U &lt;&lt; 2) /* AVX512 Neural Network Instructions */
<span class="p_header">diff --git a/target-i386/helper.c b/target-i386/helper.c</span>
<span class="p_header">index 4ecc0912a48a..43e87ddba001 100644</span>
<span class="p_header">--- a/target-i386/helper.c</span>
<span class="p_header">+++ b/target-i386/helper.c</span>
<span class="p_chunk">@@ -651,11 +651,11 @@</span> <span class="p_context"> void cpu_x86_update_cr4(CPUX86State *env, uint32_t new_cr4)</span>
     uint32_t hflags;
 
 #if defined(DEBUG_MMU)
<span class="p_del">-    printf(&quot;CR4 update: CR4=%08x\n&quot;, (uint32_t)env-&gt;cr[4]);</span>
<span class="p_add">+    printf(&quot;CR4 update: %08x -&gt; %08x\n&quot;, (uint32_t)env-&gt;cr[4], new_cr4);</span>
 #endif
     if ((new_cr4 ^ env-&gt;cr[4]) &amp;
         (CR4_PGE_MASK | CR4_PAE_MASK | CR4_PSE_MASK |
<span class="p_del">-         CR4_SMEP_MASK | CR4_SMAP_MASK)) {</span>
<span class="p_add">+         CR4_SMEP_MASK | CR4_SMAP_MASK | CR4_LA57_MASK)) {</span>
         tlb_flush(CPU(cpu), 1);
     }
 
<span class="p_chunk">@@ -757,19 +757,41 @@</span> <span class="p_context"> int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr,</span>
 
 #ifdef TARGET_X86_64
         if (env-&gt;hflags &amp; HF_LMA_MASK) {
<span class="p_add">+            bool la57 = env-&gt;cr[4] &amp; CR4_LA57_MASK;</span>
<span class="p_add">+            uint64_t pml5e_addr, pml5e;</span>
             uint64_t pml4e_addr, pml4e;
             int32_t sext;
 
             /* test virtual address sign extension */
<span class="p_del">-            sext = (int64_t)addr &gt;&gt; 47;</span>
<span class="p_add">+            sext = la57 ? (int64_t)addr &gt;&gt; 56 : (int64_t)addr &gt;&gt; 47;</span>
             if (sext != 0 &amp;&amp; sext != -1) {
                 env-&gt;error_code = 0;
                 cs-&gt;exception_index = EXCP0D_GPF;
                 return 1;
             }
 
<span class="p_del">-            pml4e_addr = ((env-&gt;cr[3] &amp; ~0xfff) + (((addr &gt;&gt; 39) &amp; 0x1ff) &lt;&lt; 3)) &amp;</span>
<span class="p_del">-                env-&gt;a20_mask;</span>
<span class="p_add">+            if (la57) {</span>
<span class="p_add">+                pml5e_addr = ((env-&gt;cr[3] &amp; ~0xfff) +</span>
<span class="p_add">+                        (((addr &gt;&gt; 48) &amp; 0x1ff) &lt;&lt; 3)) &amp; env-&gt;a20_mask;</span>
<span class="p_add">+                pml5e = x86_ldq_phys(cs, pml5e_addr);</span>
<span class="p_add">+                if (!(pml5e &amp; PG_PRESENT_MASK)) {</span>
<span class="p_add">+                    goto do_fault;</span>
<span class="p_add">+                }</span>
<span class="p_add">+                if (pml5e &amp; (rsvd_mask | PG_PSE_MASK)) {</span>
<span class="p_add">+                    goto do_fault_rsvd;</span>
<span class="p_add">+                }</span>
<span class="p_add">+                if (!(pml5e &amp; PG_ACCESSED_MASK)) {</span>
<span class="p_add">+                    pml5e |= PG_ACCESSED_MASK;</span>
<span class="p_add">+                    x86_stl_phys_notdirty(cs, pml5e_addr, pml5e);</span>
<span class="p_add">+                }</span>
<span class="p_add">+                ptep = pml5e ^ PG_NX_MASK;</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                pml5e = env-&gt;cr[3];</span>
<span class="p_add">+                ptep = PG_NX_MASK | PG_USER_MASK | PG_RW_MASK;</span>
<span class="p_add">+            }</span>
<span class="p_add">+</span>
<span class="p_add">+            pml4e_addr = ((pml5e &amp; PG_ADDRESS_MASK) +</span>
<span class="p_add">+                    (((addr &gt;&gt; 39) &amp; 0x1ff) &lt;&lt; 3)) &amp; env-&gt;a20_mask;</span>
             pml4e = x86_ldq_phys(cs, pml4e_addr);
             if (!(pml4e &amp; PG_PRESENT_MASK)) {
                 goto do_fault;
<span class="p_chunk">@@ -781,7 +803,7 @@</span> <span class="p_context"> int x86_cpu_handle_mmu_fault(CPUState *cs, vaddr addr,</span>
                 pml4e |= PG_ACCESSED_MASK;
                 x86_stl_phys_notdirty(cs, pml4e_addr, pml4e);
             }
<span class="p_del">-            ptep = pml4e ^ PG_NX_MASK;</span>
<span class="p_add">+            ptep &amp;= pml4e ^ PG_NX_MASK;</span>
             pdpe_addr = ((pml4e &amp; PG_ADDRESS_MASK) + (((addr &gt;&gt; 30) &amp; 0x1ff) &lt;&lt; 3)) &amp;
                 env-&gt;a20_mask;
             pdpe = x86_ldq_phys(cs, pdpe_addr);
<span class="p_chunk">@@ -1024,16 +1046,30 @@</span> <span class="p_context"> hwaddr x86_cpu_get_phys_page_debug(CPUState *cs, vaddr addr)</span>
 
 #ifdef TARGET_X86_64
         if (env-&gt;hflags &amp; HF_LMA_MASK) {
<span class="p_add">+            bool la57 = env-&gt;cr[4] &amp; CR4_LA57_MASK;</span>
<span class="p_add">+            uint64_t pml5e_addr, pml5e;</span>
             uint64_t pml4e_addr, pml4e;
             int32_t sext;
 
             /* test virtual address sign extension */
<span class="p_del">-            sext = (int64_t)addr &gt;&gt; 47;</span>
<span class="p_add">+            sext = la57 ? (int64_t)addr &gt;&gt; 56 : (int64_t)addr &gt;&gt; 47;</span>
             if (sext != 0 &amp;&amp; sext != -1) {
                 return -1;
             }
<span class="p_del">-            pml4e_addr = ((env-&gt;cr[3] &amp; ~0xfff) + (((addr &gt;&gt; 39) &amp; 0x1ff) &lt;&lt; 3)) &amp;</span>
<span class="p_del">-                env-&gt;a20_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+            if (la57) {</span>
<span class="p_add">+                pml5e_addr = ((env-&gt;cr[3] &amp; ~0xfff) +</span>
<span class="p_add">+                        (((addr &gt;&gt; 48) &amp; 0x1ff) &lt;&lt; 3)) &amp; env-&gt;a20_mask;</span>
<span class="p_add">+                pml5e = x86_ldq_phys(cs, pml5e_addr);</span>
<span class="p_add">+                if (!(pml5e &amp; PG_PRESENT_MASK)) {</span>
<span class="p_add">+                    return -1;</span>
<span class="p_add">+                }</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                pml5e = env-&gt;cr[3];</span>
<span class="p_add">+            }</span>
<span class="p_add">+</span>
<span class="p_add">+            pml4e_addr = ((pml5e &amp; PG_ADDRESS_MASK) +</span>
<span class="p_add">+                    (((addr &gt;&gt; 39) &amp; 0x1ff) &lt;&lt; 3)) &amp; env-&gt;a20_mask;</span>
             pml4e = x86_ldq_phys(cs, pml4e_addr);
             if (!(pml4e &amp; PG_PRESENT_MASK)) {
                 return -1;
<span class="p_header">diff --git a/target-i386/monitor.c b/target-i386/monitor.c</span>
<span class="p_header">index 9a3b4d746e8d..ae2d2f66b6fa 100644</span>
<span class="p_header">--- a/target-i386/monitor.c</span>
<span class="p_header">+++ b/target-i386/monitor.c</span>
<span class="p_chunk">@@ -30,13 +30,18 @@</span> <span class="p_context"></span>
 #include &quot;hmp.h&quot;
 
 
<span class="p_del">-static void print_pte(Monitor *mon, hwaddr addr,</span>
<span class="p_del">-                      hwaddr pte,</span>
<span class="p_del">-                      hwaddr mask)</span>
<span class="p_add">+static void print_pte(Monitor *mon, CPUArchState *env, hwaddr addr,</span>
<span class="p_add">+                      hwaddr pte, hwaddr mask)</span>
 {
 #ifdef TARGET_X86_64
<span class="p_del">-    if (addr &amp; (1ULL &lt;&lt; 47)) {</span>
<span class="p_del">-        addr |= -1LL &lt;&lt; 48;</span>
<span class="p_add">+    if (env-&gt;cr[4] &amp; CR4_LA57_MASK) {</span>
<span class="p_add">+        if (addr &amp; (1ULL &lt;&lt; 56)) {</span>
<span class="p_add">+            addr |= -1LL &lt;&lt; 57;</span>
<span class="p_add">+        }</span>
<span class="p_add">+    } else {</span>
<span class="p_add">+        if (addr &amp; (1ULL &lt;&lt; 47)) {</span>
<span class="p_add">+            addr |= -1LL &lt;&lt; 48;</span>
<span class="p_add">+        }</span>
     }
 #endif
     monitor_printf(mon, TARGET_FMT_plx &quot;: &quot; TARGET_FMT_plx
<span class="p_chunk">@@ -66,13 +71,13 @@</span> <span class="p_context"> static void tlb_info_32(Monitor *mon, CPUArchState *env)</span>
         if (pde &amp; PG_PRESENT_MASK) {
             if ((pde &amp; PG_PSE_MASK) &amp;&amp; (env-&gt;cr[4] &amp; CR4_PSE_MASK)) {
                 /* 4M pages */
<span class="p_del">-                print_pte(mon, (l1 &lt;&lt; 22), pde, ~((1 &lt;&lt; 21) - 1));</span>
<span class="p_add">+                print_pte(mon, env, (l1 &lt;&lt; 22), pde, ~((1 &lt;&lt; 21) - 1));</span>
             } else {
                 for(l2 = 0; l2 &lt; 1024; l2++) {
                     cpu_physical_memory_read((pde &amp; ~0xfff) + l2 * 4, &amp;pte, 4);
                     pte = le32_to_cpu(pte);
                     if (pte &amp; PG_PRESENT_MASK) {
<span class="p_del">-                        print_pte(mon, (l1 &lt;&lt; 22) + (l2 &lt;&lt; 12),</span>
<span class="p_add">+                        print_pte(mon, env, (l1 &lt;&lt; 22) + (l2 &lt;&lt; 12),</span>
                                   pte &amp; ~PG_PSE_MASK,
                                   ~0xfff);
                     }
<span class="p_chunk">@@ -100,7 +105,7 @@</span> <span class="p_context"> static void tlb_info_pae32(Monitor *mon, CPUArchState *env)</span>
                 if (pde &amp; PG_PRESENT_MASK) {
                     if (pde &amp; PG_PSE_MASK) {
                         /* 2M pages with PAE, CR4.PSE is ignored */
<span class="p_del">-                        print_pte(mon, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21), pde,</span>
<span class="p_add">+                        print_pte(mon, env, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21), pde,</span>
                                   ~((hwaddr)(1 &lt;&lt; 20) - 1));
                     } else {
                         pt_addr = pde &amp; 0x3fffffffff000ULL;
<span class="p_chunk">@@ -108,7 +113,7 @@</span> <span class="p_context"> static void tlb_info_pae32(Monitor *mon, CPUArchState *env)</span>
                             cpu_physical_memory_read(pt_addr + l3 * 8, &amp;pte, 8);
                             pte = le64_to_cpu(pte);
                             if (pte &amp; PG_PRESENT_MASK) {
<span class="p_del">-                                print_pte(mon, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21)</span>
<span class="p_add">+                                print_pte(mon, env, (l1 &lt;&lt; 30 ) + (l2 &lt;&lt; 21)</span>
                                           + (l3 &lt;&lt; 12),
                                           pte &amp; ~PG_PSE_MASK,
                                           ~(hwaddr)0xfff);
<span class="p_chunk">@@ -122,13 +127,13 @@</span> <span class="p_context"> static void tlb_info_pae32(Monitor *mon, CPUArchState *env)</span>
 }
 
 #ifdef TARGET_X86_64
<span class="p_del">-static void tlb_info_64(Monitor *mon, CPUArchState *env)</span>
<span class="p_add">+static void tlb_info_la48(Monitor *mon, CPUArchState *env,</span>
<span class="p_add">+        uint64_t l0, uint64_t pml4_addr)</span>
 {
     uint64_t l1, l2, l3, l4;
     uint64_t pml4e, pdpe, pde, pte;
<span class="p_del">-    uint64_t pml4_addr, pdp_addr, pd_addr, pt_addr;</span>
<span class="p_add">+    uint64_t pdp_addr, pd_addr, pt_addr;</span>
 
<span class="p_del">-    pml4_addr = env-&gt;cr[3] &amp; 0x3fffffffff000ULL;</span>
     for (l1 = 0; l1 &lt; 512; l1++) {
         cpu_physical_memory_read(pml4_addr + l1 * 8, &amp;pml4e, 8);
         pml4e = le64_to_cpu(pml4e);
<span class="p_chunk">@@ -140,8 +145,8 @@</span> <span class="p_context"> static void tlb_info_64(Monitor *mon, CPUArchState *env)</span>
                 if (pdpe &amp; PG_PRESENT_MASK) {
                     if (pdpe &amp; PG_PSE_MASK) {
                         /* 1G pages, CR4.PSE is ignored */
<span class="p_del">-                        print_pte(mon, (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30), pdpe,</span>
<span class="p_del">-                                  0x3ffffc0000000ULL);</span>
<span class="p_add">+                        print_pte(mon, env, (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30),</span>
<span class="p_add">+                                pdpe, 0x3ffffc0000000ULL);</span>
                     } else {
                         pd_addr = pdpe &amp; 0x3fffffffff000ULL;
                         for (l3 = 0; l3 &lt; 512; l3++) {
<span class="p_chunk">@@ -150,9 +155,9 @@</span> <span class="p_context"> static void tlb_info_64(Monitor *mon, CPUArchState *env)</span>
                             if (pde &amp; PG_PRESENT_MASK) {
                                 if (pde &amp; PG_PSE_MASK) {
                                     /* 2M pages, CR4.PSE is ignored */
<span class="p_del">-                                    print_pte(mon, (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) +</span>
<span class="p_del">-                                              (l3 &lt;&lt; 21), pde,</span>
<span class="p_del">-                                              0x3ffffffe00000ULL);</span>
<span class="p_add">+                                    print_pte(mon, env, (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) +</span>
<span class="p_add">+                                            (l2 &lt;&lt; 30) + (l3 &lt;&lt; 21), pde,</span>
<span class="p_add">+                                            0x3ffffffe00000ULL);</span>
                                 } else {
                                     pt_addr = pde &amp; 0x3fffffffff000ULL;
                                     for (l4 = 0; l4 &lt; 512; l4++) {
<span class="p_chunk">@@ -161,11 +166,11 @@</span> <span class="p_context"> static void tlb_info_64(Monitor *mon, CPUArchState *env)</span>
                                                                  &amp;pte, 8);
                                         pte = le64_to_cpu(pte);
                                         if (pte &amp; PG_PRESENT_MASK) {
<span class="p_del">-                                            print_pte(mon, (l1 &lt;&lt; 39) +</span>
<span class="p_del">-                                                      (l2 &lt;&lt; 30) +</span>
<span class="p_del">-                                                      (l3 &lt;&lt; 21) + (l4 &lt;&lt; 12),</span>
<span class="p_del">-                                                      pte &amp; ~PG_PSE_MASK,</span>
<span class="p_del">-                                                      0x3fffffffff000ULL);</span>
<span class="p_add">+                                            print_pte(mon, env, (l0 &lt;&lt; 48) +</span>
<span class="p_add">+                                                    (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) +</span>
<span class="p_add">+                                                    (l3 &lt;&lt; 21) + (l4 &lt;&lt; 12),</span>
<span class="p_add">+                                                    pte &amp; ~PG_PSE_MASK,</span>
<span class="p_add">+                                                    0x3fffffffff000ULL);</span>
                                         }
                                     }
                                 }
<span class="p_chunk">@@ -177,6 +182,22 @@</span> <span class="p_context"> static void tlb_info_64(Monitor *mon, CPUArchState *env)</span>
         }
     }
 }
<span class="p_add">+</span>
<span class="p_add">+static void tlb_info_la57(Monitor *mon, CPUArchState *env)</span>
<span class="p_add">+{</span>
<span class="p_add">+    uint64_t l0;</span>
<span class="p_add">+    uint64_t pml5e;</span>
<span class="p_add">+    uint64_t pml5_addr;</span>
<span class="p_add">+</span>
<span class="p_add">+    pml5_addr = env-&gt;cr[3] &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+    for (l0 = 0; l0 &lt; 512; l0++) {</span>
<span class="p_add">+        cpu_physical_memory_read(pml5_addr + l0 * 8, &amp;pml5e, 8);</span>
<span class="p_add">+        pml5e = le64_to_cpu(pml5e);</span>
<span class="p_add">+        if (pml5e &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+            tlb_info_la48(mon, env, l0, pml5e &amp; 0x3fffffffff000ULL);</span>
<span class="p_add">+        }</span>
<span class="p_add">+    }</span>
<span class="p_add">+}</span>
 #endif /* TARGET_X86_64 */
 
 void hmp_info_tlb(Monitor *mon, const QDict *qdict)
<span class="p_chunk">@@ -192,7 +213,11 @@</span> <span class="p_context"> void hmp_info_tlb(Monitor *mon, const QDict *qdict)</span>
     if (env-&gt;cr[4] &amp; CR4_PAE_MASK) {
 #ifdef TARGET_X86_64
         if (env-&gt;hflags &amp; HF_LMA_MASK) {
<span class="p_del">-            tlb_info_64(mon, env);</span>
<span class="p_add">+            if (env-&gt;cr[4] &amp; CR4_LA57_MASK) {</span>
<span class="p_add">+                tlb_info_la57(mon, env);</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                tlb_info_la48(mon, env, 0, env-&gt;cr[3] &amp; 0x3fffffffff000ULL);</span>
<span class="p_add">+            }</span>
         } else
 #endif
         {
<span class="p_chunk">@@ -324,7 +349,7 @@</span> <span class="p_context"> static void mem_info_pae32(Monitor *mon, CPUArchState *env)</span>
 
 
 #ifdef TARGET_X86_64
<span class="p_del">-static void mem_info_64(Monitor *mon, CPUArchState *env)</span>
<span class="p_add">+static void mem_info_la48(Monitor *mon, CPUArchState *env)</span>
 {
     int prot, last_prot;
     uint64_t l1, l2, l3, l4;
<span class="p_chunk">@@ -400,6 +425,94 @@</span> <span class="p_context"> static void mem_info_64(Monitor *mon, CPUArchState *env)</span>
     /* Flush last range */
     mem_print(mon, &amp;start, &amp;last_prot, (hwaddr)1 &lt;&lt; 48, 0);
 }
<span class="p_add">+</span>
<span class="p_add">+static void mem_info_la57(Monitor *mon, CPUArchState *env)</span>
<span class="p_add">+{</span>
<span class="p_add">+    int prot, last_prot;</span>
<span class="p_add">+    uint64_t l0, l1, l2, l3, l4;</span>
<span class="p_add">+    uint64_t pml5e, pml4e, pdpe, pde, pte;</span>
<span class="p_add">+    uint64_t pml5_addr, pml4_addr, pdp_addr, pd_addr, pt_addr, start, end;</span>
<span class="p_add">+</span>
<span class="p_add">+    pml5_addr = env-&gt;cr[3] &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+    last_prot = 0;</span>
<span class="p_add">+    start = -1;</span>
<span class="p_add">+    for (l0 = 0; l0 &lt; 512; l0++) {</span>
<span class="p_add">+        cpu_physical_memory_read(pml5_addr + l0 * 8, &amp;pml5e, 8);</span>
<span class="p_add">+        pml4e = le64_to_cpu(pml5e);</span>
<span class="p_add">+        end = l0 &lt;&lt; 48;</span>
<span class="p_add">+        if (pml5e &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+            pml4_addr = pml5e &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+            for (l1 = 0; l1 &lt; 512; l1++) {</span>
<span class="p_add">+                cpu_physical_memory_read(pml4_addr + l1 * 8, &amp;pml4e, 8);</span>
<span class="p_add">+                pml4e = le64_to_cpu(pml4e);</span>
<span class="p_add">+                end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39);</span>
<span class="p_add">+                if (pml4e &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+                    pdp_addr = pml4e &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+                    for (l2 = 0; l2 &lt; 512; l2++) {</span>
<span class="p_add">+                        cpu_physical_memory_read(pdp_addr + l2 * 8, &amp;pdpe, 8);</span>
<span class="p_add">+                        pdpe = le64_to_cpu(pdpe);</span>
<span class="p_add">+                        end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30);</span>
<span class="p_add">+                        if (pdpe &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+                            if (pdpe &amp; PG_PSE_MASK) {</span>
<span class="p_add">+                                prot = pdpe &amp; (PG_USER_MASK | PG_RW_MASK |</span>
<span class="p_add">+                                               PG_PRESENT_MASK);</span>
<span class="p_add">+                                prot &amp;= pml4e;</span>
<span class="p_add">+                                mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                            } else {</span>
<span class="p_add">+                                pd_addr = pdpe &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+                                for (l3 = 0; l3 &lt; 512; l3++) {</span>
<span class="p_add">+                                    cpu_physical_memory_read(pd_addr + l3 * 8, &amp;pde, 8);</span>
<span class="p_add">+                                    pde = le64_to_cpu(pde);</span>
<span class="p_add">+                                    end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) + (l3 &lt;&lt; 21);</span>
<span class="p_add">+                                    if (pde &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+                                        if (pde &amp; PG_PSE_MASK) {</span>
<span class="p_add">+                                            prot = pde &amp; (PG_USER_MASK | PG_RW_MASK |</span>
<span class="p_add">+                                                          PG_PRESENT_MASK);</span>
<span class="p_add">+                                            prot &amp;= pml4e &amp; pdpe;</span>
<span class="p_add">+                                            mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                                        } else {</span>
<span class="p_add">+                                            pt_addr = pde &amp; 0x3fffffffff000ULL;</span>
<span class="p_add">+                                            for (l4 = 0; l4 &lt; 512; l4++) {</span>
<span class="p_add">+                                                cpu_physical_memory_read(pt_addr</span>
<span class="p_add">+                                                                         + l4 * 8,</span>
<span class="p_add">+                                                                         &amp;pte, 8);</span>
<span class="p_add">+                                                pte = le64_to_cpu(pte);</span>
<span class="p_add">+                                                end = (l0 &lt;&lt; 48) + (l1 &lt;&lt; 39) + (l2 &lt;&lt; 30) +</span>
<span class="p_add">+                                                    (l3 &lt;&lt; 21) + (l4 &lt;&lt; 12);</span>
<span class="p_add">+                                                if (pte &amp; PG_PRESENT_MASK) {</span>
<span class="p_add">+                                                    prot = pte &amp; (PG_USER_MASK | PG_RW_MASK |</span>
<span class="p_add">+                                                                  PG_PRESENT_MASK);</span>
<span class="p_add">+                                                    prot &amp;= pml4e &amp; pdpe &amp; pde;</span>
<span class="p_add">+                                                } else {</span>
<span class="p_add">+                                                    prot = 0;</span>
<span class="p_add">+                                                }</span>
<span class="p_add">+                                                mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                                            }</span>
<span class="p_add">+                                        }</span>
<span class="p_add">+                                    } else {</span>
<span class="p_add">+                                        prot = 0;</span>
<span class="p_add">+                                        mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                                    }</span>
<span class="p_add">+                                }</span>
<span class="p_add">+                            }</span>
<span class="p_add">+                        } else {</span>
<span class="p_add">+                            prot = 0;</span>
<span class="p_add">+                            mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                        }</span>
<span class="p_add">+                    }</span>
<span class="p_add">+                } else {</span>
<span class="p_add">+                    prot = 0;</span>
<span class="p_add">+                    mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+                }</span>
<span class="p_add">+            }</span>
<span class="p_add">+        } else {</span>
<span class="p_add">+            prot = 0;</span>
<span class="p_add">+            mem_print(mon, &amp;start, &amp;last_prot, end, prot);</span>
<span class="p_add">+        }</span>
<span class="p_add">+    }</span>
<span class="p_add">+    /* Flush last range */</span>
<span class="p_add">+    mem_print(mon, &amp;start, &amp;last_prot, (hwaddr)1 &lt;&lt; 57, 0);</span>
<span class="p_add">+}</span>
 #endif /* TARGET_X86_64 */
 
 void hmp_info_mem(Monitor *mon, const QDict *qdict)
<span class="p_chunk">@@ -415,7 +528,11 @@</span> <span class="p_context"> void hmp_info_mem(Monitor *mon, const QDict *qdict)</span>
     if (env-&gt;cr[4] &amp; CR4_PAE_MASK) {
 #ifdef TARGET_X86_64
         if (env-&gt;hflags &amp; HF_LMA_MASK) {
<span class="p_del">-            mem_info_64(mon, env);</span>
<span class="p_add">+            if (env-&gt;cr[4] &amp; CR4_LA57_MASK) {</span>
<span class="p_add">+                mem_info_la57(mon, env);</span>
<span class="p_add">+            } else {</span>
<span class="p_add">+                mem_info_la48(mon, env);</span>
<span class="p_add">+            }</span>
         } else
 #endif
         {
<span class="p_header">diff --git a/target-i386/translate.c b/target-i386/translate.c</span>
<span class="p_header">index 324103c88521..d2aec5c9bf06 100644</span>
<span class="p_header">--- a/target-i386/translate.c</span>
<span class="p_header">+++ b/target-i386/translate.c</span>
<span class="p_chunk">@@ -137,6 +137,7 @@</span> <span class="p_context"> typedef struct DisasContext {</span>
     int cpuid_ext2_features;
     int cpuid_ext3_features;
     int cpuid_7_0_ebx_features;
<span class="p_add">+    int cpuid_7_0_ecx_features;</span>
     int cpuid_xsave_features;
 } DisasContext;
 
<span class="p_chunk">@@ -8350,6 +8351,7 @@</span> <span class="p_context"> void gen_intermediate_code(CPUX86State *env, TranslationBlock *tb)</span>
     dc-&gt;cpuid_ext2_features = env-&gt;features[FEAT_8000_0001_EDX];
     dc-&gt;cpuid_ext3_features = env-&gt;features[FEAT_8000_0001_ECX];
     dc-&gt;cpuid_7_0_ebx_features = env-&gt;features[FEAT_7_0_EBX];
<span class="p_add">+    dc-&gt;cpuid_7_0_ecx_features = env-&gt;features[FEAT_7_0_ECX];</span>
     dc-&gt;cpuid_xsave_features = env-&gt;features[FEAT_XSAVE];
 #ifdef TARGET_X86_64
     dc-&gt;lma = (flags &gt;&gt; HF_LMA_SHIFT) &amp; 1;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



