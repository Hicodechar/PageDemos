
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,4/5] pagemap: hide physical addresses from non-privileged users - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,4/5] pagemap: hide physical addresses from non-privileged users</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=120261">Konstantin Khebnikov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 14, 2015, 3:37 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150714153747.29844.13543.stgit@buzz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6787911/mbox/"
   >mbox</a>
|
   <a href="/patch/6787911/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6787911/">/patch/6787911/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id D3C7DC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:11 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id EB5ED205E7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:10 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id ED10D205B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753242AbbGNPic (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Jul 2015 11:38:32 -0400
Received: from forward-corp1o.mail.yandex.net ([37.140.190.172]:44987 &quot;EHLO
	forward-corp1o.mail.yandex.net&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752304AbbGNPhv (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Jul 2015 11:37:51 -0400
Received: from smtpcorp4.mail.yandex.net (smtpcorp4.mail.yandex.net
	[95.108.252.2])
	by forward-corp1o.mail.yandex.net (Yandex) with ESMTP id 2AC9A3920D69;
	Tue, 14 Jul 2015 18:37:48 +0300 (MSK)
Received: from smtpcorp4.mail.yandex.net (localhost [127.0.0.1])
	by smtpcorp4.mail.yandex.net (Yandex) with ESMTP id D13372C031F;
	Tue, 14 Jul 2015 18:37:47 +0300 (MSK)
Received: from unknown (unknown [2a02:6b8:0:40c:1811:5890:3243:c9ea])
	by smtpcorp4.mail.yandex.net (nwsmtp/Yandex) with ESMTPSA id
	cZjVgQ2NS6-bls4aDUB; Tue, 14 Jul 2015 18:37:47 +0300
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128
	bits)) (Client certificate not present)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yandex-team.ru;
	s=default; 
	t=1436888267; bh=I5fCz8imKlgFaYkOAv7M8dHcj2LYPkxO1nUAC4VSOZc=;
	h=Subject:From:To:Cc:Date:Message-ID:In-Reply-To:References:
	User-Agent:MIME-Version:Content-Type:Content-Transfer-Encoding;
	b=sGWCv0U2OoKHgQxbhjhRHrNRFO7i6c1uUymk9Ie1ZoZdepmsGef2SHHdGOMZTIuc2
	6Ose5v3K1dgtEJ/QONnMQp7R3TCkadD+FGNlw6QHpX7z0BMrixKeb3zc8Jkvxil6Ot
	+4ILUyHqUW9qtlVxAQcb7RZkc/QawZxf9xjXST2k=
Authentication-Results: smtpcorp4.mail.yandex.net;
	dkim=pass header.i=@yandex-team.ru
Subject: [PATCH v4 4/5] pagemap: hide physical addresses from non-privileged
	users
From: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;
To: linux-mm@kvack.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Mark Williamson &lt;mwilliamson@undo-software.com&gt;,
	linux-kernel@vger.kernel.org, linux-api@vger.kernel.org
Date: Tue, 14 Jul 2015 18:37:47 +0300
Message-ID: &lt;20150714153747.29844.13543.stgit@buzz&gt;
In-Reply-To: &lt;20150714152516.29844.69929.stgit@buzz&gt;
References: &lt;20150714152516.29844.69929.stgit@buzz&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.2 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=120261">Konstantin Khebnikov</a> - July 14, 2015, 3:37 p.m.</div>
<pre class="content">
This patch makes pagemap readable for normal users and hides physical
addresses from them. For some use-cases PFN isn&#39;t required at all.
<span class="signed-off-by">
Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)
Link: http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name
---
 fs/proc/task_mmu.c |   25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - July 21, 2015, 8:11 a.m.</div>
<pre class="content">
On Tue, Jul 14, 2015 at 06:37:47PM +0300, Konstantin Khlebnikov wrote:
<span class="quote">&gt; This patch makes pagemap readable for normal users and hides physical</span>
<span class="quote">&gt; addresses from them. For some use-cases PFN isn&#39;t required at all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)</span>
<span class="quote">&gt; Link: http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/proc/task_mmu.c |   25 ++++++++++++++-----------</span>
<span class="quote">&gt;  1 file changed, 14 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 040721fa405a..3a5d338ea219 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -937,6 +937,7 @@ typedef struct {</span>
<span class="quote">&gt;  struct pagemapread {</span>
<span class="quote">&gt;  	int pos, len;		/* units: PM_ENTRY_BYTES, not bytes */</span>
<span class="quote">&gt;  	pagemap_entry_t *buffer;</span>
<span class="quote">&gt; +	bool show_pfn;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define PAGEMAP_WALK_SIZE	(PMD_SIZE)</span>
<span class="quote">&gt; @@ -1013,7 +1014,8 @@ static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
<span class="quote">&gt;  	struct page *page = NULL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (pte_present(pte)) {</span>
<span class="quote">&gt; -		frame = pte_pfn(pte);</span>
<span class="quote">&gt; +		if (pm-&gt;show_pfn)</span>
<span class="quote">&gt; +			frame = pte_pfn(pte);</span>
<span class="quote">&gt;  		flags |= PM_PRESENT;</span>
<span class="quote">&gt;  		page = vm_normal_page(vma, addr, pte);</span>
<span class="quote">&gt;  		if (pte_soft_dirty(pte))</span>

Don&#39;t you need the same if (pm-&gt;show_pfn) check in is_swap_pte path, too?
(although I don&#39;t think that it can be exploited by row hammer attack ...)

Thanks,
Naoya Horiguchi--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80221">Konstantin Khlebnikov</a> - July 21, 2015, 8:39 a.m.</div>
<pre class="content">
On Tue, Jul 21, 2015 at 11:11 AM, Naoya Horiguchi
&lt;n-horiguchi@ah.jp.nec.com&gt; wrote:
<span class="quote">&gt; On Tue, Jul 14, 2015 at 06:37:47PM +0300, Konstantin Khlebnikov wrote:</span>
<span class="quote">&gt;&gt; This patch makes pagemap readable for normal users and hides physical</span>
<span class="quote">&gt;&gt; addresses from them. For some use-cases PFN isn&#39;t required at all.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt;&gt; Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)</span>
<span class="quote">&gt;&gt; Link: http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  fs/proc/task_mmu.c |   25 ++++++++++++++-----------</span>
<span class="quote">&gt;&gt;  1 file changed, 14 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; index 040721fa405a..3a5d338ea219 100644</span>
<span class="quote">&gt;&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; @@ -937,6 +937,7 @@ typedef struct {</span>
<span class="quote">&gt;&gt;  struct pagemapread {</span>
<span class="quote">&gt;&gt;       int pos, len;           /* units: PM_ENTRY_BYTES, not bytes */</span>
<span class="quote">&gt;&gt;       pagemap_entry_t *buffer;</span>
<span class="quote">&gt;&gt; +     bool show_pfn;</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define PAGEMAP_WALK_SIZE    (PMD_SIZE)</span>
<span class="quote">&gt;&gt; @@ -1013,7 +1014,8 @@ static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
<span class="quote">&gt;&gt;       struct page *page = NULL;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       if (pte_present(pte)) {</span>
<span class="quote">&gt;&gt; -             frame = pte_pfn(pte);</span>
<span class="quote">&gt;&gt; +             if (pm-&gt;show_pfn)</span>
<span class="quote">&gt;&gt; +                     frame = pte_pfn(pte);</span>
<span class="quote">&gt;&gt;               flags |= PM_PRESENT;</span>
<span class="quote">&gt;&gt;               page = vm_normal_page(vma, addr, pte);</span>
<span class="quote">&gt;&gt;               if (pte_soft_dirty(pte))</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Don&#39;t you need the same if (pm-&gt;show_pfn) check in is_swap_pte path, too?</span>
<span class="quote">&gt; (although I don&#39;t think that it can be exploited by row hammer attack ...)</span>

Yeah, but I see no reason for that.
Probably except swap on ramdrive, but this too weird =)
<span class="quote">
&gt;</span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Naoya Horiguchi</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a hrefmailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131641">Mark Williamson</a> - July 24, 2015, 6:18 p.m.</div>
<pre class="content">
<span class="reviewed-by">Reviewed-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>

On Tue, Jul 21, 2015 at 9:39 AM, Konstantin Khlebnikov &lt;koct9i@gmail.com&gt; wrote:
<span class="quote">&gt; On Tue, Jul 21, 2015 at 11:11 AM, Naoya Horiguchi</span>
<span class="quote">&gt; &lt;n-horiguchi@ah.jp.nec.com&gt; wrote:</span>
<span class="quote">&gt;&gt; On Tue, Jul 14, 2015 at 06:37:47PM +0300, Konstantin Khlebnikov wrote:</span>
<span class="quote">&gt;&gt;&gt; This patch makes pagemap readable for normal users and hides physical</span>
<span class="quote">&gt;&gt;&gt; addresses from them. For some use-cases PFN isn&#39;t required at all.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt;&gt;&gt; Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)</span>
<span class="quote">&gt;&gt;&gt; Link: http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  fs/proc/task_mmu.c |   25 ++++++++++++++-----------</span>
<span class="quote">&gt;&gt;&gt;  1 file changed, 14 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt;&gt; index 040721fa405a..3a5d338ea219 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt;&gt; @@ -937,6 +937,7 @@ typedef struct {</span>
<span class="quote">&gt;&gt;&gt;  struct pagemapread {</span>
<span class="quote">&gt;&gt;&gt;       int pos, len;           /* units: PM_ENTRY_BYTES, not bytes */</span>
<span class="quote">&gt;&gt;&gt;       pagemap_entry_t *buffer;</span>
<span class="quote">&gt;&gt;&gt; +     bool show_pfn;</span>
<span class="quote">&gt;&gt;&gt;  };</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  #define PAGEMAP_WALK_SIZE    (PMD_SIZE)</span>
<span class="quote">&gt;&gt;&gt; @@ -1013,7 +1014,8 @@ static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
<span class="quote">&gt;&gt;&gt;       struct page *page = NULL;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;       if (pte_present(pte)) {</span>
<span class="quote">&gt;&gt;&gt; -             frame = pte_pfn(pte);</span>
<span class="quote">&gt;&gt;&gt; +             if (pm-&gt;show_pfn)</span>
<span class="quote">&gt;&gt;&gt; +                     frame = pte_pfn(pte);</span>
<span class="quote">&gt;&gt;&gt;               flags |= PM_PRESENT;</span>
<span class="quote">&gt;&gt;&gt;               page = vm_normal_page(vma, addr, pte);</span>
<span class="quote">&gt;&gt;&gt;               if (pte_soft_dirty(pte))</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Don&#39;t you need the same if (pm-&gt;show_pfn) check in is_swap_pte path, too?</span>
<span class="quote">&gt;&gt; (although I don&#39;t think that it can be exploited by row hammer attack ...)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yeah, but I see no reason for that.</span>
<span class="quote">&gt; Probably except swap on ramdrive, but this too weird =)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt; Naoya Horiguchi</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt;&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt;&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt;&gt; Don&#39;t email: &lt;a hrefmailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 040721fa405a..3a5d338ea219 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -937,6 +937,7 @@</span> <span class="p_context"> typedef struct {</span>
 struct pagemapread {
 	int pos, len;		/* units: PM_ENTRY_BYTES, not bytes */
 	pagemap_entry_t *buffer;
<span class="p_add">+	bool show_pfn;</span>
 };
 
 #define PAGEMAP_WALK_SIZE	(PMD_SIZE)
<span class="p_chunk">@@ -1013,7 +1014,8 @@</span> <span class="p_context"> static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
 	struct page *page = NULL;
 
 	if (pte_present(pte)) {
<span class="p_del">-		frame = pte_pfn(pte);</span>
<span class="p_add">+		if (pm-&gt;show_pfn)</span>
<span class="p_add">+			frame = pte_pfn(pte);</span>
 		flags |= PM_PRESENT;
 		page = vm_normal_page(vma, addr, pte);
 		if (pte_soft_dirty(pte))
<span class="p_chunk">@@ -1063,8 +1065,9 @@</span> <span class="p_context"> static int pagemap_pmd_range(pmd_t *pmdp, unsigned long addr, unsigned long end,</span>
 		 */
 		if (pmd_present(pmd)) {
 			flags |= PM_PRESENT;
<span class="p_del">-			frame = pmd_pfn(pmd) +</span>
<span class="p_del">-				((addr &amp; ~PMD_MASK) &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+			if (pm-&gt;show_pfn)</span>
<span class="p_add">+				frame = pmd_pfn(pmd) +</span>
<span class="p_add">+					((addr &amp; ~PMD_MASK) &gt;&gt; PAGE_SHIFT);</span>
 		}
 
 		for (; addr != end; addr += PAGE_SIZE) {
<span class="p_chunk">@@ -1073,7 +1076,7 @@</span> <span class="p_context"> static int pagemap_pmd_range(pmd_t *pmdp, unsigned long addr, unsigned long end,</span>
 			err = add_to_pagemap(addr, &amp;pme, pm);
 			if (err)
 				break;
<span class="p_del">-			if (flags &amp; PM_PRESENT)</span>
<span class="p_add">+			if (pm-&gt;show_pfn &amp;&amp; (flags &amp; PM_PRESENT))</span>
 				frame++;
 		}
 		spin_unlock(ptl);
<span class="p_chunk">@@ -1127,8 +1130,9 @@</span> <span class="p_context"> static int pagemap_hugetlb_range(pte_t *ptep, unsigned long hmask,</span>
 			flags |= PM_FILE;
 
 		flags |= PM_PRESENT;
<span class="p_del">-		frame = pte_pfn(pte) +</span>
<span class="p_del">-			((addr &amp; ~hmask) &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+		if (pm-&gt;show_pfn)</span>
<span class="p_add">+			frame = pte_pfn(pte) +</span>
<span class="p_add">+				((addr &amp; ~hmask) &gt;&gt; PAGE_SHIFT);</span>
 	}
 
 	for (; addr != end; addr += PAGE_SIZE) {
<span class="p_chunk">@@ -1137,7 +1141,7 @@</span> <span class="p_context"> static int pagemap_hugetlb_range(pte_t *ptep, unsigned long hmask,</span>
 		err = add_to_pagemap(addr, &amp;pme, pm);
 		if (err)
 			return err;
<span class="p_del">-		if (flags &amp; PM_PRESENT)</span>
<span class="p_add">+		if (pm-&gt;show_pfn &amp;&amp; (flags &amp; PM_PRESENT))</span>
 			frame++;
 	}
 
<span class="p_chunk">@@ -1196,6 +1200,9 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 	if (!count)
 		goto out_mm;
 
<span class="p_add">+	/* do not disclose physical addresses: attack vector */</span>
<span class="p_add">+	pm.show_pfn = file_ns_capable(file, &amp;init_user_ns, CAP_SYS_ADMIN);</span>
<span class="p_add">+</span>
 	pm.len = (PAGEMAP_WALK_SIZE &gt;&gt; PAGE_SHIFT);
 	pm.buffer = kmalloc(pm.len * PM_ENTRY_BYTES, GFP_TEMPORARY);
 	ret = -ENOMEM;
<span class="p_chunk">@@ -1265,10 +1272,6 @@</span> <span class="p_context"> static int pagemap_open(struct inode *inode, struct file *file)</span>
 {
 	struct mm_struct *mm;
 
<span class="p_del">-	/* do not disclose physical addresses: attack vector */</span>
<span class="p_del">-	if (!capable(CAP_SYS_ADMIN))</span>
<span class="p_del">-		return -EPERM;</span>
<span class="p_del">-</span>
 	mm = proc_mem_open(inode, PTRACE_MODE_READ);
 	if (IS_ERR(mm))
 		return PTR_ERR(mm);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



