
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] ARM64: simplify dma_get_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] ARM64: simplify dma_get_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 17, 2015, 12:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;7483659.O8uXXLFCFD@wuerfel&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7636881/mbox/"
   >mbox</a>
|
   <a href="/patch/7636881/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7636881/">/patch/7636881/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 66A409F392
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Nov 2015 12:51:16 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 74F8C2039C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Nov 2015 12:51:15 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 614C0203F3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Nov 2015 12:51:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753437AbbKQMvK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 17 Nov 2015 07:51:10 -0500
Received: from mout.kundenserver.de ([217.72.192.73]:64423 &quot;EHLO
	mout.kundenserver.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752193AbbKQMvH (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 17 Nov 2015 07:51:07 -0500
Received: from wuerfel.localnet ([134.3.118.24]) by mrelayeu.kundenserver.de
	(mreue104) with ESMTPSA (Nemesis) id 0MhU26-1Zl0TZ3s2M-00McQ7;
	Tue, 17 Nov 2015 13:50:28 +0100
From: Arnd Bergmann &lt;arnd@arndb.de&gt;
To: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Cc: &quot;Rafael J. Wysocki&quot; &lt;rafael.j.wysocki@intel.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, linux-kernel@vger.kernel.org,
	Suravee Suthikulpanit &lt;Suravee.Suthikulpanit@amd.com&gt;,
	Mark Salter &lt;msalter@redhat.com&gt;, linux-arm-kernel@lists.infradead.org
Subject: Re: [RFC] ARM64: simplify dma_get_ops
Date: Tue, 17 Nov 2015 13:50:24 +0100
Message-ID: &lt;7483659.O8uXXLFCFD@wuerfel&gt;
User-Agent: KMail/4.11.5 (Linux/3.16.0-10-generic; KDE/4.11.5; x86_64; ; )
In-Reply-To: &lt;20151117122250.GH6556@e104818-lin.cambridge.arm.com&gt;
References: &lt;4270550.cGd11OgA5n@wuerfel&gt; &lt;5118146.8KqrJiJrDe@wuerfel&gt;
	&lt;20151117122250.GH6556@e104818-lin.cambridge.arm.com&gt;
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset=&quot;us-ascii&quot;
X-Provags-ID: V03:K0:6Qj8ZXXS7/+WZhiyjEdoD1XzC9c0iCECK722cN6tfj8jgpecD28
	vYXnHXo73wV2zhHdPrwV+wAxaHaUblM2Q1JTXYiyIgc0PCOXe5jQjkOAFnGFBm7BVboXrd1
	xvX1+olakqDEOJVu7OkV9Xfi/LxqmbQAfWx92LOcr+tbp+0wlUBviDTUzgaxyiiY586Pf4p
	TcW4iJgadKjdEXfRk/jgg==
X-UI-Out-Filterresults: notjunk:1; V01:K0:+mpj9ZD7xh0=:kDYi3tEixmTg7JhPleXByf
	sDx33XXmP2NM0vuh2CA+rjbGERrAPuR6UzdPcY8osugtg19wzUR23Z9TyknKURtYs7uLBGSC/
	WSa13rVUhiqm6zFODkOJ+BGGxuSdGU70ESWcEudsmb/PxjJlPUHC850Hefm/0wpf/WDShoocI
	fIGo8cdQWAHbVbqwAk/PZhF4ba62IacyaoRMgSvLOpmp+5MhsaKiYlEQaeKTSI3oeNaBJ5/rl
	8qbGlcCjfHjLiglkCmTo2xHgSDX/HTjNLRa1f09fqBPPExV9hSCy5SmxFScG4+gmXs+mB78O1
	lphIOrAJcBGXdxYZIMlUiHL12zgDStH6TQzffPqE/2zB/ks2JtNORUaeUsnpyLZt3mEUfoFK6
	RGdnBfNGBiVzDTVvVdd/XTFL+3o7isgUvr+lsbURjwYrfVp1cMhmuiJ4dRXewPyfzEiC1+cYi
	3sOshbxrHlgErm9FvKcJJfTBGFcLsiiL/JJaKEIIEFxpWFQ+u+gnIz/sCzaU+FZ7JI/MhsCFV
	oZMT+SZxwsY0ELv/mwmXFK1ME+WjNDhqMZUlq4yt1mBRWRzWuMevWLtEL/XgdBmUWouCJLq2e
	8eSfWObeHalQ/kK2lZxMXoggNjmY4PkzOYygP8LpVulDSZF3c9+uUpq8uHur/SecirCVSqKBM
	VKgh8nfapLThxf4Zwlv/iE79s/b4tQtPQJJgxvmE7sW/xS/SiA5/DEkwGZ5O+ieIIPjC5aOsq
	XIowjjrUdYcZRC/Y
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Nov. 17, 2015, 12:50 p.m.</div>
<pre class="content">
On Tuesday 17 November 2015 12:22:51 Catalin Marinas wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On a related note, we should also urgently fix the</span>
<span class="quote">&gt; &gt; arch_setup_dma_ops() function to no longer ignore the base and size</span>
<span class="quote">&gt; &gt; arguments. For dma_base, we can simply WARN_ON(dma_base != 0), so we</span>
<span class="quote">&gt; &gt; can implement support for that whenever we need it,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think we should, at least until we implement support for</span>
<span class="quote">&gt; dev-&gt;dma_pfn_offset. I&#39;m not sure about iommu though, maybe there are</span>
<span class="quote">&gt; working configurations with dma_base != 0.</span>

I think we can assume for now that all IOMMUs are similar to the
ARM SMMU and don&#39;t need this.
<span class="quote">
&gt; &gt; but for the size we need to prevent drivers from calling</span>
<span class="quote">&gt; &gt; dma_set_mask() with an argument larger than the size we pass in here,</span>
<span class="quote">&gt; &gt; unless the size is also larger than max_pfn.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We have a default mask set up in of_dma_configure() based on size and</span>
<span class="quote">&gt; dma_base. Can we check the new mask against the default one?</span>

The size variable here is the mask that of_dma_configure() computes,
though it is not a &quot;default&quot;: it is whatever the parent bus can support,
independent of additional restrictions that may be present in the
device and that are set by the driver.

Checking against that is what I meant above, see below for a prototype
that I have not even compile-tested and that might be missing some corner
cases.

We actually have the option of swapping out the dev-&gt;dma_ops in set_mask
so we don&#39;t have to go through the swiotlb code for devices that don&#39;t
need it.

	Arnd


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - Nov. 27, 2015, 4:57 p.m.</div>
<pre class="content">
(sorry for the delay, I got distracted by other things)

On Tue, Nov 17, 2015 at 01:50:24PM +0100, Arnd Bergmann wrote:
<span class="quote">&gt; On Tuesday 17 November 2015 12:22:51 Catalin Marinas wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; On a related note, we should also urgently fix the</span>
<span class="quote">&gt; &gt; &gt; arch_setup_dma_ops() function to no longer ignore the base and size</span>
<span class="quote">&gt; &gt; &gt; arguments. For dma_base, we can simply WARN_ON(dma_base != 0), so we</span>
<span class="quote">&gt; &gt; &gt; can implement support for that whenever we need it,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think we should, at least until we implement support for</span>
<span class="quote">&gt; &gt; dev-&gt;dma_pfn_offset. I&#39;m not sure about iommu though, maybe there are</span>
<span class="quote">&gt; &gt; working configurations with dma_base != 0.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think we can assume for now that all IOMMUs are similar to the</span>
<span class="quote">&gt; ARM SMMU and don&#39;t need this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt; but for the size we need to prevent drivers from calling</span>
<span class="quote">&gt; &gt; &gt; dma_set_mask() with an argument larger than the size we pass in here,</span>
<span class="quote">&gt; &gt; &gt; unless the size is also larger than max_pfn.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We have a default mask set up in of_dma_configure() based on size and</span>
<span class="quote">&gt; &gt; dma_base. Can we check the new mask against the default one?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The size variable here is the mask that of_dma_configure() computes,</span>
<span class="quote">&gt; though it is not a &quot;default&quot;: it is whatever the parent bus can support,</span>
<span class="quote">&gt; independent of additional restrictions that may be present in the</span>
<span class="quote">&gt; device and that are set by the driver.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Checking against that is what I meant above, see below for a prototype</span>
<span class="quote">&gt; that I have not even compile-tested and that might be missing some corner</span>
<span class="quote">&gt; cases.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We actually have the option of swapping out the dev-&gt;dma_ops in set_mask</span>
<span class="quote">&gt; so we don&#39;t have to go through the swiotlb code for devices that don&#39;t</span>
<span class="quote">&gt; need it.</span>

We could indeed have a lighter implementation that only does cache
maintenance but I guess this assumes that the device supports all the
physical address space. Swiotlb detects the masks and doesn&#39;t bounce the
buffer unless necessary, so the overhead shouldn&#39;t be that large.
<span class="quote">
&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -341,6 +341,31 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	/* device is not DMA capable */</span>
<span class="quote">&gt; +	if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="quote">&gt; +	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * because of the swiotlb, we can return success for</span>
<span class="quote">&gt; +	 * larger masks, but need to ensure that bounce buffers</span>
<span class="quote">&gt; +	 * are used above parent_dma_mask, so set that as</span>
<span class="quote">&gt; +	 * the effective mask.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (mask &gt; dev-&gt;dev_archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;dev_archdata.parent_dma_mask;</span>

Is there any check for parent_dma_mask being supported by swiotlb? If
not, should we move the mask setting above?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Nov. 27, 2015, 8:46 p.m.</div>
<pre class="content">
On Friday 27 November 2015 16:57:21 Catalin Marinas wrote:
<span class="quote">&gt; On Tue, Nov 17, 2015 at 01:50:24PM +0100, Arnd Bergmann wrote:</span>
<span class="quote">&gt; &gt; On Tuesday 17 November 2015 12:22:51 Catalin Marinas wrote:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; The size variable here is the mask that of_dma_configure() computes,</span>
<span class="quote">&gt; &gt; though it is not a &quot;default&quot;: it is whatever the parent bus can support,</span>
<span class="quote">&gt; &gt; independent of additional restrictions that may be present in the</span>
<span class="quote">&gt; &gt; device and that are set by the driver.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Checking against that is what I meant above, see below for a prototype</span>
<span class="quote">&gt; &gt; that I have not even compile-tested and that might be missing some corner</span>
<span class="quote">&gt; &gt; cases.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We actually have the option of swapping out the dev-&gt;dma_ops in set_mask</span>
<span class="quote">&gt; &gt; so we don&#39;t have to go through the swiotlb code for devices that don&#39;t</span>
<span class="quote">&gt; &gt; need it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We could indeed have a lighter implementation that only does cache</span>
<span class="quote">&gt; maintenance but I guess this assumes that the device supports all the</span>
<span class="quote">&gt; physical address space. Swiotlb detects the masks and doesn&#39;t bounce the</span>
<span class="quote">&gt; buffer unless necessary, so the overhead shouldn&#39;t be that large.</span>

Right, that part is certainly optional.
<span class="quote">
&gt; &gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; @@ -341,6 +341,31 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt; &gt;  	return ret;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	/* device is not DMA capable */</span>
<span class="quote">&gt; &gt; +	if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt; &gt; +		return -EIO;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="quote">&gt; &gt; +	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="quote">&gt; &gt; +		return -EIO;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; +	 * because of the swiotlb, we can return success for</span>
<span class="quote">&gt; &gt; +	 * larger masks, but need to ensure that bounce buffers</span>
<span class="quote">&gt; &gt; +	 * are used above parent_dma_mask, so set that as</span>
<span class="quote">&gt; &gt; +	 * the effective mask.</span>
<span class="quote">&gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; +	if (mask &gt; dev-&gt;dev_archdata.parent_dma_mask)</span>
<span class="quote">&gt; &gt; +		mask = dev-&gt;dev_archdata.parent_dma_mask;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is there any check for parent_dma_mask being supported by swiotlb? If</span>
<span class="quote">&gt; not, should we move the mask setting above?</span>

I think swiotlb assumes that the bus can always handle all of RAM,
as that is typically the case on x86: you can have PCI devices that
don&#39;t support 64-bit DMA, but the PCI host bridge always does, and
there are practically never any DMA masters outside of PCI.

powerpc has a &#39;max_direct_dma_addr&#39; variable in dev_archdata, and we
should probably use the same name rather than parent_dma_mask (but
note the difference when an offset is involved). On powerpc, we assume
that the device driver knows what memory the bus supports, which works
because there are fewer SoC vendors reusing the same parts in different
ways. The max_direct_dma_addr there appears to only be used for PCI
devices.

	Arnd
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/device.h b/arch/arm64/include/asm/device.h</span>
<span class="p_header">index 243ef256b8c9..2af91a5bec4e 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 	void *iommu;			/* private IOMMU data */
 #endif
 	bool dma_coherent;
<span class="p_add">+	parent_dma_mask;</span>
 };
 
 struct pdev_archdata {
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 9e351c1f89e2..0433b911b1bd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -341,6 +341,31 @@</span> <span class="p_context"> static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
 	return ret;
 }
 
<span class="p_add">+static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="p_add">+	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * because of the swiotlb, we can return success for</span>
<span class="p_add">+	 * larger masks, but need to ensure that bounce buffers</span>
<span class="p_add">+	 * are used above parent_dma_mask, so set that as</span>
<span class="p_add">+	 * the effective mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mask &gt; dev-&gt;dev_archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;dev_archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct dma_map_ops swiotlb_dma_ops = {
 	.alloc = __dma_alloc,
 	.free = __dma_free,
<span class="p_chunk">@@ -356,6 +381,7 @@</span> <span class="p_context"> static struct dma_map_ops swiotlb_dma_ops = {</span>
 	.sync_sg_for_device = __swiotlb_sync_sg_for_device,
 	.dma_supported = swiotlb_dma_supported,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __swiotlb_set_dma_mask,</span>
 };
 
 static int __init atomic_pool_init(void)
<span class="p_chunk">@@ -979,6 +1005,18 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 	if (!acpi_disabled &amp;&amp; !dev-&gt;archdata.dma_ops)
 		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * we don&#39;t yet support buses that have a non-zero mapping.</span>
<span class="p_add">+	 *  Let&#39;s hope we won&#39;t need it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON(dma_base != 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Whatever the parent bus can set. A device must not set</span>
<span class="p_add">+	 * a DMA mask larger than this.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



