
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,15/32] x86: Add support for changing memory encryption attribute in early boot - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,15/32] x86: Add support for changing memory encryption attribute in early boot</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 2, 2017, 3:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;148846772794.2349.1396854638510933455.stgit@brijesh-build-machine&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9602127/mbox/"
   >mbox</a>
|
   <a href="/patch/9602127/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9602127/">/patch/9602127/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8F4C4604E2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Mar 2017 07:11:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8110E28610
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Mar 2017 07:11:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7578B2861E; Fri,  3 Mar 2017 07:11:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D532D2861B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Mar 2017 07:11:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751552AbdCCHLN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 3 Mar 2017 02:11:13 -0500
Received: from mail-sn1nam01on0078.outbound.protection.outlook.com
	([104.47.32.78]:65184
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751881AbdCCHKw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 3 Mar 2017 02:10:52 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=CGZPEc1Mjp6A+4e4ps8CqQJcYsqoEZlnDz2JViPL5Ak=;
	b=atsqvsW2aSeg+fYir9Gx2XQBo1AzzrIUwYD+nEAfVRPipDDpQqbt7gwV1L5NgUMSmipfZLIF0giLaIOJhFlYKrlwzcRBaOTUIJn+2txvRAHgl1lASqKYL8vktWEJSvnn/J5wT0ga6xdQ0eMAHYS3n1tGJo21w2uaQb8bn+u5Crc=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from [127.0.1.1] (165.204.77.1) by
	DM5PR12MB1612.namprd12.prod.outlook.com (10.172.40.18) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384) id
	15.1.947.12; Thu, 2 Mar 2017 15:15:30 +0000
Subject: [RFC PATCH v2 15/32] x86: Add support for changing memory
	encryption attribute in early boot
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: &lt;simon.guinot@sequanux.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;brijesh.singh@amd.com&gt;, &lt;kvm@vger.kernel.org&gt;,
	&lt;rkrcmar@redhat.com&gt;, &lt;matt@codeblueprint.co.uk&gt;,
	&lt;linux-pci@vger.kernel.org&gt;, &lt;linus.walleij@linaro.org&gt;,
	&lt;gary.hook@amd.com&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;paul.gortmaker@windriver.com&gt;, &lt;hpa@zytor.com&gt;, &lt;cl@linux.com&gt;,
	&lt;dan.j.williams@intel.com&gt;, &lt;aarcange@redhat.com&gt;,
	&lt;sfr@canb.auug.org.au&gt;, &lt;andriy.shevchenko@linux.intel.com&gt;,
	&lt;herbert@gondor.apana.org.au&gt;, &lt;bhe@redhat.com&gt;,
	&lt;xemul@parallels.com&gt;, &lt;joro@8bytes.org&gt;, &lt;x86@kernel.org&gt;,
	&lt;peterz@infradead.org&gt;, &lt;piotr.luc@intel.com&gt;, &lt;mingo@redhat.com&gt;,
	&lt;msalter@redhat.com&gt;, &lt;ross.zwisler@linux.intel.com&gt;, &lt;bp@suse.de&gt;,
	&lt;dyoung@redhat.com&gt;, &lt;thomas.lendacky@amd.com&gt;, &lt;jroedel@suse.de&gt;,
	&lt;keescook@chromium.org&gt;, &lt;arnd@arndb.de&gt;, &lt;toshi.kani@hpe.com&gt;,
	&lt;mathieu.desnoyers@efficios.com&gt;, &lt;luto@kernel.org&gt;,
	&lt;devel@linuxdriverproject.org&gt;, &lt;bhelgaas@google.com&gt;,
	&lt;tglx@linutronix.de&gt;, &lt;mchehab@kernel.org&gt;,
	&lt;iamjoonsoo.kim@lge.com&gt;, &lt;labbott@fedoraproject.org&gt;,
	&lt;tony.luck@intel.com&gt;, &lt;alexandre.bounine@idt.com&gt;,
	&lt;kuleshovmail@gmail.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;mcgrof@kernel.org&gt;, &lt;mst@redhat.com&gt;,
	&lt;linux-crypto@vger.kernel.org&gt;, &lt;tj@kernel.org&gt;,
	&lt;pbonzini@redhat.com&gt;, &lt;akpm@linux-foundation.org&gt;, &lt;davem@davemloft.net&gt;
Date: Thu, 2 Mar 2017 10:15:28 -0500
Message-ID: &lt;148846772794.2349.1396854638510933455.stgit@brijesh-build-machine&gt;
In-Reply-To: &lt;148846752022.2349.13667498174822419498.stgit@brijesh-build-machine&gt;
References: &lt;148846752022.2349.13667498174822419498.stgit@brijesh-build-machine&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM5PR09CA0040.namprd09.prod.outlook.com (10.172.184.154)
	To DM5PR12MB1612.namprd12.prod.outlook.com (10.172.40.18)
X-MS-Office365-Filtering-Correlation-Id: f1a17d6e-331f-4d0a-a5ed-08d4617ef78b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0; RULEID:(22001)(48565401081);
	SRVR:DM5PR12MB1612; 
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1612;
	3:U4vc8x7Pua6iXEOFk9y7Uhyo0FKgcyyjiNMDMGjDzOoIY8nVwPPzd7ezO/QLhYmu6xWGw8oI0tCRsWlO02tznbCxL/FkkaeOKiQFyoEd2soGnwZj9Kr+WlbMz3tWTPxhzPBojrgpR7w2rKwEPrzDWFoNylUKRSAwqUPZRjN3lrdA/9XqKJLh9NIYll6axu4U3kKsrKEYtFihaEH0yCQVxf5WPjz+7+ZRPeK6rw5E901HNWtpwXEln5cjRhvWlhSLJ7CqmXBfIiudb0+W6obpZh0epzugHbzzcKJWrWnpaj4=;
	25:Rk461O5C3/1qdqpnFhWiAhFIgmD19Jtivd74ji1lrml7vrNl7qDOvTm6QlA2ofsede18owiea+2SXdOZsJarWBzxpLxBvrEMMDQAsViJPlbguGbUEFXt6oOGfXzUQ/E2iX6DuYKJ4GV9sOt6dZZOOIq/49EeTYyNSrd/ptVJN6fm7/K2xzNbsSeZu9WvUfYqyh8haQopzyQISuYYfnyYOZFVfWplV/DfnIsh6NzOKYf2disY8vYPYASjK9esBRzwpJCztLm9NGVZoe5071ZvVWRvhcj/hRd6boN04e/G6j6EN7AM525nkxEBwNfF95wRqQf6UIDdSsPVf0p5aJqjRcs0Ki57egmep+7PgYVn0JvETjn0Db1z4oOzl7EGo3wUtojTmVCWMXVmf4eH/vHJFSIywwZnIqNy5MTzsSymftzXR9hAep1bWs+jdfuDbeG/
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1612;
	31:zIO7DRux3jhlM8/oGTz+ghKDGKOCMW1Aymshz0n7FdZM+6f0eK4zwOT8ibkFR4NP8/ELMC4XOfDSXckvJc/6CS3PZj7trFsj3Fhl2ZuuSlFAY5pt/39a9wFJ1j1WrSG6hlYV/SQabjVbAZZ7VgNO1p2n0/NJ4PHKecf8TpQgOGNjYqdFvh32IbfQuU6iCqd1V+ZwhrkFtN0l24pGSKzq6Uf4lqkKZ04Iwq4I3PvpaMk=;
	20:4WwtljIQo3hw2SA0BIldAKdoVVCDxMtTT65plL7h3afvBaqrVuqoQJRmjZP8eqpxigFY9fvV2U6IlJwB1EErSdsg6wUWh4Q1K/7zSAOYSmjsBUM2cEkVzTYFecjvG73I4LAKcYLh8Y/uejjje1PYvFXwK4e3b5sC/Mq7y04WZ2ZH7eeAgQc3cHgpmZPNfShjp84Se89l16n6kqzj8Xe4qIqHGDtMy3mMka4ZmQZ5odfPnW7MnUsYKKWakvoR2GMKHStsFbv/0kYQSzuXyvq/zus4h0t6hL6ybxTaFVbzFkfdxY3Whg+Tps3332jm8UMy16lrLXdBW3wlls8DaD8HvD5P7RO9iEoXRSpbJ+e1LWc5c9Cp5cCmQ5GOoqGLViVzcHtTV/jMG/m4fDXKmmFONXYJ2hGn6k4rXUtER1ZAEGmH3FKndsBBxrc8kCyFRm7lKSRBOJpmecX1ageGhIdHaMurEYAE3cnzArbYbGOKteSzxr9HjdPRDR2iyMOx9//I
X-Microsoft-Antispam-PRVS: &lt;DM5PR12MB161202461FCE6431776EBE1EE5280@DM5PR12MB1612.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040375)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(6055026)(6041248)(20161123555025)(20161123558025)(20161123564025)(20161123560025)(20161123562025)(6072148);
	SRVR:DM5PR12MB1612; BCL:0; PCL:0; RULEID:; SRVR:DM5PR12MB1612;
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1612;
	4:Q5iK9khVN4OHvG1RGIEku3k8XYXIkmZMxefHpWGphstXmtmVkNwWLwiGF901GmOXzt2D1uakYvsqx0h16hh93QdGcBc6rka38v/Ej74vDWgY79c5SlDDjNBlodpe/G3sFRQOowkTUqCE7wfrf3Wv3YZm285jM9s4ankiPmLUXHcHW8fzWZ+SzGEUNX5hpe+K8PkprmoqKD+D05sVRYpo1NmxWqosEEd9IL1fIG3LSjX7bWMf707aSsToTmDVjxJrfT5j1h2PImLF8xh+O7S5Ot5uRTpjZ0BA+uMr6uyRABq1DyT9XpDrc/xwrdVF+k2eh9D1G7rYRWV7vSzLZ0/iKb0TD54GrbHBiFPaF1NrnHda0OcE9PZz29wp0NN15IfP2HQWGO0K6AAm9HSAokpejs6D+2YsoiaQbS3PVj4efO3QIUBn26KX7znVaH11NNYEx3pIm3nvoo9nE8nAV5nb7ls3rIlegzEMlW++DS6VPlJFxejlNIJ5EpdvHNU7gJhVv2pIIRIvXgdMSkhIGn9jAfLrjOzQ0WDXZ1K8ceGioc/46LMbIxZOfWMEQlOTDmF80Hxx+vVqwUYP6WNcK13MbVrxqrG5s9BFOuc9jQ/B2pnIfkWZ8vrR3D1uvF6VMSr6yHWcM06OV6qqMMGMHgNKl9JkxJnrhpsQLU7gF5V+5J0=
X-Forefront-PRVS: 023495660C
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6049001)(6009001)(7916002)(39860400002)(39410400002)(39850400002)(39840400002)(39450400003)(38730400002)(1191002)(81166006)(92566002)(42186005)(8676002)(2201001)(6486002)(77096006)(25786008)(90366009)(2950100002)(83506001)(53936002)(9686003)(6116002)(47776003)(33716001)(86362001)(5660300001)(3846002)(7416002)(103116003)(50986999)(2906002)(575784001)(50466002)(230700001)(7406005)(7366002)(54356999)(305945005)(23676002)(7736002)(66066001)(189998001)(76176999)(33646002)(921003)(83996005)(217873001)(2101003)(84006005)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:DM5PR12MB1612; H:[127.0.1.1];
	FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxNjEyOzIzOmxKd2tmZkFaSXBPZ2VYYzR2MU50MXpiNXpK?=
	=?utf-8?B?dVA3K3NkVkZjR040b3BQQ21DaHQvU1BwQnJCMmc1K0w2WERwUnpkVFNRR1Q1?=
	=?utf-8?B?M3VkS0NFZDRHVVM3Vit0dVNzcGx2NnM3NmZmMUxWcGxzNzVzS3lLaU9Jcitw?=
	=?utf-8?B?c1VLWjV1WWZCblB1RStLWGI5d2hhVFp0UEVLbW9ZRWtzOWF1ODNodEc3R1NC?=
	=?utf-8?B?bW9EcTYvKzcwdlJIdDdUNWp2NXh3U3Z3TEFySjNTQVRQd2c1dkIzd0o4VW1M?=
	=?utf-8?B?eXBJWGRWUWxMRWRuVFZBYW5QQUNvdzJoT2QxNDdvZ2RZRDYrYVBBcHlReEhp?=
	=?utf-8?B?MnpNc29PK2ZaTDdzZEpRVWhSQUV0eExGSVYwWFdjbUxSMFZ2bVM3WklpblYv?=
	=?utf-8?B?VmtJOFMxMXRRYmZQQTk4MWJEcXNmYkRNeHJPV21VdEJjYlhNZzVPUmloODE5?=
	=?utf-8?B?cDB1b05xbWdKbE5sWUp5djBXejZSY2FWWWlueTJrUjNBcW9BcWJrNnRWRXVm?=
	=?utf-8?B?OSsxMkd4N1hibmRIOG0vUlFOM2FqMHBvalltUUtZSVVGS3FxOEJmalZtTmZR?=
	=?utf-8?B?U1dsTXkyVmVyRGdaOTlGOTAyVWRCeUd5aWpaQVE5Qm9qZjdzMWpHUitlOUtT?=
	=?utf-8?B?YlFNYk1yaGo2d3dCRzk2OWNVYWdQU003Znh4TTRDSG5WZ1JsRTY1KytkdytD?=
	=?utf-8?B?elBoZCtiZG5ya0ZpeklRWUQyN0dRZEQrZlJGMU1FMVljWUVwRnJzN2sra2Fw?=
	=?utf-8?B?Q0V3bnJaVFMvOWZIdHdLYmdWdnE5NkZqcFpWRVpRYXF6OHFWZjBia1BPRjJx?=
	=?utf-8?B?UHNxdnhKR3VXcnduWmJCK2RSM2Z2d1M0emU5L2hZbUpnTGZmbVhnTlhVUDB0?=
	=?utf-8?B?aUtvcXQ5dVRqc2s0NEdHN0JCa2VQU2xwcXBkNkZxUVJ6V0xWVVVTWDRJU0J4?=
	=?utf-8?B?SHgxRGwxTkR4eXZaSFYrbGNFN2Z4TUhKTmIraU0rcE5RZXBXRnhxTE8zSWEr?=
	=?utf-8?B?VlFsd1MvOE5oc1NETE82dkNXUm5PWEovNW54WTF0NTFtUHNKdG91MHFRKys3?=
	=?utf-8?B?LzZUc0crQm84S01zb1lUUnlFdzVzem1kTXlBMVNJYzE2ZHBIU0tCUmt0T2Uv?=
	=?utf-8?B?SEZnZm9HTmxpTEJYeHVmU0VDMW0yRzdJMGtZTDFYS1g0V1p3c3JoNm83alhk?=
	=?utf-8?B?T1Y5S1p5eWVSV3lPaTUwQVJFLzg5dEcybGkzMWYvUXV6cm1WWXhHdStKWGE3?=
	=?utf-8?B?elNPRE1Dd2tnY09iUzBMRDlzSDVESDlFWlV2Y3RZbG5qakZiNkNpTzdKVEZH?=
	=?utf-8?B?NzZ6c3VNcHpTeTJaMlhaSzdUOE5rNUc0cjh5NmFLeEhPUFdBMkQzMjhNTGNN?=
	=?utf-8?B?ODRCWFFjL0hYM0RyNTBmNG1uQVZ0UUYxRWRVc1VNNk8yZ05LRnhQTnRzZVlh?=
	=?utf-8?B?UDFseWJGUDBvL1ZKb0Z1bXU1czA5UWtoaHZhby9Wb05ZalIzSTVtRDV6Q2lw?=
	=?utf-8?B?MmNhMUZ3U1Q2VlRUNUEvODJzazlFamgxUHlwVVVsMWFlSDlsU21jZXRBOG1C?=
	=?utf-8?B?MkRJbk5VUFpocUV6ME96dFVPK2FXN2ZWNjZKUHIxWkd6WUZXdGNDNWJNSGFD?=
	=?utf-8?B?dnpMbFliemM2bkZVWFJTb1RHVEl4RE9kWE9DdFo0MUxTU0VGaEtuMDY0eDhG?=
	=?utf-8?Q?/8KFDdVwx2Xn4XydhvecwTY9ocFDPkvQTceg4Dt?=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1612;
	6:G9mLzqgXSlJButjcQpAdjp9jTf4KEzBrEvZ91Bld/tGlW8ThOKIT3ZA+OR8XMZjdtWH1dhdQkd2A0W5hyVUqVHGoqynNj4Tmq8msOVXMJPV4Ydfmt7NLIBXsTWuqAjUsMY+RqKbhtrQyt9hhfoV68lpMRGtqPB77WJCIN5Zq0ADhTH1WNhQdeMGCMqaAQ9uCxGXZuAY/b1qL7ml2P7+7nGqUQM2BrVqfY479nlfWTjczGoI5mCW+OO/ikNDLUibBKiS1yIwxHGTFKEQvBjXy7AkfOl4eHB0g+LhYpZQW6KC83E/waUTXmrP+MtXqvHLeyImrzrheXqWLuSunG9H0GjYtSCa4qD0BD0V4CS0bTsRe1dHqnmhvz3PfkPdvdtsqpoDcYLuUZ/IgglMGHnugveHyscoGpYNM6m0fYFs7oDk=;
	5:QYSVlNjWqfEctXiaPDgsFXf/vhYL3VKVq32lxYW9jCbXFwsS43WkZ0N+08FQ2h1fl4fszd0bjhH8xMl3B/7sLhG4nej6OD9L69JfG4FWJvyOqUtbUZM0YVQ4Kof5bn4PEOkHmj9M89TvsOfaQi3TYw==;
	24:tjH9Sdu0zLqxMaIhNqTO9q4Q0asNuv6xqVne99CbGoUV/AWizPmJxBCMqVcQp2wiVIKeAl+JmGEnRFYqFMesaBXOteQm8m8K/gb5Eczv21k=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1612;
	7:CQ8tNNfZVmhXlwAnQNFwkNQxw9FJhe3L+uW7OYQ3wlaPYAXJ141F3QEMkd9o8biDUZUDyt0kKcTgNupiNYIC+WmeV3FHUHYX96lnoHh2kCe0sKx6h4iMaqo8eJVdC+33/Qh0/ulV7r4/x6kZn7/V1c604HlKXUAWxxPGNerESwI/rHRAZ9vWg7gjK/2IpyElm5hKY2Dk6SVeRFjAiV/JE4fg2xTCDFLwQ5YNEAhHuT4OSn4HWn2itmoYMqBDt01fhqfFzZjKCZNMKupqee3fok2GbvoTt5k7ER3lhAeUCQDXA/01CIMcIh056z9zR2GJE95w6lOa3iYMGyggNbV8TA==;
	20:j9zNXqXcsQFdcHBfwfiqOO6337Wr8c3lDsmAHJF1jp0xezAJqc8iOKxfrpF/h5aM65LPX94IDA0W84dDilO6j35feS+KBdDP/8CX1VOI2iE5OyeaUh0LGGprkypnWMkS/rfN0sEtxTY+XkqBSIs4c6q33sfV+R19x03bB0q+tqYzVzpMsJKZ8C16Vjsxmpv/KPu52IpcUqtUZx/UDd+2xwKrCcu5HNhTo2M6DA2grsw8h5lOOHuXGNSVIGQPpWJF
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Mar 2017 15:15:30.0949
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1612
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - March 2, 2017, 3:15 p.m.</div>
<pre class="content">
Some KVM-specific custom MSRs shares the guest physical address with
hypervisor. When SEV is active, the shared physical address must be mapped
with encryption attribute cleared so that both hypervsior and guest can
access the data.

Add APIs to change memory encryption attribute in early boot code.
<span class="signed-off-by">
Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |   15 +++++++++
 arch/x86/mm/mem_encrypt.c          |   63 ++++++++++++++++++++++++++++++++++++
 2 files changed, 78 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 24, 2017, 5:12 p.m.</div>
<pre class="content">
On Thu, Mar 02, 2017 at 10:15:28AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; Some KVM-specific custom MSRs shares the guest physical address with</span>
<span class="quote">&gt; hypervisor. When SEV is active, the shared physical address must be mapped</span>
<span class="quote">&gt; with encryption attribute cleared so that both hypervsior and guest can</span>
<span class="quote">&gt; access the data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add APIs to change memory encryption attribute in early boot code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |   15 +++++++++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          |   63 ++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 78 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 9799835..95bbe4c 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -47,6 +47,9 @@ void __init sme_unmap_bootdata(char *real_mode_data);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void __init sme_early_init(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +int __init early_set_memory_decrypted(void *addr, unsigned long size);</span>
<span class="quote">&gt; +int __init early_set_memory_encrypted(void *addr, unsigned long size);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /* Architecture __weak replacement functions */</span>
<span class="quote">&gt;  void __init mem_encrypt_init(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -110,6 +113,18 @@ static inline void __init sme_early_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline int __init early_set_memory_decrypted(void *addr,</span>
<span class="quote">&gt; +						    unsigned long size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 1;</span>
	^^^^^^^^

return 1 when !CONFIG_AMD_MEM_ENCRYPT ?

The non-early variants return 0.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int __init early_set_memory_encrypted(void *addr,</span>
<span class="quote">&gt; +						    unsigned long size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 1;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #define __sme_pa		__pa</span>
<span class="quote">&gt;  #define __sme_pa_nodebug	__pa_nodebug</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; index 7df5f4c..567e0d8 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; @@ -15,6 +15,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/mm.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/dma-mapping.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/fixmap.h&gt;</span>
<span class="quote">&gt; @@ -258,6 +259,68 @@ static void sme_free(struct device *dev, size_t size, void *vaddr,</span>
<span class="quote">&gt;  	swiotlb_free_coherent(dev, size, vaddr, dma_handle);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static unsigned long __init get_pte_flags(unsigned long address)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int level;</span>
<span class="quote">&gt; +	pte_t *pte;</span>
<span class="quote">&gt; +	unsigned long flags = _KERNPG_TABLE_NOENC | _PAGE_ENC;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pte = lookup_address(address, &amp;level);</span>
<span class="quote">&gt; +	if (!pte)</span>
<span class="quote">&gt; +		return flags;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	switch (level) {</span>
<span class="quote">&gt; +	case PG_LEVEL_4K:</span>
<span class="quote">&gt; +		flags = pte_flags(*pte);</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	case PG_LEVEL_2M:</span>
<span class="quote">&gt; +		flags = pmd_flags(*(pmd_t *)pte);</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	case PG_LEVEL_1G:</span>
<span class="quote">&gt; +		flags = pud_flags(*(pud_t *)pte);</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	default:</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return flags;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int __init early_set_memory_enc_dec(void *vaddr, unsigned long size,</span>
<span class="quote">&gt; +				    unsigned long flags)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long pfn, npages;</span>
<span class="quote">&gt; +	unsigned long addr = (unsigned long)vaddr &amp; PAGE_MASK;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* We are going to change the physical page attribute from C=1 to C=0.</span>
<span class="quote">&gt; +	 * Flush the caches to ensure that all the data with C=1 is flushed to</span>
<span class="quote">&gt; +	 * memory. Any caching of the vaddr after function returns will</span>
<span class="quote">&gt; +	 * use C=0.</span>
<span class="quote">&gt; +	 */</span>

Kernel comments style is:

	/*
	 * A sentence ending with a full-stop.
	 * Another sentence. ...
	 * More sentences. ...
	 */
<span class="quote">
&gt; +	clflush_cache_range(vaddr, size);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	npages = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +	pfn = slow_virt_to_phys((void *)addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return kernel_map_pages_in_pgd(init_mm.pgd, pfn, addr, npages,</span>
<span class="quote">&gt; +					flags &amp; ~sme_me_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int __init early_set_memory_decrypted(void *vaddr, unsigned long size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long flags = get_pte_flags((unsigned long)vaddr);</span>

So this does lookup_address()...
<span class="quote">
&gt; +	return early_set_memory_enc_dec(vaddr, size, flags &amp; ~sme_me_mask);</span>

... and this does it too in slow_virt_to_phys(). So you do it twice per
vaddr.

So why don&#39;t you define a __slow_virt_to_phys() helper - notice
the &quot;__&quot; - which returns flags in its second parameter and which
slow_virt_to_phys() calls with a NULL second parameter in the other
cases?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - March 27, 2017, 3:07 p.m.</div>
<pre class="content">
Hi Boris,

On 03/24/2017 12:12 PM, Borislav Petkov wrote:
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static inline int __init early_set_memory_decrypted(void *addr,</span>
<span class="quote">&gt;&gt; +						    unsigned long size)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 1;</span>
<span class="quote">&gt; 	^^^^^^^^</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; return 1 when !CONFIG_AMD_MEM_ENCRYPT ?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The non-early variants return 0.</span>
<span class="quote">&gt;</span>

I will fix it and use the same return value.
<span class="quote">
&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline int __init early_set_memory_encrypted(void *addr,</span>
<span class="quote">&gt;&gt; +						    unsigned long size)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #define __sme_pa		__pa</span>
<span class="quote">
&gt;&gt; +	unsigned long pfn, npages;</span>
<span class="quote">&gt;&gt; +	unsigned long addr = (unsigned long)vaddr &amp; PAGE_MASK;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* We are going to change the physical page attribute from C=1 to C=0.</span>
<span class="quote">&gt;&gt; +	 * Flush the caches to ensure that all the data with C=1 is flushed to</span>
<span class="quote">&gt;&gt; +	 * memory. Any caching of the vaddr after function returns will</span>
<span class="quote">&gt;&gt; +	 * use C=0.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Kernel comments style is:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt; 	 * A sentence ending with a full-stop.</span>
<span class="quote">&gt; 	 * Another sentence. ...</span>
<span class="quote">&gt; 	 * More sentences. ...</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt;</span>

I will update to use kernel comment style.
<span class="quote">

&gt;&gt; +	clflush_cache_range(vaddr, size);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	npages = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt; +	pfn = slow_virt_to_phys((void *)addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	return kernel_map_pages_in_pgd(init_mm.pgd, pfn, addr, npages,</span>
<span class="quote">&gt;&gt; +					flags &amp; ~sme_me_mask);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +int __init early_set_memory_decrypted(void *vaddr, unsigned long size)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	unsigned long flags = get_pte_flags((unsigned long)vaddr);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So this does lookup_address()...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +	return early_set_memory_enc_dec(vaddr, size, flags &amp; ~sme_me_mask);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ... and this does it too in slow_virt_to_phys(). So you do it twice per</span>
<span class="quote">&gt; vaddr.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So why don&#39;t you define a __slow_virt_to_phys() helper - notice</span>
<span class="quote">&gt; the &quot;__&quot; - which returns flags in its second parameter and which</span>
<span class="quote">&gt; slow_virt_to_phys() calls with a NULL second parameter in the other</span>
<span class="quote">&gt; cases?</span>
<span class="quote">&gt;</span>

I will look into creating a helper function. thanks

-Brijesh
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 9799835..95bbe4c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init sme_unmap_bootdata(char *real_mode_data);</span>
 
 void __init sme_early_init(void);
 
<span class="p_add">+int __init early_set_memory_decrypted(void *addr, unsigned long size);</span>
<span class="p_add">+int __init early_set_memory_encrypted(void *addr, unsigned long size);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
 
<span class="p_chunk">@@ -110,6 +113,18 @@</span> <span class="p_context"> static inline void __init sme_early_init(void)</span>
 {
 }
 
<span class="p_add">+static inline int __init early_set_memory_decrypted(void *addr,</span>
<span class="p_add">+						    unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int __init early_set_memory_encrypted(void *addr,</span>
<span class="p_add">+						    unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #define __sme_pa		__pa
 #define __sme_pa_nodebug	__pa_nodebug
 
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 7df5f4c..567e0d8 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
 #include &lt;linux/swiotlb.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
<span class="p_chunk">@@ -258,6 +259,68 @@</span> <span class="p_context"> static void sme_free(struct device *dev, size_t size, void *vaddr,</span>
 	swiotlb_free_coherent(dev, size, vaddr, dma_handle);
 }
 
<span class="p_add">+static unsigned long __init get_pte_flags(unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int level;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	unsigned long flags = _KERNPG_TABLE_NOENC | _PAGE_ENC;</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = lookup_address(address, &amp;level);</span>
<span class="p_add">+	if (!pte)</span>
<span class="p_add">+		return flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (level) {</span>
<span class="p_add">+	case PG_LEVEL_4K:</span>
<span class="p_add">+		flags = pte_flags(*pte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_2M:</span>
<span class="p_add">+		flags = pmd_flags(*(pmd_t *)pte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_1G:</span>
<span class="p_add">+		flags = pud_flags(*(pud_t *)pte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return flags;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_enc_dec(void *vaddr, unsigned long size,</span>
<span class="p_add">+				    unsigned long flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long pfn, npages;</span>
<span class="p_add">+	unsigned long addr = (unsigned long)vaddr &amp; PAGE_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* We are going to change the physical page attribute from C=1 to C=0.</span>
<span class="p_add">+	 * Flush the caches to ensure that all the data with C=1 is flushed to</span>
<span class="p_add">+	 * memory. Any caching of the vaddr after function returns will</span>
<span class="p_add">+	 * use C=0.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	clflush_cache_range(vaddr, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	npages = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	pfn = slow_virt_to_phys((void *)addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	return kernel_map_pages_in_pgd(init_mm.pgd, pfn, addr, npages,</span>
<span class="p_add">+					flags &amp; ~sme_me_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_decrypted(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags = get_pte_flags((unsigned long)vaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	return early_set_memory_enc_dec(vaddr, size, flags &amp; ~sme_me_mask);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_encrypted(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags = get_pte_flags((unsigned long)vaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	return early_set_memory_enc_dec(vaddr, size, flags | _PAGE_ENC);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct dma_map_ops sme_dma_ops = {
 	.alloc                  = sme_alloc,
 	.free                   = sme_free,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



