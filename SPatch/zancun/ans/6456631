
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v3,04/10] mm/hugetlb: expose hugetlb fault mutex for use by fallocate - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v3,04/10] mm/hugetlb: expose hugetlb fault mutex for use by fallocate</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 21, 2015, 3:47 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1432223264-4414-5-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6456631/mbox/"
   >mbox</a>
|
   <a href="/patch/6456631/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6456631/">/patch/6456631/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id B422C9F402
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 May 2015 15:50:22 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id D84B420443
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 May 2015 15:50:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E460220459
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 May 2015 15:50:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756539AbbEUPty (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 21 May 2015 11:49:54 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:31643 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756516AbbEUPtv (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 21 May 2015 11:49:51 -0400
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id t4LFmHf9020161
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 21 May 2015 15:48:17 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0022.oracle.com (8.13.8/8.13.8) with ESMTP id
	t4LFmGfH020550
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 21 May 2015 15:48:16 GMT
Received: from abhmp0018.oracle.com (abhmp0018.oracle.com [141.146.116.24])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	t4LFmGJ3017744; Thu, 21 May 2015 15:48:16 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 21 May 2015 08:48:16 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC v3 PATCH 04/10] mm/hugetlb: expose hugetlb fault mutex for use
	by fallocate
Date: Thu, 21 May 2015 08:47:38 -0700
Message-Id: &lt;1432223264-4414-5-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1432223264-4414-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1432223264-4414-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - May 21, 2015, 3:47 p.m.</div>
<pre class="content">
hugetlb page faults are currently synchronized by the table of
mutexes (htlb_fault_mutex_table).  fallocate code will need to
synchronize with the page fault code when it allocates or
deletes pages.  Expose interfaces so that fallocate operations
can be synchronized with page faults.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 include/linux/hugetlb.h |  3 +++
 mm/hugetlb.c            | 23 ++++++++++++++++++++++-
 2 files changed, 25 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - May 22, 2015, 6:23 a.m.</div>
<pre class="content">
On Thu, May 21, 2015 at 08:47:38AM -0700, Mike Kravetz wrote:
<span class="quote">&gt; hugetlb page faults are currently synchronized by the table of</span>
<span class="quote">&gt; mutexes (htlb_fault_mutex_table).  fallocate code will need to</span>
<span class="quote">&gt; synchronize with the page fault code when it allocates or</span>
<span class="quote">&gt; deletes pages.  Expose interfaces so that fallocate operations</span>
<span class="quote">&gt; can be synchronized with page faults.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/hugetlb.h |  3 +++</span>
<span class="quote">&gt;  mm/hugetlb.c            | 23 ++++++++++++++++++++++-</span>
<span class="quote">&gt;  2 files changed, 25 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="quote">&gt; index fd337f2..d0d033e 100644</span>
<span class="quote">&gt; --- a/include/linux/hugetlb.h</span>
<span class="quote">&gt; +++ b/include/linux/hugetlb.h</span>
<span class="quote">&gt; @@ -82,6 +82,9 @@ void putback_active_hugepage(struct page *page);</span>
<span class="quote">&gt;  bool is_hugepage_active(struct page *page);</span>
<span class="quote">&gt;  void free_huge_page(struct page *page);</span>
<span class="quote">&gt;  void hugetlb_fix_reserve_counts(struct inode *inode, bool restore_reserve);</span>
<span class="quote">&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx);</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_lock(u32 hash);</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_unlock(u32 hash);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE</span>
<span class="quote">&gt;  pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 620cc9e..df0d32a 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -3183,7 +3183,8 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;  	unsigned long key[2];</span>
<span class="quote">&gt;  	u32 hash;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt; +	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="quote">&gt; +	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;  		key[0] = (unsigned long) mapping;</span>
<span class="quote">&gt;  		key[1] = idx;</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; @@ -3209,6 +3210,26 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Interfaces to the fault mutex routines for use by hugetlbfs</span>
<span class="quote">&gt; + * fallocate code.  Faults must be synchronized with page adds or</span>
<span class="quote">&gt; + * deletes by fallocate.  fallocate only deals with shared mappings.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  			unsigned long address, unsigned int flags)</span>
<span class="quote">&gt;  {</span>

You introduce new lock/unlock interfaces, so how about making the existing
user of this lock (i.e. hugetlb_fault()) use them?

Thanks,
Naoya Horiguchi--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - May 22, 2015, 4:50 p.m.</div>
<pre class="content">
On 05/21/2015 11:23 PM, Naoya Horiguchi wrote:
<span class="quote">&gt; On Thu, May 21, 2015 at 08:47:38AM -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; hugetlb page faults are currently synchronized by the table of</span>
<span class="quote">&gt;&gt; mutexes (htlb_fault_mutex_table).  fallocate code will need to</span>
<span class="quote">&gt;&gt; synchronize with the page fault code when it allocates or</span>
<span class="quote">&gt;&gt; deletes pages.  Expose interfaces so that fallocate operations</span>
<span class="quote">&gt;&gt; can be synchronized with page faults.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   include/linux/hugetlb.h |  3 +++</span>
<span class="quote">&gt;&gt;   mm/hugetlb.c            | 23 ++++++++++++++++++++++-</span>
<span class="quote">&gt;&gt;   2 files changed, 25 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; index fd337f2..d0d033e 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; @@ -82,6 +82,9 @@ void putback_active_hugepage(struct page *page);</span>
<span class="quote">&gt;&gt;   bool is_hugepage_active(struct page *page);</span>
<span class="quote">&gt;&gt;   void free_huge_page(struct page *page);</span>
<span class="quote">&gt;&gt;   void hugetlb_fix_reserve_counts(struct inode *inode, bool restore_reserve);</span>
<span class="quote">&gt;&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx);</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_lock(u32 hash);</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_unlock(u32 hash);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE</span>
<span class="quote">&gt;&gt;   pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index 620cc9e..df0d32a 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -3183,7 +3183,8 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;   	unsigned long key[2];</span>
<span class="quote">&gt;&gt;   	u32 hash;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;&gt; +	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="quote">&gt;&gt; +	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;&gt;   		key[0] = (unsigned long) mapping;</span>
<span class="quote">&gt;&gt;   		key[1] = idx;</span>
<span class="quote">&gt;&gt;   	} else {</span>
<span class="quote">&gt;&gt; @@ -3209,6 +3210,26 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * Interfaces to the fault mutex routines for use by hugetlbfs</span>
<span class="quote">&gt;&gt; + * fallocate code.  Faults must be synchronized with page adds or</span>
<span class="quote">&gt;&gt; + * deletes by fallocate.  fallocate only deals with shared mappings.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;   			unsigned long address, unsigned int flags)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You introduce new lock/unlock interfaces, so how about making the existing</span>
<span class="quote">&gt; user of this lock (i.e. hugetlb_fault()) use them?</span>
<span class="quote">&gt; </span>

I will make that change in the next version of the patch set.

Thanks,
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=106071">Davidlohr Bueso</a> - May 22, 2015, 5:01 p.m.</div>
<pre class="content">
On Thu, 2015-05-21 at 08:47 -0700, Mike Kravetz wrote:
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Interfaces to the fault mutex routines for use by hugetlbfs</span>
<span class="quote">&gt; + * fallocate code.  Faults must be synchronized with page adds or</span>
<span class="quote">&gt; + * deletes by fallocate.  fallocate only deals with shared mappings.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt; +}+</span>

These should really be inlined -- maybe add them to hugetlb.h along with
the mutex hashtable bits.

Thanks,
Davidlohr

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - May 22, 2015, 5:10 p.m.</div>
<pre class="content">
On 05/22/2015 10:01 AM, Davidlohr Bueso wrote:
<span class="quote">&gt; On Thu, 2015-05-21 at 08:47 -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * Interfaces to the fault mutex routines for use by hugetlbfs</span>
<span class="quote">&gt;&gt; + * fallocate code.  Faults must be synchronized with page adds or</span>
<span class="quote">&gt;&gt; + * deletes by fallocate.  fallocate only deals with shared mappings.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="quote">&gt;&gt; +}+</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; These should really be inlined -- maybe add them to hugetlb.h along with</span>
<span class="quote">&gt; the mutex hashtable bits.</span>

Thanks.  I&#39;ll figure out some way to inline them in the next version
of the patch set.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index fd337f2..d0d033e 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -82,6 +82,9 @@</span> <span class="p_context"> void putback_active_hugepage(struct page *page);</span>
 bool is_hugepage_active(struct page *page);
 void free_huge_page(struct page *page);
 void hugetlb_fix_reserve_counts(struct inode *inode, bool restore_reserve);
<span class="p_add">+u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx);</span>
<span class="p_add">+void hugetlb_fault_mutex_lock(u32 hash);</span>
<span class="p_add">+void hugetlb_fault_mutex_unlock(u32 hash);</span>
 
 #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE
 pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 620cc9e..df0d32a 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3183,7 +3183,8 @@</span> <span class="p_context"> static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 	unsigned long key[2];
 	u32 hash;
 
<span class="p_del">-	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="p_add">+	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="p_add">+	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
 		key[0] = (unsigned long) mapping;
 		key[1] = idx;
 	} else {
<span class="p_chunk">@@ -3209,6 +3210,26 @@</span> <span class="p_context"> static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 }
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Interfaces to the fault mutex routines for use by hugetlbfs</span>
<span class="p_add">+ * fallocate code.  Faults must be synchronized with page adds or</span>
<span class="p_add">+ * deletes by fallocate.  fallocate only deals with shared mappings.</span>
<span class="p_add">+ */</span>
<span class="p_add">+u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,
 			unsigned long address, unsigned int flags)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



