
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,02/32] x86: Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,02/32] x86: Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 2, 2017, 3:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;148846754069.2349.4698319264278045964.stgit@brijesh-build-machine&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9600469/mbox/"
   >mbox</a>
|
   <a href="/patch/9600469/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9600469/">/patch/9600469/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1137560414 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Mar 2017 15:33:36 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 01E6527D85
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Mar 2017 15:33:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E8521285A0; Thu,  2 Mar 2017 15:33:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8161027D85
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Mar 2017 15:33:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754171AbdCBPd3 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 2 Mar 2017 10:33:29 -0500
Received: from mail-sn1nam02on0053.outbound.protection.outlook.com
	([104.47.36.53]:43642
	&quot;EHLO NAM02-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751038AbdCBP3Y (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 2 Mar 2017 10:29:24 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=ZkiR316T3VuvbtQGzPJ1l/mdMQIhQs4OYS1RrKkJNJU=;
	b=ELpa658vSAVsbr5bLFDhmR2BPpo0gh/3J9GF5i5EcrDdfnzPt8KMpuUDSiIFFkwDrMdQBglJ2G8o3lOtGPFVYyR8mPPkW4D/V0E8Q44mh6XbeoXMXOReaG/RyMziqtsgggaFuVU04m3IjkOzdFbwAxKhZha9j6SV/7RAiwQ4I4A=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from [127.0.1.1] (165.204.77.1) by
	BN6PR12MB1602.namprd12.prod.outlook.com (10.172.20.151) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384) id
	15.1.947.12; Thu, 2 Mar 2017 15:12:25 +0000
Subject: [RFC PATCH v2 02/32] x86: Secure Encrypted Virtualization (SEV)
	support
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: &lt;simon.guinot@sequanux.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;brijesh.singh@amd.com&gt;, &lt;kvm@vger.kernel.org&gt;,
	&lt;rkrcmar@redhat.com&gt;, &lt;matt@codeblueprint.co.uk&gt;,
	&lt;linux-pci@vger.kernel.org&gt;, &lt;linus.walleij@linaro.org&gt;,
	&lt;gary.hook@amd.com&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;paul.gortmaker@windriver.com&gt;, &lt;hpa@zytor.com&gt;, &lt;cl@linux.com&gt;,
	&lt;dan.j.williams@intel.com&gt;, &lt;aarcange@redhat.com&gt;,
	&lt;sfr@canb.auug.org.au&gt;, &lt;andriy.shevchenko@linux.intel.com&gt;,
	&lt;herbert@gondor.apana.org.au&gt;, &lt;bhe@redhat.com&gt;,
	&lt;xemul@parallels.com&gt;, &lt;joro@8bytes.org&gt;, &lt;x86@kernel.org&gt;,
	&lt;peterz@infradead.org&gt;, &lt;piotr.luc@intel.com&gt;, &lt;mingo@redhat.com&gt;,
	&lt;msalter@redhat.com&gt;, &lt;ross.zwisler@linux.intel.com&gt;, &lt;bp@suse.de&gt;,
	&lt;dyoung@redhat.com&gt;, &lt;thomas.lendacky@amd.com&gt;, &lt;jroedel@suse.de&gt;,
	&lt;keescook@chromium.org&gt;, &lt;arnd@arndb.de&gt;, &lt;toshi.kani@hpe.com&gt;,
	&lt;mathieu.desnoyers@efficios.com&gt;, &lt;luto@kernel.org&gt;,
	&lt;devel@linuxdriverproject.org&gt;, &lt;bhelgaas@google.com&gt;,
	&lt;tglx@linutronix.de&gt;, &lt;mchehab@kernel.org&gt;,
	&lt;iamjoonsoo.kim@lge.com&gt;, &lt;labbott@fedoraproject.org&gt;,
	&lt;tony.luck@intel.com&gt;, &lt;alexandre.bounine@idt.com&gt;,
	&lt;kuleshovmail@gmail.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;mcgrof@kernel.org&gt;, &lt;mst@redhat.com&gt;,
	&lt;linux-crypto@vger.kernel.org&gt;, &lt;tj@kernel.org&gt;,
	&lt;pbonzini@redhat.com&gt;, &lt;akpm@linux-foundation.org&gt;, &lt;davem@davemloft.net&gt;
Date: Thu, 2 Mar 2017 10:12:20 -0500
Message-ID: &lt;148846754069.2349.4698319264278045964.stgit@brijesh-build-machine&gt;
In-Reply-To: &lt;148846752022.2349.13667498174822419498.stgit@brijesh-build-machine&gt;
References: &lt;148846752022.2349.13667498174822419498.stgit@brijesh-build-machine&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR07CA0014.namprd07.prod.outlook.com (10.172.94.24) To
	BN6PR12MB1602.namprd12.prod.outlook.com (10.172.20.151)
X-MS-Office365-Filtering-Correlation-Id: 0ac2c98e-312f-4695-9215-08d4617e8ce8
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0; RULEID:(22001)(48565401081);
	SRVR:BN6PR12MB1602; 
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1602;
	3:ZlH6u0bz3/KMG0UoeUayy1yD2SxSkiNMUvduETNDq5V0c78FEzJ8+fp49bqTqHpp32OEb1bqEeiJoGSlDokVgmrq8WP3P97Eu+6UJXlt7YkHHQxN4OqRq1K4gkVCLBgpkumhXZoMnLb88Mk3suI02+1v2ZBW2vYOqYIOnLRygDz1bFC7rzwiSKVe48O6U1T8w0fTFqkSCwyqtDkuKJElPzK+ruemtmBpfBygMhZoZTqoKexialq6HvL+A4JlpVLhIDrmL/XyExVQb/PBnejpkOGLf5uC5ZZF0ZcR0uJRoec=;
	25:MgIiquWjlN1xjspAzY1h5evX+E8xBRg5FjB3OsRDx+LzOwl3OO6zjSrcsKHokrRo5fvfmJ1fqzBY7GeLVqP+n4kGa0VFGD6s+FIpg90dRA8qzAx2njKqoQtd2YKyQdWr5zRvOTQPNAi6zrHZ9xwA5BQeFEgY6LFmLpNakmtLAMdoSvUHVFUSKXwgtbEmowFxDoPglN9dbaLmIeaYyd7Lhla+9p1mNuLFhrk0IkfKg/dKCmcYQN2ugM63g+NHwoMqt726pcqfbXErwAtgOUcF4ljGxSORhiYn3lC+7RWgeybpX/jD4zWt/VuMQt2rRMbLpnAS63ZXk/yOo8iaEjBowm0YBayOZA8u6ISM0phQGJnUWlAw2F6t9JLxSFBWY1MqYheKK9IEr/E41oLfsTIsaP7HpB1ndPfUtOelVXQ8/vV6YEpkFldMY4I/q5RKXIrsfx3rkD4Za1TSJvlYvJnsRg==
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1602;
	31:DRHNTBjfEF6+yDSGkq4LUgL77eXsmLtTKiu+D7LOHFDFsQy7OXR5volKwjI5HbRAA+G+NamW9c7g/SJn7uyBkKHeFWxCMmlhgytM0AH5r9MCBn+ZTfotNGKg7wE+lrqaN2QxC7OSGPxSdYMMGtqaFCoqyNqPL1RUwClOSOsfVOcVsDbuK14U5h7KGKX3GLGcOAv5aOOnK/dfJOiB2h9pDgcYdADowrK8qP06kDjh786CSC3i+v+Kxfd6WdbqVpIc;
	20:Vxj1nr1eo2opcaRGYXbu6sOnlDn2Dn9SjIxAhNkLt/skjm/WdK5uapVY/vWu1+P/QV0qv0xV14y0lMP17awHiwoc20UlXiFKwlXuauBPDIoQgGFeFNo83YWp8EEeQY1CosRl5jZUxPrP82ux8M82oti7P38VP3EFzbhzSz6aVO92j0KMroJFl3VkOdbk72bYrJgmiZx13qDJ+gaQEOqiCwWo3KfSK4PxWuxB5qpDfLlBkt8jmGXQ7ZUo4OIk0CNLW5kG8D+OUFYDST+dRJGHUEfXR1pzhCfERydhZ/uN46OTzG63I1sj5lzFMGkS39UWl9/PFu3ffRWPFH3n9gwar1RU8edxPTlS4nm9zvHCoHUroEI3l1EHVK/lOhZkB+Z9RWSLAM2UcvwZr2IlY+S/nbhnQYckP+mXBmYGDYFuqbrlXkK8Rv4u2jyNoPwH7bJUNTdn2kzHljFZu7sUyXV+BHHQFKNnqPvTkooSC0CfDnQp+XCiwHchjyd2QMnSDa48
X-Microsoft-Antispam-PRVS: &lt;BN6PR12MB1602A7F18E8A81CD32B62180E5280@BN6PR12MB1602.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040375)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(6055026)(6041248)(20161123562025)(20161123564025)(20161123560025)(20161123555025)(20161123558025)(6072148);
	SRVR:BN6PR12MB1602; BCL:0; PCL:0; RULEID:; SRVR:BN6PR12MB1602;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1602;
	4:4KBfvnAVzpR1tJmVT7y0lKcb060NU7yKGKvlgWcrEFbaFvtYHCKLl3nq1BuF3nFkHUa+Mw38jp8ZBDzkJPvjBn8m8Gy6ff5q92GsDC+uavYcl0wsH8ppZXggJax1gnukjWXLxs43yAXIjjBcJ0roUVVakrDFNneBDjHZ/X+77SPm+wn4NMV1uc5dIN92VnWWvunrEz7zfhF5CSAP0U/MnYNI+SvASmLVyK2YRlbRA85pTuTCVMER21E1k5TE25GtpWaec9ISREIVj/Dl2lGZv78/viSuxxJVh0m0nqhzeSdkY1GcID20e20Rde5CjHd/rGbwEqxpLZsptOpSD77wUXAfC+NVv0Goe/qo/ZaZ6fG2/JXffwRQlzUthnI2NRG5PZOZ0cl+bvXLgyNB8G46zaWPC7hewvGMOscUAPezxEt0Q2Pftwq4TpCm17ymsY7tacNcbyD7Vd3XUHLee0s1c6hGtxM8o/cXvSfzHTXZcpfJ5cwfp0Bwgl5G+GciXtNiCs6puIqp8x5TmOUZEOOnDsvDMQ1YIQT1TkqhxNdnxfJ8pAds87XnjmkFdpEY2Ld0rc0zkpW49T0vdsyQo0Glu9JCr363klxcT1xrTa7NQ4W3VN37hBD3r1EbMLDXKkPafCIS+KUO/9e6uuJEBEnsws76t0+7pL0jcHWDuhEV1wQ=
X-Forefront-PRVS: 023495660C
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(6049001)(7916002)(39850400002)(39450400003)(39860400002)(39840400002)(39410400002)(25786008)(77096006)(23676002)(50466002)(47776003)(6486002)(230700001)(66066001)(5660300001)(9686003)(3846002)(50986999)(92566002)(83506001)(7416002)(7366002)(7736002)(7406005)(305945005)(103116003)(42186005)(1191002)(2906002)(90366009)(54356999)(33716001)(6116002)(53936002)(33646002)(2950100002)(8676002)(81166006)(6666003)(38730400002)(2201001)(86362001)(189998001)(76176999)(921003)(2101003)(84006005)(1121003)(83996005)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BN6PR12MB1602; H:[127.0.1.1];
	FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtCTjZQUjEyTUIxNjAyOzIzOndxbUdTT3ZxTXJla282NHBXUzFjN1lablhH?=
	=?utf-8?B?bzE0U3NqZktIT3BEZE1CVCt0U2pxYjd2OThSclZ5N21uWXZRVmZtenNHRmpV?=
	=?utf-8?B?WGJjV1Z2MFZERmNuQno0SmNIbzJVQW90Zzg5aVFQNlFIQjUwaG85RHNkMFhq?=
	=?utf-8?B?bDFGSnkydDROdnM2SUlBVmM1L0tRRlJxYWlXNzNjVEhtalB3MVpjMVNGODhD?=
	=?utf-8?B?RkFlWEtWd2J4L0ZjWUJNdXFGYVhQMjZBaEhTOFE0RnlINy9vMFBabFlzUXo2?=
	=?utf-8?B?a01EYm84T2ZiMWZOSEVWNGswNjRvVmUyeEMxTitEcXpvRWVHUjRoNnBWVnJZ?=
	=?utf-8?B?dkNPdzlnd0VFTm8xcm9uTmR2dDkrM1lWa3VNblEvYzBONEliaEVQSE5YYllV?=
	=?utf-8?B?R2M0TzdWSnZZL3grbnEwM1orcGV2QUZFTnF2c3I1U1hCNDlxY01BMUI0ZGFX?=
	=?utf-8?B?c0p3d0dlc29NUzl1WjJlOEJuSHJYNXM1NmsyZXJvSCtCQXlneEI0NG5vd1Ex?=
	=?utf-8?B?M3NBNUxJMnRCc2R3RHVZVzV1UE84MWNxMlBabU9YRkRYRzNHMENKOUpONGRR?=
	=?utf-8?B?UHRtaUdWSWlvS05NOE1vbHhOSURqWjlmUldSRGFaOFQwUVNhVHNBNDRGZ1Rl?=
	=?utf-8?B?MzI0UGROVk9PeHpKdDhYMnQyQThqckZvalQxcXBXYzhYSjJNdlFVRGxvVFdE?=
	=?utf-8?B?ZkNFTDBFRDdLdTZqQTlreStnRFRGNGloNG9PdTczeUhNNGtBTG9JY2krR3or?=
	=?utf-8?B?TmpIZTAwOW9GeElGdlcxM3IrUWxnSXk4dmt4SkcvRmZnT21GUmNSSnNLWmFa?=
	=?utf-8?B?bklBdldHUXM2cFROU2M4QkN6RjRwTUdZeFZnQW1DNG1JY0ZteW9CR20yb01X?=
	=?utf-8?B?WEVURzkrdDZqTHdNVzZqMGJmUnVudVByL051bVJXdzI0VHVaYUgrUTY0UTRh?=
	=?utf-8?B?b3h4TmJQOTE5cTAreHFrb3N2UEhzVW5QQUl2UDU5azYzd2VLaXRBc2hPZTc0?=
	=?utf-8?B?aW1yUUdDWXFhVW1MamZHYWo3Ui9TU0F1YnYvQXB1Wk5zL2lySGQ4MmpteDBT?=
	=?utf-8?B?N0hmWS80MHU2TGVOSnFTUWZFRWdBQjFUUnh4ekY3eCtYRVdDTnAyUlB3T0hq?=
	=?utf-8?B?aHJ4Y1FIWWxKVEtJakduZjRkZ1NGazF4Y1NqSE5PUTJVc0JiQzVoSGxwWHNj?=
	=?utf-8?B?S2dZWlFKeWhLUHNKdlpjZ0MzUlhWNlZXemIrZloxRDdyVFZwMXUrQ3JXVVV0?=
	=?utf-8?B?MHU2UTYzdlFVelZrY2NPazQybWdjTGhLc2pqbFZKRGxMb3JzdHdER3RvNUMv?=
	=?utf-8?B?VWg2amh1RUEyR0FxMytodHpYSWI2eC9xdUZaaWw5Nit5bUpwZ1ZuUWkvTnVX?=
	=?utf-8?B?OEVvU0F6Y1FlQVo1enk1bEY2aUhYMkdNeFpJZ1FXY0FTVVNsTVExY1V0YXFC?=
	=?utf-8?B?MllaSFE0Rnk4TG5rZ1lTTHBGRDZ6Mk8rY1dvRk52OFREblNrOWU1dnM0V0N1?=
	=?utf-8?B?TW1JL284cUhjT0VncG4wQzJsMDA1NTNnVlhYUFNVbGdsbURVZ2RYcU1QN0gz?=
	=?utf-8?B?SkFBZE5McFFEWm90S0FWV29VSy9sKytlUjJ1NHRnZTAybkMxYVJUTGovQzcz?=
	=?utf-8?B?UjlDMGhEWnRIQzV2ellaMFF0Njl5RVpuOENKbzBzMkFvWlFWVS9ZZGFRRExY?=
	=?utf-8?Q?crmiaXn4GSf6ezg0ar4fcBwNKk+8FRmwHQ+Mr2j?=
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1602;
	6:8TbsOq/CZqNwLIdekw8uEjUl1s2pr59Wi8mQGN5tRaWUU+bZJwnngo8JD1hED4PHtN5gSbcGNzrkgFfKtX77Rm23mpLPlXkcCENguREnXrPxaEBqk1z5jnQxV443rCEDFtoaW5nCQFX7lpXdUZwFT/ZK0uXIY3h3DZXfk2DSXHl5zTYGdftY7ka/UFon07CB5J1IzN+LTJo+aWiS0iZ4qndcVlsYpV4r9nKb5RT9FoI2uFON9SqBHhH9MkSUdIACURWbMwTTU1qnwpATn8Mt6tfW4n2YOUg1bufDvV1u1UwANPSMjyo26t4TMgFvZop43+K+vku4EHUyZm3rOcAMn9LLeNZOB+6yrX38FHfGcRVAPztsQTo5bZ0gVNJIWiVdYSZmurZAfJcGpOOL2LXTy4KrvMKo76NiLmsRIcrhiGI=;
	5:quirlXO4pS4cApTKyJo/6sBwMvqqoINfOpboLbVE8sXxAqRpaqDtOvD4cMxD5MzGTRqiu1mezOwj4UcNYNH1ywk4zuxIh7N+1mevCepTXGRXN9CLHYypkfu/c6CHFKxRCcgCRBfCe5SKtTXpv5XTIg==;
	24:0XmMB+wuZeKq1+jrLPNlkaFd8EV4tA/00H10+5yTMDCtGGlNBjdB5nNSsKI9BT39R1D8noOY2V9hqASFq0PowTcJ+uVzPyc7il/VVD2PgCI=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1602;
	7:oy0mlll2P4HoAn5Plv0G7Rcf/Vu0qIQDvIHIfbVpFP1mPNcd9O55tCM1cLVRHd6VJpOww2xaMyraLq1Fu4ugdWKlJLgcdtk+nf8hm5uPlPPXaaFI8I0t+X7EMAgGBAJuq39MZG5BE27eqAMU1bwDoDzwMTWy0+Yw5pu+arXuJaXgG0Dd5znHAqkEB7Kjb6rQeDRty8e2IbatFbAiQyIV819/eYzgZqKJ4DtSoSiL5/H36YDGy7XoNucLHb1SFJjHkDQNYTs45J7Zs5d/ACh11xrHA5/cEnqxS4n/GRiboam9b3kwaQeeC1Ef6zWJcalGJTPBQC1m0z3BLSm93gGEAQ==;
	20:pWaBmVcQmH+Z8wb4taNiGPTKZrf9b8fnXvKuMsklGMHtJQv4VVyH2FaFLJxhOIjZS9cbKSexgu3bDs51g+ZkYdCJohO+USeVXnXh84CXZdHqLUgABsxNePMoL10GOOPSCdvY+nE/hr3eldoRZziuKLTWt+Qdn554XM1mOxlyQCIpQv/FqLUjnlj9IYtIgTZKNwjGk4lyD9hgZQkKoYfyt6IrN7DxEUn51I1UtBH/pMfT2bjGeUREFL0Uw/t3I9Ow
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Mar 2017 15:12:25.0937
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR12MB1602
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - March 2, 2017, 3:12 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encyrpted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |   14 +++++++++++++-
 arch/x86/mm/mem_encrypt.c          |    3 +++
 include/linux/mem_encrypt.h        |    6 ++++++
 3 files changed, 22 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 7, 2017, 11:19 a.m.</div>
<pre class="content">
On Thu, Mar 02, 2017 at 10:12:20AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encyrpted Virtualization (SEV). This initial</span>
<span class="quote">&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Btw,

you need to add your Signed-off-by here after Tom&#39;s to denote that
you&#39;re handing that patch forward.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 8, 2017, 3:06 p.m.</div>
<pre class="content">
On Thu, Mar 02, 2017 at 10:12:20AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encyrpted Virtualization (SEV). This initial</span>
<span class="quote">&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |   14 +++++++++++++-</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          |    3 +++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        |    6 ++++++</span>
<span class="quote">&gt;  3 files changed, 22 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 1fd5426..9799835 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -20,10 +20,16 @@</span>
<span class="quote">&gt;  #ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern unsigned long sme_me_mask;</span>
<span class="quote">&gt; +extern unsigned int sev_enabled;</span>

So there&#39;s a function name sev_enabled() and an int sev_enabled too.

It looks to me like you want to call the function &quot;sev_enable()&quot; -
similar to sme_enable(), convert it to C code - i.e., I don&#39;t see what
would speak against it - and rename that sev_enc_bit to sev_enabled and
use it everywhere when testing SEV status.
<span class="quote">
&gt;  static inline bool sme_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return (sme_me_mask) ? true : false;</span>
<span class="quote">&gt; +	return (sme_me_mask &amp;&amp; !sev_enabled) ? true : false;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline bool sev_active(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return (sme_me_mask &amp;&amp; sev_enabled) ? true : false;</span>

Then, those read strange: like SME and SEV are mutually exclusive. Why?
I might have an idea but I&#39;d like for you to confirm it :-)

Then, you&#39;re calling sev_enabled in startup_32() but we can enter
in arch/x86/boot/compressed/head_64.S::startup_64() too, when we&#39;re
loaded by a 64-bit bootloader, which would then theoretically bypass
sev_enabled().
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 1fd5426..9799835 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -20,10 +20,16 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 extern unsigned long sme_me_mask;
<span class="p_add">+extern unsigned int sev_enabled;</span>
 
 static inline bool sme_active(void)
 {
<span class="p_del">-	return (sme_me_mask) ? true : false;</span>
<span class="p_add">+	return (sme_me_mask &amp;&amp; !sev_enabled) ? true : false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (sme_me_mask &amp;&amp; sev_enabled) ? true : false;</span>
 }
 
 static inline u64 sme_dma_mask(void)
<span class="p_chunk">@@ -53,6 +59,7 @@</span> <span class="p_context"> void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
 
 #ifndef sme_me_mask
 #define sme_me_mask	0UL
<span class="p_add">+#define sev_enabled	0</span>
 
 static inline bool sme_active(void)
 {
<span class="p_chunk">@@ -64,6 +71,11 @@</span> <span class="p_context"> static inline u64 sme_dma_mask(void)</span>
 	return 0ULL;
 }
 
<span class="p_add">+static inline bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline int set_memory_encrypted(unsigned long vaddr, int numpages)
 {
 	return 0;
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index c5062e1..090419b 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -34,6 +34,9 @@</span> <span class="p_context"> void __init __early_pgtable_flush(void);</span>
 unsigned long sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+unsigned int sev_enabled __section(.data) = 0;</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_enabled);</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 913cf80..4b47c73 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -23,6 +23,7 @@</span> <span class="p_context"></span>
 
 #ifndef sme_me_mask
 #define sme_me_mask	0UL
<span class="p_add">+#define sev_enabled	0</span>
 
 static inline bool sme_active(void)
 {
<span class="p_chunk">@@ -34,6 +35,11 @@</span> <span class="p_context"> static inline u64 sme_dma_mask(void)</span>
 	return 0ULL;
 }
 
<span class="p_add">+static inline bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline int set_memory_encrypted(unsigned long vaddr, int numpages)
 {
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



