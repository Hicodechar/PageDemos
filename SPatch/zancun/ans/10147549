
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,8/8] x86: Use IBRS for firmware update path - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,8/8] x86: Use IBRS for firmware update path</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7886">tim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 6, 2018, 2:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;cda39b693d0fec41bd65aa17e7d7ea6bcbf48cc0.1515204614.git.tim.c.chen@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10147549/mbox/"
   >mbox</a>
|
   <a href="/patch/10147549/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10147549/">/patch/10147549/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1874C60134 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 02:33:18 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B634F28827
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 02:33:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AA986288F1; Sat,  6 Jan 2018 02:33:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 202E128827
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 02:33:17 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753588AbeAFCdN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 5 Jan 2018 21:33:13 -0500
Received: from mga03.intel.com ([134.134.136.65]:10718 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753734AbeAFCdJ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 5 Jan 2018 21:33:09 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga005.jf.intel.com ([10.7.209.41])
	by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	05 Jan 2018 18:33:08 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.46,320,1511856000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;190375411&quot;
Received: from skl-02.jf.intel.com ([10.54.74.43])
	by orsmga005.jf.intel.com with ESMTP; 05 Jan 2018 18:33:08 -0800
From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;
Cc: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	Arjan Van De Ven &lt;arjan.van.de.ven@intel.com&gt;,
	David Woodhouse &lt;dwmw@amazon.co.uk&gt;, linux-kernel@vger.kernel.org
Subject: [PATCH v2 8/8] x86: Use IBRS for firmware update path
Date: Fri,  5 Jan 2018 18:12:23 -0800
Message-Id: &lt;cda39b693d0fec41bd65aa17e7d7ea6bcbf48cc0.1515204614.git.tim.c.chen@linux.intel.com&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;cover.1515204614.git.tim.c.chen@linux.intel.com&gt;
References: &lt;cover.1515204614.git.tim.c.chen@linux.intel.com&gt;
In-Reply-To: &lt;cover.1515204614.git.tim.c.chen@linux.intel.com&gt;
References: &lt;cover.1515204614.git.tim.c.chen@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 6, 2018, 2:12 a.m.</div>
<pre class="content">
<span class="from">From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>

We are impervious to the indirect branch prediction attack with retpoline
but firmware won&#39;t be, so we still need to set IBRS to protect
firmware code execution when calling into firmware at runtime.
<span class="signed-off-by">
Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="signed-off-by">Signed-off-by: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
---
 arch/x86/include/asm/apm.h       |  6 ++++++
 arch/x86/include/asm/efi.h       | 17 +++++++++++++--
 arch/x86/include/asm/spec_ctrl.h |  3 +++
 arch/x86/kernel/cpu/spec_ctrl.c  | 45 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 69 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 6, 2018, 8:55 a.m.</div>
<pre class="content">
On Fri, Jan 05, 2018 at 06:12:23PM -0800, Tim Chen wrote:
<span class="quote">&gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We are impervious to the indirect branch prediction attack with retpoline</span>
<span class="quote">&gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; Signed-off-by: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/apm.h       |  6 ++++++</span>
<span class="quote">&gt;  arch/x86/include/asm/efi.h       | 17 +++++++++++++--</span>
<span class="quote">&gt;  arch/x86/include/asm/spec_ctrl.h |  3 +++</span>
<span class="quote">&gt;  arch/x86/kernel/cpu/spec_ctrl.c  | 45 ++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  4 files changed, 69 insertions(+), 2 deletions(-)</span>

The files that Alan pointed out as being missed in the last version of
this patch don&#39;t seem to be updated here either :(

thanks,

greg k-h
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 6, 2018, 8:57 a.m.</div>
<pre class="content">
On Fri, Jan 05, 2018 at 06:12:23PM -0800, Tim Chen wrote:
<span class="quote">&gt; +void unprotected_firmware_begin(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (firmware_ibrs) {</span>
<span class="quote">&gt; +		__disable_indirect_speculation();</span>
<span class="quote">&gt; +	} else {</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * rmb prevent unwanted speculation when we</span>
<span class="quote">&gt; +		 * are setting IBRS</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		rmb();</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(unprotected_firmware_begin);</span>

What modules need these functions?

And again, if they are needed, we need a better naming scheme for them.
Prefix them all with &quot;firmware_&quot; perhaps to make it a bit nicer?

thanks,

greg k-h
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/apm.h b/arch/x86/include/asm/apm.h</span>
<span class="p_header">index 4d4015d..fbf4212 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/apm.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/apm.h</span>
<span class="p_chunk">@@ -7,6 +7,8 @@</span> <span class="p_context"></span>
 #ifndef _ASM_X86_MACH_DEFAULT_APM_H
 #define _ASM_X86_MACH_DEFAULT_APM_H
 
<span class="p_add">+#include &lt;asm/spec_ctrl.h&gt;</span>
<span class="p_add">+</span>
 #ifdef APM_ZERO_SEGS
 #	define APM_DO_ZERO_SEGS \
 		&quot;pushl %%ds\n\t&quot; \
<span class="p_chunk">@@ -28,6 +30,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 					u32 *eax, u32 *ebx, u32 *ecx,
 					u32 *edx, u32 *esi)
 {
<span class="p_add">+	unprotected_firmware_begin();</span>
 	/*
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
<span class="p_chunk">@@ -44,6 +47,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 		  &quot;=S&quot; (*esi)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	unprotected_firmware_end();</span>
 }
 
 static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,
<span class="p_chunk">@@ -52,6 +56,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 	int	cx, dx, si;
 	bool	error;
 
<span class="p_add">+	unprotected_firmware_begin();</span>
 	/*
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
<span class="p_chunk">@@ -68,6 +73,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 		  &quot;=S&quot; (si)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	unprotected_firmware_end();</span>
 	return error;
 }
 
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 85f6ccb..439bd55 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/processor-flags.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_add">+#include &lt;asm/spec_ctrl.h&gt;</span>
 
 /*
  * We map the EFI regions needed for runtime services non-contiguously,
<span class="p_chunk">@@ -36,8 +37,18 @@</span> <span class="p_context"></span>
 
 extern asmlinkage unsigned long efi_call_phys(void *, ...);
 
<span class="p_del">-#define arch_efi_call_virt_setup()	kernel_fpu_begin()</span>
<span class="p_del">-#define arch_efi_call_virt_teardown()	kernel_fpu_end()</span>
<span class="p_add">+#define arch_efi_call_virt_setup()					\</span>
<span class="p_add">+{(									\</span>
<span class="p_add">+	kernel_fpu_begin();						\</span>
<span class="p_add">+	unprotected_firmware_begin();					\</span>
<span class="p_add">+)}</span>
<span class="p_add">+</span>
<span class="p_add">+#define arch_efi_call_virt_teardown()					\</span>
<span class="p_add">+{(									\</span>
<span class="p_add">+	unprotected_firmware_end();					\</span>
<span class="p_add">+	kernel_fpu_end();						\</span>
<span class="p_add">+)}</span>
<span class="p_add">+</span>
 
 /*
  * Wrap all the virtual calls in a way that forces the parameters on the stack.
<span class="p_chunk">@@ -73,6 +84,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	efi_sync_low_kernel_mappings();					\
 	preempt_disable();						\
 	__kernel_fpu_begin();						\
<span class="p_add">+	unprotected_firmware_begin();					\</span>
 									\
 	if (efi_scratch.use_pgd) {					\
 		efi_scratch.prev_cr3 = __read_cr3();			\
<span class="p_chunk">@@ -91,6 +103,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 		__flush_tlb_all();					\
 	}								\
 									\
<span class="p_add">+	unprotected_firmware_end();					\</span>
 	__kernel_fpu_end();						\
 	preempt_enable();						\
 })
<span class="p_header">diff --git a/arch/x86/include/asm/spec_ctrl.h b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_header">index be08ae7..ce21d24 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_chunk">@@ -11,6 +11,9 @@</span> <span class="p_context"> void scan_spec_ctrl_feature(struct cpuinfo_x86 *c);</span>
 void rescan_spec_ctrl_feature(struct cpuinfo_x86 *c);
 bool ibrs_inuse(void);
 
<span class="p_add">+void unprotected_firmware_begin(void);</span>
<span class="p_add">+void unprotected_firmware_end(void);</span>
<span class="p_add">+</span>
 extern unsigned int dynamic_ibrs;
 
 static inline void __disable_indirect_speculation(void)
<span class="p_header">diff --git a/arch/x86/kernel/cpu/spec_ctrl.c b/arch/x86/kernel/cpu/spec_ctrl.c</span>
<span class="p_header">index 076c470..59bf561 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/spec_ctrl.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/spec_ctrl.c</span>
<span class="p_chunk">@@ -10,6 +10,10 @@</span> <span class="p_context"></span>
 unsigned int dynamic_ibrs __read_mostly;
 EXPORT_SYMBOL_GPL(dynamic_ibrs);
 
<span class="p_add">+#if defined(RETPOLINE)</span>
<span class="p_add">+static unsigned int firmware_ibrs __read_mostly;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 enum {
 	IBRS_DISABLED,
 	/* in host kernel, disabled in guest and userland */
<span class="p_chunk">@@ -31,6 +35,8 @@</span> <span class="p_context"> static inline void set_ibrs_feature(void)</span>
 		dynamic_ibrs = 1;
 		ibrs_enabled = IBRS_ENABLED;
 	}
<span class="p_add">+#else</span>
<span class="p_add">+	firmware_ibrs = 1;</span>
 #endif
 }
 
<span class="p_chunk">@@ -162,3 +168,42 @@</span> <span class="p_context"> static int __init debugfs_spec_ctrl(void)</span>
 	return 0;
 }
 late_initcall(debugfs_spec_ctrl);
<span class="p_add">+</span>
<span class="p_add">+#if defined(RETPOLINE)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * RETPOLINE does not protect against indirect speculation</span>
<span class="p_add">+ * in firmware code.  Enable IBRS to protect firmware execution.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void unprotected_firmware_begin(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (firmware_ibrs) {</span>
<span class="p_add">+		__disable_indirect_speculation();</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * rmb prevent unwanted speculation when we</span>
<span class="p_add">+		 * are setting IBRS</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		rmb();</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(unprotected_firmware_begin);</span>
<span class="p_add">+</span>
<span class="p_add">+void unprotected_firmware_end(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (firmware_ibrs) {</span>
<span class="p_add">+		__enable_indirect_speculation();</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(unprotected_firmware_end);</span>
<span class="p_add">+</span>
<span class="p_add">+#else</span>
<span class="p_add">+void unprotected_firmware_begin(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(unprotected_firmware_begin);</span>
<span class="p_add">+</span>
<span class="p_add">+void unprotected_firmware_end(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(unprotected_firmware_end);</span>
<span class="p_add">+#endif</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



