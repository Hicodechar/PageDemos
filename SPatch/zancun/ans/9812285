
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,24/38] x86, swiotlb: Add memory encryption support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,24/38] x86, swiotlb: Add memory encryption support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 27, 2017, 3 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170627150027.15908.70421.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9812285/mbox/"
   >mbox</a>
|
   <a href="/patch/9812285/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9812285/">/patch/9812285/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D7DA560351 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:05:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C9D3E28645
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:05:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BE088286AE; Tue, 27 Jun 2017 15:05:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D407028645
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 15:05:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752785AbdF0PFC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 27 Jun 2017 11:05:02 -0400
Received: from mail-dm3nam03on0040.outbound.protection.outlook.com
	([104.47.41.40]:51552
	&quot;EHLO NAM03-DM3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752620AbdF0PAf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 27 Jun 2017 11:00:35 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=UvmsxGsmigxJvVqDA+y3G3zFQc5sTTorU0kKlJ5j+Z8=;
	b=SkKdfFgiaR6qR7G/fYwHf5/B2pZjE3XT4sPMw1+PsFxV6Nrc4jGEtRD7nm+c6KB75mJmHIjAdi1upfpZloRCwprm6pmmJNZ8TwXR+FAEkjbtCPguzUOrcAvvV93AFzMfgZxs7+qflQm6zrbrxXGqR0fD92XD2M8ffL/Df00SWZI=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	DM5PR12MB1148.namprd12.prod.outlook.com (10.168.236.143) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1199.15; Tue, 27 Jun 2017 15:00:30 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v8 24/38] x86, swiotlb: Add memory encryption support
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, xen-devel@lists.xen.org,
	linux-mm@kvack.org, iommu@lists.linux-foundation.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Date: Tue, 27 Jun 2017 10:00:27 -0500
Message-ID: &lt;20170627150027.15908.70421.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170627145607.15908.26571.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170627145607.15908.26571.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM5PR17CA0048.namprd17.prod.outlook.com (10.173.128.162)
	To
	DM5PR12MB1148.namprd12.prod.outlook.com (10.168.236.143)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 95f2a11d-b0df-4a97-27ba-08d4bd6d4144
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506067)(300135500095);
	SRVR:DM5PR12MB1148; 
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	3:wtCvu8whZxw56eTh/TzqtE9WCAOO9qaqWJJAQXTkRVcCbqSn7zkS/1Ew9kjyBjN3E1pbsQbalQBFjHALpkDb6hFzef8StazRCpXgFzTgnBflvp7x7mLF9z52zL8Y5POD6fjTG/y+i9kZ8g6gLSkA0nM+HN4oyD6FNkIii76RcXgCnj4uykKeFsuoHiLRuIEw3oRk4PsE1TqIxUnm/UBnqnU2dDA6xUPbdl1DJyYMdaBoiAVf1mUiQeW1ptITLvkqz/fo5U7wvIdOHV/JmJMGHf1goAZB7tFTLFJrQEKnsPFg68Ji8yfehbSeOy771C19G5EurBlhH+EbOFUKQ7XMUkO8Gi1e0nY/4vAgCkbXftdk5waRBuEsH17MS2X6fWSwkmZUqSBeEU1i+WMWzR8o+LwS+f7iepriJBXmBBR8jAy8w1YvL+Pq/jGUoTFA5RKhkHm8VZJAMkQHDs1T4a1RE6zYQmS6DYa2WAe8N3gqNvc4+aRqNCogfMnCVoNoaklPmik1/vp+cbNdegFILVeCeUCvrLV7+rhGh4DlN8pmVvinwDMd9vmG4TGXu+93GIPuph8OL/1tpD3bNAgJK6ZyjTWmVlPacmI84ucbz7pczAHalt3zODQ6wdYl1iJjbjt0VS5ZL5JISZomMeyQZ33Tw9uc1vuRIDKKLdlZNLPww3sZWu8iHB+V1QAz4P3zBvr7l1LfVT5xA1OlencyYFZ6bGjTJHyXm2Ubb444QpGfaADdMZ67tGekOnPJSg89VkIJ8U1DMvSd6YrCxHmP0vT7FQ==
X-MS-TrafficTypeDiagnostic: DM5PR12MB1148:
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	25:Xf3wyuAeRSws265683VthEVo3r1bhOT64g3u3+MYMbCKYYRergyd5at1r3EHpM1mCtfZSGwcBWC4/kij7K3ZhwSVwgmSiVMKevZMdAOMN+0PqP1daKMXARTnMjVUzOT2S8sGs0gaWiqJnl6GKQAGuAnwne2+QmC070dIws04iq28ZEsQsbfstQLRSLbirLOUt0wrwgFR9Ay7jnl/AxQhSgH0+DQH2QpD2khZA1C1eQyz02avX6o5L+BF63HBDJlWMcfirlpKRxdXxc4m6CJqDli2JXzU3g0bOwA+BS0wuVjts/Jr2WAW66WSqyIKv7kov46/D5RugHSZdyrCpxnZm8Zh4vsc2//VYymanhRQEIyYhCVa/c3Iz2XrH31gy8wY7nmIRWZJKQvk3dSCJstdBcV+SsZlGongurc2erMD2AVe3GEbRlevWvPpTot2MgpRbQvJr17IFkKkZeOlC8dhcHtnziqOzolK8PwDjn4GD8BSM1TZIN1vmhdqTpggRGdimMi05sVSlBQpor/tk/u/6sRWZIGX4jNU4LYlp+dUEBHmzdpwtBJ1CGja7wHmPQ7ggvTzhjc+sKGHOzm3KLr3jj9HKoYVsYO0N49kEz6Xr1MgCoSaiFw430YQ6P5+RK/vif+FSHwxKXtf78o8HVGDlX6ujREjvArONEC0ZL8T0gn6g927sBOEzjO78w1BR1U3681UURmgfYD9gpT2geV7nhzfbO2H08UNrX0CgCHCfBoSqWouVlONSGamas7zY9rWHUmdtjzpvC3gXFsuJe5GViPQOVyn5G0eMqUSBLtWp3HifXF/10FQULxCbOpNipq+5X6bP72meAtHQ0TWbgGULImoNwv/pAHng3p5u6fGTnj+G/dbd4Ok0YNLbWKXmQbFXZr4N1GsHzNFrsoWb8ZFa1/RGX/WYi8uOBqzYjOxF
	tU=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	31:javw/CmOWtMRnEsKwPXycLwFpB6htwx24CnFgZmyz5vOc4t+FfXxYhZPW85AM5scnEPq+UvSUQJZKxO9C5Ve7RGVnEILfsuumo7IvDXsGJsMZH847Hncnnq9fElaJEeI8LNjYolOIH3vp51W5jQhPFEZDc2oMnfdldv2KX+Y2wGVvD0WIS93fl/NTa0iuasyKUS/5iaxfsbwYNC21/ax9dLwUtfDP4oP5oqxf0vQ4Ckzmm4SSfiyYjElN6F3A+ILRyw4jcv60Z0MT5AvYAx/s+lmEmL/Lj76A7jSxdPbUU/tmV+v7rnzyzm03XzRuoPutW79Jk5PPVxYhPIbA7EYVzIfuFjAVF64nlFgLdNYZZRcoeRf00uXZwQqHV9HDaWjk+h404Noi0I+SMJi4zbVv73MmgjUSZ//Q+fthKIMULU2N2G7ImiF4eRoGTwAMaY4aOg5pBI/xUPlZDVrXpfYSC52atBloedK8APei8wFBwXYJki/WGANsumB3r8jBKcXPlP/GFN79Pmv2cdGB97tG83h4O9cFoGEs0M7m+IiCY5v4n6IdgxoHyiCbslRrJyr5Hthl3H2xd4LzjEDDLrnHFCRz2AfTPiRLkNYDvjl5SqQUJsXLj1/2cnQsGsG7fwrJ3h9ARB6k+leN9xeYb5Dzh9iYJsYLFrRbf1pW3aXEMo=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	20:PKvVjMpUGEkFczOVrppx1AVid3tnTSPaeo7u1fp6P2w38zn3oyLkJkC+F8BinFwWtH10qn0vSBYWUBd9wX4Sjdn91zwsraBeLlzR6IHEA2mrMKEfW4VfjITZ0G5LnOIJJHoaT8wj2aCmCiX3ibaLg3CHZzuP932Y7JspKD/R/TyJojEiZ603kmDgqi+j+SE0d4RdUUNYg9pnG++I61jaQm+Z554L5wmTkwv/mFEuOAMt86RNPOxqVtVGFB4YYQGZhNlrXy9Bovt3vrirkHJfSFB0A4yJ9eFgN3WFGC3xwpUnrmVJbTY4+pPvv7jf6wx1iWwnS9umY+77jiLAc/iZJwh2BNrsmruNP8+iikPeLBZhCQAZShHYBiuJMccC7ukNEyPC36N+JmLY1E6XsgWsTZVilv6QH2pA2JAIDKWKLXAuOmLjxUYhcjCgjuyr+5uNxUglFs1eW4JHB30ft8pQd6RSqnbvxRGdG1DpCvINH4KALxYpLX8MC0qRDHLjPTjl
X-Microsoft-Antispam-PRVS: &lt;DM5PR12MB1148930DE27EE600C0C32641ECDC0@DM5PR12MB1148.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(133145235818549)(236129657087228)(767451399110)(167848164394848);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(5005006)(8121501046)(100000703101)(100105400095)(93006095)(93001095)(3002001)(10201501046)(6055026)(6041248)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(20161123558100)(20161123562025)(20161123555025)(20161123564025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:DM5PR12MB1148; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:DM5PR12MB1148; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ4OzQ6Z29XUlZ2T0EwVndUZXF5RjNGK1pXa1l6ZTRh?=
	=?utf-8?B?RDRmTzQxMXYwdWVnUzFDUk5ZS0tpSWQvNHFQSXFkSVRYem1oWnRyb3BpMTdR?=
	=?utf-8?B?c2xOWTR1NFZXd2NtMVcyRWtRNkhrQ282RlJ4YkJUK2JLajJiZlNLRVExTDk3?=
	=?utf-8?B?UXNQRmRCSWJTVnRjS3lDUG84YzRkSVp4d2RMc1F6VGpoQUNkMG80cXhSRlBC?=
	=?utf-8?B?MDE0MExvYXcxZEs3M1lUV0NNSzhkV2l2OXVUT3lJYnQ3YzVzRUxWbEJqUmZZ?=
	=?utf-8?B?cDQyWmpBMEVQTXpvZDd5TWFFYWF4UEJYejNWWUdNbHFCbXp0WVZKYWFFTk9D?=
	=?utf-8?B?dkJ5aVZjb2t4V0RFM1QwT1Jxd1VSWFRCWjVCOThFTnp2K1h2OGNuOXBGWTNw?=
	=?utf-8?B?OGxoV1JpQUFITVBadVRFWnlLQXdRWmYxd0FRMGdQekVZT1pKSEk1ZjR4SnZO?=
	=?utf-8?B?UVJ2MmNQOWducGdrQTA4bHlNQzRTQ3hhZjdNV3JXenVQaWRPeE1JVC93UkE2?=
	=?utf-8?B?TndiemhJUmhSZ3NjMEpNODlxTUh1R0cxRS9NUWVkOW9xODkxWU1wci9VMkI0?=
	=?utf-8?B?VU01MUg0YlNoUmIyYksvK2d6MEFMUW50T0tOT0lOSVR3MDBhWi9tWXMxYzJX?=
	=?utf-8?B?VkhBblNia3dGQUVCWUZ6SDgwNUhwK2ZlcG41ZTY5TWxLNFFxdlFscGM1V2Zw?=
	=?utf-8?B?SzU0N0d5V2ZWc1VmcGNlR1dhWGdUNmlyYk5ydUl3SXBxcGJ5WktqUEFnR21K?=
	=?utf-8?B?UkVrQW54TTlEMEJiZ1JNbVVHNUFOOWQ0VmVUb2xrMEQ3UlBacG1pUDl1bHVV?=
	=?utf-8?B?VlhoUnY4TjZSUzZNVGx5YXAwUU9XaktDZ0h6YkhUN3NrTzh5YXF3TmYySXFJ?=
	=?utf-8?B?WmFnUXJ4eGhBWUlGUnlaQmhWMFNmdFl1YThrUURCZHNqNndNa283VTRrMGxn?=
	=?utf-8?B?RlVOaVhaQTh6NWNYRC9TM2syR0pNR0JUL09WUnNMdFMrRFhvOS9IcUV3dm9p?=
	=?utf-8?B?dGtoSFpOU211eVFVUVBiLys5OGRuR252RmIzWUc5d1ZKVENBM2grb0VEL1Zk?=
	=?utf-8?B?MzlvNHQ5ZjEyR1FQM2Y3b0F1V291eURCL3RaZUo5UzQvYnVhN3NsMHc5MldM?=
	=?utf-8?B?ZW9nb1IwN2VIQzhZYWxJUFhBNktoVWJRakZOaTFGdi9hVkhzcDhlU1E1eEI4?=
	=?utf-8?B?OVh5aUNYYnBseEFTY0FVL29ZVVZzMmVXbnZvWXpzUk1DZ0wyeEMyUzJxR2Vk?=
	=?utf-8?B?UW94YVE1WFoydHk1N09kbFJ0Q1JNNkd2NmVYQnlaYWo0WWl3SUVRK3d1WG1s?=
	=?utf-8?B?M2xVbkJ0dktOYVV6dTJkeHpYbmxJZWtVTDl4SU1qejZLWW5lRFhZa2oreEJG?=
	=?utf-8?B?UnVCN0JOdWYyU0piRUtQSUN3KzVmTGNDMjV3K0JXdGxESDN6WGNJWG4xK0pZ?=
	=?utf-8?B?K3kzeFJUTER3dGV5ZGlGaEx2NGlFNzZ5V0kxVTdXZVhIUE1LdEk3dWh6bnY4?=
	=?utf-8?B?RkU3ZlVLQmxTQWdubnltYmk4S3NDcDArWCtxb1pVU01wc1ZaNTFud3lpbWtw?=
	=?utf-8?B?Tm85NElkZVFveUNWc2lqMVJXMXBMM2E1eTluQUVYY294WHBGS2hCbGkvNDFT?=
	=?utf-8?B?MkMzc045THhDQ1dsV2ZsNThzOFZTc3ZrdGZQSkFKbzB0bmRNaUJtK3piRjJl?=
	=?utf-8?B?aFpQbExGN2lrcmIrUjlzN0pDRlhzQmtON3hOMDJpdWVDbnA1eUZsaXNjRGlp?=
	=?utf-8?Q?PjZQkBwympFYUaggPiZoE/9Vdsz2Dhyg/JIU=3D?=
X-Forefront-PRVS: 0351D213B3
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39840400002)(39860400002)(39410400002)(39450400003)(39400400002)(39850400002)(2950100002)(478600001)(6666003)(2906002)(6116002)(3846002)(53936002)(9686003)(7406005)(55016002)(83506001)(50466002)(110136004)(1076002)(305945005)(72206003)(230700001)(33646002)(7416002)(54906002)(54356999)(76176999)(50986999)(97746001)(4326008)(189998001)(7736002)(5660300001)(4001350100001)(103116003)(86362001)(8676002)(42186005)(23676002)(53416004)(25786009)(47776003)(81166006)(66066001)(6506006)(38730400002)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:DM5PR12MB1148;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ4OzIzOlIreW8vWUVMYlZlbnJLT2pmdnNmNzJyNXQz?=
	=?utf-8?B?MlZYV2JwaW1GMmFMTDhhS2QrNEk1NCt1NkorNjVLZUwrZGlnZHMxaWFoejQ5?=
	=?utf-8?B?ZlpGWHhkNjNnRnFiN0oyZ0FoWEZTR29SWmhNVDJXOEdRSWdDb080OG9tTXFh?=
	=?utf-8?B?SmF5WTJVWUQ1UE1qVTQ3SXFYZXZqN09odEs3dnVIT3hLR1h1YUw5NnlERVRr?=
	=?utf-8?B?alN4VlNtMzd6ZWlScktYeDJ4YzlaaXgyRWdRWG1vcFlueXZ4U2tsSHJ0WFJl?=
	=?utf-8?B?d3VDSU5qNFFvcTk5RitFUzZKdzBsWWpkazBaZ0syUjducFhtNGp3bytpZTYr?=
	=?utf-8?B?MkttMmJ3VHM2aFV6cjJidGlTTTJMMVVyUC96MEFLbkliQTdwazV1N3prQms3?=
	=?utf-8?B?RDF1T1IwazhJVzJsZHdNbFZQRmxrajR6bE90S29qNnozV3hQWVJ5WnpZT0t0?=
	=?utf-8?B?N0dRaUphSDVDT3M1WjZ5ei9BT2NtRUpjbXFZeGc2Q1RZaXJVVEcvTlI0aU5V?=
	=?utf-8?B?emJxK2VNa1VXYnYvWVhsVjQvTTlrZGt5bXloMkhsSWVmYmx1QmhnZmJMTEV1?=
	=?utf-8?B?aUoyNDIvRFhZdGRQZ3U2THk4NGhRRWRyYzhEV3VObGtTcFhGaiszM1lqZy9Q?=
	=?utf-8?B?SzRkZjI3RVRieThzUnBFTFhmNWVvNHBvbWtQdW1tK1M0NkR3T3Bmb0Fpd1E4?=
	=?utf-8?B?WVg0bEpnZTNTL01jNmxiZW5aSzFVTWpFbHp2YXdReDBCQ3pRanBBbkh4VEZ3?=
	=?utf-8?B?R2tTSk13akVMT0twWld6VFN6VmVKNUxLNUk4WHYvdDFtcVFkRlZ3Tk81NU9O?=
	=?utf-8?B?c2JlOFRrUzFRTGVlbE9yYTdNY0JCdGQ4RlBoMU0zeDRQN09kN2FOd0hCbGwx?=
	=?utf-8?B?MWJTSStIWkdsRll5RUZIajR0NmZzWWdjQnNNTURPQVYybVN1RHpLZy9xcHZ6?=
	=?utf-8?B?SWl6V0NEM0NGNVMySFY1bDJDSmVEZ1prVUFHekVCdjk5YjRMb2NsMVROWHRy?=
	=?utf-8?B?TC9uZ1NwT0d4RGlpYzhVSjRNeG90NE5ldnk1WE8zQTE1UmNVa3BTdWdJR05Y?=
	=?utf-8?B?U0hYZHNsZzNTM3dpVW1PK2R6dUxvVHdYQ25qSTRqOTFwMUVTNVlCcUw4U0c3?=
	=?utf-8?B?UitiOHlOT3B6Tk0rS25sbGlSMHh0OXJxSG1tTytZKzFrT3V6M0s0WUdUbVVw?=
	=?utf-8?B?VHRXTDJRZnhnc3JRV2I0ZEw5L1REQmtQa01pM0RNdy9NQUpuall0T25ZY2Ry?=
	=?utf-8?B?OUFkQXZMelNONXlsdE1jNVBXTkZvcjA0ZTR1ZGhDcll4RHFFSGpIaXdXQnV5?=
	=?utf-8?B?NTNCeTFSUFY0ZWovdkwvOWJnM0NlTkp1dUJDTW52T1YwQkEvWDExMWhBUzNo?=
	=?utf-8?B?NU9FNmptOGErTzNEZEhwdWpVOWN5dWxSY3kwaU5Ib2NENGN6Mlp3Y3JBM1B5?=
	=?utf-8?B?RzBpUEx1NDgvanEyU1R6Ti8rbDByQnhEdXpubGNxM0w1TWErZ29WanJKV1BE?=
	=?utf-8?B?b3lTUEFLNk5QNkpPSXVyUlBnYm1jSW13eXdyd091WVhWUE1sck10R0RYNzFE?=
	=?utf-8?B?RW41aXdZSWsxRGhVOC96eS9uMTE1R3dxVGYycHVUczBiNXphaUp6aDNLdkVG?=
	=?utf-8?B?NDJwbE9yL2VXZFhXUDVsQVpaYUpCcGVKTlI5VXpzaWp0a2h6M0FuZDFZTHdv?=
	=?utf-8?Q?+IeZcE7UQmVSbfVK5M=3D?=
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ4OzY6UU1FNE9PZlJuV0RBTndKRHVkTmplRnI5bnl3?=
	=?utf-8?B?aW9IdENHdHJqa3EzVTlyZGJvUWhBTGdWZWh2M3JaVVE3ZTREZVdQdXloMUFX?=
	=?utf-8?B?ZFNiSGhLdlFlNktOVVljRDcyN1ZVS0l2a0hpVkM3djFLMjRnNWY4VVg4RUx5?=
	=?utf-8?B?Y05vejk4eEJpV01wQjMza0xuMUhEMlUxc0RoTzgwTXA5ZVZ3MldtOTNnQjBo?=
	=?utf-8?B?ZDFoM3lUOXBvNXNsQkZ1MGM1OW8xTTFBREJ4b2svdUpDbXhhWjg3TFovVGt0?=
	=?utf-8?B?a0J3aXg1M2lCRFVVejZnOFZtTmhVQnF3K25YR24rTHlwSVRrSlc3bU83dmF4?=
	=?utf-8?B?elQ4b0d3elpVT0VaQnlwVllscFZzNWdydkpLWXVBbHo5bm40Z3BGOURkTFAw?=
	=?utf-8?B?Y0pOd3JpcCtpUUt2M1hsc2pMQXRVUG1LZUx6dHRzWGZpWXQ1TTZmSHJxYzE2?=
	=?utf-8?B?SU1ndGZyTzdXNENia0lRdldpTjdYVjZHZWFEbzVmQ3ZDZm1qOVJsUEdxcWRC?=
	=?utf-8?B?aGlHNnFMdDNNMFA4WjJ0STdXYXI3Q1hOWFFHREIyMkRSd0ZubkJ0T3hrZndY?=
	=?utf-8?B?UUFLU1ZwTTVOTElUaXIwZDN6amdocFQ3dGJQc0w4MUFKUkZ3RlNvTU42RktX?=
	=?utf-8?B?WXowMGZ1ZlRram80TlpaYnBNK0VQelJJYm9SdnIzdk9pSlBtUDJTRldzdUo0?=
	=?utf-8?B?WGZKd2c3SnE2cjFGU2tENG1nM3l1c0NtVHJnS28rNjRtalZzczRMbVJiU1dS?=
	=?utf-8?B?b0RhWVFtNVNCcllnQUxrT2dnVUd4UDhOR0VSanpnRU5RWnpyMzNVb0RHSDlv?=
	=?utf-8?B?Vk5hNldQUGMwWlgwcmhrSEcrTkxJSzlJNEF4bXVmQ3NCN09US0pOeHNoMCt3?=
	=?utf-8?B?eDBReEhkTmxFSnNQcFowa21lNGoybVY4QmdXZkZPQmlFTEpQeFkrZXpPNnFn?=
	=?utf-8?B?WlFrcjVzWndKcmR0Q0krTmR1cDV5QVBxd1pOQlZsbDJZL0tZVDNxOWh3U3dz?=
	=?utf-8?B?MlQ3K0tSUU9USEVob1BSUG9PUXdSVDdBZ3Z4bWQ3bFdBWk5QSWI0REEyTk14?=
	=?utf-8?B?RklsMFRLOFZWT05JQ0FLYVEvbkZGQzdWdnRkZFRvNUsvbWxBUGFSVFBwcU8y?=
	=?utf-8?B?c2dQdE9oenkyd2NZR2ppWi9vWmM5ZFlZSDE2TTdCU3pyUnp3MGJuTG5OZVVO?=
	=?utf-8?B?WjZTd3FxTE0wUklpNVVTREVhQ201VFVSYmY5Qm04cjBhRDVJczR1ZjRvTlJ3?=
	=?utf-8?B?RkJnK0YzVTU2ZVJaeUJBSzFRN2tNSTltTEdaM1pOSkppRDVtNmF3WE5VZGdz?=
	=?utf-8?B?dkYzaEVmWTY1cW84MjFqVGYvdGR5QjFqaUMrbjVpTjZ0TlU4N21OUmN0cTVG?=
	=?utf-8?Q?Fe6tVXc?=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	5:ZeVqlFdvrfexH2JfMaDP+uTE0kNbsOOgwo+xnhzTBINylPzON0cZc/r9qFEHt4+4zLR5wpyv3daReviEs0lusSG6FwExJo+d0ZDFw/CNrBkFFFijObtlHoi1GUQXIgoFaLHrMTTuPfOfQZ1NLT7I7YFGVmjCeUY4JIeJtqKrwu98aeIrTd9Z/XTz2N6PsDLdhFO+qRpXGMCJyb7KdLidknLQj+SAc0SyTha+L+itebW4fj3nt8eFRehGiHIRmoI8RHF5VCAZ4PCa6Uvdj3aFv3VJG6TgFA7/POAMtK+yPxVA6DKwGzIc5xylaSsDQIpaF4XZfDoegljiZjDK+dXEoWxPYqrFLVLAp7izSm5uA0u5pC+k1DC/JQRIVyE9/YuP/VhNm/SwyOEksXCe4aH/xFbA9t1+TNVarOfZ1IeWkFFD83iacXMtvNMDvlkiND11yjTgCKFXVi5svhZCBy7NGmsmJ9iXejq++/wDRi8VGKDEzriy7fm9gX/QwApuOXwm;
	24:RAb2jiXyxI9QqN4zhbhxiI19+lFSJEeGZPWNQyMQLNzo+YKCVHQKSsqPejWai9vx0db1F2QbRgOoX1OtCl9zMYuARmXKJS3glZI2sPaPzgM=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	7:RWHrM8tpNd/tNQVIqOLpvQJoELHR/UX0TIGrXBb1/b6eLusdUXjSzcvdyGG3Llr3i8Cv2OmaAm5bv+jPitcOX2vbL3Lz9x7dr4H1dd33Zeu6uhhArsI9YmZUCnQD4S6VyRGx9xQ2w8jI90ULUDASBLAJzFv7PPWZPUE0DGjMKiJTH/yg7jDOTPbNhSXRv5Loh7yev9fGM69qFR9ZEA/veU4/D/kw45AVdhELzI+sHubHRI8nqB10tTb2Rk1GHeyHZvQCZxFt9IZs0/H5dLrON64pFV7vL9We9wgaVoGjX9YDa221GfogR9458XizZ5/pPMDgNExW3ghjlhgwskrO8kqKEG70hXjf7VS/WGn//T0oe5aU6MbjofHNVDrDpnBzkiLK9iHlNZVQpwDXQHSHBrlIWwSuRvZKC/gsL3C2Ipfcg7Sc5bsVahc6ZcCSXlZs1H32cy9c6jDV3d1q0kYU+ygolufV+m+Hfv3Ltyq2T67PksN69SIX/ozbzXy/tLa0RmNpdx0MmfgMQi+GqONSl4Y3WaKIZ6NdiEI/aBKz6c6q8+SUHZfgtUrqP7oEjl/0qtvMjt3rxwy+bllx4ZWA0PemVJMD0Z0jx+SZ+TswhO6FD7CEI8PSrDuLlrOBB/sLKrRVmiYDm4OUZ5lr6cjExCT4XEfY17nsGBpGpf+IXwDjCE2avS2wdYliamAYPOUQ73DPKLZaU7IiTqxo6EzRyV5fL7M5rvUlqmeKWNEULxWAusQ5bP52/hBrRBUW1S4U+Hj73SfWnXGQTjtZU+jh/n6S7m4fLvTuC4GiD564F3M=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1148;
	20:LHKu0QZItmSmAXDpiW6JEHo8ygnq1i3HA2sYxBedXQL//dhtk81fL9lmtbLsDYCUGzxTVlBgLPppd3UGmMuQ56Yh1akATU6fIiadP1JbFlpMzEARTwfrOHgdT8PimMYbCTsYvq++BpgWMlS/LmN4f07VkJD3V6npmBso4XjHgzo8xNwcwN+EcKVUndVz7TAez/0AxCIOyUZA7l0BkDd0LfWrWlsNsdHK/a3GI1Wsx8MjrtE/mRjR6CQQb9MhfTxJ
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 27 Jun 2017 15:00:30.2028
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1148
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 27, 2017, 3 p.m.</div>
<pre class="content">
Since DMA addresses will effectively look like 48-bit addresses when the
memory encryption mask is set, SWIOTLB is needed if the DMA mask of the
device performing the DMA does not support 48-bits. SWIOTLB will be
initialized to create decrypted bounce buffers for use by these devices.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/dma-mapping.h |    5 ++-
 arch/x86/include/asm/mem_encrypt.h |    5 +++
 arch/x86/kernel/pci-dma.c          |   11 +++++--
 arch/x86/kernel/pci-nommu.c        |    2 +
 arch/x86/kernel/pci-swiotlb.c      |   15 +++++++++-
 arch/x86/mm/mem_encrypt.c          |   22 +++++++++++++++
 include/linux/swiotlb.h            |    1 +
 init/main.c                        |   10 +++++++
 lib/swiotlb.c                      |   54 +++++++++++++++++++++++++++++++-----
 9 files changed, 108 insertions(+), 17 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">index 08a0838..191f9a5 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/io.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #ifdef CONFIG_ISA
 # define ISA_DMA_BIT_MASK DMA_BIT_MASK(24)
<span class="p_chunk">@@ -62,12 +63,12 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 
 static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
 {
<span class="p_del">-	return paddr;</span>
<span class="p_add">+	return __sme_set(paddr);</span>
 }
 
 static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
 {
<span class="p_del">-	return daddr;</span>
<span class="p_add">+	return __sme_clr(daddr);</span>
 }
 #endif /* CONFIG_X86_DMA_REMAP */
 
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index ab1fe77..70e55f6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -34,6 +34,11 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 void __init sme_encrypt_kernel(void);
 void __init sme_enable(void);
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0UL
<span class="p_header">diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">index 3a216ec..72d96d4 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-dma.c</span>
<span class="p_chunk">@@ -93,9 +93,12 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (gfpflags_allow_blocking(flag)) {
 		page = dma_alloc_from_contiguous(dev, count, get_order(size),
 						 flag);
<span class="p_del">-		if (page &amp;&amp; page_to_phys(page) + size &gt; dma_mask) {</span>
<span class="p_del">-			dma_release_from_contiguous(dev, page, count);</span>
<span class="p_del">-			page = NULL;</span>
<span class="p_add">+		if (page) {</span>
<span class="p_add">+			addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+			if (addr + size &gt; dma_mask) {</span>
<span class="p_add">+				dma_release_from_contiguous(dev, page, count);</span>
<span class="p_add">+				page = NULL;</span>
<span class="p_add">+			}</span>
 		}
 	}
 	/* fallback */
<span class="p_chunk">@@ -104,7 +107,7 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (!page)
 		return NULL;
 
<span class="p_del">-	addr = page_to_phys(page);</span>
<span class="p_add">+	addr = phys_to_dma(dev, page_to_phys(page));</span>
 	if (addr + size &gt; dma_mask) {
 		__free_pages(page, get_order(size));
 
<span class="p_header">diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">index a88952e..98b576a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_chunk">@@ -30,7 +30,7 @@</span> <span class="p_context"> static dma_addr_t nommu_map_page(struct device *dev, struct page *page,</span>
 				 enum dma_data_direction dir,
 				 unsigned long attrs)
 {
<span class="p_del">-	dma_addr_t bus = page_to_phys(page) + offset;</span>
<span class="p_add">+	dma_addr_t bus = phys_to_dma(dev, page_to_phys(page)) + offset;</span>
 	WARN_ON(size == 0);
 	if (!check_addr(&quot;map_single&quot;, dev, bus, size))
 		return DMA_ERROR_CODE;
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index 1e23577..6770775 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -6,12 +6,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/swiotlb.h&gt;
 #include &lt;linux/bootmem.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/iommu.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;asm/dma.h&gt;
 #include &lt;asm/xen/swiotlb-xen.h&gt;
 #include &lt;asm/iommu_table.h&gt;
<span class="p_add">+</span>
 int swiotlb __read_mostly;
 
 void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
<span class="p_chunk">@@ -79,8 +81,8 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_override(void)</span>
 		  pci_swiotlb_late_init);
 
 /*
<span class="p_del">- * if 4GB or more detected (and iommu=off not set) return 1</span>
<span class="p_del">- * and set swiotlb to 1.</span>
<span class="p_add">+ * If 4GB or more detected (and iommu=off not set) or if SME is active</span>
<span class="p_add">+ * then set swiotlb to 1 and return 1.</span>
  */
 int __init pci_swiotlb_detect_4gb(void)
 {
<span class="p_chunk">@@ -89,6 +91,15 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_4gb(void)</span>
 	if (!no_iommu &amp;&amp; max_possible_pfn &gt; MAX_DMA32_PFN)
 		swiotlb = 1;
 #endif
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If SME is active then swiotlb will be set to 1 so that bounce</span>
<span class="p_add">+	 * buffers are allocated and used for devices that do not support</span>
<span class="p_add">+	 * the addressing range required for the encryption mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sme_active())</span>
<span class="p_add">+		swiotlb = 1;</span>
<span class="p_add">+</span>
 	return swiotlb;
 }
 IOMMU_INIT(pci_swiotlb_detect_4gb,
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 0843d02..a7400ec 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -13,11 +13,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/linkage.h&gt;
 #include &lt;linux/init.h&gt;
 #include &lt;linux/mm.h&gt;
<span class="p_add">+#include &lt;linux/dma-mapping.h&gt;</span>
<span class="p_add">+#include &lt;linux/swiotlb.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/bootparam.h&gt;
<span class="p_add">+#include &lt;asm/set_memory.h&gt;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -177,6 +180,25 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */</span>
<span class="p_add">+	swiotlb_update_mem_attributes();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	WARN(PAGE_ALIGN(size) != size,</span>
<span class="p_add">+	     &quot;size is not page-aligned (%#lx)\n&quot;, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make the SWIOTLB buffer area decrypted */</span>
<span class="p_add">+	set_memory_decrypted((unsigned long)vaddr, size &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void)
 {
 }
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 4ee479f..15e7160 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -35,6 +35,7 @@</span> <span class="p_context"> enum swiotlb_force {</span>
 extern unsigned long swiotlb_nr_tbl(void);
 unsigned long swiotlb_size_or_default(void);
 extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);
<span class="p_add">+extern void __init swiotlb_update_mem_attributes(void);</span>
 
 /*
  * Enumeration for sync targets
<span class="p_header">diff --git a/init/main.c b/init/main.c</span>
<span class="p_header">index df58a41..5013cbc 100644</span>
<span class="p_header">--- a/init/main.c</span>
<span class="p_header">+++ b/init/main.c</span>
<span class="p_chunk">@@ -488,6 +488,8 @@</span> <span class="p_context"> void __init __weak thread_stack_cache_init(void)</span>
 }
 #endif
 
<span class="p_add">+void __init __weak mem_encrypt_init(void) { }</span>
<span class="p_add">+</span>
 /*
  * Set up kernel memory allocators
  */
<span class="p_chunk">@@ -640,6 +642,14 @@</span> <span class="p_context"> asmlinkage __visible void __init start_kernel(void)</span>
 	 */
 	locking_selftest();
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This needs to be called before any devices perform DMA</span>
<span class="p_add">+	 * operations that might use the SWIOTLB bounce buffers. It will</span>
<span class="p_add">+	 * mark the bounce buffers as decrypted so that their usage will</span>
<span class="p_add">+	 * not cause &quot;plain-text&quot; data to be decrypted when accessed.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mem_encrypt_init();</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;
 	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index a8d74a7..04ac91a 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/gfp.h&gt;
 #include &lt;linux/scatterlist.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/io.h&gt;
 #include &lt;asm/dma.h&gt;
<span class="p_chunk">@@ -155,6 +156,15 @@</span> <span class="p_context"> unsigned long swiotlb_size_or_default(void)</span>
 	return size ? size : (IO_TLB_DEFAULT_SIZE);
 }
 
<span class="p_add">+void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size) { }</span>
<span class="p_add">+</span>
<span class="p_add">+/* For swiotlb, clear memory encryption mask from dma addresses */</span>
<span class="p_add">+static dma_addr_t swiotlb_phys_to_dma(struct device *hwdev,</span>
<span class="p_add">+				      phys_addr_t address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_clr(phys_to_dma(hwdev, address));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Note that this doesn&#39;t work with highmem page */
 static dma_addr_t swiotlb_virt_to_bus(struct device *hwdev,
 				      volatile void *address)
<span class="p_chunk">@@ -183,6 +193,31 @@</span> <span class="p_context"> void swiotlb_print_info(void)</span>
 	       bytes &gt;&gt; 20, vstart, vend - 1);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Early SWIOTLB allocation may be too early to allow an architecture to</span>
<span class="p_add">+ * perform the desired operations.  This function allows the architecture to</span>
<span class="p_add">+ * call SWIOTLB when the operations are possible.  It needs to be called</span>
<span class="p_add">+ * before the SWIOTLB memory is used.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void __init swiotlb_update_mem_attributes(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *vaddr;</span>
<span class="p_add">+	unsigned long bytes;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (no_iotlb_memory || late_alloc)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_start);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_overflow_buffer);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_overflow);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)
 {
 	void *v_overflow_buffer;
<span class="p_chunk">@@ -320,6 +355,7 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	io_tlb_start = virt_to_phys(tlb);
 	io_tlb_end = io_tlb_start + bytes;
 
<span class="p_add">+	swiotlb_set_mem_attributes(tlb, bytes);</span>
 	memset(tlb, 0, bytes);
 
 	/*
<span class="p_chunk">@@ -330,6 +366,8 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	if (!v_overflow_buffer)
 		goto cleanup2;
 
<span class="p_add">+	swiotlb_set_mem_attributes(v_overflow_buffer, io_tlb_overflow);</span>
<span class="p_add">+	memset(v_overflow_buffer, 0, io_tlb_overflow);</span>
 	io_tlb_overflow_buffer = virt_to_phys(v_overflow_buffer);
 
 	/*
<span class="p_chunk">@@ -581,7 +619,7 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 		return SWIOTLB_MAP_ERROR;
 	}
 
<span class="p_del">-	start_dma_addr = phys_to_dma(hwdev, io_tlb_start);</span>
<span class="p_add">+	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);</span>
 	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,
 				      dir, attrs);
 }
<span class="p_chunk">@@ -702,7 +740,7 @@</span> <span class="p_context"> void swiotlb_tbl_sync_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 			goto err_warn;
 
 		ret = phys_to_virt(paddr);
<span class="p_del">-		dev_addr = phys_to_dma(hwdev, paddr);</span>
<span class="p_add">+		dev_addr = swiotlb_phys_to_dma(hwdev, paddr);</span>
 
 		/* Confirm address can be DMA&#39;d by device */
 		if (dev_addr + size - 1 &gt; dma_mask) {
<span class="p_chunk">@@ -812,10 +850,10 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	map = map_single(dev, phys, size, dir, attrs);
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
<span class="p_del">-		return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 	}
 
<span class="p_del">-	dev_addr = phys_to_dma(dev, map);</span>
<span class="p_add">+	dev_addr = swiotlb_phys_to_dma(dev, map);</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (dma_capable(dev, dev_addr, size))
<span class="p_chunk">@@ -824,7 +862,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);
 
<span class="p_del">-	return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+	return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_map_page);
 
<span class="p_chunk">@@ -958,7 +996,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 				sg_dma_len(sgl) = 0;
 				return 0;
 			}
<span class="p_del">-			sg-&gt;dma_address = phys_to_dma(hwdev, map);</span>
<span class="p_add">+			sg-&gt;dma_address = swiotlb_phys_to_dma(hwdev, map);</span>
 		} else
 			sg-&gt;dma_address = dev_addr;
 		sg_dma_len(sg) = sg-&gt;length;
<span class="p_chunk">@@ -1026,7 +1064,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
 {
<span class="p_del">-	return (dma_addr == phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
<span class="p_add">+	return (dma_addr == swiotlb_phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_mapping_error);
 
<span class="p_chunk">@@ -1039,6 +1077,6 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_del">-	return phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="p_add">+	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_supported);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



