
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm: pagealloc: fix continued prints in show_free_areas - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm: pagealloc: fix continued prints in show_free_areas</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 18, 2016, 11:34 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1476790457-7776-1-git-send-email-mark.rutland@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9381965/mbox/"
   >mbox</a>
|
   <a href="/patch/9381965/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9381965/">/patch/9381965/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4555160839 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 11:34:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 34E1428CAB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 11:34:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 299C629028; Tue, 18 Oct 2016 11:34:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8E88828CAB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 11:34:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933222AbcJRLex (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Oct 2016 07:34:53 -0400
Received: from foss.arm.com ([217.140.101.70]:58086 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932125AbcJRLew (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Oct 2016 07:34:52 -0400
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id AADFF16;
	Tue, 18 Oct 2016 04:34:51 -0700 (PDT)
Received: from leverpostej.cambridge.arm.com
	(usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id
	A4C4F3F21A; Tue, 18 Oct 2016 04:34:50 -0700 (PDT)
From: Mark Rutland &lt;mark.rutland@arm.com&gt;
To: linux-kernel@vger.kernel.org
Cc: Mark Rutland &lt;mark.rutland@arm.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;, linux-mm@kvack.org
Subject: [PATCH] mm: pagealloc: fix continued prints in show_free_areas
Date: Tue, 18 Oct 2016 12:34:17 +0100
Message-Id: &lt;1476790457-7776-1-git-send-email-mark.rutland@arm.com&gt;
X-Mailer: git-send-email 1.9.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Oct. 18, 2016, 11:34 a.m.</div>
<pre class="content">
Recently, printk was reworked in commit:

  4bcc595ccd80decb (&quot;printk: reinstate KERN_CONT for printing continuation
  lines&quot;)

As of this commit, printk calls missing KERN_CONT will have a linebreak
inserted implicitly.

In show_free_areas, we miss KERN_CONT in a few cases, and as a result
prints are unexpectedly split over a number of lines, making them
difficult to read (in v4.9-rc1).

This patch uses pr_cont (with uits implicit KERN_CONT) to mark all
continued prints that occur withing a show_free_areas() call. Note that
show_migration_types() is only called by show_free_areas().
Depending on CONFIG_NUMA a printk after show_node() may or may not be a
continuation, but follows an explicit newline if not (and thus marking
it as a continuation should not be harmful).
<span class="signed-off-by">
Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
Cc: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org
---
 mm/page_alloc.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Oct. 18, 2016, 1 p.m.</div>
<pre class="content">
On 10/18/2016 01:34 PM, Mark Rutland wrote:
<span class="quote">&gt; Recently, printk was reworked in commit:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   4bcc595ccd80decb (&quot;printk: reinstate KERN_CONT for printing continuation</span>
<span class="quote">&gt;   lines&quot;)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As of this commit, printk calls missing KERN_CONT will have a linebreak</span>
<span class="quote">&gt; inserted implicitly.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; In show_free_areas, we miss KERN_CONT in a few cases, and as a result</span>
<span class="quote">&gt; prints are unexpectedly split over a number of lines, making them</span>
<span class="quote">&gt; difficult to read (in v4.9-rc1).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch uses pr_cont (with uits implicit KERN_CONT) to mark all</span>
<span class="quote">&gt; continued prints that occur withing a show_free_areas() call. Note that</span>
<span class="quote">&gt; show_migration_types() is only called by show_free_areas().</span>
<span class="quote">&gt; Depending on CONFIG_NUMA a printk after show_node() may or may not be a</span>
<span class="quote">&gt; continuation, but follows an explicit newline if not (and thus marking</span>
<span class="quote">&gt; it as a continuation should not be harmful).</span>

I think this was already fixed:

http://marc.info/?l=linux-mm&amp;m=147623910031630&amp;w=2
<span class="quote">
&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/page_alloc.c | 14 +++++++-------</span>
<span class="quote">&gt;  1 file changed, 7 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="quote">&gt; index 2b3bf67..833f271 100644</span>
<span class="quote">&gt; --- a/mm/page_alloc.c</span>
<span class="quote">&gt; +++ b/mm/page_alloc.c</span>
<span class="quote">&gt; @@ -4224,7 +4224,7 @@ static void show_migration_types(unsigned char type)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	*p = &#39;\0&#39;;</span>
<span class="quote">&gt; -	printk(&quot;(%s) &quot;, tmp);</span>
<span class="quote">&gt; +	pr_cont(&quot;(%s) &quot;, tmp);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -4335,7 +4335,7 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  			free_pcp += per_cpu_ptr(zone-&gt;pageset, cpu)-&gt;pcp.count;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  		show_node(zone);</span>
<span class="quote">&gt; -		printk(&quot;%s&quot;</span>
<span class="quote">&gt; +		pr_cont(&quot;%s&quot;</span>
<span class="quote">&gt;  			&quot; free:%lukB&quot;</span>
<span class="quote">&gt;  			&quot; min:%lukB&quot;</span>
<span class="quote">&gt;  			&quot; low:%lukB&quot;</span>
<span class="quote">&gt; @@ -4382,8 +4382,8 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  			K(zone_page_state(zone, NR_FREE_CMA_PAGES)));</span>
<span class="quote">&gt;  		printk(&quot;lowmem_reserve[]:&quot;);</span>
<span class="quote">&gt;  		for (i = 0; i &lt; MAX_NR_ZONES; i++)</span>
<span class="quote">&gt; -			printk(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="quote">&gt; -		printk(&quot;\n&quot;);</span>
<span class="quote">&gt; +			pr_cont(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="quote">&gt; +		pr_cont(&quot;\n&quot;);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	for_each_populated_zone(zone) {</span>
<span class="quote">&gt; @@ -4394,7 +4394,7 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  		if (skip_free_areas_node(filter, zone_to_nid(zone)))</span>
<span class="quote">&gt;  			continue;</span>
<span class="quote">&gt;  		show_node(zone);</span>
<span class="quote">&gt; -		printk(&quot;%s: &quot;, zone-&gt;name);</span>
<span class="quote">&gt; +		pr_cont(&quot;%s: &quot;, zone-&gt;name);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
<span class="quote">&gt;  		for (order = 0; order &lt; MAX_ORDER; order++) {</span>
<span class="quote">&gt; @@ -4412,11 +4412,11 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="quote">&gt;  		for (order = 0; order &lt; MAX_ORDER; order++) {</span>
<span class="quote">&gt; -			printk(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
<span class="quote">&gt; +			pr_cont(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
<span class="quote">&gt;  			if (nr[order])</span>
<span class="quote">&gt;  				show_migration_types(types[order]);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; -		printk(&quot;= %lukB\n&quot;, K(total));</span>
<span class="quote">&gt; +		pr_cont(&quot;= %lukB\n&quot;, K(total));</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	hugetlb_show_meminfo();</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Oct. 18, 2016, 1:04 p.m.</div>
<pre class="content">
On Tue, Oct 18, 2016 at 03:00:40PM +0200, Vlastimil Babka wrote:
<span class="quote">&gt; On 10/18/2016 01:34 PM, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt;In show_free_areas, we miss KERN_CONT in a few cases, and as a result</span>
<span class="quote">&gt; &gt;prints are unexpectedly split over a number of lines, making them</span>
<span class="quote">&gt; &gt;difficult to read (in v4.9-rc1).</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;This patch uses pr_cont (with uits implicit KERN_CONT) to mark all</span>
<span class="quote">&gt; &gt;continued prints that occur withing a show_free_areas() call. Note that</span>
<span class="quote">&gt; &gt;show_migration_types() is only called by show_free_areas().</span>
<span class="quote">&gt; &gt;Depending on CONFIG_NUMA a printk after show_node() may or may not be a</span>
<span class="quote">&gt; &gt;continuation, but follows an explicit newline if not (and thus marking</span>
<span class="quote">&gt; &gt;it as a continuation should not be harmful).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think this was already fixed:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; http://marc.info/?l=linux-mm&amp;m=147623910031630&amp;w=2</span>

So it was; thanks for the pointer!

Thanks,
Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Oct. 18, 2016, 1:44 p.m.</div>
<pre class="content">
Already taken care of by
http://lkml.kernel.org/r/c7df37c8665134654a17aaeb8b9f6ace1d6db58b.1476239034.git.joe@perches.com
maybe it just fell through the cracks...

On Tue 18-10-16 12:34:17, Mark Rutland wrote:
<span class="quote">&gt; Recently, printk was reworked in commit:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   4bcc595ccd80decb (&quot;printk: reinstate KERN_CONT for printing continuation</span>
<span class="quote">&gt;   lines&quot;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As of this commit, printk calls missing KERN_CONT will have a linebreak</span>
<span class="quote">&gt; inserted implicitly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In show_free_areas, we miss KERN_CONT in a few cases, and as a result</span>
<span class="quote">&gt; prints are unexpectedly split over a number of lines, making them</span>
<span class="quote">&gt; difficult to read (in v4.9-rc1).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch uses pr_cont (with uits implicit KERN_CONT) to mark all</span>
<span class="quote">&gt; continued prints that occur withing a show_free_areas() call. Note that</span>
<span class="quote">&gt; show_migration_types() is only called by show_free_areas().</span>
<span class="quote">&gt; Depending on CONFIG_NUMA a printk after show_node() may or may not be a</span>
<span class="quote">&gt; continuation, but follows an explicit newline if not (and thus marking</span>
<span class="quote">&gt; it as a continuation should not be harmful).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/page_alloc.c | 14 +++++++-------</span>
<span class="quote">&gt;  1 file changed, 7 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="quote">&gt; index 2b3bf67..833f271 100644</span>
<span class="quote">&gt; --- a/mm/page_alloc.c</span>
<span class="quote">&gt; +++ b/mm/page_alloc.c</span>
<span class="quote">&gt; @@ -4224,7 +4224,7 @@ static void show_migration_types(unsigned char type)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	*p = &#39;\0&#39;;</span>
<span class="quote">&gt; -	printk(&quot;(%s) &quot;, tmp);</span>
<span class="quote">&gt; +	pr_cont(&quot;(%s) &quot;, tmp);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -4335,7 +4335,7 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  			free_pcp += per_cpu_ptr(zone-&gt;pageset, cpu)-&gt;pcp.count;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		show_node(zone);</span>
<span class="quote">&gt; -		printk(&quot;%s&quot;</span>
<span class="quote">&gt; +		pr_cont(&quot;%s&quot;</span>
<span class="quote">&gt;  			&quot; free:%lukB&quot;</span>
<span class="quote">&gt;  			&quot; min:%lukB&quot;</span>
<span class="quote">&gt;  			&quot; low:%lukB&quot;</span>
<span class="quote">&gt; @@ -4382,8 +4382,8 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  			K(zone_page_state(zone, NR_FREE_CMA_PAGES)));</span>
<span class="quote">&gt;  		printk(&quot;lowmem_reserve[]:&quot;);</span>
<span class="quote">&gt;  		for (i = 0; i &lt; MAX_NR_ZONES; i++)</span>
<span class="quote">&gt; -			printk(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="quote">&gt; -		printk(&quot;\n&quot;);</span>
<span class="quote">&gt; +			pr_cont(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="quote">&gt; +		pr_cont(&quot;\n&quot;);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for_each_populated_zone(zone) {</span>
<span class="quote">&gt; @@ -4394,7 +4394,7 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  		if (skip_free_areas_node(filter, zone_to_nid(zone)))</span>
<span class="quote">&gt;  			continue;</span>
<span class="quote">&gt;  		show_node(zone);</span>
<span class="quote">&gt; -		printk(&quot;%s: &quot;, zone-&gt;name);</span>
<span class="quote">&gt; +		pr_cont(&quot;%s: &quot;, zone-&gt;name);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
<span class="quote">&gt;  		for (order = 0; order &lt; MAX_ORDER; order++) {</span>
<span class="quote">&gt; @@ -4412,11 +4412,11 @@ void show_free_areas(unsigned int filter)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="quote">&gt;  		for (order = 0; order &lt; MAX_ORDER; order++) {</span>
<span class="quote">&gt; -			printk(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
<span class="quote">&gt; +			pr_cont(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
<span class="quote">&gt;  			if (nr[order])</span>
<span class="quote">&gt;  				show_migration_types(types[order]);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; -		printk(&quot;= %lukB\n&quot;, K(total));</span>
<span class="quote">&gt; +		pr_cont(&quot;= %lukB\n&quot;, K(total));</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	hugetlb_show_meminfo();</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.9.1</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 2b3bf67..833f271 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -4224,7 +4224,7 @@</span> <span class="p_context"> static void show_migration_types(unsigned char type)</span>
 	}
 
 	*p = &#39;\0&#39;;
<span class="p_del">-	printk(&quot;(%s) &quot;, tmp);</span>
<span class="p_add">+	pr_cont(&quot;(%s) &quot;, tmp);</span>
 }
 
 /*
<span class="p_chunk">@@ -4335,7 +4335,7 @@</span> <span class="p_context"> void show_free_areas(unsigned int filter)</span>
 			free_pcp += per_cpu_ptr(zone-&gt;pageset, cpu)-&gt;pcp.count;
 
 		show_node(zone);
<span class="p_del">-		printk(&quot;%s&quot;</span>
<span class="p_add">+		pr_cont(&quot;%s&quot;</span>
 			&quot; free:%lukB&quot;
 			&quot; min:%lukB&quot;
 			&quot; low:%lukB&quot;
<span class="p_chunk">@@ -4382,8 +4382,8 @@</span> <span class="p_context"> void show_free_areas(unsigned int filter)</span>
 			K(zone_page_state(zone, NR_FREE_CMA_PAGES)));
 		printk(&quot;lowmem_reserve[]:&quot;);
 		for (i = 0; i &lt; MAX_NR_ZONES; i++)
<span class="p_del">-			printk(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="p_del">-		printk(&quot;\n&quot;);</span>
<span class="p_add">+			pr_cont(&quot; %ld&quot;, zone-&gt;lowmem_reserve[i]);</span>
<span class="p_add">+		pr_cont(&quot;\n&quot;);</span>
 	}
 
 	for_each_populated_zone(zone) {
<span class="p_chunk">@@ -4394,7 +4394,7 @@</span> <span class="p_context"> void show_free_areas(unsigned int filter)</span>
 		if (skip_free_areas_node(filter, zone_to_nid(zone)))
 			continue;
 		show_node(zone);
<span class="p_del">-		printk(&quot;%s: &quot;, zone-&gt;name);</span>
<span class="p_add">+		pr_cont(&quot;%s: &quot;, zone-&gt;name);</span>
 
 		spin_lock_irqsave(&amp;zone-&gt;lock, flags);
 		for (order = 0; order &lt; MAX_ORDER; order++) {
<span class="p_chunk">@@ -4412,11 +4412,11 @@</span> <span class="p_context"> void show_free_areas(unsigned int filter)</span>
 		}
 		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);
 		for (order = 0; order &lt; MAX_ORDER; order++) {
<span class="p_del">-			printk(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
<span class="p_add">+			pr_cont(&quot;%lu*%lukB &quot;, nr[order], K(1UL) &lt;&lt; order);</span>
 			if (nr[order])
 				show_migration_types(types[order]);
 		}
<span class="p_del">-		printk(&quot;= %lukB\n&quot;, K(total));</span>
<span class="p_add">+		pr_cont(&quot;= %lukB\n&quot;, K(total));</span>
 	}
 
 	hugetlb_show_meminfo();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



