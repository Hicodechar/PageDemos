
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[18/22] m68k/mm: kmap - Modernize printing of kernel messages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [18/22] m68k/mm: kmap - Modernize printing of kernel messages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=70">Geert Uytterhoeven</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 7, 2016, 3:09 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1481123360-10978-19-git-send-email-geert@linux-m68k.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9464639/mbox/"
   >mbox</a>
|
   <a href="/patch/9464639/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9464639/">/patch/9464639/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	ECFE660512 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 15:12:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5A77284AD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 15:12:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D9D53284FD; Wed,  7 Dec 2016 15:12:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6F67C284AD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 15:12:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932321AbcLGPMO (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Dec 2016 10:12:14 -0500
Received: from newton.telenet-ops.be ([195.130.132.45]:33278 &quot;EHLO
	newton.telenet-ops.be&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753207AbcLGPLB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Dec 2016 10:11:01 -0500
Received: from xavier.telenet-ops.be (xavier.telenet-ops.be
	[IPv6:2a02:1800:120:4::f00:14])
	by newton.telenet-ops.be (Postfix) with ESMTPS id 3tYhkt43hFzMrbx8
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed,  7 Dec 2016 16:10:30 +0100 (CET)
Received: from ayla.of.borg ([84.193.137.253])
	by xavier.telenet-ops.be with bizsmtp
	id H39R1u00g5UCtCs0139R7f; Wed, 07 Dec 2016 16:09:27 +0100
Received: from ramsan.of.borg ([192.168.97.29] helo=ramsan)
	by ayla.of.borg with esmtp (Exim 4.82)
	(envelope-from &lt;geert@linux-m68k.org&gt;)
	id 1cEdqX-0001Qp-Rj; Wed, 07 Dec 2016 16:09:25 +0100
Received: from geert by ramsan with local (Exim 4.82)
	(envelope-from &lt;geert@linux-m68k.org&gt;)
	id 1cEdqd-0002tW-3b; Wed, 07 Dec 2016 16:09:31 +0100
From: Geert Uytterhoeven &lt;geert@linux-m68k.org&gt;
To: Greg Ungerer &lt;gerg@linux-m68k.org&gt;, Sam Creasey &lt;sammy@sammy.net&gt;,
	Joshua Thompson &lt;funaho@jurai.org&gt;,
	Finn Thain &lt;fthain@telegraphics.com.au&gt;
Cc: linux-m68k@lists.linux-m68k.org, linux-kernel@vger.kernel.org,
	Geert Uytterhoeven &lt;geert@linux-m68k.org&gt;
Subject: [PATCH 18/22] m68k/mm: kmap - Modernize printing of kernel messages
Date: Wed,  7 Dec 2016 16:09:16 +0100
Message-Id: &lt;1481123360-10978-19-git-send-email-geert@linux-m68k.org&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1481123360-10978-1-git-send-email-geert@linux-m68k.org&gt;
References: &lt;1481123360-10978-1-git-send-email-geert@linux-m68k.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=70">Geert Uytterhoeven</a> - Dec. 7, 2016, 3:09 p.m.</div>
<pre class="content">
- Convert from printk() to pr_*(),
  - Add missing continuations,
  - Remove #undef DEBUG.

Note that &quot;#ifdef DEBUG&quot; is sometimes retained because pr_cont() is not
optimized away when debugging is disabled.
<span class="signed-off-by">
Signed-off-by: Geert Uytterhoeven &lt;geert@linux-m68k.org&gt;</span>
---
 arch/m68k/mm/kmap.c | 26 ++++++++++++--------------
 1 file changed, 12 insertions(+), 14 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2830">Finn Thain</a> - Dec. 7, 2016, 11:26 p.m.</div>
<pre class="content">
On Wed, 7 Dec 2016, Geert Uytterhoeven wrote:
<span class="quote">
&gt;   - Convert from printk() to pr_*(),</span>
<span class="quote">&gt;   - Add missing continuations,</span>
<span class="quote">&gt;   - Remove #undef DEBUG.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that &quot;#ifdef DEBUG&quot; is sometimes retained because pr_cont() is not</span>
<span class="quote">&gt; optimized away when debugging is disabled.</span>
<span class="quote">&gt; </span>

I think that argues for using printk(KERN_DEBUG ...) and print(KERN_CONT 
...) inside #ifdef DEBUG, which would need no explanation.

If instead you use a combination of pr_debug and pr_cont and #ifdef DEBUG, 
perhaps the explanation should be moved from the commit log to a comment 
in the code?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2830">Finn Thain</a> - Dec. 9, 2016, 10:50 p.m.</div>
<pre class="content">
On Thu, 8 Dec 2016, I wrote:
<span class="quote">
&gt; </span>
<span class="quote">&gt; On Wed, 7 Dec 2016, Geert Uytterhoeven wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;   - Convert from printk() to pr_*(),</span>
<span class="quote">&gt; &gt;   - Add missing continuations,</span>
<span class="quote">&gt; &gt;   - Remove #undef DEBUG.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Note that &quot;#ifdef DEBUG&quot; is sometimes retained because pr_cont() is </span>
<span class="quote">&gt; &gt; not optimized away when debugging is disabled.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think that argues for using printk(KERN_DEBUG ...) and print(KERN_CONT </span>
<span class="quote">&gt; ...) inside #ifdef DEBUG, which would need no explanation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If instead you use a combination of pr_debug and pr_cont and #ifdef </span>
<span class="quote">&gt; DEBUG, perhaps the explanation should be moved from the commit log to a </span>
<span class="quote">&gt; comment in the code?</span>
<span class="quote">&gt; </span>

Perhaps a better solution than these alternatives would be,

#if defined(DEBUG)
#define pr_debug_cont pr_cont
#else
#define pr_debug_cont no_printk
#endif

But this API is still surprising and ugly. It doesn&#39;t work with 
CONFIG_DYNAMIC_DEBUG but that&#39;s not so important.

IMO, a far better linux/printk.h would have provided us with these 
definitions:

#define pr_emerg(fmt, ...) \
        printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
/* ... */
#define pr_debug(fmt, ...) \
        printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
#define pr_cont(fmt, ...) \
        printk(KERN_CONT fmt, ##__VA_ARGS__)

#if defined(CONFIG_DYNAMIC_DEBUG)
#define pr_debug_cond(fmt, ...) \
        dynamic_pr_debug(fmt, ##__VA_ARGS__)
#define pr_cont_cond(fmt, ...) \
        dynamic_pr_cont(fmt, ##__VA_ARGS__)
#elif defined(DEBUG)
#define pr_debug_cond(fmt, ...) \
        printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
#define pr_cont_cond(fmt, ...) \
        no_printk(KERN_CONT pr_fmt(fmt), ##__VA_ARGS__)
#else
#define pr_debug_cond(fmt, ...) \
        no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
#define pr_cont_cond(fmt, ...) \
        no_printk(KERN_CONT pr_fmt(fmt), ##__VA_ARGS__)
#endif

Which have the virtues of symmetry and least surprise.

--
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/m68k/mm/kmap.c b/arch/m68k/mm/kmap.c</span>
<span class="p_header">index 6e4955bc542bfc59..ce4773461651656a 100644</span>
<span class="p_header">--- a/arch/m68k/mm/kmap.c</span>
<span class="p_header">+++ b/arch/m68k/mm/kmap.c</span>
<span class="p_chunk">@@ -21,8 +21,6 @@</span> <span class="p_context"></span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/io.h&gt;
 
<span class="p_del">-#undef DEBUG</span>
<span class="p_del">-</span>
 #define PTRTREESIZE	(256*1024)
 
 /*
<span class="p_chunk">@@ -125,9 +123,7 @@</span> <span class="p_context"> void __iomem *__ioremap(unsigned long physaddr, unsigned long size, int cachefla</span>
 	}
 #endif
 
<span class="p_del">-#ifdef DEBUG</span>
<span class="p_del">-	printk(&quot;ioremap: 0x%lx,0x%lx(%d) - &quot;, physaddr, size, cacheflag);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	pr_debug(&quot;ioremap: 0x%lx,0x%lx(%d) - &quot;, physaddr, size, cacheflag);</span>
 	/*
 	 * Mappings have to be aligned
 	 */
<span class="p_chunk">@@ -145,7 +141,7 @@</span> <span class="p_context"> void __iomem *__ioremap(unsigned long physaddr, unsigned long size, int cachefla</span>
 	virtaddr = (unsigned long)area-&gt;addr;
 	retaddr = virtaddr + offset;
 #ifdef DEBUG
<span class="p_del">-	printk(&quot;0x%lx,0x%lx,0x%lx&quot;, physaddr, virtaddr, retaddr);</span>
<span class="p_add">+	pr_cont(&quot;0x%lx,0x%lx,0x%lx&quot;, physaddr, virtaddr, retaddr);</span>
 #endif
 
 	/*
<span class="p_chunk">@@ -187,12 +183,12 @@</span> <span class="p_context"> void __iomem *__ioremap(unsigned long physaddr, unsigned long size, int cachefla</span>
 	while ((long)size &gt; 0) {
 #ifdef DEBUG
 		if (!(virtaddr &amp; (PTRTREESIZE-1)))
<span class="p_del">-			printk (&quot;\npa=%#lx va=%#lx &quot;, physaddr, virtaddr);</span>
<span class="p_add">+			pr_info(&quot;\npa=%#lx va=%#lx &quot;, physaddr, virtaddr);</span>
 #endif
 		pgd_dir = pgd_offset_k(virtaddr);
 		pmd_dir = pmd_alloc(&amp;init_mm, pgd_dir, virtaddr);
 		if (!pmd_dir) {
<span class="p_del">-			printk(&quot;ioremap: no mem for pmd_dir\n&quot;);</span>
<span class="p_add">+			pr_err(&quot;ioremap: no mem for pmd_dir\n&quot;);</span>
 			return NULL;
 		}
 
<span class="p_chunk">@@ -204,7 +200,7 @@</span> <span class="p_context"> void __iomem *__ioremap(unsigned long physaddr, unsigned long size, int cachefla</span>
 		} else {
 			pte_dir = pte_alloc_kernel(pmd_dir, virtaddr);
 			if (!pte_dir) {
<span class="p_del">-				printk(&quot;ioremap: no mem for pte_dir\n&quot;);</span>
<span class="p_add">+				pr_err(&quot;ioremap: no mem for pte_dir\n&quot;);</span>
 				return NULL;
 			}
 
<span class="p_chunk">@@ -215,7 +211,7 @@</span> <span class="p_context"> void __iomem *__ioremap(unsigned long physaddr, unsigned long size, int cachefla</span>
 		}
 	}
 #ifdef DEBUG
<span class="p_del">-	printk(&quot;\n&quot;);</span>
<span class="p_add">+	pr_cont(&quot;\n&quot;);</span>
 #endif
 	flush_tlb_all();
 
<span class="p_chunk">@@ -254,7 +250,7 @@</span> <span class="p_context"> void __iounmap(void *addr, unsigned long size)</span>
 	while ((long)size &gt; 0) {
 		pgd_dir = pgd_offset_k(virtaddr);
 		if (pgd_bad(*pgd_dir)) {
<span class="p_del">-			printk(&quot;iounmap: bad pgd(%08lx)\n&quot;, pgd_val(*pgd_dir));</span>
<span class="p_add">+			pr_err(&quot;iounmap: bad pgd(%08lx)\n&quot;, pgd_val(*pgd_dir));</span>
 			pgd_clear(pgd_dir);
 			return;
 		}
<span class="p_chunk">@@ -274,7 +270,7 @@</span> <span class="p_context"> void __iounmap(void *addr, unsigned long size)</span>
 		}
 
 		if (pmd_bad(*pmd_dir)) {
<span class="p_del">-			printk(&quot;iounmap: bad pmd (%08lx)\n&quot;, pmd_val(*pmd_dir));</span>
<span class="p_add">+			pr_err(&quot;iounmap: bad pmd (%08lx)\n&quot;, pmd_val(*pmd_dir));</span>
 			pmd_clear(pmd_dir);
 			return;
 		}
<span class="p_chunk">@@ -332,7 +328,8 @@</span> <span class="p_context"> void kernel_set_cachemode(void *addr, unsigned long size, int cmode)</span>
 	while ((long)size &gt; 0) {
 		pgd_dir = pgd_offset_k(virtaddr);
 		if (pgd_bad(*pgd_dir)) {
<span class="p_del">-			printk(&quot;iocachemode: bad pgd(%08lx)\n&quot;, pgd_val(*pgd_dir));</span>
<span class="p_add">+			pr_err(&quot;iocachemode: bad pgd(%08lx)\n&quot;,</span>
<span class="p_add">+			       pgd_val(*pgd_dir));</span>
 			pgd_clear(pgd_dir);
 			return;
 		}
<span class="p_chunk">@@ -351,7 +348,8 @@</span> <span class="p_context"> void kernel_set_cachemode(void *addr, unsigned long size, int cmode)</span>
 		}
 
 		if (pmd_bad(*pmd_dir)) {
<span class="p_del">-			printk(&quot;iocachemode: bad pmd (%08lx)\n&quot;, pmd_val(*pmd_dir));</span>
<span class="p_add">+			pr_err(&quot;iocachemode: bad pmd (%08lx)\n&quot;,</span>
<span class="p_add">+			       pmd_val(*pmd_dir));</span>
 			pmd_clear(pmd_dir);
 			return;
 		}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



