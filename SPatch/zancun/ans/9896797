
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] Add /proc/pid/smaps_rollup - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] Add /proc/pid/smaps_rollup</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=175813">Daniel Colascione</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 12, 2017, 2:21 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170812022148.178293-1-dancol@google.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9896797/mbox/"
   >mbox</a>
|
   <a href="/patch/9896797/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9896797/">/patch/9896797/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	70279603F2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 12 Aug 2017 02:22:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 58CC828BBD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 12 Aug 2017 02:22:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3EA9428BC3; Sat, 12 Aug 2017 02:22:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_HI,RCVD_IN_SORBS_SPAM
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7336028B96
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 12 Aug 2017 02:22:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752050AbdHLCWP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 11 Aug 2017 22:22:15 -0400
Received: from mail-pg0-f49.google.com ([74.125.83.49]:37152 &quot;EHLO
	mail-pg0-f49.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751950AbdHLCWN (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 11 Aug 2017 22:22:13 -0400
Received: by mail-pg0-f49.google.com with SMTP id y129so21735875pgy.4
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 11 Aug 2017 19:22:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=UyoQktw25YZet1c+duLkDshbyS6TND4vwQ0i5zljCj0=;
	b=Mzc6eJhw2rbt7Kc9vx8ei//A8N4A3feV8sVQ7jKCsU5YHYJyJfsTPoQ1molJOMGvNe
	vUJLYiFEDZRdhlICdQO4XJdCscANt+qhYtdSt24ADUNpJ2AZMSuil1a3ErJM1W3hQF0X
	RcXp3XEParG9sg9cMvkwgTc04BSIxlwfyJE5yNWqAdM+CEzakfRKiF6A9h54a0aUGDBV
	nucu/PwW/T4hyCp6joPdvKyXC+hSBRFd5VnbeLmBU5lIqH86EkIFIZy+vm9N7TU2k5Be
	3Tib7cKXM/613w+KT2cMQ8CjH8Ma4miF/SaB9MaQng57QYQyEgldleOhRxbzkjIDSRaC
	xM9g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=UyoQktw25YZet1c+duLkDshbyS6TND4vwQ0i5zljCj0=;
	b=boeuA9mkKsEkgTvB6XnAE/qgdm1sftgbhOxPMEObkGUSW5FHSdzBDRl+GfZ5e4wH8/
	GTEDPIZOYyFfZoXSCTOggwQgv+UHHfSHxyqJbWl1vNyhQ+g6dpFlfARSBUlAk41aeVsw
	y66n9PO0leCmo21WNgZYhJAyzJv3orcT/CYCBs2ZL2jSZk1kO7oaUtURd1X+n3Uhj6Np
	0rWuiuzbiP1lva17CER7qavpZoIDSONYGNK32jumczmKLBqwjc52qA9/aHAftiiBN3MJ
	AHM3EpK++bXiDwCbv3udQGc2MAvtL2rTTIZTAlGj53LL8CEFlLxDKEj9osWs2Y9nXKJT
	Vqwg==
X-Gm-Message-State: AHYfb5jCt2kRrQwN+GjFQlti7qQ7jq8xyeLVVf/9ORQiwazd5vpe9fXM
	pqYcl2bxg1jOx4TBNi/3pA==
X-Received: by 10.98.111.2 with SMTP id k2mr18048138pfc.78.1502504531960;
	Fri, 11 Aug 2017 19:22:11 -0700 (PDT)
Received: from poke.sea.corp.google.com ([100.100.214.22])
	by smtp.gmail.com with ESMTPSA id
	z8sm4196600pfk.130.2017.08.11.19.22.10
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Fri, 11 Aug 2017 19:22:10 -0700 (PDT)
From: Daniel Colascione &lt;dancol@google.com&gt;
To: linux-kernel@vger.kernel.org, timmurray@google.com,
	joelaf@google.com, viro@zeniv.linux.org.uk,
	linux-fsdevel@vger.kernel.org, linux-mm@kvack.org,
	akpm@linux-foundation.org
Cc: Daniel Colascione &lt;dancol@google.com&gt;
Subject: [PATCH v3] Add /proc/pid/smaps_rollup
Date: Fri, 11 Aug 2017 19:21:48 -0700
Message-Id: &lt;20170812022148.178293-1-dancol@google.com&gt;
X-Mailer: git-send-email 2.14.0.434.g98096fd7a8-goog
In-Reply-To: &lt;20170810001557.147285-1-dancol@google.com&gt;
References: &lt;20170810001557.147285-1-dancol@google.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=175813">Daniel Colascione</a> - Aug. 12, 2017, 2:21 a.m.</div>
<pre class="content">
/proc/pid/smaps_rollup is a new proc file that improves the
performance of user programs that determine aggregate memory
statistics (e.g., total PSS) of a process.

Android regularly &quot;samples&quot; the memory usage of various processes in
order to balance its memory pool sizes. This sampling process involves
opening /proc/pid/smaps and summing certain fields. For very large
processes, sampling memory use this way can take several hundred
milliseconds, due mostly to the overhead of the seq_printf calls in
task_mmu.c.

smaps_rollup improves the situation. It contains most of the fields of
/proc/pid/smaps, but instead of a set of fields for each VMA,
smaps_rollup instead contains one synthetic smaps-format entry
representing the whole process. In the single smaps_rollup synthetic
entry, each field is the summation of the corresponding field in all
of the real-smaps VMAs. Using a common format for smaps_rollup and
smaps allows userspace parsers to repurpose parsers meant for use with
non-rollup smaps for smaps_rollup, and it allows userspace to switch
between smaps_rollup and smaps at runtime (say, based on the
availability of smaps_rollup in a given kernel) with minimal fuss.

By using smaps_rollup instead of smaps, a caller can avoid the
significant overhead of formatting, reading, and parsing each of a
large process&#39;s potentially very numerous memory mappings. For
sampling system_server&#39;s PSS in Android, we measured a 12x speedup,
representing a savings of several hundred milliseconds.

One alternative to a new per-process proc file would have been
including PSS information in /proc/pid/status. We considered this
option but thought that PSS would be too expensive (by a few orders of
magnitude) to collect relative to what&#39;s already emitted as part of
/proc/pid/status, and slowing every user of /proc/pid/status for the
sake of readers that happen to want PSS feels wrong.

The code itself works by reusing the existing VMA-walking framework we
use for regular smaps generation and keeping the mem_size_stats
structure around between VMA walks instead of using a fresh one for
each VMA.  In this way, summation happens automatically.  We let
seq_file walk over the VMAs just as it does for regular smaps and just
emit nothing to the seq_file until we hit the last VMA.

Benchmarks:

    using smaps:
    iterations:1000 pid:1163 pss:220023808
    0m29.46s real 0m08.28s user 0m20.98s system

    using smaps_rollup:
    iterations:1000 pid:1163 pss:220702720
    0m04.39s real 0m00.03s user 0m04.31s system

Patch changelog:

v2: Fix typo in commit message
    Add ABI documentation as requested by gregkh
v3: Fix typo in ABI documentation
    Add benchmarks to commit message
<span class="signed-off-by">
Signed-off-by: Daniel Colascione &lt;dancol@google.com&gt;</span>
---
 Documentation/ABI/testing/procfs-smaps_rollup |  34 +++++
 fs/proc/base.c                                |   2 +
 fs/proc/internal.h                            |   3 +
 fs/proc/task_mmu.c                            | 196 ++++++++++++++++++--------
 4 files changed, 173 insertions(+), 62 deletions(-)
 create mode 100644 Documentation/ABI/testing/procfs-smaps_rollup
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/ABI/testing/procfs-smaps_rollup b/Documentation/ABI/testing/procfs-smaps_rollup</span>
new file mode 100644
<span class="p_header">index 000000000000..8c24138a7279</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/Documentation/ABI/testing/procfs-smaps_rollup</span>
<span class="p_chunk">@@ -0,0 +1,34 @@</span> <span class="p_context"></span>
<span class="p_add">+What:		/proc/pid/smaps_rollup</span>
<span class="p_add">+Date:		August 2017</span>
<span class="p_add">+Contact:	Daniel Colascione &lt;dancol@google.com&gt;</span>
<span class="p_add">+Description:</span>
<span class="p_add">+		This file provides pre-summed memory information for a</span>
<span class="p_add">+		process.  The format is identical to /proc/pid/smaps,</span>
<span class="p_add">+		except instead of an entry for each VMA in a process,</span>
<span class="p_add">+		smaps_rollup has a single entry (tagged &quot;[rollup]&quot;)</span>
<span class="p_add">+		for which each field is the sum of the corresponding</span>
<span class="p_add">+		fields from all the maps in /proc/pid/smaps.</span>
<span class="p_add">+		For more details, see the procfs man page.</span>
<span class="p_add">+</span>
<span class="p_add">+		Typical output looks like this:</span>
<span class="p_add">+</span>
<span class="p_add">+		00100000-ff709000 ---p 00000000 00:00 0		 [rollup]</span>
<span class="p_add">+		Rss:		     884 kB</span>
<span class="p_add">+		Pss:		     385 kB</span>
<span class="p_add">+		Shared_Clean:	     696 kB</span>
<span class="p_add">+		Shared_Dirty:	       0 kB</span>
<span class="p_add">+		Private_Clean:	     120 kB</span>
<span class="p_add">+		Private_Dirty:	      68 kB</span>
<span class="p_add">+		Referenced:	     884 kB</span>
<span class="p_add">+		Anonymous:	      68 kB</span>
<span class="p_add">+		LazyFree:	       0 kB</span>
<span class="p_add">+		AnonHugePages:	       0 kB</span>
<span class="p_add">+		ShmemPmdMapped:	       0 kB</span>
<span class="p_add">+		Shared_Hugetlb:	       0 kB</span>
<span class="p_add">+		Private_Hugetlb:       0 kB</span>
<span class="p_add">+		Swap:		       0 kB</span>
<span class="p_add">+		SwapPss:	       0 kB</span>
<span class="p_add">+		Locked:		     385 kB</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+		</span>
<span class="p_header">diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="p_header">index 719c2e943ea1..a9587b9cace5 100644</span>
<span class="p_header">--- a/fs/proc/base.c</span>
<span class="p_header">+++ b/fs/proc/base.c</span>
<span class="p_chunk">@@ -2930,6 +2930,7 @@</span> <span class="p_context"> static const struct pid_entry tgid_base_stuff[] = {</span>
 #ifdef CONFIG_PROC_PAGE_MONITOR
 	REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),
 	REG(&quot;smaps&quot;,      S_IRUGO, proc_pid_smaps_operations),
<span class="p_add">+	REG(&quot;smaps_rollup&quot;, S_IRUGO, proc_pid_smaps_rollup_operations),</span>
 	REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),
 #endif
 #ifdef CONFIG_SECURITY
<span class="p_chunk">@@ -3323,6 +3324,7 @@</span> <span class="p_context"> static const struct pid_entry tid_base_stuff[] = {</span>
 #ifdef CONFIG_PROC_PAGE_MONITOR
 	REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),
 	REG(&quot;smaps&quot;,     S_IRUGO, proc_tid_smaps_operations),
<span class="p_add">+	REG(&quot;smaps_rollup&quot;, S_IRUGO, proc_pid_smaps_rollup_operations),</span>
 	REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),
 #endif
 #ifdef CONFIG_SECURITY
<span class="p_header">diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="p_header">index aa2b89071630..2cbfcd32e884 100644</span>
<span class="p_header">--- a/fs/proc/internal.h</span>
<span class="p_header">+++ b/fs/proc/internal.h</span>
<span class="p_chunk">@@ -269,10 +269,12 @@</span> <span class="p_context"> extern int proc_remount(struct super_block *, int *, char *);</span>
 /*
  * task_[no]mmu.c
  */
<span class="p_add">+struct mem_size_stats;</span>
 struct proc_maps_private {
 	struct inode *inode;
 	struct task_struct *task;
 	struct mm_struct *mm;
<span class="p_add">+	struct mem_size_stats *rollup;</span>
 #ifdef CONFIG_MMU
 	struct vm_area_struct *tail_vma;
 #endif
<span class="p_chunk">@@ -288,6 +290,7 @@</span> <span class="p_context"> extern const struct file_operations proc_tid_maps_operations;</span>
 extern const struct file_operations proc_pid_numa_maps_operations;
 extern const struct file_operations proc_tid_numa_maps_operations;
 extern const struct file_operations proc_pid_smaps_operations;
<span class="p_add">+extern const struct file_operations proc_pid_smaps_rollup_operations;</span>
 extern const struct file_operations proc_tid_smaps_operations;
 extern const struct file_operations proc_clear_refs_operations;
 extern const struct file_operations proc_pagemap_operations;
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index b836fd61ed87..02b55df7291c 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -252,6 +252,7 @@</span> <span class="p_context"> static int proc_map_release(struct inode *inode, struct file *file)</span>
 	if (priv-&gt;mm)
 		mmdrop(priv-&gt;mm);
 
<span class="p_add">+	kfree(priv-&gt;rollup);</span>
 	return seq_release_private(inode, file);
 }
 
<span class="p_chunk">@@ -278,6 +279,23 @@</span> <span class="p_context"> static int is_stack(struct proc_maps_private *priv,</span>
 		vma-&gt;vm_end &gt;= vma-&gt;vm_mm-&gt;start_stack;
 }
 
<span class="p_add">+static void show_vma_header_prefix(struct seq_file *m,</span>
<span class="p_add">+				   unsigned long start, unsigned long end,</span>
<span class="p_add">+				   vm_flags_t flags, unsigned long long pgoff,</span>
<span class="p_add">+				   dev_t dev, unsigned long ino)</span>
<span class="p_add">+{</span>
<span class="p_add">+	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);</span>
<span class="p_add">+	seq_printf(m, &quot;%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu &quot;,</span>
<span class="p_add">+		   start,</span>
<span class="p_add">+		   end,</span>
<span class="p_add">+		   flags &amp; VM_READ ? &#39;r&#39; : &#39;-&#39;,</span>
<span class="p_add">+		   flags &amp; VM_WRITE ? &#39;w&#39; : &#39;-&#39;,</span>
<span class="p_add">+		   flags &amp; VM_EXEC ? &#39;x&#39; : &#39;-&#39;,</span>
<span class="p_add">+		   flags &amp; VM_MAYSHARE ? &#39;s&#39; : &#39;p&#39;,</span>
<span class="p_add">+		   pgoff,</span>
<span class="p_add">+		   MAJOR(dev), MINOR(dev), ino);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void
 show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)
 {
<span class="p_chunk">@@ -300,17 +318,7 @@</span> <span class="p_context"> show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)</span>
 
 	start = vma-&gt;vm_start;
 	end = vma-&gt;vm_end;
<span class="p_del">-</span>
<span class="p_del">-	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);</span>
<span class="p_del">-	seq_printf(m, &quot;%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu &quot;,</span>
<span class="p_del">-			start,</span>
<span class="p_del">-			end,</span>
<span class="p_del">-			flags &amp; VM_READ ? &#39;r&#39; : &#39;-&#39;,</span>
<span class="p_del">-			flags &amp; VM_WRITE ? &#39;w&#39; : &#39;-&#39;,</span>
<span class="p_del">-			flags &amp; VM_EXEC ? &#39;x&#39; : &#39;-&#39;,</span>
<span class="p_del">-			flags &amp; VM_MAYSHARE ? &#39;s&#39; : &#39;p&#39;,</span>
<span class="p_del">-			pgoff,</span>
<span class="p_del">-			MAJOR(dev), MINOR(dev), ino);</span>
<span class="p_add">+	show_vma_header_prefix(m, start, end, flags, pgoff, dev, ino);</span>
 
 	/*
 	 * Print the dentry name for named mappings, and a
<span class="p_chunk">@@ -429,6 +437,7 @@</span> <span class="p_context"> const struct file_operations proc_tid_maps_operations = {</span>
 
 #ifdef CONFIG_PROC_PAGE_MONITOR
 struct mem_size_stats {
<span class="p_add">+	bool first;</span>
 	unsigned long resident;
 	unsigned long shared_clean;
 	unsigned long shared_dirty;
<span class="p_chunk">@@ -442,7 +451,9 @@</span> <span class="p_context"> struct mem_size_stats {</span>
 	unsigned long swap;
 	unsigned long shared_hugetlb;
 	unsigned long private_hugetlb;
<span class="p_add">+	unsigned long first_vma_start;</span>
 	u64 pss;
<span class="p_add">+	u64 pss_locked;</span>
 	u64 swap_pss;
 	bool check_shmem_swap;
 };
<span class="p_chunk">@@ -718,18 +729,36 @@</span> <span class="p_context"> void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
 
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
<span class="p_add">+	struct proc_maps_private *priv = m-&gt;private;</span>
 	struct vm_area_struct *vma = v;
<span class="p_del">-	struct mem_size_stats mss;</span>
<span class="p_add">+	struct mem_size_stats mss_stack;</span>
<span class="p_add">+	struct mem_size_stats *mss;</span>
 	struct mm_walk smaps_walk = {
 		.pmd_entry = smaps_pte_range,
 #ifdef CONFIG_HUGETLB_PAGE
 		.hugetlb_entry = smaps_hugetlb_range,
 #endif
 		.mm = vma-&gt;vm_mm,
<span class="p_del">-		.private = &amp;mss,</span>
 	};
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	bool rollup_mode;</span>
<span class="p_add">+	bool last_vma;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (priv-&gt;rollup) {</span>
<span class="p_add">+		rollup_mode = true;</span>
<span class="p_add">+		mss = priv-&gt;rollup;</span>
<span class="p_add">+		if (mss-&gt;first) {</span>
<span class="p_add">+			mss-&gt;first_vma_start = vma-&gt;vm_start;</span>
<span class="p_add">+			mss-&gt;first = false;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		last_vma = !m_next_vma(priv, vma);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		rollup_mode = false;</span>
<span class="p_add">+		memset(&amp;mss_stack, 0, sizeof(mss_stack));</span>
<span class="p_add">+		mss = &amp;mss_stack;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	memset(&amp;mss, 0, sizeof mss);</span>
<span class="p_add">+	smaps_walk.private = mss;</span>
 
 #ifdef CONFIG_SHMEM
 	if (vma-&gt;vm_file &amp;&amp; shmem_mapping(vma-&gt;vm_file-&gt;f_mapping)) {
<span class="p_chunk">@@ -747,9 +776,9 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 
 		if (!shmem_swapped || (vma-&gt;vm_flags &amp; VM_SHARED) ||
 					!(vma-&gt;vm_flags &amp; VM_WRITE)) {
<span class="p_del">-			mss.swap = shmem_swapped;</span>
<span class="p_add">+			mss-&gt;swap = shmem_swapped;</span>
 		} else {
<span class="p_del">-			mss.check_shmem_swap = true;</span>
<span class="p_add">+			mss-&gt;check_shmem_swap = true;</span>
 			smaps_walk.pte_hole = smaps_pte_hole;
 		}
 	}
<span class="p_chunk">@@ -757,54 +786,71 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 
 	/* mmap_sem is held in m_start */
 	walk_page_vma(vma, &amp;smaps_walk);
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		mss-&gt;pss_locked += mss-&gt;pss;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!rollup_mode) {</span>
<span class="p_add">+		show_map_vma(m, vma, is_pid);</span>
<span class="p_add">+	} else if (last_vma) {</span>
<span class="p_add">+		show_vma_header_prefix(</span>
<span class="p_add">+			m, mss-&gt;first_vma_start, vma-&gt;vm_end, 0, 0, 0, 0);</span>
<span class="p_add">+		seq_pad(m, &#39; &#39;);</span>
<span class="p_add">+		seq_puts(m, &quot;[rollup]\n&quot;);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		ret = SEQ_SKIP;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	show_map_vma(m, vma, is_pid);</span>
<span class="p_del">-</span>
<span class="p_del">-	seq_printf(m,</span>
<span class="p_del">-		   &quot;Size:           %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Rss:            %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Pss:            %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;LazyFree:       %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;ShmemPmdMapped: %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Shared_Hugetlb: %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Private_Hugetlb: %7lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Swap:           %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;SwapPss:        %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;KernelPageSize: %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;MMUPageSize:    %8lu kB\n&quot;</span>
<span class="p_del">-		   &quot;Locked:         %8lu kB\n&quot;,</span>
<span class="p_del">-		   (vma-&gt;vm_end - vma-&gt;vm_start) &gt;&gt; 10,</span>
<span class="p_del">-		   mss.resident &gt;&gt; 10,</span>
<span class="p_del">-		   (unsigned long)(mss.pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_del">-		   mss.shared_clean  &gt;&gt; 10,</span>
<span class="p_del">-		   mss.shared_dirty  &gt;&gt; 10,</span>
<span class="p_del">-		   mss.private_clean &gt;&gt; 10,</span>
<span class="p_del">-		   mss.private_dirty &gt;&gt; 10,</span>
<span class="p_del">-		   mss.referenced &gt;&gt; 10,</span>
<span class="p_del">-		   mss.anonymous &gt;&gt; 10,</span>
<span class="p_del">-		   mss.lazyfree &gt;&gt; 10,</span>
<span class="p_del">-		   mss.anonymous_thp &gt;&gt; 10,</span>
<span class="p_del">-		   mss.shmem_thp &gt;&gt; 10,</span>
<span class="p_del">-		   mss.shared_hugetlb &gt;&gt; 10,</span>
<span class="p_del">-		   mss.private_hugetlb &gt;&gt; 10,</span>
<span class="p_del">-		   mss.swap &gt;&gt; 10,</span>
<span class="p_del">-		   (unsigned long)(mss.swap_pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_del">-		   vma_kernel_pagesize(vma) &gt;&gt; 10,</span>
<span class="p_del">-		   vma_mmu_pagesize(vma) &gt;&gt; 10,</span>
<span class="p_del">-		   (vma-&gt;vm_flags &amp; VM_LOCKED) ?</span>
<span class="p_del">-			(unsigned long)(mss.pss &gt;&gt; (10 + PSS_SHIFT)) : 0);</span>
<span class="p_del">-</span>
<span class="p_del">-	arch_show_smap(m, vma);</span>
<span class="p_del">-	show_smap_vma_flags(m, vma);</span>
<span class="p_add">+	if (!rollup_mode)</span>
<span class="p_add">+		seq_printf(m,</span>
<span class="p_add">+			   &quot;Size:           %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;KernelPageSize: %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;MMUPageSize:    %8lu kB\n&quot;,</span>
<span class="p_add">+			   (vma-&gt;vm_end - vma-&gt;vm_start) &gt;&gt; 10,</span>
<span class="p_add">+			   vma_kernel_pagesize(vma) &gt;&gt; 10,</span>
<span class="p_add">+			   vma_mmu_pagesize(vma) &gt;&gt; 10);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!rollup_mode || last_vma)</span>
<span class="p_add">+		seq_printf(m,</span>
<span class="p_add">+			   &quot;Rss:            %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Pss:            %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;LazyFree:       %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;ShmemPmdMapped: %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Shared_Hugetlb: %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Private_Hugetlb: %7lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Swap:           %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;SwapPss:        %8lu kB\n&quot;</span>
<span class="p_add">+			   &quot;Locked:         %8lu kB\n&quot;,</span>
<span class="p_add">+			   mss-&gt;resident &gt;&gt; 10,</span>
<span class="p_add">+			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_add">+			   mss-&gt;shared_clean  &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;shared_dirty  &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;private_clean &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;private_dirty &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;referenced &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;anonymous &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;lazyfree &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;anonymous_thp &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;shmem_thp &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;shared_hugetlb &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;private_hugetlb &gt;&gt; 10,</span>
<span class="p_add">+			   mss-&gt;swap &gt;&gt; 10,</span>
<span class="p_add">+			   (unsigned long)(mss-&gt;swap_pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_add">+			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!rollup_mode) {</span>
<span class="p_add">+		arch_show_smap(m, vma);</span>
<span class="p_add">+		show_smap_vma_flags(m, vma);</span>
<span class="p_add">+	}</span>
 	m_cache_vma(m, vma);
<span class="p_del">-	return 0;</span>
<span class="p_add">+	return ret;</span>
 }
 
 static int show_pid_smap(struct seq_file *m, void *v)
<span class="p_chunk">@@ -836,6 +882,25 @@</span> <span class="p_context"> static int pid_smaps_open(struct inode *inode, struct file *file)</span>
 	return do_maps_open(inode, file, &amp;proc_pid_smaps_op);
 }
 
<span class="p_add">+static int pid_smaps_rollup_open(struct inode *inode, struct file *file)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct seq_file *seq;</span>
<span class="p_add">+	struct proc_maps_private *priv;</span>
<span class="p_add">+	int ret = do_maps_open(inode, file, &amp;proc_pid_smaps_op);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+	seq = file-&gt;private_data;</span>
<span class="p_add">+	priv = seq-&gt;private;</span>
<span class="p_add">+	priv-&gt;rollup = kzalloc(sizeof(*priv-&gt;rollup), GFP_KERNEL);</span>
<span class="p_add">+	if (!priv-&gt;rollup) {</span>
<span class="p_add">+		proc_map_release(inode, file);</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	priv-&gt;rollup-&gt;first = true;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int tid_smaps_open(struct inode *inode, struct file *file)
 {
 	return do_maps_open(inode, file, &amp;proc_tid_smaps_op);
<span class="p_chunk">@@ -848,6 +913,13 @@</span> <span class="p_context"> const struct file_operations proc_pid_smaps_operations = {</span>
 	.release	= proc_map_release,
 };
 
<span class="p_add">+const struct file_operations proc_pid_smaps_rollup_operations = {</span>
<span class="p_add">+	.open		= pid_smaps_rollup_open,</span>
<span class="p_add">+	.read		= seq_read,</span>
<span class="p_add">+	.llseek		= seq_lseek,</span>
<span class="p_add">+	.release	= proc_map_release,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 const struct file_operations proc_tid_smaps_operations = {
 	.open		= tid_smaps_open,
 	.read		= seq_read,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



