
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V9,2/5] x86: acpi: implement arch_apei_get_mem_attributes() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V9,2/5] x86: acpi: implement arch_apei_get_mem_attributes()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 30, 2015, 9:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1438292109-4170-3-git-send-email-zjzhang@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6906951/mbox/"
   >mbox</a>
|
   <a href="/patch/6906951/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6906951/">/patch/6906951/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id D9809C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Jul 2015 21:35:45 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 15F6820637
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Jul 2015 21:35:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 1C30520630
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Jul 2015 21:35:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752860AbbG3Vfb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Jul 2015 17:35:31 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:46629 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752071AbbG3Vf1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Jul 2015 17:35:27 -0400
Received: from smtp.codeaurora.org (localhost [127.0.0.1])
	by smtp.codeaurora.org (Postfix) with ESMTP id 251C0140934;
	Thu, 30 Jul 2015 21:35:27 +0000 (UTC)
Received: by smtp.codeaurora.org (Postfix, from userid 486)
	id 0BBD9140936; Thu, 30 Jul 2015 21:35:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
Received: from zjzhang-lab.qualcomm.com (i-global254.qualcomm.com
	[199.106.103.254])
	(using TLSv1.1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	(Authenticated sender: zjzhang@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 1ECE0140934;
	Thu, 30 Jul 2015 21:35:26 +0000 (UTC)
From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;
To: Matt Fleming &lt;matt.fleming@intel.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, x86@kernel.org,
	ying.huang@intel.com, tony.luck@gmail.com, fu.wei@linaro.org,
	al.stone@linaro.org, bp@alien8.de, rjw@rjwysocki.net,
	catalin.marinas@arm.com, will.deacon@arm.com, hanjun.guo@linaro.org
Cc: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;,
	linux-efi@vger.kernel.org, linux-kernel@vger.kernel.org,
	linaro-acpi@lists.linaro.org, timur@codeaurora.org
Subject: [PATCH V9 2/5] x86: acpi: implement arch_apei_get_mem_attributes()
Date: Thu, 30 Jul 2015 14:35:06 -0700
Message-Id: &lt;1438292109-4170-3-git-send-email-zjzhang@codeaurora.org&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1438292109-4170-1-git-send-email-zjzhang@codeaurora.org&gt;
References: &lt;1438292109-4170-1-git-send-email-zjzhang@codeaurora.org&gt;
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - July 30, 2015, 9:35 p.m.</div>
<pre class="content">
<span class="from">From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>

... to allow arch specific implementation of getting page
protection type associated with a physical address.

On x86, we currently have no way to lookup the EFI memory map
attributes for a region in a consistent way because the
memmap is discarded after efi_free_boot_services(). So if
you call efi_mem_attributes() during boot and at runtime,
you could theoretically see different attributes.

Since we are yet to see any x86 platforms that require
anything other than PAGE_KERNEL (some arm64 platforms
require the equivalent of PAGE_KERNEL_NOCACHE), return that
until we know differently.
<span class="signed-off-by">
Signed-off-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
---
 arch/x86/kernel/acpi/apei.c | 19 +++++++++++++++++++
 include/acpi/apei.h         |  1 +
 2 files changed, 20 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a> - Aug. 3, 2015, 4:22 p.m.</div>
<pre class="content">
On Thu, 30 Jul, at 02:35:06PM, Jonathan (Zhixiong) Zhang wrote:
<span class="quote">&gt; From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... to allow arch specific implementation of getting page</span>
<span class="quote">&gt; protection type associated with a physical address.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On x86, we currently have no way to lookup the EFI memory map</span>
<span class="quote">&gt; attributes for a region in a consistent way because the</span>
<span class="quote">&gt; memmap is discarded after efi_free_boot_services(). So if</span>
<span class="quote">&gt; you call efi_mem_attributes() during boot and at runtime,</span>
<span class="quote">&gt; you could theoretically see different attributes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since we are yet to see any x86 platforms that require</span>
<span class="quote">&gt; anything other than PAGE_KERNEL (some arm64 platforms</span>
<span class="quote">&gt; require the equivalent of PAGE_KERNEL_NOCACHE), return that</span>
<span class="quote">&gt; until we know differently.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/kernel/acpi/apei.c | 19 +++++++++++++++++++</span>
<span class="quote">&gt;  include/acpi/apei.h         |  1 +</span>
<span class="quote">&gt;  2 files changed, 20 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; index c280df6b2aa2..675bd46c4e17 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; @@ -60,3 +60,22 @@ void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	__flush_tlb_one(addr);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * We currently have no way to lookup the EFI memory map</span>
<span class="quote">&gt; +	 * attributes for a region in a consistent way because the</span>
<span class="quote">&gt; +	 * memmap is discarded after efi_free_boot_services(). So if</span>
<span class="quote">&gt; +	 * you call efi_mem_attributes() during boot and at runtime,</span>
<span class="quote">&gt; +	 * you could theoretically see different attributes.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * Since we are yet to see any x86 platforms that require</span>
<span class="quote">&gt; +	 * anything other than PAGE_KERNEL (some arm64 platforms</span>
<span class="quote">&gt; +	 * require the equivalent of PAGE_KERNEL_NOCACHE), return that</span>
<span class="quote">&gt; +	 * until we know differently.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return __pgprot(PAGE_KERNEL);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; diff --git a/include/acpi/apei.h b/include/acpi/apei.h</span>
<span class="quote">&gt; index 284801ac7042..64a12ce9880b 100644</span>
<span class="quote">&gt; --- a/include/acpi/apei.h</span>
<span class="quote">&gt; +++ b/include/acpi/apei.h</span>
<span class="quote">&gt; @@ -46,6 +46,7 @@ int erst_clear(u64 record_id);</span>
<span class="quote">&gt;  int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data);</span>
<span class="quote">&gt;  void arch_apei_report_mem_error(int sev, struct cper_sec_mem_err *mem_err);</span>
<span class="quote">&gt;  void arch_apei_flush_tlb_one(unsigned long addr);</span>
<span class="quote">&gt; +pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  #endif</span>

This doesn&#39;t compile :(

/home/matt/src/kernels/efi/arch/x86/kernel/acpi/apei.c:64:24: error: static declaration of ‘arch_apei_get_mem_attribute’ follows non-static declaration
 static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
                        ^
In file included from /home/matt/src/kernels/efi/arch/x86/kernel/acpi/apei.c:15:0:
/home/matt/src/kernels/efi/include/acpi/apei.h:48:10: note: previous declaration of ‘arch_apei_get_mem_attribute’ was here
 pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);
          ^
/home/matt/src/kernels/efi/arch/x86/kernel/acpi/apei.c: In function ‘arch_apei_get_mem_attribute’:
/home/matt/src/kernels/efi/arch/x86/kernel/acpi/apei.c:80:2: error: incompatible types when initializing type ‘long unsigned int’ using type ‘pgprot_t’
  return __pgprot(PAGE_KERNEL);
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">index c280df6b2aa2..675bd46c4e17 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_chunk">@@ -60,3 +60,22 @@</span> <span class="p_context"> void arch_apei_flush_tlb_one(unsigned long addr)</span>
 {
 	__flush_tlb_one(addr);
 }
<span class="p_add">+</span>
<span class="p_add">+static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We currently have no way to lookup the EFI memory map</span>
<span class="p_add">+	 * attributes for a region in a consistent way because the</span>
<span class="p_add">+	 * memmap is discarded after efi_free_boot_services(). So if</span>
<span class="p_add">+	 * you call efi_mem_attributes() during boot and at runtime,</span>
<span class="p_add">+	 * you could theoretically see different attributes.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Since we are yet to see any x86 platforms that require</span>
<span class="p_add">+	 * anything other than PAGE_KERNEL (some arm64 platforms</span>
<span class="p_add">+	 * require the equivalent of PAGE_KERNEL_NOCACHE), return that</span>
<span class="p_add">+	 * until we know differently.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+</span>
<span class="p_add">+	return __pgprot(PAGE_KERNEL);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/include/acpi/apei.h b/include/acpi/apei.h</span>
<span class="p_header">index 284801ac7042..64a12ce9880b 100644</span>
<span class="p_header">--- a/include/acpi/apei.h</span>
<span class="p_header">+++ b/include/acpi/apei.h</span>
<span class="p_chunk">@@ -46,6 +46,7 @@</span> <span class="p_context"> int erst_clear(u64 record_id);</span>
 int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data);
 void arch_apei_report_mem_error(int sev, struct cper_sec_mem_err *mem_err);
 void arch_apei_flush_tlb_one(unsigned long addr);
<span class="p_add">+pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
 
 #endif
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



