
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,05/10] mm: thp: enable thp migration in generic path - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,05/10] mm: thp: enable thp migration in generic path</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168825">Zi Yan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 1, 2017, 1:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170701134008.110579-6-zi.yan@sent.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9820869/mbox/"
   >mbox</a>
|
   <a href="/patch/9820869/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9820869/">/patch/9820869/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BB13C603F2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  1 Jul 2017 13:42:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AC05628404
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  1 Jul 2017 13:42:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9FF1C28582; Sat,  1 Jul 2017 13:42:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9748A28404
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  1 Jul 2017 13:42:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752357AbdGANmK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 1 Jul 2017 09:42:10 -0400
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:45609 &quot;EHLO
	out1-smtp.messagingengine.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751922AbdGANkx (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 1 Jul 2017 09:40:53 -0400
Received: from compute3.internal (compute3.nyi.internal [10.202.2.43])
	by mailout.nyi.internal (Postfix) with ESMTP id DD8FB2095A;
	Sat,  1 Jul 2017 09:40:51 -0400 (EDT)
Received: from frontend1 ([10.202.2.160])
	by compute3.internal (MEProxy); Sat, 01 Jul 2017 09:40:51 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=sent.com; h=cc
	:date:from:in-reply-to:message-id:references:subject:to
	:x-me-sender:x-me-sender:x-sasl-enc:x-sasl-enc; s=fm1; bh=DdUYza
	fwbHedm/4X7k/elzhOCxlgv9YbuQ/rhRBKj0w=; b=Bsjkaoqc4VziN1VJ2I85Z0
	5CjtlQC0mIvrcQg8D6APWwd47WlYdPSdjKIotNcMUKEbyWNsTLw7KzxZQP8dzPz1
	TTRdaeFhT11HdaUSBSBGSSpIhrNm/pWng69KyS2hgZyigd0mT4GKT/aUMDCH0FA8
	vAH5cLxAubks8FjWIGNDz5ZZtzP4FOT1Xd468SKjuvYKZAd4Kyzf+Kn/tgtqozPC
	QSKjNX+3WzbST8Oj8DmNx9KLsMD3MC+mFGDL6iwuAhIEynv2+MK6Rk9gvT7BPX02
	qnhq/4CNiPqy7/rthNPqTZ9MzH30Gqt/Rovz46YDziT7xbFLapI1iReP6hs2XPpA
	==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-sender:x-me-sender:x-sasl-enc
	:x-sasl-enc; s=fm1; bh=DdUYzafwbHedm/4X7k/elzhOCxlgv9YbuQ/rhRBKj
	0w=; b=GSJhbwqDxmeQ1YjsffiOEaPMEniV2RvanvC8rHPHNesIMDN9YcwB3fMeT
	gxfbRWeiEbvKUDP3tbErowyDuN8pEZ6Q6KTtLovXPMt38CFbg7O+JNVnHUmk0nIl
	f7+/ld5Pd2l7pGOdAnrInFxJVxh5lUwviczVPhGUp12g+w7A3gbRkYkMvPXy792Y
	n2VJOROAl8NTsnx6vGdzBfyQJ+K3K/wZkfj74JMCLbgenQXWxlxA9Yd+9C8dTX8A
	eB7J1OLr400tQfVummTzlaaUcIjYATRSRel0ty98YyNET1npn0QEEn9cnbKOMMHN
	8j9xr7wy5u6adUcdVJjswlpHbdJxg==
X-ME-Sender: &lt;xms:Y6ZXWU71YTW8lBP7yvhdlITpKcbGlnFNH46jTIJKTQKXnChCVsaE5Q&gt;
X-Sasl-enc: UFbevQN50LzZ9lHbJN58ndvqmB+l0OuRzRkiZbgM4cNF 1498916451
Received: from tenansix.rutgers.edu (pool-165-230-225-59.nat.rutgers.edu
	[165.230.225.59])
	by mail.messagingengine.com (Postfix) with ESMTPA id 6F0BA7E070;
	Sat,  1 Jul 2017 09:40:51 -0400 (EDT)
From: Zi Yan &lt;zi.yan@sent.com&gt;
To: kirill.shutemov@linux.intel.com, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: akpm@linux-foundation.org, minchan@kernel.org, vbabka@suse.cz,
	mgorman@techsingularity.net, mhocko@kernel.org,
	khandual@linux.vnet.ibm.com, zi.yan@cs.rutgers.edu,
	dnellans@nvidia.com, dave.hansen@intel.com, n-horiguchi@ah.jp.nec.com
Subject: [PATCH v8 05/10] mm: thp: enable thp migration in generic path
Date: Sat,  1 Jul 2017 09:40:03 -0400
Message-Id: &lt;20170701134008.110579-6-zi.yan@sent.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170701134008.110579-1-zi.yan@sent.com&gt;
References: &lt;20170701134008.110579-1-zi.yan@sent.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168825">Zi Yan</a> - July 1, 2017, 1:40 p.m.</div>
<pre class="content">
<span class="from">From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>

This patch adds thp migration&#39;s core code, including conversions
between a PMD entry and a swap entry, setting PMD migration entry,
removing PMD migration entry, and waiting on PMD migration entries.

This patch makes it possible to support thp migration.
If you fail to allocate a destination page as a thp, you just split
the source thp as we do now, and then enter the normal page migration.
If you succeed to allocate destination thp, you enter thp migration.
Subsequent patches actually enable thp migration for each caller of
page migration by allowing its get_new_page() callback to
allocate thps.

ChangeLog v1 -&gt; v2:
- support pte-mapped thp, doubly-mapped thp
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

ChangeLog v2 -&gt; v3:
- use page_vma_mapped_walk()
- use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in
  set_pmd_migration_entry()

ChangeLog v3 -&gt; v4:
- factor out the code of removing pte pgtable page in zap_huge_pmd()

ChangeLog v4 -&gt; v5:
- remove unnecessary PTE-mapped THP code in remove_migration_pmd()
  and set_pmd_migration_entry()
- restructure the code in zap_huge_pmd() to avoid factoring out
  the pte pgtable page code
- in zap_huge_pmd(), check that PMD swap entries are migration entries
- change author information

ChangeLog v5 -&gt; v7
- use macro to disable the code when thp migration is not enabled

ChangeLog v7 -&gt; v8
- use IS_ENABLED instead of macro to make code look clean in
  zap_huge_pmd() and page_vma_mapped_walk()
- remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to
  avoid compilation error
- rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in
  zap_huge_pmd() to make code more descriptive
- use pmdp_invalidate() in set_pmd_migration_entry() to avoid race
  with MADV_DONTNEED
- remove unnecessary tlb flush in remove_migration_pmd()
- add the missing migration flag check in page_vma_mapped_walk()
<span class="signed-off-by">
Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
---
 arch/x86/include/asm/pgtable_64.h |  2 +
 include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-
 mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---
 mm/migrate.c                      | 32 ++++++++++++++-
 mm/page_vma_mapped.c              | 18 +++++++--
 mm/pgtable-generic.c              |  3 +-
 mm/rmap.c                         | 13 ++++++
 7 files changed, 207 insertions(+), 12 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 2, 2017, 5:57 p.m.</div>
<pre class="content">
On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:
<span class="quote">&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	bool ret = true;</span>
<span class="quote">&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt;  		return true;</span>

With exception of this useless hunk, looks good to me
<span class="acked-by">
Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168825">Zi Yan</a> - July 3, 2017, 1:26 a.m.</div>
<pre class="content">
On 2 Jul 2017, at 13:57, Kirill A. Shutemov wrote:
<span class="quote">
&gt; On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt;&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt;&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt;&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  	bool ret = true;</span>
<span class="quote">&gt;&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt;&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt;&gt;  		return true;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; With exception of this useless hunk, looks good to me</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt;</span>

Thanks.

BTW, is this Acked-by for Patch 5 or both Path 5 and 6?

--
Best Regards
Yan Zi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - July 11, 2017, 6:47 a.m.</div>
<pre class="content">
On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:
<span class="quote">&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch adds thp migration&#39;s core code, including conversions</span>
<span class="quote">&gt; between a PMD entry and a swap entry, setting PMD migration entry,</span>
<span class="quote">&gt; removing PMD migration entry, and waiting on PMD migration entries.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch makes it possible to support thp migration.</span>
<span class="quote">&gt; If you fail to allocate a destination page as a thp, you just split</span>
<span class="quote">&gt; the source thp as we do now, and then enter the normal page migration.</span>
<span class="quote">&gt; If you succeed to allocate destination thp, you enter thp migration.</span>
<span class="quote">&gt; Subsequent patches actually enable thp migration for each caller of</span>
<span class="quote">&gt; page migration by allowing its get_new_page() callback to</span>
<span class="quote">&gt; allocate thps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v2 -&gt; v3:</span>
<span class="quote">&gt; - use page_vma_mapped_walk()</span>
<span class="quote">&gt; - use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in</span>
<span class="quote">&gt;   set_pmd_migration_entry()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v3 -&gt; v4:</span>
<span class="quote">&gt; - factor out the code of removing pte pgtable page in zap_huge_pmd()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v4 -&gt; v5:</span>
<span class="quote">&gt; - remove unnecessary PTE-mapped THP code in remove_migration_pmd()</span>
<span class="quote">&gt;   and set_pmd_migration_entry()</span>
<span class="quote">&gt; - restructure the code in zap_huge_pmd() to avoid factoring out</span>
<span class="quote">&gt;   the pte pgtable page code</span>
<span class="quote">&gt; - in zap_huge_pmd(), check that PMD swap entries are migration entries</span>
<span class="quote">&gt; - change author information</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v5 -&gt; v7</span>
<span class="quote">&gt; - use macro to disable the code when thp migration is not enabled</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ChangeLog v7 -&gt; v8</span>
<span class="quote">&gt; - use IS_ENABLED instead of macro to make code look clean in</span>
<span class="quote">&gt;   zap_huge_pmd() and page_vma_mapped_walk()</span>
<span class="quote">&gt; - remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to</span>
<span class="quote">&gt;   avoid compilation error</span>
<span class="quote">&gt; - rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in</span>
<span class="quote">&gt;   zap_huge_pmd() to make code more descriptive</span>
<span class="quote">&gt; - use pmdp_invalidate() in set_pmd_migration_entry() to avoid race</span>
<span class="quote">&gt;   with MADV_DONTNEED</span>
<span class="quote">&gt; - remove unnecessary tlb flush in remove_migration_pmd()</span>
<span class="quote">&gt; - add the missing migration flag check in page_vma_mapped_walk()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt;  mm/migrate.c                      | 32 ++++++++++++++-</span>
<span class="quote">&gt;  mm/page_vma_mapped.c              | 18 +++++++--</span>
<span class="quote">&gt;  mm/pgtable-generic.c              |  3 +-</span>
<span class="quote">&gt;  mm/rmap.c                         | 13 ++++++</span>
<span class="quote">&gt;  7 files changed, 207 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt; </span>
...
<span class="quote">
&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="quote">&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	bool ret = true;</span>
<span class="quote">&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt;  		return true;</span>
<span class="quote">&gt; @@ -1312,6 +1313,18 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	while (page_vma_mapped_walk(&amp;pvmw)) {</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +		/* PMD-mapped THP migration entry */</span>
<span class="quote">&gt; +		if (flags &amp; TTU_MIGRATION) {</span>

My testing based on mmotm-2017-07-06-16-18 showed that migrating shmem thp
caused kernel crash. I don&#39;t think this is critical because that case is
just not-prepared yet. So in order to avoid the crash, please add
PageAnon(page) check here. This makes shmem thp migration just fail.

+			if (!PageAnon(page))
+				continue;
<span class="quote">
&gt; +			if (!pvmw.pte &amp;&amp; page) {</span>

Just from curiosity, do we really need this page check?
try_to_unmap() always passes down the parameter &#39;page&#39; to try_to_unmap_one()
via rmap_walk_* family, so I think we can assume page is always non-NULL.

Thanks,
Naoya Horiguchi
<span class="quote">
&gt; +				VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page),</span>
<span class="quote">&gt; +						page);</span>
<span class="quote">&gt; +				set_pmd_migration_entry(&amp;pvmw, page);</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			}</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt;  		 * If the page is mlock()d, we cannot swap it out.</span>
<span class="quote">&gt;  		 * If it&#39;s recently referenced (perhaps page_referenced</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.11.0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123671">Zi Yan</a> - July 11, 2017, 2 p.m.</div>
<pre class="content">
On 11 Jul 2017, at 2:47, Naoya Horiguchi wrote:
<span class="quote">
&gt; On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt;&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch adds thp migration&#39;s core code, including conversions</span>
<span class="quote">&gt;&gt; between a PMD entry and a swap entry, setting PMD migration entry,</span>
<span class="quote">&gt;&gt; removing PMD migration entry, and waiting on PMD migration entries.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch makes it possible to support thp migration.</span>
<span class="quote">&gt;&gt; If you fail to allocate a destination page as a thp, you just split</span>
<span class="quote">&gt;&gt; the source thp as we do now, and then enter the normal page migration.</span>
<span class="quote">&gt;&gt; If you succeed to allocate destination thp, you enter thp migration.</span>
<span class="quote">&gt;&gt; Subsequent patches actually enable thp migration for each caller of</span>
<span class="quote">&gt;&gt; page migration by allowing its get_new_page() callback to</span>
<span class="quote">&gt;&gt; allocate thps.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt;&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v2 -&gt; v3:</span>
<span class="quote">&gt;&gt; - use page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt; - use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in</span>
<span class="quote">&gt;&gt;   set_pmd_migration_entry()</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v3 -&gt; v4:</span>
<span class="quote">&gt;&gt; - factor out the code of removing pte pgtable page in zap_huge_pmd()</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v4 -&gt; v5:</span>
<span class="quote">&gt;&gt; - remove unnecessary PTE-mapped THP code in remove_migration_pmd()</span>
<span class="quote">&gt;&gt;   and set_pmd_migration_entry()</span>
<span class="quote">&gt;&gt; - restructure the code in zap_huge_pmd() to avoid factoring out</span>
<span class="quote">&gt;&gt;   the pte pgtable page code</span>
<span class="quote">&gt;&gt; - in zap_huge_pmd(), check that PMD swap entries are migration entries</span>
<span class="quote">&gt;&gt; - change author information</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v5 -&gt; v7</span>
<span class="quote">&gt;&gt; - use macro to disable the code when thp migration is not enabled</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ChangeLog v7 -&gt; v8</span>
<span class="quote">&gt;&gt; - use IS_ENABLED instead of macro to make code look clean in</span>
<span class="quote">&gt;&gt;   zap_huge_pmd() and page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt; - remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to</span>
<span class="quote">&gt;&gt;   avoid compilation error</span>
<span class="quote">&gt;&gt; - rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in</span>
<span class="quote">&gt;&gt;   zap_huge_pmd() to make code more descriptive</span>
<span class="quote">&gt;&gt; - use pmdp_invalidate() in set_pmd_migration_entry() to avoid race</span>
<span class="quote">&gt;&gt;   with MADV_DONTNEED</span>
<span class="quote">&gt;&gt; - remove unnecessary tlb flush in remove_migration_pmd()</span>
<span class="quote">&gt;&gt; - add the missing migration flag check in page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt; Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt;&gt;  include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;&gt;  mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt;&gt;  mm/migrate.c                      | 32 ++++++++++++++-</span>
<span class="quote">&gt;&gt;  mm/page_vma_mapped.c              | 18 +++++++--</span>
<span class="quote">&gt;&gt;  mm/pgtable-generic.c              |  3 +-</span>
<span class="quote">&gt;&gt;  mm/rmap.c                         | 13 ++++++</span>
<span class="quote">&gt;&gt;  7 files changed, 207 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt;&gt; index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="quote">&gt;&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt;&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt;&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  	bool ret = true;</span>
<span class="quote">&gt;&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt;&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt;&gt;  		return true;</span>
<span class="quote">&gt;&gt; @@ -1312,6 +1313,18 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	while (page_vma_mapped_walk(&amp;pvmw)) {</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt;&gt; +		/* PMD-mapped THP migration entry */</span>
<span class="quote">&gt;&gt; +		if (flags &amp; TTU_MIGRATION) {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; My testing based on mmotm-2017-07-06-16-18 showed that migrating shmem thp</span>
<span class="quote">&gt; caused kernel crash. I don&#39;t think this is critical because that case is</span>
<span class="quote">&gt; just not-prepared yet. So in order to avoid the crash, please add</span>
<span class="quote">&gt; PageAnon(page) check here. This makes shmem thp migration just fail.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +			if (!PageAnon(page))</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt;</span>

Thanks for your testing. I will add this check in my next version.
<span class="quote">

&gt;&gt; +			if (!pvmw.pte &amp;&amp; page) {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Just from curiosity, do we really need this page check?</span>
<span class="quote">&gt; try_to_unmap() always passes down the parameter &#39;page&#39; to try_to_unmap_one()</span>
<span class="quote">&gt; via rmap_walk_* family, so I think we can assume page is always non-NULL.</span>

You are right. Checking page is not necessary here. I will remove it in my
next version.



--
Best Regards
Yan Zi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - July 13, 2017, 9:30 a.m.</div>
<pre class="content">
On Tue, Jul 11, 2017 at 10:00:30AM -0400, Zi Yan wrote:
<span class="quote">&gt; On 11 Jul 2017, at 2:47, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt; &gt;&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; This patch adds thp migration&#39;s core code, including conversions</span>
<span class="quote">&gt; &gt;&gt; between a PMD entry and a swap entry, setting PMD migration entry,</span>
<span class="quote">&gt; &gt;&gt; removing PMD migration entry, and waiting on PMD migration entries.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; This patch makes it possible to support thp migration.</span>
<span class="quote">&gt; &gt;&gt; If you fail to allocate a destination page as a thp, you just split</span>
<span class="quote">&gt; &gt;&gt; the source thp as we do now, and then enter the normal page migration.</span>
<span class="quote">&gt; &gt;&gt; If you succeed to allocate destination thp, you enter thp migration.</span>
<span class="quote">&gt; &gt;&gt; Subsequent patches actually enable thp migration for each caller of</span>
<span class="quote">&gt; &gt;&gt; page migration by allowing its get_new_page() callback to</span>
<span class="quote">&gt; &gt;&gt; allocate thps.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; &gt;&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v2 -&gt; v3:</span>
<span class="quote">&gt; &gt;&gt; - use page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt; - use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in</span>
<span class="quote">&gt; &gt;&gt;   set_pmd_migration_entry()</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v3 -&gt; v4:</span>
<span class="quote">&gt; &gt;&gt; - factor out the code of removing pte pgtable page in zap_huge_pmd()</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v4 -&gt; v5:</span>
<span class="quote">&gt; &gt;&gt; - remove unnecessary PTE-mapped THP code in remove_migration_pmd()</span>
<span class="quote">&gt; &gt;&gt;   and set_pmd_migration_entry()</span>
<span class="quote">&gt; &gt;&gt; - restructure the code in zap_huge_pmd() to avoid factoring out</span>
<span class="quote">&gt; &gt;&gt;   the pte pgtable page code</span>
<span class="quote">&gt; &gt;&gt; - in zap_huge_pmd(), check that PMD swap entries are migration entries</span>
<span class="quote">&gt; &gt;&gt; - change author information</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v5 -&gt; v7</span>
<span class="quote">&gt; &gt;&gt; - use macro to disable the code when thp migration is not enabled</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; ChangeLog v7 -&gt; v8</span>
<span class="quote">&gt; &gt;&gt; - use IS_ENABLED instead of macro to make code look clean in</span>
<span class="quote">&gt; &gt;&gt;   zap_huge_pmd() and page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt; - remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to</span>
<span class="quote">&gt; &gt;&gt;   avoid compilation error</span>
<span class="quote">&gt; &gt;&gt; - rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in</span>
<span class="quote">&gt; &gt;&gt;   zap_huge_pmd() to make code more descriptive</span>
<span class="quote">&gt; &gt;&gt; - use pmdp_invalidate() in set_pmd_migration_entry() to avoid race</span>
<span class="quote">&gt; &gt;&gt;   with MADV_DONTNEED</span>
<span class="quote">&gt; &gt;&gt; - remove unnecessary tlb flush in remove_migration_pmd()</span>
<span class="quote">&gt; &gt;&gt; - add the missing migration flag check in page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt; &gt;&gt;  include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt; &gt;&gt;  mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt; &gt;&gt;  mm/migrate.c                      | 32 ++++++++++++++-</span>
<span class="quote">&gt; &gt;&gt;  mm/page_vma_mapped.c              | 18 +++++++--</span>
<span class="quote">&gt; &gt;&gt;  mm/pgtable-generic.c              |  3 +-</span>
<span class="quote">&gt; &gt;&gt;  mm/rmap.c                         | 13 ++++++</span>
<span class="quote">&gt; &gt;&gt;  7 files changed, 207 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; ...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt; index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;  	bool ret = true;</span>
<span class="quote">&gt; &gt;&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt; &gt;&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt; &gt;&gt;  		return true;</span>
<span class="quote">&gt; &gt;&gt; @@ -1312,6 +1313,18 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;  	}</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  	while (page_vma_mapped_walk(&amp;pvmw)) {</span>
<span class="quote">&gt; &gt;&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt;&gt; +		/* PMD-mapped THP migration entry */</span>
<span class="quote">&gt; &gt;&gt; +		if (flags &amp; TTU_MIGRATION) {</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; My testing based on mmotm-2017-07-06-16-18 showed that migrating shmem thp</span>
<span class="quote">&gt; &gt; caused kernel crash. I don&#39;t think this is critical because that case is</span>
<span class="quote">&gt; &gt; just not-prepared yet. So in order to avoid the crash, please add</span>
<span class="quote">&gt; &gt; PageAnon(page) check here. This makes shmem thp migration just fail.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +			if (!PageAnon(page))</span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for your testing. I will add this check in my next version.</span>

Sorry, the code I&#39;m suggesting above doesn&#39;t work because it makes normal
pagecache migration fail.  This check should come after making sure that
pvmw.pte is NULL.

Thanks,
Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123671">Zi Yan</a> - July 13, 2017, 11:28 a.m.</div>
<pre class="content">
On 13 Jul 2017, at 5:30, Naoya Horiguchi wrote:
<span class="quote">
&gt; On Tue, Jul 11, 2017 at 10:00:30AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt;&gt; On 11 Jul 2017, at 2:47, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; This patch adds thp migration&#39;s core code, including conversions</span>
<span class="quote">&gt;&gt;&gt;&gt; between a PMD entry and a swap entry, setting PMD migration entry,</span>
<span class="quote">&gt;&gt;&gt;&gt; removing PMD migration entry, and waiting on PMD migration entries.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; This patch makes it possible to support thp migration.</span>
<span class="quote">&gt;&gt;&gt;&gt; If you fail to allocate a destination page as a thp, you just split</span>
<span class="quote">&gt;&gt;&gt;&gt; the source thp as we do now, and then enter the normal page migration.</span>
<span class="quote">&gt;&gt;&gt;&gt; If you succeed to allocate destination thp, you enter thp migration.</span>
<span class="quote">&gt;&gt;&gt;&gt; Subsequent patches actually enable thp migration for each caller of</span>
<span class="quote">&gt;&gt;&gt;&gt; page migration by allowing its get_new_page() callback to</span>
<span class="quote">&gt;&gt;&gt;&gt; allocate thps.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt;&gt;&gt;&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v2 -&gt; v3:</span>
<span class="quote">&gt;&gt;&gt;&gt; - use page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt;&gt;&gt; - use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in</span>
<span class="quote">&gt;&gt;&gt;&gt;   set_pmd_migration_entry()</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v3 -&gt; v4:</span>
<span class="quote">&gt;&gt;&gt;&gt; - factor out the code of removing pte pgtable page in zap_huge_pmd()</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v4 -&gt; v5:</span>
<span class="quote">&gt;&gt;&gt;&gt; - remove unnecessary PTE-mapped THP code in remove_migration_pmd()</span>
<span class="quote">&gt;&gt;&gt;&gt;   and set_pmd_migration_entry()</span>
<span class="quote">&gt;&gt;&gt;&gt; - restructure the code in zap_huge_pmd() to avoid factoring out</span>
<span class="quote">&gt;&gt;&gt;&gt;   the pte pgtable page code</span>
<span class="quote">&gt;&gt;&gt;&gt; - in zap_huge_pmd(), check that PMD swap entries are migration entries</span>
<span class="quote">&gt;&gt;&gt;&gt; - change author information</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v5 -&gt; v7</span>
<span class="quote">&gt;&gt;&gt;&gt; - use macro to disable the code when thp migration is not enabled</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ChangeLog v7 -&gt; v8</span>
<span class="quote">&gt;&gt;&gt;&gt; - use IS_ENABLED instead of macro to make code look clean in</span>
<span class="quote">&gt;&gt;&gt;&gt;   zap_huge_pmd() and page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt;&gt;&gt; - remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to</span>
<span class="quote">&gt;&gt;&gt;&gt;   avoid compilation error</span>
<span class="quote">&gt;&gt;&gt;&gt; - rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in</span>
<span class="quote">&gt;&gt;&gt;&gt;   zap_huge_pmd() to make code more descriptive</span>
<span class="quote">&gt;&gt;&gt;&gt; - use pmdp_invalidate() in set_pmd_migration_entry() to avoid race</span>
<span class="quote">&gt;&gt;&gt;&gt;   with MADV_DONTNEED</span>
<span class="quote">&gt;&gt;&gt;&gt; - remove unnecessary tlb flush in remove_migration_pmd()</span>
<span class="quote">&gt;&gt;&gt;&gt; - add the missing migration flag check in page_vma_mapped_walk()</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt;&gt;&gt;&gt;  include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;&gt;&gt;&gt;  mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt;&gt;&gt;&gt;  mm/migrate.c                      | 32 ++++++++++++++-</span>
<span class="quote">&gt;&gt;&gt;&gt;  mm/page_vma_mapped.c              | 18 +++++++--</span>
<span class="quote">&gt;&gt;&gt;&gt;  mm/pgtable-generic.c              |  3 +-</span>
<span class="quote">&gt;&gt;&gt;&gt;  mm/rmap.c                         | 13 ++++++</span>
<span class="quote">&gt;&gt;&gt;&gt;  7 files changed, 207 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; ...</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;&gt;&gt;  	bool ret = true;</span>
<span class="quote">&gt;&gt;&gt;&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt;&gt;&gt;&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt;&gt;&gt;&gt;  		return true;</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -1312,6 +1313,18 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  	while (page_vma_mapped_walk(&amp;pvmw)) {</span>
<span class="quote">&gt;&gt;&gt;&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt;&gt;&gt;&gt; +		/* PMD-mapped THP migration entry */</span>
<span class="quote">&gt;&gt;&gt;&gt; +		if (flags &amp; TTU_MIGRATION) {</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; My testing based on mmotm-2017-07-06-16-18 showed that migrating shmem thp</span>
<span class="quote">&gt;&gt;&gt; caused kernel crash. I don&#39;t think this is critical because that case is</span>
<span class="quote">&gt;&gt;&gt; just not-prepared yet. So in order to avoid the crash, please add</span>
<span class="quote">&gt;&gt;&gt; PageAnon(page) check here. This makes shmem thp migration just fail.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; +			if (!PageAnon(page))</span>
<span class="quote">&gt;&gt;&gt; +				continue;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks for your testing. I will add this check in my next version.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Sorry, the code I&#39;m suggesting above doesn&#39;t work because it makes normal</span>
<span class="quote">&gt; pagecache migration fail.  This check should come after making sure that</span>
<span class="quote">&gt; pvmw.pte is NULL.</span>

Right. I think the two ifs are confusing. Replacing the chunk with:

if (!pvmw.pte &amp;&amp; (flags &amp; TTU_MIGRATION)) {
    VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page),
            page);

    if (!PageAnon(page))
        continue;

    set_pmd_migration_entry(&amp;pvmw, page);
    continue;
}

would be better.

BTW, is your page migration test suite available online? If so, I could use
it to test my code.

Thanks.



—
Best Regards,
Yan Zi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - July 14, 2017, 12:06 a.m.</div>
<pre class="content">
On Thu, Jul 13, 2017 at 07:28:24AM -0400, Zi Yan wrote:
<span class="quote">&gt; On 13 Jul 2017, at 5:30, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Tue, Jul 11, 2017 at 10:00:30AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt; &gt;&gt; On 11 Jul 2017, at 2:47, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; On Sat, Jul 01, 2017 at 09:40:03AM -0400, Zi Yan wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; From: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; This patch adds thp migration&#39;s core code, including conversions</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; between a PMD entry and a swap entry, setting PMD migration entry,</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; removing PMD migration entry, and waiting on PMD migration entries.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; This patch makes it possible to support thp migration.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; If you fail to allocate a destination page as a thp, you just split</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; the source thp as we do now, and then enter the normal page migration.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; If you succeed to allocate destination thp, you enter thp migration.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Subsequent patches actually enable thp migration for each caller of</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; page migration by allowing its get_new_page() callback to</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; allocate thps.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v2 -&gt; v3:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - use page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - use pmdp_huge_clear_flush() instead of pmdp_huge_get_and_clear() in</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   set_pmd_migration_entry()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v3 -&gt; v4:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - factor out the code of removing pte pgtable page in zap_huge_pmd()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v4 -&gt; v5:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - remove unnecessary PTE-mapped THP code in remove_migration_pmd()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   and set_pmd_migration_entry()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - restructure the code in zap_huge_pmd() to avoid factoring out</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   the pte pgtable page code</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - in zap_huge_pmd(), check that PMD swap entries are migration entries</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - change author information</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v5 -&gt; v7</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - use macro to disable the code when thp migration is not enabled</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ChangeLog v7 -&gt; v8</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - use IS_ENABLED instead of macro to make code look clean in</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   zap_huge_pmd() and page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - remove BUILD_BUG() in pmd_to_swp_entry() and swp_entry_to_pmd() to</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   avoid compilation error</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - rename variable &#39;migration&#39; to &#39;flush_needed&#39; and invert the logic in</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   zap_huge_pmd() to make code more descriptive</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - use pmdp_invalidate() in set_pmd_migration_entry() to avoid race</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;   with MADV_DONTNEED</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - remove unnecessary tlb flush in remove_migration_pmd()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; - add the missing migration flag check in page_vma_mapped_walk()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Signed-off-by: Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  arch/x86/include/asm/pgtable_64.h |  2 +</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  include/linux/swapops.h           | 67 ++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  mm/huge_memory.c                  | 84 ++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  mm/migrate.c                      | 32 ++++++++++++++-</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  mm/page_vma_mapped.c              | 18 +++++++--</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  mm/pgtable-generic.c              |  3 +-</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  mm/rmap.c                         | 13 ++++++</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  7 files changed, 207 insertions(+), 12 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; ...</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; @@ -1302,6 +1302,7 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	bool ret = true;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	enum ttu_flags flags = (enum ttu_flags)arg;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	/* munlock has nothing to gain from examining un-locked vmas */</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  		return true;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; @@ -1312,6 +1313,18 @@ static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	}</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;  	while (page_vma_mapped_walk(&amp;pvmw)) {</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; +		/* PMD-mapped THP migration entry */</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; +		if (flags &amp; TTU_MIGRATION) {</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; My testing based on mmotm-2017-07-06-16-18 showed that migrating shmem thp</span>
<span class="quote">&gt; &gt;&gt;&gt; caused kernel crash. I don&#39;t think this is critical because that case is</span>
<span class="quote">&gt; &gt;&gt;&gt; just not-prepared yet. So in order to avoid the crash, please add</span>
<span class="quote">&gt; &gt;&gt;&gt; PageAnon(page) check here. This makes shmem thp migration just fail.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; +			if (!PageAnon(page))</span>
<span class="quote">&gt; &gt;&gt;&gt; +				continue;</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Thanks for your testing. I will add this check in my next version.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Sorry, the code I&#39;m suggesting above doesn&#39;t work because it makes normal</span>
<span class="quote">&gt; &gt; pagecache migration fail.  This check should come after making sure that</span>
<span class="quote">&gt; &gt; pvmw.pte is NULL.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right. I think the two ifs are confusing. Replacing the chunk with:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; if (!pvmw.pte &amp;&amp; (flags &amp; TTU_MIGRATION)) {</span>
<span class="quote">&gt;     VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page),</span>
<span class="quote">&gt;             page);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     if (!PageAnon(page))</span>
<span class="quote">&gt;         continue;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     set_pmd_migration_entry(&amp;pvmw, page);</span>
<span class="quote">&gt;     continue;</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; would be better.</span>

Yes, it looks good.
<span class="quote">
&gt; </span>
<span class="quote">&gt; BTW, is your page migration test suite available online? If so, I could use</span>
<span class="quote">&gt; it to test my code.</span>

Please refer to https://github.com/Naoya-Horiguchi/mm_regression.

Thanks,
Naoya Horiguchi
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 45b7a4094de0..eac7f8cf4ae0 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -208,7 +208,9 @@</span> <span class="p_context"> static inline int pgd_large(pgd_t pgd) { return 0; }</span>
 					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \
 					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
<span class="p_add">+#define __pmd_to_swp_entry(pmd)		((swp_entry_t) { pmd_val((pmd)) })</span>
 #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })
<span class="p_add">+#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
 
 extern int kern_addr_valid(unsigned long addr);
 extern void cleanup_highmap(void);
<span class="p_header">diff --git a/include/linux/swapops.h b/include/linux/swapops.h</span>
<span class="p_header">index c5ff7b217ee6..c8c6511750f1 100644</span>
<span class="p_header">--- a/include/linux/swapops.h</span>
<span class="p_header">+++ b/include/linux/swapops.h</span>
<span class="p_chunk">@@ -103,7 +103,8 @@</span> <span class="p_context"> static inline void *swp_to_radix_entry(swp_entry_t entry)</span>
 #ifdef CONFIG_MIGRATION
 static inline swp_entry_t make_migration_entry(struct page *page, int write)
 {
<span class="p_del">-	BUG_ON(!PageLocked(page));</span>
<span class="p_add">+	BUG_ON(!PageLocked(compound_head(page)));</span>
<span class="p_add">+</span>
 	return swp_entry(write ? SWP_MIGRATION_WRITE : SWP_MIGRATION_READ,
 			page_to_pfn(page));
 }
<span class="p_chunk">@@ -126,7 +127,7 @@</span> <span class="p_context"> static inline struct page *migration_entry_to_page(swp_entry_t entry)</span>
 	 * Any use of migration entries may only occur while the
 	 * corresponding page is locked
 	 */
<span class="p_del">-	BUG_ON(!PageLocked(p));</span>
<span class="p_add">+	BUG_ON(!PageLocked(compound_head(p)));</span>
 	return p;
 }
 
<span class="p_chunk">@@ -163,6 +164,68 @@</span> <span class="p_context"> static inline int is_write_migration_entry(swp_entry_t entry)</span>
 
 #endif
 
<span class="p_add">+struct page_vma_mapped_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+extern void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void remove_migration_pmd(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *new);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="p_add">+	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="p_add">+	return __swp_entry_to_pmd(arch_entry);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void remove_migration_pmd(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *new)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return swp_entry(0, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (pmd_t){ 0 };</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MEMORY_FAILURE
 
 extern atomic_long_t num_poisoned_pages __read_mostly;
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 35711b35b067..9668f8cb8317 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1641,10 +1641,24 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		spin_unlock(ptl);
 		tlb_remove_page_size(tlb, pmd_page(orig_pmd), HPAGE_PMD_SIZE);
 	} else {
<span class="p_del">-		struct page *page = pmd_page(orig_pmd);</span>
<span class="p_del">-		page_remove_rmap(page, true);</span>
<span class="p_del">-		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_del">-		VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+		struct page *page = NULL;</span>
<span class="p_add">+		int flush_needed = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmd_present(orig_pmd)) {</span>
<span class="p_add">+			page = pmd_page(orig_pmd);</span>
<span class="p_add">+			page_remove_rmap(page, true);</span>
<span class="p_add">+			VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_add">+			VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+		} else if (thp_migration_supported()) {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+			VM_BUG_ON(!is_pmd_migration_entry(orig_pmd));</span>
<span class="p_add">+			entry = pmd_to_swp_entry(orig_pmd);</span>
<span class="p_add">+			page = pfn_to_page(swp_offset(entry));</span>
<span class="p_add">+			flush_needed = 0;</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			WARN_ONCE(1, &quot;Non present huge pmd without pmd migration enabled!&quot;);</span>
<span class="p_add">+</span>
 		if (PageAnon(page)) {
 			zap_deposited_table(tlb-&gt;mm, pmd);
 			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);
<span class="p_chunk">@@ -1653,8 +1667,10 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 				zap_deposited_table(tlb-&gt;mm, pmd);
 			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);
 		}
<span class="p_add">+</span>
 		spin_unlock(ptl);
<span class="p_del">-		tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);</span>
<span class="p_add">+		if (flush_needed)</span>
<span class="p_add">+			tlb_remove_page_size(tlb, page, HPAGE_PMD_SIZE);</span>
 	}
 	return 1;
 }
<span class="p_chunk">@@ -2694,3 +2710,61 @@</span> <span class="p_context"> static int __init split_huge_pages_debugfs(void)</span>
 }
 late_initcall(split_huge_pages_debugfs);
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,</span>
<span class="p_add">+		struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = pvmw-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long address = pvmw-&gt;address;</span>
<span class="p_add">+	pmd_t pmdval;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(pvmw-&gt;pmd &amp;&amp; !pvmw-&gt;pte))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, address,</span>
<span class="p_add">+			address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_cache_range(vma, address, address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	pmdval = *pvmw-&gt;pmd;</span>
<span class="p_add">+	pmdp_invalidate(vma, address, pvmw-&gt;pmd);</span>
<span class="p_add">+	if (pmd_dirty(pmdval))</span>
<span class="p_add">+		set_page_dirty(page);</span>
<span class="p_add">+	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="p_add">+	pmdval = swp_entry_to_pmd(entry);</span>
<span class="p_add">+	set_pmd_at(mm, address, pvmw-&gt;pmd, pmdval);</span>
<span class="p_add">+	page_remove_rmap(page, true);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, address,</span>
<span class="p_add">+			address + HPAGE_PMD_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void remove_migration_pmd(struct page_vma_mapped_walk *pvmw, struct page *new)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = pvmw-&gt;vma;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long address = pvmw-&gt;address;</span>
<span class="p_add">+	unsigned long mmun_start = address &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+	pmd_t pmde;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(pvmw-&gt;pmd &amp;&amp; !pvmw-&gt;pte))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	entry = pmd_to_swp_entry(*pvmw-&gt;pmd);</span>
<span class="p_add">+	get_page(new);</span>
<span class="p_add">+	pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="p_add">+	if (is_write_migration_entry(entry))</span>
<span class="p_add">+		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_cache_range(vma, mmun_start, mmun_start + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="p_add">+	set_pmd_at(mm, mmun_start, pvmw-&gt;pmd, pmde);</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		mlock_vma_page(new);</span>
<span class="p_add">+	update_mmu_cache_pmd(vma, address, pvmw-&gt;pmd);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 627671551873..cae5c3b3b491 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -215,6 +215,15 @@</span> <span class="p_context"> static bool remove_migration_pte(struct page *page, struct vm_area_struct *vma,</span>
 			new = page - pvmw.page-&gt;index +
 				linear_page_index(vma, pvmw.address);
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+		/* PMD-mapped THP migration entry */</span>
<span class="p_add">+		if (!pvmw.pte &amp;&amp; pvmw.page) {</span>
<span class="p_add">+			VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page), page);</span>
<span class="p_add">+			remove_migration_pmd(&amp;pvmw, new);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 		get_page(new);
 		pte = pte_mkold(mk_pte(new, READ_ONCE(vma-&gt;vm_page_prot)));
 		if (pte_swp_soft_dirty(*pvmw.pte))
<span class="p_chunk">@@ -329,6 +338,27 @@</span> <span class="p_context"> void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
 	__migration_entry_wait(mm, pte, ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	if (!is_pmd_migration_entry(*pmd))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="p_add">+	if (!get_page_unless_zero(page))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	wait_on_page_locked(page);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLOCK
 /* Returns true if all buffers are successfully locked */
 static bool buffer_migrate_lock_buffers(struct buffer_head *head,
<span class="p_chunk">@@ -1087,7 +1117,7 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 		goto out;
 	}
 
<span class="p_del">-	if (unlikely(PageTransHuge(page))) {</span>
<span class="p_add">+	if (unlikely(PageTransHuge(page) &amp;&amp; !PageTransHuge(newpage))) {</span>
 		lock_page(page);
 		rc = split_huge_page(page);
 		unlock_page(page);
<span class="p_header">diff --git a/mm/page_vma_mapped.c b/mm/page_vma_mapped.c</span>
<span class="p_header">index 8ec6ba230bb9..3bd3008db4cb 100644</span>
<span class="p_header">--- a/mm/page_vma_mapped.c</span>
<span class="p_header">+++ b/mm/page_vma_mapped.c</span>
<span class="p_chunk">@@ -138,16 +138,28 @@</span> <span class="p_context"> bool page_vma_mapped_walk(struct page_vma_mapped_walk *pvmw)</span>
 	if (!pud_present(*pud))
 		return false;
 	pvmw-&gt;pmd = pmd_offset(pud, pvmw-&gt;address);
<span class="p_del">-	if (pmd_trans_huge(*pvmw-&gt;pmd)) {</span>
<span class="p_add">+	if (pmd_trans_huge(*pvmw-&gt;pmd) || is_pmd_migration_entry(*pvmw-&gt;pmd)) {</span>
 		pvmw-&gt;ptl = pmd_lock(mm, pvmw-&gt;pmd);
<span class="p_del">-		if (!pmd_present(*pvmw-&gt;pmd))</span>
<span class="p_del">-			return not_found(pvmw);</span>
 		if (likely(pmd_trans_huge(*pvmw-&gt;pmd))) {
 			if (pvmw-&gt;flags &amp; PVMW_MIGRATION)
 				return not_found(pvmw);
 			if (pmd_page(*pvmw-&gt;pmd) != page)
 				return not_found(pvmw);
 			return true;
<span class="p_add">+		} else if (!pmd_present(*pvmw-&gt;pmd)) {</span>
<span class="p_add">+			if (thp_migration_supported()) {</span>
<span class="p_add">+				if (!(pvmw-&gt;flags &amp; PVMW_MIGRATION))</span>
<span class="p_add">+					return not_found(pvmw);</span>
<span class="p_add">+				if (is_migration_entry(pmd_to_swp_entry(*pvmw-&gt;pmd))) {</span>
<span class="p_add">+					swp_entry_t entry = pmd_to_swp_entry(*pvmw-&gt;pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+					if (migration_entry_to_page(entry) != page)</span>
<span class="p_add">+						return not_found(pvmw);</span>
<span class="p_add">+					return true;</span>
<span class="p_add">+				}</span>
<span class="p_add">+			} else</span>
<span class="p_add">+				WARN_ONCE(1, &quot;Non present huge pmd without pmd migration enabled!&quot;);</span>
<span class="p_add">+			return not_found(pvmw);</span>
 		} else {
 			/* THP pmd was split under us: handle on pte level */
 			spin_unlock(pvmw-&gt;ptl);
<span class="p_header">diff --git a/mm/pgtable-generic.c b/mm/pgtable-generic.c</span>
<span class="p_header">index c99d9512a45b..1175f6a24fdb 100644</span>
<span class="p_header">--- a/mm/pgtable-generic.c</span>
<span class="p_header">+++ b/mm/pgtable-generic.c</span>
<span class="p_chunk">@@ -124,7 +124,8 @@</span> <span class="p_context"> pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
 {
 	pmd_t pmd;
 	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);
<span class="p_del">-	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="p_add">+	VM_BUG_ON((pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="p_add">+			   !pmd_devmap(*pmdp)) || !pmd_present(*pmdp));</span>
 	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);
 	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);
 	return pmd;
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 91948fbbb0bb..b28f633cd569 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1302,6 +1302,7 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	bool ret = true;
 	enum ttu_flags flags = (enum ttu_flags)arg;
 
<span class="p_add">+</span>
 	/* munlock has nothing to gain from examining un-locked vmas */
 	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))
 		return true;
<span class="p_chunk">@@ -1312,6 +1313,18 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	}
 
 	while (page_vma_mapped_walk(&amp;pvmw)) {
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+		/* PMD-mapped THP migration entry */</span>
<span class="p_add">+		if (flags &amp; TTU_MIGRATION) {</span>
<span class="p_add">+			if (!pvmw.pte &amp;&amp; page) {</span>
<span class="p_add">+				VM_BUG_ON_PAGE(PageHuge(page) || !PageTransCompound(page),</span>
<span class="p_add">+						page);</span>
<span class="p_add">+				set_pmd_migration_entry(&amp;pvmw, page);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 		/*
 		 * If the page is mlock()d, we cannot swap it out.
 		 * If it&#39;s recently referenced (perhaps page_referenced

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



