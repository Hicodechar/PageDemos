
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,0/5] mm, hugetlb: allocation API and migration improvements - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,0/5] mm, hugetlb: allocation API and migration improvements</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 22, 2017, 9:48 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171222094849.GO4831@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10129469/mbox/"
   >mbox</a>
|
   <a href="/patch/10129469/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10129469/">/patch/10129469/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	98F396019C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:49:01 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7B5E4290F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:49:01 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6EDFA29803; Fri, 22 Dec 2017 09:49:01 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.4 required=2.0 tests=BAYES_00,FAKE_REPLY_C,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8B456290F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 Dec 2017 09:49:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758138AbdLVJs6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 22 Dec 2017 04:48:58 -0500
Received: from mx2.suse.de ([195.135.220.15]:33630 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1757979AbdLVJsw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 22 Dec 2017 04:48:52 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 6258FACAD;
	Fri, 22 Dec 2017 09:48:50 +0000 (UTC)
Date: Fri, 22 Dec 2017 10:48:49 +0100
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: &quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [RFC PATCH 0/5] mm, hugetlb: allocation API and migration
	improvements
Message-ID: &lt;20171222094849.GO4831@dhcp22.suse.cz&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;7cf6978c-5bf2-cbe4-6f7f-ba09998f482d@ah.jp.nec.com&gt;
	&lt;659e21c7-ebed-8b64-053a-f01a31ef6e25@oracle.com&gt;
User-Agent: Mutt/1.9.1 (2017-09-22)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 22, 2017, 9:48 a.m.</div>
<pre class="content">
On Thu 21-12-17 15:35:28, Mike Kravetz wrote:
[...]
<span class="quote">&gt; You can add,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I had some concerns about transferring huge page state during migration</span>
<span class="quote">&gt; not specific to this patch, so I did a bunch of testing.</span>

On Fri 22-12-17 08:58:48, Naoya Horiguchi wrote:
[...]
<span class="quote">&gt; Yes, I tested again with additional changes below, and hugetlb migration</span>
<span class="quote">&gt; works fine from mbind(2). Thank you very much for your work.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; for the series.</span>

Thanks a lot to both of you! I have added the changelog to the last
patch. I am currently busy as hell so I will unlikely send the whole
thing before new year but please double check the changelog if you find
some more time.
---
From 65e7dda5dfe90fa656285729a270855e93637caa Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Fri, 22 Dec 2017 10:31:18 +0100
Subject: [PATCH] hugetlb, mempolicy: fix the mbind hugetlb migration

do_mbind migration code relies on alloc_huge_page_noerr for hugetlb
pages. alloc_huge_page_noerr uses alloc_huge_page which is a highlevel
allocation function which has to take care of reserves, overcommit or
hugetlb cgroup accounting.  None of that is really required for the page
migration because the new page is only temporal and either will replace
the original page or it will be dropped. This is essentially as for
other migration call paths and there shouldn&#39;t be any reason to handle
mbind in a special way.

The current implementation is even suboptimal because the migration
might fail just because the hugetlb cgroup limit is reached, or the
overcommit is saturated.

Fix this by making mbind like other hugetlb migration paths. Add
a new migration helper alloc_huge_page_vma as a wrapper around
alloc_huge_page_nodemask with additional mempolicy handling.

alloc_huge_page_noerr has no more users and it can go.
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/hugetlb.h |  5 ++---
 mm/hugetlb.c            | 33 +++++++++++++++++++--------------
 mm/mempolicy.c          |  3 +--
 3 files changed, 22 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index e035002d3fb6..08a4af411e25 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -345,10 +345,9 @@</span> <span class="p_context"> struct huge_bootmem_page {</span>
 struct page *alloc_huge_page(struct vm_area_struct *vma,
 				unsigned long addr, int avoid_reserve);
 struct page *alloc_huge_page_node(struct hstate *h, int nid);
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve);</span>
 struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,
 				nodemask_t *nmask);
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address);</span>
 int huge_add_to_page_cache(struct page *page, struct address_space *mapping,
 			pgoff_t idx);
 
<span class="p_chunk">@@ -526,7 +525,7 @@</span> <span class="p_context"> struct hstate {};</span>
 #define alloc_huge_page(v, a, r) NULL
 #define alloc_huge_page_node(h, nid) NULL
 #define alloc_huge_page_nodemask(h, preferred_nid, nmask) NULL
<span class="p_del">-#define alloc_huge_page_noerr(v, a, r) NULL</span>
<span class="p_add">+#define alloc_huge_page_vma(vma, address) NULL</span>
 #define alloc_bootmem_huge_page(h) NULL
 #define hstate_file(f) NULL
 #define hstate_sizelog(s) NULL
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 4426c5b23a20..e00deabe6d17 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1672,6 +1672,25 @@</span> <span class="p_context"> struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
 	return alloc_migrate_huge_page(h, gfp_mask, preferred_nid, nmask);
 }
 
<span class="p_add">+/* mempolicy aware migration callback */</span>
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mempolicy *mpol;</span>
<span class="p_add">+	nodemask_t *nodemask;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	struct hstate *h;</span>
<span class="p_add">+	gfp_t gfp_mask;</span>
<span class="p_add">+	int node;</span>
<span class="p_add">+</span>
<span class="p_add">+	h = hstate_vma(vma);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h);</span>
<span class="p_add">+	node = huge_node(vma, address, gfp_mask, &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+	page = alloc_huge_page_nodemask(h, node, nodemask);</span>
<span class="p_add">+	mpol_cond_put(mpol);</span>
<span class="p_add">+</span>
<span class="p_add">+	return page;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Increase the hugetlb pool such that it can accommodate a reservation
  * of size &#39;delta&#39;.
<span class="p_chunk">@@ -2077,20 +2096,6 @@</span> <span class="p_context"> struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	return ERR_PTR(-ENOSPC);
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * alloc_huge_page()&#39;s wrapper which simply returns the page if allocation</span>
<span class="p_del">- * succeeds, otherwise NULL. This function is called from new_vma_page(),</span>
<span class="p_del">- * where no ERR_VALUE is expected to be returned.</span>
<span class="p_del">- */</span>
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct page *page = alloc_huge_page(vma, addr, avoid_reserve);</span>
<span class="p_del">-	if (IS_ERR(page))</span>
<span class="p_del">-		page = NULL;</span>
<span class="p_del">-	return page;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 int alloc_bootmem_huge_page(struct hstate *h)
 	__attribute__ ((weak, alias(&quot;__alloc_bootmem_huge_page&quot;)));
 int __alloc_bootmem_huge_page(struct hstate *h)
<span class="p_header">diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="p_header">index f604b22ebb65..96823fa07f38 100644</span>
<span class="p_header">--- a/mm/mempolicy.c</span>
<span class="p_header">+++ b/mm/mempolicy.c</span>
<span class="p_chunk">@@ -1121,8 +1121,7 @@</span> <span class="p_context"> static struct page *new_page(struct page *page, unsigned long start, int **x)</span>
 	}
 
 	if (PageHuge(page)) {
<span class="p_del">-		BUG_ON(!vma);</span>
<span class="p_del">-		return alloc_huge_page_noerr(vma, address, 1);</span>
<span class="p_add">+		return alloc_huge_page_vma(vma, address);</span>
 	} else if (thp_migration_supported() &amp;&amp; PageTransHuge(page)) {
 		struct page *thp;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



