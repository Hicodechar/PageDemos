
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[02/10] mm/hugetlb: add region_del() to delete a specific range of entries - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [02/10] mm/hugetlb: add region_del() to delete a specific range of entries</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 2, 2015, 3:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1435851526-4200-3-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6711231/mbox/"
   >mbox</a>
|
   <a href="/patch/6711231/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6711231/">/patch/6711231/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 55BB89F2F0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jul 2015 15:43:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 4F254204AE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jul 2015 15:43:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 1DA76203C3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jul 2015 15:43:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754155AbbGBPmy (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 2 Jul 2015 11:42:54 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:35088 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753376AbbGBPjf (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 2 Jul 2015 11:39:35 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t62Fd5CH015509
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 2 Jul 2015 15:39:05 GMT
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id
	t62Fd5Zc004122
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 2 Jul 2015 15:39:05 GMT
Received: from abhmp0014.oracle.com (abhmp0014.oracle.com [141.146.116.20])
	by aserv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	t62Fd5jm021374; Thu, 2 Jul 2015 15:39:05 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 02 Jul 2015 08:39:05 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH 02/10] mm/hugetlb: add region_del() to delete a specific
	range of entries
Date: Thu,  2 Jul 2015 08:38:38 -0700
Message-Id: &lt;1435851526-4200-3-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1435851526-4200-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1435851526-4200-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 2, 2015, 3:38 p.m.</div>
<pre class="content">
fallocate hole punch will want to remove a specific range of pages.
The existing region_truncate() routine deletes all region/reserve
map entries after a specified offset.  region_del() will provide
this same functionality if the end of region is specified as -1.
Hence, region_del() can replace region_truncate().

Unlike region_truncate(), region_del() can return an error in the
rare case where it can not allocate memory for a region descriptor.
This ONLY happens in the case where an existing region must be split.
Current callers passing -1 as end of range will never experience
this error and do not need to deal with error handling.  Future
callers of region_del() (such as fallocate hole punch) will need to
handle this error.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 101 ++++++++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 75 insertions(+), 26 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - July 3, 2015, 7:20 a.m.</div>
<pre class="content">
<span class="quote">&gt; fallocate hole punch will want to remove a specific range of pages.</span>
<span class="quote">&gt; The existing region_truncate() routine deletes all region/reserve</span>
<span class="quote">&gt; map entries after a specified offset.  region_del() will provide</span>
<span class="quote">&gt; this same functionality if the end of region is specified as -1.</span>
<span class="quote">&gt; Hence, region_del() can replace region_truncate().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Unlike region_truncate(), region_del() can return an error in the</span>
<span class="quote">&gt; rare case where it can not allocate memory for a region descriptor.</span>
<span class="quote">&gt; This ONLY happens in the case where an existing region must be split.</span>
<span class="quote">&gt; Current callers passing -1 as end of range will never experience</span>
<span class="quote">&gt; this error and do not need to deal with error handling.  Future</span>
<span class="quote">&gt; callers of region_del() (such as fallocate hole punch) will need to</span>
<span class="quote">&gt; handle this error.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 101 ++++++++++++++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;  1 file changed, 75 insertions(+), 26 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 189c0d7..e8c7f68 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -460,43 +460,92 @@ static void region_abort(struct resv_map *resv, long f, long t)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; - * Truncate the reserve map at index &#39;end&#39;.  Modify/truncate any</span>
<span class="quote">&gt; - * region which contains end.  Delete any regions past end.</span>
<span class="quote">&gt; - * Return the number of huge pages removed from the map.</span>
<span class="quote">&gt; + * Delete the specified range [f, t) from the reserve map.  If the</span>
<span class="quote">&gt; + * t parameter is -1, this indicates that ALL regions after f should</span>
<span class="quote">&gt; + * be deleted.  Locate the regions which intersect [f, t) and either</span>
<span class="quote">&gt; + * trim, delete or split the existing regions.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Returns the number of huge pages deleted from the reserve map.</span>
<span class="quote">&gt; + * In the normal case, the return value is zero or more.  In the</span>
<span class="quote">&gt; + * case where a region must be split, a new region descriptor must</span>
<span class="quote">&gt; + * be allocated.  If the allocation fails, -ENOMEM will be returned.</span>
<span class="quote">&gt; + * NOTE: If the parameter t == -1, then we will never split a region</span>
<span class="quote">&gt; + * and possibly return -ENOMEM.  Callers specifying t == -1 do not</span>
<span class="quote">&gt; + * need to check for -ENOMEM error.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -static long region_truncate(struct resv_map *resv, long end)</span>
<span class="quote">&gt; +static long region_del(struct resv_map *resv, long f, long t)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct list_head *head = &amp;resv-&gt;regions;</span>
<span class="quote">&gt;  	struct file_region *rg, *trg;</span>
<span class="quote">&gt; -	long chg = 0;</span>
<span class="quote">&gt; +	struct file_region *nrg = NULL;</span>
<span class="quote">&gt; +	long del = 0;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +	if (t == -1)</span>
<span class="quote">&gt; +		t = LONG_MAX;</span>

Why not use 
<span class="quote">&gt; +retry:</span>
<span class="quote">&gt;  	spin_lock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt; -	/* Locate the region we are either in or before. */</span>
<span class="quote">&gt; -	list_for_each_entry(rg, head, link)</span>
<span class="quote">&gt; -		if (end &lt;= rg-&gt;to)</span>
<span class="quote">&gt; +	list_for_each_entry_safe(rg, trg, head, link) {</span>
<span class="quote">&gt; +		if (rg-&gt;to &lt;= f)</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +		if (rg-&gt;from &gt;= t)</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt; -	if (&amp;rg-&gt;link == head)</span>
<span class="quote">&gt; -		goto out;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	/* If we are in the middle of a region then adjust it. */</span>
<span class="quote">&gt; -	if (end &gt; rg-&gt;from) {</span>
<span class="quote">&gt; -		chg = rg-&gt;to - end;</span>
<span class="quote">&gt; -		rg-&gt;to = end;</span>
<span class="quote">&gt; -		rg = list_entry(rg-&gt;link.next, typeof(*rg), link);</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +		if (f &gt; rg-&gt;from &amp;&amp; t &lt; rg-&gt;to) { /* Must split region */</span>
<span class="quote">&gt; +			/*</span>
<span class="quote">&gt; +			 * Check for an entry in the cache before dropping</span>
<span class="quote">&gt; +			 * lock and attempting allocation.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			if (!nrg &amp;&amp;</span>
<span class="quote">&gt; +			    resv-&gt;rgn_cache_count &gt; resv-&gt;adds_in_progress) {</span>
<span class="quote">&gt; +				nrg = list_first_entry(&amp;resv-&gt;rgn_cache,</span>
<span class="quote">&gt; +							struct file_region,</span>
<span class="quote">&gt; +							link);</span>
<span class="quote">&gt; +				list_del(&amp;nrg-&gt;link);</span>
<span class="quote">&gt; +				resv-&gt;rgn_cache_count--;</span>
<span class="quote">&gt; +			}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	/* Drop any remaining regions. */</span>
<span class="quote">&gt; -	list_for_each_entry_safe(rg, trg, rg-&gt;link.prev, link) {</span>
<span class="quote">&gt; -		if (&amp;rg-&gt;link == head)</span>
<span class="quote">&gt; +			if (!nrg) {</span>
<span class="quote">&gt; +				spin_unlock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt; +				nrg = kmalloc(sizeof(*nrg), GFP_KERNEL);</span>
<span class="quote">&gt; +				if (!nrg)</span>
<span class="quote">&gt; +					return -ENOMEM;</span>
<span class="quote">&gt; +				goto retry;</span>
<span class="quote">&gt; +			}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			del += t - f;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			/* New entry for end of split region */</span>
<span class="quote">&gt; +			nrg-&gt;from = t;</span>
<span class="quote">&gt; +			nrg-&gt;to = rg-&gt;to;</span>
<span class="quote">&gt; +			INIT_LIST_HEAD(&amp;nrg-&gt;link);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			/* Original entry is trimmed */</span>
<span class="quote">&gt; +			rg-&gt;to = f;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			list_add(&amp;nrg-&gt;link, &amp;rg-&gt;link);</span>
<span class="quote">&gt; +			nrg = NULL;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt; -		chg += rg-&gt;to - rg-&gt;from;</span>
<span class="quote">&gt; -		list_del(&amp;rg-&gt;link);</span>
<span class="quote">&gt; -		kfree(rg);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (f &lt;= rg-&gt;from &amp;&amp; t &gt;= rg-&gt;to) { /* Remove entire region */</span>
<span class="quote">&gt; +			del += rg-&gt;to - rg-&gt;from;</span>
<span class="quote">&gt; +			list_del(&amp;rg-&gt;link);</span>
<span class="quote">&gt; +			kfree(rg);</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (f &lt;= rg-&gt;from) {	/* Trim beginning of region */</span>
<span class="quote">&gt; +			del += t - rg-&gt;from;</span>
<span class="quote">&gt; +			rg-&gt;from = t;</span>
<span class="quote">&gt; +		} else {		/* Trim end of region */</span>
<span class="quote">&gt; +			del += rg-&gt;to - f;</span>
<span class="quote">&gt; +			rg-&gt;to = f;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -out:</span>
<span class="quote">&gt;  	spin_unlock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt; -	return chg;</span>
<span class="quote">&gt; +	kfree(nrg);</span>
<span class="quote">&gt; +	return del;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -647,7 +696,7 @@ void resv_map_release(struct kref *ref)</span>
<span class="quote">&gt;  	struct file_region *rg, *trg;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/* Clear out any active regions before we release the map. */</span>
<span class="quote">&gt; -	region_truncate(resv_map, 0);</span>
<span class="quote">&gt; +	region_del(resv_map, 0, -1);</span>

LONG_MAX is not selected, why?
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/* ... and any entries left in the cache */</span>
<span class="quote">&gt;  	list_for_each_entry_safe(rg, trg, head, link)</span>
<span class="quote">&gt; @@ -3868,7 +3917,7 @@ void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)</span>
<span class="quote">&gt;  	long gbl_reserve;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	if (resv_map)</span>
<span class="quote">&gt; -		chg = region_truncate(resv_map, offset);</span>
<span class="quote">&gt; +		chg = region_del(resv_map, offset, -1);</span>
<span class="quote">&gt;  	spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt;  	inode-&gt;i_blocks -= (blocks_per_huge_page(h) * freed);</span>
<span class="quote">&gt;  	spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.1.0</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 3, 2015, 5:22 p.m.</div>
<pre class="content">
On 07/03/2015 12:20 AM, Hillf Danton wrote:
<span class="quote">&gt;&gt; fallocate hole punch will want to remove a specific range of pages.</span>
<span class="quote">&gt;&gt; The existing region_truncate() routine deletes all region/reserve</span>
<span class="quote">&gt;&gt; map entries after a specified offset.  region_del() will provide</span>
<span class="quote">&gt;&gt; this same functionality if the end of region is specified as -1.</span>
<span class="quote">&gt;&gt; Hence, region_del() can replace region_truncate().</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Unlike region_truncate(), region_del() can return an error in the</span>
<span class="quote">&gt;&gt; rare case where it can not allocate memory for a region descriptor.</span>
<span class="quote">&gt;&gt; This ONLY happens in the case where an existing region must be split.</span>
<span class="quote">&gt;&gt; Current callers passing -1 as end of range will never experience</span>
<span class="quote">&gt;&gt; this error and do not need to deal with error handling.  Future</span>
<span class="quote">&gt;&gt; callers of region_del() (such as fallocate hole punch) will need to</span>
<span class="quote">&gt;&gt; handle this error.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   mm/hugetlb.c | 101 ++++++++++++++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;&gt;   1 file changed, 75 insertions(+), 26 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index 189c0d7..e8c7f68 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -460,43 +460,92 @@ static void region_abort(struct resv_map *resv, long f, long t)</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   /*</span>
<span class="quote">&gt;&gt; - * Truncate the reserve map at index &#39;end&#39;.  Modify/truncate any</span>
<span class="quote">&gt;&gt; - * region which contains end.  Delete any regions past end.</span>
<span class="quote">&gt;&gt; - * Return the number of huge pages removed from the map.</span>
<span class="quote">&gt;&gt; + * Delete the specified range [f, t) from the reserve map.  If the</span>
<span class="quote">&gt;&gt; + * t parameter is -1, this indicates that ALL regions after f should</span>
<span class="quote">&gt;&gt; + * be deleted.  Locate the regions which intersect [f, t) and either</span>
<span class="quote">&gt;&gt; + * trim, delete or split the existing regions.</span>
<span class="quote">&gt;&gt; + *</span>
<span class="quote">&gt;&gt; + * Returns the number of huge pages deleted from the reserve map.</span>
<span class="quote">&gt;&gt; + * In the normal case, the return value is zero or more.  In the</span>
<span class="quote">&gt;&gt; + * case where a region must be split, a new region descriptor must</span>
<span class="quote">&gt;&gt; + * be allocated.  If the allocation fails, -ENOMEM will be returned.</span>
<span class="quote">&gt;&gt; + * NOTE: If the parameter t == -1, then we will never split a region</span>
<span class="quote">&gt;&gt; + * and possibly return -ENOMEM.  Callers specifying t == -1 do not</span>
<span class="quote">&gt;&gt; + * need to check for -ENOMEM error.</span>
<span class="quote">&gt;&gt;    */</span>
<span class="quote">&gt;&gt; -static long region_truncate(struct resv_map *resv, long end)</span>
<span class="quote">&gt;&gt; +static long region_del(struct resv_map *resv, long f, long t)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt;   	struct list_head *head = &amp;resv-&gt;regions;</span>
<span class="quote">&gt;&gt;   	struct file_region *rg, *trg;</span>
<span class="quote">&gt;&gt; -	long chg = 0;</span>
<span class="quote">&gt;&gt; +	struct file_region *nrg = NULL;</span>
<span class="quote">&gt;&gt; +	long del = 0;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +	if (t == -1)</span>
<span class="quote">&gt;&gt; +		t = LONG_MAX;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Why not use</span>

See below
<span class="quote">
&gt;&gt; +retry:</span>
<span class="quote">&gt;&gt;   	spin_lock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt;&gt; -	/* Locate the region we are either in or before. */</span>
<span class="quote">&gt;&gt; -	list_for_each_entry(rg, head, link)</span>
<span class="quote">&gt;&gt; -		if (end &lt;= rg-&gt;to)</span>
<span class="quote">&gt;&gt; +	list_for_each_entry_safe(rg, trg, head, link) {</span>
<span class="quote">&gt;&gt; +		if (rg-&gt;to &lt;= f)</span>
<span class="quote">&gt;&gt; +			continue;</span>
<span class="quote">&gt;&gt; +		if (rg-&gt;from &gt;= t)</span>
<span class="quote">&gt;&gt;   			break;</span>
<span class="quote">&gt;&gt; -	if (&amp;rg-&gt;link == head)</span>
<span class="quote">&gt;&gt; -		goto out;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -	/* If we are in the middle of a region then adjust it. */</span>
<span class="quote">&gt;&gt; -	if (end &gt; rg-&gt;from) {</span>
<span class="quote">&gt;&gt; -		chg = rg-&gt;to - end;</span>
<span class="quote">&gt;&gt; -		rg-&gt;to = end;</span>
<span class="quote">&gt;&gt; -		rg = list_entry(rg-&gt;link.next, typeof(*rg), link);</span>
<span class="quote">&gt;&gt; -	}</span>
<span class="quote">&gt;&gt; +		if (f &gt; rg-&gt;from &amp;&amp; t &lt; rg-&gt;to) { /* Must split region */</span>
<span class="quote">&gt;&gt; +			/*</span>
<span class="quote">&gt;&gt; +			 * Check for an entry in the cache before dropping</span>
<span class="quote">&gt;&gt; +			 * lock and attempting allocation.</span>
<span class="quote">&gt;&gt; +			 */</span>
<span class="quote">&gt;&gt; +			if (!nrg &amp;&amp;</span>
<span class="quote">&gt;&gt; +			    resv-&gt;rgn_cache_count &gt; resv-&gt;adds_in_progress) {</span>
<span class="quote">&gt;&gt; +				nrg = list_first_entry(&amp;resv-&gt;rgn_cache,</span>
<span class="quote">&gt;&gt; +							struct file_region,</span>
<span class="quote">&gt;&gt; +							link);</span>
<span class="quote">&gt;&gt; +				list_del(&amp;nrg-&gt;link);</span>
<span class="quote">&gt;&gt; +				resv-&gt;rgn_cache_count--;</span>
<span class="quote">&gt;&gt; +			}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -	/* Drop any remaining regions. */</span>
<span class="quote">&gt;&gt; -	list_for_each_entry_safe(rg, trg, rg-&gt;link.prev, link) {</span>
<span class="quote">&gt;&gt; -		if (&amp;rg-&gt;link == head)</span>
<span class="quote">&gt;&gt; +			if (!nrg) {</span>
<span class="quote">&gt;&gt; +				spin_unlock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt;&gt; +				nrg = kmalloc(sizeof(*nrg), GFP_KERNEL);</span>
<span class="quote">&gt;&gt; +				if (!nrg)</span>
<span class="quote">&gt;&gt; +					return -ENOMEM;</span>
<span class="quote">&gt;&gt; +				goto retry;</span>
<span class="quote">&gt;&gt; +			}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +			del += t - f;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +			/* New entry for end of split region */</span>
<span class="quote">&gt;&gt; +			nrg-&gt;from = t;</span>
<span class="quote">&gt;&gt; +			nrg-&gt;to = rg-&gt;to;</span>
<span class="quote">&gt;&gt; +			INIT_LIST_HEAD(&amp;nrg-&gt;link);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +			/* Original entry is trimmed */</span>
<span class="quote">&gt;&gt; +			rg-&gt;to = f;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +			list_add(&amp;nrg-&gt;link, &amp;rg-&gt;link);</span>
<span class="quote">&gt;&gt; +			nrg = NULL;</span>
<span class="quote">&gt;&gt;   			break;</span>
<span class="quote">&gt;&gt; -		chg += rg-&gt;to - rg-&gt;from;</span>
<span class="quote">&gt;&gt; -		list_del(&amp;rg-&gt;link);</span>
<span class="quote">&gt;&gt; -		kfree(rg);</span>
<span class="quote">&gt;&gt; +		}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		if (f &lt;= rg-&gt;from &amp;&amp; t &gt;= rg-&gt;to) { /* Remove entire region */</span>
<span class="quote">&gt;&gt; +			del += rg-&gt;to - rg-&gt;from;</span>
<span class="quote">&gt;&gt; +			list_del(&amp;rg-&gt;link);</span>
<span class="quote">&gt;&gt; +			kfree(rg);</span>
<span class="quote">&gt;&gt; +			continue;</span>
<span class="quote">&gt;&gt; +		}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		if (f &lt;= rg-&gt;from) {	/* Trim beginning of region */</span>
<span class="quote">&gt;&gt; +			del += t - rg-&gt;from;</span>
<span class="quote">&gt;&gt; +			rg-&gt;from = t;</span>
<span class="quote">&gt;&gt; +		} else {		/* Trim end of region */</span>
<span class="quote">&gt;&gt; +			del += rg-&gt;to - f;</span>
<span class="quote">&gt;&gt; +			rg-&gt;to = f;</span>
<span class="quote">&gt;&gt; +		}</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -out:</span>
<span class="quote">&gt;&gt;   	spin_unlock(&amp;resv-&gt;lock);</span>
<span class="quote">&gt;&gt; -	return chg;</span>
<span class="quote">&gt;&gt; +	kfree(nrg);</span>
<span class="quote">&gt;&gt; +	return del;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   /*</span>
<span class="quote">&gt;&gt; @@ -647,7 +696,7 @@ void resv_map_release(struct kref *ref)</span>
<span class="quote">&gt;&gt;   	struct file_region *rg, *trg;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	/* Clear out any active regions before we release the map. */</span>
<span class="quote">&gt;&gt; -	region_truncate(resv_map, 0);</span>
<span class="quote">&gt;&gt; +	region_del(resv_map, 0, -1);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; LONG_MAX is not selected, why?</span>

I think your question is &quot;Why not use LONG_MAX to indicate all
remaining regions in the map should be deleted (a truncate
operation)?&quot;.

The two values passed to the routine are essentially huge page
offsets.  My first thought when creating the routine is that a
negative value (such as -1) is an invalid offset and a good
choice to indicate a &quot;special&quot; case operation.  LONG_MAX is also
an invalid huge page offset, so it could be used for the same
purpose and avoid the &quot;if (t == -1) t = LONG_MAX&quot; at the
beginning of the routine.  I have no objections in changing this
to LONG_MAX is if makes the code simpler/easier to understand.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 189c0d7..e8c7f68 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -460,43 +460,92 @@</span> <span class="p_context"> static void region_abort(struct resv_map *resv, long f, long t)</span>
 }
 
 /*
<span class="p_del">- * Truncate the reserve map at index &#39;end&#39;.  Modify/truncate any</span>
<span class="p_del">- * region which contains end.  Delete any regions past end.</span>
<span class="p_del">- * Return the number of huge pages removed from the map.</span>
<span class="p_add">+ * Delete the specified range [f, t) from the reserve map.  If the</span>
<span class="p_add">+ * t parameter is -1, this indicates that ALL regions after f should</span>
<span class="p_add">+ * be deleted.  Locate the regions which intersect [f, t) and either</span>
<span class="p_add">+ * trim, delete or split the existing regions.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns the number of huge pages deleted from the reserve map.</span>
<span class="p_add">+ * In the normal case, the return value is zero or more.  In the</span>
<span class="p_add">+ * case where a region must be split, a new region descriptor must</span>
<span class="p_add">+ * be allocated.  If the allocation fails, -ENOMEM will be returned.</span>
<span class="p_add">+ * NOTE: If the parameter t == -1, then we will never split a region</span>
<span class="p_add">+ * and possibly return -ENOMEM.  Callers specifying t == -1 do not</span>
<span class="p_add">+ * need to check for -ENOMEM error.</span>
  */
<span class="p_del">-static long region_truncate(struct resv_map *resv, long end)</span>
<span class="p_add">+static long region_del(struct resv_map *resv, long f, long t)</span>
 {
 	struct list_head *head = &amp;resv-&gt;regions;
 	struct file_region *rg, *trg;
<span class="p_del">-	long chg = 0;</span>
<span class="p_add">+	struct file_region *nrg = NULL;</span>
<span class="p_add">+	long del = 0;</span>
 
<span class="p_add">+	if (t == -1)</span>
<span class="p_add">+		t = LONG_MAX;</span>
<span class="p_add">+retry:</span>
 	spin_lock(&amp;resv-&gt;lock);
<span class="p_del">-	/* Locate the region we are either in or before. */</span>
<span class="p_del">-	list_for_each_entry(rg, head, link)</span>
<span class="p_del">-		if (end &lt;= rg-&gt;to)</span>
<span class="p_add">+	list_for_each_entry_safe(rg, trg, head, link) {</span>
<span class="p_add">+		if (rg-&gt;to &lt;= f)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (rg-&gt;from &gt;= t)</span>
 			break;
<span class="p_del">-	if (&amp;rg-&gt;link == head)</span>
<span class="p_del">-		goto out;</span>
 
<span class="p_del">-	/* If we are in the middle of a region then adjust it. */</span>
<span class="p_del">-	if (end &gt; rg-&gt;from) {</span>
<span class="p_del">-		chg = rg-&gt;to - end;</span>
<span class="p_del">-		rg-&gt;to = end;</span>
<span class="p_del">-		rg = list_entry(rg-&gt;link.next, typeof(*rg), link);</span>
<span class="p_del">-	}</span>
<span class="p_add">+		if (f &gt; rg-&gt;from &amp;&amp; t &lt; rg-&gt;to) { /* Must split region */</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Check for an entry in the cache before dropping</span>
<span class="p_add">+			 * lock and attempting allocation.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (!nrg &amp;&amp;</span>
<span class="p_add">+			    resv-&gt;rgn_cache_count &gt; resv-&gt;adds_in_progress) {</span>
<span class="p_add">+				nrg = list_first_entry(&amp;resv-&gt;rgn_cache,</span>
<span class="p_add">+							struct file_region,</span>
<span class="p_add">+							link);</span>
<span class="p_add">+				list_del(&amp;nrg-&gt;link);</span>
<span class="p_add">+				resv-&gt;rgn_cache_count--;</span>
<span class="p_add">+			}</span>
 
<span class="p_del">-	/* Drop any remaining regions. */</span>
<span class="p_del">-	list_for_each_entry_safe(rg, trg, rg-&gt;link.prev, link) {</span>
<span class="p_del">-		if (&amp;rg-&gt;link == head)</span>
<span class="p_add">+			if (!nrg) {</span>
<span class="p_add">+				spin_unlock(&amp;resv-&gt;lock);</span>
<span class="p_add">+				nrg = kmalloc(sizeof(*nrg), GFP_KERNEL);</span>
<span class="p_add">+				if (!nrg)</span>
<span class="p_add">+					return -ENOMEM;</span>
<span class="p_add">+				goto retry;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			del += t - f;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* New entry for end of split region */</span>
<span class="p_add">+			nrg-&gt;from = t;</span>
<span class="p_add">+			nrg-&gt;to = rg-&gt;to;</span>
<span class="p_add">+			INIT_LIST_HEAD(&amp;nrg-&gt;link);</span>
<span class="p_add">+</span>
<span class="p_add">+			/* Original entry is trimmed */</span>
<span class="p_add">+			rg-&gt;to = f;</span>
<span class="p_add">+</span>
<span class="p_add">+			list_add(&amp;nrg-&gt;link, &amp;rg-&gt;link);</span>
<span class="p_add">+			nrg = NULL;</span>
 			break;
<span class="p_del">-		chg += rg-&gt;to - rg-&gt;from;</span>
<span class="p_del">-		list_del(&amp;rg-&gt;link);</span>
<span class="p_del">-		kfree(rg);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (f &lt;= rg-&gt;from &amp;&amp; t &gt;= rg-&gt;to) { /* Remove entire region */</span>
<span class="p_add">+			del += rg-&gt;to - rg-&gt;from;</span>
<span class="p_add">+			list_del(&amp;rg-&gt;link);</span>
<span class="p_add">+			kfree(rg);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (f &lt;= rg-&gt;from) {	/* Trim beginning of region */</span>
<span class="p_add">+			del += t - rg-&gt;from;</span>
<span class="p_add">+			rg-&gt;from = t;</span>
<span class="p_add">+		} else {		/* Trim end of region */</span>
<span class="p_add">+			del += rg-&gt;to - f;</span>
<span class="p_add">+			rg-&gt;to = f;</span>
<span class="p_add">+		}</span>
 	}
 
<span class="p_del">-out:</span>
 	spin_unlock(&amp;resv-&gt;lock);
<span class="p_del">-	return chg;</span>
<span class="p_add">+	kfree(nrg);</span>
<span class="p_add">+	return del;</span>
 }
 
 /*
<span class="p_chunk">@@ -647,7 +696,7 @@</span> <span class="p_context"> void resv_map_release(struct kref *ref)</span>
 	struct file_region *rg, *trg;
 
 	/* Clear out any active regions before we release the map. */
<span class="p_del">-	region_truncate(resv_map, 0);</span>
<span class="p_add">+	region_del(resv_map, 0, -1);</span>
 
 	/* ... and any entries left in the cache */
 	list_for_each_entry_safe(rg, trg, head, link)
<span class="p_chunk">@@ -3868,7 +3917,7 @@</span> <span class="p_context"> void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)</span>
 	long gbl_reserve;
 
 	if (resv_map)
<span class="p_del">-		chg = region_truncate(resv_map, offset);</span>
<span class="p_add">+		chg = region_del(resv_map, offset, -1);</span>
 	spin_lock(&amp;inode-&gt;i_lock);
 	inode-&gt;i_blocks -= (blocks_per_huge_page(h) * freed);
 	spin_unlock(&amp;inode-&gt;i_lock);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



