
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,25/34] swiotlb: Add warnings for use of bounce buffers with SME - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,25/34] swiotlb: Add warnings for use of bounce buffers with SME</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2017, 7:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170607191732.28645.42876.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9772573/mbox/"
   >mbox</a>
|
   <a href="/patch/9772573/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9772573/">/patch/9772573/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C1D94603B4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B1B5C28323
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A63C3284A8; Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0A14D284D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:17:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752637AbdFGTRx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Jun 2017 15:17:53 -0400
Received: from mail-co1nam03on0067.outbound.protection.outlook.com
	([104.47.40.67]:17872
	&quot;EHLO NAM03-CO1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752616AbdFGTRn (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Jun 2017 15:17:43 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=a5wGjz15xTK8cmRBxGNv6W/bA3m1eMoZvpL1x8HEBc0=;
	b=N0jXVQPcb+B/XyM37AuV6BF5TJ7lfnh24KTfLXyES+MVKAdEg5aWSQ10xih17Xtahtz8yCzU1wbOtIkjzBzy7gC5K0n0dwy8mQSzeVFVsl2+olCuC/rx3ho9YdnajxKbH+kg6wso4f7GMVBmnFr1rISj0LNuBNdvGb9Afh5KFnA=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1157.12; Wed, 7 Jun 2017 19:17:36 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v6 25/34] swiotlb: Add warnings for use of bounce buffers
	with SME
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, linux-mm@kvack.org,
	iommu@lists.linux-foundation.org
Cc: Rik van Riel &lt;riel@redhat.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;, Dave Young &lt;dyoung@redhat.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Wed, 07 Jun 2017 14:17:32 -0500
Message-ID: &lt;20170607191732.28645.42876.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR1101CA0016.namprd11.prod.outlook.com (10.174.237.26)
	To MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: MWHPR12MB1151:
X-MS-Office365-Filtering-Correlation-Id: 58c83967-f600-44ed-97a9-08d4add9dd9c
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(48565401081)(201703131423075)(201703031133081);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	3:c8tzvEhtzXvsjVNXBnDMxixzKVLO/j7/41yASuz4n0NXKjm2Pn07oCe8EAkHo/mPp1Fz87ztoTJiO778iRi1XdG2svLcX/Hu1nNPaK+9x8rMPu8DZiI7Fw8MfSQ8ZJA+3wouHp1UqwbQK9Wf/rUmdsFYeLD9GwYau1Qkcgrr3WgqtZcaFI9C+qAD3iO9HKCmEQtfbTZ4LWT1yMmy46NnSAO6V2MetOs1sM0v8TYfzbAoABxovOKdn6hcYfFUkCOYbqFhvujtwPv3UEuAeS800KpFixTaZ8+0gfnmgBCPETTNs3GpnRNroHN5zHxG6LJDlMaCE/7JGPZF5CbxyUyGlucCSs84r3QV90iO6u8mbSg=;
	25:F2oiwUhcMDKLK0zbnVH8IUTBzM/LAMPZEn6ojexeg0NTYDs6Q09kKV30gvAcj09zZi/Z+ZhRRrGiMqTvReQO/sM2rsrlKWbmZtqi1hxC6DZ7soLUNXEL4qflNxoIwcjO9M2ZOevzNISkNANvCaguncXxidNDaKZXmdg+jTJSURg1hB5DLtUSUaLqF65tVsSJI6oA+vjnS70BOgWRpIoFY5HPNu214bh3mw8eXbhXpwk8X3l8poGToh50RLSW4BHYuqzivGjIE73hzHLsBRUCLdwaSjYtV2D30RS7JMNAapHbZn1HcJcsqv/SgjsxXjV+ibHzOX2MMeewrQJEs5W1Vf+ULJCFxjf1M+9wHC6+2walkrTtBi4FkLtYfu6Pd82H+cv+x6z1yCBm9rYqmOaI5zZx7EF9kMiLjFYySfoab0Ikq/Y9T2lP+gj4nILTK3geHTeqttrSKq1+mO6/nQXHv+oD0S87cZfmhL+87MG7doM=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	31:AM1sxO9NBokVIMlJfAEUEJn7QejSVYpbC19MdnsReF82lQzRlEY7kej/utGyLazwZ92uGWT5qrXBApXqa/cHShAqzn3XVxgIpxTCl49N8p3XUe0SSXt5s6lT7+xHF7VhH4Gts1MIeanMu62jDH9LOecZG6xlVv/pfAFnMZ1Vx9TcGXz3SSWUd/6ys91mG2ZztgdfXeREFPIMq653JCsjSVXA10EZDXXhX0bJVwY5sHM=;
	20:uukYel95YhHlW+qBTSVN+tgNR7O7RILqTvDdJ5YHztMelv+V2Xx7eGZ/pcyvtEv8+V5LW8Ini8ZIgE+3zTmOuRI7rSmuv3AjOjq0OJH6W69Jy+n8sy0SL6NRilTb16A/G+piOgfESAHR8XVBWwb8SNHA9x+2II652DRSnybVhLNVbO3IJ56mgpXQhmZSzOUdg5NrXsO/7EIYXKD8Nz11TT7/pARpBfhFQsId3ieZ5VN6276DsF7+f+R8IZDNuXM/KQqZEuntL470PL7KALAuV5iOyctDaVPjOE70U+MNsBd2549PaRoJTXwXXYj+1rEGi7d4NHRgJtSeDg/ot2HA5OrdSou9fd0Ka84iBGKwQ+8gwWoZfRj6ymhgOWRc7zyopDCpbliwOx56BkTll190QreJW8vnFRqKN+m/YdRWE43vPlBv+GdbWz9WFAB1bScNxVeJ44vHLTjOB1v20C8Mg13fiZ0lXgIHc2076D3pPQedKW3xq8Mj1vP2+6RpwqZr
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB1151DC437741E9334A95FA1EECC80@MWHPR12MB1151.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(100000703101)(100105400095)(93006095)(93001095)(6055026)(6041248)(20161123564025)(20161123560025)(20161123555025)(20161123562025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123558100)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:MWHPR12MB1151; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtNV0hQUjEyTUIxMTUxOzQ6eURTVklyMEFvZXFsWUMzOERZSWJtOHRPWm9S?=
	=?utf-8?B?djdEV1BlanN5MllSMGxIVWRHbnFKeEFzTHo5TGYwbllpN3dVZzlqd3hXY3dq?=
	=?utf-8?B?aWMzclNSWm1UWXQ4UW9MRC95SUwwdzA4b2RuNExjYW1pTkFIcEhTN2R4WDJu?=
	=?utf-8?B?R25zWDlRYkpWQzFlZzE0UFpUbjZKZnZFRjFlcjBFNDkxajBLSFE5aWdsMWJE?=
	=?utf-8?B?LzdRaXdTQ240MURzN1RCWW5ZQ1lOK1ZPS21qNFo0aHJrTXQ2RXFGM25GaFdK?=
	=?utf-8?B?bFAwNnFYeDUvSkpvS29kcjYrbG1ublpvRUJpSENOUC9HZmpRZTRack5DVzUx?=
	=?utf-8?B?WmpEbTNvZzJVYTU4L3QvbitwbGxGSTlaT0lId0pURlJrcVV5ME45N0ZJdm93?=
	=?utf-8?B?elB0UHhpbjBhT3ZnQXg1N2NCNk9EZGhmODNmamxTZHlvVHVsby9RdzdlZGNQ?=
	=?utf-8?B?YkhVWnA4dDYzNnZScDFOOFRxUFNoMkRwUVl2ZVZ1dmtud0pDZElzOHJIT0J2?=
	=?utf-8?B?ZDAwbUx2QWV2WWFhZTJ0VmVYdi9RR1VOd1dOZXJLRXVxNGVSM0IreTNIYXJX?=
	=?utf-8?B?Q2RBV216UGprSkpqRHNuclJucmVxTUV3eTJkVXgzMkhYdTRkU2ZQMWQwM1d1?=
	=?utf-8?B?eUdFa1FBbnU5aEJ2cExjYkV5RGowTWltZ0JhY3paWk4zRVowRzZqMElxYW5p?=
	=?utf-8?B?dlVGQm1abmVrTzZuS1FGY3EyTXEwQVJzdXRpN0M5R3h2eUc1cFJiN0IvZlcy?=
	=?utf-8?B?am1ucXpEbSs0MGNBUmJlWFJlejdnakZXbTNxMnBuaEtIWWNSZGdZSXUyU1hv?=
	=?utf-8?B?a3NjeElzM2ZZeHZESnlIRHdBZ0F4ZmdEOE82VGdRWUltUVowRjdPUCtZRTM2?=
	=?utf-8?B?Szc5T21EZndXdGtaNnBRTzY4Y1Y1TUZxdld2OFVuWXhUWmZvSHZ3UzNxK2h1?=
	=?utf-8?B?OWM3emNXejNVUnBVdzUvT21kZElPeEhHUGw5VzJRbXFWZ1g0cFVGWFg4eWFa?=
	=?utf-8?B?YVNTdVZIcUhjWWVGL2h0TTVoKzlIdVQ2U1dzUmU4MllpRHFXcHd5TFBrcTJy?=
	=?utf-8?B?bDFML1VZbEk5Z0tSR1h6Y25PMVVGQzEvUkJObGF5QmJuZ0NHMUM5Vk9lVzRn?=
	=?utf-8?B?Q0RGeUhOaVREYkQrY1NRK3hJTE90WGkyS1NBQ2hRSm0rQ2FmRktJbG9CbWZQ?=
	=?utf-8?B?TCtUNEEyMUdTVjdaWHNLNC8xS2h0RzlvREtQZjVTM241TWNmd0pjU2RPajNw?=
	=?utf-8?B?TXBheGxPajdlNm5VeHJtbXZnd3hiSktQRmNQZUtDUnJIdmVUVzRmcjRLUDZl?=
	=?utf-8?B?Smx1bEJBYTFTTnhHNDRUUzZzK2hGME1SM3VYNlVjRjBJazlsRzRLSFlRcjl1?=
	=?utf-8?B?Y0UzdFIzRGo0bEtQVHJXOW13R1RyYnlMUS9UNkVIb2U2MThOQnBFbmh0aXdI?=
	=?utf-8?B?S01hZ09GYkZ2YkNKUnhJME5BSUV2RXBlNFVaODcrQXlDeS9MUE9iV1N1UUpo?=
	=?utf-8?B?Wk40REM4VURDTEZLUFNqUnZnWDlDMjRUWEpvNVBmSFBUeFNmRTYyTENBTXlY?=
	=?utf-8?B?MlVSUmZKM2JTY0djbllJL0I2QS9OTG93N0FVelIxOC9meU84QjZTNTlwc25Q?=
	=?utf-8?Q?heODDnRMpjN/2zSPZz9?=
X-Forefront-PRVS: 03319F6FEF
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39410400002)(39860400002)(39850400002)(39400400002)(39840400002)(39450400003)(38730400002)(81166006)(7736002)(72206003)(9686003)(55016002)(6506006)(305945005)(110136004)(54906002)(53936002)(66066001)(1076002)(6666003)(2906002)(2950100002)(4326008)(4001350100001)(6116002)(189998001)(3846002)(83506001)(23676002)(76176999)(50466002)(50986999)(54356999)(97746001)(103116003)(86362001)(7406005)(7416002)(5660300001)(478600001)(8676002)(230700001)(47776003)(33646002)(53416004)(42186005)(25786009)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1151;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtNV0hQUjEyTUIxMTUxOzIzOkpaNWZvYnNqMzJueGpReUQyc2EzMG5iaUJu?=
	=?utf-8?B?a0kxdmVGOWljVmtiZllkUnMxMFlkRUlETEtKVVdYNFUyRDQrN2RkdG9yUzl6?=
	=?utf-8?B?NElCYUowdU9EL1laRUFiUXowTDBZTEhGL1BDNTlwU2JKdzJNTmFOUkRLQVEy?=
	=?utf-8?B?ZjJiMVJuQ254V3J0Q2s5L09TOEt3RzFXN2JSeGI5b2dRTXpHaTJmcG4vM3l2?=
	=?utf-8?B?YWFBQ0djTVJzenpmbzZrZThBajViQlJUSURZVEtuL0lGYXAvSTRhU3lMNDdm?=
	=?utf-8?B?dUNtVWdycE56WDY5cm9uVThXcTBTa2VHSHc4Zko4Uk5oMkJ3WCtTb09CV1F3?=
	=?utf-8?B?aHZ5NWZQMUorZUdmQzY3MnlMQTVPb281UG5icnZTNWRSdUE2N1MydjMyNmtU?=
	=?utf-8?B?WkN3ZndvWGZ4dHJiNmtoZWNTdWdvdUF2NVJ2VjNqWmU3blZiRUczL1dzOUpm?=
	=?utf-8?B?bjRhU1RMTmpiWFl5UzZxb25lSHlOa3VrZVVMSURCNkhFcEN3bUdwODlORzVJ?=
	=?utf-8?B?R2JqNEgvRHRYLzEyeFNQcTErcGVCN1IrZnc5emdpdVVtSVBteEE1WFl6ektr?=
	=?utf-8?B?U1dTMm01ZVNxMkl0ZFlnRGl1VlUwODRzeGcwS1hWMWhsRGVWbHpMN0EyTUNX?=
	=?utf-8?B?Tm5jSzJKblV2ZUNDVWdGcEhwZFcrK2Q1SWtZdE5kY29YNzcxaXJCTXZ1ZVgx?=
	=?utf-8?B?bUpEUTNDWDNvYjhCWWEwU0VBTGdQaWhJaWpUalptbTdENmVOc1RTSmZsWXJT?=
	=?utf-8?B?TVdRWWpxaEkxTVZuNjRXUnlCeEpqTGZIRE1adE5sRXFHRjFUQVlWVUVCNkpu?=
	=?utf-8?B?QmE3L0JwUU1laGpSaDluSDJEaDJZWXhRRE9EdEdTWGdtVmJPUFIvS1ZOK0VI?=
	=?utf-8?B?TVIwZ0VIb2RqN3lJVTh1ekhHMVdxRUZHaGVFQlZkU0d1L3FVVDMwU0U1c1ZG?=
	=?utf-8?B?WWsyUk92OVNEaEMxUE9hd0dvQi9jTEhEV2FsbFpTSlJuUUhRRDFvaHhBa1ZM?=
	=?utf-8?B?WndYdkQ5VWdYanZIUytnZzlHZVUraUIrVGg0ZG9XZjJkKzhLdVgvNytTWjVF?=
	=?utf-8?B?YzRmU0ZhYmRVVm1WU3dTdHNDN09pZ3NBN0trazlWZmZyUEZweXBrK1IrbFVt?=
	=?utf-8?B?U2hpUlBRRDlnVE04Q2VLVGE1VFh0aldXRi9BU01lUFRKV0grZFZ5NUNmZ2Iw?=
	=?utf-8?B?c1MvaWZXaEpDNDdneVZQQ0dMRmt0WlBsYmVuelhZWEVPekNPcGpCYzgxdFA3?=
	=?utf-8?B?SndkY0tEN0pESUNHTldaUXU4TlJGTjA5ZjhmTGVYaG1tTnQxVFVVMytLaXNa?=
	=?utf-8?B?NWxJcE5ySnBNbWF3bEswZXB2UFZTcVJuaXloRXNrQXYxQVg2U2dnaEc5azI2?=
	=?utf-8?B?YUh5U2xkdTdPMStpZE5Mc3duQWlUTyt1YTZWNTlrZFZPQ2M5VE1nZWI4TUpy?=
	=?utf-8?B?MUJCRWE1TlVlVFQ4b05IZkN0OUZ0aitqdjk5a1BEcW9GSVltV3djZXZxSG5u?=
	=?utf-8?B?ZitidlJGOWpRRVFNVnVIVmVNN2NZMjVCNWxUcFpVQVBlSTdWRWlCWG5rYjJs?=
	=?utf-8?B?Skw3SVAwMnR3MG00MGhDMGgyYnUrOXc3ZEVBWTI0RXdtOTVwM3RQVGxpNDB2?=
	=?utf-8?B?YmczYVlmREE0MjFYdGpWT1kwSHU3empvSHNFQnJ3VVh1OWU3cUFCNDVXZHF4?=
	=?utf-8?Q?kXBSXbkGKEaMtyx/fM=3D?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	6:xuNrc/vJMA55uAbdXIbHBHv8W3J8wi4IYz7gX2ma3EVzHi7nSvlrpyp0UGMjovwRE/qmy8JA2s/7dKMVVtdRMdn5WbBlUhmGhcuUjQ5XAYQB7CQIJdNXRxFtDRyT/cGPLGzVeww/tdfW7LDNsDcmIDbhHwloIyUSnuyBAoaEjcKJOcmR7vo3CYMtOr6+CRqviGUjygZiOnuVOXvl0Sel3ZnLzavxMFgHUqjC1GFqmQ5jJ+MUFPmyl8Kkwk7DfA5qWHrvfctJSioz/awGQzQ++URd4qqdfEbV2yjorsQntnKK/opUrNu6hfADCFVvI7CpLH0VpIRvSy84jUB4ZiF4DbHwdFFOFw6qKCzLccM2qjZBw2s9OCb1y1zVwL5/gTc/v98VYbwnKwMu1eSXnKt+gG0+srsyVtrA8tSZRX+hBsHeiInrKSScLOIuTPaO8qg0DPBoh/aDY0GgZwftuWRKQ05n34zOXFhL9PNjvVD2OHIcOH1t8pJaIjsm3Aawv0h7ioW8/hISxgMhTt0mbu/8HQAxnTy/0So0PRxey0QmKkk=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	5:9x5VjjXNmjgwT+RRCQX465eqfgNg3onWoEizSCiOg0GQa9t8s6PQOcF6PhRD366uFTb9j1OsVcYP5URbj0iHTR9FeOqFDWE5ExKn1Z0wSTx6N5njs5xx9/Tp2MaqHp74JNcPwK4b5M8LA3bzwBowVLoAP257ZPO/291akEmxniD/sFqn2YQOHprHWvFpkn38DsCv6o/j/wQ770L7iY9+FiA8GuEyZi6kfAL85NlMBZaJNVeH7DziYJP0FwAzEjZP8vDUCHc7SSTMD5jvYKzVrd9ZcQjKuPAzc9uIlBizpWqF3HG5p1SjTmTATvvXAijXaxESpkhmAvbCNjMJ8Lm2DTBqDOptThZy+W4Ok4kteg2N3OMkLSOhnEXMBQRzTlwzlaNoPL56UMRc8+xgy5SpSFKf1mWwCPQj4Qu35BVrVGikCmlt3TDjWAG9Kl3DiVNbmk47Sbis72pKQGBRG37iEym+9h1puZIY3VHCQrf6C6YszsOyMzVE3w2VlZATL1Uc;
	24:LdsJt4mg2MviqhWNtxIdGwor6ju7KikGt4pFUr8T3AsCbmGq6NQsvhHUUdNlmlgD8B6ENbsdFHntU7TmW9f0c5HNH9rGiDByp/nogWdi6EI=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	7:UFHpoLtdOhFUtUY5RE3D1PbbuO9WNEuOgPmWKANK955Fu110rUC+RIz+LzCx4JJ0Mx0ul25Jmqz82dl6u/CM61JrApLrXlykkaEr+OTx3axDdQrvDlcYm1mPCoZaU/2nzfF9Fm4Sf5JJLH99S5ML9dX5+p9zNIQDDsXwk5PntFhka82woD3k5CEcrytOg+xfexvh6RglIjDXpogYPmQg4OhOxQgUNlVbW3lwYO/xIvarDgHGhAiRKvB9JxcU94tMfLg9gITsZGyCIyEWMT+KRBTAOTlVMHYoUupbEcostdY2lb8fyMeHDTGzMxmhyY1v4Qo3RRs9E/QkgYnN/GwQBg==;
	20:KnD+DyA+GlKQtAnrOVIWXGTzb1U27np7Ja5LLFueAUYorvVIxuBTGRRbpk2FOPdunc8FyYSROWCbB/6LNcHm7rs0KRUWFgb0KVcbXanITgGWvWBEImOTijwBGEEgD7WUd+G+mIsrzrNEr796n9mTwv4znLQ2NNOOewYStRzsWKAEdysWg9uSG9gywwia5SU6RfOFKr1j9wc2O5Yfh/Ix51DmjHbSyycc3ukJ9uvG5Pwxtnp1zm/JcjxIxfOm+bhx
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Jun 2017 19:17:36.3964
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1151
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 7, 2017, 7:17 p.m.</div>
<pre class="content">
Add warnings to let the user know when bounce buffers are being used for
DMA when SME is active.  Since the bounce buffers are not in encrypted
memory, these notifications are to allow the user to determine some
appropriate action - if necessary.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |    8 ++++++++
 include/asm-generic/mem_encrypt.h  |    5 +++++
 include/linux/dma-mapping.h        |    9 +++++++++
 lib/swiotlb.c                      |    3 +++
 4 files changed, 25 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - June 8, 2017, 5:53 a.m.</div>
<pre class="content">
Hi Tom,

[auto build test ERROR on linus/master]
[also build test ERROR on v4.12-rc4 next-20170607]
[cannot apply to tip/x86/core]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Tom-Lendacky/x86-Secure-Memory-Encryption-AMD/20170608-104147
config: sparc-defconfig (attached as .config)
compiler: sparc-linux-gcc (GCC) 6.2.0
reproduce:
        wget https://raw.githubusercontent.com/01org/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=sparc 

All errors (new ones prefixed by &gt;&gt;):

   In file included from include/linux/dma-mapping.h:13:0,
                    from include/linux/skbuff.h:34,
                    from include/linux/filter.h:12,
                    from kernel//bpf/core.c:24:
<span class="quote">&gt;&gt; include/linux/mem_encrypt.h:16:29: fatal error: asm/mem_encrypt.h: No such file or directory</span>
    #include &lt;asm/mem_encrypt.h&gt;
                                ^
   compilation terminated.

vim +16 include/linux/mem_encrypt.h

2d7c2ec4 Tom Lendacky 2017-06-07  10   * published by the Free Software Foundation.
2d7c2ec4 Tom Lendacky 2017-06-07  11   */
2d7c2ec4 Tom Lendacky 2017-06-07  12  
2d7c2ec4 Tom Lendacky 2017-06-07  13  #ifndef __MEM_ENCRYPT_H__
2d7c2ec4 Tom Lendacky 2017-06-07  14  #define __MEM_ENCRYPT_H__
2d7c2ec4 Tom Lendacky 2017-06-07  15  
2d7c2ec4 Tom Lendacky 2017-06-07 @16  #include &lt;asm/mem_encrypt.h&gt;
2d7c2ec4 Tom Lendacky 2017-06-07  17  
2d7c2ec4 Tom Lendacky 2017-06-07  18  #endif	/* __MEM_ENCRYPT_H__ */

:::::: The code at line 16 was first introduced by commit
:::::: 2d7c2ec4c60e83432b27bfb32042706f404d4158 x86/mm: Add Secure Memory Encryption (SME) support

:::::: TO: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
:::::: CC: 0day robot &lt;fengguang.wu@intel.com&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - June 8, 2017, 7:58 a.m.</div>
<pre class="content">
On Wed, Jun 07, 2017 at 02:17:32PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt; appropriate action - if necessary.</span>

And what would the action be?  Do we need a boot or other option to
disallow this fallback for people who care deeply?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 8, 2017, 9:09 p.m.</div>
<pre class="content">
On 6/8/2017 12:53 AM, kbuild test robot wrote:
<span class="quote">&gt; Hi Tom,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [auto build test ERROR on linus/master]</span>
<span class="quote">&gt; [also build test ERROR on v4.12-rc4 next-20170607]</span>
<span class="quote">&gt; [cannot apply to tip/x86/core]</span>
<span class="quote">&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improve the system]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; url:    https://github.com/0day-ci/linux/commits/Tom-Lendacky/x86-Secure-Memory-Encryption-AMD/20170608-104147</span>
<span class="quote">&gt; config: sparc-defconfig (attached as .config)</span>
<span class="quote">&gt; compiler: sparc-linux-gcc (GCC) 6.2.0</span>
<span class="quote">&gt; reproduce:</span>
<span class="quote">&gt;          wget https://raw.githubusercontent.com/01org/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross</span>
<span class="quote">&gt;          chmod +x ~/bin/make.cross</span>
<span class="quote">&gt;          # save the attached .config to linux build tree</span>
<span class="quote">&gt;          make.cross ARCH=sparc</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; All errors (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     In file included from include/linux/dma-mapping.h:13:0,</span>
<span class="quote">&gt;                      from include/linux/skbuff.h:34,</span>
<span class="quote">&gt;                      from include/linux/filter.h:12,</span>
<span class="quote">&gt;                      from kernel//bpf/core.c:24:</span>
<span class="quote">&gt;&gt;&gt; include/linux/mem_encrypt.h:16:29: fatal error: asm/mem_encrypt.h: No such file or directory</span>
<span class="quote">&gt;      #include &lt;asm/mem_encrypt.h&gt;</span>
<span class="quote">&gt;                                  ^</span>
<span class="quote">&gt;     compilation terminated.</span>

Okay, I had the wrong understanding of the asm-generic directory. The
next series will fix this so it is not an issue for other arches.

Thanks,
Tom
<span class="quote">
&gt; </span>
<span class="quote">&gt; vim +16 include/linux/mem_encrypt.h</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  10   * published by the Free Software Foundation.</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  11   */</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  12</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  13  #ifndef __MEM_ENCRYPT_H__</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  14  #define __MEM_ENCRYPT_H__</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  15</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07 @16  #include &lt;asm/mem_encrypt.h&gt;</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  17</span>
<span class="quote">&gt; 2d7c2ec4 Tom Lendacky 2017-06-07  18  #endif	/* __MEM_ENCRYPT_H__ */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; :::::: The code at line 16 was first introduced by commit</span>
<span class="quote">&gt; :::::: 2d7c2ec4c60e83432b27bfb32042706f404d4158 x86/mm: Add Secure Memory Encryption (SME) support</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; :::::: TO: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; :::::: CC: 0day robot &lt;fengguang.wu@intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; 0-DAY kernel test infrastructure                Open Source Technology Center</span>
<span class="quote">&gt; https://lists.01.org/pipermail/kbuild-all                   Intel Corporation</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 8, 2017, 11:04 p.m.</div>
<pre class="content">
On 6/8/2017 2:58 AM, Christoph Hellwig wrote:
<span class="quote">&gt; On Wed, Jun 07, 2017 at 02:17:32PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt;&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt;&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt;&gt; appropriate action - if necessary.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And what would the action be?  Do we need a boot or other option to</span>
<span class="quote">&gt; disallow this fallback for people who care deeply?</span>

The action could be to enable the IOMMU so that lower DMA addresses are
used, or to replace the device with one that supports 64-bit DMA or, if
the device is not used much, you could just ignore it.

I&#39;m not sure we need an option to disallow the fallback.  Are you
thinking along the lines of disabling the device?

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 14, 2017, 4:50 p.m.</div>
<pre class="content">
On Wed, Jun 07, 2017 at 02:17:32PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt; appropriate action - if necessary.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |    8 ++++++++</span>
<span class="quote">&gt;  include/asm-generic/mem_encrypt.h  |    5 +++++</span>
<span class="quote">&gt;  include/linux/dma-mapping.h        |    9 +++++++++</span>
<span class="quote">&gt;  lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;  4 files changed, 25 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index f1215a4..c7a2525 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -69,6 +69,14 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  	return !!sme_me_mask;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (!sme_me_mask)</span>
<span class="quote">&gt; +		return 0ULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * The __sme_pa() and __sme_pa_nodebug() macros are meant for use when</span>
<span class="quote">&gt;   * writing to or comparing values from the cr3 register.  Having the</span>
<span class="quote">&gt; diff --git a/include/asm-generic/mem_encrypt.h b/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt; index b55c3f9..fb02ff0 100644</span>
<span class="quote">&gt; --- a/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt; @@ -22,6 +22,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0ULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * The __sme_set() and __sme_clr() macros are useful for adding or removing</span>
<span class="quote">&gt;   * the encryption mask from a value (e.g. when dealing with pagetable</span>
<span class="quote">&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; index 4f3eece..e2c5fda 100644</span>
<span class="quote">&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt; @@ -577,6 +578,10 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>

Something looks strange here:

you&#39;re checking sme_active() before calling sme_dma_mask() and yet in
it, you&#39;re checking !sme_me_mask again. What gives?

Why not move the sme_active() check into sme_dma_mask() and thus
simplify callers?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 14, 2017, 7:49 p.m.</div>
<pre class="content">
On 6/14/2017 11:50 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Jun 07, 2017 at 02:17:32PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt;&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt;&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt;&gt; appropriate action - if necessary.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/x86/include/asm/mem_encrypt.h |    8 ++++++++</span>
<span class="quote">&gt;&gt;   include/asm-generic/mem_encrypt.h  |    5 +++++</span>
<span class="quote">&gt;&gt;   include/linux/dma-mapping.h        |    9 +++++++++</span>
<span class="quote">&gt;&gt;   lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;&gt;   4 files changed, 25 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index f1215a4..c7a2525 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -69,6 +69,14 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;   	return !!sme_me_mask;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	if (!sme_me_mask)</span>
<span class="quote">&gt;&gt; +		return 0ULL;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   /*</span>
<span class="quote">&gt;&gt;    * The __sme_pa() and __sme_pa_nodebug() macros are meant for use when</span>
<span class="quote">&gt;&gt;    * writing to or comparing values from the cr3 register.  Having the</span>
<span class="quote">&gt;&gt; diff --git a/include/asm-generic/mem_encrypt.h b/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index b55c3f9..fb02ff0 100644</span>
<span class="quote">&gt;&gt; --- a/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/include/asm-generic/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -22,6 +22,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;   	return false;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 0ULL;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   /*</span>
<span class="quote">&gt;&gt;    * The __sme_set() and __sme_clr() macros are useful for adding or removing</span>
<span class="quote">&gt;&gt;    * the encryption mask from a value (e.g. when dealing with pagetable</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; index 4f3eece..e2c5fda 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   /**</span>
<span class="quote">&gt;&gt;    * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt;&gt; @@ -577,6 +578,10 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;   		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt;&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Something looks strange here:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; you&#39;re checking sme_active() before calling sme_dma_mask() and yet in</span>
<span class="quote">&gt; it, you&#39;re checking !sme_me_mask again. What gives?</span>
<span class="quote">&gt; </span>

I guess I don&#39;t need the sme_active() check since the second part of the
if statement can only ever be true if SME is active (since mask is
unsigned).

Thanks,
Tom
<span class="quote">
&gt; Why not move the sme_active() check into sme_dma_mask() and thus</span>
<span class="quote">&gt; simplify callers?</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 15, 2017, 9:08 a.m.</div>
<pre class="content">
On Wed, Jun 14, 2017 at 02:49:02PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; I guess I don&#39;t need the sme_active() check since the second part of the</span>
<span class="quote">&gt; if statement can only ever be true if SME is active (since mask is</span>
<span class="quote">&gt; unsigned).</span>

... and you can define sme_me_mask as an u64 directly (it is that already,
practically, as we don&#39;t do SME on 32-bit) and then get rid of the cast.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 15, 2017, 1:23 p.m.</div>
<pre class="content">
On 6/15/2017 4:08 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Jun 14, 2017 at 02:49:02PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; I guess I don&#39;t need the sme_active() check since the second part of the</span>
<span class="quote">&gt;&gt; if statement can only ever be true if SME is active (since mask is</span>
<span class="quote">&gt;&gt; unsigned).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... and you can define sme_me_mask as an u64 directly (it is that already,</span>
<span class="quote">&gt; practically, as we don&#39;t do SME on 32-bit) and then get rid of the cast.</span>

Let me look into that. There are so many places that are expecting an
unsigned long I&#39;ll have to see how that all works out from a build
perspective.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index f1215a4..c7a2525 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -69,6 +69,14 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return !!sme_me_mask;
 }
 
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return 0ULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * The __sme_pa() and __sme_pa_nodebug() macros are meant for use when
  * writing to or comparing values from the cr3 register.  Having the
<span class="p_header">diff --git a/include/asm-generic/mem_encrypt.h b/include/asm-generic/mem_encrypt.h</span>
<span class="p_header">index b55c3f9..fb02ff0 100644</span>
<span class="p_header">--- a/include/asm-generic/mem_encrypt.h</span>
<span class="p_header">+++ b/include/asm-generic/mem_encrypt.h</span>
<span class="p_chunk">@@ -22,6 +22,11 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return false;
 }
 
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0ULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * The __sme_set() and __sme_clr() macros are useful for adding or removing
  * the encryption mask from a value (e.g. when dealing with pagetable
<span class="p_header">diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="p_header">index 4f3eece..e2c5fda 100644</span>
<span class="p_header">--- a/include/linux/dma-mapping.h</span>
<span class="p_header">+++ b/include/linux/dma-mapping.h</span>
<span class="p_chunk">@@ -10,6 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/kmemcheck.h&gt;
 #include &lt;linux/bug.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 /**
  * List of possible attributes associated with a DMA mapping. The semantics
<span class="p_chunk">@@ -577,6 +578,10 @@</span> <span class="p_context"> static inline int dma_set_mask(struct device *dev, u64 mask)</span>
 
 	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="p_add">+		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	*dev-&gt;dma_mask = mask;
 	return 0;
 }
<span class="p_chunk">@@ -596,6 +601,10 @@</span> <span class="p_context"> static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
 {
 	if (!dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="p_add">+		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	dev-&gt;coherent_dma_mask = mask;
 	return 0;
 }
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 74d6557..f78906a 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -509,6 +509,9 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 	if (no_iotlb_memory)
 		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);
 
<span class="p_add">+	if (sme_active())</span>
<span class="p_add">+		pr_warn_once(&quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	mask = dma_get_seg_boundary(hwdev);
 
 	tbl_dma_addr &amp;= mask;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



