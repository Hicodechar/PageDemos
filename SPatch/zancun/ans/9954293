
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v4,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v4,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 16, 2017, 12:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170916123418.37807-3-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9954293/mbox/"
   >mbox</a>
|
   <a href="/patch/9954293/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9954293/">/patch/9954293/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	47B69603B4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:40:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 37C1D28BBB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:40:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2C85329316; Sat, 16 Sep 2017 12:40:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CC4CC28BBB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:40:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751782AbdIPMjU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 16 Sep 2017 08:39:20 -0400
Received: from mail-dm3nam03on0057.outbound.protection.outlook.com
	([104.47.41.57]:43351
	&quot;EHLO NAM03-DM3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751185AbdIPMeu (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 16 Sep 2017 08:34:50 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=2lD7zy2nIJnmhgXkieNSlZ4zNjzCQGqUHS2ystqh2FY=;
	b=qoOyDysb29jR9Hm15T5ytbwzt4TKlY+IfwvGUiAXk/fqUEMUg5xYrVtWnyLzzXw661RLbdlzwbbfAd826LmfjyxlDkkmkN5kFREduir4K4yCgTZqzsXUGqjfICo+SD9eLRzLerBos4iavcfiAXBE8gevXj7OV3uC2SKxxfyvi1Q=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.56.11; Sat, 16 Sep 2017 12:34:42 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: linux-kernel@vger.kernel.org, x86@kernel.org, kvm@vger.kernel.org
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v4 02/17] x86/mm: Add Secure Encrypted Virtualization
	(SEV) support
Date: Sat, 16 Sep 2017 07:34:03 -0500
Message-Id: &lt;20170916123418.37807-3-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20170916123418.37807-1-brijesh.singh@amd.com&gt;
References: &lt;20170916123418.37807-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: DM3PR12CA0051.namprd12.prod.outlook.com (10.161.151.19) To
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 6294e9b5-615e-4810-b7e4-08d4fcff4e69
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(2017030254152)(48565401081)(300000503095)(300135400095)(2017052603199)(201703131423075)(201703031133081)(201702281549075)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:CY1PR12MB0152; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	3:eUss9rfOj2ynxR8KcnIo9U4T65uwGPc+WsfE7MxeFA9ScikHzcSjberqtTNJupVXzRAsFNRfUJqguzZkGjm11BUO9xe9JJqJeigOMJEPPGcDuU+tvasiWczjk/Dwxmk21z/2GlR4pB1DHQaWcnpzHLKgev/PK4M2GBWuAczRkJ5EsdN/JuUwr7saY9OL03wzSs7axt55RUDKrY/6IiVIax0UygIZ+KJyumYJzw5Ten6Ej6DboUUy5GSxmeiMQD9q;
	25:DytKz4E2VSEEvqsaeGX9Y0hl39sz/qPWs3GXzCcrFIh6Kt29M6QkZ3ykjJlsm+P04TNJfB+gyIF+78mPHBHAgysZQ3FRxha1xudNxcNWUx/pdVUw2ss5ZbqhNRE2VIK1GeGHGJ4qCNfclnQ0+i0VM7vIEAc0XNuRV/g/YBOL3mhkpsZhu5hdk0enKrFFfYIQiCRkuy+gXJwkCMUdD7pvvTyjqJlolUP5wHKXx7n6HraDnPgDp06VpYd1s9ITAjw42oea6kR6qAgDuxKa7HuyiNQdU+n6jkNzoc2eHj4lfpPjsS6PtewX65drahwgBCQqoJ783t+5XWXudcD8dGTqzw==;
	31:PS3LfJbaKgfzVu8g/h1l9JuB0RAgVGRo9NC2EmBB2ByzEMJpU5MOqPp6VLaLO/FuFeobHYOSf2IKh2/SpU0Yf+JsQGX2aNXyib5ezTO8T+XkksVJ+CDtPKuOEIPNZ4fkqpON40ekAHcgjidKhKAACwySdYs72y8972qGWhs1sr5uJaBT1Ozn3/DVpO5K3SqTbHIBS3oBxanguO7kaWt58GPbgAyt2EbUY4FX9ZUwHY0=
X-MS-TrafficTypeDiagnostic: CY1PR12MB0152:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:u8fn4X5CZO1jtOK+E3bkOImSE4d0jt8215v9Xvvoesi4CR7M8eN0rMGSWWDDxEzNV/839Be1Ew4OF5DPj+2e8Q0gRDc14MU5kxcOG+rIAHiqd6T4Q1jTx34WVjJ6yphvfB4Zr8hssZadF6DM+J4g/o6x89qMSdTSMfS+2S78O78+SdpEtsvmll079sID0lU3J9tj2Fpc+y98FsLmdSFZOSdNunEI4r9MU1i3+PfPLHC2uehr2j1sZKSxcp6ZpM1PO/c+FRAdrJcQqUvmqfb50FLFHGivuIrY0skJpcgDZECf6lPbA+du+JNmxMXywPia79/P4Ob5JigRGjscmoYIsgV4ngourFGOu+jv5VGsYQR2kVC4YE095rRtOzan05NxQXCMTuuKx16uAclcDQHdCpPmjnPWH/M4WEjQuJs99XkC5Fm3HzVr8h4tb7awlZj0lHjbbernxa3Mp9rvZZZj+/k9MkvzJ5RoF7qfiI4b38+Gosd/Y9oI/mg72rJSYn71;
	4:5SR7GoYUA41fwf5X0B64Mxj7LdSaU6MV7hO7U8PsH/Hx/cR08Lc7GBLrfeQknJRbRuzIfYdHqQlITA4bNX1RNNPmgGScmMfuDVLs/nHD0FtAoi6UPxUkKrmJabWAtwYW5YUkMmzItcldZ7DZt5US9w91ZM14ORJR/w6KOUyQpwANSojgP2th3r+Qv+BR54r6GNxSK7zAtBINyQJ0rxrWn9kmIMrOUq9ll5k5yNUBycCnY++03j9d9xYFUL/m0mTD7fJ/m/U7iSwr+kFAmSjnC22iXiWqUlMLI+6g7oLl8omkKp5PM1rE3MAq8ZPHJafc6qbJxE1SrriBgkIteI1bqw==
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB015269229213DDB48AA217B3E56D0@CY1PR12MB0152.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(100000703101)(100105400095)(93006095)(93001095)(3002001)(10201501046)(6055026)(6041248)(20161123564025)(20161123562025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(20161123555025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY1PR12MB0152; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY1PR12MB0152; 
X-Forefront-PRVS: 0432A04947
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(376002)(199003)(189002)(6486002)(53416004)(81156014)(48376002)(81166006)(50466002)(6666003)(5003940100001)(7736002)(54906002)(316002)(16586007)(8676002)(97736004)(2906002)(305945005)(53936002)(5660300001)(86362001)(478600001)(16526017)(1076002)(106356001)(110136004)(3846002)(4326008)(50226002)(68736007)(25786009)(6116002)(33646002)(105586002)(101416001)(50986999)(47776003)(2950100002)(8936002)(66066001)(36756003)(189998001)(76176999)(309714004);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0152;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0152;
	23:KBcn3yUdjkXySnEOprO4yPB+dDccgIMv4pA+erFuQ?=
	=?us-ascii?Q?iuFuEN28U5p7but0COb4vhLBjVEKkx8L2g+FtbIu876fwx3AV98JSiQQ9QRA?=
	=?us-ascii?Q?Ar/FwcLg1r3LFuOIpXC9xZgz7zb1lUKB/kWb99OpfZifs4H4OnHx7sR6KdL4?=
	=?us-ascii?Q?nkQp/PLgT/PI2FU+SX0KUzivrKZPPihQIqDaH+UCGHBckYhgz/HoYbPpMnoW?=
	=?us-ascii?Q?4ykJD08vgDb3CNPPyfdZ6TGJcDiZwR+E3QfSQFrT9JGvLQScSEy5r2vGeFQr?=
	=?us-ascii?Q?NjtPuws8TC2KM7cnUCaoYbo3DrFcAJRBHEFifK9YTrDLoQ6qq9gJGYEXHaQl?=
	=?us-ascii?Q?Ckezi5Cdg2TwZkoEQNS/so37KV1VyTy0AT9uGSLfNAJDsrN5vbQq02LjVbPF?=
	=?us-ascii?Q?q2UKip0PSSOmz2e7DwnUOMaqQ4KP7E8QbI1vwAHiS3voH/W4KBnuRV5//WsM?=
	=?us-ascii?Q?vdD5b33bfRBiv1DuOLIc3qPYRAAGbWy4NYToHcGj8BmjZM9wHNHLW3ilYARo?=
	=?us-ascii?Q?8ZrLSQcwmBMfIfFJww5Floe4TIzQ51s8/KPLqJ/x8ccYU+9QqgmdNrhpB1E7?=
	=?us-ascii?Q?4V6SrW7pEZMcj/kWiu6hO3uqxDx5o+4AuGEav1XbMUdXkidPJU6ov7zqP/4/?=
	=?us-ascii?Q?niZpREa9NGA6bQLCWx4jKQbmJ03DoYjEMNDnHPQtZMFTeL4u6LObEwE/vrBj?=
	=?us-ascii?Q?FaGiPFr4g0knWfOinQ0lafTkXnjUxYtEkHo+fhOQRPq+SpF3Re/8SLLdyIXX?=
	=?us-ascii?Q?dS4b6PS64UdKUSzSREAfa1teq6Mc5FslZxEdUXdQgi+fA0/l5/uno3qJNhVA?=
	=?us-ascii?Q?1R/Tl40ki7uK50ceNeMpHpW+vPGBEOanAP3M3nvV5iZM2wQCFn1XSeVqz+A/?=
	=?us-ascii?Q?n+Vb7TDLxXGygGHwPwfyAB7U+lS/EA3nKsmZ4tA7uIl3oqXM0IcPTmtJ4NKq?=
	=?us-ascii?Q?u1Y9vCIVAJt2+rGofBB+NxlPEtySvGuWQ1IfyiicTz+20sEL9pZj8RjW72zs?=
	=?us-ascii?Q?/nlEk7ev23bYWpZCgHPGirOkKQuG6u5X7Vs3LCAZpodTVyHxLcZCTRCYVwaO?=
	=?us-ascii?Q?CKcyPNCv5qTlyIR+nbjnv2F7IzWb3Heb6XVr73Y9J4Hws5ednwRMXWKEuHf/?=
	=?us-ascii?Q?zJ5rlju8fU=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	6:Jhts5vpd5Uyc1xqKRCO0NiG2g5gLiDe8Igbh8fl/OJBnEr3rNGFGQpB77gTHTpygmqFxIj2Cu369RB2klo1BI8BhNlCI4vbFsMyK5eBcN7Jm3rBz6RLjEWrq1eHeqf5rODN0JMx2YmI9JW8nqFHO3jzZr2i0Fqluhj07cHLdm6NThiLUlerM2VpXxqOg9vYsnJMgYi4YFjEvJ5DeYIiIl9qPSEnS5OxoJXRSJjR8DyShHlmbJjDuzLwE2RkZSbo0iyKieK7qDvFlBvDroZiYsncorcwBxjjic5lmKw4lV+0R3GTla0JZxKD+zi+2aFMgHHGBUhOI88PB3TWqwLEURw==;
	5:YtiMX0ojrw0hA1W0jUu4DfRqzGIhp4jwisnCuM7dKYQDk9aNYAk1DLEpo8pmlV0PAZRVsEdAq2ImFWCnKcYcx+sPY0Bpx2S5VkcSfpOgUrENwHu1GdIuU/9gw7M7G9Oq8SmUVT7gx0J18exPdLOOTA==;
	24:jtHuMBoQbzPSrQKJvMCmFprETUy/hA428ZiWOc7G/G1IXfPfLKtNLrg/bfCX2Ep8QS3ER0Sv3KpyOSDYVpiDVPhtYJ0RydMGbY5FjYnmXs8=;
	7:Vwyn/ok7P7iMiFaBdDt/nkubX729z/RoZWTBVlVKK/dGeFTypX7ZqkTNdpkYeZR689Ks2jqPB/OBONb1oAbOONeizVEfZ1TdseFtq81gh7/K85rOKOkpXUWs7gYETbmJczstQAYkjjUGB7qOu+qt8w94MPtqF2wT17KxAaJBLOdRkAAAu3p34iONwwQ0EUsk/EZcdJgIi76iqzqtb6RqGC7KmiGURiO8UmXUiL5HiTk=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:XUfgsKqwUhn32bUM3oah2bp+BQ+1x4Touot+DP1qpZS6/gBk3tLjlIOavUM3Hs5Xcq9pFIxoA3aR4cxS5+3rXWRLnbjYg/mjFJOLWhWSoaQeFjl8N3wl7HmjPMMMg1XigbT+cQOof8l2hnkbk7pQ2HBWHrls1bOsxOnnRHCCdFXOWI4gLiFwLAHdyh2xiY7V33JttByBaBm4M9Kg0/PU3G0or8A0rDt9ubcZe71a/lNPjfnxpNCV+A6m0dQHXjOO
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Sep 2017 12:34:42.3649
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0152
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 16, 2017, 12:34 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encrypted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org
Cc: x86@kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |  6 ++++++
 arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++
 include/linux/mem_encrypt.h        | 12 ++++++++----
 3 files changed, 40 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 17, 2017, 2:02 p.m.</div>
<pre class="content">
On Sat, Sep 16, 2017 at 07:34:03AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encrypted Virtualization (SEV). This initial</span>
<span class="quote">&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |  6 ++++++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        | 12 ++++++++----</span>
<span class="quote">&gt;  3 files changed, 40 insertions(+), 4 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 6a77c63540f7..2b024741bce9 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -47,6 +47,9 @@ void __init mem_encrypt_init(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +bool sme_active(void);</span>
<span class="quote">&gt; +bool sev_active(void);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #else	/* !CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define sme_me_mask	0ULL</span>
<span class="quote">&gt; @@ -64,6 +67,9 @@ static inline void __init sme_early_init(void) { }</span>
<span class="quote">&gt;  static inline void __init sme_encrypt_kernel(void) { }</span>
<span class="quote">&gt;  static inline void __init sme_enable(struct boot_params *bp) { }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline bool sme_active(void) { return false; }</span>
<span class="quote">&gt; +static inline bool sev_active(void) { return false; }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; index 3fcc8e01683b..4e6dcabe52fc 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; @@ -40,6 +40,8 @@ static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
<span class="quote">&gt;  u64 sme_me_mask __section(.data) = 0;</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(sme_me_mask);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +unsigned int sev_enabled __section(.data) = 0;</span>

static.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  /* Buffer used for early in-place encryption by BSP, no locking needed */</span>
<span class="quote">&gt;  static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -190,6 +192,30 @@ void __init sme_early_init(void)</span>
<span class="quote">&gt;  		protection_map[i] = pgprot_encrypted(protection_map[i]);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * SME and SEV are very similar but they are not the same, so there are</span>
<span class="quote">&gt; + * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="quote">&gt; + * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="quote">&gt; + * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * The trampoline code is a good example for this requirement.  Before</span>
<span class="quote">&gt; + * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="quote">&gt; + * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="quote">&gt; + * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="quote">&gt; + * the trampoline area must be encrypted.</span>
<span class="quote">&gt; + */</span>

Good!
<span class="quote">
&gt; +bool sme_active(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +bool sev_active(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /* Architecture __weak replacement functions */</span>
<span class="quote">&gt;  void __init mem_encrypt_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; index 265a9cd21cb4..b55ba30a60a0 100644</span>
<span class="quote">&gt; --- a/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; @@ -22,17 +22,21 @@</span>
<span class="quote">&gt;  #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define sme_me_mask	0ULL</span>
<span class="quote">&gt; +#define sev_enabled	0</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline bool sme_active(void) { return false; }</span>
<span class="quote">&gt; +static inline bool sev_active(void) { return false; }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline bool sme_active(void)</span>
<span class="quote">&gt; +static inline unsigned long sme_get_me_mask(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return !!sme_me_mask;</span>
<span class="quote">&gt; +	return sme_me_mask;</span>

Same issue as before: if we&#39;re going to export the mask, you don&#39;t
need the accessor. If we&#39;re going to hide the mask in a static in
mem_encrypt.c, we should use the accessor solely.

But that can be done ontop of the patchset.
<span class="quote">
&gt; -static inline u64 sme_get_me_mask(void)</span>
<span class="quote">&gt; +static inline bool mem_encrypt_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return sme_me_mask;</span>
<span class="quote">&gt; +	return !!sme_me_mask;</span>

As before, you don&#39;t need the !!.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 26, 2017, 7:06 p.m.</div>
<pre class="content">
On 09/17/2017 09:02 AM, Borislav Petkov wrote:
...
<span class="quote">
&gt;&gt;   </span>
<span class="quote">&gt;&gt; +unsigned int sev_enabled __section(.data) = 0;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; static.</span>
<span class="quote">&gt; </span>

Will covert to static in next rev.

...
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; -static inline u64 sme_get_me_mask(void)</span>
<span class="quote">&gt;&gt; +static inline bool mem_encrypt_active(void)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; -	return sme_me_mask;</span>
<span class="quote">&gt;&gt; +	return !!sme_me_mask;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As before, you don&#39;t need the !!.</span>
<span class="quote">&gt; </span>

Will fix in next rev.
  

thanks
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 6a77c63540f7..2b024741bce9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void);</span>
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);
 
<span class="p_add">+bool sme_active(void);</span>
<span class="p_add">+bool sev_active(void);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_chunk">@@ -64,6 +67,9 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 3fcc8e01683b..4e6dcabe52fc 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -40,6 +40,8 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 u64 sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+unsigned int sev_enabled __section(.data) = 0;</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_chunk">@@ -190,6 +192,30 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * SME and SEV are very similar but they are not the same, so there are</span>
<span class="p_add">+ * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="p_add">+ * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="p_add">+ * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The trampoline code is a good example for this requirement.  Before</span>
<span class="p_add">+ * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="p_add">+ * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="p_add">+ * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="p_add">+ * the trampoline area must be encrypted.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool sme_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="p_add">+</span>
<span class="p_add">+bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 265a9cd21cb4..b55ba30a60a0 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -22,17 +22,21 @@</span> <span class="p_context"></span>
 #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_add">+#define sev_enabled	0</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
 
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-static inline bool sme_active(void)</span>
<span class="p_add">+static inline unsigned long sme_get_me_mask(void)</span>
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return sme_me_mask;</span>
 }
 
<span class="p_del">-static inline u64 sme_get_me_mask(void)</span>
<span class="p_add">+static inline bool mem_encrypt_active(void)</span>
 {
<span class="p_del">-	return sme_me_mask;</span>
<span class="p_add">+	return !!sme_me_mask;</span>
 }
 
 #ifdef CONFIG_AMD_MEM_ENCRYPT

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



