
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,05/12] mm: thp: add core routines for thp/pmd migration - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,05/12] mm: thp: add core routines for thp/pmd migration</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 7, 2016, 11:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1478561517-4317-6-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9416227/mbox/"
   >mbox</a>
|
   <a href="/patch/9416227/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9416227/">/patch/9416227/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C2EC96048F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Nov 2016 23:32:46 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B2A9328E52
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Nov 2016 23:32:46 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A1C8A28E74; Mon,  7 Nov 2016 23:32:46 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7BE2B28E65
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Nov 2016 23:32:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752537AbcKGXcY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 7 Nov 2016 18:32:24 -0500
Received: from mail-pf0-f196.google.com ([209.85.192.196]:34167 &quot;EHLO
	mail-pf0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752399AbcKGXcV (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 7 Nov 2016 18:32:21 -0500
Received: by mail-pf0-f196.google.com with SMTP id y68so17347960pfb.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 07 Nov 2016 15:32:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=H9Nqbu/ZfGAH+mnAL16wq3/TXyWfhbZj5kQ9uFhIqME=;
	b=hJDx3UiRzYg2YRfrGAT+ecgXdHqrBk5NyYBXsGn4P75c5T/b5fUOdNfgFsv5KAZFVL
	BRibA8rwVGQsO13OQMBVxdqcyN3eMbj1SpFm2wP6lWzUFIJdLi9Cpk7KMn6w+8Nsy7Z+
	NdiyFAX9eP+nzuKJyHJNYp89FjQRhLfwrvz5Y0GxVgEcfyb/tK+eTw0IVa9iz77uZ7mv
	r5nw8DrWMZ/sohhaa308rTZgpazxKueslI0Fycj5S+m245bkEySPHF05H1rYkhQt8yb6
	6Xr6owzJSIcfpM9aw8R4SS3Gpq/UPkDv/yu7MXQXEsvQOn5V6K3vgWTay7pvBNXIiro4
	rzDw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=H9Nqbu/ZfGAH+mnAL16wq3/TXyWfhbZj5kQ9uFhIqME=;
	b=Gh7bXfc0HFuJJ4CVLMai55xNcOGoVRIQwpot6YTdH4g2WyMjy1fWJqIQbVSGE8ku9o
	qRIDvMi045LrCNOBeXOVgPNv8lNXjoZ0YEsJw244wS0KDF6zqQ+NBoOxgDziCjoJgEPq
	N6THg2xxYWN1PTFjL2F8Mlu+sjeNkXMppI1jMeOhb9RkgboSWlQbyQ2aZmNqDqPOrGgb
	mTTwERHjvOEy4m6SrvzW3Zl5dOEh64UxVNsZGLG9K9Jox9aU7tlsPH4RD6mJkBamJB8u
	tYJ9AvZMr6KrH1r53MZGheAPdUlMP/BguEbMHq5AZueGUv/Imn0cS/0/exgJI6hdtNbW
	sOYA==
X-Gm-Message-State: ABUngveHdRfkpAFeVTIsF0D07CIJ+VDbKwJpAnA4Kzup521iE9vhi/LEsuIoonHyNIW/QA==
X-Received: by 10.99.103.198 with SMTP id b189mr14358889pgc.81.1478561540416;
	Mon, 07 Nov 2016 15:32:20 -0800 (PST)
Received: from www9186uo.sakura.ne.jp (www9186uo.sakura.ne.jp.
	[153.121.56.200]) by smtp.gmail.com with ESMTPSA id
	w125sm40952pfb.8.2016.11.07.15.32.17
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 07 Nov 2016 15:32:19 -0800 (PST)
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: linux-mm@kvack.org
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Pavel Emelyanov &lt;xemul@parallels.com&gt;, Zi Yan &lt;zi.yan@cs.rutgers.edu&gt;,
	Balbir Singh &lt;bsingharora@gmail.com&gt;, linux-kernel@vger.kernel.org,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;
Subject: [PATCH v2 05/12] mm: thp: add core routines for thp/pmd migration
Date: Tue,  8 Nov 2016 08:31:50 +0900
Message-Id: &lt;1478561517-4317-6-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1478561517-4317-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
References: &lt;1478561517-4317-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 7, 2016, 11:31 p.m.</div>
<pre class="content">
This patch prepares thp migration&#39;s core code. These code will be open when
unmap_and_move() stops unconditionally splitting thp and get_new_page() starts
to allocate destination thps.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
---
ChangeLog v1 -&gt; v2:
- support pte-mapped thp, doubly-mapped thp
---
 arch/x86/include/asm/pgtable_64.h |   2 +
 include/linux/swapops.h           |  61 +++++++++++++++
 mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++
 mm/migrate.c                      |  44 ++++++++++-
 mm/pgtable-generic.c              |   3 +-
 5 files changed, 262 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Nov. 8, 2016, 3:05 a.m.</div>
<pre class="content">
Hi Naoya,

[auto build test ERROR on mmotm/master]
[also build test ERROR on v4.9-rc4 next-20161028]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Naoya-Horiguchi/mm-x86-move-_PAGE_SWP_SOFT_DIRTY-from-bit-7-to-bit-6/20161108-080615
base:   git://git.cmpxchg.org/linux-mmotm.git master
config: arm-at91_dt_defconfig (attached as .config)
compiler: arm-linux-gnueabi-gcc (Debian 6.1.1-9) 6.1.1 20160705
reproduce:
        wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=arm 

All errors (new ones prefixed by &gt;&gt;):

   In file included from fs/proc/task_mmu.c:14:0:
   include/linux/swapops.h: In function &#39;swp_entry_to_pmd&#39;:
<span class="quote">&gt;&gt; include/linux/swapops.h:216:14: error: empty scalar initializer</span>
     pmd_t pmd = {};
                 ^
   include/linux/swapops.h:216:14: note: (near initialization for &#39;pmd&#39;)

vim +216 include/linux/swapops.h

   210	{
   211		return swp_entry(0, 0);
   212	}
   213	
   214	static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)
   215	{
<span class="quote"> &gt; 216		pmd_t pmd = {};</span>
   217	
   218		return pmd;
   219	}

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Nov. 8, 2016, 8:13 a.m.</div>
<pre class="content">
On 11/08/2016 05:01 AM, Naoya Horiguchi wrote:
<span class="quote">&gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; to allocate destination thps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; index 1cc82ec..3a1b48e 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; @@ -167,7 +167,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt;  					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \</span>
<span class="quote">&gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })</span>
<span class="quote">&gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>

The above macro takes *pte* but evaluates on *pmd*, guess its should
be fixed either way.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123921">Naoya Horiguchi</a> - Nov. 8, 2016, 8:16 a.m.</div>
<pre class="content">
On Tue, Nov 08, 2016 at 01:43:54PM +0530, Anshuman Khandual wrote:
<span class="quote">&gt; On 11/08/2016 05:01 AM, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; &gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; &gt; to allocate destination thps.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; &gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt; &gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt; &gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt; &gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; index 1cc82ec..3a1b48e 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; @@ -167,7 +167,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt; &gt;  					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \</span>
<span class="quote">&gt; &gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })</span>
<span class="quote">&gt; &gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; &gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The above macro takes *pte* but evaluates on *pmd*, guess its should</span>
<span class="quote">&gt; be fixed either way.</span>

Right, I fix it.
Thank you very much.

- Naoya
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Nov. 10, 2016, 8:29 a.m.</div>
<pre class="content">
On 11/08/2016 05:01 AM, Naoya Horiguchi wrote:
<span class="quote">&gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; to allocate destination thps.</span>
<span class="quote">&gt; </span>

Snip
<span class="quote">
&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">

&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; index 71c5f91..6012343 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; @@ -118,7 +118,8 @@ pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pmd_t pmd;</span>
<span class="quote">&gt;  	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);</span>
<span class="quote">&gt; -	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; +	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="quote">&gt; +		  !pmd_devmap(*pmdp))</span>

Its a valid VM_BUG_ON check but is it related to THP migration or
just a regular fix up ?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 10, 2016, 9:43 a.m.</div>
<pre class="content">
On Thu, Nov 10, 2016 at 01:59:03PM +0530, Anshuman Khandual wrote:
<span class="quote">&gt; On 11/08/2016 05:01 AM, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; &gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; &gt; to allocate destination thps.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Snip</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; &gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt; &gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt; &gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt; &gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; index 71c5f91..6012343 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; @@ -118,7 +118,8 @@ pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	pmd_t pmd;</span>
<span class="quote">&gt; &gt;  	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);</span>
<span class="quote">&gt; &gt; -	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; &gt; +	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="quote">&gt; &gt; +		  !pmd_devmap(*pmdp))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Its a valid VM_BUG_ON check but is it related to THP migration or</span>
<span class="quote">&gt; just a regular fix up ?</span>

Without this change, this VM_BUG_ON always triggers when migration happens
on normal thp and it succeeds, so I included it here.

- Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 14, 2016, 11:45 a.m.</div>
<pre class="content">
On Tue, Nov 08, 2016 at 08:31:50AM +0900, Naoya Horiguchi wrote:
<span class="quote">&gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; to allocate destination thps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; index 1cc82ec..3a1b48e 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; @@ -167,7 +167,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt;  					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \</span>
<span class="quote">&gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })</span>
<span class="quote">&gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt;  #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })</span>
<span class="quote">&gt; +#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt;  extern void cleanup_highmap(void);</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; index 5c3a5f3..b6b22a2 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; @@ -163,6 +163,67 @@ static inline int is_write_migration_entry(swp_entry_t entry)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +extern void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long address);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="quote">&gt; +	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="quote">&gt; +	return __swp_entry_to_pmd(arch_entry);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +			struct vm_area_struct *vma, unsigned long address)</span>
<span class="quote">&gt; +{</span>

VM_BUG()? Or BUILD_BUG()?
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>

Ditto.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return swp_entry(0, 0);</span>

Ditto.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	pmd_t pmd = {};</span>

Ditto.
<span class="quote">
&gt; +	return pmd;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_MEMORY_FAILURE</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern atomic_long_t num_poisoned_pages __read_mostly;</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; index 0509d17..b3022b3 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -2310,3 +2310,157 @@ static int __init split_huge_pages_debugfs(void)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  late_initcall(split_huge_pages_debugfs);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +void set_pmd_migration_entry(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; +				unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; +	pmd_t pmdval;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; +	if (!pgd_present(*pgd))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +	pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; +	if (!pud_present(*pud))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +	pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; +	pmdval = *pmd;</span>
<span class="quote">&gt; +	barrier();</span>
<span class="quote">&gt; +	if (!pmd_present(pmdval))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	if (pmd_trans_huge(pmdval)) {</span>
<span class="quote">&gt; +		pmd_t pmdswp;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +		if (!pmd_present(*pmd))</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; +		if (unlikely(!pmd_trans_huge(*pmd)))</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>

Just check *pmd == pmdval?
<span class="quote">
&gt; +		if (pmd_page(*pmd) != page)</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="quote">&gt; +		if (pmd_dirty(pmdval))</span>
<span class="quote">&gt; +			set_page_dirty(page);</span>
<span class="quote">&gt; +		entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="quote">&gt; +		pmdswp = swp_entry_to_pmd(entry);</span>
<span class="quote">&gt; +		pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="quote">&gt; +		set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="quote">&gt; +		page_remove_rmap(page, true);</span>
<span class="quote">&gt; +		put_page(page);</span>
<span class="quote">&gt; +unlock_pmd:</span>
<span class="quote">&gt; +		spin_unlock(ptl);</span>
<span class="quote">&gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; +		pte_t *pte;</span>
<span class="quote">&gt; +		pte_t pteval;</span>
<span class="quote">&gt; +		struct page *tmp = compound_head(page);</span>
<span class="quote">&gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +		pte_t swp_pte;</span>
<span class="quote">&gt; +		int i;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pte = pte_offset_map(pmd, address);</span>
<span class="quote">&gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; +		spin_lock(ptl);</span>

pte_offset_map_lock() ?
<span class="quote">
&gt; +		for (i = 0; i &lt; HPAGE_PMD_NR; i++, pte++, tmp++) {</span>
<span class="quote">&gt; +			if (!(pte_present(*pte) &amp;&amp;</span>
<span class="quote">&gt; +			      page_to_pfn(tmp) == pte_pfn(*pte)))</span>

			if (!pte_present(*pte) || pte_page(*pte) != tmp) ?
<span class="quote">
&gt; +				continue;</span>
<span class="quote">&gt; +			pteval = ptep_clear_flush(vma, address, pte);</span>
<span class="quote">&gt; +			if (pte_dirty(pteval))</span>
<span class="quote">&gt; +				set_page_dirty(tmp);</span>
<span class="quote">&gt; +			entry = make_migration_entry(tmp, pte_write(pteval));</span>
<span class="quote">&gt; +			swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt; +			set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt; +			page_remove_rmap(tmp, false);</span>
<span class="quote">&gt; +			put_page(tmp);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		pte_unmap_unlock(pte, ptl);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	pmd_t pmde;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pmde = *pmd;</span>
<span class="quote">&gt; +	barrier();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!pmd_present(pmde)) {</span>
<span class="quote">&gt; +		if (is_migration_entry(pmd_to_swp_entry(pmde))) {</span>

		if (!is_migration_entry(pmd_to_swp_entry(pmde)))
			return SWAP_AGAIN;

And one level less indentation below.
<span class="quote">
&gt; +			unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +			unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +			entry = pmd_to_swp_entry(*pmd);</span>
<span class="quote">&gt; +			if (migration_entry_to_page(entry) != old)</span>
<span class="quote">&gt; +				goto unlock_ptl;</span>
<span class="quote">&gt; +			get_page(new);</span>
<span class="quote">&gt; +			pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="quote">&gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; +				pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="quote">&gt; +			flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +			page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="quote">&gt; +			pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="quote">&gt; +			set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="quote">&gt; +			flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +			if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; +				mlock_vma_page(new);</span>
<span class="quote">&gt; +			update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; +unlock_ptl:</span>
<span class="quote">&gt; +			spin_unlock(ptl);</span>

			return SWAP_AGAIN;

And one level less indentation below.
<span class="quote">
&gt; +		}</span>
<span class="quote">&gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; +		pte_t *ptep;</span>
<span class="quote">&gt; +		pte_t pte;</span>
<span class="quote">&gt; +		int i;</span>
<span class="quote">&gt; +		struct page *tmpnew = compound_head(new);</span>
<span class="quote">&gt; +		struct page *tmpold = compound_head((struct page *)old);</span>
<span class="quote">&gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; +		spin_lock(ptl);</span>

pte_offset_map_lock() ?
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +		for (i = 0; i &lt; HPAGE_PMD_NR;</span>
<span class="quote">&gt; +		     i++, ptep++, tmpnew++, tmpold++, address += PAGE_SIZE) {</span>
<span class="quote">&gt; +			pte = *ptep;</span>
<span class="quote">&gt; +			if (!is_swap_pte(pte))</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			entry = pte_to_swp_entry(pte);</span>
<span class="quote">&gt; +			if (!is_migration_entry(entry) ||</span>
<span class="quote">&gt; +			    migration_entry_to_page(entry) != tmpold)</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			get_page(tmpnew);</span>
<span class="quote">&gt; +			pte = pte_mkold(mk_pte(tmpnew,</span>
<span class="quote">&gt; +					       READ_ONCE(vma-&gt;vm_page_prot)));</span>

READ_ONCE()? Do we get here under mmap_sem, right?
<span class="quote">
&gt; +			if (pte_swp_soft_dirty(*ptep))</span>
<span class="quote">&gt; +				pte = pte_mksoft_dirty(pte);</span>
<span class="quote">&gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; +				pte = maybe_mkwrite(pte, vma);</span>
<span class="quote">&gt; +			flush_dcache_page(tmpnew);</span>
<span class="quote">&gt; +			set_pte_at(mm, address, ptep, pte);</span>
<span class="quote">&gt; +			if (PageAnon(new))</span>
<span class="quote">&gt; +				page_add_anon_rmap(tmpnew, vma, address, false);</span>
<span class="quote">&gt; +			else</span>
<span class="quote">&gt; +				page_add_file_rmap(tmpnew, false);</span>
<span class="quote">&gt; +			update_mmu_cache(vma, address, ptep);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		pte_unmap_unlock(ptep, ptl);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; index 66ce6b4..54f2eb6 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; @@ -198,6 +198,8 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt;  	swp_entry_t entry;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt;   	pmd_t *pmd;</span>
<span class="quote">&gt;  	pte_t *ptep, pte;</span>
<span class="quote">&gt;   	spinlock_t *ptl;</span>
<span class="quote">&gt; @@ -208,10 +210,29 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  			goto out;</span>
<span class="quote">&gt;  		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; -		pmd = mm_find_pmd(mm, addr);</span>
<span class="quote">&gt; +		pmd_t pmde;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; +		if (!pgd_present(*pgd))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; +		if (!pud_present(*pud))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt;  		if (!pmd)</span>
<span class="quote">&gt;  			goto out;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +		if (PageTransCompound(new)) {</span>
<span class="quote">&gt; +			remove_migration_pmd(new, pmd, vma, addr, old);</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pmde = *pmd;</span>
<span class="quote">&gt; +		barrier();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (!pmd_present(pmde) || pmd_trans_huge(pmde))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -344,6 +365,27 @@ void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	__migration_entry_wait(mm, pte, ptl);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +	if (!is_pmd_migration_entry(*pmd))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="quote">&gt; +	if (!get_page_unless_zero(page))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +	wait_on_page_locked(page);</span>
<span class="quote">&gt; +	put_page(page);</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +unlock:</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_BLOCK</span>
<span class="quote">&gt;  /* Returns true if all buffers are successfully locked */</span>
<span class="quote">&gt;  static bool buffer_migrate_lock_buffers(struct buffer_head *head,</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; index 71c5f91..6012343 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; @@ -118,7 +118,8 @@ pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pmd_t pmd;</span>
<span class="quote">&gt;  	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);</span>
<span class="quote">&gt; -	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; +	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="quote">&gt; +		  !pmd_devmap(*pmdp));</span>
<span class="quote">&gt;  	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
<span class="quote">&gt;  	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt;  	return pmd;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.0</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 15, 2016, 4:57 a.m.</div>
<pre class="content">
On Mon, Nov 14, 2016 at 02:45:03PM +0300, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Tue, Nov 08, 2016 at 08:31:50AM +0900, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; &gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; &gt; to allocate destination thps.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; &gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt; &gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt; &gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt; &gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; index 1cc82ec..3a1b48e 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; &gt; @@ -167,7 +167,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt; &gt;  					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \</span>
<span class="quote">&gt; &gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })</span>
<span class="quote">&gt; &gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; &gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt; &gt;  #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })</span>
<span class="quote">&gt; &gt; +#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  extern int kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt; &gt;  extern void cleanup_highmap(void);</span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; index 5c3a5f3..b6b22a2 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; &gt; @@ -163,6 +163,67 @@ static inline int is_write_migration_entry(swp_entry_t entry)</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt; +extern void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long address);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +extern int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="quote">&gt; &gt; +	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="quote">&gt; &gt; +	return __swp_entry_to_pmd(arch_entry);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#else</span>
<span class="quote">&gt; &gt; +static inline void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; &gt; +			struct vm_area_struct *vma, unsigned long address)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; VM_BUG()? Or BUILD_BUG()?</span>

These should be compiled out, so BUILD_BUG() seems better to me.
3 routines below will be done in the same manner.
<span class="quote">
&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ditto.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return swp_entry(0, 0);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ditto.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	pmd_t pmd = {};</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ditto.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +	return pmd;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_MEMORY_FAILURE</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  extern atomic_long_t num_poisoned_pages __read_mostly;</span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; index 0509d17..b3022b3 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; @@ -2310,3 +2310,157 @@ static int __init split_huge_pages_debugfs(void)</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  late_initcall(split_huge_pages_debugfs);</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt; +void set_pmd_migration_entry(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt; +				unsigned long addr)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; &gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; &gt; +	pud_t *pud;</span>
<span class="quote">&gt; &gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; &gt; +	pmd_t pmdval;</span>
<span class="quote">&gt; &gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; &gt; +	if (!pgd_present(*pgd))</span>
<span class="quote">&gt; &gt; +		return;</span>
<span class="quote">&gt; &gt; +	pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; &gt; +	if (!pud_present(*pud))</span>
<span class="quote">&gt; &gt; +		return;</span>
<span class="quote">&gt; &gt; +	pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; &gt; +	pmdval = *pmd;</span>
<span class="quote">&gt; &gt; +	barrier();</span>
<span class="quote">&gt; &gt; +	if (!pmd_present(pmdval))</span>
<span class="quote">&gt; &gt; +		return;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; &gt; +	if (pmd_trans_huge(pmdval)) {</span>
<span class="quote">&gt; &gt; +		pmd_t pmdswp;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; &gt; +		if (!pmd_present(*pmd))</span>
<span class="quote">&gt; &gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; &gt; +		if (unlikely(!pmd_trans_huge(*pmd)))</span>
<span class="quote">&gt; &gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just check *pmd == pmdval?</span>

OK.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; +		if (pmd_page(*pmd) != page)</span>
<span class="quote">&gt; &gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="quote">&gt; &gt; +		if (pmd_dirty(pmdval))</span>
<span class="quote">&gt; &gt; +			set_page_dirty(page);</span>
<span class="quote">&gt; &gt; +		entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="quote">&gt; &gt; +		pmdswp = swp_entry_to_pmd(entry);</span>
<span class="quote">&gt; &gt; +		pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="quote">&gt; &gt; +		set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="quote">&gt; &gt; +		page_remove_rmap(page, true);</span>
<span class="quote">&gt; &gt; +		put_page(page);</span>
<span class="quote">&gt; &gt; +unlock_pmd:</span>
<span class="quote">&gt; &gt; +		spin_unlock(ptl);</span>
<span class="quote">&gt; &gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; &gt; +		pte_t *pte;</span>
<span class="quote">&gt; &gt; +		pte_t pteval;</span>
<span class="quote">&gt; &gt; +		struct page *tmp = compound_head(page);</span>
<span class="quote">&gt; &gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; &gt; +		pte_t swp_pte;</span>
<span class="quote">&gt; &gt; +		int i;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		pte = pte_offset_map(pmd, address);</span>
<span class="quote">&gt; &gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; &gt; +		spin_lock(ptl);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; pte_offset_map_lock() ?</span>

Right.
<span class="quote">
&gt; &gt; +		for (i = 0; i &lt; HPAGE_PMD_NR; i++, pte++, tmp++) {</span>
<span class="quote">&gt; &gt; +			if (!(pte_present(*pte) &amp;&amp;</span>
<span class="quote">&gt; &gt; +			      page_to_pfn(tmp) == pte_pfn(*pte)))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 			if (!pte_present(*pte) || pte_page(*pte) != tmp) ?</span>

Yes, this is shorter/simpler.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt; +			pteval = ptep_clear_flush(vma, address, pte);</span>
<span class="quote">&gt; &gt; +			if (pte_dirty(pteval))</span>
<span class="quote">&gt; &gt; +				set_page_dirty(tmp);</span>
<span class="quote">&gt; &gt; +			entry = make_migration_entry(tmp, pte_write(pteval));</span>
<span class="quote">&gt; &gt; +			swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt; &gt; +			set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt; &gt; +			page_remove_rmap(tmp, false);</span>
<span class="quote">&gt; &gt; +			put_page(tmp);</span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; &gt; +		pte_unmap_unlock(pte, ptl);</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; &gt; +	return;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; &gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +	pmd_t pmde;</span>
<span class="quote">&gt; &gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pmde = *pmd;</span>
<span class="quote">&gt; &gt; +	barrier();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	if (!pmd_present(pmde)) {</span>
<span class="quote">&gt; &gt; +		if (is_migration_entry(pmd_to_swp_entry(pmde))) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 		if (!is_migration_entry(pmd_to_swp_entry(pmde)))</span>
<span class="quote">&gt; 			return SWAP_AGAIN;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And one level less indentation below.</span>

OK.
<span class="quote">
&gt; &gt; +			unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; &gt; +			unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +			ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; &gt; +			entry = pmd_to_swp_entry(*pmd);</span>
<span class="quote">&gt; &gt; +			if (migration_entry_to_page(entry) != old)</span>
<span class="quote">&gt; &gt; +				goto unlock_ptl;</span>
<span class="quote">&gt; &gt; +			get_page(new);</span>
<span class="quote">&gt; &gt; +			pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="quote">&gt; &gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; &gt; +				pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="quote">&gt; &gt; +			flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; &gt; +			page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="quote">&gt; &gt; +			pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="quote">&gt; &gt; +			set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="quote">&gt; &gt; +			flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; &gt; +			if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; &gt; +				mlock_vma_page(new);</span>
<span class="quote">&gt; &gt; +			update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; &gt; +unlock_ptl:</span>
<span class="quote">&gt; &gt; +			spin_unlock(ptl);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 			return SWAP_AGAIN;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And one level less indentation below.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; &gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; &gt; +		pte_t *ptep;</span>
<span class="quote">&gt; &gt; +		pte_t pte;</span>
<span class="quote">&gt; &gt; +		int i;</span>
<span class="quote">&gt; &gt; +		struct page *tmpnew = compound_head(new);</span>
<span class="quote">&gt; &gt; +		struct page *tmpold = compound_head((struct page *)old);</span>
<span class="quote">&gt; &gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; &gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; &gt; +		spin_lock(ptl);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; pte_offset_map_lock() ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		for (i = 0; i &lt; HPAGE_PMD_NR;</span>
<span class="quote">&gt; &gt; +		     i++, ptep++, tmpnew++, tmpold++, address += PAGE_SIZE) {</span>
<span class="quote">&gt; &gt; +			pte = *ptep;</span>
<span class="quote">&gt; &gt; +			if (!is_swap_pte(pte))</span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt; +			entry = pte_to_swp_entry(pte);</span>
<span class="quote">&gt; &gt; +			if (!is_migration_entry(entry) ||</span>
<span class="quote">&gt; &gt; +			    migration_entry_to_page(entry) != tmpold)</span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt; +			get_page(tmpnew);</span>
<span class="quote">&gt; &gt; +			pte = pte_mkold(mk_pte(tmpnew,</span>
<span class="quote">&gt; &gt; +					       READ_ONCE(vma-&gt;vm_page_prot)));</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; READ_ONCE()? Do we get here under mmap_sem, right?</span>

Some callers of page migration (mbind, move_pages, migrate_pages, cpuset)
do get mmap_sem, but others (memory hotremove, soft offline) don&#39;t.
For this part, I borrowed some code from remove_migration_pte() which was
updated at the following commit:

  commit 6d2329f8872f23e46a19d240930571510ce525eb
  Author: Andrea Arcangeli &lt;aarcange@redhat.com&gt;
  Date:   Fri Oct 7 17:01:22 2016 -0700
  
      mm: vm_page_prot: update with WRITE_ONCE/READ_ONCE


Thank you for reviewing in detail!

Naoya Horiguchi
<span class="quote">
&gt; &gt; +			if (pte_swp_soft_dirty(*ptep))</span>
<span class="quote">&gt; &gt; +				pte = pte_mksoft_dirty(pte);</span>
<span class="quote">&gt; &gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; &gt; +				pte = maybe_mkwrite(pte, vma);</span>
<span class="quote">&gt; &gt; +			flush_dcache_page(tmpnew);</span>
<span class="quote">&gt; &gt; +			set_pte_at(mm, address, ptep, pte);</span>
<span class="quote">&gt; &gt; +			if (PageAnon(new))</span>
<span class="quote">&gt; &gt; +				page_add_anon_rmap(tmpnew, vma, address, false);</span>
<span class="quote">&gt; &gt; +			else</span>
<span class="quote">&gt; &gt; +				page_add_file_rmap(tmpnew, false);</span>
<span class="quote">&gt; &gt; +			update_mmu_cache(vma, address, ptep);</span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; &gt; +		pte_unmap_unlock(ptep, ptl);</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; &gt; index 66ce6b4..54f2eb6 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; &gt; @@ -198,6 +198,8 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; &gt;  	swp_entry_t entry;</span>
<span class="quote">&gt; &gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; &gt; +	pud_t *pud;</span>
<span class="quote">&gt; &gt;   	pmd_t *pmd;</span>
<span class="quote">&gt; &gt;  	pte_t *ptep, pte;</span>
<span class="quote">&gt; &gt;   	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; @@ -208,10 +210,29 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  			goto out;</span>
<span class="quote">&gt; &gt;  		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);</span>
<span class="quote">&gt; &gt;  	} else {</span>
<span class="quote">&gt; &gt; -		pmd = mm_find_pmd(mm, addr);</span>
<span class="quote">&gt; &gt; +		pmd_t pmde;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; &gt; +		if (!pgd_present(*pgd))</span>
<span class="quote">&gt; &gt; +			goto out;</span>
<span class="quote">&gt; &gt; +		pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; &gt; +		if (!pud_present(*pud))</span>
<span class="quote">&gt; &gt; +			goto out;</span>
<span class="quote">&gt; &gt; +		pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; &gt;  		if (!pmd)</span>
<span class="quote">&gt; &gt;  			goto out;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +		if (PageTransCompound(new)) {</span>
<span class="quote">&gt; &gt; +			remove_migration_pmd(new, pmd, vma, addr, old);</span>
<span class="quote">&gt; &gt; +			goto out;</span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		pmde = *pmd;</span>
<span class="quote">&gt; &gt; +		barrier();</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (!pmd_present(pmde) || pmd_trans_huge(pmde))</span>
<span class="quote">&gt; &gt; +			goto out;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  		/*</span>
<span class="quote">&gt; &gt; @@ -344,6 +365,27 @@ void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  	__migration_entry_wait(mm, pte, ptl);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; &gt; +void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +	struct page *page;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; &gt; +	if (!is_pmd_migration_entry(*pmd))</span>
<span class="quote">&gt; &gt; +		goto unlock;</span>
<span class="quote">&gt; &gt; +	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="quote">&gt; &gt; +	if (!get_page_unless_zero(page))</span>
<span class="quote">&gt; &gt; +		goto unlock;</span>
<span class="quote">&gt; &gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; &gt; +	wait_on_page_locked(page);</span>
<span class="quote">&gt; &gt; +	put_page(page);</span>
<span class="quote">&gt; &gt; +	return;</span>
<span class="quote">&gt; &gt; +unlock:</span>
<span class="quote">&gt; &gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_BLOCK</span>
<span class="quote">&gt; &gt;  /* Returns true if all buffers are successfully locked */</span>
<span class="quote">&gt; &gt;  static bool buffer_migrate_lock_buffers(struct buffer_head *head,</span>
<span class="quote">&gt; &gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; index 71c5f91..6012343 100644</span>
<span class="quote">&gt; &gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; &gt; @@ -118,7 +118,8 @@ pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	pmd_t pmd;</span>
<span class="quote">&gt; &gt;  	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);</span>
<span class="quote">&gt; &gt; -	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; &gt; +	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="quote">&gt; &gt; +		  !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; &gt;  	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
<span class="quote">&gt; &gt;  	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; &gt;  	return pmd;</span>
<span class="quote">&gt; &gt; -- </span>
<span class="quote">&gt; &gt; 2.7.0</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt;  Kirill A. Shutemov</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Nov. 28, 2016, 2:31 p.m.</div>
<pre class="content">
On Tue 08-11-16 08:31:50, Naoya Horiguchi wrote:
<span class="quote">&gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; to allocate destination thps.</span>

this description is underdocumented to say the least. Could you
provide a high level documentation here please?
<span class="quote">
&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; ChangeLog v1 -&gt; v2:</span>
<span class="quote">&gt; - support pte-mapped thp, doubly-mapped thp</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64.h |   2 +</span>
<span class="quote">&gt;  include/linux/swapops.h           |  61 +++++++++++++++</span>
<span class="quote">&gt;  mm/huge_memory.c                  | 154 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  mm/migrate.c                      |  44 ++++++++++-</span>
<span class="quote">&gt;  mm/pgtable-generic.c              |   3 +-</span>
<span class="quote">&gt;  5 files changed, 262 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; index 1cc82ec..3a1b48e 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="quote">&gt; @@ -167,7 +167,9 @@ static inline int pgd_large(pgd_t pgd) { return 0; }</span>
<span class="quote">&gt;  					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \</span>
<span class="quote">&gt;  					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })</span>
<span class="quote">&gt;  #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })</span>
<span class="quote">&gt; +#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
<span class="quote">&gt;  #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })</span>
<span class="quote">&gt; +#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int kern_addr_valid(unsigned long addr);</span>
<span class="quote">&gt;  extern void cleanup_highmap(void);</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; index 5c3a5f3..b6b22a2 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="quote">&gt; @@ -163,6 +163,67 @@ static inline int is_write_migration_entry(swp_entry_t entry)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +extern void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long address);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="quote">&gt; +	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	swp_entry_t arch_entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="quote">&gt; +	return __swp_entry_to_pmd(arch_entry);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void set_pmd_migration_entry(struct page *page,</span>
<span class="quote">&gt; +			struct vm_area_struct *vma, unsigned long address)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return swp_entry(0, 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	pmd_t pmd = {};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return pmd;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_MEMORY_FAILURE</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern atomic_long_t num_poisoned_pages __read_mostly;</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; index 0509d17..b3022b3 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -2310,3 +2310,157 @@ static int __init split_huge_pages_debugfs(void)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  late_initcall(split_huge_pages_debugfs);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +void set_pmd_migration_entry(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt; +				unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; +	pmd_t pmdval;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; +	if (!pgd_present(*pgd))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +	pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; +	if (!pud_present(*pud))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +	pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt; +	pmdval = *pmd;</span>
<span class="quote">&gt; +	barrier();</span>
<span class="quote">&gt; +	if (!pmd_present(pmdval))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	if (pmd_trans_huge(pmdval)) {</span>
<span class="quote">&gt; +		pmd_t pmdswp;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +		if (!pmd_present(*pmd))</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; +		if (unlikely(!pmd_trans_huge(*pmd)))</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; +		if (pmd_page(*pmd) != page)</span>
<span class="quote">&gt; +			goto unlock_pmd;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="quote">&gt; +		if (pmd_dirty(pmdval))</span>
<span class="quote">&gt; +			set_page_dirty(page);</span>
<span class="quote">&gt; +		entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="quote">&gt; +		pmdswp = swp_entry_to_pmd(entry);</span>
<span class="quote">&gt; +		pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="quote">&gt; +		set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="quote">&gt; +		page_remove_rmap(page, true);</span>
<span class="quote">&gt; +		put_page(page);</span>
<span class="quote">&gt; +unlock_pmd:</span>
<span class="quote">&gt; +		spin_unlock(ptl);</span>
<span class="quote">&gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; +		pte_t *pte;</span>
<span class="quote">&gt; +		pte_t pteval;</span>
<span class="quote">&gt; +		struct page *tmp = compound_head(page);</span>
<span class="quote">&gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +		pte_t swp_pte;</span>
<span class="quote">&gt; +		int i;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pte = pte_offset_map(pmd, address);</span>
<span class="quote">&gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; +		spin_lock(ptl);</span>
<span class="quote">&gt; +		for (i = 0; i &lt; HPAGE_PMD_NR; i++, pte++, tmp++) {</span>
<span class="quote">&gt; +			if (!(pte_present(*pte) &amp;&amp;</span>
<span class="quote">&gt; +			      page_to_pfn(tmp) == pte_pfn(*pte)))</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			pteval = ptep_clear_flush(vma, address, pte);</span>
<span class="quote">&gt; +			if (pte_dirty(pteval))</span>
<span class="quote">&gt; +				set_page_dirty(tmp);</span>
<span class="quote">&gt; +			entry = make_migration_entry(tmp, pte_write(pteval));</span>
<span class="quote">&gt; +			swp_pte = swp_entry_to_pte(entry);</span>
<span class="quote">&gt; +			set_pte_at(mm, address, pte, swp_pte);</span>
<span class="quote">&gt; +			page_remove_rmap(tmp, false);</span>
<span class="quote">&gt; +			put_page(tmp);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		pte_unmap_unlock(pte, ptl);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="quote">&gt; +		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	pmd_t pmde;</span>
<span class="quote">&gt; +	swp_entry_t entry;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pmde = *pmd;</span>
<span class="quote">&gt; +	barrier();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!pmd_present(pmde)) {</span>
<span class="quote">&gt; +		if (is_migration_entry(pmd_to_swp_entry(pmde))) {</span>
<span class="quote">&gt; +			unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +			unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +			entry = pmd_to_swp_entry(*pmd);</span>
<span class="quote">&gt; +			if (migration_entry_to_page(entry) != old)</span>
<span class="quote">&gt; +				goto unlock_ptl;</span>
<span class="quote">&gt; +			get_page(new);</span>
<span class="quote">&gt; +			pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="quote">&gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; +				pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="quote">&gt; +			flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +			page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="quote">&gt; +			pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="quote">&gt; +			set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="quote">&gt; +			flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="quote">&gt; +			if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; +				mlock_vma_page(new);</span>
<span class="quote">&gt; +			update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; +unlock_ptl:</span>
<span class="quote">&gt; +			spin_unlock(ptl);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	} else { /* pte-mapped thp */</span>
<span class="quote">&gt; +		pte_t *ptep;</span>
<span class="quote">&gt; +		pte_t pte;</span>
<span class="quote">&gt; +		int i;</span>
<span class="quote">&gt; +		struct page *tmpnew = compound_head(new);</span>
<span class="quote">&gt; +		struct page *tmpold = compound_head((struct page *)old);</span>
<span class="quote">&gt; +		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt; +		ptl = pte_lockptr(mm, pmd);</span>
<span class="quote">&gt; +		spin_lock(ptl);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		for (i = 0; i &lt; HPAGE_PMD_NR;</span>
<span class="quote">&gt; +		     i++, ptep++, tmpnew++, tmpold++, address += PAGE_SIZE) {</span>
<span class="quote">&gt; +			pte = *ptep;</span>
<span class="quote">&gt; +			if (!is_swap_pte(pte))</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			entry = pte_to_swp_entry(pte);</span>
<span class="quote">&gt; +			if (!is_migration_entry(entry) ||</span>
<span class="quote">&gt; +			    migration_entry_to_page(entry) != tmpold)</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			get_page(tmpnew);</span>
<span class="quote">&gt; +			pte = pte_mkold(mk_pte(tmpnew,</span>
<span class="quote">&gt; +					       READ_ONCE(vma-&gt;vm_page_prot)));</span>
<span class="quote">&gt; +			if (pte_swp_soft_dirty(*ptep))</span>
<span class="quote">&gt; +				pte = pte_mksoft_dirty(pte);</span>
<span class="quote">&gt; +			if (is_write_migration_entry(entry))</span>
<span class="quote">&gt; +				pte = maybe_mkwrite(pte, vma);</span>
<span class="quote">&gt; +			flush_dcache_page(tmpnew);</span>
<span class="quote">&gt; +			set_pte_at(mm, address, ptep, pte);</span>
<span class="quote">&gt; +			if (PageAnon(new))</span>
<span class="quote">&gt; +				page_add_anon_rmap(tmpnew, vma, address, false);</span>
<span class="quote">&gt; +			else</span>
<span class="quote">&gt; +				page_add_file_rmap(tmpnew, false);</span>
<span class="quote">&gt; +			update_mmu_cache(vma, address, ptep);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		pte_unmap_unlock(ptep, ptl);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	return SWAP_AGAIN;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; index 66ce6b4..54f2eb6 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="quote">&gt; @@ -198,6 +198,8 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="quote">&gt;  	swp_entry_t entry;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt;   	pmd_t *pmd;</span>
<span class="quote">&gt;  	pte_t *ptep, pte;</span>
<span class="quote">&gt;   	spinlock_t *ptl;</span>
<span class="quote">&gt; @@ -208,10 +210,29 @@ static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  			goto out;</span>
<span class="quote">&gt;  		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; -		pmd = mm_find_pmd(mm, addr);</span>
<span class="quote">&gt; +		pmd_t pmde;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pgd = pgd_offset(mm, addr);</span>
<span class="quote">&gt; +		if (!pgd_present(*pgd))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		pud = pud_offset(pgd, addr);</span>
<span class="quote">&gt; +		if (!pud_present(*pud))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		pmd = pmd_offset(pud, addr);</span>
<span class="quote">&gt;  		if (!pmd)</span>
<span class="quote">&gt;  			goto out;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +		if (PageTransCompound(new)) {</span>
<span class="quote">&gt; +			remove_migration_pmd(new, pmd, vma, addr, old);</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pmde = *pmd;</span>
<span class="quote">&gt; +		barrier();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (!pmd_present(pmde) || pmd_trans_huge(pmde))</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		ptep = pte_offset_map(pmd, addr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -344,6 +365,27 @@ void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	__migration_entry_wait(mm, pte, ptl);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="quote">&gt; +void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ptl = pmd_lock(mm, pmd);</span>
<span class="quote">&gt; +	if (!is_pmd_migration_entry(*pmd))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="quote">&gt; +	if (!get_page_unless_zero(page))</span>
<span class="quote">&gt; +		goto unlock;</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +	wait_on_page_locked(page);</span>
<span class="quote">&gt; +	put_page(page);</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +unlock:</span>
<span class="quote">&gt; +	spin_unlock(ptl);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_BLOCK</span>
<span class="quote">&gt;  /* Returns true if all buffers are successfully locked */</span>
<span class="quote">&gt;  static bool buffer_migrate_lock_buffers(struct buffer_head *head,</span>
<span class="quote">&gt; diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; index 71c5f91..6012343 100644</span>
<span class="quote">&gt; --- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="quote">&gt; +++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="quote">&gt; @@ -118,7 +118,8 @@ pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pmd_t pmd;</span>
<span class="quote">&gt;  	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);</span>
<span class="quote">&gt; -	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="quote">&gt; +	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="quote">&gt; +		  !pmd_devmap(*pmdp));</span>
<span class="quote">&gt;  	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
<span class="quote">&gt;  	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);</span>
<span class="quote">&gt;  	return pmd;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.0</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 29, 2016, 7:57 a.m.</div>
<pre class="content">
On Mon, Nov 28, 2016 at 03:31:32PM +0100, Michal Hocko wrote:
<span class="quote">&gt; On Tue 08-11-16 08:31:50, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; This patch prepares thp migration&#39;s core code. These code will be open when</span>
<span class="quote">&gt; &gt; unmap_and_move() stops unconditionally splitting thp and get_new_page() starts</span>
<span class="quote">&gt; &gt; to allocate destination thps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; this description is underdocumented to say the least. Could you</span>
<span class="quote">&gt; provide a high level documentation here please?</span>

Yes, I&#39;ll do.

And maybe some update on Documentation/vm/page_migration will be wanted,
so will do it too.

Thanks,
Naoya Horiguchi
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 1cc82ec..3a1b48e 100644</span>
<span class="p_header">--- v4.9-rc2-mmotm-2016-10-27-18-27/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -167,7 +167,9 @@</span> <span class="p_context"> static inline int pgd_large(pgd_t pgd) { return 0; }</span>
 					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \
 					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
<span class="p_add">+#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
 #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })
<span class="p_add">+#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
 
 extern int kern_addr_valid(unsigned long addr);
 extern void cleanup_highmap(void);
<span class="p_header">diff --git v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="p_header">index 5c3a5f3..b6b22a2 100644</span>
<span class="p_header">--- v4.9-rc2-mmotm-2016-10-27-18-27/include/linux/swapops.h</span>
<span class="p_header">+++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/include/linux/swapops.h</span>
<span class="p_chunk">@@ -163,6 +163,67 @@</span> <span class="p_context"> static inline int is_write_migration_entry(swp_entry_t entry)</span>
 
 #endif
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+extern void set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long address);</span>
<span class="p_add">+</span>
<span class="p_add">+extern int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="p_add">+	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="p_add">+	return __swp_entry_to_pmd(arch_entry);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+			struct vm_area_struct *vma, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return swp_entry(0, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t pmd = {};</span>
<span class="p_add">+</span>
<span class="p_add">+	return pmd;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MEMORY_FAILURE
 
 extern atomic_long_t num_poisoned_pages __read_mostly;
<span class="p_header">diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="p_header">index 0509d17..b3022b3 100644</span>
<span class="p_header">--- v4.9-rc2-mmotm-2016-10-27-18-27/mm/huge_memory.c</span>
<span class="p_header">+++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/huge_memory.c</span>
<span class="p_chunk">@@ -2310,3 +2310,157 @@</span> <span class="p_context"> static int __init split_huge_pages_debugfs(void)</span>
 }
 late_initcall(split_huge_pages_debugfs);
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void set_pmd_migration_entry(struct page *page, struct vm_area_struct *vma,</span>
<span class="p_add">+				unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pmd_t pmdval;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(mm, addr);</span>
<span class="p_add">+	if (!pgd_present(*pgd))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	if (!pud_present(*pud))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	pmdval = *pmd;</span>
<span class="p_add">+	barrier();</span>
<span class="p_add">+	if (!pmd_present(pmdval))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	if (pmd_trans_huge(pmdval)) {</span>
<span class="p_add">+		pmd_t pmdswp;</span>
<span class="p_add">+</span>
<span class="p_add">+		ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+		if (!pmd_present(*pmd))</span>
<span class="p_add">+			goto unlock_pmd;</span>
<span class="p_add">+		if (unlikely(!pmd_trans_huge(*pmd)))</span>
<span class="p_add">+			goto unlock_pmd;</span>
<span class="p_add">+		if (pmd_page(*pmd) != page)</span>
<span class="p_add">+			goto unlock_pmd;</span>
<span class="p_add">+</span>
<span class="p_add">+		pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="p_add">+		if (pmd_dirty(pmdval))</span>
<span class="p_add">+			set_page_dirty(page);</span>
<span class="p_add">+		entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="p_add">+		pmdswp = swp_entry_to_pmd(entry);</span>
<span class="p_add">+		pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="p_add">+		set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="p_add">+		page_remove_rmap(page, true);</span>
<span class="p_add">+		put_page(page);</span>
<span class="p_add">+unlock_pmd:</span>
<span class="p_add">+		spin_unlock(ptl);</span>
<span class="p_add">+	} else { /* pte-mapped thp */</span>
<span class="p_add">+		pte_t *pte;</span>
<span class="p_add">+		pte_t pteval;</span>
<span class="p_add">+		struct page *tmp = compound_head(page);</span>
<span class="p_add">+		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+		pte_t swp_pte;</span>
<span class="p_add">+		int i;</span>
<span class="p_add">+</span>
<span class="p_add">+		pte = pte_offset_map(pmd, address);</span>
<span class="p_add">+		ptl = pte_lockptr(mm, pmd);</span>
<span class="p_add">+		spin_lock(ptl);</span>
<span class="p_add">+		for (i = 0; i &lt; HPAGE_PMD_NR; i++, pte++, tmp++) {</span>
<span class="p_add">+			if (!(pte_present(*pte) &amp;&amp;</span>
<span class="p_add">+			      page_to_pfn(tmp) == pte_pfn(*pte)))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			pteval = ptep_clear_flush(vma, address, pte);</span>
<span class="p_add">+			if (pte_dirty(pteval))</span>
<span class="p_add">+				set_page_dirty(tmp);</span>
<span class="p_add">+			entry = make_migration_entry(tmp, pte_write(pteval));</span>
<span class="p_add">+			swp_pte = swp_entry_to_pte(entry);</span>
<span class="p_add">+			set_pte_at(mm, address, pte, swp_pte);</span>
<span class="p_add">+			page_remove_rmap(tmp, false);</span>
<span class="p_add">+			put_page(tmp);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pte_unmap_unlock(pte, ptl);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int remove_migration_pmd(struct page *new, pmd_t *pmd,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pmd_t pmde;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	pmde = *pmd;</span>
<span class="p_add">+	barrier();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!pmd_present(pmde)) {</span>
<span class="p_add">+		if (is_migration_entry(pmd_to_swp_entry(pmde))) {</span>
<span class="p_add">+			unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+			unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+			ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+			entry = pmd_to_swp_entry(*pmd);</span>
<span class="p_add">+			if (migration_entry_to_page(entry) != old)</span>
<span class="p_add">+				goto unlock_ptl;</span>
<span class="p_add">+			get_page(new);</span>
<span class="p_add">+			pmde = pmd_mkold(mk_huge_pmd(new, vma-&gt;vm_page_prot));</span>
<span class="p_add">+			if (is_write_migration_entry(entry))</span>
<span class="p_add">+				pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="p_add">+			flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+			page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="p_add">+			pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="p_add">+			set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="p_add">+			flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+			if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+				mlock_vma_page(new);</span>
<span class="p_add">+			update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="p_add">+unlock_ptl:</span>
<span class="p_add">+			spin_unlock(ptl);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else { /* pte-mapped thp */</span>
<span class="p_add">+		pte_t *ptep;</span>
<span class="p_add">+		pte_t pte;</span>
<span class="p_add">+		int i;</span>
<span class="p_add">+		struct page *tmpnew = compound_head(new);</span>
<span class="p_add">+		struct page *tmpold = compound_head((struct page *)old);</span>
<span class="p_add">+		unsigned long address = addr &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+		ptep = pte_offset_map(pmd, addr);</span>
<span class="p_add">+		ptl = pte_lockptr(mm, pmd);</span>
<span class="p_add">+		spin_lock(ptl);</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; HPAGE_PMD_NR;</span>
<span class="p_add">+		     i++, ptep++, tmpnew++, tmpold++, address += PAGE_SIZE) {</span>
<span class="p_add">+			pte = *ptep;</span>
<span class="p_add">+			if (!is_swap_pte(pte))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			entry = pte_to_swp_entry(pte);</span>
<span class="p_add">+			if (!is_migration_entry(entry) ||</span>
<span class="p_add">+			    migration_entry_to_page(entry) != tmpold)</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			get_page(tmpnew);</span>
<span class="p_add">+			pte = pte_mkold(mk_pte(tmpnew,</span>
<span class="p_add">+					       READ_ONCE(vma-&gt;vm_page_prot)));</span>
<span class="p_add">+			if (pte_swp_soft_dirty(*ptep))</span>
<span class="p_add">+				pte = pte_mksoft_dirty(pte);</span>
<span class="p_add">+			if (is_write_migration_entry(entry))</span>
<span class="p_add">+				pte = maybe_mkwrite(pte, vma);</span>
<span class="p_add">+			flush_dcache_page(tmpnew);</span>
<span class="p_add">+			set_pte_at(mm, address, ptep, pte);</span>
<span class="p_add">+			if (PageAnon(new))</span>
<span class="p_add">+				page_add_anon_rmap(tmpnew, vma, address, false);</span>
<span class="p_add">+			else</span>
<span class="p_add">+				page_add_file_rmap(tmpnew, false);</span>
<span class="p_add">+			update_mmu_cache(vma, address, ptep);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return SWAP_AGAIN;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="p_header">index 66ce6b4..54f2eb6 100644</span>
<span class="p_header">--- v4.9-rc2-mmotm-2016-10-27-18-27/mm/migrate.c</span>
<span class="p_header">+++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/migrate.c</span>
<span class="p_chunk">@@ -198,6 +198,8 @@</span> <span class="p_context"> static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
 {
 	struct mm_struct *mm = vma-&gt;vm_mm;
 	swp_entry_t entry;
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	pud_t *pud;</span>
  	pmd_t *pmd;
 	pte_t *ptep, pte;
  	spinlock_t *ptl;
<span class="p_chunk">@@ -208,10 +210,29 @@</span> <span class="p_context"> static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
 			goto out;
 		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);
 	} else {
<span class="p_del">-		pmd = mm_find_pmd(mm, addr);</span>
<span class="p_add">+		pmd_t pmde;</span>
<span class="p_add">+</span>
<span class="p_add">+		pgd = pgd_offset(mm, addr);</span>
<span class="p_add">+		if (!pgd_present(*pgd))</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		pud = pud_offset(pgd, addr);</span>
<span class="p_add">+		if (!pud_present(*pud))</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		pmd = pmd_offset(pud, addr);</span>
 		if (!pmd)
 			goto out;
 
<span class="p_add">+		if (PageTransCompound(new)) {</span>
<span class="p_add">+			remove_migration_pmd(new, pmd, vma, addr, old);</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		pmde = *pmd;</span>
<span class="p_add">+		barrier();</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!pmd_present(pmde) || pmd_trans_huge(pmde))</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+</span>
 		ptep = pte_offset_map(pmd, addr);
 
 		/*
<span class="p_chunk">@@ -344,6 +365,27 @@</span> <span class="p_context"> void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
 	__migration_entry_wait(mm, pte, ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	if (!is_pmd_migration_entry(*pmd))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="p_add">+	if (!get_page_unless_zero(page))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	wait_on_page_locked(page);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLOCK
 /* Returns true if all buffers are successfully locked */
 static bool buffer_migrate_lock_buffers(struct buffer_head *head,
<span class="p_header">diff --git v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="p_header">index 71c5f91..6012343 100644</span>
<span class="p_header">--- v4.9-rc2-mmotm-2016-10-27-18-27/mm/pgtable-generic.c</span>
<span class="p_header">+++ v4.9-rc2-mmotm-2016-10-27-18-27_patched/mm/pgtable-generic.c</span>
<span class="p_chunk">@@ -118,7 +118,8 @@</span> <span class="p_context"> pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
 {
 	pmd_t pmd;
 	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);
<span class="p_del">-	VM_BUG_ON(!pmd_trans_huge(*pmdp) &amp;&amp; !pmd_devmap(*pmdp));</span>
<span class="p_add">+	VM_BUG_ON(pmd_present(*pmdp) &amp;&amp; !pmd_trans_huge(*pmdp) &amp;&amp;</span>
<span class="p_add">+		  !pmd_devmap(*pmdp));</span>
 	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);
 	flush_pmd_tlb_range(vma, address, address + HPAGE_PMD_SIZE);
 	return pmd;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



