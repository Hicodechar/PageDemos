
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,5/5] pagemap: add mmap-exclusive bit for marking pages mapped only here - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,5/5] pagemap: add mmap-exclusive bit for marking pages mapped only here</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=120261">Konstantin Khebnikov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 14, 2015, 3:37 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150714153749.29844.81954.stgit@buzz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6787921/mbox/"
   >mbox</a>
|
   <a href="/patch/6787921/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6787921/">/patch/6787921/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 39094C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:33 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 2DB0B20661
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 09474205DF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Jul 2015 15:39:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753217AbbGNPia (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Jul 2015 11:38:30 -0400
Received: from forward-corp1o.mail.yandex.net ([37.140.190.172]:44994 &quot;EHLO
	forward-corp1o.mail.yandex.net&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752904AbbGNPhw (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Jul 2015 11:37:52 -0400
Received: from smtpcorp4.mail.yandex.net (smtpcorp4.mail.yandex.net
	[95.108.252.2])
	by forward-corp1o.mail.yandex.net (Yandex) with ESMTP id 950CC3920DE9;
	Tue, 14 Jul 2015 18:37:49 +0300 (MSK)
Received: from smtpcorp4.mail.yandex.net (localhost [127.0.0.1])
	by smtpcorp4.mail.yandex.net (Yandex) with ESMTP id 539D92C031F;
	Tue, 14 Jul 2015 18:37:49 +0300 (MSK)
Received: from unknown (unknown [2a02:6b8:0:40c:1811:5890:3243:c9ea])
	by smtpcorp4.mail.yandex.net (nwsmtp/Yandex) with ESMTPSA id
	57FpCjxBuk-bnsG1QPX; Tue, 14 Jul 2015 18:37:49 +0300
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128
	bits)) (Client certificate not present)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yandex-team.ru;
	s=default; 
	t=1436888269; bh=IrEQl2alsg240SRytvweDxYIbysW125FfDXcoBXp6oI=;
	h=Subject:From:To:Cc:Date:Message-ID:In-Reply-To:References:
	User-Agent:MIME-Version:Content-Type:Content-Transfer-Encoding;
	b=QT34VpEY9u5pJKaRNhEhXJHbrvtlmNIKSui5yvn5sEBkRmPmqPEFHM/5SUeI2s1L0
	LhORLOVQr3C2fYS6p0hj50/am/DOUNKwtKMxBOUM7BVfRbawwU6QO1rAixbVTs2riX
	mhd/d6cSm7gHVHF+k/jRqf95VdMP3atX/M3sb3QY=
Authentication-Results: smtpcorp4.mail.yandex.net;
	dkim=pass header.i=@yandex-team.ru
Subject: [PATCH v4 5/5] pagemap: add mmap-exclusive bit for marking pages
	mapped only here
From: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;
To: linux-mm@kvack.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Mark Williamson &lt;mwilliamson@undo-software.com&gt;,
	linux-kernel@vger.kernel.org, linux-api@vger.kernel.org
Date: Tue, 14 Jul 2015 18:37:49 +0300
Message-ID: &lt;20150714153749.29844.81954.stgit@buzz&gt;
In-Reply-To: &lt;20150714152516.29844.69929.stgit@buzz&gt;
References: &lt;20150714152516.29844.69929.stgit@buzz&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.2 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=120261">Konstantin Khebnikov</a> - July 14, 2015, 3:37 p.m.</div>
<pre class="content">
This patch sets bit 56 in pagemap if this page is mapped only once.
It allows to detect exclusively used pages without exposing PFN:

present file exclusive state
0       0    0         non-present
1       1    0         file page mapped somewhere else
1       1    1         file page mapped only here
1       0    0         anon non-CoWed page (shared with parent/child)
1       0    1         anon CoWed page (or never forked)

CoWed pages in (MAP_FILE | MAP_PRIVATE) areas are anon in this context.

MMap-exclusive bit doesn&#39;t reflect potential page-sharing via swapcache:
page could be mapped once but has several swap-ptes which point to it.
Application could detect that by swap bit in pagemap entry and touch
that pte via /proc/pid/mem to get real information.
<span class="signed-off-by">
Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
Requested-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;
Link: http://lkml.kernel.org/r/CAEVpBa+_RyACkhODZrRvQLs80iy0sqpdrd0AaP_-tgnX3Y9yNQ@mail.gmail.com
---
 Documentation/vm/pagemap.txt |    3 ++-
 fs/proc/task_mmu.c           |   14 +++++++++++++-
 tools/vm/page-types.c        |   10 ++++++++++
 3 files changed, 25 insertions(+), 2 deletions(-)


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - July 21, 2015, 8:17 a.m.</div>
<pre class="content">
On Tue, Jul 14, 2015 at 06:37:49PM +0300, Konstantin Khlebnikov wrote:
<span class="quote">&gt; This patch sets bit 56 in pagemap if this page is mapped only once.</span>
<span class="quote">&gt; It allows to detect exclusively used pages without exposing PFN:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; present file exclusive state</span>
<span class="quote">&gt; 0       0    0         non-present</span>
<span class="quote">&gt; 1       1    0         file page mapped somewhere else</span>
<span class="quote">&gt; 1       1    1         file page mapped only here</span>
<span class="quote">&gt; 1       0    0         anon non-CoWed page (shared with parent/child)</span>
<span class="quote">&gt; 1       0    1         anon CoWed page (or never forked)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; CoWed pages in (MAP_FILE | MAP_PRIVATE) areas are anon in this context.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MMap-exclusive bit doesn&#39;t reflect potential page-sharing via swapcache:</span>
<span class="quote">&gt; page could be mapped once but has several swap-ptes which point to it.</span>
<span class="quote">&gt; Application could detect that by swap bit in pagemap entry and touch</span>
<span class="quote">&gt; that pte via /proc/pid/mem to get real information.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Requested-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="quote">&gt; Link: http://lkml.kernel.org/r/CAEVpBa+_RyACkhODZrRvQLs80iy0sqpdrd0AaP_-tgnX3Y9yNQ@mail.gmail.com</span>
<span class="reviewed-by">
Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;--</span>
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131641">Mark Williamson</a> - July 24, 2015, 6:18 p.m.</div>
<pre class="content">
<span class="reviewed-by">Reviewed-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>

On Tue, Jul 21, 2015 at 9:17 AM, Naoya Horiguchi
&lt;n-horiguchi@ah.jp.nec.com&gt; wrote:
<span class="quote">&gt; On Tue, Jul 14, 2015 at 06:37:49PM +0300, Konstantin Khlebnikov wrote:</span>
<span class="quote">&gt;&gt; This patch sets bit 56 in pagemap if this page is mapped only once.</span>
<span class="quote">&gt;&gt; It allows to detect exclusively used pages without exposing PFN:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; present file exclusive state</span>
<span class="quote">&gt;&gt; 0       0    0         non-present</span>
<span class="quote">&gt;&gt; 1       1    0         file page mapped somewhere else</span>
<span class="quote">&gt;&gt; 1       1    1         file page mapped only here</span>
<span class="quote">&gt;&gt; 1       0    0         anon non-CoWed page (shared with parent/child)</span>
<span class="quote">&gt;&gt; 1       0    1         anon CoWed page (or never forked)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; CoWed pages in (MAP_FILE | MAP_PRIVATE) areas are anon in this context.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; MMap-exclusive bit doesn&#39;t reflect potential page-sharing via swapcache:</span>
<span class="quote">&gt;&gt; page could be mapped once but has several swap-ptes which point to it.</span>
<span class="quote">&gt;&gt; Application could detect that by swap bit in pagemap entry and touch</span>
<span class="quote">&gt;&gt; that pte via /proc/pid/mem to get real information.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt;&gt; Requested-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="quote">&gt;&gt; Link: http://lkml.kernel.org/r/CAEVpBa+_RyACkhODZrRvQLs80iy0sqpdrd0AaP_-tgnX3Y9yNQ@mail.gmail.com</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/vm/pagemap.txt b/Documentation/vm/pagemap.txt</span>
<span class="p_header">index 6bfbc172cdb9..3cfbbb333ea1 100644</span>
<span class="p_header">--- a/Documentation/vm/pagemap.txt</span>
<span class="p_header">+++ b/Documentation/vm/pagemap.txt</span>
<span class="p_chunk">@@ -16,7 +16,8 @@</span> <span class="p_context"> There are three components to pagemap:</span>
     * Bits 0-4   swap type if swapped
     * Bits 5-54  swap offset if swapped
     * Bit  55    pte is soft-dirty (see Documentation/vm/soft-dirty.txt)
<span class="p_del">-    * Bits 56-60 zero</span>
<span class="p_add">+    * Bit  56    page exlusively mapped</span>
<span class="p_add">+    * Bits 57-60 zero</span>
     * Bit  61    page is file-page or shared-anon
     * Bit  62    page swapped
     * Bit  63    page present
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 3a5d338ea219..bac4c97f8ff8 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -947,6 +947,7 @@</span> <span class="p_context"> struct pagemapread {</span>
 #define PM_PFRAME_BITS		55
 #define PM_PFRAME_MASK		GENMASK_ULL(PM_PFRAME_BITS - 1, 0)
 #define PM_SOFT_DIRTY		BIT_ULL(55)
<span class="p_add">+#define PM_MMAP_EXCLUSIVE	BIT_ULL(56)</span>
 #define PM_FILE			BIT_ULL(61)
 #define PM_SWAP			BIT_ULL(62)
 #define PM_PRESENT		BIT_ULL(63)
<span class="p_chunk">@@ -1034,6 +1035,8 @@</span> <span class="p_context"> static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
 
 	if (page &amp;&amp; !PageAnon(page))
 		flags |= PM_FILE;
<span class="p_add">+	if (page &amp;&amp; page_mapcount(page) == 1)</span>
<span class="p_add">+		flags |= PM_MMAP_EXCLUSIVE;</span>
 	if (vma-&gt;vm_flags &amp; VM_SOFTDIRTY)
 		flags |= PM_SOFT_DIRTY;
 
<span class="p_chunk">@@ -1064,6 +1067,11 @@</span> <span class="p_context"> static int pagemap_pmd_range(pmd_t *pmdp, unsigned long addr, unsigned long end,</span>
 		 * This if-check is just to prepare for future implementation.
 		 */
 		if (pmd_present(pmd)) {
<span class="p_add">+			struct page *page = pmd_page(pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (page_mapcount(page) == 1)</span>
<span class="p_add">+				flags |= PM_MMAP_EXCLUSIVE;</span>
<span class="p_add">+</span>
 			flags |= PM_PRESENT;
 			if (pm-&gt;show_pfn)
 				frame = pmd_pfn(pmd) +
<span class="p_chunk">@@ -1129,6 +1137,9 @@</span> <span class="p_context"> static int pagemap_hugetlb_range(pte_t *ptep, unsigned long hmask,</span>
 		if (!PageAnon(page))
 			flags |= PM_FILE;
 
<span class="p_add">+		if (page_mapcount(page) == 1)</span>
<span class="p_add">+			flags |= PM_MMAP_EXCLUSIVE;</span>
<span class="p_add">+</span>
 		flags |= PM_PRESENT;
 		if (pm-&gt;show_pfn)
 			frame = pte_pfn(pte) +
<span class="p_chunk">@@ -1161,7 +1172,8 @@</span> <span class="p_context"> static int pagemap_hugetlb_range(pte_t *ptep, unsigned long hmask,</span>
  * Bits 0-4   swap type if swapped
  * Bits 5-54  swap offset if swapped
  * Bit  55    pte is soft-dirty (see Documentation/vm/soft-dirty.txt)
<span class="p_del">- * Bits 56-60 zero</span>
<span class="p_add">+ * Bit  56    page exclusively mapped</span>
<span class="p_add">+ * Bits 57-60 zero</span>
  * Bit  61    page is file-page or shared-anon
  * Bit  62    page swapped
  * Bit  63    page present
<span class="p_header">diff --git a/tools/vm/page-types.c b/tools/vm/page-types.c</span>
<span class="p_header">index 603ec916716b..7f73fa32a590 100644</span>
<span class="p_header">--- a/tools/vm/page-types.c</span>
<span class="p_header">+++ b/tools/vm/page-types.c</span>
<span class="p_chunk">@@ -62,6 +62,7 @@</span> <span class="p_context"></span>
 #define PM_PFRAME_MASK		((1LL &lt;&lt; PM_PFRAME_BITS) - 1)
 #define PM_PFRAME(x)		((x) &amp; PM_PFRAME_MASK)
 #define PM_SOFT_DIRTY		(1ULL &lt;&lt; 55)
<span class="p_add">+#define PM_MMAP_EXCLUSIVE	(1ULL &lt;&lt; 56)</span>
 #define PM_FILE			(1ULL &lt;&lt; 61)
 #define PM_SWAP			(1ULL &lt;&lt; 62)
 #define PM_PRESENT		(1ULL &lt;&lt; 63)
<span class="p_chunk">@@ -91,6 +92,8 @@</span> <span class="p_context"></span>
 #define KPF_SLOB_FREE		49
 #define KPF_SLUB_FROZEN		50
 #define KPF_SLUB_DEBUG		51
<span class="p_add">+#define KPF_FILE		62</span>
<span class="p_add">+#define KPF_MMAP_EXCLUSIVE	63</span>
 
 #define KPF_ALL_BITS		((uint64_t)~0ULL)
 #define KPF_HACKERS_BITS	(0xffffULL &lt;&lt; 32)
<span class="p_chunk">@@ -140,6 +143,9 @@</span> <span class="p_context"> static const char * const page_flag_names[] = {</span>
 	[KPF_SLOB_FREE]		= &quot;P:slob_free&quot;,
 	[KPF_SLUB_FROZEN]	= &quot;A:slub_frozen&quot;,
 	[KPF_SLUB_DEBUG]	= &quot;E:slub_debug&quot;,
<span class="p_add">+</span>
<span class="p_add">+	[KPF_FILE]		= &quot;F:file&quot;,</span>
<span class="p_add">+	[KPF_MMAP_EXCLUSIVE]	= &quot;1:mmap_exclusive&quot;,</span>
 };
 
 
<span class="p_chunk">@@ -443,6 +449,10 @@</span> <span class="p_context"> static uint64_t expand_overloaded_flags(uint64_t flags, uint64_t pme)</span>
 
 	if (pme &amp; PM_SOFT_DIRTY)
 		flags |= BIT(SOFTDIRTY);
<span class="p_add">+	if (pme &amp; PM_FILE)</span>
<span class="p_add">+		flags |= BIT(FILE);</span>
<span class="p_add">+	if (pme &amp; PM_MMAP_EXCLUSIVE)</span>
<span class="p_add">+		flags |= BIT(MMAP_EXCLUSIVE);</span>
 
 	return flags;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



