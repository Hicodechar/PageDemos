
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v12] acpi, apei, arm64: APEI initial support for aarch64. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v12] acpi, apei, arm64: APEI initial support for aarch64.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 29, 2016, 8:57 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1469782664-12611-1-git-send-email-fu.wei@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9252311/mbox/"
   >mbox</a>
|
   <a href="/patch/9252311/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9252311/">/patch/9252311/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F14BD60757 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Jul 2016 08:59:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DFD8527F8C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Jul 2016 08:59:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D3D5227FA1; Fri, 29 Jul 2016 08:59:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4953E27F8C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Jul 2016 08:59:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752739AbcG2I7p (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 29 Jul 2016 04:59:45 -0400
Received: from mx1.redhat.com ([209.132.183.28]:48434 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752672AbcG2I7m (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 29 Jul 2016 04:59:42 -0400
Received: from int-mx10.intmail.prod.int.phx2.redhat.com
	(int-mx10.intmail.prod.int.phx2.redhat.com [10.5.11.23])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id D620BC0624A6;
	Fri, 29 Jul 2016 08:59:39 +0000 (UTC)
Received: from rei-ayanami.redhat.com (vpn1-7-44.pek2.redhat.com
	[10.72.7.44])
	by int-mx10.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id u6T8xSSD019531; Fri, 29 Jul 2016 04:59:29 -0400
From: fu.wei@linaro.org
To: tn@semihalf.com, rjw@rjwysocki.net, len.brown@intel.com,
	pavel@ucw.cz, bp@suse.de, hanjun.guo@linaro.org,
	jon.zhixiong.zhang@gmail.com, jcm@redhat.com,
	catalin.marinas@arm.com, will.deacon@arm.com, mark.rutland@arm.com,
	Marc.Zyngier@arm.com, lorenzo.pieralisi@arm.com,
	tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com,
	matt.fleming@intel.com, tony.luck@intel.com
Cc: linux-kernel@vger.kernel.org, linux-acpi@vger.kernel.org,
	x86@kernel.org, linaro-acpi@lists.linaro.org,
	linux-arm-kernel@lists.infradead.org, linux-pm@vger.kernel.org,
	Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;, Fu Wei &lt;fu.wei@linaro.org&gt;
Subject: [PATCH v12] acpi, apei, arm64: APEI initial support for aarch64.
Date: Fri, 29 Jul 2016 16:57:44 +0800
Message-Id: &lt;1469782664-12611-1-git-send-email-fu.wei@linaro.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.23
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.32]);
	Fri, 29 Jul 2016 08:59:41 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - July 29, 2016, 8:57 a.m.</div>
<pre class="content">
<span class="from">From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>

This commit provides APEI arch-specific bits for aarch64

Meanwhile,
(1)add a new subfunction &quot;hest_ia32_init&quot; for
&quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture
Corrected Machine Check (CMC).
(2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to
a generic place.
(3)select HAVE_ACPI_APEI when EFI and ACPI is set on ARM64,
because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.

[Fu Wei: improve &amp;&amp; upstream]
<span class="signed-off-by">
Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="acked-by">Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="acked-by">Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
---
Changelog:
v12:https://lkml.org/lkml/2016/7/29/
    Fix a comment problem(redundant &quot;with&quot;)
    Rebase to 4.7.0-g680eee2

v11:https://lkml.org/lkml/2016/7/27/427
    Rebase to v4.7-0e06f5c0

v10:https://lkml.org/lkml/2016/4/14
    Fix the Alphabetical order problem in arch/arm64/Kconfig

v9: https://lkml.org/lkml/2016/4/5/522
    Improve the comment for arch_apei_flush_tlb_one.
    Using select &quot;HAVE_ACPI_APEI if (ACPI &amp;&amp; EFI)&quot; to fix the EFI dependence
    problem.

v8: https://lkml.org/lkml/2016/3/29/132
    Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set
    on ARM64.

v7: https://lkml.org/lkml/2016/3/17/183
    Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h

v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html
    Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to
    a generic place.
    Delete HAVE_ACPI_APEI_HEST_IA32.

v5: https://lkml.org/lkml/2015/12/10/131
    Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of
    &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.

v4: https://lkml.org/lkml/2015/12/8/188
    Rebase to latest kernel version(4.4-rc4).
    Move arch_apei_flush_tlb_one into header file as a inline function
    Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.

v3: https://lkml.org/lkml/2015/12/3/521
    Remove &quot;acpi_disable_cmcff&quot; from arm64 code,
    and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;

v2: https://lkml.org/lkml/2015/12/2/432
    Rebase to latest kernel version(4.4-rc3).
    Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c

v1: https://lkml.org/lkml/2015/8/14/199
    Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.
    Delete arch/arm64/kernel/apei.c.
    Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.

 arch/arm64/Kconfig            |  1 +
 arch/arm64/include/asm/acpi.h | 16 +++++++++++++++-
 arch/x86/kernel/acpi/apei.c   |  3 ---
 drivers/acpi/apei/hest.c      | 18 +++++++++++++++---
 4 files changed, 31 insertions(+), 7 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Aug. 4, 2016, 9:48 a.m.</div>
<pre class="content">
On Fri, Jul 29, 2016 at 04:57:44PM +0800, fu.wei@linaro.org wrote:
<span class="quote">&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Meanwhile,</span>
<span class="quote">&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt; a generic place.</span>
<span class="quote">&gt; (3)select HAVE_ACPI_APEI when EFI and ACPI is set on ARM64,</span>
<span class="quote">&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt; Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; ---</span>

...
<span class="quote">
&gt; @@ -110,8 +111,21 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef	CONFIG_ACPI_APEI</span>
<span class="quote">&gt; +#define acpi_disable_cmcff 1</span>

What does that mean? ARM doesn&#39;t have firmware-first mode?

A piece of comment please.
<span class="quote">
&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Despite its name, this function must still broadcast the TLB</span>
<span class="quote">&gt; + * invalidation in order to ensure other CPUs don&#39;t up with junk</span>
						      ^
						     end
<span class="quote">
&gt; + * entries as a result of speculation. Unusually, its also called in</span>
<span class="quote">&gt; + * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="quote">&gt; + * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt;  int arm64_acpi_numa_init(void);</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/acpi/apei.c</span>

...
<span class="quote">
&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;  		goto err;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (!acpi_disable_cmcff)</span>
<span class="quote">&gt; -		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; +	rc = hest_ia32_init();</span>

Why do you need a separate hest_ia32_init() here?

You can do

	rc = apei_hest_parse(hest_parse_cmc, NULL);

directly here AFAICT.
<span class="quote">
&gt; +	if (rc)</span>
<span class="quote">&gt; +		goto err;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!ghes_disable) {</span>
<span class="quote">&gt;  		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.5.5</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Aug. 4, 2016, 10:30 a.m.</div>
<pre class="content">
Tomasz&#39;s linaro address bounces, adding one I&#39;ve found on lkml to CC
instead.

On Thu, Aug 04, 2016 at 11:48:38AM +0200, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Jul 29, 2016 at 04:57:44PM +0800, fu.wei@linaro.org wrote:</span>
<span class="quote">&gt; &gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Meanwhile,</span>
<span class="quote">&gt; &gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt; &gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt; &gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt; &gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt; &gt; a generic place.</span>
<span class="quote">&gt; &gt; (3)select HAVE_ACPI_APEI when EFI and ACPI is set on ARM64,</span>
<span class="quote">&gt; &gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; &gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; &gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt; &gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt; &gt; Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; @@ -110,8 +111,21 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #ifdef	CONFIG_ACPI_APEI</span>
<span class="quote">&gt; &gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What does that mean? ARM doesn&#39;t have firmware-first mode?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A piece of comment please.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; &gt; -#endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +/*</span>
<span class="quote">&gt; &gt; + * Despite its name, this function must still broadcast the TLB</span>
<span class="quote">&gt; &gt; + * invalidation in order to ensure other CPUs don&#39;t up with junk</span>
<span class="quote">&gt; 						      ^</span>
<span class="quote">&gt; 						     end</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; + * entries as a result of speculation. Unusually, its also called in</span>
<span class="quote">&gt; &gt; + * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="quote">&gt; &gt; + * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="quote">&gt; &gt; + */</span>
<span class="quote">&gt; &gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt; &gt;  int arm64_acpi_numa_init(void);</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; &gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; &gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt; &gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; &gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; &gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt; &gt;  		goto err;</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	if (!acpi_disable_cmcff)</span>
<span class="quote">&gt; &gt; -		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; &gt; +	rc = hest_ia32_init();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why do you need a separate hest_ia32_init() here?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You can do</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	rc = apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; directly here AFAICT.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +	if (rc)</span>
<span class="quote">&gt; &gt; +		goto err;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	if (!ghes_disable) {</span>
<span class="quote">&gt; &gt;  		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt; &gt; -- </span>
<span class="quote">&gt; &gt; 2.5.5</span>
<span class="quote">&gt; &gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Aug. 10, 2016, 6:22 a.m.</div>
<pre class="content">
Hi Borislav.

On 4 August 2016 at 18:30, Borislav Petkov &lt;bp@suse.de&gt; wrote:
<span class="quote">&gt; Tomasz&#39;s linaro address bounces, adding one I&#39;ve found on lkml to CC</span>
<span class="quote">&gt; instead.</span>

Thanks for reminding me, I have added him(tn@semihalf.com) in TO list.
The dated email address(tomasz.nowicki@linaro.org) was added by &quot;git
send-email&quot;.
I have disabled it by &quot;--no-signed-off-by-cc&quot;
<span class="quote">
&gt;</span>
<span class="quote">&gt; On Thu, Aug 04, 2016 at 11:48:38AM +0200, Borislav Petkov wrote:</span>
<span class="quote">&gt;&gt; On Fri, Jul 29, 2016 at 04:57:44PM +0800, fu.wei@linaro.org wrote:</span>
<span class="quote">&gt;&gt; &gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Meanwhile,</span>
<span class="quote">&gt;&gt; &gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt; &gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt; &gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt; &gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt; &gt; a generic place.</span>
<span class="quote">&gt;&gt; &gt; (3)select HAVE_ACPI_APEI when EFI and ACPI is set on ARM64,</span>
<span class="quote">&gt;&gt; &gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; &gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; &gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt;&gt; &gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt;&gt; &gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; &gt; Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt;&gt; &gt; ---</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ...</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; @@ -110,8 +111,21 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;&gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt;  #ifdef     CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt; &gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; What does that mean? ARM doesn&#39;t have firmware-first mode?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; A piece of comment please.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;&gt; &gt; -#endif</span>
<span class="quote">&gt;&gt; &gt; +</span>
<span class="quote">&gt;&gt; &gt; +/*</span>
<span class="quote">&gt;&gt; &gt; + * Despite its name, this function must still broadcast the TLB</span>
<span class="quote">&gt;&gt; &gt; + * invalidation in order to ensure other CPUs don&#39;t up with junk</span>
<span class="quote">&gt;&gt;                                                     ^</span>
<span class="quote">&gt;&gt;                                                    end</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; + * entries as a result of speculation. Unusually, its also called in</span>
<span class="quote">&gt;&gt; &gt; + * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="quote">&gt;&gt; &gt; + * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="quote">&gt;&gt; &gt; + */</span>
<span class="quote">&gt;&gt; &gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;&gt; &gt; +{</span>
<span class="quote">&gt;&gt; &gt; +   flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt;&gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt;&gt; &gt;  int arm64_acpi_numa_init(void);</span>
<span class="quote">&gt;&gt; &gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; &gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt;&gt; &gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; &gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ...</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; &gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt;&gt; &gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; &gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; &gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;&gt; &gt;             goto err;</span>
<span class="quote">&gt;&gt; &gt;     }</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; -   if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt; &gt; -           apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; &gt; +   rc = hest_ia32_init();</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Why do you need a separate hest_ia32_init() here?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You can do</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       rc = apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; directly here AFAICT.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; +   if (rc)</span>
<span class="quote">&gt;&gt; &gt; +           goto err;</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt;     if (!ghes_disable) {</span>
<span class="quote">&gt;&gt; &gt;             rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt;&gt; &gt; --</span>
<span class="quote">&gt;&gt; &gt; 2.5.5</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Regards/Gruss,</span>
<span class="quote">&gt;     Boris.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ECO tip #101: Trim your mails when you reply.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton, HRB 21284 (AG Nürnberg)</span>
<span class="quote">&gt; --</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Aug. 10, 2016, 10:40 a.m.</div>
<pre class="content">
Hi Borislav

On 4 August 2016 at 17:48, Borislav Petkov &lt;bp@suse.de&gt; wrote:
<span class="quote">&gt; On Fri, Jul 29, 2016 at 04:57:44PM +0800, fu.wei@linaro.org wrote:</span>
<span class="quote">&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Meanwhile,</span>
<span class="quote">&gt;&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt; a generic place.</span>
<span class="quote">&gt;&gt; (3)select HAVE_ACPI_APEI when EFI and ACPI is set on ARM64,</span>
<span class="quote">&gt;&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -110,8 +111,21 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #ifdef       CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What does that mean? ARM doesn&#39;t have firmware-first mode?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; A piece of comment please.</span>

Thanks I have added a comment on v13, please check.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * Despite its name, this function must still broadcast the TLB</span>
<span class="quote">&gt;&gt; + * invalidation in order to ensure other CPUs don&#39;t up with junk</span>
<span class="quote">&gt;                                                       ^</span>
<span class="quote">&gt;                                                      end</span>

Fixed, thanks :-)
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; + * entries as a result of speculation. Unusually, its also called in</span>
<span class="quote">&gt;&gt; + * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="quote">&gt;&gt; + * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_ACPI_NUMA</span>
<span class="quote">&gt;&gt;  int arm64_acpi_numa_init(void);</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;&gt;               goto err;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt; -             apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; +     rc = hest_ia32_init();</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Why do you need a separate hest_ia32_init() here?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You can do</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         rc = apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; directly here AFAICT.</span>

yes, we can do that.

But the reason for a  separate hest_ia32_init() is:
For now(ACPI 6.1), we have three IA-32 Architecture-specific error
source structures, maybe we will parse them later.
So I made this hest_ia32_init() for all these structures. maybe we can do :
---
 static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)
 {
 if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)
 return 0;

 if (!acpi_disable_cmcff)
 return !arch_apei_enable_cmcff(hest_hdr, data);

 return 0;
}

 static int __init hest_parse_mce(struct acpi_hest_header *hest_hdr, void *data)
 {
 if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CHECK)
 return 0;

// do something

 return 0;
}

 static int __init hest_parse_nmi(struct acpi_hest_header *hest_hdr, void *data)
 {
 if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_NMI)
 return 0;

// do something

 return 0;
}

static inline int __init hest_ia32_init(void)
{
  int ret = apei_hest_parse(hest_parse_nmi, NULL);
  if (ret)
     return ret;

  ret = apei_hest_parse(hest_parse_mce, NULL);
  if (ret)
     return ret;

   return apei_hest_parse(hest_parse_cmc, NULL);
}
---

But it is just my thought, please correct me if I misunderstand
something. Thanks :-)
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +     if (rc)</span>
<span class="quote">&gt;&gt; +             goto err;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       if (!ghes_disable) {</span>
<span class="quote">&gt;&gt;               rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; 2.5.5</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Regards/Gruss,</span>
<span class="quote">&gt;     Boris.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ECO tip #101: Trim your mails when you reply.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton, HRB 21284 (AG Nürnberg)</span>
<span class="quote">&gt; --</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Aug. 10, 2016, 10:45 a.m.</div>
<pre class="content">
On Wed, Aug 10, 2016 at 06:40:53PM +0800, Fu Wei wrote:
<span class="quote">&gt; But the reason for a  separate hest_ia32_init() is:</span>
<span class="quote">&gt; For now(ACPI 6.1), we have three IA-32 Architecture-specific error</span>
<span class="quote">&gt; source structures, maybe we will parse them later.</span>
<span class="quote">&gt; So I made this hest_ia32_init() for all these structures. maybe we can do :</span>

So I&#39;d make it as simple as possible now and cross that bridge only when
we get there, i.e., only when you are adding support for those and not
earlier.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Aug. 10, 2016, 11:01 a.m.</div>
<pre class="content">
Hi Borislav,

On 10 August 2016 at 18:45, Borislav Petkov &lt;bp@suse.de&gt; wrote:
<span class="quote">&gt; On Wed, Aug 10, 2016 at 06:40:53PM +0800, Fu Wei wrote:</span>
<span class="quote">&gt;&gt; But the reason for a  separate hest_ia32_init() is:</span>
<span class="quote">&gt;&gt; For now(ACPI 6.1), we have three IA-32 Architecture-specific error</span>
<span class="quote">&gt;&gt; source structures, maybe we will parse them later.</span>
<span class="quote">&gt;&gt; So I made this hest_ia32_init() for all these structures. maybe we can do :</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So I&#39;d make it as simple as possible now and cross that bridge only when</span>
<span class="quote">&gt; we get there, i.e., only when you are adding support for those and not</span>
<span class="quote">&gt; earlier.</span>
<span class="quote">&gt;</span>

OK, got your point.
Sorry for sending v13 before checking this with you.

so I will do :

@@ -232,8 +243,9 @@ void __init acpi_hest_init(void)
  goto err;
  }

- if (!acpi_disable_cmcff)
- apei_hest_parse(hest_parse_cmc, NULL);
+ rc =apei_hest_parse(hest_parse_cmc, NULL);
+ if (rc)
+ goto err;

  if (!ghes_disable) {
  rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);

Do you have other suggestion? then I can post v14 to fix it :-)
<span class="quote">
&gt; --</span>
<span class="quote">&gt; Regards/Gruss,</span>
<span class="quote">&gt;     Boris.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ECO tip #101: Trim your mails when you reply.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton, HRB 21284 (AG Nürnberg)</span>
<span class="quote">&gt; --</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Aug. 10, 2016, 11:10 a.m.</div>
<pre class="content">
On Wed, Aug 10, 2016 at 07:01:05PM +0800, Fu Wei wrote:
<span class="quote">&gt; - if (!acpi_disable_cmcff)</span>
<span class="quote">&gt; - apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; + rc =apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; + if (rc)</span>
<span class="quote">&gt; + goto err;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   if (!ghes_disable) {</span>
<span class="quote">&gt;   rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Do you have other suggestion? then I can post v14 to fix it :-)</span>

Nah, looks good :)

Let&#39;s keep it simple and add more involved handling when it is really
needed. Thanks!

Btw, that comment:

+/*
+ * acpi_disable_cmcff is used in drivers/acpi/apei/hest.c for disabling
+ * IA-32 Architecture Corrected Machine Checkx(cmc) FIRMWARE_FIRST mode by
+ * boot parameter(acpi=nocmcff). But we don&#39;t have this IA-32 specific
+ * feature on ARM64, this definition is only for compatibility.
+ */
+#define acpi_disable_cmcff 1

looks ok, except the small typo:

Architecture Corrected Machine Checkx(cmc)
				    ^
Make that

&quot;IA-32 Architecture Corrected Machine Check (CMC) Firmware-First mode&quot;

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Aug. 10, 2016, 1:05 p.m.</div>
<pre class="content">
Hi Borislav,

On 10 August 2016 at 19:10, Borislav Petkov &lt;bp@suse.de&gt; wrote:
<span class="quote">&gt; On Wed, Aug 10, 2016 at 07:01:05PM +0800, Fu Wei wrote:</span>
<span class="quote">&gt;&gt; - if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt; - apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; + rc =apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; + if (rc)</span>
<span class="quote">&gt;&gt; + goto err;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   if (!ghes_disable) {</span>
<span class="quote">&gt;&gt;   rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Do you have other suggestion? then I can post v14 to fix it :-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Nah, looks good :)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Let&#39;s keep it simple and add more involved handling when it is really</span>
<span class="quote">&gt; needed. Thanks!</span>

Thanks for your help, this have been fixed in v14(just posted).
<span class="quote">
&gt;</span>
<span class="quote">&gt; Btw, that comment:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * acpi_disable_cmcff is used in drivers/acpi/apei/hest.c for disabling</span>
<span class="quote">&gt; + * IA-32 Architecture Corrected Machine Checkx(cmc) FIRMWARE_FIRST mode by</span>
<span class="quote">&gt; + * boot parameter(acpi=nocmcff). But we don&#39;t have this IA-32 specific</span>
<span class="quote">&gt; + * feature on ARM64, this definition is only for compatibility.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; looks ok, except the small typo:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Architecture Corrected Machine Checkx(cmc)</span>
<span class="quote">&gt;                                     ^</span>
<span class="quote">&gt; Make that</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; &quot;IA-32 Architecture Corrected Machine Check (CMC) Firmware-First mode&quot;</span>

Done! Thanks :-)
<span class="quote">
&gt;</span>
<span class="quote">&gt; Thanks.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Regards/Gruss,</span>
<span class="quote">&gt;     Boris.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ECO tip #101: Trim your mails when you reply.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton, HRB 21284 (AG Nürnberg)</span>
<span class="quote">&gt; --</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 9f8b99e..3268299 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -50,6 +50,7 @@</span> <span class="p_context"> config ARM64</span>
 	select GENERIC_TIME_VSYSCALL
 	select HANDLE_DOMAIN_IRQ
 	select HARDIRQS_SW_RESEND
<span class="p_add">+	select HAVE_ACPI_APEI if (ACPI &amp;&amp; EFI)</span>
 	select HAVE_ALIGNED_STRUCT_PAGE if SLUB
 	select HAVE_ARCH_AUDITSYSCALL
 	select HAVE_ARCH_BITREVERSE
<span class="p_header">diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">index 5420cb0..7cdf681 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/cputype.h&gt;
 #include &lt;asm/smp_plat.h&gt;
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
 
 /* Macros for consistency checks of the GICC subtable of MADT */
 #define ACPI_MADT_GICC_LENGTH	\
<span class="p_chunk">@@ -110,8 +111,21 @@</span> <span class="p_context"> static inline const char *acpi_get_enable_method(int cpu)</span>
 }
 
 #ifdef	CONFIG_ACPI_APEI
<span class="p_add">+#define acpi_disable_cmcff 1</span>
 pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);
<span class="p_del">-#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Despite its name, this function must still broadcast the TLB</span>
<span class="p_add">+ * invalidation in order to ensure other CPUs don&#39;t up with junk</span>
<span class="p_add">+ * entries as a result of speculation. Unusually, its also called in</span>
<span class="p_add">+ * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="p_add">+ * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_ACPI_APEI */</span>
 
 #ifdef CONFIG_ACPI_NUMA
 int arm64_acpi_numa_init(void);
<span class="p_header">diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">index c280df6..ea3046e 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_chunk">@@ -24,9 +24,6 @@</span> <span class="p_context"> int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data)</span>
 	struct acpi_hest_ia_corrected *cmc;
 	struct acpi_hest_ia_error_bank *mc_bank;
 
<span class="p_del">-	if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-</span>
 	cmc = (struct acpi_hest_ia_corrected *)hest_hdr;
 	if (!cmc-&gt;enabled)
 		return 0;
<span class="p_header">diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="p_header">index 20b3fcf..792a0d9 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/hest.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/hest.c</span>
<span class="p_chunk">@@ -123,7 +123,18 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(apei_hest_parse);</span>
  */
 static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)
 {
<span class="p_del">-	return arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+	if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!acpi_disable_cmcff)</span>
<span class="p_add">+		return !arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int __init hest_ia32_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return apei_hest_parse(hest_parse_cmc, NULL);</span>
 }
 
 struct ghes_arr {
<span class="p_chunk">@@ -232,8 +243,9 @@</span> <span class="p_context"> void __init acpi_hest_init(void)</span>
 		goto err;
 	}
 
<span class="p_del">-	if (!acpi_disable_cmcff)</span>
<span class="p_del">-		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="p_add">+	rc = hest_ia32_init();</span>
<span class="p_add">+	if (rc)</span>
<span class="p_add">+		goto err;</span>
 
 	if (!ghes_disable) {
 		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



