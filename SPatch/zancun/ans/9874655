
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm: rename global_page_state to global_zone_page_state - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm: rename global_page_state to global_zone_page_state</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 1, 2017, 1:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170801134256.5400-2-hannes@cmpxchg.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9874655/mbox/"
   >mbox</a>
|
   <a href="/patch/9874655/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9874655/">/patch/9874655/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	94CDA60361 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 13:43:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 80A38286D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 13:43:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7555A286D4; Tue,  1 Aug 2017 13:43:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 589F7286CC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 13:43:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751936AbdHANnX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 1 Aug 2017 09:43:23 -0400
Received: from gum.cmpxchg.org ([85.214.110.215]:52956 &quot;EHLO gum.cmpxchg.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751834AbdHANnN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 1 Aug 2017 09:43:13 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=cmpxchg.org ; s=x;
	h=References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From:Sender:
	Reply-To:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:
	Content-Description:Resent-Date:Resent-From:Resent-Sender:Resent-To:Resent-Cc
	:Resent-Message-ID:List-Id:List-Help:List-Unsubscribe:List-Subscribe:
	List-Post:List-Owner:List-Archive;
	bh=SwPpQRpZB6TN8hc+novTkE9vfEjC20sd1oRjwzXsSr4=;
	b=w5wwIN5akTCXt+zWhcxtZIDVcO
	+qW78TCc/oYYQYIBRKrrwNy3acA/DVS9sWAIMT3wYHwS/GeZuGahzNLpxKbQT6Beu2PZKWLIfCR8d
	FoHnSyNCaE9MWpHBcJ94/loC4HJHd7KywueH/mrim2jPrUAa3QMKhpJvBCcCQ0LB3S3Y=;
From: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;,
	Tetsuo Handa &lt;penguin-kernel@i-love.sakura.ne.jp&gt;,
	Josef Bacik &lt;josef@toxicpanda.com&gt;,
	Vladimir Davydov &lt;vdavydov.dev@gmail.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, kernel-team@fb.com
Subject: [PATCH 2/2] mm: rename global_page_state to global_zone_page_state
Date: Tue,  1 Aug 2017 09:42:56 -0400
Message-Id: &lt;20170801134256.5400-2-hannes@cmpxchg.org&gt;
X-Mailer: git-send-email 2.13.3
In-Reply-To: &lt;20170801134256.5400-1-hannes@cmpxchg.org&gt;
References: &lt;20170801134256.5400-1-hannes@cmpxchg.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a> - Aug. 1, 2017, 1:42 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

global_page_state is error prone as a recent bug report pointed out [1].
It only returns proper values for zone based counters as the enum it
gets suggests. We already have global_node_page_state so let&#39;s rename
global_page_state to global_zone_page_state to be more explicit here.
All existing users seems to be correct
$ git grep &quot;global_page_state(NR_&quot; | sed &#39;s@.*(\(NR_[A-Z_]*\)).*@\1@&#39; | sort | uniq -c
      2 NR_BOUNCE
      2 NR_FREE_CMA_PAGES
     11 NR_FREE_PAGES
      1 NR_KERNEL_STACK_KB
      1 NR_MLOCK
      2 NR_PAGETABLE

This patch shouldn&#39;t introduce any functional change.

[1] http://lkml.kernel.org/r/201707260628.v6Q6SmaS030814@www262.sakura.ne.jp
<span class="signed-off-by">
Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
---
 fs/proc/meminfo.c      | 10 +++++-----
 include/linux/swap.h   |  4 ++--
 include/linux/vmstat.h |  4 ++--
 mm/mmap.c              |  6 +++---
 mm/nommu.c             |  4 ++--
 mm/page-writeback.c    |  4 ++--
 mm/page_alloc.c        | 12 ++++++------
 mm/util.c              |  2 +-
 mm/vmstat.c            |  4 ++--
 9 files changed, 25 insertions(+), 25 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c</span>
<span class="p_header">index 509a61668d90..cdd979724c74 100644</span>
<span class="p_header">--- a/fs/proc/meminfo.c</span>
<span class="p_header">+++ b/fs/proc/meminfo.c</span>
<span class="p_chunk">@@ -80,7 +80,7 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 	show_val_kb(m, &quot;Active(file):   &quot;, pages[LRU_ACTIVE_FILE]);
 	show_val_kb(m, &quot;Inactive(file): &quot;, pages[LRU_INACTIVE_FILE]);
 	show_val_kb(m, &quot;Unevictable:    &quot;, pages[LRU_UNEVICTABLE]);
<span class="p_del">-	show_val_kb(m, &quot;Mlocked:        &quot;, global_page_state(NR_MLOCK));</span>
<span class="p_add">+	show_val_kb(m, &quot;Mlocked:        &quot;, global_zone_page_state(NR_MLOCK));</span>
 
 #ifdef CONFIG_HIGHMEM
 	show_val_kb(m, &quot;HighTotal:      &quot;, i.totalhigh);
<span class="p_chunk">@@ -114,9 +114,9 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 	show_val_kb(m, &quot;SUnreclaim:     &quot;,
 		    global_node_page_state(NR_SLAB_UNRECLAIMABLE));
 	seq_printf(m, &quot;KernelStack:    %8lu kB\n&quot;,
<span class="p_del">-		   global_page_state(NR_KERNEL_STACK_KB));</span>
<span class="p_add">+		   global_zone_page_state(NR_KERNEL_STACK_KB));</span>
 	show_val_kb(m, &quot;PageTables:     &quot;,
<span class="p_del">-		    global_page_state(NR_PAGETABLE));</span>
<span class="p_add">+		    global_zone_page_state(NR_PAGETABLE));</span>
 #ifdef CONFIG_QUICKLIST
 	show_val_kb(m, &quot;Quicklists:     &quot;, quicklist_total_size());
 #endif
<span class="p_chunk">@@ -124,7 +124,7 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 	show_val_kb(m, &quot;NFS_Unstable:   &quot;,
 		    global_node_page_state(NR_UNSTABLE_NFS));
 	show_val_kb(m, &quot;Bounce:         &quot;,
<span class="p_del">-		    global_page_state(NR_BOUNCE));</span>
<span class="p_add">+		    global_zone_page_state(NR_BOUNCE));</span>
 	show_val_kb(m, &quot;WritebackTmp:   &quot;,
 		    global_node_page_state(NR_WRITEBACK_TEMP));
 	show_val_kb(m, &quot;CommitLimit:    &quot;, vm_commit_limit());
<span class="p_chunk">@@ -151,7 +151,7 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 #ifdef CONFIG_CMA
 	show_val_kb(m, &quot;CmaTotal:       &quot;, totalcma_pages);
 	show_val_kb(m, &quot;CmaFree:        &quot;,
<span class="p_del">-		    global_page_state(NR_FREE_CMA_PAGES));</span>
<span class="p_add">+		    global_zone_page_state(NR_FREE_CMA_PAGES));</span>
 #endif
 
 	hugetlb_report_meminfo(m);
<span class="p_header">diff --git a/include/linux/swap.h b/include/linux/swap.h</span>
<span class="p_header">index d83d28e53e62..bf49b79218f4 100644</span>
<span class="p_header">--- a/include/linux/swap.h</span>
<span class="p_header">+++ b/include/linux/swap.h</span>
<span class="p_chunk">@@ -262,8 +262,8 @@</span> <span class="p_context"> extern unsigned long totalreserve_pages;</span>
 extern unsigned long nr_free_buffer_pages(void);
 extern unsigned long nr_free_pagecache_pages(void);
 
<span class="p_del">-/* Definition of global_page_state not available yet */</span>
<span class="p_del">-#define nr_free_pages() global_page_state(NR_FREE_PAGES)</span>
<span class="p_add">+/* Definition of global_zone_page_state not available yet */</span>
<span class="p_add">+#define nr_free_pages() global_zone_page_state(NR_FREE_PAGES)</span>
 
 
 /* linux/mm/swap.c */
<span class="p_header">diff --git a/include/linux/vmstat.h b/include/linux/vmstat.h</span>
<span class="p_header">index b3d85f30d424..97e11ab573f0 100644</span>
<span class="p_header">--- a/include/linux/vmstat.h</span>
<span class="p_header">+++ b/include/linux/vmstat.h</span>
<span class="p_chunk">@@ -123,7 +123,7 @@</span> <span class="p_context"> static inline void node_page_state_add(long x, struct pglist_data *pgdat,</span>
 	atomic_long_add(x, &amp;vm_node_stat[item]);
 }
 
<span class="p_del">-static inline unsigned long global_page_state(enum zone_stat_item item)</span>
<span class="p_add">+static inline unsigned long global_zone_page_state(enum zone_stat_item item)</span>
 {
 	long x = atomic_long_read(&amp;vm_zone_stat[item]);
 #ifdef CONFIG_SMP
<span class="p_chunk">@@ -199,7 +199,7 @@</span> <span class="p_context"> extern unsigned long sum_zone_node_page_state(int node,</span>
 extern unsigned long node_page_state(struct pglist_data *pgdat,
 						enum node_stat_item item);
 #else
<span class="p_del">-#define sum_zone_node_page_state(node, item) global_page_state(item)</span>
<span class="p_add">+#define sum_zone_node_page_state(node, item) global_zone_page_state(item)</span>
 #define node_page_state(node, item) global_node_page_state(item)
 #endif /* CONFIG_NUMA */
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index f19efcf75418..9800e29763f4 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -3514,7 +3514,7 @@</span> <span class="p_context"> static int init_user_reserve(void)</span>
 {
 	unsigned long free_kbytes;
 
<span class="p_del">-	free_kbytes = global_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
<span class="p_add">+	free_kbytes = global_zone_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
 
 	sysctl_user_reserve_kbytes = min(free_kbytes / 32, 1UL &lt;&lt; 17);
 	return 0;
<span class="p_chunk">@@ -3535,7 +3535,7 @@</span> <span class="p_context"> static int init_admin_reserve(void)</span>
 {
 	unsigned long free_kbytes;
 
<span class="p_del">-	free_kbytes = global_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
<span class="p_add">+	free_kbytes = global_zone_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
 
 	sysctl_admin_reserve_kbytes = min(free_kbytes / 32, 1UL &lt;&lt; 13);
 	return 0;
<span class="p_chunk">@@ -3579,7 +3579,7 @@</span> <span class="p_context"> static int reserve_mem_notifier(struct notifier_block *nb,</span>
 
 		break;
 	case MEM_OFFLINE:
<span class="p_del">-		free_kbytes = global_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
<span class="p_add">+		free_kbytes = global_zone_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
 
 		if (sysctl_user_reserve_kbytes &gt; free_kbytes) {
 			init_user_reserve();
<span class="p_header">diff --git a/mm/nommu.c b/mm/nommu.c</span>
<span class="p_header">index fc184f597d59..53d5175a5c14 100644</span>
<span class="p_header">--- a/mm/nommu.c</span>
<span class="p_header">+++ b/mm/nommu.c</span>
<span class="p_chunk">@@ -1962,7 +1962,7 @@</span> <span class="p_context"> static int __meminit init_user_reserve(void)</span>
 {
 	unsigned long free_kbytes;
 
<span class="p_del">-	free_kbytes = global_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
<span class="p_add">+	free_kbytes = global_zone_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
 
 	sysctl_user_reserve_kbytes = min(free_kbytes / 32, 1UL &lt;&lt; 17);
 	return 0;
<span class="p_chunk">@@ -1983,7 +1983,7 @@</span> <span class="p_context"> static int __meminit init_admin_reserve(void)</span>
 {
 	unsigned long free_kbytes;
 
<span class="p_del">-	free_kbytes = global_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
<span class="p_add">+	free_kbytes = global_zone_page_state(NR_FREE_PAGES) &lt;&lt; (PAGE_SHIFT - 10);</span>
 
 	sysctl_admin_reserve_kbytes = min(free_kbytes / 32, 1UL &lt;&lt; 13);
 	return 0;
<span class="p_header">diff --git a/mm/page-writeback.c b/mm/page-writeback.c</span>
<span class="p_header">index 96e93b214d31..88562a0feb14 100644</span>
<span class="p_header">--- a/mm/page-writeback.c</span>
<span class="p_header">+++ b/mm/page-writeback.c</span>
<span class="p_chunk">@@ -363,7 +363,7 @@</span> <span class="p_context"> static unsigned long global_dirtyable_memory(void)</span>
 {
 	unsigned long x;
 
<span class="p_del">-	x = global_page_state(NR_FREE_PAGES);</span>
<span class="p_add">+	x = global_zone_page_state(NR_FREE_PAGES);</span>
 	/*
 	 * Pages reserved for the kernel should not be considered
 	 * dirtyable, to prevent a situation where reclaim has to
<span class="p_chunk">@@ -1405,7 +1405,7 @@</span> <span class="p_context"> void wb_update_bandwidth(struct bdi_writeback *wb, unsigned long start_time)</span>
  * will look to see if it needs to start dirty throttling.
  *
  * If dirty_poll_interval is too low, big NUMA machines will call the expensive
<span class="p_del">- * global_page_state() too often. So scale it near-sqrt to the safety margin</span>
<span class="p_add">+ * global_zone_page_state() too often. So scale it near-sqrt to the safety margin</span>
  * (the number of pages we may dirty without exceeding the dirty limits).
  */
 static unsigned long dirty_poll_interval(unsigned long dirty,
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 3e89731a86bd..ff153f7a0586 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -4443,7 +4443,7 @@</span> <span class="p_context"> long si_mem_available(void)</span>
 	 * Estimate the amount of memory available for userspace allocations,
 	 * without causing swapping.
 	 */
<span class="p_del">-	available = global_page_state(NR_FREE_PAGES) - totalreserve_pages;</span>
<span class="p_add">+	available = global_zone_page_state(NR_FREE_PAGES) - totalreserve_pages;</span>
 
 	/*
 	 * Not all the page cache can be freed, otherwise the system will
<span class="p_chunk">@@ -4472,7 +4472,7 @@</span> <span class="p_context"> void si_meminfo(struct sysinfo *val)</span>
 {
 	val-&gt;totalram = totalram_pages;
 	val-&gt;sharedram = global_node_page_state(NR_SHMEM);
<span class="p_del">-	val-&gt;freeram = global_page_state(NR_FREE_PAGES);</span>
<span class="p_add">+	val-&gt;freeram = global_zone_page_state(NR_FREE_PAGES);</span>
 	val-&gt;bufferram = nr_blockdev_pages();
 	val-&gt;totalhigh = totalhigh_pages;
 	val-&gt;freehigh = nr_free_highpages();
<span class="p_chunk">@@ -4607,11 +4607,11 @@</span> <span class="p_context"> void show_free_areas(unsigned int filter, nodemask_t *nodemask)</span>
 		global_node_page_state(NR_SLAB_UNRECLAIMABLE),
 		global_node_page_state(NR_FILE_MAPPED),
 		global_node_page_state(NR_SHMEM),
<span class="p_del">-		global_page_state(NR_PAGETABLE),</span>
<span class="p_del">-		global_page_state(NR_BOUNCE),</span>
<span class="p_del">-		global_page_state(NR_FREE_PAGES),</span>
<span class="p_add">+		global_zone_page_state(NR_PAGETABLE),</span>
<span class="p_add">+		global_zone_page_state(NR_BOUNCE),</span>
<span class="p_add">+		global_zone_page_state(NR_FREE_PAGES),</span>
 		free_pcp,
<span class="p_del">-		global_page_state(NR_FREE_CMA_PAGES));</span>
<span class="p_add">+		global_zone_page_state(NR_FREE_CMA_PAGES));</span>
 
 	for_each_online_pgdat(pgdat) {
 		if (show_mem_node_skip(filter, pgdat-&gt;node_id, nodemask))
<span class="p_header">diff --git a/mm/util.c b/mm/util.c</span>
<span class="p_header">index 9ecddf568fe3..34e57fae959d 100644</span>
<span class="p_header">--- a/mm/util.c</span>
<span class="p_header">+++ b/mm/util.c</span>
<span class="p_chunk">@@ -614,7 +614,7 @@</span> <span class="p_context"> int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)</span>
 		return 0;
 
 	if (sysctl_overcommit_memory == OVERCOMMIT_GUESS) {
<span class="p_del">-		free = global_page_state(NR_FREE_PAGES);</span>
<span class="p_add">+		free = global_zone_page_state(NR_FREE_PAGES);</span>
 		free += global_node_page_state(NR_FILE_PAGES);
 
 		/*
<span class="p_header">diff --git a/mm/vmstat.c b/mm/vmstat.c</span>
<span class="p_header">index 9a4441bbeef2..4544d44e9594 100644</span>
<span class="p_header">--- a/mm/vmstat.c</span>
<span class="p_header">+++ b/mm/vmstat.c</span>
<span class="p_chunk">@@ -1500,7 +1500,7 @@</span> <span class="p_context"> static void *vmstat_start(struct seq_file *m, loff_t *pos)</span>
 	if (!v)
 		return ERR_PTR(-ENOMEM);
 	for (i = 0; i &lt; NR_VM_ZONE_STAT_ITEMS; i++)
<span class="p_del">-		v[i] = global_page_state(i);</span>
<span class="p_add">+		v[i] = global_zone_page_state(i);</span>
 	v += NR_VM_ZONE_STAT_ITEMS;
 
 	for (i = 0; i &lt; NR_VM_NODE_STAT_ITEMS; i++)
<span class="p_chunk">@@ -1589,7 +1589,7 @@</span> <span class="p_context"> int vmstat_refresh(struct ctl_table *table, int write,</span>
 	 * which can equally be echo&#39;ed to or cat&#39;ted from (by root),
 	 * can be used to update the stats just before reading them.
 	 *
<span class="p_del">-	 * Oh, and since global_page_state() etc. are so careful to hide</span>
<span class="p_add">+	 * Oh, and since global_zone_page_state() etc. are so careful to hide</span>
 	 * transiently negative values, report an error here if any of
 	 * the stats is negative, so we know to go looking for imbalance.
 	 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



