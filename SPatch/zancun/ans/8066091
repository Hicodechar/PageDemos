
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.19.y-ckt,025/160] efi: Disable interrupts around EFI calls, not in the epilog/prolog calls - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.19.y-ckt,025/160] efi: Disable interrupts around EFI calls, not in the epilog/prolog calls</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 20, 2016, 1:05 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1453252038-31915-26-git-send-email-kamal@canonical.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8066091/mbox/"
   >mbox</a>
|
   <a href="/patch/8066091/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8066091/">/patch/8066091/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 949DFBEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 01:08:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id DEA8B2054E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 01:08:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 1F53520555
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 01:08:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933510AbcATBIp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 19 Jan 2016 20:08:45 -0500
Received: from youngberry.canonical.com ([91.189.89.112]:55303 &quot;EHLO
	youngberry.canonical.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933451AbcATBI3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 19 Jan 2016 20:08:29 -0500
Received: from 1.general.kamal.us.vpn ([10.172.68.52] helo=fourier)
	by youngberry.canonical.com with esmtpsa
	(TLS1.0:DHE_RSA_AES_128_CBC_SHA1:16) (Exim 4.76)
	(envelope-from &lt;kamal@canonical.com&gt;)
	id 1aLhFy-0000p3-Fo; Wed, 20 Jan 2016 01:08:18 +0000
Received: from kamal by fourier with local (Exim 4.82)
	(envelope-from &lt;kamal@whence.com&gt;)
	id 1aLhFv-00007A-No; Tue, 19 Jan 2016 17:08:15 -0800
From: Kamal Mostafa &lt;kamal@canonical.com&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org,
	kernel-team@lists.ubuntu.com
Cc: Ingo Molnar &lt;mingo@kernel.org&gt;, Matt Fleming &lt;matt.fleming@intel.com&gt;,
	Luis Henriques &lt;luis.henriques@canonical.com&gt;,
	Kamal Mostafa &lt;kamal@canonical.com&gt;
Subject: [PATCH 3.19.y-ckt 025/160] efi: Disable interrupts around EFI calls,
	not in the epilog/prolog calls
Date: Tue, 19 Jan 2016 17:05:03 -0800
Message-Id: &lt;1453252038-31915-26-git-send-email-kamal@canonical.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1453252038-31915-1-git-send-email-kamal@canonical.com&gt;
References: &lt;1453252038-31915-1-git-send-email-kamal@canonical.com&gt;
X-Extended-Stable: 3.19
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a> - Jan. 20, 2016, 1:05 a.m.</div>
<pre class="content">
3.19.8-ckt13 -stable review patch.  If anyone has any objections, please let me know.

---8&lt;------------------------------------------------------------
<span class="from">
From: Ingo Molnar &lt;mingo@kernel.org&gt;</span>

commit 23a0d4e8fa6d3a1d7fb819f79bcc0a3739c30ba9 upstream.

Tapasweni Pathak reported that we do a kmalloc() in efi_call_phys_prolog()
on x86-64 while having interrupts disabled, which is a big no-no, as
kmalloc() can sleep.

Solve this by removing the irq disabling from the prolog/epilog calls
around EFI calls: it&#39;s unnecessary, as in this stage we are single
threaded in the boot thread, and we don&#39;t ever execute this from
interrupt contexts.

Reported-by: Tapasweni Pathak &lt;tapaswenipathak@gmail.com&gt;
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt.fleming@intel.com&gt;</span>
Cc: Luis Henriques &lt;luis.henriques@canonical.com&gt;
<span class="signed-off-by">Signed-off-by: Kamal Mostafa &lt;kamal@canonical.com&gt;</span>
---
 arch/x86/platform/efi/efi.c    |  7 +++++++
 arch/x86/platform/efi/efi_32.c | 11 +++--------
 arch/x86/platform/efi/efi_64.c |  3 ---
 3 files changed, 10 insertions(+), 11 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index c61bdec..2d447b7 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -85,12 +85,19 @@</span> <span class="p_context"> static efi_status_t __init phys_efi_set_virtual_address_map(</span>
 	efi_memory_desc_t *virtual_map)
 {
 	efi_status_t status;
<span class="p_add">+	unsigned long flags;</span>
 
 	efi_call_phys_prolog();
<span class="p_add">+</span>
<span class="p_add">+	/* Disable interrupts around EFI calls: */</span>
<span class="p_add">+	local_irq_save(flags);</span>
 	status = efi_call_phys(efi_phys.set_virtual_address_map,
 			       memory_map_size, descriptor_size,
 			       descriptor_version, virtual_map);
<span class="p_add">+	local_irq_restore(flags);</span>
<span class="p_add">+</span>
 	efi_call_phys_epilog();
<span class="p_add">+</span>
 	return status;
 }
 
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index 40e7cda..abecc6e 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -33,11 +33,10 @@</span> <span class="p_context"></span>
 
 /*
  * To make EFI call EFI runtime service in physical addressing mode we need
<span class="p_del">- * prolog/epilog before/after the invocation to disable interrupt, to</span>
<span class="p_del">- * claim EFI runtime service handler exclusively and to duplicate a memory in</span>
<span class="p_del">- * low memory space say 0 - 3G.</span>
<span class="p_add">+ * prolog/epilog before/after the invocation to claim the EFI runtime service</span>
<span class="p_add">+ * handler exclusively and to duplicate a memory mapping in low memory space,</span>
<span class="p_add">+ * say 0 - 3G.</span>
  */
<span class="p_del">-static unsigned long efi_rt_eflags;</span>
 
 void efi_sync_low_kernel_mappings(void) {}
 void __init efi_dump_pagetable(void) {}
<span class="p_chunk">@@ -61,8 +60,6 @@</span> <span class="p_context"> void __init efi_call_phys_prolog(void)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_del">-	local_irq_save(efi_rt_eflags);</span>
<span class="p_del">-</span>
 	load_cr3(initial_page_table);
 	__flush_tlb_all();
 
<span class="p_chunk">@@ -81,8 +78,6 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(void)</span>
 
 	load_cr3(swapper_pg_dir);
 	__flush_tlb_all();
<span class="p_del">-</span>
<span class="p_del">-	local_irq_restore(efi_rt_eflags);</span>
 }
 
 void __init efi_runtime_mkexec(void)
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index 17e80d8..427eb35 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -42,7 +42,6 @@</span> <span class="p_context"></span>
 #include &lt;asm/time.h&gt;
 
 static pgd_t *save_pgd __initdata;
<span class="p_del">-static unsigned long efi_flags __initdata;</span>
 
 /*
  * We allocate runtime services regions bottom-up, starting from -4G, i.e.
<span class="p_chunk">@@ -88,7 +87,6 @@</span> <span class="p_context"> void __init efi_call_phys_prolog(void)</span>
 		return;
 
 	early_code_mapping_set_exec(1);
<span class="p_del">-	local_irq_save(efi_flags);</span>
 
 	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);
 	save_pgd = kmalloc(n_pgds * sizeof(pgd_t), GFP_KERNEL);
<span class="p_chunk">@@ -116,7 +114,6 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(void)</span>
 		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), save_pgd[pgd]);
 	kfree(save_pgd);
 	__flush_tlb_all();
<span class="p_del">-	local_irq_restore(efi_flags);</span>
 	early_code_mapping_set_exec(0);
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



