
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>proc: revert /proc/&lt;pid&gt;/maps [stack:TID] annotation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    proc: revert /proc/&lt;pid&gt;/maps [stack:TID] annotation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 19, 2016, 6:02 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1453226559-17322-1-git-send-email-hannes@cmpxchg.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8064461/mbox/"
   >mbox</a>
|
   <a href="/patch/8064461/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8064461/">/patch/8064461/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 050799F1CC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Jan 2016 18:03:35 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 84EE7204FC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Jan 2016 18:03:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 727DD204E3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Jan 2016 18:03:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932775AbcASSD2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 19 Jan 2016 13:03:28 -0500
Received: from gum.cmpxchg.org ([85.214.110.215]:53586 &quot;EHLO gum.cmpxchg.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932414AbcASSDW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 19 Jan 2016 13:03:22 -0500
From: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Shaohua Li &lt;shli@fb.com&gt;,
	Siddhesh Poyarekar &lt;siddhesh.poyarekar@gmail.com&gt;,
	linux-mm@kvack.org, linux-kernel@vger.kernel.org, kernel-team@fb.com
Subject: [PATCH] proc: revert /proc/&lt;pid&gt;/maps [stack:TID] annotation
Date: Tue, 19 Jan 2016 13:02:39 -0500
Message-Id: &lt;1453226559-17322-1-git-send-email-hannes@cmpxchg.org&gt;
X-Mailer: git-send-email 2.7.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a> - Jan. 19, 2016, 6:02 p.m.</div>
<pre class="content">
b764375 (&quot;procfs: mark thread stack correctly in proc/&lt;pid&gt;/maps&quot;)
added [stack:TID] annotation to /proc/&lt;pid&gt;/maps. Finding the task of
a stack VMA requires walking the entire thread list, turning this into
quadratic behavior: a thousand threads means a thousand stacks, so the
rendering of /proc/&lt;pid&gt;/maps needs to look at a million threads. The
cost is not in proportion to the usefulness as described in the patch.

Drop the [stack:TID] annotation to make /proc/&lt;pid&gt;/maps (and
/proc/&lt;pid&gt;/numa_maps) usable again for higher thread counts.

The [stack] annotation inside /proc/&lt;pid&gt;/task/&lt;tid&gt;/maps is retained,
as identifying the stack VMA there is an O(1) operation.
<span class="signed-off-by">
Signed-off-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
---
 Documentation/filesystems/proc.txt |  9 ++----
 fs/proc/task_mmu.c                 | 66 +++++++++++++-------------------------
 fs/proc/task_nommu.c               | 48 +++++++++++----------------
 include/linux/mm.h                 |  3 +-
 mm/util.c                          | 27 +---------------
 5 files changed, 47 insertions(+), 106 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Jan. 19, 2016, 10:14 p.m.</div>
<pre class="content">
On Tue, 19 Jan 2016 13:02:39 -0500 Johannes Weiner &lt;hannes@cmpxchg.org&gt; wrote:
<span class="quote">
&gt; b764375 (&quot;procfs: mark thread stack correctly in proc/&lt;pid&gt;/maps&quot;)</span>
<span class="quote">&gt; added [stack:TID] annotation to /proc/&lt;pid&gt;/maps. Finding the task of</span>
<span class="quote">&gt; a stack VMA requires walking the entire thread list, turning this into</span>
<span class="quote">&gt; quadratic behavior: a thousand threads means a thousand stacks, so the</span>
<span class="quote">&gt; rendering of /proc/&lt;pid&gt;/maps needs to look at a million threads. The</span>
<span class="quote">&gt; cost is not in proportion to the usefulness as described in the patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Drop the [stack:TID] annotation to make /proc/&lt;pid&gt;/maps (and</span>
<span class="quote">&gt; /proc/&lt;pid&gt;/numa_maps) usable again for higher thread counts.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The [stack] annotation inside /proc/&lt;pid&gt;/task/&lt;tid&gt;/maps is retained,</span>
<span class="quote">&gt; as identifying the stack VMA there is an O(1) operation.</span>

Four years ago, ouch.

Any thoughts on the obvious back-compatibility concerns?  ie, why did
Siddhesh implement this in the first place?  My bad for not ensuring
that the changelog told us this.

https://lkml.org/lkml/2012/1/14/25 has more info: 

: Memory mmaped by glibc for a thread stack currently shows up as a
: simple anonymous map, which makes it difficult to differentiate between
: memory usage of the thread on stack and other dynamic allocation. 
: Since glibc already uses MAP_STACK to request this mapping, the
: attached patch uses this flag to add additional VM_STACK_FLAGS to the
: resulting vma so that the mapping is treated as a stack and not any
: regular anonymous mapping.  Also, one may use vm_flags to decide if a
: vma is a stack.

But even that doesn&#39;t really tell us what the actual *value* of the
patch is to end-users.


I note that this patch is a partial revert - the smaps and numa_maps
parts of b764375 remain in place.  What&#39;s up with that?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Jan. 19, 2016, 11:30 p.m.</div>
<pre class="content">
On Tue, Jan 19, 2016 at 02:14:30PM -0800, Andrew Morton wrote:
<span class="quote">&gt; On Tue, 19 Jan 2016 13:02:39 -0500 Johannes Weiner &lt;hannes@cmpxchg.org&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; b764375 (&quot;procfs: mark thread stack correctly in proc/&lt;pid&gt;/maps&quot;)</span>
<span class="quote">&gt; &gt; added [stack:TID] annotation to /proc/&lt;pid&gt;/maps. Finding the task of</span>
<span class="quote">&gt; &gt; a stack VMA requires walking the entire thread list, turning this into</span>
<span class="quote">&gt; &gt; quadratic behavior: a thousand threads means a thousand stacks, so the</span>
<span class="quote">&gt; &gt; rendering of /proc/&lt;pid&gt;/maps needs to look at a million threads. The</span>
<span class="quote">&gt; &gt; cost is not in proportion to the usefulness as described in the patch.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Drop the [stack:TID] annotation to make /proc/&lt;pid&gt;/maps (and</span>
<span class="quote">&gt; &gt; /proc/&lt;pid&gt;/numa_maps) usable again for higher thread counts.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The [stack] annotation inside /proc/&lt;pid&gt;/task/&lt;tid&gt;/maps is retained,</span>
<span class="quote">&gt; &gt; as identifying the stack VMA there is an O(1) operation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Four years ago, ouch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Any thoughts on the obvious back-compatibility concerns?  ie, why did</span>
<span class="quote">&gt; Siddhesh implement this in the first place?  My bad for not ensuring</span>
<span class="quote">&gt; that the changelog told us this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://lkml.org/lkml/2012/1/14/25 has more info: </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; : Memory mmaped by glibc for a thread stack currently shows up as a</span>
<span class="quote">&gt; : simple anonymous map, which makes it difficult to differentiate between</span>
<span class="quote">&gt; : memory usage of the thread on stack and other dynamic allocation. </span>
<span class="quote">&gt; : Since glibc already uses MAP_STACK to request this mapping, the</span>
<span class="quote">&gt; : attached patch uses this flag to add additional VM_STACK_FLAGS to the</span>
<span class="quote">&gt; : resulting vma so that the mapping is treated as a stack and not any</span>
<span class="quote">&gt; : regular anonymous mapping.  Also, one may use vm_flags to decide if a</span>
<span class="quote">&gt; : vma is a stack.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But even that doesn&#39;t really tell us what the actual *value* of the</span>
<span class="quote">&gt; patch is to end-users.</span>

I doubt it can be very useful as it&#39;s unreliable: if two stacks are
allocated end-to-end (which is not good idea, but still) it can only
report [stack:XXX] for the first one as they are merged into one VMA.
Any other anon VMA merged with the stack will be also claimed as stack,
which is not always correct.

I think report the VMA as anon is the best we can know about it,
everything else just rather expensive guesses.
<span class="quote">
&gt; I note that this patch is a partial revert - the smaps and numa_maps</span>
<span class="quote">&gt; parts of b764375 remain in place.  What&#39;s up with that?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a> - Jan. 19, 2016, 11:38 p.m.</div>
<pre class="content">
On Tue, Jan 19, 2016 at 02:14:30PM -0800, Andrew Morton wrote:
<span class="quote">&gt; On Tue, 19 Jan 2016 13:02:39 -0500 Johannes Weiner &lt;hannes@cmpxchg.org&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; b764375 (&quot;procfs: mark thread stack correctly in proc/&lt;pid&gt;/maps&quot;)</span>
<span class="quote">&gt; &gt; added [stack:TID] annotation to /proc/&lt;pid&gt;/maps. Finding the task of</span>
<span class="quote">&gt; &gt; a stack VMA requires walking the entire thread list, turning this into</span>
<span class="quote">&gt; &gt; quadratic behavior: a thousand threads means a thousand stacks, so the</span>
<span class="quote">&gt; &gt; rendering of /proc/&lt;pid&gt;/maps needs to look at a million threads. The</span>
<span class="quote">&gt; &gt; cost is not in proportion to the usefulness as described in the patch.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Drop the [stack:TID] annotation to make /proc/&lt;pid&gt;/maps (and</span>
<span class="quote">&gt; &gt; /proc/&lt;pid&gt;/numa_maps) usable again for higher thread counts.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The [stack] annotation inside /proc/&lt;pid&gt;/task/&lt;tid&gt;/maps is retained,</span>
<span class="quote">&gt; &gt; as identifying the stack VMA there is an O(1) operation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Four years ago, ouch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Any thoughts on the obvious back-compatibility concerns?  ie, why did</span>
<span class="quote">&gt; Siddhesh implement this in the first place?  My bad for not ensuring</span>
<span class="quote">&gt; that the changelog told us this.</span>

I thought about storing the TID of the thread using the VMA as the
stack directly inside vm_area_struct; maybe using vm_private_data?
However, that&#39;s a bit of work and ugliness that I wouldn&#39;t want to
commit to until we know that people ended up using this in practice.
<span class="quote">
&gt; I note that this patch is a partial revert - the smaps and numa_maps</span>
<span class="quote">&gt; parts of b764375 remain in place.  What&#39;s up with that?</span>

I left the stack annotations in the thread-specific files because that
sounds useful and is cheap enough - we only have to test the vma range
against that thread&#39;s stack pointer. The last changelog paragraph says
that for maps, I&#39;ll update it to include smaps and numa_maps.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=49881">Siddhesh Poyarekar</a> - Jan. 20, 2016, 3:17 a.m.</div>
<pre class="content">
On 20 January 2016 at 03:44, Andrew Morton &lt;akpm@linux-foundation.org&gt; wrote:
<span class="quote">&gt; Any thoughts on the obvious back-compatibility concerns?  ie, why did</span>
<span class="quote">&gt; Siddhesh implement this in the first place?  My bad for not ensuring</span>
<span class="quote">&gt; that the changelog told us this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; https://lkml.org/lkml/2012/1/14/25 has more info:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; : Memory mmaped by glibc for a thread stack currently shows up as a</span>
<span class="quote">&gt; : simple anonymous map, which makes it difficult to differentiate between</span>
<span class="quote">&gt; : memory usage of the thread on stack and other dynamic allocation.</span>
<span class="quote">&gt; : Since glibc already uses MAP_STACK to request this mapping, the</span>
<span class="quote">&gt; : attached patch uses this flag to add additional VM_STACK_FLAGS to the</span>
<span class="quote">&gt; : resulting vma so that the mapping is treated as a stack and not any</span>
<span class="quote">&gt; : regular anonymous mapping.  Also, one may use vm_flags to decide if a</span>
<span class="quote">&gt; : vma is a stack.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But even that doesn&#39;t really tell us what the actual *value* of the</span>
<span class="quote">&gt; patch is to end-users.</span>

The end users needed a way to identify thread stacks programmatically
and there wasn&#39;t a way to do that.  I&#39;m afraid I no longer remember
(or have access to the resources that would aid my memory since I
changed employers) the details of their requirement.  However, I did
do this on my own time because I thought it was an interesting project
for me and nobody really gave any feedback then as to its utility, so
as far as I am concerned you could roll back the main thread maps
information since the information is available in the thread-specific
files.

Siddhesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=49881">Siddhesh Poyarekar</a> - Jan. 20, 2016, 3:21 a.m.</div>
<pre class="content">
On 20 January 2016 at 05:00, Kirill A. Shutemov &lt;kirill@shutemov.name&gt; wrote:
<span class="quote">&gt; I doubt it can be very useful as it&#39;s unreliable: if two stacks are</span>
<span class="quote">&gt; allocated end-to-end (which is not good idea, but still) it can only</span>
<span class="quote">&gt; report [stack:XXX] for the first one as they are merged into one VMA.</span>
<span class="quote">&gt; Any other anon VMA merged with the stack will be also claimed as stack,</span>
<span class="quote">&gt; which is not always correct.</span>

It is quite uncommon because you will always have an intervening guard
page that separates the two stack vmas.  To have the vmas merge, you
will have to disable guard pages which is an even worse idea.

A more relevant argument about its unreliability is context changes
due to makecontext/setcontext, which could momentarily show the heap
or some other arbitrary vma as a stack.

Siddhesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Jan. 20, 2016, 5:27 a.m.</div>
<pre class="content">
On Wed, 20 Jan 2016 08:47:39 +0530 Siddhesh Poyarekar &lt;siddhesh.poyarekar@gmail.com&gt; wrote:
<span class="quote">
&gt; On 20 January 2016 at 03:44, Andrew Morton &lt;akpm@linux-foundation.org&gt; wrote:</span>
<span class="quote">&gt; &gt; Any thoughts on the obvious back-compatibility concerns?  ie, why did</span>
<span class="quote">&gt; &gt; Siddhesh implement this in the first place?  My bad for not ensuring</span>
<span class="quote">&gt; &gt; that the changelog told us this.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; https://lkml.org/lkml/2012/1/14/25 has more info:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; : Memory mmaped by glibc for a thread stack currently shows up as a</span>
<span class="quote">&gt; &gt; : simple anonymous map, which makes it difficult to differentiate between</span>
<span class="quote">&gt; &gt; : memory usage of the thread on stack and other dynamic allocation.</span>
<span class="quote">&gt; &gt; : Since glibc already uses MAP_STACK to request this mapping, the</span>
<span class="quote">&gt; &gt; : attached patch uses this flag to add additional VM_STACK_FLAGS to the</span>
<span class="quote">&gt; &gt; : resulting vma so that the mapping is treated as a stack and not any</span>
<span class="quote">&gt; &gt; : regular anonymous mapping.  Also, one may use vm_flags to decide if a</span>
<span class="quote">&gt; &gt; : vma is a stack.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; But even that doesn&#39;t really tell us what the actual *value* of the</span>
<span class="quote">&gt; &gt; patch is to end-users.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The end users needed a way to identify thread stacks programmatically</span>
<span class="quote">&gt; and there wasn&#39;t a way to do that.  I&#39;m afraid I no longer remember</span>
<span class="quote">&gt; (or have access to the resources that would aid my memory since I</span>
<span class="quote">&gt; changed employers) the details of their requirement.  However, I did</span>
<span class="quote">&gt; do this on my own time because I thought it was an interesting project</span>
<span class="quote">&gt; for me and nobody really gave any feedback then as to its utility, so</span>
<span class="quote">&gt; as far as I am concerned you could roll back the main thread maps</span>
<span class="quote">&gt; information since the information is available in the thread-specific</span>
<span class="quote">&gt; files.</span>

OK, thanks.  I was thinking of queueing this for 4.6 to let it bake in
-next for a cycle, but quadratic performance is bad and nobody will
test such an obscure feature in -next so maybe I&#39;ll jam it into 4.5 and we
wait and see.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/filesystems/proc.txt b/Documentation/filesystems/proc.txt</span>
<span class="p_header">index e95aa1c..4e95796 100644</span>
<span class="p_header">--- a/Documentation/filesystems/proc.txt</span>
<span class="p_header">+++ b/Documentation/filesystems/proc.txt</span>
<span class="p_chunk">@@ -356,7 +356,7 @@</span> <span class="p_context"> address           perms offset  dev   inode      pathname</span>
 a7cb1000-a7cb2000 ---p 00000000 00:00 0
 a7cb2000-a7eb2000 rw-p 00000000 00:00 0
 a7eb2000-a7eb3000 ---p 00000000 00:00 0
<span class="p_del">-a7eb3000-a7ed5000 rw-p 00000000 00:00 0          [stack:1001]</span>
<span class="p_add">+a7eb3000-a7ed5000 rw-p 00000000 00:00 0</span>
 a7ed5000-a8008000 r-xp 00000000 03:00 4222       /lib/libc.so.6
 a8008000-a800a000 r--p 00133000 03:00 4222       /lib/libc.so.6
 a800a000-a800b000 rw-p 00135000 03:00 4222       /lib/libc.so.6
<span class="p_chunk">@@ -388,7 +388,6 @@</span> <span class="p_context"> is not associated with a file:</span>
 
  [heap]                   = the heap of the program
  [stack]                  = the stack of the main process
<span class="p_del">- [stack:1001]             = the stack of the thread with tid 1001</span>
  [vdso]                   = the &quot;virtual dynamic shared object&quot;,
                             the kernel system call handler
 
<span class="p_chunk">@@ -396,10 +395,8 @@</span> <span class="p_context"> is not associated with a file:</span>
 
 The /proc/PID/task/TID/maps is a view of the virtual memory from the viewpoint
 of the individual tasks of a process. In this file you will see a mapping marked
<span class="p_del">-as [stack] if that task sees it as a stack. This is a key difference from the</span>
<span class="p_del">-content of /proc/PID/maps, where you will see all mappings that are being used</span>
<span class="p_del">-as stack by all of those tasks. Hence, for the example above, the task-level</span>
<span class="p_del">-map, i.e. /proc/PID/task/TID/maps for thread 1001 will look like this:</span>
<span class="p_add">+as [stack] if that task sees it as a stack. Hence, for the example above, the</span>
<span class="p_add">+task-level map, i.e. /proc/PID/task/TID/maps for thread 1001 will look like this:</span>
 
 08048000-08049000 r-xp 00000000 03:00 8312       /opt/test
 08049000-0804a000 rw-p 00001000 03:00 8312       /opt/test
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 65a1b6c..81aa553 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -259,23 +259,29 @@</span> <span class="p_context"> static int do_maps_open(struct inode *inode, struct file *file,</span>
 				sizeof(struct proc_maps_private));
 }
 
<span class="p_del">-static pid_t pid_of_stack(struct proc_maps_private *priv,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool is_pid)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Indicate if the VMA is a stack for the given task; for</span>
<span class="p_add">+ * /proc/PID/maps that is the stack of the main task.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int is_stack(struct proc_maps_private *priv,</span>
<span class="p_add">+		    struct vm_area_struct *vma, int is_pid)</span>
 {
<span class="p_del">-	struct inode *inode = priv-&gt;inode;</span>
<span class="p_del">-	struct task_struct *task;</span>
<span class="p_del">-	pid_t ret = 0;</span>
<span class="p_add">+	int stack = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_pid) {</span>
<span class="p_add">+		stack = vma-&gt;vm_start &lt;= vma-&gt;vm_mm-&gt;start_stack &amp;&amp;</span>
<span class="p_add">+			vma-&gt;vm_end &gt;= vma-&gt;vm_mm-&gt;start_stack;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct inode *inode = priv-&gt;inode;</span>
<span class="p_add">+		struct task_struct *task;</span>
 
<span class="p_del">-	rcu_read_lock();</span>
<span class="p_del">-	task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
<span class="p_del">-	if (task) {</span>
<span class="p_del">-		task = task_of_stack(task, vma, is_pid);</span>
<span class="p_add">+		rcu_read_lock();</span>
<span class="p_add">+		task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
 		if (task)
<span class="p_del">-			ret = task_pid_nr_ns(task, inode-&gt;i_sb-&gt;s_fs_info);</span>
<span class="p_add">+			stack = vma_is_stack_for_task(vma, task);</span>
<span class="p_add">+		rcu_read_unlock();</span>
 	}
<span class="p_del">-	rcu_read_unlock();</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return stack;</span>
 }
 
 static void
<span class="p_chunk">@@ -335,8 +341,6 @@</span> <span class="p_context"> show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)</span>
 
 	name = arch_vma_name(vma);
 	if (!name) {
<span class="p_del">-		pid_t tid;</span>
<span class="p_del">-</span>
 		if (!mm) {
 			name = &quot;[vdso]&quot;;
 			goto done;
<span class="p_chunk">@@ -348,21 +352,8 @@</span> <span class="p_context"> show_map_vma(struct seq_file *m, struct vm_area_struct *vma, int is_pid)</span>
 			goto done;
 		}
 
<span class="p_del">-		tid = pid_of_stack(priv, vma, is_pid);</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack)) {</span>
<span class="p_del">-				name = &quot;[stack]&quot;;</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				/* Thread stack in /proc/PID/maps */</span>
<span class="p_del">-				seq_pad(m, &#39; &#39;);</span>
<span class="p_del">-				seq_printf(m, &quot;[stack:%d]&quot;, tid);</span>
<span class="p_del">-			}</span>
<span class="p_del">-		}</span>
<span class="p_add">+		if (is_stack(priv, vma, is_pid))</span>
<span class="p_add">+			name = &quot;[stack]&quot;;</span>
 	}
 
 done:
<span class="p_chunk">@@ -1613,19 +1604,8 @@</span> <span class="p_context"> static int show_numa_map(struct seq_file *m, void *v, int is_pid)</span>
 		seq_file_path(m, file, &quot;\n\t= &quot;);
 	} else if (vma-&gt;vm_start &lt;= mm-&gt;brk &amp;&amp; vma-&gt;vm_end &gt;= mm-&gt;start_brk) {
 		seq_puts(m, &quot; heap&quot;);
<span class="p_del">-	} else {</span>
<span class="p_del">-		pid_t tid = pid_of_stack(proc_priv, vma, is_pid);</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack))</span>
<span class="p_del">-				seq_puts(m, &quot; stack&quot;);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				seq_printf(m, &quot; stack:%d&quot;, tid);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	} else if (is_stack(proc_priv, vma, is_pid)) {</span>
<span class="p_add">+		seq_puts(m, &quot; stack&quot;);</span>
 	}
 
 	if (is_vm_hugetlb_page(vma))
<span class="p_header">diff --git a/fs/proc/task_nommu.c b/fs/proc/task_nommu.c</span>
<span class="p_header">index e0d64c9..60ab72e 100644</span>
<span class="p_header">--- a/fs/proc/task_nommu.c</span>
<span class="p_header">+++ b/fs/proc/task_nommu.c</span>
<span class="p_chunk">@@ -123,23 +123,25 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 	return size;
 }
 
<span class="p_del">-static pid_t pid_of_stack(struct proc_maps_private *priv,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool is_pid)</span>
<span class="p_add">+static int is_stack(struct proc_maps_private *priv,</span>
<span class="p_add">+		    struct vm_area_struct *vma, int is_pid)</span>
 {
<span class="p_del">-	struct inode *inode = priv-&gt;inode;</span>
<span class="p_del">-	struct task_struct *task;</span>
<span class="p_del">-	pid_t ret = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	rcu_read_lock();</span>
<span class="p_del">-	task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
<span class="p_del">-	if (task) {</span>
<span class="p_del">-		task = task_of_stack(task, vma, is_pid);</span>
<span class="p_add">+	int stack = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_pid) {</span>
<span class="p_add">+		stack = vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_add">+			vma-&gt;vm_end &gt;= mm-&gt;start_stack;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct inode *inode = priv-&gt;inode;</span>
<span class="p_add">+		struct task_struct *task;</span>
<span class="p_add">+</span>
<span class="p_add">+		rcu_read_lock();</span>
<span class="p_add">+		task = pid_task(proc_pid(inode), PIDTYPE_PID);</span>
 		if (task)
<span class="p_del">-			ret = task_pid_nr_ns(task, inode-&gt;i_sb-&gt;s_fs_info);</span>
<span class="p_add">+			stack = vma_is_stack_for_task(vma, task);</span>
<span class="p_add">+		rcu_read_unlock();</span>
 	}
<span class="p_del">-	rcu_read_unlock();</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return stack;</span>
 }
 
 /*
<span class="p_chunk">@@ -181,21 +183,9 @@</span> <span class="p_context"> static int nommu_vma_show(struct seq_file *m, struct vm_area_struct *vma,</span>
 	if (file) {
 		seq_pad(m, &#39; &#39;);
 		seq_file_path(m, file, &quot;&quot;);
<span class="p_del">-	} else if (mm) {</span>
<span class="p_del">-		pid_t tid = pid_of_stack(priv, vma, is_pid);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (tid != 0) {</span>
<span class="p_del">-			seq_pad(m, &#39; &#39;);</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Thread stack in /proc/PID/task/TID/maps or</span>
<span class="p_del">-			 * the main process stack.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!is_pid || (vma-&gt;vm_start &lt;= mm-&gt;start_stack &amp;&amp;</span>
<span class="p_del">-			    vma-&gt;vm_end &gt;= mm-&gt;start_stack))</span>
<span class="p_del">-				seq_printf(m, &quot;[stack]&quot;);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				seq_printf(m, &quot;[stack:%d]&quot;, tid);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	} else if (mm &amp;&amp; is_stack(priv, vma, is_pid)) {</span>
<span class="p_add">+		seq_pad(m, &#39; &#39;);</span>
<span class="p_add">+		seq_printf(m, &quot;[stack]&quot;);</span>
 	}
 
 	seq_putc(m, &#39;\n&#39;);
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 7286d5b..0cbed33 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1343,8 +1343,7 @@</span> <span class="p_context"> static inline int stack_guard_page_end(struct vm_area_struct *vma,</span>
 		!vma_growsup(vma-&gt;vm_next, addr);
 }
 
<span class="p_del">-extern struct task_struct *task_of_stack(struct task_struct *task,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool in_group);</span>
<span class="p_add">+int vma_is_stack_for_task(struct vm_area_struct *vma, struct task_struct *t);</span>
 
 extern unsigned long move_page_tables(struct vm_area_struct *vma,
 		unsigned long old_addr, struct vm_area_struct *new_vma,
<span class="p_header">diff --git a/mm/util.c b/mm/util.c</span>
<span class="p_header">index bafd4c5..4f841e5 100644</span>
<span class="p_header">--- a/mm/util.c</span>
<span class="p_header">+++ b/mm/util.c</span>
<span class="p_chunk">@@ -260,36 +260,11 @@</span> <span class="p_context"> void __vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 }
 
 /* Check if the vma is being used as a stack by this task */
<span class="p_del">-static int vm_is_stack_for_task(struct task_struct *t,</span>
<span class="p_del">-				struct vm_area_struct *vma)</span>
<span class="p_add">+int vma_is_stack_for_task(struct vm_area_struct *vma, struct task_struct *t)</span>
 {
 	return (vma-&gt;vm_start &lt;= KSTK_ESP(t) &amp;&amp; vma-&gt;vm_end &gt;= KSTK_ESP(t));
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Check if the vma is being used as a stack.</span>
<span class="p_del">- * If is_group is non-zero, check in the entire thread group or else</span>
<span class="p_del">- * just check in the current task. Returns the task_struct of the task</span>
<span class="p_del">- * that the vma is stack for. Must be called under rcu_read_lock().</span>
<span class="p_del">- */</span>
<span class="p_del">-struct task_struct *task_of_stack(struct task_struct *task,</span>
<span class="p_del">-				struct vm_area_struct *vma, bool in_group)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (vm_is_stack_for_task(task, vma))</span>
<span class="p_del">-		return task;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (in_group) {</span>
<span class="p_del">-		struct task_struct *t;</span>
<span class="p_del">-</span>
<span class="p_del">-		for_each_thread(task, t) {</span>
<span class="p_del">-			if (vm_is_stack_for_task(t, vma))</span>
<span class="p_del">-				return t;</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return NULL;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #if defined(CONFIG_MMU) &amp;&amp; !defined(HAVE_ARCH_PICK_MMAP_LAYOUT)
 void arch_pick_mmap_layout(struct mm_struct *mm)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



