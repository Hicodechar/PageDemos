
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[50/67] swiotlb: refactor coherent buffer allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [50/67] swiotlb: refactor coherent buffer allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 29, 2017, 8:18 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171229081911.2802-51-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10136459/mbox/"
   >mbox</a>
|
   <a href="/patch/10136459/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10136459/">/patch/10136459/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BF88E60318 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Dec 2017 08:23:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ADB652D92B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Dec 2017 08:23:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A22272DEEE; Fri, 29 Dec 2017 08:23:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0491F2D92B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Dec 2017 08:23:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932922AbdL2IXS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 29 Dec 2017 03:23:18 -0500
Received: from bombadil.infradead.org ([65.50.211.133]:50934 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932252AbdL2IXM (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 29 Dec 2017 03:23:12 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=tNqLEm8pT0mbKh+Ndi8Tch49tf+ODOlpzHPx2fUwYcg=;
	b=dbfEtsLDdbptBDl3e8npMFWDf
	xoGYwDJqEjKyo0GjkPAIwzVdEbnfdByEfR1/Ar1c+RmJoOygjhAFmab6rZlGmFV3zf57JWQusDFLf
	2EuX3TzmaRu3NX3/8bkqkn5/OI/gHpBVlVVky1EaYure+ImcOKwHnbig469sC8uaq/TMAWo7z83Uc
	fpkcBBynRpt5WbNIgxdkRE0r+IT3/joAkIHy8Fhf1epH+EjVQHajJCxVMJfeCUjjLASoSzc61b1wb
	cZYesobVlUpc+NrUeoPDNNVNVNmcKM5r4TJw1tMI5axJ7F+6u/LnEF2z67hAimOBRGSLaVSjQv/jt
	ugPwWBZRQ==;
Received: from 77.117.237.29.wireless.dyn.drei.com ([77.117.237.29]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.89 #1 (Red Hat Linux))
	id 1eUpwM-0003IU-VO; Fri, 29 Dec 2017 08:22:55 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: iommu@lists.linux-foundation.org
Cc: linux-alpha@vger.kernel.org, linux-snps-arc@lists.infradead.org,
	linux-arm-kernel@lists.infradead.org,
	adi-buildroot-devel@lists.sourceforge.net,
	linux-c6x-dev@linux-c6x.org, linux-cris-kernel@axis.com,
	linux-hexagon@vger.kernel.org, linux-ia64@vger.kernel.org,
	linux-m68k@lists.linux-m68k.org, linux-metag@vger.kernel.org,
	Michal Simek &lt;monstr@monstr.eu&gt;, linux-mips@linux-mips.org,
	linux-parisc@vger.kernel.org, linuxppc-dev@lists.ozlabs.org,
	patches@groups.riscv.org, linux-s390@vger.kernel.org,
	linux-sh@vger.kernel.org, sparclinux@vger.kernel.org,
	Guan Xuetao &lt;gxt@mprc.pku.edu.cn&gt;, x86@kernel.org,
	linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 50/67] swiotlb: refactor coherent buffer allocation
Date: Fri, 29 Dec 2017 09:18:54 +0100
Message-Id: &lt;20171229081911.2802-51-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20171229081911.2802-1-hch@lst.de&gt;
References: &lt;20171229081911.2802-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Dec. 29, 2017, 8:18 a.m.</div>
<pre class="content">
Factor out a new swiotlb_alloc_buffer helper that allocates DMA coherent
memory from the swiotlb bounce buffer.

This allows to simplify the swiotlb_alloc implemenation that uses
dma_direct_alloc to try to allocate a reachable buffer first.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 lib/swiotlb.c | 100 ++++++++++++++++++++++++++++++----------------------------
 1 file changed, 51 insertions(+), 49 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index adb4dd0091fa..905eea6353a3 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -709,67 +709,69 @@</span> <span class="p_context"> void swiotlb_tbl_sync_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_tbl_sync_single);
 
<span class="p_add">+static void *</span>
<span class="p_add">+swiotlb_alloc_buffer(struct device *dev, size_t size, dma_addr_t *dma_handle)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t phys_addr;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (swiotlb_force == SWIOTLB_NO_FORCE)</span>
<span class="p_add">+		goto out_warn;</span>
<span class="p_add">+</span>
<span class="p_add">+	phys_addr = swiotlb_tbl_map_single(dev,</span>
<span class="p_add">+			swiotlb_phys_to_dma(dev, io_tlb_start),</span>
<span class="p_add">+			0, size, DMA_FROM_DEVICE, 0);</span>
<span class="p_add">+	if (phys_addr == SWIOTLB_MAP_ERROR)</span>
<span class="p_add">+		goto out_warn;</span>
<span class="p_add">+</span>
<span class="p_add">+	*dma_handle = swiotlb_phys_to_dma(dev, phys_addr);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Confirm address can be DMA&#39;d by device */</span>
<span class="p_add">+	if (*dma_handle + size - 1 &gt; dev-&gt;coherent_dma_mask)</span>
<span class="p_add">+		goto out_unmap;</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(phys_to_virt(phys_addr), 0, size);</span>
<span class="p_add">+	return phys_to_virt(phys_addr);</span>
<span class="p_add">+</span>
<span class="p_add">+out_unmap:</span>
<span class="p_add">+	dev_warn(dev, &quot;hwdev DMA mask = 0x%016Lx, dev_addr = 0x%016Lx\n&quot;,</span>
<span class="p_add">+		(unsigned long long)dev-&gt;coherent_dma_mask,</span>
<span class="p_add">+		(unsigned long long)*dma_handle);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * DMA_TO_DEVICE to avoid memcpy in unmap_single.</span>
<span class="p_add">+	 * DMA_ATTR_SKIP_CPU_SYNC is optional.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	swiotlb_tbl_unmap_single(dev, phys_addr, size, DMA_TO_DEVICE,</span>
<span class="p_add">+			DMA_ATTR_SKIP_CPU_SYNC);</span>
<span class="p_add">+out_warn:</span>
<span class="p_add">+	dev_warn(dev,</span>
<span class="p_add">+		&quot;swiotlb: coherent allocation failed, size=%zu\n&quot;, size);</span>
<span class="p_add">+	dump_stack();</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void *
 swiotlb_alloc_coherent(struct device *hwdev, size_t size,
 		       dma_addr_t *dma_handle, gfp_t flags)
 {
<span class="p_del">-	dma_addr_t dev_addr;</span>
<span class="p_del">-	void *ret;</span>
 	int order = get_order(size);
<span class="p_add">+	void *ret;</span>
 
 	ret = (void *)__get_free_pages(flags, order);
 	if (ret) {
<span class="p_del">-		dev_addr = swiotlb_virt_to_bus(hwdev, ret);</span>
<span class="p_del">-		if (dev_addr + size - 1 &gt; hwdev-&gt;coherent_dma_mask) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * The allocated memory isn&#39;t reachable by the device.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			free_pages((unsigned long) ret, order);</span>
<span class="p_del">-			ret = NULL;</span>
<span class="p_add">+		*dma_handle = swiotlb_virt_to_bus(hwdev, ret);</span>
<span class="p_add">+		if (*dma_handle  + size - 1 &lt;= hwdev-&gt;coherent_dma_mask) {</span>
<span class="p_add">+			memset(ret, 0, size);</span>
<span class="p_add">+			return ret;</span>
 		}
<span class="p_del">-	}</span>
<span class="p_del">-	if (!ret) {</span>
<span class="p_add">+</span>
 		/*
<span class="p_del">-		 * We are either out of memory or the device can&#39;t DMA to</span>
<span class="p_del">-		 * GFP_DMA memory; fall back on map_single(), which</span>
<span class="p_del">-		 * will grab memory from the lowest available address range.</span>
<span class="p_add">+		 * The allocated memory isn&#39;t reachable by the device.</span>
 		 */
<span class="p_del">-		phys_addr_t paddr = map_single(hwdev, 0, size,</span>
<span class="p_del">-					       DMA_FROM_DEVICE, 0);</span>
<span class="p_del">-		if (paddr == SWIOTLB_MAP_ERROR)</span>
<span class="p_del">-			goto err_warn;</span>
<span class="p_del">-</span>
<span class="p_del">-		ret = phys_to_virt(paddr);</span>
<span class="p_del">-		dev_addr = swiotlb_phys_to_dma(hwdev, paddr);</span>
<span class="p_del">-</span>
<span class="p_del">-		/* Confirm address can be DMA&#39;d by device */</span>
<span class="p_del">-		if (dev_addr + size - 1 &gt; hwdev-&gt;coherent_dma_mask) {</span>
<span class="p_del">-			printk(&quot;hwdev DMA mask = 0x%016Lx, dev_addr = 0x%016Lx\n&quot;,</span>
<span class="p_del">-			       (unsigned long long)hwdev-&gt;coherent_dma_mask,</span>
<span class="p_del">-			       (unsigned long long)dev_addr);</span>
<span class="p_del">-</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * DMA_TO_DEVICE to avoid memcpy in unmap_single.</span>
<span class="p_del">-			 * The DMA_ATTR_SKIP_CPU_SYNC is optional.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			swiotlb_tbl_unmap_single(hwdev, paddr,</span>
<span class="p_del">-						 size, DMA_TO_DEVICE,</span>
<span class="p_del">-						 DMA_ATTR_SKIP_CPU_SYNC);</span>
<span class="p_del">-			goto err_warn;</span>
<span class="p_del">-		}</span>
<span class="p_add">+		free_pages((unsigned long) ret, order);</span>
 	}
 
<span class="p_del">-	*dma_handle = dev_addr;</span>
<span class="p_del">-	memset(ret, 0, size);</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-</span>
<span class="p_del">-err_warn:</span>
<span class="p_del">-	pr_warn(&quot;swiotlb: coherent allocation failed for device %s size=%zu\n&quot;,</span>
<span class="p_del">-		dev_name(hwdev), size);</span>
<span class="p_del">-	dump_stack();</span>
<span class="p_del">-</span>
<span class="p_del">-	return NULL;</span>
<span class="p_add">+	return swiotlb_alloc_buffer(hwdev, size, dma_handle);</span>
 }
 EXPORT_SYMBOL(swiotlb_alloc_coherent);
 
<span class="p_chunk">@@ -1105,7 +1107,7 @@</span> <span class="p_context"> void *swiotlb_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
 
 	vaddr = dma_direct_alloc(dev, size, dma_handle, gfp, attrs);
 	if (!vaddr)
<span class="p_del">-		vaddr = swiotlb_alloc_coherent(dev, size, dma_handle, gfp);</span>
<span class="p_add">+		vaddr = swiotlb_alloc_buffer(dev, size, dma_handle);</span>
 	return vaddr;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



