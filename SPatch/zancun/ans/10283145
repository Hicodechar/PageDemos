
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[13/14] dma-direct: handle force decryption for dma coherent buffers in common code - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [13/14] dma-direct: handle force decryption for dma coherent buffers in common code</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 14, 2018, 5:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180314175213.20256-14-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10283145/mbox/"
   >mbox</a>
|
   <a href="/patch/10283145/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10283145/">/patch/10283145/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	071CE602C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B022D28533
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A4E4628538; Wed, 14 Mar 2018 17:53:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E7C6D28533
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752488AbeCNRxV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Mar 2018 13:53:21 -0400
Received: from bombadil.infradead.org ([198.137.202.133]:55464 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751379AbeCNRxR (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Mar 2018 13:53:17 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=Xke2McJVPPSixGOc+ysDStoP6kOa6SzkVPxw+5zuznU=;
	b=T/gofj7DHPOj+pWQ8ui28TpxN
	7V6BITh5qsSe/5NOWhrl2tbreTWkHe+RB0584bLZbPCQ1Pq3paqKo5AYPLLRPWy8RDwhrk7ZPnlEc
	Qyx+DchjqB+JZwwov4ZKC5swuFF3OcPktMvDUNXBfm4NZsMmPee4jHZBnYSOjkRXQ9DkedPktkrN8
	N9ekjWHZG8u+G8pMv36q62pfGP2S4MJjralpbhbDqO3PjRQ1wvsh1KK3o3oEqM14Xcmz/kSl74XpC
	j2gwN22k7PdKA4TC3Ok/7EOWAdEko1+4y0nyai7dKMOQLYA3ExIGFAcLOnrc+s25MB3lSGPQOLJmW
	tzv9B4U3A==;
Received: from 178.114.241.23.wireless.dyn.drei.com ([178.114.241.23]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat
	Linux)) id 1ewAaO-0000Qx-75; Wed, 14 Mar 2018 17:53:12 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: x86@kernel.org
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	David Woodhouse &lt;dwmw2@infradead.org&gt;, Muli Ben-Yehuda &lt;mulix@mulix.org&gt;,
	Jon Mason &lt;jdmason@kudzu.us&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Subject: [PATCH 13/14] dma-direct: handle force decryption for dma coherent
	buffers in common code
Date: Wed, 14 Mar 2018 18:52:12 +0100
Message-Id: &lt;20180314175213.20256-14-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20180314175213.20256-1-hch@lst.de&gt;
References: &lt;20180314175213.20256-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 14, 2018, 5:52 p.m.</div>
<pre class="content">
With that in place the generic dma-direct routines can be used to
allocate non-encrypted bounce buffers, and the x86 SEV case can use
the generic swiotlb ops including nice features such as using CMA
allocations.

Note that I&#39;m not too happy about using sev_active() in dma-direct, but
I couldn&#39;t come up with a good enough name for a wrapper to make it
worth adding.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 arch/x86/mm/mem_encrypt.c | 73 ++---------------------------------------------
 lib/dma-direct.c          | 32 +++++++++++++++++----
 2 files changed, 29 insertions(+), 76 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 1a05bea831a8..65f45e0ef496 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -200,58 +200,6 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		swiotlb_force = SWIOTLB_FORCE;
 }
 
<span class="p_del">-static void *sev_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
<span class="p_del">-		       gfp_t gfp, unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned int order;</span>
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-	void *vaddr = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	order = get_order(size);</span>
<span class="p_del">-	page = alloc_pages_node(dev_to_node(dev), gfp, order);</span>
<span class="p_del">-	if (page) {</span>
<span class="p_del">-		dma_addr_t addr;</span>
<span class="p_del">-</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Since we will be clearing the encryption bit, check the</span>
<span class="p_del">-		 * mask with it already cleared.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		addr = __phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_del">-		if ((addr + size) &gt; dev-&gt;coherent_dma_mask) {</span>
<span class="p_del">-			__free_pages(page, get_order(size));</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			vaddr = page_address(page);</span>
<span class="p_del">-			*dma_handle = addr;</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!vaddr)</span>
<span class="p_del">-		vaddr = swiotlb_alloc_coherent(dev, size, dma_handle, gfp);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!vaddr)</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Clear the SME encryption bit for DMA use if not swiotlb area */</span>
<span class="p_del">-	if (!is_swiotlb_buffer(dma_to_phys(dev, *dma_handle))) {</span>
<span class="p_del">-		set_memory_decrypted((unsigned long)vaddr, 1 &lt;&lt; order);</span>
<span class="p_del">-		memset(vaddr, 0, PAGE_SIZE &lt;&lt; order);</span>
<span class="p_del">-		*dma_handle = __sme_clr(*dma_handle);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return vaddr;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void sev_free(struct device *dev, size_t size, void *vaddr,</span>
<span class="p_del">-		     dma_addr_t dma_handle, unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* Set the SME encryption bit for re-use if not swiotlb area */</span>
<span class="p_del">-	if (!is_swiotlb_buffer(dma_to_phys(dev, dma_handle)))</span>
<span class="p_del">-		set_memory_encrypted((unsigned long)vaddr,</span>
<span class="p_del">-				     1 &lt;&lt; get_order(size));</span>
<span class="p_del">-</span>
<span class="p_del">-	swiotlb_free_coherent(dev, size, vaddr, dma_handle);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)
 {
 	pgprot_t old_prot, new_prot;
<span class="p_chunk">@@ -404,20 +352,6 @@</span> <span class="p_context"> bool sev_active(void)</span>
 }
 EXPORT_SYMBOL(sev_active);
 
<span class="p_del">-static const struct dma_map_ops sev_dma_ops = {</span>
<span class="p_del">-	.alloc                  = sev_alloc,</span>
<span class="p_del">-	.free                   = sev_free,</span>
<span class="p_del">-	.map_page               = swiotlb_map_page,</span>
<span class="p_del">-	.unmap_page             = swiotlb_unmap_page,</span>
<span class="p_del">-	.map_sg                 = swiotlb_map_sg_attrs,</span>
<span class="p_del">-	.unmap_sg               = swiotlb_unmap_sg_attrs,</span>
<span class="p_del">-	.sync_single_for_cpu    = swiotlb_sync_single_for_cpu,</span>
<span class="p_del">-	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="p_del">-	.sync_sg_for_cpu        = swiotlb_sync_sg_for_cpu,</span>
<span class="p_del">-	.sync_sg_for_device     = swiotlb_sync_sg_for_device,</span>
<span class="p_del">-	.mapping_error          = swiotlb_dma_mapping_error,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_chunk">@@ -428,12 +362,11 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 	swiotlb_update_mem_attributes();
 
 	/*
<span class="p_del">-	 * With SEV, DMA operations cannot use encryption. New DMA ops</span>
<span class="p_del">-	 * are required in order to mark the DMA areas as decrypted or</span>
<span class="p_del">-	 * to use bounce buffers.</span>
<span class="p_add">+	 * With SEV, DMA operations cannot use encryption, we need to use</span>
<span class="p_add">+	 * SWIOTLB to bounce buffer DMA operation.</span>
 	 */
 	if (sev_active())
<span class="p_del">-		dma_ops = &amp;sev_dma_ops;</span>
<span class="p_add">+		dma_ops = &amp;swiotlb_dma_ops;</span>
 
 	/*
 	 * With SEV, we need to unroll the rep string I/O instructions.
<span class="p_header">diff --git a/lib/dma-direct.c b/lib/dma-direct.c</span>
<span class="p_header">index c9e8e21cb334..1277d293d4da 100644</span>
<span class="p_header">--- a/lib/dma-direct.c</span>
<span class="p_header">+++ b/lib/dma-direct.c</span>
<span class="p_chunk">@@ -9,6 +9,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
 #include &lt;linux/pfn.h&gt;
<span class="p_add">+#include &lt;linux/set_memory.h&gt;</span>
 
 #define DIRECT_MAPPING_ERROR		0
 
<span class="p_chunk">@@ -20,6 +21,14 @@</span> <span class="p_context"></span>
 #define ARCH_ZONE_DMA_BITS 24
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * For AMD SEV all DMA must be to unencrypted addresses.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool force_dma_unencrypted(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sev_active();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static bool
 check_addr(struct device *dev, dma_addr_t dma_addr, size_t size,
 		const char *caller)
<span class="p_chunk">@@ -37,7 +46,9 @@</span> <span class="p_context"> check_addr(struct device *dev, dma_addr_t dma_addr, size_t size,</span>
 
 static bool dma_coherent_ok(struct device *dev, phys_addr_t phys, size_t size)
 {
<span class="p_del">-	return phys_to_dma(dev, phys) + size - 1 &lt;= dev-&gt;coherent_dma_mask;</span>
<span class="p_add">+	dma_addr_t addr = force_dma_unencrypted() ?</span>
<span class="p_add">+		__phys_to_dma(dev, phys) : phys_to_dma(dev, phys);</span>
<span class="p_add">+	return addr + size - 1 &lt;= dev-&gt;coherent_dma_mask;</span>
 }
 
 void *dma_direct_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,
<span class="p_chunk">@@ -46,6 +57,7 @@</span> <span class="p_context"> void *dma_direct_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
 	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;
 	int page_order = get_order(size);
 	struct page *page = NULL;
<span class="p_add">+	void *ret;</span>
 
 	/* GFP_DMA32 and GFP_DMA are no ops without the corresponding zones: */
 	if (dev-&gt;coherent_dma_mask &lt;= DMA_BIT_MASK(ARCH_ZONE_DMA_BITS))
<span class="p_chunk">@@ -78,10 +90,15 @@</span> <span class="p_context"> void *dma_direct_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
 
 	if (!page)
 		return NULL;
<span class="p_del">-</span>
<span class="p_del">-	*dma_handle = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_del">-	memset(page_address(page), 0, size);</span>
<span class="p_del">-	return page_address(page);</span>
<span class="p_add">+	ret = page_address(page);</span>
<span class="p_add">+	if (force_dma_unencrypted()) {</span>
<span class="p_add">+		set_memory_decrypted((unsigned long)ret, 1 &lt;&lt; page_order);</span>
<span class="p_add">+		*dma_handle = __phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		*dma_handle = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	memset(ret, 0, size);</span>
<span class="p_add">+	return ret;</span>
 }
 
 /*
<span class="p_chunk">@@ -92,9 +109,12 @@</span> <span class="p_context"> void dma_direct_free(struct device *dev, size_t size, void *cpu_addr,</span>
 		dma_addr_t dma_addr, unsigned long attrs)
 {
 	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;
<span class="p_add">+	unsigned int page_order = get_order(size);</span>
 
<span class="p_add">+	if (force_dma_unencrypted())</span>
<span class="p_add">+		set_memory_encrypted((unsigned long)cpu_addr, 1 &lt;&lt; page_order);</span>
 	if (!dma_release_from_contiguous(dev, virt_to_page(cpu_addr), count))
<span class="p_del">-		free_pages((unsigned long)cpu_addr, get_order(size));</span>
<span class="p_add">+		free_pages((unsigned long)cpu_addr, page_order);</span>
 }
 
 static dma_addr_t dma_direct_map_page(struct device *dev, struct page *page,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



