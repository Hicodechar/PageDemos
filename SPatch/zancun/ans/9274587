
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/irq: do not substract irq_tlb_count from irq_call_count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/irq: do not substract irq_tlb_count from irq_call_count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 11, 2016, 7:44 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160811074430.GA18163@aaronlu.sh.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9274587/mbox/"
   >mbox</a>
|
   <a href="/patch/9274587/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9274587/">/patch/9274587/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3B6226022E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Aug 2016 07:44:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2A9F228526
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Aug 2016 07:44:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1F13A2852E; Thu, 11 Aug 2016 07:44:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D91928528
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Aug 2016 07:44:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932670AbcHKHok (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 11 Aug 2016 03:44:40 -0400
Received: from mga01.intel.com ([192.55.52.88]:3286 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752259AbcHKHoj (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 11 Aug 2016 03:44:39 -0400
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by fmsmga101.fm.intel.com with ESMTP; 11 Aug 2016 00:44:34 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.28,503,1464678000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1012426153&quot;
Received: from aaronlu.sh.intel.com ([10.239.13.119])
	by orsmga001.jf.intel.com with ESMTP; 11 Aug 2016 00:44:31 -0700
Date: Thu, 11 Aug 2016 15:44:30 +0800
From: Aaron Lu &lt;aaron.lu@intel.com&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org
Cc: Alex Shi &lt;alex.shi@linaro.org&gt;,
	Tomoki Sekiyama &lt;tomoki.sekiyama.qu@hitachi.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;, Huang Ying &lt;ying.huang@intel.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;\&quot;H. Peter Anvin\&quot;&quot; &lt;hpa@zytor.com&gt;
Subject: [PATCH] x86/irq: do not substract irq_tlb_count from irq_call_count
Message-ID: &lt;20160811074430.GA18163@aaronlu.sh.intel.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a> - Aug. 11, 2016, 7:44 a.m.</div>
<pre class="content">
Since commit 52aec3308db8 (&quot;x86/tlb: replace INVALIDATE_TLB_VECTOR by
CALL_FUNCTION_VECTOR&quot;), the tlb remote shootdown is done through call
function vector. That commit didn&#39;t take care of irq_tlb_count so later
commit fd0f5869724f (&quot;x86: Distinguish TLB shootdown interrupts from
other functions call interrupts&quot;) tried to fix it.

The fix assumes every increase of irq_tlb_count has a corresponding
increase of irq_call_count. So the irq_call_count is always bigger than
irq_tlb_count and we could substract irq_tlb_count from irq_call_count.

Unfortunately this is not true for the smp_call_function_single case.
The IPI is only sent if the target CPU&#39;s call_single_queue is empty when
adding a csd into it in generic_exec_single. That means if two threads
are both adding flush tlb csds to the same CPU&#39;s call_single_queue, only
one IPI is sent. In other words, the irq_call_count is incremented by 1
but irq_tlb_count is incremented by 2. Over time, irq_tlb_count will be
bigger than irq_call_count and the substract will produce a very large
irq_call_count value due to overflow.

Considering that:
1 it&#39;s not worth to send more IPIs for the sake of accurate counting of
  irq_call_count in generic_exec_single;
2 it&#39;s not easy to tell if the call function interrupt is for TLB
  shootdown in __smp_call_function_single_interrupt.
Not to exclude TLB shootdown from call function count seems to be the
simplest fix and this patch just did that.

This is found by LKP&#39;s cyclic performance regression tracking recently
with the vm-scalability test suite. I have bisected to commit
0a7ce4b5a632 (&quot;mm/rmap: share the i_mmap_rwsem&quot;). This commit didn&#39;t do
anything wrong but revealed the irq_call_count problem. IIUC, the commit
makes rwc-&gt;remap_one in rmap_walk_file concurrent with multiple threads.
When remap_one is try_to_unmap_one, then multiple threads could queue
flush tlb to the same CPU but only one IPI will be sent.

Since the commit enter Linux v3.19, the counting problem only shows up
from v3.19. Considering this is a behaviour change, I&#39;m not sure if I
should add the stable tag here.
<span class="signed-off-by">
Signed-off-by: Aaron Lu &lt;aaron.lu@intel.com&gt;</span>
---
 arch/x86/include/asm/hardirq.h | 4 ----
 arch/x86/kernel/irq.c          | 3 +--
 2 files changed, 1 insertion(+), 6 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Aug. 11, 2016, 9:13 a.m.</div>
<pre class="content">
* Aaron Lu &lt;aaron.lu@intel.com&gt; wrote:
<span class="quote">
&gt; This is found by LKP&#39;s cyclic performance regression tracking recently</span>
<span class="quote">&gt; with the vm-scalability test suite. I have bisected to commit</span>
<span class="quote">&gt; 0a7ce4b5a632 (&quot;mm/rmap: share the i_mmap_rwsem&quot;). This commit didn&#39;t do</span>
<span class="quote">&gt; anything wrong but revealed the irq_call_count problem. IIUC, the commit</span>
<span class="quote">&gt; makes rwc-&gt;remap_one in rmap_walk_file concurrent with multiple threads.</span>
<span class="quote">&gt; When remap_one is try_to_unmap_one, then multiple threads could queue</span>
<span class="quote">&gt; flush tlb to the same CPU but only one IPI will be sent.</span>

Note, for some reason the commit ID you used is wrong, the real one is:

  3dec0ba0be6a (&quot;mm/rmap: share the i_mmap_rwsem&quot;)

I have fixed this in the changelog.

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a> - Aug. 11, 2016, 9:16 a.m.</div>
<pre class="content">
On 08/11/2016 05:13 PM, Ingo Molnar wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; * Aaron Lu &lt;aaron.lu@intel.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; This is found by LKP&#39;s cyclic performance regression tracking recently</span>
<span class="quote">&gt;&gt; with the vm-scalability test suite. I have bisected to commit</span>
<span class="quote">&gt;&gt; 0a7ce4b5a632 (&quot;mm/rmap: share the i_mmap_rwsem&quot;). This commit didn&#39;t do</span>
<span class="quote">&gt;&gt; anything wrong but revealed the irq_call_count problem. IIUC, the commit</span>
<span class="quote">&gt;&gt; makes rwc-&gt;remap_one in rmap_walk_file concurrent with multiple threads.</span>
<span class="quote">&gt;&gt; When remap_one is try_to_unmap_one, then multiple threads could queue</span>
<span class="quote">&gt;&gt; flush tlb to the same CPU but only one IPI will be sent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note, for some reason the commit ID you used is wrong, the real one is:</span>

Oops, I looked at a test branch where I cherry-picked that commit, sorry.
<span class="quote">
&gt; </span>
<span class="quote">&gt;   3dec0ba0be6a (&quot;mm/rmap: share the i_mmap_rwsem&quot;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I have fixed this in the changelog.</span>

Thanks!
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=294">Huang Ying</a> - Aug. 11, 2016, 3:13 p.m.</div>
<pre class="content">
Aaron Lu &lt;aaron.lu@intel.com&gt; writes:
<span class="quote">
&gt; Since commit 52aec3308db8 (&quot;x86/tlb: replace INVALIDATE_TLB_VECTOR by</span>
<span class="quote">&gt; CALL_FUNCTION_VECTOR&quot;), the tlb remote shootdown is done through call</span>
<span class="quote">&gt; function vector. That commit didn&#39;t take care of irq_tlb_count so later</span>
<span class="quote">&gt; commit fd0f5869724f (&quot;x86: Distinguish TLB shootdown interrupts from</span>
<span class="quote">&gt; other functions call interrupts&quot;) tried to fix it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The fix assumes every increase of irq_tlb_count has a corresponding</span>
<span class="quote">&gt; increase of irq_call_count. So the irq_call_count is always bigger than</span>
<span class="quote">&gt; irq_tlb_count and we could substract irq_tlb_count from irq_call_count.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Unfortunately this is not true for the smp_call_function_single case.</span>
<span class="quote">&gt; The IPI is only sent if the target CPU&#39;s call_single_queue is empty when</span>
<span class="quote">&gt; adding a csd into it in generic_exec_single. That means if two threads</span>
<span class="quote">&gt; are both adding flush tlb csds to the same CPU&#39;s call_single_queue, only</span>
<span class="quote">&gt; one IPI is sent. In other words, the irq_call_count is incremented by 1</span>
<span class="quote">&gt; but irq_tlb_count is incremented by 2. Over time, irq_tlb_count will be</span>
<span class="quote">&gt; bigger than irq_call_count and the substract will produce a very large</span>
<span class="quote">&gt; irq_call_count value due to overflow.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Considering that:</span>
<span class="quote">&gt; 1 it&#39;s not worth to send more IPIs for the sake of accurate counting of</span>
<span class="quote">&gt;   irq_call_count in generic_exec_single;</span>
<span class="quote">&gt; 2 it&#39;s not easy to tell if the call function interrupt is for TLB</span>
<span class="quote">&gt;   shootdown in __smp_call_function_single_interrupt.</span>
<span class="quote">&gt; Not to exclude TLB shootdown from call function count seems to be the</span>
<span class="quote">&gt; simplest fix and this patch just did that.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This is found by LKP&#39;s cyclic performance regression tracking recently</span>
<span class="quote">&gt; with the vm-scalability test suite. I have bisected to commit</span>
<span class="quote">&gt; 0a7ce4b5a632 (&quot;mm/rmap: share the i_mmap_rwsem&quot;). This commit didn&#39;t do</span>
<span class="quote">&gt; anything wrong but revealed the irq_call_count problem. IIUC, the commit</span>
<span class="quote">&gt; makes rwc-&gt;remap_one in rmap_walk_file concurrent with multiple threads.</span>
<span class="quote">&gt; When remap_one is try_to_unmap_one, then multiple threads could queue</span>
<span class="quote">&gt; flush tlb to the same CPU but only one IPI will be sent.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Since the commit enter Linux v3.19, the counting problem only shows up</span>
<span class="quote">&gt; from v3.19. Considering this is a behaviour change, I&#39;m not sure if I</span>
<span class="quote">&gt; should add the stable tag here.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Aaron Lu &lt;aaron.lu@intel.com&gt;</span>

Thanks for fix.  You forget to add :)

Reported-by: &quot;Huang, Ying&quot; &lt;ying.huang@intel.com&gt;

Best Regards,
Huang, Ying
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a> - Aug. 12, 2016, 2:16 a.m.</div>
<pre class="content">
On 08/11/2016 11:13 PM, Huang, Ying wrote:
<span class="quote">&gt; Aaron Lu &lt;aaron.lu@intel.com&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; Since commit 52aec3308db8 (&quot;x86/tlb: replace INVALIDATE_TLB_VECTOR by</span>
<span class="quote">&gt;&gt; CALL_FUNCTION_VECTOR&quot;), the tlb remote shootdown is done through call</span>
<span class="quote">&gt;&gt; function vector. That commit didn&#39;t take care of irq_tlb_count so later</span>
<span class="quote">&gt;&gt; commit fd0f5869724f (&quot;x86: Distinguish TLB shootdown interrupts from</span>
<span class="quote">&gt;&gt; other functions call interrupts&quot;) tried to fix it.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The fix assumes every increase of irq_tlb_count has a corresponding</span>
<span class="quote">&gt;&gt; increase of irq_call_count. So the irq_call_count is always bigger than</span>
<span class="quote">&gt;&gt; irq_tlb_count and we could substract irq_tlb_count from irq_call_count.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Unfortunately this is not true for the smp_call_function_single case.</span>
<span class="quote">&gt;&gt; The IPI is only sent if the target CPU&#39;s call_single_queue is empty when</span>
<span class="quote">&gt;&gt; adding a csd into it in generic_exec_single. That means if two threads</span>
<span class="quote">&gt;&gt; are both adding flush tlb csds to the same CPU&#39;s call_single_queue, only</span>
<span class="quote">&gt;&gt; one IPI is sent. In other words, the irq_call_count is incremented by 1</span>
<span class="quote">&gt;&gt; but irq_tlb_count is incremented by 2. Over time, irq_tlb_count will be</span>
<span class="quote">&gt;&gt; bigger than irq_call_count and the substract will produce a very large</span>
<span class="quote">&gt;&gt; irq_call_count value due to overflow.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Considering that:</span>
<span class="quote">&gt;&gt; 1 it&#39;s not worth to send more IPIs for the sake of accurate counting of</span>
<span class="quote">&gt;&gt;   irq_call_count in generic_exec_single;</span>
<span class="quote">&gt;&gt; 2 it&#39;s not easy to tell if the call function interrupt is for TLB</span>
<span class="quote">&gt;&gt;   shootdown in __smp_call_function_single_interrupt.</span>
<span class="quote">&gt;&gt; Not to exclude TLB shootdown from call function count seems to be the</span>
<span class="quote">&gt;&gt; simplest fix and this patch just did that.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is found by LKP&#39;s cyclic performance regression tracking recently</span>
<span class="quote">&gt;&gt; with the vm-scalability test suite. I have bisected to commit</span>
<span class="quote">&gt;&gt; 0a7ce4b5a632 (&quot;mm/rmap: share the i_mmap_rwsem&quot;). This commit didn&#39;t do</span>
<span class="quote">&gt;&gt; anything wrong but revealed the irq_call_count problem. IIUC, the commit</span>
<span class="quote">&gt;&gt; makes rwc-&gt;remap_one in rmap_walk_file concurrent with multiple threads.</span>
<span class="quote">&gt;&gt; When remap_one is try_to_unmap_one, then multiple threads could queue</span>
<span class="quote">&gt;&gt; flush tlb to the same CPU but only one IPI will be sent.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Since the commit enter Linux v3.19, the counting problem only shows up</span>
<span class="quote">&gt;&gt; from v3.19. Considering this is a behaviour change, I&#39;m not sure if I</span>
<span class="quote">&gt;&gt; should add the stable tag here.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Aaron Lu &lt;aaron.lu@intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for fix.  You forget to add :)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reported-by: &quot;Huang, Ying&quot; &lt;ying.huang@intel.com&gt;</span>

Oh right, sorry about that.

Regards,
Aaron
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/hardirq.h b/arch/x86/include/asm/hardirq.h</span>
<span class="p_header">index 7178043b0e1d..59405a248fc2 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/hardirq.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/hardirq.h</span>
<span class="p_chunk">@@ -22,10 +22,6 @@</span> <span class="p_context"> typedef struct {</span>
 #ifdef CONFIG_SMP
 	unsigned int irq_resched_count;
 	unsigned int irq_call_count;
<span class="p_del">-	/*</span>
<span class="p_del">-	 * irq_tlb_count is double-counted in irq_call_count, so it must be</span>
<span class="p_del">-	 * subtracted from irq_call_count when displaying irq_call_count</span>
<span class="p_del">-	 */</span>
 	unsigned int irq_tlb_count;
 #endif
 #ifdef CONFIG_X86_THERMAL_VECTOR
<span class="p_header">diff --git a/arch/x86/kernel/irq.c b/arch/x86/kernel/irq.c</span>
<span class="p_header">index 61521dc19c10..9f669fdd2010 100644</span>
<span class="p_header">--- a/arch/x86/kernel/irq.c</span>
<span class="p_header">+++ b/arch/x86/kernel/irq.c</span>
<span class="p_chunk">@@ -102,8 +102,7 @@</span> <span class="p_context"> int arch_show_interrupts(struct seq_file *p, int prec)</span>
 	seq_puts(p, &quot;  Rescheduling interrupts\n&quot;);
 	seq_printf(p, &quot;%*s: &quot;, prec, &quot;CAL&quot;);
 	for_each_online_cpu(j)
<span class="p_del">-		seq_printf(p, &quot;%10u &quot;, irq_stats(j)-&gt;irq_call_count -</span>
<span class="p_del">-					irq_stats(j)-&gt;irq_tlb_count);</span>
<span class="p_add">+		seq_printf(p, &quot;%10u &quot;, irq_stats(j)-&gt;irq_call_count);</span>
 	seq_puts(p, &quot;  Function call interrupts\n&quot;);
 	seq_printf(p, &quot;%*s: &quot;, prec, &quot;TLB&quot;);
 	for_each_online_cpu(j)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



