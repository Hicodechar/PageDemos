
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,10/38] x86/mm: Provide general kernel support for memory encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,10/38] x86/mm: Provide general kernel support for memory encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 17, 2017, 9:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;b36e952c4c39767ae7f0a41cf5345adf27438480.1500319216.git.thomas.lendacky@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9846263/mbox/"
   >mbox</a>
|
   <a href="/patch/9846263/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9846263/">/patch/9846263/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5734A60392 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:24:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8D39B228C9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:24:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 818DF25223; Mon, 17 Jul 2017 21:24:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 621BC228C9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:24:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752427AbdGQVYW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 17 Jul 2017 17:24:22 -0400
Received: from mail-bn3nam01on0076.outbound.protection.outlook.com
	([104.47.33.76]:46539
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751530AbdGQVLa (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 17 Jul 2017 17:11:30 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=SCBRjfRk+4NKKiIQ2OIgXxZfwmIHeqr3rAVPPqsqly4=;
	b=zNn6hesBNY3b4VbSlj9j6T1hF89jSkymHM78SFN/reoTux3IhHFTp1msqYCrrFckNpoQDKPgnTcHSbsoM3f2gnOkG0apJEOQWJFFr+FLuN/oXiLGeKaFzYwBOgrWfaewLt6IbXRm+ConUsucOsTR7QppQ1NCmYO5fHJVufvyY0g=
Authentication-Results: kernel.org; dkim=none (message not signed)
	header.d=none; kernel.org; dmarc=none action=none header.from=amd.com;
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1261.13; Mon, 17 Jul 2017 21:11:22 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org,
	linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	linux-doc@vger.kernel.org, linux-mm@kvack.org, kvm@vger.kernel.org,
	kasan-dev@googlegroups.com
Cc: =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [PATCH v10 10/38] x86/mm: Provide general kernel support for memory
	encryption
Date: Mon, 17 Jul 2017 16:10:07 -0500
Message-Id: &lt;b36e952c4c39767ae7f0a41cf5345adf27438480.1500319216.git.thomas.lendacky@amd.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
References: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR03CA0008.namprd03.prod.outlook.com (10.168.230.146)
	To MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 21047241-a627-47c3-4888-08d4cd58627b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	3:B4awLi4LSujMi56Nl4WjGvUrnAiMRjilKenUHHv5J33XiF0HNKsrR2G0caciuMf9MG6EY7JuwnNmipEeX1Y5dVe4HcA+ebo+O0S1CcmOeAKOWa9cXG43lQLwCpjR9zz2BCWuEeiNPIcLvhfRaTF3ewkkCSPKWPa0eYpD+2GmIPlyNXPRkNwTNEJ61oGduxkR/qxgCDKlq7rtWhtpRl9gS52Znn4zxIwV65bgQTLIzaImHBJU+gYxp/BOa0cvdcADSb5NgWVQypamlVgNzhjLAdZHnFetcoTmKY+CEBqcKgc7KJ9wcAaqG94qXA1c2ezCZcu02IG9L066kbKbm2IREORN3g+aWWpi/QkoS01ws86Af1w4DG0C6Pg6uDLx57CJccK2J0xbFQDS/E6izDFIQkqs1FHCAhVyEeDUsZuid3EDVUs9nJLJJkPXheba4JO+ztnVSmRnPDSyWNvOT4enxU+jfWtkUv3gcUBkkdACaeF5rfD/9OidBwxzb/5IrSI9nCtnB2ykQPuOeaDQB3Ah6dKGjq3Duy5k4JUKQeMmv00z0HXiORDEUhMVMbAxnQk2HviUUtHjr0HMUNUjVe4MyPyWp7S2drki+tqLdXoBYjrmsVovJ080a2uH/qRxKUE24E5z+/yDD4ZDCEm3bvrxvmn3jW2vtaht3epAxL5QOGuWiNfwrQeccAnPh/bPxfNDWPlrQ1Ggtz+Z9GCHaFjCTaPLLvyfBUKCnfg/7baEphCsyHScmd0Edg7jxHF2hSPKX6Vq/9phO0kA/bt06KpruQ==
X-MS-TrafficTypeDiagnostic: MWHPR12MB1151:
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	25:35m3In2UsxUuzJqTxUZnGQX+KP2DrbOe12ZQUGi1/EG3PpOvylmC8Hq5Xt/2APKkKPnm6jvgpoRmqK8WXzh2UclNJ+1obCuqo/KsWQKN0ujZHI23axH9fBBXM0N4jtR6uhCjRvW/jcpG1gqudpB8+hdZy45MG8SJdRF5A7SMTp1xApykHIm5QUhJeDkH7jgeNwzKKByatX2E/hzxa+pad6zsIZJ86VJ2KX9lic1LK8zt+sap+WyOX8n0wNdeSZRZg5PxAb3/0J53hEdewPm/WtJJb3RXbXwvnFVJIvcTPcclYaXTXsiEwHm7Kf9t9Nfll/945xb33rabqK0qtXT0PmBhXFfsbe8kvkL1yfMoZOK6gi0Jk+aX0yu5uDFdnFy7qPj6hIfzuPHx2HaYmWJ5s1iPM0uF3EiYh/5cg4l+Xbe0RalqF1kWNP5ZNQPxGHCWASuxsK9voaAdfPtKNxXMXgS5Tlph1m9qGEzV2OSpIqiBPn9GauQnttjWoSX0Vgq5b3ctI3BrPDBF8To6aGWdjacV5TDM9c1l9XLAGh0LUAKmEOuiUqJsSMSnV4Eiv1Jmpy3WJmdedVH8uvLqsmB4kgSdMyq5BGpoRY94j1r092aWfgbdliEETiy2XQfe5LqdCNZ4Eknz3xup4NnWb2OFSoeLKjbxFVGvxoNnLG4geaQ8bAzGVVOyOVmY+n0fB4L5ZKKKgx/r1d4dLPkp071/g67H+taHwrBc2LoBCtAv9TrYfeftrDiYCdid4P1vaJ/4y2hgJtqb3V27eax0wLHmSE4TeBh+nY2YAcnk0RuZ+AsMnor1Tj7vEkYFfBNhJLhLV9FHyenGO0J5e0t3IqO9Wt7YQikUZsMWG5njL/kWZuOqcD8imECz3NdyXUB5RCjgEpSLMeT/6ap9gc68BAgzotVXAOpg86pjOf6vbOYZ3
	JQ=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	31:viwHJ/P3A2e/ZxoAXFrINyFePD0xw5OJLtSHSXgZ0J9/6ybw4eRxwG4d5SnZZGwNq6CAjHfyzLOAM6FU3fyKBNUmfXGKibmxowK2jxRGZksMle+Z1nku+pPbdCM2EcJk3Vg5A3Zugzptq6gHNeuF0V8oeWIGsHMhQH8W0ptIYoped+yAj7ietto2PEXE8VzoLbZWMz8nNJ0fLZta7qmLCTtrQFTkdsYvH6GRdmNVHmkUoj6PLEN6XN/fLWJ9/kyvwLEH+L+3S7Ku05Oh+JQVtvG0Jck6eIjR7VJyqOINE+Hnm3tTrXopJPNnz0YrdYH5iQFicOETVxwH/z3IwNt9ztCSzaVfgoQF7tYGDjMLWgZNMR5Xf0u+Q7rxWo03KkdwZ/qxXHKJzhERDae3lcov4HfO5S+SlzDaDYxzikkSKh+zs958cT77D0keKLzg7sWpXSYnpKjmV8gNOrRMjlcMJQJP/6xoaOQHA3OwvpdANA2+wQiEBPmqGrYsRSlmX/oh5u6upLua1OvDFr7/C8vqVMJiR7+hmQIjpyx4w+513tYTReYQP3rY29SCxGIvLxVSY16fKpyaBe/mXZOVsN5D5V+rv/LoyUPRKL6YSV70+mdxj+G36ZsZqHbyNNKG8TosVw6VSxMI1aLAVqocA+bzuDDtr6CNjpmuZEwQ17V6BWY=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:8xTMm+rdHWn50CdSgWeqg+OtPDA+pz1BOCBpmxNrloCoNE6IH52OIlfhK7kVwOUtmdwzR3Sa+EJ5Sjy+Z6z3MQBRmFpRrQUL/P2pvS5xUoP3oEB1CDKxKljAqYDTJ0qUbvQFusxZPlPRn0WclqW5ymdbVCTzY6PVkBOJk8sVeHVZRBHvg/yyl0UKAJ/somGquF2hfrLbBcwKI/VZ1q7zFGOIUBQtO7ZtTxJOcObiy7DuG/Bcf5gdBJDzJVaxhWPimcX3U34Pof4UpPAXAfJKc+LkUUkLyYRpxI1+jUFDu20teB4YMkpP2pfx6vSK8wtIh6eEQiCx/NvkiQZ5SanLCu87LALII+Qml038lpfB4YDfGvx0LoDU3HUnSJ9XF8+y6SCIwkmqgHndGw0dkghQxtxSv1VWcPdGroDI7E0ihR2e7aZQPJHYX3og3KPonk3DKovuW/eMN2GCLBfWjkehUAgoBRvVqrrmgZCLN+xC10j+UVjEfISCaD3wMkHNMIBg
X-Exchange-Antispam-Report-Test: UriScan:(133145235818549)(236129657087228)(767451399110)(148574349560750)(167848164394848);
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB1151FEC6B61DFF0090F8FCC2ECA00@MWHPR12MB1151.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(2017060910075)(5005006)(8121501046)(100000703101)(100105400095)(3002001)(10201501046)(93006095)(93001095)(6055026)(6041248)(20161123558100)(20161123555025)(20161123562025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123564025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:MWHPR12MB1151; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	4:c1kESMHJ94OqX9d4OpXlZfPD6C0spfK0+Z1UpqyphS?=
	=?us-ascii?Q?G2dp74MfuMyLXIRatVxOvR2q9DhlEaInKThersN6ePsaIDvBNsv0/N3rXEZH?=
	=?us-ascii?Q?vfiKOLcPg7H9TJd9ucVvB/s+gBlihTvPm0uU2ktshydd9jxjlCdQTYrDAoPF?=
	=?us-ascii?Q?pVOWjO6EC0U/Yy4Enj8sESrvGLXvCeW7s4LtL1AHb2SV4hBLTou1f08XYVTf?=
	=?us-ascii?Q?3tqxo0F88B5cx5RQgeFBEbMvKIGQycMWl7LvGvWNy8Iauu3ThyhlqAoWExUi?=
	=?us-ascii?Q?TYRpwtwh3RQ16ilEvg2qfg87zxANsXU7ozO86+Rcvj3zrdQBumu23+jv2NpW?=
	=?us-ascii?Q?GIz7JeCT1Z5xasWX8hBO6pnsxx4uUv1mFXOsUyow29mMXw3SORVjQh77xJhh?=
	=?us-ascii?Q?3EToa3yyB8/aSdt8bpWE/bOjM7hZbWthF5HtJxxHdqp5f7fjQuBRXoM2N5gX?=
	=?us-ascii?Q?cuJC0ziVx7jkONGD0UJiJHgyUw4QjHEewuDZ5Tzogb5I1KNCYCvzNq7vAe5R?=
	=?us-ascii?Q?19D/hposYu6OaAGEbpw10ar8H0qp/0+7l+/bGVzSad5xYKxEpALeNj7U+olI?=
	=?us-ascii?Q?0WoMMjFZ84dgPz57gvXIejz+WQ5AO6H9lO8w/oW3BxhMWtGeQwOOe1yiVrbk?=
	=?us-ascii?Q?cxFB45tLRdDiNXvenRpenyQUUF8IDLbJrIHERm6kdw2xKdzH4qnPjHz8bPLq?=
	=?us-ascii?Q?iQQ6Icl6zfhY1oWYT7swiZQEJyTZGehS6/HcHQMTsQwkM/qWP9hxWXnXqvl5?=
	=?us-ascii?Q?lbJ7E9lk7xVfE3SUgM03EpjBvpLgFyVnyEZM657Vxp08t3JZ3SvsM14tkONa?=
	=?us-ascii?Q?+IVzA5P3FdgFR6SpOoCquu4CvAEWrhG1xbKtDmTqYlFjpOhiWw+9NrEKs/6q?=
	=?us-ascii?Q?knVwnw1fqESEkR8vl1tsqEA+8kfcn5apClPaJu9YBJrvyhl7sCtrzmTdgJ9K?=
	=?us-ascii?Q?hC2Oi65s5jagnB6pR640ZlPI6oiCMjeHG67SI/o+3kTh2MXoykh3QdIqHqfa?=
	=?us-ascii?Q?GZMnm3vSH+0ry2TqQ9eGna3JWvDJT/YxbQxlPXqXCu0AFjIwPRxOzgPIalvB?=
	=?us-ascii?Q?XQkFKQOMedPvIMIo6F7aTmOqfLb48tECVsfvjljmMhvlspvK/+3SF1nLx6Jt?=
	=?us-ascii?Q?IOojgZxOZhhu+lG3pfRMnZeHU1n0mJrOJqliOW1xTQH6iiVQDzEugEvdtbOg?=
	=?us-ascii?Q?maRnP9IX3CAsWPchL+y0icDktGouhyPQbdR8ivqRRDlTS1iwT8jbehNUuLi+?=
	=?us-ascii?Q?dnyKq5u3i9cMMm7an3RJAJpM1fWBzLOI6Dz8Jugc7sjJc/Nh1lbcSwbkfdMw?=
	=?us-ascii?Q?9zkOx1fZED8a5fAszPW5m3+5iAyWYS/7F/ig/3M+MhIucyvF0iXLWxYN/qTi?=
	=?us-ascii?Q?hLtflEgfGmIEPZwhDddWjq8zM=3D?=
X-Forefront-PRVS: 0371762FE7
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(7370300001)(6009001)(39410400002)(39850400002)(39840400002)(39860400002)(39400400002)(39450400003)(25786009)(6506006)(33646002)(54906002)(7416002)(76176999)(478600001)(8676002)(50986999)(6486002)(47776003)(5660300001)(189998001)(42186005)(38730400002)(305945005)(72206003)(53416004)(66066001)(50466002)(48376002)(110136004)(118296001)(2950100002)(81166006)(5003940100001)(3846002)(6666003)(36756003)(53936002)(7350300001)(6512007)(2906002)(7736002)(6116002)(86362001)(4326008)(50226002)(575784001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1151;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	23:XyakxTbCGmIuTaca8tfpA4B+GMLgAsVYzMi8z70Jr?=
	=?us-ascii?Q?P54oRlYDzUHLmK+l8xPT8OYqOLO3fgAQzGr06aD5NWV+r9QFLyg9G0mDjJ5o?=
	=?us-ascii?Q?X38vKS42L0Qlk796IE4ekICF6aLIYztH5VmtXv/8GbavszKnuTghZrNnbT3U?=
	=?us-ascii?Q?RQYor0xLgP203uh85o0qcFcCIMARVIqXBnrsIBmSfPr4FJSmCMQ3AuTG1jCG?=
	=?us-ascii?Q?hklu/2f9QcTTPjLVjg31CYs4xqsfbvyO0I6WKsx2bnHl/YQioW56bTdIN5LO?=
	=?us-ascii?Q?0YnPgImoTgBRypaLqgY4bYTZTAjtgGUWZKY8n1ejneFExAzQv6KmWcRbQuqN?=
	=?us-ascii?Q?vKPBEP9KHGEPyn1sw4a5ASnmF+FJvZ8x5jewBDRxRJd9R3lC5uJzPcrNqSh7?=
	=?us-ascii?Q?x9i5IC+KYuTJlw5oqkJDbT3nYwFiexZ729bqWOg4zzjz6OqvL99fPU5l6N4f?=
	=?us-ascii?Q?Tkb8EIRTVCz+EIqRnm8jtWj9nMlAmE2nKOok/moq8CNIyHAMmfXACuj+fwij?=
	=?us-ascii?Q?BCIC7MSyWobpRCmgdIx/y2KlSokCWNBo34eUqhqMRpQfWqw3FDO3jq+aL5mn?=
	=?us-ascii?Q?Ru6L11v9KbkJq8I802o/etW08Oe/JrOCSW+13gRMyTGw2kxNCc03bKR2cYPo?=
	=?us-ascii?Q?2vDpQJkGLiGAHvN34DW5BsaOzlVsTexysP3xb1Z9iIbxNbb2m1E0daoBWLwv?=
	=?us-ascii?Q?wMynbZ/X1eH09Ph0PWEotZglVyjjR7mFEu6Vpb4hVnniIzaF6p2ycrlsVNWD?=
	=?us-ascii?Q?VqzMx4gNLiZEU2CnZni/5bqK8Oa4QBwtMXf2r2TIYI9lbSc1DKYsns/eax2Z?=
	=?us-ascii?Q?iMd/Jv4jJOdrAa9QfEYITGEUxB5e2Gfme3pAw0rvFdeIglqKPF5WW4ExkIDr?=
	=?us-ascii?Q?Xn42SHVssUjkNsc3fh+3rVCTmzoC9YOKBtpfWJqgBgIft2DeUAaM8/PbVENs?=
	=?us-ascii?Q?n59jTo+J9LeIkrbXixkfzT8vkf88KGnt6ekcFJxsBD79LWnXponvTUr2jwHC?=
	=?us-ascii?Q?QsFmp0quJ8/5Cu7Sifjc0yFfW/lSpEe2XV7oNoJF7a2KGkaCtS4ZaoPdkU2v?=
	=?us-ascii?Q?yfZ62wOoRSh8vFvzRr6X13zJ/ZkL5lz1g3f5la0DEoO0r5D6quR0T0SKWJZi?=
	=?us-ascii?Q?W0BgwXS30kJqFPslbWC/xSdf1Qvm57ZPeSSrXeETkZyEQdZ2J92HrjLwuxxn?=
	=?us-ascii?Q?BVxTsWUMFh8dmMbw62bDZfLiYvcu3HvXqq+yKNCGaxt+oP8A5KJlym9cg=3D?=
	=?us-ascii?Q?=3D?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	6:CrvBcYb84kqa4JJCqLA2/driVkcfJTgAL3x4yFI1H7?=
	=?us-ascii?Q?ygRV1VJhcnoJmZYtt6d4K+vnVTDJiJ8Gmb0dzuGWkmM0SAImnY7RYlC8Work?=
	=?us-ascii?Q?LC3jen9HEcXGOWSGNsOw5QZxznOQPzptOqFim7BuFQMSs21U0OolWPGAPoto?=
	=?us-ascii?Q?OArnNGnj5yfKxsr/N1RcFAAuCRx9tPbeot+jTY+oCI4JPykuifNXmbmu9Nqn?=
	=?us-ascii?Q?PTb6vGnj8atbccFPPZmnEhS2wxqy8DHN7taO6lD+xJU94dADLGl6XpvcGpd9?=
	=?us-ascii?Q?lO6PxmoBuT+RNk/+m1+mMc4ijf9peTdb5fYPgDN2ASwTGojR6i9dSk4zhU+7?=
	=?us-ascii?Q?QSOGmna9wlaFdglWIABLiP+BAM5Q1M8ccPj2/HvU27WZcv9PZXdlBaOqVqy4?=
	=?us-ascii?Q?6jh+Mt2Ve3N7yB6UCVwFvsZiLicO7DIukzsXFhOWEsWYMRlwc3u94p6GWBrX?=
	=?us-ascii?Q?LnnyWMvuXGoOidj/svXlnqbFDZRZLivvG51n0Mo//2nBz7wgUTzbRu+fJI17?=
	=?us-ascii?Q?QfbJPsH7DgAUPqN4kORejEAmwvUPb4rKY+hCvRay/hbuUxpNi5PqBZM7sf3G?=
	=?us-ascii?Q?4f3WmLskB7/Def/P6XdrP2mLuZ1h6tb7oFC9591/L9IMobyQPFgdT0Ms8biy?=
	=?us-ascii?Q?D0PlhI8dm3SzkQiib6CRhc1Wmf1w3TWGmqjnSo2mXst3pM1/34Rl1Ry1PweE?=
	=?us-ascii?Q?HKAbtd1i1wb+LZYnHKDtPzfnRXi2rHu2MsneXgI3U0hATMYZIV0Wu7/ztpno?=
	=?us-ascii?Q?KiDTsRUQ1eFWJcQhjy0Wso3zGdASyGXEuOjZ6hFao4JR2dja/nKqbMLYp++/?=
	=?us-ascii?Q?gLW9Lg+zvzXNYdxXImEireUjtXA65NVJDlVXVvO6aluq0rAyAe83v/WT1zky?=
	=?us-ascii?Q?j4TZx+6iWqvzFn99Hc8Dz/2hpjJObq15PzOhiuScrsUvdImfuzi9uGQ/D7NO?=
	=?us-ascii?Q?5x9vMiLsBn5b2NiMm5CEeXkUEUrjnlhKWIwCttextnKNxr/m6ExKdy5lxgqo?=
	=?us-ascii?Q?+xw8+S62gkIjx7/zyWZvCU?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	5:VX3qmqihipGLpzeCoylmpKd6I2OvUJFb6T94f09wHwjjRlTIoC0X+U/YXLYW8b1DT4MDZUJlOEx0Y1cBRRdhjumNVo0mM0sZ8RUBAyU2yFwqxouUqeA+zbyTIobREH8bVeBqcI3pHPT3IZXWrXTvYUhuxK29YKg/jWo3fhOtFw6oTuouYoa3/mOwI0jWfoqg1asj9WPFnscc626YRw+4KAe114FtPQqm57N2X5APQzNaS4HobzjK6bh1xNkJhPMrxWptRbFyXnffFM2NvmOk6vhx/hM1HY8Q3c5yULU/danAxxlvLFkbEobqj+yoKmGLDTrHTt/8RCZMSVF7aDL0SWkH+HgyjqcZtCfp9usaQQ7xXP9Yxr0wPDMkuYsFkkv/fMMS2OLHKfHKUnTcafjVQbV5CNLPdPIhJaY4txAwcz/HsOT2YIHtXe7XkuRfFQIY5hxFd6xWZJunrSxENONNTGoWreRgU5R39cN+UsctFc9PGDidlnJukB4goRPsa1sH;
	24:DQr4BuAXA3GcApI/Qvc2jo7K/C4da7ggfJ2TbkpyC6zBiRq0Wr1zscWTDmjUonqykOztB7CCjrYjIQpCwjCrFAiIwfSKY4oGAIvCqUAQEoU=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	7:8xix4MvvRRq9fvYEbp2BGTjx3Na4+03TdeGbv/btl5u2q/i9GVoC9efa1sviPolw706Y97FaTQT5QB6LiYDR27q8CiJsR5I8/U0YJwldAEoXuO3n+uexHyidSE2aGt0Uo0Ge8Paup/J+X95SpPY3vVednbFrbezjoYhuVE0EBL9TH7y0UNljfU4FDJGuHPeG5/n6kzHPvvCqARO97UTFqyi8y/aQTLd/96LvTZC7XE3PQzm7Kn1FRBfPMZRa/8acTlTtwD99wYggbljHmfMdl9OvGUdhMVFFSr+T9fYKEbMsDXmLN3JL2m+veKh6NrUr9toHbPZ7CMTzYJvi4ZM27cOwFKRv7odITYXQ+cr8c0SJ9ut8sSIuK1OYl/vlsH3zQ9NShTqcg/n1o/xg+iVTHdaSA84fpPPRad6clPsHMTM29pAVsPr2ne/DGXoi1EjydZFfiBKbF67QkywS3w/F7Lpl3Nep5eL/+SHCzopCpuuv6NytMAjb1o7H5vMhLSXo5fbZf98ep7BRQqenGZOwEjJC7nhTsPRwV8KmCvDz9xecWvCBQvw79PelIcCyjCPMY8B44B0dvgusVqmPUo0s6e1CE2tB1ivPfv0ZhCnY6gHh+fNlstdhORWpAnKYVRN2g/Nt1aT5+NkQoAMwH8zKkgaSvizp7GgUViIo0PhnqhfmGKu48KV5458y+P3gPjAk3p6scpkNgi1NvpIHNFZ+a+xSKYLhdNYH+WqzmBLEpZr6VfDmFRXvALgonzMSYAp7pBnTB/az/IuzBdyh7MaA3p16X1j3G21d7TG5NDLPvnc=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:Ww8MW2o67BIPQ/OBgdOGl2zv4PYJFcmUesSXYYEAhv2p+wcl5T+ZpHNGKrUWGsYg1X9lJtgaoZzskWRh43bfFH+CQAYDCV+TSKSGckPv2cLG3BzHuunyYGAKBxgijfWD4GfkVyuIMiK32qKV4Wila1kTCP1zJenqbwYjOGbxBkjKmtE3slRKVG1NTLkAyFXUIA9Xq1IgRPW/O5BvFUBBtC+TNgGaxYA9m+5p9Jq52eRzJePgHGnbDng+s2zJmyyW
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 17 Jul 2017 21:11:22.4106
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1151
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - July 17, 2017, 9:10 p.m.</div>
<pre class="content">
Changes to the existing page table macros will allow the SME support to
be enabled in a simple fashion with minimal changes to files that use these
macros.  Since the memory encryption mask will now be part of the regular
pagetable macros, we introduce two new macros (_PAGE_TABLE_NOENC and
_KERNPG_TABLE_NOENC) to allow for early pagetable creation/initialization
without the encryption mask before SME becomes active.  Two new pgprot()
macros are defined to allow setting or clearing the page encryption mask.

The FIXMAP_PAGE_NOCACHE define is introduced for use with MMIO.  SME does
not support encryption for MMIO areas so this define removes the encryption
mask from the page attribute.

Two new macros are introduced (__sme_pa() / __sme_pa_nodebug()) to allow
creating a physical address with the encryption mask.  These are used when
working with the cr3 register so that the PGD can be encrypted. The current
__va() macro is updated so that the virtual address is generated based off
of the physical address without the encryption mask thus allowing the same
virtual address to be generated regardless of whether encryption is enabled
for that physical location or not.

Also, an early initialization function is added for SME.  If SME is active,
this function:
 - Updates the early_pmd_flags so that early page faults create mappings
   with the encryption mask.
 - Updates the __supported_pte_mask to include the encryption mask.
 - Updates the protection_map entries to include the encryption mask so
   that user-space allocations will automatically have the encryption mask
   applied.
<span class="reviewed-by">
Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/boot/compressed/pagetable.c |  7 ++++++
 arch/x86/include/asm/fixmap.h        |  7 ++++++
 arch/x86/include/asm/mem_encrypt.h   | 13 +++++++++++
 arch/x86/include/asm/page_types.h    |  3 ++-
 arch/x86/include/asm/pgtable.h       |  9 ++++++++
 arch/x86/include/asm/pgtable_types.h | 45 +++++++++++++++++++++++-------------
 arch/x86/include/asm/processor.h     |  3 ++-
 arch/x86/kernel/espfix_64.c          |  2 +-
 arch/x86/kernel/head64.c             | 11 +++++++--
 arch/x86/kernel/head_64.S            | 20 ++++++++--------
 arch/x86/mm/kasan_init_64.c          |  4 ++--
 arch/x86/mm/mem_encrypt.c            | 17 ++++++++++++++
 arch/x86/mm/pageattr.c               |  3 +++
 arch/x86/mm/tlb.c                    |  4 ++--
 include/asm-generic/pgtable.h        | 12 ++++++++++
 include/linux/mem_encrypt.h          |  8 +++++++
 16 files changed, 133 insertions(+), 35 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/boot/compressed/pagetable.c b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">index 28029be..f1aa438 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_chunk">@@ -15,6 +15,13 @@</span> <span class="p_context"></span>
 #define __pa(x)  ((unsigned long)(x))
 #define __va(x)  ((void *)((unsigned long)(x)))
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The pgtable.h and mm/ident_map.c includes make use of the SME related</span>
<span class="p_add">+ * information which is not used in the compressed image support. Un-define</span>
<span class="p_add">+ * the SME support to avoid any compile and link errors.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#undef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+</span>
 #include &quot;misc.h&quot;
 
 /* These actually do the work of building the kernel identity maps. */
<span class="p_header">diff --git a/arch/x86/include/asm/fixmap.h b/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">index b65155c..d9ff226 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -157,6 +157,13 @@</span> <span class="p_context"> static inline void __set_fixmap(enum fixed_addresses idx,</span>
 }
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * FIXMAP_PAGE_NOCACHE is used for MMIO. Memory encryption is not</span>
<span class="p_add">+ * supported for MMIO addresses, so make sure that the memory encryption</span>
<span class="p_add">+ * mask is not part of the page attributes.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define FIXMAP_PAGE_NOCACHE PAGE_KERNEL_IO_NOCACHE</span>
<span class="p_add">+</span>
 #include &lt;asm-generic/fixmap.h&gt;
 
 #define __late_set_fixmap(idx, phys, flags) __set_fixmap(idx, phys, flags)
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 475e34f..dbae7a5 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -21,6 +21,8 @@</span> <span class="p_context"></span>
 
 extern unsigned long sme_me_mask;
 
<span class="p_add">+void __init sme_early_init(void);</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void);
 void __init sme_enable(void);
 
<span class="p_chunk">@@ -28,11 +30,22 @@</span> <span class="p_context"></span>
 
 #define sme_me_mask	0UL
 
<span class="p_add">+static inline void __init sme_early_init(void) { }</span>
<span class="p_add">+</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(void) { }
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The __sme_pa() and __sme_pa_nodebug() macros are meant for use when</span>
<span class="p_add">+ * writing to or comparing values from the cr3 register.  Having the</span>
<span class="p_add">+ * encryption mask set in cr3 enables the PGD entry to be encrypted and</span>
<span class="p_add">+ * avoid special case handling of PGD allocations.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define __sme_pa(x)		(__pa(x) | sme_me_mask)</span>
<span class="p_add">+#define __sme_pa_nodebug(x)	(__pa_nodebug(x) | sme_me_mask)</span>
<span class="p_add">+</span>
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __X86_MEM_ENCRYPT_H__ */
<span class="p_header">diff --git a/arch/x86/include/asm/page_types.h b/arch/x86/include/asm/page_types.h</span>
<span class="p_header">index 7bd0099..b98ed9d 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/page_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/page_types.h</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/const.h&gt;
 #include &lt;linux/types.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 /* PAGE_SHIFT determines the page size */
 #define PAGE_SHIFT		12
<span class="p_chunk">@@ -15,7 +16,7 @@</span> <span class="p_context"></span>
 #define PUD_PAGE_SIZE		(_AC(1, UL) &lt;&lt; PUD_SHIFT)
 #define PUD_PAGE_MASK		(~(PUD_PAGE_SIZE-1))
 
<span class="p_del">-#define __PHYSICAL_MASK		((phys_addr_t)((1ULL &lt;&lt; __PHYSICAL_MASK_SHIFT) - 1))</span>
<span class="p_add">+#define __PHYSICAL_MASK		((phys_addr_t)(__sme_clr((1ULL &lt;&lt; __PHYSICAL_MASK_SHIFT) - 1)))</span>
 #define __VIRTUAL_MASK		((1UL &lt;&lt; __VIRTUAL_MASK_SHIFT) - 1)
 
 /* Cast *PAGE_MASK to a signed type so that it is sign-extended if
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index b64ea52..c6452cb 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -1,6 +1,7 @@</span> <span class="p_context"></span>
 #ifndef _ASM_X86_PGTABLE_H
 #define _ASM_X86_PGTABLE_H
 
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 #include &lt;asm/page.h&gt;
 #include &lt;asm/pgtable_types.h&gt;
 
<span class="p_chunk">@@ -13,6 +14,12 @@</span> <span class="p_context"></span>
 		     cachemode2protval(_PAGE_CACHE_MODE_UC_MINUS)))	\
 	 : (prot))
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Macros to add or remove encryption attribute</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define pgprot_encrypted(prot)	__pgprot(__sme_set(pgprot_val(prot)))</span>
<span class="p_add">+#define pgprot_decrypted(prot)	__pgprot(__sme_clr(pgprot_val(prot)))</span>
<span class="p_add">+</span>
 #ifndef __ASSEMBLY__
 #include &lt;asm/x86_init.h&gt;
 
<span class="p_chunk">@@ -38,6 +45,8 @@</span> <span class="p_context"></span>
 
 extern struct mm_struct *pgd_page_get_mm(struct page *page);
 
<span class="p_add">+extern pmdval_t early_pmd_flags;</span>
<span class="p_add">+</span>
 #ifdef CONFIG_PARAVIRT
 #include &lt;asm/paravirt.h&gt;
 #else  /* !CONFIG_PARAVIRT */
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">index bf9638e..de32ca3 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_chunk">@@ -2,6 +2,8 @@</span> <span class="p_context"></span>
 #define _ASM_X86_PGTABLE_DEFS_H
 
 #include &lt;linux/const.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="p_add">+</span>
 #include &lt;asm/page_types.h&gt;
 
 #define FIRST_USER_ADDRESS	0UL
<span class="p_chunk">@@ -121,10 +123,10 @@</span> <span class="p_context"></span>
 
 #define _PAGE_PROTNONE	(_AT(pteval_t, 1) &lt;&lt; _PAGE_BIT_PROTNONE)
 
<span class="p_del">-#define _PAGE_TABLE	(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER |	\</span>
<span class="p_del">-			 _PAGE_ACCESSED | _PAGE_DIRTY)</span>
<span class="p_del">-#define _KERNPG_TABLE	(_PAGE_PRESENT | _PAGE_RW | _PAGE_ACCESSED |	\</span>
<span class="p_del">-			 _PAGE_DIRTY)</span>
<span class="p_add">+#define _PAGE_TABLE_NOENC	(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER |\</span>
<span class="p_add">+				 _PAGE_ACCESSED | _PAGE_DIRTY)</span>
<span class="p_add">+#define _KERNPG_TABLE_NOENC	(_PAGE_PRESENT | _PAGE_RW |		\</span>
<span class="p_add">+				 _PAGE_ACCESSED | _PAGE_DIRTY)</span>
 
 /*
  * Set of bits not changed in pte_modify.  The pte&#39;s
<span class="p_chunk">@@ -191,18 +193,29 @@</span> <span class="p_context"> enum page_cache_mode {</span>
 #define __PAGE_KERNEL_IO		(__PAGE_KERNEL)
 #define __PAGE_KERNEL_IO_NOCACHE	(__PAGE_KERNEL_NOCACHE)
 
<span class="p_del">-#define PAGE_KERNEL			__pgprot(__PAGE_KERNEL)</span>
<span class="p_del">-#define PAGE_KERNEL_RO			__pgprot(__PAGE_KERNEL_RO)</span>
<span class="p_del">-#define PAGE_KERNEL_EXEC		__pgprot(__PAGE_KERNEL_EXEC)</span>
<span class="p_del">-#define PAGE_KERNEL_RX			__pgprot(__PAGE_KERNEL_RX)</span>
<span class="p_del">-#define PAGE_KERNEL_NOCACHE		__pgprot(__PAGE_KERNEL_NOCACHE)</span>
<span class="p_del">-#define PAGE_KERNEL_LARGE		__pgprot(__PAGE_KERNEL_LARGE)</span>
<span class="p_del">-#define PAGE_KERNEL_LARGE_EXEC		__pgprot(__PAGE_KERNEL_LARGE_EXEC)</span>
<span class="p_del">-#define PAGE_KERNEL_VSYSCALL		__pgprot(__PAGE_KERNEL_VSYSCALL)</span>
<span class="p_del">-#define PAGE_KERNEL_VVAR		__pgprot(__PAGE_KERNEL_VVAR)</span>
<span class="p_del">-</span>
<span class="p_del">-#define PAGE_KERNEL_IO			__pgprot(__PAGE_KERNEL_IO)</span>
<span class="p_del">-#define PAGE_KERNEL_IO_NOCACHE		__pgprot(__PAGE_KERNEL_IO_NOCACHE)</span>
<span class="p_add">+#ifndef __ASSEMBLY__</span>
<span class="p_add">+</span>
<span class="p_add">+#define _PAGE_ENC	(_AT(pteval_t, sme_me_mask))</span>
<span class="p_add">+</span>
<span class="p_add">+#define _PAGE_TABLE	(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER |	\</span>
<span class="p_add">+			 _PAGE_ACCESSED | _PAGE_DIRTY | _PAGE_ENC)</span>
<span class="p_add">+#define _KERNPG_TABLE	(_PAGE_PRESENT | _PAGE_RW | _PAGE_ACCESSED |	\</span>
<span class="p_add">+			 _PAGE_DIRTY | _PAGE_ENC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define PAGE_KERNEL		__pgprot(__PAGE_KERNEL | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_RO		__pgprot(__PAGE_KERNEL_RO | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_EXEC	__pgprot(__PAGE_KERNEL_EXEC | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_RX		__pgprot(__PAGE_KERNEL_RX | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_NOCACHE	__pgprot(__PAGE_KERNEL_NOCACHE | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_LARGE	__pgprot(__PAGE_KERNEL_LARGE | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_LARGE_EXEC	__pgprot(__PAGE_KERNEL_LARGE_EXEC | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_VSYSCALL	__pgprot(__PAGE_KERNEL_VSYSCALL | _PAGE_ENC)</span>
<span class="p_add">+#define PAGE_KERNEL_VVAR	__pgprot(__PAGE_KERNEL_VVAR | _PAGE_ENC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define PAGE_KERNEL_IO		__pgprot(__PAGE_KERNEL_IO)</span>
<span class="p_add">+#define PAGE_KERNEL_IO_NOCACHE	__pgprot(__PAGE_KERNEL_IO_NOCACHE)</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* __ASSEMBLY__ */</span>
 
 /*         xwr */
 #define __P000	PAGE_NONE
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 6a79547..a68f70c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -29,6 +29,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/math64.h&gt;
 #include &lt;linux/err.h&gt;
 #include &lt;linux/irqflags.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 /*
  * We handle most unaligned accesses in hardware.  On the other hand
<span class="p_chunk">@@ -241,7 +242,7 @@</span> <span class="p_context"> static inline unsigned long read_cr3_pa(void)</span>
 
 static inline void load_cr3(pgd_t *pgdir)
 {
<span class="p_del">-	write_cr3(__pa(pgdir));</span>
<span class="p_add">+	write_cr3(__sme_pa(pgdir));</span>
 }
 
 #ifdef CONFIG_X86_32
<span class="p_header">diff --git a/arch/x86/kernel/espfix_64.c b/arch/x86/kernel/espfix_64.c</span>
<span class="p_header">index 6b91e2e..9c4e7ba 100644</span>
<span class="p_header">--- a/arch/x86/kernel/espfix_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/espfix_64.c</span>
<span class="p_chunk">@@ -195,7 +195,7 @@</span> <span class="p_context"> void init_espfix_ap(int cpu)</span>
 
 	pte_p = pte_offset_kernel(&amp;pmd, addr);
 	stack_page = page_address(alloc_pages_node(node, GFP_KERNEL, 0));
<span class="p_del">-	pte = __pte(__pa(stack_page) | (__PAGE_KERNEL_RO &amp; ptemask));</span>
<span class="p_add">+	pte = __pte(__pa(stack_page) | ((__PAGE_KERNEL_RO | _PAGE_ENC) &amp; ptemask));</span>
 	for (n = 0; n &lt; ESPFIX_PTE_CLONES; n++)
 		set_pte(&amp;pte_p[n*PTE_STRIDE], pte);
 
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index 1f0ddcc..5cd0b72 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -102,7 +102,7 @@</span> <span class="p_context"> unsigned long __head __startup_64(unsigned long physaddr)</span>
 
 	pud = fixup_pointer(early_dynamic_pgts[next_early_pgt++], physaddr);
 	pmd = fixup_pointer(early_dynamic_pgts[next_early_pgt++], physaddr);
<span class="p_del">-	pgtable_flags = _KERNPG_TABLE + sme_get_me_mask();</span>
<span class="p_add">+	pgtable_flags = _KERNPG_TABLE_NOENC + sme_get_me_mask();</span>
 
 	if (IS_ENABLED(CONFIG_X86_5LEVEL)) {
 		p4d = fixup_pointer(early_dynamic_pgts[next_early_pgt++], physaddr);
<span class="p_chunk">@@ -177,7 +177,7 @@</span> <span class="p_context"> static void __init reset_early_page_tables(void)</span>
 {
 	memset(early_top_pgt, 0, sizeof(pgd_t)*(PTRS_PER_PGD-1));
 	next_early_pgt = 0;
<span class="p_del">-	write_cr3(__pa_nodebug(early_top_pgt));</span>
<span class="p_add">+	write_cr3(__sme_pa_nodebug(early_top_pgt));</span>
 }
 
 /* Create a new PMD entry */
<span class="p_chunk">@@ -310,6 +310,13 @@</span> <span class="p_context"> asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)</span>
 
 	clear_page(init_top_pgt);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * SME support may update early_pmd_flags to include the memory</span>
<span class="p_add">+	 * encryption mask, so it needs to be called before anything</span>
<span class="p_add">+	 * that may generate a page fault.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	sme_early_init();</span>
<span class="p_add">+</span>
 	kasan_early_init();
 
 	for (i = 0; i &lt; NUM_EXCEPTION_VECTORS; i++)
<span class="p_header">diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S</span>
<span class="p_header">index ec5d5e9..513cbb0 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/x86/kernel/head_64.S</span>
<span class="p_chunk">@@ -351,9 +351,9 @@</span> <span class="p_context"> GLOBAL(name)</span>
 NEXT_PAGE(early_top_pgt)
 	.fill	511,8,0
 #ifdef CONFIG_X86_5LEVEL
<span class="p_del">-	.quad	level4_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad	level4_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 #else
<span class="p_del">-	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 #endif
 
 NEXT_PAGE(early_dynamic_pgts)
<span class="p_chunk">@@ -366,15 +366,15 @@</span> <span class="p_context"> NEXT_PAGE(init_top_pgt)</span>
 	.fill	512,8,0
 #else
 NEXT_PAGE(init_top_pgt)
<span class="p_del">-	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE</span>
<span class="p_add">+	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE_NOENC</span>
 	.org    init_top_pgt + PGD_PAGE_OFFSET*8, 0
<span class="p_del">-	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE</span>
<span class="p_add">+	.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE_NOENC</span>
 	.org    init_top_pgt + PGD_START_KERNEL*8, 0
 	/* (2^48-(2*1024*1024*1024))/(2^39) = 511 */
<span class="p_del">-	.quad   level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad   level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 
 NEXT_PAGE(level3_ident_pgt)
<span class="p_del">-	.quad	level2_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE</span>
<span class="p_add">+	.quad	level2_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE_NOENC</span>
 	.fill	511, 8, 0
 NEXT_PAGE(level2_ident_pgt)
 	/* Since I easily can, map the first 1G.
<span class="p_chunk">@@ -386,14 +386,14 @@</span> <span class="p_context"> NEXT_PAGE(level2_ident_pgt)</span>
 #ifdef CONFIG_X86_5LEVEL
 NEXT_PAGE(level4_kernel_pgt)
 	.fill	511,8,0
<span class="p_del">-	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 #endif
 
 NEXT_PAGE(level3_kernel_pgt)
 	.fill	L3_START_KERNEL,8,0
 	/* (2^48-(2*1024*1024*1024)-((2^39)*511))/(2^30) = 510 */
<span class="p_del">-	.quad	level2_kernel_pgt - __START_KERNEL_map + _KERNPG_TABLE</span>
<span class="p_del">-	.quad	level2_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad	level2_kernel_pgt - __START_KERNEL_map + _KERNPG_TABLE_NOENC</span>
<span class="p_add">+	.quad	level2_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 
 NEXT_PAGE(level2_kernel_pgt)
 	/*
<span class="p_chunk">@@ -411,7 +411,7 @@</span> <span class="p_context"> NEXT_PAGE(level2_kernel_pgt)</span>
 
 NEXT_PAGE(level2_fixmap_pgt)
 	.fill	506,8,0
<span class="p_del">-	.quad	level1_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE</span>
<span class="p_add">+	.quad	level1_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC</span>
 	/* 8MB reserved for vsyscalls + a 2MB hole = 4 + 1 entries */
 	.fill	5,8,0
 
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 02c9d75..39d4daf 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -87,7 +87,7 @@</span> <span class="p_context"> static int kasan_die_handler(struct notifier_block *self,</span>
 void __init kasan_early_init(void)
 {
 	int i;
<span class="p_del">-	pteval_t pte_val = __pa_nodebug(kasan_zero_page) | __PAGE_KERNEL;</span>
<span class="p_add">+	pteval_t pte_val = __pa_nodebug(kasan_zero_page) | __PAGE_KERNEL | _PAGE_ENC;</span>
 	pmdval_t pmd_val = __pa_nodebug(kasan_zero_pte) | _KERNPG_TABLE;
 	pudval_t pud_val = __pa_nodebug(kasan_zero_pmd) | _KERNPG_TABLE;
 	p4dval_t p4d_val = __pa_nodebug(kasan_zero_pud) | _KERNPG_TABLE;
<span class="p_chunk">@@ -153,7 +153,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 	 */
 	memset(kasan_zero_page, 0, PAGE_SIZE);
 	for (i = 0; i &lt; PTRS_PER_PTE; i++) {
<span class="p_del">-		pte_t pte = __pte(__pa(kasan_zero_page) | __PAGE_KERNEL_RO);</span>
<span class="p_add">+		pte_t pte = __pte(__pa(kasan_zero_page) | __PAGE_KERNEL_RO | _PAGE_ENC);</span>
 		set_pte(&amp;kasan_zero_pte[i], pte);
 	}
 	/* Flush TLBs again to be sure that write protection applied. */
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 3ac6f99..f973d3d 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/linkage.h&gt;
 #include &lt;linux/init.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -21,6 +22,22 @@</span> <span class="p_context"></span>
 unsigned long sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+void __init sme_early_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	early_pmd_flags = __sme_set(early_pmd_flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	__supported_pte_mask = __sme_set(__supported_pte_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Update the protection map with memory encryption mask */</span>
<span class="p_add">+	for (i = 0; i &lt; ARRAY_SIZE(protection_map); i++)</span>
<span class="p_add">+		protection_map[i] = pgprot_encrypted(protection_map[i]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void)
 {
 }
<span class="p_header">diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c</span>
<span class="p_header">index 757b0bc..7e2d6c0 100644</span>
<span class="p_header">--- a/arch/x86/mm/pageattr.c</span>
<span class="p_header">+++ b/arch/x86/mm/pageattr.c</span>
<span class="p_chunk">@@ -2020,6 +2020,9 @@</span> <span class="p_context"> int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,</span>
 	if (!(page_flags &amp; _PAGE_RW))
 		cpa.mask_clr = __pgprot(_PAGE_RW);
 
<span class="p_add">+	if (!(page_flags &amp; _PAGE_ENC))</span>
<span class="p_add">+		cpa.mask_clr = pgprot_encrypted(cpa.mask_clr);</span>
<span class="p_add">+</span>
 	cpa.mask_set = __pgprot(_PAGE_PRESENT | page_flags);
 
 	retval = __change_page_attr_set_clr(&amp;cpa, 0);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 2c1b888..593d2f7 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -115,7 +115,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			 */
 			this_cpu_write(cpu_tlbstate.ctxs[0].tlb_gen,
 				       next_tlb_gen);
<span class="p_del">-			write_cr3(__pa(next-&gt;pgd));</span>
<span class="p_add">+			write_cr3(__sme_pa(next-&gt;pgd));</span>
 			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH,
 					TLB_FLUSH_ALL);
 		}
<span class="p_chunk">@@ -157,7 +157,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 		this_cpu_write(cpu_tlbstate.ctxs[0].ctx_id, next-&gt;context.ctx_id);
 		this_cpu_write(cpu_tlbstate.ctxs[0].tlb_gen, next_tlb_gen);
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
<span class="p_del">-		write_cr3(__pa(next-&gt;pgd));</span>
<span class="p_add">+		write_cr3(__sme_pa(next-&gt;pgd));</span>
 
 		trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);
 	}
<span class="p_header">diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h</span>
<span class="p_header">index 7dfa767..4d7bb98 100644</span>
<span class="p_header">--- a/include/asm-generic/pgtable.h</span>
<span class="p_header">+++ b/include/asm-generic/pgtable.h</span>
<span class="p_chunk">@@ -583,6 +583,18 @@</span> <span class="p_context"> static inline void ptep_modify_prot_commit(struct mm_struct *mm,</span>
 #endif /* CONFIG_MMU */
 
 /*
<span class="p_add">+ * No-op macros that just return the current protection value. Defined here</span>
<span class="p_add">+ * because these macros can be used used even if CONFIG_MMU is not defined.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifndef pgprot_encrypted</span>
<span class="p_add">+#define pgprot_encrypted(prot)	(prot)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef pgprot_decrypted</span>
<span class="p_add">+#define pgprot_decrypted(prot)	(prot)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * A facility to provide lazy MMU batching.  This allows PTE updates and
  * page invalidations to be delayed until a call to leave lazy MMU mode
  * is issued.  Some architectures may benefit from doing this, and it is
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 570f4fc..1255f09 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -35,6 +35,14 @@</span> <span class="p_context"> static inline unsigned long sme_get_me_mask(void)</span>
 	return sme_me_mask;
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The __sme_set() and __sme_clr() macros are useful for adding or removing</span>
<span class="p_add">+ * the encryption mask from a value (e.g. when dealing with pagetable</span>
<span class="p_add">+ * entries).</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define __sme_set(x)		((unsigned long)(x) | sme_me_mask)</span>
<span class="p_add">+#define __sme_clr(x)		((unsigned long)(x) &amp; ~sme_me_mask)</span>
<span class="p_add">+</span>
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __MEM_ENCRYPT_H__ */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



