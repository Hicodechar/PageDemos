
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[6/6] mm: add preempt points into __purge_vmap_area_lazy - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [6/6] mm: add preempt points into __purge_vmap_area_lazy</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 18, 2016, 6:56 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1476773771-11470-7-git-send-email-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9381397/mbox/"
   >mbox</a>
|
   <a href="/patch/9381397/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9381397/">/patch/9381397/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7039A60839 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:56:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5EC8E29404
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:56:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 52DCC2940D; Tue, 18 Oct 2016 06:56:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_WEB autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F244229405
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:56:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932817AbcJRG4o (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Oct 2016 02:56:44 -0400
Received: from bombadil.infradead.org ([198.137.202.9]:52387 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932620AbcJRG4k (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Oct 2016 02:56:40 -0400
Received: from 213162068076.public.t-mobile.at ([213.162.68.76]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.85_2 #1 (Red Hat
	Linux)) id 1bwOKE-0007Ck-2k; Tue, 18 Oct 2016 06:56:38 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: akpm@linux-foundation.org
Cc: joelaf@google.com, jszhang@marvell.com, chris@chris-wilson.co.uk,
	joaodias@google.com, linux-mm@kvack.org,
	linux-rt-users@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 6/6] mm: add preempt points into __purge_vmap_area_lazy
Date: Tue, 18 Oct 2016 08:56:11 +0200
Message-Id: &lt;1476773771-11470-7-git-send-email-hch@lst.de&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1476773771-11470-1-git-send-email-hch@lst.de&gt;
References: &lt;1476773771-11470-1-git-send-email-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Oct. 18, 2016, 6:56 a.m.</div>
<pre class="content">
<span class="from">From: Joel Fernandes &lt;joelaf@google.com&gt;</span>

Use cond_resched_lock to avoid holding the vmap_area_lock for a
potentially long time.
<span class="signed-off-by">
Signed-off-by: Joel Fernandes &lt;joelaf@google.com&gt;</span>
[hch: split from a larger patch by Joel, wrote the crappy changelog]
<span class="signed-off-by">Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 mm/vmalloc.c | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - Oct. 18, 2016, 8:56 p.m.</div>
<pre class="content">
On Tue, Oct 18, 2016 at 08:56:11AM +0200, Christoph Hellwig wrote:
<span class="quote">&gt; From: Joel Fernandes &lt;joelaf@google.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use cond_resched_lock to avoid holding the vmap_area_lock for a</span>
<span class="quote">&gt; potentially long time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Joel Fernandes &lt;joelaf@google.com&gt;</span>
<span class="quote">&gt; [hch: split from a larger patch by Joel, wrote the crappy changelog]</span>
<span class="quote">&gt; Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/vmalloc.c | 14 +++++++++-----</span>
<span class="quote">&gt;  1 file changed, 9 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="quote">&gt; index 6c7eb8d..98b19ea 100644</span>
<span class="quote">&gt; --- a/mm/vmalloc.c</span>
<span class="quote">&gt; +++ b/mm/vmalloc.c</span>
<span class="quote">&gt; @@ -628,7 +628,7 @@ static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)</span>
<span class="quote">&gt;  	struct llist_node *valist;</span>
<span class="quote">&gt;  	struct vmap_area *va;</span>
<span class="quote">&gt;  	struct vmap_area *n_va;</span>
<span class="quote">&gt; -	int nr = 0;</span>
<span class="quote">&gt; +	bool do_free = false;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	lockdep_assert_held(&amp;vmap_purge_lock);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -638,18 +638,22 @@ static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)</span>
<span class="quote">&gt;  			start = va-&gt;va_start;</span>
<span class="quote">&gt;  		if (va-&gt;va_end &gt; end)</span>
<span class="quote">&gt;  			end = va-&gt;va_end;</span>
<span class="quote">&gt; -		nr += (va-&gt;va_end - va-&gt;va_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +		do_free = true;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (!nr)</span>
<span class="quote">&gt; +	if (!do_free)</span>
<span class="quote">&gt;  		return false;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	atomic_sub(nr, &amp;vmap_lazy_nr);</span>
<span class="quote">&gt;  	flush_tlb_kernel_range(start, end);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_lock(&amp;vmap_area_lock);</span>
<span class="quote">&gt; -	llist_for_each_entry_safe(va, n_va, valist, purge_list)</span>
<span class="quote">&gt; +	llist_for_each_entry_safe(va, n_va, valist, purge_list) {</span>
<span class="quote">&gt; +		int nr = (va-&gt;va_end - va-&gt;va_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		__free_vmap_area(va);</span>
<span class="quote">&gt; +		atomic_sub(nr, &amp;vmap_lazy_nr);</span>
<span class="quote">&gt; +		cond_resched_lock(&amp;vmap_area_lock);</span>

Is releasing the lock within a llist_for_each_entry_safe() actually safe? Is
vmap_area_lock the one to protect the valist?

That is llist_for_each_entry_safe(va, n_va, valist, purg_list) does:

	for (va = llist_entry(valist, typeof(*va), purge_list);
	     &amp;va-&gt;purge_list != NULL &amp;&amp;
	     n_va = llist_entry(va-&gt;purge_list.next, typeof(*n_va),
				purge_list, true);
	     pos = n)

Thus n_va is pointing to the next element to process when we release the
lock. Is it possible for another task to get into this same path and process
the item that n_va is pointing to? Then when the preempted task comes back,
grabs the vmap_area_lock, and then continues the loop with what n_va has,
could that cause problems? That is, the next iteration after releasing the
lock does va = n_va. What happens if n_va no longer exits?

I don&#39;t know this code that well, and perhaps vmap_area_lock is not protecting
the list and this is all fine.

-- Steve
<span class="quote">

&gt; +	}</span>
<span class="quote">&gt;  	spin_unlock(&amp;vmap_area_lock);</span>
<span class="quote">&gt;  	return true;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.1.4</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - Oct. 18, 2016, 9:01 p.m.</div>
<pre class="content">
On Tue, 18 Oct 2016 16:56:48 -0400
Steven Rostedt &lt;rostedt@goodmis.org&gt; wrote:
<span class="quote">

&gt; Is releasing the lock within a llist_for_each_entry_safe() actually safe? Is</span>
<span class="quote">&gt; vmap_area_lock the one to protect the valist?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That is llist_for_each_entry_safe(va, n_va, valist, purg_list) does:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	for (va = llist_entry(valist, typeof(*va), purge_list);</span>
<span class="quote">&gt; 	     &amp;va-&gt;purge_list != NULL &amp;&amp;</span>
<span class="quote">&gt; 	     n_va = llist_entry(va-&gt;purge_list.next, typeof(*n_va),</span>
<span class="quote">&gt; 				purge_list, true);</span>
<span class="quote">&gt; 	     pos = n)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thus n_va is pointing to the next element to process when we release the</span>
<span class="quote">&gt; lock. Is it possible for another task to get into this same path and process</span>
<span class="quote">&gt; the item that n_va is pointing to? Then when the preempted task comes back,</span>
<span class="quote">&gt; grabs the vmap_area_lock, and then continues the loop with what n_va has,</span>
<span class="quote">&gt; could that cause problems? That is, the next iteration after releasing the</span>
<span class="quote">&gt; lock does va = n_va. What happens if n_va no longer exits?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t know this code that well, and perhaps vmap_area_lock is not protecting</span>
<span class="quote">&gt; the list and this is all fine.</span>
<span class="quote">&gt; </span>

Bah, nevermind. I missed the:

	valist = llist_del_all(&amp;vmap_purge_list);

so yeah, all should be good.

Nothing to see here, move along please.

-- Steve
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index 6c7eb8d..98b19ea 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -628,7 +628,7 @@</span> <span class="p_context"> static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)</span>
 	struct llist_node *valist;
 	struct vmap_area *va;
 	struct vmap_area *n_va;
<span class="p_del">-	int nr = 0;</span>
<span class="p_add">+	bool do_free = false;</span>
 
 	lockdep_assert_held(&amp;vmap_purge_lock);
 
<span class="p_chunk">@@ -638,18 +638,22 @@</span> <span class="p_context"> static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)</span>
 			start = va-&gt;va_start;
 		if (va-&gt;va_end &gt; end)
 			end = va-&gt;va_end;
<span class="p_del">-		nr += (va-&gt;va_end - va-&gt;va_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		do_free = true;</span>
 	}
 
<span class="p_del">-	if (!nr)</span>
<span class="p_add">+	if (!do_free)</span>
 		return false;
 
<span class="p_del">-	atomic_sub(nr, &amp;vmap_lazy_nr);</span>
 	flush_tlb_kernel_range(start, end);
 
 	spin_lock(&amp;vmap_area_lock);
<span class="p_del">-	llist_for_each_entry_safe(va, n_va, valist, purge_list)</span>
<span class="p_add">+	llist_for_each_entry_safe(va, n_va, valist, purge_list) {</span>
<span class="p_add">+		int nr = (va-&gt;va_end - va-&gt;va_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
 		__free_vmap_area(va);
<span class="p_add">+		atomic_sub(nr, &amp;vmap_lazy_nr);</span>
<span class="p_add">+		cond_resched_lock(&amp;vmap_area_lock);</span>
<span class="p_add">+	}</span>
 	spin_unlock(&amp;vmap_area_lock);
 	return true;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



