
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,2/2] mm,sched: include memalloc info when printing debug dump of a task. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,2/2] mm,sched: include memalloc info when printing debug dump of a task.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 1, 2017, 12:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1504269608-9202-2-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9934047/mbox/"
   >mbox</a>
|
   <a href="/patch/9934047/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9934047/">/patch/9934047/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A76B96016C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Sep 2017 12:41:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 966F828641
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Sep 2017 12:41:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8ABFE28657; Fri,  1 Sep 2017 12:41:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D476528641
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Sep 2017 12:41:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752008AbdIAMkf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 1 Sep 2017 08:40:35 -0400
Received: from www262.sakura.ne.jp ([202.181.97.72]:27384 &quot;EHLO
	www262.sakura.ne.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751778AbdIAMka (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 1 Sep 2017 08:40:30 -0400
Received: from fsav405.sakura.ne.jp (fsav405.sakura.ne.jp [133.242.250.104])
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id
	v81CeSrx052728; Fri, 1 Sep 2017 21:40:28 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72) by fsav405.sakura.ne.jp
	(F-Secure/fsigk_smtp/530/fsav405.sakura.ne.jp); 
	Fri, 01 Sep 2017 21:40:28 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav405.sakura.ne.jp)
Received: from ccsecurity.localdomain (softbank126072090071.bbtec.net
	[126.72.90.71]) (authenticated bits=0)
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id v81CeKRf052697
	(version=TLSv1/SSLv3 cipher=DHE-RSA-CAMELLIA256-SHA bits=256
	verify=NO); Fri, 1 Sep 2017 21:40:27 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
From: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
To: akpm@linux-foundation.org
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Dave Chinner &lt;david@fromorbit.com&gt;, David Rientjes &lt;rientjes@google.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Jan Kara &lt;jack@suse.cz&gt;,
	Jens Axboe &lt;axboe@kernel.dk&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, Oleg Nesterov &lt;oleg@redhat.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Tejun Heo &lt;tj@kernel.org&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;
Subject: [RFC PATCH 2/2] mm,
	sched: include memalloc info when printing debug dump of a task.
Date: Fri,  1 Sep 2017 21:40:08 +0900
Message-Id: &lt;1504269608-9202-2-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1504269608-9202-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;
References: &lt;1504269608-9202-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - Sept. 1, 2017, 12:40 p.m.</div>
<pre class="content">
When analyzing memory allocation stalls, ability to cleanly take snapshots
for knowing how far progress is made is important, but warn_alloc() is too
problematic to obtain useful information. I have been proposing memory
allocation watchdog kernel thread [1], but nobody seems to be interested
in using ability to take snapshots cleanly.

  [1] http://lkml.kernel.org/r/1495331504-12480-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp .

This patch is subset of the watchdog, which introduces a state tracking of
__GFP_DIRECT_RECLAIM memory allocations and prints MemAlloc: line to e.g.
SysRq-t output (like an example shown below).

----------
[  222.194538] a.out           R  running task        0  1976   1019 0x00000080
[  222.197091] MemAlloc: a.out(1976) flags=0x400840 switches=286 seq=142 gfp=0x1c2004a(GFP_NOFS|__GFP_HIGHMEM|__GFP_HARDWALL|__GFP_MOVABLE|__GFP_WRITE) order=0 delay=175646
[  222.202617] Call Trace:
[  222.203987]  __schedule+0x23f/0x5d0
[  222.205624]  _cond_resched+0x2d/0x40
[  222.207271]  shrink_page_list+0x61/0xb70
[  222.208960]  shrink_inactive_list+0x24c/0x510
[  222.210794]  shrink_node_memcg+0x360/0x780
[  222.212556]  ? shrink_slab.part.44+0x239/0x2c0
[  222.214409]  shrink_node+0xdc/0x310
[  222.215994]  ? shrink_node+0xdc/0x310
[  222.217617]  do_try_to_free_pages+0xea/0x360
[  222.219416]  try_to_free_pages+0xbd/0xf0
[  222.221120]  __alloc_pages_slowpath+0x464/0xe50
[  222.222992]  ? io_schedule_timeout+0x19/0x40
[  222.224790]  __alloc_pages_nodemask+0x253/0x2c0
[  222.226677]  alloc_pages_current+0x65/0xd0
[  222.228427]  __page_cache_alloc+0x81/0x90
[  222.230301]  pagecache_get_page+0xa6/0x210
[  222.232388]  grab_cache_page_write_begin+0x1e/0x40
[  222.234333]  iomap_write_begin.constprop.17+0x56/0x110
[  222.236375]  iomap_write_actor+0x8f/0x160
[  222.238115]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.240219]  iomap_apply+0x9a/0x110
[  222.241813]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.243925]  iomap_file_buffered_write+0x69/0x90
[  222.245828]  ? iomap_write_begin.constprop.17+0x110/0x110
[  222.247968]  xfs_file_buffered_aio_write+0xb7/0x200 [xfs]
[  222.250108]  xfs_file_write_iter+0x8d/0x130 [xfs]
[  222.252045]  __vfs_write+0xef/0x150
[  222.253635]  vfs_write+0xb0/0x190
[  222.255184]  SyS_write+0x50/0xc0
[  222.256689]  do_syscall_64+0x62/0x170
[  222.258312]  entry_SYSCALL64_slow_path+0x25/0x25
----------

----------
[  406.416809] a.out           R  running task        0  1976   1019 0x00000080
[  406.416811] MemAlloc: a.out(1976) flags=0x400840 switches=440 seq=142 gfp=0x1c2004a(GFP_NOFS|__GFP_HIGHMEM|__GFP_HARDWALL|__GFP_MOVABLE|__GFP_WRITE) order=0 delay=359866
[  406.416811] Call Trace:
[  406.416813]  __schedule+0x23f/0x5d0
[  406.416814]  _cond_resched+0x2d/0x40
[  406.416816]  wait_iff_congested+0x73/0x100
[  406.416817]  ? wait_woken+0x80/0x80
[  406.416819]  shrink_inactive_list+0x36a/0x510
[  406.416820]  shrink_node_memcg+0x360/0x780
[  406.416822]  ? shrink_slab.part.44+0x239/0x2c0
[  406.416824]  shrink_node+0xdc/0x310
[  406.416825]  ? shrink_node+0xdc/0x310
[  406.416827]  do_try_to_free_pages+0xea/0x360
[  406.416828]  try_to_free_pages+0xbd/0xf0
[  406.416829]  __alloc_pages_slowpath+0x464/0xe50
[  406.416831]  ? io_schedule_timeout+0x19/0x40
[  406.416832]  __alloc_pages_nodemask+0x253/0x2c0
[  406.416834]  alloc_pages_current+0x65/0xd0
[  406.416835]  __page_cache_alloc+0x81/0x90
[  406.416837]  pagecache_get_page+0xa6/0x210
[  406.416838]  grab_cache_page_write_begin+0x1e/0x40
[  406.416839]  iomap_write_begin.constprop.17+0x56/0x110
[  406.416841]  iomap_write_actor+0x8f/0x160
[  406.416842]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416844]  iomap_apply+0x9a/0x110
[  406.416845]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416846]  iomap_file_buffered_write+0x69/0x90
[  406.416848]  ? iomap_write_begin.constprop.17+0x110/0x110
[  406.416857]  xfs_file_buffered_aio_write+0xb7/0x200 [xfs]
[  406.416866]  xfs_file_write_iter+0x8d/0x130 [xfs]
[  406.416867]  __vfs_write+0xef/0x150
[  406.416869]  vfs_write+0xb0/0x190
[  406.416870]  SyS_write+0x50/0xc0
[  406.416871]  do_syscall_64+0x62/0x170
[  406.416872]  entry_SYSCALL64_slow_path+0x25/0x25
----------

But this patch can do more than that. This patch provides administrators
ability to take administrator-controlled actions based on some threshold
by polling like khungtaskd kernel thread using e.g. SystemTap script, for
this patch can record the timestamp of beginning of memory allocation
without risk of overflowing array capacity and/or skipping probes.

This patch traces at the page fault handler and the mempool allocator
in addition to slowpath of the page allocator, for the page fault handler
does sleeping operations other than calling the page allocator and the
mempool allocator fails to track accumulated delay due to __GFP_NORETRY
and fastpath of the page allocator does not use __GFP_DIRECT_RECLAIM.
<span class="signed-off-by">
Signed-off-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;</span>
Cc: Tejun Heo &lt;tj@kernel.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: Jan Kara &lt;jack@suse.cz&gt;
Cc: Oleg Nesterov &lt;oleg@redhat.com&gt;
Cc: Jens Axboe &lt;axboe@kernel.dk&gt;
Cc: Dave Chinner &lt;david@fromorbit.com&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;
---
 include/linux/gfp.h   |  8 ++++++++
 include/linux/sched.h | 15 +++++++++++++++
 kernel/fork.c         |  4 ++++
 kernel/sched/core.c   | 14 ++++++++++++++
 lib/Kconfig.debug     |  8 ++++++++
 mm/memory.c           |  5 +++++
 mm/mempool.c          |  9 ++++++++-
 mm/page_alloc.c       | 29 +++++++++++++++++++++++++++++
 8 files changed, 91 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="p_header">index f780718..2864d81 100644</span>
<span class="p_header">--- a/include/linux/gfp.h</span>
<span class="p_header">+++ b/include/linux/gfp.h</span>
<span class="p_chunk">@@ -496,6 +496,14 @@</span> <span class="p_context"> static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,</span>
 	return __alloc_pages_node(nid, gfp_mask, order);
 }
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+extern void start_memalloc_timer(const gfp_t gfp_mask, const int order);</span>
<span class="p_add">+extern void stop_memalloc_timer(const gfp_t gfp_mask);</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define start_memalloc_timer(gfp_mask, order) do { } while (0)</span>
<span class="p_add">+#define stop_memalloc_timer(gfp_mask) do { } while (0)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_NUMA
 extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);
 
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index 4d3a2a7..4162964 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -516,6 +516,18 @@</span> <span class="p_context"> struct wake_q_node {</span>
 	struct wake_q_node *next;
 };
 
<span class="p_add">+struct memalloc_info {</span>
<span class="p_add">+	/* Is current thread doing (nested) memory allocation? */</span>
<span class="p_add">+	u8 in_flight;</span>
<span class="p_add">+	/* For progress monitoring. */</span>
<span class="p_add">+	unsigned int sequence;</span>
<span class="p_add">+	/* Started time in jiffies as of in_flight == 1. */</span>
<span class="p_add">+	unsigned long start;</span>
<span class="p_add">+	/* Requested order and gfp flags as of in_flight == 1. */</span>
<span class="p_add">+	unsigned int order;</span>
<span class="p_add">+	gfp_t gfp;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/*
<span class="p_chunk">@@ -1097,6 +1109,9 @@</span> <span class="p_context"> struct task_struct {</span>
 	/* Used by LSM modules for access restriction: */
 	void				*security;
 #endif
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	struct memalloc_info		memalloc;</span>
<span class="p_add">+#endif</span>
 
 	/*
 	 * New fields for task_struct should be added above here, so that
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 1064618..a068ba8 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -1701,6 +1701,10 @@</span> <span class="p_context"> static __latent_entropy struct task_struct *copy_process(</span>
 	p-&gt;sequential_io_avg	= 0;
 #endif
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	p-&gt;memalloc.sequence = 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	/* Perform scheduler related setup. Assign this task to a CPU. */
 	retval = sched_fork(clone_flags, p);
 	if (retval)
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">index 83c0e54..bed843d 100644</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -5143,6 +5143,19 @@</span> <span class="p_context"> void io_schedule(void)</span>
 	return retval;
 }
 
<span class="p_add">+static inline void print_memalloc_info(struct task_struct *p)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	const struct memalloc_info *m = &amp;p-&gt;memalloc;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(m-&gt;in_flight))</span>
<span class="p_add">+		pr_info(&quot;MemAlloc: %s(%u) flags=0x%x switches=%lu seq=%u gfp=0x%x(%pGg) order=%u delay=%lu\n&quot;,</span>
<span class="p_add">+			p-&gt;comm, p-&gt;pid, p-&gt;flags, p-&gt;nvcsw + p-&gt;nivcsw,</span>
<span class="p_add">+			m-&gt;sequence, m-&gt;gfp, &amp;m-&gt;gfp, m-&gt;order,</span>
<span class="p_add">+			jiffies - m-&gt;start);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void sched_show_task(struct task_struct *p)
 {
 	unsigned long free = 0;
<span class="p_chunk">@@ -5167,6 +5180,7 @@</span> <span class="p_context"> void sched_show_task(struct task_struct *p)</span>
 		task_pid_nr(p), ppid,
 		(unsigned long)task_thread_info(p)-&gt;flags);
 
<span class="p_add">+	print_memalloc_info(p);</span>
 	print_worker_info(KERN_INFO, p);
 	show_stack(p, NULL);
 	put_task_stack(p);
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index b19c491..0bc883e 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -934,6 +934,14 @@</span> <span class="p_context"> config WQ_WATCHDOG</span>
 	  state.  This can be configured through kernel parameter
 	  &quot;workqueue.watchdog_thresh&quot; and its sysfs counterpart.
 
<span class="p_add">+config DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+	bool &quot;Print memory allocation status line to thread dumps&quot;</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  Say Y here to emit memory allocation status line when e.g. SysRq-t</span>
<span class="p_add">+	  is requested, in order to help analyzing problems under memory</span>
<span class="p_add">+	  pressure.</span>
<span class="p_add">+</span>
 endmenu # &quot;Debug lockups and hangs&quot;
 
 config PANIC_ON_OOPS
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 0dcee47..d04ef2e 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -4044,6 +4044,7 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 		unsigned int flags)
 {
 	int ret;
<span class="p_add">+	gfp_t mask;</span>
 
 	__set_current_state(TASK_RUNNING);
 
<span class="p_chunk">@@ -4065,6 +4066,9 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 					    flags &amp; FAULT_FLAG_REMOTE))
 		return VM_FAULT_SIGSEGV;
 
<span class="p_add">+	mask = __get_fault_gfp_mask(vma);</span>
<span class="p_add">+	start_memalloc_timer(mask, 0);</span>
<span class="p_add">+</span>
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		ret = hugetlb_fault(vma-&gt;vm_mm, vma, address, flags);
 	else
<span class="p_chunk">@@ -4082,6 +4086,7 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 			mem_cgroup_oom_synchronize(false);
 	}
 
<span class="p_add">+	stop_memalloc_timer(mask);</span>
 	return ret;
 }
 EXPORT_SYMBOL_GPL(handle_mm_fault);
<span class="p_header">diff --git a/mm/mempool.c b/mm/mempool.c</span>
<span class="p_header">index 1c02948..796e180 100644</span>
<span class="p_header">--- a/mm/mempool.c</span>
<span class="p_header">+++ b/mm/mempool.c</span>
<span class="p_chunk">@@ -324,11 +324,14 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 
 	gfp_temp = gfp_mask &amp; ~(__GFP_DIRECT_RECLAIM|__GFP_IO);
 
<span class="p_add">+	start_memalloc_timer(gfp_temp, -1);</span>
 repeat_alloc:
 
 	element = pool-&gt;alloc(gfp_temp, pool-&gt;pool_data);
<span class="p_del">-	if (likely(element != NULL))</span>
<span class="p_add">+	if (likely(element != NULL)) {</span>
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return element;
<span class="p_add">+	}</span>
 
 	spin_lock_irqsave(&amp;pool-&gt;lock, flags);
 	if (likely(pool-&gt;curr_nr)) {
<span class="p_chunk">@@ -341,6 +344,7 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 		 * for debugging.
 		 */
 		kmemleak_update_trace(element);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return element;
 	}
 
<span class="p_chunk">@@ -350,13 +354,16 @@</span> <span class="p_context"> void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)</span>
 	 */
 	if (gfp_temp != gfp_mask) {
 		spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		gfp_temp = gfp_mask;
<span class="p_add">+		start_memalloc_timer(gfp_temp, -1);</span>
 		goto repeat_alloc;
 	}
 
 	/* We must not sleep if !__GFP_DIRECT_RECLAIM */
 	if (!(gfp_mask &amp; __GFP_DIRECT_RECLAIM)) {
 		spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
<span class="p_add">+		stop_memalloc_timer(gfp_temp);</span>
 		return NULL;
 	}
 
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 20af138..3255b48 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -4170,6 +4170,33 @@</span> <span class="p_context"> static inline void finalise_ac(gfp_t gfp_mask,</span>
 					ac-&gt;high_zoneidx, ac-&gt;nodemask);
 }
 
<span class="p_add">+#ifdef CONFIG_DEBUG_SHOW_MEMALLOC_LINE</span>
<span class="p_add">+</span>
<span class="p_add">+void start_memalloc_timer(const gfp_t gfp_mask, const int order)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct memalloc_info *m = &amp;current-&gt;memalloc;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* We don&#39;t check for stalls for !__GFP_DIRECT_RECLAIM allocations. */</span>
<span class="p_add">+	if (!(gfp_mask &amp; __GFP_DIRECT_RECLAIM))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	/* Record the beginning of memory allocation request. */</span>
<span class="p_add">+	if (!m-&gt;in_flight) {</span>
<span class="p_add">+		m-&gt;sequence++;</span>
<span class="p_add">+		m-&gt;start = jiffies;</span>
<span class="p_add">+		m-&gt;order = order;</span>
<span class="p_add">+		m-&gt;gfp = gfp_mask;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	m-&gt;in_flight++;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void stop_memalloc_timer(const gfp_t gfp_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (gfp_mask &amp; __GFP_DIRECT_RECLAIM)</span>
<span class="p_add">+		current-&gt;memalloc.in_flight--;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * This is the &#39;heart&#39; of the zoned buddy allocator.
  */
<span class="p_chunk">@@ -4210,7 +4237,9 @@</span> <span class="p_context"> struct page *</span>
 	if (unlikely(ac.nodemask != nodemask))
 		ac.nodemask = nodemask;
 
<span class="p_add">+	start_memalloc_timer(alloc_mask, order);</span>
 	page = __alloc_pages_slowpath(alloc_mask, order, &amp;ac);
<span class="p_add">+	stop_memalloc_timer(alloc_mask);</span>
 
 out:
 	if (memcg_kmem_enabled() &amp;&amp; (gfp_mask &amp; __GFP_ACCOUNT) &amp;&amp; page &amp;&amp;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



