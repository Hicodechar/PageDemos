
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[12/14] dma-direct: handle the memory encryption bit in common code - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [12/14] dma-direct: handle the memory encryption bit in common code</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 14, 2018, 5:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180314175213.20256-13-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10283143/mbox/"
   >mbox</a>
|
   <a href="/patch/10283143/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10283143/">/patch/10283143/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BF08860621 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 112EE2852E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0612728534; Wed, 14 Mar 2018 17:53:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E8DA62852E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:53:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752470AbeCNRxU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Mar 2018 13:53:20 -0400
Received: from bombadil.infradead.org ([198.137.202.133]:55454 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752409AbeCNRxP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Mar 2018 13:53:15 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=JU2R5biqzR1AMf7BhPdKxOre9zQYcfTREq5c6J90l78=;
	b=U/xlsYY8qgNfgidkIuKDQNO13
	ieHYADJrY4jCujKiu18nZFk3usmdgDv5pPX79cKNImmv6tz/BKflRYOyr/NSE1HpWgNj3g5Nj4qtW
	SwB3mVRKjSrKvCHyj9EPJqGmtl0V93juzoVeB1oFvN9KF4q3dmOdJl0p+G9MppbfucT7jflLWuAnF
	+lStXNwu6RH43et9aV5tkQJfgbmdtnRO2axfCcFWWrUp1ipsaLDAdYk42Kikd2SUWanmwqrJ3Xa9/
	Hi5x65CwnMmmVgxcCWXbQzMuoH6ZSwg1joWScr1BLvxwt5t1u6tAArDIqXCSY14gYpsvFmrJ8jr7I
	N+tZmK3lQ==;
Received: from 178.114.241.23.wireless.dyn.drei.com ([178.114.241.23]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat
	Linux)) id 1ewAaJ-0000Pw-Pg; Wed, 14 Mar 2018 17:53:08 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: x86@kernel.org
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	David Woodhouse &lt;dwmw2@infradead.org&gt;, Muli Ben-Yehuda &lt;mulix@mulix.org&gt;,
	Jon Mason &lt;jdmason@kudzu.us&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Subject: [PATCH 12/14] dma-direct: handle the memory encryption bit in
	common code
Date: Wed, 14 Mar 2018 18:52:11 +0100
Message-Id: &lt;20180314175213.20256-13-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20180314175213.20256-1-hch@lst.de&gt;
References: &lt;20180314175213.20256-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 14, 2018, 5:52 p.m.</div>
<pre class="content">
Give the basic phys_to_dma and dma_to_phys helpers a __-prefix and add
the memory encryption mask to the non-prefixed versions.  Use the
__-prefixed versions directly instead of clearing the mask again in
various places.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 arch/arm/include/asm/dma-direct.h                  |  4 ++--
 arch/mips/cavium-octeon/dma-octeon.c               | 10 ++++-----
 .../include/asm/mach-cavium-octeon/dma-coherence.h |  4 ++--
 .../include/asm/mach-loongson64/dma-coherence.h    | 10 ++++-----
 arch/mips/loongson64/common/dma-swiotlb.c          |  4 ++--
 arch/powerpc/include/asm/dma-direct.h              |  4 ++--
 arch/x86/Kconfig                                   |  2 +-
 arch/x86/include/asm/dma-direct.h                  | 25 ++--------------------
 arch/x86/mm/mem_encrypt.c                          |  2 +-
 arch/x86/pci/sta2x11-fixup.c                       |  6 +++---
 include/linux/dma-direct.h                         | 21 ++++++++++++++++--
 lib/swiotlb.c                                      | 25 ++++++++--------------
 12 files changed, 53 insertions(+), 64 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/dma-direct.h b/arch/arm/include/asm/dma-direct.h</span>
<span class="p_header">index 5b0a8a421894..b67e5fc1fe43 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/dma-direct.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/dma-direct.h</span>
<span class="p_chunk">@@ -2,13 +2,13 @@</span> <span class="p_context"></span>
 #ifndef ASM_ARM_DMA_DIRECT_H
 #define ASM_ARM_DMA_DIRECT_H 1
 
<span class="p_del">-static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+static inline dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	unsigned int offset = paddr &amp; ~PAGE_MASK;
 	return pfn_to_dma(dev, __phys_to_pfn(paddr)) + offset;
 }
 
<span class="p_del">-static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t dev_addr)</span>
<span class="p_add">+static inline phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t dev_addr)</span>
 {
 	unsigned int offset = dev_addr &amp; ~PAGE_MASK;
 	return __pfn_to_phys(dma_to_pfn(dev, dev_addr)) + offset;
<span class="p_header">diff --git a/arch/mips/cavium-octeon/dma-octeon.c b/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_header">index c7bb8a407041..7b335ab21697 100644</span>
<span class="p_header">--- a/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_header">+++ b/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_chunk">@@ -10,7 +10,7 @@</span> <span class="p_context"></span>
  * IP32 changes by Ilya.
  * Copyright (C) 2010 Cavium Networks, Inc.
  */
<span class="p_del">-#include &lt;linux/dma-mapping.h&gt;</span>
<span class="p_add">+#include &lt;linux/dma-direct.h&gt;</span>
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/bootmem.h&gt;
 #include &lt;linux/export.h&gt;
<span class="p_chunk">@@ -182,7 +182,7 @@</span> <span class="p_context"> struct octeon_dma_map_ops {</span>
 	phys_addr_t (*dma_to_phys)(struct device *dev, dma_addr_t daddr);
 };
 
<span class="p_del">-dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	struct octeon_dma_map_ops *ops = container_of(get_dma_ops(dev),
 						      struct octeon_dma_map_ops,
<span class="p_chunk">@@ -190,9 +190,9 @@</span> <span class="p_context"> dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 
 	return ops-&gt;phys_to_dma(dev, paddr);
 }
<span class="p_del">-EXPORT_SYMBOL(phys_to_dma);</span>
<span class="p_add">+EXPORT_SYMBOL(__phys_to_dma);</span>
 
<span class="p_del">-phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_add">+phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
 {
 	struct octeon_dma_map_ops *ops = container_of(get_dma_ops(dev),
 						      struct octeon_dma_map_ops,
<span class="p_chunk">@@ -200,7 +200,7 @@</span> <span class="p_context"> phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
 
 	return ops-&gt;dma_to_phys(dev, daddr);
 }
<span class="p_del">-EXPORT_SYMBOL(dma_to_phys);</span>
<span class="p_add">+EXPORT_SYMBOL(__dma_to_phys);</span>
 
 static struct octeon_dma_map_ops octeon_linear_dma_map_ops = {
 	.dma_map_ops = {
<span class="p_header">diff --git a/arch/mips/include/asm/mach-cavium-octeon/dma-coherence.h b/arch/mips/include/asm/mach-cavium-octeon/dma-coherence.h</span>
<span class="p_header">index 138edf6b5b48..6eb1ee548b11 100644</span>
<span class="p_header">--- a/arch/mips/include/asm/mach-cavium-octeon/dma-coherence.h</span>
<span class="p_header">+++ b/arch/mips/include/asm/mach-cavium-octeon/dma-coherence.h</span>
<span class="p_chunk">@@ -69,8 +69,8 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 	return addr + size - 1 &lt;= *dev-&gt;dma_mask;
 }
 
<span class="p_del">-dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_del">-phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
<span class="p_add">+dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_add">+phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
 
 struct dma_map_ops;
 extern const struct dma_map_ops *octeon_pci_dma_map_ops;
<span class="p_header">diff --git a/arch/mips/include/asm/mach-loongson64/dma-coherence.h b/arch/mips/include/asm/mach-loongson64/dma-coherence.h</span>
<span class="p_header">index b1b575f5c6c1..64fc44dec0a8 100644</span>
<span class="p_header">--- a/arch/mips/include/asm/mach-loongson64/dma-coherence.h</span>
<span class="p_header">+++ b/arch/mips/include/asm/mach-loongson64/dma-coherence.h</span>
<span class="p_chunk">@@ -25,13 +25,13 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 	return addr + size - 1 &lt;= *dev-&gt;dma_mask;
 }
 
<span class="p_del">-extern dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_del">-extern phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
<span class="p_add">+extern dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_add">+extern phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
 static inline dma_addr_t plat_map_dma_mem(struct device *dev, void *addr,
 					  size_t size)
 {
 #ifdef CONFIG_CPU_LOONGSON3
<span class="p_del">-	return phys_to_dma(dev, virt_to_phys(addr));</span>
<span class="p_add">+	return __phys_to_dma(dev, virt_to_phys(addr));</span>
 #else
 	return virt_to_phys(addr) | 0x80000000;
 #endif
<span class="p_chunk">@@ -41,7 +41,7 @@</span> <span class="p_context"> static inline dma_addr_t plat_map_dma_mem_page(struct device *dev,</span>
 					       struct page *page)
 {
 #ifdef CONFIG_CPU_LOONGSON3
<span class="p_del">-	return phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+	return __phys_to_dma(dev, page_to_phys(page));</span>
 #else
 	return page_to_phys(page) | 0x80000000;
 #endif
<span class="p_chunk">@@ -51,7 +51,7 @@</span> <span class="p_context"> static inline unsigned long plat_dma_addr_to_phys(struct device *dev,</span>
 	dma_addr_t dma_addr)
 {
 #if defined(CONFIG_CPU_LOONGSON3) &amp;&amp; defined(CONFIG_64BIT)
<span class="p_del">-	return dma_to_phys(dev, dma_addr);</span>
<span class="p_add">+	return __dma_to_phys(dev, dma_addr);</span>
 #elif defined(CONFIG_CPU_LOONGSON2F) &amp;&amp; defined(CONFIG_64BIT)
 	return (dma_addr &gt; 0x8fffffff) ? dma_addr : (dma_addr &amp; 0x0fffffff);
 #else
<span class="p_header">diff --git a/arch/mips/loongson64/common/dma-swiotlb.c b/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_header">index 7bbcf89475f3..6a739f8ae110 100644</span>
<span class="p_header">--- a/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_header">+++ b/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_chunk">@@ -63,7 +63,7 @@</span> <span class="p_context"> static int loongson_dma_supported(struct device *dev, u64 mask)</span>
 	return swiotlb_dma_supported(dev, mask);
 }
 
<span class="p_del">-dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	long nid;
 #ifdef CONFIG_PHYS48_TO_HT40
<span class="p_chunk">@@ -75,7 +75,7 @@</span> <span class="p_context"> dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 	return paddr;
 }
 
<span class="p_del">-phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_add">+phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
 {
 	long nid;
 #ifdef CONFIG_PHYS48_TO_HT40
<span class="p_header">diff --git a/arch/powerpc/include/asm/dma-direct.h b/arch/powerpc/include/asm/dma-direct.h</span>
<span class="p_header">index a5b59c765426..7702875aabb7 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/dma-direct.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/dma-direct.h</span>
<span class="p_chunk">@@ -17,12 +17,12 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 	return addr + size - 1 &lt;= *dev-&gt;dma_mask;
 }
 
<span class="p_del">-static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+static inline dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	return paddr + get_dma_offset(dev);
 }
 
<span class="p_del">-static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_add">+static inline phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
 {
 	return daddr - get_dma_offset(dev);
 }
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 10f482beda1b..1ca4f0874517 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -54,7 +54,6 @@</span> <span class="p_context"> config X86</span>
 	select ARCH_HAS_FORTIFY_SOURCE
 	select ARCH_HAS_GCOV_PROFILE_ALL
 	select ARCH_HAS_KCOV			if X86_64
<span class="p_del">-	select ARCH_HAS_PHYS_TO_DMA</span>
 	select ARCH_HAS_MEMBARRIER_SYNC_CORE
 	select ARCH_HAS_PMEM_API		if X86_64
 	select ARCH_HAS_REFCOUNT
<span class="p_chunk">@@ -692,6 +691,7 @@</span> <span class="p_context"> config X86_SUPPORTS_MEMORY_FAILURE</span>
 config STA2X11
 	bool &quot;STA2X11 Companion Chip Support&quot;
 	depends on X86_32_NON_STANDARD &amp;&amp; PCI
<span class="p_add">+	select ARCH_HAS_PHYS_TO_DMA</span>
 	select X86_DEV_DMA_OPS
 	select X86_DMA_REMAP
 	select SWIOTLB
<span class="p_header">diff --git a/arch/x86/include/asm/dma-direct.h b/arch/x86/include/asm/dma-direct.h</span>
<span class="p_header">index 1295bc622ebe..1a19251eaac9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-direct.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-direct.h</span>
<span class="p_chunk">@@ -2,29 +2,8 @@</span> <span class="p_context"></span>
 #ifndef ASM_X86_DMA_DIRECT_H
 #define ASM_X86_DMA_DIRECT_H 1
 
<span class="p_del">-#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_X86_DMA_REMAP /* Platform code defines bridge-specific code */</span>
 bool dma_capable(struct device *dev, dma_addr_t addr, size_t size);
<span class="p_del">-dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_del">-phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
<span class="p_del">-#else</span>
<span class="p_del">-static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (!dev-&gt;dma_mask)</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	return addr + size - 1 &lt;= *dev-&gt;dma_mask;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return __sme_set(paddr);</span>
<span class="p_del">-}</span>
<span class="p_add">+dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr);</span>
<span class="p_add">+phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr);</span>
 
<span class="p_del">-static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return __sme_clr(daddr);</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif /* CONFIG_X86_DMA_REMAP */</span>
 #endif /* ASM_X86_DMA_DIRECT_H */
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index d3b80d5f9828..1a05bea831a8 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -216,7 +216,7 @@</span> <span class="p_context"> static void *sev_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
 		 * Since we will be clearing the encryption bit, check the
 		 * mask with it already cleared.
 		 */
<span class="p_del">-		addr = __sme_clr(phys_to_dma(dev, page_to_phys(page)));</span>
<span class="p_add">+		addr = __phys_to_dma(dev, page_to_phys(page));</span>
 		if ((addr + size) &gt; dev-&gt;coherent_dma_mask) {
 			__free_pages(page, get_order(size));
 		} else {
<span class="p_header">diff --git a/arch/x86/pci/sta2x11-fixup.c b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">index eac58e03f43c..7a5bafb76d77 100644</span>
<span class="p_header">--- a/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">+++ b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_chunk">@@ -207,11 +207,11 @@</span> <span class="p_context"> bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 }
 
 /**
<span class="p_del">- * phys_to_dma - Return the DMA AMBA address used for this STA2x11 device</span>
<span class="p_add">+ * __phys_to_dma - Return the DMA AMBA address used for this STA2x11 device</span>
  * @dev: device for a PCI device
  * @paddr: Physical address
  */
<span class="p_del">-dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	if (!dev-&gt;archdata.is_sta2x11)
 		return paddr;
<span class="p_chunk">@@ -223,7 +223,7 @@</span> <span class="p_context"> dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
  * @dev: device for a PCI device
  * @daddr: STA2x11 AMBA DMA address
  */
<span class="p_del">-phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_add">+phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
 {
 	if (!dev-&gt;archdata.is_sta2x11)
 		return daddr;
<span class="p_header">diff --git a/include/linux/dma-direct.h b/include/linux/dma-direct.h</span>
<span class="p_header">index bcdb1a3e4b1f..53ad6a47f513 100644</span>
<span class="p_header">--- a/include/linux/dma-direct.h</span>
<span class="p_header">+++ b/include/linux/dma-direct.h</span>
<span class="p_chunk">@@ -3,18 +3,19 @@</span> <span class="p_context"></span>
 #define _LINUX_DMA_DIRECT_H 1
 
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #ifdef CONFIG_ARCH_HAS_PHYS_TO_DMA
 #include &lt;asm/dma-direct.h&gt;
 #else
<span class="p_del">-static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+static inline dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
 {
 	dma_addr_t dev_addr = (dma_addr_t)paddr;
 
 	return dev_addr - ((dma_addr_t)dev-&gt;dma_pfn_offset &lt;&lt; PAGE_SHIFT);
 }
 
<span class="p_del">-static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t dev_addr)</span>
<span class="p_add">+static inline phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t dev_addr)</span>
 {
 	phys_addr_t paddr = (phys_addr_t)dev_addr;
 
<span class="p_chunk">@@ -30,6 +31,22 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 }
 #endif /* !CONFIG_ARCH_HAS_PHYS_TO_DMA */
 
<span class="p_add">+/*</span>
<span class="p_add">+ * If memory encryption is supported, phys_to_dma will set the memory encryption</span>
<span class="p_add">+ * bit in the DMA address, and dma_to_phys will clear it.  The raw __phys_to_dma</span>
<span class="p_add">+ * and __dma_to_phys versions should only be used on non-encrypted memory for</span>
<span class="p_add">+ * special occasions like DMA coherent buffers.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_set(__phys_to_dma(dev, paddr));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_clr(__dma_to_phys(dev, daddr));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ARCH_HAS_DMA_MARK_CLEAN
 void dma_mark_clean(void *addr, size_t size);
 #else
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 005d1d87bb2e..8b06b4485e65 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -157,13 +157,6 @@</span> <span class="p_context"> unsigned long swiotlb_size_or_default(void)</span>
 	return size ? size : (IO_TLB_DEFAULT_SIZE);
 }
 
<span class="p_del">-/* For swiotlb, clear memory encryption mask from dma addresses */</span>
<span class="p_del">-static dma_addr_t swiotlb_phys_to_dma(struct device *hwdev,</span>
<span class="p_del">-				      phys_addr_t address)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return __sme_clr(phys_to_dma(hwdev, address));</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /* Note that this doesn&#39;t work with highmem page */
 static dma_addr_t swiotlb_virt_to_bus(struct device *hwdev,
 				      volatile void *address)
<span class="p_chunk">@@ -622,7 +615,7 @@</span> <span class="p_context"> map_single(struct device *hwdev, phys_addr_t phys, size_t size,</span>
 		return SWIOTLB_MAP_ERROR;
 	}
 
<span class="p_del">-	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);</span>
<span class="p_add">+	start_dma_addr = __phys_to_dma(hwdev, io_tlb_start);</span>
 	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,
 				      dir, attrs);
 }
<span class="p_chunk">@@ -726,12 +719,12 @@</span> <span class="p_context"> swiotlb_alloc_buffer(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
 		goto out_warn;
 
 	phys_addr = swiotlb_tbl_map_single(dev,
<span class="p_del">-			swiotlb_phys_to_dma(dev, io_tlb_start),</span>
<span class="p_add">+			__phys_to_dma(dev, io_tlb_start),</span>
 			0, size, DMA_FROM_DEVICE, 0);
 	if (phys_addr == SWIOTLB_MAP_ERROR)
 		goto out_warn;
 
<span class="p_del">-	*dma_handle = swiotlb_phys_to_dma(dev, phys_addr);</span>
<span class="p_add">+	*dma_handle = __phys_to_dma(dev, phys_addr);</span>
 	if (dma_coherent_ok(dev, *dma_handle, size))
 		goto out_unmap;
 
<span class="p_chunk">@@ -867,10 +860,10 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	map = map_single(dev, phys, size, dir, attrs);
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
<span class="p_del">-		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+		return __phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 	}
 
<span class="p_del">-	dev_addr = swiotlb_phys_to_dma(dev, map);</span>
<span class="p_add">+	dev_addr = __phys_to_dma(dev, map);</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (dma_capable(dev, dev_addr, size))
<span class="p_chunk">@@ -879,7 +872,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);
 
<span class="p_del">-	return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+	return __phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 }
 
 /*
<span class="p_chunk">@@ -1009,7 +1002,7 @@</span> <span class="p_context"> swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl, int nelems,</span>
 				sg_dma_len(sgl) = 0;
 				return 0;
 			}
<span class="p_del">-			sg-&gt;dma_address = swiotlb_phys_to_dma(hwdev, map);</span>
<span class="p_add">+			sg-&gt;dma_address = __phys_to_dma(hwdev, map);</span>
 		} else
 			sg-&gt;dma_address = dev_addr;
 		sg_dma_len(sg) = sg-&gt;length;
<span class="p_chunk">@@ -1073,7 +1066,7 @@</span> <span class="p_context"> swiotlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,</span>
 int
 swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
 {
<span class="p_del">-	return (dma_addr == swiotlb_phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
<span class="p_add">+	return (dma_addr == __phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
 }
 
 /*
<span class="p_chunk">@@ -1085,7 +1078,7 @@</span> <span class="p_context"> swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)</span>
 int
 swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_del">-	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="p_add">+	return __phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
 }
 
 #ifdef CONFIG_DMA_DIRECT_OPS

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



