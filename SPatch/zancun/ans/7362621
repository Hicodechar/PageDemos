
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2] arm: perf: Add event descriptions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2] arm: perf: Add event descriptions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=88861">Drew Richardson</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 9, 2015, 4:53 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151009165330.GA22415@dreric01-gentoo.localdomain&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7362621/mbox/"
   >mbox</a>
|
   <a href="/patch/7362621/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7362621/">/patch/7362621/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 5055EBEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Oct 2015 16:54:07 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E6E6420707
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Oct 2015 16:54:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 5CA0920735
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Oct 2015 16:54:02 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758227AbbJIQx6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 9 Oct 2015 12:53:58 -0400
Received: from foss.arm.com ([217.140.101.70]:40425 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752596AbbJIQx4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 9 Oct 2015 12:53:56 -0400
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 90C013C;
	Fri,  9 Oct 2015 09:53:55 -0700 (PDT)
Received: from localhost (usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id
	083253F236; Fri,  9 Oct 2015 09:53:55 -0700 (PDT)
Date: Fri, 9 Oct 2015 09:53:32 -0700
From: Drew Richardson &lt;drew.richardson@arm.com&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;,
	Russell King &lt;linux@arm.linux.org.uk&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	&quot;linux-arm-kernel@lists.infradead.org&quot; 
	&lt;linux-arm-kernel@lists.infradead.org&gt;,
	Wade Cherry &lt;Wade.Cherry@arm.com&gt;, Pawel Moll &lt;Pawel.Moll@arm.com&gt;
Subject: Re: [PATCHv2] arm: perf: Add event descriptions
Message-ID: &lt;20151009165330.GA22415@dreric01-gentoo.localdomain&gt;
References: &lt;20151007182735.GA18706@dreric01-gentoo.localdomain&gt;
	&lt;20151009101338.GH26278@arm.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20151009101338.GH26278@arm.com&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=88861">Drew Richardson</a> - Oct. 9, 2015, 4:53 p.m.</div>
<pre class="content">
On Fri, Oct 09, 2015 at 11:13:38AM +0100, Will Deacon wrote:
<span class="quote">&gt; On Wed, Oct 07, 2015 at 11:28:18AM -0700, Drew Richardson wrote:</span>
<span class="quote">&gt; &gt; Add additional information about the ARM architected hardware events</span>
<span class="quote">&gt; &gt; to make counters self describing. This makes the hardware PMUs easier</span>
<span class="quote">&gt; &gt; to use as perf list contains possible events instead of users having</span>
<span class="quote">&gt; &gt; to refer to documentation like the ARM TRMs.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Drew Richardson &lt;drew.richardson@arm.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/arm/kernel/perf_event_v7.c | 96 +++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  drivers/perf/arm_pmu.c          |  1 +</span>
<span class="quote">&gt; &gt;  2 files changed, 97 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/arm/kernel/perf_event_v7.c b/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; index 126dc679b230..6623bd0d8a1d 100644</span>
<span class="quote">&gt; &gt; --- a/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; +++ b/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; @@ -547,6 +547,95 @@ static const unsigned scorpion_perf_cache_map[PERF_COUNT_HW_CACHE_MAX]</span>
<span class="quote">&gt; &gt;  	[C(BPU)][C(OP_WRITE)][C(RESULT_MISS)] = ARMV7_PERFCTR_PC_BRANCH_MIS_PRED,</span>
<span class="quote">&gt; &gt;  };</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +static ssize_t armv7_event_sysfs_show(struct device *dev,</span>
<span class="quote">&gt; &gt; +				      struct device_attribute *attr, char *page)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	struct perf_pmu_events_attr *pmu_attr;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pmu_attr = container_of(attr, struct perf_pmu_events_attr, attr);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	return sprintf(page, &quot;event=0x%02llx\n&quot;, pmu_attr-&gt;id);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can we not do this with a couple of macros, stringification of the event</span>
<span class="quote">&gt; code and PMU_EVENT_ATTR_STRING, therefore avoiding this function entirely?</span>

I assumed that doing it this way would be smaller, but using
PMU_EVENT_ATTR_STRING is a few hundred bytes smaller, see
below. (Please let me know if you&#39;d prefer I send it out in a separate
email or even a new thread)
<span class="quote">
&gt; &gt; +#define ARMV7_EVENT_ATTR(name, config) \</span>
<span class="quote">&gt; &gt; +	PMU_EVENT_ATTR(name, armv7_event_attr_##name, config, \</span>
<span class="quote">&gt; &gt; +		       armv7_event_sysfs_show);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(sw_incr, ARMV7_PERFCTR_PMNC_SW_INCR);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1i_cache_refill, ARMV7_PERFCTR_L1_ICACHE_REFILL);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1i_tlb_refill, ARMV7_PERFCTR_ITLB_REFILL);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1d_cache_refill, ARMV7_PERFCTR_L1_DCACHE_REFILL);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1d_cache, ARMV7_PERFCTR_L1_DCACHE_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1d_tlb_refill, ARMV7_PERFCTR_DTLB_REFILL);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(ld_retired, ARMV7_PERFCTR_MEM_READ);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(st_retired, ARMV7_PERFCTR_MEM_WRITE);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(inst_retired, ARMV7_PERFCTR_INSTR_EXECUTED);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(exc_taken, ARMV7_PERFCTR_EXC_TAKEN);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(exc_return, ARMV7_PERFCTR_EXC_EXECUTED);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(cid_write_retired, ARMV7_PERFCTR_CID_WRITE);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(pc_write_retired, ARMV7_PERFCTR_PC_WRITE);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(br_immed_retired, ARMV7_PERFCTR_PC_IMM_BRANCH);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(br_return_retired, ARMV7_PERFCTR_PC_PROC_RETURN);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(unaligned_ldst_retired, ARMV7_PERFCTR_MEM_UNALIGNED_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(br_mis_pred, ARMV7_PERFCTR_PC_BRANCH_MIS_PRED);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(cpu_cycles, ARMV7_PERFCTR_CLOCK_CYCLES);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(br_pred, ARMV7_PERFCTR_PC_BRANCH_PRED);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(mem_access, ARMV7_PERFCTR_MEM_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1i_cache, ARMV7_PERFCTR_L1_ICACHE_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l1d_cache_wb, ARMV7_PERFCTR_L1_DCACHE_WB);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l2d_cache, ARMV7_PERFCTR_L2_CACHE_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l2d_cache_refill, ARMV7_PERFCTR_L2_CACHE_REFILL);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(l2d_cache_wb, ARMV7_PERFCTR_L2_CACHE_WB);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(bus_access, ARMV7_PERFCTR_BUS_ACCESS);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(memory_error, ARMV7_PERFCTR_MEM_ERROR);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(inst_spec, ARMV7_PERFCTR_INSTR_SPEC);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(ttbr_write_retired, ARMV7_PERFCTR_TTBR_WRITE);</span>
<span class="quote">&gt; &gt; +ARMV7_EVENT_ATTR(bus_cycles, ARMV7_PERFCTR_BUS_CYCLES);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static struct attribute *armv7_pmuv2_event_attrs[] = {</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_sw_incr.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1i_cache_refill.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1i_tlb_refill.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1d_cache_refill.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1d_cache.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1d_tlb_refill.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_ld_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_st_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_inst_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_exc_taken.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_exc_return.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_cid_write_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_pc_write_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_br_immed_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_br_return_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_unaligned_ldst_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_br_mis_pred.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_cpu_cycles.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_br_pred.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_mem_access.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1i_cache.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l1d_cache_wb.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l2d_cache.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l2d_cache_refill.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_l2d_cache_wb.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_bus_access.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_memory_error.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_inst_spec.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_ttbr_write_retired.attr.attr,</span>
<span class="quote">&gt; &gt; +	&amp;armv7_event_attr_bus_cycles.attr.attr,</span>
<span class="quote">&gt; &gt; +	NULL</span>
<span class="quote">&gt; &gt; +};</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static struct attribute_group armv7_pmuv2_events_attr_group = {</span>
<span class="quote">&gt; &gt; +	.name = &quot;events&quot;,</span>
<span class="quote">&gt; &gt; +	.attrs = armv7_pmuv2_event_attrs,</span>
<span class="quote">&gt; &gt; +};</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +static const struct attribute_group *armv7_pmuv2_attr_groups[] = {</span>
<span class="quote">&gt; &gt; +	&amp;armv7_pmuv2_events_attr_group,</span>
<span class="quote">&gt; &gt; +	NULL</span>
<span class="quote">&gt; &gt; +};</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  /*</span>
<span class="quote">&gt; &gt;   * Perf Events&#39; indices</span>
<span class="quote">&gt; &gt;   */</span>
<span class="quote">&gt; &gt; @@ -1085,6 +1174,7 @@ static int armv7_a8_pmu_init(struct arm_pmu *cpu_pmu)</span>
<span class="quote">&gt; &gt;  	armv7pmu_init(cpu_pmu);</span>
<span class="quote">&gt; &gt;  	cpu_pmu-&gt;name		= &quot;armv7_cortex_a8&quot;;</span>
<span class="quote">&gt; &gt;  	cpu_pmu-&gt;map_event	= armv7_a8_map_event;</span>
<span class="quote">&gt; &gt; +	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
<span class="quote">&gt; &gt;  	return armv7_probe_num_events(cpu_pmu);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; @@ -1093,6 +1183,7 @@ static int armv7_a9_pmu_init(struct arm_pmu *cpu_pmu)</span>
<span class="quote">&gt; &gt;  	armv7pmu_init(cpu_pmu);</span>
<span class="quote">&gt; &gt;  	cpu_pmu-&gt;name		= &quot;armv7_cortex_a9&quot;;</span>
<span class="quote">&gt; &gt;  	cpu_pmu-&gt;map_event	= armv7_a9_map_event;</span>
<span class="quote">&gt; &gt; +	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I didn&#39;t think these guys supported PMUv2, or is that backwards compatible</span>
<span class="quote">&gt; with the older event definitions?</span>

You&#39;re correct. I&#39;ve added a PMUv1 for the A8, A9 and A5 (the A5 seems
to have some PMUv2 events but not all of them and is not documented as
having PMUv2 support).
<span class="quote">
&gt; Also, would you be able to do something similar for AArch64 too, please?</span>
<span class="quote">&gt; (take a look at our for-next/core branch for the latest perf changes).</span>

I&#39;ll do that and send something out soon.

---

Add additional information about the ARM architected hardware events
to make counters self describing. This makes the hardware PMUs easier
to use as perf list contains possible events instead of users having
to refer to documentation like the ARM TRMs.
<span class="signed-off-by">
Signed-off-by: Drew Richardson &lt;drew.richardson@arm.com&gt;</span>
---
 arch/arm/kernel/perf_event_v7.c | 119 ++++++++++++++++++++++++++++++++++++++++
 drivers/perf/arm_pmu.c          |   1 +
 2 files changed, 120 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Oct. 12, 2015, 2:30 p.m.</div>
<pre class="content">
On Fri, Oct 09, 2015 at 09:53:32AM -0700, Drew Richardson wrote:
<span class="quote">&gt; On Fri, Oct 09, 2015 at 11:13:38AM +0100, Will Deacon wrote:</span>
<span class="quote">&gt; &gt; On Wed, Oct 07, 2015 at 11:28:18AM -0700, Drew Richardson wrote:</span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/arm/kernel/perf_event_v7.c b/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; &gt; index 126dc679b230..6623bd0d8a1d 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/arm/kernel/perf_event_v7.c</span>
<span class="quote">&gt; &gt; &gt; @@ -547,6 +547,95 @@ static const unsigned scorpion_perf_cache_map[PERF_COUNT_HW_CACHE_MAX]</span>
<span class="quote">&gt; &gt; &gt;  	[C(BPU)][C(OP_WRITE)][C(RESULT_MISS)] = ARMV7_PERFCTR_PC_BRANCH_MIS_PRED,</span>
<span class="quote">&gt; &gt; &gt;  };</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; +static ssize_t armv7_event_sysfs_show(struct device *dev,</span>
<span class="quote">&gt; &gt; &gt; +				      struct device_attribute *attr, char *page)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	struct perf_pmu_events_attr *pmu_attr;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	pmu_attr = container_of(attr, struct perf_pmu_events_attr, attr);</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	return sprintf(page, &quot;event=0x%02llx\n&quot;, pmu_attr-&gt;id);</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Can we not do this with a couple of macros, stringification of the event</span>
<span class="quote">&gt; &gt; code and PMU_EVENT_ATTR_STRING, therefore avoiding this function entirely?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I assumed that doing it this way would be smaller, but using</span>
<span class="quote">&gt; PMU_EVENT_ATTR_STRING is a few hundred bytes smaller, see</span>
<span class="quote">&gt; below. (Please let me know if you&#39;d prefer I send it out in a separate</span>
<span class="quote">&gt; email or even a new thread)</span>

I think this looks much better, thanks. The only thing left to do is
re-use some of the existing event descriptions from the enum
armv7_perf_types that we have at the top of the file, rather than
duplicate the event -&gt; ID mapping. Feel free to extend the enumeration
if you need to (it&#39;s intended to cover all of the architected events).

Thanks,

Will
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/kernel/perf_event_v7.c b/arch/arm/kernel/perf_event_v7.c</span>
<span class="p_header">index 126dc679b230..3e94e6c22e16 100644</span>
<span class="p_header">--- a/arch/arm/kernel/perf_event_v7.c</span>
<span class="p_header">+++ b/arch/arm/kernel/perf_event_v7.c</span>
<span class="p_chunk">@@ -547,6 +547,118 @@</span> <span class="p_context"> static const unsigned scorpion_perf_cache_map[PERF_COUNT_HW_CACHE_MAX]</span>
 	[C(BPU)][C(OP_WRITE)][C(RESULT_MISS)] = ARMV7_PERFCTR_PC_BRANCH_MIS_PRED,
 };
 
<span class="p_add">+#define ARMV7_EVENT_ATTR(name, config) \</span>
<span class="p_add">+	PMU_EVENT_ATTR_STRING(name, armv7_event_attr_##name, &quot;event=&quot; #config)</span>
<span class="p_add">+</span>
<span class="p_add">+ARMV7_EVENT_ATTR(sw_incr, 0x00);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1i_cache_refill, 0x01);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1i_tlb_refill, 0x02);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1d_cache_refill, 0x03);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1d_cache, 0x04);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1d_tlb_refill, 0x05);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(ld_retired, 0x06);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(st_retired, 0x07);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(inst_retired, 0x08);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(exc_taken, 0x09);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(exc_return, 0x0a);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(cid_write_retired, 0x0b);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(pc_write_retired, 0x0c);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(br_immed_retired, 0x0d);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(br_return_retired, 0x0e);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(unaligned_ldst_retired, 0x0f);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(br_mis_pred, 0x10);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(cpu_cycles, 0x11);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(br_pred, 0x12);</span>
<span class="p_add">+</span>
<span class="p_add">+static struct attribute *armv7_pmuv1_event_attrs[] = {</span>
<span class="p_add">+	&amp;armv7_event_attr_sw_incr.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1i_cache_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1i_tlb_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_cache_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_cache.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_tlb_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_ld_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_st_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_inst_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_exc_taken.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_exc_return.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_cid_write_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_pc_write_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_immed_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_return_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_unaligned_ldst_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_mis_pred.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_cpu_cycles.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_pred.attr.attr,</span>
<span class="p_add">+	NULL</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct attribute_group armv7_pmuv1_events_attr_group = {</span>
<span class="p_add">+	.name = &quot;events&quot;,</span>
<span class="p_add">+	.attrs = armv7_pmuv1_event_attrs,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct attribute_group *armv7_pmuv1_attr_groups[] = {</span>
<span class="p_add">+	&amp;armv7_pmuv1_events_attr_group,</span>
<span class="p_add">+	NULL</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+ARMV7_EVENT_ATTR(mem_access, 0x13);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1i_cache, 0x14);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l1d_cache_wb, 0x15);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l2d_cache, 0x16);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l2d_cache_refill, 0x17);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(l2d_cache_wb, 0x18);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(bus_access, 0x19);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(memory_error, 0x1a);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(inst_spec, 0x1b);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(ttbr_write_retired, 0x1c);</span>
<span class="p_add">+ARMV7_EVENT_ATTR(bus_cycles, 0x1d);</span>
<span class="p_add">+</span>
<span class="p_add">+static struct attribute *armv7_pmuv2_event_attrs[] = {</span>
<span class="p_add">+	&amp;armv7_event_attr_sw_incr.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1i_cache_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1i_tlb_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_cache_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_cache.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_tlb_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_ld_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_st_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_inst_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_exc_taken.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_exc_return.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_cid_write_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_pc_write_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_immed_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_return_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_unaligned_ldst_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_mis_pred.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_cpu_cycles.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_br_pred.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_mem_access.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1i_cache.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l1d_cache_wb.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l2d_cache.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l2d_cache_refill.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_l2d_cache_wb.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_bus_access.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_memory_error.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_inst_spec.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_ttbr_write_retired.attr.attr,</span>
<span class="p_add">+	&amp;armv7_event_attr_bus_cycles.attr.attr,</span>
<span class="p_add">+	NULL</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct attribute_group armv7_pmuv2_events_attr_group = {</span>
<span class="p_add">+	.name = &quot;events&quot;,</span>
<span class="p_add">+	.attrs = armv7_pmuv2_event_attrs,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct attribute_group *armv7_pmuv2_attr_groups[] = {</span>
<span class="p_add">+	&amp;armv7_pmuv2_events_attr_group,</span>
<span class="p_add">+	NULL</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /*
  * Perf Events&#39; indices
  */
<span class="p_chunk">@@ -1085,6 +1197,7 @@</span> <span class="p_context"> static int armv7_a8_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	armv7pmu_init(cpu_pmu);
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a8&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a8_map_event;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv1_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1093,6 +1206,7 @@</span> <span class="p_context"> static int armv7_a9_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	armv7pmu_init(cpu_pmu);
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a9&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a9_map_event;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv1_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1101,6 +1215,7 @@</span> <span class="p_context"> static int armv7_a5_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	armv7pmu_init(cpu_pmu);
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a5&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a5_map_event;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv1_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1110,6 +1225,7 @@</span> <span class="p_context"> static int armv7_a15_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a15&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a15_map_event;
 	cpu_pmu-&gt;set_event_filter = armv7pmu_set_event_filter;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1119,6 +1235,7 @@</span> <span class="p_context"> static int armv7_a7_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a7&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a7_map_event;
 	cpu_pmu-&gt;set_event_filter = armv7pmu_set_event_filter;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1128,6 +1245,7 @@</span> <span class="p_context"> static int armv7_a12_pmu_init(struct arm_pmu *cpu_pmu)</span>
 	cpu_pmu-&gt;name		= &quot;armv7_cortex_a12&quot;;
 	cpu_pmu-&gt;map_event	= armv7_a12_map_event;
 	cpu_pmu-&gt;set_event_filter = armv7pmu_set_event_filter;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
 	return armv7_probe_num_events(cpu_pmu);
 }
 
<span class="p_chunk">@@ -1135,6 +1253,7 @@</span> <span class="p_context"> static int armv7_a17_pmu_init(struct arm_pmu *cpu_pmu)</span>
 {
 	int ret = armv7_a12_pmu_init(cpu_pmu);
 	cpu_pmu-&gt;name = &quot;armv7_cortex_a17&quot;;
<span class="p_add">+	cpu_pmu-&gt;pmu.attr_groups = armv7_pmuv2_attr_groups;</span>
 	return ret;
 }
 
<span class="p_header">diff --git a/drivers/perf/arm_pmu.c b/drivers/perf/arm_pmu.c</span>
<span class="p_header">index 2365a32a595e..e933d2dd71c0 100644</span>
<span class="p_header">--- a/drivers/perf/arm_pmu.c</span>
<span class="p_header">+++ b/drivers/perf/arm_pmu.c</span>
<span class="p_chunk">@@ -548,6 +548,7 @@</span> <span class="p_context"> static void armpmu_init(struct arm_pmu *armpmu)</span>
 		.stop		= armpmu_stop,
 		.read		= armpmu_read,
 		.filter_match	= armpmu_filter_match,
<span class="p_add">+		.attr_groups	= armpmu-&gt;pmu.attr_groups,</span>
 	};
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



