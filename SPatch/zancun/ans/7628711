
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] ARM64: simplify dma_get_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] ARM64: simplify dma_get_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 16, 2015, 4:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;4270550.cGd11OgA5n@wuerfel&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7628711/mbox/"
   >mbox</a>
|
   <a href="/patch/7628711/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7628711/">/patch/7628711/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 9BFF4BF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Nov 2015 16:26:42 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 9D63A205B6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Nov 2015 16:26:41 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 4F12920592
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Nov 2015 16:26:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753191AbbKPQ0e (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Nov 2015 11:26:34 -0500
Received: from mout.kundenserver.de ([212.227.126.187]:63753 &quot;EHLO
	mout.kundenserver.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751824AbbKPQ0a (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Nov 2015 11:26:30 -0500
Received: from wuerfel.localnet ([134.3.118.24]) by mrelayeu.kundenserver.de
	(mreue004) with ESMTPSA (Nemesis) id 0MVHys-1ZsRfq0er8-00YhYo;
	Mon, 16 Nov 2015 17:25:52 +0100
From: Arnd Bergmann &lt;arnd@arndb.de&gt;
To: Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	Mark Salter &lt;msalter@redhat.com&gt;,
	Suravee Suthikulpanit &lt;Suravee.Suthikulpanit@amd.com&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rafael.j.wysocki@intel.com&gt;
Subject: [RFC] ARM64: simplify dma_get_ops
Date: Mon, 16 Nov 2015 17:25:48 +0100
Message-ID: &lt;4270550.cGd11OgA5n@wuerfel&gt;
User-Agent: KMail/4.11.5 (Linux/3.16.0-10-generic; KDE/4.11.5; x86_64; ; )
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset=&quot;us-ascii&quot;
X-Provags-ID: V03:K0:MP33XjcP5aynngyoafWZprx5dM0HnGLNUiQVnIh6q2NfnyXjFUj
	LYB5E2THV5CmGaJtuBb/NE6QKQbytV/cJi3ls8fPu71dbW2fXqfZytGk4kGAOmiQOwn/2zE
	XwJW9ef/iZIHMAZ7Orpd13BjEkEls0V4PAxmlE+wvSApx6BM2SbzIpgPaYn7emx9HdOUFbX
	E0m5iRItc9ie7kKiFhLvg==
X-UI-Out-Filterresults: notjunk:1; V01:K0:KNizG9mcREY=:42a6VufMVlCmqBxlmbh2tJ
	fJ3n1ZPjLrQv783rPxx+Lbk9s3zRXcbPDqwdTYZ4REfKtGnik+nLj+LqTLa9O1IymPYNulbDq
	de2iiU1YHYu+ivs3/k2knYKz0jwS2IqJf9XD8mbmRiY+fvRvw9xSomDJMMPcOHyR2oe50lvYT
	aX2BVJ1ZmbWxo+8EV7qk9k1Ju8OL24E//LBmx1PJVQ23tLBUg24XDCmSmvI09IV3Y/GW3QILz
	mpcFzlZS9XqvymVuxW84U69L6TVYRqvO1Fkxp8fuGZO4CBkSt7cCxUT/PVmRq+xEReaz8FIIQ
	i/msk0W8cjxjgIA5etuz1NsHs6eCEgKai4lfg7SNelVwLp6yYPYijhGLEhdk23zAp/k1sJygA
	S2MC5KuRYQOimQIHpD6fRhmq0zlwbUMRUx71nV18CbxQ9lxXDSLiGyrzbFYrGcRgI6mSk6H6/
	Ri3PgnVBDO7a7BVbvHphf0qtF2BnQbyRBhrbwnsxI34WWXb5t3lhoq1N7EPCB31/TTEdzq0ab
	dBoA/r6fXAtCxzF1q7mxsx1mDL0HUE3/PCc5V7r07wWXWseaNH/PQ2Zib14IYfy3rTyxLPeZ/
	DI3hhli1NVGuA5+Tfo8qJfgJCzXPnU3FwTmo+NuNrRV4JXb4bJ4ffLuZRCUzT6fnKvLxPwohL
	oO6XLnR0ap2Lhc5vvuYQ+u7upbefKu/Op3aM9cWzfVrWdLe/I76Sjxtgo0T2EmtElF2BnFx/8
	cUjfV0QIyU2RA8XP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.7 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD, UNPARSEABLE_RELAY autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Nov. 16, 2015, 4:25 p.m.</div>
<pre class="content">
Including linux/acpi.h from asm/dma-mapping.h causes tons of compile-time
warnings, e.g.

 drivers/isdn/mISDN/dsp_ecdis.h:43:0: warning: &quot;FALSE&quot; redefined
 drivers/isdn/mISDN/dsp_ecdis.h:44:0: warning: &quot;TRUE&quot; redefined
 drivers/net/fddi/skfp/h/targetos.h:62:0: warning: &quot;TRUE&quot; redefined
 drivers/net/fddi/skfp/h/targetos.h:63:0: warning: &quot;FALSE&quot; redefined

However, it looks like the dependency should not even there as
I do not see why __generic_dma_ops() cares about whether we have
an ACPI based system or not.

The current behavior is to fall back to the global dma_ops when
a device has not set its own dma_ops, but only for DT based systems.
This seems dangerous, as a random device might have different
requirements regarding IOMMU or coherency, so we should really
never have that fallback and just forbid DMA when we have not
initialized DMA for a device.

This removes the global dma_ops variable and the special-casing
for ACPI, and just returns the dma ops that got set for the
device, or the dummy_dma_ops if none were present.

The original code has apparently been copied from arm32 where we
rely on it for ISA devices things like the floppy controller, but
we should have no such devices on ARM64.
<span class="signed-off-by">
Signed-off-by: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
---


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - Nov. 16, 2015, 6:39 p.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 05:25:48PM +0100, Arnd Bergmann wrote:
<span class="quote">&gt; Including linux/acpi.h from asm/dma-mapping.h causes tons of compile-time</span>
<span class="quote">&gt; warnings, e.g.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  drivers/isdn/mISDN/dsp_ecdis.h:43:0: warning: &quot;FALSE&quot; redefined</span>
<span class="quote">&gt;  drivers/isdn/mISDN/dsp_ecdis.h:44:0: warning: &quot;TRUE&quot; redefined</span>
<span class="quote">&gt;  drivers/net/fddi/skfp/h/targetos.h:62:0: warning: &quot;TRUE&quot; redefined</span>
<span class="quote">&gt;  drivers/net/fddi/skfp/h/targetos.h:63:0: warning: &quot;FALSE&quot; redefined</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; However, it looks like the dependency should not even there as</span>
<span class="quote">&gt; I do not see why __generic_dma_ops() cares about whether we have</span>
<span class="quote">&gt; an ACPI based system or not.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The current behavior is to fall back to the global dma_ops when</span>
<span class="quote">&gt; a device has not set its own dma_ops, but only for DT based systems.</span>
<span class="quote">&gt; This seems dangerous, as a random device might have different</span>
<span class="quote">&gt; requirements regarding IOMMU or coherency, so we should really</span>
<span class="quote">&gt; never have that fallback and just forbid DMA when we have not</span>
<span class="quote">&gt; initialized DMA for a device.</span>

I think this is from the days when we didn&#39;t have an
arch_setup_dma_ops() to be called from the DT code.

I did placed a WARN_ON() to see who&#39;s getting the dummy_dma_ops and it
triggered this call trace:

WARNING: at /work/Linux/linux-2.6-aarch64/arch/arm64/include/asm/dma-mapping.h:40
Modules linked in:

CPU: 3 PID: 1 Comm: swapper/0 Tainted: G        W       4.4.0-rc1+ #601
Hardware name: Juno (DT)
task: ffffffc9768a0000 ti: ffffffc9768a8000 task.ti: ffffffc9768a8000
PC is at ohci_platform_probe+0x2b8/0x518
LR is at ohci_platform_probe+0x2c/0x518
Call trace:
[&lt;ffffffc0004920e0&gt;] ohci_platform_probe+0x2b8/0x518
[&lt;ffffffc0003e842c&gt;] platform_drv_probe+0x54/0xb8
[&lt;ffffffc0003e68d4&gt;] driver_probe_device+0x1ec/0x2f0
[&lt;ffffffc0003e6a74&gt;] __driver_attach+0x9c/0xa0
[&lt;ffffffc0003e4a10&gt;] bus_for_each_dev+0x60/0xa0
[&lt;ffffffc0003e61b8&gt;] driver_attach+0x20/0x28
[&lt;ffffffc0003e5dd8&gt;] bus_add_driver+0x1d0/0x238
[&lt;ffffffc0003e7218&gt;] driver_register+0x60/0xf8
[&lt;ffffffc0003e8328&gt;] __platform_driver_register+0x40/0x48
[&lt;ffffffc00086f720&gt;] ohci_platform_init+0x50/0x60
[&lt;ffffffc000082938&gt;] do_one_initcall+0x90/0x1a0
[&lt;ffffffc00084caac&gt;] kernel_init_freeable+0x154/0x1f8
[&lt;ffffffc0005e9c40&gt;] kernel_init+0x10/0xe0
[&lt;ffffffc000085c50&gt;] ret_from_fork+0x10/0x40
ohci-platform: probe of 7ffb0000.ohci failed with error -5

I need to check whether we break anything by no longer returning
swiotlb_dma_ops.
<span class="quote">
&gt; This removes the global dma_ops variable and the special-casing</span>
<span class="quote">&gt; for ACPI, and just returns the dma ops that got set for the</span>
<span class="quote">&gt; device, or the dummy_dma_ops if none were present.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The original code has apparently been copied from arm32 where we</span>
<span class="quote">&gt; rely on it for ISA devices things like the floppy controller, but</span>
<span class="quote">&gt; we should have no such devices on ARM64.</span>

IIRC, this was required for DT before we had the arch_set_dma_ops()
(though I may be wrong, I haven&#39;t checked the logs). The dummy ops were
introduced with ACPI to avoid any default, I think this was related to
the _CCA property.
<span class="quote">
&gt; @@ -985,7 +977,7 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt;  			struct iommu_ops *iommu, bool coherent)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (!acpi_disabled &amp;&amp; !dev-&gt;archdata.dma_ops)</span>
<span class="quote">&gt; -		dev-&gt;archdata.dma_ops = dma_ops;</span>
<span class="quote">&gt; +		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;</span>

Why do we still keep the !acpi_disabled check here? If I remove it, the
WARN_ON() above disappears.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Nov. 16, 2015, 7:57 p.m.</div>
<pre class="content">
On Monday 16 November 2015 18:39:41 Catalin Marinas wrote:
<span class="quote">&gt; On Mon, Nov 16, 2015 at 05:25:48PM +0100, Arnd Bergmann wrote:</span>
<span class="quote">&gt; &gt; Including linux/acpi.h from asm/dma-mapping.h causes tons of compile-time</span>
<span class="quote">&gt; &gt; warnings, e.g.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  drivers/isdn/mISDN/dsp_ecdis.h:43:0: warning: &quot;FALSE&quot; redefined</span>
<span class="quote">&gt; &gt;  drivers/isdn/mISDN/dsp_ecdis.h:44:0: warning: &quot;TRUE&quot; redefined</span>
<span class="quote">&gt; &gt;  drivers/net/fddi/skfp/h/targetos.h:62:0: warning: &quot;TRUE&quot; redefined</span>
<span class="quote">&gt; &gt;  drivers/net/fddi/skfp/h/targetos.h:63:0: warning: &quot;FALSE&quot; redefined</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; However, it looks like the dependency should not even there as</span>
<span class="quote">&gt; &gt; I do not see why __generic_dma_ops() cares about whether we have</span>
<span class="quote">&gt; &gt; an ACPI based system or not.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The current behavior is to fall back to the global dma_ops when</span>
<span class="quote">&gt; &gt; a device has not set its own dma_ops, but only for DT based systems.</span>
<span class="quote">&gt; &gt; This seems dangerous, as a random device might have different</span>
<span class="quote">&gt; &gt; requirements regarding IOMMU or coherency, so we should really</span>
<span class="quote">&gt; &gt; never have that fallback and just forbid DMA when we have not</span>
<span class="quote">&gt; &gt; initialized DMA for a device.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think this is from the days when we didn&#39;t have an</span>
<span class="quote">&gt; arch_setup_dma_ops() to be called from the DT code.</span>

Makes sense.
<span class="quote">
&gt; I did placed a WARN_ON() to see who&#39;s getting the dummy_dma_ops and it</span>
<span class="quote">&gt; triggered this call trace:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; WARNING: at /work/Linux/linux-2.6-aarch64/arch/arm64/include/asm/dma-mapping.h:40</span>
<span class="quote">&gt; Modules linked in:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; CPU: 3 PID: 1 Comm: swapper/0 Tainted: G        W       4.4.0-rc1+ #601</span>
<span class="quote">&gt; Hardware name: Juno (DT)</span>
<span class="quote">&gt; task: ffffffc9768a0000 ti: ffffffc9768a8000 task.ti: ffffffc9768a8000</span>
<span class="quote">&gt; PC is at ohci_platform_probe+0x2b8/0x518</span>
<span class="quote">&gt; LR is at ohci_platform_probe+0x2c/0x518</span>
<span class="quote">&gt; Call trace:</span>
<span class="quote">&gt; [&lt;ffffffc0004920e0&gt;] ohci_platform_probe+0x2b8/0x518</span>
<span class="quote">&gt; [&lt;ffffffc0003e842c&gt;] platform_drv_probe+0x54/0xb8</span>
<span class="quote">&gt; [&lt;ffffffc0003e68d4&gt;] driver_probe_device+0x1ec/0x2f0</span>
<span class="quote">&gt; [&lt;ffffffc0003e6a74&gt;] __driver_attach+0x9c/0xa0</span>
<span class="quote">&gt; [&lt;ffffffc0003e4a10&gt;] bus_for_each_dev+0x60/0xa0</span>
<span class="quote">&gt; [&lt;ffffffc0003e61b8&gt;] driver_attach+0x20/0x28</span>
<span class="quote">&gt; [&lt;ffffffc0003e5dd8&gt;] bus_add_driver+0x1d0/0x238</span>
<span class="quote">&gt; [&lt;ffffffc0003e7218&gt;] driver_register+0x60/0xf8</span>
<span class="quote">&gt; [&lt;ffffffc0003e8328&gt;] __platform_driver_register+0x40/0x48</span>
<span class="quote">&gt; [&lt;ffffffc00086f720&gt;] ohci_platform_init+0x50/0x60</span>
<span class="quote">&gt; [&lt;ffffffc000082938&gt;] do_one_initcall+0x90/0x1a0</span>
<span class="quote">&gt; [&lt;ffffffc00084caac&gt;] kernel_init_freeable+0x154/0x1f8</span>
<span class="quote">&gt; [&lt;ffffffc0005e9c40&gt;] kernel_init+0x10/0xe0</span>
<span class="quote">&gt; [&lt;ffffffc000085c50&gt;] ret_from_fork+0x10/0x40</span>
<span class="quote">&gt; ohci-platform: probe of 7ffb0000.ohci failed with error -5</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I need to check whether we break anything by no longer returning</span>
<span class="quote">&gt; swiotlb_dma_ops.</span>

Interesting. Note that this driver calls &#39;dma_coerce_mask_and_coherent()&#39;,
which can be regarded a bug by itself, because it overrides the
platform specific DMA mask.
<span class="quote">
&gt; &gt; This removes the global dma_ops variable and the special-casing</span>
<span class="quote">&gt; &gt; for ACPI, and just returns the dma ops that got set for the</span>
<span class="quote">&gt; &gt; device, or the dummy_dma_ops if none were present.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The original code has apparently been copied from arm32 where we</span>
<span class="quote">&gt; &gt; rely on it for ISA devices things like the floppy controller, but</span>
<span class="quote">&gt; &gt; we should have no such devices on ARM64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; IIRC, this was required for DT before we had the arch_set_dma_ops()</span>
<span class="quote">&gt; (though I may be wrong, I haven&#39;t checked the logs). The dummy ops were</span>
<span class="quote">&gt; introduced with ACPI to avoid any default, I think this was related to</span>
<span class="quote">&gt; the _CCA property.</span>

Right.
<span class="quote">
&gt; &gt; @@ -985,7 +977,7 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt; &gt;  			struct iommu_ops *iommu, bool coherent)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	if (!acpi_disabled &amp;&amp; !dev-&gt;archdata.dma_ops)</span>
<span class="quote">&gt; &gt; -		dev-&gt;archdata.dma_ops = dma_ops;</span>
<span class="quote">&gt; &gt; +		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why do we still keep the !acpi_disabled check here? If I remove it, the</span>
<span class="quote">&gt; WARN_ON() above disappears.</span>

Ah, good. That must be my mistake then. This looks much better. On a
related note, we should also urgently fix the arch_setup_dma_ops() function
to no longer ignore the base and size arguments. For dma_mase, we can simply
WARN_ON(dma_base != 0), so we can implement support for that whenever we need
it, but for the size we need to prevent drivers from calling dma_set_mask()
with an argument larger than the size we pass in here, unless the size is
also larger than max_pfn.

	Arnd
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - Nov. 17, 2015, 12:22 p.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 08:57:41PM +0100, Arnd Bergmann wrote:
<span class="quote">&gt; On Monday 16 November 2015 18:39:41 Catalin Marinas wrote:</span>
<span class="quote">&gt; &gt; On Mon, Nov 16, 2015 at 05:25:48PM +0100, Arnd Bergmann wrote:</span>
<span class="quote">&gt; &gt; &gt; @@ -985,7 +977,7 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt; &gt; &gt;  			struct iommu_ops *iommu, bool coherent)</span>
<span class="quote">&gt; &gt; &gt;  {</span>
<span class="quote">&gt; &gt; &gt;  	if (!acpi_disabled &amp;&amp; !dev-&gt;archdata.dma_ops)</span>
<span class="quote">&gt; &gt; &gt; -		dev-&gt;archdata.dma_ops = dma_ops;</span>
<span class="quote">&gt; &gt; &gt; +		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Why do we still keep the !acpi_disabled check here? If I remove it, the</span>
<span class="quote">&gt; &gt; WARN_ON() above disappears.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ah, good. That must be my mistake then. This looks much better.</span>

I merged this patch with the above change. Thanks.
<span class="quote">
&gt; On a related note, we should also urgently fix the</span>
<span class="quote">&gt; arch_setup_dma_ops() function to no longer ignore the base and size</span>
<span class="quote">&gt; arguments. For dma_base, we can simply WARN_ON(dma_base != 0), so we</span>
<span class="quote">&gt; can implement support for that whenever we need it,</span>

I think we should, at least until we implement support for
dev-&gt;dma_pfn_offset. I&#39;m not sure about iommu though, maybe there are
working configurations with dma_base != 0.
<span class="quote">
&gt; but for the size we need to prevent drivers from calling</span>
<span class="quote">&gt; dma_set_mask() with an argument larger than the size we pass in here,</span>
<span class="quote">&gt; unless the size is also larger than max_pfn.</span>

We have a default mask set up in of_dma_configure() based on size and
dma_base. Can we check the new mask against the default one?
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/dma-mapping.h b/arch/arm64/include/asm/dma-mapping.h</span>
<span class="p_header">index 54d0ead41afc..04e841a1c1f3 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -18,7 +18,6 @@</span> <span class="p_context"></span>
 
 #ifdef __KERNEL__
 
<span class="p_del">-#include &lt;linux/acpi.h&gt;</span>
 #include &lt;linux/types.h&gt;
 #include &lt;linux/vmalloc.h&gt;
 
<span class="p_chunk">@@ -26,22 +25,17 @@</span> <span class="p_context"></span>
 #include &lt;asm/xen/hypervisor.h&gt;
 
 #define DMA_ERROR_CODE	(~(dma_addr_t)0)
<span class="p_del">-extern struct dma_map_ops *dma_ops;</span>
 extern struct dma_map_ops dummy_dma_ops;
 
 static inline struct dma_map_ops *__generic_dma_ops(struct device *dev)
 {
<span class="p_del">-	if (unlikely(!dev))</span>
<span class="p_del">-		return dma_ops;</span>
<span class="p_del">-	else if (dev-&gt;archdata.dma_ops)</span>
<span class="p_add">+	if (dev &amp;&amp; dev-&gt;archdata.dma_ops)</span>
 		return dev-&gt;archdata.dma_ops;
<span class="p_del">-	else if (acpi_disabled)</span>
<span class="p_del">-		return dma_ops;</span>
 
 	/*
<span class="p_del">-	 * When ACPI is enabled, if arch_set_dma_ops is not called,</span>
<span class="p_del">-	 * we will disable device DMA capability by setting it</span>
<span class="p_del">-	 * to dummy_dma_ops.</span>
<span class="p_add">+	 * we expect no ISA devices, and all other DMA masters are</span>
<span class="p_add">+	 * expected to have someone call arch_setup_dma_ops at</span>
<span class="p_add">+	 * device creation time</span>
 	 */
 	return &amp;dummy_dma_ops;
 }
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 131a199114b4..9e351c1f89e2 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
  */
 
 #include &lt;linux/gfp.h&gt;
<span class="p_add">+#include &lt;linux/acpi.h&gt;</span>
 #include &lt;linux/export.h&gt;
 #include &lt;linux/slab.h&gt;
 #include &lt;linux/genalloc.h&gt;
<span class="p_chunk">@@ -28,9 +29,6 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/cacheflush.h&gt;
 
<span class="p_del">-struct dma_map_ops *dma_ops;</span>
<span class="p_del">-EXPORT_SYMBOL(dma_ops);</span>
<span class="p_del">-</span>
 static pgprot_t __get_dma_pgprot(struct dma_attrs *attrs, pgprot_t prot,
 				 bool coherent)
 {
<span class="p_chunk">@@ -515,13 +513,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(dummy_dma_ops);</span>
 
 static int __init arm64_dma_init(void)
 {
<span class="p_del">-	int ret;</span>
<span class="p_del">-</span>
<span class="p_del">-	dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="p_del">-</span>
<span class="p_del">-	ret = atomic_pool_init();</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return atomic_pool_init();</span>
 }
 arch_initcall(arm64_dma_init);
 
<span class="p_chunk">@@ -985,7 +977,7 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 			struct iommu_ops *iommu, bool coherent)
 {
 	if (!acpi_disabled &amp;&amp; !dev-&gt;archdata.dma_ops)
<span class="p_del">-		dev-&gt;archdata.dma_ops = dma_ops;</span>
<span class="p_add">+		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
 
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



