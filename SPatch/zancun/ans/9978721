
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v5.1,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v5.1,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 29, 2017, 9:27 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170929212747.3324-1-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9978721/mbox/"
   >mbox</a>
|
   <a href="/patch/9978721/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9978721/">/patch/9978721/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	526F260375 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Sep 2017 21:28:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3A677298C6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Sep 2017 21:28:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2EB46298B8; Fri, 29 Sep 2017 21:28:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3FAC6298B8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 29 Sep 2017 21:28:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752432AbdI2V2S (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 29 Sep 2017 17:28:18 -0400
Received: from mail-bn3nam01on0051.outbound.protection.outlook.com
	([104.47.33.51]:40640
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752103AbdI2V2R (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 29 Sep 2017 17:28:17 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=kgEgEQRFyvvF+/aS/qPX7ILkJiyiQx7N664dn3eI9BM=;
	b=zz9Y9sI1aZ4DbT9ne+tHC6rmFXY21ALG5ZT0ElFUIlxnBf4+mUH1kskoQLg0Y4r8ffKPHkKGoREitpMp3UM6imgYLsstuIbI0Jox0f3/oYqfu0aZZvJGtetNKXRCvvEqhCZw39wcBA2i3Dmzmncdjz+ub29PYVPywgJueWxxwb4=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	SN1PR12MB0159.namprd12.prod.outlook.com (10.162.3.146) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Fri, 29 Sep 2017 21:28:12 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: bp@suse.de
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	linux-kernel@vger.kernel.org, x86@kernel.org,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v5.1 02/17] x86/mm: Add Secure Encrypted
	Virtualization (SEV) support
Date: Fri, 29 Sep 2017 16:27:47 -0500
Message-Id: &lt;20170929212747.3324-1-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20170928090242.ber7gynwaldinafa@pd.tnic&gt;
References: &lt;20170928090242.ber7gynwaldinafa@pd.tnic&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: BN6PR03CA0066.namprd03.prod.outlook.com (10.173.137.28) To
	SN1PR12MB0159.namprd12.prod.outlook.com (10.162.3.146)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ef6e8045-13d0-489e-bd07-08d50780fd35
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:SN1PR12MB0159; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0159;
	3:3Rg4emgIwT24qjcI/m189s3XLzUf61CSv0xOhHRx5JGOxcZ0khodZum8GjZT7fFIr71YY95dMeO/DhK8fzZWDU2ip8X2eyTmjfo0isUiDQ1xo2oGep4bvggIBXDuro6ejxvha73widKodjPmYDDoCAGKLaP3mmlguEQQzv/GKHJv0oYySunovJGQjoNCuWvG0FieF7L9ogJlYj1nj5amuhP46tGPMRxQpC2QDf6DBoP83X6JUh8dzNC+yEOb55cr;
	25:6f8O7FJvlvpjBc0fZTDn9R6i51xEumZIHDW9XoEdLFEYf/0pVh3n/SYpqM47+8sxWGWkwYw8w1XXxJ1KLOlJ0G71tcMJxm9IamDmFOUIgzBhUvLJE1HRbO8qklOkIMiOqLPVVXZCbEjaZTNVLrBKg03hCrpd3ad6zIYCEA6Llxu/vbrFwdrfb++RHrc9U2++6St4s7Z5rpAqRcA+TQr7VE5eqNPgPuG+zf94CjvRiSoiy1nEfUdFWFaUGlpZ6Mg6F0DEw5rZHXyjTbt5ec4iWVH4pK5RUK3JRN+GdzRnFjhHSkt9688erIH4o80MKLTOLTZ/2SMo5dDkY5C2y33V7A==;
	31:hdk4xCGhc9AotF2PONZDp4dgWui2OhgGNtGU4YD0jpjOhr16lX/oGWSXdFafLtkI7BgCJ9GvvWgrrNCgiHjfONUcasObbInya5Wean2GZVrNwvH9jf/HN5osS8hWjmGQJ600HZ1UVxTBU7ay8Wc3nI4HrCKIa/35uvxzvVVPbWQum8q3UumxVsRotmXp6Q8tzB0+qz9DFe0px/ctPDIkyiEg9M6VqrA/cEbROvW5BfY=
X-MS-TrafficTypeDiagnostic: SN1PR12MB0159:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0159;
	20:rl2YMwBDVc5IaqzKmmt0uMP+4JPEb7IVqbGftvrLRT7yo4CHG0DsjrkfDe2Wnngm00xE8gc/S2HRGjsrA9I79mfVZv8NqlANiz4qT7/UGsE7+4k3AO+5HBh2VK89I2ONPmhASQGxXHALnHGK4IEnPZAHgZo/y2SAzv79ZAOzqi+y64UHOuJjqP7tYhadqBp9/yi9y/juTLeJy29ohAj9VMY3NK7Uak1/xANH3u1VSi1eSLpUX9waoEoZ4jj66juvrAtldnfAMvdAqgJBRPft333p4okF0ZsGJtSF/nIX0CUXAxg/DKMouIPSY/DidSV0IKWV+lDfeYkAqy0fZvu6e3+KEH/LJ+lOuUJICnIUj7zYYE9K7xam28kJKG5Icz5rnCcDbaG7OdzNPDY8a4YHNxHxfocP8pcvLB6hsv3f/rgPx0WCfxO9siSa9Sxc7fqFuAALbgVeawIpKhJ2Xvp14i8rGF45QNqfC1U8o2xjtFZAe9cbgge0wgE9KvMNNzGd;
	4:E17rGCZI2OnMKXXvAiOZ0lKsrT0gTrY5rTNeRTx68IiAyLr/axpcbimt7jJX7FYC91UhEjfW262SiM4iIuoZdHdIpfijQhw7y6PlGUtsJims3OhIpg8SB5YP5X821T92Pv5m1F8yjqJqYEGNyKXCKcEl4784wxRnyQ0iaLz6IFCupfeKq0Vq6y8BYLP1kuQSsx3Gk8E26fC+ZNjq7PAb5TdkkH/1orxpd7m+3oPSt2eJgWPZnoT0blju/YT2vVjMlmsgMFoMSRU+mfr5X+PyqM1pvOk008kkcHvcnTizoXwBpOpsPJOWOUSSkdzUld6vv4gaGs7IDF91ltcrDoqmng==
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;SN1PR12MB0159DE8E16185E70D55DDD53E57E0@SN1PR12MB0159.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(5005006)(8121501046)(100000703101)(100105400095)(10201501046)(93006095)(93001095)(3002001)(6055026)(6041248)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123558100)(20161123564025)(20161123562025)(20161123560025)(20161123555025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR12MB0159; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR12MB0159; 
X-Forefront-PRVS: 0445A82F82
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(39860400002)(376002)(189002)(199003)(8936002)(53416004)(16586007)(54906003)(1076002)(97736004)(8676002)(6116002)(81156014)(16526017)(3846002)(316002)(81166006)(6486002)(48376002)(6916009)(5003940100001)(7736002)(6666003)(50466002)(36756003)(53936002)(305945005)(2351001)(2361001)(105586002)(101416001)(478600001)(2906002)(47776003)(2950100002)(4326008)(25786009)(50986999)(76176999)(106356001)(50226002)(66066001)(68736007)(86362001)(33646002)(189998001)(5660300001)(309714004);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR12MB0159;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR12MB0159;
	23:aiem4RrlLSIRKF+Mr+il+mZl5GQk3cKmuHhtDo6KH?=
	=?us-ascii?Q?gUB/79bovE1sON3v0JDBrQ+2+3y1LWwpA3C42yuYEQxR2dWhHAHAGUQvGkzt?=
	=?us-ascii?Q?g85eAKqLiWJO+EgnKEuWRJRHQgROe/iq4eaiGKpvakvru2PSODkHZa4j+ss7?=
	=?us-ascii?Q?RP2XhitYtIgqabFC8UzGnDumyIpsFnZdAkXJBUsmbewyttdZ7qrSscFBHxyn?=
	=?us-ascii?Q?B/3pDMnmZSxZrcGbmtTkM+XRnMdmj/jCnC9L6SgiuACaaZWZRg0k9amW00kX?=
	=?us-ascii?Q?hXPabMEeGldz5EmjQ7ibZ6rJ2jWomhOz24ZvNMdMWA7vticpBpY2r8lullj1?=
	=?us-ascii?Q?AW3ds9bbOWepMRM7+eazmTFvbnGlp7XmiOZAx9N9GFz9SYp415WVzgyJDcI3?=
	=?us-ascii?Q?Zv5NdeGatBbrAdK+mIYmsW2Zwu0/dR1o8naOsjgZHQiZoVLrPzeJcPu5peEt?=
	=?us-ascii?Q?6MhjLrqVSmpoGd9SC7UON1sloQTWD4gqkp9zjlPiDLlSrX5P82zNAuUEtv1a?=
	=?us-ascii?Q?Od5bnhluiitF+UpiIUg2DN9i9I+4kO05uk1imquhxf1Df8W6dRW7kWueVmfq?=
	=?us-ascii?Q?cayG/2NXfuO68i+RvWyg44ahWwxZIma9l7dv1wGSdbdt9vwaLTBxRCIvnYRn?=
	=?us-ascii?Q?gZWah6PgekDuSrIKoVvOVRN1ZmI5vf+J836t8zOu6RTmMxFEGJpL06k0gODF?=
	=?us-ascii?Q?N4w+F8baGJrF1YDSu6+0BHDOiD6Aad+bp7oH4e554YSZMwHtxk7pX6mLiFug?=
	=?us-ascii?Q?53Zd78MeVWFoDY2V91XF0/KWmu1rajq93N9doV8bfmupKyZiebp49DdBbYzV?=
	=?us-ascii?Q?Cwcua+4tctWAIXt/tLT2CvvnNZ/bM2geRAELjVV75pTpwAjbj/uc4C2a/2l8?=
	=?us-ascii?Q?n1XnLNhjdWil2m8L3MEO9vh/mcJBgsRsvo4B4sddLKcd8xEkLAbWrkSqo+w4?=
	=?us-ascii?Q?qpFGcjI2FgqDrsMzTUNfiwWLTzRc0pWcmokwtnEaSkhJ/o5NuN1KbYPNf/hI?=
	=?us-ascii?Q?nbi5vSdIdL87FdMz9cMsUAYLSbCWgayN4KFPw1ARZ84Juj1m0jUoggfQnJBP?=
	=?us-ascii?Q?Ik4oo7x3yvF/C0u4kQJmkxq7TvAFbnBPQZkFH23dyv2HNexfmz1VDEnzyuMA?=
	=?us-ascii?Q?2dB8sxSdp2NCmLMOxxUJacFcx4+/ORQWMhsiaysLExkXTKglinlqVh77/ivP?=
	=?us-ascii?Q?wPiAsWuN7ZE7Do=3D?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0159;
	6:YcMnWumGjXXcyf5gakfnE6y2TURLyWxxFsj4H1hQxR8arbbRD5hlMvHr4ccVD3oJTvRlCY6WTf/yfWFa+H5yUAYPqxyjzqQU+XK8UOUM6ip72fN1HhreT/5DKvfSr198xo9dNXI8yHY9jGqcOF/BpYtC7EUu+yLnMJ2CpzsgqS9w2x8syWGX0cvq6f1niFf3HlPc8jHFU5M6nOXC4+WUi1D7XrYDcGu/lmMXMMRH7skJ92GBg2KA0fPL8NUmlVIADaGe2XPZBrkZgUVhmkLRs63NjhiTmkKGS2KnFqP41U5cma3HbDP8jRCtnjM6dAjBjjUcjL2fRM+NSHHagDwizg==;
	5:8ZIfqjN35TAZP7lQT7UeQZv4XBXr041jokMgNgN6pRiUgDPSzfXtCcckDGmnNwQ25aoS9cyga0uI0SJh3J+b56HsEa0CDQBoI5W3X6oiSmpLo2D4sPW6Wo2iNO1iGXlGFiwVrZQ0wq44EwMPZBTHD0Agy5t1/yFFjzK7HE8F/N8=;
	24:GdD1YzsZK+Ie6F6/q7lkqJCHuIMVfO9bGCExthrq20rJbcGkHDODFA9zkxYAajHLMCoc49t/t/5mLnlt5S1dyeeqslRo7y121Z/1hli1a0k=;
	7:l0GuMtAvU/9dCFHL+6yQJoneTmy7EGyAfOrtibDilrKnioLG5YuRt5gvrzxpijrpsW2at7xJK120oP7Z5lvx+xbWPYfSO5sOF3Vfxa+oPSGdB0wwrOdHuXY2uR/baL5rLQHmwixpe12E+6eSbIYMj5m+bb0KeBV56ZYDouu6e64o//JeF04gSn72BQoEJMGlEpJVnhO6s1sv2Qng4H2u6SiWL0jIGU6d2IN4myjA6iU=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0159;
	20:BPRjwYf9d0oVtNHMnDD04ZJG9hTBVXFbP5kPzkg/+TWem36nFk9XkMMtfbiDExLJqe30bzwW/doxv3FeAXBF8lnGC6M1U/bMXQihskLOyU3049q0K80tvf05kk02uuAgmpngiBKwB6gXx8/hL/VbPf4gpb8kbLorTz+Jitln4DmofVDoU4ZUUWo3he0+Qyxw3EFfDkwkYen18uVusWy9CBtCvYcT1T37Qg2jwj9RUjq5yd0l0/tDoL1tv8zG2pS7
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 29 Sep 2017 21:28:12.0346
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR12MB0159
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 29, 2017, 9:27 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encrypted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org
Cc: x86@kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---

Hi Boris,

Similar to the sme_me_mask, sev_enabled must live in .data section otherwise it
will get zero&#39;ed in clear_bss() and we will loose the value. I have encountered
this issue when booting SEV guest using qemu&#39;s -kernel option.

I have removed your R-b since was not sure if you are still okay with the change.

Changes:
 * move sev_enabled in .data section

 arch/x86/include/asm/mem_encrypt.h |  6 ++++++
 arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++
 include/linux/mem_encrypt.h        |  7 +++++--
 3 files changed, 37 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 30, 2017, 8:49 a.m.</div>
<pre class="content">
On Fri, Sep 29, 2017 at 04:27:47PM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encrypted Virtualization (SEV). This initial</span>
<span class="quote">&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hi Boris,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Similar to the sme_me_mask, sev_enabled must live in .data section otherwise it</span>
<span class="quote">&gt; will get zero&#39;ed in clear_bss() and we will loose the value. I have encountered</span>
<span class="quote">&gt; this issue when booting SEV guest using qemu&#39;s -kernel option.</span>

Ah, good catch.
<span class="quote">
&gt; I have removed your R-b since was not sure if you are still okay with the change.</span>

Sure, looks good still.
<span class="reviewed-by">
Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 6a77c63540f7..2b024741bce9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void);</span>
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);
 
<span class="p_add">+bool sme_active(void);</span>
<span class="p_add">+bool sev_active(void);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_chunk">@@ -64,6 +67,9 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 3fcc8e01683b..b84c9a52df18 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -40,6 +40,8 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 u64 sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+static bool sev_enabled __section(.data) = false;</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_chunk">@@ -190,6 +192,30 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * SME and SEV are very similar but they are not the same, so there are</span>
<span class="p_add">+ * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="p_add">+ * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="p_add">+ * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The trampoline code is a good example for this requirement.  Before</span>
<span class="p_add">+ * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="p_add">+ * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="p_add">+ * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="p_add">+ * the trampoline area must be encrypted.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool sme_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="p_add">+</span>
<span class="p_add">+bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 265a9cd21cb4..b310a9c18113 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -23,11 +23,14 @@</span> <span class="p_context"></span>
 
 #define sme_me_mask	0ULL
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-static inline bool sme_active(void)</span>
<span class="p_add">+static inline bool mem_encrypt_active(void)</span>
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return sme_me_mask;</span>
 }
 
 static inline u64 sme_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



