
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:sched/hrtimers] sched: Move code around - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:sched/hrtimers] sched: Move code around</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 18, 2015, 11:02 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-5cc389bcee088b72c8c34a01d596412cab4f3f78@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6641701/mbox/"
   >mbox</a>
|
   <a href="/patch/6641701/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6641701/">/patch/6641701/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id C042BC0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Jun 2015 23:03:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 525B62075A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Jun 2015 23:03:49 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id ACB4D208B6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Jun 2015 23:03:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754444AbbFRXDj (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 18 Jun 2015 19:03:39 -0400
Received: from terminus.zytor.com ([198.137.202.10]:38575 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753122AbbFRXDd (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 18 Jun 2015 19:03:33 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.14.8/8.14.7) with ESMTP id t5IN2vnv020135;
	Thu, 18 Jun 2015 16:03:02 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.14.8/8.14.7/Submit) id t5IN2uqi020132;
	Thu, 18 Jun 2015 16:02:56 -0700
Date: Thu, 18 Jun 2015 16:02:56 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Peter Zijlstra &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-5cc389bcee088b72c8c34a01d596412cab4f3f78@git.kernel.org&gt;
Cc: hpa@zytor.com, mingo@kernel.org, linux-kernel@vger.kernel.org,
	peterz@infradead.org, tglx@linutronix.de
Reply-To: hpa@zytor.com, mingo@kernel.org, linux-kernel@vger.kernel.org,
	peterz@infradead.org, tglx@linutronix.de
In-Reply-To: &lt;20150611124743.662086684@infradead.org&gt;
References: &lt;20150611124743.662086684@infradead.org&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:sched/hrtimers] sched: Move code around
Git-Commit-ID: 5cc389bcee088b72c8c34a01d596412cab4f3f78
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt;
	to get blacklisted from these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-7.2 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - June 18, 2015, 11:02 p.m.</div>
<pre class="content">
Commit-ID:  5cc389bcee088b72c8c34a01d596412cab4f3f78
Gitweb:     http://git.kernel.org/tip/5cc389bcee088b72c8c34a01d596412cab4f3f78
Author:     Peter Zijlstra &lt;peterz@infradead.org&gt;
AuthorDate: Thu, 11 Jun 2015 14:46:50 +0200
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Fri, 19 Jun 2015 00:25:26 +0200

sched: Move code around

In preparation to reworking set_cpus_allowed_ptr() move some code
around. This also removes some superfluous #ifdefs and adds comments
to some #endifs.

   text    data     bss     dec     hex filename
12211532        1738144 1081344 15031020         e55aec defconfig-build/vmlinux.pre
12211532        1738144 1081344 15031020         e55aec defconfig-build/vmlinux.post
<span class="signed-off-by">
Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
Cc: ktkhai@parallels.com
Cc: rostedt@goodmis.org
Cc: juri.lelli@gmail.com
Cc: pang.xunlei@linaro.org
Cc: oleg@redhat.com
Cc: wanpeng.li@linux.intel.com
Cc: umgwanakikbuti@gmail.com
Link: http://lkml.kernel.org/r/20150611124743.662086684@infradead.org
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 kernel/sched/core.c | 364 +++++++++++++++++++++++++---------------------------
 1 file changed, 178 insertions(+), 186 deletions(-)

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">index ef546e3..26637c9 100644</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -1046,6 +1046,180 @@</span> <span class="p_context"> void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)</span>
 }
 
 #ifdef CONFIG_SMP
<span class="p_add">+/*</span>
<span class="p_add">+ * This is how migration works:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * 1) we invoke migration_cpu_stop() on the target CPU using</span>
<span class="p_add">+ *    stop_one_cpu().</span>
<span class="p_add">+ * 2) stopper starts to run (implicitly forcing the migrated thread</span>
<span class="p_add">+ *    off the CPU)</span>
<span class="p_add">+ * 3) it checks whether the migrated task is still in the wrong runqueue.</span>
<span class="p_add">+ * 4) if it&#39;s in the wrong runqueue then the migration thread removes</span>
<span class="p_add">+ *    it and puts it into the right queue.</span>
<span class="p_add">+ * 5) stopper completes and stop_one_cpu() returns and the migration</span>
<span class="p_add">+ *    is done.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * move_queued_task - move a queued task to new rq.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns (locked) new rq. Old rq&#39;s lock is released.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static struct rq *move_queued_task(struct task_struct *p, int new_cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct rq *rq = task_rq(p);</span>
<span class="p_add">+</span>
<span class="p_add">+	lockdep_assert_held(&amp;rq-&gt;lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	dequeue_task(rq, p, 0);</span>
<span class="p_add">+	p-&gt;on_rq = TASK_ON_RQ_MIGRATING;</span>
<span class="p_add">+	set_task_cpu(p, new_cpu);</span>
<span class="p_add">+	raw_spin_unlock(&amp;rq-&gt;lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	rq = cpu_rq(new_cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	raw_spin_lock(&amp;rq-&gt;lock);</span>
<span class="p_add">+	BUG_ON(task_cpu(p) != new_cpu);</span>
<span class="p_add">+	p-&gt;on_rq = TASK_ON_RQ_QUEUED;</span>
<span class="p_add">+	enqueue_task(rq, p, 0);</span>
<span class="p_add">+	check_preempt_curr(rq, p, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	return rq;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+struct migration_arg {</span>
<span class="p_add">+	struct task_struct *task;</span>
<span class="p_add">+	int dest_cpu;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Move (not current) task off this cpu, onto dest cpu. We&#39;re doing</span>
<span class="p_add">+ * this because either it can&#39;t run here any more (set_cpus_allowed()</span>
<span class="p_add">+ * away from this CPU, or CPU going down), or because we&#39;re</span>
<span class="p_add">+ * attempting to rebalance this task on exec (sched_exec).</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * So we race with normal scheduler movements, but that&#39;s OK, as long</span>
<span class="p_add">+ * as the task is no longer on this CPU.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns non-zero if task was successfully migrated.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int __migrate_task(struct task_struct *p, int src_cpu, int dest_cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct rq *rq;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(!cpu_active(dest_cpu)))</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	rq = cpu_rq(src_cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	raw_spin_lock(&amp;p-&gt;pi_lock);</span>
<span class="p_add">+	raw_spin_lock(&amp;rq-&gt;lock);</span>
<span class="p_add">+	/* Already moved. */</span>
<span class="p_add">+	if (task_cpu(p) != src_cpu)</span>
<span class="p_add">+		goto done;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Affinity changed (again). */</span>
<span class="p_add">+	if (!cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))</span>
<span class="p_add">+		goto fail;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If we&#39;re not on a rq, the next wake-up will ensure we&#39;re</span>
<span class="p_add">+	 * placed properly.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (task_on_rq_queued(p))</span>
<span class="p_add">+		rq = move_queued_task(p, dest_cpu);</span>
<span class="p_add">+done:</span>
<span class="p_add">+	ret = 1;</span>
<span class="p_add">+fail:</span>
<span class="p_add">+	raw_spin_unlock(&amp;rq-&gt;lock);</span>
<span class="p_add">+	raw_spin_unlock(&amp;p-&gt;pi_lock);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * migration_cpu_stop - this will be executed by a highprio stopper thread</span>
<span class="p_add">+ * and performs thread migration by bumping thread off CPU then</span>
<span class="p_add">+ * &#39;pushing&#39; onto another runqueue.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int migration_cpu_stop(void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct migration_arg *arg = data;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The original target cpu might have gone down and we might</span>
<span class="p_add">+	 * be on another cpu but it doesn&#39;t matter.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We need to explicitly wake pending tasks before running</span>
<span class="p_add">+	 * __migrate_task() such that we will not miss enforcing cpus_allowed</span>
<span class="p_add">+	 * during wakeups, see set_cpus_allowed_ptr()&#39;s TASK_WAKING test.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	sched_ttwu_pending();</span>
<span class="p_add">+	__migrate_task(arg-&gt;task, raw_smp_processor_id(), arg-&gt;dest_cpu);</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (p-&gt;sched_class-&gt;set_cpus_allowed)</span>
<span class="p_add">+		p-&gt;sched_class-&gt;set_cpus_allowed(p, new_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_add">+	p-&gt;nr_cpus_allowed = cpumask_weight(new_mask);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Change a given task&#39;s CPU affinity. Migrate the thread to a</span>
<span class="p_add">+ * proper CPU and schedule it away if the CPU it&#39;s executing on</span>
<span class="p_add">+ * is removed from the allowed bitmask.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * NOTE: the caller must have a valid reference to the task, the</span>
<span class="p_add">+ * task must not exit() &amp; deallocate itself prematurely. The</span>
<span class="p_add">+ * call is not atomic; no spinlocks may be held.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	struct rq *rq;</span>
<span class="p_add">+	unsigned int dest_cpu;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	rq = task_rq_lock(p, &amp;flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (cpumask_equal(&amp;p-&gt;cpus_allowed, new_mask))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!cpumask_intersects(new_mask, cpu_active_mask)) {</span>
<span class="p_add">+		ret = -EINVAL;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	do_set_cpus_allowed(p, new_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Can the task run on the task&#39;s current CPU? If so, we&#39;re done */</span>
<span class="p_add">+	if (cpumask_test_cpu(task_cpu(p), new_mask))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	dest_cpu = cpumask_any_and(cpu_active_mask, new_mask);</span>
<span class="p_add">+	if (task_running(rq, p) || p-&gt;state == TASK_WAKING) {</span>
<span class="p_add">+		struct migration_arg arg = { p, dest_cpu };</span>
<span class="p_add">+		/* Need help from migration thread: drop lock and wait. */</span>
<span class="p_add">+		task_rq_unlock(rq, p, &amp;flags);</span>
<span class="p_add">+		stop_one_cpu(cpu_of(rq), migration_cpu_stop, &amp;arg);</span>
<span class="p_add">+		tlb_migrate_finish(p-&gt;mm);</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	} else if (task_on_rq_queued(p))</span>
<span class="p_add">+		rq = move_queued_task(p, dest_cpu);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	task_rq_unlock(rq, p, &amp;flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(set_cpus_allowed_ptr);</span>
<span class="p_add">+</span>
 void set_task_cpu(struct task_struct *p, unsigned int new_cpu)
 {
 #ifdef CONFIG_SCHED_DEBUG
<span class="p_chunk">@@ -1186,13 +1360,6 @@</span> <span class="p_context"> out:</span>
 	return ret;
 }
 
<span class="p_del">-struct migration_arg {</span>
<span class="p_del">-	struct task_struct *task;</span>
<span class="p_del">-	int dest_cpu;</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static int migration_cpu_stop(void *data);</span>
<span class="p_del">-</span>
 /*
  * wait_task_inactive - wait for a thread to unschedule.
  *
<span class="p_chunk">@@ -1325,9 +1492,7 @@</span> <span class="p_context"> void kick_process(struct task_struct *p)</span>
 	preempt_enable();
 }
 EXPORT_SYMBOL_GPL(kick_process);
<span class="p_del">-#endif /* CONFIG_SMP */</span>
 
<span class="p_del">-#ifdef CONFIG_SMP</span>
 /*
  * -&gt;cpus_allowed is protected by both rq-&gt;lock and p-&gt;pi_lock
  */
<span class="p_chunk">@@ -1432,7 +1597,7 @@</span> <span class="p_context"> static void update_avg(u64 *avg, u64 sample)</span>
 	s64 diff = sample - *avg;
 	*avg += diff &gt;&gt; 3;
 }
<span class="p_del">-#endif</span>
<span class="p_add">+#endif /* CONFIG_SMP */</span>
 
 static void
 ttwu_stat(struct task_struct *p, int cpu, int wake_flags)
<span class="p_chunk">@@ -4773,149 +4938,6 @@</span> <span class="p_context"> out:</span>
 }
 
 #ifdef CONFIG_SMP
<span class="p_del">-/*</span>
<span class="p_del">- * move_queued_task - move a queued task to new rq.</span>
<span class="p_del">- *</span>
<span class="p_del">- * Returns (locked) new rq. Old rq&#39;s lock is released.</span>
<span class="p_del">- */</span>
<span class="p_del">-static struct rq *move_queued_task(struct task_struct *p, int new_cpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct rq *rq = task_rq(p);</span>
<span class="p_del">-</span>
<span class="p_del">-	lockdep_assert_held(&amp;rq-&gt;lock);</span>
<span class="p_del">-</span>
<span class="p_del">-	dequeue_task(rq, p, 0);</span>
<span class="p_del">-	p-&gt;on_rq = TASK_ON_RQ_MIGRATING;</span>
<span class="p_del">-	set_task_cpu(p, new_cpu);</span>
<span class="p_del">-	raw_spin_unlock(&amp;rq-&gt;lock);</span>
<span class="p_del">-</span>
<span class="p_del">-	rq = cpu_rq(new_cpu);</span>
<span class="p_del">-</span>
<span class="p_del">-	raw_spin_lock(&amp;rq-&gt;lock);</span>
<span class="p_del">-	BUG_ON(task_cpu(p) != new_cpu);</span>
<span class="p_del">-	p-&gt;on_rq = TASK_ON_RQ_QUEUED;</span>
<span class="p_del">-	enqueue_task(rq, p, 0);</span>
<span class="p_del">-	check_preempt_curr(rq, p, 0);</span>
<span class="p_del">-</span>
<span class="p_del">-	return rq;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (p-&gt;sched_class-&gt;set_cpus_allowed)</span>
<span class="p_del">-		p-&gt;sched_class-&gt;set_cpus_allowed(p, new_mask);</span>
<span class="p_del">-</span>
<span class="p_del">-	cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_del">-	p-&gt;nr_cpus_allowed = cpumask_weight(new_mask);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * This is how migration works:</span>
<span class="p_del">- *</span>
<span class="p_del">- * 1) we invoke migration_cpu_stop() on the target CPU using</span>
<span class="p_del">- *    stop_one_cpu().</span>
<span class="p_del">- * 2) stopper starts to run (implicitly forcing the migrated thread</span>
<span class="p_del">- *    off the CPU)</span>
<span class="p_del">- * 3) it checks whether the migrated task is still in the wrong runqueue.</span>
<span class="p_del">- * 4) if it&#39;s in the wrong runqueue then the migration thread removes</span>
<span class="p_del">- *    it and puts it into the right queue.</span>
<span class="p_del">- * 5) stopper completes and stop_one_cpu() returns and the migration</span>
<span class="p_del">- *    is done.</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * Change a given task&#39;s CPU affinity. Migrate the thread to a</span>
<span class="p_del">- * proper CPU and schedule it away if the CPU it&#39;s executing on</span>
<span class="p_del">- * is removed from the allowed bitmask.</span>
<span class="p_del">- *</span>
<span class="p_del">- * NOTE: the caller must have a valid reference to the task, the</span>
<span class="p_del">- * task must not exit() &amp; deallocate itself prematurely. The</span>
<span class="p_del">- * call is not atomic; no spinlocks may be held.</span>
<span class="p_del">- */</span>
<span class="p_del">-int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-	struct rq *rq;</span>
<span class="p_del">-	unsigned int dest_cpu;</span>
<span class="p_del">-	int ret = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	rq = task_rq_lock(p, &amp;flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (cpumask_equal(&amp;p-&gt;cpus_allowed, new_mask))</span>
<span class="p_del">-		goto out;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!cpumask_intersects(new_mask, cpu_active_mask)) {</span>
<span class="p_del">-		ret = -EINVAL;</span>
<span class="p_del">-		goto out;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	do_set_cpus_allowed(p, new_mask);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Can the task run on the task&#39;s current CPU? If so, we&#39;re done */</span>
<span class="p_del">-	if (cpumask_test_cpu(task_cpu(p), new_mask))</span>
<span class="p_del">-		goto out;</span>
<span class="p_del">-</span>
<span class="p_del">-	dest_cpu = cpumask_any_and(cpu_active_mask, new_mask);</span>
<span class="p_del">-	if (task_running(rq, p) || p-&gt;state == TASK_WAKING) {</span>
<span class="p_del">-		struct migration_arg arg = { p, dest_cpu };</span>
<span class="p_del">-		/* Need help from migration thread: drop lock and wait. */</span>
<span class="p_del">-		task_rq_unlock(rq, p, &amp;flags);</span>
<span class="p_del">-		stop_one_cpu(cpu_of(rq), migration_cpu_stop, &amp;arg);</span>
<span class="p_del">-		tlb_migrate_finish(p-&gt;mm);</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-	} else if (task_on_rq_queued(p))</span>
<span class="p_del">-		rq = move_queued_task(p, dest_cpu);</span>
<span class="p_del">-out:</span>
<span class="p_del">-	task_rq_unlock(rq, p, &amp;flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(set_cpus_allowed_ptr);</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * Move (not current) task off this cpu, onto dest cpu. We&#39;re doing</span>
<span class="p_del">- * this because either it can&#39;t run here any more (set_cpus_allowed()</span>
<span class="p_del">- * away from this CPU, or CPU going down), or because we&#39;re</span>
<span class="p_del">- * attempting to rebalance this task on exec (sched_exec).</span>
<span class="p_del">- *</span>
<span class="p_del">- * So we race with normal scheduler movements, but that&#39;s OK, as long</span>
<span class="p_del">- * as the task is no longer on this CPU.</span>
<span class="p_del">- *</span>
<span class="p_del">- * Returns non-zero if task was successfully migrated.</span>
<span class="p_del">- */</span>
<span class="p_del">-static int __migrate_task(struct task_struct *p, int src_cpu, int dest_cpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct rq *rq;</span>
<span class="p_del">-	int ret = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (unlikely(!cpu_active(dest_cpu)))</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-</span>
<span class="p_del">-	rq = cpu_rq(src_cpu);</span>
<span class="p_del">-</span>
<span class="p_del">-	raw_spin_lock(&amp;p-&gt;pi_lock);</span>
<span class="p_del">-	raw_spin_lock(&amp;rq-&gt;lock);</span>
<span class="p_del">-	/* Already moved. */</span>
<span class="p_del">-	if (task_cpu(p) != src_cpu)</span>
<span class="p_del">-		goto done;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Affinity changed (again). */</span>
<span class="p_del">-	if (!cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))</span>
<span class="p_del">-		goto fail;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * If we&#39;re not on a rq, the next wake-up will ensure we&#39;re</span>
<span class="p_del">-	 * placed properly.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (task_on_rq_queued(p))</span>
<span class="p_del">-		rq = move_queued_task(p, dest_cpu);</span>
<span class="p_del">-done:</span>
<span class="p_del">-	ret = 1;</span>
<span class="p_del">-fail:</span>
<span class="p_del">-	raw_spin_unlock(&amp;rq-&gt;lock);</span>
<span class="p_del">-	raw_spin_unlock(&amp;p-&gt;pi_lock);</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-}</span>
 
 #ifdef CONFIG_NUMA_BALANCING
 /* Migrate current task p to target_cpu */
<span class="p_chunk">@@ -4963,35 +4985,9 @@</span> <span class="p_context"> void sched_setnuma(struct task_struct *p, int nid)</span>
 		enqueue_task(rq, p, 0);
 	task_rq_unlock(rq, p, &amp;flags);
 }
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * migration_cpu_stop - this will be executed by a highprio stopper thread</span>
<span class="p_del">- * and performs thread migration by bumping thread off CPU then</span>
<span class="p_del">- * &#39;pushing&#39; onto another runqueue.</span>
<span class="p_del">- */</span>
<span class="p_del">-static int migration_cpu_stop(void *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct migration_arg *arg = data;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * The original target cpu might have gone down and we might</span>
<span class="p_del">-	 * be on another cpu but it doesn&#39;t matter.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	local_irq_disable();</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * We need to explicitly wake pending tasks before running</span>
<span class="p_del">-	 * __migrate_task() such that we will not miss enforcing cpus_allowed</span>
<span class="p_del">-	 * during wakeups, see set_cpus_allowed_ptr()&#39;s TASK_WAKING test.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	sched_ttwu_pending();</span>
<span class="p_del">-	__migrate_task(arg-&gt;task, raw_smp_processor_id(), arg-&gt;dest_cpu);</span>
<span class="p_del">-	local_irq_enable();</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_add">+#endif /* CONFIG_NUMA_BALANCING */</span>
 
 #ifdef CONFIG_HOTPLUG_CPU
<span class="p_del">-</span>
 /*
  * Ensures that the idle task is using init_mm right before its cpu goes
  * offline.
<span class="p_chunk">@@ -5094,7 +5090,6 @@</span> <span class="p_context"> static void migrate_tasks(unsigned int dead_cpu)</span>
 
 	rq-&gt;stop = stop;
 }
<span class="p_del">-</span>
 #endif /* CONFIG_HOTPLUG_CPU */
 
 #if defined(CONFIG_SCHED_DEBUG) &amp;&amp; defined(CONFIG_SYSCTL)
<span class="p_chunk">@@ -5273,7 +5268,7 @@</span> <span class="p_context"> static void register_sched_domain_sysctl(void)</span>
 static void unregister_sched_domain_sysctl(void)
 {
 }
<span class="p_del">-#endif</span>
<span class="p_add">+#endif /* CONFIG_SCHED_DEBUG &amp;&amp; CONFIG_SYSCTL */</span>
 
 static void set_rq_online(struct rq *rq)
 {
<span class="p_chunk">@@ -5420,9 +5415,6 @@</span> <span class="p_context"> static int __init migration_init(void)</span>
 	return 0;
 }
 early_initcall(migration_init);
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_SMP</span>
 
 static cpumask_var_t sched_domains_tmpmask; /* sched_domains_mutex */
 
<span class="p_chunk">@@ -6648,7 +6640,7 @@</span> <span class="p_context"> static int __sdt_alloc(const struct cpumask *cpu_map)</span>
 			struct sched_group *sg;
 			struct sched_group_capacity *sgc;
 
<span class="p_del">-		       	sd = kzalloc_node(sizeof(struct sched_domain) + cpumask_size(),</span>
<span class="p_add">+			sd = kzalloc_node(sizeof(struct sched_domain) + cpumask_size(),</span>
 					GFP_KERNEL, cpu_to_node(j));
 			if (!sd)
 				return -ENOMEM;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



