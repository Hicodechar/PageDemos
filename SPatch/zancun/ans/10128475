
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/5] x86/mm: Use a struct to reduce parameters for SME PGD mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/5] x86/mm: Use a struct to reduce parameters for SME PGD mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 21, 2017, 10:03 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171221220302.30632.72365.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10128475/mbox/"
   >mbox</a>
|
   <a href="/patch/10128475/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10128475/">/patch/10128475/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E069260318 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 Dec 2017 22:03:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D20F629EA2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 Dec 2017 22:03:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C4B6A29EA9; Thu, 21 Dec 2017 22:03:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0062629EA2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 21 Dec 2017 22:03:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755113AbdLUWDP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 21 Dec 2017 17:03:15 -0500
Received: from mail-sn1nam01on0075.outbound.protection.outlook.com
	([104.47.32.75]:31048
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750920AbdLUWDJ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 21 Dec 2017 17:03:09 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=i2EElsgpMqjxVPtwxp6e/RgUk3dNvbFQulcT6Dr05ZQ=;
	b=x06amsaMiuainZMhHq8OtXVT+ozKvXE+AcPQEmtm0Mo0TpANwVikKS+zpK4Fl7cVz78/D2rponMErPEhn6zNOjbL0zuIBVtejZokagzvsWWuRvLBt3SIyErETkoIf1uI2Cj9NQx7YQ7Ru6L1yJNSwK+6+gQPYVL1ZSLbTRmplNA=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Thomas.Lendacky@amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	CY4PR12MB1144.namprd12.prod.outlook.com (10.168.164.136) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.323.15; Thu, 21 Dec 2017 22:03:06 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v2 2/5] x86/mm: Use a struct to reduce parameters for SME
	PGD mapping
To: x86@kernel.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	linux-kernel@vger.kernel.org, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;
Date: Thu, 21 Dec 2017 16:03:02 -0600
Message-ID: &lt;20171221220302.30632.72365.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20171221220242.30632.5031.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20171221220242.30632.5031.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR10CA0061.namprd10.prod.outlook.com (10.169.238.23) To
	CY4PR12MB1144.namprd12.prod.outlook.com (10.168.164.136)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: b2c127eb-cbf4-4dfd-e9f6-08d548be9de6
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(4534020)(4602075)(4627115)(201703031133081)(201702281549075)(48565401081)(5600026)(4604075)(2017052603307)(7153060);
	SRVR:CY4PR12MB1144; 
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	3:6P3d6DiwxJdKe5Qr+DYogCb/DGIwQ+7onrA4hD5A3LykV8YsM9Lv2W7EYJ68HzodXd0PArlCQoezJE7DCB6Z9oFg1VMpYv4iL/g0sLIzuMvB21S8ybytQFDgrrfnWYAMbdo75MDgnhLJkqFANBpRSU+v1ck1TxFOgxgc6/snfuiUmWyP4Lz4P6ugDaePn8B8YCNM7Lc/tByNY8Na/APkqt8SiQCebWPJ6HFWg5OPP0FRXkIJRf4kyd9c8pYNlItH;
	25:gXutHgQ4xfF2cVh8Zfw8gJx9ETvtIenhhwtmtxPhifKCdyc8omY3j1QTdvJy0XKkV+wuSlbVaTykNVMEJIPmbzi1Nx0dIo/PDZSilwBoRXvC5fyrph5Tl6TJBLyB2XL4i0EAUCN3T1lS+a5XABxd5F5ykYLUFhLNXnrBVG4N1ujP6IQEd63LB913/4pCCc8gCL0RzDDNbIQHtGc5mOUz1dvPaSebvaej1MVrB9sR0O8OJ1TmG8t2WDi0SDaFyeQthp9M3fo+9m2jm7CpKEpiBnSaV+tDRDtnq0aww3F52O+Y/iIaMqJO6bVIvFFYaP9/Z+0xUh29R1bYmHeDS+ebgg==;
	31:uF6qbCh38Ky6hknXDJv+2QaMQMH+MsR2at2Z0VkNs78323qiKRAbnu4+MkaYG86B++WiFfPsoCkKX/NyWt3UmqkiWMB/GipwCv9IN/29UhhS8yiKe+9O3r4VuZfF7MCHJQkjR6JGrnJxpkfkwb4NhFMBby3/kk/NTGCdQTg0n681t4NWjl8Ru7hy7kvYhe9vnag1r6EHVSCG4H5Hwt9LJS4vqgdn9kpZrCVPeTosxqM=
X-MS-TrafficTypeDiagnostic: CY4PR12MB1144:
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	20:MBDI4ZkSDaUXZM0FyAmJYU0nQnKarz9NCfMYmWuMEM7MkSIVQFydGnpJEke9mMSvhibNyotUzm6L/rxZZrpx+uigfAclzvYoWADEMZslFgc6hW8lfrdpUiQzOqhD3+4yfFB0GBr9H5ZPf9X95F8rCpvhCKH2I7DU2bCw7lsl3RbTKWYGffMP4icnR1XN96/5LFk2bD2/RWnHdwY/XqBzhnE4xu6YIfa7dUSnPjLX/jYugsc0Djn4KsxyHFUatjzfsbMX/FrgVs8FweBvlHGzrsblBCWwuziSIJCEz3yB/LG/e0D2/h9rQBgIPT6PBbmYwLk0uqUd4N8DpaszTIvBJJ36D2R58vH9iiT9BUjpfUxNWtDwUmvXKwPnVAqm/0JeX082clc+89GNOhiaFK7ts4R5J8pj76tOs4k/kV1D8XOITL3HlkHug/utU+9woou0meKDwb0eDoJCZa0oF1+hfsUzsSECbLOHHbyx+KA6sgyMaWgm9yORbCdfpK5eQz+R;
	4:0bSm93lN6V4YQdNPsIXfs7/zqU3RW9zGW/ckmDO+rYpDDQaCnuJ9AJqjb/Rr+HExY2SlAUrmorgXbR0NrCpp43cwY1yM/M+pdiNHpODQzm9dRonUVLbEtdCustGlExNS8PzVC1siZUYrwGEGee81HFJvHu5GFzAByWqzX40floo9mTVh0OBoJvKRL4rfX+osBpQqRcSZCSvgHHgOFCWkLh9MR/IYcLBLRThqQEDSxLp5Sxsv6gBGuZurezDMilI33MDS5FDz8AUqMP5wdmRb79k/8U8XKiQ+lEKS7pJCxf9xyngYiBdP7HQFibJ1U5UX
X-Microsoft-Antispam-PRVS: &lt;CY4PR12MB11449C0B88D5C5BFAE3CE856EC0D0@CY4PR12MB1144.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040470)(2401047)(8121501046)(5005006)(3002001)(93006095)(93001095)(3231023)(10201501046)(6055026)(6041268)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123562045)(20161123564045)(20161123558120)(6072148)(201708071742011);
	SRVR:CY4PR12MB1144; BCL:0; PCL:0;
	RULEID:(100000803101)(100110400095); SRVR:CY4PR12MB1144; 
X-Forefront-PRVS: 0528942FD8
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(396003)(39860400002)(39380400002)(366004)(376002)(346002)(189003)(199004)(69596002)(86362001)(23676004)(72206003)(52116002)(7696005)(478600001)(2486003)(76176011)(47776003)(6116002)(97746001)(1076002)(3846002)(5660300001)(230700001)(66066001)(2950100002)(81156014)(6666003)(68736007)(8676002)(81166006)(6916009)(2906002)(50466002)(53936002)(83506002)(25786009)(2361001)(7736002)(305945005)(106356001)(53416004)(105586002)(4326008)(2351001)(316002)(58126008)(16526018)(54906003)(55016002)(6506007)(9686003)(386003)(97736004)(8936002)(103116003)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY4PR12MB1144;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; PTR:InfoNoRecords;
	MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQ0OzIzOk1tcVNhZFJUdXpKU1dKSWIwajVyemlzL0ZD?=
	=?utf-8?B?SlQ3bXZCWDNPSndUbzBoc2IxNW05di9HUTdyN09CZjFuNzVXanpKMUpjWk96?=
	=?utf-8?B?MUQ1dXkrbzNOZWw5dkVoYWJLdWtxekYvT3JvZVErMC9XcTExSkJBMEpsRnJj?=
	=?utf-8?B?ejJCZnNmRWZReDVTMUxCbkZVMlJFMnRMVFZoSjVObEFXMXp0ZVNrS2pTRjRr?=
	=?utf-8?B?V3gxOEZ3c3J1YnBDd1Bxa0dvTGM2UXRpVmJReHZpUDBScWxnaGE5WGJoOEF5?=
	=?utf-8?B?YTJlZlFBdnY1UjZpMUZ2SkN2alY0K2VDOWlpM2xtZFgrK1FhNXp3c05zejlY?=
	=?utf-8?B?VmM3ZHBYOGFLS0dBNEcyMEMvVDZFQlNaSzJRUENveWoveU5KNzNEZ2kvSmFv?=
	=?utf-8?B?YU1UT2hkdTkvVVVkVHZNMmw2VHU4V25FU1lhVVVxV3gwUkw1Uk9PYUd3OFY5?=
	=?utf-8?B?OGhLTFVZVkdUT3RPd3BSU29qbUs2NW1ZcFZjS3ZXS3NzejhpWVVUUEFacDNm?=
	=?utf-8?B?WW92Umk5YWFMNTE5bS95bGlWTHplSmpmY09nVDRKc05Tcnd6U1VjUks4NTU2?=
	=?utf-8?B?S1pJdjZvdmtoU1NQT09LcFRDTytzdzFBbTNkdElSOTI3d0dUb01pN3ZMZmov?=
	=?utf-8?B?N2EzVUlLeElPUmtWUVNKYWVERER2djVIMEY2VGwzVUtVcHlaeUlwRFdXazN3?=
	=?utf-8?B?UGRnc1AreG91MmJBOW5NT1FYU01jVWdESkFxRDljQmlVY21HeUNkM3B3OGln?=
	=?utf-8?B?SlUydWRCdFZvb1V0QzFTdHVqZDhpS0IyUnR0KzBHT3JhZXRhQThkTHpaQW5O?=
	=?utf-8?B?V2pJTDRMRE9PeTNzSFFWM1NlZkhMbWw5ditqSWxVRDhvMi9mUGZ5bTZ6WHVp?=
	=?utf-8?B?cUJLSGVBeG5JTUJSUzdIQVgrYjgydXJzRTg4VlpBSkd2WHgwRnNIMEwrcVFw?=
	=?utf-8?B?TGdCWGNQTVl6ZS9nQlVWM2hJUmFyZzRZTDhBNTVveVdXS3RHbGVLVWRBT3Zq?=
	=?utf-8?B?TTM1NkwrWTBvL2plbUNiaWo3Q2s1K1JvN1ZQaVBTTSt3SFhkMjQwS2FSZERx?=
	=?utf-8?B?c1EyZVRFbkpwbW56cXpnRmJ1ZHRLT2U0OFJSbUErRmErU3BOdWloa3JkSHN0?=
	=?utf-8?B?SkZiRk9ObVJhM1ZMdUY5enVvTDIrS3dFU3doM2c3dVJxV3ZnTlp2QXF5WGFM?=
	=?utf-8?B?QXBKTkVmK0JCdEtVdTlhMnV3c1FzSnpvMlo5d016S1pHOFlGQ1NXYlJiZHd1?=
	=?utf-8?B?aElTY09FT25HUGkzQ1lvdU9nSm1oVlhsQVBRdUU2alVvRXF3TVRZL1VUd1h5?=
	=?utf-8?B?WE5WUjIvZm5xWERwd0hXMGUrYVFXNHZUaC85NHhKdzM1SW9ZNkFjaGRuZ1Yr?=
	=?utf-8?B?VThPSTFjMnBHV1FsOC95eGp5YzJ1cW5ObTRRdDc1cGV4ckhTVlQrOGVQNDdV?=
	=?utf-8?B?cHV0MmhuZUpUUERHTStseHlURkVKbGhvTkRaVWdmTnR5RS9KeUd3enJjSitO?=
	=?utf-8?B?b2szUkpJbCtFV29ZNjFLRUowOWFLTUJjeExXc2oxajVSSHNqNEFJZ1RqN2h2?=
	=?utf-8?B?Wm1CVFppSm10ZVZ3NHgyenh2c1liQXovaVRBcnowZFBUeTVQcnVjMjhycG5P?=
	=?utf-8?B?M1FXMXhlSVdlY0hadDlIK1hrQitYNmdxWldNdWRJcTBDMTdkelh4NStsZHpt?=
	=?utf-8?B?WStXSitFR2JtUWNyOGhyQ1pNcWthL3RwUUlndFBmSkJsNkc3OEVZOHRlMXlC?=
	=?utf-8?B?WHJWc2p4Z1VuS1RjbkJqUT09?=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	6:tLp7GYTUPHch3z/ssWpBj06Xbj0Z8Qt8X8Bsd7fX3gPt4jenLtFDLjthXrWpNwEg8SlDAu7ICQ4sicwIEr3keGqfdYF8U76OA+kcV55N2Tqd7Z4tdy0Vk7/SdpJYfpjWPGeBSZqBOHPAQzuHpLJxGFEyuCc8t+6cfcWiBKXPh5OPwlV9sx051O2AP3UvG7nGFsLTYZow9RohO+DL4etpDyKOL6E8qQaFL4ZXtD8LDxmk7sTc4kry2YRgN9HhTtnimY9cnm9LVP66EF8RXlWfJWOxumJ7fRATfcYXuZKdx6AbVnHXvPvkg7K5Z0VhH2LKeD8+5u0ITtoleG/5mZMRk18+SVPcp7tZV6M+2saVsuE=;
	5:HeAOkg5kcoMxVzuy0dCqqatxCKUMz14S4b9xsVwAfSWwvSph2xTNB3+yKgUBF0yzffJUCp6LcJkpr3D2VsRDCB4hqpQnyJVSbLMtlF/JWbJWyENQJM1pn1uSdX2fBhVOPMh9mP8CZSZIiWBcwo/LErF8rZRQ+Y8O955P21ackS8=;
	24:qknbaSAQLqQEW8Owg51t7WYjudg7yX324dH9Zd4P5c02M+Lk9NqSnO6Xn9vJELOkzdbZ4q3/QzEHOONp5cv4+I0rj/hp46UmdK/Ue7ckKt0=;
	7:yaJQ4BVvNY+qnoowqmMVi8mUyhKoJR6zTNrNcyh8zAGUWZsxM/rs3nZEoGEy0clpjj3SE3J8eZ8UWLEA52GbxAWHK/pjbJzPSvA+AhApLrVBwbSuVnnfK8dy3R+83ifBFNnapfIf4CzcnVHU+K+8iEclfMde6UYPKMMMbLGGWKii1vJfvfUvIVwKWx1Rqxb5IQt3B8DLQnfW2/E/lyFEte1RgCMR1qSzT1erQ4VtvqYf9/7SYJJ25Y/bbr9ExN/o
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1144;
	20:HU91aO0EHirEgxBYfyYSx32DAcK0u2iUciT42cbuXSdPjrWT4zvgsl614bPsGrj0GL1ACe8mKRModk6FSSKJWiaECQlZrncoIpAkdVCeod6l932qKln7L6AKDTT25FkfxXEsiUwzPE/P3GBpKOQNmKv0Ezc0eaIzHNAW41B8afEhCZlT4X/2lmasQNu7Ze8Xe7uAJubDGACJtn9r2iuXTuw1msApzxWvb1GlK2mlAldfXLfNQ5NsKf3UJ1W1LR0B
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 21 Dec 2017 22:03:06.5509
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: b2c127eb-cbf4-4dfd-e9f6-08d548be9de6
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1144
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Dec. 21, 2017, 10:03 p.m.</div>
<pre class="content">
In preparation for follow-on patches, combine the PGD mapping parameters
into a struct to reduce the number of function arguments and allow for
direct updating of the next pagetable mapping area pointer.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/mm/mem_encrypt.c |   90 +++++++++++++++++++++++----------------------
 1 file changed, 46 insertions(+), 44 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 391b134..5a20696 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -464,6 +464,14 @@</span> <span class="p_context"> void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
 	set_memory_decrypted((unsigned long)vaddr, size &gt;&gt; PAGE_SHIFT);
 }
 
<span class="p_add">+struct sme_populate_pgd_data {</span>
<span class="p_add">+	void	*pgtable_area;</span>
<span class="p_add">+	pgd_t	*pgd;</span>
<span class="p_add">+</span>
<span class="p_add">+	pmdval_t pmd_val;</span>
<span class="p_add">+	unsigned long vaddr;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static void __init sme_clear_pgd(pgd_t *pgd_base, unsigned long start,
 				 unsigned long end)
 {
<span class="p_chunk">@@ -486,15 +494,14 @@</span> <span class="p_context"> static void __init sme_clear_pgd(pgd_t *pgd_base, unsigned long start,</span>
 #define PUD_FLAGS	_KERNPG_TABLE_NOENC
 #define PMD_FLAGS	(__PAGE_KERNEL_LARGE_EXEC &amp; ~_PAGE_GLOBAL)
 
<span class="p_del">-static void __init *sme_populate_pgd(pgd_t *pgd_base, void *pgtable_area,</span>
<span class="p_del">-				     unsigned long vaddr, pmdval_t pmd_val)</span>
<span class="p_add">+static void __init sme_populate_pgd_large(struct sme_populate_pgd_data *ppd)</span>
 {
 	pgd_t *pgd_p;
 	p4d_t *p4d_p;
 	pud_t *pud_p;
 	pmd_t *pmd_p;
 
<span class="p_del">-	pgd_p = pgd_base + pgd_index(vaddr);</span>
<span class="p_add">+	pgd_p = ppd-&gt;pgd + pgd_index(ppd-&gt;vaddr);</span>
 	if (native_pgd_val(*pgd_p)) {
 		if (IS_ENABLED(CONFIG_X86_5LEVEL))
 			p4d_p = (p4d_t *)(native_pgd_val(*pgd_p) &amp; ~PTE_FLAGS_MASK);
<span class="p_chunk">@@ -504,15 +511,15 @@</span> <span class="p_context"> static void __init *sme_populate_pgd(pgd_t *pgd_base, void *pgtable_area,</span>
 		pgd_t pgd;
 
 		if (IS_ENABLED(CONFIG_X86_5LEVEL)) {
<span class="p_del">-			p4d_p = pgtable_area;</span>
<span class="p_add">+			p4d_p = ppd-&gt;pgtable_area;</span>
 			memset(p4d_p, 0, sizeof(*p4d_p) * PTRS_PER_P4D);
<span class="p_del">-			pgtable_area += sizeof(*p4d_p) * PTRS_PER_P4D;</span>
<span class="p_add">+			ppd-&gt;pgtable_area += sizeof(*p4d_p) * PTRS_PER_P4D;</span>
 
 			pgd = native_make_pgd((pgdval_t)p4d_p + PGD_FLAGS);
 		} else {
<span class="p_del">-			pud_p = pgtable_area;</span>
<span class="p_add">+			pud_p = ppd-&gt;pgtable_area;</span>
 			memset(pud_p, 0, sizeof(*pud_p) * PTRS_PER_PUD);
<span class="p_del">-			pgtable_area += sizeof(*pud_p) * PTRS_PER_PUD;</span>
<span class="p_add">+			ppd-&gt;pgtable_area += sizeof(*pud_p) * PTRS_PER_PUD;</span>
 
 			pgd = native_make_pgd((pgdval_t)pud_p + PGD_FLAGS);
 		}
<span class="p_chunk">@@ -520,44 +527,41 @@</span> <span class="p_context"> static void __init *sme_populate_pgd(pgd_t *pgd_base, void *pgtable_area,</span>
 	}
 
 	if (IS_ENABLED(CONFIG_X86_5LEVEL)) {
<span class="p_del">-		p4d_p += p4d_index(vaddr);</span>
<span class="p_add">+		p4d_p += p4d_index(ppd-&gt;vaddr);</span>
 		if (native_p4d_val(*p4d_p)) {
 			pud_p = (pud_t *)(native_p4d_val(*p4d_p) &amp; ~PTE_FLAGS_MASK);
 		} else {
 			p4d_t p4d;
 
<span class="p_del">-			pud_p = pgtable_area;</span>
<span class="p_add">+			pud_p = ppd-&gt;pgtable_area;</span>
 			memset(pud_p, 0, sizeof(*pud_p) * PTRS_PER_PUD);
<span class="p_del">-			pgtable_area += sizeof(*pud_p) * PTRS_PER_PUD;</span>
<span class="p_add">+			ppd-&gt;pgtable_area += sizeof(*pud_p) * PTRS_PER_PUD;</span>
 
 			p4d = native_make_p4d((pudval_t)pud_p + P4D_FLAGS);
 			native_set_p4d(p4d_p, p4d);
 		}
 	}
 
<span class="p_del">-	pud_p += pud_index(vaddr);</span>
<span class="p_add">+	pud_p += pud_index(ppd-&gt;vaddr);</span>
 	if (native_pud_val(*pud_p)) {
 		if (native_pud_val(*pud_p) &amp; _PAGE_PSE)
<span class="p_del">-			goto out;</span>
<span class="p_add">+			return;</span>
 
 		pmd_p = (pmd_t *)(native_pud_val(*pud_p) &amp; ~PTE_FLAGS_MASK);
 	} else {
 		pud_t pud;
 
<span class="p_del">-		pmd_p = pgtable_area;</span>
<span class="p_add">+		pmd_p = ppd-&gt;pgtable_area;</span>
 		memset(pmd_p, 0, sizeof(*pmd_p) * PTRS_PER_PMD);
<span class="p_del">-		pgtable_area += sizeof(*pmd_p) * PTRS_PER_PMD;</span>
<span class="p_add">+		ppd-&gt;pgtable_area += sizeof(*pmd_p) * PTRS_PER_PMD;</span>
 
 		pud = native_make_pud((pmdval_t)pmd_p + PUD_FLAGS);
 		native_set_pud(pud_p, pud);
 	}
 
<span class="p_del">-	pmd_p += pmd_index(vaddr);</span>
<span class="p_add">+	pmd_p += pmd_index(ppd-&gt;vaddr);</span>
 	if (!native_pmd_val(*pmd_p) || !(native_pmd_val(*pmd_p) &amp; _PAGE_PSE))
<span class="p_del">-		native_set_pmd(pmd_p, native_make_pmd(pmd_val));</span>
<span class="p_del">-</span>
<span class="p_del">-out:</span>
<span class="p_del">-	return pgtable_area;</span>
<span class="p_add">+		native_set_pmd(pmd_p, native_make_pmd(ppd-&gt;pmd_val));</span>
 }
 
 static unsigned long __init sme_pgtable_calc(unsigned long len)
<span class="p_chunk">@@ -615,11 +619,10 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	unsigned long workarea_start, workarea_end, workarea_len;
 	unsigned long execute_start, execute_end, execute_len;
 	unsigned long kernel_start, kernel_end, kernel_len;
<span class="p_add">+	struct sme_populate_pgd_data ppd;</span>
 	unsigned long pgtable_area_len;
 	unsigned long paddr, pmd_flags;
 	unsigned long decrypted_base;
<span class="p_del">-	void *pgtable_area;</span>
<span class="p_del">-	pgd_t *pgd;</span>
 
 	if (!sme_active())
 		return;
<span class="p_chunk">@@ -683,18 +686,18 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	 * pagetables and when the new encrypted and decrypted kernel
 	 * mappings are populated.
 	 */
<span class="p_del">-	pgtable_area = (void *)execute_end;</span>
<span class="p_add">+	ppd.pgtable_area = (void *)execute_end;</span>
 
 	/*
 	 * Make sure the current pagetable structure has entries for
 	 * addressing the workarea.
 	 */
<span class="p_del">-	pgd = (pgd_t *)native_read_cr3_pa();</span>
<span class="p_add">+	ppd.pgd = (pgd_t *)native_read_cr3_pa();</span>
 	paddr = workarea_start;
 	while (paddr &lt; workarea_end) {
<span class="p_del">-		pgtable_area = sme_populate_pgd(pgd, pgtable_area,</span>
<span class="p_del">-						paddr,</span>
<span class="p_del">-						paddr + PMD_FLAGS);</span>
<span class="p_add">+		ppd.pmd_val = paddr + PMD_FLAGS;</span>
<span class="p_add">+		ppd.vaddr = paddr;</span>
<span class="p_add">+		sme_populate_pgd_large(&amp;ppd);</span>
 
 		paddr += PMD_PAGE_SIZE;
 	}
<span class="p_chunk">@@ -708,17 +711,17 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	 * populated with new PUDs and PMDs as the encrypted and decrypted
 	 * kernel mappings are created.
 	 */
<span class="p_del">-	pgd = pgtable_area;</span>
<span class="p_del">-	memset(pgd, 0, sizeof(*pgd) * PTRS_PER_PGD);</span>
<span class="p_del">-	pgtable_area += sizeof(*pgd) * PTRS_PER_PGD;</span>
<span class="p_add">+	ppd.pgd = ppd.pgtable_area;</span>
<span class="p_add">+	memset(ppd.pgd, 0, sizeof(pgd_t) * PTRS_PER_PGD);</span>
<span class="p_add">+	ppd.pgtable_area += sizeof(pgd_t) * PTRS_PER_PGD;</span>
 
 	/* Add encrypted kernel (identity) mappings */
 	pmd_flags = PMD_FLAGS | _PAGE_ENC;
 	paddr = kernel_start;
 	while (paddr &lt; kernel_end) {
<span class="p_del">-		pgtable_area = sme_populate_pgd(pgd, pgtable_area,</span>
<span class="p_del">-						paddr,</span>
<span class="p_del">-						paddr + pmd_flags);</span>
<span class="p_add">+		ppd.pmd_val = paddr + pmd_flags;</span>
<span class="p_add">+		ppd.vaddr = paddr;</span>
<span class="p_add">+		sme_populate_pgd_large(&amp;ppd);</span>
 
 		paddr += PMD_PAGE_SIZE;
 	}
<span class="p_chunk">@@ -736,9 +739,9 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	pmd_flags = (PMD_FLAGS &amp; ~_PAGE_CACHE_MASK) | (_PAGE_PAT | _PAGE_PWT);
 	paddr = kernel_start;
 	while (paddr &lt; kernel_end) {
<span class="p_del">-		pgtable_area = sme_populate_pgd(pgd, pgtable_area,</span>
<span class="p_del">-						paddr + decrypted_base,</span>
<span class="p_del">-						paddr + pmd_flags);</span>
<span class="p_add">+		ppd.pmd_val = paddr + pmd_flags;</span>
<span class="p_add">+		ppd.vaddr = paddr + decrypted_base;</span>
<span class="p_add">+		sme_populate_pgd_large(&amp;ppd);</span>
 
 		paddr += PMD_PAGE_SIZE;
 	}
<span class="p_chunk">@@ -746,30 +749,29 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	/* Add decrypted workarea mappings to both kernel mappings */
 	paddr = workarea_start;
 	while (paddr &lt; workarea_end) {
<span class="p_del">-		pgtable_area = sme_populate_pgd(pgd, pgtable_area,</span>
<span class="p_del">-						paddr,</span>
<span class="p_del">-						paddr + PMD_FLAGS);</span>
<span class="p_add">+		ppd.pmd_val = paddr + PMD_FLAGS;</span>
<span class="p_add">+		ppd.vaddr = paddr;</span>
<span class="p_add">+		sme_populate_pgd_large(&amp;ppd);</span>
 
<span class="p_del">-		pgtable_area = sme_populate_pgd(pgd, pgtable_area,</span>
<span class="p_del">-						paddr + decrypted_base,</span>
<span class="p_del">-						paddr + PMD_FLAGS);</span>
<span class="p_add">+		ppd.vaddr = paddr + decrypted_base;</span>
<span class="p_add">+		sme_populate_pgd_large(&amp;ppd);</span>
 
 		paddr += PMD_PAGE_SIZE;
 	}
 
 	/* Perform the encryption */
 	sme_encrypt_execute(kernel_start, kernel_start + decrypted_base,
<span class="p_del">-			    kernel_len, workarea_start, (unsigned long)pgd);</span>
<span class="p_add">+			    kernel_len, workarea_start, (unsigned long)ppd.pgd);</span>
 
 	/*
 	 * At this point we are running encrypted.  Remove the mappings for
 	 * the decrypted areas - all that is needed for this is to remove
 	 * the PGD entry/entries.
 	 */
<span class="p_del">-	sme_clear_pgd(pgd, kernel_start + decrypted_base,</span>
<span class="p_add">+	sme_clear_pgd(ppd.pgd, kernel_start + decrypted_base,</span>
 		      kernel_end + decrypted_base);
 
<span class="p_del">-	sme_clear_pgd(pgd, workarea_start + decrypted_base,</span>
<span class="p_add">+	sme_clear_pgd(ppd.pgd, workarea_start + decrypted_base,</span>
 		      workarea_end + decrypted_base);
 
 	/* Flush the TLB - no globals so cr3 is enough */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



