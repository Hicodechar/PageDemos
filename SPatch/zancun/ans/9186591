
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,08/12] lockdep: Apply crossrelease to PG_locked lock - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,08/12] lockdep: Apply crossrelease to PG_locked lock</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60821">byungchul park</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 20, 2016, 4:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1466398527-1122-9-git-send-email-byungchul.park@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9186591/mbox/"
   >mbox</a>
|
   <a href="/patch/9186591/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9186591/">/patch/9186591/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8AF4560871 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jun 2016 05:13:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7D71F24151
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jun 2016 05:13:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7005022F4A; Mon, 20 Jun 2016 05:13:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C3DFF23B24
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Jun 2016 05:13:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752168AbcFTFMz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Jun 2016 01:12:55 -0400
Received: from LGEAMRELO12.lge.com ([156.147.23.52]:40820 &quot;EHLO
	lgeamrelo12.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751955AbcFTFL7 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Jun 2016 01:11:59 -0400
Received: from unknown (HELO lgeamrelo02.lge.com) (156.147.1.126)
	by 156.147.23.52 with ESMTP; 20 Jun 2016 13:56:57 +0900
X-Original-SENDERIP: 156.147.1.126
X-Original-MAILFROM: byungchul.park@lge.com
Received: from unknown (HELO localhost.localdomain) (10.177.222.33)
	by 156.147.1.126 with ESMTP; 20 Jun 2016 13:56:57 +0900
X-Original-SENDERIP: 10.177.222.33
X-Original-MAILFROM: byungchul.park@lge.com
From: Byungchul Park &lt;byungchul.park@lge.com&gt;
To: peterz@infradead.org, mingo@kernel.org
Cc: linux-kernel@vger.kernel.org, npiggin@suse.de, walken@google.com,
	ak@suse.de, tglx@inhelltoy.tec.linutronix.de
Subject: [RFC 08/12] lockdep: Apply crossrelease to PG_locked lock
Date: Mon, 20 Jun 2016 13:55:23 +0900
Message-Id: &lt;1466398527-1122-9-git-send-email-byungchul.park@lge.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1466398527-1122-1-git-send-email-byungchul.park@lge.com&gt;
References: &lt;1466398527-1122-1-git-send-email-byungchul.park@lge.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - June 20, 2016, 4:55 a.m.</div>
<pre class="content">
lock_page() and its family can cause deadlock. Nevertheless, it cannot
use the lock correctness validator becasue unlock_page() can be called
in different context from the context calling lock_page(), which
violates original lockdep&#39;s assumption.

However, thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can apply the lockdep
detector to lock_page() using PG_locked. Applied it.
<span class="signed-off-by">
Signed-off-by: Byungchul Park &lt;byungchul.park@lge.com&gt;</span>
---
 include/linux/mm_types.h |  9 +++++
 include/linux/pagemap.h  | 95 +++++++++++++++++++++++++++++++++++++++++++++---
 lib/Kconfig.debug        |  9 +++++
 mm/filemap.c             |  4 +-
 mm/page_alloc.c          |  3 ++
 5 files changed, 112 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - June 30, 2016, 1:04 p.m.</div>
<pre class="content">
On Mon, Jun 20, 2016 at 01:55:23PM +0900, Byungchul Park wrote:
<span class="quote">&gt; @@ -215,6 +219,11 @@ struct page {</span>
<span class="quote">&gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt;  	int _last_cpupid;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +	struct lockdep_map map;</span>
<span class="quote">&gt; +	struct cross_lock xlock;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>

So that&#39;s 32+64=96 bytes (CONFIG_LOCK_STAT=n) added to struct page,
really!?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - June 30, 2016, 11:21 p.m.</div>
<pre class="content">
On Thu, Jun 30, 2016 at 03:04:58PM +0200, Peter Zijlstra wrote:
<span class="quote">&gt; On Mon, Jun 20, 2016 at 01:55:23PM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; @@ -215,6 +219,11 @@ struct page {</span>
<span class="quote">&gt; &gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt; &gt;  	int _last_cpupid;</span>
<span class="quote">&gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; &gt; +	struct lockdep_map map;</span>
<span class="quote">&gt; &gt; +	struct cross_lock xlock;</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So that&#39;s 32+64=96 bytes (CONFIG_LOCK_STAT=n) added to struct page,</span>
<span class="quote">&gt; really!?</span>

Yes... I concerned it at first, but I thought it would be ok since
CONFIG_LOCKDEP_PAGE is a debug feature. Anyway, I will try to reduce
the size of struct cross_lock which is only thing I can do to reduce
it, since we cannot avoid using lockdep_map if we want to make
lock_page() participate in the lockdep play.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - July 1, 2016, 8:10 a.m.</div>
<pre class="content">
On Fri, Jul 01, 2016 at 08:21:21AM +0900, Byungchul Park wrote:
<span class="quote">&gt; On Thu, Jun 30, 2016 at 03:04:58PM +0200, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; On Mon, Jun 20, 2016 at 01:55:23PM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; &gt; @@ -215,6 +219,11 @@ struct page {</span>
<span class="quote">&gt; &gt; &gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt; &gt; &gt;  	int _last_cpupid;</span>
<span class="quote">&gt; &gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; &gt; &gt; +	struct lockdep_map map;</span>
<span class="quote">&gt; &gt; &gt; +	struct cross_lock xlock;</span>
<span class="quote">&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So that&#39;s 32+64=96 bytes (CONFIG_LOCK_STAT=n) added to struct page,</span>
<span class="quote">&gt; &gt; really!?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes... I concerned it at first, but I thought it would be ok since</span>
<span class="quote">&gt; CONFIG_LOCKDEP_PAGE is a debug feature.</span>

Right, but still, that&#39;s 0.75 GB of memory on my desktop (32GB total)
just for a debug feature. It grows struct page from 1.5% to 3.9% of
total memory, that is immense.

We&#39;ve avoided doing this for ptl; which was doable because typically
only a small number of pages ends up being a pagetable.

In any case, I feel PG_locked is special enough to fudge. After all, the
content of all these lockdep_map thingies would basically be the same,
which is a massive waste of space.

I still need to bend my brain around this xlock stuff, that just didn&#39;t
want to parse when I looked at it last night.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 1, 2016, 11:18 a.m.</div>
<pre class="content">
On Fri, Jul 01, 2016 at 08:21:21AM +0900, Byungchul Park wrote:
<span class="quote">&gt; On Thu, Jun 30, 2016 at 03:04:58PM +0200, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; On Mon, Jun 20, 2016 at 01:55:23PM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; &gt; @@ -215,6 +219,11 @@ struct page {</span>
<span class="quote">&gt; &gt; &gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt; &gt; &gt;  	int _last_cpupid;</span>
<span class="quote">&gt; &gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; &gt; &gt; +	struct lockdep_map map;</span>
<span class="quote">&gt; &gt; &gt; +	struct cross_lock xlock;</span>
<span class="quote">&gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So that&#39;s 32+64=96 bytes (CONFIG_LOCK_STAT=n) added to struct page,</span>
<span class="quote">&gt; &gt; really!?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes... I concerned it at first, but I thought it would be ok since</span>
<span class="quote">&gt; CONFIG_LOCKDEP_PAGE is a debug feature. Anyway, I will try to reduce</span>
<span class="quote">&gt; the size of struct cross_lock which is only thing I can do to reduce</span>
<span class="quote">&gt; it, since we cannot avoid using lockdep_map if we want to make</span>
<span class="quote">&gt; lock_page() participate in the lockdep play.</span>

Please use page_ext instead. With boottime switch to enable.

This way we can have this compile-time debug option enabled on more
machines without unnecessary runtime overhead.

And, please, CC linux-mm next time.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - July 4, 2016, 4:30 a.m.</div>
<pre class="content">
On Fri, Jul 01, 2016 at 02:18:46PM +0300, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Fri, Jul 01, 2016 at 08:21:21AM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; On Thu, Jun 30, 2016 at 03:04:58PM +0200, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; &gt; On Mon, Jun 20, 2016 at 01:55:23PM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; @@ -215,6 +219,11 @@ struct page {</span>
<span class="quote">&gt; &gt; &gt; &gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt; &gt; &gt; &gt;  	int _last_cpupid;</span>
<span class="quote">&gt; &gt; &gt; &gt;  #endif</span>
<span class="quote">&gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; &gt; &gt; &gt; +	struct lockdep_map map;</span>
<span class="quote">&gt; &gt; &gt; &gt; +	struct cross_lock xlock;</span>
<span class="quote">&gt; &gt; &gt; &gt; +#endif</span>
<span class="quote">&gt; &gt; &gt; &gt;  }</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; So that&#39;s 32+64=96 bytes (CONFIG_LOCK_STAT=n) added to struct page,</span>
<span class="quote">&gt; &gt; &gt; really!?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Yes... I concerned it at first, but I thought it would be ok since</span>
<span class="quote">&gt; &gt; CONFIG_LOCKDEP_PAGE is a debug feature. Anyway, I will try to reduce</span>
<span class="quote">&gt; &gt; the size of struct cross_lock which is only thing I can do to reduce</span>
<span class="quote">&gt; &gt; it, since we cannot avoid using lockdep_map if we want to make</span>
<span class="quote">&gt; &gt; lock_page() participate in the lockdep play.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please use page_ext instead. With boottime switch to enable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This way we can have this compile-time debug option enabled on more</span>
<span class="quote">&gt; machines without unnecessary runtime overhead.</span>

Thank you for advice.

I also think it&#39;s one of good candidates except the fact that it have to
depend on page_ext additionally.
<span class="quote">
&gt; </span>
<span class="quote">&gt; And, please, CC linux-mm next time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt;  Kirill A. Shutemov</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 624b78b..ab33ee3 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -15,6 +15,10 @@</span> <span class="p_context"></span>
 #include &lt;asm/page.h&gt;
 #include &lt;asm/mmu.h&gt;
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef AT_VECTOR_SIZE_ARCH
 #define AT_VECTOR_SIZE_ARCH 0
 #endif
<span class="p_chunk">@@ -215,6 +219,11 @@</span> <span class="p_context"> struct page {</span>
 #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS
 	int _last_cpupid;
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+	struct lockdep_map map;</span>
<span class="p_add">+	struct cross_lock xlock;</span>
<span class="p_add">+#endif</span>
 }
 /*
  * The struct page can be forced to be double word aligned so that atomic ops
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index c0049d9..2fc4af1 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -14,6 +14,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/hardirq.h&gt; /* for in_interrupt() */
 #include &lt;linux/hugetlb_inline.h&gt;
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
 
 /*
  * Bits in mapping-&gt;flags.  The lower __GFP_BITS_SHIFT bits are the page
<span class="p_chunk">@@ -441,26 +444,81 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
 	return pgoff &gt;&gt; (PAGE_CACHE_SHIFT - PAGE_SHIFT);
 }
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#define lock_page_init(p)					\</span>
<span class="p_add">+do {								\</span>
<span class="p_add">+	static struct lock_class_key __key;			\</span>
<span class="p_add">+	lockdep_init_map_crosslock(&amp;(p)-&gt;map, &amp;(p)-&gt;xlock,	\</span>
<span class="p_add">+			&quot;(PG_locked)&quot; #p, &amp;__key, 0);		\</span>
<span class="p_add">+} while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	lock_acquire_exclusive(&amp;page-&gt;map, 0, try, NULL, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_release(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Calling lock_commit_crosslock() is necessary</span>
<span class="p_add">+	 * for cross-releasable lock when the lock is</span>
<span class="p_add">+	 * releasing before calling lock_release().</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_commit_crosslock(&amp;page-&gt;map);</span>
<span class="p_add">+	lock_release(&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void lock_page_init(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_free(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try) {}</span>
<span class="p_add">+static inline void lock_page_release(struct page *page) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 extern void __lock_page(struct page *page);
 extern int __lock_page_killable(struct page *page);
 extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,
 				unsigned int flags);
<span class="p_del">-extern void unlock_page(struct page *page);</span>
<span class="p_add">+extern void do_raw_unlock_page(struct page *page);</span>
 
<span class="p_del">-static inline int trylock_page(struct page *page)</span>
<span class="p_add">+static inline void unlock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	lock_page_release(page);</span>
<span class="p_add">+	do_raw_unlock_page(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int do_raw_trylock_page(struct page *page)</span>
 {
 	page = compound_head(page);
 	return (likely(!test_and_set_bit_lock(PG_locked, &amp;page-&gt;flags)));
 }
 
<span class="p_add">+static inline int trylock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (do_raw_trylock_page(page)) {</span>
<span class="p_add">+		lock_page_acquire(page, 1);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * lock_page may only be called if we have the page&#39;s inode pinned.
  */
 static inline void lock_page(struct page *page)
 {
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page))</span>
 		__lock_page(page);
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The acquire function must be after actual lock operation</span>
<span class="p_add">+	 * for crossrelease lock, because the lock instance is</span>
<span class="p_add">+	 * searched by release operation in any context and more</span>
<span class="p_add">+	 * than two instances acquired make it confused.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 }
 
 /*
<span class="p_chunk">@@ -470,9 +528,22 @@</span> <span class="p_context"> static inline void lock_page(struct page *page)</span>
  */
 static inline int lock_page_killable(struct page *page)
 {
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_del">-		return __lock_page_killable(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page)) {</span>
<span class="p_add">+		ret = __lock_page_killable(page);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The acquire function must be after actual lock operation</span>
<span class="p_add">+	 * for crossrelease lock, because the lock instance is</span>
<span class="p_add">+	 * searched by release operation in any context and more</span>
<span class="p_add">+	 * than two instances acquired make it confused.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -487,7 +558,19 @@</span> <span class="p_context"> static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
 				     unsigned int flags)
 {
 	might_sleep();
<span class="p_del">-	return trylock_page(page) || __lock_page_or_retry(page, mm, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (do_raw_trylock_page(page) || __lock_page_or_retry(page, mm, flags)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The acquire function must be after actual lock operation</span>
<span class="p_add">+		 * for crossrelease lock, because the lock instance is</span>
<span class="p_add">+		 * searched by release operation in any context and more</span>
<span class="p_add">+		 * than two instances acquired make it confused.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		lock_page_acquire(page, 0);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
 }
 
 /*
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index dd314d3..73942b5 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -1024,6 +1024,15 @@</span> <span class="p_context"> config LOCKDEP_COMPLETE</span>
 	 A deadlock caused by wait and complete can be detected by lockdep
 	 using crossrelease feature.
 
<span class="p_add">+config LOCKDEP_PAGELOCK</span>
<span class="p_add">+	bool &quot;Lock debugging: allow PG_locked lock to use deadlock detector&quot;</span>
<span class="p_add">+	select LOCKDEP_CROSSRELEASE</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	 PG_locked lock is a kind of cross-released lock. This makes</span>
<span class="p_add">+	 PG_locked lock possible to use deadlock detector, using</span>
<span class="p_add">+	 crossrelease feature.</span>
<span class="p_add">+</span>
 config PROVE_LOCKING
 	bool &quot;Lock debugging: prove locking correctness&quot;
 	depends on DEBUG_KERNEL &amp;&amp; TRACE_IRQFLAGS_SUPPORT &amp;&amp; STACKTRACE_SUPPORT &amp;&amp; LOCKDEP_SUPPORT
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index 3461d97..47fc5c0 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -814,7 +814,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(add_page_wait_queue);</span>
  * The mb is necessary to enforce ordering between the clear_bit and the read
  * of the waitqueue (to avoid SMP races with a parallel wait_on_page_locked()).
  */
<span class="p_del">-void unlock_page(struct page *page)</span>
<span class="p_add">+void do_raw_unlock_page(struct page *page)</span>
 {
 	page = compound_head(page);
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
<span class="p_chunk">@@ -822,7 +822,7 @@</span> <span class="p_context"> void unlock_page(struct page *page)</span>
 	smp_mb__after_atomic();
 	wake_up_page(page, PG_locked);
 }
<span class="p_del">-EXPORT_SYMBOL(unlock_page);</span>
<span class="p_add">+EXPORT_SYMBOL(do_raw_unlock_page);</span>
 
 /**
  * end_page_writeback - end writeback against a page
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 838ca8bb..17ed9a8 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -4538,6 +4538,9 @@</span> <span class="p_context"> void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,</span>
 		} else {
 			__init_single_pfn(pfn, zone, nid);
 		}
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+		lock_page_init(pfn_to_page(pfn));</span>
<span class="p_add">+#endif</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



