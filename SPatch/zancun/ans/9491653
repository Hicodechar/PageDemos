
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/5] arm64: Create and use __tlbi_dsb() macros - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/5] arm64: Create and use __tlbi_dsb() macros</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 29, 2016, 10:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161229224335.13531-3-cov@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9491653/mbox/"
   >mbox</a>
|
   <a href="/patch/9491653/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9491653/">/patch/9491653/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4676460453 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 22:45:01 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3407B1FF15
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 22:45:01 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 28E5C2018E; Thu, 29 Dec 2016 22:45:01 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 20267200F5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 22:44:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753306AbcL2Wnw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 29 Dec 2016 17:43:52 -0500
Received: from smtp.codeaurora.org ([198.145.29.96]:46514 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753039AbcL2Wnt (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 29 Dec 2016 17:43:49 -0500
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
	id AC12061406; Thu, 29 Dec 2016 22:43:48 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1483051428;
	bh=5sJuCisHP4XqjoN6qFRx7TdYuFSTomspNu/mCI8BCHQ=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=UR9H7XaCdm+Qr5uAkZib4x9rPKPXPDAinwWdjzNCfg/4oHv07XJtsbXkVoJ/SXdrT
	pGnQhpZBjGne6GP9kubBNKkvkSUkvQtTY85V86ibwp7GgicNck6y8pGAALGhanuLXq
	0l6ni3oS2fJg3Q/VQGOo3fhB3Y3Fu9WG7nNn/4rY=
Received: from illium.qualcomm.com (global_nat1_iad_fw.qualcomm.com
	[129.46.232.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
	(No client certificate requested)
	(Authenticated sender: cov@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 6CA836115D;
	Thu, 29 Dec 2016 22:43:46 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1483051427;
	bh=5sJuCisHP4XqjoN6qFRx7TdYuFSTomspNu/mCI8BCHQ=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=WIPhVvEZ43iKDrbZ2g7MzTfawwhgOC7irPCTdFwRReRZZ1f5RNs5w54OKLwdBhqA5
	xDfC+UkXGsjX7SboVkwjU0qr/NqAaaWjPUMxT6OLxp8BMGZ1pP/5qz9BcoUDxOVNQ6
	QZ/eUoB3RWtADATr324UddO8Lps9tSmFc0q/uGzI=
DMARC-Filter: OpenDMARC Filter v1.3.1 smtp.codeaurora.org 6CA836115D
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	dmarc=none header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	spf=pass smtp.mailfrom=cov@codeaurora.org
From: Christopher Covington &lt;cov@codeaurora.org&gt;
To: Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Marc Zyngier &lt;marc.zyngier@arm.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, kvm@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
	linux-kernel@vger.kernel.org, shankerd@codeaurora.org,
	timur@codeaurora.org
Cc: Christopher Covington &lt;cov@codeaurora.org&gt;
Subject: [PATCH v2 3/5] arm64: Create and use __tlbi_dsb() macros
Date: Thu, 29 Dec 2016 17:43:33 -0500
Message-Id: &lt;20161229224335.13531-3-cov@codeaurora.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20161229224335.13531-1-cov@codeaurora.org&gt;
References: &lt;20161229224335.13531-1-cov@codeaurora.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a> - Dec. 29, 2016, 10:43 p.m.</div>
<pre class="content">
This refactoring will allow an errata workaround that repeats tlbi dsb
sequences to only change one location. This is not intended to change the
generated assembly and comparing before and after preprocessor output of
arch/arm64/mm/mmu.c and vmlinux objdump show no functional changes.
<span class="signed-off-by">
Signed-off-by: Christopher Covington &lt;cov@codeaurora.org&gt;</span>
---
 arch/arm64/include/asm/tlbflush.h | 104 +++++++++++++++++++++++++-------------
 1 file changed, 69 insertions(+), 35 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">index deab523..f28813c 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -25,22 +25,69 @@</span> <span class="p_context"></span>
 #include &lt;asm/cputype.h&gt;
 
 /*
<span class="p_del">- * Raw TLBI operations.</span>
<span class="p_add">+ * Raw TLBI, DSB operations</span>
  *
<span class="p_del">- * Where necessary, use the __tlbi() macro to avoid asm()</span>
<span class="p_del">- * boilerplate. Drivers and most kernel code should use the TLB</span>
<span class="p_del">- * management routines in preference to the macro below.</span>
<span class="p_add">+ * Where necessary, use __tlbi_*dsb() macros to avoid asm() boilerplate.</span>
<span class="p_add">+ * Drivers and most kernel code should use the TLB management routines in</span>
<span class="p_add">+ * preference to the macros below.</span>
  *
<span class="p_del">- * The macro can be used as __tlbi(op) or __tlbi(op, arg), depending</span>
<span class="p_del">- * on whether a particular TLBI operation takes an argument or</span>
<span class="p_del">- * not. The macros handles invoking the asm with or without the</span>
<span class="p_del">- * register argument as appropriate.</span>
<span class="p_add">+ * The __tlbi_dsb() macro handles invoking the asm without any register</span>
<span class="p_add">+ * argument, with a single register argument, and with start (included)</span>
<span class="p_add">+ * and end (excluded) range of register arguments. For example:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * __tlbi_dsb(op, attr)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * 	tlbi op</span>
<span class="p_add">+ *	dsb attr</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * __tlbi_dsb(op, attr, addr)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *	mov %[addr], =addr</span>
<span class="p_add">+ *	tlbi op, %[addr]</span>
<span class="p_add">+ *	dsb attr</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * __tlbi_range_dsb(op, attr, start, end)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * 	mov %[arg], =start</span>
<span class="p_add">+ *	mov %[end], =end</span>
<span class="p_add">+ * for:</span>
<span class="p_add">+ * 	tlbi op, %[addr]</span>
<span class="p_add">+ * 	add %[addr], %[addr], #(1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="p_add">+ * 	cmp %[addr], %[end]</span>
<span class="p_add">+ * 	b.ne for</span>
<span class="p_add">+ * 	dsb attr</span>
  */
<span class="p_del">-#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="p_del">-#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="p_del">-#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
 
<span class="p_del">-#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>
<span class="p_add">+#define __TLBI_FOR_0(ig0, ig1, ig2)</span>
<span class="p_add">+#define __TLBI_INSTR_0(op, ig1, ig2)	&quot;tlbi &quot; #op</span>
<span class="p_add">+#define __TLBI_IO_0(ig0, ig1, ig2)	: :</span>
<span class="p_add">+</span>
<span class="p_add">+#define __TLBI_FOR_1(ig0, ig1, ig2)</span>
<span class="p_add">+#define __TLBI_INSTR_1(op, ig0, ig1)	&quot;tlbi &quot; #op &quot;, %0&quot;</span>
<span class="p_add">+#define __TLBI_IO_1(ig0, arg, ig1)	: : &quot;r&quot; (arg)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __TLBI_FOR_2(ig0, start, ig1)	unsigned long addr;		       \</span>
<span class="p_add">+					for (addr = start; addr &lt; end;	       \</span>
<span class="p_add">+						addr += 1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="p_add">+#define __TLBI_INSTR_2(op, ig0, ig1)	&quot;tlbi &quot; #op &quot;, %0&quot;</span>
<span class="p_add">+#define __TLBI_IO_2(ig0, ig1, ig2)	: : &quot;r&quot; (addr)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __TLBI_FOR_N(op, a1, a2, n, ...)	__TLBI_FOR_##n(op, a1, a2)</span>
<span class="p_add">+#define __TLBI_INSTR_N(op, a1, a2, n, ...)	__TLBI_INSTR_##n(op, a1, a2)</span>
<span class="p_add">+#define __TLBI_IO_N(op, a1, a2, n, ...)	__TLBI_IO_##n(op, a1, a2)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __TLBI_FOR(op, ...)		__TLBI_FOR_N(op, ##__VA_ARGS__, 2, 1, 0)</span>
<span class="p_add">+#define __TLBI_INSTR(op, ...)		__TLBI_INSTR_N(op, ##__VA_ARGS__, 2, 1, 0)</span>
<span class="p_add">+#define __TLBI_IO(op, ...)		__TLBI_IO_N(op, ##__VA_ARGS__, 2, 1, 0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __tlbi_asm_dsb(as, op, attr, ...) do {				       \</span>
<span class="p_add">+		__TLBI_FOR(op, ##__VA_ARGS__)				       \</span>
<span class="p_add">+			asm (__TLBI_INSTR(op, ##__VA_ARGS__)		       \</span>
<span class="p_add">+			__TLBI_IO(op, ##__VA_ARGS__));			       \</span>
<span class="p_add">+		asm volatile (	     as			&quot;\ndsb &quot; #attr &quot;\n&quot;    \</span>
<span class="p_add">+		: : : &quot;memory&quot;); } while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __tlbi_dsb(...)	__tlbi_asm_dsb(&quot;&quot;, ##__VA_ARGS__)</span>
 
 /*
  *	TLB Management
<span class="p_chunk">@@ -84,16 +131,14 @@</span> <span class="p_context"></span>
 static inline void local_flush_tlb_all(void)
 {
 	dsb(nshst);
<span class="p_del">-	__tlbi(vmalle1);</span>
<span class="p_del">-	dsb(nsh);</span>
<span class="p_add">+	__tlbi_dsb(vmalle1, nsh);</span>
 	isb();
 }
 
 static inline void flush_tlb_all(void)
 {
 	dsb(ishst);
<span class="p_del">-	__tlbi(vmalle1is);</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	__tlbi_dsb(vmalle1is, ish);</span>
 	isb();
 }
 
<span class="p_chunk">@@ -102,8 +147,7 @@</span> <span class="p_context"> static inline void flush_tlb_mm(struct mm_struct *mm)</span>
 	unsigned long asid = ASID(mm) &lt;&lt; 48;
 
 	dsb(ishst);
<span class="p_del">-	__tlbi(aside1is, asid);</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	__tlbi_dsb(aside1is, ish, asid);</span>
 }
 
 static inline void flush_tlb_page(struct vm_area_struct *vma,
<span class="p_chunk">@@ -112,8 +156,7 @@</span> <span class="p_context"> static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
 	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(vma-&gt;vm_mm) &lt;&lt; 48);
 
 	dsb(ishst);
<span class="p_del">-	__tlbi(vale1is, addr);</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	__tlbi_dsb(vale1is, ish, addr);</span>
 }
 
 /*
<span class="p_chunk">@@ -127,7 +170,6 @@</span> <span class="p_context"> static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
 				     bool last_level)
 {
 	unsigned long asid = ASID(vma-&gt;vm_mm) &lt;&lt; 48;
<span class="p_del">-	unsigned long addr;</span>
 
 	if ((end - start) &gt; MAX_TLB_RANGE) {
 		flush_tlb_mm(vma-&gt;vm_mm);
<span class="p_chunk">@@ -138,13 +180,10 @@</span> <span class="p_context"> static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
 	end = asid | (end &gt;&gt; 12);
 
 	dsb(ishst);
<span class="p_del">-	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12)) {</span>
<span class="p_del">-		if (last_level)</span>
<span class="p_del">-			__tlbi(vale1is, addr);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			__tlbi(vae1is, addr);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	if (last_level)</span>
<span class="p_add">+		__tlbi_dsb(vale1is, ish, start, end);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		__tlbi_dsb(vae1is, ish, start, end);</span>
 }
 
 static inline void flush_tlb_range(struct vm_area_struct *vma,
<span class="p_chunk">@@ -155,8 +194,6 @@</span> <span class="p_context"> static inline void flush_tlb_range(struct vm_area_struct *vma,</span>
 
 static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end)
 {
<span class="p_del">-	unsigned long addr;</span>
<span class="p_del">-</span>
 	if ((end - start) &gt; MAX_TLB_RANGE) {
 		flush_tlb_all();
 		return;
<span class="p_chunk">@@ -166,9 +203,7 @@</span> <span class="p_context"> static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
 	end &gt;&gt;= 12;
 
 	dsb(ishst);
<span class="p_del">-	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="p_del">-		__tlbi(vaae1is, addr);</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	__tlbi_dsb(vaae1is, ish, start, end);</span>
 	isb();
 }
 
<span class="p_chunk">@@ -181,8 +216,7 @@</span> <span class="p_context"> static inline void __flush_tlb_pgtable(struct mm_struct *mm,</span>
 {
 	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(mm) &lt;&lt; 48);
 
<span class="p_del">-	__tlbi(vae1is, addr);</span>
<span class="p_del">-	dsb(ish);</span>
<span class="p_add">+	__tlbi_dsb(vae1is, ish, addr);</span>
 }
 
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



