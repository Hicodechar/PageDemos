
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[net/bpf] 3051bf36c2 BUG: unable to handle kernel paging request at 0000a7cf - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [net/bpf] 3051bf36c2 BUG: unable to handle kernel paging request at 0000a7cf</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=123431">Daniel Borkmann</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2017, 9:32 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;58C1C9DC.7070509@iogearbox.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9614215/mbox/"
   >mbox</a>
|
   <a href="/patch/9614215/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9614215/">/patch/9614215/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	225AC60417 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 21:32:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 189C3286BC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 21:32:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0CB59286C0; Thu,  9 Mar 2017 21:32:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5CB1E286BC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 21:32:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753766AbdCIVcp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 9 Mar 2017 16:32:45 -0500
Received: from www62.your-server.de ([213.133.104.62]:40792 &quot;EHLO
	www62.your-server.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753252AbdCIVcl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 9 Mar 2017 16:32:41 -0500
Received: from [188.62.51.164] (helo=localhost.localdomain)
	by www62.your-server.de with esmtpsa (TLSv1.2:DHE-RSA-AES256-SHA:256)
	(Exim 4.85_2) (envelope-from &lt;daniel@iogearbox.net&gt;)
	id 1cm5fR-0007co-5Z; Thu, 09 Mar 2017 22:32:13 +0100
Message-ID: &lt;58C1C9DC.7070509@iogearbox.net&gt;
Date: Thu, 09 Mar 2017 22:32:12 +0100
From: Daniel Borkmann &lt;daniel@iogearbox.net&gt;
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:31.0) Gecko/20100101 Thunderbird/31.7.0
MIME-Version: 1.0
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
CC: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Kees Cook &lt;keescook@chromium.org&gt;,
	Laura Abbott &lt;labbott@redhat.com&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Peter Anvin &lt;hpa@zytor.com&gt;,
	Fengguang Wu &lt;fengguang.wu@intel.com&gt;,
	Network Development &lt;netdev@vger.kernel.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, LKP &lt;lkp@01.org&gt;,
	ast@fb.com, the arch/x86 maintainers &lt;x86@kernel.org&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;, bp@suse.de
Subject: Re: [net/bpf] 3051bf36c2 BUG: unable to handle kernel paging request
	at 0000a7cf
References: &lt;20170301125426.l4nf65rx4wahohyl@wfg-t540p.sh.intel.com&gt;
	&lt;20170302202338.ci6wwb3yzjmdy4n2@wfg-t540p.sh.intel.com&gt;
	&lt;58B88353.2010508@iogearbox.net&gt;
	&lt;CA+55aFy97mLPLb4WXmRn-xLMNt+bNkrb_vaBsh+HOMLLnKPv7Q@mail.gmail.com&gt;
	&lt;58C08535.3070000@iogearbox.net&gt;
	&lt;CAGXu5jLB_+47FEJYTYJ5u6-u+vOBpWo_0tWuiNKnGmuMjL-mMQ@mail.gmail.com&gt;
	&lt;7af7bcc9-9115-be9f-2240-a022487e9b70@redhat.com&gt;
	&lt;CAGXu5jLm3jbJoQAsBsTiiQGK1==JTnSkN_GLsuBGqFvAz5B3AQ@mail.gmail.com&gt;
	&lt;58C152F1.9090004@iogearbox.net&gt;
	&lt;alpine.DEB.2.20.1703091409080.3521@nanos&gt;
	&lt;58C157E6.1010909@iogearbox.net&gt;
	&lt;alpine.DEB.2.20.1703091547460.3521@nanos&gt;
	&lt;58C19607.6000605@iogearbox.net&gt;
	&lt;CA+55aFyxM--wyvxXGhBOqdJHcdC_kKvGYpv-C5SpYvRNkbEmGw@mail.gmail.com&gt;
	&lt;CA+55aFyu-LHqMaZBaa7VNamxhUR99F4Xr+nL9esLDUBhotopVg@mail.gmail.com&gt;
	&lt;58C19F67.3040509@iogearbox.net&gt;
In-Reply-To: &lt;58C19F67.3040509@iogearbox.net&gt;
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Authenticated-Sender: daniel@iogearbox.net
X-Virus-Scanned: Clear (ClamAV 0.99.2/23188/Thu Mar  9 14:11:59 2017)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123431">Daniel Borkmann</a> - March 9, 2017, 9:32 p.m.</div>
<pre class="content">
[ + Borislav ]

On 03/09/2017 07:31 PM, Daniel Borkmann wrote:
<span class="quote">&gt; On 03/09/2017 07:15 PM, Linus Torvalds wrote:</span>
<span class="quote">&gt;&gt; On Thu, Mar 9, 2017 at 10:10 AM, Linus Torvalds</span>
<span class="quote">&gt;&gt; &lt;torvalds@linux-foundation.org&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Very odd. We should always have PGE (0x0080) set in cr4 (if the CPU</span>
<span class="quote">&gt;&gt;&gt; supports it).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Daniel, do you see the code in probe_page_size_mask() triggering?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;          /* Enable PGE if available */</span>
<span class="quote">&gt;&gt;          if (boot_cpu_has(X86_FEATURE_PGE)) {</span>
<span class="quote">&gt;&gt;                  cr4_set_bits_and_update_boot(X86_CR4_PGE);</span>
<span class="quote">&gt;&gt;                  __supported_pte_mask |= _PAGE_GLOBAL;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We do have boot_cpu_has(X86_FEATURE_PGE) and go indeed into this</span>
<span class="quote">&gt; branch here. So it seems something must be clearing it later, hmm.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;          } else</span>
<span class="quote">&gt;&gt;                  __supported_pte_mask &amp;= ~_PAGE_GLOBAL;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; but maybe there&#39;s something wrong with the percpu cr4 caching?</span>

So, I think I got a little bit further. To the printk&#39;s I added
previously in the test_setmem code that run on the problematic
kernel, I now extended them into:

   printk(&quot;static_cpu X86_FEATURE_PGE:%u\n&quot;,     static_cpu_has(X86_FEATURE_PGE));
   printk(&quot;boot_cpu   X86_FEATURE_PGE:%u\n&quot;,       boot_cpu_has(X86_FEATURE_PGE));
   printk(&quot;static_cpu X86_FEATURE_INVPCID:%u\n&quot;, static_cpu_has(X86_FEATURE_INVPCID));
   printk(&quot;boot_cpu   X86_FEATURE_INVPCID:%u\n&quot;,   boot_cpu_has(X86_FEATURE_INVPCID));

And here&#39;s what I get in the log:

&quot;-cpu kvm64&quot; gives:

[    8.426865] static_cpu X86_FEATURE_PGE:1
[    8.427148] boot_cpu   X86_FEATURE_PGE:0
[    8.427428] static_cpu X86_FEATURE_INVPCID:0
[    8.427732] boot_cpu   X86_FEATURE_INVPCID:0

&quot;-cpu host&quot; gives:

[    8.426408] static_cpu X86_FEATURE_PGE:1
[    8.426726] boot_cpu   X86_FEATURE_PGE:0
[    8.427037] static_cpu X86_FEATURE_INVPCID:1
[    8.427375] boot_cpu   X86_FEATURE_INVPCID:1

This means at that point in time static_cpu_has(X86_FEATURE_PGE) is
not the same as boot_cpu_has(X86_FEATURE_PGE).

The code that switches this off is in lguest_arch_host_init(). Right
before that, both are X86_FEATURE_PGE:1, X86_FEATURE_INVPCID:0 for
the &quot;-cpu kvm64&quot; case.

Then, the lguest code does:

	get_online_cpus();
	if (boot_cpu_has(X86_FEATURE_PGE)) { /* We have a broader idea of &quot;global&quot;. */
		/* Remember that this was originally set (for cleanup). */
		cpu_had_pge = 1;
		/*
		 * adjust_pge is a helper function which sets or unsets the PGE
		 * bit on its CPU, depending on the argument (0 == unset).
		 */
		on_each_cpu(adjust_pge, (void *)0, 1);
		/* Turn off the feature in the global feature set. */
		clear_cpu_cap(&amp;boot_cpu_data, X86_FEATURE_PGE);
	}
	put_online_cpus();

So, adjust_pge() clears X86_CR4_PGE, and boot cpu has X86_FEATURE_PGE
unset. This means, with static_cpu_has(X86_FEATURE_PGE) still 1, we
run into using cr4 for TLB flushing with no X86_CR4_PGE bit set (which
doesn&#39;t trigger the flush), whereas we should be using cr3 for flushing
from that point onwards instead.

I tried with this one, and things seem to work again:


Presumably coming from c109bf95992b (&quot;x86/cpufeature: Remove cpu_has_pge&quot;)?

Thanks,
Daniel
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 9, 2017, 9:55 p.m.</div>
<pre class="content">
On Thu, Mar 09, 2017 at 10:32:12PM +0100, Daniel Borkmann wrote:
<span class="quote">&gt; 	get_online_cpus();</span>
<span class="quote">&gt; 	if (boot_cpu_has(X86_FEATURE_PGE)) { /* We have a broader idea of &quot;global&quot;. */</span>
<span class="quote">&gt; 		/* Remember that this was originally set (for cleanup). */</span>
<span class="quote">&gt; 		cpu_had_pge = 1;</span>
<span class="quote">&gt; 		/*</span>
<span class="quote">&gt; 		 * adjust_pge is a helper function which sets or unsets the PGE</span>
<span class="quote">&gt; 		 * bit on its CPU, depending on the argument (0 == unset).</span>
<span class="quote">&gt; 		 */</span>
<span class="quote">&gt; 		on_each_cpu(adjust_pge, (void *)0, 1);</span>
<span class="quote">&gt; 		/* Turn off the feature in the global feature set. */</span>
<span class="quote">&gt; 		clear_cpu_cap(&amp;boot_cpu_data, X86_FEATURE_PGE);</span>

Can you make that:

	setup_clear_cpu_cap(X86_FEATURE_PGE);

and see if it fixes your issue?

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 9, 2017, 10:07 p.m.</div>
<pre class="content">
On Thu, Mar 09, 2017 at 10:55:47PM +0100, Borislav Petkov wrote:
<span class="quote">&gt; Can you make that:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	setup_clear_cpu_cap(X86_FEATURE_PGE);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and see if it fixes your issue?</span>

Hmm, in reading the thread a bit more, that might not work. If I see it
correctly, lguest does

 clear_cpu_cap(&amp;boot_cpu_data, X86_FEATURE_PGE);

after the alternatives have run and static_cpu_has() sites have already
been patched so clearing that bit won&#39;t bring anything.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123431">Daniel Borkmann</a> - March 9, 2017, 10:11 p.m.</div>
<pre class="content">
On 03/09/2017 11:07 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Thu, Mar 09, 2017 at 10:55:47PM +0100, Borislav Petkov wrote:</span>
<span class="quote">&gt;&gt; Can you make that:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; 	setup_clear_cpu_cap(X86_FEATURE_PGE);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; and see if it fixes your issue?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hmm, in reading the thread a bit more, that might not work. If I see it</span>
<span class="quote">&gt; correctly, lguest does</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   clear_cpu_cap(&amp;boot_cpu_data, X86_FEATURE_PGE);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; after the alternatives have run and static_cpu_has() sites have already</span>
<span class="quote">&gt; been patched so clearing that bit won&#39;t bring anything.</span>

Yeah, I just tried that out and it had no effect unfortunately, the
static_cpu_has() was still 1.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 9, 2017, 10:48 p.m.</div>
<pre class="content">
On Thu, Mar 09, 2017 at 11:11:17PM +0100, Daniel Borkmann wrote:
<span class="quote">&gt; Yeah, I just tried that out and it had no effect unfortunately, the</span>
<span class="quote">&gt; static_cpu_has() was still 1.</span>

Right, just as I thought.

I guess we could return to doing boot_cpu_has() in __flush_tlb_all()
then. I mean, the timing-sensitivity argument is meh - killing global
TLB entries a bit faster doesn&#39;t bring me a whole lot when I have to go
and walk pagetable and reestablish them, which is the real price to pay
anyway.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - March 9, 2017, 11:26 p.m.</div>
<pre class="content">
On Thu, Mar 9, 2017 at 2:48 PM, Borislav Petkov &lt;bp@suse.de&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; I guess we could return to doing boot_cpu_has() in __flush_tlb_all()</span>
<span class="quote">&gt; then. I mean, the timing-sensitivity argument is meh - killing global</span>
<span class="quote">&gt; TLB entries a bit faster doesn&#39;t bring me a whole lot when I have to go</span>
<span class="quote">&gt; and walk pagetable and reestablish them, which is the real price to pay</span>
<span class="quote">&gt; anyway.</span>

So should all of commit (&quot;c109bf95992b x86/cpufeature: Remove
cpu_has_pge&quot;) just be reverted (and then marked for stable)?

Or do we have some alternate plan?

This has apparently been going on for a long while (it got merged into
4.7), but presumably it only actually _matters_ if lguest is enabled
and used and we&#39;ve triggered that lguest_arch_host_init() code.

Maybe it&#39;s the lguest games with PGE that need to be removed?

                Linus
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 6fa8594..fc5abff 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -188,7 +188,7 @@</span> <span class="p_context"> static inline void __native_flush_tlb_single(unsigned long addr)</span>

  static inline void __flush_tlb_all(void)
  {
<span class="p_del">-       if (static_cpu_has(X86_FEATURE_PGE))</span>
<span class="p_add">+       if (boot_cpu_has(X86_FEATURE_PGE))</span>
                 __flush_tlb_global();
         else
                 __flush_tlb();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



