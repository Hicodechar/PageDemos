
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,10/11] x86/mm: Enable CR4.PCIDE on supported systems - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,10/11] x86/mm: Enable CR4.PCIDE on supported systems</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 21, 2017, 5:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;57c1d18b1c11f9bc9a3bcf8bdee38033415e1a13.1498022414.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9800731/mbox/"
   >mbox</a>
|
   <a href="/patch/9800731/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9800731/">/patch/9800731/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	17C4F60234 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 05:23:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 08EF92851A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 05:23:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F1CEC2851E; Wed, 21 Jun 2017 05:23:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7E4F028516
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 05:23:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753320AbdFUFXG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 21 Jun 2017 01:23:06 -0400
Received: from mail.kernel.org ([198.145.29.99]:55910 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753271AbdFUFWj (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 21 Jun 2017 01:22:39 -0400
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id C817D23A21;
	Wed, 21 Jun 2017 05:22:28 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org C817D23A21
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Subject: [PATCH v3 10/11] x86/mm: Enable CR4.PCIDE on supported systems
Date: Tue, 20 Jun 2017 22:22:16 -0700
Message-Id: &lt;57c1d18b1c11f9bc9a3bcf8bdee38033415e1a13.1498022414.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;cover.1498022414.git.luto@kernel.org&gt;
References: &lt;cover.1498022414.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1498022414.git.luto@kernel.org&gt;
References: &lt;cover.1498022414.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - June 21, 2017, 5:22 a.m.</div>
<pre class="content">
We can use PCID if the CPU has PCID and PGE and we&#39;re not on Xen.

By itself, this has no effect.  The next patch will start using
PCID.

Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/include/asm/tlbflush.h |  8 ++++++++
 arch/x86/kernel/cpu/common.c    | 15 +++++++++++++++
 arch/x86/xen/enlighten_pv.c     |  6 ++++++
 3 files changed, 29 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - June 21, 2017, 9:39 a.m.</div>
<pre class="content">
On Tue, 20 Jun 2017, Andy Lutomirski wrote:
<span class="quote">&gt; +	/* Set up PCID */</span>
<span class="quote">&gt; +	if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="quote">&gt; +		if (cpu_has(c, X86_FEATURE_PGE)) {</span>
<span class="quote">&gt; +			cr4_set_bits(X86_CR4_PCIDE);</span>

So I assume that you made sure that the PCID bits in CR3 are zero under all
circumstances as setting PCIDE would cause a #GP if not.
<span class="reviewed-by">
Reviewed-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - June 21, 2017, 1:40 p.m.</div>
<pre class="content">
On Wed, 21 Jun 2017, Thomas Gleixner wrote:
<span class="quote">
&gt; On Tue, 20 Jun 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt; +	/* Set up PCID */</span>
<span class="quote">&gt; &gt; +	if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="quote">&gt; &gt; +		if (cpu_has(c, X86_FEATURE_PGE)) {</span>
<span class="quote">&gt; &gt; +			cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I assume that you made sure that the PCID bits in CR3 are zero under all</span>
<span class="quote">&gt; circumstances as setting PCIDE would cause a #GP if not.</span>

And what happens on kexec etc? We need to reset the asid and PCIDE I assume.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - June 21, 2017, 8:34 p.m.</div>
<pre class="content">
On Wed, Jun 21, 2017 at 2:39 AM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:
<span class="quote">&gt; On Tue, 20 Jun 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; +     /* Set up PCID */</span>
<span class="quote">&gt;&gt; +     if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="quote">&gt;&gt; +             if (cpu_has(c, X86_FEATURE_PGE)) {</span>
<span class="quote">&gt;&gt; +                     cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So I assume that you made sure that the PCID bits in CR3 are zero under all</span>
<span class="quote">&gt; circumstances as setting PCIDE would cause a #GP if not.</span>

Yes.  All existing code just shoves a PA of a page table in there.  As
far as I know, neither Linux nor anyone else uses the silly PCD and
PWT bits.  It&#39;s not even clear to me that they are functional if PAT
is enabled.
<span class="quote">
&gt;</span>
<span class="quote">&gt; And what happens on kexec etc? We need to reset the asid and PCIDE I assume.</span>
<span class="quote">&gt;</span>

I assume it works roughly the same way as suspend, etc --
mmu_cr4_features has the desired CR4 and the init code deals with it.
And PGE, PKE, etc all work correctly.  I&#39;m not sure why PCIDE needs to
be cleared -- the init code will work just fine even if PCIDE is
unexpectedly set.

That being said, I haven&#39;t managed to understand what exactly the
kexec code is doing.  But I think the relevant bit is here in
relocate_kernel_64.S:

        /*
         * Set cr4 to a known state:
         *  - physical address extension enabled
         */
        movl    $X86_CR4_PAE, %eax
        movq    %rax, %cr4

Kexec folks, is it safe to assume that kexec can already deal with the
new and old kernels disagreeing on what CR4 should be?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 23, 2017, 11:50 a.m.</div>
<pre class="content">
On Tue, Jun 20, 2017 at 10:22:16PM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; We can use PCID if the CPU has PCID and PGE and we&#39;re not on Xen.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; By itself, this has no effect.  The next patch will start using</span>
<span class="quote">&gt; PCID.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/tlbflush.h |  8 ++++++++</span>
<span class="quote">&gt;  arch/x86/kernel/cpu/common.c    | 15 +++++++++++++++</span>
<span class="quote">&gt;  arch/x86/xen/enlighten_pv.c     |  6 ++++++</span>
<span class="quote">&gt;  3 files changed, 29 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; index 87b13e51e867..57b305e13c4c 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -243,6 +243,14 @@ static inline void __flush_tlb_all(void)</span>
<span class="quote">&gt;  		__flush_tlb_global();</span>
<span class="quote">&gt;  	else</span>
<span class="quote">&gt;  		__flush_tlb();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Note: if we somehow had PCID but not PGE, then this wouldn&#39;t work --</span>
<span class="quote">&gt; +	 * we&#39;d end up flushing kernel translations for the current ASID but</span>
<span class="quote">&gt; +	 * we might fail to flush kernel translations for other cached ASIDs.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * To avoid this issue, we force PCID off if PGE is off.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt; index 904485e7b230..01caf66b270f 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt; @@ -1143,6 +1143,21 @@ static void identify_cpu(struct cpuinfo_x86 *c)</span>
<span class="quote">&gt;  	setup_smep(c);</span>
<span class="quote">&gt;  	setup_smap(c);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/* Set up PCID */</span>
<span class="quote">&gt; +	if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="quote">&gt; +		if (cpu_has(c, X86_FEATURE_PGE)) {</span>

What are we protecting ourselves here against? Funny virtualization guests?

Because PGE should be ubiquitous by now. Or have you heard something?
<span class="quote">
&gt; +			cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt; +			/*</span>
<span class="quote">&gt; +			 * flush_tlb_all(), as currently implemented, won&#39;t</span>
<span class="quote">&gt; +			 * work if PCID is on but PGE is not.  Since that</span>
<span class="quote">&gt; +			 * combination doesn&#39;t exist on real hardware, there&#39;s</span>
<span class="quote">&gt; +			 * no reason to try to fully support it.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			clear_cpu_cap(c, X86_FEATURE_PCID);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>

This whole in setup_pcid() I guess, like the rest of the features.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * The vendor-specific functions might have changed features.</span>
<span class="quote">&gt;  	 * Now we do &quot;generic changes.&quot;</span>
<span class="quote">&gt; diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; index f33eef4ebd12..a136aac543c3 100644</span>
<span class="quote">&gt; --- a/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; +++ b/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; @@ -295,6 +295,12 @@ static void __init xen_init_capabilities(void)</span>
<span class="quote">&gt;  	setup_clear_cpu_cap(X86_FEATURE_ACC);</span>
<span class="quote">&gt;  	setup_clear_cpu_cap(X86_FEATURE_X2APIC);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Xen PV would need some work to support PCID: CR3 handling as well</span>
<span class="quote">&gt; +	 * as xen_flush_tlb_others() would need updating.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	if (!xen_initial_domain())</span>
<span class="quote">&gt;  		setup_clear_cpu_cap(X86_FEATURE_ACPI);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.9.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - June 23, 2017, 1:35 p.m.</div>
<pre class="content">
<span class="quote">&gt; diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; index f33eef4ebd12..a136aac543c3 100644</span>
<span class="quote">&gt; --- a/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; +++ b/arch/x86/xen/enlighten_pv.c</span>
<span class="quote">&gt; @@ -295,6 +295,12 @@ static void __init xen_init_capabilities(void)</span>
<span class="quote">&gt;   	setup_clear_cpu_cap(X86_FEATURE_ACC);</span>
<span class="quote">&gt;   	setup_clear_cpu_cap(X86_FEATURE_X2APIC);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Xen PV would need some work to support PCID: CR3 handling as well</span>
<span class="quote">&gt; +	 * as xen_flush_tlb_others() would need updating.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   	if (!xen_initial_domain())</span>
<span class="quote">&gt;   		setup_clear_cpu_cap(X86_FEATURE_ACPI);</span>
<span class="quote">&gt;   </span>
<span class="reviewed-by">

Reviewed-by: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - June 23, 2017, 3:28 p.m.</div>
<pre class="content">
On Fri, Jun 23, 2017 at 4:50 AM, Borislav Petkov &lt;bp@alien8.de&gt; wrote:
<span class="quote">&gt; On Tue, Jun 20, 2017 at 10:22:16PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; We can use PCID if the CPU has PCID and PGE and we&#39;re not on Xen.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; By itself, this has no effect.  The next patch will start using</span>
<span class="quote">&gt;&gt; PCID.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cc: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/tlbflush.h |  8 ++++++++</span>
<span class="quote">&gt;&gt;  arch/x86/kernel/cpu/common.c    | 15 +++++++++++++++</span>
<span class="quote">&gt;&gt;  arch/x86/xen/enlighten_pv.c     |  6 ++++++</span>
<span class="quote">&gt;&gt;  3 files changed, 29 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; index 87b13e51e867..57b305e13c4c 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; @@ -243,6 +243,14 @@ static inline void __flush_tlb_all(void)</span>
<span class="quote">&gt;&gt;               __flush_tlb_global();</span>
<span class="quote">&gt;&gt;       else</span>
<span class="quote">&gt;&gt;               __flush_tlb();</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     /*</span>
<span class="quote">&gt;&gt; +      * Note: if we somehow had PCID but not PGE, then this wouldn&#39;t work --</span>
<span class="quote">&gt;&gt; +      * we&#39;d end up flushing kernel translations for the current ASID but</span>
<span class="quote">&gt;&gt; +      * we might fail to flush kernel translations for other cached ASIDs.</span>
<span class="quote">&gt;&gt; +      *</span>
<span class="quote">&gt;&gt; +      * To avoid this issue, we force PCID off if PGE is off.</span>
<span class="quote">&gt;&gt; +      */</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt;&gt; index 904485e7b230..01caf66b270f 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kernel/cpu/common.c</span>
<span class="quote">&gt;&gt; @@ -1143,6 +1143,21 @@ static void identify_cpu(struct cpuinfo_x86 *c)</span>
<span class="quote">&gt;&gt;       setup_smep(c);</span>
<span class="quote">&gt;&gt;       setup_smap(c);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +     /* Set up PCID */</span>
<span class="quote">&gt;&gt; +     if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="quote">&gt;&gt; +             if (cpu_has(c, X86_FEATURE_PGE)) {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What are we protecting ourselves here against? Funny virtualization guests?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Because PGE should be ubiquitous by now. Or have you heard something?</span>

Yes, funny VM guests.  I&#39;ve been known to throw weird options at qemu
myself, and I prefer when the system works.  In this particular case,
I think the failure mode would be stale kernel TLB entries, and that
would be really annoying.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +                     cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="quote">&gt;&gt; +             } else {</span>
<span class="quote">&gt;&gt; +                     /*</span>
<span class="quote">&gt;&gt; +                      * flush_tlb_all(), as currently implemented, won&#39;t</span>
<span class="quote">&gt;&gt; +                      * work if PCID is on but PGE is not.  Since that</span>
<span class="quote">&gt;&gt; +                      * combination doesn&#39;t exist on real hardware, there&#39;s</span>
<span class="quote">&gt;&gt; +                      * no reason to try to fully support it.</span>
<span class="quote">&gt;&gt; +                      */</span>
<span class="quote">&gt;&gt; +                     clear_cpu_cap(c, X86_FEATURE_PCID);</span>
<span class="quote">&gt;&gt; +             }</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This whole in setup_pcid() I guess, like the rest of the features.</span>

Done.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 87b13e51e867..57b305e13c4c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -243,6 +243,14 @@</span> <span class="p_context"> static inline void __flush_tlb_all(void)</span>
 		__flush_tlb_global();
 	else
 		__flush_tlb();
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Note: if we somehow had PCID but not PGE, then this wouldn&#39;t work --</span>
<span class="p_add">+	 * we&#39;d end up flushing kernel translations for the current ASID but</span>
<span class="p_add">+	 * we might fail to flush kernel translations for other cached ASIDs.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * To avoid this issue, we force PCID off if PGE is off.</span>
<span class="p_add">+	 */</span>
 }
 
 static inline void __flush_tlb_one(unsigned long addr)
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 904485e7b230..01caf66b270f 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -1143,6 +1143,21 @@</span> <span class="p_context"> static void identify_cpu(struct cpuinfo_x86 *c)</span>
 	setup_smep(c);
 	setup_smap(c);
 
<span class="p_add">+	/* Set up PCID */</span>
<span class="p_add">+	if (cpu_has(c, X86_FEATURE_PCID)) {</span>
<span class="p_add">+		if (cpu_has(c, X86_FEATURE_PGE)) {</span>
<span class="p_add">+			cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * flush_tlb_all(), as currently implemented, won&#39;t</span>
<span class="p_add">+			 * work if PCID is on but PGE is not.  Since that</span>
<span class="p_add">+			 * combination doesn&#39;t exist on real hardware, there&#39;s</span>
<span class="p_add">+			 * no reason to try to fully support it.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			clear_cpu_cap(c, X86_FEATURE_PCID);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * The vendor-specific functions might have changed features.
 	 * Now we do &quot;generic changes.&quot;
<span class="p_header">diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c</span>
<span class="p_header">index f33eef4ebd12..a136aac543c3 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten_pv.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten_pv.c</span>
<span class="p_chunk">@@ -295,6 +295,12 @@</span> <span class="p_context"> static void __init xen_init_capabilities(void)</span>
 	setup_clear_cpu_cap(X86_FEATURE_ACC);
 	setup_clear_cpu_cap(X86_FEATURE_X2APIC);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Xen PV would need some work to support PCID: CR3 handling as well</span>
<span class="p_add">+	 * as xen_flush_tlb_others() would need updating.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="p_add">+</span>
 	if (!xen_initial_domain())
 		setup_clear_cpu_cap(X86_FEATURE_ACPI);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



