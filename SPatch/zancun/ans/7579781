
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>kernel oops on mmotm-2015-10-15-15-20 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    kernel oops on mmotm-2015-10-15-15-20</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 8, 2015, 10:55 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151108225522.GA29600@node.shutemov.name&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7579781/mbox/"
   >mbox</a>
|
   <a href="/patch/7579781/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7579781/">/patch/7579781/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id A3D339F1AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  8 Nov 2015 22:55:37 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0C90420650
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  8 Nov 2015 22:55:36 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 70C4620654
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  8 Nov 2015 22:55:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751684AbbKHWza (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 8 Nov 2015 17:55:30 -0500
Received: from mail-wm0-f43.google.com ([74.125.82.43]:33310 &quot;EHLO
	mail-wm0-f43.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750791AbbKHWzZ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 8 Nov 2015 17:55:25 -0500
Received: by wmec201 with SMTP id c201so60501939wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sun, 08 Nov 2015 14:55:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=shutemov_name.20150623.gappssmtp.com; s=20150623;
	h=date:from:to:cc:subject:message-id:references:mime-version
	:content-type:content-disposition:in-reply-to:user-agent;
	bh=GdJmzL9GJy129qpjl7JAMvqKT7657v1Gtc+spJP22FM=;
	b=VQyLR+0kBuJI0RbF+KMHNO3gweA3c08WVDCi8nxliY798PFxG05/5rDrxyhjVeSaTy
	/Ts9hI79/NPvNc8TijXkipoPIndAN2ZARpbEdZfskZAKd3DV4Ky/2JCkJD8U+8tqCilg
	ewYPfodn6+vqpG3W8UfEoiVf0aYAU0izMOXCOwhoRql9VwNb0rXA8BcqzBKCC/v63CF6
	VQ/LUD4dDZfiD4HxYk+2PAB3mUIxywRFxQ5oVJm1YwJsJga/dAPR7gKa3dyv/clYCXZP
	IAIZfYb5hsWiWlhKTVg6vOkorhYAjtvZ1vLSHAAJi+AO1H4CJismppfjaq7gqLvwBgHD
	UtwQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-type:content-disposition:in-reply-to
	:user-agent;
	bh=GdJmzL9GJy129qpjl7JAMvqKT7657v1Gtc+spJP22FM=;
	b=EgB5x67qJtltS5TLxfMojy/C9HSQ5fgxbMMqAuAKKMqarJRq4FxFHqIJatXuGUGVrf
	tzk6ekU4jJule6sQR6JfoW2eAWNQkNGrpcFHY8Jb0KjoSmUQXD8wXROjPY5jsi9RfqSy
	3toQt2KaHZNoEoiTHp9ld1m8AUSvlbZ/Dfbksw1VS/WGZmkF/7Hqv1ugvfzlcpZWVylW
	6qSBdd0vaLuV8dW6xvk71wjM24tC/ug4AQf/lN3LWSvLMYltN5LUWpAWFihKI79oqGtC
	c2PR3KazpIcKHyvZBrq0X1fk0VK3aHLoBEVS5PVmRwTFftECEYl/fcnwGZKdbfzYdkeC
	8NyQ==
X-Gm-Message-State: ALoCoQk0x4kUOVMwoDovJm4sTDkJJj8Vf7M/D/qansUGhKoBZHjomobLWxjxvmoaW+GjF3NtVhNW
X-Received: by 10.28.213.212 with SMTP id m203mr22036026wmg.33.1447023324053;
	Sun, 08 Nov 2015 14:55:24 -0800 (PST)
Received: from node.shutemov.name ([93.85.144.247])
	by smtp.gmail.com with ESMTPSA id
	hk1sm12120403wjb.6.2015.11.08.14.55.23
	(version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sun, 08 Nov 2015 14:55:23 -0800 (PST)
Received: by node.shutemov.name (Postfix, from userid 1000)
	id 479AB6469F1D; Mon,  9 Nov 2015 00:55:22 +0200 (EET)
Date: Mon, 9 Nov 2015 00:55:22 +0200
From: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
To: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;, Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Rik van Riel &lt;riel@redhat.com&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;
Subject: Re: kernel oops on mmotm-2015-10-15-15-20
Message-ID: &lt;20151108225522.GA29600@node.shutemov.name&gt;
References: &lt;20151029075829.GA16099@bbox&gt;
	&lt;20151029095206.GB29870@node.shutemov.name&gt;
	&lt;20151030070350.GB16099@bbox&gt;
	&lt;20151102125749.GB7473@node.shutemov.name&gt;
	&lt;20151103030258.GJ17906@bbox&gt;
	&lt;20151103071650.GA21553@node.shutemov.name&gt;
	&lt;20151103073329.GL17906@bbox&gt; &lt;20151103152019.GM17906@bbox&gt;
	&lt;20151104142135.GA13303@node.shutemov.name&gt;
	&lt;20151105001922.GD7357@bbox&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20151105001922.GD7357@bbox&gt;
User-Agent: Mutt/1.5.23.1 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID,T_RP_MATCHES_RCVD,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 8, 2015, 10:55 p.m.</div>
<pre class="content">
On Thu, Nov 05, 2015 at 09:19:22AM +0900, Minchan Kim wrote:
<span class="quote">&gt; On Wed, Nov 04, 2015 at 04:21:35PM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Wed, Nov 04, 2015 at 12:20:19AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; On Tue, Nov 03, 2015 at 04:33:29PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; On Tue, Nov 03, 2015 at 09:16:50AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; On Tue, Nov 03, 2015 at 12:02:58PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; Hello Kirill,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; On Mon, Nov 02, 2015 at 02:57:49PM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; On Fri, Oct 30, 2015 at 04:03:50PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 11:52:06AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 04:58:29PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 02:25:24AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 22, 2015 at 06:00:51PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 22, 2015 at 10:21:36AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Hello Hugh,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Wed, Oct 21, 2015 at 05:59:59PM -0700, Hugh Dickins wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, 22 Oct 2015, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I added the code to check it and queued it again but I had another oops</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; in this time but symptom is related to anon_vma, too.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (kernel is based on recent mmotm + unconditional mkdirty for bug fix)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It seems page_get_anon_vma returns NULL since the page was not page_mapped</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; at that time but second check of page_mapped right before try_to_unmap seems</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; to be true.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page:ffffea0001cfbfc0 count:3 mapcount:1 mapping:ffff88007f1b5f51 index:0x600000aff</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; flags: 0x4000000000048019(locked|uptodate|dirty|swapcache|swapbacked)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(PageAnon(page) &amp;&amp; !PageKsm(page) &amp;&amp; !anon_vma)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; That&#39;s interesting, that&#39;s one I added in my page migration series.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Let me think on it, but it could well relate to the one you got before.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I will roll back to mm/madv_free-v4.3-rc5-mmotm-2015-10-15-15-20</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; instead of next-20151021 to remove noise from your migration cleanup</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; series and will test it again.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; If it is fixed, I will test again with your migration patchset, then.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I tested mmotm-2015-10-15-15-20 with test program I attach for a long time.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Therefore, there is no patchset from Hugh&#39;s migration patch in there.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; And I added below debug code with request from Kirill to all test kernels.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It took too long time (and a lot of printk()), but I think I track it down</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; finally.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The patch below seems fixes issue for me. It&#39;s not yet properly tested, but</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; looks like it works.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The problem was my wrong assumption on how migration works: I thought that</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel would wait migration to finish on before deconstruction mapping.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; But turn out that&#39;s not true.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; As result if zap_pte_range() races with split_huge_page(), we can end up</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; with page which is not mapped anymore but has _count and _mapcount</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; elevated. The page is on LRU too. So it&#39;s still reachable by vmscan and by</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; pfn scanners (Sasha showed few similar traces from compaction too).</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It&#39;s likely that page-&gt;mapping in this case would point to freed anon_vma.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BOOM!</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The patch modify freeze/unfreeze_page() code to match normal migration</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; entries logic: on setup we remove page from rmap and drop pin, on removing</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; we get pin back and put page on rmap. This way even if migration entry</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; will be removed under us we don&#39;t corrupt page&#39;s state.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Please, test.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel: On mmotm-2015-10-15-15-20 + pte_mkdirty patch + your new patch, I tested</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; one I sent to you(ie, oops.c + memcg_test.sh)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page:ffffea00016a0000 count:3 mapcount:0 mapping:ffff88007f49d001 index:0x600001800 compound_mapcount: 0</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; flags: 0x4000000000044009(locked|uptodate|head|swapbacked)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(!page_mapcount(page))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page-&gt;mem_cgroup:ffff88007f613c00</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Ignore my previous answer. Still sleeping.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The right way to fix I think is something like:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; index 35643176bc15..f2d46792a554 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; @@ -1173,20 +1173,12 @@ void do_page_add_anon_rmap(struct page *page,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	bool compound = flags &amp; RMAP_COMPOUND;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	bool first;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -	if (PageTransCompound(page)) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +	if (PageTransCompound(page) &amp;&amp; compound) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		atomic_t *mapcount;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		VM_BUG_ON_PAGE(!PageLocked(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		if (compound) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			atomic_t *mapcount;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			mapcount = compound_mapcount_ptr(page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			first = atomic_inc_and_test(mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		} else {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			/* Anon THP always mapped first with PMD */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			first = 0;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			VM_BUG_ON_PAGE(!page_mapcount(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			atomic_inc(&amp;page-&gt;_mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		}</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		mapcount = compound_mapcount_ptr(page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		first = atomic_inc_and_test(mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	} else {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		VM_BUG_ON_PAGE(compound, page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		first = atomic_inc_and_test(&amp;page-&gt;_mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -- </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel: On mmotm-2015-10-15-15-20 + pte_mkdirty patch + freeze/unfreeze patch + above patch,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880058d2e580 idx:1 val:512</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &lt;SNIP&gt;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880046980700 idx:1 val:511</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880046980700 idx:2 val:1</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; Hm. I was not able to trigger this and don&#39;t see anything obviuous what can</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; lead to this kind of missmatch :-/</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; I managed to trigger this when switched back from MADV_DONTNEED to</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; MADV_FREE. Hm..</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Hmm,,</span>
<span class="quote">&gt; &gt; &gt; &gt; What version of MADV_FREE do you test on?</span>
<span class="quote">&gt; &gt; &gt; &gt; Old MADV_FREE(ie, before posting MADV_FREE refactoring and fix KSM page)</span>
<span class="quote">&gt; &gt; &gt; &gt; had a bug.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; I tried your patches on top of recent my MADV_FREE patches.</span>
<span class="quote">&gt; &gt; &gt; &gt; But when I try it with old THP refcount redesign, I couldn&#39;t find</span>
<span class="quote">&gt; &gt; &gt; &gt; any problem so far. However, I&#39;m not saying it&#39;s your fault.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; I will give it a shot with MADV_DONTNEED to reproduce the problem.</span>
<span class="quote">&gt; &gt; &gt; &gt; But one thing I could say is MADV_DONTNEED is more hard to hit</span>
<span class="quote">&gt; &gt; &gt; &gt; compared to MADV_FREE because memory pressure of MADV_DONTNEED test</span>
<span class="quote">&gt; &gt; &gt; &gt; wouldn&#39;t be heavy.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I reproduced this on the kernel which has no code related to MADV_FREE:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; mmotm-2015-10-15-15-20-no-madvise_free, IOW it means git head for</span>
<span class="quote">&gt; &gt; &gt; 54bad5da4834 arm64: add pmd_[dirty|mkclean] for THP so there is no</span>
<span class="quote">&gt; &gt; &gt; MADV_FREE code in there</span>
<span class="quote">&gt; &gt; &gt; + pte_mkdirty patch</span>
<span class="quote">&gt; &gt; &gt; + freeze/unfreeze patch</span>
<span class="quote">&gt; &gt; &gt; + do_page_add_anon_rmap patch</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff88007fdd5b00 idx:1 val:511</span>
<span class="quote">&gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff88007fdd5b00 idx:2 val:1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I have one idea why it could happen, but not sure yet..</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Could you check if it makes any difference for you?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/include/linux/huge_mm.h b/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; index 5c7b00e88236..194f7f8b8c66 100644</span>
<span class="quote">&gt; &gt; --- a/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; +++ b/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; @@ -103,12 +103,7 @@ void deferred_split_huge_page(struct page *page);</span>
<span class="quote">&gt; &gt;  void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt; &gt;  		unsigned long address);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -#define split_huge_pmd(__vma, __pmd, __address)				\</span>
<span class="quote">&gt; &gt; -	do {								\</span>
<span class="quote">&gt; &gt; -		pmd_t *____pmd = (__pmd);				\</span>
<span class="quote">&gt; &gt; -		if (pmd_trans_huge(*____pmd))				\</span>
<span class="quote">&gt; &gt; -			__split_huge_pmd(__vma, __pmd, __address);	\</span>
<span class="quote">&gt; &gt; -	}  while (0)</span>
<span class="quote">&gt; &gt; +#define split_huge_pmd(__vma, __pmd, __address)	__split_huge_pmd(__vma, __pmd, __address)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mmotm-2015-10-15-15-20-no-madvise_free, IOW it means git head for</span>
<span class="quote">&gt; 54bad5da4834 arm64: add pmd_[dirty|mkclean] for THP so there is no</span>
<span class="quote">&gt; MADV_FREE code in there</span>
<span class="quote">&gt;  + pte_mkdirty patch</span>
<span class="quote">&gt;  + freeze/unfreeze patch</span>
<span class="quote">&gt;  + do_page_add_anon_rmap patch</span>
<span class="quote">&gt;  + above split_huge_pmd</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; BUG: Bad rss-counter state mm:ffff88007fa3bb80 idx:1 val:512</span>

With the patch below my test setup run for 2+ days without triggering the
bug. split_huge_pmd patch should be dropped.

Please test.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 12, 2015, 12:36 a.m.</div>
<pre class="content">
On Mon, Nov 09, 2015 at 12:55:22AM +0200, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Thu, Nov 05, 2015 at 09:19:22AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; On Wed, Nov 04, 2015 at 04:21:35PM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed, Nov 04, 2015 at 12:20:19AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; On Tue, Nov 03, 2015 at 04:33:29PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; On Tue, Nov 03, 2015 at 09:16:50AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; On Tue, Nov 03, 2015 at 12:02:58PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; Hello Kirill,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; On Mon, Nov 02, 2015 at 02:57:49PM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Fri, Oct 30, 2015 at 04:03:50PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 11:52:06AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 04:58:29PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 29, 2015 at 02:25:24AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 22, 2015 at 06:00:51PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, Oct 22, 2015 at 10:21:36AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Hello Hugh,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Wed, Oct 21, 2015 at 05:59:59PM -0700, Hugh Dickins wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Thu, 22 Oct 2015, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I added the code to check it and queued it again but I had another oops</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; in this time but symptom is related to anon_vma, too.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (kernel is based on recent mmotm + unconditional mkdirty for bug fix)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It seems page_get_anon_vma returns NULL since the page was not page_mapped</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; at that time but second check of page_mapped right before try_to_unmap seems</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; to be true.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page:ffffea0001cfbfc0 count:3 mapcount:1 mapping:ffff88007f1b5f51 index:0x600000aff</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; flags: 0x4000000000048019(locked|uptodate|dirty|swapcache|swapbacked)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(PageAnon(page) &amp;&amp; !PageKsm(page) &amp;&amp; !anon_vma)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; That&#39;s interesting, that&#39;s one I added in my page migration series.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Let me think on it, but it could well relate to the one you got before.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I will roll back to mm/madv_free-v4.3-rc5-mmotm-2015-10-15-15-20</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; instead of next-20151021 to remove noise from your migration cleanup</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; series and will test it again.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; If it is fixed, I will test again with your migration patchset, then.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; I tested mmotm-2015-10-15-15-20 with test program I attach for a long time.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Therefore, there is no patchset from Hugh&#39;s migration patch in there.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; And I added below debug code with request from Kirill to all test kernels.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It took too long time (and a lot of printk()), but I think I track it down</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; finally.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The patch below seems fixes issue for me. It&#39;s not yet properly tested, but</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; looks like it works.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The problem was my wrong assumption on how migration works: I thought that</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel would wait migration to finish on before deconstruction mapping.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; But turn out that&#39;s not true.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; As result if zap_pte_range() races with split_huge_page(), we can end up</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; with page which is not mapped anymore but has _count and _mapcount</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; elevated. The page is on LRU too. So it&#39;s still reachable by vmscan and by</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; pfn scanners (Sasha showed few similar traces from compaction too).</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It&#39;s likely that page-&gt;mapping in this case would point to freed anon_vma.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BOOM!</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The patch modify freeze/unfreeze_page() code to match normal migration</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; entries logic: on setup we remove page from rmap and drop pin, on removing</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; we get pin back and put page on rmap. This way even if migration entry</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; will be removed under us we don&#39;t corrupt page&#39;s state.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Please, test.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel: On mmotm-2015-10-15-15-20 + pte_mkdirty patch + your new patch, I tested</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; one I sent to you(ie, oops.c + memcg_test.sh)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page:ffffea00016a0000 count:3 mapcount:0 mapping:ffff88007f49d001 index:0x600001800 compound_mapcount: 0</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; flags: 0x4000000000044009(locked|uptodate|head|swapbacked)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(!page_mapcount(page))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; page-&gt;mem_cgroup:ffff88007f613c00</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Ignore my previous answer. Still sleeping.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The right way to fix I think is something like:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; index 35643176bc15..f2d46792a554 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; @@ -1173,20 +1173,12 @@ void do_page_add_anon_rmap(struct page *page,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	bool compound = flags &amp; RMAP_COMPOUND;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	bool first;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -	if (PageTransCompound(page)) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +	if (PageTransCompound(page) &amp;&amp; compound) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		atomic_t *mapcount;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		VM_BUG_ON_PAGE(!PageLocked(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		if (compound) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			atomic_t *mapcount;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			mapcount = compound_mapcount_ptr(page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			first = atomic_inc_and_test(mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		} else {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			/* Anon THP always mapped first with PMD */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			first = 0;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			VM_BUG_ON_PAGE(!page_mapcount(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -			atomic_inc(&amp;page-&gt;_mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -		}</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		VM_BUG_ON_PAGE(!PageTransHuge(page), page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		mapcount = compound_mapcount_ptr(page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		first = atomic_inc_and_test(mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	} else {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		VM_BUG_ON_PAGE(compound, page);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		first = atomic_inc_and_test(&amp;page-&gt;_mapcount);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; -- </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; kernel: On mmotm-2015-10-15-15-20 + pte_mkdirty patch + freeze/unfreeze patch + above patch,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880058d2e580 idx:1 val:512</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &lt;SNIP&gt;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880046980700 idx:1 val:511</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff880046980700 idx:2 val:1</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Hm. I was not able to trigger this and don&#39;t see anything obviuous what can</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; lead to this kind of missmatch :-/</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; I managed to trigger this when switched back from MADV_DONTNEED to</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; MADV_FREE. Hm..</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Hmm,,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; What version of MADV_FREE do you test on?</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Old MADV_FREE(ie, before posting MADV_FREE refactoring and fix KSM page)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; had a bug.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; I tried your patches on top of recent my MADV_FREE patches.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; But when I try it with old THP refcount redesign, I couldn&#39;t find</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; any problem so far. However, I&#39;m not saying it&#39;s your fault.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; I will give it a shot with MADV_DONTNEED to reproduce the problem.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; But one thing I could say is MADV_DONTNEED is more hard to hit</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; compared to MADV_FREE because memory pressure of MADV_DONTNEED test</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; wouldn&#39;t be heavy.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; I reproduced this on the kernel which has no code related to MADV_FREE:</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; mmotm-2015-10-15-15-20-no-madvise_free, IOW it means git head for</span>
<span class="quote">&gt; &gt; &gt; &gt; 54bad5da4834 arm64: add pmd_[dirty|mkclean] for THP so there is no</span>
<span class="quote">&gt; &gt; &gt; &gt; MADV_FREE code in there</span>
<span class="quote">&gt; &gt; &gt; &gt; + pte_mkdirty patch</span>
<span class="quote">&gt; &gt; &gt; &gt; + freeze/unfreeze patch</span>
<span class="quote">&gt; &gt; &gt; &gt; + do_page_add_anon_rmap patch</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff88007fdd5b00 idx:1 val:511</span>
<span class="quote">&gt; &gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff88007fdd5b00 idx:2 val:1</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I have one idea why it could happen, but not sure yet..</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Could you check if it makes any difference for you?</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; diff --git a/include/linux/huge_mm.h b/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; &gt; index 5c7b00e88236..194f7f8b8c66 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; &gt; +++ b/include/linux/huge_mm.h</span>
<span class="quote">&gt; &gt; &gt; @@ -103,12 +103,7 @@ void deferred_split_huge_page(struct page *page);</span>
<span class="quote">&gt; &gt; &gt;  void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt; &gt; &gt;  		unsigned long address);</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; -#define split_huge_pmd(__vma, __pmd, __address)				\</span>
<span class="quote">&gt; &gt; &gt; -	do {								\</span>
<span class="quote">&gt; &gt; &gt; -		pmd_t *____pmd = (__pmd);				\</span>
<span class="quote">&gt; &gt; &gt; -		if (pmd_trans_huge(*____pmd))				\</span>
<span class="quote">&gt; &gt; &gt; -			__split_huge_pmd(__vma, __pmd, __address);	\</span>
<span class="quote">&gt; &gt; &gt; -	}  while (0)</span>
<span class="quote">&gt; &gt; &gt; +#define split_huge_pmd(__vma, __pmd, __address)	__split_huge_pmd(__vma, __pmd, __address)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; mmotm-2015-10-15-15-20-no-madvise_free, IOW it means git head for</span>
<span class="quote">&gt; &gt; 54bad5da4834 arm64: add pmd_[dirty|mkclean] for THP so there is no</span>
<span class="quote">&gt; &gt; MADV_FREE code in there</span>
<span class="quote">&gt; &gt;  + pte_mkdirty patch</span>
<span class="quote">&gt; &gt;  + freeze/unfreeze patch</span>
<span class="quote">&gt; &gt;  + do_page_add_anon_rmap patch</span>
<span class="quote">&gt; &gt;  + above split_huge_pmd</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; BUG: Bad rss-counter state mm:ffff88007fa3bb80 idx:1 val:512</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With the patch below my test setup run for 2+ days without triggering the</span>
<span class="quote">&gt; bug. split_huge_pmd patch should be dropped.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please test.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="quote">&gt; index 14cbbad54a3e..7aa0a3fef2aa 100644</span>
<span class="quote">&gt; --- a/mm/huge_memory.c</span>
<span class="quote">&gt; +++ b/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -2841,9 +2841,6 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt;  	write = pmd_write(*pmd);</span>
<span class="quote">&gt;  	young = pmd_young(*pmd);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	/* leave pmd empty until pte is filled */</span>
<span class="quote">&gt; -	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	pgtable = pgtable_trans_huge_withdraw(mm, pmd);</span>
<span class="quote">&gt;  	pmd_populate(mm, &amp;_pmd, pgtable);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -2893,6 +2890,28 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	smp_wmb(); /* make pte visible before pmd */</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Up to this point the pmd is present and huge and userland has the</span>
<span class="quote">&gt; +	 * whole access to the hugepage during the split (which happens in</span>
<span class="quote">&gt; +	 * place). If we overwrite the pmd with the not-huge version pointing</span>
<span class="quote">&gt; +	 * to the pte here (which of course we could if all CPUs were bug</span>
<span class="quote">&gt; +	 * free), userland could trigger a small page size TLB miss on the</span>
<span class="quote">&gt; +	 * small sized TLB while the hugepage TLB entry is still established in</span>
<span class="quote">&gt; +	 * the huge TLB. Some CPU doesn&#39;t like that.</span>
<span class="quote">&gt; +	 * See http://support.amd.com/us/Processor_TechDocs/41322.pdf, Erratum</span>
<span class="quote">&gt; +	 * 383 on page 93. Intel should be safe but is also warns that it&#39;s</span>
<span class="quote">&gt; +	 * only safe if the permission and cache attributes of the two entries</span>
<span class="quote">&gt; +	 * loaded in the two TLB is identical (which should be the case here).</span>
<span class="quote">&gt; +	 * But it is generally safer to never allow small and huge TLB entries</span>
<span class="quote">&gt; +	 * for the same virtual address to be loaded simultaneously. So instead</span>
<span class="quote">&gt; +	 * of doing &quot;pmd_populate(); flush_pmd_tlb_range();&quot; we first mark the</span>
<span class="quote">&gt; +	 * current pmd notpresent (atomically because here the pmd_trans_huge</span>
<span class="quote">&gt; +	 * and pmd_trans_splitting must remain set at all times on the pmd</span>
<span class="quote">&gt; +	 * until the split is complete for this pmd), then we flush the SMP TLB</span>
<span class="quote">&gt; +	 * and finally we write the non-huge version of the pmd entry with</span>
<span class="quote">&gt; +	 * pmd_populate.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	pmdp_invalidate(vma, haddr, pmd);</span>
<span class="quote">&gt;  	pmd_populate(mm, pmd, pgtable);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (freeze) {</span>

I have been tested this patch with MADV_DONTNEED for a few days and
I couldn&#39;t see the problem any more. And I will continue to test it
with MADV_FREE.

Thanks.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 16, 2015, 1:45 a.m.</div>
<pre class="content">
On Thu, Nov 12, 2015 at 09:36:14AM +0900, Minchan Kim wrote:

&lt;snip&gt;
<span class="quote">
&gt; &gt; &gt; mmotm-2015-10-15-15-20-no-madvise_free, IOW it means git head for</span>
<span class="quote">&gt; &gt; &gt; 54bad5da4834 arm64: add pmd_[dirty|mkclean] for THP so there is no</span>
<span class="quote">&gt; &gt; &gt; MADV_FREE code in there</span>
<span class="quote">&gt; &gt; &gt;  + pte_mkdirty patch</span>
<span class="quote">&gt; &gt; &gt;  + freeze/unfreeze patch</span>
<span class="quote">&gt; &gt; &gt;  + do_page_add_anon_rmap patch</span>
<span class="quote">&gt; &gt; &gt;  + above split_huge_pmd</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; Adding 4191228k swap on /dev/vda5.  Priority:-1 extents:1 across:4191228k FS</span>
<span class="quote">&gt; &gt; &gt; BUG: Bad rss-counter state mm:ffff88007fa3bb80 idx:1 val:512</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; With the patch below my test setup run for 2+ days without triggering the</span>
<span class="quote">&gt; &gt; bug. split_huge_pmd patch should be dropped.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please test.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; index 14cbbad54a3e..7aa0a3fef2aa 100644</span>
<span class="quote">&gt; &gt; --- a/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; +++ b/mm/huge_memory.c</span>
<span class="quote">&gt; &gt; @@ -2841,9 +2841,6 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt; &gt;  	write = pmd_write(*pmd);</span>
<span class="quote">&gt; &gt;  	young = pmd_young(*pmd);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	/* leave pmd empty until pte is filled */</span>
<span class="quote">&gt; &gt; -	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt;  	pgtable = pgtable_trans_huge_withdraw(mm, pmd);</span>
<span class="quote">&gt; &gt;  	pmd_populate(mm, &amp;_pmd, pgtable);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; @@ -2893,6 +2890,28 @@ static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	smp_wmb(); /* make pte visible before pmd */</span>
<span class="quote">&gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; +	 * Up to this point the pmd is present and huge and userland has the</span>
<span class="quote">&gt; &gt; +	 * whole access to the hugepage during the split (which happens in</span>
<span class="quote">&gt; &gt; +	 * place). If we overwrite the pmd with the not-huge version pointing</span>
<span class="quote">&gt; &gt; +	 * to the pte here (which of course we could if all CPUs were bug</span>
<span class="quote">&gt; &gt; +	 * free), userland could trigger a small page size TLB miss on the</span>
<span class="quote">&gt; &gt; +	 * small sized TLB while the hugepage TLB entry is still established in</span>
<span class="quote">&gt; &gt; +	 * the huge TLB. Some CPU doesn&#39;t like that.</span>
<span class="quote">&gt; &gt; +	 * See http://support.amd.com/us/Processor_TechDocs/41322.pdf, Erratum</span>
<span class="quote">&gt; &gt; +	 * 383 on page 93. Intel should be safe but is also warns that it&#39;s</span>
<span class="quote">&gt; &gt; +	 * only safe if the permission and cache attributes of the two entries</span>
<span class="quote">&gt; &gt; +	 * loaded in the two TLB is identical (which should be the case here).</span>
<span class="quote">&gt; &gt; +	 * But it is generally safer to never allow small and huge TLB entries</span>
<span class="quote">&gt; &gt; +	 * for the same virtual address to be loaded simultaneously. So instead</span>
<span class="quote">&gt; &gt; +	 * of doing &quot;pmd_populate(); flush_pmd_tlb_range();&quot; we first mark the</span>
<span class="quote">&gt; &gt; +	 * current pmd notpresent (atomically because here the pmd_trans_huge</span>
<span class="quote">&gt; &gt; +	 * and pmd_trans_splitting must remain set at all times on the pmd</span>
<span class="quote">&gt; &gt; +	 * until the split is complete for this pmd), then we flush the SMP TLB</span>
<span class="quote">&gt; &gt; +	 * and finally we write the non-huge version of the pmd entry with</span>
<span class="quote">&gt; &gt; +	 * pmd_populate.</span>
<span class="quote">&gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; +	pmdp_invalidate(vma, haddr, pmd);</span>
<span class="quote">&gt; &gt;  	pmd_populate(mm, pmd, pgtable);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	if (freeze) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I have been tested this patch with MADV_DONTNEED for a few days and</span>
<span class="quote">&gt; I couldn&#39;t see the problem any more. And I will continue to test it</span>
<span class="quote">&gt; with MADV_FREE.</span>

During the test with MADV_FREE on kernel I applied your patches,
I couldn&#39;t see any problem.

However, in this round, I did another test which is same one
I attached but a liitle bit different because it doesn&#39;t do
(memcg things/kill/swapoff) for testing program long-live test.

With that, I encountered this problem.

page:ffffea0000f60080 count:1 mapcount:0 mapping:ffff88007f584691 index:0x600002a02
flags: 0x400000000006a028(uptodate|lru|writeback|swapcache|reclaim|swapbacked)
page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))
page-&gt;mem_cgroup:ffff880077cf0c00
------------[ cut here ]------------
kernel BUG at mm/huge_memory.c:3340!
invalid opcode: 0000 [#1] SMP 
Dumping ftrace buffer:
   (ftrace buffer empty)
Modules linked in:
CPU: 7 PID: 1657 Comm: memhog Not tainted 4.3.0-rc5-mm1-madv-free+ #4
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
task: ffff88006b0f1a40 ti: ffff88004ced4000 task.ti: ffff88004ced4000
RIP: 0010:[&lt;ffffffff8114bf67&gt;]  [&lt;ffffffff8114bf67&gt;] split_huge_page_to_list+0x907/0x920
RSP: 0018:ffff88004ced7a38  EFLAGS: 00010296
RAX: 0000000000000021 RBX: ffffea0000f60080 RCX: ffffffff81830db8
RDX: 0000000000000001 RSI: 0000000000000246 RDI: ffffffff821df4d8
RBP: ffff88004ced7ab8 R08: 0000000000000000 R09: ffff8800000bc560
R10: ffffffff8163d880 R11: 0000000000014f25 R12: ffffea0000f60080
R13: ffffea0000f60088 R14: ffffea0000f60080 R15: 0000000000000000
FS:  00007f43d3ced740(0000) GS:ffff8800782e0000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007ff1f6fcdb98 CR3: 000000004cf56000 CR4: 00000000000006a0
Stack:
 cccccccccccccccd ffffea0000f60080 ffff88004ced7ad0 ffffea0000f60088
 ffff88004ced7ad0 0000000000000000 ffff88004ced7ab8 ffffffff810ef9d0
 ffffea0000f60000 0000000000000000 0000000000000000 ffffea0000f60080
Call Trace:
 [&lt;ffffffff810ef9d0&gt;] ? __lock_page+0xa0/0xb0
 [&lt;ffffffff8114c09c&gt;] deferred_split_scan+0x11c/0x260
 [&lt;ffffffff81117bfc&gt;] ? list_lru_count_one+0x1c/0x30
 [&lt;ffffffff81101333&gt;] shrink_slab.part.42+0x1e3/0x350
 [&lt;ffffffff81105daa&gt;] shrink_zone+0x26a/0x280
 [&lt;ffffffff81105eed&gt;] do_try_to_free_pages+0x12d/0x3b0
 [&lt;ffffffff81106224&gt;] try_to_free_pages+0xb4/0x140
 [&lt;ffffffff810f8a59&gt;] __alloc_pages_nodemask+0x459/0x920
 [&lt;ffffffff8111e667&gt;] handle_mm_fault+0xc77/0x1000
 [&lt;ffffffff8142718d&gt;] ? retint_kernel+0x10/0x10
 [&lt;ffffffff81033629&gt;] __do_page_fault+0x189/0x400
 [&lt;ffffffff810338ac&gt;] do_page_fault+0xc/0x10
 [&lt;ffffffff81428142&gt;] page_fault+0x22/0x30
Code: ff ff 48 c7 c6 f0 b2 77 81 4c 89 f7 e8 13 c3 fc ff 0f 0b 48 83 e8 01 e9 88 f7 ff ff 48 c7 c6 70 a1 77 81 4c 89 f7 e8 f9 c2 fc ff &lt;0f&gt; 0b 48 c7 c6 38 af 77 81 4c 89 e7 e8 e8 c2 fc ff 0f 0b 66 0f 
RIP  [&lt;ffffffff8114bf67&gt;] split_huge_page_to_list+0x907/0x920
 RSP &lt;ffff88004ced7a38&gt;
---[ end trace c9a60522e3a296e4 ]---


So, I reverted all MADV_FREE patches and chaged it with MADV_DONTNEED.
In this time, I saw below oops in this time.
If I miss somethings, please let me know it.

------------[ cut here ]------------
kernel BUG at include/linux/swapops.h:129!
invalid opcode: 0000 [#1] SMP 
Dumping ftrace buffer:
   (ftrace buffer empty)
Modules linked in:
CPU: 5 PID: 1563 Comm: madvise_test Not tainted 4.3.0-rc5-mm1-no-madv-free+ #5
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
task: ffff88007e8d3480 ti: ffff88007f524000 task.ti: ffff88007f524000
RIP: 0010:[&lt;ffffffff811504be&gt;]  [&lt;ffffffff811504be&gt;] migration_entry_to_page.part.61+0x4/0x6
RSP: 0018:ffff88007f527cd0  EFLAGS: 00010246
RAX: ffffea0000896b00 RBX: 00006000013ac000 RCX: ffffea0000000000
RDX: 0000000000000000 RSI: ffffea0001f93e80 RDI: 3e000000000225ac
RBP: ffff88007f527cd0 R08: 0000000000000101 R09: ffff88007e4fa000
R10: ffffea0001fda740 R11: 0000000000000000 R12: 00000000044b583e
R13: 00006000013ad000 R14: ffff88007f527e00 R15: ffff88007e4fad60
FS:  00007fe2f099a740(0000) GS:ffff8800782a0000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
CR2: 000000000166c0d0 CR3: 000000007e57b000 CR4: 00000000000006a0
Stack:
 ffff88007f527db8 ffffffff81118030 00006000017fffff ffff88007f527e00
 00006000017fffff ffff88007ed71000 ffff88007e57b600 0000600001800000
 0000600001800000 00006000017fffff 0000600001800000 ffff88007efb6b78
Call Trace:
 [&lt;ffffffff81118030&gt;] unmap_single_vma+0x840/0x880
 [&lt;ffffffff811188a1&gt;] unmap_vmas+0x41/0x60
 [&lt;ffffffff8111dfad&gt;] unmap_region+0x9d/0x100
 [&lt;ffffffff81120007&gt;] do_munmap+0x217/0x380
 [&lt;ffffffff811201b1&gt;] vm_munmap+0x41/0x60
 [&lt;ffffffff811210d2&gt;] SyS_munmap+0x22/0x30
 [&lt;ffffffff81420357&gt;] entry_SYSCALL_64_fastpath+0x12/0x6a
Code: df 48 c1 ff 06 49 01 fc 4c 89 e7 e8 9c ff ff ff 85 c0 74 0c 4c 89 e0 48 c1 e0 06 48 29 d8 eb 02 31 c0 5b 41 5c 5d c3 55 48 89 e5 &lt;0f&gt; 0b 55 48 c7 c6 30 80 77 81 48 89 e5 e8 f0 45 fc ff 0f 0b 55 
RIP  [&lt;ffffffff811504be&gt;] migration_entry_to_page.part.61+0x4/0x6
 RSP &lt;ffff88007f527cd0&gt;
---[ end trace 01097fb7f9cf1b6c ]---

Another hit:

page:ffffea0000520080 count:2 mapcount:0 mapping:ffff880072b38a51 index:0x600002602
flags: 0x4000000000048028(uptodate|lru|swapcache|swapbacked)
page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))
page-&gt;mem_cgroup:ffff880077cf0c00
------------[ cut here ]------------
kernel BUG at mm/huge_memory.c:3306!
invalid opcode: 0000 [#1] SMP 
Dumping ftrace buffer:
   (ftrace buffer empty)
Modules linked in:
CPU: 6 PID: 1419 Comm: madvise_test Not tainted 4.3.0-rc5-mm1-no-madv-free+ #5
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
task: ffff88006f108000 ti: ffff88006f054000 task.ti: ffff88006f054000
RIP: 0010:[&lt;ffffffff811473bf&gt;]  [&lt;ffffffff811473bf&gt;] split_huge_page_to_list+0x81f/0x890
RSP: 0000:ffff88006f057a40  EFLAGS: 00010282
RAX: 0000000000000021 RBX: ffffea0000520080 RCX: 0000000000000000
RDX: 0000000000000001 RSI: 0000000000000246 RDI: ffffffff821dd418
RBP: ffff88006f057ab8 R08: 0000000000000000 R09: ffff8800000bfb20
R10: ffffffff8163d1c0 R11: 0000000000005c5f R12: ffff88006f057ad0
R13: ffffea0000520080 R14: ffffea0000520080 R15: 0000000000000000
FS:  00007f09963a2740(0000) GS:ffff8800782c0000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
CR2: 0000600003d92000 CR3: 000000007372e000 CR4: 00000000000006a0
Stack:
 ffffea0000520080 ffff88006f057ad0 ffffea0000520088 ffff88006f057ad0
 0000000000000000 ffff88006f057ab8 ffffffff810ec700 ffffea0000520000
 0000000000000000 0000000000000000 ffffea0000520080 ffff88006f057ad0
Call Trace:
 [&lt;ffffffff810ec700&gt;] ? __lock_page+0xa0/0xb0
 [&lt;ffffffff81147545&gt;] deferred_split_scan+0x115/0x240
 [&lt;ffffffff8111445c&gt;] ? list_lru_count_one+0x1c/0x30
 [&lt;ffffffff810fdd63&gt;] shrink_slab.part.43+0x1e3/0x350
 [&lt;ffffffff81102788&gt;] shrink_zone+0x238/0x250
 [&lt;ffffffff811028cd&gt;] do_try_to_free_pages+0x12d/0x3b0
 [&lt;ffffffff81102c04&gt;] try_to_free_pages+0xb4/0x140
 [&lt;ffffffff810f57b9&gt;] __alloc_pages_nodemask+0x459/0x920
 [&lt;ffffffff8111aa2a&gt;] handle_mm_fault+0xbca/0xf90
 [&lt;ffffffff8105b8bc&gt;] ? enqueue_task+0x3c/0x60
 [&lt;ffffffff810602eb&gt;] ? __set_cpus_allowed_ptr+0x9b/0x1a0
 [&lt;ffffffff81032b49&gt;] __do_page_fault+0x189/0x400
 [&lt;ffffffff81032dcc&gt;] do_page_fault+0xc/0x10
 [&lt;ffffffff81421e02&gt;] page_fault+0x22/0x30
Code: ff ff 48 c7 c6 d0 91 77 81 4c 89 f7 e8 1b d7 fc ff 0f 0b 48 83 e8 01 e9 70 f8 ff ff 48 c7 c6 50 80 77 81 4c 89 f7 e8 01 d7 fc ff &lt;0f&gt; 0b 48 c7 c6 d8 be 77 81 4c 89 ef e8 f0 d6 fc ff 0f 0b 48 83 
RIP  [&lt;ffffffff811473bf&gt;] split_huge_page_to_list+0x81f/0x890
 RSP &lt;ffff88006f057a40&gt;
---[ end trace 0ce8751b8410cd8e ]---

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 16, 2015, 8:45 a.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 10:45:21AM +0900, Minchan Kim wrote:
<span class="quote">&gt; During the test with MADV_FREE on kernel I applied your patches,</span>
<span class="quote">&gt; I couldn&#39;t see any problem.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; However, in this round, I did another test which is same one</span>
<span class="quote">&gt; I attached but a liitle bit different because it doesn&#39;t do</span>
<span class="quote">&gt; (memcg things/kill/swapoff) for testing program long-live test.</span>

Could you share updated test?

And could you try to reproduce it on clean mmotm-2015-11-10-15-53?
<span class="quote">
&gt; With that, I encountered this problem.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; page:ffffea0000f60080 count:1 mapcount:0 mapping:ffff88007f584691 index:0x600002a02</span>
<span class="quote">&gt; flags: 0x400000000006a028(uptodate|lru|writeback|swapcache|reclaim|swapbacked)</span>
<span class="quote">&gt; page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))</span>
<span class="quote">&gt; page-&gt;mem_cgroup:ffff880077cf0c00</span>
<span class="quote">&gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; kernel BUG at mm/huge_memory.c:3340!</span>
<span class="quote">&gt; invalid opcode: 0000 [#1] SMP </span>
<span class="quote">&gt; Dumping ftrace buffer:</span>
<span class="quote">&gt;    (ftrace buffer empty)</span>
<span class="quote">&gt; Modules linked in:</span>
<span class="quote">&gt; CPU: 7 PID: 1657 Comm: memhog Not tainted 4.3.0-rc5-mm1-madv-free+ #4</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; task: ffff88006b0f1a40 ti: ffff88004ced4000 task.ti: ffff88004ced4000</span>
<span class="quote">&gt; RIP: 0010:[&lt;ffffffff8114bf67&gt;]  [&lt;ffffffff8114bf67&gt;] split_huge_page_to_list+0x907/0x920</span>
<span class="quote">&gt; RSP: 0018:ffff88004ced7a38  EFLAGS: 00010296</span>
<span class="quote">&gt; RAX: 0000000000000021 RBX: ffffea0000f60080 RCX: ffffffff81830db8</span>
<span class="quote">&gt; RDX: 0000000000000001 RSI: 0000000000000246 RDI: ffffffff821df4d8</span>
<span class="quote">&gt; RBP: ffff88004ced7ab8 R08: 0000000000000000 R09: ffff8800000bc560</span>
<span class="quote">&gt; R10: ffffffff8163d880 R11: 0000000000014f25 R12: ffffea0000f60080</span>
<span class="quote">&gt; R13: ffffea0000f60088 R14: ffffea0000f60080 R15: 0000000000000000</span>
<span class="quote">&gt; FS:  00007f43d3ced740(0000) GS:ffff8800782e0000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; CR2: 00007ff1f6fcdb98 CR3: 000000004cf56000 CR4: 00000000000006a0</span>
<span class="quote">&gt; Stack:</span>
<span class="quote">&gt;  cccccccccccccccd ffffea0000f60080 ffff88004ced7ad0 ffffea0000f60088</span>
<span class="quote">&gt;  ffff88004ced7ad0 0000000000000000 ffff88004ced7ab8 ffffffff810ef9d0</span>
<span class="quote">&gt;  ffffea0000f60000 0000000000000000 0000000000000000 ffffea0000f60080</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;ffffffff810ef9d0&gt;] ? __lock_page+0xa0/0xb0</span>
<span class="quote">&gt;  [&lt;ffffffff8114c09c&gt;] deferred_split_scan+0x11c/0x260</span>
<span class="quote">&gt;  [&lt;ffffffff81117bfc&gt;] ? list_lru_count_one+0x1c/0x30</span>
<span class="quote">&gt;  [&lt;ffffffff81101333&gt;] shrink_slab.part.42+0x1e3/0x350</span>
<span class="quote">&gt;  [&lt;ffffffff81105daa&gt;] shrink_zone+0x26a/0x280</span>
<span class="quote">&gt;  [&lt;ffffffff81105eed&gt;] do_try_to_free_pages+0x12d/0x3b0</span>
<span class="quote">&gt;  [&lt;ffffffff81106224&gt;] try_to_free_pages+0xb4/0x140</span>
<span class="quote">&gt;  [&lt;ffffffff810f8a59&gt;] __alloc_pages_nodemask+0x459/0x920</span>
<span class="quote">&gt;  [&lt;ffffffff8111e667&gt;] handle_mm_fault+0xc77/0x1000</span>
<span class="quote">&gt;  [&lt;ffffffff8142718d&gt;] ? retint_kernel+0x10/0x10</span>
<span class="quote">&gt;  [&lt;ffffffff81033629&gt;] __do_page_fault+0x189/0x400</span>
<span class="quote">&gt;  [&lt;ffffffff810338ac&gt;] do_page_fault+0xc/0x10</span>
<span class="quote">&gt;  [&lt;ffffffff81428142&gt;] page_fault+0x22/0x30</span>
<span class="quote">&gt; Code: ff ff 48 c7 c6 f0 b2 77 81 4c 89 f7 e8 13 c3 fc ff 0f 0b 48 83 e8 01 e9 88 f7 ff ff 48 c7 c6 70 a1 77 81 4c 89 f7 e8 f9 c2 fc ff &lt;0f&gt; 0b 48 c7 c6 38 af 77 81 4c 89 e7 e8 e8 c2 fc ff 0f 0b 66 0f </span>
<span class="quote">&gt; RIP  [&lt;ffffffff8114bf67&gt;] split_huge_page_to_list+0x907/0x920</span>
<span class="quote">&gt;  RSP &lt;ffff88004ced7a38&gt;</span>
<span class="quote">&gt; ---[ end trace c9a60522e3a296e4 ]---</span>

I don&#39;t see how it&#39;s possible: call lock_page() just before
split_huge_page() in deferred_split_scan().
<span class="quote">
&gt; So, I reverted all MADV_FREE patches and chaged it with MADV_DONTNEED.</span>
<span class="quote">&gt; In this time, I saw below oops in this time.</span>
<span class="quote">&gt; If I miss somethings, please let me know it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; kernel BUG at include/linux/swapops.h:129!</span>

Looks similar to what I fixed by inserting smp_wmb() just before
clear_compound_head() in __split_huge_page_tail().

Do you have this in place? Like in last -mm tree?
<span class="quote">
&gt; Another hit:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; page:ffffea0000520080 count:2 mapcount:0 mapping:ffff880072b38a51 index:0x600002602</span>
<span class="quote">&gt; flags: 0x4000000000048028(uptodate|lru|swapcache|swapbacked)</span>
<span class="quote">&gt; page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))</span>
<span class="quote">&gt; page-&gt;mem_cgroup:ffff880077cf0c00</span>
<span class="quote">&gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; kernel BUG at mm/huge_memory.c:3306!</span>

The same as the first one: no idea.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 16, 2015, 10:32 a.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 10:45:22AM +0200, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Mon, Nov 16, 2015 at 10:45:21AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; During the test with MADV_FREE on kernel I applied your patches,</span>
<span class="quote">&gt; &gt; I couldn&#39;t see any problem.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; However, in this round, I did another test which is same one</span>
<span class="quote">&gt; &gt; I attached but a liitle bit different because it doesn&#39;t do</span>
<span class="quote">&gt; &gt; (memcg things/kill/swapoff) for testing program long-live test.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Could you share updated test?</span>

It&#39;s part of my testing suite so I should factor it out.
I will send it when I go to office tomorrow.
<span class="quote">
&gt; </span>
<span class="quote">&gt; And could you try to reproduce it on clean mmotm-2015-11-10-15-53?</span>

Befor leaving office, I queued it up and result is below.
It seems you fixed already but didn&#39;t apply it to mmotm yet. Right?
Anyway, please confirm and say to me what I should add more patches
into mmotm-2015-11-10-15-53 for follow up your recent many bug
fix patches.

Thanks.

page:ffffea0000553fc0 count:3 mapcount:1 mapping:ffff88007f717a01 index:0x6000002ff
flags: 0x4000000000048019(locked|uptodate|dirty|swapcache|swapbacked)
page dumped because: VM_BUG_ON_PAGE(PageAnon(page) &amp;&amp; !PageKsm(page) &amp;&amp; !anon_vma)
page-&gt;mem_cgroup:ffff880077cf0c00
------------[ cut here ]------------
kernel BUG at mm/migrate.c:889!
invalid opcode: 0000 [#1] SMP 
Dumping ftrace buffer:
   (ftrace buffer empty)
Modules linked in:
CPU: 10 PID: 59 Comm: khugepaged Not tainted 4.3.0-mm1-kirill+ #7
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
task: ffff880073441a40 ti: ffff88007344c000 task.ti: ffff88007344c000
RIP: 0010:[&lt;ffffffff81145466&gt;]  [&lt;ffffffff81145466&gt;] migrate_pages+0x8e6/0x950
RSP: 0018:ffff88007344fa00  EFLAGS: 00010282
RAX: 0000000000000021 RBX: ffffea0001a0bbc0 RCX: 0000000000000000
RDX: 0000000000000001 RSI: 0000000000000246 RDI: ffffffff821df4d8
RBP: ffff88007344fa80 R08: 0000000000000000 R09: ffff8800000b9540
R10: ffffffff8163e2c0 R11: 00000000000002c2 R12: 0000000000000000
R13: ffffea0000553f80 R14: ffffea0000553fc0 R15: ffffffff8189db40
FS:  0000000000000000(0000) GS:ffff880078340000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
CR2: 00007f45cc0091d8 CR3: 000000007eba7000 CR4: 00000000000006a0
Stack:
 ffff880073441a40 0000000000000000 0000000000000000 0000000000000000
 ffffffff81114880 0000000000000000 ffffffff81116420 ffffea0000553fe0
 ffff88007344fb30 ffff88007344fb20 0000000000000000 ffff88007344fb20
Call Trace:
 [&lt;ffffffff81114880&gt;] ? trace_raw_output_mm_compaction_defer_template+0xc0/0xc0
 [&lt;ffffffff81116420&gt;] ? isolate_freepages_block+0x3d0/0x3d0
 [&lt;ffffffff81116dfb&gt;] compact_zone+0x2bb/0x720
 [&lt;ffffffff8128793d&gt;] ? list_del+0xd/0x30
 [&lt;ffffffff811172cd&gt;] compact_zone_order+0x6d/0xa0
 [&lt;ffffffff8111751d&gt;] try_to_compact_pages+0xed/0x200
 [&lt;ffffffff81154143&gt;] __alloc_pages_direct_compact+0x3b/0xd4
 [&lt;ffffffff810f921b&gt;] __alloc_pages_nodemask+0x3fb/0x920
 [&lt;ffffffff81147465&gt;] khugepaged+0x155/0x1b10
 [&lt;ffffffff81073ca0&gt;] ? prepare_to_wait_event+0xf0/0xf0
 [&lt;ffffffff81147310&gt;] ? __split_huge_pmd_locked+0x4e0/0x4e0
 [&lt;ffffffff81057e49&gt;] kthread+0xc9/0xe0
 [&lt;ffffffff81057d80&gt;] ? kthread_park+0x60/0x60
 [&lt;ffffffff8142aa6f&gt;] ret_from_fork+0x3f/0x70
 [&lt;ffffffff81057d80&gt;] ? kthread_park+0x60/0x60
Code: 44 c6 48 8b 40 08 83 e0 03 48 83 f8 03 0f 84 fd fa ff ff 4d 85 e4 0f 85 f4 fa ff ff 48 c7 c6 b8 f6 77 81 4c 89 f7 e8 fa 36 fd ff &lt;0f&gt; 0b 48 83 e8 01 e9 d0 fa ff ff f6 40 07 01 0f 84 5b fd ff ff 
RIP  [&lt;ffffffff81145466&gt;] migrate_pages+0x8e6/0x950
 RSP &lt;ffff88007344fa00&gt;
---[ end trace 337555313b7e45be ]---
Kernel panic - not syncing: Fatal exception
Dumping ftrace buffer:
   (ftrace buffer empty)
Kernel Offset: disabled

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 16, 2015, 10:54 a.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 07:32:20PM +0900, Minchan Kim wrote:
<span class="quote">&gt; On Mon, Nov 16, 2015 at 10:45:22AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Mon, Nov 16, 2015 at 10:45:21AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; During the test with MADV_FREE on kernel I applied your patches,</span>
<span class="quote">&gt; &gt; &gt; I couldn&#39;t see any problem.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; However, in this round, I did another test which is same one</span>
<span class="quote">&gt; &gt; &gt; I attached but a liitle bit different because it doesn&#39;t do</span>
<span class="quote">&gt; &gt; &gt; (memcg things/kill/swapoff) for testing program long-live test.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Could you share updated test?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s part of my testing suite so I should factor it out.</span>
<span class="quote">&gt; I will send it when I go to office tomorrow.</span>

Thanks.
<span class="quote">
&gt; &gt; And could you try to reproduce it on clean mmotm-2015-11-10-15-53?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Befor leaving office, I queued it up and result is below.</span>
<span class="quote">&gt; It seems you fixed already but didn&#39;t apply it to mmotm yet. Right?</span>
<span class="quote">&gt; Anyway, please confirm and say to me what I should add more patches</span>
<span class="quote">&gt; into mmotm-2015-11-10-15-53 for follow up your recent many bug</span>
<span class="quote">&gt; fix patches.</span>

The two my patches which are not in the mmotm-2015-11-10-15-53 release:

http://lkml.kernel.org/g/1447236557-68682-1-git-send-email-kirill.shutemov@linux.intel.com
http://lkml.kernel.org/g/1447236567-68751-1-git-send-email-kirill.shutemov@linux.intel.com
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 17, 2015, 7:35 a.m.</div>
<pre class="content">
On Mon, Nov 16, 2015 at 12:54:53PM +0200, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Mon, Nov 16, 2015 at 07:32:20PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; On Mon, Nov 16, 2015 at 10:45:22AM +0200, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; On Mon, Nov 16, 2015 at 10:45:21AM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; During the test with MADV_FREE on kernel I applied your patches,</span>
<span class="quote">&gt; &gt; &gt; &gt; I couldn&#39;t see any problem.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; However, in this round, I did another test which is same one</span>
<span class="quote">&gt; &gt; &gt; &gt; I attached but a liitle bit different because it doesn&#39;t do</span>
<span class="quote">&gt; &gt; &gt; &gt; (memcg things/kill/swapoff) for testing program long-live test.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Could you share updated test?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; It&#39;s part of my testing suite so I should factor it out.</span>
<span class="quote">&gt; &gt; I will send it when I go to office tomorrow.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt; And could you try to reproduce it on clean mmotm-2015-11-10-15-53?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Befor leaving office, I queued it up and result is below.</span>
<span class="quote">&gt; &gt; It seems you fixed already but didn&#39;t apply it to mmotm yet. Right?</span>
<span class="quote">&gt; &gt; Anyway, please confirm and say to me what I should add more patches</span>
<span class="quote">&gt; &gt; into mmotm-2015-11-10-15-53 for follow up your recent many bug</span>
<span class="quote">&gt; &gt; fix patches.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The two my patches which are not in the mmotm-2015-11-10-15-53 release:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; http://lkml.kernel.org/g/1447236557-68682-1-git-send-email-kirill.shutemov@linux.intel.com</span>
<span class="quote">&gt; http://lkml.kernel.org/g/1447236567-68751-1-git-send-email-kirill.shutemov@linux.intel.com</span>

1. mm: fix __page_mapcount()
2. thp: fix leak due split_huge_page() vs. exit race

If I missed some patches, let me know it.

I applied above two patches based on mmotm-2015-11-10-15-53 and tested again.
But unfortunately, the result was below.

Now, I am making test program I can send to you but it seems to be not easy
because small changes for factoring it out from testing suite seems to change
something(ex, timing) and makes hard to reproduce. I will try it again.


page:ffffea0000240080 count:2 mapcount:1 mapping:ffff88007eff3321 index:0x600000e02
flags: 0x4000000000040018(uptodate|dirty|swapbacked)
page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))
page-&gt;mem_cgroup:ffff880077cf0c00
------------[ cut here ]------------
kernel BUG at mm/huge_memory.c:3272!
invalid opcode: 0000 [#1] SMP 
Dumping ftrace buffer:
   (ftrace buffer empty)
Modules linked in:
CPU: 8 PID: 59 Comm: khugepaged Not tainted 4.3.0-mm1-kirill+ #8
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
task: ffff880073441a40 ti: ffff88007344c000 task.ti: ffff88007344c000
RIP: 0010:[&lt;ffffffff8114bc9b&gt;]  [&lt;ffffffff8114bc9b&gt;] split_huge_page_to_list+0x8fb/0x910
RSP: 0018:ffff88007344f968  EFLAGS: 00010286
RAX: 0000000000000021 RBX: ffffea0000240080 RCX: 0000000000000000
RDX: 0000000000000001 RSI: 0000000000000246 RDI: ffffffff821df4d8
RBP: ffff88007344f9e8 R08: 0000000000000000 R09: ffff8800000bc600
R10: ffffffff8163e2c0 R11: 0000000000004b47 R12: ffffea0000240080
R13: ffffea0000240088 R14: ffffea0000240080 R15: 0000000000000000
FS:  0000000000000000(0000) GS:ffff880078300000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
CR2: 00007ffd59edcd68 CR3: 0000000001808000 CR4: 00000000000006a0
Stack:
 cccccccccccccccd ffffea0000240080 ffff88007344fa00 ffffea0000240088
 ffff88007344fa00 0000000000000000 ffff88007344f9e8 ffffffff810f0200
 ffffea0000240000 0000000000000000 0000000000000000 ffffea0000240080
Call Trace:
 [&lt;ffffffff810f0200&gt;] ? __lock_page+0xa0/0xb0
 [&lt;ffffffff8114bdc5&gt;] deferred_split_scan+0x115/0x240
 [&lt;ffffffff8111851c&gt;] ? list_lru_count_one+0x1c/0x30
 [&lt;ffffffff811018d3&gt;] shrink_slab.part.42+0x1e3/0x350
 [&lt;ffffffff8110644a&gt;] shrink_zone+0x26a/0x280
 [&lt;ffffffff8110658d&gt;] do_try_to_free_pages+0x12d/0x3b0
 [&lt;ffffffff811068c4&gt;] try_to_free_pages+0xb4/0x140
 [&lt;ffffffff810f9279&gt;] __alloc_pages_nodemask+0x459/0x920
 [&lt;ffffffff8108d750&gt;] ? trace_event_raw_event_tick_stop+0xd0/0xd0
 [&lt;ffffffff81147465&gt;] khugepaged+0x155/0x1b10
 [&lt;ffffffff81073ca0&gt;] ? prepare_to_wait_event+0xf0/0xf0
 [&lt;ffffffff81147310&gt;] ? __split_huge_pmd_locked+0x4e0/0x4e0
 [&lt;ffffffff81057e49&gt;] kthread+0xc9/0xe0
 [&lt;ffffffff81057d80&gt;] ? kthread_park+0x60/0x60
 [&lt;ffffffff8142aa6f&gt;] ret_from_fork+0x3f/0x70
 [&lt;ffffffff81057d80&gt;] ? kthread_park+0x60/0x60
Code: ff ff 48 c7 c6 00 cd 77 81 4c 89 f7 e8 df ce fc ff 0f 0b 48 83 e8 01 e9 94 f7 ff ff 48 c7 c6 80 bb 77 81 4c 89 f7 e8 c5 ce fc ff &lt;0f&gt; 0b 48 c7 c6 48 c9 77 81 4c 89 e7 e8 b4 ce fc ff 0f 0b 66 90 
RIP  [&lt;ffffffff8114bc9b&gt;] split_huge_page_to_list+0x8fb/0x910
 RSP &lt;ffff88007344f968&gt;
---[ end trace 0ee39378e850d8de ]---
Kernel panic - not syncing: Fatal exception
Dumping ftrace buffer:
   (ftrace buffer empty)
Kernel Offset: disabled
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 14cbbad54a3e..7aa0a3fef2aa 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -2841,9 +2841,6 @@</span> <span class="p_context"> static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
 	write = pmd_write(*pmd);
 	young = pmd_young(*pmd);
 
<span class="p_del">-	/* leave pmd empty until pte is filled */</span>
<span class="p_del">-	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
<span class="p_del">-</span>
 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
 	pmd_populate(mm, &amp;_pmd, pgtable);
 
<span class="p_chunk">@@ -2893,6 +2890,28 @@</span> <span class="p_context"> static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
 	}
 
 	smp_wmb(); /* make pte visible before pmd */
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Up to this point the pmd is present and huge and userland has the</span>
<span class="p_add">+	 * whole access to the hugepage during the split (which happens in</span>
<span class="p_add">+	 * place). If we overwrite the pmd with the not-huge version pointing</span>
<span class="p_add">+	 * to the pte here (which of course we could if all CPUs were bug</span>
<span class="p_add">+	 * free), userland could trigger a small page size TLB miss on the</span>
<span class="p_add">+	 * small sized TLB while the hugepage TLB entry is still established in</span>
<span class="p_add">+	 * the huge TLB. Some CPU doesn&#39;t like that.</span>
<span class="p_add">+	 * See http://support.amd.com/us/Processor_TechDocs/41322.pdf, Erratum</span>
<span class="p_add">+	 * 383 on page 93. Intel should be safe but is also warns that it&#39;s</span>
<span class="p_add">+	 * only safe if the permission and cache attributes of the two entries</span>
<span class="p_add">+	 * loaded in the two TLB is identical (which should be the case here).</span>
<span class="p_add">+	 * But it is generally safer to never allow small and huge TLB entries</span>
<span class="p_add">+	 * for the same virtual address to be loaded simultaneously. So instead</span>
<span class="p_add">+	 * of doing &quot;pmd_populate(); flush_pmd_tlb_range();&quot; we first mark the</span>
<span class="p_add">+	 * current pmd notpresent (atomically because here the pmd_trans_huge</span>
<span class="p_add">+	 * and pmd_trans_splitting must remain set at all times on the pmd</span>
<span class="p_add">+	 * until the split is complete for this pmd), then we flush the SMP TLB</span>
<span class="p_add">+	 * and finally we write the non-huge version of the pmd entry with</span>
<span class="p_add">+	 * pmd_populate.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	pmdp_invalidate(vma, haddr, pmd);</span>
 	pmd_populate(mm, pmd, pgtable);
 
 	if (freeze) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



