
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] EFI changes for v4.8 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] EFI changes for v4.8</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 25, 2016, 7:37 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160725073715.GA15259@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9245293/mbox/"
   >mbox</a>
|
   <a href="/patch/9245293/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9245293/">/patch/9245293/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	70C3860757 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 25 Jul 2016 07:37:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6108B25F3E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 25 Jul 2016 07:37:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5521A26B41; Mon, 25 Jul 2016 07:37:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 17C8325F3E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 25 Jul 2016 07:37:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752622AbcGYHh1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 25 Jul 2016 03:37:27 -0400
Received: from mail-wm0-f68.google.com ([74.125.82.68]:34668 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751127AbcGYHhV (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 25 Jul 2016 03:37:21 -0400
Received: by mail-wm0-f68.google.com with SMTP id q128so15467440wma.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 25 Jul 2016 00:37:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=rRynxJjEaDpmrWSMOzpmEYd+Icj1rdlgHGNNUdZNRU8=;
	b=l7POVC802qPk50+BDcFZvbYDEFOjCGWHdvJadJFYFLn6Vk3ZT1Wc4fHy1wKTz4DbFA
	jb+zVNc0oGpG4qnyzMg7E8tzMv6zvk4ZhV7Ew+GIg3pd1at7XNnDYtkeXQ6/lT/Iaenc
	yrA870/x2Y++gavD0iAN6TcUT7UO/kGl0WuQSeZRgguahPA9NkX4VoDNB6qbdZrgmMU0
	irWpZsUrCJF0WaCuNKzgYuECZPrNXo+avtcG2y9G6JalrwDg5Hi6VOuAeGpUhuaOFeKg
	5+ozXPqAJBvyieki5J+NsHQ2G+2BwQSBKS/sy2+oLLe5m0/G539REk1oCMjrynQzg0Ub
	Te4w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=rRynxJjEaDpmrWSMOzpmEYd+Icj1rdlgHGNNUdZNRU8=;
	b=Qwwia+t4xsD4zHndLdho9tA63bqf00i92KiWNmCuNMK1Co95hsZY+C8lUF9vqAr1RX
	SDj1dG3icKQhJThDHZHqFwSZg98TPLsFecSKZXACQ0ni6Rt2LhTkS1MCKSfdq0W3TKxd
	e2lAuCW7ccaEsv3Z3nm/uUqk5q+WRusfKW1CiVDEpC4RfnG7Jdns6nt/215vZGdOdZ3G
	2A2XOPqlTbWCfwhcD1BvQHPzwANqhR7THhqfP/sHw1xre3kxftHP6C4RaokCfPJVyadp
	rb29qD2Rs8mlkkBVqhaH5BCp3pfNKe7Bv0RKxEs/IMmdlJm3PXzKjV3znppOP8j46fft
	DoHQ==
X-Gm-Message-State: AEkoouvi2JOb4GxqI7HZJzemd356hkFyubM8o9iKvTuy0MlvpKl6WTR1lqdHPKCnFso8+Q==
X-Received: by 10.195.18.129 with SMTP id gm1mr13672945wjd.148.1469432238805;
	Mon, 25 Jul 2016 00:37:18 -0700 (PDT)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	gg10sm14307650wjd.4.2016.07.25.00.37.17
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 25 Jul 2016 00:37:17 -0700 (PDT)
Date: Mon, 25 Jul 2016 09:37:15 +0200
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;
Subject: [GIT PULL] EFI changes for v4.8
Message-ID: &lt;20160725073715.GA15259@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - July 25, 2016, 7:37 a.m.</div>
<pre class="content">
Linus,

Please pull the latest efi-core-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git efi-core-for-linus

   # HEAD: 7fb2b43c3252c9177825a0a49138cd16144b6b5e efi: Reorganize the GUID table to make it easier to read

The biggest change in this cycle were SGI/UV related changes that clean up and fix 
UV boot quirks and problems. There&#39;s also various smaller cleanups and 
refinements.

 Thanks,

	Ingo

------------------&gt;
Alex Thorlton (3):
      efi: Convert efi_call_virt() to efi_call_virt_pointer()
      x86/uv: Update uv_bios_call() to use efi_call_virt_pointer()
      x86/efi: Update efi_thunk() to use the the arch_efi_call_virt*() macros

Arnd Bergmann (1):
      x86/efi: Remove the unused efi_get_time() function

Colin Ian King (1):
      x86/efi: Remove unused variable &#39;efi&#39;

Compostella, Jeremy (1):
      efibc: Report more information in the error messages

Ingo Molnar (1):
      efi: Reorganize the GUID table to make it easier to read

Peter Jones (1):
      efi: Document #define FOO_PROTOCOL_GUID layout


 arch/arm/include/asm/efi.h              |   4 +-
 arch/arm64/include/asm/efi.h            |   4 +-
 arch/x86/boot/compressed/eboot.c        |   2 -
 arch/x86/include/asm/efi.h              |   9 +-
 arch/x86/platform/efi/efi.c             |  15 ---
 arch/x86/platform/efi/efi_64.c          |  21 ++--
 arch/x86/platform/uv/bios_uv.c          |   3 +-
 drivers/firmware/efi/efibc.c            |   4 +-
 drivers/firmware/efi/runtime-wrappers.c |  53 ++-------
 include/linux/efi.h                     | 200 +++++++++++++++-----------------
 10 files changed, 125 insertions(+), 190 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/efi.h b/arch/arm/include/asm/efi.h</span>
<span class="p_header">index a708fa1f0905..766bf9b78160 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/efi.h</span>
<span class="p_chunk">@@ -28,10 +28,10 @@</span> <span class="p_context"> int efi_set_mapping_permissions(struct mm_struct *mm, efi_memory_desc_t *md);</span>
 #define arch_efi_call_virt_setup()	efi_virtmap_load()
 #define arch_efi_call_virt_teardown()	efi_virtmap_unload()
 
<span class="p_del">-#define arch_efi_call_virt(f, args...)					\</span>
<span class="p_add">+#define arch_efi_call_virt(p, f, args...)				\</span>
 ({									\
 	efi_##f##_t *__f;						\
<span class="p_del">-	__f = efi.systab-&gt;runtime-&gt;f;					\</span>
<span class="p_add">+	__f = p-&gt;f;							\</span>
 	__f(args);							\
 })
 
<span class="p_header">diff --git a/arch/arm64/include/asm/efi.h b/arch/arm64/include/asm/efi.h</span>
<span class="p_header">index 622db3c6474e..bd887663689b 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/efi.h</span>
<span class="p_chunk">@@ -23,10 +23,10 @@</span> <span class="p_context"> int efi_create_mapping(struct mm_struct *mm, efi_memory_desc_t *md);</span>
 	efi_virtmap_load();						\
 })
 
<span class="p_del">-#define arch_efi_call_virt(f, args...)					\</span>
<span class="p_add">+#define arch_efi_call_virt(p, f, args...)				\</span>
 ({									\
 	efi_##f##_t *__f;						\
<span class="p_del">-	__f = efi.systab-&gt;runtime-&gt;f;					\</span>
<span class="p_add">+	__f = p-&gt;f;							\</span>
 	__f(args);							\
 })
 
<span class="p_header">diff --git a/arch/x86/boot/compressed/eboot.c b/arch/x86/boot/compressed/eboot.c</span>
<span class="p_header">index 52fef606bc54..ff574dad95cc 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/eboot.c</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/eboot.c</span>
<span class="p_chunk">@@ -757,7 +757,6 @@</span> <span class="p_context"> struct boot_params *make_boot_params(struct efi_config *c)</span>
 	struct boot_params *boot_params;
 	struct apm_bios_info *bi;
 	struct setup_header *hdr;
<span class="p_del">-	struct efi_info *efi;</span>
 	efi_loaded_image_t *image;
 	void *options, *handle;
 	efi_guid_t proto = LOADED_IMAGE_PROTOCOL_GUID;
<span class="p_chunk">@@ -800,7 +799,6 @@</span> <span class="p_context"> struct boot_params *make_boot_params(struct efi_config *c)</span>
 	memset(boot_params, 0x0, 0x4000);
 
 	hdr = &amp;boot_params-&gt;hdr;
<span class="p_del">-	efi = &amp;boot_params-&gt;efi_info;</span>
 	bi = &amp;boot_params-&gt;apm_bios_info;
 
 	/* Copy the second sector to boot_params */
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 78d1e7467eae..55b4596ef688 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -41,10 +41,9 @@</span> <span class="p_context"> extern unsigned long asmlinkage efi_call_phys(void *, ...);</span>
 /*
  * Wrap all the virtual calls in a way that forces the parameters on the stack.
  */
<span class="p_del">-#define arch_efi_call_virt(f, args...)					\</span>
<span class="p_add">+#define arch_efi_call_virt(p, f, args...)				\</span>
 ({									\
<span class="p_del">-	((efi_##f##_t __attribute__((regparm(0)))*)			\</span>
<span class="p_del">-		efi.systab-&gt;runtime-&gt;f)(args);				\</span>
<span class="p_add">+	((efi_##f##_t __attribute__((regparm(0)))*) p-&gt;f)(args);	\</span>
 })
 
 #define efi_ioremap(addr, size, type, attr)	ioremap_cache(addr, size)
<span class="p_chunk">@@ -81,8 +80,8 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	}								\
 })
 
<span class="p_del">-#define arch_efi_call_virt(f, args...)					\</span>
<span class="p_del">-	efi_call((void *)efi.systab-&gt;runtime-&gt;f, args)			\</span>
<span class="p_add">+#define arch_efi_call_virt(p, f, args...)				\</span>
<span class="p_add">+	efi_call((void *)p-&gt;f, args)					\</span>
 
 #define arch_efi_call_virt_teardown()					\
 ({									\
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index f93545e7dc54..d898b334ff46 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -98,21 +98,6 @@</span> <span class="p_context"> static efi_status_t __init phys_efi_set_virtual_address_map(</span>
 	return status;
 }
 
<span class="p_del">-void efi_get_time(struct timespec *now)</span>
<span class="p_del">-{</span>
<span class="p_del">-	efi_status_t status;</span>
<span class="p_del">-	efi_time_t eft;</span>
<span class="p_del">-	efi_time_cap_t cap;</span>
<span class="p_del">-</span>
<span class="p_del">-	status = efi.get_time(&amp;eft, &amp;cap);</span>
<span class="p_del">-	if (status != EFI_SUCCESS)</span>
<span class="p_del">-		pr_err(&quot;Oops: efitime: can&#39;t read time!\n&quot;);</span>
<span class="p_del">-</span>
<span class="p_del">-	now-&gt;tv_sec = mktime(eft.year, eft.month, eft.day, eft.hour,</span>
<span class="p_del">-			     eft.minute, eft.second);</span>
<span class="p_del">-	now-&gt;tv_nsec = 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 void __init efi_find_mirror(void)
 {
 	efi_memory_desc_t *md;
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index b226b3f497f1..5cb4301c4dcf 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -466,22 +466,17 @@</span> <span class="p_context"> extern efi_status_t efi64_thunk(u32, ...);</span>
 #define efi_thunk(f, ...)						\
 ({									\
 	efi_status_t __s;						\
<span class="p_del">-	unsigned long flags;						\</span>
<span class="p_del">-	u32 func;							\</span>
<span class="p_add">+	unsigned long __flags;						\</span>
<span class="p_add">+	u32 __func;							\</span>
 									\
<span class="p_del">-	efi_sync_low_kernel_mappings();					\</span>
<span class="p_del">-	local_irq_save(flags);						\</span>
<span class="p_add">+	local_irq_save(__flags);					\</span>
<span class="p_add">+	arch_efi_call_virt_setup();					\</span>
 									\
<span class="p_del">-	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="p_del">-	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_add">+	__func = runtime_service32(f);					\</span>
<span class="p_add">+	__s = efi64_thunk(__func, __VA_ARGS__);				\</span>
 									\
<span class="p_del">-	func = runtime_service32(f);					\</span>
<span class="p_del">-	__s = efi64_thunk(func, __VA_ARGS__);			\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	write_cr3(efi_scratch.prev_cr3);				\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_del">-	local_irq_restore(flags);					\</span>
<span class="p_add">+	arch_efi_call_virt_teardown();					\</span>
<span class="p_add">+	local_irq_restore(__flags);					\</span>
 									\
 	__s;								\
 })
<span class="p_header">diff --git a/arch/x86/platform/uv/bios_uv.c b/arch/x86/platform/uv/bios_uv.c</span>
<span class="p_header">index 815fec6e05e2..66b2166ea4a1 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/bios_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/bios_uv.c</span>
<span class="p_chunk">@@ -40,8 +40,7 @@</span> <span class="p_context"> s64 uv_bios_call(enum uv_bios_cmd which, u64 a1, u64 a2, u64 a3, u64 a4, u64 a5)</span>
 		 */
 		return BIOS_STATUS_UNIMPLEMENTED;
 
<span class="p_del">-	ret = efi_call((void *)__va(tab-&gt;function), (u64)which,</span>
<span class="p_del">-			a1, a2, a3, a4, a5);</span>
<span class="p_add">+	ret = efi_call_virt_pointer(tab, function, (u64)which, a1, a2, a3, a4, a5);</span>
 	return ret;
 }
 EXPORT_SYMBOL_GPL(uv_bios_call);
<span class="p_header">diff --git a/drivers/firmware/efi/efibc.c b/drivers/firmware/efi/efibc.c</span>
<span class="p_header">index 8dd0c7085e59..503bbe2a9d49 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/efibc.c</span>
<span class="p_header">+++ b/drivers/firmware/efi/efibc.c</span>
<span class="p_chunk">@@ -37,13 +37,13 @@</span> <span class="p_context"> static int efibc_set_variable(const char *name, const char *value)</span>
 	size_t size = (strlen(value) + 1) * sizeof(efi_char16_t);
 
 	if (size &gt; sizeof(entry-&gt;var.Data)) {
<span class="p_del">-		pr_err(&quot;value is too large&quot;);</span>
<span class="p_add">+		pr_err(&quot;value is too large (%zu bytes) for &#39;%s&#39; EFI variable\n&quot;, size, name);</span>
 		return -EINVAL;
 	}
 
 	entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry) {
<span class="p_del">-		pr_err(&quot;failed to allocate efivar entry&quot;);</span>
<span class="p_add">+		pr_err(&quot;failed to allocate efivar entry for &#39;%s&#39; EFI variable\n&quot;, name);</span>
 		return -ENOMEM;
 	}
 
<span class="p_header">diff --git a/drivers/firmware/efi/runtime-wrappers.c b/drivers/firmware/efi/runtime-wrappers.c</span>
<span class="p_header">index 23bef6bb73ee..41958774cde3 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/runtime-wrappers.c</span>
<span class="p_header">+++ b/drivers/firmware/efi/runtime-wrappers.c</span>
<span class="p_chunk">@@ -22,7 +22,16 @@</span> <span class="p_context"></span>
 #include &lt;linux/stringify.h&gt;
 #include &lt;asm/efi.h&gt;
 
<span class="p_del">-static void efi_call_virt_check_flags(unsigned long flags, const char *call)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Wrap around the new efi_call_virt_generic() macros so that the</span>
<span class="p_add">+ * code doesn&#39;t get too cluttered:</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define efi_call_virt(f, args...)   \</span>
<span class="p_add">+	efi_call_virt_pointer(efi.systab-&gt;runtime, f, args)</span>
<span class="p_add">+#define __efi_call_virt(f, args...) \</span>
<span class="p_add">+	__efi_call_virt_pointer(efi.systab-&gt;runtime, f, args)</span>
<span class="p_add">+</span>
<span class="p_add">+void efi_call_virt_check_flags(unsigned long flags, const char *call)</span>
 {
 	unsigned long cur_flags, mismatch;
 
<span class="p_chunk">@@ -39,48 +48,6 @@</span> <span class="p_context"> static void efi_call_virt_check_flags(unsigned long flags, const char *call)</span>
 }
 
 /*
<span class="p_del">- * Arch code can implement the following three template macros, avoiding</span>
<span class="p_del">- * reptition for the void/non-void return cases of {__,}efi_call_virt:</span>
<span class="p_del">- *</span>
<span class="p_del">- *  * arch_efi_call_virt_setup</span>
<span class="p_del">- *</span>
<span class="p_del">- *    Sets up the environment for the call (e.g. switching page tables,</span>
<span class="p_del">- *    allowing kernel-mode use of floating point, if required).</span>
<span class="p_del">- *</span>
<span class="p_del">- *  * arch_efi_call_virt</span>
<span class="p_del">- *</span>
<span class="p_del">- *    Performs the call. The last expression in the macro must be the call</span>
<span class="p_del">- *    itself, allowing the logic to be shared by the void and non-void</span>
<span class="p_del">- *    cases.</span>
<span class="p_del">- *</span>
<span class="p_del">- *  * arch_efi_call_virt_teardown</span>
<span class="p_del">- *</span>
<span class="p_del">- *    Restores the usual kernel environment once the call has returned.</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-#define efi_call_virt(f, args...)					\</span>
<span class="p_del">-({									\</span>
<span class="p_del">-	efi_status_t __s;						\</span>
<span class="p_del">-	unsigned long flags;						\</span>
<span class="p_del">-	arch_efi_call_virt_setup();					\</span>
<span class="p_del">-	local_save_flags(flags);					\</span>
<span class="p_del">-	__s = arch_efi_call_virt(f, args);				\</span>
<span class="p_del">-	efi_call_virt_check_flags(flags, __stringify(f));		\</span>
<span class="p_del">-	arch_efi_call_virt_teardown();					\</span>
<span class="p_del">-	__s;								\</span>
<span class="p_del">-})</span>
<span class="p_del">-</span>
<span class="p_del">-#define __efi_call_virt(f, args...)					\</span>
<span class="p_del">-({									\</span>
<span class="p_del">-	unsigned long flags;						\</span>
<span class="p_del">-	arch_efi_call_virt_setup();					\</span>
<span class="p_del">-	local_save_flags(flags);					\</span>
<span class="p_del">-	arch_efi_call_virt(f, args);					\</span>
<span class="p_del">-	efi_call_virt_check_flags(flags, __stringify(f));		\</span>
<span class="p_del">-	arch_efi_call_virt_teardown();					\</span>
<span class="p_del">-})</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * According to section 7.1 of the UEFI spec, Runtime Services are not fully
  * reentrant, and there are particular combinations of calls that need to be
  * serialized. (source: UEFI Specification v2.4A)
<span class="p_header">diff --git a/include/linux/efi.h b/include/linux/efi.h</span>
<span class="p_header">index f196dd0b0f2f..7f80a75ee9e3 100644</span>
<span class="p_header">--- a/include/linux/efi.h</span>
<span class="p_header">+++ b/include/linux/efi.h</span>
<span class="p_chunk">@@ -536,116 +536,58 @@</span> <span class="p_context"> typedef efi_status_t efi_query_variable_store_t(u32 attributes,</span>
 void efi_native_runtime_setup(void);
 
 /*
<span class="p_del">- *  EFI Configuration Table and GUID definitions</span>
<span class="p_add">+ * EFI Configuration Table and GUID definitions</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * These are all defined in a single line to make them easier to</span>
<span class="p_add">+ * grep for and to see them at a glance - while still having a</span>
<span class="p_add">+ * similar structure to the definitions in the spec.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Here&#39;s how they are structured:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * GUID: 12345678-1234-1234-1234-123456789012</span>
<span class="p_add">+ * Spec:</span>
<span class="p_add">+ *      #define EFI_SOME_PROTOCOL_GUID \</span>
<span class="p_add">+ *        {0x12345678,0x1234,0x1234,\</span>
<span class="p_add">+ *          {0x12,0x34,0x12,0x34,0x56,0x78,0x90,0x12}}</span>
<span class="p_add">+ * Here:</span>
<span class="p_add">+ *	#define SOME_PROTOCOL_GUID		EFI_GUID(0x12345678, 0x1234, 0x1234,  0x12, 0x34, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12)</span>
<span class="p_add">+ *					^ tabs					    ^extra space</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Note that the &#39;extra space&#39; separates the values at the same place</span>
<span class="p_add">+ * where the UEFI SPEC breaks the line.</span>
  */
<span class="p_del">-#define NULL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x00000000, 0x0000, 0x0000, \</span>
<span class="p_del">-		 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)</span>
<span class="p_del">-</span>
<span class="p_del">-#define MPS_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0xeb9d2d2f, 0x2d88, 0x11d3, \</span>
<span class="p_del">-		 0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_del">-</span>
<span class="p_del">-#define ACPI_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0xeb9d2d30, 0x2d88, 0x11d3, \</span>
<span class="p_del">-		 0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_del">-</span>
<span class="p_del">-#define ACPI_20_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0x8868e871, 0xe4f1, 0x11d3, \</span>
<span class="p_del">-		 0xbc, 0x22, 0x00, 0x80, 0xc7, 0x3c, 0x88, 0x81)</span>
<span class="p_del">-</span>
<span class="p_del">-#define SMBIOS_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0xeb9d2d31, 0x2d88, 0x11d3, \</span>
<span class="p_del">-		 0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_del">-</span>
<span class="p_del">-#define SMBIOS3_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0xf2fd1544, 0x9794, 0x4a2c, \</span>
<span class="p_del">-		 0x99, 0x2e, 0xe5, 0xbb, 0xcf, 0x20, 0xe3, 0x94)</span>
<span class="p_del">-</span>
<span class="p_del">-#define SAL_SYSTEM_TABLE_GUID    \</span>
<span class="p_del">-	EFI_GUID(0xeb9d2d32, 0x2d88, 0x11d3, \</span>
<span class="p_del">-		 0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_del">-</span>
<span class="p_del">-#define HCDP_TABLE_GUID	\</span>
<span class="p_del">-	EFI_GUID(0xf951938d, 0x620b, 0x42ef, \</span>
<span class="p_del">-		 0x82, 0x79, 0xa8, 0x4b, 0x79, 0x61, 0x78, 0x98)</span>
<span class="p_del">-</span>
<span class="p_del">-#define UGA_IO_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x61a4d49e, 0x6f68, 0x4f1b, \</span>
<span class="p_del">-		 0xb9, 0x22, 0xa8, 0x6e, 0xed, 0x0b, 0x07, 0xa2)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_GLOBAL_VARIABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0x8be4df61, 0x93ca, 0x11d2, \</span>
<span class="p_del">-		 0xaa, 0x0d, 0x00, 0xe0, 0x98, 0x03, 0x2b, 0x8c)</span>
<span class="p_del">-</span>
<span class="p_del">-#define UV_SYSTEM_TABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0x3b13a7d4, 0x633e, 0x11dd, \</span>
<span class="p_del">-		 0x93, 0xec, 0xda, 0x25, 0x56, 0xd8, 0x95, 0x93)</span>
<span class="p_del">-</span>
<span class="p_del">-#define LINUX_EFI_CRASH_GUID \</span>
<span class="p_del">-	EFI_GUID(0xcfc8fc79, 0xbe2e, 0x4ddc, \</span>
<span class="p_del">-		 0x97, 0xf0, 0x9f, 0x98, 0xbf, 0xe2, 0x98, 0xa0)</span>
<span class="p_del">-</span>
<span class="p_del">-#define LOADED_IMAGE_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x5b1b31a1, 0x9562, 0x11d2, \</span>
<span class="p_del">-		 0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x9042a9de, 0x23dc, 0x4a38, \</span>
<span class="p_del">-		 0x96, 0xfb, 0x7a, 0xde, 0xd0, 0x80, 0x51, 0x6a)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_UGA_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x982c298b, 0xf4fa, 0x41cb, \</span>
<span class="p_del">-		 0xb8, 0x38, 0x77, 0xaa, 0x68, 0x8f, 0xb8, 0x39)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_PCI_IO_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x4cf5b200, 0x68b8, 0x4ca5, \</span>
<span class="p_del">-		 0x9e, 0xec, 0xb2, 0x3e, 0x3f, 0x50, 0x02, 0x9a)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_FILE_INFO_ID \</span>
<span class="p_del">-	EFI_GUID(0x9576e92, 0x6d3f, 0x11d2, \</span>
<span class="p_del">-		 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_SYSTEM_RESOURCE_TABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0xb122a263, 0x3661, 0x4f68, \</span>
<span class="p_del">-		 0x99, 0x29, 0x78, 0xf8, 0xb0, 0xd6, 0x21, 0x80)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_FILE_SYSTEM_GUID \</span>
<span class="p_del">-	EFI_GUID(0x964e5b22, 0x6459, 0x11d2, \</span>
<span class="p_del">-		 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_del">-</span>
<span class="p_del">-#define DEVICE_TREE_GUID \</span>
<span class="p_del">-	EFI_GUID(0xb1b621d5, 0xf19c, 0x41a5, \</span>
<span class="p_del">-		 0x83, 0x0b, 0xd9, 0x15, 0x2c, 0x69, 0xaa, 0xe0)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_PROPERTIES_TABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0x880aaca3, 0x4adc, 0x4a04, \</span>
<span class="p_del">-		 0x90, 0x79, 0xb7, 0x47, 0x34, 0x08, 0x25, 0xe5)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_RNG_PROTOCOL_GUID \</span>
<span class="p_del">-	EFI_GUID(0x3152bca5, 0xeade, 0x433d, \</span>
<span class="p_del">-		 0x86, 0x2e, 0xc0, 0x1c, 0xdc, 0x29, 0x1f, 0x44)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_MEMORY_ATTRIBUTES_TABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0xdcfa911d, 0x26eb, 0x469f, \</span>
<span class="p_del">-		 0xa2, 0x20, 0x38, 0xb7, 0xdc, 0x46, 0x12, 0x20)</span>
<span class="p_del">-</span>
<span class="p_del">-#define EFI_CONSOLE_OUT_DEVICE_GUID \</span>
<span class="p_del">-	EFI_GUID(0xd3b36f2c, 0xd551, 0x11d4, \</span>
<span class="p_del">-		 0x9a, 0x46, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_add">+#define NULL_GUID				EFI_GUID(0x00000000, 0x0000, 0x0000,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)</span>
<span class="p_add">+#define MPS_TABLE_GUID				EFI_GUID(0xeb9d2d2f, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_add">+#define ACPI_TABLE_GUID				EFI_GUID(0xeb9d2d30, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_add">+#define ACPI_20_TABLE_GUID			EFI_GUID(0x8868e871, 0xe4f1, 0x11d3,  0xbc, 0x22, 0x00, 0x80, 0xc7, 0x3c, 0x88, 0x81)</span>
<span class="p_add">+#define SMBIOS_TABLE_GUID			EFI_GUID(0xeb9d2d31, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_add">+#define SMBIOS3_TABLE_GUID			EFI_GUID(0xf2fd1544, 0x9794, 0x4a2c,  0x99, 0x2e, 0xe5, 0xbb, 0xcf, 0x20, 0xe3, 0x94)</span>
<span class="p_add">+#define SAL_SYSTEM_TABLE_GUID			EFI_GUID(0xeb9d2d32, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
<span class="p_add">+#define HCDP_TABLE_GUID				EFI_GUID(0xf951938d, 0x620b, 0x42ef,  0x82, 0x79, 0xa8, 0x4b, 0x79, 0x61, 0x78, 0x98)</span>
<span class="p_add">+#define UGA_IO_PROTOCOL_GUID			EFI_GUID(0x61a4d49e, 0x6f68, 0x4f1b,  0xb9, 0x22, 0xa8, 0x6e, 0xed, 0x0b, 0x07, 0xa2)</span>
<span class="p_add">+#define EFI_GLOBAL_VARIABLE_GUID		EFI_GUID(0x8be4df61, 0x93ca, 0x11d2,  0xaa, 0x0d, 0x00, 0xe0, 0x98, 0x03, 0x2b, 0x8c)</span>
<span class="p_add">+#define UV_SYSTEM_TABLE_GUID			EFI_GUID(0x3b13a7d4, 0x633e, 0x11dd,  0x93, 0xec, 0xda, 0x25, 0x56, 0xd8, 0x95, 0x93)</span>
<span class="p_add">+#define LINUX_EFI_CRASH_GUID			EFI_GUID(0xcfc8fc79, 0xbe2e, 0x4ddc,  0x97, 0xf0, 0x9f, 0x98, 0xbf, 0xe2, 0x98, 0xa0)</span>
<span class="p_add">+#define LOADED_IMAGE_PROTOCOL_GUID		EFI_GUID(0x5b1b31a1, 0x9562, 0x11d2,  0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_add">+#define EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID	EFI_GUID(0x9042a9de, 0x23dc, 0x4a38,  0x96, 0xfb, 0x7a, 0xde, 0xd0, 0x80, 0x51, 0x6a)</span>
<span class="p_add">+#define EFI_UGA_PROTOCOL_GUID			EFI_GUID(0x982c298b, 0xf4fa, 0x41cb,  0xb8, 0x38, 0x77, 0xaa, 0x68, 0x8f, 0xb8, 0x39)</span>
<span class="p_add">+#define EFI_PCI_IO_PROTOCOL_GUID		EFI_GUID(0x4cf5b200, 0x68b8, 0x4ca5,  0x9e, 0xec, 0xb2, 0x3e, 0x3f, 0x50, 0x02, 0x9a)</span>
<span class="p_add">+#define EFI_FILE_INFO_ID			EFI_GUID(0x09576e92, 0x6d3f, 0x11d2,  0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_add">+#define EFI_SYSTEM_RESOURCE_TABLE_GUID		EFI_GUID(0xb122a263, 0x3661, 0x4f68,  0x99, 0x29, 0x78, 0xf8, 0xb0, 0xd6, 0x21, 0x80)</span>
<span class="p_add">+#define EFI_FILE_SYSTEM_GUID			EFI_GUID(0x964e5b22, 0x6459, 0x11d2,  0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)</span>
<span class="p_add">+#define DEVICE_TREE_GUID			EFI_GUID(0xb1b621d5, 0xf19c, 0x41a5,  0x83, 0x0b, 0xd9, 0x15, 0x2c, 0x69, 0xaa, 0xe0)</span>
<span class="p_add">+#define EFI_PROPERTIES_TABLE_GUID		EFI_GUID(0x880aaca3, 0x4adc, 0x4a04,  0x90, 0x79, 0xb7, 0x47, 0x34, 0x08, 0x25, 0xe5)</span>
<span class="p_add">+#define EFI_RNG_PROTOCOL_GUID			EFI_GUID(0x3152bca5, 0xeade, 0x433d,  0x86, 0x2e, 0xc0, 0x1c, 0xdc, 0x29, 0x1f, 0x44)</span>
<span class="p_add">+#define EFI_MEMORY_ATTRIBUTES_TABLE_GUID	EFI_GUID(0xdcfa911d, 0x26eb, 0x469f,  0xa2, 0x20, 0x38, 0xb7, 0xdc, 0x46, 0x12, 0x20)</span>
<span class="p_add">+#define EFI_CONSOLE_OUT_DEVICE_GUID		EFI_GUID(0xd3b36f2c, 0xd551, 0x11d4,  0x9a, 0x46, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)</span>
 
 /*
  * This GUID is used to pass to the kernel proper the struct screen_info
  * structure that was populated by the stub based on the GOP protocol instance
  * associated with ConOut
  */
<span class="p_del">-#define LINUX_EFI_ARM_SCREEN_INFO_TABLE_GUID \</span>
<span class="p_del">-	EFI_GUID(0xe03fc20a, 0x85dc, 0x406e, \</span>
<span class="p_del">-		 0xb9, 0xe, 0x4a, 0xb5, 0x02, 0x37, 0x1d, 0x95)</span>
<span class="p_del">-</span>
<span class="p_del">-#define LINUX_EFI_LOADER_ENTRY_GUID \</span>
<span class="p_del">-	EFI_GUID(0x4a67b082, 0x0a4c, 0x41cf, \</span>
<span class="p_del">-		 0xb6, 0xc7, 0x44, 0x0b, 0x29, 0xbb, 0x8c, 0x4f)</span>
<span class="p_add">+#define LINUX_EFI_ARM_SCREEN_INFO_TABLE_GUID	EFI_GUID(0xe03fc20a, 0x85dc, 0x406e,  0xb9, 0x0e, 0x4a, 0xb5, 0x02, 0x37, 0x1d, 0x95)</span>
<span class="p_add">+#define LINUX_EFI_LOADER_ENTRY_GUID		EFI_GUID(0x4a67b082, 0x0a4c, 0x41cf,  0xb6, 0xc7, 0x44, 0x0b, 0x29, 0xbb, 0x8c, 0x4f)</span>
 
 typedef struct {
 	efi_guid_t guid;
<span class="p_chunk">@@ -975,7 +917,6 @@</span> <span class="p_context"> extern u64 efi_mem_desc_end(efi_memory_desc_t *md);</span>
 extern int efi_mem_desc_lookup(u64 phys_addr, efi_memory_desc_t *out_md);
 extern void efi_initialize_iomem_resources(struct resource *code_resource,
 		struct resource *data_resource, struct resource *bss_resource);
<span class="p_del">-extern void efi_get_time(struct timespec *now);</span>
 extern void efi_reserve_boot_services(void);
 extern int efi_get_fdt_params(struct efi_fdt_params *params);
 extern struct kobject *efi_kobj;
<span class="p_chunk">@@ -1465,4 +1406,55 @@</span> <span class="p_context"> efi_status_t efi_setup_gop(efi_system_table_t *sys_table_arg,</span>
 			   unsigned long size);
 
 bool efi_runtime_disabled(void);
<span class="p_add">+extern void efi_call_virt_check_flags(unsigned long flags, const char *call);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Arch code can implement the following three template macros, avoiding</span>
<span class="p_add">+ * reptition for the void/non-void return cases of {__,}efi_call_virt():</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  * arch_efi_call_virt_setup()</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *    Sets up the environment for the call (e.g. switching page tables,</span>
<span class="p_add">+ *    allowing kernel-mode use of floating point, if required).</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  * arch_efi_call_virt()</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *    Performs the call. The last expression in the macro must be the call</span>
<span class="p_add">+ *    itself, allowing the logic to be shared by the void and non-void</span>
<span class="p_add">+ *    cases.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  * arch_efi_call_virt_teardown()</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *    Restores the usual kernel environment once the call has returned.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define efi_call_virt_pointer(p, f, args...)				\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	efi_status_t __s;						\</span>
<span class="p_add">+	unsigned long __flags;						\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	arch_efi_call_virt_setup();					\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	local_save_flags(__flags);					\</span>
<span class="p_add">+	__s = arch_efi_call_virt(p, f, args);				\</span>
<span class="p_add">+	efi_call_virt_check_flags(__flags, __stringify(f));		\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	arch_efi_call_virt_teardown();					\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	__s;								\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+#define __efi_call_virt_pointer(p, f, args...)				\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	unsigned long __flags;						\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	arch_efi_call_virt_setup();					\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	local_save_flags(__flags);					\</span>
<span class="p_add">+	arch_efi_call_virt(p, f, args);					\</span>
<span class="p_add">+	efi_call_virt_check_flags(__flags, __stringify(f));		\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	arch_efi_call_virt_teardown();					\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
 #endif /* _LINUX_EFI_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



