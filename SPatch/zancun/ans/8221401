
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>+ kernel-locking-lockdepc-make-lockdep-initialize-itself-on-demand.patch added to -mm tree - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    + kernel-locking-lockdepc-make-lockdep-initialize-itself-on-demand.patch added to -mm tree</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 4, 2016, 1:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;56B34E87.1030604@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8221401/mbox/"
   >mbox</a>
|
   <a href="/patch/8221401/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8221401/">/patch/8221401/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 60D1BBEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Feb 2016 13:13:10 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 41679201B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Feb 2016 13:13:09 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0FB04202C8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Feb 2016 13:13:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S965828AbcBDNNE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 4 Feb 2016 08:13:04 -0500
Received: from mx2.parallels.com ([199.115.105.18]:56444 &quot;EHLO
	mx2.parallels.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S964999AbcBDNM6 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 4 Feb 2016 08:12:58 -0500
Received: from [199.115.105.250] (helo=mail.odin.com)
	by mx2.parallels.com with esmtps
	(TLSv1.2:ECDHE-RSA-AES256-SHA384:256) (Exim 4.86)
	(envelope-from &lt;aryabinin@virtuozzo.com&gt;)
	id 1aRJiB-0000r0-92; Thu, 04 Feb 2016 05:12:39 -0800
Received: from [10.30.25.228] (10.30.25.228) by US-EXCH.sw.swsoft.com
	(10.255.249.47) with Microsoft SMTP Server (TLS) id 15.0.1130.7;
	Thu, 4 Feb 2016 05:12:34 -0800
Subject: Re: +
	kernel-locking-lockdepc-make-lockdep-initialize-itself-on-demand.patch
	added to -mm tree
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, &lt;krinkin.m.u@gmail.com&gt;,
	&lt;mingo@elte.hu&gt;, &lt;peterz@infradead.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;
References: &lt;56b11d2d.vVw1kB2la7Y+70xF%akpm@linux-foundation.org&gt;
	&lt;20160203074430.GA32652@gmail.com&gt;
	&lt;20160203085111.fc3f2631.akpm@linux-foundation.org&gt;
	&lt;20160203124009.0325b983b74fa15082f13f4d@linux-foundation.org&gt;
	&lt;20160203134403.aa944de2a3863b9a4beccf63@linux-foundation.org&gt;
From: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Message-ID: &lt;56B34E87.1030604@virtuozzo.com&gt;
Date: Thu, 4 Feb 2016 16:13:43 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101
	Thunderbird/38.5.0
MIME-Version: 1.0
In-Reply-To: &lt;20160203134403.aa944de2a3863b9a4beccf63@linux-foundation.org&gt;
Content-Type: text/plain; charset=&quot;windows-1252&quot;
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: US-EXCH2.sw.swsoft.com (10.255.249.46) To
	US-EXCH.sw.swsoft.com (10.255.249.47)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.4 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - Feb. 4, 2016, 1:13 p.m.</div>
<pre class="content">
On 02/04/2016 12:44 AM, Andrew Morton wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; Probably lockdep_init() and lockdep_initialized can be done away with now.</span>
<span class="quote">&gt; </span>

Yup, it probably should be folded into your patch, or we could hold this off for 4.6.
<span class="from">

From: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;                                                                                                                                                                     </span>
Subject: kernel/lockdep: eliminate lockdep_init()

Lockdep is initialized at compile time now. Get rid of lockdep_init().
<span class="signed-off-by">
Signed-off-by: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
---
 arch/c6x/kernel/setup.c                       |  2 -
 arch/microblaze/kernel/setup.c                |  2 -
 arch/powerpc/kernel/setup_32.c                |  2 -
 arch/powerpc/kernel/setup_64.c                |  3 --
 arch/s390/kernel/early.c                      |  1 -
 arch/sparc/kernel/head_64.S                   |  8 ----
 arch/x86/lguest/boot.c                        |  6 ---
 include/linux/lockdep.h                       |  2 -
 init/main.c                                   |  5 ---
 kernel/locking/lockdep.c                      | 59 ---------------------------
 tools/lib/lockdep/common.c                    |  5 ---
 tools/lib/lockdep/include/liblockdep/common.h |  1 -
 tools/lib/lockdep/preload.c                   |  2 -
 13 files changed, 98 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - Feb. 8, 2016, 9:33 a.m.</div>
<pre class="content">
On Thu, 2016-02-04 at 16:13 +0300, Andrey Ryabinin wrote:
<span class="quote">&gt; On 02/04/2016 12:44 AM, Andrew Morton wrote:</span>
<span class="quote">&gt; &gt; Probably lockdep_init() and lockdep_initialized can be done away with now.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yup, it probably should be folded into your patch, or we could hold this off for 4.6.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; From: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Subject: kernel/lockdep: eliminate lockdep_init()</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Lockdep is initialized at compile time now. Get rid of lockdep_init().</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">
&gt; diff --git a/arch/powerpc/kernel/setup_32.c b/arch/powerpc/kernel/setup_32.c</span>
<span class="quote">&gt; index ad8c9db..d544fa3 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/kernel/setup_32.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/kernel/setup_32.c</span>
<span class="quote">&gt; @@ -114,8 +114,6 @@ extern unsigned int memset_nocache_branch; /* Insn to be replaced by NOP */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  notrace void __init machine_init(u64 dt_ptr)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	lockdep_init();</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/* Enable early debugging if any specified (see udbg.h) */</span>
<span class="quote">&gt;  	udbg_early_init();</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c</span>
<span class="quote">&gt; index 5c03a6a..f98be83 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/kernel/setup_64.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/kernel/setup_64.c</span>
<span class="quote">&gt; @@ -255,9 +255,6 @@ void __init early_setup(unsigned long dt_ptr)</span>
<span class="quote">&gt;  	setup_paca(&amp;boot_paca);</span>
<span class="quote">&gt;  	fixup_boot_paca();</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	/* Initialize lockdep early or else spinlocks will blow */</span>
<span class="quote">&gt; -	lockdep_init();</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/* -------- printk is now safe to use ------- */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	/* Enable early debugging if any specified (see udbg.h) */</span>

Yes please. That has been a royal pain over the years and is still fragile,
very happy to see the back of it.
<span class="acked-by">
Acked-by: Michael Ellerman &lt;mpe@ellerman.id.au&gt; (powerpc)</span>

cheers
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Feb. 9, 2016, 11 a.m.</div>
<pre class="content">
* Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt; wrote:
<span class="quote">
&gt; On 02/04/2016 12:44 AM, Andrew Morton wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Probably lockdep_init() and lockdep_initialized can be done away with now.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yup, it probably should be folded into your patch, or we could hold this off for 4.6.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; From: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;                                                                                                                                                                     </span>
<span class="quote">&gt; Subject: kernel/lockdep: eliminate lockdep_init()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Lockdep is initialized at compile time now. Get rid of lockdep_init().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/c6x/kernel/setup.c                       |  2 -</span>
<span class="quote">&gt;  arch/microblaze/kernel/setup.c                |  2 -</span>
<span class="quote">&gt;  arch/powerpc/kernel/setup_32.c                |  2 -</span>
<span class="quote">&gt;  arch/powerpc/kernel/setup_64.c                |  3 --</span>
<span class="quote">&gt;  arch/s390/kernel/early.c                      |  1 -</span>
<span class="quote">&gt;  arch/sparc/kernel/head_64.S                   |  8 ----</span>
<span class="quote">&gt;  arch/x86/lguest/boot.c                        |  6 ---</span>
<span class="quote">&gt;  include/linux/lockdep.h                       |  2 -</span>
<span class="quote">&gt;  init/main.c                                   |  5 ---</span>
<span class="quote">&gt;  kernel/locking/lockdep.c                      | 59 ---------------------------</span>
<span class="quote">&gt;  tools/lib/lockdep/common.c                    |  5 ---</span>
<span class="quote">&gt;  tools/lib/lockdep/include/liblockdep/common.h |  1 -</span>
<span class="quote">&gt;  tools/lib/lockdep/preload.c                   |  2 -</span>
<span class="quote">&gt;  13 files changed, 98 deletions(-)</span>

Very nice! Should have done this from day one on ...

Thanks,

	Ingo
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/c6x/kernel/setup.c b/arch/c6x/kernel/setup.c</span>
<span class="p_header">index 72e17f7..786e36e 100644</span>
<span class="p_header">--- a/arch/c6x/kernel/setup.c</span>
<span class="p_header">+++ b/arch/c6x/kernel/setup.c</span>
<span class="p_chunk">@@ -281,8 +281,6 @@</span> <span class="p_context"> notrace void __init machine_init(unsigned long dt_ptr)</span>
 	 */
 	set_ist(_vectors_start);
 
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 	/*
 	 * dtb is passed in from bootloader.
 	 * fdt is linked in blob.
<span class="p_header">diff --git a/arch/microblaze/kernel/setup.c b/arch/microblaze/kernel/setup.c</span>
<span class="p_header">index 89a2a93..f31ebb5 100644</span>
<span class="p_header">--- a/arch/microblaze/kernel/setup.c</span>
<span class="p_header">+++ b/arch/microblaze/kernel/setup.c</span>
<span class="p_chunk">@@ -130,8 +130,6 @@</span> <span class="p_context"> void __init machine_early_init(const char *cmdline, unsigned int ram,</span>
 	memset(__bss_start, 0, __bss_stop-__bss_start);
 	memset(_ssbss, 0, _esbss-_ssbss);
 
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 /* initialize device tree for usage in early_printk */
 	early_init_devtree(_fdt_start);
 
<span class="p_header">diff --git a/arch/powerpc/kernel/setup_32.c b/arch/powerpc/kernel/setup_32.c</span>
<span class="p_header">index ad8c9db..d544fa3 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/setup_32.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/setup_32.c</span>
<span class="p_chunk">@@ -114,8 +114,6 @@</span> <span class="p_context"> extern unsigned int memset_nocache_branch; /* Insn to be replaced by NOP */</span>
 
 notrace void __init machine_init(u64 dt_ptr)
 {
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 	/* Enable early debugging if any specified (see udbg.h) */
 	udbg_early_init();
 
<span class="p_header">diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c</span>
<span class="p_header">index 5c03a6a..f98be83 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/setup_64.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/setup_64.c</span>
<span class="p_chunk">@@ -255,9 +255,6 @@</span> <span class="p_context"> void __init early_setup(unsigned long dt_ptr)</span>
 	setup_paca(&amp;boot_paca);
 	fixup_boot_paca();
 
<span class="p_del">-	/* Initialize lockdep early or else spinlocks will blow */</span>
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 	/* -------- printk is now safe to use ------- */
 
 	/* Enable early debugging if any specified (see udbg.h) */
<span class="p_header">diff --git a/arch/s390/kernel/early.c b/arch/s390/kernel/early.c</span>
<span class="p_header">index c55576b..a0684de 100644</span>
<span class="p_header">--- a/arch/s390/kernel/early.c</span>
<span class="p_header">+++ b/arch/s390/kernel/early.c</span>
<span class="p_chunk">@@ -448,7 +448,6 @@</span> <span class="p_context"> void __init startup_init(void)</span>
 	rescue_initrd();
 	clear_bss_section();
 	init_kernel_storage_key();
<span class="p_del">-	lockdep_init();</span>
 	lockdep_off();
 	setup_lowcore_early();
 	setup_facility_list();
<span class="p_header">diff --git a/arch/sparc/kernel/head_64.S b/arch/sparc/kernel/head_64.S</span>
<span class="p_header">index f2d30ca..cd1f592 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/head_64.S</span>
<span class="p_chunk">@@ -696,14 +696,6 @@</span> <span class="p_context"> tlb_fixup_done:</span>
 	call	__bzero
 	 sub	%o1, %o0, %o1
 
<span class="p_del">-#ifdef CONFIG_LOCKDEP</span>
<span class="p_del">-	/* We have this call this super early, as even prom_init can grab</span>
<span class="p_del">-	 * spinlocks and thus call into the lockdep code.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	call	lockdep_init</span>
<span class="p_del">-	 nop</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 	call	prom_init
 	 mov	%l7, %o0			! OpenPROM cif handler
 
<span class="p_header">diff --git a/arch/x86/lguest/boot.c b/arch/x86/lguest/boot.c</span>
<span class="p_header">index 4ba229a..f56cc41 100644</span>
<span class="p_header">--- a/arch/x86/lguest/boot.c</span>
<span class="p_header">+++ b/arch/x86/lguest/boot.c</span>
<span class="p_chunk">@@ -1520,12 +1520,6 @@</span> <span class="p_context"> __init void lguest_init(void)</span>
 	 */
 	reserve_top_address(lguest_data.reserve_mem);
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * If we don&#39;t initialize the lock dependency checker now, it crashes</span>
<span class="p_del">-	 * atomic_notifier_chain_register, then paravirt_disable_iospace.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 	/* Hook in our special panic hypercall code. */
 	atomic_notifier_chain_register(&amp;panic_notifier_list, &amp;paniced);
 
<span class="p_header">diff --git a/include/linux/lockdep.h b/include/linux/lockdep.h</span>
<span class="p_header">index 4dca42f..d026b19 100644</span>
<span class="p_header">--- a/include/linux/lockdep.h</span>
<span class="p_header">+++ b/include/linux/lockdep.h</span>
<span class="p_chunk">@@ -261,7 +261,6 @@</span> <span class="p_context"> struct held_lock {</span>
 /*
  * Initialization, self-test and debugging-output methods:
  */
<span class="p_del">-extern void lockdep_init(void);</span>
 extern void lockdep_info(void);
 extern void lockdep_reset(void);
 extern void lockdep_reset_lock(struct lockdep_map *lock);
<span class="p_chunk">@@ -392,7 +391,6 @@</span> <span class="p_context"> static inline void lockdep_on(void)</span>
 # define lockdep_set_current_reclaim_state(g)	do { } while (0)
 # define lockdep_clear_current_reclaim_state()	do { } while (0)
 # define lockdep_trace_alloc(g)			do { } while (0)
<span class="p_del">-# define lockdep_init()				do { } while (0)</span>
 # define lockdep_info()				do { } while (0)
 # define lockdep_init_map(lock, name, key, sub) \
 		do { (void)(name); (void)(key); } while (0)
<span class="p_header">diff --git a/init/main.c b/init/main.c</span>
<span class="p_header">index 58c9e37..b3008bc 100644</span>
<span class="p_header">--- a/init/main.c</span>
<span class="p_header">+++ b/init/main.c</span>
<span class="p_chunk">@@ -499,11 +499,6 @@</span> <span class="p_context"> asmlinkage __visible void __init start_kernel(void)</span>
 	char *command_line;
 	char *after_dashes;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Need to run as early as possible, to initialize the</span>
<span class="p_del">-	 * lockdep hash:</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	lockdep_init();</span>
 	set_task_stack_end_magic(&amp;init_task);
 	smp_setup_processor_id();
 	debug_objects_early_init();
<span class="p_header">diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c</span>
<span class="p_header">index 92e4dc6..c873a51 100644</span>
<span class="p_header">--- a/kernel/locking/lockdep.c</span>
<span class="p_header">+++ b/kernel/locking/lockdep.c</span>
<span class="p_chunk">@@ -123,8 +123,6 @@</span> <span class="p_context"> static inline int debug_locks_off_graph_unlock(void)</span>
 	return ret;
 }
 
<span class="p_del">-static int lockdep_initialized;</span>
<span class="p_del">-</span>
 unsigned long nr_list_entries;
 static struct lock_list list_entries[MAX_LOCKDEP_ENTRIES];
 
<span class="p_chunk">@@ -434,19 +432,6 @@</span> <span class="p_context"> unsigned int max_lockdep_depth;</span>
 
 #ifdef CONFIG_DEBUG_LOCKDEP
 /*
<span class="p_del">- * We cannot printk in early bootup code. Not even early_printk()</span>
<span class="p_del">- * might work. So we mark any initialization errors and printk</span>
<span class="p_del">- * about it later on, in lockdep_info().</span>
<span class="p_del">- */</span>
<span class="p_del">-static int lockdep_init_error;</span>
<span class="p_del">-static const char *lock_init_error;</span>
<span class="p_del">-static unsigned long lockdep_init_trace_data[20];</span>
<span class="p_del">-static struct stack_trace lockdep_init_trace = {</span>
<span class="p_del">-	.max_entries = ARRAY_SIZE(lockdep_init_trace_data),</span>
<span class="p_del">-	.entries = lockdep_init_trace_data,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * Various lockdep statistics:
  */
 DEFINE_PER_CPU(struct lockdep_stats, lockdep_stats);
<span class="p_chunk">@@ -669,20 +654,6 @@</span> <span class="p_context"> look_up_lock_class(struct lockdep_map *lock, unsigned int subclass)</span>
 	struct hlist_head *hash_head;
 	struct lock_class *class;
 
<span class="p_del">-#ifdef CONFIG_DEBUG_LOCKDEP</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * If the architecture calls into lockdep before initializing</span>
<span class="p_del">-	 * the hashes then we&#39;ll warn about it later. (we cannot printk</span>
<span class="p_del">-	 * right now)</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (unlikely(!lockdep_initialized)) {</span>
<span class="p_del">-		lockdep_init();</span>
<span class="p_del">-		lockdep_init_error = 1;</span>
<span class="p_del">-		lock_init_error = lock-&gt;name;</span>
<span class="p_del">-		save_stack_trace(&amp;lockdep_init_trace);</span>
<span class="p_del">-	}</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 	if (unlikely(subclass &gt;= MAX_LOCKDEP_SUBCLASSES)) {
 		debug_locks_off();
 		printk(KERN_ERR
<span class="p_chunk">@@ -4013,28 +3984,6 @@</span> <span class="p_context"> out_restore:</span>
 	raw_local_irq_restore(flags);
 }
 
<span class="p_del">-void lockdep_init(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int i;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Some architectures have their own start_kernel()</span>
<span class="p_del">-	 * code which calls lockdep_init(), while we also</span>
<span class="p_del">-	 * call lockdep_init() from the start_kernel() itself,</span>
<span class="p_del">-	 * and we want to initialize the hashes only once:</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (lockdep_initialized)</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	for (i = 0; i &lt; CLASSHASH_SIZE; i++)</span>
<span class="p_del">-		INIT_HLIST_HEAD(classhash_table + i);</span>
<span class="p_del">-</span>
<span class="p_del">-	for (i = 0; i &lt; CHAINHASH_SIZE; i++)</span>
<span class="p_del">-		INIT_HLIST_HEAD(chainhash_table + i);</span>
<span class="p_del">-</span>
<span class="p_del">-	lockdep_initialized = 1;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 void __init lockdep_info(void)
 {
 	printk(&quot;Lock dependency validator: Copyright (c) 2006 Red Hat, Inc., Ingo Molnar\n&quot;);
<span class="p_chunk">@@ -4061,14 +4010,6 @@</span> <span class="p_context"> void __init lockdep_info(void)</span>
 
 	printk(&quot; per task-struct memory footprint: %lu bytes\n&quot;,
 		sizeof(struct held_lock) * MAX_LOCK_DEPTH);
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_DEBUG_LOCKDEP</span>
<span class="p_del">-	if (lockdep_init_error) {</span>
<span class="p_del">-		printk(&quot;WARNING: lockdep init error: lock &#39;%s&#39; was acquired before lockdep_init().\n&quot;, lock_init_error);</span>
<span class="p_del">-		printk(&quot;Call stack leading to lockdep invocation was:\n&quot;);</span>
<span class="p_del">-		print_stack_trace(&amp;lockdep_init_trace, 0);</span>
<span class="p_del">-	}</span>
<span class="p_del">-#endif</span>
 }
 
 static void
<span class="p_header">diff --git a/tools/lib/lockdep/common.c b/tools/lib/lockdep/common.c</span>
<span class="p_header">index 9be6633..d1c89cc 100644</span>
<span class="p_header">--- a/tools/lib/lockdep/common.c</span>
<span class="p_header">+++ b/tools/lib/lockdep/common.c</span>
<span class="p_chunk">@@ -11,11 +11,6 @@</span> <span class="p_context"> static __thread struct task_struct current_obj;</span>
 bool debug_locks = true;
 bool debug_locks_silent;
 
<span class="p_del">-__attribute__((constructor)) static void liblockdep_init(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 __attribute__((destructor)) static void liblockdep_exit(void)
 {
 	debug_check_no_locks_held();
<span class="p_header">diff --git a/tools/lib/lockdep/include/liblockdep/common.h b/tools/lib/lockdep/include/liblockdep/common.h</span>
<span class="p_header">index a60c14b..6e66277 100644</span>
<span class="p_header">--- a/tools/lib/lockdep/include/liblockdep/common.h</span>
<span class="p_header">+++ b/tools/lib/lockdep/include/liblockdep/common.h</span>
<span class="p_chunk">@@ -44,7 +44,6 @@</span> <span class="p_context"> void lock_acquire(struct lockdep_map *lock, unsigned int subclass,</span>
 void lock_release(struct lockdep_map *lock, int nested,
 			unsigned long ip);
 extern void debug_check_no_locks_freed(const void *from, unsigned long len);
<span class="p_del">-extern void lockdep_init(void);</span>
 
 #define STATIC_LOCKDEP_MAP_INIT(_name, _key) \
 	{ .name = (_name), .key = (void *)(_key), }
<span class="p_header">diff --git a/tools/lib/lockdep/preload.c b/tools/lib/lockdep/preload.c</span>
<span class="p_header">index 21cdf86..5284484 100644</span>
<span class="p_header">--- a/tools/lib/lockdep/preload.c</span>
<span class="p_header">+++ b/tools/lib/lockdep/preload.c</span>
<span class="p_chunk">@@ -439,7 +439,5 @@</span> <span class="p_context"> __attribute__((constructor)) static void init_preload(void)</span>
 	ll_pthread_rwlock_unlock = dlsym(RTLD_NEXT, &quot;pthread_rwlock_unlock&quot;);
 #endif
 
<span class="p_del">-	lockdep_init();</span>
<span class="p_del">-</span>
 	__init_state = done;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



