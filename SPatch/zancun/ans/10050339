
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[01/11] Initialize the mapping of KASan shadow memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [01/11] Initialize the mapping of KASan shadow memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176771">Abbott Liu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 9, 2017, 7:46 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;B8AC3E80E903784988AB3003E3E97330C0063172@dggemm510-mbs.china.huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10050339/mbox/"
   >mbox</a>
|
   <a href="/patch/10050339/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10050339/">/patch/10050339/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	63BBD601EA for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Nov 2017 07:50:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 539402AB68
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Nov 2017 07:50:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 46F692AB6C; Thu,  9 Nov 2017 07:50:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ABF4C2AB68
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Nov 2017 07:49:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752985AbdKIHt5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 9 Nov 2017 02:49:57 -0500
Received: from szxga03-in.huawei.com ([45.249.212.189]:13353 &quot;EHLO
	szxga03-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751751AbdKIHtz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 9 Nov 2017 02:49:55 -0500
Received: from 172.30.72.53 (EHLO DGGEMM405-HUB.china.huawei.com)
	([172.30.72.53])
	by dggrg03-dlp.huawei.com (MOS 4.4.6-GA FastPath queued)
	with ESMTP id AYK58728; Thu, 09 Nov 2017 15:46:51 +0800 (CST)
Received: from DGGEMM510-MBS.china.huawei.com ([169.254.11.85]) by
	DGGEMM405-HUB.china.huawei.com ([10.3.20.213]) with mapi id
	14.03.0361.001; Thu, 9 Nov 2017 15:46:39 +0800
From: &quot;Liuwenliang (Abbott Liu)&quot; &lt;liuwenliang@huawei.com&gt;
To: Marc Zyngier &lt;marc.zyngier@arm.com&gt;,
	&quot;linux@armlinux.org.uk&quot; &lt;linux@armlinux.org.uk&gt;,
	&quot;aryabinin@virtuozzo.com&quot; &lt;aryabinin@virtuozzo.com&gt;,
	&quot;afzal.mohd.ma@gmail.com&quot; &lt;afzal.mohd.ma@gmail.com&gt;,
	&quot;f.fainelli@gmail.com&quot; &lt;f.fainelli@gmail.com&gt;,
	&quot;labbott@redhat.com&quot; &lt;labbott@redhat.com&gt;,
	&quot;kirill.shutemov@linux.intel.com&quot; &lt;kirill.shutemov@linux.intel.com&gt;, 
	&quot;mhocko@suse.com&quot; &lt;mhocko@suse.com&gt;,
	&quot;cdall@linaro.org&quot; &lt;cdall@linaro.org&gt;,
	&quot;catalin.marinas@arm.com&quot; &lt;catalin.marinas@arm.com&gt;,
	&quot;akpm@linux-foundation.org&quot; &lt;akpm@linux-foundation.org&gt;,
	&quot;mawilcox@microsoft.com&quot; &lt;mawilcox@microsoft.com&gt;,
	&quot;tglx@linutronix.de&quot; &lt;tglx@linutronix.de&gt;,
	&quot;thgarnie@google.com&quot; &lt;thgarnie@google.com&gt;,
	&quot;keescook@chromium.org&quot; &lt;keescook@chromium.org&gt;,
	&quot;arnd@arndb.de&quot; &lt;arnd@arndb.de&gt;,
	&quot;vladimir.murzin@arm.com&quot; &lt;vladimir.murzin@arm.com&gt;,
	&quot;tixy@linaro.org&quot; &lt;tixy@linaro.org&gt;,
	&quot;ard.biesheuvel@linaro.org&quot; &lt;ard.biesheuvel@linaro.org&gt;,
	&quot;robin.murphy@arm.com&quot; &lt;robin.murphy@arm.com&gt;,
	&quot;mingo@kernel.org&quot; &lt;mingo@kernel.org&gt;,
	&quot;grygorii.strashko@linaro.org&quot; &lt;grygorii.strashko@linaro.org&gt;
CC: &quot;glider@google.com&quot; &lt;glider@google.com&gt;,
	&quot;dvyukov@google.com&quot; &lt;dvyukov@google.com&gt;,
	&quot;opendmb@gmail.com&quot; &lt;opendmb@gmail.com&gt;,
	&quot;linux-arm-kernel@lists.infradead.org&quot; 
	&lt;linux-arm-kernel@lists.infradead.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	&quot;kasan-dev@googlegroups.com&quot; &lt;kasan-dev@googlegroups.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Jiazhenghua &lt;jiazhenghua@huawei.com&gt;, Dailei &lt;dylix.dailei@huawei.com&gt;,
	Zengweilin &lt;zengweilin@huawei.com&gt;, Heshaoliang &lt;heshaoliang@huawei.com&gt;
Subject: Re: [PATCH 01/11] Initialize the mapping of KASan shadow memory
Thread-Topic: [PATCH 01/11] Initialize the mapping of KASan shadow memory
Thread-Index: AQHTQmokZ5ece1W6v0+GfMCIss4ZwaLfVPOAgCx4V5A=
Date: Thu, 9 Nov 2017 07:46:39 +0000
Message-ID: &lt;B8AC3E80E903784988AB3003E3E97330C0063172@dggemm510-mbs.china.huawei.com&gt;
References: &lt;20171011082227.20546-1-liuwenliang@huawei.com&gt;
	&lt;20171011082227.20546-2-liuwenliang@huawei.com&gt;
	&lt;227e2c6e-f479-849d-8942-1d5ff4ccd440@arm.com&gt;
In-Reply-To: &lt;227e2c6e-f479-849d-8942-1d5ff4ccd440@arm.com&gt;
Accept-Language: en-US
Content-Language: zh-CN
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.57.90.243]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A090201.5A0407EC.0357, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, 
	ip=169.254.11.85, so=2014-11-16 11:51:01,
	dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 656b33ec11cc64de7e525d8b592277a7
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176771">Abbott Liu</a> - Nov. 9, 2017, 7:46 a.m.</div>
<pre class="content">
On 12/10/17 15:59, Marc Zyngier [mailto:marc.zyngier@arm.com] wrote:
<span class="quote">&gt; On 11/10/17 09:22, Abbott Liu wrote:</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/proc-fns.h b/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt; index f2e1af4..6e26714 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt; @@ -131,6 +131,15 @@ extern void cpu_resume(void);</span>
<span class="quote">&gt;&gt;  		pg &amp;= ~(PTRS_PER_PGD*sizeof(pgd_t)-1);	\</span>
<span class="quote">&gt;&gt;  		(pgd_t *)phys_to_virt(pg);		\</span>
<span class="quote">&gt;&gt;  	})</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define cpu_set_ttbr0(val)					\</span>
<span class="quote">&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt; +		__asm__(&quot;mcrr	p15, 0, %Q0, %R0, c2&quot;		\</span>
<span class="quote">&gt;&gt; +			: : &quot;r&quot; (ttbr));	\</span>
<span class="quote">&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #else</span>
<span class="quote">&gt;&gt;  #define cpu_get_pgd()	\</span>
<span class="quote">&gt;&gt;  	({						\</span>
<span class="quote">&gt;&gt; @@ -140,6 +149,30 @@ extern void cpu_resume(void);</span>
<span class="quote">&gt;&gt;  		pg &amp;= ~0x3fff;				\</span>
<span class="quote">&gt;&gt;  		(pgd_t *)phys_to_virt(pg);		\</span>
<span class="quote">&gt;&gt;  	})</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define cpu_set_ttbr(nr, val)					\</span>
<span class="quote">&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt; +		__asm__(&quot;mcr	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt; +			: : &quot;r&quot; (ttbr));			\</span>
<span class="quote">&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define cpu_get_ttbr(nr)					\</span>
<span class="quote">&gt;&gt; +	({							\</span>
<span class="quote">&gt;&gt; +		unsigned long ttbr;				\</span>
<span class="quote">&gt;&gt; +		__asm__(&quot;mrc	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt; +			: &quot;=r&quot; (ttbr));				\</span>
<span class="quote">&gt;&gt; +		ttbr;						\</span>
<span class="quote">&gt;&gt; +	})</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define cpu_set_ttbr0(val)					\</span>
<span class="quote">&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt; +		__asm__(&quot;mcr	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt; +			: : &quot;r&quot; (ttbr));			\</span>
<span class="quote">&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;You could instead lift and extend the definitions provided in kvm_hyp.h,</span>
<span class="quote">&gt;and use the read_sysreg/write_sysreg helpers defined in cp15.h.</span>

Thanks for your review. 
I extend definitions of TTBR0/TTBR1/PAR in kvm_hyp.h when the CONFIG_ARM_LPAE is 
not defined. 
Because cortex A9 don&#39;t support virtualization, so use CONFIG_ARM_LPAE to exclude
some functions and macros which are only used in virtualization.

Here is the code which I tested on vexpress_a15 and vexpress_a9:
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - Nov. 9, 2017, 10:10 a.m.</div>
<pre class="content">
On 09/11/17 07:46, Liuwenliang (Abbott Liu) wrote:
<span class="quote">&gt; On 12/10/17 15:59, Marc Zyngier [mailto:marc.zyngier@arm.com] wrote:</span>
<span class="quote">&gt;&gt; On 11/10/17 09:22, Abbott Liu wrote:</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm/include/asm/proc-fns.h b/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt;&gt; index f2e1af4..6e26714 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm/include/asm/proc-fns.h</span>
<span class="quote">&gt;&gt;&gt; @@ -131,6 +131,15 @@ extern void cpu_resume(void);</span>
<span class="quote">&gt;&gt;&gt;  		pg &amp;= ~(PTRS_PER_PGD*sizeof(pgd_t)-1);	\</span>
<span class="quote">&gt;&gt;&gt;  		(pgd_t *)phys_to_virt(pg);		\</span>
<span class="quote">&gt;&gt;&gt;  	})</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +#define cpu_set_ttbr0(val)					\</span>
<span class="quote">&gt;&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt;&gt; +		__asm__(&quot;mcrr	p15, 0, %Q0, %R0, c2&quot;		\</span>
<span class="quote">&gt;&gt;&gt; +			: : &quot;r&quot; (ttbr));	\</span>
<span class="quote">&gt;&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;  #else</span>
<span class="quote">&gt;&gt;&gt;  #define cpu_get_pgd()	\</span>
<span class="quote">&gt;&gt;&gt;  	({						\</span>
<span class="quote">&gt;&gt;&gt; @@ -140,6 +149,30 @@ extern void cpu_resume(void);</span>
<span class="quote">&gt;&gt;&gt;  		pg &amp;= ~0x3fff;				\</span>
<span class="quote">&gt;&gt;&gt;  		(pgd_t *)phys_to_virt(pg);		\</span>
<span class="quote">&gt;&gt;&gt;  	})</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +#define cpu_set_ttbr(nr, val)					\</span>
<span class="quote">&gt;&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt;&gt; +		__asm__(&quot;mcr	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt;&gt; +			: : &quot;r&quot; (ttbr));			\</span>
<span class="quote">&gt;&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +#define cpu_get_ttbr(nr)					\</span>
<span class="quote">&gt;&gt;&gt; +	({							\</span>
<span class="quote">&gt;&gt;&gt; +		unsigned long ttbr;				\</span>
<span class="quote">&gt;&gt;&gt; +		__asm__(&quot;mrc	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt;&gt; +			: &quot;=r&quot; (ttbr));				\</span>
<span class="quote">&gt;&gt;&gt; +		ttbr;						\</span>
<span class="quote">&gt;&gt;&gt; +	})</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +#define cpu_set_ttbr0(val)					\</span>
<span class="quote">&gt;&gt;&gt; +	do {							\</span>
<span class="quote">&gt;&gt;&gt; +		u64 ttbr = val;					\</span>
<span class="quote">&gt;&gt;&gt; +		__asm__(&quot;mcr	p15, 0, %0, c2, c0, 0&quot;		\</span>
<span class="quote">&gt;&gt;&gt; +			: : &quot;r&quot; (ttbr));			\</span>
<span class="quote">&gt;&gt;&gt; +	} while (0)</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You could instead lift and extend the definitions provided in kvm_hyp.h,</span>
<span class="quote">&gt;&gt; and use the read_sysreg/write_sysreg helpers defined in cp15.h.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for your review. </span>
<span class="quote">&gt; I extend definitions of TTBR0/TTBR1/PAR in kvm_hyp.h when the CONFIG_ARM_LPAE is </span>
<span class="quote">&gt; not defined. </span>
<span class="quote">&gt; Because cortex A9 don&#39;t support virtualization, so use CONFIG_ARM_LPAE to exclude</span>
<span class="quote">&gt; some functions and macros which are only used in virtualization.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Here is the code which I tested on vexpress_a15 and vexpress_a9:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_hyp.h b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="quote">&gt; index 14b5903..2592608 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_hyp.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="quote">&gt; @@ -19,12 +19,14 @@</span>
<span class="quote">&gt;  #define __ARM_KVM_HYP_H__</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &lt;linux/compiler.h&gt;</span>
<span class="quote">&gt; -#include &lt;linux/kvm_host.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/cp15.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_ARM_LPAE</span>
<span class="quote">&gt; +#include &lt;linux/kvm_host.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/kvm_mmu.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/vfp.h&gt;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  #define __hyp_text __section(.hyp.text) notrace</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #define __ACCESS_VFP(CRn)                      \</span>
<span class="quote">&gt;         &quot;mrc&quot;, &quot;mcr&quot;, __stringify(p10, 7, %0, CRn, cr0, 0), u32</span>
<span class="quote">&gt; @@ -37,12 +39,18 @@</span>
<span class="quote">&gt;         __val;                                                  \</span>
<span class="quote">&gt;  })</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#ifdef CONFIG_ARM_LPAE</span>
<span class="quote">&gt;  #define TTBR0          __ACCESS_CP15_64(0, c2)</span>
<span class="quote">&gt;  #define TTBR1          __ACCESS_CP15_64(1, c2)</span>
<span class="quote">&gt;  #define VTTBR          __ACCESS_CP15_64(6, c2)</span>
<span class="quote">&gt;  #define PAR            __ACCESS_CP15_64(0, c7)</span>
<span class="quote">&gt;  #define CNTV_CVAL      __ACCESS_CP15_64(3, c14)</span>
<span class="quote">&gt;  #define CNTVOFF                __ACCESS_CP15_64(4, c14)</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +#define TTBR0           __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="quote">&gt; +#define TTBR1           __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="quote">&gt; +#define PAR          __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="quote">&gt; +#endif</span>

There is no reason for this LPAE vs non LPAE dichotomy. Both registers
do exist if your system supports LPAE. So you can either suffix the
64bit version with an _64 (and change the KVM code), or suffix the bit
version with _32.
<span class="quote">
&gt; </span>
<span class="quote">&gt;  #define MIDR           __ACCESS_CP15(c0, 0, c0, 0)</span>
<span class="quote">&gt;  #define CSSELR         __ACCESS_CP15(c0, 2, c0, 0)</span>
<span class="quote">&gt; @@ -98,6 +106,7 @@</span>
<span class="quote">&gt;  #define cntvoff_el2                    CNTVOFF</span>
<span class="quote">&gt;  #define cnthctl_el2                    CNTHCTL</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#ifdef CONFIG_ARM_LPAE</span>
<span class="quote">&gt;  void __timer_save_state(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;  void __timer_restore_state(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; @@ -123,5 +132,6 @@ void __hyp_text __banked_restore_state(struct kvm_cpu_context *ctxt);</span>
<span class="quote">&gt;  asmlinkage int __guest_enter(struct kvm_vcpu *vcpu,</span>
<span class="quote">&gt;                              struct kvm_cpu_context *host);</span>
<span class="quote">&gt;  asmlinkage int __hyp_do_panic(const char *, int, u32);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #endif /* __ARM_KVM_HYP_H__ */</span>
<span class="quote">&gt; diff --git a/arch/arm/mm/kasan_init.c b/arch/arm/mm/kasan_init.c</span>
<span class="quote">&gt; index 049ee0a..359a782 100644</span>
<span class="quote">&gt; --- a/arch/arm/mm/kasan_init.c</span>
<span class="quote">&gt; +++ b/arch/arm/mm/kasan_init.c</span>
<span class="quote">&gt; @@ -15,6 +15,7 @@</span>
<span class="quote">&gt;  #include &lt;asm/proc-fns.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/cp15.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/kvm_hyp.h&gt;</span>

No, please don&#39;t do that. You shouldn&#39;t have to include KVM stuff in
unrelated code. Instead of adding stuff to kvm_hyp.h, move all the
__ACCESS_CP15* to cp15.h, and it will be obvious to everyone that this
is where new definition should be added.
<span class="quote">
&gt;  #include &lt;linux/sched/task.h&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &quot;mm.h&quot;</span>
<span class="quote">&gt; @@ -203,16 +204,16 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;         u64 orig_ttbr0;</span>
<span class="quote">&gt;         int i;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -   orig_ttbr0 = cpu_get_ttbr(0);</span>
<span class="quote">&gt; + orig_ttbr0 = read_sysreg(TTBR0);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #ifdef CONFIG_ARM_LPAE</span>
<span class="quote">&gt;         memcpy(tmp_pmd_table, pgd_page_vaddr(*pgd_offset_k(KASAN_SHADOW_START)), sizeof(tmp_pmd_table));</span>
<span class="quote">&gt;         memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));</span>
<span class="quote">&gt;         set_pgd(&amp;tmp_page_table[pgd_index(KASAN_SHADOW_START)], __pgd(__pa(tmp_pmd_table) | PMD_TYPE_TABLE | L_PGD_SWAPPER));</span>
<span class="quote">&gt; -   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="quote">&gt; + write_sysreg(__pa(tmp_page_table), TTBR0);</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;         memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));</span>
<span class="quote">&gt; -   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="quote">&gt; + write_sysreg(__pa(tmp_page_table),TTBR0);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;         flush_cache_all();</span>
<span class="quote">&gt;         local_flush_bp_all();</span>
<span class="quote">&gt; @@ -257,7 +258,7 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;                                  /*__pgprot(_L_PTE_DEFAULT | L_PTE_DIRTY | L_PTE_XN | L_PTE_RDONLY))*/</span>
<span class="quote">&gt;                                 __pgprot(pgprot_val(PAGE_KERNEL) | L_PTE_RDONLY)));</span>
<span class="quote">&gt;         memset(kasan_zero_page, 0, PAGE_SIZE);</span>
<span class="quote">&gt; -   cpu_set_ttbr0(orig_ttbr0);</span>
<span class="quote">&gt; + write_sysreg(orig_ttbr0 ,TTBR0);</span>
<span class="quote">&gt;         flush_cache_all();</span>
<span class="quote">&gt;         local_flush_bp_all();</span>
<span class="quote">&gt;         local_flush_tlb_all();</span>
<span class="quote">&gt; </span>

Thanks,

	M.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_hyp.h b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_header">index 14b5903..2592608 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_chunk">@@ -19,12 +19,14 @@</span> <span class="p_context"></span>
 #define __ARM_KVM_HYP_H__

 #include &lt;linux/compiler.h&gt;
<span class="p_del">-#include &lt;linux/kvm_host.h&gt;</span>
 #include &lt;asm/cp15.h&gt;
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARM_LPAE</span>
<span class="p_add">+#include &lt;linux/kvm_host.h&gt;</span>
 #include &lt;asm/kvm_mmu.h&gt;
 #include &lt;asm/vfp.h&gt;
<span class="p_del">-</span>
 #define __hyp_text __section(.hyp.text) notrace
<span class="p_add">+#endif</span>

 #define __ACCESS_VFP(CRn)                      \
        &quot;mrc&quot;, &quot;mcr&quot;, __stringify(p10, 7, %0, CRn, cr0, 0), u32
<span class="p_chunk">@@ -37,12 +39,18 @@</span> <span class="p_context"></span>
        __val;                                                  \
 })

<span class="p_add">+#ifdef CONFIG_ARM_LPAE</span>
 #define TTBR0          __ACCESS_CP15_64(0, c2)
 #define TTBR1          __ACCESS_CP15_64(1, c2)
 #define VTTBR          __ACCESS_CP15_64(6, c2)
 #define PAR            __ACCESS_CP15_64(0, c7)
 #define CNTV_CVAL      __ACCESS_CP15_64(3, c14)
 #define CNTVOFF                __ACCESS_CP15_64(4, c14)
<span class="p_add">+#else</span>
<span class="p_add">+#define TTBR0           __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="p_add">+#define TTBR1           __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="p_add">+#define PAR          __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="p_add">+#endif</span>

 #define MIDR           __ACCESS_CP15(c0, 0, c0, 0)
 #define CSSELR         __ACCESS_CP15(c0, 2, c0, 0)
<span class="p_chunk">@@ -98,6 +106,7 @@</span> <span class="p_context"></span>
 #define cntvoff_el2                    CNTVOFF
 #define cnthctl_el2                    CNTHCTL

<span class="p_add">+#ifdef CONFIG_ARM_LPAE</span>
 void __timer_save_state(struct kvm_vcpu *vcpu);
 void __timer_restore_state(struct kvm_vcpu *vcpu);

<span class="p_chunk">@@ -123,5 +132,6 @@</span> <span class="p_context"> void __hyp_text __banked_restore_state(struct kvm_cpu_context *ctxt);</span>
 asmlinkage int __guest_enter(struct kvm_vcpu *vcpu,
                             struct kvm_cpu_context *host);
 asmlinkage int __hyp_do_panic(const char *, int, u32);
<span class="p_add">+#endif</span>

 #endif /* __ARM_KVM_HYP_H__ */
<span class="p_header">diff --git a/arch/arm/mm/kasan_init.c b/arch/arm/mm/kasan_init.c</span>
<span class="p_header">index 049ee0a..359a782 100644</span>
<span class="p_header">--- a/arch/arm/mm/kasan_init.c</span>
<span class="p_header">+++ b/arch/arm/mm/kasan_init.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/proc-fns.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/cp15.h&gt;
<span class="p_add">+#include &lt;asm/kvm_hyp.h&gt;</span>
 #include &lt;linux/sched/task.h&gt;

 #include &quot;mm.h&quot;
<span class="p_chunk">@@ -203,16 +204,16 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
        u64 orig_ttbr0;
        int i;

<span class="p_del">-   orig_ttbr0 = cpu_get_ttbr(0);</span>
<span class="p_add">+ orig_ttbr0 = read_sysreg(TTBR0);</span>

 #ifdef CONFIG_ARM_LPAE
        memcpy(tmp_pmd_table, pgd_page_vaddr(*pgd_offset_k(KASAN_SHADOW_START)), sizeof(tmp_pmd_table));
        memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));
        set_pgd(&amp;tmp_page_table[pgd_index(KASAN_SHADOW_START)], __pgd(__pa(tmp_pmd_table) | PMD_TYPE_TABLE | L_PGD_SWAPPER));
<span class="p_del">-   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="p_add">+ write_sysreg(__pa(tmp_page_table), TTBR0);</span>
 #else
        memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));
<span class="p_del">-   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="p_add">+ write_sysreg(__pa(tmp_page_table),TTBR0);</span>
 #endif
        flush_cache_all();
        local_flush_bp_all();
<span class="p_chunk">@@ -257,7 +258,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
                                 /*__pgprot(_L_PTE_DEFAULT | L_PTE_DIRTY | L_PTE_XN | L_PTE_RDONLY))*/
                                __pgprot(pgprot_val(PAGE_KERNEL) | L_PTE_RDONLY)));
        memset(kasan_zero_page, 0, PAGE_SIZE);
<span class="p_del">-   cpu_set_ttbr0(orig_ttbr0);</span>
<span class="p_add">+ write_sysreg(orig_ttbr0 ,TTBR0);</span>
        flush_cache_all();
        local_flush_bp_all();
        local_flush_tlb_all();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



