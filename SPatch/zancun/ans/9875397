
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[16/18] tools include uapi: Grab a copy of linux/vhost.h - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [16/18] tools include uapi: Grab a copy of linux/vhost.h</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 1, 2017, 7:56 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170801195645.16986-17-acme@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9875397/mbox/"
   >mbox</a>
|
   <a href="/patch/9875397/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9875397/">/patch/9875397/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6B6D56038F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 19:59:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5C6822521E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 19:59:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 50DE028068; Tue,  1 Aug 2017 19:59:13 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 486D72521E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 19:59:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752708AbdHAT7J (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 1 Aug 2017 15:59:09 -0400
Received: from mail.kernel.org ([198.145.29.99]:58928 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752166AbdHAT6G (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 1 Aug 2017 15:58:06 -0400
Received: from jouet.infradead.org (unknown [179.97.41.186])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 8C8DD22DA8;
	Tue,  1 Aug 2017 19:58:02 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org 8C8DD22DA8
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=acme@kernel.org
From: Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;
To: Ingo Molnar &lt;mingo@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-perf-users@vger.kernel.org,
	Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;,
	Adrian Hunter &lt;adrian.hunter@intel.com&gt;, David Ahern &lt;dsahern@gmail.com&gt;,
	Jason Wang &lt;jasowang@redhat.com&gt;, Jiri Olsa &lt;jolsa@kernel.org&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;,
	Namhyung Kim &lt;namhyung@kernel.org&gt;, Wang Nan &lt;wangnan0@huawei.com&gt;
Subject: [PATCH 16/18] tools include uapi: Grab a copy of linux/vhost.h
Date: Tue,  1 Aug 2017 16:56:43 -0300
Message-Id: &lt;20170801195645.16986-17-acme@kernel.org&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;20170801195645.16986-1-acme@kernel.org&gt;
References: &lt;20170801195645.16986-1-acme@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - Aug. 1, 2017, 7:56 p.m.</div>
<pre class="content">
<span class="from">From: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>

We will use it to generate tables for beautifying ioctl&#39;s &#39;cmd&#39; arg.

Cc: Adrian Hunter &lt;adrian.hunter@intel.com&gt;
Cc: David Ahern &lt;dsahern@gmail.com&gt;
Cc: Jason Wang &lt;jasowang@redhat.com&gt;
Cc: Jiri Olsa &lt;jolsa@kernel.org&gt;
Cc: &quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;
Cc: Namhyung Kim &lt;namhyung@kernel.org&gt;
Cc: Wang Nan &lt;wangnan0@huawei.com&gt;
Link: http://lkml.kernel.org/n/tip-nxwpq34hu6te1m2ra5m7o8n9@git.kernel.org
<span class="signed-off-by">Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
---
 tools/include/uapi/linux/vhost.h | 209 +++++++++++++++++++++++++++++++++++++++
 tools/perf/MANIFEST              |   1 +
 tools/perf/check-headers.sh      |   1 +
 3 files changed, 211 insertions(+)
 create mode 100644 tools/include/uapi/linux/vhost.h
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1984">Michael S. Tsirkin</a> - Aug. 1, 2017, 9:19 p.m.</div>
<pre class="content">
On Tue, Aug 01, 2017 at 04:56:43PM -0300, Arnaldo Carvalho de Melo wrote:
<span class="quote">&gt; From: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We will use it to generate tables for beautifying ioctl&#39;s &#39;cmd&#39; arg.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Adrian Hunter &lt;adrian.hunter@intel.com&gt;</span>
<span class="quote">&gt; Cc: David Ahern &lt;dsahern@gmail.com&gt;</span>
<span class="quote">&gt; Cc: Jason Wang &lt;jasowang@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="quote">&gt; Cc: &quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Namhyung Kim &lt;namhyung@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Wang Nan &lt;wangnan0@huawei.com&gt;</span>
<span class="quote">&gt; Link: http://lkml.kernel.org/n/tip-nxwpq34hu6te1m2ra5m7o8n9@git.kernel.org</span>
<span class="quote">&gt; Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>

Is this what tools/perf always does? Isn&#39;t there a way
to reuse the single header?
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  tools/include/uapi/linux/vhost.h | 209 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  tools/perf/MANIFEST              |   1 +</span>
<span class="quote">&gt;  tools/perf/check-headers.sh      |   1 +</span>
<span class="quote">&gt;  3 files changed, 211 insertions(+)</span>
<span class="quote">&gt;  create mode 100644 tools/include/uapi/linux/vhost.h</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/tools/include/uapi/linux/vhost.h b/tools/include/uapi/linux/vhost.h</span>
<span class="quote">&gt; new file mode 100644</span>
<span class="quote">&gt; index 000000000000..60180c0b5dc6</span>
<span class="quote">&gt; --- /dev/null</span>
<span class="quote">&gt; +++ b/tools/include/uapi/linux/vhost.h</span>
<span class="quote">&gt; @@ -0,0 +1,209 @@</span>
<span class="quote">&gt; +#ifndef _LINUX_VHOST_H</span>
<span class="quote">&gt; +#define _LINUX_VHOST_H</span>
<span class="quote">&gt; +/* Userspace interface for in-kernel virtio accelerators. */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* vhost is used to reduce the number of system calls involved in virtio.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Existing virtio net code is used in the guest without modification.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * This header includes interface used by userspace hypervisor for</span>
<span class="quote">&gt; + * device configuration.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#include &lt;linux/types.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/compiler.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/ioctl.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/virtio_config.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/virtio_ring.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_vring_state {</span>
<span class="quote">&gt; +	unsigned int index;</span>
<span class="quote">&gt; +	unsigned int num;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_vring_file {</span>
<span class="quote">&gt; +	unsigned int index;</span>
<span class="quote">&gt; +	int fd; /* Pass -1 to unbind from file. */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_vring_addr {</span>
<span class="quote">&gt; +	unsigned int index;</span>
<span class="quote">&gt; +	/* Option flags. */</span>
<span class="quote">&gt; +	unsigned int flags;</span>
<span class="quote">&gt; +	/* Flag values: */</span>
<span class="quote">&gt; +	/* Whether log address is valid. If set enables logging. */</span>
<span class="quote">&gt; +#define VHOST_VRING_F_LOG 0</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Start of array of descriptors (virtually contiguous) */</span>
<span class="quote">&gt; +	__u64 desc_user_addr;</span>
<span class="quote">&gt; +	/* Used structure address. Must be 32 bit aligned */</span>
<span class="quote">&gt; +	__u64 used_user_addr;</span>
<span class="quote">&gt; +	/* Available structure address. Must be 16 bit aligned */</span>
<span class="quote">&gt; +	__u64 avail_user_addr;</span>
<span class="quote">&gt; +	/* Logging support. */</span>
<span class="quote">&gt; +	/* Log writes to used structure, at offset calculated from specified</span>
<span class="quote">&gt; +	 * address. Address must be 32 bit aligned. */</span>
<span class="quote">&gt; +	__u64 log_guest_addr;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* no alignment requirement */</span>
<span class="quote">&gt; +struct vhost_iotlb_msg {</span>
<span class="quote">&gt; +	__u64 iova;</span>
<span class="quote">&gt; +	__u64 size;</span>
<span class="quote">&gt; +	__u64 uaddr;</span>
<span class="quote">&gt; +#define VHOST_ACCESS_RO      0x1</span>
<span class="quote">&gt; +#define VHOST_ACCESS_WO      0x2</span>
<span class="quote">&gt; +#define VHOST_ACCESS_RW      0x3</span>
<span class="quote">&gt; +	__u8 perm;</span>
<span class="quote">&gt; +#define VHOST_IOTLB_MISS           1</span>
<span class="quote">&gt; +#define VHOST_IOTLB_UPDATE         2</span>
<span class="quote">&gt; +#define VHOST_IOTLB_INVALIDATE     3</span>
<span class="quote">&gt; +#define VHOST_IOTLB_ACCESS_FAIL    4</span>
<span class="quote">&gt; +	__u8 type;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define VHOST_IOTLB_MSG 0x1</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_msg {</span>
<span class="quote">&gt; +	int type;</span>
<span class="quote">&gt; +	union {</span>
<span class="quote">&gt; +		struct vhost_iotlb_msg iotlb;</span>
<span class="quote">&gt; +		__u8 padding[64];</span>
<span class="quote">&gt; +	};</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_memory_region {</span>
<span class="quote">&gt; +	__u64 guest_phys_addr;</span>
<span class="quote">&gt; +	__u64 memory_size; /* bytes */</span>
<span class="quote">&gt; +	__u64 userspace_addr;</span>
<span class="quote">&gt; +	__u64 flags_padding; /* No flags are currently specified. */</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* All region addresses and sizes must be 4K aligned. */</span>
<span class="quote">&gt; +#define VHOST_PAGE_SIZE 0x1000</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_memory {</span>
<span class="quote">&gt; +	__u32 nregions;</span>
<span class="quote">&gt; +	__u32 padding;</span>
<span class="quote">&gt; +	struct vhost_memory_region regions[0];</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* ioctls */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define VHOST_VIRTIO 0xAF</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Features bitmask for forward compatibility.  Transport bits are used for</span>
<span class="quote">&gt; + * vhost specific features. */</span>
<span class="quote">&gt; +#define VHOST_GET_FEATURES	_IOR(VHOST_VIRTIO, 0x00, __u64)</span>
<span class="quote">&gt; +#define VHOST_SET_FEATURES	_IOW(VHOST_VIRTIO, 0x00, __u64)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Set current process as the (exclusive) owner of this file descriptor.  This</span>
<span class="quote">&gt; + * must be called before any other vhost command.  Further calls to</span>
<span class="quote">&gt; + * VHOST_OWNER_SET fail until VHOST_OWNER_RESET is called. */</span>
<span class="quote">&gt; +#define VHOST_SET_OWNER _IO(VHOST_VIRTIO, 0x01)</span>
<span class="quote">&gt; +/* Give up ownership, and reset the device to default values.</span>
<span class="quote">&gt; + * Allows subsequent call to VHOST_OWNER_SET to succeed. */</span>
<span class="quote">&gt; +#define VHOST_RESET_OWNER _IO(VHOST_VIRTIO, 0x02)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Set up/modify memory layout */</span>
<span class="quote">&gt; +#define VHOST_SET_MEM_TABLE	_IOW(VHOST_VIRTIO, 0x03, struct vhost_memory)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Write logging setup. */</span>
<span class="quote">&gt; +/* Memory writes can optionally be logged by setting bit at an offset</span>
<span class="quote">&gt; + * (calculated from the physical address) from specified log base.</span>
<span class="quote">&gt; + * The bit is set using an atomic 32 bit operation. */</span>
<span class="quote">&gt; +/* Set base address for logging. */</span>
<span class="quote">&gt; +#define VHOST_SET_LOG_BASE _IOW(VHOST_VIRTIO, 0x04, __u64)</span>
<span class="quote">&gt; +/* Specify an eventfd file descriptor to signal on log write. */</span>
<span class="quote">&gt; +#define VHOST_SET_LOG_FD _IOW(VHOST_VIRTIO, 0x07, int)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Ring setup. */</span>
<span class="quote">&gt; +/* Set number of descriptors in ring. This parameter can not</span>
<span class="quote">&gt; + * be modified while ring is running (bound to a device). */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_NUM _IOW(VHOST_VIRTIO, 0x10, struct vhost_vring_state)</span>
<span class="quote">&gt; +/* Set addresses for the ring. */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_ADDR _IOW(VHOST_VIRTIO, 0x11, struct vhost_vring_addr)</span>
<span class="quote">&gt; +/* Base value where queue looks for available descriptors */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_BASE _IOW(VHOST_VIRTIO, 0x12, struct vhost_vring_state)</span>
<span class="quote">&gt; +/* Get accessor: reads index, writes value in num */</span>
<span class="quote">&gt; +#define VHOST_GET_VRING_BASE _IOWR(VHOST_VIRTIO, 0x12, struct vhost_vring_state)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Set the vring byte order in num. Valid values are VHOST_VRING_LITTLE_ENDIAN</span>
<span class="quote">&gt; + * or VHOST_VRING_BIG_ENDIAN (other values return -EINVAL).</span>
<span class="quote">&gt; + * The byte order cannot be changed while the device is active: trying to do so</span>
<span class="quote">&gt; + * returns -EBUSY.</span>
<span class="quote">&gt; + * This is a legacy only API that is simply ignored when VIRTIO_F_VERSION_1 is</span>
<span class="quote">&gt; + * set.</span>
<span class="quote">&gt; + * Not all kernel configurations support this ioctl, but all configurations that</span>
<span class="quote">&gt; + * support SET also support GET.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define VHOST_VRING_LITTLE_ENDIAN 0</span>
<span class="quote">&gt; +#define VHOST_VRING_BIG_ENDIAN 1</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_ENDIAN _IOW(VHOST_VIRTIO, 0x13, struct vhost_vring_state)</span>
<span class="quote">&gt; +#define VHOST_GET_VRING_ENDIAN _IOW(VHOST_VIRTIO, 0x14, struct vhost_vring_state)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* The following ioctls use eventfd file descriptors to signal and poll</span>
<span class="quote">&gt; + * for events. */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Set eventfd to poll for added buffers */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_KICK _IOW(VHOST_VIRTIO, 0x20, struct vhost_vring_file)</span>
<span class="quote">&gt; +/* Set eventfd to signal when buffers have beed used */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_CALL _IOW(VHOST_VIRTIO, 0x21, struct vhost_vring_file)</span>
<span class="quote">&gt; +/* Set eventfd to signal an error */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_ERR _IOW(VHOST_VIRTIO, 0x22, struct vhost_vring_file)</span>
<span class="quote">&gt; +/* Set busy loop timeout (in us) */</span>
<span class="quote">&gt; +#define VHOST_SET_VRING_BUSYLOOP_TIMEOUT _IOW(VHOST_VIRTIO, 0x23,	\</span>
<span class="quote">&gt; +					 struct vhost_vring_state)</span>
<span class="quote">&gt; +/* Get busy loop timeout (in us) */</span>
<span class="quote">&gt; +#define VHOST_GET_VRING_BUSYLOOP_TIMEOUT _IOW(VHOST_VIRTIO, 0x24,	\</span>
<span class="quote">&gt; +					 struct vhost_vring_state)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* VHOST_NET specific defines */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Attach virtio net ring to a raw socket, or tap device.</span>
<span class="quote">&gt; + * The socket must be already bound to an ethernet device, this device will be</span>
<span class="quote">&gt; + * used for transmit.  Pass fd -1 to unbind from the socket and the transmit</span>
<span class="quote">&gt; + * device.  This can be used to stop the ring (e.g. for migration). */</span>
<span class="quote">&gt; +#define VHOST_NET_SET_BACKEND _IOW(VHOST_VIRTIO, 0x30, struct vhost_vring_file)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Feature bits */</span>
<span class="quote">&gt; +/* Log all write descriptors. Can be changed while device is active. */</span>
<span class="quote">&gt; +#define VHOST_F_LOG_ALL 26</span>
<span class="quote">&gt; +/* vhost-net should add virtio_net_hdr for RX, and strip for TX packets. */</span>
<span class="quote">&gt; +#define VHOST_NET_F_VIRTIO_NET_HDR 27</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* VHOST_SCSI specific definitions */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Used by QEMU userspace to ensure a consistent vhost-scsi ABI.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * ABI Rev 0: July 2012 version starting point for v3.6-rc merge candidate +</span>
<span class="quote">&gt; + *            RFC-v2 vhost-scsi userspace.  Add GET_ABI_VERSION ioctl usage</span>
<span class="quote">&gt; + * ABI Rev 1: January 2013. Ignore vhost_tpgt filed in struct vhost_scsi_target.</span>
<span class="quote">&gt; + *            All the targets under vhost_wwpn can be seen and used by guset.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define VHOST_SCSI_ABI_VERSION	1</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +struct vhost_scsi_target {</span>
<span class="quote">&gt; +	int abi_version;</span>
<span class="quote">&gt; +	char vhost_wwpn[224]; /* TRANSPORT_IQN_LEN */</span>
<span class="quote">&gt; +	unsigned short vhost_tpgt;</span>
<span class="quote">&gt; +	unsigned short reserved;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define VHOST_SCSI_SET_ENDPOINT _IOW(VHOST_VIRTIO, 0x40, struct vhost_scsi_target)</span>
<span class="quote">&gt; +#define VHOST_SCSI_CLEAR_ENDPOINT _IOW(VHOST_VIRTIO, 0x41, struct vhost_scsi_target)</span>
<span class="quote">&gt; +/* Changing this breaks userspace. */</span>
<span class="quote">&gt; +#define VHOST_SCSI_GET_ABI_VERSION _IOW(VHOST_VIRTIO, 0x42, int)</span>
<span class="quote">&gt; +/* Set and get the events missed flag */</span>
<span class="quote">&gt; +#define VHOST_SCSI_SET_EVENTS_MISSED _IOW(VHOST_VIRTIO, 0x43, __u32)</span>
<span class="quote">&gt; +#define VHOST_SCSI_GET_EVENTS_MISSED _IOW(VHOST_VIRTIO, 0x44, __u32)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* VHOST_VSOCK specific defines */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define VHOST_VSOCK_SET_GUEST_CID	_IOW(VHOST_VIRTIO, 0x60, __u64)</span>
<span class="quote">&gt; +#define VHOST_VSOCK_SET_RUNNING		_IOW(VHOST_VIRTIO, 0x61, int)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; diff --git a/tools/perf/MANIFEST b/tools/perf/MANIFEST</span>
<span class="quote">&gt; index 513f52a484fd..62072822dc85 100644</span>
<span class="quote">&gt; --- a/tools/perf/MANIFEST</span>
<span class="quote">&gt; +++ b/tools/perf/MANIFEST</span>
<span class="quote">&gt; @@ -85,6 +85,7 @@ tools/include/uapi/linux/mman.h</span>
<span class="quote">&gt;  tools/include/uapi/linux/perf_event.h</span>
<span class="quote">&gt;  tools/include/uapi/linux/sched.h</span>
<span class="quote">&gt;  tools/include/uapi/linux/stat.h</span>
<span class="quote">&gt; +tools/include/uapi/linux/vhost.h</span>
<span class="quote">&gt;  tools/include/uapi/sound/asound.h</span>
<span class="quote">&gt;  tools/include/linux/poison.h</span>
<span class="quote">&gt;  tools/include/linux/rbtree.h</span>
<span class="quote">&gt; diff --git a/tools/perf/check-headers.sh b/tools/perf/check-headers.sh</span>
<span class="quote">&gt; index 1f009506ff63..932fda54b8a6 100755</span>
<span class="quote">&gt; --- a/tools/perf/check-headers.sh</span>
<span class="quote">&gt; +++ b/tools/perf/check-headers.sh</span>
<span class="quote">&gt; @@ -8,6 +8,7 @@ include/uapi/linux/kvm.h</span>
<span class="quote">&gt;  include/uapi/linux/perf_event.h</span>
<span class="quote">&gt;  include/uapi/linux/sched.h</span>
<span class="quote">&gt;  include/uapi/linux/stat.h</span>
<span class="quote">&gt; +include/uapi/linux/vhost.h</span>
<span class="quote">&gt;  include/uapi/sound/asound.h</span>
<span class="quote">&gt;  include/linux/hash.h</span>
<span class="quote">&gt;  include/uapi/linux/hw_breakpoint.h</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.9.4</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - Aug. 2, 2017, 2:18 p.m.</div>
<pre class="content">
Em Wed, Aug 02, 2017 at 12:19:18AM +0300, Michael S. Tsirkin escreveu:
<span class="quote">&gt; On Tue, Aug 01, 2017 at 04:56:43PM -0300, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt; From: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We will use it to generate tables for beautifying ioctl&#39;s &#39;cmd&#39; arg.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Cc: Adrian Hunter &lt;adrian.hunter@intel.com&gt;</span>
<span class="quote">&gt; &gt; Cc: David Ahern &lt;dsahern@gmail.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Jason Wang &lt;jasowang@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="quote">&gt; &gt; Cc: &quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Namhyung Kim &lt;namhyung@kernel.org&gt;</span>
<span class="quote">&gt; &gt; Cc: Wang Nan &lt;wangnan0@huawei.com&gt;</span>
<span class="quote">&gt; &gt; Link: http://lkml.kernel.org/n/tip-nxwpq34hu6te1m2ra5m7o8n9@git.kernel.org</span>
<span class="quote">&gt; &gt; Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is this what tools/perf always does? Isn&#39;t there a way</span>
<span class="quote">&gt; to reuse the single header?</span>

So, that is how we did it at first, we tried to use files from the
kernel from tools/ directly, and it worked most of the time.

Shortest summary: We don&#39;t want to add to the workload of kernel
developers, they don&#39;t have to care about tools/, if they don&#39;t want to.

There are other reasons, but this is the main one, please take a look at
these others in some other patches in this series, first the one that
uses the files in the commit in this message:

 -----
commit ec6dd85f6e39bf516f4420d62270380b96bbee57
Author: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;
Date:   Mon Jul 31 17:34:47 2017 -0300

    perf trace beautify ioctl: Beautify vhost virtio ioctl&#39;s &#39;cmd&#39; arg
    
    Also trying a new approach, using a copy of uapi/linux/vhost.h we auto
    generate the string tables, then include it in the ioctl cmd beautifier.
    
    This way either the KVM developers will add the new commands to the
    tools/ copy, like is happening with other areas of tools/include/ (bpf.h
    comes to mind), or we&#39;ll be notified when building perf that our copy
    drifted.
    
    E.g., doing syswide tracing grepping for the newly beautified VHOST
    ioctls:
    
      # perf trace -e ioctl 2&gt;&amp;1 | grep VHOST
      3873.064 ( 0.099 ms): qemu-system-x8/21238 ioctl(fd: 27&lt;/dev/vhost-net&gt;, cmd: VHOST_NET_SET_BACKEND, arg: 0x7fff053dffe0) = 0
      3873.168 ( 0.019 ms): qemu-system-x8/21238 ioctl(fd: 27&lt;/dev/vhost-net&gt;, cmd: VHOST_NET_SET_BACKEND, arg: 0x7fff053dffe0) = 0
      3873.226 ( 0.006 ms): qemu-system-x8/21238 ioctl(fd: 27&lt;/dev/vhost-net&gt;, cmd: VHOST_GET_VRING_BASE, arg: 0x7fff053dff60) = 0

 -----

And on the cover letter for this patch series:

 -----
  Using the current scheme of having tools/ copies of kernel headers
  we&#39;ll make sure tooling stays working when changes are made to the
  kernel ABI headers and will be notified when they get changed,
  reducing the time for &#39;perf trace&#39; to support new ABIs and allowing
  the tools/perf/ codebase to have the definitions it needs to
  build in dozens of distros/versions, as routinely tested using
  containers for, at this time, 47 environments.
 -----

tools/perf/check-headers.sh does these tests:

cd tools/perf
./check-headers.sh

This is done everytime perf gets built.

- Arnaldo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1984">Michael S. Tsirkin</a> - Aug. 2, 2017, 3:44 p.m.</div>
<pre class="content">
On Wed, Aug 02, 2017 at 11:18:37AM -0300, Arnaldo Carvalho de Melo wrote:
<span class="quote">&gt; Em Wed, Aug 02, 2017 at 12:19:18AM +0300, Michael S. Tsirkin escreveu:</span>
<span class="quote">&gt; &gt; On Tue, Aug 01, 2017 at 04:56:43PM -0300, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt; &gt; From: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; We will use it to generate tables for beautifying ioctl&#39;s &#39;cmd&#39; arg.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Cc: Adrian Hunter &lt;adrian.hunter@intel.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: David Ahern &lt;dsahern@gmail.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Jason Wang &lt;jasowang@redhat.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: &quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Namhyung Kim &lt;namhyung@kernel.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Wang Nan &lt;wangnan0@huawei.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Link: http://lkml.kernel.org/n/tip-nxwpq34hu6te1m2ra5m7o8n9@git.kernel.org</span>
<span class="quote">&gt; &gt; &gt; Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Is this what tools/perf always does? Isn&#39;t there a way</span>
<span class="quote">&gt; &gt; to reuse the single header?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So, that is how we did it at first, we tried to use files from the</span>
<span class="quote">&gt; kernel from tools/ directly, and it worked most of the time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Shortest summary: We don&#39;t want to add to the workload of kernel</span>
<span class="quote">&gt; developers, they don&#39;t have to care about tools/, if they don&#39;t want to.</span>

OK then, thanks for the explanation.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - Aug. 2, 2017, 6:32 p.m.</div>
<pre class="content">
Em Wed, Aug 02, 2017 at 06:44:14PM +0300, Michael S. Tsirkin escreveu:
<span class="quote">&gt; On Wed, Aug 02, 2017 at 11:18:37AM -0300, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt; Em Wed, Aug 02, 2017 at 12:19:18AM +0300, Michael S. Tsirkin escreveu:</span>
<span class="quote">&gt; &gt; &gt; On Tue, Aug 01, 2017 at 04:56:43PM -0300, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; We will use it to generate tables for beautifying ioctl&#39;s &#39;cmd&#39; arg.</span>
<span class="quote">
&gt; &gt; &gt; Is this what tools/perf always does? Isn&#39;t there a way</span>
<span class="quote">&gt; &gt; &gt; to reuse the single header?</span>
<span class="quote">
&gt; &gt; So, that is how we did it at first, we tried to use files from the</span>
<span class="quote">&gt; &gt; kernel from tools/ directly, and it worked most of the time.</span>
<span class="quote">
&gt; &gt; Shortest summary: We don&#39;t want to add to the workload of kernel</span>
<span class="quote">&gt; &gt; developers, they don&#39;t have to care about tools/, if they don&#39;t want to.</span>
<span class="quote"> 
&gt; OK then, thanks for the explanation.</span>

But if you want to, feel right at home! 8-)

- Arnaldo
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/include/uapi/linux/vhost.h b/tools/include/uapi/linux/vhost.h</span>
new file mode 100644
<span class="p_header">index 000000000000..60180c0b5dc6</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/include/uapi/linux/vhost.h</span>
<span class="p_chunk">@@ -0,0 +1,209 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef _LINUX_VHOST_H</span>
<span class="p_add">+#define _LINUX_VHOST_H</span>
<span class="p_add">+/* Userspace interface for in-kernel virtio accelerators. */</span>
<span class="p_add">+</span>
<span class="p_add">+/* vhost is used to reduce the number of system calls involved in virtio.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Existing virtio net code is used in the guest without modification.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This header includes interface used by userspace hypervisor for</span>
<span class="p_add">+ * device configuration.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/types.h&gt;</span>
<span class="p_add">+#include &lt;linux/compiler.h&gt;</span>
<span class="p_add">+#include &lt;linux/ioctl.h&gt;</span>
<span class="p_add">+#include &lt;linux/virtio_config.h&gt;</span>
<span class="p_add">+#include &lt;linux/virtio_ring.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_vring_state {</span>
<span class="p_add">+	unsigned int index;</span>
<span class="p_add">+	unsigned int num;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_vring_file {</span>
<span class="p_add">+	unsigned int index;</span>
<span class="p_add">+	int fd; /* Pass -1 to unbind from file. */</span>
<span class="p_add">+</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_vring_addr {</span>
<span class="p_add">+	unsigned int index;</span>
<span class="p_add">+	/* Option flags. */</span>
<span class="p_add">+	unsigned int flags;</span>
<span class="p_add">+	/* Flag values: */</span>
<span class="p_add">+	/* Whether log address is valid. If set enables logging. */</span>
<span class="p_add">+#define VHOST_VRING_F_LOG 0</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Start of array of descriptors (virtually contiguous) */</span>
<span class="p_add">+	__u64 desc_user_addr;</span>
<span class="p_add">+	/* Used structure address. Must be 32 bit aligned */</span>
<span class="p_add">+	__u64 used_user_addr;</span>
<span class="p_add">+	/* Available structure address. Must be 16 bit aligned */</span>
<span class="p_add">+	__u64 avail_user_addr;</span>
<span class="p_add">+	/* Logging support. */</span>
<span class="p_add">+	/* Log writes to used structure, at offset calculated from specified</span>
<span class="p_add">+	 * address. Address must be 32 bit aligned. */</span>
<span class="p_add">+	__u64 log_guest_addr;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* no alignment requirement */</span>
<span class="p_add">+struct vhost_iotlb_msg {</span>
<span class="p_add">+	__u64 iova;</span>
<span class="p_add">+	__u64 size;</span>
<span class="p_add">+	__u64 uaddr;</span>
<span class="p_add">+#define VHOST_ACCESS_RO      0x1</span>
<span class="p_add">+#define VHOST_ACCESS_WO      0x2</span>
<span class="p_add">+#define VHOST_ACCESS_RW      0x3</span>
<span class="p_add">+	__u8 perm;</span>
<span class="p_add">+#define VHOST_IOTLB_MISS           1</span>
<span class="p_add">+#define VHOST_IOTLB_UPDATE         2</span>
<span class="p_add">+#define VHOST_IOTLB_INVALIDATE     3</span>
<span class="p_add">+#define VHOST_IOTLB_ACCESS_FAIL    4</span>
<span class="p_add">+	__u8 type;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define VHOST_IOTLB_MSG 0x1</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_msg {</span>
<span class="p_add">+	int type;</span>
<span class="p_add">+	union {</span>
<span class="p_add">+		struct vhost_iotlb_msg iotlb;</span>
<span class="p_add">+		__u8 padding[64];</span>
<span class="p_add">+	};</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_memory_region {</span>
<span class="p_add">+	__u64 guest_phys_addr;</span>
<span class="p_add">+	__u64 memory_size; /* bytes */</span>
<span class="p_add">+	__u64 userspace_addr;</span>
<span class="p_add">+	__u64 flags_padding; /* No flags are currently specified. */</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* All region addresses and sizes must be 4K aligned. */</span>
<span class="p_add">+#define VHOST_PAGE_SIZE 0x1000</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_memory {</span>
<span class="p_add">+	__u32 nregions;</span>
<span class="p_add">+	__u32 padding;</span>
<span class="p_add">+	struct vhost_memory_region regions[0];</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* ioctls */</span>
<span class="p_add">+</span>
<span class="p_add">+#define VHOST_VIRTIO 0xAF</span>
<span class="p_add">+</span>
<span class="p_add">+/* Features bitmask for forward compatibility.  Transport bits are used for</span>
<span class="p_add">+ * vhost specific features. */</span>
<span class="p_add">+#define VHOST_GET_FEATURES	_IOR(VHOST_VIRTIO, 0x00, __u64)</span>
<span class="p_add">+#define VHOST_SET_FEATURES	_IOW(VHOST_VIRTIO, 0x00, __u64)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Set current process as the (exclusive) owner of this file descriptor.  This</span>
<span class="p_add">+ * must be called before any other vhost command.  Further calls to</span>
<span class="p_add">+ * VHOST_OWNER_SET fail until VHOST_OWNER_RESET is called. */</span>
<span class="p_add">+#define VHOST_SET_OWNER _IO(VHOST_VIRTIO, 0x01)</span>
<span class="p_add">+/* Give up ownership, and reset the device to default values.</span>
<span class="p_add">+ * Allows subsequent call to VHOST_OWNER_SET to succeed. */</span>
<span class="p_add">+#define VHOST_RESET_OWNER _IO(VHOST_VIRTIO, 0x02)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Set up/modify memory layout */</span>
<span class="p_add">+#define VHOST_SET_MEM_TABLE	_IOW(VHOST_VIRTIO, 0x03, struct vhost_memory)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Write logging setup. */</span>
<span class="p_add">+/* Memory writes can optionally be logged by setting bit at an offset</span>
<span class="p_add">+ * (calculated from the physical address) from specified log base.</span>
<span class="p_add">+ * The bit is set using an atomic 32 bit operation. */</span>
<span class="p_add">+/* Set base address for logging. */</span>
<span class="p_add">+#define VHOST_SET_LOG_BASE _IOW(VHOST_VIRTIO, 0x04, __u64)</span>
<span class="p_add">+/* Specify an eventfd file descriptor to signal on log write. */</span>
<span class="p_add">+#define VHOST_SET_LOG_FD _IOW(VHOST_VIRTIO, 0x07, int)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Ring setup. */</span>
<span class="p_add">+/* Set number of descriptors in ring. This parameter can not</span>
<span class="p_add">+ * be modified while ring is running (bound to a device). */</span>
<span class="p_add">+#define VHOST_SET_VRING_NUM _IOW(VHOST_VIRTIO, 0x10, struct vhost_vring_state)</span>
<span class="p_add">+/* Set addresses for the ring. */</span>
<span class="p_add">+#define VHOST_SET_VRING_ADDR _IOW(VHOST_VIRTIO, 0x11, struct vhost_vring_addr)</span>
<span class="p_add">+/* Base value where queue looks for available descriptors */</span>
<span class="p_add">+#define VHOST_SET_VRING_BASE _IOW(VHOST_VIRTIO, 0x12, struct vhost_vring_state)</span>
<span class="p_add">+/* Get accessor: reads index, writes value in num */</span>
<span class="p_add">+#define VHOST_GET_VRING_BASE _IOWR(VHOST_VIRTIO, 0x12, struct vhost_vring_state)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Set the vring byte order in num. Valid values are VHOST_VRING_LITTLE_ENDIAN</span>
<span class="p_add">+ * or VHOST_VRING_BIG_ENDIAN (other values return -EINVAL).</span>
<span class="p_add">+ * The byte order cannot be changed while the device is active: trying to do so</span>
<span class="p_add">+ * returns -EBUSY.</span>
<span class="p_add">+ * This is a legacy only API that is simply ignored when VIRTIO_F_VERSION_1 is</span>
<span class="p_add">+ * set.</span>
<span class="p_add">+ * Not all kernel configurations support this ioctl, but all configurations that</span>
<span class="p_add">+ * support SET also support GET.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define VHOST_VRING_LITTLE_ENDIAN 0</span>
<span class="p_add">+#define VHOST_VRING_BIG_ENDIAN 1</span>
<span class="p_add">+#define VHOST_SET_VRING_ENDIAN _IOW(VHOST_VIRTIO, 0x13, struct vhost_vring_state)</span>
<span class="p_add">+#define VHOST_GET_VRING_ENDIAN _IOW(VHOST_VIRTIO, 0x14, struct vhost_vring_state)</span>
<span class="p_add">+</span>
<span class="p_add">+/* The following ioctls use eventfd file descriptors to signal and poll</span>
<span class="p_add">+ * for events. */</span>
<span class="p_add">+</span>
<span class="p_add">+/* Set eventfd to poll for added buffers */</span>
<span class="p_add">+#define VHOST_SET_VRING_KICK _IOW(VHOST_VIRTIO, 0x20, struct vhost_vring_file)</span>
<span class="p_add">+/* Set eventfd to signal when buffers have beed used */</span>
<span class="p_add">+#define VHOST_SET_VRING_CALL _IOW(VHOST_VIRTIO, 0x21, struct vhost_vring_file)</span>
<span class="p_add">+/* Set eventfd to signal an error */</span>
<span class="p_add">+#define VHOST_SET_VRING_ERR _IOW(VHOST_VIRTIO, 0x22, struct vhost_vring_file)</span>
<span class="p_add">+/* Set busy loop timeout (in us) */</span>
<span class="p_add">+#define VHOST_SET_VRING_BUSYLOOP_TIMEOUT _IOW(VHOST_VIRTIO, 0x23,	\</span>
<span class="p_add">+					 struct vhost_vring_state)</span>
<span class="p_add">+/* Get busy loop timeout (in us) */</span>
<span class="p_add">+#define VHOST_GET_VRING_BUSYLOOP_TIMEOUT _IOW(VHOST_VIRTIO, 0x24,	\</span>
<span class="p_add">+					 struct vhost_vring_state)</span>
<span class="p_add">+</span>
<span class="p_add">+/* VHOST_NET specific defines */</span>
<span class="p_add">+</span>
<span class="p_add">+/* Attach virtio net ring to a raw socket, or tap device.</span>
<span class="p_add">+ * The socket must be already bound to an ethernet device, this device will be</span>
<span class="p_add">+ * used for transmit.  Pass fd -1 to unbind from the socket and the transmit</span>
<span class="p_add">+ * device.  This can be used to stop the ring (e.g. for migration). */</span>
<span class="p_add">+#define VHOST_NET_SET_BACKEND _IOW(VHOST_VIRTIO, 0x30, struct vhost_vring_file)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Feature bits */</span>
<span class="p_add">+/* Log all write descriptors. Can be changed while device is active. */</span>
<span class="p_add">+#define VHOST_F_LOG_ALL 26</span>
<span class="p_add">+/* vhost-net should add virtio_net_hdr for RX, and strip for TX packets. */</span>
<span class="p_add">+#define VHOST_NET_F_VIRTIO_NET_HDR 27</span>
<span class="p_add">+</span>
<span class="p_add">+/* VHOST_SCSI specific definitions */</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Used by QEMU userspace to ensure a consistent vhost-scsi ABI.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * ABI Rev 0: July 2012 version starting point for v3.6-rc merge candidate +</span>
<span class="p_add">+ *            RFC-v2 vhost-scsi userspace.  Add GET_ABI_VERSION ioctl usage</span>
<span class="p_add">+ * ABI Rev 1: January 2013. Ignore vhost_tpgt filed in struct vhost_scsi_target.</span>
<span class="p_add">+ *            All the targets under vhost_wwpn can be seen and used by guset.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define VHOST_SCSI_ABI_VERSION	1</span>
<span class="p_add">+</span>
<span class="p_add">+struct vhost_scsi_target {</span>
<span class="p_add">+	int abi_version;</span>
<span class="p_add">+	char vhost_wwpn[224]; /* TRANSPORT_IQN_LEN */</span>
<span class="p_add">+	unsigned short vhost_tpgt;</span>
<span class="p_add">+	unsigned short reserved;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define VHOST_SCSI_SET_ENDPOINT _IOW(VHOST_VIRTIO, 0x40, struct vhost_scsi_target)</span>
<span class="p_add">+#define VHOST_SCSI_CLEAR_ENDPOINT _IOW(VHOST_VIRTIO, 0x41, struct vhost_scsi_target)</span>
<span class="p_add">+/* Changing this breaks userspace. */</span>
<span class="p_add">+#define VHOST_SCSI_GET_ABI_VERSION _IOW(VHOST_VIRTIO, 0x42, int)</span>
<span class="p_add">+/* Set and get the events missed flag */</span>
<span class="p_add">+#define VHOST_SCSI_SET_EVENTS_MISSED _IOW(VHOST_VIRTIO, 0x43, __u32)</span>
<span class="p_add">+#define VHOST_SCSI_GET_EVENTS_MISSED _IOW(VHOST_VIRTIO, 0x44, __u32)</span>
<span class="p_add">+</span>
<span class="p_add">+/* VHOST_VSOCK specific defines */</span>
<span class="p_add">+</span>
<span class="p_add">+#define VHOST_VSOCK_SET_GUEST_CID	_IOW(VHOST_VIRTIO, 0x60, __u64)</span>
<span class="p_add">+#define VHOST_VSOCK_SET_RUNNING		_IOW(VHOST_VIRTIO, 0x61, int)</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/tools/perf/MANIFEST b/tools/perf/MANIFEST</span>
<span class="p_header">index 513f52a484fd..62072822dc85 100644</span>
<span class="p_header">--- a/tools/perf/MANIFEST</span>
<span class="p_header">+++ b/tools/perf/MANIFEST</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> tools/include/uapi/linux/mman.h</span>
 tools/include/uapi/linux/perf_event.h
 tools/include/uapi/linux/sched.h
 tools/include/uapi/linux/stat.h
<span class="p_add">+tools/include/uapi/linux/vhost.h</span>
 tools/include/uapi/sound/asound.h
 tools/include/linux/poison.h
 tools/include/linux/rbtree.h
<span class="p_header">diff --git a/tools/perf/check-headers.sh b/tools/perf/check-headers.sh</span>
<span class="p_header">index 1f009506ff63..932fda54b8a6 100755</span>
<span class="p_header">--- a/tools/perf/check-headers.sh</span>
<span class="p_header">+++ b/tools/perf/check-headers.sh</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"> include/uapi/linux/kvm.h</span>
 include/uapi/linux/perf_event.h
 include/uapi/linux/sched.h
 include/uapi/linux/stat.h
<span class="p_add">+include/uapi/linux/vhost.h</span>
 include/uapi/sound/asound.h
 include/linux/hash.h
 include/uapi/linux/hw_breakpoint.h

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



