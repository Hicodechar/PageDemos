
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/3] x86: Remap GDT tables in the Fixmap section - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/3] x86: Remap GDT tables in the Fixmap section</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=160651">Thomas Garnier</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 26, 2017, 4:59 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170126165940.30799-2-thgarnie@google.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9539807/mbox/"
   >mbox</a>
|
   <a href="/patch/9539807/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9539807/">/patch/9539807/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	45DF4604A0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Jan 2017 17:07:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3894926B39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Jan 2017 17:07:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2AFAC27D29; Thu, 26 Jan 2017 17:07:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2073826B39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Jan 2017 17:07:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753845AbdAZRHE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 26 Jan 2017 12:07:04 -0500
Received: from mail-pg0-f49.google.com ([74.125.83.49]:36013 &quot;EHLO
	mail-pg0-f49.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753220AbdAZRHC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 26 Jan 2017 12:07:02 -0500
Received: by mail-pg0-f49.google.com with SMTP id 3so15209891pgj.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 26 Jan 2017 09:07:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=keBjFg3ftCXkxu4Uyc6lFZ7Nr+gQEPH1M314Vsr/q3s=;
	b=MH1fi7Z00JHrVRxq8cQJ+GC0S7lbB9939NfCP0q25xCzVIxOJ6mfH/zzEXsvqZT4ib
	0qrIKtLBWiP7gy/boH3mW3Ilg3zwRIViMkM+r21A/Z8Bqs1aHpEWTiS2dNZNvaL6BfPm
	Z011XTzyOwNbfjcyUXVZ7coBeP8KXv0/xRUSK//op+Meb6H/CIZJZ/eRrrrmT3Z7Fa6O
	Zi0GKPX8pZBHcUBm6sPLdAjLyS3Hc41KefWFkrKCvEyzf/nnIdHnL7+kIIgcv08x6w7C
	2t9PKHsCQdAwuKLC1q3tq450AjcQ37EOTwlnlbAUfQ+SsQ+9EQ4ebOKp93sivPFZc7gh
	JM6g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=keBjFg3ftCXkxu4Uyc6lFZ7Nr+gQEPH1M314Vsr/q3s=;
	b=p5eV36soZIVWPv8aO97Ziej7cX6TYcEQD7DM2bSoaOPFvmkL5HQqAPMYGn2VlZKo8y
	+ZUx4GpoSm/Sag0t8ouL72cW21NvfMzQpwh/VYxsHcDiBw3OsoOrcsFL5BVoYNnuyglr
	bZkzfrrRfdB06l2S1mnIJb2bpy4wD6WFpO+zBMs0HmcQkxZjbMf3EgMgsYj3kLjgKadL
	IUMd70stEYCdNmwcN26C1iOhlw8qD6Pk5sudIklwqpThjUNsjiBVApHL420KHC1+/KeQ
	JZnUKz6keSS4m0b9EzhRoEsLf/puFNjNYT6jpLqgKTBL8XGOlD4dTsCtGOa+K6yrgU41
	SWYA==
X-Gm-Message-State: AIkVDXIRJ2VS+3f7M29Ze3QHDHqQqtGxFAx0ykqZ+z69X1fBqnd4yo3HY1zoV0vCij1XWuXA
X-Received: by 10.84.143.203 with SMTP id 69mr5572761plz.68.1485449987112;
	Thu, 26 Jan 2017 08:59:47 -0800 (PST)
Received: from skynet.sea.corp.google.com ([100.100.206.185])
	by smtp.gmail.com with ESMTPSA id
	y6sm4723469pge.16.2017.01.26.08.59.46
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Thu, 26 Jan 2017 08:59:46 -0800 (PST)
From: Thomas Garnier &lt;thgarnie@google.com&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, Thomas Garnier &lt;thgarnie@google.com&gt;,
	Kees Cook &lt;keescook@chromium.org&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;,
	Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;,
	Borislav Petkov &lt;bp@suse.de&gt;, Andy Lutomirski &lt;luto@amacapital.net&gt;,
	&quot;Rafael J . Wysocki&quot; &lt;rjw@rjwysocki.net&gt;,
	Len Brown &lt;len.brown@intel.com&gt;, Pavel Machek &lt;pavel@ucw.cz&gt;,
	Jiri Kosina &lt;jikos@kernel.org&gt;, Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, Rusty Russell &lt;rusty@rustcorp.com.au&gt;,
	Christian Borntraeger &lt;borntraeger@de.ibm.com&gt;,
	Fenghua Yu &lt;fenghua.yu@intel.com&gt;, He Chen &lt;he.chen@linux.intel.com&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;,
	&quot;Luis R . Rodriguez&quot; &lt;mcgrof@kernel.org&gt;,
	Adam Buchbinder &lt;adam.buchbinder@gmail.com&gt;,
	Stanislaw Gruszka &lt;sgruszka@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Chen Yucong &lt;slaoub@gmail.com&gt;,
	Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;,
	David Vrabel &lt;david.vrabel@citrix.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Andi Kleen &lt;ak@linux.intel.com&gt;, Jiri Olsa &lt;jolsa@redhat.com&gt;,
	Prarit Bhargava &lt;prarit@redhat.com&gt;,
	Michael Ellerman &lt;mpe@ellerman.id.au&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;
Cc: x86@kernel.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, linux-pm@vger.kernel.org,
	linux-efi@vger.kernel.org, xen-devel@lists.xenproject.org,
	lguest@lists.ozlabs.org, kvm@vger.kernel.org,
	kernel-hardening@lists.openwall.com
Subject: [PATCH v2 2/3] x86: Remap GDT tables in the Fixmap section
Date: Thu, 26 Jan 2017 08:59:39 -0800
Message-Id: &lt;20170126165940.30799-2-thgarnie@google.com&gt;
X-Mailer: git-send-email 2.11.0.483.g087da7b7c-goog
In-Reply-To: &lt;20170126165940.30799-1-thgarnie@google.com&gt;
References: &lt;20170126165940.30799-1-thgarnie@google.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=160651">Thomas Garnier</a> - Jan. 26, 2017, 4:59 p.m.</div>
<pre class="content">
Each processor holds a GDT in its per-cpu structure. The sgdt
instruction gives the base address of the current GDT. This address can
be used to bypass KASLR memory randomization. With another bug, an
attacker could target other per-cpu structures or deduce the base of
the main memory section (PAGE_OFFSET).

This patch relocates the GDT table for each processor inside the
Fixmap section. The space is reserved based on number of supported
processors.

For consistency, the remapping is done by default on 32 and 64 bit.

Each processor switches to its remapped GDT at the end of
initialization. For hibernation, the main processor returns with the
original GDT and switches back to the remapping at completion.

This patch was tested on both architectures. Hibernation and KVM were
both tested specially for their usage of the GDT.
<span class="signed-off-by">
Signed-off-by: Thomas Garnier &lt;thgarnie@google.com&gt;</span>
---
Based on next-20170125
---
 arch/x86/entry/vdso/vma.c             |  2 +-
 arch/x86/include/asm/desc.h           | 23 +++++++++++++++++++----
 arch/x86/include/asm/fixmap.h         |  4 ++++
 arch/x86/include/asm/processor.h      |  1 +
 arch/x86/include/asm/stackprotector.h |  2 +-
 arch/x86/kernel/acpi/sleep.c          |  2 +-
 arch/x86/kernel/apm_32.c              |  6 +++---
 arch/x86/kernel/cpu/common.c          | 26 ++++++++++++++++++++++++--
 arch/x86/kernel/setup_percpu.c        |  2 +-
 arch/x86/kernel/smpboot.c             |  2 +-
 arch/x86/platform/efi/efi_32.c        |  4 ++--
 arch/x86/power/cpu.c                  |  7 +++++--
 arch/x86/xen/enlighten.c              |  2 +-
 arch/x86/xen/smp.c                    |  2 +-
 drivers/lguest/x86/core.c             |  6 +++---
 drivers/pnp/pnpbios/bioscalls.c       | 10 +++++-----
 16 files changed, 73 insertions(+), 28 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10820f6cefbf..acae4ef04cdf 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -353,7 +353,7 @@</span> <span class="p_context"> static void vgetcpu_cpu_init(void *arg)</span>
 	d.p = 1;		/* Present */
 	d.d = 1;		/* 32-bit */
 
<span class="p_del">-	write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_PER_CPU, &amp;d, DESCTYPE_S);</span>
<span class="p_add">+	write_gdt_entry(get_cpu_direct_gdt(cpu), GDT_ENTRY_PER_CPU, &amp;d, DESCTYPE_S);</span>
 }
 
 static int vgetcpu_online(unsigned int cpu)
<span class="p_header">diff --git a/arch/x86/include/asm/desc.h b/arch/x86/include/asm/desc.h</span>
<span class="p_header">index 12080d87da3b..4cc176f57b78 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/desc.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/desc.h</span>
<span class="p_chunk">@@ -4,6 +4,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/desc_defs.h&gt;
 #include &lt;asm/ldt.h&gt;
 #include &lt;asm/mmu.h&gt;
<span class="p_add">+#include &lt;asm/fixmap.h&gt;</span>
 
 #include &lt;linux/smp.h&gt;
 #include &lt;linux/percpu.h&gt;
<span class="p_chunk">@@ -45,11 +46,25 @@</span> <span class="p_context"> struct gdt_page {</span>
 
 DECLARE_PER_CPU_PAGE_ALIGNED(struct gdt_page, gdt_page);
 
<span class="p_del">-static inline struct desc_struct *get_cpu_gdt_table(unsigned int cpu)</span>
<span class="p_add">+/* Provide the original GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_cpu_direct_gdt(unsigned int cpu)</span>
 {
 	return per_cpu(gdt_page, cpu).gdt;
 }
 
<span class="p_add">+/* Get the fixmap index for a specific processor */</span>
<span class="p_add">+static inline unsigned int get_cpu_fixmap_gdt_index(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return FIX_GDT_REMAP_BEGIN + cpu;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Provide the fixmap address of the remapped GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_cpu_fixmap_gdt(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int idx = get_cpu_fixmap_gdt_index(cpu);</span>
<span class="p_add">+	return (struct desc_struct *)__fix_to_virt(idx);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_X86_64
 
 static inline void pack_gate(gate_desc *gate, unsigned type, unsigned long func,
<span class="p_chunk">@@ -174,7 +189,7 @@</span> <span class="p_context"> static inline void set_tssldt_descriptor(void *d, unsigned long addr, unsigned t</span>
 
 static inline void __set_tss_desc(unsigned cpu, unsigned int entry, void *addr)
 {
<span class="p_del">-	struct desc_struct *d = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *d = get_cpu_direct_gdt(cpu);</span>
 	tss_desc tss;
 
 	/*
<span class="p_chunk">@@ -202,7 +217,7 @@</span> <span class="p_context"> static inline void native_set_ldt(const void *addr, unsigned int entries)</span>
 
 		set_tssldt_descriptor(&amp;ldt, (unsigned long)addr, DESC_LDT,
 				      entries * LDT_ENTRY_SIZE - 1);
<span class="p_del">-		write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_LDT,</span>
<span class="p_add">+		write_gdt_entry(get_cpu_direct_gdt(cpu), GDT_ENTRY_LDT,</span>
 				&amp;ldt, DESC_LDT);
 		asm volatile(&quot;lldt %w0&quot;::&quot;q&quot; (GDT_ENTRY_LDT*8));
 	}
<span class="p_chunk">@@ -244,7 +259,7 @@</span> <span class="p_context"> static inline unsigned long native_store_tr(void)</span>
 
 static inline void native_load_tls(struct thread_struct *t, unsigned int cpu)
 {
<span class="p_del">-	struct desc_struct *gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *gdt = get_cpu_direct_gdt(cpu);</span>
 	unsigned int i;
 
 	for (i = 0; i &lt; GDT_ENTRY_TLS_ENTRIES; i++)
<span class="p_header">diff --git a/arch/x86/include/asm/fixmap.h b/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">index c46289799b02..8b913b5e9383 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -100,6 +100,10 @@</span> <span class="p_context"> enum fixed_addresses {</span>
 #ifdef	CONFIG_X86_INTEL_MID
 	FIX_LNW_VRTC,
 #endif
<span class="p_add">+	/* Fixmap entries to remap the GDTs, one per processor. */</span>
<span class="p_add">+	FIX_GDT_REMAP_BEGIN,</span>
<span class="p_add">+	FIX_GDT_REMAP_END = FIX_GDT_REMAP_BEGIN + NR_CPUS - 1,</span>
<span class="p_add">+</span>
 	__end_of_permanent_fixed_addresses,
 
 	/*
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 1be64da0384e..22801fd345dc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -705,6 +705,7 @@</span> <span class="p_context"> extern struct desc_ptr		early_gdt_descr;</span>
 
 extern void cpu_set_gdt(int);
 extern void switch_to_new_gdt(int);
<span class="p_add">+extern void load_fixmap_gdt(int);</span>
 extern void load_percpu_segment(int);
 extern void cpu_init(void);
 
<span class="p_header">diff --git a/arch/x86/include/asm/stackprotector.h b/arch/x86/include/asm/stackprotector.h</span>
<span class="p_header">index 58505f01962f..422426b8aba7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/stackprotector.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/stackprotector.h</span>
<span class="p_chunk">@@ -87,7 +87,7 @@</span> <span class="p_context"> static inline void setup_stack_canary_segment(int cpu)</span>
 {
 #ifdef CONFIG_X86_32
 	unsigned long canary = (unsigned long)&amp;per_cpu(stack_canary, cpu);
<span class="p_del">-	struct desc_struct *gdt_table = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *gdt_table = get_cpu_direct_gdt(cpu);</span>
 	struct desc_struct desc;
 
 	desc = gdt_table[GDT_ENTRY_STACK_CANARY];
<span class="p_header">diff --git a/arch/x86/kernel/acpi/sleep.c b/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_header">index 48587335ede8..d13e6d156c22 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_chunk">@@ -101,7 +101,7 @@</span> <span class="p_context"> int x86_acpi_suspend_lowlevel(void)</span>
 #ifdef CONFIG_SMP
 	initial_stack = (unsigned long)temp_stack + sizeof(temp_stack);
 	early_gdt_descr.address =
<span class="p_del">-			(unsigned long)get_cpu_gdt_table(smp_processor_id());</span>
<span class="p_add">+			(unsigned long)get_cpu_direct_gdt(smp_processor_id());</span>
 	initial_gs = per_cpu_offset(smp_processor_id());
 #endif
 	initial_code = (unsigned long)wakeup_long64;
<span class="p_header">diff --git a/arch/x86/kernel/apm_32.c b/arch/x86/kernel/apm_32.c</span>
<span class="p_header">index 45d44c173cf9..458dbe18a860 100644</span>
<span class="p_header">--- a/arch/x86/kernel/apm_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/apm_32.c</span>
<span class="p_chunk">@@ -608,7 +608,7 @@</span> <span class="p_context"> static long __apm_bios_call(void *_call)</span>
 
 	cpu = get_cpu();
 	BUG_ON(cpu != 0);
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_direct_gdt(cpu);</span>
 	save_desc_40 = gdt[0x40 / 8];
 	gdt[0x40 / 8] = bad_bios_desc;
 
<span class="p_chunk">@@ -684,7 +684,7 @@</span> <span class="p_context"> static long __apm_bios_call_simple(void *_call)</span>
 
 	cpu = get_cpu();
 	BUG_ON(cpu != 0);
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_direct_gdt(cpu);</span>
 	save_desc_40 = gdt[0x40 / 8];
 	gdt[0x40 / 8] = bad_bios_desc;
 
<span class="p_chunk">@@ -2351,7 +2351,7 @@</span> <span class="p_context"> static int __init apm_init(void)</span>
 	 * Note we only set APM segments on CPU zero, since we pin the APM
 	 * code to that CPU.
 	 */
<span class="p_del">-	gdt = get_cpu_gdt_table(0);</span>
<span class="p_add">+	gdt = get_cpu_direct_gdt(0);</span>
 	set_desc_base(&amp;gdt[APM_CS &gt;&gt; 3],
 		 (unsigned long)__va((unsigned long)apm_info.bios.cseg &lt;&lt; 4));
 	set_desc_base(&amp;gdt[APM_CS_16 &gt;&gt; 3],
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 5ba74f280448..15f06cf3e3d4 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -444,6 +444,23 @@</span> <span class="p_context"> void load_percpu_segment(int cpu)</span>
 	load_stack_canary_segment();
 }
 
<span class="p_add">+/* Setup the fixmap mapping only once per-processor */</span>
<span class="p_add">+static inline void setup_fixmap_gdt(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	__set_fixmap(get_cpu_fixmap_gdt_index(cpu),</span>
<span class="p_add">+		     __pa(get_cpu_direct_gdt(cpu)), PAGE_KERNEL);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Load a fixmap remapping of the per-cpu GDT */</span>
<span class="p_add">+void load_fixmap_gdt(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct desc_ptr gdt_descr;</span>
<span class="p_add">+</span>
<span class="p_add">+	gdt_descr.address = (long)get_cpu_fixmap_gdt(cpu);</span>
<span class="p_add">+	gdt_descr.size = GDT_SIZE - 1;</span>
<span class="p_add">+	load_gdt(&amp;gdt_descr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Current gdt points %fs at the &quot;master&quot; per-cpu area: after this,
  * it&#39;s on the real one.
<span class="p_chunk">@@ -452,11 +469,10 @@</span> <span class="p_context"> void switch_to_new_gdt(int cpu)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_del">-	gdt_descr.address = (long)get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt_descr.address = (long)get_cpu_direct_gdt(cpu);</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 	/* Reload the per-cpu base */
<span class="p_del">-</span>
 	load_percpu_segment(cpu);
 }
 
<span class="p_chunk">@@ -1511,6 +1527,9 @@</span> <span class="p_context"> void cpu_init(void)</span>
 
 	if (is_uv_system())
 		uv_cpu_init();
<span class="p_add">+</span>
<span class="p_add">+	setup_fixmap_gdt(cpu);</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 
 #else
<span class="p_chunk">@@ -1566,6 +1585,9 @@</span> <span class="p_context"> void cpu_init(void)</span>
 	dbg_restore_debug_regs();
 
 	fpu__init_cpu();
<span class="p_add">+</span>
<span class="p_add">+	setup_fixmap_gdt(cpu);</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 #endif
 
<span class="p_header">diff --git a/arch/x86/kernel/setup_percpu.c b/arch/x86/kernel/setup_percpu.c</span>
<span class="p_header">index 9820d6d977c6..e413c7607316 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup_percpu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup_percpu.c</span>
<span class="p_chunk">@@ -160,7 +160,7 @@</span> <span class="p_context"> static inline void setup_percpu_segment(int cpu)</span>
 	pack_descriptor(&amp;gdt, per_cpu_offset(cpu), 0xFFFFF,
 			0x2 | DESCTYPE_S, 0x8);
 	gdt.s = 1;
<span class="p_del">-	write_gdt_entry(get_cpu_gdt_table(cpu),</span>
<span class="p_add">+	write_gdt_entry(get_cpu_direct_gdt(cpu),</span>
 			GDT_ENTRY_PERCPU, &amp;gdt, DESCTYPE_S);
 #endif
 }
<span class="p_header">diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c</span>
<span class="p_header">index 46732dc3b73c..0b1096685cda 100644</span>
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -974,7 +974,7 @@</span> <span class="p_context"> static int do_boot_cpu(int apicid, int cpu, struct task_struct *idle)</span>
 	unsigned long timeout;
 
 	idle-&gt;thread.sp = (unsigned long)task_pt_regs(idle);
<span class="p_del">-	early_gdt_descr.address = (unsigned long)get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	early_gdt_descr.address = (unsigned long)get_cpu_direct_gdt(cpu);</span>
 	initial_code = (unsigned long)start_secondary;
 	initial_stack  = idle-&gt;thread.sp;
 
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index cef39b097649..72d41dddbaf5 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -68,7 +68,7 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	load_cr3(initial_page_table);
 	__flush_tlb_all();
 
<span class="p_del">-	gdt_descr.address = __pa(get_cpu_gdt_table(0));</span>
<span class="p_add">+	gdt_descr.address = __pa(get_cpu_direct_gdt(0));</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_del">-	gdt_descr.address = (unsigned long)get_cpu_gdt_table(0);</span>
<span class="p_add">+	gdt_descr.address = (unsigned long)get_cpu_direct_gdt(0);</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_header">diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c</span>
<span class="p_header">index 66ade16c7693..644f80341f12 100644</span>
<span class="p_header">--- a/arch/x86/power/cpu.c</span>
<span class="p_header">+++ b/arch/x86/power/cpu.c</span>
<span class="p_chunk">@@ -95,7 +95,7 @@</span> <span class="p_context"> static void __save_processor_state(struct saved_context *ctxt)</span>
 	 * &#39;pmode_gdt&#39; in wakeup_start.
 	 */
 	ctxt-&gt;gdt_desc.size = GDT_SIZE - 1;
<span class="p_del">-	ctxt-&gt;gdt_desc.address = (unsigned long)get_cpu_gdt_table(smp_processor_id());</span>
<span class="p_add">+	ctxt-&gt;gdt_desc.address = (unsigned long)get_cpu_direct_gdt(smp_processor_id());</span>
 
 	store_tr(ctxt-&gt;tr);
 
<span class="p_chunk">@@ -162,7 +162,7 @@</span> <span class="p_context"> static void fix_processor_context(void)</span>
 	int cpu = smp_processor_id();
 	struct tss_struct *t = &amp;per_cpu(cpu_tss, cpu);
 #ifdef CONFIG_X86_64
<span class="p_del">-	struct desc_struct *desc = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *desc = get_cpu_direct_gdt(cpu);</span>
 	tss_desc tss;
 #endif
 	set_tss_desc(cpu, t);	/*
<span class="p_chunk">@@ -183,6 +183,9 @@</span> <span class="p_context"> static void fix_processor_context(void)</span>
 	load_mm_ldt(current-&gt;active_mm);	/* This does lldt */
 
 	fpu__resume_cpu();
<span class="p_add">+</span>
<span class="p_add">+	/* The processor is back on the direct GDT, load back the fixmap */</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 
 /**
<span class="p_header">diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c</span>
<span class="p_header">index 51ef95232725..b1a9baad2f0d 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten.c</span>
<span class="p_chunk">@@ -695,7 +695,7 @@</span> <span class="p_context"> static void load_TLS_descriptor(struct thread_struct *t,</span>
 
 	*shadow = t-&gt;tls_array[i];
 
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_direct_gdt(cpu);</span>
 	maddr = arbitrary_virt_to_machine(&amp;gdt[GDT_ENTRY_TLS_MIN+i]);
 	mc = __xen_mc_entry(0);
 
<span class="p_header">diff --git a/arch/x86/xen/smp.c b/arch/x86/xen/smp.c</span>
<span class="p_header">index 311acad7dad2..3de63fb4d833 100644</span>
<span class="p_header">--- a/arch/x86/xen/smp.c</span>
<span class="p_header">+++ b/arch/x86/xen/smp.c</span>
<span class="p_chunk">@@ -401,7 +401,7 @@</span> <span class="p_context"> cpu_initialize_context(unsigned int cpu, struct task_struct *idle)</span>
 	if (ctxt == NULL)
 		return -ENOMEM;
 
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_direct_gdt(cpu);</span>
 
 #ifdef CONFIG_X86_32
 	/* Note: PVH is not yet supported on x86_32. */
<span class="p_header">diff --git a/drivers/lguest/x86/core.c b/drivers/lguest/x86/core.c</span>
<span class="p_header">index d71f6323ac00..aa9d420913c5 100644</span>
<span class="p_header">--- a/drivers/lguest/x86/core.c</span>
<span class="p_header">+++ b/drivers/lguest/x86/core.c</span>
<span class="p_chunk">@@ -504,7 +504,7 @@</span> <span class="p_context"> void __init lguest_arch_host_init(void)</span>
 		 * byte, not the size, hence the &quot;-1&quot;).
 		 */
 		state-&gt;host_gdt_desc.size = GDT_SIZE-1;
<span class="p_del">-		state-&gt;host_gdt_desc.address = (long)get_cpu_gdt_table(i);</span>
<span class="p_add">+		state-&gt;host_gdt_desc.address = (long)get_cpu_direct_gdt(i);</span>
 
 		/*
 		 * All CPUs on the Host use the same Interrupt Descriptor
<span class="p_chunk">@@ -554,8 +554,8 @@</span> <span class="p_context"> void __init lguest_arch_host_init(void)</span>
 		 * The Host needs to be able to use the LGUEST segments on this
 		 * CPU, too, so put them in the Host GDT.
 		 */
<span class="p_del">-		get_cpu_gdt_table(i)[GDT_ENTRY_LGUEST_CS] = FULL_EXEC_SEGMENT;</span>
<span class="p_del">-		get_cpu_gdt_table(i)[GDT_ENTRY_LGUEST_DS] = FULL_SEGMENT;</span>
<span class="p_add">+		get_cpu_direct_gdt(i)[GDT_ENTRY_LGUEST_CS] = FULL_EXEC_SEGMENT;</span>
<span class="p_add">+		get_cpu_direct_gdt(i)[GDT_ENTRY_LGUEST_DS] = FULL_SEGMENT;</span>
 	}
 
 	/*
<span class="p_header">diff --git a/drivers/pnp/pnpbios/bioscalls.c b/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_header">index 438d4c72c7b3..ce7288c5864c 100644</span>
<span class="p_header">--- a/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_header">+++ b/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_chunk">@@ -54,7 +54,7 @@</span> <span class="p_context"> __asm__(&quot;.text			\n&quot;</span>
 
 #define Q2_SET_SEL(cpu, selname, address, size) \
 do { \
<span class="p_del">-	struct desc_struct *gdt = get_cpu_gdt_table((cpu)); \</span>
<span class="p_add">+	struct desc_struct *gdt = get_cpu_direct_gdt((cpu)); \</span>
 	set_desc_base(&amp;gdt[(selname) &gt;&gt; 3], (u32)(address)); \
 	set_desc_limit(&amp;gdt[(selname) &gt;&gt; 3], (size) - 1); \
 } while(0)
<span class="p_chunk">@@ -95,8 +95,8 @@</span> <span class="p_context"> static inline u16 call_pnp_bios(u16 func, u16 arg1, u16 arg2, u16 arg3,</span>
 		return PNP_FUNCTION_NOT_SUPPORTED;
 
 	cpu = get_cpu();
<span class="p_del">-	save_desc_40 = get_cpu_gdt_table(cpu)[0x40 / 8];</span>
<span class="p_del">-	get_cpu_gdt_table(cpu)[0x40 / 8] = bad_bios_desc;</span>
<span class="p_add">+	save_desc_40 = get_cpu_direct_gdt(cpu)[0x40 / 8];</span>
<span class="p_add">+	get_cpu_direct_gdt(cpu)[0x40 / 8] = bad_bios_desc;</span>
 
 	/* On some boxes IRQ&#39;s during PnP BIOS calls are deadly.  */
 	spin_lock_irqsave(&amp;pnp_bios_lock, flags);
<span class="p_chunk">@@ -134,7 +134,7 @@</span> <span class="p_context"> static inline u16 call_pnp_bios(u16 func, u16 arg1, u16 arg2, u16 arg3,</span>
 			     :&quot;memory&quot;);
 	spin_unlock_irqrestore(&amp;pnp_bios_lock, flags);
 
<span class="p_del">-	get_cpu_gdt_table(cpu)[0x40 / 8] = save_desc_40;</span>
<span class="p_add">+	get_cpu_direct_gdt(cpu)[0x40 / 8] = save_desc_40;</span>
 	put_cpu();
 
 	/* If we get here and this is set then the PnP BIOS faulted on us. */
<span class="p_chunk">@@ -477,7 +477,7 @@</span> <span class="p_context"> void pnpbios_calls_init(union pnp_bios_install_struct *header)</span>
 	pnp_bios_callpoint.segment = PNP_CS16;
 
 	for_each_possible_cpu(i) {
<span class="p_del">-		struct desc_struct *gdt = get_cpu_gdt_table(i);</span>
<span class="p_add">+		struct desc_struct *gdt = get_cpu_direct_gdt(i);</span>
 		if (!gdt)
 			continue;
 		set_desc_base(&amp;gdt[GDT_ENTRY_PNPBIOS_CS32],

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



