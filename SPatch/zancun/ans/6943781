
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[08/11] thp: Fix zap_huge_pmd() for DAX - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [08/11] thp: Fix zap_huge_pmd() for DAX</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=66491">Wilcox, Matthew R</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 4, 2015, 7:58 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1438718285-21168-9-git-send-email-matthew.r.wilcox@intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6943781/mbox/"
   >mbox</a>
|
   <a href="/patch/6943781/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6943781/">/patch/6943781/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id A1FD0C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 19:59:09 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B7252205B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 19:59:08 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id C44AA20437
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 19:59:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932485AbbHDT67 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 4 Aug 2015 15:58:59 -0400
Received: from mga11.intel.com ([192.55.52.93]:20469 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754204AbbHDT6P (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 4 Aug 2015 15:58:15 -0400
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by fmsmga102.fm.intel.com with ESMTP; 04 Aug 2015 12:58:13 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.15,611,1432623600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;742164413&quot;
Received: from wfmiller-mobl.amr.corp.intel.com (HELO thog.int.wil.cx)
	([10.252.207.212])
	by orsmga001.jf.intel.com with SMTP; 04 Aug 2015 12:58:12 -0700
Received: by thog.int.wil.cx (Postfix, from userid 1000)
	id 9237B5FA4A; Tue,  4 Aug 2015 15:58:10 -0400 (EDT)
From: Matthew Wilcox &lt;matthew.r.wilcox@intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	willy@linux.intel.com
Subject: [PATCH 08/11] thp: Fix zap_huge_pmd() for DAX
Date: Tue,  4 Aug 2015 15:58:02 -0400
Message-Id: &lt;1438718285-21168-9-git-send-email-matthew.r.wilcox@intel.com&gt;
X-Mailer: git-send-email 2.4.6
In-Reply-To: &lt;1438718285-21168-1-git-send-email-matthew.r.wilcox@intel.com&gt;
References: &lt;1438718285-21168-1-git-send-email-matthew.r.wilcox@intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66491">Wilcox, Matthew R</a> - Aug. 4, 2015, 7:58 p.m.</div>
<pre class="content">
<span class="from">From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;</span>

The original DAX code assumed that pgtable_t was a pointer, which isn&#39;t
true on all architectures.  Restructure the code to not rely on that
assumption.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
[further fixes from Matthew integrated into this patch]
<span class="signed-off-by">Signed-off-by: Matthew Wilcox &lt;willy@linux.intel.com&gt;</span>
---
 mm/huge_memory.c | 71 +++++++++++++++++++++++++-------------------------------
 1 file changed, 31 insertions(+), 40 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 326d17e..b51bed1 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1426,50 +1426,41 @@</span> <span class="p_context"> out:</span>
 int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
 		 pmd_t *pmd, unsigned long addr)
 {
<span class="p_add">+	pmd_t orig_pmd;</span>
 	spinlock_t *ptl;
<span class="p_del">-	int ret = 0;</span>
 
<span class="p_del">-	if (__pmd_trans_huge_lock(pmd, vma, &amp;ptl) == 1) {</span>
<span class="p_del">-		pgtable_t pgtable;</span>
<span class="p_del">-		pmd_t orig_pmd;</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * For architectures like ppc64 we look at deposited pgtable</span>
<span class="p_del">-		 * when calling pmdp_huge_get_and_clear. So do the</span>
<span class="p_del">-		 * pgtable_trans_huge_withdraw after finishing pmdp related</span>
<span class="p_del">-		 * operations.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,</span>
<span class="p_del">-							tlb-&gt;fullmm);</span>
<span class="p_del">-		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);</span>
<span class="p_del">-		if (vma_is_dax(vma)) {</span>
<span class="p_del">-			if (is_huge_zero_pmd(orig_pmd)) {</span>
<span class="p_del">-				pgtable = NULL;</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				spin_unlock(ptl);</span>
<span class="p_del">-				return 1;</span>
<span class="p_del">-			}</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			pgtable = pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd);</span>
<span class="p_del">-		}</span>
<span class="p_del">-		if (is_huge_zero_pmd(orig_pmd)) {</span>
<span class="p_del">-			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_del">-			spin_unlock(ptl);</span>
<span class="p_add">+	if (__pmd_trans_huge_lock(pmd, vma, &amp;ptl) != 1)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * For architectures like ppc64 we look at deposited pgtable</span>
<span class="p_add">+	 * when calling pmdp_huge_get_and_clear. So do the</span>
<span class="p_add">+	 * pgtable_trans_huge_withdraw after finishing pmdp related</span>
<span class="p_add">+	 * operations.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,</span>
<span class="p_add">+			tlb-&gt;fullmm);</span>
<span class="p_add">+	tlb_remove_pmd_tlb_entry(tlb, pmd, addr);</span>
<span class="p_add">+	if (vma_is_dax(vma)) {</span>
<span class="p_add">+		spin_unlock(ptl);</span>
<span class="p_add">+		if (is_huge_zero_pmd(orig_pmd))</span>
 			put_huge_zero_page();
<span class="p_del">-		} else {</span>
<span class="p_del">-			struct page *page = pmd_page(orig_pmd);</span>
<span class="p_del">-			page_remove_rmap(page);</span>
<span class="p_del">-			VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_del">-			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="p_del">-			VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_del">-			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_del">-			spin_unlock(ptl);</span>
<span class="p_del">-			tlb_remove_page(tlb, page);</span>
<span class="p_del">-		}</span>
<span class="p_del">-		if (pgtable)</span>
<span class="p_del">-			pte_free(tlb-&gt;mm, pgtable);</span>
<span class="p_del">-		ret = 1;</span>
<span class="p_add">+	} else if (is_huge_zero_pmd(orig_pmd)) {</span>
<span class="p_add">+		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));</span>
<span class="p_add">+		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+		spin_unlock(ptl);</span>
<span class="p_add">+		put_huge_zero_page();</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct page *page = pmd_page(orig_pmd);</span>
<span class="p_add">+		page_remove_rmap(page);</span>
<span class="p_add">+		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="p_add">+		add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="p_add">+		VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="p_add">+		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));</span>
<span class="p_add">+		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+		spin_unlock(ptl);</span>
<span class="p_add">+		tlb_remove_page(tlb, page);</span>
 	}
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return 1;</span>
 }
 
 int move_huge_pmd(struct vm_area_struct *vma, struct vm_area_struct *new_vma,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



