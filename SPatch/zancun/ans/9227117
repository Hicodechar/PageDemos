
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,06/46] arm64: dma-mapping: Use unsigned long for dma_attrs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,06/46] arm64: dma-mapping: Use unsigned long for dma_attrs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72608">Krzysztof Kozlowski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 13, 2016, 8:40 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1468399300-5399-6-git-send-email-k.kozlowski@samsung.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9227117/mbox/"
   >mbox</a>
|
   <a href="/patch/9227117/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9227117/">/patch/9227117/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EB37F6088F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Jul 2016 08:43:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DB9B727BFA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Jul 2016 08:43:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CFD6C27813; Wed, 13 Jul 2016 08:43:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AFCB027D85
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Jul 2016 08:42:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932135AbcGMImb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 13 Jul 2016 04:42:31 -0400
Received: from mailout1.w1.samsung.com ([210.118.77.11]:21825 &quot;EHLO
	mailout1.w1.samsung.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752920AbcGMImQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 13 Jul 2016 04:42:16 -0400
Received: from eucpsbgm1.samsung.com (unknown [203.254.199.244])
	by mailout1.w1.samsung.com
	(Oracle Communications Messaging Server 7.0.5.31.0 64bit (built May 5
	2014)) with ESMTP id &lt;0OA800F8MW62I930@mailout1.w1.samsung.com&gt; for
	linux-kernel@vger.kernel.org; Wed, 13 Jul 2016 09:42:02 +0100 (BST)
X-AuditID: cbfec7f4-f796c6d000001486-41-5785feda490f
Received: from eusync3.samsung.com ( [203.254.199.213])
	by eucpsbgm1.samsung.com (EUCPMTA) with SMTP id 68.90.05254.ADEF5875;
	Wed, 13 Jul 2016 09:42:02 +0100 (BST)
Received: from AMDC2174.DIGITAL.local ([106.120.53.17])
	by eusync3.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit (built May  5 2014))
	with ESMTPA id &lt;0OA800KINW5J0E10@eusync3.samsung.com&gt;; Wed,
	13 Jul 2016 09:42:02 +0100 (BST)
From: Krzysztof Kozlowski &lt;k.kozlowski@samsung.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, hch@infradead.org,
	Krzysztof Kozlowski &lt;k.kozlowski@samsung.com&gt;,
	Bartlomiej Zolnierkiewicz &lt;b.zolnierkie@samsung.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, linux-arm-kernel@lists.infradead.org
Subject: [PATCH v6 06/46] arm64: dma-mapping: Use unsigned long for dma_attrs
Date: Wed, 13 Jul 2016 10:40:57 +0200
Message-id: &lt;1468399300-5399-6-git-send-email-k.kozlowski@samsung.com&gt;
X-Mailer: git-send-email 1.9.1
In-reply-to: &lt;1468399300-5399-5-git-send-email-k.kozlowski@samsung.com&gt;
References: &lt;1468399167-28083-1-git-send-email-k.kozlowski@samsung.com&gt;
	&lt;1468399300-5399-1-git-send-email-k.kozlowski@samsung.com&gt;
	&lt;1468399300-5399-2-git-send-email-k.kozlowski@samsung.com&gt;
	&lt;1468399300-5399-3-git-send-email-k.kozlowski@samsung.com&gt;
	&lt;1468399300-5399-4-git-send-email-k.kozlowski@samsung.com&gt;
	&lt;1468399300-5399-5-git-send-email-k.kozlowski@samsung.com&gt;
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFprNLMWRmVeSWpSXmKPExsVy+t/xq7q3/rWGG1z+IGgxZ/0aNouNM9az
	Wrxf1sNocXrCIiaL1y8MLTY9vsZqcXnXHDaLlx9PsDhweKyZt4bRY/MKLY8TM36zeGxeUu/R
	t2UVo8fnTXIBbFFcNimpOZllqUX6dglcGVMbHQseeFe8ONXK3MC4zbqLkZNDQsBE4lDbVWYI
	W0ziwr31bF2MXBxCAksZJVbv/csC4TQySax6d4wNpIpNwFhi8/IlYLaIgK7Eque7mEGKmAWm
	MElMuXMeLCEs4CtxYXkXUxcjBweLgKrEosUFIGFeATeJe4/2MUFsk5M4eWwyK4jNKeAusflx
	MzvEsh9MEs8arrJPYORdwMiwilE0tTS5oDgpPddQrzgxt7g0L10vOT93EyMkyL7sYFx8zOoQ
	owAHoxIPL6NIa7gQa2JZcWXuIUYJDmYlEd6nf4FCvCmJlVWpRfnxRaU5qcWHGKU5WJTEeefu
	eh8iJJCeWJKanZpakFoEk2Xi4JRqYFQ62HWZv3vNPPv6f8qfDwUu//J/cuhRq8dyxy9X7J93
	K+I++7yXVW83P1Qt2PaXxX67mzZrWNq2mI6A874Nkwp0jm3/2P1baYZIqLvqkgdH2qSzPJ0j
	o1Veh7+aYbDm9G6rjPsW/gedVObWeqj8K1SxtH9grR+e/0Sa+6sYX4p/CONrvd3uP5RYijMS
	DbWYi4oTAR9lImkuAgAA
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72608">Krzysztof Kozlowski</a> - July 13, 2016, 8:40 a.m.</div>
<pre class="content">
Split out subsystem specific changes for easier reviews. This will be
squashed with main commit.
<span class="signed-off-by">
Signed-off-by: Krzysztof Kozlowski &lt;k.kozlowski@samsung.com&gt;</span>
[for arm64]
<span class="acked-by">Acked-by: Robin Murphy &lt;robin.murphy@arm.com&gt;</span>
---
 arch/arm64/mm/dma-mapping.c | 56 ++++++++++++++++++++++-----------------------
 1 file changed, 28 insertions(+), 28 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index f6c55afab3e2..a284fd0d0b00 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -32,7 +32,7 @@</span> <span class="p_context"></span>
 
 static int swiotlb __read_mostly;
 
<span class="p_del">-static pgprot_t __get_dma_pgprot(struct dma_attrs *attrs, pgprot_t prot,</span>
<span class="p_add">+static pgprot_t __get_dma_pgprot(unsigned long attrs, pgprot_t prot,</span>
 				 bool coherent)
 {
 	if (!coherent || dma_get_attr(DMA_ATTR_WRITE_COMBINE, attrs))
<span class="p_chunk">@@ -91,7 +91,7 @@</span> <span class="p_context"> static int __free_from_pool(void *start, size_t size)</span>
 
 static void *__dma_alloc_coherent(struct device *dev, size_t size,
 				  dma_addr_t *dma_handle, gfp_t flags,
<span class="p_del">-				  struct dma_attrs *attrs)</span>
<span class="p_add">+				  unsigned long attrs)</span>
 {
 	if (dev == NULL) {
 		WARN_ONCE(1, &quot;Use an actual device structure for DMA allocation\n&quot;);
<span class="p_chunk">@@ -121,7 +121,7 @@</span> <span class="p_context"> static void *__dma_alloc_coherent(struct device *dev, size_t size,</span>
 
 static void __dma_free_coherent(struct device *dev, size_t size,
 				void *vaddr, dma_addr_t dma_handle,
<span class="p_del">-				struct dma_attrs *attrs)</span>
<span class="p_add">+				unsigned long attrs)</span>
 {
 	bool freed;
 	phys_addr_t paddr = dma_to_phys(dev, dma_handle);
<span class="p_chunk">@@ -140,7 +140,7 @@</span> <span class="p_context"> static void __dma_free_coherent(struct device *dev, size_t size,</span>
 
 static void *__dma_alloc(struct device *dev, size_t size,
 			 dma_addr_t *dma_handle, gfp_t flags,
<span class="p_del">-			 struct dma_attrs *attrs)</span>
<span class="p_add">+			 unsigned long attrs)</span>
 {
 	struct page *page;
 	void *ptr, *coherent_ptr;
<span class="p_chunk">@@ -188,7 +188,7 @@</span> <span class="p_context"> no_mem:</span>
 
 static void __dma_free(struct device *dev, size_t size,
 		       void *vaddr, dma_addr_t dma_handle,
<span class="p_del">-		       struct dma_attrs *attrs)</span>
<span class="p_add">+		       unsigned long attrs)</span>
 {
 	void *swiotlb_addr = phys_to_virt(dma_to_phys(dev, dma_handle));
 
<span class="p_chunk">@@ -205,7 +205,7 @@</span> <span class="p_context"> static void __dma_free(struct device *dev, size_t size,</span>
 static dma_addr_t __swiotlb_map_page(struct device *dev, struct page *page,
 				     unsigned long offset, size_t size,
 				     enum dma_data_direction dir,
<span class="p_del">-				     struct dma_attrs *attrs)</span>
<span class="p_add">+				     unsigned long attrs)</span>
 {
 	dma_addr_t dev_addr;
 
<span class="p_chunk">@@ -219,7 +219,7 @@</span> <span class="p_context"> static dma_addr_t __swiotlb_map_page(struct device *dev, struct page *page,</span>
 
 static void __swiotlb_unmap_page(struct device *dev, dma_addr_t dev_addr,
 				 size_t size, enum dma_data_direction dir,
<span class="p_del">-				 struct dma_attrs *attrs)</span>
<span class="p_add">+				 unsigned long attrs)</span>
 {
 	if (!is_device_dma_coherent(dev))
 		__dma_unmap_area(phys_to_virt(dma_to_phys(dev, dev_addr)), size, dir);
<span class="p_chunk">@@ -228,7 +228,7 @@</span> <span class="p_context"> static void __swiotlb_unmap_page(struct device *dev, dma_addr_t dev_addr,</span>
 
 static int __swiotlb_map_sg_attrs(struct device *dev, struct scatterlist *sgl,
 				  int nelems, enum dma_data_direction dir,
<span class="p_del">-				  struct dma_attrs *attrs)</span>
<span class="p_add">+				  unsigned long attrs)</span>
 {
 	struct scatterlist *sg;
 	int i, ret;
<span class="p_chunk">@@ -245,7 +245,7 @@</span> <span class="p_context"> static int __swiotlb_map_sg_attrs(struct device *dev, struct scatterlist *sgl,</span>
 static void __swiotlb_unmap_sg_attrs(struct device *dev,
 				     struct scatterlist *sgl, int nelems,
 				     enum dma_data_direction dir,
<span class="p_del">-				     struct dma_attrs *attrs)</span>
<span class="p_add">+				     unsigned long attrs)</span>
 {
 	struct scatterlist *sg;
 	int i;
<span class="p_chunk">@@ -306,7 +306,7 @@</span> <span class="p_context"> static void __swiotlb_sync_sg_for_device(struct device *dev,</span>
 static int __swiotlb_mmap(struct device *dev,
 			  struct vm_area_struct *vma,
 			  void *cpu_addr, dma_addr_t dma_addr, size_t size,
<span class="p_del">-			  struct dma_attrs *attrs)</span>
<span class="p_add">+			  unsigned long attrs)</span>
 {
 	int ret = -ENXIO;
 	unsigned long nr_vma_pages = (vma-&gt;vm_end - vma-&gt;vm_start) &gt;&gt;
<span class="p_chunk">@@ -333,7 +333,7 @@</span> <span class="p_context"> static int __swiotlb_mmap(struct device *dev,</span>
 
 static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,
 				 void *cpu_addr, dma_addr_t handle, size_t size,
<span class="p_del">-				 struct dma_attrs *attrs)</span>
<span class="p_add">+				 unsigned long attrs)</span>
 {
 	int ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
 
<span class="p_chunk">@@ -435,21 +435,21 @@</span> <span class="p_context"> out:</span>
 
 static void *__dummy_alloc(struct device *dev, size_t size,
 			   dma_addr_t *dma_handle, gfp_t flags,
<span class="p_del">-			   struct dma_attrs *attrs)</span>
<span class="p_add">+			   unsigned long attrs)</span>
 {
 	return NULL;
 }
 
 static void __dummy_free(struct device *dev, size_t size,
 			 void *vaddr, dma_addr_t dma_handle,
<span class="p_del">-			 struct dma_attrs *attrs)</span>
<span class="p_add">+			 unsigned long attrs)</span>
 {
 }
 
 static int __dummy_mmap(struct device *dev,
 			struct vm_area_struct *vma,
 			void *cpu_addr, dma_addr_t dma_addr, size_t size,
<span class="p_del">-			struct dma_attrs *attrs)</span>
<span class="p_add">+			unsigned long attrs)</span>
 {
 	return -ENXIO;
 }
<span class="p_chunk">@@ -457,20 +457,20 @@</span> <span class="p_context"> static int __dummy_mmap(struct device *dev,</span>
 static dma_addr_t __dummy_map_page(struct device *dev, struct page *page,
 				   unsigned long offset, size_t size,
 				   enum dma_data_direction dir,
<span class="p_del">-				   struct dma_attrs *attrs)</span>
<span class="p_add">+				   unsigned long attrs)</span>
 {
 	return DMA_ERROR_CODE;
 }
 
 static void __dummy_unmap_page(struct device *dev, dma_addr_t dev_addr,
 			       size_t size, enum dma_data_direction dir,
<span class="p_del">-			       struct dma_attrs *attrs)</span>
<span class="p_add">+			       unsigned long attrs)</span>
 {
 }
 
 static int __dummy_map_sg(struct device *dev, struct scatterlist *sgl,
 			  int nelems, enum dma_data_direction dir,
<span class="p_del">-			  struct dma_attrs *attrs)</span>
<span class="p_add">+			  unsigned long attrs)</span>
 {
 	return 0;
 }
<span class="p_chunk">@@ -478,7 +478,7 @@</span> <span class="p_context"> static int __dummy_map_sg(struct device *dev, struct scatterlist *sgl,</span>
 static void __dummy_unmap_sg(struct device *dev,
 			     struct scatterlist *sgl, int nelems,
 			     enum dma_data_direction dir,
<span class="p_del">-			     struct dma_attrs *attrs)</span>
<span class="p_add">+			     unsigned long attrs)</span>
 {
 }
 
<span class="p_chunk">@@ -553,7 +553,7 @@</span> <span class="p_context"> static void flush_page(struct device *dev, const void *virt, phys_addr_t phys)</span>
 
 static void *__iommu_alloc_attrs(struct device *dev, size_t size,
 				 dma_addr_t *handle, gfp_t gfp,
<span class="p_del">-				 struct dma_attrs *attrs)</span>
<span class="p_add">+				 unsigned long attrs)</span>
 {
 	bool coherent = is_device_dma_coherent(dev);
 	int ioprot = dma_direction_to_prot(DMA_BIDIRECTIONAL, coherent);
<span class="p_chunk">@@ -613,7 +613,7 @@</span> <span class="p_context"> static void *__iommu_alloc_attrs(struct device *dev, size_t size,</span>
 }
 
 static void __iommu_free_attrs(struct device *dev, size_t size, void *cpu_addr,
<span class="p_del">-			       dma_addr_t handle, struct dma_attrs *attrs)</span>
<span class="p_add">+			       dma_addr_t handle, unsigned long attrs)</span>
 {
 	size_t iosize = size;
 
<span class="p_chunk">@@ -629,7 +629,7 @@</span> <span class="p_context"> static void __iommu_free_attrs(struct device *dev, size_t size, void *cpu_addr,</span>
 	 * Hence how dodgy the below logic looks...
 	 */
 	if (__in_atomic_pool(cpu_addr, size)) {
<span class="p_del">-		iommu_dma_unmap_page(dev, handle, iosize, 0, NULL);</span>
<span class="p_add">+		iommu_dma_unmap_page(dev, handle, iosize, 0, 0);</span>
 		__free_from_pool(cpu_addr, size);
 	} else if (is_vmalloc_addr(cpu_addr)){
 		struct vm_struct *area = find_vm_area(cpu_addr);
<span class="p_chunk">@@ -639,14 +639,14 @@</span> <span class="p_context"> static void __iommu_free_attrs(struct device *dev, size_t size, void *cpu_addr,</span>
 		iommu_dma_free(dev, area-&gt;pages, iosize, &amp;handle);
 		dma_common_free_remap(cpu_addr, size, VM_USERMAP);
 	} else {
<span class="p_del">-		iommu_dma_unmap_page(dev, handle, iosize, 0, NULL);</span>
<span class="p_add">+		iommu_dma_unmap_page(dev, handle, iosize, 0, 0);</span>
 		__free_pages(virt_to_page(cpu_addr), get_order(size));
 	}
 }
 
 static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,
 			      void *cpu_addr, dma_addr_t dma_addr, size_t size,
<span class="p_del">-			      struct dma_attrs *attrs)</span>
<span class="p_add">+			      unsigned long attrs)</span>
 {
 	struct vm_struct *area;
 	int ret;
<span class="p_chunk">@@ -666,7 +666,7 @@</span> <span class="p_context"> static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,</span>
 
 static int __iommu_get_sgtable(struct device *dev, struct sg_table *sgt,
 			       void *cpu_addr, dma_addr_t dma_addr,
<span class="p_del">-			       size_t size, struct dma_attrs *attrs)</span>
<span class="p_add">+			       size_t size, unsigned long attrs)</span>
 {
 	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;
 	struct vm_struct *area = find_vm_area(cpu_addr);
<span class="p_chunk">@@ -707,7 +707,7 @@</span> <span class="p_context"> static void __iommu_sync_single_for_device(struct device *dev,</span>
 static dma_addr_t __iommu_map_page(struct device *dev, struct page *page,
 				   unsigned long offset, size_t size,
 				   enum dma_data_direction dir,
<span class="p_del">-				   struct dma_attrs *attrs)</span>
<span class="p_add">+				   unsigned long attrs)</span>
 {
 	bool coherent = is_device_dma_coherent(dev);
 	int prot = dma_direction_to_prot(dir, coherent);
<span class="p_chunk">@@ -722,7 +722,7 @@</span> <span class="p_context"> static dma_addr_t __iommu_map_page(struct device *dev, struct page *page,</span>
 
 static void __iommu_unmap_page(struct device *dev, dma_addr_t dev_addr,
 			       size_t size, enum dma_data_direction dir,
<span class="p_del">-			       struct dma_attrs *attrs)</span>
<span class="p_add">+			       unsigned long attrs)</span>
 {
 	if (!dma_get_attr(DMA_ATTR_SKIP_CPU_SYNC, attrs))
 		__iommu_sync_single_for_cpu(dev, dev_addr, size, dir);
<span class="p_chunk">@@ -760,7 +760,7 @@</span> <span class="p_context"> static void __iommu_sync_sg_for_device(struct device *dev,</span>
 
 static int __iommu_map_sg_attrs(struct device *dev, struct scatterlist *sgl,
 				int nelems, enum dma_data_direction dir,
<span class="p_del">-				struct dma_attrs *attrs)</span>
<span class="p_add">+				unsigned long attrs)</span>
 {
 	bool coherent = is_device_dma_coherent(dev);
 
<span class="p_chunk">@@ -774,7 +774,7 @@</span> <span class="p_context"> static int __iommu_map_sg_attrs(struct device *dev, struct scatterlist *sgl,</span>
 static void __iommu_unmap_sg_attrs(struct device *dev,
 				   struct scatterlist *sgl, int nelems,
 				   enum dma_data_direction dir,
<span class="p_del">-				   struct dma_attrs *attrs)</span>
<span class="p_add">+				   unsigned long attrs)</span>
 {
 	if (!dma_get_attr(DMA_ATTR_SKIP_CPU_SYNC, attrs))
 		__iommu_sync_sg_for_cpu(dev, sgl, nelems, dir);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



