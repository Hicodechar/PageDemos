
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, oom: allow oom reaper to race with exit_mmap - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, oom: allow oom reaper to race with exit_mmap</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 25, 2017, 4:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170725160359.GO26723@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9862481/mbox/"
   >mbox</a>
|
   <a href="/patch/9862481/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9862481/">/patch/9862481/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A1BC8602B1 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 25 Jul 2017 16:04:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9B26B286DB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 25 Jul 2017 16:04:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8FEFC286DE; Tue, 25 Jul 2017 16:04:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 30FA5286DB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 25 Jul 2017 16:04:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752832AbdGYQEG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 25 Jul 2017 12:04:06 -0400
Received: from mx2.suse.de ([195.135.220.15]:44381 &quot;EHLO mx1.suse.de&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752456AbdGYQEE (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 25 Jul 2017 12:04:04 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx1.suse.de (Postfix) with ESMTP id 51F89AC05;
	Tue, 25 Jul 2017 16:04:03 +0000 (UTC)
Date: Tue, 25 Jul 2017 18:04:00 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, linux-mm@kvack.org,
	LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [PATCH] mm, oom: allow oom reaper to race with exit_mmap
Message-ID: &lt;20170725160359.GO26723@dhcp22.suse.cz&gt;
References: &lt;20170724072332.31903-1-mhocko@kernel.org&gt;
	&lt;20170724140008.sd2n6af6izjyjtda@node.shutemov.name&gt;
	&lt;20170724141526.GM25221@dhcp22.suse.cz&gt;
	&lt;20170724145142.i5xqpie3joyxbnck@node.shutemov.name&gt;
	&lt;20170724161146.GQ25221@dhcp22.suse.cz&gt;
	&lt;20170725142626.GJ26723@dhcp22.suse.cz&gt;
	&lt;20170725151754.3txp44a2kbffsxdg@node.shutemov.name&gt;
	&lt;20170725152300.GM26723@dhcp22.suse.cz&gt;
	&lt;20170725153110.qzfz7wpnxkjwh5bc@node.shutemov.name&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20170725153110.qzfz7wpnxkjwh5bc@node.shutemov.name&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 25, 2017, 4:04 p.m.</div>
<pre class="content">
On Tue 25-07-17 18:31:10, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Tue, Jul 25, 2017 at 05:23:00PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; what is stdev?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Updated tables:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 3 runs before the patch:</span>
<span class="quote">&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  Stdev</span>
<span class="quote">&gt;  177200  205000  212900  217800  223700 2377000  32868</span>
<span class="quote">&gt;  172400  201700  209700  214300  220600 1343000  31191</span>
<span class="quote">&gt;  175700  203800  212300  217100  223000 1061000  31195</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 3 runs after the patch:</span>
<span class="quote">&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  Stdev</span>
<span class="quote">&gt;  175900  204800  213000  216400  223600 1989000  27210</span>
<span class="quote">&gt;  180300  210900  219600  223600  230200 3184000  32609</span>
<span class="quote">&gt;  182100  212500  222000  226200  232700 1473000  32138</span>

High std/avg ~15% matches my measurements (mine were even higher ~20%)
and that would suggest that 3% average difference is still somehing
within a &quot;noise&quot;.

Anyway, I do not really need to take the lock unless the task is the
oom victim. Could you try whether those numbers improve if the lock is
conditional?

Thanks!
---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=965">Andrea Arcangeli</a> - July 25, 2017, 7:19 p.m.</div>
<pre class="content">
On Tue, Jul 25, 2017 at 06:04:00PM +0200, Michal Hocko wrote:
<span class="quote">&gt; -	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; +	if (tsk_is_oom_victim(current))</span>
<span class="quote">&gt; +		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  	free_pgtables(&amp;tlb, vma, FIRST_USER_ADDRESS, USER_PGTABLES_CEILING);</span>
<span class="quote">&gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -3012,7 +3014,8 @@ void exit_mmap(struct mm_struct *mm)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	mm-&gt;mmap = NULL;</span>
<span class="quote">&gt;  	vm_unacct_memory(nr_accounted);</span>
<span class="quote">&gt; -	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; +	if (tsk_is_oom_victim(current))</span>
<span class="quote">&gt; +		up_write(&amp;mm-&gt;mmap_sem);</span>

How is this possibly safe? mark_oom_victim can run while exit_mmap is
running. Even if you cache the first read in the local stack, failure
to notice you marked it, could lead to use after free. Or at least
there&#39;s no comment on which lock should prevent the use after free
with the above.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 26, 2017, 5:45 a.m.</div>
<pre class="content">
On Tue 25-07-17 21:19:52, Andrea Arcangeli wrote:
<span class="quote">&gt; On Tue, Jul 25, 2017 at 06:04:00PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; -	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; &gt; +	if (tsk_is_oom_victim(current))</span>
<span class="quote">&gt; &gt; +		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; &gt;  	free_pgtables(&amp;tlb, vma, FIRST_USER_ADDRESS, USER_PGTABLES_CEILING);</span>
<span class="quote">&gt; &gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; @@ -3012,7 +3014,8 @@ void exit_mmap(struct mm_struct *mm)</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  	mm-&gt;mmap = NULL;</span>
<span class="quote">&gt; &gt;  	vm_unacct_memory(nr_accounted);</span>
<span class="quote">&gt; &gt; -	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; &gt; +	if (tsk_is_oom_victim(current))</span>
<span class="quote">&gt; &gt; +		up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; How is this possibly safe? mark_oom_victim can run while exit_mmap is</span>
<span class="quote">&gt; running.</span>

I believe it cannot. We always call mark_oom_victim (on !current) with
task_lock held and check task-&gt;mm != NULL and we call do_exit-&gt;mmput after
mm is set to NULL under the same lock.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 0eeb658caa30..ca8a274485f8 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -44,6 +44,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/userfaultfd_k.h&gt;
 #include &lt;linux/moduleparam.h&gt;
 #include &lt;linux/pkeys.h&gt;
<span class="p_add">+#include &lt;linux/oom.h&gt;</span>
 
 #include &lt;linux/uaccess.h&gt;
 #include &lt;asm/cacheflush.h&gt;
<span class="p_chunk">@@ -2997,7 +2998,8 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 	 * oom reaper might race with exit_mmap so make sure we won&#39;t free
 	 * page tables or unmap VMAs under its feet
 	 */
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	if (tsk_is_oom_victim(current))</span>
<span class="p_add">+		down_write(&amp;mm-&gt;mmap_sem);</span>
 	free_pgtables(&amp;tlb, vma, FIRST_USER_ADDRESS, USER_PGTABLES_CEILING);
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 
<span class="p_chunk">@@ -3012,7 +3014,8 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 	}
 	mm-&gt;mmap = NULL;
 	vm_unacct_memory(nr_accounted);
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	if (tsk_is_oom_victim(current))</span>
<span class="p_add">+		up_write(&amp;mm-&gt;mmap_sem);</span>
 }
 
 /* Insert vm structure into process list sorted by address

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



