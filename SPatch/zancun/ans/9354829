
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/3] x86/asm: Get rid of __read_cr4_safe() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/3] x86/asm: Get rid of __read_cr4_safe()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 28, 2016, 7:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;4826249001bf7029fd1cc1f8666d234aa1fefe96.1475091074.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9354829/mbox/"
   >mbox</a>
|
   <a href="/patch/9354829/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9354829/">/patch/9354829/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BC1786077A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Sep 2016 19:34:38 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AE792285B1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Sep 2016 19:34:38 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A302129684; Wed, 28 Sep 2016 19:34:38 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 795E7296EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Sep 2016 19:34:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933403AbcI1Ted (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 28 Sep 2016 15:34:33 -0400
Received: from mail.kernel.org ([198.145.29.136]:36376 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932977AbcI1Te0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 28 Sep 2016 15:34:26 -0400
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C5D1F2021A;
	Wed, 28 Sep 2016 19:34:24 +0000 (UTC)
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 8B8C420414;
	Wed, 28 Sep 2016 19:34:23 +0000 (UTC)
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org
Cc: david@saggiorato.net, Borislav Petkov &lt;bp@alien8.de&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;, linux-kernel@vger.kernel.org,
	Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [PATCH 3/3] x86/asm: Get rid of __read_cr4_safe()
Date: Wed, 28 Sep 2016 12:34:16 -0700
Message-Id: &lt;4826249001bf7029fd1cc1f8666d234aa1fefe96.1475091074.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;cover.1475091074.git.luto@kernel.org&gt;
References: &lt;cover.1475091074.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1475091074.git.luto@kernel.org&gt;
References: &lt;cover.1475091074.git.luto@kernel.org&gt;
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Sept. 28, 2016, 7:34 p.m.</div>
<pre class="content">
We use __read_cr4() vs __read_cr4_safe() inconsistently.  On
CR4-less CPUs, all CR4 bits are effectively clear, so we can make
the code simpler and more robust by making __read_cr4() always fix
up faults on 32-bit kernels.

This may fix some bugs on old 486-like CPUs, but I don&#39;t have any
easy way to test that.

Cc: david@saggiorato.net
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/include/asm/paravirt.h       |  4 ----
 arch/x86/include/asm/paravirt_types.h |  1 -
 arch/x86/include/asm/special_insns.h  | 22 +++++++---------------
 arch/x86/include/asm/tlbflush.h       |  2 +-
 arch/x86/kernel/paravirt.c            |  1 -
 arch/x86/kernel/process_32.c          |  2 +-
 arch/x86/kernel/setup.c               |  5 +++--
 arch/x86/power/cpu.c                  |  2 +-
 arch/x86/xen/enlighten.c              |  1 -
 9 files changed, 13 insertions(+), 27 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">index 2970d22d7766..91b6f4eed3fd 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt.h</span>
<span class="p_chunk">@@ -80,10 +80,6 @@</span> <span class="p_context"> static inline unsigned long __read_cr4(void)</span>
 {
 	return PVOP_CALL0(unsigned long, pv_cpu_ops.read_cr4);
 }
<span class="p_del">-static inline unsigned long __read_cr4_safe(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return PVOP_CALL0(unsigned long, pv_cpu_ops.read_cr4_safe);</span>
<span class="p_del">-}</span>
 
 static inline void __write_cr4(unsigned long x)
 {
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">index 7fa9e7740ba3..fcf243f077ac 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_chunk">@@ -108,7 +108,6 @@</span> <span class="p_context"> struct pv_cpu_ops {</span>
 	unsigned long (*read_cr0)(void);
 	void (*write_cr0)(unsigned long);
 
<span class="p_del">-	unsigned long (*read_cr4_safe)(void);</span>
 	unsigned long (*read_cr4)(void);
 	void (*write_cr4)(unsigned long);
 
<span class="p_header">diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">index 587d7914ea4b..19a2224f9e16 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/special_insns.h</span>
<span class="p_chunk">@@ -59,22 +59,19 @@</span> <span class="p_context"> static inline void native_write_cr3(unsigned long val)</span>
 static inline unsigned long native_read_cr4(void)
 {
 	unsigned long val;
<span class="p_del">-	asm volatile(&quot;mov %%cr4,%0\n\t&quot; : &quot;=r&quot; (val), &quot;=m&quot; (__force_order));</span>
<span class="p_del">-	return val;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long native_read_cr4_safe(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long val;</span>
<span class="p_del">-	/* This could fault if %cr4 does not exist. In x86_64, a cr4 always</span>
<span class="p_del">-	 * exists, so it will never fail. */</span>
 #ifdef CONFIG_X86_32
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This could fault if CR4 does not exist.  Non-existent CR4</span>
<span class="p_add">+	 * is functionally equivalent to CR4 == 0.  Keep it simple and pretend</span>
<span class="p_add">+	 * that CR4 == 0 on CPUs that don&#39;t have CR4.</span>
<span class="p_add">+	 */</span>
 	asm volatile(&quot;1: mov %%cr4, %0\n&quot;
 		     &quot;2:\n&quot;
 		     _ASM_EXTABLE(1b, 2b)
 		     : &quot;=r&quot; (val), &quot;=m&quot; (__force_order) : &quot;0&quot; (0));
 #else
<span class="p_del">-	val = native_read_cr4();</span>
<span class="p_add">+	/* CR4 always exists on x86_64. */</span>
<span class="p_add">+	asm volatile(&quot;mov %%cr4,%0\n\t&quot; : &quot;=r&quot; (val), &quot;=m&quot; (__force_order));</span>
 #endif
 	return val;
 }
<span class="p_chunk">@@ -182,11 +179,6 @@</span> <span class="p_context"> static inline unsigned long __read_cr4(void)</span>
 	return native_read_cr4();
 }
 
<span class="p_del">-static inline unsigned long __read_cr4_safe(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return native_read_cr4_safe();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void __write_cr4(unsigned long x)
 {
 	native_write_cr4(x);
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index dee8a70382ba..6fa85944af83 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -81,7 +81,7 @@</span> <span class="p_context"> DECLARE_PER_CPU_SHARED_ALIGNED(struct tlb_state, cpu_tlbstate);</span>
 /* Initialize cr4 shadow for this CPU. */
 static inline void cr4_init_shadow(void)
 {
<span class="p_del">-	this_cpu_write(cpu_tlbstate.cr4, __read_cr4_safe());</span>
<span class="p_add">+	this_cpu_write(cpu_tlbstate.cr4, __read_cr4());</span>
 }
 
 /* Set in this cpu&#39;s CR4. */
<span class="p_header">diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c</span>
<span class="p_header">index 1acfd76e3e26..ed03b1c5b1b9 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt.c</span>
<span class="p_chunk">@@ -332,7 +332,6 @@</span> <span class="p_context"> __visible struct pv_cpu_ops pv_cpu_ops = {</span>
 	.read_cr0 = native_read_cr0,
 	.write_cr0 = native_write_cr0,
 	.read_cr4 = native_read_cr4,
<span class="p_del">-	.read_cr4_safe = native_read_cr4_safe,</span>
 	.write_cr4 = native_write_cr4,
 #ifdef CONFIG_X86_64
 	.read_cr8 = native_read_cr8,
<span class="p_header">diff --git a/arch/x86/kernel/process_32.c b/arch/x86/kernel/process_32.c</span>
<span class="p_header">index d86be29c38c7..e5da9ba220d1 100644</span>
<span class="p_header">--- a/arch/x86/kernel/process_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/process_32.c</span>
<span class="p_chunk">@@ -101,7 +101,7 @@</span> <span class="p_context"> void __show_regs(struct pt_regs *regs, int all)</span>
 	cr0 = read_cr0();
 	cr2 = read_cr2();
 	cr3 = read_cr3();
<span class="p_del">-	cr4 = __read_cr4_safe();</span>
<span class="p_add">+	cr4 = __read_cr4();</span>
 	printk(KERN_DEFAULT &quot;CR0: %08lx CR2: %08lx CR3: %08lx CR4: %08lx\n&quot;,
 			cr0, cr2, cr3, cr4);
 
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 5930a4d191b4..09d245e8e2da 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -1140,9 +1140,10 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	if (boot_cpu_data.cpuid_level &gt;= 0) {
 		/*
 		 * CPUs without CPUID don&#39;t have CR4.  CPUs with CPUID
<span class="p_del">-		 * usually have CR4.</span>
<span class="p_add">+		 * usually have CR4.  On CPUID-less CPUs, this avoids</span>
<span class="p_add">+		 * an unnecessary fixup, mainly for historical reasons.</span>
 		 */
<span class="p_del">-		mmu_cr4_features = __read_cr4_safe();</span>
<span class="p_add">+		mmu_cr4_features = __read_cr4();</span>
 	}
 
 	memblock_set_current_limit(get_max_mapped());
<span class="p_header">diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c</span>
<span class="p_header">index b12c26e2e309..53cace2ec0e2 100644</span>
<span class="p_header">--- a/arch/x86/power/cpu.c</span>
<span class="p_header">+++ b/arch/x86/power/cpu.c</span>
<span class="p_chunk">@@ -130,7 +130,7 @@</span> <span class="p_context"> static void __save_processor_state(struct saved_context *ctxt)</span>
 	ctxt-&gt;cr0 = read_cr0();
 	ctxt-&gt;cr2 = read_cr2();
 	ctxt-&gt;cr3 = read_cr3();
<span class="p_del">-	ctxt-&gt;cr4 = __read_cr4_safe();</span>
<span class="p_add">+	ctxt-&gt;cr4 = __read_cr4();</span>
 #ifdef CONFIG_X86_64
 	ctxt-&gt;cr8 = read_cr8();
 #endif
<span class="p_header">diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c</span>
<span class="p_header">index b86ebb1a9a7f..e2cf8fcea6bb 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten.c</span>
<span class="p_chunk">@@ -1237,7 +1237,6 @@</span> <span class="p_context"> static const struct pv_cpu_ops xen_cpu_ops __initconst = {</span>
 	.write_cr0 = xen_write_cr0,
 
 	.read_cr4 = native_read_cr4,
<span class="p_del">-	.read_cr4_safe = native_read_cr4_safe,</span>
 	.write_cr4 = xen_write_cr4,
 
 #ifdef CONFIG_X86_64

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



