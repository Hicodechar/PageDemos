
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,9/9] selfttest/powerpc: Add memory page migration tests - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,9/9] selfttest/powerpc: Add memory page migration tests</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2016, 12:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1457525450-4262-9-git-send-email-khandual@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8545901/mbox/"
   >mbox</a>
|
   <a href="/patch/8545901/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8545901/">/patch/8545901/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 96C419F46A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 12:13:24 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 7C3F220270
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 12:13:23 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 208292026F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 12:13:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932529AbcCIMNT (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 9 Mar 2016 07:13:19 -0500
Received: from e23smtp07.au.ibm.com ([202.81.31.140]:51488 &quot;EHLO
	e23smtp07.au.ibm.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932380AbcCIMMI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 9 Mar 2016 07:12:08 -0500
Received: from localhost
	by e23smtp07.au.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;khandual@linux.vnet.ibm.com&gt;;
	Wed, 9 Mar 2016 22:12:07 +1000
Received: from d23dlp01.au.ibm.com (202.81.31.203)
	by e23smtp07.au.ibm.com (202.81.31.204) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Wed, 9 Mar 2016 22:12:05 +1000
X-IBM-Helo: d23dlp01.au.ibm.com
X-IBM-MailFrom: khandual@linux.vnet.ibm.com
X-IBM-RcptTo: linux-kernel@vger.kernel.org
Received: from d23relay08.au.ibm.com (d23relay08.au.ibm.com [9.185.71.33])
	by d23dlp01.au.ibm.com (Postfix) with ESMTP id 097C02CE805B
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed,  9 Mar 2016 23:12:05 +1100 (EST)
Received: from d23av01.au.ibm.com (d23av01.au.ibm.com [9.190.234.96])
	by d23relay08.au.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id
	u29CBvb666453756
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 9 Mar 2016 23:12:05 +1100
Received: from d23av01.au.ibm.com (localhost [127.0.0.1])
	by d23av01.au.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with ESMTP id
	u29CBU9g022114
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 9 Mar 2016 23:11:32 +1100
Received: from localhost.in.ibm.com ([9.124.158.118])
	by d23av01.au.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with ESMTP id
	u29CB7QS020798; Wed, 9 Mar 2016 23:11:28 +1100
From: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org
Cc: hughd@google.com, kirill@shutemov.name, n-horiguchi@ah.jp.nec.com,
	akpm@linux-foundation.org, mgorman@techsingularity.net,
	aneesh.kumar@linux.vnet.ibm.com, mpe@ellerman.id.au
Subject: [RFC 9/9] selfttest/powerpc: Add memory page migration tests
Date: Wed,  9 Mar 2016 17:40:50 +0530
Message-Id: &lt;1457525450-4262-9-git-send-email-khandual@linux.vnet.ibm.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1457525450-4262-1-git-send-email-khandual@linux.vnet.ibm.com&gt;
References: &lt;1457525450-4262-1-git-send-email-khandual@linux.vnet.ibm.com&gt;
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 16030912-0025-0000-0000-00000323BC39
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - March 9, 2016, 12:10 p.m.</div>
<pre class="content">
This adds two tests for memory page migration. One for normal page
migration which works for both 4K or 64K base page size kernel and
the other one is for huge page migration which works only on 64K
base page sized 16MB huge page implemention at the PMD level.
<span class="signed-off-by">
Signed-off-by: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;</span>
---
 tools/testing/selftests/powerpc/mm/Makefile        |  14 +-
 .../selftests/powerpc/mm/hugepage-migration.c      |  30 +++
 tools/testing/selftests/powerpc/mm/migration.h     | 204 +++++++++++++++++++++
 .../testing/selftests/powerpc/mm/page-migration.c  |  33 ++++
 tools/testing/selftests/powerpc/mm/run_mmtests     | 104 +++++++++++
 5 files changed, 380 insertions(+), 5 deletions(-)
 create mode 100644 tools/testing/selftests/powerpc/mm/hugepage-migration.c
 create mode 100644 tools/testing/selftests/powerpc/mm/migration.h
 create mode 100644 tools/testing/selftests/powerpc/mm/page-migration.c
 create mode 100755 tools/testing/selftests/powerpc/mm/run_mmtests
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - March 9, 2016, 8:01 p.m.</div>
<pre class="content">
Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt; writes:
<span class="quote">
&gt; [ text/plain ]</span>
<span class="quote">&gt; This adds two tests for memory page migration. One for normal page</span>
<span class="quote">&gt; migration which works for both 4K or 64K base page size kernel and</span>
<span class="quote">&gt; the other one is for huge page migration which works only on 64K</span>
<span class="quote">&gt; base page sized 16MB huge page implemention at the PMD level.</span>
<span class="quote">&gt;</span>

can you also add the test in this commit
e66f17ff717 (&quot;mm/hugetlb: take page table lock in follow_huge_pmd()&quot;)
<span class="quote">
&gt; Signed-off-by: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - March 10, 2016, 5:05 a.m.</div>
<pre class="content">
On 03/10/2016 01:31 AM, Aneesh Kumar K.V wrote:
<span class="quote">&gt; Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt;&gt; &gt; This adds two tests for memory page migration. One for normal page</span>
<span class="quote">&gt;&gt; &gt; migration which works for both 4K or 64K base page size kernel and</span>
<span class="quote">&gt;&gt; &gt; the other one is for huge page migration which works only on 64K</span>
<span class="quote">&gt;&gt; &gt; base page sized 16MB huge page implemention at the PMD level.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt; can you also add the test in this commit</span>
<span class="quote">&gt; e66f17ff717 (&quot;mm/hugetlb: take page table lock in follow_huge_pmd()&quot;)</span>

Thought about it but thats kind of bit tricky. All self tests have finite
runtime. Test case in that commit has two processes which execute for ever
and try to create the race condition. We can try to run it for *some time*
looking for races instead ?
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/testing/selftests/powerpc/mm/Makefile b/tools/testing/selftests/powerpc/mm/Makefile</span>
<span class="p_header">index ee179e2..c482614 100644</span>
<span class="p_header">--- a/tools/testing/selftests/powerpc/mm/Makefile</span>
<span class="p_header">+++ b/tools/testing/selftests/powerpc/mm/Makefile</span>
<span class="p_chunk">@@ -1,12 +1,16 @@</span> <span class="p_context"></span>
 noarg:
 	$(MAKE) -C ../
 
<span class="p_del">-TEST_PROGS := hugetlb_vs_thp_test subpage_prot</span>
<span class="p_del">-TEST_FILES := tempfile</span>
<span class="p_add">+TEST_PROGS := run_mmtests</span>
<span class="p_add">+TEST_FILES := hugetlb_vs_thp_test</span>
<span class="p_add">+TEST_FILES += subpage_prot</span>
<span class="p_add">+TEST_FILES += tempfile</span>
<span class="p_add">+TEST_FILES += hugepage-migration</span>
<span class="p_add">+TEST_FILES += page-migration</span>
 
<span class="p_del">-all: $(TEST_PROGS) $(TEST_FILES)</span>
<span class="p_add">+all: $(TEST_FILES)</span>
 
<span class="p_del">-$(TEST_PROGS): ../harness.c</span>
<span class="p_add">+$(TEST_FILES): ../harness.c</span>
 
 include ../../lib.mk
 
<span class="p_chunk">@@ -14,4 +18,4 @@</span> <span class="p_context"> tempfile:</span>
 	dd if=/dev/zero of=tempfile bs=64k count=1
 
 clean:
<span class="p_del">-	rm -f $(TEST_PROGS) tempfile</span>
<span class="p_add">+	rm -f $(TEST_FILES)</span>
<span class="p_header">diff --git a/tools/testing/selftests/powerpc/mm/hugepage-migration.c b/tools/testing/selftests/powerpc/mm/hugepage-migration.c</span>
new file mode 100644
<span class="p_header">index 0000000..b60bc10</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/powerpc/mm/hugepage-migration.c</span>
<span class="p_chunk">@@ -0,0 +1,30 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015, Anshuman Khandual, IBM Corporation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify it</span>
<span class="p_add">+ * under the terms of the GNU General Public License version 2 as published</span>
<span class="p_add">+ * by the Free Software Foundation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#include &quot;migration.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+static int hugepage_migration(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)getpagesize() == 0x1000)</span>
<span class="p_add">+		printf(&quot;Running on base page size 4K\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)getpagesize() == 0x10000)</span>
<span class="p_add">+		printf(&quot;Running on base page size 64K\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = test_huge_migration(16 * MEM_MB);</span>
<span class="p_add">+	ret = test_huge_migration(256 * MEM_MB);</span>
<span class="p_add">+	ret = test_huge_migration(512 * MEM_MB);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int main(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return test_harness(hugepage_migration, &quot;hugepage_migration&quot;);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/testing/selftests/powerpc/mm/migration.h b/tools/testing/selftests/powerpc/mm/migration.h</span>
new file mode 100644
<span class="p_header">index 0000000..fe35849</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/powerpc/mm/migration.h</span>
<span class="p_chunk">@@ -0,0 +1,204 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015, Anshuman Khandual, IBM Corporation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify it</span>
<span class="p_add">+ * under the terms of the GNU General Public License version 2 as published</span>
<span class="p_add">+ * by the Free Software Foundation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#include &lt;stdlib.h&gt;</span>
<span class="p_add">+#include &lt;stdio.h&gt;</span>
<span class="p_add">+#include &lt;string.h&gt;</span>
<span class="p_add">+#include &lt;unistd.h&gt;</span>
<span class="p_add">+#include &lt;sys/mman.h&gt;</span>
<span class="p_add">+#include &lt;fcntl.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &quot;utils.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+#define HPAGE_OFF	0</span>
<span class="p_add">+#define HPAGE_ON	1</span>
<span class="p_add">+</span>
<span class="p_add">+#define PAGE_SHIFT_4K	12</span>
<span class="p_add">+#define PAGE_SHIFT_64K	16</span>
<span class="p_add">+#define PAGE_SIZE_4K	0x1000</span>
<span class="p_add">+#define PAGE_SIZE_64K	0x10000</span>
<span class="p_add">+#define PAGE_SIZE_HUGE	16UL * 1024 * 1024</span>
<span class="p_add">+</span>
<span class="p_add">+#define MEM_GB		1024UL * 1024 * 1024</span>
<span class="p_add">+#define MEM_MB		1024UL * 1024</span>
<span class="p_add">+#define MME_KB		1024UL</span>
<span class="p_add">+</span>
<span class="p_add">+#define PMAP_FILE	&quot;/proc/self/pagemap&quot;</span>
<span class="p_add">+#define PMAP_PFN	0x007FFFFFFFFFFFFFUL</span>
<span class="p_add">+#define PMAP_SIZE	8</span>
<span class="p_add">+</span>
<span class="p_add">+#define SOFT_OFFLINE	&quot;/sys/devices/system/memory/soft_offline_page&quot;</span>
<span class="p_add">+#define HARD_OFFLINE	&quot;/sys/devices/system/memory/hard_offline_page&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+#define MMAP_LENGTH	(256 * MEM_MB)</span>
<span class="p_add">+#define MMAP_ADDR	(void *)(0x0UL)</span>
<span class="p_add">+#define MMAP_PROT	(PROT_READ | PROT_WRITE)</span>
<span class="p_add">+#define MMAP_FLAGS	(MAP_PRIVATE | MAP_ANONYMOUS)</span>
<span class="p_add">+#define MMAP_FLAGS_HUGE	(MAP_SHARED)</span>
<span class="p_add">+</span>
<span class="p_add">+#define FILE_NAME	&quot;huge/hugepagefile&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+static void write_buffer(char *addr, unsigned long length)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long i;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; length; i++)</span>
<span class="p_add">+		*(addr + i) = (char)i;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int read_buffer(char *addr, unsigned long length)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long i;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; length; i++) {</span>
<span class="p_add">+		if (*(addr + i) != (char)i) {</span>
<span class="p_add">+			printf(&quot;Data miscompare at addr[%lu]\n&quot;, i);</span>
<span class="p_add">+			return 1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static unsigned long get_npages(unsigned long length, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int tmp1 = length, tmp2 = size;</span>
<span class="p_add">+</span>
<span class="p_add">+	return tmp1/tmp2;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void soft_offline_pages(int hugepage, void *addr,</span>
<span class="p_add">+	unsigned long npages, unsigned long *skipped, unsigned long *failed)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long psize, offset, pfn, paddr, fail, skip, i;</span>
<span class="p_add">+	void *tmp;</span>
<span class="p_add">+	int fd1, fd2;</span>
<span class="p_add">+	char buf[20];</span>
<span class="p_add">+</span>
<span class="p_add">+	fd1 = open(PMAP_FILE, O_RDONLY);</span>
<span class="p_add">+	if (fd1 == -1) {</span>
<span class="p_add">+		perror(&quot;open() failed&quot;);</span>
<span class="p_add">+		exit(-1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	fd2 = open(SOFT_OFFLINE, O_WRONLY);</span>
<span class="p_add">+	if (fd2 == -1) {</span>
<span class="p_add">+		perror(&quot;open() failed&quot;);</span>
<span class="p_add">+		exit(-1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	fail = skip = 0;</span>
<span class="p_add">+	psize = getpagesize();</span>
<span class="p_add">+	for (i = 0; i &lt; npages; i++) {</span>
<span class="p_add">+		if (hugepage)</span>
<span class="p_add">+			tmp = addr + i * PAGE_SIZE_HUGE;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			tmp = addr + i * psize;</span>
<span class="p_add">+</span>
<span class="p_add">+		offset = ((unsigned long) tmp / psize) * PMAP_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (lseek(fd1, offset, SEEK_SET) == -1) {</span>
<span class="p_add">+			perror(&quot;lseek() failed&quot;);</span>
<span class="p_add">+			exit(-1);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (read(fd1, &amp;pfn, sizeof(pfn)) == -1) {</span>
<span class="p_add">+			perror(&quot;read() failed&quot;);</span>
<span class="p_add">+			exit(-1);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Skip if no valid PFN */</span>
<span class="p_add">+		pfn = pfn &amp; PMAP_PFN;</span>
<span class="p_add">+		if (!pfn) {</span>
<span class="p_add">+			skip++;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (psize == PAGE_SIZE_4K)</span>
<span class="p_add">+			paddr = pfn &lt;&lt; PAGE_SHIFT_4K;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (psize == PAGE_SIZE_64K)</span>
<span class="p_add">+			paddr = pfn &lt;&lt; PAGE_SHIFT_64K;</span>
<span class="p_add">+</span>
<span class="p_add">+		sprintf(buf, &quot;0x%lx\n&quot;, paddr);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (write(fd2, buf, strlen(buf)) == -1) {</span>
<span class="p_add">+			perror(&quot;write() failed&quot;);</span>
<span class="p_add">+			printf(&quot;[%ld] PFN: %lx BUF: %s\n&quot;,i, pfn, buf);</span>
<span class="p_add">+			fail++;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (failed)</span>
<span class="p_add">+		*failed = fail;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (skipped)</span>
<span class="p_add">+		*skipped = skip;</span>
<span class="p_add">+</span>
<span class="p_add">+	close(fd1);</span>
<span class="p_add">+	close(fd2);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int test_migration(unsigned long length)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long skipped, failed;</span>
<span class="p_add">+	void *addr;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	addr = mmap(MMAP_ADDR, length, MMAP_PROT, MMAP_FLAGS, -1, 0);</span>
<span class="p_add">+	if (addr == MAP_FAILED) {</span>
<span class="p_add">+		perror(&quot;mmap() failed&quot;);</span>
<span class="p_add">+		exit(-1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	write_buffer(addr, length);</span>
<span class="p_add">+	soft_offline_pages(HPAGE_OFF, addr, length/getpagesize(), &amp;skipped, &amp;failed);</span>
<span class="p_add">+	ret = read_buffer(addr, length);</span>
<span class="p_add">+</span>
<span class="p_add">+	printf(&quot;%ld moved %ld skipped %ld failed\n&quot;, (length/getpagesize() - skipped - failed), skipped, failed);</span>
<span class="p_add">+</span>
<span class="p_add">+	munmap(addr, length);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int test_huge_migration(unsigned long length)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long skipped, failed, npages;</span>
<span class="p_add">+	void *addr;</span>
<span class="p_add">+	int fd, ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	fd = open(FILE_NAME, O_CREAT | O_RDWR, 0755);</span>
<span class="p_add">+	if (fd &lt; 0) {</span>
<span class="p_add">+		perror(&quot;open() failed&quot;);</span>
<span class="p_add">+		exit(-1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	addr = mmap(MMAP_ADDR, length, MMAP_PROT, MMAP_FLAGS_HUGE, fd, 0);</span>
<span class="p_add">+	if (addr == MAP_FAILED) {</span>
<span class="p_add">+		perror(&quot;mmap() failed&quot;);</span>
<span class="p_add">+		unlink(FILE_NAME);</span>
<span class="p_add">+		exit(-1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+        if (mlock(addr, length) == -1) {</span>
<span class="p_add">+                perror(&quot;mlock() failed&quot;);</span>
<span class="p_add">+		munmap(addr, length);</span>
<span class="p_add">+                unlink(FILE_NAME);</span>
<span class="p_add">+                exit(-1);</span>
<span class="p_add">+        }</span>
<span class="p_add">+</span>
<span class="p_add">+	write_buffer(addr, length);</span>
<span class="p_add">+	npages = get_npages(length, PAGE_SIZE_HUGE);</span>
<span class="p_add">+	soft_offline_pages(HPAGE_ON, addr, npages, &amp;skipped, &amp;failed);</span>
<span class="p_add">+	ret = read_buffer(addr, length);</span>
<span class="p_add">+</span>
<span class="p_add">+	printf(&quot;%ld moved %ld skipped %ld failed\n&quot;, (npages - skipped - failed), skipped, failed);</span>
<span class="p_add">+</span>
<span class="p_add">+	munmap(addr, length);</span>
<span class="p_add">+	unlink(FILE_NAME);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/testing/selftests/powerpc/mm/page-migration.c b/tools/testing/selftests/powerpc/mm/page-migration.c</span>
new file mode 100644
<span class="p_header">index 0000000..fc6e472</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/powerpc/mm/page-migration.c</span>
<span class="p_chunk">@@ -0,0 +1,33 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015, Anshuman Khandual, IBM Corporation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify it</span>
<span class="p_add">+ * under the terms of the GNU General Public License version 2 as published</span>
<span class="p_add">+ * by the Free Software Foundation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#include &quot;migration.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+static int page_migration(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)getpagesize() == 0x1000)</span>
<span class="p_add">+		printf(&quot;Running on base page size 4K\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)getpagesize() == 0x10000)</span>
<span class="p_add">+		printf(&quot;Running on base page size 64K\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = test_migration(4 * MEM_MB);</span>
<span class="p_add">+	ret = test_migration(64 * MEM_MB);</span>
<span class="p_add">+	ret = test_migration(256 * MEM_MB);</span>
<span class="p_add">+	ret = test_migration(512 * MEM_MB);</span>
<span class="p_add">+	ret = test_migration(1 * MEM_GB);</span>
<span class="p_add">+	ret = test_migration(2 * MEM_GB);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int main(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return test_harness(page_migration, &quot;page_migration&quot;);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/testing/selftests/powerpc/mm/run_mmtests b/tools/testing/selftests/powerpc/mm/run_mmtests</span>
new file mode 100755
<span class="p_header">index 0000000..19805ba</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/powerpc/mm/run_mmtests</span>
<span class="p_chunk">@@ -0,0 +1,104 @@</span> <span class="p_context"></span>
<span class="p_add">+#!/bin/bash</span>
<span class="p_add">+</span>
<span class="p_add">+# Mostly borrowed from tools/testing/selftests/vm/run_vmtests</span>
<span class="p_add">+</span>
<span class="p_add">+# Please run this as root</span>
<span class="p_add">+# Try allocating 2GB of 16MB huge pages, below is the size in kB.</span>
<span class="p_add">+# Please change this needed memory if the test program changes</span>
<span class="p_add">+needmem=2097152</span>
<span class="p_add">+mnt=./huge</span>
<span class="p_add">+exitcode=0</span>
<span class="p_add">+</span>
<span class="p_add">+# Get huge pagesize and freepages from /proc/meminfo</span>
<span class="p_add">+while read name size unit; do</span>
<span class="p_add">+	if [ &quot;$name&quot; = &quot;HugePages_Free:&quot; ]; then</span>
<span class="p_add">+		freepgs=$size</span>
<span class="p_add">+	fi</span>
<span class="p_add">+	if [ &quot;$name&quot; = &quot;Hugepagesize:&quot; ]; then</span>
<span class="p_add">+		pgsize=$size</span>
<span class="p_add">+	fi</span>
<span class="p_add">+done &lt; /proc/meminfo</span>
<span class="p_add">+</span>
<span class="p_add">+# Set required nr_hugepages</span>
<span class="p_add">+if [ -n &quot;$freepgs&quot; ] &amp;&amp; [ -n &quot;$pgsize&quot; ]; then</span>
<span class="p_add">+	nr_hugepgs=`cat /proc/sys/vm/nr_hugepages`</span>
<span class="p_add">+	needpgs=`expr $needmem / $pgsize`</span>
<span class="p_add">+	tries=2</span>
<span class="p_add">+	while [ $tries -gt 0 ] &amp;&amp; [ $freepgs -lt $needpgs ]; do</span>
<span class="p_add">+		lackpgs=$(( $needpgs - $freepgs ))</span>
<span class="p_add">+		echo 3 &gt; /proc/sys/vm/drop_caches</span>
<span class="p_add">+		echo $(( $lackpgs + $nr_hugepgs )) &gt; /proc/sys/vm/nr_hugepages</span>
<span class="p_add">+		if [ $? -ne 0 ]; then</span>
<span class="p_add">+			echo &quot;Please run this test as root&quot;</span>
<span class="p_add">+		fi</span>
<span class="p_add">+		while read name size unit; do</span>
<span class="p_add">+			if [ &quot;$name&quot; = &quot;HugePages_Free:&quot; ]; then</span>
<span class="p_add">+				freepgs=$size</span>
<span class="p_add">+			fi</span>
<span class="p_add">+		done &lt; /proc/meminfo</span>
<span class="p_add">+		tries=$((tries - 1))</span>
<span class="p_add">+	done</span>
<span class="p_add">+	if [ $freepgs -lt $needpgs ]; then</span>
<span class="p_add">+		printf &quot;Not enough huge pages available (%d &lt; %d)\n&quot; \</span>
<span class="p_add">+		       $freepgs $needpgs</span>
<span class="p_add">+	fi</span>
<span class="p_add">+else</span>
<span class="p_add">+	echo &quot;No hugetlbfs support in kernel ? check dmesg&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
<span class="p_add">+mkdir $mnt</span>
<span class="p_add">+mount -t hugetlbfs none $mnt</span>
<span class="p_add">+</span>
<span class="p_add">+# Run the test programs</span>
<span class="p_add">+echo &quot;....................&quot;</span>
<span class="p_add">+echo &quot;Test HugeTLB vs THP&quot;</span>
<span class="p_add">+echo &quot;....................&quot;</span>
<span class="p_add">+./hugetlb_vs_thp_test</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+	echo &quot;[FAIL]&quot;</span>
<span class="p_add">+	exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+	echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
<span class="p_add">+echo &quot;.........................&quot;</span>
<span class="p_add">+echo &quot;Test subpage protection&quot;</span>
<span class="p_add">+echo &quot;.........................&quot;</span>
<span class="p_add">+./subpage_prot</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+	echo &quot;[FAIL]&quot;</span>
<span class="p_add">+	exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+	echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
<span class="p_add">+echo &quot;...........................&quot;</span>
<span class="p_add">+echo &quot;Test normal page migration&quot;</span>
<span class="p_add">+echo &quot;...........................&quot;</span>
<span class="p_add">+./page-migration</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+	echo &quot;[FAIL]&quot;</span>
<span class="p_add">+	exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+	echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
<span class="p_add">+# Enable this after huge page migration is supported on POWER</span>
<span class="p_add">+</span>
<span class="p_add">+echo &quot;.........................&quot;</span>
<span class="p_add">+echo &quot;Test huge page migration&quot;</span>
<span class="p_add">+echo &quot;.........................&quot;</span>
<span class="p_add">+./hugepage-migration</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+	echo &quot;[FAIL]&quot;</span>
<span class="p_add">+	exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+	echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
<span class="p_add">+# Huge pages cleanup</span>
<span class="p_add">+umount $mnt</span>
<span class="p_add">+rm -rf $mnt</span>
<span class="p_add">+echo $nr_hugepgs &gt; /proc/sys/vm/nr_hugepages</span>
<span class="p_add">+</span>
<span class="p_add">+exit $exitcode</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



