
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,002/100] mm: migrate dirty page without clear_page_dirty_for_io etc - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,002/100] mm: migrate dirty page without clear_page_dirty_for_io etc</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 19, 2016, 7:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;2c789028e7390ca050752f659a82c6cdad357b67.1471589700.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9289729/mbox/"
   >mbox</a>
|
   <a href="/patch/9289729/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9289729/">/patch/9289729/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F27D2607FF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Aug 2016 07:35:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6D22292E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Aug 2016 07:35:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DB35429317; Fri, 19 Aug 2016 07:35:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2D599292E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Aug 2016 07:35:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755221AbcHSHLc (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 19 Aug 2016 03:11:32 -0400
Received: from mx2.suse.de ([195.135.220.15]:49494 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754299AbcHSHK3 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 19 Aug 2016 03:10:29 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id D5D11ABBD;
	Fri, 19 Aug 2016 07:10:05 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org, Hugh Dickins &lt;hughd@google.com&gt;,
	Christoph Lameter &lt;cl@linux.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;, Oleg Nesterov &lt;oleg@redhat.com&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	KOSAKI Motohiro &lt;kosaki.motohiro@jp.fujitsu.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Charles Williams &lt;ciwillia@brocade.com&gt;, Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 002/100] mm: migrate dirty page without
	clear_page_dirty_for_io etc
Date: Fri, 19 Aug 2016 09:08:24 +0200
Message-Id: &lt;2c789028e7390ca050752f659a82c6cdad357b67.1471589700.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;aa8f21d06e61b029341c51b17edd68ba15fe0e47.1471589700.git.jslaby@suse.cz&gt;
References: &lt;aa8f21d06e61b029341c51b17edd68ba15fe0e47.1471589700.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1471589700.git.jslaby@suse.cz&gt;
References: &lt;cover.1471589700.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Aug. 19, 2016, 7:08 a.m.</div>
<pre class="content">
<span class="from">From: Hugh Dickins &lt;hughd@google.com&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

commit 42cb14b110a5698ccf26ce59c4441722605a3743 upstream.

clear_page_dirty_for_io() has accumulated writeback and memcg subtleties
since v2.6.16 first introduced page migration; and the set_page_dirty()
which completed its migration of PageDirty, later had to be moderated to
__set_page_dirty_nobuffers(); then PageSwapBacked had to skip that too.

No actual problems seen with this procedure recently, but if you look into
what the clear_page_dirty_for_io(page)+set_page_dirty(newpage) is actually
achieving, it turns out to be nothing more than moving the PageDirty flag,
and its NR_FILE_DIRTY stat from one zone to another.

It would be good to avoid a pile of irrelevant decrementations and
incrementations, and improper event counting, and unnecessary descent of
the radix_tree under tree_lock (to set the PAGECACHE_TAG_DIRTY which
radix_tree_replace_slot() left in place anyway).

Do the NR_FILE_DIRTY movement, like the other stats movements, while
interrupts still disabled in migrate_page_move_mapping(); and don&#39;t even
bother if the zone is the same.  Do the PageDirty movement there under
tree_lock too, where old page is frozen and newpage not yet visible:
bearing in mind that as soon as newpage becomes visible in radix_tree, an
un-page-locked set_page_dirty() might interfere (or perhaps that&#39;s just
not possible: anything doing so should already hold an additional
reference to the old page, preventing its migration; but play safe).

But we do still need to transfer PageDirty in migrate_page_copy(), for
those who don&#39;t go the mapping route through migrate_page_move_mapping().

Signed-off-by: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Christoph Lameter &lt;cl@linux.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: Davidlohr Bueso &lt;dave@stgolabs.net&gt;
Cc: Oleg Nesterov &lt;oleg@redhat.com&gt;
Cc: Sasha Levin &lt;sasha.levin@oracle.com&gt;
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;
Cc: KOSAKI Motohiro &lt;kosaki.motohiro@jp.fujitsu.com&gt;
Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Charles (Chas) Williams &lt;ciwillia@brocade.com&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 mm/migrate.c | 51 +++++++++++++++++++++++++++++++--------------------
 1 file changed, 31 insertions(+), 20 deletions(-)

<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 71a2533ca8f5..0ec7a87669f7 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -31,6 +31,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/vmalloc.h&gt;
 #include &lt;linux/security.h&gt;
 #include &lt;linux/memcontrol.h&gt;
<span class="p_add">+#include &lt;linux/backing-dev.h&gt;</span>
 #include &lt;linux/syscalls.h&gt;
 #include &lt;linux/hugetlb.h&gt;
 #include &lt;linux/hugetlb_cgroup.h&gt;
<span class="p_chunk">@@ -320,6 +321,8 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 		struct buffer_head *head, enum migrate_mode mode,
 		int extra_count)
 {
<span class="p_add">+	struct zone *oldzone, *newzone;</span>
<span class="p_add">+	int dirty;</span>
 	int expected_count = 1 + extra_count;
 	void **pslot;
 
<span class="p_chunk">@@ -330,6 +333,9 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 		return MIGRATEPAGE_SUCCESS;
 	}
 
<span class="p_add">+	oldzone = page_zone(page);</span>
<span class="p_add">+	newzone = page_zone(newpage);</span>
<span class="p_add">+</span>
 	spin_lock_irq(&amp;mapping-&gt;tree_lock);
 
 	pslot = radix_tree_lookup_slot(&amp;mapping-&gt;page_tree,
<span class="p_chunk">@@ -370,6 +376,13 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 		set_page_private(newpage, page_private(page));
 	}
 
<span class="p_add">+	/* Move dirty while page refs frozen and newpage not yet exposed */</span>
<span class="p_add">+	dirty = PageDirty(page);</span>
<span class="p_add">+	if (dirty) {</span>
<span class="p_add">+		ClearPageDirty(page);</span>
<span class="p_add">+		SetPageDirty(newpage);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	radix_tree_replace_slot(pslot, newpage);
 
 	/*
<span class="p_chunk">@@ -379,6 +392,9 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 	 */
 	page_unfreeze_refs(page, expected_count - 1);
 
<span class="p_add">+	spin_unlock(&amp;mapping-&gt;tree_lock);</span>
<span class="p_add">+	/* Leave irq disabled to prevent preemption while updating stats */</span>
<span class="p_add">+</span>
 	/*
 	 * If moved to a different zone then also account
 	 * the page for that zone. Other VM counters will be
<span class="p_chunk">@@ -389,13 +405,19 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 	 * via NR_FILE_PAGES and NR_ANON_PAGES if they
 	 * are mapped to swap space.
 	 */
<span class="p_del">-	__dec_zone_page_state(page, NR_FILE_PAGES);</span>
<span class="p_del">-	__inc_zone_page_state(newpage, NR_FILE_PAGES);</span>
<span class="p_del">-	if (!PageSwapCache(page) &amp;&amp; PageSwapBacked(page)) {</span>
<span class="p_del">-		__dec_zone_page_state(page, NR_SHMEM);</span>
<span class="p_del">-		__inc_zone_page_state(newpage, NR_SHMEM);</span>
<span class="p_add">+	if (newzone != oldzone) {</span>
<span class="p_add">+		__dec_zone_state(oldzone, NR_FILE_PAGES);</span>
<span class="p_add">+		__inc_zone_state(newzone, NR_FILE_PAGES);</span>
<span class="p_add">+		if (PageSwapBacked(page) &amp;&amp; !PageSwapCache(page)) {</span>
<span class="p_add">+			__dec_zone_state(oldzone, NR_SHMEM);</span>
<span class="p_add">+			__inc_zone_state(newzone, NR_SHMEM);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (dirty &amp;&amp; mapping_cap_account_dirty(mapping)) {</span>
<span class="p_add">+			__dec_zone_state(oldzone, NR_FILE_DIRTY);</span>
<span class="p_add">+			__inc_zone_state(newzone, NR_FILE_DIRTY);</span>
<span class="p_add">+		}</span>
 	}
<span class="p_del">-	spin_unlock_irq(&amp;mapping-&gt;tree_lock);</span>
<span class="p_add">+	local_irq_enable();</span>
 
 	return MIGRATEPAGE_SUCCESS;
 }
<span class="p_chunk">@@ -518,20 +540,9 @@</span> <span class="p_context"> void migrate_page_copy(struct page *newpage, struct page *page)</span>
 	if (PageMappedToDisk(page))
 		SetPageMappedToDisk(newpage);
 
<span class="p_del">-	if (PageDirty(page)) {</span>
<span class="p_del">-		clear_page_dirty_for_io(page);</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Want to mark the page and the radix tree as dirty, and</span>
<span class="p_del">-		 * redo the accounting that clear_page_dirty_for_io undid,</span>
<span class="p_del">-		 * but we can&#39;t use set_page_dirty because that function</span>
<span class="p_del">-		 * is actually a signal that all of the page has become dirty.</span>
<span class="p_del">-		 * Whereas only part of our page may be dirty.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (PageSwapBacked(page))</span>
<span class="p_del">-			SetPageDirty(newpage);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			__set_page_dirty_nobuffers(newpage);</span>
<span class="p_del">- 	}</span>
<span class="p_add">+	/* Move dirty on pages not done by migrate_page_move_mapping() */</span>
<span class="p_add">+	if (PageDirty(page))</span>
<span class="p_add">+		SetPageDirty(newpage);</span>
 
 	mlock_migrate_page(newpage, page);
 	ksm_migrate_page(newpage, page);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



