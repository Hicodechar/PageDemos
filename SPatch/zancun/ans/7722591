
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,01/12] mm: support madvise(MADV_FREE) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,01/12] mm: support madvise(MADV_FREE)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2015, 9:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151130092229.GA10745@bbox&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7722591/mbox/"
   >mbox</a>
|
   <a href="/patch/7722591/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7722591/">/patch/7722591/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 633AD9F387
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 09:22:31 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id CE526204F6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 09:22:29 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E831020502
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Nov 2015 09:22:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753627AbbK3JWY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 30 Nov 2015 04:22:24 -0500
Received: from LGEAMRELO12.lge.com ([156.147.23.52]:41603 &quot;EHLO
	lgeamrelo12.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753564AbbK3JWP convert rfc822-to-8bit (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 30 Nov 2015 04:22:15 -0500
Received: from unknown (HELO lgemrelse7q.lge.com) (156.147.1.151)
	by 156.147.23.52 with ESMTP; 30 Nov 2015 18:22:13 +0900
X-Original-SENDERIP: 156.147.1.151
X-Original-MAILFROM: minchan@kernel.org
Received: from unknown (HELO LGEAEXHB04Q.LGE.NET) (165.244.98.204)
	by 156.147.1.151 with ESMTP; 30 Nov 2015 18:22:12 +0900
X-Original-SENDERIP: 165.244.98.204
X-Original-MAILFROM: minchan@kernel.org
Received: from lgekrmhub01.lge.com (10.185.110.11) by LGEAEXHB04Q.LGE.NET
	(165.244.98.204) with Microsoft SMTP Server id 8.3.264.0;
	Mon, 30 Nov 2015 18:22:12 +0900
Received: from lgeamrelo01.lge.com ([156.147.1.125])          by
	lgekrmhub01.lge.com (Lotus Domino Release 8.5.3FP6) with ESMTP id
	2015113018221198-783635 ;          Mon, 30 Nov 2015 18:22:11 +0900 
Received: from unknown (HELO bbox) (10.177.223.161)	by 156.147.1.125 with
	ESMTP; 30 Nov 2015 18:22:11 +0900
X-Original-SENDERIP: 10.177.223.161
X-Original-MAILFROM: minchan@kernel.org
Date: Mon, 30 Nov 2015 18:22:30 +0900
From: Minchan Kim &lt;minchan@kernel.org&gt;
To: Mika =?iso-8859-1?Q?Penttil=E4?= &lt;mika.penttila@nextfour.com&gt;
CC: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Michael Kerrisk &lt;mtk.manpages@gmail.com&gt;,
	linux-api@vger.kernel.org, Hugh Dickins &lt;hughd@google.com&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	KOSAKI Motohiro &lt;kosaki.motohiro@jp.fujitsu.com&gt;,
	Jason Evans &lt;je@fb.com&gt;, Daniel Micay &lt;danielmicay@gmail.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Shaohua Li &lt;shli@kernel.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	yalin.wang2010@gmail.com, Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;
Subject: Re: [PATCH v5 01/12] mm: support madvise(MADV_FREE)
Message-ID: &lt;20151130092229.GA10745@bbox&gt;
References: &lt;1448865583-2446-1-git-send-email-minchan@kernel.org&gt;
	&lt;1448865583-2446-2-git-send-email-minchan@kernel.org&gt;
	&lt;565C06C9.7040906@nextfour.com&gt;
MIME-Version: 1.0
In-Reply-To: &lt;565C06C9.7040906@nextfour.com&gt;
User-Agent: Mutt/1.5.21 (2010-09-15)
X-MIMETrack: Itemize by SMTP Server on LGEKRMHUB01/LGE/LG Group(Release
	8.5.3FP6|November 21, 2013) at 2015/11/30 18:22:12,
	Serialize by Router on LGEKRMHUB01/LGE/LG Group(Release
	8.5.3FP6|November 21, 2013) at 2015/11/30 18:22:12
Content-Type: text/plain; charset=&quot;iso-8859-1&quot;
Content-Disposition: inline
Content-Transfer-Encoding: 8BIT
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 30, 2015, 9:22 a.m.</div>
<pre class="content">
On Mon, Nov 30, 2015 at 10:20:25AM +0200, Mika Penttil√§ wrote:
<span class="quote">&gt; &gt; +		 * If pmd isn&#39;t transhuge but the page is THP and</span>
<span class="quote">&gt; &gt; +		 * is owned by only this process, split it and</span>
<span class="quote">&gt; &gt; +		 * deactivate all pages.</span>
<span class="quote">&gt; &gt; +		 */</span>
<span class="quote">&gt; &gt; +		if (PageTransCompound(page)) {</span>
<span class="quote">&gt; &gt; +			if (page_mapcount(page) != 1)</span>
<span class="quote">&gt; &gt; +				goto out;</span>
<span class="quote">&gt; &gt; +			get_page(page);</span>
<span class="quote">&gt; &gt; +			if (!trylock_page(page)) {</span>
<span class="quote">&gt; &gt; +				put_page(page);</span>
<span class="quote">&gt; &gt; +				goto out;</span>
<span class="quote">&gt; &gt; +			}</span>
<span class="quote">&gt; &gt; +			pte_unmap_unlock(orig_pte, ptl);</span>
<span class="quote">&gt; &gt; +			if (split_huge_page(page)) {</span>
<span class="quote">&gt; &gt; +				unlock_page(page);</span>
<span class="quote">&gt; &gt; +				put_page(page);</span>
<span class="quote">&gt; &gt; +				pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="quote">&gt; &gt; +				goto out;</span>
<span class="quote">&gt; &gt; +			}</span>
<span class="quote">&gt; &gt; +			pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="quote">&gt; &gt; +			pte--;</span>
<span class="quote">&gt; &gt; +			addr -= PAGE_SIZE;</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +		}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; looks like this leaks page count if split_huge_page() is succesfull</span>
<span class="quote">&gt; (returns zero).</span>

Even, I missed unlock_page.
Thanks for the review!

From d22483fae454b100bcf73d514dd7d903fd84f744 Mon Sep 17 00:00:00 2001
<span class="from">From: Minchan Kim &lt;minchan@kernel.org&gt;</span>
Date: Fri, 30 Oct 2015 16:01:37 +0900
Subject: [PATCH v5 01/12] mm: support madvise(MADV_FREE)

Linux doesn&#39;t have an ability to free pages lazy while other OS already
have been supported that named by madvise(MADV_FREE).

The gain is clear that kernel can discard freed pages rather than swapping
out or OOM if memory pressure happens.

Without memory pressure, freed pages would be reused by userspace without
another additional overhead(ex, page fault + allocation + zeroing).

Jason Evans said:

: Facebook has been using MAP_UNINITIALIZED
: (https://lkml.org/lkml/2012/1/18/308) in some of its applications for
: several years, but there are operational costs to maintaining this
: out-of-tree in our kernel and in jemalloc, and we are anxious to retire it
: in favor of MADV_FREE.  When we first enabled MAP_UNINITIALIZED it
: increased throughput for much of our workload by ~5%, and although the
: benefit has decreased using newer hardware and kernels, there is still
: enough benefit that we cannot reasonably retire it without a replacement.
:
: Aside from Facebook operations, there are numerous broadly used
: applications that would benefit from MADV_FREE.  The ones that immediately
: come to mind are redis, varnish, and MariaDB.  I don&#39;t have much insight
: into Android internals and development process, but I would hope to see
: MADV_FREE support eventually end up there as well to benefit applications
: linked with the integrated jemalloc.
:
: jemalloc will use MADV_FREE once it becomes available in the Linux kernel.
: In fact, jemalloc already uses MADV_FREE or equivalent everywhere it&#39;s
: available: *BSD, OS X, Windows, and Solaris -- every platform except Linux
: (and AIX, but I&#39;m not sure it even compiles on AIX).  The lack of
: MADV_FREE on Linux forced me down a long series of increasingly
: sophisticated heuristics for madvise() volume reduction, and even so this
: remains a common performance issue for people using jemalloc on Linux.
: Please integrate MADV_FREE; many people will benefit substantially.

How it works:

When madvise syscall is called, VM clears dirty bit of ptes of the range.
If memory pressure happens, VM checks dirty bit of page table and if it
found still &quot;clean&quot;, it means it&#39;s a &quot;lazyfree pages&quot; so VM could discard
the page instead of swapping out.  Once there was store operation for the
page before VM peek a page to reclaim, dirty bit is set so VM can swap out
the page instead of discarding.

One thing we should notice is that basically, MADV_FREE relies on dirty bit
in page table entry to decide whether VM allows to discard the page or not.
IOW, if page table entry includes marked dirty bit, VM shouldn&#39;t discard
the page.

However, as a example, if swap-in by read fault happens, page table entry
doesn&#39;t have dirty bit so MADV_FREE could discard the page wrongly.

For avoiding the problem, MADV_FREE did more checks with PageDirty
and PageSwapCache. It worked out because swapped-in page lives on
swap cache and since it is evicted from the swap cache, the page has
PG_dirty flag. So both page flags check effectively prevent
wrong discarding by MADV_FREE.

However, a problem in above logic is that swapped-in page has
PG_dirty still after they are removed from swap cache so VM cannot
consider the page as freeable any more even if madvise_free is
called in future.

Look at below example for detail.

    ptr = malloc();
    memset(ptr);
    ..
    ..
    .. heavy memory pressure so all of pages are swapped out
    ..
    ..
    var = *ptr; -&gt; a page swapped-in and could be removed from
                   swapcache. Then, page table doesn&#39;t mark
                   dirty bit and page descriptor includes PG_dirty
    ..
    ..
    madvise_free(ptr); -&gt; It doesn&#39;t clear PG_dirty of the page.
    ..
    ..
    ..
    .. heavy memory pressure again.
    .. In this time, VM cannot discard the page because the page
    .. has *PG_dirty*

To solve the problem, this patch clears PG_dirty if only the page is owned
exclusively by current process when madvise is called because PG_dirty
represents ptes&#39;s dirtiness in several processes so we could clear it only
if we own it exclusively.

Firstly, heavy users would be general allocators(ex, jemalloc, tcmalloc
and hope glibc supports it) and jemalloc/tcmalloc already have supported
the feature for other OS(ex, FreeBSD)

barrios@blaptop:~/benchmark/ebizzy$ lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                12
On-line CPU(s) list:   0-11
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             12
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 2
Stepping:              3
CPU MHz:               3200.185
BogoMIPS:              6400.53
Virtualization:        VT-x
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              4096K
NUMA node0 CPU(s):     0-11
ebizzy benchmark(./ebizzy -S 10 -n 512)

Higher avg is better.

 vanilla-jemalloc		MADV_free-jemalloc

1 thread
records: 10			    records: 10
avg:	2961.90			    avg:   12069.70
std:	  71.96(2.43%)		    std:     186.68(1.55%)
max:	3070.00			    max:   12385.00
min:	2796.00			    min:   11746.00

2 thread
records: 10			    records: 10
avg:	5020.00			    avg:   17827.00
std:	 264.87(5.28%)		    std:     358.52(2.01%)
max:	5244.00			    max:   18760.00
min:	4251.00			    min:   17382.00

4 thread
records: 10			    records: 10
avg:	8988.80			    avg:   27930.80
std:	1175.33(13.08%)		    std:    3317.33(11.88%)
max:	9508.00			    max:   30879.00
min:	5477.00			    min:   21024.00

8 thread
records: 10			    records: 10
avg:   13036.50			    avg:   33739.40
std:	 170.67(1.31%)		    std:    5146.22(15.25%)
max:   13371.00			    max:   40572.00
min:   12785.00			    min:   24088.00

16 thread
records: 10			    records: 10
avg:   11092.40			    avg:   31424.20
std:	 710.60(6.41%)		    std:    3763.89(11.98%)
max:   12446.00			    max:   36635.00
min:	9949.00			    min:   25669.00

32 thread
records: 10			    records: 10
avg:   11067.00			    avg:   34495.80
std:	 971.06(8.77%)		    std:    2721.36(7.89%)
max:   12010.00			    max:   38598.00
min:	9002.00			    min:   30636.00

In summary, MADV_FREE is about much faster than MADV_DONTNEED.
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="acked-by">Acked-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
---
 include/linux/rmap.h                   |   1 +
 include/linux/vm_event_item.h          |   1 +
 include/uapi/asm-generic/mman-common.h |   1 +
 mm/madvise.c                           | 170 +++++++++++++++++++++++++++++++++
 mm/rmap.c                              |   8 ++
 mm/swap_state.c                        |   5 +-
 mm/vmscan.c                            |  10 +-
 mm/vmstat.c                            |   1 +
 8 files changed, 192 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/rmap.h b/include/linux/rmap.h</span>
<span class="p_header">index 77d1ba57d495..04d2aec64e57 100644</span>
<span class="p_header">--- a/include/linux/rmap.h</span>
<span class="p_header">+++ b/include/linux/rmap.h</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> enum ttu_flags {</span>
 	TTU_UNMAP = 1,			/* unmap mode */
 	TTU_MIGRATION = 2,		/* migration mode */
 	TTU_MUNLOCK = 4,		/* munlock mode */
<span class="p_add">+	TTU_LZFREE = 8,			/* lazy free mode */</span>
 
 	TTU_IGNORE_MLOCK = (1 &lt;&lt; 8),	/* ignore mlock */
 	TTU_IGNORE_ACCESS = (1 &lt;&lt; 9),	/* don&#39;t age */
<span class="p_header">diff --git a/include/linux/vm_event_item.h b/include/linux/vm_event_item.h</span>
<span class="p_header">index e1f8c993e73b..67c1dbd19c6d 100644</span>
<span class="p_header">--- a/include/linux/vm_event_item.h</span>
<span class="p_header">+++ b/include/linux/vm_event_item.h</span>
<span class="p_chunk">@@ -25,6 +25,7 @@</span> <span class="p_context"> enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,</span>
 		FOR_ALL_ZONES(PGALLOC),
 		PGFREE, PGACTIVATE, PGDEACTIVATE,
 		PGFAULT, PGMAJFAULT,
<span class="p_add">+		PGLAZYFREED,</span>
 		FOR_ALL_ZONES(PGREFILL),
 		FOR_ALL_ZONES(PGSTEAL_KSWAPD),
 		FOR_ALL_ZONES(PGSTEAL_DIRECT),
<span class="p_header">diff --git a/include/uapi/asm-generic/mman-common.h b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">index a74dd84bbb6d..0e821e3c3d45 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_chunk">@@ -39,6 +39,7 @@</span> <span class="p_context"></span>
 #define MADV_SEQUENTIAL	2		/* expect sequential page references */
 #define MADV_WILLNEED	3		/* will need these pages */
 #define MADV_DONTNEED	4		/* don&#39;t need these pages */
<span class="p_add">+#define MADV_FREE	5		/* free pages only if memory pressure */</span>
 
 /* common parameters: try to keep these consistent across architectures */
 #define MADV_REMOVE	9		/* remove these pages &amp; resources */
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index c889fcbb530e..ed137fde4459 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -20,6 +20,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/backing-dev.h&gt;
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/swapops.h&gt;
<span class="p_add">+#include &lt;linux/mmu_notifier.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/tlb.h&gt;</span>
 
 /*
  * Any behaviour which results in changes to the vma-&gt;vm_flags needs to
<span class="p_chunk">@@ -32,6 +35,7 @@</span> <span class="p_context"> static int madvise_need_mmap_write(int behavior)</span>
 	case MADV_REMOVE:
 	case MADV_WILLNEED:
 	case MADV_DONTNEED:
<span class="p_add">+	case MADV_FREE:</span>
 		return 0;
 	default:
 		/* be safe, default to 1. list exceptions explicitly */
<span class="p_chunk">@@ -256,6 +260,163 @@</span> <span class="p_context"> static long madvise_willneed(struct vm_area_struct *vma,</span>
 	return 0;
 }
 
<span class="p_add">+static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+				unsigned long end, struct mm_walk *walk)</span>
<span class="p_add">+</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mmu_gather *tlb = walk-&gt;private;</span>
<span class="p_add">+	struct mm_struct *mm = tlb-&gt;mm;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pte_t *orig_pte, *pte, ptent;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	split_huge_pmd(vma, pmd, addr);</span>
<span class="p_add">+	if (pmd_trans_unstable(pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	orig_pte = pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="p_add">+	arch_enter_lazy_mmu_mode();</span>
<span class="p_add">+	for (; addr != end; pte++, addr += PAGE_SIZE) {</span>
<span class="p_add">+		ptent = *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!pte_present(ptent))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, ptent);</span>
<span class="p_add">+		if (!page)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If pmd isn&#39;t transhuge but the page is THP and</span>
<span class="p_add">+		 * is owned by only this process, split it and</span>
<span class="p_add">+		 * deactivate all pages.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (PageTransCompound(page)) {</span>
<span class="p_add">+			if (page_mapcount(page) != 1)</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			get_page(page);</span>
<span class="p_add">+			if (!trylock_page(page)) {</span>
<span class="p_add">+				put_page(page);</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			pte_unmap_unlock(orig_pte, ptl);</span>
<span class="p_add">+			if (split_huge_page(page)) {</span>
<span class="p_add">+				unlock_page(page);</span>
<span class="p_add">+				put_page(page);</span>
<span class="p_add">+				pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			put_page(page);</span>
<span class="p_add">+			unlock_page(page);</span>
<span class="p_add">+			pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="p_add">+			pte--;</span>
<span class="p_add">+			addr -= PAGE_SIZE;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		VM_BUG_ON_PAGE(PageTransCompound(page), page);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (PageSwapCache(page) || PageDirty(page)) {</span>
<span class="p_add">+			if (!trylock_page(page))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * If page is shared with others, we couldn&#39;t clear</span>
<span class="p_add">+			 * PG_dirty of the page.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (page_mapcount(page) != 1) {</span>
<span class="p_add">+				unlock_page(page);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			if (PageSwapCache(page) &amp;&amp; !try_to_free_swap(page)) {</span>
<span class="p_add">+				unlock_page(page);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			ClearPageDirty(page);</span>
<span class="p_add">+			unlock_page(page);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pte_young(ptent) || pte_dirty(ptent)) {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Some of architecture(ex, PPC) don&#39;t update TLB</span>
<span class="p_add">+			 * with set_pte_at and tlb_remove_tlb_entry so for</span>
<span class="p_add">+			 * the portability, remap the pte with old|clean</span>
<span class="p_add">+			 * after pte clearing.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			ptent = ptep_get_and_clear_full(mm, addr, pte,</span>
<span class="p_add">+							tlb-&gt;fullmm);</span>
<span class="p_add">+</span>
<span class="p_add">+			ptent = pte_mkold(ptent);</span>
<span class="p_add">+			ptent = pte_mkclean(ptent);</span>
<span class="p_add">+			set_pte_at(mm, addr, pte, ptent);</span>
<span class="p_add">+			tlb_remove_tlb_entry(tlb, pte, addr);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+out:</span>
<span class="p_add">+	arch_leave_lazy_mmu_mode();</span>
<span class="p_add">+	pte_unmap_unlock(orig_pte, ptl);</span>
<span class="p_add">+	cond_resched();</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void madvise_free_page_range(struct mmu_gather *tlb,</span>
<span class="p_add">+			     struct vm_area_struct *vma,</span>
<span class="p_add">+			     unsigned long addr, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_walk free_walk = {</span>
<span class="p_add">+		.pmd_entry = madvise_free_pte_range,</span>
<span class="p_add">+		.mm = vma-&gt;vm_mm,</span>
<span class="p_add">+		.private = tlb,</span>
<span class="p_add">+	};</span>
<span class="p_add">+</span>
<span class="p_add">+	tlb_start_vma(tlb, vma);</span>
<span class="p_add">+	walk_page_range(addr, end, &amp;free_walk);</span>
<span class="p_add">+	tlb_end_vma(tlb, vma);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int madvise_free_single_vma(struct vm_area_struct *vma,</span>
<span class="p_add">+			unsigned long start_addr, unsigned long end_addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long start, end;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	struct mmu_gather tlb;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; (VM_LOCKED|VM_HUGETLB|VM_PFNMAP))</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* MADV_FREE works for only anon vma at the moment */</span>
<span class="p_add">+	if (!vma_is_anonymous(vma))</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	start = max(vma-&gt;vm_start, start_addr);</span>
<span class="p_add">+	if (start &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	end = min(vma-&gt;vm_end, end_addr);</span>
<span class="p_add">+	if (end &lt;= vma-&gt;vm_start)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	lru_add_drain();</span>
<span class="p_add">+	tlb_gather_mmu(&amp;tlb, mm, start, end);</span>
<span class="p_add">+	update_hiwater_rss(mm);</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, start, end);</span>
<span class="p_add">+	madvise_free_page_range(&amp;tlb, vma, start, end);</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, start, end);</span>
<span class="p_add">+	tlb_finish_mmu(&amp;tlb, start, end);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static long madvise_free(struct vm_area_struct *vma,</span>
<span class="p_add">+			     struct vm_area_struct **prev,</span>
<span class="p_add">+			     unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	*prev = vma;</span>
<span class="p_add">+	return madvise_free_single_vma(vma, start, end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Application no longer needs these pages.  If the pages are dirty,
  * it&#39;s OK to just throw them away.  The app will be more careful about
<span class="p_chunk">@@ -379,6 +540,14 @@</span> <span class="p_context"> madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,</span>
 		return madvise_remove(vma, prev, start, end);
 	case MADV_WILLNEED:
 		return madvise_willneed(vma, prev, start, end);
<span class="p_add">+	case MADV_FREE:</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * XXX: In this implementation, MADV_FREE works like</span>
<span class="p_add">+		 * MADV_DONTNEED on swapless system or full swap.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (get_nr_swap_pages() &gt; 0)</span>
<span class="p_add">+			return madvise_free(vma, prev, start, end);</span>
<span class="p_add">+		/* passthrough */</span>
 	case MADV_DONTNEED:
 		return madvise_dontneed(vma, prev, start, end);
 	default:
<span class="p_chunk">@@ -398,6 +567,7 @@</span> <span class="p_context"> madvise_behavior_valid(int behavior)</span>
 	case MADV_REMOVE:
 	case MADV_WILLNEED:
 	case MADV_DONTNEED:
<span class="p_add">+	case MADV_FREE:</span>
 #ifdef CONFIG_KSM
 	case MADV_MERGEABLE:
 	case MADV_UNMERGEABLE:
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 6f371261dd12..321b633ee559 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1508,6 +1508,13 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		 * See handle_pte_fault() ...
 		 */
 		VM_BUG_ON_PAGE(!PageSwapCache(page), page);
<span class="p_add">+</span>
<span class="p_add">+		if (!PageDirty(page) &amp;&amp; (flags &amp; TTU_LZFREE)) {</span>
<span class="p_add">+			/* It&#39;s a freeable page by MADV_FREE */</span>
<span class="p_add">+			dec_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_add">+			goto discard;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		if (swap_duplicate(entry) &lt; 0) {
 			set_pte_at(mm, address, pte, pteval);
 			ret = SWAP_FAIL;
<span class="p_chunk">@@ -1528,6 +1535,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	} else
 		dec_mm_counter(mm, mm_counter_file(page));
 
<span class="p_add">+discard:</span>
 	page_remove_rmap(page, PageHuge(page));
 	page_cache_release(page);
 
<span class="p_header">diff --git a/mm/swap_state.c b/mm/swap_state.c</span>
<span class="p_header">index d783872d746c..676ff2991380 100644</span>
<span class="p_header">--- a/mm/swap_state.c</span>
<span class="p_header">+++ b/mm/swap_state.c</span>
<span class="p_chunk">@@ -185,13 +185,12 @@</span> <span class="p_context"> int add_to_swap(struct page *page, struct list_head *list)</span>
 	 * deadlock in the swap out path.
 	 */
 	/*
<span class="p_del">-	 * Add it to the swap cache and mark it dirty</span>
<span class="p_add">+	 * Add it to the swap cache.</span>
 	 */
 	err = add_to_swap_cache(page, entry,
 			__GFP_HIGH|__GFP_NOMEMALLOC|__GFP_NOWARN);
 
<span class="p_del">-	if (!err) {	/* Success */</span>
<span class="p_del">-		SetPageDirty(page);</span>
<span class="p_add">+	if (!err) {</span>
 		return 1;
 	} else {	/* -ENOMEM radix-tree allocation failure */
 		/*
<span class="p_header">diff --git a/mm/vmscan.c b/mm/vmscan.c</span>
<span class="p_header">index 4589cfdbe405..c2f69445190c 100644</span>
<span class="p_header">--- a/mm/vmscan.c</span>
<span class="p_header">+++ b/mm/vmscan.c</span>
<span class="p_chunk">@@ -908,6 +908,7 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		int may_enter_fs;
 		enum page_references references = PAGEREF_RECLAIM_CLEAN;
 		bool dirty, writeback;
<span class="p_add">+		bool lazyfree = false;</span>
 
 		cond_resched();
 
<span class="p_chunk">@@ -1051,6 +1052,7 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 				goto keep_locked;
 			if (!add_to_swap(page, page_list))
 				goto activate_locked;
<span class="p_add">+			lazyfree = true;</span>
 			may_enter_fs = 1;
 
 			/* Adding to swap updated mapping */
<span class="p_chunk">@@ -1062,8 +1064,9 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		 * processes. Try to unmap it here.
 		 */
 		if (page_mapped(page) &amp;&amp; mapping) {
<span class="p_del">-			switch (try_to_unmap(page,</span>
<span class="p_del">-					ttu_flags|TTU_BATCH_FLUSH)) {</span>
<span class="p_add">+			switch (try_to_unmap(page, lazyfree ?</span>
<span class="p_add">+				(ttu_flags | TTU_BATCH_FLUSH | TTU_LZFREE) :</span>
<span class="p_add">+				(ttu_flags | TTU_BATCH_FLUSH))) {</span>
 			case SWAP_FAIL:
 				goto activate_locked;
 			case SWAP_AGAIN:
<span class="p_chunk">@@ -1188,6 +1191,9 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		 */
 		__ClearPageLocked(page);
 free_it:
<span class="p_add">+		if (lazyfree &amp;&amp; !PageDirty(page))</span>
<span class="p_add">+			count_vm_event(PGLAZYFREED);</span>
<span class="p_add">+</span>
 		nr_reclaimed++;
 
 		/*
<span class="p_header">diff --git a/mm/vmstat.c b/mm/vmstat.c</span>
<span class="p_header">index d13cd8eebf70..38929dc79c3d 100644</span>
<span class="p_header">--- a/mm/vmstat.c</span>
<span class="p_header">+++ b/mm/vmstat.c</span>
<span class="p_chunk">@@ -781,6 +781,7 @@</span> <span class="p_context"> const char * const vmstat_text[] = {</span>
 
 	&quot;pgfault&quot;,
 	&quot;pgmajfault&quot;,
<span class="p_add">+	&quot;pglazyfreed&quot;,</span>
 
 	TEXTS_FOR_ZONES(&quot;pgrefill&quot;)
 	TEXTS_FOR_ZONES(&quot;pgsteal_kswapd&quot;)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



