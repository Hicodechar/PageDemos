
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arm64: Implement arch_setup_pdev_archdata hook - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arm64: Implement arch_setup_pdev_archdata hook</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=126721">Baolin Wang</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2016, 8:29 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;b4645ade4a4d4150e76594f5bf04a3ad5e7d5221.1465287808.git.baolin.wang@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9160121/mbox/"
   >mbox</a>
|
   <a href="/patch/9160121/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9160121/">/patch/9160121/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A7FF960467 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 08:30:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9808627B13
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 08:30:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8CBEB2823D; Tue,  7 Jun 2016 08:30:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 826BA27B13
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 08:30:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754156AbcFGIaH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 7 Jun 2016 04:30:07 -0400
Received: from mail-pf0-f176.google.com ([209.85.192.176]:33331 &quot;EHLO
	mail-pf0-f176.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751547AbcFGIaE (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 7 Jun 2016 04:30:04 -0400
Received: by mail-pf0-f176.google.com with SMTP id y124so16190732pfy.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 07 Jun 2016 01:30:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=HVWjU3SLnRYhc7MEHSJhopxEckeoAC6endNqo0Hv3P8=;
	b=THt3CkaYkYjbbKoVlpT14PiRlVX0QPmA1RuyGYJhfYt5R+agyug9NqvhAWAZgXkbw6
	uHUXGGEylaPnflb92bBSDsLZ5FVF8MkW+dwVd8k4c34QWj/nteOANkbRjoVx1xRB5nnL
	0A2AuZorbT10MoggyODHGqtTKgWT6Ld5M6aFw=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=HVWjU3SLnRYhc7MEHSJhopxEckeoAC6endNqo0Hv3P8=;
	b=fO0W7XIZ9faNjn0w6jt3Fj5ArZVg9HJ7T+sanyRLwFSwkH4ueGKUcNyYZ2Gvw9+oTK
	djhBrWiyJ45tSHW9QExfbcAXzs7GuPV0y3dbqOrUyB8Jbikub5HdpOnAqNfofJvG0kIO
	l8J3reqNmw+JG6Y/ejeS4FkDf5v+2buEkvaMUbSuqe/ExluJeqdS1Z5MyfR45kIG4yAC
	Y8swf3UG2B3OMX516H+xiscomqKddFjyO6Q5YylcP5zBR5f+je107oxEWQ6jCD4aD03/
	wKGZooaPi7m/mrehKJfu6JyBjppa5yzQzY9Wa81wRtMXv/+tmquVtMteIDTy8MVeTbxc
	QCwQ==
X-Gm-Message-State: ALyK8tK4dajkLV7qASY7ClCeU9Cz0CyGzOTmWWCuX67O9zMhqAEExFqW7OD3QlaMfJKG6Fn3
X-Received: by 10.98.85.66 with SMTP id j63mr30261532pfb.90.1465288203014;
	Tue, 07 Jun 2016 01:30:03 -0700 (PDT)
Received: from baolinwangubtpc.spreadtrum.com ([175.111.195.49])
	by smtp.gmail.com with ESMTPSA id
	n10sm30908215pax.18.2016.06.07.01.29.57
	(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 07 Jun 2016 01:30:02 -0700 (PDT)
From: Baolin Wang &lt;baolin.wang@linaro.org&gt;
To: catalin.marinas@arm.com, will.deacon@arm.com
Cc: robin.murphy@arm.com, jroedel@suse.de, akpm@linux-foundation.org,
	jszhang@marvell.com, Suravee.Suthikulpanit@amd.com, arnd@arndb.de,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	broonie@kernel.org, balbi@kernel.org, baolin.wang@linaro.org
Subject: [PATCH] arm64: Implement arch_setup_pdev_archdata hook
Date: Tue,  7 Jun 2016 16:29:21 +0800
Message-Id: &lt;b4645ade4a4d4150e76594f5bf04a3ad5e7d5221.1465287808.git.baolin.wang@linaro.org&gt;
X-Mailer: git-send-email 1.7.9.5
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=126721">Baolin Wang</a> - June 7, 2016, 8:29 a.m.</div>
<pre class="content">
Now on ARM64 platform, it will set &#39;dummy_dma_ops&#39; for device dma_ops if
it did not call &#39;arch_setup_dma_ops&#39; at device creation time by issuing
platform_device_alloc() function, that will cause failure when setting
the dma mask for device.

Hence We need to hook the archdata to setup proper dma_ops for these devices.
<span class="signed-off-by">
Signed-off-by: Baolin Wang &lt;baolin.wang@linaro.org&gt;</span>
---
 arch/arm64/mm/dma-mapping.c |   21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - June 7, 2016, 8:43 a.m.</div>
<pre class="content">
On Tuesday, June 7, 2016 4:29:21 PM CEST Baolin Wang wrote:
<span class="quote">&gt; Now on ARM64 platform, it will set &#39;dummy_dma_ops&#39; for device dma_ops if</span>
<span class="quote">&gt; it did not call &#39;arch_setup_dma_ops&#39; at device creation time by issuing</span>
<span class="quote">&gt; platform_device_alloc() function, that will cause failure when setting</span>
<span class="quote">&gt; the dma mask for device.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hence We need to hook the archdata to setup proper dma_ops for these devices.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Baolin Wang &lt;baolin.wang@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/mm/dma-mapping.c |   21 +++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 21 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index c566ec8..04e057b 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -26,6 +26,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/platform_device.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -961,3 +962,23 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt;  	dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;  	__iommu_setup_dma_ops(dev, dma_base, size, iommu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_setup_pdev_archdata(struct platform_device *pdev)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.archdata.dma_ops)</span>
<span class="quote">&gt; +		pdev-&gt;dev.archdata.dma_ops = &amp;swiotlb_dma_ops;</span>

You need to check the DT here to see if these are the right ops,
or if you have to go through an IOMMU. Also, you have to set up the
other fields that are controlled by arch_setup_dma_ops: whether
it&#39;s coherent and what the offset is.
<span class="quote">
&gt; +	/*</span>
<span class="quote">&gt; +	 * Set default coherent_dma_mask to 32 bit. Drivers are expected to</span>
<span class="quote">&gt; +	 * setup the correct supported mask.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.coherent_dma_mask)</span>
<span class="quote">&gt; +		pdev-&gt;dev.coherent_dma_mask = DMA_BIT_MASK(32);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Set it to coherent_dma_mask by default if the architecture</span>
<span class="quote">&gt; +	 * code has not set it.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.dma_mask)</span>
<span class="quote">&gt; +		pdev-&gt;dev.dma_mask = &amp;pdev-&gt;dev.coherent_dma_mask;</span>
<span class="quote">&gt; +}</span>

We still have an open bug about the dma_set_mask() function on ARM64:
we have to check the dma-ranges property to ensure that no device can
set a mask wider than what its parent bus can support.

What is your plan for this in case of these devices?

	Arnd
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - June 7, 2016, 9:15 a.m.</div>
<pre class="content">
On 07/06/16 09:29, Baolin Wang wrote:
<span class="quote">&gt; Now on ARM64 platform, it will set &#39;dummy_dma_ops&#39; for device dma_ops if</span>
<span class="quote">&gt; it did not call &#39;arch_setup_dma_ops&#39; at device creation time by issuing</span>
<span class="quote">&gt; platform_device_alloc() function, that will cause failure when setting</span>
<span class="quote">&gt; the dma mask for device.</span>

Yes, that&#39;s rather the whole point. DMA-capable devices are real 
hardware, therefore don&#39;t spring out of thin air without being described 
in DT or ACPI.

Please elaborate on the situation that you&#39;re attempting to address here 
(please don&#39;t let it be the ongoing Designware USB catastrophe ;))

Robin.
<span class="quote">
&gt; Hence We need to hook the archdata to setup proper dma_ops for these devices.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Baolin Wang &lt;baolin.wang@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   arch/arm64/mm/dma-mapping.c |   21 +++++++++++++++++++++</span>
<span class="quote">&gt;   1 file changed, 21 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index c566ec8..04e057b 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -26,6 +26,7 @@</span>
<span class="quote">&gt;   #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;   #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;   #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/platform_device.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -961,3 +962,23 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt;   	dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;   	__iommu_setup_dma_ops(dev, dma_base, size, iommu);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_setup_pdev_archdata(struct platform_device *pdev)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.archdata.dma_ops)</span>
<span class="quote">&gt; +		pdev-&gt;dev.archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Set default coherent_dma_mask to 32 bit. Drivers are expected to</span>
<span class="quote">&gt; +	 * setup the correct supported mask.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.coherent_dma_mask)</span>
<span class="quote">&gt; +		pdev-&gt;dev.coherent_dma_mask = DMA_BIT_MASK(32);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Set it to coherent_dma_mask by default if the architecture</span>
<span class="quote">&gt; +	 * code has not set it.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (!pdev-&gt;dev.dma_mask)</span>
<span class="quote">&gt; +		pdev-&gt;dev.dma_mask = &amp;pdev-&gt;dev.coherent_dma_mask;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=126721">Baolin Wang</a> - June 7, 2016, 9:22 a.m.</div>
<pre class="content">
On 7 June 2016 at 17:15, Robin Murphy &lt;robin.murphy@arm.com&gt; wrote:
<span class="quote">&gt; On 07/06/16 09:29, Baolin Wang wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Now on ARM64 platform, it will set &#39;dummy_dma_ops&#39; for device dma_ops if</span>
<span class="quote">&gt;&gt; it did not call &#39;arch_setup_dma_ops&#39; at device creation time by issuing</span>
<span class="quote">&gt;&gt; platform_device_alloc() function, that will cause failure when setting</span>
<span class="quote">&gt;&gt; the dma mask for device.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yes, that&#39;s rather the whole point. DMA-capable devices are real hardware,</span>
<span class="quote">&gt; therefore don&#39;t spring out of thin air without being described in DT or</span>
<span class="quote">&gt; ACPI.</span>

OK.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Please elaborate on the situation that you&#39;re attempting to address here</span>
<span class="quote">&gt; (please don&#39;t let it be the ongoing Designware USB catastrophe ;))</span>

Yes, like you mentioned, we met problems at DesignWare USB3 controller
host glue, do you have any better solutions to solve this problem?
Thanks.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Robin.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Hence We need to hook the archdata to setup proper dma_ops for these</span>
<span class="quote">&gt;&gt; devices.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Baolin Wang &lt;baolin.wang@linaro.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/arm64/mm/dma-mapping.c |   21 +++++++++++++++++++++</span>
<span class="quote">&gt;&gt;   1 file changed, 21 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; index c566ec8..04e057b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; @@ -26,6 +26,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/platform_device.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -961,3 +962,23 @@ void arch_setup_dma_ops(struct device *dev, u64</span>
<span class="quote">&gt;&gt; dma_base, u64 size,</span>
<span class="quote">&gt;&gt;         dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;&gt;         __iommu_setup_dma_ops(dev, dma_base, size, iommu);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void arch_setup_pdev_archdata(struct platform_device *pdev)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       if (!pdev-&gt;dev.archdata.dma_ops)</span>
<span class="quote">&gt;&gt; +               pdev-&gt;dev.archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt; +        * Set default coherent_dma_mask to 32 bit. Drivers are expected</span>
<span class="quote">&gt;&gt; to</span>
<span class="quote">&gt;&gt; +        * setup the correct supported mask.</span>
<span class="quote">&gt;&gt; +        */</span>
<span class="quote">&gt;&gt; +       if (!pdev-&gt;dev.coherent_dma_mask)</span>
<span class="quote">&gt;&gt; +               pdev-&gt;dev.coherent_dma_mask = DMA_BIT_MASK(32);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       /*</span>
<span class="quote">&gt;&gt; +        * Set it to coherent_dma_mask by default if the architecture</span>
<span class="quote">&gt;&gt; +        * code has not set it.</span>
<span class="quote">&gt;&gt; +        */</span>
<span class="quote">&gt;&gt; +       if (!pdev-&gt;dev.dma_mask)</span>
<span class="quote">&gt;&gt; +               pdev-&gt;dev.dma_mask = &amp;pdev-&gt;dev.coherent_dma_mask;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=126721">Baolin Wang</a> - June 13, 2016, 8:26 a.m.</div>
<pre class="content">
On 7 June 2016 at 16:43, Arnd Bergmann &lt;arnd@arndb.de&gt; wrote:
<span class="quote">&gt; On Tuesday, June 7, 2016 4:29:21 PM CEST Baolin Wang wrote:</span>
<span class="quote">&gt;&gt; Now on ARM64 platform, it will set &#39;dummy_dma_ops&#39; for device dma_ops if</span>
<span class="quote">&gt;&gt; it did not call &#39;arch_setup_dma_ops&#39; at device creation time by issuing</span>
<span class="quote">&gt;&gt; platform_device_alloc() function, that will cause failure when setting</span>
<span class="quote">&gt;&gt; the dma mask for device.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Hence We need to hook the archdata to setup proper dma_ops for these devices.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Baolin Wang &lt;baolin.wang@linaro.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/arm64/mm/dma-mapping.c |   21 +++++++++++++++++++++</span>
<span class="quote">&gt;&gt;  1 file changed, 21 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; index c566ec8..04e057b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; @@ -26,6 +26,7 @@</span>
<span class="quote">&gt;&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/platform_device.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -961,3 +962,23 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt;&gt;       dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;&gt;       __iommu_setup_dma_ops(dev, dma_base, size, iommu);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void arch_setup_pdev_archdata(struct platform_device *pdev)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     if (!pdev-&gt;dev.archdata.dma_ops)</span>
<span class="quote">&gt;&gt; +             pdev-&gt;dev.archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You need to check the DT here to see if these are the right ops,</span>
<span class="quote">&gt; or if you have to go through an IOMMU. Also, you have to set up the</span>
<span class="quote">&gt; other fields that are controlled by arch_setup_dma_ops: whether</span>
<span class="quote">&gt; it&#39;s coherent and what the offset is.</span>

That&#39;s right. This is just set the platform device arch data, after
that the dma ops will be re-setup by issuing arch_setup_dma_ops(). But
some platform devices created by platform_device_alloc() will not
issue the arch_setup_dma_ops() function to setup the dma ops. So I
want to set the default dma ops by arch_setup_pdev_archdata(), but
that is not reasonable according to Robin&#39;s explanation.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +     /*</span>
<span class="quote">&gt;&gt; +      * Set default coherent_dma_mask to 32 bit. Drivers are expected to</span>
<span class="quote">&gt;&gt; +      * setup the correct supported mask.</span>
<span class="quote">&gt;&gt; +      */</span>
<span class="quote">&gt;&gt; +     if (!pdev-&gt;dev.coherent_dma_mask)</span>
<span class="quote">&gt;&gt; +             pdev-&gt;dev.coherent_dma_mask = DMA_BIT_MASK(32);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     /*</span>
<span class="quote">&gt;&gt; +      * Set it to coherent_dma_mask by default if the architecture</span>
<span class="quote">&gt;&gt; +      * code has not set it.</span>
<span class="quote">&gt;&gt; +      */</span>
<span class="quote">&gt;&gt; +     if (!pdev-&gt;dev.dma_mask)</span>
<span class="quote">&gt;&gt; +             pdev-&gt;dev.dma_mask = &amp;pdev-&gt;dev.coherent_dma_mask;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We still have an open bug about the dma_set_mask() function on ARM64:</span>
<span class="quote">&gt; we have to check the dma-ranges property to ensure that no device can</span>
<span class="quote">&gt; set a mask wider than what its parent bus can support.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What is your plan for this in case of these devices?</span>

I think these are just default setup for dma mask. I suppose the
checking you mentioned should be added in of_dma_configure()?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - June 14, 2016, 2:43 p.m.</div>
<pre class="content">
On Tue, Jun 07, 2016 at 05:22:25PM +0800, Baolin Wang wrote:
<span class="quote">&gt; On 7 June 2016 at 17:15, Robin Murphy &lt;robin.murphy@arm.com&gt; wrote:</span>
<span class="quote">&gt; &gt; Please elaborate on the situation that you&#39;re attempting to address here</span>
<span class="quote">&gt; &gt; (please don&#39;t let it be the ongoing Designware USB catastrophe ;))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, like you mentioned, we met problems at DesignWare USB3 controller</span>
<span class="quote">&gt; host glue, do you have any better solutions to solve this problem?</span>

There has been a recent thread on this topic:

http://thread.gmane.org/gmane.linux.usb.general/140374

And a subsequent patch with another long discussion:

http://thread.gmane.org/gmane.linux.kernel/2207020

Please have a look, maybe you can make more sense of it ;). AFAICT,
there was no clear conclusion reached.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=126721">Baolin Wang</a> - June 15, 2016, 2:13 a.m.</div>
<pre class="content">
On 14 June 2016 at 22:43, Catalin Marinas &lt;catalin.marinas@arm.com&gt; wrote:
<span class="quote">&gt; On Tue, Jun 07, 2016 at 05:22:25PM +0800, Baolin Wang wrote:</span>
<span class="quote">&gt;&gt; On 7 June 2016 at 17:15, Robin Murphy &lt;robin.murphy@arm.com&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; Please elaborate on the situation that you&#39;re attempting to address here</span>
<span class="quote">&gt;&gt; &gt; (please don&#39;t let it be the ongoing Designware USB catastrophe ;))</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Yes, like you mentioned, we met problems at DesignWare USB3 controller</span>
<span class="quote">&gt;&gt; host glue, do you have any better solutions to solve this problem?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There has been a recent thread on this topic:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; http://thread.gmane.org/gmane.linux.usb.general/140374</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And a subsequent patch with another long discussion:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; http://thread.gmane.org/gmane.linux.kernel/2207020</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Please have a look, maybe you can make more sense of it ;). AFAICT,</span>
<span class="quote">&gt; there was no clear conclusion reached.</span>

OK. Thanks for your updating.
<span class="quote">
&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Catalin</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index c566ec8..04e057b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -26,6 +26,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/dma-contiguous.h&gt;
 #include &lt;linux/vmalloc.h&gt;
 #include &lt;linux/swiotlb.h&gt;
<span class="p_add">+#include &lt;linux/platform_device.h&gt;</span>
 
 #include &lt;asm/cacheflush.h&gt;
 
<span class="p_chunk">@@ -961,3 +962,23 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 }
<span class="p_add">+</span>
<span class="p_add">+void arch_setup_pdev_archdata(struct platform_device *pdev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!pdev-&gt;dev.archdata.dma_ops)</span>
<span class="p_add">+		pdev-&gt;dev.archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Set default coherent_dma_mask to 32 bit. Drivers are expected to</span>
<span class="p_add">+	 * setup the correct supported mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!pdev-&gt;dev.coherent_dma_mask)</span>
<span class="p_add">+		pdev-&gt;dev.coherent_dma_mask = DMA_BIT_MASK(32);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Set it to coherent_dma_mask by default if the architecture</span>
<span class="p_add">+	 * code has not set it.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!pdev-&gt;dev.dma_mask)</span>
<span class="p_add">+		pdev-&gt;dev.dma_mask = &amp;pdev-&gt;dev.coherent_dma_mask;</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



