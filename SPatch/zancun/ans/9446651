
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,110/127] sparc: Don&#39;t leak context bits into thread-&gt;fault_address - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,110/127] sparc: Don&#39;t leak context bits into thread-&gt;fault_address</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 25, 2016, 8:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;c7936e76f24a6110876be250bcda79e30a59bb79.1480062521.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9446651/mbox/"
   >mbox</a>
|
   <a href="/patch/9446651/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9446651/">/patch/9446651/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A084860779 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9216B27DC2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 86C6627FBB; Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1279227DCD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:37:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753910AbcKYIgs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 25 Nov 2016 03:36:48 -0500
Received: from mx2.suse.de ([195.135.220.15]:45291 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752257AbcKYIc7 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 25 Nov 2016 03:32:59 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 20C40AE0C;
	Fri, 25 Nov 2016 08:31:54 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org, &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 110/127] sparc: Don&#39;t leak context bits into
	thread-&gt;fault_address
Date: Fri, 25 Nov 2016 09:30:23 +0100
Message-Id: &lt;c7936e76f24a6110876be250bcda79e30a59bb79.1480062521.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;f668f2eee98250a2073a4beafdb7f6d1e21c528e.1480062521.git.jslaby@suse.cz&gt;
References: &lt;f668f2eee98250a2073a4beafdb7f6d1e21c528e.1480062521.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1480062521.git.jslaby@suse.cz&gt;
References: &lt;cover.1480062521.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Nov. 25, 2016, 8:30 a.m.</div>
<pre class="content">
<span class="from">From: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

[ Upstream commit 4f6deb8cbab532a8d7250bc09234c1795ecb5e2c ]

On pre-Niagara systems, we fetch the fault address on data TLB
exceptions from the TLB_TAG_ACCESS register.  But this register also
contains the context ID assosciated with the fault in the low 13 bits
of the register value.

This propagates into current_thread_info()-&gt;fault_address and can
cause trouble later on.

So clear the low 13-bits out of the TLB_TAG_ACCESS value in the cases
where it matters.

Reported-by: Mikulas Patocka &lt;mpatocka@redhat.com&gt;
Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 arch/sparc/kernel/dtlb_prot.S |  4 ++--
 arch/sparc/kernel/ktlb.S      | 12 ++++++++++++
 arch/sparc/kernel/tsb.S       | 12 ++++++++++--
 3 files changed, 24 insertions(+), 4 deletions(-)

<span class="p_header">diff --git a/arch/sparc/kernel/dtlb_prot.S b/arch/sparc/kernel/dtlb_prot.S</span>
<span class="p_header">index d668ca149e64..4087a62f96b0 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/dtlb_prot.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/dtlb_prot.S</span>
<span class="p_chunk">@@ -25,13 +25,13 @@</span> <span class="p_context"></span>
 
 /* PROT ** ICACHE line 2: More real fault processing */
 	ldxa		[%g4] ASI_DMMU, %g5		! Put tagaccess in %g5
<span class="p_add">+	srlx		%g5, PAGE_SHIFT, %g5</span>
<span class="p_add">+	sllx		%g5, PAGE_SHIFT, %g5		! Clear context ID bits</span>
 	bgu,pn		%xcc, winfix_trampoline		! Yes, perform winfixup
 	 mov		FAULT_CODE_DTLB | FAULT_CODE_WRITE, %g4
 	ba,pt		%xcc, sparc64_realfault_common	! Nope, normal fault
 	 nop
 	nop
<span class="p_del">-	nop</span>
<span class="p_del">-	nop</span>
 
 /* PROT ** ICACHE line 3: Unused...	*/
 	nop
<span class="p_header">diff --git a/arch/sparc/kernel/ktlb.S b/arch/sparc/kernel/ktlb.S</span>
<span class="p_header">index ef0d8e9e1210..f22bec0db645 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/ktlb.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/ktlb.S</span>
<span class="p_chunk">@@ -20,6 +20,10 @@</span> <span class="p_context"> kvmap_itlb:</span>
 	mov		TLB_TAG_ACCESS, %g4
 	ldxa		[%g4] ASI_IMMU, %g4
 
<span class="p_add">+	/* The kernel executes in context zero, therefore we do not</span>
<span class="p_add">+	 * need to clear the context ID bits out of %g4 here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+</span>
 	/* sun4v_itlb_miss branches here with the missing virtual
 	 * address already loaded into %g4
 	 */
<span class="p_chunk">@@ -128,6 +132,10 @@</span> <span class="p_context"> kvmap_dtlb:</span>
 	mov		TLB_TAG_ACCESS, %g4
 	ldxa		[%g4] ASI_DMMU, %g4
 
<span class="p_add">+	/* The kernel executes in context zero, therefore we do not</span>
<span class="p_add">+	 * need to clear the context ID bits out of %g4 here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+</span>
 	/* sun4v_dtlb_miss branches here with the missing virtual
 	 * address already loaded into %g4
 	 */
<span class="p_chunk">@@ -251,6 +259,10 @@</span> <span class="p_context"> kvmap_dtlb_longpath:</span>
 	nop
 	.previous
 
<span class="p_add">+	/* The kernel executes in context zero, therefore we do not</span>
<span class="p_add">+	 * need to clear the context ID bits out of %g5 here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+</span>
 	be,pt	%xcc, sparc64_realfault_common
 	 mov	FAULT_CODE_DTLB, %g4
 	ba,pt	%xcc, winfix_trampoline
<span class="p_header">diff --git a/arch/sparc/kernel/tsb.S b/arch/sparc/kernel/tsb.S</span>
<span class="p_header">index be98685c14c6..d568c8207af7 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/tsb.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/tsb.S</span>
<span class="p_chunk">@@ -29,13 +29,17 @@</span> <span class="p_context"></span>
 	 */
 tsb_miss_dtlb:
 	mov		TLB_TAG_ACCESS, %g4
<span class="p_add">+	ldxa		[%g4] ASI_DMMU, %g4</span>
<span class="p_add">+	srlx		%g4, PAGE_SHIFT, %g4</span>
 	ba,pt		%xcc, tsb_miss_page_table_walk
<span class="p_del">-	 ldxa		[%g4] ASI_DMMU, %g4</span>
<span class="p_add">+	 sllx		%g4, PAGE_SHIFT, %g4</span>
 
 tsb_miss_itlb:
 	mov		TLB_TAG_ACCESS, %g4
<span class="p_add">+	ldxa		[%g4] ASI_IMMU, %g4</span>
<span class="p_add">+	srlx		%g4, PAGE_SHIFT, %g4</span>
 	ba,pt		%xcc, tsb_miss_page_table_walk
<span class="p_del">-	 ldxa		[%g4] ASI_IMMU, %g4</span>
<span class="p_add">+	 sllx		%g4, PAGE_SHIFT, %g4</span>
 
 	/* At this point we have:
 	 * %g1 --	PAGE_SIZE TSB entry address
<span class="p_chunk">@@ -284,6 +288,10 @@</span> <span class="p_context"> tsb_do_dtlb_fault:</span>
 	nop
 	.previous
 
<span class="p_add">+	/* Clear context ID bits.  */</span>
<span class="p_add">+	srlx		%g5, PAGE_SHIFT, %g5</span>
<span class="p_add">+	sllx		%g5, PAGE_SHIFT, %g5</span>
<span class="p_add">+</span>
 	be,pt	%xcc, sparc64_realfault_common
 	 mov	FAULT_CODE_DTLB, %g4
 	ba,pt	%xcc, winfix_trampoline

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



