
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM,v13,12/18] mm/hmm/mirror: helper to snapshot CPU page table - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM,v13,12/18] mm/hmm/mirror: helper to snapshot CPU page table</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 18, 2016, 6:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1479493107-982-13-git-send-email-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9437127/mbox/"
   >mbox</a>
|
   <a href="/patch/9437127/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9437127/">/patch/9437127/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7DE0460756 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:20:49 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 21B39299BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:20:40 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 16683299C8; Fri, 18 Nov 2016 17:20:40 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BCF87299BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:20:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932621AbcKRRUF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 18 Nov 2016 12:20:05 -0500
Received: from mx1.redhat.com ([209.132.183.28]:33768 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752301AbcKRRRy (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 18 Nov 2016 12:17:54 -0500
Received: from int-mx09.intmail.prod.int.phx2.redhat.com
	(int-mx09.intmail.prod.int.phx2.redhat.com [10.5.11.22])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 30B78A0B48;
	Fri, 18 Nov 2016 17:17:54 +0000 (UTC)
Received: from xgl-cortex.ml2.eng.bos.redhat.com
	(xgl-cortex.ml2.eng.bos.redhat.com [10.19.160.80])
	by int-mx09.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id uAIHHd98016767; Fri, 18 Nov 2016 12:17:53 -0500
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, &lt;linux-kernel@vger.kernel.org&gt;,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;,
	Jatin Kumar &lt;jakumar@nvidia.com&gt;, Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;,
	Sherry Cheung &lt;SCheung@nvidia.com&gt;, Subhash Gutti &lt;sgutti@nvidia.com&gt;
Subject: [HMM v13 12/18] mm/hmm/mirror: helper to snapshot CPU page table
Date: Fri, 18 Nov 2016 13:18:21 -0500
Message-Id: &lt;1479493107-982-13-git-send-email-jglisse@redhat.com&gt;
In-Reply-To: &lt;1479493107-982-1-git-send-email-jglisse@redhat.com&gt;
References: &lt;1479493107-982-1-git-send-email-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Fri, 18 Nov 2016 17:17:54 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - Nov. 18, 2016, 6:18 p.m.</div>
<pre class="content">
This does not use existing page table walker because we want to share
same code for our page fault handler.
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Jatin Kumar &lt;jakumar@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: John Hubbard &lt;jhubbard@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Sherry Cheung &lt;SCheung@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Subhash Gutti &lt;sgutti@nvidia.com&gt;</span>
---
 include/linux/hmm.h |  30 +++++++++-
 mm/hmm.c            | 163 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 191 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hmm.h b/include/linux/hmm.h</span>
<span class="p_header">index 6571647..9e0f00d 100644</span>
<span class="p_header">--- a/include/linux/hmm.h</span>
<span class="p_header">+++ b/include/linux/hmm.h</span>
<span class="p_chunk">@@ -95,13 +95,28 @@</span> <span class="p_context"> struct hmm;</span>
  *
  * Flags:
  * HMM_PFN_VALID: pfn is valid
<span class="p_add">+ * HMM_PFN_READ: read permission set</span>
  * HMM_PFN_WRITE: CPU page table have the write permission set
<span class="p_add">+ * HMM_PFN_ERROR: corresponding CPU page table entry point to poisonous memory</span>
<span class="p_add">+ * HMM_PFN_EMPTY: corresponding CPU page table entry is none (pte_none() true)</span>
<span class="p_add">+ * HMM_PFN_DEVICE: this is device memory (ie a ZONE_DEVICE page)</span>
<span class="p_add">+ * HMM_PFN_SPECIAL: corresponding CPU page table entry is special ie result of</span>
<span class="p_add">+ *      vm_insert_pfn() or vm_insert_page() and thus should not be mirror by a</span>
<span class="p_add">+ *      device (the entry will never have HMM_PFN_VALID set and the pfn value</span>
<span class="p_add">+ *      is undefine)</span>
<span class="p_add">+ * HMM_PFN_UNADDRESSABLE: unaddressable device memory (ZONE_DEVICE)</span>
  */
 typedef unsigned long hmm_pfn_t;
 
 #define HMM_PFN_VALID (1 &lt;&lt; 0)
<span class="p_del">-#define HMM_PFN_WRITE (1 &lt;&lt; 1)</span>
<span class="p_del">-#define HMM_PFN_SHIFT 2</span>
<span class="p_add">+#define HMM_PFN_READ (1 &lt;&lt; 1)</span>
<span class="p_add">+#define HMM_PFN_WRITE (1 &lt;&lt; 2)</span>
<span class="p_add">+#define HMM_PFN_ERROR (1 &lt;&lt; 3)</span>
<span class="p_add">+#define HMM_PFN_EMPTY (1 &lt;&lt; 4)</span>
<span class="p_add">+#define HMM_PFN_DEVICE (1 &lt;&lt; 5)</span>
<span class="p_add">+#define HMM_PFN_SPECIAL (1 &lt;&lt; 6)</span>
<span class="p_add">+#define HMM_PFN_UNADDRESSABLE (1 &lt;&lt; 7)</span>
<span class="p_add">+#define HMM_PFN_SHIFT 8</span>
 
 static inline struct page *hmm_pfn_to_page(hmm_pfn_t pfn)
 {
<span class="p_chunk">@@ -272,6 +287,17 @@</span> <span class="p_context"> bool hmm_vma_range_monitor_start(struct hmm_range *range,</span>
 bool hmm_vma_range_monitor_end(struct hmm_range *range);
 
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Snapshot CPU page table, the snapshot content validity can be track using</span>
<span class="p_add">+ * hmm_range_monitor_start/end() or hmm_vma_range_lock()/hmm_vma_range_unlock()</span>
<span class="p_add">+ * mechanism. See function description in mm/hmm.c for documentation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
<span class="p_add">+		     unsigned long start,</span>
<span class="p_add">+		     unsigned long end,</span>
<span class="p_add">+		     hmm_pfn_t *pfns);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /* Below are for HMM internal use only ! Not to be use by device driver ! */
 void hmm_mm_destroy(struct mm_struct *mm);
 
<span class="p_header">diff --git a/mm/hmm.c b/mm/hmm.c</span>
<span class="p_header">index 746eb96..f2ea76b 100644</span>
<span class="p_header">--- a/mm/hmm.c</span>
<span class="p_header">+++ b/mm/hmm.c</span>
<span class="p_chunk">@@ -19,10 +19,15 @@</span> <span class="p_context"></span>
  */
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/hmm.h&gt;
<span class="p_add">+#include &lt;linux/rmap.h&gt;</span>
<span class="p_add">+#include &lt;linux/swap.h&gt;</span>
 #include &lt;linux/slab.h&gt;
 #include &lt;linux/sched.h&gt;
<span class="p_add">+#include &lt;linux/swapops.h&gt;</span>
<span class="p_add">+#include &lt;linux/hugetlb.h&gt;</span>
 #include &lt;linux/mmu_notifier.h&gt;
 
<span class="p_add">+</span>
 /*
  * struct hmm - HMM per mm struct
  *
<span class="p_chunk">@@ -454,3 +459,161 @@</span> <span class="p_context"> bool hmm_vma_range_monitor_end(struct hmm_range *range)</span>
 	return valid;
 }
 EXPORT_SYMBOL(hmm_vma_range_monitor_end);
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+static void hmm_pfns_empty(hmm_pfn_t *pfns,</span>
<span class="p_add">+			   unsigned long addr,</span>
<span class="p_add">+			   unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, pfns++)</span>
<span class="p_add">+		*pfns = HMM_PFN_EMPTY;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void hmm_pfns_special(hmm_pfn_t *pfns,</span>
<span class="p_add">+			     unsigned long addr,</span>
<span class="p_add">+			     unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, pfns++)</span>
<span class="p_add">+		*pfns = HMM_PFN_SPECIAL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void hmm_vma_walk(struct vm_area_struct *vma,</span>
<span class="p_add">+			 unsigned long start,</span>
<span class="p_add">+			 unsigned long end,</span>
<span class="p_add">+			 hmm_pfn_t *pfns)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long addr, next;</span>
<span class="p_add">+	hmm_pfn_t flag;</span>
<span class="p_add">+</span>
<span class="p_add">+	flag = vma-&gt;vm_flags &amp; VM_READ ? HMM_PFN_READ : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (addr = start; addr &lt; end; addr = next) {</span>
<span class="p_add">+		unsigned long i = (addr - start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		pgd_t *pgdp;</span>
<span class="p_add">+		pud_t *pudp;</span>
<span class="p_add">+		pmd_t *pmdp;</span>
<span class="p_add">+		pte_t *ptep;</span>
<span class="p_add">+		pmd_t pmd;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We are accessing/faulting for a device from an unknown</span>
<span class="p_add">+		 * thread that might be foreign to the mm we are faulting</span>
<span class="p_add">+		 * against so do not call arch_vma_access_permitted() !</span>
<span class="p_add">+		 */</span>
<span class="p_add">+</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		pgdp = pgd_offset(vma-&gt;vm_mm, addr);</span>
<span class="p_add">+		if (pgd_none(*pgdp) || pgd_bad(*pgdp)) {</span>
<span class="p_add">+			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		next = pud_addr_end(addr, end);</span>
<span class="p_add">+		pudp = pud_offset(pgdp, addr);</span>
<span class="p_add">+		if (pud_none(*pudp) || pud_bad(*pudp)) {</span>
<span class="p_add">+			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		next = pmd_addr_end(addr, end);</span>
<span class="p_add">+		pmdp = pmd_offset(pudp, addr);</span>
<span class="p_add">+		pmd = pmd_read_atomic(pmdp);</span>
<span class="p_add">+		barrier();</span>
<span class="p_add">+		if (pmd_none(pmd) || pmd_bad(pmd)) {</span>
<span class="p_add">+			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (pmd_trans_huge(pmd) || pmd_devmap(pmd)) {</span>
<span class="p_add">+			unsigned long pfn = pmd_pfn(pmd) + pte_index(addr);</span>
<span class="p_add">+			hmm_pfn_t flags = flag;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (pmd_protnone(pmd)) {</span>
<span class="p_add">+				hmm_pfns_clear(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			flags |= pmd_write(*pmdp) ? HMM_PFN_WRITE : 0;</span>
<span class="p_add">+			flags |= pmd_devmap(pmd) ? HMM_PFN_DEVICE : 0;</span>
<span class="p_add">+			for (; addr &lt; next; addr += PAGE_SIZE, i++, pfn++)</span>
<span class="p_add">+				pfns[i] = hmm_pfn_from_pfn(pfn) | flags;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ptep = pte_offset_map(pmdp, addr);</span>
<span class="p_add">+		for (; addr &lt; next; addr += PAGE_SIZE, i++, ptep++) {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+			pte_t pte = *ptep;</span>
<span class="p_add">+</span>
<span class="p_add">+			pfns[i] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (pte_none(pte)) {</span>
<span class="p_add">+				pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			entry = pte_to_swp_entry(pte);</span>
<span class="p_add">+			if (!pte_present(pte) &amp;&amp; !non_swap_entry(entry)) {</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			if (pte_present(pte)) {</span>
<span class="p_add">+				pfns[i] = hmm_pfn_from_pfn(pte_pfn(pte))|flag;</span>
<span class="p_add">+				pfns[i] |= pte_write(pte) ? HMM_PFN_WRITE : 0;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * This is a special swap entry, ignore migration, use</span>
<span class="p_add">+			 * device and report anything else as error.</span>
<span class="p_add">+			*/</span>
<span class="p_add">+			if (is_device_entry(entry)) {</span>
<span class="p_add">+				pfns[i] = hmm_pfn_from_pfn(swp_offset(entry));</span>
<span class="p_add">+				if (is_write_device_entry(entry))</span>
<span class="p_add">+					pfns[i] |= HMM_PFN_WRITE;</span>
<span class="p_add">+				pfns[i] |= HMM_PFN_DEVICE;</span>
<span class="p_add">+				pfns[i] |= HMM_PFN_UNADDRESSABLE;</span>
<span class="p_add">+				pfns[i] |= flag;</span>
<span class="p_add">+			} else if (!is_migration_entry(entry)) {</span>
<span class="p_add">+				pfns[i] = HMM_PFN_ERROR;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pte_unmap(ptep - 1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * hmm_vma_get_pfns() - snapshot CPU page table for a range of virtual address</span>
<span class="p_add">+ * @vma: virtual memory area containing the virtual address range</span>
<span class="p_add">+ * @start: range virtual start address (inclusive)</span>
<span class="p_add">+ * @end: range virtual end address (exclusive)</span>
<span class="p_add">+ * @entries: array of hmm_pfn_t provided by caller fill by function</span>
<span class="p_add">+ * Returns: -EINVAL if invalid argument, 0 otherwise</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This snapshot the CPU page table for a range of virtual address, snapshot is</span>
<span class="p_add">+ * only valid while protected by hmm_vma_range_lock() or if return cookie value</span>
<span class="p_add">+ * is still valid (see hmm_vma_check_cookie()).</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * It will fill the pfns array using CPU pte. Note that any invalid CPU page</span>
<span class="p_add">+ * table entry, at time of snapshot, can turn into a valid one after this</span>
<span class="p_add">+ * function return but before calling hmm_vma_range_unlock().</span>
<span class="p_add">+ */</span>
<span class="p_add">+int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
<span class="p_add">+		     unsigned long start,</span>
<span class="p_add">+		     unsigned long end,</span>
<span class="p_add">+		     hmm_pfn_t *pfns)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* FIXME support hugetlb fs */</span>
<span class="p_add">+	if (is_vm_hugetlb_page(vma) || (vma-&gt;vm_flags &amp; VM_SPECIAL)) {</span>
<span class="p_add">+		hmm_pfns_special(pfns, start, end);</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Sanity check, this really should not happen ! */</span>
<span class="p_add">+	if (start &lt; vma-&gt;vm_start || start &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	if (end &lt; vma-&gt;vm_start || end &gt; vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	hmm_vma_walk(vma, start, end, pfns);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(hmm_vma_get_pfns);</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



