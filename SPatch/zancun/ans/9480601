
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/4] oom-reaper: use madvise_dontneed() logic to decide if unmap the VMA - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/4] oom-reaper: use madvise_dontneed() logic to decide if unmap the VMA</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 19, 2016, 5:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161219171722.77995-4-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9480601/mbox/"
   >mbox</a>
|
   <a href="/patch/9480601/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9480601/">/patch/9480601/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6C7DC601C0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Dec 2016 17:17:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 61BC622A6B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Dec 2016 17:17:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 565D5283EC; Mon, 19 Dec 2016 17:17:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0A46E22A6B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Dec 2016 17:17:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756227AbcLSRRh (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 19 Dec 2016 12:17:37 -0500
Received: from mga04.intel.com ([192.55.52.120]:22335 &quot;EHLO mga04.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754015AbcLSRRf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 19 Dec 2016 12:17:35 -0500
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga104.fm.intel.com with ESMTP; 19 Dec 2016 09:17:33 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.33,374,1477983600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1084195243&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga001.fm.intel.com with ESMTP; 19 Dec 2016 09:17:31 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 0DBB2371; Mon, 19 Dec 2016 19:17:31 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Michal Hocko &lt;mhocko@suse.com&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 4/4] oom-reaper: use madvise_dontneed() logic to decide if
	unmap the VMA
Date: Mon, 19 Dec 2016 20:17:22 +0300
Message-Id: &lt;20161219171722.77995-4-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161219171722.77995-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20161219171722.77995-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Dec. 19, 2016, 5:17 p.m.</div>
<pre class="content">
Logic on whether we can reap pages from the VMA should match what we
have in madvise_dontneed(). In particular, we should skip, VM_PFNMAP
VMAs, but we don&#39;t now.

Let&#39;s just extract condition on which we can shoot down pagesi from a
VMA with MADV_DONTNEED into separate function and use it in both places.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 mm/internal.h | 5 +++++
 mm/madvise.c  | 2 +-
 mm/oom_kill.c | 9 +--------
 3 files changed, 7 insertions(+), 9 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Dec. 20, 2016, 1:44 a.m.</div>
<pre class="content">
Hi Kirill,

[auto build test ERROR on mmotm/master]
[also build test ERROR on v4.9 next-20161219]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Kirill-A-Shutemov/mm-drop-zap_details-ignore_dirty/20161220-092938
base:   git://git.cmpxchg.org/linux-mmotm.git master
config: i386-randconfig-x003-201651 (attached as .config)
compiler: gcc-6 (Debian 6.2.0-3) 6.2.0 20160901
reproduce:
        # save the attached .config to linux build tree
        make ARCH=i386 

All errors (new ones prefixed by &gt;&gt;):

   mm/madvise.c: In function &#39;madvise_dontneed&#39;:
<span class="quote">&gt;&gt; mm/madvise.c:476:7: error: implicit declaration of function &#39;can_madv_dontneed_vma&#39; [-Werror=implicit-function-declaration]</span>
     if (!can_madv_dontneed_vma(vma))
          ^~~~~~~~~~~~~~~~~~~~~
   cc1: some warnings being treated as errors

vim +/can_madv_dontneed_vma +476 mm/madvise.c

   470	 */
   471	static long madvise_dontneed(struct vm_area_struct *vma,
   472				     struct vm_area_struct **prev,
   473				     unsigned long start, unsigned long end)
   474	{
   475		*prev = vma;
<span class="quote"> &gt; 476		if (!can_madv_dontneed_vma(vma))</span>
   477			return -EINVAL;
   478	
   479		zap_page_range(vma, start, end - start);

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Dec. 20, 2016, 2:22 a.m.</div>
<pre class="content">
Hi Kirill,

[auto build test WARNING on mmotm/master]
[also build test WARNING on v4.9 next-20161219]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Kirill-A-Shutemov/mm-drop-zap_details-ignore_dirty/20161220-092938
base:   git://git.cmpxchg.org/linux-mmotm.git master
config: x86_64-randconfig-x004-201651 (attached as .config)
compiler: gcc-6 (Debian 6.2.0-3) 6.2.0 20160901
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All warnings (new ones prefixed by &gt;&gt;):

   In file included from include/asm-generic/bug.h:4:0,
                    from arch/x86/include/asm/bug.h:35,
                    from include/linux/bug.h:4,
                    from include/linux/mmdebug.h:4,
                    from include/linux/mm.h:8,
                    from include/linux/mman.h:4,
                    from mm/madvise.c:8:
   mm/madvise.c: In function &#39;madvise_dontneed&#39;:
   mm/madvise.c:476:7: error: implicit declaration of function &#39;can_madv_dontneed_vma&#39; [-Werror=implicit-function-declaration]
     if (!can_madv_dontneed_vma(vma))
          ^
   include/linux/compiler.h:149:30: note: in definition of macro &#39;__trace_if&#39;
     if (__builtin_constant_p(!!(cond)) ? !!(cond) :   \
                                 ^~~~
<span class="quote">&gt;&gt; mm/madvise.c:476:2: note: in expansion of macro &#39;if&#39;</span>
     if (!can_madv_dontneed_vma(vma))
     ^~
   cc1: some warnings being treated as errors

vim +/if +476 mm/madvise.c

   460	 *
   461	 * NB: This interface discards data rather than pushes it out to swap,
   462	 * as some implementations do.  This has performance implications for
   463	 * applications like large transactional databases which want to discard
   464	 * pages in anonymous maps after committing to backing store the data
   465	 * that was kept in them.  There is no reason to write this data out to
   466	 * the swap area if the application is discarding it.
   467	 *
   468	 * An interface that causes the system to free clean pages and flush
   469	 * dirty pages is already available as msync(MS_INVALIDATE).
   470	 */
   471	static long madvise_dontneed(struct vm_area_struct *vma,
   472				     struct vm_area_struct **prev,
   473				     unsigned long start, unsigned long end)
   474	{
   475		*prev = vma;
<span class="quote"> &gt; 476		if (!can_madv_dontneed_vma(vma))</span>
   477			return -EINVAL;
   478	
   479		zap_page_range(vma, start, end - start);
   480		return 0;
   481	}
   482	
   483	/*
   484	 * Application wants to free up the pages and associated backing store.

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/internal.h b/mm/internal.h</span>
<span class="p_header">index 44d68895a9b9..7430628bff34 100644</span>
<span class="p_header">--- a/mm/internal.h</span>
<span class="p_header">+++ b/mm/internal.h</span>
<span class="p_chunk">@@ -41,6 +41,11 @@</span> <span class="p_context"> int do_swap_page(struct vm_fault *vmf);</span>
 void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
 		unsigned long floor, unsigned long ceiling);
 
<span class="p_add">+static inline bool can_madv_dontneed_vma(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !(vma-&gt;vm_flags &amp; (VM_LOCKED|VM_HUGETLB|VM_PFNMAP));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void unmap_page_range(struct mmu_gather *tlb,
 			     struct vm_area_struct *vma,
 			     unsigned long addr, unsigned long end,
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index aa4c502caecb..20200dfbd1bb 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -473,7 +473,7 @@</span> <span class="p_context"> static long madvise_dontneed(struct vm_area_struct *vma,</span>
 			     unsigned long start, unsigned long end)
 {
 	*prev = vma;
<span class="p_del">-	if (vma-&gt;vm_flags &amp; (VM_LOCKED|VM_HUGETLB|VM_PFNMAP))</span>
<span class="p_add">+	if (!can_madv_dontneed_vma(vma))</span>
 		return -EINVAL;
 
 	zap_page_range(vma, start, end - start);
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 96a53ab0c9eb..b6d8ac4948db 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -508,14 +508,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 
 	tlb_gather_mmu(&amp;tlb, mm, 0, -1);
 	for (vma = mm-&gt;mmap ; vma; vma = vma-&gt;vm_next) {
<span class="p_del">-		if (is_vm_hugetlb_page(vma))</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * mlocked VMAs require explicit munlocking before unmap.</span>
<span class="p_del">-		 * Let&#39;s keep it simple here and skip such VMAs.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		if (!can_madv_dontneed_vma(vma))</span>
 			continue;
 
 		/*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



