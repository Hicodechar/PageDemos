
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] iommu/amd: Add support for fast IOTLB flushing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] iommu/amd: Add support for fast IOTLB flushing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 31, 2018, 5:01 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1517374874-93978-1-git-send-email-suravee.suthikulpanit@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10193235/mbox/"
   >mbox</a>
|
   <a href="/patch/10193235/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10193235/">/patch/10193235/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0763E601A0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 05:01:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E715728426
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 05:01:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DA53028433; Wed, 31 Jan 2018 05:01:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C132728426
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Jan 2018 05:01:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751217AbeAaFBj (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 31 Jan 2018 00:01:39 -0500
Received: from mail-dm3nam03on0065.outbound.protection.outlook.com
	([104.47.41.65]:12560
	&quot;EHLO NAM03-DM3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750705AbeAaFBh (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 31 Jan 2018 00:01:37 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=o37pzCfbGh9wvzoFQgIuzUaZRV0futkpDVermulHJOc=;
	b=uAYF4HpPL1Dy4W02oreUFJVCbkjEb8QlOT1ktPcTHce6Kt//j19nWVrMNJ5YC5Nv7aa5Mg/XCwEDLZ9vGH/MmRN0m0lwdMgUWkn8LT+RclQgeY53duUdbMC1Mmwd1iKz0513hHlD1PGLr5kLIfdxHdwhjBgJeotL1k8gBLiEWPg=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Suravee.Suthikulpanit@amd.com; 
Received: from ssuthiku-rhel74.localdomain (114.109.128.54) by
	CY4PR12MB1734.namprd12.prod.outlook.com (10.175.62.144) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.444.14; Wed, 31 Jan 2018 05:01:33 +0000
From: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
To: iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Cc: joro@8bytes.org, jroedel@suse.de,
	Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
Subject: [PATCH v3] iommu/amd: Add support for fast IOTLB flushing
Date: Wed, 31 Jan 2018 00:01:14 -0500
Message-Id: &lt;1517374874-93978-1-git-send-email-suravee.suthikulpanit@amd.com&gt;
X-Mailer: git-send-email 1.8.3.1
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [114.109.128.54]
X-ClientProxiedBy: HK2PR02CA0161.apcprd02.prod.outlook.com (10.171.30.21) To
	CY4PR12MB1734.namprd12.prod.outlook.com (10.175.62.144)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-HT: Tenant
X-MS-Office365-Filtering-Correlation-Id: ccf1091c-18e6-40c6-965e-08d56867b40c
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(7020095)(4652020)(4534165)(4627221)(201703031133081)(201702281549075)(48565401081)(5600026)(4604075)(2017052603307)(7153060)(7193020);
	SRVR:CY4PR12MB1734; 
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1734;
	3:OSnCbdyO8b5uuEVaaTGghBqznNLlNy/IKG+c8EibxVimbig56CiNxG9PQWDY+yNEB7BWzDRVdpN6hocjxFjxi5xojHn1FSi98crXZ5u8FrhiYIvSLTVsH6gstRGYveIngbdgBmrFe6DwwabpyvMksS4afxl8GA7VUKK0O3ieQhZMlmg4zhppJXCM9QpqZXnEFBj2C5zl452jjg2rl2JW+aafdd+PCo19FtijulnuB/9YzQ6KGzm/lBHQEPXZhYmx;
	25:qEQ0Nw3GHNn5o/UyOI6x+0M1YfYjBD8J3163VX94orDR9mtEntILmG3fU0XIdUUL0xj085QYxJISnGpcUm56RNISJWPCwSr0krjHivdQrV48xph4AQqwceNHxE5fmVW3i2qFWl6hPA3lBnFAhxkrROGuVuY/89ZOMzuuseq0gqvnhrXQqqJQkSY1qnhhaFBsxB4qi2lTA9igwHbDtOGhcy2NufmectbMufUc4tU3HGbe+667hV07qotoZKOQyyfmQJkqpuMZnXZJByIasUCwSZj3tehkkuWmcRE+hGQ8zhXrIrLVBUdoMBTEAyk+AiBSIp/Blc0GwsSCWofZBjr6hw==;
	31:dYN2M4vXto2X+qCx5QnzgxMEJAA6v4H0uFP62B3r5MMscJ+B56MwD1jbpEoGeMQHfwEAh7tFM6hf2alf9NxHdNSNsqTuNyBuAn+AqKetbi04bAQjN9mR0bnZzKIippNLZ1WpinmAvKyV6cQ17PFeOF8SVUrRZt2fRgr6iX5YxsLFhgvERgyK1jD9vrNkCEsPGLUx0vd6EWgK99O0EMQB9LmdggajJ9938kGMoUwy6LU=
X-MS-TrafficTypeDiagnostic: CY4PR12MB1734:
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1734;
	20:or3DJbWqj4Yt/MdcXlRl+CIgTmppDKO1qFoqKnGege1MSJfDMFPMU+hL6q12j49/vxNheD3BTmSQkg+9R7NO+jUxwKt9XoACr4IglOnh1mGAPBYtU+AvA3K1mM/zCbrO3LX8XJr/6I27Uzz5YEm/mc8ZvEJwUteujOHrhM74bDLrnBUaJ90buRxkuHlFqB/lm5yAGxFxUcmQSdGeb2/vFHNxTHWb52cEeLtJ0RaRI2MpIo6psK8MIBObuYJ7htVdhdyCl8zSnhLGI0OYgjXmdFxUGjc5802+EJwxkgGW0YjjW2SjafZ/ppz2fLrSDUY+s1wqPPtKkzC6rbVOSul0IyGXxFfl3nzueV+gYFiOpLmqL8SW7k5MaGFx/VdL9bxm91FDnUzIB4yMpo0rZ1gNVvxJUshSabKFwO8q3TwVAuOhEBLTc2+KqEdWft5BFCyECpTTN0tYEBDxHRy1c8fXWRjXu23GfbYUExzxf0kX34dfnaV5BYfpjoKP+S4HYfVD;
	4:cHFqtyzzyDWa2u0ufVqmUP3Zg6f/xXq8YSG9vfgK+F0MA1DacaFWrnYKvs5xWylrewAaS26h0X8xxXZt0N25aBc7l55Dlz3CZnAIZT1IlrQM/gFUvuo/uK5dkrOB16CrLIQ8+2OtxZvr/Gc1xMS4hIqeNonnJqkTpnG4pDTO2IS/NEb3ZkxZmVQ1uGGRvzBE6V2i/23tc3eqpj3nrpk8iupkQA4K0OWmpnMJrW7xA28BbZkIYL6s9d6bCG+QP7+65NdlB1fZ14xoVzqhFLGdYjBAlAeAi1PX/sbfdQU0knUJnJkz/CqYJ/9pxlhgfDHT
X-Microsoft-Antispam-PRVS: &lt;CY4PR12MB173469EB1399D4BE99B7DF3AF3FB0@CY4PR12MB1734.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040501)(2401047)(8121501046)(5005006)(3231101)(2400082)(944501161)(93006095)(93001095)(10201501046)(3002001)(6055026)(6041288)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123564045)(20161123558120)(6072148)(201708071742011);
	SRVR:CY4PR12MB1734; BCL:0; PCL:0; RULEID:; SRVR:CY4PR12MB1734;
X-Forefront-PRVS: 056929CBB8
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(39860400002)(376002)(346002)(396003)(39380400002)(366004)(199004)(189003)(7736002)(26005)(59450400001)(5890100001)(386003)(50226002)(6506007)(186003)(48376002)(105586002)(86362001)(305945005)(2906002)(4326008)(50466002)(6116002)(16526019)(25786009)(3846002)(53936002)(5660300001)(68736007)(36756003)(51416003)(6512007)(72206003)(97736004)(6666003)(66066001)(4720700003)(478600001)(81166006)(8676002)(81156014)(106356001)(47776003)(16586007)(8936002)(316002)(6486002)(52116002)(6306002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY4PR12MB1734;
	H:ssuthiku-rhel74.localdomain; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY4PR12MB1734;
	23:P1B0M0bAyILrFyWZUpBFRo0dfTJPbet2a198O1670?=
	=?us-ascii?Q?H2w/tfB9xCd+HfTkI8h36E90phCWbOO+ky1j0pvRZ8BERKkNdP2IiNcVTD4S?=
	=?us-ascii?Q?XBMONv8i+u280i8qhvU96vd5H6QEoasiYmG7b1BMx3JVCcShuD9gB5v/3ekB?=
	=?us-ascii?Q?BqpIbtTbMCyqWSfG1UdkYo0J32jGstExT4YS8AKgjHsOZLAINz3OiXL4Hl2J?=
	=?us-ascii?Q?A+szGmVLg2Xu8Acv0565TM5IFDQ4t4+ZTPNyGM9LvgGIw+Ldvcexm8TcORrg?=
	=?us-ascii?Q?JdVj9Ooyx8br4rqC5ACHdH3qn/ChjD29XwIqzFIeW03TiJ5rhVvpNXgfBZU9?=
	=?us-ascii?Q?wfB8Hyan9oWe58+ucFHfEe6BBky8Yu7ZLrFNAsYHDM4Glh6gFo8QN161jZzp?=
	=?us-ascii?Q?dpoApY7mGl+NsW4E9bc4jxqvgta9Nu7WzhS1blh6kCy3vMlaV7gtvwfvxPmw?=
	=?us-ascii?Q?Hle2Zt3jJeatmM7e9CDXoaivCNwhNNpmiFF19ioYySkF/YHXUXwXvBDouxJD?=
	=?us-ascii?Q?VXI5FvtrKmjDZCbcmDDRk0bR5v0mKMvaK68KAkY/Hxyas2HD17Fld3DjrE3i?=
	=?us-ascii?Q?A0OxX5EPQB49SVOMuYLjmY0rAA0+JxTedE2eO6N8zoAF5rBenZC1Jh7+uamE?=
	=?us-ascii?Q?r+Em6gQxg0v8PjJia6yIRScotZa5tc/ZzL2TobkrJq1t828Iw/oH/PwxDrlE?=
	=?us-ascii?Q?W/PygcUvvxXOFlkeFbJstegWVjMyNLndBS1ObcSFKSAzzBl4KajDpHJlgsoE?=
	=?us-ascii?Q?FDiGqI+M4tsPRkEaDR7xjBSOqtY4pjqWtYljJXhRM7/hbpFsaM9yTfuImTJE?=
	=?us-ascii?Q?pw3p7/io2WqgUHCzzFyvOZUG99h4zOgLy3YR51DF3FZyzake752vvkuPkYPY?=
	=?us-ascii?Q?crxVt34fL1Lw8qg2tcz7kGgZjiQy9yCb4yuZOOBOXBt6aMydmBg2tHME+3vy?=
	=?us-ascii?Q?VKVF7oLXie6IwU4pCUSxa1AWWE2J1r15HvN9SkqcN2UB3Vy9+zs1anW86zhS?=
	=?us-ascii?Q?Vc5o0sKxnIt3EaQBKvB7VHxq0FHkb/hw93GFO+CZJSB7GfTLARZePPyQ6A7P?=
	=?us-ascii?Q?pwjkSAT3X9BynmVePlJtuP22KxTfYz2vVImCyXFjQuQVmDFb2QYeinI0wVIB?=
	=?us-ascii?Q?iNi112whbns0EfG3GwgIeFSYcOe3MFOFXKxdxj33K6JdQsvGbebYQ=3D=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1734;
	6:EMhExZmdGNtOvjCqI1aMctEAvQOQqtmzaFOtp5C7shyiVPCNKlqgsXgTiMzvWNHOLhZw0nHtl7F/K3/W7LmymqIbGkuqNC8yH8BAIjv0X6o1KqsnPxNzTu2TPK625zjhQVH3l0/GyPlu8Cpm5m7SpY8B5gOaqTuDWXjJ7BrEWYvSobWElASJ/PZyEYs/gRIqfcX3zY55uJgKaEtPvRGqO1jm5m5bWI21TVsDi8pp26xna9r6zlYxh+oaebGBnWbmmkQEi8g6T2ftcG0falbmsKIL3cdXH1U5IEVMQoJsjK03y3FlLzhwHB3UHPKMx7/AqePhn3Hzfir8Hke5KL7j3c6FhfqEeHs4n3FQnGaoTP0=;
	5:DrSn/xlX88xhgnokRB6QebcLe82OUUEG9iYTasmz6JJUor6WfPwj58uNn/sgf5pbg6O55LakAnyOfSW/II4NlOCCwpp4uUdZK/9/hoiNX7PhhTOX0OQkHnGA+ZCQncpdzis+BnrJ7+bmPPGmCZHtK/x42ThPEUou7DbMkJkP/Do=;
	24:imoGY7fen0FXbVn43QyOzCPATZ3BCgRYgAblk19G5GwHvHhpQ/3574kYc5SVv48FtU3DmT80ZlnBwZ0nN02yi+aP+aR8V3LwxB2OWX12MNM=;
	7:2My1V+VQkK4lkKMW2tJMrvPuuJ2cFoMGsY85AYatBvYSzYTZRaZoc2ionNGNsOe3kEAIIKKxQKYcSNsDP0EB42dEbm7Y8ng+dtqPahhc5r1vmGtPC07gbaw4BwEsMdFpMSIQjPyI3v/BgMyyz4JCaFo4nfCPtJmWvzSY1RCmet7XdaXGmlzerGMazhMr9WI1tAsJjB/7dHF5ENajwv45CIIWU/cY9gWOjtm8LS5EE86TjzQ1PW9RT2gV3x7qbIDq
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1734;
	20:4L8fa7MGo+FOx3hjA95KEFqHIyscEihhYGpZq+IJASxDUz7JLOrSnIfcot68XXwOpPJpB2FImrT8KwzoQY4bn19YGMmKlCEM9soH6tiM2i38mzQfL8EeDXyCkipbbSGkeG6cIhh4hYk2Ey5gaAYzuYO1AyFAxLsyG42tUb9mKuXzDAzN2GzQtMF8sVPeO5hKS9b6hlyjlm7uhbv6LJE7Mkg78OKg+/9F8tcTs82sQv1jrsZR4PXfs7gfktbVS1l7
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 31 Jan 2018 05:01:33.5218
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: ccf1091c-18e6-40c6-965e-08d56867b40c
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1734
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Jan. 31, 2018, 5:01 a.m.</div>
<pre class="content">
Implement the newly added IOTLB flushing interface for AMD IOMMU.

Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
<span class="signed-off-by">Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
---
Changes from v2 (https://lkml.org/lkml/2017/12/27/44)
 * Call domain_flush_complete() after domain_flush_tlb_pde().

 drivers/iommu/amd_iommu.c       | 77 +++++++++++++++++++++++++++++++++++++++--
 drivers/iommu/amd_iommu_init.c  |  7 ++++
 drivers/iommu/amd_iommu_types.h |  7 ++++
 3 files changed, 88 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a> - Feb. 13, 2018, 1:29 p.m.</div>
<pre class="content">
Hi Suravee,

thanks for working on this.

On Wed, Jan 31, 2018 at 12:01:14AM -0500, Suravee Suthikulpanit wrote:
<span class="quote">&gt; +static void amd_iommu_iotlb_range_add(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				      unsigned long iova, size_t size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct amd_iommu_flush_entries *entry, *p;</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +	bool found = false;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>

I am not happy with introducing or using global locks when they are not
necessary. Can this be a per-domain lock?

Besides, did you check it makes sense to actually keep track of the
ranges here? My approach would be to just make iotlb_range_add() an noop
and do a full domain flush in iotlb_sync(). But maybe you did
measurements you can share here to show there is a benefit.



	Joerg
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Feb. 21, 2018, 7:05 a.m.</div>
<pre class="content">
Hi Joerg,

On 2/13/18 8:29 PM, Joerg Roedel wrote:
<span class="quote">&gt; Hi Suravee,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; thanks for working on this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Wed, Jan 31, 2018 at 12:01:14AM -0500, Suravee Suthikulpanit wrote:</span>
<span class="quote">&gt;&gt; +static void amd_iommu_iotlb_range_add(struct iommu_domain *domain,</span>
<span class="quote">&gt;&gt; +				      unsigned long iova, size_t size)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	struct amd_iommu_flush_entries *entry, *p;</span>
<span class="quote">&gt;&gt; +	unsigned long flags;</span>
<span class="quote">&gt;&gt; +	bool found = false;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not happy with introducing or using global locks when they are not</span>
<span class="quote">&gt; necessary. Can this be a per-domain lock?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Besides, did you check it makes sense to actually keep track of the</span>
<span class="quote">&gt; ranges here? My approach would be to just make iotlb_range_add() an noop</span>
<span class="quote">&gt; and do a full domain flush in iotlb_sync(). But maybe you did</span>
<span class="quote">&gt; measurements you can share here to show there is a benefit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	Joerg</span>
<span class="quote">&gt; </span>

Alright, I&#39;ll send out v4 w/ iotlb_range_add() as no-op, and iotlb_sync()
as full domain flush. This should be sufficient to get start with adopting
the fast TLB flushing interface.

I&#39;ll submit support for fine-grain TLB invalidation as a separate series.

Thanks,
Suravee
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 3609f51..6c7ac3f 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -129,6 +129,12 @@</span> <span class="p_context"> struct dma_ops_domain {</span>
 static struct iova_domain reserved_iova_ranges;
 static struct lock_class_key reserved_rbtree_key;
 
<span class="p_add">+struct amd_iommu_flush_entries {</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+	unsigned long iova;</span>
<span class="p_add">+	size_t size;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /****************************************************************************
  *
  * Helper functions
<span class="p_chunk">@@ -3043,9 +3049,6 @@</span> <span class="p_context"> static ssize_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
 	unmap_size = iommu_unmap_page(domain, iova, page_size);
 	mutex_unlock(&amp;domain-&gt;api_lock);
 
<span class="p_del">-	domain_flush_tlb_pde(domain);</span>
<span class="p_del">-	domain_flush_complete(domain);</span>
<span class="p_del">-</span>
 	return unmap_size;
 }
 
<span class="p_chunk">@@ -3163,6 +3166,71 @@</span> <span class="p_context"> static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
 	return dev_data-&gt;defer_attach;
 }
 
<span class="p_add">+static void amd_iommu_flush_iotlb_all(struct iommu_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct protection_domain *dom = to_pdomain(domain);</span>
<span class="p_add">+</span>
<span class="p_add">+	domain_flush_tlb_pde(dom);</span>
<span class="p_add">+	domain_flush_complete(dom);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void amd_iommu_iotlb_range_add(struct iommu_domain *domain,</span>
<span class="p_add">+				      unsigned long iova, size_t size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct amd_iommu_flush_entries *entry, *p;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	bool found = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+	list_for_each_entry(p, &amp;amd_iommu_flush_list, list) {</span>
<span class="p_add">+		if (iova != p-&gt;iova)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (size &gt; p-&gt;size) {</span>
<span class="p_add">+			p-&gt;size = size;</span>
<span class="p_add">+			pr_debug(&quot;%s: update range: iova=%#lx, size = %#lx\n&quot;,</span>
<span class="p_add">+				 __func__, p-&gt;iova, p-&gt;size);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		found = true;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!found) {</span>
<span class="p_add">+		entry = kzalloc(sizeof(struct amd_iommu_flush_entries),</span>
<span class="p_add">+				GFP_KERNEL);</span>
<span class="p_add">+		if (entry) {</span>
<span class="p_add">+			pr_debug(&quot;%s: new range: iova=%lx, size=%#lx\n&quot;,</span>
<span class="p_add">+				 __func__, iova, size);</span>
<span class="p_add">+</span>
<span class="p_add">+			entry-&gt;iova = iova;</span>
<span class="p_add">+			entry-&gt;size = size;</span>
<span class="p_add">+			list_add(&amp;entry-&gt;list, &amp;amd_iommu_flush_list);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void amd_iommu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct protection_domain *pdom = to_pdomain(domain);</span>
<span class="p_add">+	struct amd_iommu_flush_entries *entry, *next;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Note:</span>
<span class="p_add">+	 * Currently, IOMMU driver just flushes the whole IO/TLB for</span>
<span class="p_add">+	 * a given domain. So, just remove entries from the list here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+	list_for_each_entry_safe(entry, next, &amp;amd_iommu_flush_list, list) {</span>
<span class="p_add">+		list_del(&amp;entry-&gt;list);</span>
<span class="p_add">+		kfree(entry);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	domain_flush_tlb_pde(pdom);</span>
<span class="p_add">+	domain_flush_complete(pdom);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 const struct iommu_ops amd_iommu_ops = {
 	.capable = amd_iommu_capable,
 	.domain_alloc = amd_iommu_domain_alloc,
<span class="p_chunk">@@ -3181,6 +3249,9 @@</span> <span class="p_context"> static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
 	.apply_resv_region = amd_iommu_apply_resv_region,
 	.is_attach_deferred = amd_iommu_is_attach_deferred,
 	.pgsize_bitmap	= AMD_IOMMU_PGSIZES,
<span class="p_add">+	.flush_iotlb_all = amd_iommu_flush_iotlb_all,</span>
<span class="p_add">+	.iotlb_range_add = amd_iommu_iotlb_range_add,</span>
<span class="p_add">+	.iotlb_sync = amd_iommu_iotlb_sync,</span>
 };
 
 /*****************************************************************************
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">index 6fe2d03..e8f8cee 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_chunk">@@ -185,6 +185,12 @@</span> <span class="p_context"> struct ivmd_header {</span>
 bool amd_iommu_force_isolation __read_mostly;
 
 /*
<span class="p_add">+ * IOTLB flush list</span>
<span class="p_add">+ */</span>
<span class="p_add">+LIST_HEAD(amd_iommu_flush_list);</span>
<span class="p_add">+spinlock_t amd_iommu_flush_list_lock;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * List of protection domains - used during resume
  */
 LIST_HEAD(amd_iommu_pd_list);
<span class="p_chunk">@@ -2490,6 +2496,7 @@</span> <span class="p_context"> static int __init early_amd_iommu_init(void)</span>
 	__set_bit(0, amd_iommu_pd_alloc_bitmap);
 
 	spin_lock_init(&amp;amd_iommu_pd_lock);
<span class="p_add">+	spin_lock_init(&amp;amd_iommu_flush_list_lock);</span>
 
 	/*
 	 * now the data structures are allocated and basically initialized
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">index f6b24c7..c3f4a7e 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_chunk">@@ -668,6 +668,13 @@</span> <span class="p_context"> struct iommu_dev_data {</span>
 extern struct list_head amd_iommu_pd_list;
 
 /*
<span class="p_add">+ * Declarations for the global flush list to support</span>
<span class="p_add">+ * iotlb_range_add() and iotlb_sync.</span>
<span class="p_add">+ */</span>
<span class="p_add">+extern spinlock_t amd_iommu_flush_list_lock;</span>
<span class="p_add">+extern struct list_head amd_iommu_flush_list;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * Structure defining one entry in the device table
  */
 struct dev_table_entry {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



