
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,2/3] mm/hugetlb: check for reserved hugepages during memory offline - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,2/3] mm/hugetlb: check for reserved hugepages during memory offline</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2816">Gerald Schaefer</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 26, 2016, 5:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160926172811.94033-3-gerald.schaefer@de.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9351053/mbox/"
   >mbox</a>
|
   <a href="/patch/9351053/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9351053/">/patch/9351053/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4501C6077A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 17:29:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 355B728C67
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 17:29:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2A0A828D4A; Mon, 26 Sep 2016 17:29:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E230F28C67
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 17:29:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1424382AbcIZR3M (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 26 Sep 2016 13:29:12 -0400
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:37760 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1424317AbcIZR2c (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 26 Sep 2016 13:28:32 -0400
Received: from pps.filterd (m0098414.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.17/8.16.0.17) with SMTP id
	u8QHMWiW052174
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 26 Sep 2016 13:28:31 -0400
Received: from e06smtp11.uk.ibm.com (e06smtp11.uk.ibm.com [195.75.94.107])
	by mx0b-001b2d01.pphosted.com with ESMTP id 25q5pppxw9-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 26 Sep 2016 13:28:31 -0400
Received: from localhost
	by e06smtp11.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;gerald.schaefer@de.ibm.com&gt;; 
	Mon, 26 Sep 2016 18:28:29 +0100
Received: from d06dlp02.portsmouth.uk.ibm.com (9.149.20.14)
	by e06smtp11.uk.ibm.com (192.168.101.141) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Mon, 26 Sep 2016 18:28:26 +0100
Received: from b06cxnps4076.portsmouth.uk.ibm.com
	(d06relay13.portsmouth.uk.ibm.com [9.149.109.198])
	by d06dlp02.portsmouth.uk.ibm.com (Postfix) with ESMTP id
	B9E7A219005F for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 26 Sep 2016 18:27:45 +0100 (BST)
Received: from d06av03.portsmouth.uk.ibm.com (d06av03.portsmouth.uk.ibm.com
	[9.149.37.213])
	by b06cxnps4076.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id u8QHSQS416515350
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 26 Sep 2016 17:28:26 GMT
Received: from d06av03.portsmouth.uk.ibm.com (localhost [127.0.0.1])
	by d06av03.portsmouth.uk.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with
	ESMTP id u8QHSML7008417
	for &lt;linux-kernel@vger.kernel.org&gt;; Mon, 26 Sep 2016 11:28:25 -0600
Received: from tuxmaker.boeblingen.de.ibm.com
	(tuxmaker.boeblingen.de.ibm.com [9.152.85.9])
	by d06av03.portsmouth.uk.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with
	ESMTP id u8QHSJCa008338
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA256 bits=256 verify=NO);
	Mon, 26 Sep 2016 11:28:22 -0600
From: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Michal Hocko &lt;mhocko@suse.cz&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;Aneesh Kumar K . V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Rui Teng &lt;rui.teng@linux.vnet.ibm.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Subject: [PATCH v4 2/3] mm/hugetlb: check for reserved hugepages during
	memory offline
Date: Mon, 26 Sep 2016 19:28:10 +0200
X-Mailer: git-send-email 2.8.4
In-Reply-To: &lt;20160926172811.94033-1-gerald.schaefer@de.ibm.com&gt;
References: &lt;20160926172811.94033-1-gerald.schaefer@de.ibm.com&gt;
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 16092617-0040-0000-0000-000002E2371A
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 16092617-0041-0000-0000-00001D404CAF
Message-Id: &lt;20160926172811.94033-3-gerald.schaefer@de.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2016-09-26_08:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1609020000
	definitions=main-1609260327
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2816">Gerald Schaefer</a> - Sept. 26, 2016, 5:28 p.m.</div>
<pre class="content">
In dissolve_free_huge_pages(), free hugepages will be dissolved without
making sure that there are enough of them left to satisfy hugepage
reservations.

Fix this by adding a return value to dissolve_free_huge_pages() and
checking h-&gt;free_huge_pages vs. h-&gt;resv_huge_pages. Note that this may
lead to the situation where dissolve_free_huge_page() returns an error
and all free hugepages that were dissolved before that error are lost,
while the memory block still cannot be set offline.

Fixes: c8721bbb (&quot;mm: memory-hotplug: enable memory hotplug to handle hugepage&quot;)
<span class="signed-off-by">Signed-off-by: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;</span>
---
 include/linux/hugetlb.h |  6 +++---
 mm/hugetlb.c            | 26 +++++++++++++++++++++-----
 mm/memory_hotplug.c     |  4 +++-
 3 files changed, 27 insertions(+), 9 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Sept. 29, 2016, 12:30 p.m.</div>
<pre class="content">
On Mon 26-09-16 19:28:10, Gerald Schaefer wrote:
<span class="quote">&gt; In dissolve_free_huge_pages(), free hugepages will be dissolved without</span>
<span class="quote">&gt; making sure that there are enough of them left to satisfy hugepage</span>
<span class="quote">&gt; reservations.</span>

otherwise a poor process with a reservation might get unexpected SIGBUS,
right?
<span class="quote">
&gt; Fix this by adding a return value to dissolve_free_huge_pages() and</span>
<span class="quote">&gt; checking h-&gt;free_huge_pages vs. h-&gt;resv_huge_pages. Note that this may</span>
<span class="quote">&gt; lead to the situation where dissolve_free_huge_page() returns an error</span>
<span class="quote">&gt; and all free hugepages that were dissolved before that error are lost,</span>
<span class="quote">&gt; while the memory block still cannot be set offline.</span>

Hmm, OK offline failure is certainly a better option than an application
failure.
<span class="quote"> 
&gt; Fixes: c8721bbb (&quot;mm: memory-hotplug: enable memory hotplug to handle hugepage&quot;)</span>
<span class="quote">&gt; Signed-off-by: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;</span>
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/hugetlb.h |  6 +++---</span>
<span class="quote">&gt;  mm/hugetlb.c            | 26 +++++++++++++++++++++-----</span>
<span class="quote">&gt;  mm/memory_hotplug.c     |  4 +++-</span>
<span class="quote">&gt;  3 files changed, 27 insertions(+), 9 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="quote">&gt; index c26d463..fe99e6f 100644</span>
<span class="quote">&gt; --- a/include/linux/hugetlb.h</span>
<span class="quote">&gt; +++ b/include/linux/hugetlb.h</span>
<span class="quote">&gt; @@ -450,8 +450,8 @@ static inline pgoff_t basepage_index(struct page *page)</span>
<span class="quote">&gt;  	return __basepage_index(page);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern void dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="quote">&gt; -				     unsigned long end_pfn);</span>
<span class="quote">&gt; +extern int dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="quote">&gt; +				    unsigned long end_pfn);</span>
<span class="quote">&gt;  static inline bool hugepage_migration_supported(struct hstate *h)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  #ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION</span>
<span class="quote">&gt; @@ -518,7 +518,7 @@ static inline pgoff_t basepage_index(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return page-&gt;index;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; -#define dissolve_free_huge_pages(s, e)	do {} while (0)</span>
<span class="quote">&gt; +#define dissolve_free_huge_pages(s, e)	0</span>
<span class="quote">&gt;  #define hugepage_migration_supported(h)	false</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 603bdd0..91ae1f5 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -1437,22 +1437,32 @@ static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Dissolve a given free hugepage into free buddy pages. This function does</span>
<span class="quote">&gt; - * nothing for in-use (including surplus) hugepages.</span>
<span class="quote">&gt; + * nothing for in-use (including surplus) hugepages. Returns -EBUSY if the</span>
<span class="quote">&gt; + * number of free hugepages would be reduced below the number of reserved</span>
<span class="quote">&gt; + * hugepages.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -static void dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt; +static int dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	int rc = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;  	if (PageHuge(page) &amp;&amp; !page_count(page)) {</span>
<span class="quote">&gt;  		struct page *head = compound_head(page);</span>
<span class="quote">&gt;  		struct hstate *h = page_hstate(head);</span>
<span class="quote">&gt;  		int nid = page_to_nid(head);</span>
<span class="quote">&gt; +		if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages == 0) {</span>
<span class="quote">&gt; +			rc = -EBUSY;</span>
<span class="quote">&gt; +			goto out;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt;  		list_del(&amp;head-&gt;lru);</span>
<span class="quote">&gt;  		h-&gt;free_huge_pages--;</span>
<span class="quote">&gt;  		h-&gt;free_huge_pages_node[nid]--;</span>
<span class="quote">&gt;  		h-&gt;max_huge_pages--;</span>
<span class="quote">&gt;  		update_and_free_page(h, head);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +out:</span>
<span class="quote">&gt;  	spin_unlock(&amp;hugetlb_lock);</span>
<span class="quote">&gt; +	return rc;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -1460,16 +1470,22 @@ static void dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt;   * make specified memory blocks removable from the system.</span>
<span class="quote">&gt;   * Note that this will dissolve a free gigantic hugepage completely, if any</span>
<span class="quote">&gt;   * part of it lies within the given range.</span>
<span class="quote">&gt; + * Also note that if dissolve_free_huge_page() returns with an error, all</span>
<span class="quote">&gt; + * free hugepages that were dissolved before that error are lost.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="quote">&gt; +int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long pfn;</span>
<span class="quote">&gt; +	int rc = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!hugepages_supported())</span>
<span class="quote">&gt; -		return;</span>
<span class="quote">&gt; +		return rc;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; minimum_order)</span>
<span class="quote">&gt; -		dissolve_free_huge_page(pfn_to_page(pfn));</span>
<span class="quote">&gt; +		if (rc = dissolve_free_huge_page(pfn_to_page(pfn)))</span>
<span class="quote">&gt; +			break;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return rc;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c</span>
<span class="quote">&gt; index b58906b..13998d9 100644</span>
<span class="quote">&gt; --- a/mm/memory_hotplug.c</span>
<span class="quote">&gt; +++ b/mm/memory_hotplug.c</span>
<span class="quote">&gt; @@ -1945,7 +1945,9 @@ static int __ref __offline_pages(unsigned long start_pfn,</span>
<span class="quote">&gt;  	 * dissolve free hugepages in the memory block before doing offlining</span>
<span class="quote">&gt;  	 * actually in order to make hugetlbfs&#39;s object counting consistent.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="quote">&gt; +	ret = dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="quote">&gt; +	if (ret)</span>
<span class="quote">&gt; +		goto failed_removal;</span>
<span class="quote">&gt;  	/* check again */</span>
<span class="quote">&gt;  	offlined_pages = check_pages_isolated(start_pfn, end_pfn);</span>
<span class="quote">&gt;  	if (offlined_pages &lt; 0) {</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.8.4</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Sept. 29, 2016, 5:09 p.m.</div>
<pre class="content">
On 09/29/2016 05:30 AM, Michal Hocko wrote:
<span class="quote">&gt; On Mon 26-09-16 19:28:10, Gerald Schaefer wrote:</span>
<span class="quote">&gt;&gt; In dissolve_free_huge_pages(), free hugepages will be dissolved without</span>
<span class="quote">&gt;&gt; making sure that there are enough of them left to satisfy hugepage</span>
<span class="quote">&gt;&gt; reservations.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; otherwise a poor process with a reservation might get unexpected SIGBUS,</span>
<span class="quote">&gt; right?</span>

Yes, that is correct.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; Fix this by adding a return value to dissolve_free_huge_pages() and</span>
<span class="quote">&gt;&gt; checking h-&gt;free_huge_pages vs. h-&gt;resv_huge_pages. Note that this may</span>
<span class="quote">&gt;&gt; lead to the situation where dissolve_free_huge_page() returns an error</span>
<span class="quote">&gt;&gt; and all free hugepages that were dissolved before that error are lost,</span>
<span class="quote">&gt;&gt; while the memory block still cannot be set offline.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hmm, OK offline failure is certainly a better option than an application</span>
<span class="quote">&gt; failure.</span>

I agree.

However, if the reason for the offline is that a dimm within the huge page
is starting to fail, then one could make an argument that forced offline of
the huge page would be more desirable.  We really don&#39;t know the reason for
the offline.  So, I think the approach of this patch is best.

--
Mike Kravetz
<span class="quote">
&gt;  </span>
<span class="quote">&gt;&gt; Fixes: c8721bbb (&quot;mm: memory-hotplug: enable memory hotplug to handle hugepage&quot;)</span>
<span class="quote">&gt;&gt; Signed-off-by: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  include/linux/hugetlb.h |  6 +++---</span>
<span class="quote">&gt;&gt;  mm/hugetlb.c            | 26 +++++++++++++++++++++-----</span>
<span class="quote">&gt;&gt;  mm/memory_hotplug.c     |  4 +++-</span>
<span class="quote">&gt;&gt;  3 files changed, 27 insertions(+), 9 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; index c26d463..fe99e6f 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/hugetlb.h</span>
<span class="quote">&gt;&gt; @@ -450,8 +450,8 @@ static inline pgoff_t basepage_index(struct page *page)</span>
<span class="quote">&gt;&gt;  	return __basepage_index(page);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -extern void dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="quote">&gt;&gt; -				     unsigned long end_pfn);</span>
<span class="quote">&gt;&gt; +extern int dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="quote">&gt;&gt; +				    unsigned long end_pfn);</span>
<span class="quote">&gt;&gt;  static inline bool hugepage_migration_supported(struct hstate *h)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION</span>
<span class="quote">&gt;&gt; @@ -518,7 +518,7 @@ static inline pgoff_t basepage_index(struct page *page)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	return page-&gt;index;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; -#define dissolve_free_huge_pages(s, e)	do {} while (0)</span>
<span class="quote">&gt;&gt; +#define dissolve_free_huge_pages(s, e)	0</span>
<span class="quote">&gt;&gt;  #define hugepage_migration_supported(h)	false</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index 603bdd0..91ae1f5 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -1437,22 +1437,32 @@ static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * Dissolve a given free hugepage into free buddy pages. This function does</span>
<span class="quote">&gt;&gt; - * nothing for in-use (including surplus) hugepages.</span>
<span class="quote">&gt;&gt; + * nothing for in-use (including surplus) hugepages. Returns -EBUSY if the</span>
<span class="quote">&gt;&gt; + * number of free hugepages would be reduced below the number of reserved</span>
<span class="quote">&gt;&gt; + * hugepages.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt; -static void dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt;&gt; +static int dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; +	int rc = 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;&gt;  	if (PageHuge(page) &amp;&amp; !page_count(page)) {</span>
<span class="quote">&gt;&gt;  		struct page *head = compound_head(page);</span>
<span class="quote">&gt;&gt;  		struct hstate *h = page_hstate(head);</span>
<span class="quote">&gt;&gt;  		int nid = page_to_nid(head);</span>
<span class="quote">&gt;&gt; +		if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages == 0) {</span>
<span class="quote">&gt;&gt; +			rc = -EBUSY;</span>
<span class="quote">&gt;&gt; +			goto out;</span>
<span class="quote">&gt;&gt; +		}</span>
<span class="quote">&gt;&gt;  		list_del(&amp;head-&gt;lru);</span>
<span class="quote">&gt;&gt;  		h-&gt;free_huge_pages--;</span>
<span class="quote">&gt;&gt;  		h-&gt;free_huge_pages_node[nid]--;</span>
<span class="quote">&gt;&gt;  		h-&gt;max_huge_pages--;</span>
<span class="quote">&gt;&gt;  		update_and_free_page(h, head);</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt; +out:</span>
<span class="quote">&gt;&gt;  	spin_unlock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;&gt; +	return rc;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt; @@ -1460,16 +1470,22 @@ static void dissolve_free_huge_page(struct page *page)</span>
<span class="quote">&gt;&gt;   * make specified memory blocks removable from the system.</span>
<span class="quote">&gt;&gt;   * Note that this will dissolve a free gigantic hugepage completely, if any</span>
<span class="quote">&gt;&gt;   * part of it lies within the given range.</span>
<span class="quote">&gt;&gt; + * Also note that if dissolve_free_huge_page() returns with an error, all</span>
<span class="quote">&gt;&gt; + * free hugepages that were dissolved before that error are lost.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt; -void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="quote">&gt;&gt; +int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	unsigned long pfn;</span>
<span class="quote">&gt;&gt; +	int rc = 0;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	if (!hugepages_supported())</span>
<span class="quote">&gt;&gt; -		return;</span>
<span class="quote">&gt;&gt; +		return rc;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; minimum_order)</span>
<span class="quote">&gt;&gt; -		dissolve_free_huge_page(pfn_to_page(pfn));</span>
<span class="quote">&gt;&gt; +		if (rc = dissolve_free_huge_page(pfn_to_page(pfn)))</span>
<span class="quote">&gt;&gt; +			break;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	return rc;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt; diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c</span>
<span class="quote">&gt;&gt; index b58906b..13998d9 100644</span>
<span class="quote">&gt;&gt; --- a/mm/memory_hotplug.c</span>
<span class="quote">&gt;&gt; +++ b/mm/memory_hotplug.c</span>
<span class="quote">&gt;&gt; @@ -1945,7 +1945,9 @@ static int __ref __offline_pages(unsigned long start_pfn,</span>
<span class="quote">&gt;&gt;  	 * dissolve free hugepages in the memory block before doing offlining</span>
<span class="quote">&gt;&gt;  	 * actually in order to make hugetlbfs&#39;s object counting consistent.</span>
<span class="quote">&gt;&gt;  	 */</span>
<span class="quote">&gt;&gt; -	dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="quote">&gt;&gt; +	ret = dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="quote">&gt;&gt; +	if (ret)</span>
<span class="quote">&gt;&gt; +		goto failed_removal;</span>
<span class="quote">&gt;&gt;  	/* check again */</span>
<span class="quote">&gt;&gt;  	offlined_pages = check_pages_isolated(start_pfn, end_pfn);</span>
<span class="quote">&gt;&gt;  	if (offlined_pages &lt; 0) {</span>
<span class="quote">&gt;&gt; -- </span>
<span class="quote">&gt;&gt; 2.8.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Sept. 30, 2016, 6:38 a.m.</div>
<pre class="content">
On Thu 29-09-16 10:09:37, Mike Kravetz wrote:
<span class="quote">&gt; On 09/29/2016 05:30 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Mon 26-09-16 19:28:10, Gerald Schaefer wrote:</span>
[...]
<span class="quote">&gt; &gt;&gt; Fix this by adding a return value to dissolve_free_huge_pages() and</span>
<span class="quote">&gt; &gt;&gt; checking h-&gt;free_huge_pages vs. h-&gt;resv_huge_pages. Note that this may</span>
<span class="quote">&gt; &gt;&gt; lead to the situation where dissolve_free_huge_page() returns an error</span>
<span class="quote">&gt; &gt;&gt; and all free hugepages that were dissolved before that error are lost,</span>
<span class="quote">&gt; &gt;&gt; while the memory block still cannot be set offline.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hmm, OK offline failure is certainly a better option than an application</span>
<span class="quote">&gt; &gt; failure.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I agree.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; However, if the reason for the offline is that a dimm within the huge page</span>
<span class="quote">&gt; is starting to fail, then one could make an argument that forced offline of</span>
<span class="quote">&gt; the huge page would be more desirable.  We really don&#39;t know the reason for</span>
<span class="quote">&gt; the offline.  So, I think the approach of this patch is best.</span>

I though that memory which was already reported to be faulty would be
marked HWPoison and removed from the allocator. But it&#39;s been quite some
time since I&#39;ve looked in that area...
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index c26d463..fe99e6f 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -450,8 +450,8 @@</span> <span class="p_context"> static inline pgoff_t basepage_index(struct page *page)</span>
 	return __basepage_index(page);
 }
 
<span class="p_del">-extern void dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="p_del">-				     unsigned long end_pfn);</span>
<span class="p_add">+extern int dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="p_add">+				    unsigned long end_pfn);</span>
 static inline bool hugepage_migration_supported(struct hstate *h)
 {
 #ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION
<span class="p_chunk">@@ -518,7 +518,7 @@</span> <span class="p_context"> static inline pgoff_t basepage_index(struct page *page)</span>
 {
 	return page-&gt;index;
 }
<span class="p_del">-#define dissolve_free_huge_pages(s, e)	do {} while (0)</span>
<span class="p_add">+#define dissolve_free_huge_pages(s, e)	0</span>
 #define hugepage_migration_supported(h)	false
 
 static inline spinlock_t *huge_pte_lockptr(struct hstate *h,
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 603bdd0..91ae1f5 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1437,22 +1437,32 @@</span> <span class="p_context"> static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,</span>
 
 /*
  * Dissolve a given free hugepage into free buddy pages. This function does
<span class="p_del">- * nothing for in-use (including surplus) hugepages.</span>
<span class="p_add">+ * nothing for in-use (including surplus) hugepages. Returns -EBUSY if the</span>
<span class="p_add">+ * number of free hugepages would be reduced below the number of reserved</span>
<span class="p_add">+ * hugepages.</span>
  */
<span class="p_del">-static void dissolve_free_huge_page(struct page *page)</span>
<span class="p_add">+static int dissolve_free_huge_page(struct page *page)</span>
 {
<span class="p_add">+	int rc = 0;</span>
<span class="p_add">+</span>
 	spin_lock(&amp;hugetlb_lock);
 	if (PageHuge(page) &amp;&amp; !page_count(page)) {
 		struct page *head = compound_head(page);
 		struct hstate *h = page_hstate(head);
 		int nid = page_to_nid(head);
<span class="p_add">+		if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages == 0) {</span>
<span class="p_add">+			rc = -EBUSY;</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
 		list_del(&amp;head-&gt;lru);
 		h-&gt;free_huge_pages--;
 		h-&gt;free_huge_pages_node[nid]--;
 		h-&gt;max_huge_pages--;
 		update_and_free_page(h, head);
 	}
<span class="p_add">+out:</span>
 	spin_unlock(&amp;hugetlb_lock);
<span class="p_add">+	return rc;</span>
 }
 
 /*
<span class="p_chunk">@@ -1460,16 +1470,22 @@</span> <span class="p_context"> static void dissolve_free_huge_page(struct page *page)</span>
  * make specified memory blocks removable from the system.
  * Note that this will dissolve a free gigantic hugepage completely, if any
  * part of it lies within the given range.
<span class="p_add">+ * Also note that if dissolve_free_huge_page() returns with an error, all</span>
<span class="p_add">+ * free hugepages that were dissolved before that error are lost.</span>
  */
<span class="p_del">-void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="p_add">+int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
 {
 	unsigned long pfn;
<span class="p_add">+	int rc = 0;</span>
 
 	if (!hugepages_supported())
<span class="p_del">-		return;</span>
<span class="p_add">+		return rc;</span>
 
 	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; minimum_order)
<span class="p_del">-		dissolve_free_huge_page(pfn_to_page(pfn));</span>
<span class="p_add">+		if (rc = dissolve_free_huge_page(pfn_to_page(pfn)))</span>
<span class="p_add">+			break;</span>
<span class="p_add">+</span>
<span class="p_add">+	return rc;</span>
 }
 
 /*
<span class="p_header">diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c</span>
<span class="p_header">index b58906b..13998d9 100644</span>
<span class="p_header">--- a/mm/memory_hotplug.c</span>
<span class="p_header">+++ b/mm/memory_hotplug.c</span>
<span class="p_chunk">@@ -1945,7 +1945,9 @@</span> <span class="p_context"> static int __ref __offline_pages(unsigned long start_pfn,</span>
 	 * dissolve free hugepages in the memory block before doing offlining
 	 * actually in order to make hugetlbfs&#39;s object counting consistent.
 	 */
<span class="p_del">-	dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="p_add">+	ret = dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		goto failed_removal;</span>
 	/* check again */
 	offlined_pages = check_pages_isolated(start_pfn, end_pfn);
 	if (offlined_pages &lt; 0) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



