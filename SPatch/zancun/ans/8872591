
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv6,2/3] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv6,2/3] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 18, 2016, 2:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460989069-2690-1-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8872591/mbox/"
   >mbox</a>
|
   <a href="/patch/8872591/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8872591/">/patch/8872591/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 5C1FFBF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:19:09 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 86CAA20220
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:19:08 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 9966A20148
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:19:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752031AbcDROTC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 18 Apr 2016 10:19:02 -0400
Received: from mail-am1on0118.outbound.protection.outlook.com
	([157.56.112.118]:60960
	&quot;EHLO emea01-am1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751804AbcDROS6 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 18 Apr 2016 10:18:58 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=5RxzdCXvU0jaqYjMWURcF9SvdFtbqjR8Y//6wLY2Psk=;
	b=Fzxzm8A18VNUGMo4zIQewdo0d14Ro4kpg2+i1EVNdZTXhFOCbOd91kIHLhjmYJbUXdsjLwBePZNz6yBYI5Iu4a3rmVXF6lMp5/ARfWdQCSxBUzw2ZYhp+aDdR/WnQqZv8LtidZVz8BZ+9f8fgcAHU51ZxmUl26OLaWvpxJ5UE0U=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	AM5PR0801MB1297.eurprd08.prod.outlook.com (10.167.216.148) with
	Microsoft
	SMTP Server (TLS) id 15.1.466.19; Mon, 18 Apr 2016 14:18:54 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;mingo@redhat.com&gt;,
	&lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv6 2/3] x86/vdso: add mremap hook to vm_special_mapping
Date: Mon, 18 Apr 2016 17:17:49 +0300
Message-ID: &lt;1460989069-2690-1-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;
References: &lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: AM3PR07CA0015.eurprd07.prod.outlook.com (10.141.45.143) To
	AM5PR0801MB1297.eurprd08.prod.outlook.com (10.167.216.148)
X-MS-Office365-Filtering-Correlation-Id: 15487b10-038e-4b36-751d-08d367946017
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1297;
	2:QmTTFXQ11XugGb+OB8CGiBswvfhHIe7jV0DoRfyh7t2rKWIcf9Pf66WuFn7MkrvIywiSrdUH5NTaES/CQ+0Kkg56/+5rbTavBhFIMY6YMy5bRj0EnSrnuAAEaIopKz0uGsgkDu5RbIbY/yLffvJEWCE5NS1fIsNdlHrw/JRTN7OJbGnvPtyvfQ3jW9O3joIo;
	3:fdhsXHPdOkW/q2POBHbU86b4Rhm2QveiTwviHaqk6GRwc2pVZgJQ268svEpEiDjHaGxFQM7BCYNn0n0cIFAkWNrc1zBflQLoW56b8oYAdWqGLvPo6W8sDERH/J0UMBi5;
	25:2jH8wwAlUhhwAw/c0VwlS+k38N7pm3EL4gpywzdir8ZPMXUI+CyT+fxfXIbTwNF56uIM5TRA2fDvjpdFLiPOoAQqdiDvhF0dT5kiU8knbwgyoJ2PXMUYdWahZJD00cnguD6l4OhnFe9E/L80V82Q8p61Ywr1LVViMuezqGaiCRgpLpin084O8iiGsZxK9HBvF0s6/kGzhn8MRol6KKpEbLg7OOgprfG9VO9GgPuPLnqHOaIrC1tf33asAgif8/ZEBP/JbLuxYU2/4/o8x+a0O3wU1WW9o2p+AH3QWvoHH8ER2dRo76eslE7NflsOZmaAsoVilz2ONeTT4Owu2qVKLg==
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:AM5PR0801MB1297;
X-Microsoft-Antispam-PRVS: &lt;AM5PR0801MB1297ADD8C4B95AA576AA4ACCD16B0@AM5PR0801MB1297.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(9101521026)(6040130)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(6041046)(6043046);
	SRVR:AM5PR0801MB1297; BCL:0; PCL:0; RULEID:;
	SRVR:AM5PR0801MB1297; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1297;
	4:CzPxHpaSpXsT1PiehuCxmdu84yB+M38oFDUVNt/ZhkXf6A3SW4B3y+MnN5b5stutHvbLvte52UYJn0bEdndGuRaBqEgUsG4mkoZj8zEnThvsXAiiCL+kFZGv0rblmANpDxO2lOo9Yq/U9Srw4hK0s0b2/lfzsuW1RdqP6mM6Xm5363FKWMZsOgiDpQt0GNKTOqm1t6l25Aa/ATk+7WIF7DRdDAj4e8OjHaZHlEb2EsJeoCWgzPMUXjKz15FjYPnPt5rjWn7HuifX8fdMoif2jLpri2ukHE4UzQlFpIApzs2aKslf2seIyZ1xitIl9zgl97VdStADGs/DR3vszz/eNi8LDq9MmH6QjoGsjWdCp5+jfpNxMoMtAjymgGamKc7TOSsU+fnmQPiyOsiplw1q2OXXbWOE6nKt4tFOuZJ6gpvm4ksaw2rGqcHkRi28ab2qpANmzBTEhPrGt50RM4TRyw==
X-Forefront-PRVS: 0916FC3A18
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(50466002)(50226001)(1096002)(2950100001)(47776003)(586003)(6116002)(66066001)(3846002)(77096005)(42186005)(86362001)(92566002)(53416004)(36756003)(4001430100002)(19580405001)(19580395003)(2351001)(229853001)(5008740100001)(50986999)(76176999)(4326007)(189998001)(107886002)(110136002)(2906002)(48376002)(81166005)(33646002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM5PR0801MB1297;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1297;
	23:Pkfp9zDwn+/WQmEzS4AZtMEcz5OtqrpdrMxREfrx/bwBe2KfuvpfwhruhQtCu32wLwxCrdreJS7G8epZKL4B+9kHl8V9mDkgJ/QlCk/jF8yr8c6WouSixv2yT8epms4ewFEXpg67mNCxkLL5s1Wb3JCJEs4XvUsDM7+FVgit1A/ccVydJxiBD1RjffP7ZwrzwXKIHbiG0gcdOlPKPiOZpGDd03gX24TFW3YcaDNdzKLGR0+GAwPvVwFheediVQ08yVJonTRGaI4r9z+iBHOEgCAUk3pETfvY5Ruy+bg5PUCl/SZ2Zcep8sL1KgarOCeztUdPGOknzNzouGZ8qlKzBhnpIcRke9b6vjQTsm1iMbvQ9Qf4pWc2pIwZoheBkYieVYe4dlhe82zbN2PHYnXNe2ZKIj2mn//mcM4WJPb/xHfHbcsvZ1kBXGIMBbZOlkstVwyORKQBQY2+an5E612BVUxwCD/zEdBb1vrVrRrVeAvlEcTnIvFl5U8x29BT/OEWyd+I7Y4xeUBTwxRQDQ6e0j2u3SagytPB9TKh7WNNb0hFfJwTPFQyM/nOTPu8rMZUXNu7WJB/YplMyxlN6FADMBoicxr8br0NI0KP/QzK/rmWig9M5BryPKaa5krAOyvNu7SxAuM9D0eRqhYcxf5ISyX5Z5paHIaI84fyjtu6VBnU1WzWRXtQgxzO+kz03e2wrUges+Drd44QRc6iQxEoKFywqtwed8pWjJl184GZbexvR8aTrKw2dVKybqeXQhR4ppDSpuusW/J6+3HS0tsTkwC+JUfwzt4QGwdCEzdSFi9p/rZz5LdGjUE+sFmzIrHcpSyv+FezJou7BBEQbCV9mWfdmY9IcEtTfrfJSLto1+yZp2COabRObWywOoWmsLfFQUUIDdV7D3LAUOtT1Arsvg==
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1297;
	5:VOIvy539s431YAwl+glNtmNzKq+kqVuWUTBFxIUsAr9vzHEs4qDELziKXuHaP79REUjZgN04w+iQhGDHg72RuMLWbXdteuo6FKQGYep/C06rOLiY0J2njWgLbXbIjcWSwuP07PqyIj7QaOVl4ehv5o6AFNyHk25UZErdsbJEdDZ1/nT81lbYv27TwsbNbkYG;
	24:y90b0CLPKgHsTjRIUFQhfpUAsPHTpQv85k+v4yOksGipiz3FPQTwANu8lXLnDB/zI7OD0w+48//uDlkQ38tasONN9va3GYAGsXP12/KUdO8=;
	7:bJk4SbF4Hyq6DsZdLF+hcv/nYRx9DzRMrPXCKv5Nv8nT11090FBO19i8xyCvvbAEQEpVE6LExx4bAleOpjpi+bdkz/3FK7Cto2aOQiUi78xE+ZQuFgLu/hrN5ihUWG6afqMTpQev0+LbVH1GQsGlevcehpLAm1BNRjnfWoztr+pgkvrXgtTIxc1KFwWA/tTC6NRN7hBtaMBXqm5F4IwI40+Uhf4+paG6xJf6TA5joP8=;
	20:/ULsb54ALrpAA2hGFw8zhpBL0u3+1Ts5yWqIr1JAHd0H+GFWc6zJ4b/kvqKl6kj1s0mpPQOLj0u6wbNzBfCEKGjO90SshLg36gAn7jOFKBKrz9JtITodMUrLw7EP5HK68EYvhhtjgenwVteh5vgsgrn1+huG6MUZaGfPHQhxEOg=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Apr 2016 14:18:54.7623
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM5PR0801MB1297
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 18, 2016, 2:17 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function
    with ifdefs around
v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are
    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32
v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32
v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;
    used is_ia32_task instead of ifdefs 
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 49 ++++++++++++++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 57 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..3385586f86a6 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,42 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+#if defined CONFIG_X86_32 || defined CONFIG_COMPAT</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="p_add">+		return -EFAULT;</span>
<span class="p_add">+</span>
<span class="p_add">+	vdso_fix_landing(image, new_vma);</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +195,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +234,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



