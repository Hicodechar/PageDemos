
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,5/5] powerpc/mm: Fix growth direction for hugepages mmaps with slice - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,5/5] powerpc/mm: Fix growth direction for hugepages mmaps with slice</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 24, 2018, 9:02 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;362a93307a09b521878c47a8999a39a228184293.1516783089.git.christophe.leroy@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10181929/mbox/"
   >mbox</a>
|
   <a href="/patch/10181929/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10181929/">/patch/10181929/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	70AEE602B7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 09:02:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6341B223B3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 09:02:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 57DA3285C3; Wed, 24 Jan 2018 09:02:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C8659223B3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 09:02:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932805AbeAXJCn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 Jan 2018 04:02:43 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:1737 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932777AbeAXJCf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 Jan 2018 04:02:35 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zRK1X1zpRz9ttrd;
	Wed, 24 Jan 2018 10:02:24 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id PmLPvxRHBEk7; Wed, 24 Jan 2018 10:02:24 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zRK1X1Q7Lz9ttrY;
	Wed, 24 Jan 2018 10:02:24 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 7B2EF8B86D;
	Wed, 24 Jan 2018 10:02:34 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id 0eFxIyZHRQ0N; Wed, 24 Jan 2018 10:02:34 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 588BB8B973;
	Wed, 24 Jan 2018 10:02:34 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 467716E91D; Wed, 24 Jan 2018 10:02:34 +0100 (CET)
Message-Id: &lt;362a93307a09b521878c47a8999a39a228184293.1516783089.git.christophe.leroy@c-s.fr&gt;
In-Reply-To: &lt;6920f6efe2dcdabf59350b2d31ee6bd4bdef57f4.1516783089.git.christophe.leroy@c-s.fr&gt;
References: &lt;6920f6efe2dcdabf59350b2d31ee6bd4bdef57f4.1516783089.git.christophe.leroy@c-s.fr&gt;
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH v3 5/5] powerpc/mm: Fix growth direction for hugepages mmaps
	with slice
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;, aneesh.kumar@linux.vnet.ibm.com
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Wed, 24 Jan 2018 10:02:34 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 24, 2018, 9:02 a.m.</div>
<pre class="content">
An application running with libhugetlbfs fails to allocate
additional pages to HEAP due to the hugemap being done
inconditionally as topdown mapping:

mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000
[...]
mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000
munmap(0x73d80000, 1048576)             = 0
[...]
mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000
munmap(0x73d00000, 1572864)             = 0
[...]
mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000
munmap(0x73d00000, 1572864)             = 0
[...]

As one can see from the above strace log, mmap() allocates further
pages below the initial one because no space is available on top of it.

This patch fixes it by requesting bottomup mapping as the non
generic hugetlb_get_unmapped_area() does

Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)
<span class="signed-off-by">Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 v3: Was a standalone patch before, but conflicts with this serie.

 arch/powerpc/mm/hugetlbpage.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 24, 2018, 9:15 a.m.</div>
<pre class="content">
On 01/24/2018 02:32 PM, Christophe Leroy wrote:
<span class="quote">&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt; pages below the initial one because no space is available on top of it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch fixes it by requesting bottomup mapping as the non</span>
<span class="quote">&gt; generic hugetlb_get_unmapped_area() does</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   v3: Was a standalone patch before, but conflicts with this serie.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   arch/powerpc/mm/hugetlbpage.c | 2 +-</span>
<span class="quote">&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index 79e1378ee303..368ea6b248ad 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -558,7 +558,7 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;   		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;   						       pgoff, flags);</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt; -	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt; +	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 0);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   #endif</span>

Why make this change also for PPC64? Can you do this #ifdef 8xx?.You can 
ideally move hugetlb_get_unmapped_area to slice.h and then make this 
much simpler for 8xxx?

-aneesh

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 24, 2018, 9:27 a.m.</div>
<pre class="content">
Le 24/01/2018 à 10:15, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 01/24/2018 02:32 PM, Christophe Leroy wrote:</span>
<span class="quote">&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt;&gt; pages below the initial one because no space is available on top of it.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch fixes it by requesting bottomup mapping as the non</span>
<span class="quote">&gt;&gt; generic hugetlb_get_unmapped_area() does</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt;&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   v3: Was a standalone patch before, but conflicts with this serie.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 2 +-</span>
<span class="quote">&gt;&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index 79e1378ee303..368ea6b248ad 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -558,7 +558,7 @@ unsigned long hugetlb_get_unmapped_area(struct </span>
<span class="quote">&gt;&gt; file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;           return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;                                  pgoff, flags);</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; -    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;&gt; +    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 0);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why make this change also for PPC64? Can you do this #ifdef 8xx?.You can </span>
<span class="quote">&gt; ideally move hugetlb_get_unmapped_area to slice.h and then make this </span>
<span class="quote">&gt; much simpler for 8xxx?</span>
<span class="quote">&gt; </span>

Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I 
suggested in my last email on this subject (22/01/2018 9:22) ?

Before doing anything specific to the PPC32/8xx, I&#39;d like to be sure the 
issue is definitly only on PPC32.

Thanks,
Christophe
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 24, 2018, 9:35 a.m.</div>
<pre class="content">
On 01/24/2018 02:57 PM, Christophe LEROY wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Le 24/01/2018 à 10:15, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 01/24/2018 02:32 PM, Christophe Leroy wrote:</span>
<span class="quote">&gt;&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt;&gt;&gt; pages below the initial one because no space is available on top of it.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This patch fixes it by requesting bottomup mapping as the non</span>
<span class="quote">&gt;&gt;&gt; generic hugetlb_get_unmapped_area() does</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;   v3: Was a standalone patch before, but conflicts with this serie.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 2 +-</span>
<span class="quote">&gt;&gt;&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; index 79e1378ee303..368ea6b248ad 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt; @@ -558,7 +558,7 @@ unsigned long hugetlb_get_unmapped_area(struct </span>
<span class="quote">&gt;&gt;&gt; file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;&gt;           return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;&gt;                                  pgoff, flags);</span>
<span class="quote">&gt;&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;&gt; -    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;&gt;&gt; +    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 0);</span>
<span class="quote">&gt;&gt;&gt;   }</span>
<span class="quote">&gt;&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Why make this change also for PPC64? Can you do this #ifdef 8xx?.You </span>
<span class="quote">&gt;&gt; can ideally move hugetlb_get_unmapped_area to slice.h and then make </span>
<span class="quote">&gt;&gt; this much simpler for 8xxx?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I </span>
<span class="quote">&gt; suggested in my last email on this subject (22/01/2018 9:22) ?</span>


yes. The test ran fine for me

kvaneesh@ltctulc6a-p1:[~]$  HUGETLB_MORECORE=yes 
HUGETLB_MORECORE_HEAPBASE=0x30000000 ./a.out
10000000-10010000 r-xp 00000000 fc:00 9044312 
/home/kvaneesh/a.out
10010000-10020000 r--p 00000000 fc:00 9044312 
/home/kvaneesh/a.out
10020000-10030000 rw-p 00010000 fc:00 9044312 
/home/kvaneesh/a.out
30000000-33000000 rw-p 00000000 00:0d 1062697 
/anon_hugepage (deleted)
33000000-35000000 rw-p 03000000 00:0d 1062698 
/anon_hugepage (deleted)
35000000-37000000 rw-p 05000000 00:0d 1062699 
/anon_hugepage (deleted)
7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 
[vdso]
7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffffffd0000-800000000000 rw-p 00000000 00:00 0 
[stack]
<span class="quote">

&gt; </span>
<span class="quote">&gt; Before doing anything specific to the PPC32/8xx, I&#39;d like to be sure the </span>
<span class="quote">&gt; issue is definitly only on PPC32.</span>
<span class="quote">&gt; </span>

I am not sure I understand the problem correctly. If there is a free 
space in the required range, both topdown/bottomup search should be able 
to find it. Unless topdown found another free area suitable for hugetlb 
allocation above. My take is we should not change the topdown to 
bottomup without really understanding the failure scenarios.

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 24, 2018, 9:39 a.m.</div>
<pre class="content">
Le 24/01/2018 à 10:35, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 01/24/2018 02:57 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Le 24/01/2018 à 10:15, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 01/24/2018 02:32 PM, Christophe Leroy wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt;&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt;&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt;&gt;&gt;&gt; pages below the initial one because no space is available on top of it.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; This patch fixes it by requesting bottomup mapping as the non</span>
<span class="quote">&gt;&gt;&gt;&gt; generic hugetlb_get_unmapped_area() does</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;   v3: Was a standalone patch before, but conflicts with this serie.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 2 +-</span>
<span class="quote">&gt;&gt;&gt;&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c </span>
<span class="quote">&gt;&gt;&gt;&gt; b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 79e1378ee303..368ea6b248ad 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -558,7 +558,7 @@ unsigned long hugetlb_get_unmapped_area(struct </span>
<span class="quote">&gt;&gt;&gt;&gt; file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;&gt;&gt;           return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;&gt;&gt;                                  pgoff, flags);</span>
<span class="quote">&gt;&gt;&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;&gt;&gt; -    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;&gt;&gt;&gt; +    return slice_get_unmapped_area(addr, len, flags, mmu_psize, 0);</span>
<span class="quote">&gt;&gt;&gt;&gt;   }</span>
<span class="quote">&gt;&gt;&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Why make this change also for PPC64? Can you do this #ifdef 8xx?.You </span>
<span class="quote">&gt;&gt;&gt; can ideally move hugetlb_get_unmapped_area to slice.h and then make </span>
<span class="quote">&gt;&gt;&gt; this much simpler for 8xxx?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I </span>
<span class="quote">&gt;&gt; suggested in my last email on this subject (22/01/2018 9:22) ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; yes. The test ran fine for me</span>

You tried with 0x30000000, it works as well on PPC32.

I&#39;d really like you to try with 0x11000000 which is in the same slice as 
the 10020000-10030000 range.

Christophe
<span class="quote">
&gt; </span>
<span class="quote">&gt; kvaneesh@ltctulc6a-p1:[~]$  HUGETLB_MORECORE=yes </span>
<span class="quote">&gt; HUGETLB_MORECORE_HEAPBASE=0x30000000 ./a.out</span>
<span class="quote">&gt; 10000000-10010000 r-xp 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 10010000-10020000 r--p 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 10020000-10030000 rw-p 00010000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 30000000-33000000 rw-p 00000000 00:0d 1062697 /anon_hugepage (deleted)</span>
<span class="quote">&gt; 33000000-35000000 rw-p 03000000 00:0d 1062698 /anon_hugepage (deleted)</span>
<span class="quote">&gt; 35000000-37000000 rw-p 05000000 00:0d 1062699 /anon_hugepage (deleted)</span>
<span class="quote">&gt; 7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 [vdso]</span>
<span class="quote">&gt; 7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffffffd0000-800000000000 rw-p 00000000 00:00 0 [stack]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Before doing anything specific to the PPC32/8xx, I&#39;d like to be sure </span>
<span class="quote">&gt;&gt; the issue is definitly only on PPC32.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not sure I understand the problem correctly. If there is a free </span>
<span class="quote">&gt; space in the required range, both topdown/bottomup search should be able </span>
<span class="quote">&gt; to find it. Unless topdown found another free area suitable for hugetlb </span>
<span class="quote">&gt; allocation above. My take is we should not change the topdown to </span>
<span class="quote">&gt; bottomup without really understanding the failure scenarios.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -aneesh</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 24, 2018, 9:51 a.m.</div>
<pre class="content">
On 01/24/2018 03:09 PM, Christophe LEROY wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Le 24/01/2018 à 10:35, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">
&gt;&gt;&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I </span>
<span class="quote">&gt;&gt;&gt; suggested in my last email on this subject (22/01/2018 9:22) ?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; yes. The test ran fine for me</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You tried with 0x30000000, it works as well on PPC32.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;d really like you to try with 0x11000000 which is in the same slice as </span>
<span class="quote">&gt; the 10020000-10030000 range.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>

Now that explains is better. But then the requested HEAPBASE was not 
free and hence topdown search got an address in the below range.

7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 
/anon_hugepage (deleted)


The new range allocated is such that there is no scope for expansion of 
heap if we do a topdown search. But why should that require us to change 
from topdown/bottomup search?


10000000-10010000 r-xp 00000000 fc:00 9044312 
/home/kvaneesh/a.out
10010000-10020000 r--p 00000000 fc:00 9044312 
/home/kvaneesh/a.out
10020000-10030000 rw-p 00010000 fc:00 9044312 
/home/kvaneesh/a.out
7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 
/anon_hugepage (deleted)
7ffff2d40000-7ffff7d60000 rw-p 00000000 00:00 0
7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 
/lib/powerpc64le-linux-gnu/libc-2.23.so
7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 
/usr/lib/libhugetlbfs.so.0
7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 
[vdso]
7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 
/lib/powerpc64le-linux-gnu/ld-2.23.so
7ffffffd0000-800000000000 rw-p 00000000 00:00 0 
[stack]


For the specific test, one should pass the HEAPBASE value such that it 
can be expanded if required isn&#39;t it ?

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 24, 2018, 10:03 a.m.</div>
<pre class="content">
Le 24/01/2018 à 10:51, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 01/24/2018 03:09 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Le 24/01/2018 à 10:35, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I </span>
<span class="quote">&gt;&gt;&gt;&gt; suggested in my last email on this subject (22/01/2018 9:22) ?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; yes. The test ran fine for me</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You tried with 0x30000000, it works as well on PPC32.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;d really like you to try with 0x11000000 which is in the same slice </span>
<span class="quote">&gt;&gt; as the 10020000-10030000 range.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Now that explains is better. But then the requested HEAPBASE was not </span>
<span class="quote">&gt; free and hence topdown search got an address in the below range.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt; (deleted)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The new range allocated is such that there is no scope for expansion of </span>
<span class="quote">&gt; heap if we do a topdown search. But why should that require us to change </span>
<span class="quote">&gt; from topdown/bottomup search?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 10000000-10010000 r-xp 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 10010000-10020000 r--p 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 10020000-10030000 rw-p 00010000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt; (deleted)</span>
<span class="quote">&gt; 7ffff2d40000-7ffff7d60000 rw-p 00000000 00:00 0</span>
<span class="quote">&gt; 7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt; 7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 </span>
<span class="quote">&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt; 7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 [vdso]</span>
<span class="quote">&gt; 7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 </span>
<span class="quote">&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt; 7ffffffd0000-800000000000 rw-p 00000000 00:00 0 [stack]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For the specific test, one should pass the HEAPBASE value such that it </span>
<span class="quote">&gt; can be expanded if required isn&#39;t it ?</span>

For the test, yes, it is dumb to pass an unusable HEAPBASE, but what 
happens in real life:
* PPC32: No HEAPBASE, hugetlbfs defines a HEAPBASE at sbrk(0) + 
PAGE_SIZE = 0x10800000 ==&gt; This is in the same slice as already 
allocated ==&gt; the kernel does as if mmap() had been called with no hint 
address and allocates something unusable instead.
* PPC64: No HEAPBASE, hugetlbfs seems to define a HEAPBASE at 
100000000000, which doesn&#39;t conflict with an already allocated mapping 
==&gt; it works.

Now, when we take the generic case, ie when slice is not activated, when 
you call mmap() without a hint address, it allocates a suitable address 
because it does bottom-up. Why do differently with slices ?

Christophe
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 24, 2018, 10:08 a.m.</div>
<pre class="content">
On 01/24/2018 03:33 PM, Christophe LEROY wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Le 24/01/2018 à 10:51, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 01/24/2018 03:09 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Le 24/01/2018 à 10:35, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as I </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; suggested in my last email on this subject (22/01/2018 9:22) ?</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; yes. The test ran fine for me</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; You tried with 0x30000000, it works as well on PPC32.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I&#39;d really like you to try with 0x11000000 which is in the same slice </span>
<span class="quote">&gt;&gt;&gt; as the 10020000-10030000 range.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Now that explains is better. But then the requested HEAPBASE was not </span>
<span class="quote">&gt;&gt; free and hence topdown search got an address in the below range.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt;&gt; (deleted)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The new range allocated is such that there is no scope for expansion </span>
<span class="quote">&gt;&gt; of heap if we do a topdown search. But why should that require us to </span>
<span class="quote">&gt;&gt; change from topdown/bottomup search?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; 10000000-10010000 r-xp 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt; 10010000-10020000 r--p 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt; 10020000-10030000 rw-p 00010000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt;&gt; (deleted)</span>
<span class="quote">&gt;&gt; 7ffff2d40000-7ffff7d60000 rw-p 00000000 00:00 0</span>
<span class="quote">&gt;&gt; 7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt; 7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt; 7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt; 7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 </span>
<span class="quote">&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt; 7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 </span>
<span class="quote">&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt; 7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 </span>
<span class="quote">&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt; 7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 [vdso]</span>
<span class="quote">&gt;&gt; 7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt; 7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt; 7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 </span>
<span class="quote">&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt; 7ffffffd0000-800000000000 rw-p 00000000 00:00 0 [stack]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; For the specific test, one should pass the HEAPBASE value such that it </span>
<span class="quote">&gt;&gt; can be expanded if required isn&#39;t it ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For the test, yes, it is dumb to pass an unusable HEAPBASE, but what </span>
<span class="quote">&gt; happens in real life:</span>
<span class="quote">&gt; * PPC32: No HEAPBASE, hugetlbfs defines a HEAPBASE at sbrk(0) + </span>
<span class="quote">&gt; PAGE_SIZE = 0x10800000 ==&gt; This is in the same slice as already </span>
<span class="quote">&gt; allocated ==&gt; the kernel does as if mmap() had been called with no hint </span>
<span class="quote">&gt; address and allocates something unusable instead.</span>
<span class="quote">&gt; * PPC64: No HEAPBASE, hugetlbfs seems to define a HEAPBASE at </span>
<span class="quote">&gt; 100000000000, which doesn&#39;t conflict with an already allocated mapping </span>
<span class="quote">&gt; ==&gt; it works.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Now, when we take the generic case, ie when slice is not activated, when </span>
<span class="quote">&gt; you call mmap() without a hint address, it allocates a suitable address </span>
<span class="quote">&gt; because it does bottom-up. Why do differently with slices ?</span>
<span class="quote">&gt; </span>

IIUC that is largely arch dependent, PPC64 always did topdown search. 
Even for regular non hugetlb mmap it did topdown search. If you set 
legacy mmap we selected bottom up approach. You can check 
arch_pick_mmap_layout() for more details. Now x86 is slightly different.
For the default search if we can&#39;t find a mapping address it will try a 
bottomup search. Having said that if you think libhugetlbfs made 
assumptions with respect to 8xx and you don&#39;t want to break it make
8xx unmapped area search bottomup.

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 24, 2018, 10:19 a.m.</div>
<pre class="content">
Le 24/01/2018 à 11:08, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 01/24/2018 03:33 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Le 24/01/2018 à 10:51, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 01/24/2018 03:09 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Le 24/01/2018 à 10:35, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Did you try with HUGETLB_MORECORE_HEAPBASE=0x11000000 on PPC64 as </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I suggested in my last email on this subject (22/01/2018 9:22) ?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; yes. The test ran fine for me</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; You tried with 0x30000000, it works as well on PPC32.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I&#39;d really like you to try with 0x11000000 which is in the same </span>
<span class="quote">&gt;&gt;&gt;&gt; slice as the 10020000-10030000 range.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Now that explains is better. But then the requested HEAPBASE was not </span>
<span class="quote">&gt;&gt;&gt; free and hence topdown search got an address in the below range.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt;&gt;&gt; (deleted)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The new range allocated is such that there is no scope for expansion </span>
<span class="quote">&gt;&gt;&gt; of heap if we do a topdown search. But why should that require us to </span>
<span class="quote">&gt;&gt;&gt; change from topdown/bottomup search?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; 10000000-10010000 r-xp 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt;&gt; 10010000-10020000 r--p 00000000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt;&gt; 10020000-10030000 rw-p 00010000 fc:00 9044312 /home/kvaneesh/a.out</span>
<span class="quote">&gt;&gt;&gt; 7efffd000000-7f0000000000 rw-p 00000000 00:0d 1082770 /anon_hugepage </span>
<span class="quote">&gt;&gt;&gt; (deleted)</span>
<span class="quote">&gt;&gt;&gt; 7ffff2d40000-7ffff7d60000 rw-p 00000000 00:00 0</span>
<span class="quote">&gt;&gt;&gt; 7ffff7d60000-7ffff7f10000 r-xp 00000000 fc:00 9250090 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f10000-7ffff7f20000 r--p 001a0000 fc:00 9250090 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f20000-7ffff7f30000 rw-p 001b0000 fc:00 9250090 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/libc-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f40000-7ffff7f60000 r-xp 00000000 fc:00 10754812 </span>
<span class="quote">&gt;&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f60000-7ffff7f70000 r--p 00010000 fc:00 10754812 </span>
<span class="quote">&gt;&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f70000-7ffff7f80000 rw-p 00020000 fc:00 10754812 </span>
<span class="quote">&gt;&gt;&gt; /usr/lib/libhugetlbfs.so.0</span>
<span class="quote">&gt;&gt;&gt; 7ffff7f80000-7ffff7fa0000 r-xp 00000000 00:00 0 [vdso]</span>
<span class="quote">&gt;&gt;&gt; 7ffff7fa0000-7ffff7fe0000 r-xp 00000000 fc:00 9250107 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffff7fe0000-7ffff7ff0000 r--p 00030000 fc:00 9250107 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffff7ff0000-7ffff8000000 rw-p 00040000 fc:00 9250107 </span>
<span class="quote">&gt;&gt;&gt; /lib/powerpc64le-linux-gnu/ld-2.23.so</span>
<span class="quote">&gt;&gt;&gt; 7ffffffd0000-800000000000 rw-p 00000000 00:00 0 [stack]</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; For the specific test, one should pass the HEAPBASE value such that </span>
<span class="quote">&gt;&gt;&gt; it can be expanded if required isn&#39;t it ?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; For the test, yes, it is dumb to pass an unusable HEAPBASE, but what </span>
<span class="quote">&gt;&gt; happens in real life:</span>
<span class="quote">&gt;&gt; * PPC32: No HEAPBASE, hugetlbfs defines a HEAPBASE at sbrk(0) + </span>
<span class="quote">&gt;&gt; PAGE_SIZE = 0x10800000 ==&gt; This is in the same slice as already </span>
<span class="quote">&gt;&gt; allocated ==&gt; the kernel does as if mmap() had been called with no </span>
<span class="quote">&gt;&gt; hint address and allocates something unusable instead.</span>
<span class="quote">&gt;&gt; * PPC64: No HEAPBASE, hugetlbfs seems to define a HEAPBASE at </span>
<span class="quote">&gt;&gt; 100000000000, which doesn&#39;t conflict with an already allocated mapping </span>
<span class="quote">&gt;&gt; ==&gt; it works.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Now, when we take the generic case, ie when slice is not activated, </span>
<span class="quote">&gt;&gt; when you call mmap() without a hint address, it allocates a suitable </span>
<span class="quote">&gt;&gt; address because it does bottom-up. Why do differently with slices ?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; IIUC that is largely arch dependent, PPC64 always did topdown search. </span>
<span class="quote">&gt; Even for regular non hugetlb mmap it did topdown search. If you set </span>
<span class="quote">&gt; legacy mmap we selected bottom up approach. You can check </span>
<span class="quote">&gt; arch_pick_mmap_layout() for more details. Now x86 is slightly different.</span>
<span class="quote">&gt; For the default search if we can&#39;t find a mapping address it will try a </span>
<span class="quote">&gt; bottomup search. Having said that if you think libhugetlbfs made </span>
<span class="quote">&gt; assumptions with respect to 8xx and you don&#39;t want to break it make</span>
<span class="quote">&gt; 8xx unmapped area search bottomup.</span>
<span class="quote">&gt; </span>

Or would there be a way to make libhugetlbfs aware of the slices 
constraints and make it choose a suitable hint address at first try ?

Christophe
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">index 79e1378ee303..368ea6b248ad 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -558,7 +558,7 @@</span> <span class="p_context"> unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 		return radix__hugetlb_get_unmapped_area(file, addr, len,
 						       pgoff, flags);
 #endif
<span class="p_del">-	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="p_add">+	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 0);</span>
 }
 #endif
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



