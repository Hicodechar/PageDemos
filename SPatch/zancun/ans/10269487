
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] hugetlbfs: check for pgoff value overflow - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] hugetlbfs: check for pgoff value overflow</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=41">Andrew Morton</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2018, 1:05 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180308170511.c16fc731523ff49f1981f89d@linux-foundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10269487/mbox/"
   >mbox</a>
|
   <a href="/patch/10269487/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10269487/">/patch/10269487/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	943746016D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 01:05:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 87C3329C30
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 01:05:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7C70F29C34; Fri,  9 Mar 2018 01:05:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 29A2729C30
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Mar 2018 01:05:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751980AbeCIBFR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Mar 2018 20:05:17 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:47160 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751373AbeCIBFO (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Mar 2018 20:05:14 -0500
Received: from localhost.localdomain (c-24-4-125-7.hsd1.ca.comcast.net
	[24.4.125.7])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 11E46E75;
	Fri,  9 Mar 2018 01:05:13 +0000 (UTC)
Date: Thu, 8 Mar 2018 17:05:11 -0800
From: Andrew Morton &lt;akpm@linux-foundation.org&gt;
To: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	bugzilla-daemon@bugzilla.kernel.org, Michal Hocko &lt;mhocko@kernel.org&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Nic Losby &lt;blurbdust@gmail.com&gt;,
	Yisheng Xie &lt;xieyisheng1@huawei.com&gt;, stable@vger.kernel.org
Subject: Re: [PATCH v3] hugetlbfs: check for pgoff value overflow
Message-Id: &lt;20180308170511.c16fc731523ff49f1981f89d@linux-foundation.org&gt;
In-Reply-To: &lt;20180309002726.7248-1-mike.kravetz@oracle.com&gt;
References: &lt;20180306133135.4dc344e478d98f0e29f47698@linux-foundation.org&gt;
	&lt;20180309002726.7248-1-mike.kravetz@oracle.com&gt;
X-Mailer: Sylpheed 3.5.1 (GTK+ 2.24.31; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - March 9, 2018, 1:05 a.m.</div>
<pre class="content">
On Thu,  8 Mar 2018 16:27:26 -0800 Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">
&gt; A vma with vm_pgoff large enough to overflow a loff_t type when</span>
<span class="quote">&gt; converted to a byte offset can be passed via the remap_file_pages</span>
<span class="quote">&gt; system call.  The hugetlbfs mmap routine uses the byte offset to</span>
<span class="quote">&gt; calculate reservations and file size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A sequence such as:</span>
<span class="quote">&gt;   mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);</span>
<span class="quote">&gt;   remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);</span>
<span class="quote">&gt; will result in the following when task exits/file closed,</span>
<span class="quote">&gt;   kernel BUG at mm/hugetlb.c:749!</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;   hugetlbfs_evict_inode+0x2f/0x40</span>
<span class="quote">&gt;   evict+0xcb/0x190</span>
<span class="quote">&gt;   __dentry_kill+0xcb/0x150</span>
<span class="quote">&gt;   __fput+0x164/0x1e0</span>
<span class="quote">&gt;   task_work_run+0x84/0xa0</span>
<span class="quote">&gt;   exit_to_usermode_loop+0x7d/0x80</span>
<span class="quote">&gt;   do_syscall_64+0x18b/0x190</span>
<span class="quote">&gt;   entry_SYSCALL_64_after_hwframe+0x3d/0xa2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The overflowed pgoff value causes hugetlbfs to try to set up a</span>
<span class="quote">&gt; mapping with a negative range (end &lt; start) that leaves invalid</span>
<span class="quote">&gt; state which causes the BUG.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The previous overflow fix to this code was incomplete and did not</span>
<span class="quote">&gt; take the remap_file_pages system call into account.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -4374,6 +4374,12 @@ int hugetlb_reserve_pages(struct inode *inode,</span>
<span class="quote">&gt;  	struct resv_map *resv_map;</span>
<span class="quote">&gt;  	long gbl_reserve;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/* This should never happen */</span>
<span class="quote">&gt; +	if (from &gt; to) {</span>
<span class="quote">&gt; +		VM_WARN(1, &quot;%s called with a negative range\n&quot;, __func__);</span>
<span class="quote">&gt; +		return -EINVAL;</span>
<span class="quote">&gt; +	}</span>

This is tidier, and that comment is a bit too obvious to live ;)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/mm/hugetlb.c~hugetlbfs-check-for-pgoff-value-overflow-v3-fix</span>
<span class="p_header">+++ a/mm/hugetlb.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/bootmem.h&gt;
 #include &lt;linux/sysfs.h&gt;
 #include &lt;linux/slab.h&gt;
<span class="p_add">+#include &lt;linux/mmdebug.h&gt;</span>
 #include &lt;linux/sched/signal.h&gt;
 #include &lt;linux/rmap.h&gt;
 #include &lt;linux/string_helpers.h&gt;
<span class="p_chunk">@@ -4374,11 +4375,8 @@</span> <span class="p_context"> int hugetlb_reserve_pages(struct inode *</span>
 	struct resv_map *resv_map;
 	long gbl_reserve;
 
<span class="p_del">-	/* This should never happen */</span>
<span class="p_del">-	if (from &gt; to) {</span>
<span class="p_del">-		VM_WARN(1, &quot;%s called with a negative range\n&quot;, __func__);</span>
<span class="p_add">+	if (VM_WARN(from &gt; to, &quot;%s called with a negative range\n&quot;, __func__))</span>
 		return -EINVAL;
<span class="p_del">-	}</span>
 
 	/*
 	 * Only apply hugepage reservation if asked. At fault time, an

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



