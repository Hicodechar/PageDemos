
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v6,11/17] x86/mm: Add DMA support for SEV memory encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v6,11/17] x86/mm: Add DMA support for SEV memory encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 16, 2017, 3:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171016153423.2980-12-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10009009/mbox/"
   >mbox</a>
|
   <a href="/patch/10009009/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10009009/">/patch/10009009/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1923A601E7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 15:38:09 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0A4EC28613
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 15:38:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F19F928615; Mon, 16 Oct 2017 15:38:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3970028613
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 15:38:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754471AbdJPPhf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Oct 2017 11:37:35 -0400
Received: from mail-cys01nam02on0052.outbound.protection.outlook.com
	([104.47.37.52]:10176
	&quot;EHLO NAM02-CY1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1754197AbdJPPfH (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Oct 2017 11:35:07 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=BoIAr51eJ1CuoQrZrO0fRQHo9FYihryjGlJWj1szr8g=;
	b=p0ZHsvXz+AhM5n/a2lctxuRhsO4TwNk7sqs2KHUEvb7J3Uedakl+J2NAoLpruoXLhvzd4TdREzbHrWqkdCDb5UeoaOzSVIbUNtldgUvYtHPCcPA3XOTNLRlmEmakC8iArTYjcvwEoFUFa8XEM/KhyVWryV6HF7S3CeXqXVy9/Fo=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Mon, 16 Oct 2017 15:34:55 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: x86@kernel.org
Cc: bp@alien8.de, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	linux-kernel@vger.kernel.org, Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v6 11/17] x86/mm: Add DMA support for SEV memory
	encryption
Date: Mon, 16 Oct 2017 10:34:17 -0500
Message-Id: &lt;20171016153423.2980-12-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20171016153423.2980-1-brijesh.singh@amd.com&gt;
References: &lt;20171016153423.2980-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: BN6PR16CA0015.namprd16.prod.outlook.com (10.172.212.153)
	To SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 990a31fd-04fc-479a-a4ff-08d514ab7463
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:SN1PR12MB0158; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	3:zy3v+W2xJcftEd+B3f6D7Fze9xM02VNKnlls/o2mN6NWdh0wSve0UwK+JaGIco0XwzkIg+6VSKOhHrL8rDc8h3tNBXCVUlIY1XoxYZmH9XQmOSq9HeukYP+imjo6JTWhQ7xthNuGzpw3Lnh5pRQ0tG4/FDV4p/GmyRcgKtjbfFVMFpeWUXA43Uw1h6VqDGR7HWBIW7Rm0JF1byFQidFHpBbWohEZWnyq9fSnwKqyeCq/2O7k3CeejuhyHdxg6lSK;
	25:VMdFGVeKa9+xv8InIfhAWRN955g2IFTvlXz/84NFvCJRyn9ZCd0nFkgTz5AZ4OtWVSmvTzEuqDTLogsBOIQUp+Jz6MxdQL4gON7dJVl63EUpHFKkQPWr6UCnmTY94GlIVFT258mqsd40uWAHxmG/WB3D+UOOGT1q1w1bCxhNmuIrMm6heFMC5N03/phejPtKNWECwgNF8FygnSiez8UtdNM0LoxinQpICsi/4mZjojPBKStTNs7hK+K6ORivJBOf0vrs5gTGDcN7qj41CZqYMUR4tqmw25cXKwQVvfPwdp6QFtZZM99C1Q1ByK+5/n8NKURWYkVXJtOFNKMy91oFDQ==;
	31:24M+GGn7weupm/014gX/MuiKQWEz7c1hloROSJ7v5DfsuEJgHEpA3oMcT5+nqqQpfPKZgXfXrkrkLO1hkb3FZnv3N1F5tNOEMVC7kMrUsKu0+zNCXyEYZjfjiiNTO6EgZ6LFktea3uFoKu0AFwz7C7iiC0qiHZSozYpuhl4vjH6nKaQK2xPOMBUrSldfNno+ojnebdvb/YdDA2lutb27mx+3Oz9kTrgMLdWcG5Ar9vg=
X-MS-TrafficTypeDiagnostic: SN1PR12MB0158:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:qkHS8fNINjDWQok6dZEpw1qo7dyEs+vSEyjfunB7iz5aW/Jke3xJuX959sPGAFTkupWt4ooaGyhnNh6wbetBIcZXvXdWNiKjfhHHF+z5HGjxo6+q3Fb8fmVSVinQ/lvInIqNg6ZQmED5+cpD7ogFKY8MVi3zOqs3n+wZPn/SFBfHJx31hwfA4rAc6Sv6CqIAou3D4QcWIOiD2stJ66vHgLqwajhw7+xke8bboa0hPXV9WQ9huj8raJna+fZItixR5H5qApG9ETj15YW4tgUWAr+4ciMaHF6YVCabFeC5QKJEMNDCYH/eN4snr8iHW8Larsg5zX2LiHw0zd/Q66fWFB3hWC5764378N5nz+IBSr29LqbwETJM3fOexh08wLAUiW2oIjZOzOEKpu8i6BXAHhSVuZB7Zjg4LMJZFKSmct1QYipyh1kuVnulaNiwXIGJ9OSirsFHpVqiX1hCK6mY9pXff1oky6DH3I2LL/ZpHsEUyYjLQgOGJUqQjRjdAUp4;
	4:5ouWJcmrYcyvrlLCEjwyrv3QCDuOtEPSqq6q18ZwArlOO1LNffIL6A/xGt+W6IVXvRjYwa4JODKUXimWCaP2gZ5vnGkqna46Px5YTTWnzTU4h8q8nYFTrxKSLdHBvkDXLSqfxR5iZbbjJZ0Tlq8jlPX63cfHXKLZXWzuGA3Y7ZPIUzLmDsrIcUcEjL8TP9lV04rhdR/Z7duiufEcVZr8Va7j2dngG5L0SaW2Hhi32RTzkiATRAORMLJln97thuHpWz2k/vo802gCDXHGeWa++6BCogVneMlaB7qmQaTkgwc6JKvFTzsGpdgjOjybFImH4Ix6a528+oCEhkLfDMKfcwSTjFN10W54EuD/hzffcSw=
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110)(146099531331640); 
X-Microsoft-Antispam-PRVS: &lt;SN1PR12MB01583A9190D0B6337C3D9E09E54F0@SN1PR12MB0158.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(93006095)(93001095)(100000703101)(100105400095)(3002001)(10201501046)(6055026)(6041248)(20161123562025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123555025)(20161123564025)(20161123560025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR12MB0158; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR12MB0158; 
X-Forefront-PRVS: 0462918D61
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(376002)(39860400002)(199003)(189002)(54906003)(1076002)(316002)(5660300001)(16586007)(68736007)(2906002)(4326008)(16526018)(7736002)(47776003)(305945005)(6666003)(53936002)(575784001)(86362001)(33646002)(2950100002)(6916009)(66066001)(189998001)(97736004)(76176999)(106356001)(101416001)(8676002)(53416004)(105586002)(36756003)(3846002)(6486002)(6116002)(8936002)(50226002)(81166006)(81156014)(25786009)(48376002)(478600001)(50986999)(2351001)(5003940100001)(2361001)(50466002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR12MB0158;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR12MB0158;
	23:qdZlcFBfWCLIrFf/O7I4VfzahCDr2pKTKaTyNy9VE?=
	=?us-ascii?Q?0ZXHbY/zJ0Tn7YI8bKLFeJvX0K7JdhX6W0TYdBK/RjzNOCV+iUEvOOvgzdYO?=
	=?us-ascii?Q?zrv909zJcU1XEMTR3OU2dMtKNwRGh7s/valcKwHWhlNEuce8Y/QLOA/asYvz?=
	=?us-ascii?Q?lwXfH0duseIyXfZaXSvoRVs/mve4UeRwolVId7bHIB5mYWZXid7jfaHeIxfM?=
	=?us-ascii?Q?ZJU8P3i9OGPDIrAkulahFD3XZ7vMzWGlYcNpFEQxvuRwPY2N5UUqKwzzuvXU?=
	=?us-ascii?Q?2e7AxqdMi7wDtm+W9qbBqgav5h9crbkOP0eSn23S55lG/A7Hg8yGQcPLuzIY?=
	=?us-ascii?Q?QVp09oOXQN2Ji6c9z42uJUxzr9U/bb0mRnyRyQCjGDqKTkEGMxQXEsQkAJDv?=
	=?us-ascii?Q?Bj5IaE1vxvNx371bm0u7wMrakkqyk+POT3XdQkRHNWMJ6WpRfqIMYbnaBNMa?=
	=?us-ascii?Q?ijI1EIO/Mk3WyQy+4k6UylDNRUCreEL2phPSFXWxysY7hdFrzD4PashVg48w?=
	=?us-ascii?Q?boEe/xfjEmym/2QbqsJlS7iVLITkqNY4Fjb+6nfwbwAKkXF5jKjI4i9N7i6s?=
	=?us-ascii?Q?PiADV/KyZuPOJLAKDnloEqONvlJslO4UFh6U/x5URE4oJlWR9d8vyAb6x5Nt?=
	=?us-ascii?Q?Owb2PrfgpjuP65B1q4mvWxXby67w+3s4LcXXv76/qxcNHt6a8WN+rnjzav8A?=
	=?us-ascii?Q?yeYOHMQjQ8SrsS2TsOqirs+UNmM3NuZTqWcklB3lb16b2wU+HDX3yQ8qT+2F?=
	=?us-ascii?Q?U2TWXzZ3Ppswr1HMDRSb5y9quTI3vd2m3lvX6vRSGQAGFsrtXe2TzpqlChJH?=
	=?us-ascii?Q?ufQ9hHpLs8TlWy7CdYidGvNzGpK8ivBHKA4syqhUZxTIWQ87et8SnmzQM+Tx?=
	=?us-ascii?Q?B8/IWQmqUyxKjTSVgCRf9TTlqA4fbTI5a27Z1ABonqTyeDjuTK0s+2g/4BnB?=
	=?us-ascii?Q?8jLzjt2zdI4pOxYCXRxYlxqtB4Vpr6dA7LzyR/eQfnh8Hy1+S1/7hA4r+MTk?=
	=?us-ascii?Q?rEl8lygjCzLMXEUX96D8nxbcVFKotFYKz8+yagzOP0KSK/lnoltf+F0+N23G?=
	=?us-ascii?Q?3f6nKMV8hcQWVevL2JVXF3C0773OjHyJhbHKSHyhF3dS5YR0lQyBNttzdH/s?=
	=?us-ascii?Q?hXoaRpi5GDM5E5JF3hSqJXiYuZVvqFAAW9UtxDtUyi93kFWHnq7bEUGVqbXq?=
	=?us-ascii?Q?PwkIHEQJt/LTNY=3D?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	6:HJwig4yPVEFzs9kRVKJp7lzGtkFb0Eid2QJpUJLYrIl+Cjo500enTMMYZVrXFrHaXayi2Jdq0HR5z6zDjMpAJBRcmc4n8aJ+Kc3SiHsvsbQRI/Pan4J7cXVJOOzS6W249Q+x234CPDeJeAVWxglyVBtcOX3cM5jDVJKIYW4YDE7dWJBO64ciZWVOYMk7YQllEQWGN9XytkR4uFGGpBQRAsW1wn/efMWvLC3uH8QtpEig8E6XaGj8sWHiOQOtUsInzJMVk1T1H+sqFMyb03B0Iw5pqHIc6xTU/4Fm+2/Bgx+TsIDvicTbYBNtKmf6stfgDeTrALC7qp2/mjnKRzbk9w==;
	5:C9VAPev/FpjcNcVmVBSX5qYEL194ks04J8USz+rrOpurXMbzGe4U5tePMz3r5qr55EZz/07Nzm93zIvX87JOWP6oSGCDYWqm4l3PLpI27bw9rTzZkyXOYIEAyBEaiq8YE8cvLWjIOqSqj29jKwBeMg==;
	24:qFI8NNBUl2wPPXfwVpEiRfMe+tOhjgm1/81jXu6J6Xh65b7Nz+HYFKrsF02gOWPQWzaI7IYuMs4JsNncRQPeqddFxW7Fv1h8YHzj/47RvwU=;
	7:+pFqB81utM85ZASjKTg2K5rPD/WOyNfi+atn59IQCweDK3aXCwQvD1KfIhH79m25/vS6Hi+6H4Czx7drzy3IIWv0J1/qEQ2yFGpJV5hDG++n2C3Wtgezgqh4Lhg2wM98mmF3g6wVuElF5LEdEOz/dUjxj1+EO8281A9bkzJ9OvNFiEc1i1ZoOCvaFdBEEwIxB8kvGGYKrZmE3Y9x7AdUbzJGG2IsFXKnE14/kiu6O0g=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:l0LKRNSptn0EPL6aA4z+gLiJ24RZzug4uqCQaYIxW/+pszpH/xpYoVgP7Hv20GZKEfFe3uc0B4Y3iAYznDGt/8NRTlDCJVwqrKePqN5AtsM9XegG6bMv0ULYJ4vyJIemxlIfzKeVFc3PuVj1jz/Yt8HLdyhX5+hgURZBl0u9RCJpEFPS4XR1DDKaaJFok/QLVbIpJ6FpLRAiyl7r71s/L+empsHSEUYqrJs9iFxBoBMSJYL21eQFNrKGl8O4y1T6
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Oct 2017 15:34:55.9006
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR12MB0158
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Oct. 16, 2017, 3:34 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

DMA access to encrypted memory cannot be performed when SEV is active.
In order for DMA to properly work when SEV is active, the SWIOTLB bounce
buffers must be used.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: x86@kernel.org
Cc: linux-kernel@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
---
 arch/x86/mm/mem_encrypt.c | 86 +++++++++++++++++++++++++++++++++++++++++++++++
 lib/swiotlb.c             |  5 +--
 2 files changed, 89 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index af7f733f6f31..7dadc88c0dc6 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -192,6 +192,70 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 	/* Update the protection map with memory encryption mask */
 	for (i = 0; i &lt; ARRAY_SIZE(protection_map); i++)
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
<span class="p_add">+</span>
<span class="p_add">+	if (sev_active())</span>
<span class="p_add">+		swiotlb_force = SWIOTLB_FORCE;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void *sev_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
<span class="p_add">+		       gfp_t gfp, unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long dma_mask;</span>
<span class="p_add">+	unsigned int order;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	void *vaddr = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	dma_mask = dma_alloc_coherent_mask(dev, gfp);</span>
<span class="p_add">+	order = get_order(size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Memory will be memset to zero after marking decrypted, so don&#39;t</span>
<span class="p_add">+	 * bother clearing it before.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	gfp &amp;= ~__GFP_ZERO;</span>
<span class="p_add">+</span>
<span class="p_add">+	page = alloc_pages_node(dev_to_node(dev), gfp, order);</span>
<span class="p_add">+	if (page) {</span>
<span class="p_add">+		dma_addr_t addr;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Since we will be clearing the encryption bit, check the</span>
<span class="p_add">+		 * mask with it already cleared.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		addr = __sme_clr(phys_to_dma(dev, page_to_phys(page)));</span>
<span class="p_add">+		if ((addr + size) &gt; dma_mask) {</span>
<span class="p_add">+			__free_pages(page, get_order(size));</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			vaddr = page_address(page);</span>
<span class="p_add">+			*dma_handle = addr;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!vaddr)</span>
<span class="p_add">+		vaddr = swiotlb_alloc_coherent(dev, size, dma_handle, gfp);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!vaddr)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Clear the SME encryption bit for DMA use if not swiotlb area */</span>
<span class="p_add">+	if (!is_swiotlb_buffer(dma_to_phys(dev, *dma_handle))) {</span>
<span class="p_add">+		set_memory_decrypted((unsigned long)vaddr, 1 &lt;&lt; order);</span>
<span class="p_add">+		memset(vaddr, 0, PAGE_SIZE &lt;&lt; order);</span>
<span class="p_add">+		*dma_handle = __sme_clr(*dma_handle);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return vaddr;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void sev_free(struct device *dev, size_t size, void *vaddr,</span>
<span class="p_add">+		     dma_addr_t dma_handle, unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Set the SME encryption bit for re-use if not swiotlb area */</span>
<span class="p_add">+	if (!is_swiotlb_buffer(dma_to_phys(dev, dma_handle)))</span>
<span class="p_add">+		set_memory_encrypted((unsigned long)vaddr,</span>
<span class="p_add">+				     1 &lt;&lt; get_order(size));</span>
<span class="p_add">+</span>
<span class="p_add">+	swiotlb_free_coherent(dev, size, vaddr, dma_handle);</span>
 }
 
 /*
<span class="p_chunk">@@ -218,6 +282,20 @@</span> <span class="p_context"> bool sev_active(void)</span>
 }
 EXPORT_SYMBOL_GPL(sev_active);
 
<span class="p_add">+static const struct dma_map_ops sev_dma_ops = {</span>
<span class="p_add">+	.alloc                  = sev_alloc,</span>
<span class="p_add">+	.free                   = sev_free,</span>
<span class="p_add">+	.map_page               = swiotlb_map_page,</span>
<span class="p_add">+	.unmap_page             = swiotlb_unmap_page,</span>
<span class="p_add">+	.map_sg                 = swiotlb_map_sg_attrs,</span>
<span class="p_add">+	.unmap_sg               = swiotlb_unmap_sg_attrs,</span>
<span class="p_add">+	.sync_single_for_cpu    = swiotlb_sync_single_for_cpu,</span>
<span class="p_add">+	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="p_add">+	.sync_sg_for_cpu        = swiotlb_sync_sg_for_cpu,</span>
<span class="p_add">+	.sync_sg_for_device     = swiotlb_sync_sg_for_device,</span>
<span class="p_add">+	.mapping_error          = swiotlb_dma_mapping_error,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_chunk">@@ -227,6 +305,14 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */
 	swiotlb_update_mem_attributes();
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * With SEV, DMA operations cannot use encryption. New DMA ops</span>
<span class="p_add">+	 * are required in order to mark the DMA areas as decrypted or</span>
<span class="p_add">+	 * to use bounce buffers.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sev_active())</span>
<span class="p_add">+		dma_ops = &amp;sev_dma_ops;</span>
<span class="p_add">+</span>
 	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);
 }
 
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 8c6c83ef57a4..cea19aaf303c 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -507,8 +507,9 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 	if (no_iotlb_memory)
 		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);
 
<span class="p_del">-	if (sme_active())</span>
<span class="p_del">-		pr_warn_once(&quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>
<span class="p_add">+	if (mem_encrypt_active())</span>
<span class="p_add">+		pr_warn_once(&quot;%s is active and system is using DMA bounce buffers\n&quot;,</span>
<span class="p_add">+			     sme_active() ? &quot;SME&quot; : &quot;SEV&quot;);</span>
 
 	mask = dma_get_seg_boundary(hwdev);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



