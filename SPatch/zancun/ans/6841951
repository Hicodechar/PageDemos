
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,4/5] arm64: add KASAN support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,4/5] arm64: add KASAN support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=86891">Andrey Ryabinin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 22, 2015, 10:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437561037-31995-5-git-send-email-a.ryabinin@samsung.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6841951/mbox/"
   >mbox</a>
|
   <a href="/patch/6841951/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6841951/">/patch/6841951/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 9A7679F38B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jul 2015 10:31:54 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 19D982064D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jul 2015 10:31:53 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E6FF0206AA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jul 2015 10:31:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934117AbbGVKbd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 22 Jul 2015 06:31:33 -0400
Received: from mailout3.w1.samsung.com ([210.118.77.13]:8737 &quot;EHLO
	mailout3.w1.samsung.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933936AbbGVKa5 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 22 Jul 2015 06:30:57 -0400
Received: from eucpsbgm2.samsung.com (unknown [203.254.199.245])
	by mailout3.w1.samsung.com
	(Oracle Communications Messaging Server 7.0.5.31.0 64bit (built May 5
	2014)) with ESMTP id &lt;0NRV00KZHX7IEQ50@mailout3.w1.samsung.com&gt; for
	linux-kernel@vger.kernel.org; Wed, 22 Jul 2015 11:30:54 +0100 (BST)
X-AuditID: cbfec7f5-f794b6d000001495-41-55af70ded9ec
Received: from eusync4.samsung.com ( [203.254.199.214])
	by eucpsbgm2.samsung.com (EUCPMTA) with SMTP id 7B.F6.05269.ED07FA55;
	Wed, 22 Jul 2015 11:30:54 +0100 (BST)
Received: from localhost.localdomain ([106.109.129.143])
	by eusync4.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit (built May  5 2014))
	with ESMTPA id &lt;0NRV00ML7X769090@eusync4.samsung.com&gt;; Wed,
	22 Jul 2015 11:30:54 +0100 (BST)
From: Andrey Ryabinin &lt;a.ryabinin@samsung.com&gt;
To: Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, linux-arm-kernel@lists.infradead.org
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	David Keitel &lt;dkeitel@codeaurora.org&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, linux-mm@kvack.org,
	Linus Walleij &lt;linus.walleij@linaro.org&gt;,
	Andrey Ryabinin &lt;a.ryabinin@samsung.com&gt;, linux-kernel@vger.kernel.org
Subject: [PATCH v3 4/5] arm64: add KASAN support
Date: Wed, 22 Jul 2015 13:30:36 +0300
Message-id: &lt;1437561037-31995-5-git-send-email-a.ryabinin@samsung.com&gt;
X-Mailer: git-send-email 2.4.5
In-reply-to: &lt;1437561037-31995-1-git-send-email-a.ryabinin@samsung.com&gt;
References: &lt;1437561037-31995-1-git-send-email-a.ryabinin@samsung.com&gt;
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFjrELMWRmVeSWpSXmKPExsVy+t/xa7r3CtaHGky4KGGx7dcjNos569ew
	WfyddIzd4v2yHkaL3ZeeMVtMeNjGbtH+cS+zxZQ/y5ksNj2+xmpxedccNot7a/6zWrz8eILF
	gcdjzbw1jB6/f01i9Ljc18vksWBTqcemT5PYPe5c28PmcWLGbxaPzUvqPfq2rGL0+LxJLoAr
	issmJTUnsyy1SN8ugSvj6N6igkuVFa+27GNqYPyU3MXIySEhYCJxbNsHZghbTOLCvfVsXYxc
	HEICSxklbuw9zgThNDFJfHj+nwWkik1AT+LfrO1sILaIQIXE1asTGEFsZoELTBI9E7lAbGEB
	A4nL/yazg9gsAqoS2xZuZgKxeQXcJD43TgPaxgG0TU5iaXMtSJhTwF3i/Nn9YEcIAZX8//SB
	aQIj7wJGhlWMoqmlyQXFSem5RnrFibnFpXnpesn5uZsYISH7dQfj0mNWhxgFOBiVeHgnHF0X
	KsSaWFZcmXuIUYKDWUmE90XW+lAh3pTEyqrUovz4otKc1OJDjNIcLErivDN3vQ8REkhPLEnN
	Tk0tSC2CyTJxcEo1MEqsUAkx226Y02Vg2sW9q+bloScWx01T2XxqworWrOFjFBGZ/XL1VKHZ
	B6vjNlfMYdFgDdHsPzydI8DD2CnJOKH8ov2Hp04nAy3mVyzyX/Bu3bUHNsxXjp9QlPkz792d
	qoW+HbwvAgTVJmm9ZjkY3bjUxFwreqn0zr8qc16fK1FTnnzu8vVH7EosxRmJhlrMRcWJANfl
	knJVAgAA
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=86891">Andrey Ryabinin</a> - July 22, 2015, 10:30 a.m.</div>
<pre class="content">
This patch adds arch specific code for kernel address sanitizer
(see Documentation/kasan.txt).

1/8 of kernel addresses reserved for shadow memory. There was no
big enough hole for this, so virtual addresses for shadow were
stolen from vmalloc area.

At early boot stage the whole shadow region populated with just
one physical page (kasan_zero_page). Later, this page reused
as readonly zero shadow for some memory that KASan currently
don&#39;t track (vmalloc).
After mapping the physical memory, pages for shadow memory are
allocated and mapped.

Functions like memset/memmove/memcpy do a lot of memory accesses.
If bad pointer passed to one of these function it is important
to catch this. Compiler&#39;s instrumentation cannot do this since
these functions are written in assembly.
KASan replaces memory functions with manually instrumented variants.
Original functions declared as weak symbols so strong definitions
in mm/kasan/kasan.c could replace them. Original functions have aliases
with &#39;__&#39; prefix in name, so we could call non-instrumented variant
if needed.
Some files built without kasan instrumentation (e.g. mm/slub.c).
Original mem* function replaced (via #define) with prefixed variants
to disable memory access checks for such files.
<span class="signed-off-by">
Signed-off-by: Andrey Ryabinin &lt;a.ryabinin@samsung.com&gt;</span>
<span class="tested-by">Tested-by: Linus Walleij &lt;linus.walleij@linaro.org&gt;</span>
---
 arch/arm64/Kconfig               |  17 ++++
 arch/arm64/include/asm/kasan.h   |  24 ++++++
 arch/arm64/include/asm/pgtable.h |   7 ++
 arch/arm64/include/asm/string.h  |  16 ++++
 arch/arm64/kernel/arm64ksyms.c   |   3 +
 arch/arm64/kernel/head.S         |   3 +
 arch/arm64/kernel/module.c       |  16 +++-
 arch/arm64/kernel/setup.c        |   2 +
 arch/arm64/lib/memcpy.S          |   3 +
 arch/arm64/lib/memmove.S         |   7 +-
 arch/arm64/lib/memset.S          |   3 +
 arch/arm64/mm/Makefile           |   3 +
 arch/arm64/mm/kasan_init.c       | 176 +++++++++++++++++++++++++++++++++++++++
 13 files changed, 275 insertions(+), 5 deletions(-)
 create mode 100644 arch/arm64/include/asm/kasan.h
 create mode 100644 arch/arm64/mm/kasan_init.c
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - July 22, 2015, 3:49 p.m.</div>
<pre class="content">
On Wed, Jul 22, 2015 at 01:30:36PM +0300, Andrey Ryabinin wrote:
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt; index 318175f..61ebb7c 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -46,6 +46,7 @@ config ARM64</span>
<span class="quote">&gt;  	select HAVE_ARCH_AUDITSYSCALL</span>
<span class="quote">&gt;  	select HAVE_ARCH_BITREVERSE</span>
<span class="quote">&gt;  	select HAVE_ARCH_JUMP_LABEL</span>
<span class="quote">&gt; +	select HAVE_ARCH_KASAN if SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt;  	select HAVE_ARCH_KGDB</span>
<span class="quote">&gt;  	select HAVE_ARCH_SECCOMP_FILTER</span>
<span class="quote">&gt;  	select HAVE_ARCH_TRACEHOOK</span>
<span class="quote">&gt; @@ -122,6 +123,22 @@ config GENERIC_CSUM</span>
<span class="quote">&gt;  config GENERIC_CALIBRATE_DELAY</span>
<span class="quote">&gt;  	def_bool y</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +config KASAN_SHADOW_OFFSET</span>
<span class="quote">&gt; +	hex</span>
<span class="quote">&gt; +	depends on KASAN</span>
<span class="quote">&gt; +	default 0xdfff200000000000 if ARM64_VA_BITS_48</span>
<span class="quote">&gt; +	default 0xdffffc8000000000 if ARM64_VA_BITS_42</span>
<span class="quote">&gt; +	default 0xdfffff9000000000 if ARM64_VA_BITS_39</span>
<span class="quote">&gt; +	help</span>
<span class="quote">&gt; +	  This value used to address to corresponding shadow address</span>

&quot;This value is used to map an address to the corresponding shadow
address...&quot; (unless you meant something else but the above doesn&#39;t read
well).
<span class="quote">
&gt; +	  by the following formula:</span>
<span class="quote">&gt; +	      shadow_addr = (address &gt;&gt; 3) + KASAN_SHADOW_OFFSET;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	  (1 &lt;&lt; 61) shadow addresses - [KASAN_SHADOW_OFFSET,KASAN_SHADOW_END]</span>
<span class="quote">&gt; +	  cover all 64-bits of virtual addresses. So KASAN_SHADOW_OFFSET</span>
<span class="quote">&gt; +	  should satisfy the following equation:</span>
<span class="quote">&gt; +	      KASAN_SHADOW_OFFSET = KASAN_SHADOW_END - (1ULL &lt;&lt; 61)</span>

I think we should generate KASAN_SHADOW_OFFSET in the Makefile directly
using some awk snippet/script (we are going to get a 47-bit VA as well
with 16KB page configuration):

---------8&lt;-----------------
#!/bin/awk -f

BEGIN {
	# 32-bit arithmetics
	va_bits = ARGV[1] - 32
	va_start = and(0xffffffff, lshift(0xffffffff, va_bits))
	shadow_end = va_start + lshift(1, va_bits - 3)
	shadow_offset = shadow_end - lshift(1, 64 - 3 - 32)
	printf(&quot;0x%x00000000\n&quot;, shadow_offset)
}
-------8&lt;-----------------


Otherwise the code looks fine.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 318175f..61ebb7c 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -46,6 +46,7 @@</span> <span class="p_context"> config ARM64</span>
 	select HAVE_ARCH_AUDITSYSCALL
 	select HAVE_ARCH_BITREVERSE
 	select HAVE_ARCH_JUMP_LABEL
<span class="p_add">+	select HAVE_ARCH_KASAN if SPARSEMEM_VMEMMAP</span>
 	select HAVE_ARCH_KGDB
 	select HAVE_ARCH_SECCOMP_FILTER
 	select HAVE_ARCH_TRACEHOOK
<span class="p_chunk">@@ -122,6 +123,22 @@</span> <span class="p_context"> config GENERIC_CSUM</span>
 config GENERIC_CALIBRATE_DELAY
 	def_bool y
 
<span class="p_add">+config KASAN_SHADOW_OFFSET</span>
<span class="p_add">+	hex</span>
<span class="p_add">+	depends on KASAN</span>
<span class="p_add">+	default 0xdfff200000000000 if ARM64_VA_BITS_48</span>
<span class="p_add">+	default 0xdffffc8000000000 if ARM64_VA_BITS_42</span>
<span class="p_add">+	default 0xdfffff9000000000 if ARM64_VA_BITS_39</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  This value used to address to corresponding shadow address</span>
<span class="p_add">+	  by the following formula:</span>
<span class="p_add">+	      shadow_addr = (address &gt;&gt; 3) + KASAN_SHADOW_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+	  (1 &lt;&lt; 61) shadow addresses - [KASAN_SHADOW_OFFSET,KASAN_SHADOW_END]</span>
<span class="p_add">+	  cover all 64-bits of virtual addresses. So KASAN_SHADOW_OFFSET</span>
<span class="p_add">+	  should satisfy the following equation:</span>
<span class="p_add">+	      KASAN_SHADOW_OFFSET = KASAN_SHADOW_END - (1ULL &lt;&lt; 61)</span>
<span class="p_add">+</span>
 config ZONE_DMA
 	def_bool y
 
<span class="p_header">diff --git a/arch/arm64/include/asm/kasan.h b/arch/arm64/include/asm/kasan.h</span>
new file mode 100644
<span class="p_header">index 0000000..914dc72</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kasan.h</span>
<span class="p_chunk">@@ -0,0 +1,24 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef __ASM_KASAN_H</span>
<span class="p_add">+#define __ASM_KASAN_H</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __ASSEMBLY__</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_KASAN</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/memory.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * KASAN_SHADOW_START: beginning of the kernel virtual addresses.</span>
<span class="p_add">+ * KASAN_SHADOW_END: KASAN_SHADOW_START + 1/8 of kernel virtual addresses.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define KASAN_SHADOW_START      (VA_START)</span>
<span class="p_add">+#define KASAN_SHADOW_END        (KASAN_SHADOW_START + (1UL &lt;&lt; (VA_BITS - 3)))</span>
<span class="p_add">+</span>
<span class="p_add">+void kasan_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void kasan_init(void) { }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">index a1f9f61..a071da4 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -40,7 +40,14 @@</span> <span class="p_context"></span>
  *	fixed mappings and modules
  */
 #define VMEMMAP_SIZE		ALIGN((1UL &lt;&lt; (VA_BITS - PAGE_SHIFT)) * sizeof(struct page), PUD_SIZE)
<span class="p_add">+</span>
<span class="p_add">+#ifndef CONFIG_KASAN</span>
 #define VMALLOC_START		(VA_START)
<span class="p_add">+#else</span>
<span class="p_add">+#include &lt;asm/kasan.h&gt;</span>
<span class="p_add">+#define VMALLOC_START		(KASAN_SHADOW_END + SZ_64K)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #define VMALLOC_END		(PAGE_OFFSET - PUD_SIZE - VMEMMAP_SIZE - SZ_64K)
 
 #define vmemmap			((struct page *)(VMALLOC_END + SZ_64K))
<span class="p_header">diff --git a/arch/arm64/include/asm/string.h b/arch/arm64/include/asm/string.h</span>
<span class="p_header">index 64d2d48..2eb714c 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/string.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/string.h</span>
<span class="p_chunk">@@ -36,17 +36,33 @@</span> <span class="p_context"> extern __kernel_size_t strnlen(const char *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCPY
 extern void *memcpy(void *, const void *, __kernel_size_t);
<span class="p_add">+extern void *__memcpy(void *, const void *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMMOVE
 extern void *memmove(void *, const void *, __kernel_size_t);
<span class="p_add">+extern void *__memmove(void *, const void *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCHR
 extern void *memchr(const void *, int, __kernel_size_t);
 
 #define __HAVE_ARCH_MEMSET
 extern void *memset(void *, int, __kernel_size_t);
<span class="p_add">+extern void *__memset(void *, int, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCMP
 extern int memcmp(const void *, const void *, size_t);
 
<span class="p_add">+</span>
<span class="p_add">+#if defined(CONFIG_KASAN) &amp;&amp; !defined(__SANITIZE_ADDRESS__)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * For files that are not instrumented (e.g. mm/slub.c) we</span>
<span class="p_add">+ * should use not instrumented version of mem* functions.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define memcpy(dst, src, len) __memcpy(dst, src, len)</span>
<span class="p_add">+#define memmove(dst, src, len) __memmove(dst, src, len)</span>
<span class="p_add">+#define memset(s, c, n) __memset(s, c, n)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif
<span class="p_header">diff --git a/arch/arm64/kernel/arm64ksyms.c b/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_header">index a85843d..3b6d8cc 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_chunk">@@ -51,6 +51,9 @@</span> <span class="p_context"> EXPORT_SYMBOL(strnlen);</span>
 EXPORT_SYMBOL(memset);
 EXPORT_SYMBOL(memcpy);
 EXPORT_SYMBOL(memmove);
<span class="p_add">+EXPORT_SYMBOL(__memset);</span>
<span class="p_add">+EXPORT_SYMBOL(__memcpy);</span>
<span class="p_add">+EXPORT_SYMBOL(__memmove);</span>
 EXPORT_SYMBOL(memchr);
 EXPORT_SYMBOL(memcmp);
 
<span class="p_header">diff --git a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S</span>
<span class="p_header">index c0ff3ce..945bd6d 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/head.S</span>
<span class="p_header">+++ b/arch/arm64/kernel/head.S</span>
<span class="p_chunk">@@ -449,6 +449,9 @@</span> <span class="p_context"> __mmap_switched:</span>
 	str_l	x21, __fdt_pointer, x5		// Save FDT pointer
 	str_l	x24, memstart_addr, x6		// Save PHYS_OFFSET
 	mov	x29, #0
<span class="p_add">+#ifdef CONFIG_KASAN</span>
<span class="p_add">+	bl	kasan_early_init</span>
<span class="p_add">+#endif</span>
 	b	start_kernel
 ENDPROC(__mmap_switched)
 
<span class="p_header">diff --git a/arch/arm64/kernel/module.c b/arch/arm64/kernel/module.c</span>
<span class="p_header">index 67bf410..7d90c0f 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/module.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/module.c</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/gfp.h&gt;
<span class="p_add">+#include &lt;linux/kasan.h&gt;</span>
 #include &lt;linux/kernel.h&gt;
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/moduleloader.h&gt;
<span class="p_chunk">@@ -34,9 +35,18 @@</span> <span class="p_context"></span>
 
 void *module_alloc(unsigned long size)
 {
<span class="p_del">-	return __vmalloc_node_range(size, 1, MODULES_VADDR, MODULES_END,</span>
<span class="p_del">-				    GFP_KERNEL, PAGE_KERNEL_EXEC, 0,</span>
<span class="p_del">-				    NUMA_NO_NODE, __builtin_return_address(0));</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+</span>
<span class="p_add">+	p = __vmalloc_node_range(size, MODULE_ALIGN, MODULES_VADDR, MODULES_END,</span>
<span class="p_add">+				GFP_KERNEL, PAGE_KERNEL_EXEC, 0,</span>
<span class="p_add">+				NUMA_NO_NODE, __builtin_return_address(0));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (p &amp;&amp; (kasan_module_alloc(p, size) &lt; 0)) {</span>
<span class="p_add">+		vfree(p);</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return p;</span>
 }
 
 enum aarch64_reloc_op {
<span class="p_header">diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c</span>
<span class="p_header">index f3067d4..bf82ab8 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/setup.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/setup.c</span>
<span class="p_chunk">@@ -54,6 +54,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/cpufeature.h&gt;
 #include &lt;asm/cpu_ops.h&gt;
<span class="p_add">+#include &lt;asm/kasan.h&gt;</span>
 #include &lt;asm/sections.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/smp_plat.h&gt;
<span class="p_chunk">@@ -392,6 +393,7 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	acpi_boot_table_init();
 
 	paging_init();
<span class="p_add">+	kasan_init();</span>
 	request_standard_resources();
 
 	early_ioremap_reset();
<span class="p_header">diff --git a/arch/arm64/lib/memcpy.S b/arch/arm64/lib/memcpy.S</span>
<span class="p_header">index 8a9a96d..42cc4b7 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memcpy.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memcpy.S</span>
<span class="p_chunk">@@ -56,6 +56,8 @@</span> <span class="p_context"> C_h	.req	x12</span>
 D_l	.req	x13
 D_h	.req	x14
 
<span class="p_add">+	.weak memcpy</span>
<span class="p_add">+ENTRY(__memcpy)</span>
 ENTRY(memcpy)
 	mov	dst, dstin
 	cmp	count, #16
<span class="p_chunk">@@ -199,3 +201,4 @@</span> <span class="p_context"> ENTRY(memcpy)</span>
 	b.ne	.Ltail63
 	ret
 ENDPROC(memcpy)
<span class="p_add">+ENDPROC(__memcpy)</span>
<span class="p_header">diff --git a/arch/arm64/lib/memmove.S b/arch/arm64/lib/memmove.S</span>
<span class="p_header">index 57b19ea..8819433 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memmove.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memmove.S</span>
<span class="p_chunk">@@ -57,12 +57,14 @@</span> <span class="p_context"> C_h	.req	x12</span>
 D_l	.req	x13
 D_h	.req	x14
 
<span class="p_add">+	.weak memmove</span>
<span class="p_add">+ENTRY(__memmove)</span>
 ENTRY(memmove)
 	cmp	dstin, src
<span class="p_del">-	b.lo	memcpy</span>
<span class="p_add">+	b.lo	__memcpy</span>
 	add	tmp1, src, count
 	cmp	dstin, tmp1
<span class="p_del">-	b.hs	memcpy		/* No overlap.  */</span>
<span class="p_add">+	b.hs	__memcpy		/* No overlap.  */</span>
 
 	add	dst, dstin, count
 	add	src, src, count
<span class="p_chunk">@@ -195,3 +197,4 @@</span> <span class="p_context"> ENTRY(memmove)</span>
 	b.ne	.Ltail63
 	ret
 ENDPROC(memmove)
<span class="p_add">+ENDPROC(__memmove)</span>
<span class="p_header">diff --git a/arch/arm64/lib/memset.S b/arch/arm64/lib/memset.S</span>
<span class="p_header">index 7c72dfd..edc0e7d 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memset.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memset.S</span>
<span class="p_chunk">@@ -54,6 +54,8 @@</span> <span class="p_context"> dst		.req	x8</span>
 tmp3w		.req	w9
 tmp3		.req	x9
 
<span class="p_add">+	.weak memset</span>
<span class="p_add">+ENTRY(__memset)</span>
 ENTRY(memset)
 	mov	dst, dstin	/* Preserve return value.  */
 	and	A_lw, val, #255
<span class="p_chunk">@@ -214,3 +216,4 @@</span> <span class="p_context"> ENTRY(memset)</span>
 	b.ne	.Ltail_maybe_long
 	ret
 ENDPROC(memset)
<span class="p_add">+ENDPROC(__memset)</span>
<span class="p_header">diff --git a/arch/arm64/mm/Makefile b/arch/arm64/mm/Makefile</span>
<span class="p_header">index 773d37a..57f57fd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/Makefile</span>
<span class="p_header">+++ b/arch/arm64/mm/Makefile</span>
<span class="p_chunk">@@ -4,3 +4,6 @@</span> <span class="p_context"> obj-y				:= dma-mapping.o extable.o fault.o init.o \</span>
 				   context.o proc.o pageattr.o
 obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o
 obj-$(CONFIG_ARM64_PTDUMP)	+= dump.o
<span class="p_add">+</span>
<span class="p_add">+obj-$(CONFIG_KASAN)		+= kasan_init.o</span>
<span class="p_add">+KASAN_SANITIZE_kasan_init.o	:= n</span>
<span class="p_header">diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c</span>
new file mode 100644
<span class="p_header">index 0000000..4e67453</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arm64/mm/kasan_init.c</span>
<span class="p_chunk">@@ -0,0 +1,176 @@</span> <span class="p_context"></span>
<span class="p_add">+#define pr_fmt(fmt) &quot;kasan: &quot; fmt</span>
<span class="p_add">+#include &lt;linux/kasan.h&gt;</span>
<span class="p_add">+#include &lt;linux/kernel.h&gt;</span>
<span class="p_add">+#include &lt;linux/memblock.h&gt;</span>
<span class="p_add">+#include &lt;linux/start_kernel.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/page.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgalloc.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This page serves two purposes:</span>
<span class="p_add">+ *   - It used as early shadow memory. The entire shadow region populated</span>
<span class="p_add">+ *     with this page, before we will be able to setup normal shadow memory.</span>
<span class="p_add">+ *   - Latter it reused it as zero shadow to cover large ranges of memory</span>
<span class="p_add">+ *     that allowed to access, but not handled by kasan (vmalloc/vmemmap ...).</span>
<span class="p_add">+ */</span>
<span class="p_add">+unsigned char kasan_zero_page[PAGE_SIZE] __page_aligned_bss;</span>
<span class="p_add">+</span>
<span class="p_add">+static pgd_t tmp_pg_dir[PTRS_PER_PGD] __initdata __aligned(PGD_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_add">+pud_t kasan_zero_pud[PTRS_PER_PUD] __page_aligned_bss;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="p_add">+pmd_t kasan_zero_pmd[PTRS_PER_PMD] __page_aligned_bss;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+pte_t kasan_zero_pte[PTRS_PER_PTE] __page_aligned_bss;</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pte_populate(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		pmd_populate_kernel(&amp;init_mm, pmd, kasan_zero_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = addr + PAGE_SIZE;</span>
<span class="p_add">+		set_pte(pte, pfn_pte(virt_to_pfn(kasan_zero_page),</span>
<span class="p_add">+					PAGE_KERNEL));</span>
<span class="p_add">+	} while (pte++, addr = next, addr != end &amp;&amp; pte_none(*pte));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pmd_populate(pud_t *pud,</span>
<span class="p_add">+					unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		pud_populate(&amp;init_mm, pud, kasan_zero_pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pmd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pte_populate(pmd, addr, next);</span>
<span class="p_add">+	} while (pmd++, addr = next, addr != end &amp;&amp; pmd_none(*pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pud_populate(pgd_t *pgd,</span>
<span class="p_add">+					unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		pgd_populate(&amp;init_mm, pgd, kasan_zero_pud);</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pud_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pmd_populate(pud, addr, next);</span>
<span class="p_add">+	} while (pud++, addr = next, addr != end &amp;&amp; pud_none(*pud));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_map_early_shadow(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long addr = KASAN_SHADOW_START;</span>
<span class="p_add">+	unsigned long end = KASAN_SHADOW_END;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset_k(addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pud_populate(pgd, addr, next);</span>
<span class="p_add">+	} while (pgd++, addr = next, addr != end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __init kasan_early_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG_ON(KASAN_SHADOW_OFFSET != KASAN_SHADOW_END - (1UL &lt;&lt; 61));</span>
<span class="p_add">+	BUILD_BUG_ON(!IS_ALIGNED(KASAN_SHADOW_START, PGDIR_SIZE));</span>
<span class="p_add">+	BUILD_BUG_ON(!IS_ALIGNED(KASAN_SHADOW_END, PGDIR_SIZE));</span>
<span class="p_add">+	kasan_map_early_shadow();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init clear_pgds(unsigned long start,</span>
<span class="p_add">+			unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Remove references to kasan page tables from</span>
<span class="p_add">+	 * swapper_pg_dir. pgd_clear() can&#39;t be used</span>
<span class="p_add">+	 * here because it&#39;s nop on 2,3-level pagetable setups</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for (; start &amp;&amp; start &lt; end; start += PGDIR_SIZE)</span>
<span class="p_add">+		set_pgd(pgd_offset_k(start), __pgd(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init cpu_set_ttbr1(unsigned long ttbr1)</span>
<span class="p_add">+{</span>
<span class="p_add">+	asm(</span>
<span class="p_add">+	&quot;	msr	ttbr1_el1, %0\n&quot;</span>
<span class="p_add">+	&quot;	isb&quot;</span>
<span class="p_add">+	:</span>
<span class="p_add">+	: &quot;r&quot; (ttbr1));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __init kasan_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct memblock_region *reg;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We are going to perform proper setup of shadow memory.</span>
<span class="p_add">+	 * At first we should unmap early shadow (clear_pgds() call bellow).</span>
<span class="p_add">+	 * However, instrumented code couldn&#39;t execute without shadow memory.</span>
<span class="p_add">+	 * tmp_pg_dir used to keep early shadow mapped until full shadow</span>
<span class="p_add">+	 * setup will be finished.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	memcpy(tmp_pg_dir, swapper_pg_dir, sizeof(tmp_pg_dir));</span>
<span class="p_add">+	cpu_set_ttbr1(__pa(tmp_pg_dir));</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_zero_shadow((void *)KASAN_SHADOW_START,</span>
<span class="p_add">+			kasan_mem_to_shadow((void *)MODULES_VADDR));</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_memblock(memory, reg) {</span>
<span class="p_add">+		void *start = (void *)__phys_to_virt(reg-&gt;base);</span>
<span class="p_add">+		void *end = (void *)__phys_to_virt(reg-&gt;base + reg-&gt;size);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (start &gt;= end)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * end + 1 here is intentional. We check several shadow bytes in</span>
<span class="p_add">+		 * advance to slightly speed up fastpath. In some rare cases</span>
<span class="p_add">+		 * we could cross boundary of mapped shadow, so we just map</span>
<span class="p_add">+		 * some more here.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		vmemmap_populate((unsigned long)kasan_mem_to_shadow(start),</span>
<span class="p_add">+				(unsigned long)kasan_mem_to_shadow(end) + 1,</span>
<span class="p_add">+				pfn_to_nid(virt_to_pfn(start)));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Stack instrumentation writes to shadow memory</span>
<span class="p_add">+	 * marking redzones around stack variables. So</span>
<span class="p_add">+	 * at this point kasan_zero_page will be poisoned</span>
<span class="p_add">+	 * with non-zero values. Wipe them out.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	memset(kasan_zero_page, 0, PAGE_SIZE);</span>
<span class="p_add">+	cpu_set_ttbr1(__pa(swapper_pg_dir));</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* At this point kasan is fully initialized. Enable error messages */</span>
<span class="p_add">+	init_task.kasan_depth = 0;</span>
<span class="p_add">+	pr_info(&quot;Kernel address sanitizer initialized\n&quot;);</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



