
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/6] x86/platform/uv/BAU: Add status mmr location fields to bau_control - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/6] x86/platform/uv/BAU: Add status mmr location fields to bau_control</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2017, 4:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1489077734-111753-5-git-send-email-abanman@hpe.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9613641/mbox/"
   >mbox</a>
|
   <a href="/patch/9613641/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9613641/">/patch/9613641/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AB92F604DD for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 16:42:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A01CD285A4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 16:42:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 94CF4286B3; Thu,  9 Mar 2017 16:42:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 245ED286B2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Mar 2017 16:42:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932678AbdCIQmw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 9 Mar 2017 11:42:52 -0500
Received: from relay2.sgi.com ([192.48.180.65]:52806 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S932226AbdCIQmZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 9 Mar 2017 11:42:25 -0500
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay2.corp.sgi.com (Postfix) with ESMTP id E83CE304043;
	Thu,  9 Mar 2017 08:42:21 -0800 (PST)
Received: by stormcage.americas.sgi.com (Postfix, from userid 200151)
	id CA17B2024F87F; Thu,  9 Mar 2017 10:42:21 -0600 (CST)
From: Andrew Banman &lt;abanman@hpe.com&gt;
To: mingo@redhat.com
Cc: akpm@linux-foundation.org, tglx@linutronix.de, hpa@zytor.com,
	mike.travis@hpe.com, rja@hpe.com, sivanich@hpe.com, x86@kernel.org,
	linux-kernel@vger.kernel.org, abanman@hpe.com
Subject: [PATCH 4/6] x86/platform/uv/BAU: Add status mmr location fields to
	bau_control
Date: Thu,  9 Mar 2017 10:42:12 -0600
Message-Id: &lt;1489077734-111753-5-git-send-email-abanman@hpe.com&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1489077734-111753-1-git-send-email-abanman@hpe.com&gt;
References: &lt;1489077734-111753-1-git-send-email-abanman@hpe.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - March 9, 2017, 4:42 p.m.</div>
<pre class="content">
The location of the ERROR and BUSY status bits depends on the descriptor
index, i.e. the CPU, of the message. Since this index does not change,
there is no need to calculate the mmr and index location during message
processing. The less work we do in the hot path the better.

Add status_mmr and status_index fields to bau_control and compute their
values during initialization. Add kerneldoc descriptions for the new
fields. Update uv*_wait_completion to use these fields rather than
receiving the information as parameters.
<span class="signed-off-by">
Signed-off-by: Andrew Banman &lt;abanman@hpe.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;mike.travis@hpe.com&gt;</span>
---
 arch/x86/include/asm/uv/uv_bau.h | 10 +++++++--
 arch/x86/platform/uv/tlb_uv.c    | 46 +++++++++++++++++++---------------------
 2 files changed, 30 insertions(+), 26 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/uv/uv_bau.h b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">index 59ae8a7..f1c23b3 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_chunk">@@ -600,8 +600,12 @@</span> <span class="p_context"> struct uvhub_desc {</span>
 	struct socket_desc	socket[2];
 };
 
<span class="p_del">-/*</span>
<span class="p_del">- * one per-cpu; to locate the software tables</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * struct bau_control</span>
<span class="p_add">+ * @status_mmr: location of status mmr, determined by uvhub_cpu</span>
<span class="p_add">+ * @status_index: index of ERR|BUSY bits in status mmr, determined by uvhub_cpu</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Per-cpu control struct containing CPU topology information and BAU tuneables.</span>
  */
 struct bau_control {
 	struct bau_desc		*descriptor_base;
<span class="p_chunk">@@ -619,6 +623,8 @@</span> <span class="p_context"> struct bau_control {</span>
 	int			timeout_tries;
 	int			ipi_attempts;
 	int			conseccompletes;
<span class="p_add">+	u64			status_mmr;</span>
<span class="p_add">+	int			status_index;</span>
 	bool			nobau;
 	short			baudisabled;
 	short			cpu;
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index e6994fd..13a7055 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -527,11 +527,12 @@</span> <span class="p_context"> static unsigned long uv1_read_status(unsigned long mmr_offset, int right_shift)</span>
  * return COMPLETE, RETRY(PLUGGED or TIMEOUT) or GIVEUP
  */
 static int uv1_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_status;
 	cycles_t ttm;
<span class="p_add">+	u64 mmr_offset = bcp-&gt;status_mmr;</span>
<span class="p_add">+	int right_shift = bcp-&gt;status_index;</span>
 	struct ptc_stats *stat = bcp-&gt;statp;
 
 	descriptor_status = uv1_read_status(mmr_offset, right_shift);
<span class="p_chunk">@@ -619,11 +620,12 @@</span> <span class="p_context"> int handle_uv2_busy(struct bau_control *bcp)</span>
 }
 
 static int uv2_3_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_stat;
 	cycles_t ttm;
<span class="p_add">+	u64 mmr_offset = bcp-&gt;status_mmr;</span>
<span class="p_add">+	int right_shift = bcp-&gt;status_index;</span>
 	int desc = bcp-&gt;uvhub_cpu;
 	long busy_reps = 0;
 	struct ptc_stats *stat = bcp-&gt;statp;
<span class="p_chunk">@@ -684,29 +686,12 @@</span> <span class="p_context"> static int uv2_3_wait_completion(struct bau_desc *bau_desc,</span>
 	return FLUSH_COMPLETE;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * There are 2 status registers; each and array[32] of 2 bits. Set up for</span>
<span class="p_del">- * which register to read and position in that register based on cpu in</span>
<span class="p_del">- * current hub.</span>
<span class="p_del">- */</span>
 static int wait_completion(struct bau_desc *bau_desc, struct bau_control *bcp, long try)
 {
<span class="p_del">-	int right_shift;</span>
<span class="p_del">-	unsigned long mmr_offset;</span>
<span class="p_del">-	int desc = bcp-&gt;uvhub_cpu;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (desc &lt; UV_CPUS_PER_AS) {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_del">-		right_shift = desc * UV_ACT_STATUS_SIZE;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_del">-		right_shift = ((desc - UV_CPUS_PER_AS) * UV_ACT_STATUS_SIZE);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	if (bcp-&gt;uvhub_version == UV_BAU_V1)
<span class="p_del">-		return uv1_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_add">+		return uv1_wait_completion(bau_desc, bcp, try);</span>
 	else
<span class="p_del">-		return uv2_3_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_add">+		return uv2_3_wait_completion(bau_desc, bcp, try);</span>
 }
 
 /*
<span class="p_chunk">@@ -2024,8 +2009,7 @@</span> <span class="p_context"> static int scan_sock(struct socket_desc *sdp, struct uvhub_desc *bdp,</span>
 			struct bau_control **smasterp,
 			struct bau_control **hmasterp)
 {
<span class="p_del">-	int i;</span>
<span class="p_del">-	int cpu;</span>
<span class="p_add">+	int i, cpu, uvhub_cpu;</span>
 	struct bau_control *bcp;
 
 	for (i = 0; i &lt; sdp-&gt;num_cpus; i++) {
<span class="p_chunk">@@ -2054,7 +2038,21 @@</span> <span class="p_context"> static int scan_sock(struct socket_desc *sdp, struct uvhub_desc *bdp,</span>
 			return 1;
 		}
 		bcp-&gt;uvhub_master = *hmasterp;
<span class="p_del">-		bcp-&gt;uvhub_cpu = uv_cpu_blade_processor_id(cpu);</span>
<span class="p_add">+		uvhub_cpu = uv_cpu_blade_processor_id(cpu);</span>
<span class="p_add">+		bcp-&gt;uvhub_cpu = uvhub_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The ERROR and BUSY status registers are located pairwise over</span>
<span class="p_add">+		 * the STATUS_0 and STATUS_1 mmrs; each an array[32] of 2 bits.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (uvhub_cpu &lt; UV_CPUS_PER_AS) {</span>
<span class="p_add">+			bcp-&gt;status_mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_add">+			bcp-&gt;status_index = uvhub_cpu * UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			bcp-&gt;status_mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_add">+			bcp-&gt;status_index = (uvhub_cpu - UV_CPUS_PER_AS)</span>
<span class="p_add">+						* UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+		}</span>
 
 		if (bcp-&gt;uvhub_cpu &gt;= MAX_CPUS_PER_UVHUB) {
 			pr_emerg(&quot;%d cpus per uvhub invalid\n&quot;,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



