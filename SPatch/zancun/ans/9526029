
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4] iommu/arm-smmu: Support for Extended Stream ID (16 bit) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4] iommu/arm-smmu: Support for Extended Stream ID (16 bit)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 19, 2017, 2:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170119143653.7576-1-aleksey.makarov@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9526029/mbox/"
   >mbox</a>
|
   <a href="/patch/9526029/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9526029/">/patch/9526029/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	55D3560113 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 19 Jan 2017 14:40:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 464C22846B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 19 Jan 2017 14:40:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3AA8F2851B; Thu, 19 Jan 2017 14:40:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 060AB2846B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 19 Jan 2017 14:40:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753218AbdASOjK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 19 Jan 2017 09:39:10 -0500
Received: from mail-lf0-f51.google.com ([209.85.215.51]:34002 &quot;EHLO
	mail-lf0-f51.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752803AbdASOiW (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 19 Jan 2017 09:38:22 -0500
Received: by mail-lf0-f51.google.com with SMTP id v186so38028345lfa.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 19 Jan 2017 06:37:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=QvdnKzA9XQmbZ2pHsVKVwejYW+lS3b5vqw2/EWVD80o=;
	b=OmrUTcSeqNhNIPfcJoVGUMWSrHpp/P3JOkGQuaX5skXQzuxgf5FTLxO/jL3X3Lpu8D
	hvYYLDkkmcEJeABWQa6Zd2lgpN0tnZO61J9vOyTHS4G/0FoJzRV6BoVet/WPaVqsmBS5
	Y5PzyM3sWNGb/I6DQMtqhkVENKJ0CWoAnD/RQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=QvdnKzA9XQmbZ2pHsVKVwejYW+lS3b5vqw2/EWVD80o=;
	b=LJgM3DnOJFTkakCdmgQzsawNS67HfOmJeOyswjZpMJamWgsKphQ3esayxvLPgxKWJr
	TKcPlUtT594/9lkfunROSq7p8FNbNGPlZyxAEnKP/5t/i47xC35jXkbleEyBLZgVa6jb
	jrWzU/92Sf0oCWMMV59XXJBFR67Uf1aYNiYwwYESlMcLN08npGfjL0RTFkZb7WCun6Mw
	JddLHdLYhBuQMaGAxFGCOzyeDi1mmnQ9fO2QV1J8+bn+EZzTuwIMSauYK8KYBjIWy5dG
	aMPkQloEGaW/i21vgd26BUcFVISUYuDU9uE7OGqtmwERo1YtBAmuOiHE0GQ45sFPJsqy
	l4AQ==
X-Gm-Message-State: AIkVDXJ3duWuUQn9D/ZxfTvQRmM+Sjyou2DgSzz4Mm29x86tOI5oa9vo823ivi2TW0BUPi2l
X-Received: by 10.46.71.140 with SMTP id u134mr4386500lja.16.1484836670009; 
	Thu, 19 Jan 2017 06:37:50 -0800 (PST)
Received: from localhost.localdomain (nivc-213.auriga.ru. [80.240.102.213])
	by smtp.gmail.com with ESMTPSA id
	18sm1971582ljj.3.2017.01.19.06.37.48
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 19 Jan 2017 06:37:49 -0800 (PST)
From: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: iommu@lists.linux-foundation.org,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	Robin Murphy &lt;robin.murphy@arm.com&gt;,
	Tomasz Nowicki &lt;tnowicki@caviumnetworks.com&gt;,
	Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;
Subject: [PATCH v4] iommu/arm-smmu: Support for Extended Stream ID (16 bit)
Date: Thu, 19 Jan 2017 17:36:36 +0300
Message-Id: &lt;20170119143653.7576-1-aleksey.makarov@linaro.org&gt;
X-Mailer: git-send-email 2.11.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a> - Jan. 19, 2017, 2:36 p.m.</div>
<pre class="content">
It is the time we have the real 16-bit Stream ID user, which is the
ThunderX. Its IO topology uses 1:1 map for Requester ID to Stream ID
translation for each root complex which allows to get full 16-bit
Stream ID.  Firmware assigns bus IDs that are greater than 128 (0x80)
to some buses under PEM (external PCIe interface).  Eventually SMMU
drops devices on that buses because their Stream ID is out of range:

  pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)

To fix above issue enable the Extended Stream ID optional feature
when available.
<span class="reviewed-by">
Reviewed-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
---
v4:
change the commit message:
- explain the reason why the warning happens (Tomasz Nowicki)
- add &#39;Reviewed-by&#39; and &#39;Tested-by&#39; from Tomasz Nowicki

v3:
https://lkml.kernel.org/r/20170117151431.17085-1-aleksey.makarov@linaro.org
- keep formatting of the comment
- fix printk message after the deleted chunk.  &quot;[Do] not print a mask
  here, since it&#39;s not overly interesting in itself, and add_device will
  still show the offending mask in full if it ever actually matters (as in
  the commit message).&quot; (Robin Murphy)

v2:
https://lkml.kernel.org/r/20170116141111.29444-1-aleksey.makarov@linaro.org
- remove unnecessary parentheses (Robin Murphy)
- refactor testing SMR fields to after setting sCR0 as theirs width
  depends on sCR0_EXIDENABLE (Robin Murphy)

v1 (rfc):
https://lkml.kernel.org/r/20170110115755.19102-1-aleksey.makarov@linaro.org

 drivers/iommu/arm-smmu.c | 69 +++++++++++++++++++++++++++++++++---------------
 1 file changed, 48 insertions(+), 21 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Jan. 19, 2017, 4:13 p.m.</div>
<pre class="content">
On Thu, Jan 19, 2017 at 05:36:36PM +0300, Aleksey Makarov wrote:
<span class="quote">&gt; It is the time we have the real 16-bit Stream ID user, which is the</span>
<span class="quote">&gt; ThunderX. Its IO topology uses 1:1 map for Requester ID to Stream ID</span>
<span class="quote">&gt; translation for each root complex which allows to get full 16-bit</span>
<span class="quote">&gt; Stream ID.  Firmware assigns bus IDs that are greater than 128 (0x80)</span>
<span class="quote">&gt; to some buses under PEM (external PCIe interface).  Eventually SMMU</span>
<span class="quote">&gt; drops devices on that buses because their Stream ID is out of range:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To fix above issue enable the Extended Stream ID optional feature</span>
<span class="quote">&gt; when available.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v4:</span>
<span class="quote">&gt; change the commit message:</span>
<span class="quote">&gt; - explain the reason why the warning happens (Tomasz Nowicki)</span>
<span class="quote">&gt; - add &#39;Reviewed-by&#39; and &#39;Tested-by&#39; from Tomasz Nowicki</span>

Thanks, I&#39;ll queue this for 4.11.

Will
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="p_header">index 13d26009b8e0..861cc135722f 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu.c</span>
<span class="p_chunk">@@ -24,6 +24,7 @@</span> <span class="p_context"></span>
  *	- v7/v8 long-descriptor format
  *	- Non-secure access to the SMMU
  *	- Context fault reporting
<span class="p_add">+ *	- Extended Stream ID (16 bit)</span>
  */
 
 #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt
<span class="p_chunk">@@ -87,6 +88,7 @@</span> <span class="p_context"></span>
 #define sCR0_CLIENTPD			(1 &lt;&lt; 0)
 #define sCR0_GFRE			(1 &lt;&lt; 1)
 #define sCR0_GFIE			(1 &lt;&lt; 2)
<span class="p_add">+#define sCR0_EXIDENABLE			(1 &lt;&lt; 3)</span>
 #define sCR0_GCFGFRE			(1 &lt;&lt; 4)
 #define sCR0_GCFGFIE			(1 &lt;&lt; 5)
 #define sCR0_USFCFG			(1 &lt;&lt; 10)
<span class="p_chunk">@@ -126,6 +128,7 @@</span> <span class="p_context"></span>
 #define ID0_NUMIRPT_MASK		0xff
 #define ID0_NUMSIDB_SHIFT		9
 #define ID0_NUMSIDB_MASK		0xf
<span class="p_add">+#define ID0_EXIDS			(1 &lt;&lt; 8)</span>
 #define ID0_NUMSMRG_SHIFT		0
 #define ID0_NUMSMRG_MASK		0xff
 
<span class="p_chunk">@@ -169,6 +172,7 @@</span> <span class="p_context"></span>
 #define ARM_SMMU_GR0_S2CR(n)		(0xc00 + ((n) &lt;&lt; 2))
 #define S2CR_CBNDX_SHIFT		0
 #define S2CR_CBNDX_MASK			0xff
<span class="p_add">+#define S2CR_EXIDVALID			(1 &lt;&lt; 10)</span>
 #define S2CR_TYPE_SHIFT			16
 #define S2CR_TYPE_MASK			0x3
 enum arm_smmu_s2cr_type {
<span class="p_chunk">@@ -354,6 +358,7 @@</span> <span class="p_context"> struct arm_smmu_device {</span>
 #define ARM_SMMU_FEAT_FMT_AARCH64_64K	(1 &lt;&lt; 9)
 #define ARM_SMMU_FEAT_FMT_AARCH32_L	(1 &lt;&lt; 10)
 #define ARM_SMMU_FEAT_FMT_AARCH32_S	(1 &lt;&lt; 11)
<span class="p_add">+#define ARM_SMMU_FEAT_EXIDS		(1 &lt;&lt; 12)</span>
 	u32				features;
 
 #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)
<span class="p_chunk">@@ -1051,7 +1056,7 @@</span> <span class="p_context"> static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
 	struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;
 	u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;
 
<span class="p_del">-	if (smr-&gt;valid)</span>
<span class="p_add">+	if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
 		reg |= SMR_VALID;
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));
 }
<span class="p_chunk">@@ -1063,6 +1068,9 @@</span> <span class="p_context"> static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
 		  (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |
 		  (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="p_add">+	    smmu-&gt;smrs[idx].valid)</span>
<span class="p_add">+		reg |= S2CR_EXIDVALID;</span>
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));
 }
 
<span class="p_chunk">@@ -1073,6 +1081,34 @@</span> <span class="p_context"> static void arm_smmu_write_sme(struct arm_smmu_device *smmu, int idx)</span>
 		arm_smmu_write_smr(smmu, idx);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The width of SMR&#39;s mask field depends on sCR0_EXIDENABLE, so this function</span>
<span class="p_add">+ * should be called after sCR0 is written.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void arm_smmu_test_smr_masks(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void __iomem *gr0_base = ARM_SMMU_GR0(smmu);</span>
<span class="p_add">+	u32 smr;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!smmu-&gt;smrs)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="p_add">+	 * bits are set, so check each one separately. We can reject</span>
<span class="p_add">+	 * masters later if they try to claim IDs outside these masks.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_add">+	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_add">+	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int arm_smmu_find_sme(struct arm_smmu_device *smmu, u16 id, u16 mask)
 {
 	struct arm_smmu_smr *smrs = smmu-&gt;smrs;
<span class="p_chunk">@@ -1674,6 +1710,9 @@</span> <span class="p_context"> static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
 	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)
 		reg |= sCR0_VMID16EN;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="p_add">+		reg |= sCR0_EXIDENABLE;</span>
<span class="p_add">+</span>
 	/* Push the button */
 	__arm_smmu_tlb_sync(smmu);
 	writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
<span class="p_chunk">@@ -1761,11 +1800,14 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);
 
 	/* Max. number of entries we have for stream matching/indexing */
<span class="p_del">-	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="p_add">+		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="p_add">+		size = 1 &lt;&lt; 16;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	}</span>
 	smmu-&gt;streamid_mask = size - 1;
 	if (id &amp; ID0_SMS) {
<span class="p_del">-		u32 smr;</span>
<span class="p_del">-</span>
 		smmu-&gt;features |= ARM_SMMU_FEAT_STREAM_MATCH;
 		size = (id &gt;&gt; ID0_NUMSMRG_SHIFT) &amp; ID0_NUMSMRG_MASK;
 		if (size == 0) {
<span class="p_chunk">@@ -1774,21 +1816,6 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			return -ENODEV;
 		}
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="p_del">-		 * bits are set, so check each one separately. We can reject</span>
<span class="p_del">-		 * masters later if they try to claim IDs outside these masks.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_del">-</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_del">-</span>
 		/* Zero-initialised to mark as invalid */
 		smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),
 					  GFP_KERNEL);
<span class="p_chunk">@@ -1796,8 +1823,7 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			return -ENOMEM;
 
 		dev_notice(smmu-&gt;dev,
<span class="p_del">-			   &quot;\tstream matching with %lu register groups, mask 0x%x&quot;,</span>
<span class="p_del">-			   size, smmu-&gt;smr_mask_mask);</span>
<span class="p_add">+			   &quot;\tstream matching with %lu register groups&quot;, size);</span>
 	}
 	/* s2cr-&gt;type == 0 means translation, so initialise explicitly */
 	smmu-&gt;s2crs = devm_kmalloc_array(smmu-&gt;dev, size, sizeof(*smmu-&gt;s2crs),
<span class="p_chunk">@@ -2120,6 +2146,7 @@</span> <span class="p_context"> static int arm_smmu_device_probe(struct platform_device *pdev)</span>
 	iommu_register_instance(dev-&gt;fwnode, &amp;arm_smmu_ops);
 	platform_set_drvdata(pdev, smmu);
 	arm_smmu_device_reset(smmu);
<span class="p_add">+	arm_smmu_test_smr_masks(smmu);</span>
 
 	/* Oh, for a proper bus abstraction */
 	if (!iommu_present(&amp;platform_bus_type))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



