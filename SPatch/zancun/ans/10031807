
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,09/13] openrisc: add cacheflush support to fix icache aliasing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,09/13] openrisc: add cacheflush support to fix icache aliasing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153221">Stafford Horne</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 29, 2017, 11:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171029231123.27281-10-shorne@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10031807/mbox/"
   >mbox</a>
|
   <a href="/patch/10031807/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10031807/">/patch/10031807/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1E8FA6039A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Oct 2017 23:13:16 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 10F0D286FF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Oct 2017 23:13:16 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0519E2870C; Sun, 29 Oct 2017 23:13:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D871F286FF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Oct 2017 23:13:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932383AbdJ2XNN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 29 Oct 2017 19:13:13 -0400
Received: from mail-pf0-f196.google.com ([209.85.192.196]:52542 &quot;EHLO
	mail-pf0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932303AbdJ2XNL (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 29 Oct 2017 19:13:11 -0400
Received: by mail-pf0-f196.google.com with SMTP id e64so9400911pfk.9
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sun, 29 Oct 2017 16:13:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=90NL2dWh2ohtbiS/iMo86v1YXqgUw5k/j1JYfJlWwA8=;
	b=OH6RIytBDyTA0FtesKQPlxZ1/y6bj2F8JyCvhMWAWI60ytwFVgwIfmJanw8ECjPK9P
	H15gsS6zw+9dWOOkV5TeMfes3zJQZyWsW9PTS0KLMs1ZrXQvkuOTFqLLF29pVH5vHAVb
	F160GbCEoR6hbQZZr20MeB5nx2oaTXza6kbvuvAU6sUJkZ5A8mi+RIiS7ryoXB4sDf4U
	XtixFSzx+sBR7iTY0/k0mf9YSAK12bQR5nIVjAGUZ3d5x0cyo3ITbH4IQs4cfIsCcKUQ
	c+JcTmdxEPvWpriONNUQZYG9PYzGcr+axaAx6CodSKejRz3RvRiEz/XIFingQeaFZQxO
	N0Tg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=90NL2dWh2ohtbiS/iMo86v1YXqgUw5k/j1JYfJlWwA8=;
	b=fvVOC3ub4m8kJTZQRfAXgxNRxCLO/UsosxRCkTguDhb1zUdZypOgNLo17Df4XV+TY3
	Nkouls/93zLE0mluc8d+o0uZbBqYK1knahKRT/pz6AUkw01NN8GBIrQ97ytAWRraFwQ6
	2nhYNKMsdLa7cogoM/RKm2pg3NK8/aqKlgUzKcfijPs8BeHmzKwCx5TsfSKezp6wasA6
	TR826YCw15dDWe+j122A7TWVoEk+FyyXBtcWxkPRqsJ7YQMC3UgNdNWCWsHl+tw51ZgK
	D/xW+4pXTkIdwCcCWscb+ui2hUclabp61Q+YqfuWXmicuA6K+seV43MfGJSSg9iMCXtu
	qF0w==
X-Gm-Message-State: AMCzsaUbliM8v74eX0uOpRB7g7SzVhSQUwRm8e1Ept6PBFCEHPZxPa3l
	8mitexusWGSEWM4YdxMW70/KpAxz7is=
X-Google-Smtp-Source: ABhQp+SR2NC6ZhGM9OPb7s7obxuh9B+ZkhLQsU2SCwqmqkILVnA6k6yVb/x9D490iaDT86nSpHLg9Q==
X-Received: by 10.84.215.9 with SMTP id k9mr5621590pli.284.1509318790240;
	Sun, 29 Oct 2017 16:13:10 -0700 (PDT)
Received: from localhost (g183.61-45-92.ppp.wakwak.ne.jp. [61.45.92.183])
	by smtp.gmail.com with ESMTPSA id
	q2sm18891659pgp.81.2017.10.29.16.13.09
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Sun, 29 Oct 2017 16:13:09 -0700 (PDT)
From: Stafford Horne &lt;shorne@gmail.com&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: Jan Henrik Weinstock &lt;jan.weinstock@ice.rwth-aachen.de&gt;,
	Stafford Horne &lt;shorne@gmail.com&gt;, Jonas Bonn &lt;jonas@southpole.se&gt;,
	Stefan Kristiansson &lt;stefan.kristiansson@saunalahti.fi&gt;,
	&quot;Peter Zijlstra (Intel)&quot; &lt;peterz@infradead.org&gt;,
	Masahiro Yamada &lt;yamada.masahiro@socionext.com&gt;,
	Nicolas Dichtel &lt;nicolas.dichtel@6wind.com&gt;,
	Al Viro &lt;viro@zeniv.linux.org.uk&gt;,
	&quot;Luis R. Rodriguez&quot; &lt;mcgrof@kernel.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, Tobias Klauser &lt;tklauser@distanz.ch&gt;,
	openrisc@lists.librecores.org
Subject: [PATCH v4 09/13] openrisc: add cacheflush support to fix icache
	aliasing
Date: Mon, 30 Oct 2017 08:11:19 +0900
Message-Id: &lt;20171029231123.27281-10-shorne@gmail.com&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;20171029231123.27281-1-shorne@gmail.com&gt;
References: &lt;20171029231123.27281-1-shorne@gmail.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153221">Stafford Horne</a> - Oct. 29, 2017, 11:11 p.m.</div>
<pre class="content">
<span class="from">From: Jan Henrik Weinstock &lt;jan.weinstock@ice.rwth-aachen.de&gt;</span>

On OpenRISC the icache does not snoop data stores.  This can cause
aliasing as reported by Jan. This patch fixes the issue to ensure icache
is properly synchronized when code is written to memory.  It supports both
SMP and UP flushing.

This supports dcache flush as well for architectures that do not support
write-through caches; most OpenRISC implementations do implement
write-through cache however. Dcache flushes are done only on a single
core as OpenRISC dcaches all support snooping of bus stores.
<span class="signed-off-by">
Signed-off-by: Jan Henrik Weinstock &lt;jan.weinstock@ice.rwth-aachen.de&gt;</span>
[shorne@gmail.com: Squashed patches and wrote commit message]
<span class="signed-off-by">Signed-off-by: Stafford Horne &lt;shorne@gmail.com&gt;</span>
---
 arch/openrisc/Kconfig                  | 11 ++++
 arch/openrisc/include/asm/Kbuild       |  1 -
 arch/openrisc/include/asm/cacheflush.h | 96 ++++++++++++++++++++++++++++++++++
 arch/openrisc/include/asm/pgtable.h    | 16 +++---
 arch/openrisc/kernel/smp.c             | 15 ++++++
 arch/openrisc/mm/Makefile              |  2 +-
 arch/openrisc/mm/cache.c               | 61 +++++++++++++++++++++
 7 files changed, 194 insertions(+), 8 deletions(-)
 create mode 100644 arch/openrisc/include/asm/cacheflush.h
 create mode 100644 arch/openrisc/mm/cache.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/openrisc/Kconfig b/arch/openrisc/Kconfig</span>
<span class="p_header">index 2b3898ede888..bfff04ae7f7d 100644</span>
<span class="p_header">--- a/arch/openrisc/Kconfig</span>
<span class="p_header">+++ b/arch/openrisc/Kconfig</span>
<span class="p_chunk">@@ -77,6 +77,17 @@</span> <span class="p_context"> config OR1K_1200</span>
 
 endchoice
 
<span class="p_add">+config DCACHE_WRITETHROUGH</span>
<span class="p_add">+	bool &quot;Have write through data caches&quot;</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  Select this if your implementation features write through data caches.</span>
<span class="p_add">+	  Selecting &#39;N&#39; here will allow the kernel to force flushing of data</span>
<span class="p_add">+	  caches at relevant times. Most OpenRISC implementations support write-</span>
<span class="p_add">+	  through data caches.</span>
<span class="p_add">+</span>
<span class="p_add">+	  If unsure say N here</span>
<span class="p_add">+</span>
 config OPENRISC_BUILTIN_DTB
         string &quot;Builtin DTB&quot;
         default &quot;&quot;
<span class="p_header">diff --git a/arch/openrisc/include/asm/Kbuild b/arch/openrisc/include/asm/Kbuild</span>
<span class="p_header">index 5f066780d870..6eb16719549e 100644</span>
<span class="p_header">--- a/arch/openrisc/include/asm/Kbuild</span>
<span class="p_header">+++ b/arch/openrisc/include/asm/Kbuild</span>
<span class="p_chunk">@@ -1,7 +1,6 @@</span> <span class="p_context"></span>
 generic-y += barrier.h
 generic-y += bug.h
 generic-y += bugs.h
<span class="p_del">-generic-y += cacheflush.h</span>
 generic-y += checksum.h
 generic-y += clkdev.h
 generic-y += current.h
<span class="p_header">diff --git a/arch/openrisc/include/asm/cacheflush.h b/arch/openrisc/include/asm/cacheflush.h</span>
new file mode 100644
<span class="p_header">index 000000000000..70f46fd7a074</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/openrisc/include/asm/cacheflush.h</span>
<span class="p_chunk">@@ -0,0 +1,96 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * OpenRISC Linux</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Linux architectural port borrowing liberally from similar works of</span>
<span class="p_add">+ * others.  All original copyrights apply as per the original source</span>
<span class="p_add">+ * declaration.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * OpenRISC implementation:</span>
<span class="p_add">+ * Copyright (C) Jan Henrik Weinstock &lt;jan.weinstock@rwth-aachen.de&gt;</span>
<span class="p_add">+ * et al.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License as published by</span>
<span class="p_add">+ * the Free Software Foundation; either version 2 of the License, or</span>
<span class="p_add">+ * (at your option) any later version.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __ASM_CACHEFLUSH_H</span>
<span class="p_add">+#define __ASM_CACHEFLUSH_H</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Helper function for flushing or invalidating entire pages from data</span>
<span class="p_add">+ * and instruction caches. SMP needs a little extra work, since we need</span>
<span class="p_add">+ * to flush the pages on all cpus.</span>
<span class="p_add">+ */</span>
<span class="p_add">+extern void local_dcache_page_flush(struct page *page);</span>
<span class="p_add">+extern void local_icache_page_inv(struct page *page);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Data cache flushing always happen on the local cpu. Instruction cache</span>
<span class="p_add">+ * invalidations need to be broadcasted to all other cpu in the system in</span>
<span class="p_add">+ * case of SMP configurations.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifndef CONFIG_SMP</span>
<span class="p_add">+#define dcache_page_flush(page)      local_dcache_page_flush(page)</span>
<span class="p_add">+#define icache_page_inv(page)        local_icache_page_inv(page)</span>
<span class="p_add">+#else  /* CONFIG_SMP */</span>
<span class="p_add">+#define dcache_page_flush(page)      local_dcache_page_flush(page)</span>
<span class="p_add">+#define icache_page_inv(page)        smp_icache_page_inv(page)</span>
<span class="p_add">+extern void smp_icache_page_inv(struct page *page);</span>
<span class="p_add">+#endif /* CONFIG_SMP */</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Synchronizes caches. Whenever a cpu writes executable code to memory, this</span>
<span class="p_add">+ * should be called to make sure the processor sees the newly written code.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void sync_icache_dcache(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_DCACHE_WRITETHROUGH))</span>
<span class="p_add">+		dcache_page_flush(page);</span>
<span class="p_add">+	icache_page_inv(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Pages with this bit set need not be flushed/invalidated, since</span>
<span class="p_add">+ * they have not changed since last flush. New pages start with</span>
<span class="p_add">+ * PG_arch_1 not set and are therefore dirty by default.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define PG_dc_clean                  PG_arch_1</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE 1</span>
<span class="p_add">+static inline void flush_dcache_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	clear_bit(PG_dc_clean, &amp;page-&gt;flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Other interfaces are not required since we do not have virtually</span>
<span class="p_add">+ * indexed or tagged caches. So we can use the default here.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define flush_cache_all()				do { } while (0)</span>
<span class="p_add">+#define flush_cache_mm(mm)				do { } while (0)</span>
<span class="p_add">+#define flush_cache_dup_mm(mm)				do { } while (0)</span>
<span class="p_add">+#define flush_cache_range(vma, start, end)		do { } while (0)</span>
<span class="p_add">+#define flush_cache_page(vma, vmaddr, pfn)		do { } while (0)</span>
<span class="p_add">+#define flush_dcache_mmap_lock(mapping)			do { } while (0)</span>
<span class="p_add">+#define flush_dcache_mmap_unlock(mapping)		do { } while (0)</span>
<span class="p_add">+#define flush_icache_range(start, end)			do { } while (0)</span>
<span class="p_add">+#define flush_icache_page(vma, pg)			do { } while (0)</span>
<span class="p_add">+#define flush_icache_user_range(vma, pg, adr, len)	do { } while (0)</span>
<span class="p_add">+#define flush_cache_vmap(start, end)			do { } while (0)</span>
<span class="p_add">+#define flush_cache_vunmap(start, end)			do { } while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define copy_to_user_page(vma, page, vaddr, dst, src, len)           \</span>
<span class="p_add">+	do {                                                         \</span>
<span class="p_add">+		memcpy(dst, src, len);                               \</span>
<span class="p_add">+		if (vma-&gt;vm_flags &amp; VM_EXEC)                         \</span>
<span class="p_add">+			sync_icache_dcache(page);                    \</span>
<span class="p_add">+	} while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define copy_from_user_page(vma, page, vaddr, dst, src, len)         \</span>
<span class="p_add">+	memcpy(dst, src, len)</span>
<span class="p_add">+</span>
<span class="p_add">+#endif /* __ASM_CACHEFLUSH_H */</span>
<span class="p_header">diff --git a/arch/openrisc/include/asm/pgtable.h b/arch/openrisc/include/asm/pgtable.h</span>
<span class="p_header">index eff5ba2a5af2..21c71303012f 100644</span>
<span class="p_header">--- a/arch/openrisc/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/openrisc/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -416,15 +416,19 @@</span> <span class="p_context"> extern pgd_t swapper_pg_dir[PTRS_PER_PGD]; /* defined in head.S */</span>
 
 struct vm_area_struct;
 
<span class="p_del">-/*</span>
<span class="p_del">- * or32 doesn&#39;t have any external MMU info: the kernel page</span>
<span class="p_del">- * tables contain all the necessary information.</span>
<span class="p_del">- *</span>
<span class="p_del">- * Actually I am not sure on what this could be used for.</span>
<span class="p_del">- */</span>
<span class="p_add">+static inline void update_tlb(struct vm_area_struct *vma,</span>
<span class="p_add">+	unsigned long address, pte_t *pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+extern void update_cache(struct vm_area_struct *vma,</span>
<span class="p_add">+	unsigned long address, pte_t *pte);</span>
<span class="p_add">+</span>
 static inline void update_mmu_cache(struct vm_area_struct *vma,
 	unsigned long address, pte_t *pte)
 {
<span class="p_add">+	update_tlb(vma, address, pte);</span>
<span class="p_add">+	update_cache(vma, address, pte);</span>
 }
 
 /* __PHX__ FIXME, SWAP, this probably doesn&#39;t work */
<span class="p_header">diff --git a/arch/openrisc/kernel/smp.c b/arch/openrisc/kernel/smp.c</span>
<span class="p_header">index 685b4934fa39..4763b8b9161e 100644</span>
<span class="p_header">--- a/arch/openrisc/kernel/smp.c</span>
<span class="p_header">+++ b/arch/openrisc/kernel/smp.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/cpuinfo.h&gt;
 #include &lt;asm/mmu_context.h&gt;
 #include &lt;asm/tlbflush.h&gt;
<span class="p_add">+#include &lt;asm/cacheflush.h&gt;</span>
 #include &lt;asm/time.h&gt;
 
 static void (*smp_cross_call)(const struct cpumask *, unsigned int);
<span class="p_chunk">@@ -239,3 +240,17 @@</span> <span class="p_context"> void flush_tlb_range(struct vm_area_struct *vma,</span>
 {
 	on_each_cpu(ipi_flush_tlb_all, NULL, 1);
 }
<span class="p_add">+</span>
<span class="p_add">+/* Instruction cache invalidate - performed on each cpu */</span>
<span class="p_add">+static void ipi_icache_page_inv(void *arg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page *page = arg;</span>
<span class="p_add">+</span>
<span class="p_add">+	local_icache_page_inv(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void smp_icache_page_inv(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	on_each_cpu(ipi_icache_page_inv, page, 1);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(smp_icache_page_inv);</span>
<span class="p_header">diff --git a/arch/openrisc/mm/Makefile b/arch/openrisc/mm/Makefile</span>
<span class="p_header">index 324ba2634529..a31b2a42e966 100644</span>
<span class="p_header">--- a/arch/openrisc/mm/Makefile</span>
<span class="p_header">+++ b/arch/openrisc/mm/Makefile</span>
<span class="p_chunk">@@ -2,4 +2,4 @@</span> <span class="p_context"></span>
 # Makefile for the linux openrisc-specific parts of the memory manager.
 #
 
<span class="p_del">-obj-y	:= fault.o tlb.o init.o ioremap.o</span>
<span class="p_add">+obj-y	:= fault.o cache.o tlb.o init.o ioremap.o</span>
<span class="p_header">diff --git a/arch/openrisc/mm/cache.c b/arch/openrisc/mm/cache.c</span>
new file mode 100644
<span class="p_header">index 000000000000..b747bf1fc1b6</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/openrisc/mm/cache.c</span>
<span class="p_chunk">@@ -0,0 +1,61 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * OpenRISC cache.c</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Linux architectural port borrowing liberally from similar works of</span>
<span class="p_add">+ * others.  All original copyrights apply as per the original source</span>
<span class="p_add">+ * declaration.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Modifications for the OpenRISC architecture:</span>
<span class="p_add">+ * Copyright (C) 2015 Jan Henrik Weinstock &lt;jan.weinstock@rwth-aachen.de&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *      This program is free software; you can redistribute it and/or</span>
<span class="p_add">+ *      modify it under the terms of the GNU General Public License</span>
<span class="p_add">+ *      as published by the Free Software Foundation; either version</span>
<span class="p_add">+ *      2 of the License, or (at your option) any later version.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/spr.h&gt;</span>
<span class="p_add">+#include &lt;asm/spr_defs.h&gt;</span>
<span class="p_add">+#include &lt;asm/cache.h&gt;</span>
<span class="p_add">+#include &lt;asm/cacheflush.h&gt;</span>
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static void cache_loop(struct page *page, const unsigned int reg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long paddr = page_to_pfn(page) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	unsigned long line = paddr &amp; ~(L1_CACHE_BYTES - 1);</span>
<span class="p_add">+</span>
<span class="p_add">+	while (line &lt; paddr + PAGE_SIZE) {</span>
<span class="p_add">+		mtspr(reg, line);</span>
<span class="p_add">+		line += L1_CACHE_BYTES;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void local_dcache_page_flush(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	cache_loop(page, SPR_DCBFR);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(local_dcache_page_flush);</span>
<span class="p_add">+</span>
<span class="p_add">+void local_icache_page_inv(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	cache_loop(page, SPR_ICBIR);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(local_icache_page_inv);</span>
<span class="p_add">+</span>
<span class="p_add">+void update_cache(struct vm_area_struct *vma, unsigned long address,</span>
<span class="p_add">+	pte_t *pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long pfn = pte_val(*pte) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	struct page *page = pfn_to_page(pfn);</span>
<span class="p_add">+	int dirty = !test_and_set_bit(PG_dc_clean, &amp;page-&gt;flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Since icaches do not snoop for updated data on OpenRISC, we</span>
<span class="p_add">+	 * must write back and invalidate any dirty pages manually. We</span>
<span class="p_add">+	 * can skip data pages, since they will not end up in icaches.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((vma-&gt;vm_flags &amp; VM_EXEC) &amp;&amp; dirty)</span>
<span class="p_add">+		sync_icache_dcache(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



