
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arm64: add a function to show the different types of pagetable - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arm64: add a function to show the different types of pagetable</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=146341">zhong jiang</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 5, 2015, 1:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1449322532-46372-1-git-send-email-zhongjiang@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7775531/mbox/"
   >mbox</a>
|
   <a href="/patch/7775531/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7775531/">/patch/7775531/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 6C1D99F39B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  5 Dec 2015 13:42:11 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 6E53A204E3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  5 Dec 2015 13:42:10 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 34DF2204D9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  5 Dec 2015 13:42:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753476AbbLENmG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 5 Dec 2015 08:42:06 -0500
Received: from szxga03-in.huawei.com ([119.145.14.66]:37464 &quot;EHLO
	szxga03-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753242AbbLENmE (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 5 Dec 2015 08:42:04 -0500
Received: from 172.24.1.51 (EHLO SZXEML429-HUB.china.huawei.com)
	([172.24.1.51])
	by szxrg03-dlp.huawei.com (MOS 4.4.3-GA FastPath queued)
	with ESMTP id BSE72399; Sat, 05 Dec 2015 21:41:47 +0800 (CST)
Received: from linux-ibm.site (10.175.102.37) by
	SZXEML429-HUB.china.huawei.com (10.82.67.184) with Microsoft SMTP
	Server id 14.3.235.1; Sat, 5 Dec 2015 21:41:36 +0800
From: zhongjiang &lt;zhongjiang@huawei.com&gt;
To: &lt;mark.rutland@arm.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;linux-arm-kernel@lists.infradead.org&gt;, &lt;catalin.marinas@arm.com&gt;
CC: &lt;qiuxishi@huawei.com&gt;, &lt;zhongjiang@huawei.com&gt;,
	&lt;guohanjun@huawei.com&gt;
Subject: [PATCH] arm64: add a function to show the different types of
	pagetable
Date: Sat, 5 Dec 2015 21:35:32 +0800
Message-ID: &lt;1449322532-46372-1-git-send-email-zhongjiang@huawei.com&gt;
X-Mailer: git-send-email 1.7.12.4
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.175.102.37]
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A020202.5662E99C.0061, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, ip=0.0.0.0,
	so=2013-05-26 15:14:31, dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 71df371a4a4aa26d84b8d262f9fe6f4f
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Dec. 4, 2015, 5:38 a.m.</div>
<pre class="content">
On Sat, Dec 05, 2015 at 09:35:32PM +0800, zhongjiang wrote:
<span class="quote">&gt; The patch is mainly to show  pagetable number of different level in the direct</span>
<span class="quote">&gt; mapping. pagetable is created from pud to pte in arm64 , resulting in different</span>
<span class="quote">&gt; resluts with x86. For instance, The kernel of two-level pages will produce three</span>
<span class="quote">&gt; types of pagetable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It can also be used to detect whether there is a large page spliting and merging.</span>
<span class="quote">&gt; Large page will significantly reduce the TLB miss, and improve the system</span>
<span class="quote">&gt; performance.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: zhongjiang &lt;zhongjiang@huawei.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/include/asm/pgtable-types.h |   19 +++++++++++++++++</span>
<span class="quote">&gt;  arch/arm64/mm/mmu.c                    |   12 +++++++++++</span>
<span class="quote">&gt;  arch/arm64/mm/pageattr.c               |   35 ++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  3 files changed, 66 insertions(+), 0 deletions(-)</span>

This looks identical to the last time [1] this was posted. I had open comments
[2], which have not been addressed.

In future, plase include a change log when submitting an updated patch, and
follow the usual convention for the subject prefix (e.g. PATCHvN for an updated
patch, PATCH RESEND if the patch content has not changed, etc).

Thanks,
Mark.

[1] http://lists.infradead.org/pipermail/linux-arm-kernel/2015-December/390870.html
[2] http://lists.infradead.org/pipermail/linux-arm-kernel/2015-December/391008.html
<span class="quote">
&gt; diff --git a/arch/arm64/include/asm/pgtable-types.h b/arch/arm64/include/asm/pgtable-types.h</span>
<span class="quote">&gt; index 2b1bd7e..a0f58d0 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/pgtable-types.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/pgtable-types.h</span>
<span class="quote">&gt; @@ -86,6 +86,25 @@ typedef pteval_t pgprot_t;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif /* STRICT_MM_TYPECHECKS */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +struct seq_file;</span>
<span class="quote">&gt; +extern void arch_report_meminfo(struct seq_file *m);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +enum pg_level {</span>
<span class="quote">&gt; +	PG_LEVEL_NONE,</span>
<span class="quote">&gt; +	PG_LEVEL_PTE,</span>
<span class="quote">&gt; +	PG_LEVEL_PMD,</span>
<span class="quote">&gt; +	PG_LEVEL_PUD,</span>
<span class="quote">&gt; +	PG_LEVEL_NUM</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_PROC_FS</span>
<span class="quote">&gt; +extern void update_page_count(int level, unsigned long pages);</span>
<span class="quote">&gt; +extern void split_page_count(int level);</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void update_page_count(int level, unsigned long pages) {}</span>
<span class="quote">&gt; +static inline void split_page_count(int level) {}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS == 2</span>
<span class="quote">&gt;  #include &lt;asm-generic/pgtable-nopmd.h&gt;</span>
<span class="quote">&gt;  #elif CONFIG_PGTABLE_LEVELS == 3</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c</span>
<span class="quote">&gt; index 0a7bee7..77aef0b 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/mmu.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/mmu.c</span>
<span class="quote">&gt; @@ -30,6 +30,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/stop_machine.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/bootmem.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#include &lt;asm/pgtable-types.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/fixmap.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/sections.h&gt;</span>
<span class="quote">&gt; @@ -85,6 +86,7 @@ void split_pmd(pmd_t *pmd, pte_t *pte)</span>
<span class="quote">&gt;  		set_pte(pte, pfn_pte(pfn, prot));</span>
<span class="quote">&gt;  		pfn++;</span>
<span class="quote">&gt;  	} while (pte++, i++, i &lt; PTRS_PER_PTE);</span>
<span class="quote">&gt; +	split_page_count(PG_LEVEL_PMD);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void alloc_init_pte(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt; @@ -93,6 +95,7 @@ static void alloc_init_pte(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt;  				  void *(*alloc)(unsigned long size))</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pte_t *pte;</span>
<span class="quote">&gt; +	unsigned long i = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (pmd_none(*pmd) || pmd_sect(*pmd)) {</span>
<span class="quote">&gt;  		pte = alloc(PTRS_PER_PTE * sizeof(pte_t));</span>
<span class="quote">&gt; @@ -107,7 +110,9 @@ static void alloc_init_pte(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt;  	do {</span>
<span class="quote">&gt;  		set_pte(pte, pfn_pte(pfn, prot));</span>
<span class="quote">&gt;  		pfn++;</span>
<span class="quote">&gt; +		i++;</span>
<span class="quote">&gt;  	} while (pte++, addr += PAGE_SIZE, addr != end);</span>
<span class="quote">&gt; +	update_page_count(PG_LEVEL_PTE, i);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void split_pud(pud_t *old_pud, pmd_t *pmd)</span>
<span class="quote">&gt; @@ -120,6 +125,7 @@ void split_pud(pud_t *old_pud, pmd_t *pmd)</span>
<span class="quote">&gt;  		set_pmd(pmd, __pmd(addr | prot));</span>
<span class="quote">&gt;  		addr += PMD_SIZE;</span>
<span class="quote">&gt;  	} while (pmd++, i++, i &lt; PTRS_PER_PMD);</span>
<span class="quote">&gt; +	split_page_count(PG_LEVEL_PUD);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
<span class="quote">&gt; @@ -129,6 +135,7 @@ static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pmd_t *pmd;</span>
<span class="quote">&gt;  	unsigned long next;</span>
<span class="quote">&gt; +	unsigned long i = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Check for initial section mappings in the pgd/pud and remove them.</span>
<span class="quote">&gt; @@ -159,6 +166,7 @@ static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
<span class="quote">&gt;  			 * Check for previous table entries created during</span>
<span class="quote">&gt;  			 * boot (__create_page_tables) and flush them.</span>
<span class="quote">&gt;  			 */</span>
<span class="quote">&gt; +			i++;</span>
<span class="quote">&gt;  			if (!pmd_none(old_pmd)) {</span>
<span class="quote">&gt;  				flush_tlb_all();</span>
<span class="quote">&gt;  				if (pmd_table(old_pmd)) {</span>
<span class="quote">&gt; @@ -173,6 +181,7 @@ static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		phys += next - addr;</span>
<span class="quote">&gt;  	} while (pmd++, addr = next, addr != end);</span>
<span class="quote">&gt; +	update_page_count(PG_LEVEL_PMD, i);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline bool use_1G_block(unsigned long addr, unsigned long next,</span>
<span class="quote">&gt; @@ -194,6 +203,7 @@ static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pud_t *pud;</span>
<span class="quote">&gt;  	unsigned long next;</span>
<span class="quote">&gt; +	unsigned long i = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (pgd_none(*pgd)) {</span>
<span class="quote">&gt;  		pud = alloc(PTRS_PER_PUD * sizeof(pud_t));</span>
<span class="quote">&gt; @@ -220,6 +230,7 @@ static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
<span class="quote">&gt;  			 *</span>
<span class="quote">&gt;  			 * Look up the old pmd table and free it.</span>
<span class="quote">&gt;  			 */</span>
<span class="quote">&gt; +			i++;</span>
<span class="quote">&gt;  			if (!pud_none(old_pud)) {</span>
<span class="quote">&gt;  				flush_tlb_all();</span>
<span class="quote">&gt;  				if (pud_table(old_pud)) {</span>
<span class="quote">&gt; @@ -233,6 +244,7 @@ static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		phys += next - addr;</span>
<span class="quote">&gt;  	} while (pud++, addr = next, addr != end);</span>
<span class="quote">&gt; +	update_page_count(PG_LEVEL_PUD, i);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/pageattr.c b/arch/arm64/mm/pageattr.c</span>
<span class="quote">&gt; index 7a5ff11..a8257a2 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/pageattr.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/pageattr.c</span>
<span class="quote">&gt; @@ -15,12 +15,47 @@</span>
<span class="quote">&gt;  #include &lt;linux/module.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/sched.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#include &lt;linux/seq_file.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pgalloc.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &quot;mm.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static unsigned long direct_pages_count[PG_LEVEL_NUM];</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void update_page_count(int level, unsigned long pages)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	direct_pages_count[level] += pages;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void split_page_count(int level)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	direct_pages_count[level]--;</span>
<span class="quote">&gt; +	direct_pages_count[level-1] += PTRS_PER_PTE;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	seq_printf(m, &quot;DirectMap%ldk:     %8lu kB\n&quot;, PAGE_SIZE / SZ_1K,</span>
<span class="quote">&gt; +			direct_pages_count[PG_LEVEL_PTE] * PAGE_SIZE / SZ_1K);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#if CONFIG_PGTABLE_LEVELS == 2</span>
<span class="quote">&gt; +	seq_printf(m, &quot;DirectMap%ldM:     %8lu kB\n&quot;, PMD_SIZE / SZ_1M,</span>
<span class="quote">&gt; +			direct_pages_count[PG_LEVEL_PMD] * PMD_SIZE / SZ_1K);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="quote">&gt; +	seq_printf(m, &quot;DirectMap%ldM:     %8lu kB\n&quot;, PMD_SIZE / SZ_1M,</span>
<span class="quote">&gt; +			direct_pages_count[PG_LEVEL_PMD] * PMD_SIZE / SZ_1K);</span>
<span class="quote">&gt; +	seq_printf(m, &quot;DirectMap%ldG:     %8lu kB\n&quot;, PUD_SIZE / SZ_1G,</span>
<span class="quote">&gt; +			direct_pages_count[PG_LEVEL_PUD] * PUD_SIZE  / SZ_1K);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int update_pte_range(struct mm_struct *mm, pmd_t *pmd,</span>
<span class="quote">&gt;  				unsigned long addr, unsigned long end,</span>
<span class="quote">&gt;  				pgprot_t clear, pgprot_t set)</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.7.7</span>
<span class="quote">&gt; </span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=146341">zhong jiang</a> - Dec. 5, 2015, 1:35 p.m.</div>
<pre class="content">
The patch is mainly to show  pagetable number of different level in the direct
mapping. pagetable is created from pud to pte in arm64 , resulting in different
resluts with x86. For instance, The kernel of two-level pages will produce three
types of pagetable.

It can also be used to detect whether there is a large page spliting and merging.
Large page will significantly reduce the TLB miss, and improve the system
performance.
<span class="signed-off-by">
Signed-off-by: zhongjiang &lt;zhongjiang@huawei.com&gt;</span>
---
 arch/arm64/include/asm/pgtable-types.h |   19 +++++++++++++++++
 arch/arm64/mm/mmu.c                    |   12 +++++++++++
 arch/arm64/mm/pageattr.c               |   35 ++++++++++++++++++++++++++++++++
 3 files changed, 66 insertions(+), 0 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/pgtable-types.h b/arch/arm64/include/asm/pgtable-types.h</span>
<span class="p_header">index 2b1bd7e..a0f58d0 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/pgtable-types.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/pgtable-types.h</span>
<span class="p_chunk">@@ -86,6 +86,25 @@</span> <span class="p_context"> typedef pteval_t pgprot_t;</span>
 
 #endif /* STRICT_MM_TYPECHECKS */
 
<span class="p_add">+struct seq_file;</span>
<span class="p_add">+extern void arch_report_meminfo(struct seq_file *m);</span>
<span class="p_add">+</span>
<span class="p_add">+enum pg_level {</span>
<span class="p_add">+	PG_LEVEL_NONE,</span>
<span class="p_add">+	PG_LEVEL_PTE,</span>
<span class="p_add">+	PG_LEVEL_PMD,</span>
<span class="p_add">+	PG_LEVEL_PUD,</span>
<span class="p_add">+	PG_LEVEL_NUM</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_PROC_FS</span>
<span class="p_add">+extern void update_page_count(int level, unsigned long pages);</span>
<span class="p_add">+extern void split_page_count(int level);</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void update_page_count(int level, unsigned long pages) {}</span>
<span class="p_add">+static inline void split_page_count(int level) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #if CONFIG_PGTABLE_LEVELS == 2
 #include &lt;asm-generic/pgtable-nopmd.h&gt;
 #elif CONFIG_PGTABLE_LEVELS == 3
<span class="p_header">diff --git a/arch/arm64/mm/mmu.c b/arch/arm64/mm/mmu.c</span>
<span class="p_header">index 0a7bee7..77aef0b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/mmu.c</span>
<span class="p_header">+++ b/arch/arm64/mm/mmu.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/stop_machine.h&gt;
 #include &lt;linux/bootmem.h&gt;
 
<span class="p_add">+#include &lt;asm/pgtable-types.h&gt;</span>
 #include &lt;asm/cputype.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_chunk">@@ -85,6 +86,7 @@</span> <span class="p_context"> void split_pmd(pmd_t *pmd, pte_t *pte)</span>
 		set_pte(pte, pfn_pte(pfn, prot));
 		pfn++;
 	} while (pte++, i++, i &lt; PTRS_PER_PTE);
<span class="p_add">+	split_page_count(PG_LEVEL_PMD);</span>
 }
 
 static void alloc_init_pte(pmd_t *pmd, unsigned long addr,
<span class="p_chunk">@@ -93,6 +95,7 @@</span> <span class="p_context"> static void alloc_init_pte(pmd_t *pmd, unsigned long addr,</span>
 				  void *(*alloc)(unsigned long size))
 {
 	pte_t *pte;
<span class="p_add">+	unsigned long i = 0;</span>
 
 	if (pmd_none(*pmd) || pmd_sect(*pmd)) {
 		pte = alloc(PTRS_PER_PTE * sizeof(pte_t));
<span class="p_chunk">@@ -107,7 +110,9 @@</span> <span class="p_context"> static void alloc_init_pte(pmd_t *pmd, unsigned long addr,</span>
 	do {
 		set_pte(pte, pfn_pte(pfn, prot));
 		pfn++;
<span class="p_add">+		i++;</span>
 	} while (pte++, addr += PAGE_SIZE, addr != end);
<span class="p_add">+	update_page_count(PG_LEVEL_PTE, i);</span>
 }
 
 void split_pud(pud_t *old_pud, pmd_t *pmd)
<span class="p_chunk">@@ -120,6 +125,7 @@</span> <span class="p_context"> void split_pud(pud_t *old_pud, pmd_t *pmd)</span>
 		set_pmd(pmd, __pmd(addr | prot));
 		addr += PMD_SIZE;
 	} while (pmd++, i++, i &lt; PTRS_PER_PMD);
<span class="p_add">+	split_page_count(PG_LEVEL_PUD);</span>
 }
 
 static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,
<span class="p_chunk">@@ -129,6 +135,7 @@</span> <span class="p_context"> static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
 {
 	pmd_t *pmd;
 	unsigned long next;
<span class="p_add">+	unsigned long i = 0;</span>
 
 	/*
 	 * Check for initial section mappings in the pgd/pud and remove them.
<span class="p_chunk">@@ -159,6 +166,7 @@</span> <span class="p_context"> static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
 			 * Check for previous table entries created during
 			 * boot (__create_page_tables) and flush them.
 			 */
<span class="p_add">+			i++;</span>
 			if (!pmd_none(old_pmd)) {
 				flush_tlb_all();
 				if (pmd_table(old_pmd)) {
<span class="p_chunk">@@ -173,6 +181,7 @@</span> <span class="p_context"> static void alloc_init_pmd(struct mm_struct *mm, pud_t *pud,</span>
 		}
 		phys += next - addr;
 	} while (pmd++, addr = next, addr != end);
<span class="p_add">+	update_page_count(PG_LEVEL_PMD, i);</span>
 }
 
 static inline bool use_1G_block(unsigned long addr, unsigned long next,
<span class="p_chunk">@@ -194,6 +203,7 @@</span> <span class="p_context"> static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
 {
 	pud_t *pud;
 	unsigned long next;
<span class="p_add">+	unsigned long i = 0;</span>
 
 	if (pgd_none(*pgd)) {
 		pud = alloc(PTRS_PER_PUD * sizeof(pud_t));
<span class="p_chunk">@@ -220,6 +230,7 @@</span> <span class="p_context"> static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
 			 *
 			 * Look up the old pmd table and free it.
 			 */
<span class="p_add">+			i++;</span>
 			if (!pud_none(old_pud)) {
 				flush_tlb_all();
 				if (pud_table(old_pud)) {
<span class="p_chunk">@@ -233,6 +244,7 @@</span> <span class="p_context"> static void alloc_init_pud(struct mm_struct *mm, pgd_t *pgd,</span>
 		}
 		phys += next - addr;
 	} while (pud++, addr = next, addr != end);
<span class="p_add">+	update_page_count(PG_LEVEL_PUD, i);</span>
 }
 
 /*
<span class="p_header">diff --git a/arch/arm64/mm/pageattr.c b/arch/arm64/mm/pageattr.c</span>
<span class="p_header">index 7a5ff11..a8257a2 100644</span>
<span class="p_header">--- a/arch/arm64/mm/pageattr.c</span>
<span class="p_header">+++ b/arch/arm64/mm/pageattr.c</span>
<span class="p_chunk">@@ -15,12 +15,47 @@</span> <span class="p_context"></span>
 #include &lt;linux/module.h&gt;
 #include &lt;linux/sched.h&gt;
 
<span class="p_add">+#include &lt;linux/seq_file.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 
 #include &quot;mm.h&quot;
 
<span class="p_add">+static unsigned long direct_pages_count[PG_LEVEL_NUM];</span>
<span class="p_add">+</span>
<span class="p_add">+void update_page_count(int level, unsigned long pages)</span>
<span class="p_add">+{</span>
<span class="p_add">+	direct_pages_count[level] += pages;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void split_page_count(int level)</span>
<span class="p_add">+{</span>
<span class="p_add">+	direct_pages_count[level]--;</span>
<span class="p_add">+	direct_pages_count[level-1] += PTRS_PER_PTE;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void arch_report_meminfo(struct seq_file *m)</span>
<span class="p_add">+{</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m, &quot;DirectMap%ldk:     %8lu kB\n&quot;, PAGE_SIZE / SZ_1K,</span>
<span class="p_add">+			direct_pages_count[PG_LEVEL_PTE] * PAGE_SIZE / SZ_1K);</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS == 2</span>
<span class="p_add">+	seq_printf(m, &quot;DirectMap%ldM:     %8lu kB\n&quot;, PMD_SIZE / SZ_1M,</span>
<span class="p_add">+			direct_pages_count[PG_LEVEL_PMD] * PMD_SIZE / SZ_1K);</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="p_add">+	seq_printf(m, &quot;DirectMap%ldM:     %8lu kB\n&quot;, PMD_SIZE / SZ_1M,</span>
<span class="p_add">+			direct_pages_count[PG_LEVEL_PMD] * PMD_SIZE / SZ_1K);</span>
<span class="p_add">+	seq_printf(m, &quot;DirectMap%ldG:     %8lu kB\n&quot;, PUD_SIZE / SZ_1G,</span>
<span class="p_add">+			direct_pages_count[PG_LEVEL_PUD] * PUD_SIZE  / SZ_1K);</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int update_pte_range(struct mm_struct *mm, pmd_t *pmd,
 				unsigned long addr, unsigned long end,
 				pgprot_t clear, pgprot_t set)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



