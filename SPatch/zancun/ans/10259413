
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[04/13] x86: use generic swiotlb_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [04/13] x86: use generic swiotlb_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 5, 2018, 5:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180305174655.9878-5-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10259413/mbox/"
   >mbox</a>
|
   <a href="/patch/10259413/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10259413/">/patch/10259413/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3566B6016D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 17:48:36 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 265F828BA9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 17:48:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1A0D128BAF; Mon,  5 Mar 2018 17:48:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7857D28BB3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 17:48:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932258AbeCERsa (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 5 Mar 2018 12:48:30 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:60330 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752639AbeCERrP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 5 Mar 2018 12:47:15 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=wHhBpgdgoZwkGEt0LphTdnKw/K518bLdZJLvHdb7gQw=;
	b=JG4dTTSesMPw1OsJrRNLYErjQ
	JGN0Mf7LaINTbMfIeB3brf1xR5StQgzP7LST1bE3Azt3JfrYlVmXaTIxT8KqwkGwXu0hxVQ+QwJ+N
	g6+58hYjbr04vQQ5QwlBh7X7zjkiNfdXWhuEhjw4SViL6V/Ssn5/iNcx/vtG+QMkNYv8eI6+WoYNb
	uOzbFFiJggjVnylQomXk6KjWLEiwGF5rSXLJH/BP03UbrXKi49xv9WQ6+HsjlmfcGlninZ/JhdkR/
	w4hAzmOaZ6xKyRa7a+1WT+U6OoiL+41cDyv2w0qKU73vUgvtlGoPeRAuW5Lf4aRjfelL4l29qPDgJ
	wLKYpcwaQ==;
Received: from [209.116.154.70] (helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.89 #1 (Red Hat Linux))
	id 1esuCR-0002su-O8; Mon, 05 Mar 2018 17:46:59 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: x86@kernel.org
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	David Woodhouse &lt;dwmw2@infradead.org&gt;, Muli Ben-Yehuda &lt;mulix@mulix.org&gt;,
	Jon Mason &lt;jdmason@kudzu.us&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Subject: [PATCH 04/13] x86: use generic swiotlb_ops
Date: Mon,  5 Mar 2018 09:46:46 -0800
Message-Id: &lt;20180305174655.9878-5-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20180305174655.9878-1-hch@lst.de&gt;
References: &lt;20180305174655.9878-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 5, 2018, 5:46 p.m.</div>
<pre class="content">
The generic swiotlb dma ops were based on the x86 ones and provide
equivalent functionality, so use them.

Also fix the sta2x11 case.  For that SOC the dma map ops need an
additional physical to dma address translations.  For swiotlb buffers
that is done throught the phys_to_dma helper, but the sta2x11_dma_ops
also added an additional translation on the return value from
x86_swiotlb_alloc_coherent, which is only correct if that functions
returns a direct allocation and not a swiotlb buffer.  With the
generic swiotlb and dma-direct code phys_to_dma is not always used
and the separate sta2x11_dma_ops can be replaced with a simple
bit that marks if the additional physical to dma address translation
is needed.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 arch/x86/include/asm/device.h  |  3 +++
 arch/x86/include/asm/swiotlb.h |  8 -------
 arch/x86/kernel/pci-swiotlb.c  | 47 +-----------------------------------------
 arch/x86/pci/sta2x11-fixup.c   | 46 +++++------------------------------------
 4 files changed, 9 insertions(+), 95 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - March 8, 2018, 4:03 p.m.</div>
<pre class="content">
Hi Christoph,

On 05/03/18 17:46, Christoph Hellwig wrote:
<span class="quote">&gt; The generic swiotlb dma ops were based on the x86 ones and provide</span>
<span class="quote">&gt; equivalent functionality, so use them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Also fix the sta2x11 case.  For that SOC the dma map ops need an</span>
<span class="quote">&gt; additional physical to dma address translations.  For swiotlb buffers</span>
<span class="quote">&gt; that is done throught the phys_to_dma helper, but the sta2x11_dma_ops</span>
<span class="quote">&gt; also added an additional translation on the return value from</span>
<span class="quote">&gt; x86_swiotlb_alloc_coherent, which is only correct if that functions</span>
<span class="quote">&gt; returns a direct allocation and not a swiotlb buffer.  With the</span>
<span class="quote">&gt; generic swiotlb and dma-direct code phys_to_dma is not always used</span>
<span class="quote">&gt; and the separate sta2x11_dma_ops can be replaced with a simple</span>
<span class="quote">&gt; bit that marks if the additional physical to dma address translation</span>
<span class="quote">&gt; is needed.</span>

FWIW, last time I looked I got the impression that STA2x11 could just 
use dma_pfn_offset - the comments and a2p/p2a logic in sta2x11-fixup.c 
certainly imply that the underlying hardware situation is pretty much 
exactly that for which dma_pfn_offset exists.

Robin.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   arch/x86/include/asm/device.h  |  3 +++</span>
<span class="quote">&gt;   arch/x86/include/asm/swiotlb.h |  8 -------</span>
<span class="quote">&gt;   arch/x86/kernel/pci-swiotlb.c  | 47 +-----------------------------------------</span>
<span class="quote">&gt;   arch/x86/pci/sta2x11-fixup.c   | 46 +++++------------------------------------</span>
<span class="quote">&gt;   4 files changed, 9 insertions(+), 95 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/device.h b/arch/x86/include/asm/device.h</span>
<span class="quote">&gt; index 5e12c63b47aa..812bd6c5d602 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/device.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/device.h</span>
<span class="quote">&gt; @@ -6,6 +6,9 @@ struct dev_archdata {</span>
<span class="quote">&gt;   #if defined(CONFIG_INTEL_IOMMU) || defined(CONFIG_AMD_IOMMU)</span>
<span class="quote">&gt;   	void *iommu; /* hook for IOMMU specific extension */</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt; +#ifdef CONFIG_STA2X11</span>
<span class="quote">&gt; +	bool is_sta2x11 : 1;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   #if defined(CONFIG_X86_DEV_DMA_OPS) &amp;&amp; defined(CONFIG_PCI_DOMAINS)</span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/swiotlb.h b/arch/x86/include/asm/swiotlb.h</span>
<span class="quote">&gt; index 1c6a6cb230ff..ff6c92eff035 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/swiotlb.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/swiotlb.h</span>
<span class="quote">&gt; @@ -27,12 +27,4 @@ static inline void pci_swiotlb_late_init(void)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -extern void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
<span class="quote">&gt; -					dma_addr_t *dma_handle, gfp_t flags,</span>
<span class="quote">&gt; -					unsigned long attrs);</span>
<span class="quote">&gt; -extern void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
<span class="quote">&gt; -					void *vaddr, dma_addr_t dma_addr,</span>
<span class="quote">&gt; -					unsigned long attrs);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;   #endif /* _ASM_X86_SWIOTLB_H */</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; index bcb6a9bf64ad..661583662430 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="quote">&gt; @@ -17,51 +17,6 @@</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   int swiotlb __read_mostly;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
<span class="quote">&gt; -					dma_addr_t *dma_handle, gfp_t flags,</span>
<span class="quote">&gt; -					unsigned long attrs)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	void *vaddr;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	/*</span>
<span class="quote">&gt; -	 * Don&#39;t print a warning when the first allocation attempt fails.</span>
<span class="quote">&gt; -	 * swiotlb_alloc_coherent() will print a warning when the DMA</span>
<span class="quote">&gt; -	 * memory allocation ultimately failed.</span>
<span class="quote">&gt; -	 */</span>
<span class="quote">&gt; -	flags |= __GFP_NOWARN;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	vaddr = dma_direct_alloc(hwdev, size, dma_handle, flags, attrs);</span>
<span class="quote">&gt; -	if (vaddr)</span>
<span class="quote">&gt; -		return vaddr;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	return swiotlb_alloc_coherent(hwdev, size, dma_handle, flags);</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
<span class="quote">&gt; -				      void *vaddr, dma_addr_t dma_addr,</span>
<span class="quote">&gt; -				      unsigned long attrs)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	if (is_swiotlb_buffer(dma_to_phys(dev, dma_addr)))</span>
<span class="quote">&gt; -		swiotlb_free_coherent(dev, size, vaddr, dma_addr);</span>
<span class="quote">&gt; -	else</span>
<span class="quote">&gt; -		dma_direct_free(dev, size, vaddr, dma_addr, attrs);</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -static const struct dma_map_ops x86_swiotlb_dma_ops = {</span>
<span class="quote">&gt; -	.mapping_error = swiotlb_dma_mapping_error,</span>
<span class="quote">&gt; -	.alloc = x86_swiotlb_alloc_coherent,</span>
<span class="quote">&gt; -	.free = x86_swiotlb_free_coherent,</span>
<span class="quote">&gt; -	.sync_single_for_cpu = swiotlb_sync_single_for_cpu,</span>
<span class="quote">&gt; -	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="quote">&gt; -	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,</span>
<span class="quote">&gt; -	.sync_sg_for_device = swiotlb_sync_sg_for_device,</span>
<span class="quote">&gt; -	.map_sg = swiotlb_map_sg_attrs,</span>
<span class="quote">&gt; -	.unmap_sg = swiotlb_unmap_sg_attrs,</span>
<span class="quote">&gt; -	.map_page = swiotlb_map_page,</span>
<span class="quote">&gt; -	.unmap_page = swiotlb_unmap_page,</span>
<span class="quote">&gt; -	.dma_supported = NULL,</span>
<span class="quote">&gt; -};</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt;    * pci_swiotlb_detect_override - set swiotlb to 1 if necessary</span>
<span class="quote">&gt;    *</span>
<span class="quote">&gt; @@ -111,7 +66,7 @@ void __init pci_swiotlb_init(void)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	if (swiotlb) {</span>
<span class="quote">&gt;   		swiotlb_init(0);</span>
<span class="quote">&gt; -		dma_ops = &amp;x86_swiotlb_dma_ops;</span>
<span class="quote">&gt; +		dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; diff --git a/arch/x86/pci/sta2x11-fixup.c b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="quote">&gt; index 6c712fe11bdc..eac58e03f43c 100644</span>
<span class="quote">&gt; --- a/arch/x86/pci/sta2x11-fixup.c</span>
<span class="quote">&gt; +++ b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="quote">&gt; @@ -159,43 +159,6 @@ static dma_addr_t a2p(dma_addr_t a, struct pci_dev *pdev)</span>
<span class="quote">&gt;   	return p;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -/**</span>
<span class="quote">&gt; - * sta2x11_swiotlb_alloc_coherent - Allocate swiotlb bounce buffers</span>
<span class="quote">&gt; - *     returns virtual address. This is the only &quot;special&quot; function here.</span>
<span class="quote">&gt; - * @dev: PCI device</span>
<span class="quote">&gt; - * @size: Size of the buffer</span>
<span class="quote">&gt; - * @dma_handle: DMA address</span>
<span class="quote">&gt; - * @flags: memory flags</span>
<span class="quote">&gt; - */</span>
<span class="quote">&gt; -static void *sta2x11_swiotlb_alloc_coherent(struct device *dev,</span>
<span class="quote">&gt; -					    size_t size,</span>
<span class="quote">&gt; -					    dma_addr_t *dma_handle,</span>
<span class="quote">&gt; -					    gfp_t flags,</span>
<span class="quote">&gt; -					    unsigned long attrs)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	void *vaddr;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	vaddr = x86_swiotlb_alloc_coherent(dev, size, dma_handle, flags, attrs);</span>
<span class="quote">&gt; -	*dma_handle = p2a(*dma_handle, to_pci_dev(dev));</span>
<span class="quote">&gt; -	return vaddr;</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -/* We have our own dma_ops: the same as swiotlb but from alloc (above) */</span>
<span class="quote">&gt; -static const struct dma_map_ops sta2x11_dma_ops = {</span>
<span class="quote">&gt; -	.alloc = sta2x11_swiotlb_alloc_coherent,</span>
<span class="quote">&gt; -	.free = x86_swiotlb_free_coherent,</span>
<span class="quote">&gt; -	.map_page = swiotlb_map_page,</span>
<span class="quote">&gt; -	.unmap_page = swiotlb_unmap_page,</span>
<span class="quote">&gt; -	.map_sg = swiotlb_map_sg_attrs,</span>
<span class="quote">&gt; -	.unmap_sg = swiotlb_unmap_sg_attrs,</span>
<span class="quote">&gt; -	.sync_single_for_cpu = swiotlb_sync_single_for_cpu,</span>
<span class="quote">&gt; -	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="quote">&gt; -	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,</span>
<span class="quote">&gt; -	.sync_sg_for_device = swiotlb_sync_sg_for_device,</span>
<span class="quote">&gt; -	.mapping_error = swiotlb_dma_mapping_error,</span>
<span class="quote">&gt; -	.dma_supported = dma_direct_supported,</span>
<span class="quote">&gt; -};</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;   /* At setup time, we use our own ops if the device is a ConneXt one */</span>
<span class="quote">&gt;   static void sta2x11_setup_pdev(struct pci_dev *pdev)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; @@ -205,7 +168,8 @@ static void sta2x11_setup_pdev(struct pci_dev *pdev)</span>
<span class="quote">&gt;   		return;</span>
<span class="quote">&gt;   	pci_set_consistent_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);</span>
<span class="quote">&gt;   	pci_set_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);</span>
<span class="quote">&gt; -	pdev-&gt;dev.dma_ops = &amp;sta2x11_dma_ops;</span>
<span class="quote">&gt; +	pdev-&gt;dev.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt; +	pdev-&gt;dev.archdata.is_sta2x11 = true;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	/* We must enable all devices as master, for audio DMA to work */</span>
<span class="quote">&gt;   	pci_set_master(pdev);</span>
<span class="quote">&gt; @@ -225,7 +189,7 @@ bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct sta2x11_mapping *map;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops) {</span>
<span class="quote">&gt; +	if (!dev-&gt;archdata.is_sta2x11) {</span>
<span class="quote">&gt;   		if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt;   			return false;</span>
<span class="quote">&gt;   		return addr + size - 1 &lt;= *dev-&gt;dma_mask;</span>
<span class="quote">&gt; @@ -249,7 +213,7 @@ bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
<span class="quote">&gt;    */</span>
<span class="quote">&gt;   dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops)</span>
<span class="quote">&gt; +	if (!dev-&gt;archdata.is_sta2x11)</span>
<span class="quote">&gt;   		return paddr;</span>
<span class="quote">&gt;   	return p2a(paddr, to_pci_dev(dev));</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; @@ -261,7 +225,7 @@ dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
<span class="quote">&gt;    */</span>
<span class="quote">&gt;   phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops)</span>
<span class="quote">&gt; +	if (!dev-&gt;archdata.is_sta2x11)</span>
<span class="quote">&gt;   		return daddr;</span>
<span class="quote">&gt;   	return a2p(daddr, to_pci_dev(dev));</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 12, 2018, 8:26 a.m.</div>
<pre class="content">
On Thu, Mar 08, 2018 at 04:03:12PM +0000, Robin Murphy wrote:
<span class="quote">&gt;&gt; Also fix the sta2x11 case.  For that SOC the dma map ops need an</span>
<span class="quote">&gt;&gt; additional physical to dma address translations.  For swiotlb buffers</span>
<span class="quote">&gt;&gt; that is done throught the phys_to_dma helper, but the sta2x11_dma_ops</span>
<span class="quote">&gt;&gt; also added an additional translation on the return value from</span>
<span class="quote">&gt;&gt; x86_swiotlb_alloc_coherent, which is only correct if that functions</span>
<span class="quote">&gt;&gt; returns a direct allocation and not a swiotlb buffer.  With the</span>
<span class="quote">&gt;&gt; generic swiotlb and dma-direct code phys_to_dma is not always used</span>
<span class="quote">&gt;&gt; and the separate sta2x11_dma_ops can be replaced with a simple</span>
<span class="quote">&gt;&gt; bit that marks if the additional physical to dma address translation</span>
<span class="quote">&gt;&gt; is needed.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; FWIW, last time I looked I got the impression that STA2x11 could just use </span>
<span class="quote">&gt; dma_pfn_offset - the comments and a2p/p2a logic in sta2x11-fixup.c </span>
<span class="quote">&gt; certainly imply that the underlying hardware situation is pretty much </span>
<span class="quote">&gt; exactly that for which dma_pfn_offset exists.</span>

That probably is the case.  But without access to the hardware I don&#39;t
feel like doing this deeper surgery.  And even without that this case
provides a great simplification.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/device.h b/arch/x86/include/asm/device.h</span>
<span class="p_header">index 5e12c63b47aa..812bd6c5d602 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/device.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/device.h</span>
<span class="p_chunk">@@ -6,6 +6,9 @@</span> <span class="p_context"> struct dev_archdata {</span>
 #if defined(CONFIG_INTEL_IOMMU) || defined(CONFIG_AMD_IOMMU)
 	void *iommu; /* hook for IOMMU specific extension */
 #endif
<span class="p_add">+#ifdef CONFIG_STA2X11</span>
<span class="p_add">+	bool is_sta2x11 : 1;</span>
<span class="p_add">+#endif</span>
 };
 
 #if defined(CONFIG_X86_DEV_DMA_OPS) &amp;&amp; defined(CONFIG_PCI_DOMAINS)
<span class="p_header">diff --git a/arch/x86/include/asm/swiotlb.h b/arch/x86/include/asm/swiotlb.h</span>
<span class="p_header">index 1c6a6cb230ff..ff6c92eff035 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/swiotlb.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/swiotlb.h</span>
<span class="p_chunk">@@ -27,12 +27,4 @@</span> <span class="p_context"> static inline void pci_swiotlb_late_init(void)</span>
 {
 }
 #endif
<span class="p_del">-</span>
<span class="p_del">-extern void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
<span class="p_del">-					dma_addr_t *dma_handle, gfp_t flags,</span>
<span class="p_del">-					unsigned long attrs);</span>
<span class="p_del">-extern void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
<span class="p_del">-					void *vaddr, dma_addr_t dma_addr,</span>
<span class="p_del">-					unsigned long attrs);</span>
<span class="p_del">-</span>
 #endif /* _ASM_X86_SWIOTLB_H */
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index bcb6a9bf64ad..661583662430 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -17,51 +17,6 @@</span> <span class="p_context"></span>
 
 int swiotlb __read_mostly;
 
<span class="p_del">-void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
<span class="p_del">-					dma_addr_t *dma_handle, gfp_t flags,</span>
<span class="p_del">-					unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	void *vaddr;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Don&#39;t print a warning when the first allocation attempt fails.</span>
<span class="p_del">-	 * swiotlb_alloc_coherent() will print a warning when the DMA</span>
<span class="p_del">-	 * memory allocation ultimately failed.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	flags |= __GFP_NOWARN;</span>
<span class="p_del">-</span>
<span class="p_del">-	vaddr = dma_direct_alloc(hwdev, size, dma_handle, flags, attrs);</span>
<span class="p_del">-	if (vaddr)</span>
<span class="p_del">-		return vaddr;</span>
<span class="p_del">-</span>
<span class="p_del">-	return swiotlb_alloc_coherent(hwdev, size, dma_handle, flags);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
<span class="p_del">-				      void *vaddr, dma_addr_t dma_addr,</span>
<span class="p_del">-				      unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (is_swiotlb_buffer(dma_to_phys(dev, dma_addr)))</span>
<span class="p_del">-		swiotlb_free_coherent(dev, size, vaddr, dma_addr);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		dma_direct_free(dev, size, vaddr, dma_addr, attrs);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static const struct dma_map_ops x86_swiotlb_dma_ops = {</span>
<span class="p_del">-	.mapping_error = swiotlb_dma_mapping_error,</span>
<span class="p_del">-	.alloc = x86_swiotlb_alloc_coherent,</span>
<span class="p_del">-	.free = x86_swiotlb_free_coherent,</span>
<span class="p_del">-	.sync_single_for_cpu = swiotlb_sync_single_for_cpu,</span>
<span class="p_del">-	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="p_del">-	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,</span>
<span class="p_del">-	.sync_sg_for_device = swiotlb_sync_sg_for_device,</span>
<span class="p_del">-	.map_sg = swiotlb_map_sg_attrs,</span>
<span class="p_del">-	.unmap_sg = swiotlb_unmap_sg_attrs,</span>
<span class="p_del">-	.map_page = swiotlb_map_page,</span>
<span class="p_del">-	.unmap_page = swiotlb_unmap_page,</span>
<span class="p_del">-	.dma_supported = NULL,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 /*
  * pci_swiotlb_detect_override - set swiotlb to 1 if necessary
  *
<span class="p_chunk">@@ -111,7 +66,7 @@</span> <span class="p_context"> void __init pci_swiotlb_init(void)</span>
 {
 	if (swiotlb) {
 		swiotlb_init(0);
<span class="p_del">-		dma_ops = &amp;x86_swiotlb_dma_ops;</span>
<span class="p_add">+		dma_ops = &amp;swiotlb_dma_ops;</span>
 	}
 }
 
<span class="p_header">diff --git a/arch/x86/pci/sta2x11-fixup.c b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">index 6c712fe11bdc..eac58e03f43c 100644</span>
<span class="p_header">--- a/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">+++ b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_chunk">@@ -159,43 +159,6 @@</span> <span class="p_context"> static dma_addr_t a2p(dma_addr_t a, struct pci_dev *pdev)</span>
 	return p;
 }
 
<span class="p_del">-/**</span>
<span class="p_del">- * sta2x11_swiotlb_alloc_coherent - Allocate swiotlb bounce buffers</span>
<span class="p_del">- *     returns virtual address. This is the only &quot;special&quot; function here.</span>
<span class="p_del">- * @dev: PCI device</span>
<span class="p_del">- * @size: Size of the buffer</span>
<span class="p_del">- * @dma_handle: DMA address</span>
<span class="p_del">- * @flags: memory flags</span>
<span class="p_del">- */</span>
<span class="p_del">-static void *sta2x11_swiotlb_alloc_coherent(struct device *dev,</span>
<span class="p_del">-					    size_t size,</span>
<span class="p_del">-					    dma_addr_t *dma_handle,</span>
<span class="p_del">-					    gfp_t flags,</span>
<span class="p_del">-					    unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	void *vaddr;</span>
<span class="p_del">-</span>
<span class="p_del">-	vaddr = x86_swiotlb_alloc_coherent(dev, size, dma_handle, flags, attrs);</span>
<span class="p_del">-	*dma_handle = p2a(*dma_handle, to_pci_dev(dev));</span>
<span class="p_del">-	return vaddr;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/* We have our own dma_ops: the same as swiotlb but from alloc (above) */</span>
<span class="p_del">-static const struct dma_map_ops sta2x11_dma_ops = {</span>
<span class="p_del">-	.alloc = sta2x11_swiotlb_alloc_coherent,</span>
<span class="p_del">-	.free = x86_swiotlb_free_coherent,</span>
<span class="p_del">-	.map_page = swiotlb_map_page,</span>
<span class="p_del">-	.unmap_page = swiotlb_unmap_page,</span>
<span class="p_del">-	.map_sg = swiotlb_map_sg_attrs,</span>
<span class="p_del">-	.unmap_sg = swiotlb_unmap_sg_attrs,</span>
<span class="p_del">-	.sync_single_for_cpu = swiotlb_sync_single_for_cpu,</span>
<span class="p_del">-	.sync_single_for_device = swiotlb_sync_single_for_device,</span>
<span class="p_del">-	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,</span>
<span class="p_del">-	.sync_sg_for_device = swiotlb_sync_sg_for_device,</span>
<span class="p_del">-	.mapping_error = swiotlb_dma_mapping_error,</span>
<span class="p_del">-	.dma_supported = dma_direct_supported,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 /* At setup time, we use our own ops if the device is a ConneXt one */
 static void sta2x11_setup_pdev(struct pci_dev *pdev)
 {
<span class="p_chunk">@@ -205,7 +168,8 @@</span> <span class="p_context"> static void sta2x11_setup_pdev(struct pci_dev *pdev)</span>
 		return;
 	pci_set_consistent_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);
 	pci_set_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);
<span class="p_del">-	pdev-&gt;dev.dma_ops = &amp;sta2x11_dma_ops;</span>
<span class="p_add">+	pdev-&gt;dev.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="p_add">+	pdev-&gt;dev.archdata.is_sta2x11 = true;</span>
 
 	/* We must enable all devices as master, for audio DMA to work */
 	pci_set_master(pdev);
<span class="p_chunk">@@ -225,7 +189,7 @@</span> <span class="p_context"> bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 {
 	struct sta2x11_mapping *map;
 
<span class="p_del">-	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops) {</span>
<span class="p_add">+	if (!dev-&gt;archdata.is_sta2x11) {</span>
 		if (!dev-&gt;dma_mask)
 			return false;
 		return addr + size - 1 &lt;= *dev-&gt;dma_mask;
<span class="p_chunk">@@ -249,7 +213,7 @@</span> <span class="p_context"> bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
  */
 dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
 {
<span class="p_del">-	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops)</span>
<span class="p_add">+	if (!dev-&gt;archdata.is_sta2x11)</span>
 		return paddr;
 	return p2a(paddr, to_pci_dev(dev));
 }
<span class="p_chunk">@@ -261,7 +225,7 @@</span> <span class="p_context"> dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)</span>
  */
 phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
 {
<span class="p_del">-	if (dev-&gt;dma_ops != &amp;sta2x11_dma_ops)</span>
<span class="p_add">+	if (!dev-&gt;archdata.is_sta2x11)</span>
 		return daddr;
 	return a2p(daddr, to_pci_dev(dev));
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



