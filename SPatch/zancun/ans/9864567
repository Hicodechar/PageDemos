
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>gigantic hugepages vs. movable zones - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    gigantic hugepages vs. movable zones</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 26, 2017, 10:50 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170726105004.GI2981@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9864567/mbox/"
   >mbox</a>
|
   <a href="/patch/9864567/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9864567/">/patch/9864567/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5A08E6038C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Jul 2017 10:50:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 38FEC28470
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Jul 2017 10:50:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2DE9528747; Wed, 26 Jul 2017 10:50:13 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BB78228470
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Jul 2017 10:50:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751454AbdGZKuJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 26 Jul 2017 06:50:09 -0400
Received: from mx2.suse.de ([195.135.220.15]:47998 &quot;EHLO mx1.suse.de&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750886AbdGZKuI (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 26 Jul 2017 06:50:08 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx1.suse.de (Postfix) with ESMTP id 92359AB22;
	Wed, 26 Jul 2017 10:50:06 +0000 (UTC)
Date: Wed, 26 Jul 2017 12:50:04 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Luiz Capitulino &lt;lcapitulino@redhat.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: linux-mm@kvack.org, LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: gigantic hugepages vs. movable zones
Message-ID: &lt;20170726105004.GI2981@dhcp22.suse.cz&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 26, 2017, 10:50 a.m.</div>
<pre class="content">
Hi,
I&#39;ve just noticed that alloc_gigantic_page ignores movability of the
gigantic page and it uses any existing zone. Considering that
hugepage_migration_supported only supports 2MB and pgd level hugepages
then 1GB pages are not migratable and as such allocating them from a
movable zone will break the basic expectation of this zone. Standard
hugetlb allocations try to avoid that by using htlb_alloc_mask and I
believe we should do the same for gigantic pages as well.

I suspect this behavior is not intentional. What do you think about the
following untested patch?
---
From 542d32c1eca7dcf38afca1a91bca4a472f6e8651 Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Wed, 26 Jul 2017 12:43:43 +0200
Subject: [PATCH] mm, hugetlb: do not allocate non-migrateable gigantic pages
 from movable zones

alloc_gigantic_page doesn&#39;t consider movability of the gigantic hugetlb
when scanning eligible ranges for the allocation. As 1GB hugetlb pages
are not movable currently this can break the movable zone assumption
that all allocations are migrateable and as such break memory hotplug.

Reorganize the code and use the standard zonelist allocations scheme
that we use for standard hugetbl pages. htlb_alloc_mask will ensure that
only migratable hugetlb pages will ever see a movable zone.

Fixes: 944d9fec8d7a (&quot;hugetlb: add support for gigantic page allocation at runtime&quot;)
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 mm/hugetlb.c | 35 ++++++++++++++++++++---------------
 1 file changed, 20 insertions(+), 15 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - July 27, 2017, 2:22 a.m.</div>
<pre class="content">
Michal Hocko &lt;mhocko@kernel.org&gt; writes:
<span class="quote">
&gt; Hi,</span>
<span class="quote">&gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; following untested patch?</span>


I also noticed an unrelated issue with the usage of
start_isolate_page_range. On error we set the migrate type to
MIGRATE_MOVABLE. That may conflict with CMA pages ? Wondering whether
we should check for page&#39;s pageblock migrate type in
pfn_range_valid_gigantic() ?

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 27, 2017, 7:28 a.m.</div>
<pre class="content">
On Thu 27-07-17 07:52:08, Aneesh Kumar K.V wrote:
<span class="quote">&gt; Michal Hocko &lt;mhocko@kernel.org&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Hi,</span>
<span class="quote">&gt; &gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; &gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; &gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; &gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; &gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; &gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; &gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; &gt; following untested patch?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I also noticed an unrelated issue with the usage of</span>
<span class="quote">&gt; start_isolate_page_range. On error we set the migrate type to</span>
<span class="quote">&gt; MIGRATE_MOVABLE.</span>

Why that should be a problem? I think it is perfectly OK to have
MIGRATE_MOVABLE pageblocks inside kernel zones.
<span class="quote">
&gt; That may conflict with CMA pages ?</span>

How?
<span class="quote">
&gt; Wondering whether we should check for page&#39;s pageblock migrate type in</span>
<span class="quote">&gt; pfn_range_valid_gigantic() ?</span>

I do not think so. Migrate type is just too lowlevel for
pfn_range_valid_gigantic. If something like that is really needed then
it should go down the CMA/alloc_contig_range path.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - July 27, 2017, 8 a.m.</div>
<pre class="content">
On 07/27/2017 12:58 PM, Michal Hocko wrote:
<span class="quote">&gt; On Thu 27-07-17 07:52:08, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt; Michal Hocko &lt;mhocko@kernel.org&gt; writes:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt;&gt;&gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt;&gt;&gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt;&gt;&gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt;&gt;&gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt;&gt;&gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt;&gt;&gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt;&gt;&gt; following untested patch?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I also noticed an unrelated issue with the usage of</span>
<span class="quote">&gt;&gt; start_isolate_page_range. On error we set the migrate type to</span>
<span class="quote">&gt;&gt; MIGRATE_MOVABLE.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why that should be a problem? I think it is perfectly OK to have</span>
<span class="quote">&gt; MIGRATE_MOVABLE pageblocks inside kernel zones.</span>
<span class="quote">&gt; </span>

we can pick pages with migrate type movable and if we fail to isolate 
won&#39;t we set the migrate type of that pages to MOVABLE ?

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 27, 2017, 8:12 a.m.</div>
<pre class="content">
On Thu 27-07-17 13:30:31, Aneesh Kumar K.V wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 07/27/2017 12:58 PM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt;On Thu 27-07-17 07:52:08, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt; &gt;&gt;Michal Hocko &lt;mhocko@kernel.org&gt; writes:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;Hi,</span>
<span class="quote">&gt; &gt;&gt;&gt;I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; &gt;&gt;&gt;gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; &gt;&gt;&gt;hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; &gt;&gt;&gt;then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; &gt;&gt;&gt;movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; &gt;&gt;&gt;hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; &gt;&gt;&gt;believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; &gt;&gt;&gt;following untested patch?</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;I also noticed an unrelated issue with the usage of</span>
<span class="quote">&gt; &gt;&gt;start_isolate_page_range. On error we set the migrate type to</span>
<span class="quote">&gt; &gt;&gt;MIGRATE_MOVABLE.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Why that should be a problem? I think it is perfectly OK to have</span>
<span class="quote">&gt; &gt;MIGRATE_MOVABLE pageblocks inside kernel zones.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; we can pick pages with migrate type movable and if we fail to isolate won&#39;t</span>
<span class="quote">&gt; we set the migrate type of that pages to MOVABLE ?</span>

I do not see an immediate problem. GFP_KERNEL allocations can fallback
to movable migrate pageblocks AFAIR. But I am not very much familiar
with migratetypes. Vlastimil, could you have a look please?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 27, 2017, 8:22 a.m.</div>
<pre class="content">
[CC for real]

On Thu 27-07-17 10:12:36, Michal Hocko wrote:
<span class="quote">&gt; On Thu 27-07-17 13:30:31, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On 07/27/2017 12:58 PM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt;On Thu 27-07-17 07:52:08, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt; &gt; &gt;&gt;Michal Hocko &lt;mhocko@kernel.org&gt; writes:</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;Hi,</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; &gt; &gt;&gt;&gt;following untested patch?</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;I also noticed an unrelated issue with the usage of</span>
<span class="quote">&gt; &gt; &gt;&gt;start_isolate_page_range. On error we set the migrate type to</span>
<span class="quote">&gt; &gt; &gt;&gt;MIGRATE_MOVABLE.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Why that should be a problem? I think it is perfectly OK to have</span>
<span class="quote">&gt; &gt; &gt;MIGRATE_MOVABLE pageblocks inside kernel zones.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; we can pick pages with migrate type movable and if we fail to isolate won&#39;t</span>
<span class="quote">&gt; &gt; we set the migrate type of that pages to MOVABLE ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I do not see an immediate problem. GFP_KERNEL allocations can fallback</span>
<span class="quote">&gt; to movable migrate pageblocks AFAIR. But I am not very much familiar</span>
<span class="quote">&gt; with migratetypes. Vlastimil, could you have a look please?</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - July 27, 2017, 11:56 a.m.</div>
<pre class="content">
On 07/27/2017 10:22 AM, Michal Hocko wrote:
<span class="quote">&gt; [CC for real]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Thu 27-07-17 10:12:36, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt; On Thu 27-07-17 13:30:31, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 07/27/2017 12:58 PM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Thu 27-07-17 07:52:08, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Michal Hocko &lt;mhocko@kernel.org&gt; writes:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; following untested patch?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I also noticed an unrelated issue with the usage of</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; start_isolate_page_range. On error we set the migrate type to</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; MIGRATE_MOVABLE.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Why that should be a problem? I think it is perfectly OK to have</span>
<span class="quote">&gt;&gt;&gt;&gt; MIGRATE_MOVABLE pageblocks inside kernel zones.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; we can pick pages with migrate type movable and if we fail to isolate won&#39;t</span>

                                        ^ CMA
<span class="quote">
&gt;&gt;&gt; we set the migrate type of that pages to MOVABLE ?</span>

Yes, it seems we can silently kill CMA pageblocks in such case. Joonsoo,
can you check?
<span class="quote">
&gt;&gt;</span>
<span class="quote">&gt;&gt; I do not see an immediate problem. GFP_KERNEL allocations can fallback</span>
<span class="quote">&gt;&gt; to movable migrate pageblocks AFAIR. But I am not very much familiar</span>
<span class="quote">&gt;&gt; with migratetypes. Vlastimil, could you have a look please?</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 28, 2017, 8:48 p.m.</div>
<pre class="content">
On 07/26/2017 03:50 AM, Michal Hocko wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; following untested patch?</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; From 542d32c1eca7dcf38afca1a91bca4a472f6e8651 Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Date: Wed, 26 Jul 2017 12:43:43 +0200</span>
<span class="quote">&gt; Subject: [PATCH] mm, hugetlb: do not allocate non-migrateable gigantic pages</span>
<span class="quote">&gt;  from movable zones</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; alloc_gigantic_page doesn&#39;t consider movability of the gigantic hugetlb</span>
<span class="quote">&gt; when scanning eligible ranges for the allocation. As 1GB hugetlb pages</span>
<span class="quote">&gt; are not movable currently this can break the movable zone assumption</span>
<span class="quote">&gt; that all allocations are migrateable and as such break memory hotplug.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reorganize the code and use the standard zonelist allocations scheme</span>
<span class="quote">&gt; that we use for standard hugetbl pages. htlb_alloc_mask will ensure that</span>
<span class="quote">&gt; only migratable hugetlb pages will ever see a movable zone.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 944d9fec8d7a (&quot;hugetlb: add support for gigantic page allocation at runtime&quot;)</span>
<span class="quote">&gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>

This seems reasonable to me, and I like the fact that the code is more
like the default huge page case.  I don&#39;t see any issues with the code.
I did some simple smoke testing of allocating 1G pages with the new code
and ensuring they ended up as expected.
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - July 31, 2017, 6:47 a.m.</div>
<pre class="content">
On Fri 28-07-17 13:48:28, Mike Kravetz wrote:
<span class="quote">&gt; On 07/26/2017 03:50 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; Hi,</span>
<span class="quote">&gt; &gt; I&#39;ve just noticed that alloc_gigantic_page ignores movability of the</span>
<span class="quote">&gt; &gt; gigantic page and it uses any existing zone. Considering that</span>
<span class="quote">&gt; &gt; hugepage_migration_supported only supports 2MB and pgd level hugepages</span>
<span class="quote">&gt; &gt; then 1GB pages are not migratable and as such allocating them from a</span>
<span class="quote">&gt; &gt; movable zone will break the basic expectation of this zone. Standard</span>
<span class="quote">&gt; &gt; hugetlb allocations try to avoid that by using htlb_alloc_mask and I</span>
<span class="quote">&gt; &gt; believe we should do the same for gigantic pages as well.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I suspect this behavior is not intentional. What do you think about the</span>
<span class="quote">&gt; &gt; following untested patch?</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt; From 542d32c1eca7dcf38afca1a91bca4a472f6e8651 Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt; &gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; Date: Wed, 26 Jul 2017 12:43:43 +0200</span>
<span class="quote">&gt; &gt; Subject: [PATCH] mm, hugetlb: do not allocate non-migrateable gigantic pages</span>
<span class="quote">&gt; &gt;  from movable zones</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; alloc_gigantic_page doesn&#39;t consider movability of the gigantic hugetlb</span>
<span class="quote">&gt; &gt; when scanning eligible ranges for the allocation. As 1GB hugetlb pages</span>
<span class="quote">&gt; &gt; are not movable currently this can break the movable zone assumption</span>
<span class="quote">&gt; &gt; that all allocations are migrateable and as such break memory hotplug.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Reorganize the code and use the standard zonelist allocations scheme</span>
<span class="quote">&gt; &gt; that we use for standard hugetbl pages. htlb_alloc_mask will ensure that</span>
<span class="quote">&gt; &gt; only migratable hugetlb pages will ever see a movable zone.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Fixes: 944d9fec8d7a (&quot;hugetlb: add support for gigantic page allocation at runtime&quot;)</span>
<span class="quote">&gt; &gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This seems reasonable to me, and I like the fact that the code is more</span>
<span class="quote">&gt; like the default huge page case.  I don&#39;t see any issues with the code.</span>
<span class="quote">&gt; I did some simple smoke testing of allocating 1G pages with the new code</span>
<span class="quote">&gt; and ensuring they ended up as expected.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

Thanks a lot Mike! I will play with this some more today and tomorrow
and send the final patch later this week.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index bc48ee783dd9..60530bb3d228 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1066,11 +1066,11 @@</span> <span class="p_context"> static void free_gigantic_page(struct page *page, unsigned int order)</span>
 }
 
 static int __alloc_gigantic_page(unsigned long start_pfn,
<span class="p_del">-				unsigned long nr_pages)</span>
<span class="p_add">+				unsigned long nr_pages, gfp_t gfp_mask)</span>
 {
 	unsigned long end_pfn = start_pfn + nr_pages;
 	return alloc_contig_range(start_pfn, end_pfn, MIGRATE_MOVABLE,
<span class="p_del">-				  GFP_KERNEL);</span>
<span class="p_add">+				  gfp_mask);</span>
 }
 
 static bool pfn_range_valid_gigantic(struct zone *z,
<span class="p_chunk">@@ -1108,19 +1108,24 @@</span> <span class="p_context"> static bool zone_spans_last_pfn(const struct zone *zone,</span>
 	return zone_spans_pfn(zone, last_pfn);
 }
 
<span class="p_del">-static struct page *alloc_gigantic_page(int nid, unsigned int order)</span>
<span class="p_add">+static struct page *alloc_gigantic_page(int nid, struct hstate *h)</span>
 {
<span class="p_add">+	unsigned int order = huge_page_order(h);</span>
 	unsigned long nr_pages = 1 &lt;&lt; order;
 	unsigned long ret, pfn, flags;
<span class="p_del">-	struct zone *z;</span>
<span class="p_add">+	struct zonelist *zonelist;</span>
<span class="p_add">+	struct zone *zone;</span>
<span class="p_add">+	struct zoneref *z;</span>
<span class="p_add">+	gfp_t gfp_mask;</span>
 
<span class="p_del">-	z = NODE_DATA(nid)-&gt;node_zones;</span>
<span class="p_del">-	for (; z - NODE_DATA(nid)-&gt;node_zones &lt; MAX_NR_ZONES; z++) {</span>
<span class="p_del">-		spin_lock_irqsave(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h) | __GFP_THISNODE;</span>
<span class="p_add">+	zonelist = node_zonelist(nid, gfp_mask);</span>
<span class="p_add">+	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), NULL) {</span>
<span class="p_add">+		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
 
<span class="p_del">-		pfn = ALIGN(z-&gt;zone_start_pfn, nr_pages);</span>
<span class="p_del">-		while (zone_spans_last_pfn(z, pfn, nr_pages)) {</span>
<span class="p_del">-			if (pfn_range_valid_gigantic(z, pfn, nr_pages)) {</span>
<span class="p_add">+		pfn = ALIGN(zone-&gt;zone_start_pfn, nr_pages);</span>
<span class="p_add">+		while (zone_spans_last_pfn(zone, pfn, nr_pages)) {</span>
<span class="p_add">+			if (pfn_range_valid_gigantic(zone, pfn, nr_pages)) {</span>
 				/*
 				 * We release the zone lock here because
 				 * alloc_contig_range() will also lock the zone
<span class="p_chunk">@@ -1128,16 +1133,16 @@</span> <span class="p_context"> static struct page *alloc_gigantic_page(int nid, unsigned int order)</span>
 				 * spinning on this lock, it may win the race
 				 * and cause alloc_contig_range() to fail...
 				 */
<span class="p_del">-				spin_unlock_irqrestore(&amp;z-&gt;lock, flags);</span>
<span class="p_del">-				ret = __alloc_gigantic_page(pfn, nr_pages);</span>
<span class="p_add">+				spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="p_add">+				ret = __alloc_gigantic_page(pfn, nr_pages, gfp_mask);</span>
 				if (!ret)
 					return pfn_to_page(pfn);
<span class="p_del">-				spin_lock_irqsave(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+				spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
 			}
 			pfn += nr_pages;
 		}
 
<span class="p_del">-		spin_unlock_irqrestore(&amp;z-&gt;lock, flags);</span>
<span class="p_add">+		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
 	}
 
 	return NULL;
<span class="p_chunk">@@ -1150,7 +1155,7 @@</span> <span class="p_context"> static struct page *alloc_fresh_gigantic_page_node(struct hstate *h, int nid)</span>
 {
 	struct page *page;
 
<span class="p_del">-	page = alloc_gigantic_page(nid, huge_page_order(h));</span>
<span class="p_add">+	page = alloc_gigantic_page(nid, h);</span>
 	if (page) {
 		prep_compound_gigantic_page(page, huge_page_order(h));
 		prep_new_huge_page(h, page, nid);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



