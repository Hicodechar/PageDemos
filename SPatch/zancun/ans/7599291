
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,01/17] mm: support madvise(MADV_FREE) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,01/17] mm: support madvise(MADV_FREE)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 12, 2015, 4:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1447302793-5376-2-git-send-email-minchan@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7599291/mbox/"
   >mbox</a>
|
   <a href="/patch/7599291/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7599291/">/patch/7599291/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 3BA74BF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Nov 2015 04:36:42 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id CD7A1207A2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Nov 2015 04:36:40 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A3377207A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Nov 2015 04:36:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753604AbbKLEge (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 11 Nov 2015 23:36:34 -0500
Received: from LGEAMRELO11.lge.com ([156.147.23.51]:39042 &quot;EHLO
	lgeamrelo11.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753241AbbKLEco (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 11 Nov 2015 23:32:44 -0500
Received: from unknown (HELO lgeamrelo02.lge.com) (156.147.1.126)
	by 156.147.23.51 with ESMTP; 12 Nov 2015 13:32:41 +0900
X-Original-SENDERIP: 156.147.1.126
X-Original-MAILFROM: minchan@kernel.org
Received: from unknown (HELO localhost.localdomain) (10.177.223.161)
	by 156.147.1.126 with ESMTP; 12 Nov 2015 13:32:41 +0900
X-Original-SENDERIP: 10.177.223.161
X-Original-MAILFROM: minchan@kernel.org
From: Minchan Kim &lt;minchan@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Michael Kerrisk &lt;mtk.manpages@gmail.com&gt;,
	linux-api@vger.kernel.org, Hugh Dickins &lt;hughd@google.com&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	KOSAKI Motohiro &lt;kosaki.motohiro@jp.fujitsu.com&gt;,
	Jason Evans &lt;je@fb.com&gt;, Daniel Micay &lt;danielmicay@gmail.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Shaohua Li &lt;shli@kernel.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	yalin.wang2010@gmail.com, Minchan Kim &lt;minchan@kernel.org&gt;
Subject: [PATCH v3 01/17] mm: support madvise(MADV_FREE)
Date: Thu, 12 Nov 2015 13:32:57 +0900
Message-Id: &lt;1447302793-5376-2-git-send-email-minchan@kernel.org&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1447302793-5376-1-git-send-email-minchan@kernel.org&gt;
References: &lt;1447302793-5376-1-git-send-email-minchan@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.2 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 12, 2015, 4:32 a.m.</div>
<pre class="content">
Linux doesn&#39;t have an ability to free pages lazy while other OS already
have been supported that named by madvise(MADV_FREE).

The gain is clear that kernel can discard freed pages rather than swapping
out or OOM if memory pressure happens.

Without memory pressure, freed pages would be reused by userspace without
another additional overhead(ex, page fault + allocation + zeroing).

Jason Evans said:

: Facebook has been using MAP_UNINITIALIZED
: (https://lkml.org/lkml/2012/1/18/308) in some of its applications for
: several years, but there are operational costs to maintaining this
: out-of-tree in our kernel and in jemalloc, and we are anxious to retire it
: in favor of MADV_FREE.  When we first enabled MAP_UNINITIALIZED it
: increased throughput for much of our workload by ~5%, and although the
: benefit has decreased using newer hardware and kernels, there is still
: enough benefit that we cannot reasonably retire it without a replacement.
:
: Aside from Facebook operations, there are numerous broadly used
: applications that would benefit from MADV_FREE.  The ones that immediately
: come to mind are redis, varnish, and MariaDB.  I don&#39;t have much insight
: into Android internals and development process, but I would hope to see
: MADV_FREE support eventually end up there as well to benefit applications
: linked with the integrated jemalloc.
:
: jemalloc will use MADV_FREE once it becomes available in the Linux kernel.
: In fact, jemalloc already uses MADV_FREE or equivalent everywhere it&#39;s
: available: *BSD, OS X, Windows, and Solaris -- every platform except Linux
: (and AIX, but I&#39;m not sure it even compiles on AIX).  The lack of
: MADV_FREE on Linux forced me down a long series of increasingly
: sophisticated heuristics for madvise() volume reduction, and even so this
: remains a common performance issue for people using jemalloc on Linux.
: Please integrate MADV_FREE; many people will benefit substantially.

How it works:

When madvise syscall is called, VM clears dirty bit of ptes of the range.
If memory pressure happens, VM checks dirty bit of page table and if it
found still &quot;clean&quot;, it means it&#39;s a &quot;lazyfree pages&quot; so VM could discard
the page instead of swapping out.  Once there was store operation for the
page before VM peek a page to reclaim, dirty bit is set so VM can swap out
the page instead of discarding.

Firstly, heavy users would be general allocators(ex, jemalloc, tcmalloc
and hope glibc supports it) and jemalloc/tcmalloc already have supported
the feature for other OS(ex, FreeBSD)

barrios@blaptop:~/benchmark/ebizzy$ lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                12
On-line CPU(s) list:   0-11
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             12
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 2
Stepping:              3
CPU MHz:               3200.185
BogoMIPS:              6400.53
Virtualization:        VT-x
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              4096K
NUMA node0 CPU(s):     0-11
ebizzy benchmark(./ebizzy -S 10 -n 512)

Higher avg is better.

 vanilla-jemalloc		MADV_free-jemalloc

1 thread
records: 10			    records: 10
avg:	2961.90			    avg:   12069.70
std:	  71.96(2.43%)		    std:     186.68(1.55%)
max:	3070.00			    max:   12385.00
min:	2796.00			    min:   11746.00

2 thread
records: 10			    records: 10
avg:	5020.00			    avg:   17827.00
std:	 264.87(5.28%)		    std:     358.52(2.01%)
max:	5244.00			    max:   18760.00
min:	4251.00			    min:   17382.00

4 thread
records: 10			    records: 10
avg:	8988.80			    avg:   27930.80
std:	1175.33(13.08%)		    std:    3317.33(11.88%)
max:	9508.00			    max:   30879.00
min:	5477.00			    min:   21024.00

8 thread
records: 10			    records: 10
avg:   13036.50			    avg:   33739.40
std:	 170.67(1.31%)		    std:    5146.22(15.25%)
max:   13371.00			    max:   40572.00
min:   12785.00			    min:   24088.00

16 thread
records: 10			    records: 10
avg:   11092.40			    avg:   31424.20
std:	 710.60(6.41%)		    std:    3763.89(11.98%)
max:   12446.00			    max:   36635.00
min:	9949.00			    min:   25669.00

32 thread
records: 10			    records: 10
avg:   11067.00			    avg:   34495.80
std:	 971.06(8.77%)		    std:    2721.36(7.89%)
max:   12010.00			    max:   38598.00
min:	9002.00			    min:   30636.00

In summary, MADV_FREE is about much faster than MADV_DONTNEED.
<span class="acked-by">
Acked-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Michal Hocko &lt;mhocko@suse.cz&gt;</span>
<span class="signed-off-by">Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
---
 include/linux/rmap.h                   |   1 +
 include/linux/vm_event_item.h          |   1 +
 include/uapi/asm-generic/mman-common.h |   1 +
 mm/madvise.c                           | 132 +++++++++++++++++++++++++++++++++
 mm/rmap.c                              |   7 ++
 mm/swap_state.c                        |   5 +-
 mm/vmscan.c                            |  10 ++-
 mm/vmstat.c                            |   1 +
 8 files changed, 153 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Nov. 12, 2015, 4:49 a.m.</div>
<pre class="content">
On Wed, Nov 11, 2015 at 8:32 PM, Minchan Kim &lt;minchan@kernel.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; Linux doesn&#39;t have an ability to free pages lazy while other OS already</span>
<span class="quote">&gt; have been supported that named by madvise(MADV_FREE).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The gain is clear that kernel can discard freed pages rather than swapping</span>
<span class="quote">&gt; out or OOM if memory pressure happens.</span>
<span class="quote">

&gt;</span>
<span class="quote">&gt; When madvise syscall is called, VM clears dirty bit of ptes of the range.</span>
<span class="quote">&gt; If memory pressure happens, VM checks dirty bit of page table and if it</span>
<span class="quote">&gt; found still &quot;clean&quot;, it means it&#39;s a &quot;lazyfree pages&quot; so VM could discard</span>
<span class="quote">&gt; the page instead of swapping out.  Once there was store operation for the</span>
<span class="quote">&gt; page before VM peek a page to reclaim, dirty bit is set so VM can swap out</span>
<span class="quote">&gt; the page instead of discarding.</span>
<span class="quote">&gt;</span>

I realize that this lends itself to an efficient implementation, but
it&#39;s certainly the case that the kernel *could* use the accessed bit
instead of the dirty bit to give more sensible user semantics, and the
semantics that rely on the dirty bit make me uncomfortable from an ABI
perspective.

I also think that the kernel should commit to either zeroing the page
or leaving it unchanged in response to MADV_FREE (even if the decision
of which to do is made later on).  I think that your patch series does
this, but only after a few of the patches are applied (the swap entry
freeing), and I think that it should be a real guaranteed part of the
semantics and maybe have a test case.

--Andy
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=110221">Daniel Micay</a> - Nov. 12, 2015, 5:21 a.m.</div>
<pre class="content">
<span class="quote">&gt; I also think that the kernel should commit to either zeroing the page</span>
<span class="quote">&gt; or leaving it unchanged in response to MADV_FREE (even if the decision</span>
<span class="quote">&gt; of which to do is made later on).  I think that your patch series does</span>
<span class="quote">&gt; this, but only after a few of the patches are applied (the swap entry</span>
<span class="quote">&gt; freeing), and I think that it should be a real guaranteed part of the</span>
<span class="quote">&gt; semantics and maybe have a test case.</span>

This would be a good thing to test because it would be required to add
MADV_FREE_UNDO down the road. It would mean the same semantics as the
MEM_RESET and MEM_RESET_UNDO features on Windows, and there&#39;s probably
value in that for the sake of migrating existing software too.

For one example, it could be dropped into Firefox:

https://dxr.mozilla.org/mozilla-central/source/memory/volatile/VolatileBufferWindows.cpp

And in Chromium:

https://code.google.com/p/chromium/codesearch#chromium/src/base/memory/discardable_shared_memory.cc

Worth noting that both also support the API for pinning/unpinning that&#39;s
used by Android&#39;s ashmem too. Linux really needs a feature like this for
caches. Firefox simply doesn&#39;t drop the memory at all on Linux right now:

https://dxr.mozilla.org/mozilla-central/source/memory/volatile/VolatileBufferFallback.cpp

(Lock == pin, Unlock == unpin)

For reference:

https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 12, 2015, 11:26 a.m.</div>
<pre class="content">
On Thu, Nov 12, 2015 at 01:32:57PM +0900, Minchan Kim wrote:
<span class="quote">&gt; @@ -256,6 +260,125 @@ static long madvise_willneed(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt; +				unsigned long end, struct mm_walk *walk)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mmu_gather *tlb = walk-&gt;private;</span>
<span class="quote">&gt; +	struct mm_struct *mm = tlb-&gt;mm;</span>
<span class="quote">&gt; +	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="quote">&gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; +	pte_t *pte, ptent;</span>
<span class="quote">&gt; +	struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	split_huge_page_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; +	if (pmd_trans_unstable(pmd))</span>
<span class="quote">&gt; +		return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="quote">&gt; +	arch_enter_lazy_mmu_mode();</span>
<span class="quote">&gt; +	for (; addr != end; pte++, addr += PAGE_SIZE) {</span>
<span class="quote">&gt; +		ptent = *pte;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (!pte_present(ptent))</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		page = vm_normal_page(vma, addr, ptent);</span>
<span class="quote">&gt; +		if (!page)</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (PageSwapCache(page)) {</span>

Could you put VM_BUG_ON_PAGE(PageTransCompound(page), page) here?
Just in case.
<span class="quote">
&gt; +			if (!trylock_page(page))</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			if (!try_to_free_swap(page)) {</span>
<span class="quote">&gt; +				unlock_page(page);</span>
<span class="quote">&gt; +				continue;</span>
<span class="quote">&gt; +			}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ClearPageDirty(page);</span>
<span class="quote">&gt; +			unlock_page(page);</span>

Hm. Do we handle pages shared over fork() here?
Souldn&#39;t we ignore pages with mapcount &gt; 0?
<span class="quote">
&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (pte_young(ptent) || pte_dirty(ptent)) {</span>
<span class="quote">&gt; +			/*</span>
<span class="quote">&gt; +			 * Some of architecture(ex, PPC) don&#39;t update TLB</span>
<span class="quote">&gt; +			 * with set_pte_at and tlb_remove_tlb_entry so for</span>
<span class="quote">&gt; +			 * the portability, remap the pte with old|clean</span>
<span class="quote">&gt; +			 * after pte clearing.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			ptent = ptep_get_and_clear_full(mm, addr, pte,</span>
<span class="quote">&gt; +							tlb-&gt;fullmm);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ptent = pte_mkold(ptent);</span>
<span class="quote">&gt; +			ptent = pte_mkclean(ptent);</span>
<span class="quote">&gt; +			set_pte_at(mm, addr, pte, ptent);</span>
<span class="quote">&gt; +			tlb_remove_tlb_entry(tlb, pte, addr);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	arch_leave_lazy_mmu_mode();</span>
<span class="quote">&gt; +	pte_unmap_unlock(pte - 1, ptl);</span>
<span class="quote">&gt; +	cond_resched();</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 13, 2015, 6:15 a.m.</div>
<pre class="content">
On Thu, Nov 12, 2015 at 12:21:30AM -0500, Daniel Micay wrote:
<span class="quote">&gt; &gt; I also think that the kernel should commit to either zeroing the page</span>
<span class="quote">&gt; &gt; or leaving it unchanged in response to MADV_FREE (even if the decision</span>
<span class="quote">&gt; &gt; of which to do is made later on).  I think that your patch series does</span>
<span class="quote">&gt; &gt; this, but only after a few of the patches are applied (the swap entry</span>
<span class="quote">&gt; &gt; freeing), and I think that it should be a real guaranteed part of the</span>
<span class="quote">&gt; &gt; semantics and maybe have a test case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This would be a good thing to test because it would be required to add</span>
<span class="quote">&gt; MADV_FREE_UNDO down the road. It would mean the same semantics as the</span>
<span class="quote">&gt; MEM_RESET and MEM_RESET_UNDO features on Windows, and there&#39;s probably</span>
<span class="quote">&gt; value in that for the sake of migrating existing software too.</span>

So, do you mean that we could implement MADV_FREE_UNDO with &quot;read&quot;
opearation(&quot;just access bit marking) easily in future?

If so, it would be good reason to change MADV_FREE from dirty bit to
access bit. Okay, I will look at that.
<span class="quote">
&gt; </span>
<span class="quote">&gt; For one example, it could be dropped into Firefox:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://dxr.mozilla.org/mozilla-central/source/memory/volatile/VolatileBufferWindows.cpp</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And in Chromium:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://code.google.com/p/chromium/codesearch#chromium/src/base/memory/discardable_shared_memory.cc</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Worth noting that both also support the API for pinning/unpinning that&#39;s</span>
<span class="quote">&gt; used by Android&#39;s ashmem too. Linux really needs a feature like this for</span>
<span class="quote">&gt; caches. Firefox simply doesn&#39;t drop the memory at all on Linux right now:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://dxr.mozilla.org/mozilla-central/source/memory/volatile/VolatileBufferFallback.cpp</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; (Lock == pin, Unlock == unpin)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For reference:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx</span>
<span class="quote">&gt; </span>


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=110221">Daniel Micay</a> - Nov. 13, 2015, 6:16 a.m.</div>
<pre class="content">
On 13/11/15 01:15 AM, Minchan Kim wrote:
<span class="quote">&gt; On Thu, Nov 12, 2015 at 12:21:30AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt;&gt;&gt; I also think that the kernel should commit to either zeroing the page</span>
<span class="quote">&gt;&gt;&gt; or leaving it unchanged in response to MADV_FREE (even if the decision</span>
<span class="quote">&gt;&gt;&gt; of which to do is made later on).  I think that your patch series does</span>
<span class="quote">&gt;&gt;&gt; this, but only after a few of the patches are applied (the swap entry</span>
<span class="quote">&gt;&gt;&gt; freeing), and I think that it should be a real guaranteed part of the</span>
<span class="quote">&gt;&gt;&gt; semantics and maybe have a test case.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This would be a good thing to test because it would be required to add</span>
<span class="quote">&gt;&gt; MADV_FREE_UNDO down the road. It would mean the same semantics as the</span>
<span class="quote">&gt;&gt; MEM_RESET and MEM_RESET_UNDO features on Windows, and there&#39;s probably</span>
<span class="quote">&gt;&gt; value in that for the sake of migrating existing software too.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So, do you mean that we could implement MADV_FREE_UNDO with &quot;read&quot;</span>
<span class="quote">&gt; opearation(&quot;just access bit marking) easily in future?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If so, it would be good reason to change MADV_FREE from dirty bit to</span>
<span class="quote">&gt; access bit. Okay, I will look at that.</span>

I just meant testing that the data is either zero or the old data if
it&#39;s read before it&#39;s written to. Not having it stay around once there
is a read. Not sure if that&#39;s what Andy meant.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 13, 2015, 6:17 a.m.</div>
<pre class="content">
On Thu, Nov 12, 2015 at 01:26:20PM +0200, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Thu, Nov 12, 2015 at 01:32:57PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; @@ -256,6 +260,125 @@ static long madvise_willneed(struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt; &gt; +				unsigned long end, struct mm_walk *walk)</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	struct mmu_gather *tlb = walk-&gt;private;</span>
<span class="quote">&gt; &gt; +	struct mm_struct *mm = tlb-&gt;mm;</span>
<span class="quote">&gt; &gt; +	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="quote">&gt; &gt; +	spinlock_t *ptl;</span>
<span class="quote">&gt; &gt; +	pte_t *pte, ptent;</span>
<span class="quote">&gt; &gt; +	struct page *page;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	split_huge_page_pmd(vma, addr, pmd);</span>
<span class="quote">&gt; &gt; +	if (pmd_trans_unstable(pmd))</span>
<span class="quote">&gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="quote">&gt; &gt; +	arch_enter_lazy_mmu_mode();</span>
<span class="quote">&gt; &gt; +	for (; addr != end; pte++, addr += PAGE_SIZE) {</span>
<span class="quote">&gt; &gt; +		ptent = *pte;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (!pte_present(ptent))</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		page = vm_normal_page(vma, addr, ptent);</span>
<span class="quote">&gt; &gt; +		if (!page)</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (PageSwapCache(page)) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Could you put VM_BUG_ON_PAGE(PageTransCompound(page), page) here?</span>
<span class="quote">&gt; Just in case.</span>

No problem.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; +			if (!trylock_page(page))</span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +			if (!try_to_free_swap(page)) {</span>
<span class="quote">&gt; &gt; +				unlock_page(page);</span>
<span class="quote">&gt; &gt; +				continue;</span>
<span class="quote">&gt; &gt; +			}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +			ClearPageDirty(page);</span>
<span class="quote">&gt; &gt; +			unlock_page(page);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hm. Do we handle pages shared over fork() here?</span>
<span class="quote">&gt; Souldn&#39;t we ignore pages with mapcount &gt; 0?</span>

It was handled later patch by historical reason but it&#39;s better
to fold the patch to this.

Thanks for review!
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 13, 2015, 6:38 a.m.</div>
<pre class="content">
On Fri, Nov 13, 2015 at 01:16:54AM -0500, Daniel Micay wrote:
<span class="quote">&gt; On 13/11/15 01:15 AM, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; On Thu, Nov 12, 2015 at 12:21:30AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; I also think that the kernel should commit to either zeroing the page</span>
<span class="quote">&gt; &gt;&gt;&gt; or leaving it unchanged in response to MADV_FREE (even if the decision</span>
<span class="quote">&gt; &gt;&gt;&gt; of which to do is made later on).  I think that your patch series does</span>
<span class="quote">&gt; &gt;&gt;&gt; this, but only after a few of the patches are applied (the swap entry</span>
<span class="quote">&gt; &gt;&gt;&gt; freeing), and I think that it should be a real guaranteed part of the</span>
<span class="quote">&gt; &gt;&gt;&gt; semantics and maybe have a test case.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; This would be a good thing to test because it would be required to add</span>
<span class="quote">&gt; &gt;&gt; MADV_FREE_UNDO down the road. It would mean the same semantics as the</span>
<span class="quote">&gt; &gt;&gt; MEM_RESET and MEM_RESET_UNDO features on Windows, and there&#39;s probably</span>
<span class="quote">&gt; &gt;&gt; value in that for the sake of migrating existing software too.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So, do you mean that we could implement MADV_FREE_UNDO with &quot;read&quot;</span>
<span class="quote">&gt; &gt; opearation(&quot;just access bit marking) easily in future?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If so, it would be good reason to change MADV_FREE from dirty bit to</span>
<span class="quote">&gt; &gt; access bit. Okay, I will look at that.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I just meant testing that the data is either zero or the old data if</span>
<span class="quote">&gt; it&#39;s read before it&#39;s written to. Not having it stay around once there</span>
<span class="quote">&gt; is a read. Not sure if that&#39;s what Andy meant.</span>

Either zero of old data is gauranteed.
Now:

        MADV_FREE(range)
        A = read from the range
        ...
        ...
        B = read from the range


        A and B could have different value. But value should be old or zero.

But Andy want more strict ABI so he suggested access bit instead of dirty bit.

        MADV_FREE(range)
        A = read from the range
        ...
        ...
        B = read from the range

        A and B cannot have different value.

And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO
easily when we need it. Maybe, that&#39;s what you want. Right?
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=110221">Daniel Micay</a> - Nov. 13, 2015, 6:45 a.m.</div>
<pre class="content">
<span class="quote">&gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>

Yes, but why the access bit instead of the dirty bit for that? It could
always be made more strict (i.e. access bit) in the future, while going
the other way won&#39;t be possible. So I think the dirty bit is really the
more conservative choice since if it turns out to be a mistake it can be
fixed without a backwards incompatible change.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 13, 2015, 7:03 a.m.</div>
<pre class="content">
On Fri, Nov 13, 2015 at 01:45:52AM -0500, Daniel Micay wrote:
<span class="quote">&gt; &gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt; &gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, but why the access bit instead of the dirty bit for that? It could</span>
<span class="quote">&gt; always be made more strict (i.e. access bit) in the future, while going</span>
<span class="quote">&gt; the other way won&#39;t be possible. So I think the dirty bit is really the</span>
<span class="quote">&gt; more conservative choice since if it turns out to be a mistake it can be</span>
<span class="quote">&gt; fixed without a backwards incompatible change.</span>

Absolutely true. That&#39;s why I insist on dirty bit until now although
I didn&#39;t tell the reason. But I thought you wanted to change for using
access bit for the future, too. It seems MADV_FREE start to bloat
over and over again before knowing real problems and usecases.
It&#39;s almost same situation with volatile ranges so I really want to
stop at proper point which maintainer should decide, I hope.
Without it, we will make the feature a lot heavy by just brain storming
and then causes lots of churn in MM code without real bebenfit
It would be very painful for us.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=110221">Daniel Micay</a> - Nov. 13, 2015, 8:13 a.m.</div>
<pre class="content">
On 13/11/15 02:03 AM, Minchan Kim wrote:
<span class="quote">&gt; On Fri, Nov 13, 2015 at 01:45:52AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt;&gt;&gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt;&gt;&gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Yes, but why the access bit instead of the dirty bit for that? It could</span>
<span class="quote">&gt;&gt; always be made more strict (i.e. access bit) in the future, while going</span>
<span class="quote">&gt;&gt; the other way won&#39;t be possible. So I think the dirty bit is really the</span>
<span class="quote">&gt;&gt; more conservative choice since if it turns out to be a mistake it can be</span>
<span class="quote">&gt;&gt; fixed without a backwards incompatible change.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Absolutely true. That&#39;s why I insist on dirty bit until now although</span>
<span class="quote">&gt; I didn&#39;t tell the reason. But I thought you wanted to change for using</span>
<span class="quote">&gt; access bit for the future, too. It seems MADV_FREE start to bloat</span>
<span class="quote">&gt; over and over again before knowing real problems and usecases.</span>
<span class="quote">&gt; It&#39;s almost same situation with volatile ranges so I really want to</span>
<span class="quote">&gt; stop at proper point which maintainer should decide, I hope.</span>
<span class="quote">&gt; Without it, we will make the feature a lot heavy by just brain storming</span>
<span class="quote">&gt; and then causes lots of churn in MM code without real bebenfit</span>
<span class="quote">&gt; It would be very painful for us.</span>

Well, I don&#39;t think you need more than a good API and an implementation
with no known bugs, kernel security concerns or backwards compatibility
issues. Configuration and API extensions are something for later (i.e.
land a baseline, then submit stuff like sysctl tunables). Just my take
on it though...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Nov. 13, 2015, 7:46 p.m.</div>
<pre class="content">
On Fri, Nov 13, 2015 at 12:13 AM, Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:
<span class="quote">&gt; On 13/11/15 02:03 AM, Minchan Kim wrote:</span>
<span class="quote">&gt;&gt; On Fri, Nov 13, 2015 at 01:45:52AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt;&gt;&gt;&gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Yes, but why the access bit instead of the dirty bit for that? It could</span>
<span class="quote">&gt;&gt;&gt; always be made more strict (i.e. access bit) in the future, while going</span>
<span class="quote">&gt;&gt;&gt; the other way won&#39;t be possible. So I think the dirty bit is really the</span>
<span class="quote">&gt;&gt;&gt; more conservative choice since if it turns out to be a mistake it can be</span>
<span class="quote">&gt;&gt;&gt; fixed without a backwards incompatible change.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Absolutely true. That&#39;s why I insist on dirty bit until now although</span>
<span class="quote">&gt;&gt; I didn&#39;t tell the reason. But I thought you wanted to change for using</span>
<span class="quote">&gt;&gt; access bit for the future, too. It seems MADV_FREE start to bloat</span>
<span class="quote">&gt;&gt; over and over again before knowing real problems and usecases.</span>
<span class="quote">&gt;&gt; It&#39;s almost same situation with volatile ranges so I really want to</span>
<span class="quote">&gt;&gt; stop at proper point which maintainer should decide, I hope.</span>
<span class="quote">&gt;&gt; Without it, we will make the feature a lot heavy by just brain storming</span>
<span class="quote">&gt;&gt; and then causes lots of churn in MM code without real bebenfit</span>
<span class="quote">&gt;&gt; It would be very painful for us.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Well, I don&#39;t think you need more than a good API and an implementation</span>
<span class="quote">&gt; with no known bugs, kernel security concerns or backwards compatibility</span>
<span class="quote">&gt; issues. Configuration and API extensions are something for later (i.e.</span>
<span class="quote">&gt; land a baseline, then submit stuff like sysctl tunables). Just my take</span>
<span class="quote">&gt; on it though...</span>
<span class="quote">&gt;</span>

As long as it&#39;s anonymous MAP_PRIVATE only, then the security aspects
should be okay.  MADV_DONTNEED seems to work on pretty much any VMA,
and there&#39;s been long history of interesting bugs there.

As for dirty vs accessed, an argument in favor of going straight to
accessed is that it means that users can write code like this without
worrying about whether they have a kernel that uses the dirty bit:

x = mmap(...);
*x = 1;  /* mark it present */

/* i&#39;m done with it */
*x = 1;
madvise(MADV_FREE, x, ...);

wait a while;

/* is it still there? */
if (*x == 1) {
  /* use whatever was cached there */
} else {
 /* reinitialize it */
 *x = 1;
}

With the dirty bit, this will look like it works, but on occasion
users will lose the race where they probe *x to see if the data was
lost and then the data gets lost before the next write comes in.

Sure, that load from *x could be changed to RMW or users could do a
dummy write (e.g. x[1] = 1; if (*x == 1) ...), but people might forget
to do that, and the caching implications are a little bit worse.

Note that switching to RMW is really really dangerous.  Doing:

*x &amp;= 1;
if (*x == 1) ...;

is safe on x86 if the compiler generates:

andl $1, (%[x]);
cmpl $1, (%[x]);

but is unsafe if the compiler generates:

movl (%[x]), %eax;
andl $1, %eax;
movl %eax, (%[x]);
cmpl $1, %eax;

and even worse if the write is omitted when &quot;provably&quot; unnecessary.

OTOH, if switching to the accessed bit is too much of a mess, then
using the dirty bit at first isn&#39;t so bad.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 16, 2015, 2:13 a.m.</div>
<pre class="content">
On Fri, Nov 13, 2015 at 11:46:07AM -0800, Andy Lutomirski wrote:
<span class="quote">&gt; On Fri, Nov 13, 2015 at 12:13 AM, Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:</span>
<span class="quote">&gt; &gt; On 13/11/15 02:03 AM, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt;&gt; On Fri, Nov 13, 2015 at 01:45:52AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; Yes, but why the access bit instead of the dirty bit for that? It could</span>
<span class="quote">&gt; &gt;&gt;&gt; always be made more strict (i.e. access bit) in the future, while going</span>
<span class="quote">&gt; &gt;&gt;&gt; the other way won&#39;t be possible. So I think the dirty bit is really the</span>
<span class="quote">&gt; &gt;&gt;&gt; more conservative choice since if it turns out to be a mistake it can be</span>
<span class="quote">&gt; &gt;&gt;&gt; fixed without a backwards incompatible change.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Absolutely true. That&#39;s why I insist on dirty bit until now although</span>
<span class="quote">&gt; &gt;&gt; I didn&#39;t tell the reason. But I thought you wanted to change for using</span>
<span class="quote">&gt; &gt;&gt; access bit for the future, too. It seems MADV_FREE start to bloat</span>
<span class="quote">&gt; &gt;&gt; over and over again before knowing real problems and usecases.</span>
<span class="quote">&gt; &gt;&gt; It&#39;s almost same situation with volatile ranges so I really want to</span>
<span class="quote">&gt; &gt;&gt; stop at proper point which maintainer should decide, I hope.</span>
<span class="quote">&gt; &gt;&gt; Without it, we will make the feature a lot heavy by just brain storming</span>
<span class="quote">&gt; &gt;&gt; and then causes lots of churn in MM code without real bebenfit</span>
<span class="quote">&gt; &gt;&gt; It would be very painful for us.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Well, I don&#39;t think you need more than a good API and an implementation</span>
<span class="quote">&gt; &gt; with no known bugs, kernel security concerns or backwards compatibility</span>
<span class="quote">&gt; &gt; issues. Configuration and API extensions are something for later (i.e.</span>
<span class="quote">&gt; &gt; land a baseline, then submit stuff like sysctl tunables). Just my take</span>
<span class="quote">&gt; &gt; on it though...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As long as it&#39;s anonymous MAP_PRIVATE only, then the security aspects</span>
<span class="quote">&gt; should be okay.  MADV_DONTNEED seems to work on pretty much any VMA,</span>
<span class="quote">&gt; and there&#39;s been long history of interesting bugs there.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As for dirty vs accessed, an argument in favor of going straight to</span>
<span class="quote">&gt; accessed is that it means that users can write code like this without</span>
<span class="quote">&gt; worrying about whether they have a kernel that uses the dirty bit:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; x = mmap(...);</span>
<span class="quote">&gt; *x = 1;  /* mark it present */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /* i&#39;m done with it */</span>
<span class="quote">&gt; *x = 1;</span>
<span class="quote">&gt; madvise(MADV_FREE, x, ...);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; wait a while;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /* is it still there? */</span>
<span class="quote">&gt; if (*x == 1) {</span>
<span class="quote">&gt;   /* use whatever was cached there */</span>
<span class="quote">&gt; } else {</span>
<span class="quote">&gt;  /* reinitialize it */</span>
<span class="quote">&gt;  *x = 1;</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With the dirty bit, this will look like it works, but on occasion</span>
<span class="quote">&gt; users will lose the race where they probe *x to see if the data was</span>
<span class="quote">&gt; lost and then the data gets lost before the next write comes in.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sure, that load from *x could be changed to RMW or users could do a</span>
<span class="quote">&gt; dummy write (e.g. x[1] = 1; if (*x == 1) ...), but people might forget</span>
<span class="quote">&gt; to do that, and the caching implications are a little bit worse.</span>

I think your example is the case what people abuse MADV_FREE.
What happens if the object(ie, x) spans multiple pages?
User should know object&#39;s memory align and investigate all of pages
which span the object. Hmm, I don&#39;t think it&#39;s good for API.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Note that switching to RMW is really really dangerous.  Doing:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; *x &amp;= 1;</span>
<span class="quote">&gt; if (*x == 1) ...;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; is safe on x86 if the compiler generates:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; andl $1, (%[x]);</span>
<span class="quote">&gt; cmpl $1, (%[x]);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; but is unsafe if the compiler generates:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; movl (%[x]), %eax;</span>
<span class="quote">&gt; andl $1, %eax;</span>
<span class="quote">&gt; movl %eax, (%[x]);</span>
<span class="quote">&gt; cmpl $1, %eax;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and even worse if the write is omitted when &quot;provably&quot; unnecessary.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; OTOH, if switching to the accessed bit is too much of a mess, then</span>
<span class="quote">&gt; using the dirty bit at first isn&#39;t so bad.</span>

Thanks! I want to use dirty bit first.

About access bit, I don&#39;t want to say it to mess but I guess it would
change a lot subtle thing for all architectures. Because we have used
access bit as just *hint* for aging while dirty bit is really
*critical marker* for system integrity. A example in x86, we don&#39;t
keep accuracy of access bit for reducing TLB flush IPI. I don&#39;t know
what technique other arches have used but they might have.

Thanks.
<span class="quote">

&gt; </span>
<span class="quote">&gt; --Andy</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; Andy Lutomirski</span>
<span class="quote">&gt; AMA Capital Management, LLC</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131331">yalin wang</a> - Nov. 16, 2015, 3:14 a.m.</div>
<pre class="content">
<span class="quote">&gt; On Nov 16, 2015, at 10:13, Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Fri, Nov 13, 2015 at 11:46:07AM -0800, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; On Fri, Nov 13, 2015 at 12:13 AM, Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On 13/11/15 02:03 AM, Minchan Kim wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Fri, Nov 13, 2015 at 01:45:52AM -0500, Daniel Micay wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; And now I am thinking if we use access bit, we could implment MADV_FREE_UNDO</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; easily when we need it. Maybe, that&#39;s what you want. Right?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Yes, but why the access bit instead of the dirty bit for that? It could</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; always be made more strict (i.e. access bit) in the future, while going</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; the other way won&#39;t be possible. So I think the dirty bit is really the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; more conservative choice since if it turns out to be a mistake it can be</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; fixed without a backwards incompatible change.</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; Absolutely true. That&#39;s why I insist on dirty bit until now although</span>
<span class="quote">&gt;&gt;&gt;&gt; I didn&#39;t tell the reason. But I thought you wanted to change for using</span>
<span class="quote">&gt;&gt;&gt;&gt; access bit for the future, too. It seems MADV_FREE start to bloat</span>
<span class="quote">&gt;&gt;&gt;&gt; over and over again before knowing real problems and usecases.</span>
<span class="quote">&gt;&gt;&gt;&gt; It&#39;s almost same situation with volatile ranges so I really want to</span>
<span class="quote">&gt;&gt;&gt;&gt; stop at proper point which maintainer should decide, I hope.</span>
<span class="quote">&gt;&gt;&gt;&gt; Without it, we will make the feature a lot heavy by just brain storming</span>
<span class="quote">&gt;&gt;&gt;&gt; and then causes lots of churn in MM code without real bebenfit</span>
<span class="quote">&gt;&gt;&gt;&gt; It would be very painful for us.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; Well, I don&#39;t think you need more than a good API and an implementation</span>
<span class="quote">&gt;&gt;&gt; with no known bugs, kernel security concerns or backwards compatibility</span>
<span class="quote">&gt;&gt;&gt; issues. Configuration and API extensions are something for later (i.e.</span>
<span class="quote">&gt;&gt;&gt; land a baseline, then submit stuff like sysctl tunables). Just my take</span>
<span class="quote">&gt;&gt;&gt; on it though...</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; As long as it&#39;s anonymous MAP_PRIVATE only, then the security aspects</span>
<span class="quote">&gt;&gt; should be okay.  MADV_DONTNEED seems to work on pretty much any VMA,</span>
<span class="quote">&gt;&gt; and there&#39;s been long history of interesting bugs there.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; As for dirty vs accessed, an argument in favor of going straight to</span>
<span class="quote">&gt;&gt; accessed is that it means that users can write code like this without</span>
<span class="quote">&gt;&gt; worrying about whether they have a kernel that uses the dirty bit:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; x = mmap(...);</span>
<span class="quote">&gt;&gt; *x = 1;  /* mark it present */</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; /* i&#39;m done with it */</span>
<span class="quote">&gt;&gt; *x = 1;</span>
<span class="quote">&gt;&gt; madvise(MADV_FREE, x, ...);</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; wait a while;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; /* is it still there? */</span>
<span class="quote">&gt;&gt; if (*x == 1) {</span>
<span class="quote">&gt;&gt;  /* use whatever was cached there */</span>
<span class="quote">&gt;&gt; } else {</span>
<span class="quote">&gt;&gt; /* reinitialize it */</span>
<span class="quote">&gt;&gt; *x = 1;</span>
<span class="quote">&gt;&gt; }</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; With the dirty bit, this will look like it works, but on occasion</span>
<span class="quote">&gt;&gt; users will lose the race where they probe *x to see if the data was</span>
<span class="quote">&gt;&gt; lost and then the data gets lost before the next write comes in.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Sure, that load from *x could be changed to RMW or users could do a</span>
<span class="quote">&gt;&gt; dummy write (e.g. x[1] = 1; if (*x == 1) ...), but people might forget</span>
<span class="quote">&gt;&gt; to do that, and the caching implications are a little bit worse.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think your example is the case what people abuse MADV_FREE.</span>
<span class="quote">&gt; What happens if the object(ie, x) spans multiple pages?</span>
<span class="quote">&gt; User should know object&#39;s memory align and investigate all of pages</span>
<span class="quote">&gt; which span the object. Hmm, I don&#39;t think it&#39;s good for API.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Note that switching to RMW is really really dangerous.  Doing:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; *x &amp;= 1;</span>
<span class="quote">&gt;&gt; if (*x == 1) ...;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; is safe on x86 if the compiler generates:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; andl $1, (%[x]);</span>
<span class="quote">&gt;&gt; cmpl $1, (%[x]);</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; but is unsafe if the compiler generates:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; movl (%[x]), %eax;</span>
<span class="quote">&gt;&gt; andl $1, %eax;</span>
<span class="quote">&gt;&gt; movl %eax, (%[x]);</span>
<span class="quote">&gt;&gt; cmpl $1, %eax;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; and even worse if the write is omitted when &quot;provably&quot; unnecessary.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; OTOH, if switching to the accessed bit is too much of a mess, then</span>
<span class="quote">&gt;&gt; using the dirty bit at first isn&#39;t so bad.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks! I want to use dirty bit first.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; About access bit, I don&#39;t want to say it to mess but I guess it would</span>
<span class="quote">&gt; change a lot subtle thing for all architectures. Because we have used</span>
<span class="quote">&gt; access bit as just *hint* for aging while dirty bit is really</span>
<span class="quote">&gt; *critical marker* for system integrity. A example in x86, we don&#39;t</span>
<span class="quote">&gt; keep accuracy of access bit for reducing TLB flush IPI. I don&#39;t know</span>
<span class="quote">&gt; what technique other arches have used but they might have.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks.</span>
<span class="quote">&gt; </span>
i think use access bit is not easy to implement for ANON page in kernel.
we are sure the Anon page is always PageDirty()  if it is !PageSwapCache() ,
unless it is MADV_FREE page ,
but use access bit , how to distinguish Normal ANON page and  MADV_FREE page?
it can be implemented by Access bit , but not easy, need more code change .

Thanks



 




--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/rmap.h b/include/linux/rmap.h</span>
<span class="p_header">index 29446aeef36e..f4c992826242 100644</span>
<span class="p_header">--- a/include/linux/rmap.h</span>
<span class="p_header">+++ b/include/linux/rmap.h</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> enum ttu_flags {</span>
 	TTU_UNMAP = 1,			/* unmap mode */
 	TTU_MIGRATION = 2,		/* migration mode */
 	TTU_MUNLOCK = 4,		/* munlock mode */
<span class="p_add">+	TTU_FREE = 8,			/* free mode */</span>
 
 	TTU_IGNORE_MLOCK = (1 &lt;&lt; 8),	/* ignore mlock */
 	TTU_IGNORE_ACCESS = (1 &lt;&lt; 9),	/* don&#39;t age */
<span class="p_header">diff --git a/include/linux/vm_event_item.h b/include/linux/vm_event_item.h</span>
<span class="p_header">index 9246d32dc973..2b1cef88b827 100644</span>
<span class="p_header">--- a/include/linux/vm_event_item.h</span>
<span class="p_header">+++ b/include/linux/vm_event_item.h</span>
<span class="p_chunk">@@ -25,6 +25,7 @@</span> <span class="p_context"> enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,</span>
 		FOR_ALL_ZONES(PGALLOC),
 		PGFREE, PGACTIVATE, PGDEACTIVATE,
 		PGFAULT, PGMAJFAULT,
<span class="p_add">+		PGLAZYFREED,</span>
 		FOR_ALL_ZONES(PGREFILL),
 		FOR_ALL_ZONES(PGSTEAL_KSWAPD),
 		FOR_ALL_ZONES(PGSTEAL_DIRECT),
<span class="p_header">diff --git a/include/uapi/asm-generic/mman-common.h b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">index ddc3b36f1046..7a94102b7a02 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_chunk">@@ -34,6 +34,7 @@</span> <span class="p_context"></span>
 #define MADV_SEQUENTIAL	2		/* expect sequential page references */
 #define MADV_WILLNEED	3		/* will need these pages */
 #define MADV_DONTNEED	4		/* don&#39;t need these pages */
<span class="p_add">+#define MADV_FREE	5		/* free pages only if memory pressure */</span>
 
 /* common parameters: try to keep these consistent across architectures */
 #define MADV_REMOVE	9		/* remove these pages &amp; resources */
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index c889fcbb530e..a8813f7b37b3 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -20,6 +20,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/backing-dev.h&gt;
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/swapops.h&gt;
<span class="p_add">+#include &lt;linux/mmu_notifier.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/tlb.h&gt;</span>
 
 /*
  * Any behaviour which results in changes to the vma-&gt;vm_flags needs to
<span class="p_chunk">@@ -32,6 +35,7 @@</span> <span class="p_context"> static int madvise_need_mmap_write(int behavior)</span>
 	case MADV_REMOVE:
 	case MADV_WILLNEED:
 	case MADV_DONTNEED:
<span class="p_add">+	case MADV_FREE:</span>
 		return 0;
 	default:
 		/* be safe, default to 1. list exceptions explicitly */
<span class="p_chunk">@@ -256,6 +260,125 @@</span> <span class="p_context"> static long madvise_willneed(struct vm_area_struct *vma,</span>
 	return 0;
 }
 
<span class="p_add">+static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+				unsigned long end, struct mm_walk *walk)</span>
<span class="p_add">+</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mmu_gather *tlb = walk-&gt;private;</span>
<span class="p_add">+	struct mm_struct *mm = tlb-&gt;mm;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pte_t *pte, ptent;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	split_huge_page_pmd(vma, addr, pmd);</span>
<span class="p_add">+	if (pmd_trans_unstable(pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);</span>
<span class="p_add">+	arch_enter_lazy_mmu_mode();</span>
<span class="p_add">+	for (; addr != end; pte++, addr += PAGE_SIZE) {</span>
<span class="p_add">+		ptent = *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!pte_present(ptent))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, ptent);</span>
<span class="p_add">+		if (!page)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (PageSwapCache(page)) {</span>
<span class="p_add">+			if (!trylock_page(page))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!try_to_free_swap(page)) {</span>
<span class="p_add">+				unlock_page(page);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			ClearPageDirty(page);</span>
<span class="p_add">+			unlock_page(page);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pte_young(ptent) || pte_dirty(ptent)) {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Some of architecture(ex, PPC) don&#39;t update TLB</span>
<span class="p_add">+			 * with set_pte_at and tlb_remove_tlb_entry so for</span>
<span class="p_add">+			 * the portability, remap the pte with old|clean</span>
<span class="p_add">+			 * after pte clearing.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			ptent = ptep_get_and_clear_full(mm, addr, pte,</span>
<span class="p_add">+							tlb-&gt;fullmm);</span>
<span class="p_add">+</span>
<span class="p_add">+			ptent = pte_mkold(ptent);</span>
<span class="p_add">+			ptent = pte_mkclean(ptent);</span>
<span class="p_add">+			set_pte_at(mm, addr, pte, ptent);</span>
<span class="p_add">+			tlb_remove_tlb_entry(tlb, pte, addr);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_leave_lazy_mmu_mode();</span>
<span class="p_add">+	pte_unmap_unlock(pte - 1, ptl);</span>
<span class="p_add">+	cond_resched();</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void madvise_free_page_range(struct mmu_gather *tlb,</span>
<span class="p_add">+			     struct vm_area_struct *vma,</span>
<span class="p_add">+			     unsigned long addr, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_walk free_walk = {</span>
<span class="p_add">+		.pmd_entry = madvise_free_pte_range,</span>
<span class="p_add">+		.mm = vma-&gt;vm_mm,</span>
<span class="p_add">+		.private = tlb,</span>
<span class="p_add">+	};</span>
<span class="p_add">+</span>
<span class="p_add">+	tlb_start_vma(tlb, vma);</span>
<span class="p_add">+	walk_page_range(addr, end, &amp;free_walk);</span>
<span class="p_add">+	tlb_end_vma(tlb, vma);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int madvise_free_single_vma(struct vm_area_struct *vma,</span>
<span class="p_add">+			unsigned long start_addr, unsigned long end_addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long start, end;</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	struct mmu_gather tlb;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; (VM_LOCKED|VM_HUGETLB|VM_PFNMAP))</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* MADV_FREE works for only anon vma at the moment */</span>
<span class="p_add">+	if (!vma_is_anonymous(vma))</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	start = max(vma-&gt;vm_start, start_addr);</span>
<span class="p_add">+	if (start &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	end = min(vma-&gt;vm_end, end_addr);</span>
<span class="p_add">+	if (end &lt;= vma-&gt;vm_start)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	lru_add_drain();</span>
<span class="p_add">+	tlb_gather_mmu(&amp;tlb, mm, start, end);</span>
<span class="p_add">+	update_hiwater_rss(mm);</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, start, end);</span>
<span class="p_add">+	madvise_free_page_range(&amp;tlb, vma, start, end);</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, start, end);</span>
<span class="p_add">+	tlb_finish_mmu(&amp;tlb, start, end);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static long madvise_free(struct vm_area_struct *vma,</span>
<span class="p_add">+			     struct vm_area_struct **prev,</span>
<span class="p_add">+			     unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	*prev = vma;</span>
<span class="p_add">+	return madvise_free_single_vma(vma, start, end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Application no longer needs these pages.  If the pages are dirty,
  * it&#39;s OK to just throw them away.  The app will be more careful about
<span class="p_chunk">@@ -379,6 +502,14 @@</span> <span class="p_context"> madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,</span>
 		return madvise_remove(vma, prev, start, end);
 	case MADV_WILLNEED:
 		return madvise_willneed(vma, prev, start, end);
<span class="p_add">+	case MADV_FREE:</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * XXX: In this implementation, MADV_FREE works like</span>
<span class="p_add">+		 * MADV_DONTNEED on swapless system or full swap.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (get_nr_swap_pages() &gt; 0)</span>
<span class="p_add">+			return madvise_free(vma, prev, start, end);</span>
<span class="p_add">+		/* passthrough */</span>
 	case MADV_DONTNEED:
 		return madvise_dontneed(vma, prev, start, end);
 	default:
<span class="p_chunk">@@ -398,6 +529,7 @@</span> <span class="p_context"> madvise_behavior_valid(int behavior)</span>
 	case MADV_REMOVE:
 	case MADV_WILLNEED:
 	case MADV_DONTNEED:
<span class="p_add">+	case MADV_FREE:</span>
 #ifdef CONFIG_KSM
 	case MADV_MERGEABLE:
 	case MADV_UNMERGEABLE:
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index f5b5c1f3dcd7..9449e91839ab 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1374,6 +1374,12 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		swp_entry_t entry = { .val = page_private(page) };
 		pte_t swp_pte;
 
<span class="p_add">+		if (!PageDirty(page) &amp;&amp; (flags &amp; TTU_FREE)) {</span>
<span class="p_add">+			/* It&#39;s a freeable page by MADV_FREE */</span>
<span class="p_add">+			dec_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_add">+			goto discard;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		if (PageSwapCache(page)) {
 			/*
 			 * Store the swap location in the pte.
<span class="p_chunk">@@ -1414,6 +1420,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	} else
 		dec_mm_counter(mm, MM_FILEPAGES);
 
<span class="p_add">+discard:</span>
 	page_remove_rmap(page);
 	page_cache_release(page);
 
<span class="p_header">diff --git a/mm/swap_state.c b/mm/swap_state.c</span>
<span class="p_header">index d504adb7fa5f..10f63eded7b7 100644</span>
<span class="p_header">--- a/mm/swap_state.c</span>
<span class="p_header">+++ b/mm/swap_state.c</span>
<span class="p_chunk">@@ -185,13 +185,12 @@</span> <span class="p_context"> int add_to_swap(struct page *page, struct list_head *list)</span>
 	 * deadlock in the swap out path.
 	 */
 	/*
<span class="p_del">-	 * Add it to the swap cache and mark it dirty</span>
<span class="p_add">+	 * Add it to the swap cache.</span>
 	 */
 	err = add_to_swap_cache(page, entry,
 			__GFP_HIGH|__GFP_NOMEMALLOC|__GFP_NOWARN);
 
<span class="p_del">-	if (!err) {	/* Success */</span>
<span class="p_del">-		SetPageDirty(page);</span>
<span class="p_add">+	if (!err) {</span>
 		return 1;
 	} else {	/* -ENOMEM radix-tree allocation failure */
 		/*
<span class="p_header">diff --git a/mm/vmscan.c b/mm/vmscan.c</span>
<span class="p_header">index 7f63a9381f71..7a415b9fdd34 100644</span>
<span class="p_header">--- a/mm/vmscan.c</span>
<span class="p_header">+++ b/mm/vmscan.c</span>
<span class="p_chunk">@@ -906,6 +906,7 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		int may_enter_fs;
 		enum page_references references = PAGEREF_RECLAIM_CLEAN;
 		bool dirty, writeback;
<span class="p_add">+		bool freeable = false;</span>
 
 		cond_resched();
 
<span class="p_chunk">@@ -1049,6 +1050,7 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 				goto keep_locked;
 			if (!add_to_swap(page, page_list))
 				goto activate_locked;
<span class="p_add">+			freeable = true;</span>
 			may_enter_fs = 1;
 
 			/* Adding to swap updated mapping */
<span class="p_chunk">@@ -1060,8 +1062,9 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		 * processes. Try to unmap it here.
 		 */
 		if (page_mapped(page) &amp;&amp; mapping) {
<span class="p_del">-			switch (try_to_unmap(page,</span>
<span class="p_del">-					ttu_flags|TTU_BATCH_FLUSH)) {</span>
<span class="p_add">+			switch (try_to_unmap(page, freeable ?</span>
<span class="p_add">+				(ttu_flags | TTU_BATCH_FLUSH | TTU_FREE) :</span>
<span class="p_add">+				(ttu_flags | TTU_BATCH_FLUSH))) {</span>
 			case SWAP_FAIL:
 				goto activate_locked;
 			case SWAP_AGAIN:
<span class="p_chunk">@@ -1186,6 +1189,9 @@</span> <span class="p_context"> static unsigned long shrink_page_list(struct list_head *page_list,</span>
 		 */
 		__clear_page_locked(page);
 free_it:
<span class="p_add">+		if (freeable &amp;&amp; !PageDirty(page))</span>
<span class="p_add">+			count_vm_event(PGLAZYFREED);</span>
<span class="p_add">+</span>
 		nr_reclaimed++;
 
 		/*
<span class="p_header">diff --git a/mm/vmstat.c b/mm/vmstat.c</span>
<span class="p_header">index fbf14485a049..59d45b22355f 100644</span>
<span class="p_header">--- a/mm/vmstat.c</span>
<span class="p_header">+++ b/mm/vmstat.c</span>
<span class="p_chunk">@@ -759,6 +759,7 @@</span> <span class="p_context"> const char * const vmstat_text[] = {</span>
 
 	&quot;pgfault&quot;,
 	&quot;pgmajfault&quot;,
<span class="p_add">+	&quot;pglazyfreed&quot;,</span>
 
 	TEXTS_FOR_ZONES(&quot;pgrefill&quot;)
 	TEXTS_FOR_ZONES(&quot;pgsteal_kswapd&quot;)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



