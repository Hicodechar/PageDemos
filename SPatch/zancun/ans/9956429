
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv7,09/19] x86/mm: Make MAX_PHYSADDR_BITS and MAX_PHYSMEM_BITS dynamic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv7,09/19] x86/mm: Make MAX_PHYSADDR_BITS and MAX_PHYSMEM_BITS dynamic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 18, 2017, 10:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170918105553.27914-10-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9956429/mbox/"
   >mbox</a>
|
   <a href="/patch/9956429/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9956429/">/patch/9956429/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0AE4F601E9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Sep 2017 10:59:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EFD2D28BD7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Sep 2017 10:59:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E57FE28C5B; Mon, 18 Sep 2017 10:59:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7D9C628C4E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Sep 2017 10:59:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754951AbdIRK7j (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 18 Sep 2017 06:59:39 -0400
Received: from mga02.intel.com ([134.134.136.20]:33251 &quot;EHLO mga02.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753854AbdIRK4O (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 18 Sep 2017 06:56:14 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by orsmga101.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	18 Sep 2017 03:56:15 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.42,412,1500966000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1196213374&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga001.fm.intel.com with ESMTP; 18 Sep 2017 03:56:11 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 858175F6; Mon, 18 Sep 2017 13:56:06 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Cyrill Gorcunov &lt;gorcunov@openvz.org&gt;,
	Borislav Petkov &lt;bp@suse.de&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv7 09/19] x86/mm: Make MAX_PHYSADDR_BITS and MAX_PHYSMEM_BITS
	dynamic
Date: Mon, 18 Sep 2017 13:55:43 +0300
Message-Id: &lt;20170918105553.27914-10-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20170918105553.27914-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170918105553.27914-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Sept. 18, 2017, 10:55 a.m.</div>
<pre class="content">
For boot-time switching between paging modes, we need to be able to
adjust size of physical address space at runtime.

As part of making physical address space size variable, we have to make
X86_5LEVEL dependent on SPARSEMEM_VMEMMAP. !SPARSEMEM_VMEMMAP
configuration doesn&#39;t work well with variable MAX_PHYSMEM_BITS.

Affect on kernel image size:

   text    data     bss     dec     hex filename
10710340        4880000  860160 16450500         fb03c4 vmlinux.before
10710666        4880000  860160 16450826         fb050a vmlinux.after
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 arch/x86/Kconfig                        | 1 +
 arch/x86/include/asm/pgtable_64_types.h | 2 +-
 arch/x86/include/asm/sparsemem.h        | 9 ++-------
 arch/x86/kernel/setup.c                 | 5 ++---
 4 files changed, 6 insertions(+), 11 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Sept. 28, 2017, 8:25 a.m.</div>
<pre class="content">
* Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt; wrote:
<span class="quote">
&gt; For boot-time switching between paging modes, we need to be able to</span>
<span class="quote">&gt; adjust size of physical address space at runtime.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As part of making physical address space size variable, we have to make</span>
<span class="quote">&gt; X86_5LEVEL dependent on SPARSEMEM_VMEMMAP. !SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt; configuration doesn&#39;t work well with variable MAX_PHYSMEM_BITS.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Affect on kernel image size:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt; 10710340        4880000  860160 16450500         fb03c4 vmlinux.before</span>
<span class="quote">&gt; 10710666        4880000  860160 16450826         fb050a vmlinux.after</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/Kconfig                        | 1 +</span>
<span class="quote">&gt;  arch/x86/include/asm/pgtable_64_types.h | 2 +-</span>
<span class="quote">&gt;  arch/x86/include/asm/sparsemem.h        | 9 ++-------</span>
<span class="quote">&gt;  arch/x86/kernel/setup.c                 | 5 ++---</span>
<span class="quote">&gt;  4 files changed, 6 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="quote">&gt; index 6a15297140ff..f75723d62c25 100644</span>
<span class="quote">&gt; --- a/arch/x86/Kconfig</span>
<span class="quote">&gt; +++ b/arch/x86/Kconfig</span>
<span class="quote">&gt; @@ -1403,6 +1403,7 @@ config X86_PAE</span>
<span class="quote">&gt;  config X86_5LEVEL</span>
<span class="quote">&gt;  	bool &quot;Enable 5-level page tables support&quot;</span>
<span class="quote">&gt;  	depends on X86_64</span>
<span class="quote">&gt; +	depends on SPARSEMEM_VMEMMAP</span>

Adding a &#39;depends on&#39; to random kernel internal implementational details, to 
support new hardware, sucks as an UI, as it will just randomly hide/show the new 
hardware option if certain magic Kconfig combinations are set.

Please check how other architectures are doing it. (Hint: they are using select.)

Also, what is the real dependency here? Why don&#39;t the other memory models work, 
what&#39;s the failure mode - won&#39;t build, won&#39;t boot, or misbehaves in some other 
way?

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Sept. 28, 2017, 10:17 a.m.</div>
<pre class="content">
On Thu, Sep 28, 2017 at 10:25:14AM +0200, Ingo Molnar wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; * Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; For boot-time switching between paging modes, we need to be able to</span>
<span class="quote">&gt; &gt; adjust size of physical address space at runtime.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; As part of making physical address space size variable, we have to make</span>
<span class="quote">&gt; &gt; X86_5LEVEL dependent on SPARSEMEM_VMEMMAP. !SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt; &gt; configuration doesn&#39;t work well with variable MAX_PHYSMEM_BITS.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Affect on kernel image size:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt; &gt; 10710340        4880000  860160 16450500         fb03c4 vmlinux.before</span>
<span class="quote">&gt; &gt; 10710666        4880000  860160 16450826         fb050a vmlinux.after</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/Kconfig                        | 1 +</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/pgtable_64_types.h | 2 +-</span>
<span class="quote">&gt; &gt;  arch/x86/include/asm/sparsemem.h        | 9 ++-------</span>
<span class="quote">&gt; &gt;  arch/x86/kernel/setup.c                 | 5 ++---</span>
<span class="quote">&gt; &gt;  4 files changed, 6 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; index 6a15297140ff..f75723d62c25 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; @@ -1403,6 +1403,7 @@ config X86_PAE</span>
<span class="quote">&gt; &gt;  config X86_5LEVEL</span>
<span class="quote">&gt; &gt;  	bool &quot;Enable 5-level page tables support&quot;</span>
<span class="quote">&gt; &gt;  	depends on X86_64</span>
<span class="quote">&gt; &gt; +	depends on SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Adding a &#39;depends on&#39; to random kernel internal implementational details, to </span>
<span class="quote">&gt; support new hardware, sucks as an UI, as it will just randomly hide/show the new </span>
<span class="quote">&gt; hardware option if certain magic Kconfig combinations are set.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please check how other architectures are doing it. (Hint: they are using select.)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Also, what is the real dependency here? Why don&#39;t the other memory models work, </span>
<span class="quote">&gt; what&#39;s the failure mode - won&#39;t build, won&#39;t boot, or misbehaves in some other </span>
<span class="quote">&gt; way?</span>

I won&#39;t build.

For !SPARSEMEM_VMEMMAP SECTIONS_WIDTH depends on MAX_PHYSMEM_BITS:

SECTIONS_WIDTH
  SECTIONS_SHIFT
    MAX_PHYSMEM_BITS

And SECTIONS_WIDTH is used on per-processor stage, it doesn&#39;t work if it&#39;s
dyncamic. See include/linux/page-flags-layout.h.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Sept. 28, 2017, 10:40 a.m.</div>
<pre class="content">
* Kirill A. Shutemov &lt;kirill@shutemov.name&gt; wrote:
<span class="quote">
&gt; On Thu, Sep 28, 2017 at 10:25:14AM +0200, Ingo Molnar wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; * Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt; wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; For boot-time switching between paging modes, we need to be able to</span>
<span class="quote">&gt; &gt; &gt; adjust size of physical address space at runtime.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; As part of making physical address space size variable, we have to make</span>
<span class="quote">&gt; &gt; &gt; X86_5LEVEL dependent on SPARSEMEM_VMEMMAP. !SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt; &gt; &gt; configuration doesn&#39;t work well with variable MAX_PHYSMEM_BITS.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Affect on kernel image size:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt; &gt; &gt; 10710340        4880000  860160 16450500         fb03c4 vmlinux.before</span>
<span class="quote">&gt; &gt; &gt; 10710666        4880000  860160 16450826         fb050a vmlinux.after</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt; &gt; ---</span>
<span class="quote">&gt; &gt; &gt;  arch/x86/Kconfig                        | 1 +</span>
<span class="quote">&gt; &gt; &gt;  arch/x86/include/asm/pgtable_64_types.h | 2 +-</span>
<span class="quote">&gt; &gt; &gt;  arch/x86/include/asm/sparsemem.h        | 9 ++-------</span>
<span class="quote">&gt; &gt; &gt;  arch/x86/kernel/setup.c                 | 5 ++---</span>
<span class="quote">&gt; &gt; &gt;  4 files changed, 6 insertions(+), 11 deletions(-)</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; &gt; index 6a15297140ff..f75723d62c25 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/x86/Kconfig</span>
<span class="quote">&gt; &gt; &gt; @@ -1403,6 +1403,7 @@ config X86_PAE</span>
<span class="quote">&gt; &gt; &gt;  config X86_5LEVEL</span>
<span class="quote">&gt; &gt; &gt;  	bool &quot;Enable 5-level page tables support&quot;</span>
<span class="quote">&gt; &gt; &gt;  	depends on X86_64</span>
<span class="quote">&gt; &gt; &gt; +	depends on SPARSEMEM_VMEMMAP</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Adding a &#39;depends on&#39; to random kernel internal implementational details, to </span>
<span class="quote">&gt; &gt; support new hardware, sucks as an UI, as it will just randomly hide/show the new </span>
<span class="quote">&gt; &gt; hardware option if certain magic Kconfig combinations are set.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please check how other architectures are doing it. (Hint: they are using select.)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Also, what is the real dependency here? Why don&#39;t the other memory models work, </span>
<span class="quote">&gt; &gt; what&#39;s the failure mode - won&#39;t build, won&#39;t boot, or misbehaves in some other </span>
<span class="quote">&gt; &gt; way?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I won&#39;t build.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For !SPARSEMEM_VMEMMAP SECTIONS_WIDTH depends on MAX_PHYSMEM_BITS:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; SECTIONS_WIDTH</span>
<span class="quote">&gt;   SECTIONS_SHIFT</span>
<span class="quote">&gt;     MAX_PHYSMEM_BITS</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And SECTIONS_WIDTH is used on per-processor stage, it doesn&#39;t work if it&#39;s</span>
<span class="quote">&gt; dyncamic. See include/linux/page-flags-layout.h.</span>

Ok, this would be a good addition to the changelog.

Thanks,

	Ingo
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 6a15297140ff..f75723d62c25 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -1403,6 +1403,7 @@</span> <span class="p_context"> config X86_PAE</span>
 config X86_5LEVEL
 	bool &quot;Enable 5-level page tables support&quot;
 	depends on X86_64
<span class="p_add">+	depends on SPARSEMEM_VMEMMAP</span>
 	---help---
 	  5-level paging enables access to larger address space:
 	  upto 128 PiB of virtual address space and 4 PiB of
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64_types.h b/arch/x86/include/asm/pgtable_64_types.h</span>
<span class="p_header">index 163a049bbb56..51364e705b35 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64_types.h</span>
<span class="p_chunk">@@ -86,7 +86,7 @@</span> <span class="p_context"> extern unsigned int ptrs_per_p4d;</span>
 #define PGDIR_MASK	(~(PGDIR_SIZE - 1))
 
 /* See Documentation/x86/x86_64/mm.txt for a description of the memory map. */
<span class="p_del">-#define MAXMEM		_AC(__AC(1, UL) &lt;&lt; MAX_PHYSMEM_BITS, UL)</span>
<span class="p_add">+#define MAXMEM		(1UL &lt;&lt; MAX_PHYSMEM_BITS)</span>
 #ifdef CONFIG_X86_5LEVEL
 #define VMALLOC_SIZE_TB _AC(16384, UL)
 #define __VMALLOC_BASE	_AC(0xff92000000000000, UL)
<span class="p_header">diff --git a/arch/x86/include/asm/sparsemem.h b/arch/x86/include/asm/sparsemem.h</span>
<span class="p_header">index 1f5bee2c202f..b857715633de 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/sparsemem.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/sparsemem.h</span>
<span class="p_chunk">@@ -26,13 +26,8 @@</span> <span class="p_context"></span>
 # endif
 #else /* CONFIG_X86_32 */
 # define SECTION_SIZE_BITS	27 /* matt - 128 is convenient right now */
<span class="p_del">-# ifdef CONFIG_X86_5LEVEL</span>
<span class="p_del">-#  define MAX_PHYSADDR_BITS	52</span>
<span class="p_del">-#  define MAX_PHYSMEM_BITS	52</span>
<span class="p_del">-# else</span>
<span class="p_del">-#  define MAX_PHYSADDR_BITS	44</span>
<span class="p_del">-#  define MAX_PHYSMEM_BITS	46</span>
<span class="p_del">-# endif</span>
<span class="p_add">+# define MAX_PHYSADDR_BITS	(pgtable_l5_enabled ? 52 : 44)</span>
<span class="p_add">+# define MAX_PHYSMEM_BITS	(pgtable_l5_enabled ? 52 : 46)</span>
 #endif
 
 #endif /* CONFIG_SPARSEMEM */
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 82559867e0a9..e0af72c5e133 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -190,9 +190,7 @@</span> <span class="p_context"> struct ist_info ist_info;</span>
 #endif
 
 #else
<span class="p_del">-struct cpuinfo_x86 boot_cpu_data __read_mostly = {</span>
<span class="p_del">-	.x86_phys_bits = MAX_PHYSMEM_BITS,</span>
<span class="p_del">-};</span>
<span class="p_add">+struct cpuinfo_x86 boot_cpu_data __read_mostly;</span>
 EXPORT_SYMBOL(boot_cpu_data);
 #endif
 
<span class="p_chunk">@@ -880,6 +878,7 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	__flush_tlb_all();
 #else
 	printk(KERN_INFO &quot;Command line: %s\n&quot;, boot_command_line);
<span class="p_add">+	boot_cpu_data.x86_phys_bits = MAX_PHYSMEM_BITS;</span>
 #endif
 
 	/*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



