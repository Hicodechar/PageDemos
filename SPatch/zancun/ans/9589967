
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/5] mm: parallel free pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/5] mm: parallel free pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 24, 2017, 11:40 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170224114036.15621-3-aaron.lu@intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9589967/mbox/"
   >mbox</a>
|
   <a href="/patch/9589967/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9589967/">/patch/9589967/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8E29260471 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 11:41:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4A66B28750
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 11:41:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3F3C528753; Fri, 24 Feb 2017 11:41:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AF8F028750
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 11:41:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751428AbdBXLld (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Feb 2017 06:41:33 -0500
Received: from mga05.intel.com ([192.55.52.43]:23851 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751219AbdBXLkd (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Feb 2017 06:40:33 -0500
Received: from fmsmga006.fm.intel.com ([10.253.24.20])
	by fmsmga105.fm.intel.com with ESMTP; 24 Feb 2017 03:40:33 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.35,200,1484035200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;69710312&quot;
Received: from aaronlu.sh.intel.com ([10.239.13.44])
	by fmsmga006.fm.intel.com with ESMTP; 24 Feb 2017 03:40:31 -0800
From: Aaron Lu &lt;aaron.lu@intel.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;, Tim Chen &lt;tim.c.chen@intel.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ying Huang &lt;ying.huang@intel.com&gt;, Aaron Lu &lt;aaron.lu@intel.com&gt;
Subject: [PATCH 2/5] mm: parallel free pages
Date: Fri, 24 Feb 2017 19:40:33 +0800
Message-Id: &lt;20170224114036.15621-3-aaron.lu@intel.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20170224114036.15621-1-aaron.lu@intel.com&gt;
References: &lt;20170224114036.15621-1-aaron.lu@intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45931">Aaron Lu</a> - Feb. 24, 2017, 11:40 a.m.</div>
<pre class="content">
For regular processes, the time taken in its exit() path to free its
used memory is not a problem. But there are heavy ones that consume
several Terabytes memory and the time taken to free its memory could
last more than ten minutes.

To optimize this use case, a parallel free method is proposed and it is
based on the current gather batch free.

The current gather batch free works like:
For each struct mmu_gather *tlb, there is a static buffer to store those
to-be-freed page pointers. The size is MMU_GATHER_BUNDLE, which is
defined to be 8. So if a tlb tear down doesn&#39;t free more than 8 pages,
that is all we need. If 8+ pages are to be freed, new pages will need
to be allocated to store those to-be-freed page pointers.

The structure used to describe the saved page pointers is called
struct mmu_gather_batch and tlb-&gt;local is of this type. tlb-&gt;local is
different than other struct mmu_gather_batch(es) in that the page
pointer array used by tlb-&gt;local points to the previouslly described
static buffer while the other struct mmu_gather_batch(es) page pointer
array points to the dynamically allocated pages.

These batches will form a singly linked list, starting from &amp;tlb-&gt;local.

tlb-&gt;local.pages  =&gt; tlb-&gt;pages(8 pointers)
      \|/
      next =&gt; *batch1-&gt;pages =&gt; about 500 pointers
                \|/
                next =&gt; batch2-&gt;pages =&gt; about 500 pointers
                          \|/
                          next =&gt; batch3-&gt;pages =&gt; about 500 pointers
                                    ... ...

The propose parallel free did this: if the process has many pages to be
freed, accumulate them in these struct mmu_gather_batch(es) one after
another till 256K pages are accumulated. Then take this singly linked
list starting from tlb-&gt;local.next off struct mmu_gather *tlb and free
them in a worker thread. The main thread can return to continue zap
other pages(after freeing pages pointed by tlb-&gt;local.pages).

Note that since we may be accumulating as many as 256K pages now, the
soft lockup on !CONFIG_PREEMPT issue which is fixed by commit
53a59fc67f97 (&quot;mm: limit mmu_gather batching to fix soft lockups on
!CONFIG_PREEMPT&quot;) can reappear. For that matter, add cond_resched() in
tlb_flush_mmu_free_batches where many pages can be freed.
<span class="signed-off-by">
Signed-off-by: Aaron Lu &lt;aaron.lu@intel.com&gt;</span>
---
 include/asm-generic/tlb.h | 12 +++++------
 mm/memory.c               | 55 ++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 59 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index 7eed8cf3130a..07229b48e7f9 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -78,13 +78,9 @@</span> <span class="p_context"> struct mmu_gather_batch {</span>
 #define MAX_GATHER_BATCH	\
 	((PAGE_SIZE - sizeof(struct mmu_gather_batch)) / sizeof(void *))
 
<span class="p_del">-/*</span>
<span class="p_del">- * Limit the maximum number of mmu_gather batches to reduce a risk of soft</span>
<span class="p_del">- * lockups for non-preemptible kernels on huge machines when a lot of memory</span>
<span class="p_del">- * is zapped during unmapping.</span>
<span class="p_del">- * 10K pages freed at once should be safe even without a preemption point.</span>
<span class="p_del">- */</span>
<span class="p_del">-#define MAX_GATHER_BATCH_COUNT	(10000UL/MAX_GATHER_BATCH)</span>
<span class="p_add">+#define ASYNC_FREE_THRESHOLD (256*1024UL)</span>
<span class="p_add">+#define MAX_GATHER_BATCH_COUNT	DIV_ROUND_UP(ASYNC_FREE_THRESHOLD, MAX_GATHER_BATCH)</span>
<span class="p_add">+#define PAGE_FREE_NR_TO_YIELD (10000UL)</span>
 
 /* struct mmu_gather is an opaque type used by the mm code for passing around
  * any data needed by arch specific code for tlb_remove_page.
<span class="p_chunk">@@ -108,6 +104,8 @@</span> <span class="p_context"> struct mmu_gather {</span>
 	struct page		*__pages[MMU_GATHER_BUNDLE];
 	unsigned int		batch_count;
 	int page_size;
<span class="p_add">+	unsigned int            page_nr; /* how many pages we have gathered to be freed */</span>
<span class="p_add">+	struct list_head        worker_list; /* list for spawned workers that do the free job */</span>
 };
 
 #define HAVE_GENERIC_MMU_GATHER
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 2b88196841b9..b98cd25075f0 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -229,6 +229,9 @@</span> <span class="p_context"> void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long</span>
 	tlb-&gt;local.max  = ARRAY_SIZE(tlb-&gt;__pages);
 	tlb-&gt;active     = &amp;tlb-&gt;local;
 	tlb-&gt;batch_count = 0;
<span class="p_add">+	tlb-&gt;page_nr    = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	INIT_LIST_HEAD(&amp;tlb-&gt;worker_list);</span>
 
 #ifdef CONFIG_HAVE_RCU_TABLE_FREE
 	tlb-&gt;batch = NULL;
<span class="p_chunk">@@ -255,22 +258,63 @@</span> <span class="p_context"> static void tlb_flush_mmu_free_batches(struct mmu_gather_batch *batch_start,</span>
 				       int free_batch_page)
 {
 	struct mmu_gather_batch *batch, *next;
<span class="p_add">+	int nr = 0;</span>
 
 	for (batch = batch_start; batch; batch = next) {
 		next = batch-&gt;next;
 		if (batch-&gt;nr) {
 			free_pages_and_swap_cache(batch-&gt;pages, batch-&gt;nr);
<span class="p_add">+			nr += batch-&gt;nr;</span>
 			batch-&gt;nr = 0;
 		}
<span class="p_del">-		if (free_batch_page)</span>
<span class="p_add">+		if (free_batch_page) {</span>
 			free_pages((unsigned long)batch, 0);
<span class="p_add">+			nr++;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (nr &gt;= PAGE_FREE_NR_TO_YIELD) {</span>
<span class="p_add">+			cond_resched();</span>
<span class="p_add">+			nr = 0;</span>
<span class="p_add">+		}</span>
 	}
 }
 
<span class="p_add">+struct batch_free_struct {</span>
<span class="p_add">+	struct work_struct work;</span>
<span class="p_add">+	struct mmu_gather_batch *batch_start;</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static void batch_free_work(struct work_struct *work)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct batch_free_struct *batch_free = container_of(work, struct batch_free_struct, work);</span>
<span class="p_add">+	tlb_flush_mmu_free_batches(batch_free-&gt;batch_start, 1);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void tlb_flush_mmu_free(struct mmu_gather *tlb)
 {
<span class="p_add">+	struct batch_free_struct *batch_free = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (tlb-&gt;page_nr &gt;= ASYNC_FREE_THRESHOLD)</span>
<span class="p_add">+		batch_free = kmalloc(sizeof(*batch_free), GFP_NOWAIT | __GFP_NOWARN);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (batch_free) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Start a worker to free pages stored</span>
<span class="p_add">+		 * in batches following tlb-&gt;local.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		batch_free-&gt;batch_start = tlb-&gt;local.next;</span>
<span class="p_add">+		INIT_WORK(&amp;batch_free-&gt;work, batch_free_work);</span>
<span class="p_add">+		list_add(&amp;batch_free-&gt;list, &amp;tlb-&gt;worker_list);</span>
<span class="p_add">+		queue_work(system_unbound_wq, &amp;batch_free-&gt;work);</span>
<span class="p_add">+</span>
<span class="p_add">+		tlb-&gt;batch_count = 0;</span>
<span class="p_add">+		tlb-&gt;local.next = NULL;</span>
<span class="p_add">+		/* fall through to free pages stored in tlb-&gt;local */</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	tlb_flush_mmu_free_batches(&amp;tlb-&gt;local, 0);
 	tlb-&gt;active = &amp;tlb-&gt;local;
<span class="p_add">+	tlb-&gt;page_nr = 0;</span>
 }
 
 void tlb_flush_mmu(struct mmu_gather *tlb)
<span class="p_chunk">@@ -285,11 +329,18 @@</span> <span class="p_context"> void tlb_flush_mmu(struct mmu_gather *tlb)</span>
  */
 void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)
 {
<span class="p_add">+	struct batch_free_struct *batch_free, *n;</span>
<span class="p_add">+</span>
 	tlb_flush_mmu(tlb);
 
 	/* keep the page table cache within bounds */
 	check_pgt_cache();
 
<span class="p_add">+	list_for_each_entry_safe(batch_free, n, &amp;tlb-&gt;worker_list, list) {</span>
<span class="p_add">+		flush_work(&amp;batch_free-&gt;work);</span>
<span class="p_add">+		kfree(batch_free);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	tlb_flush_mmu_free_batches(tlb-&gt;local.next, 1);
 	tlb-&gt;local.next = NULL;
 }
<span class="p_chunk">@@ -308,6 +359,8 @@</span> <span class="p_context"> bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_</span>
 	VM_BUG_ON(!tlb-&gt;end);
 	VM_WARN_ON(tlb-&gt;page_size != page_size);
 
<span class="p_add">+	tlb-&gt;page_nr++;</span>
<span class="p_add">+</span>
 	batch = tlb-&gt;active;
 	/*
 	 * Add the page and check if we are full. If so

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



