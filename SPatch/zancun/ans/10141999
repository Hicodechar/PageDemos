
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>swiotlb: suppress warning when __GFP_NOWARN is set v3 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    swiotlb: suppress warning when __GFP_NOWARN is set v3</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176413">Christian König</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 10:09 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103100955.17182-1-christian.koenig@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10141999/mbox/"
   >mbox</a>
|
   <a href="/patch/10141999/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10141999/">/patch/10141999/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5BE4F60594 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 10:10:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4B93F28F7D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 10:10:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3E53D29064; Wed,  3 Jan 2018 10:10:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 661BC28F7D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 10:10:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752194AbeACKKE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 05:10:04 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:35801 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751851AbeACKJ7 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 05:09:59 -0500
Received: by mail-wm0-f68.google.com with SMTP id a79so1779003wma.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Jan 2018 02:09:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=3YDe4sx4TukZQoIYAshzvjnWfDkwlF7wiohpKvgY4Ig=;
	b=UFbrNBKBOk9rRYxGwJQQQmBRae72ixYrQKDCvTfUV1lEanaBckAbJa/ivLdHy65xZo
	Y0IJ2Vk+Eiv8qCjcN1iiV1gPDvgpeiYQBSCSOFagr9ClHE/WkjZxRFO4bKPHkQn6mhR1
	+nVhJ1E4QQuPpRW2PU38n8jQLpPCiG9sZPQO4H4vzY/l9NpNjWDNFYpDZqjz6FXgHNKh
	C0KN/M2Q+Hev/g3jbfkJABzXOvkMSH4qDHcBYhGzVG9Q/xJhl/Cn0xrASN4qvp17BZ/J
	4uQCwsLQjo4kCxkQbiuRp7cRe9sf677Zv+qLfG0B47mEUd2eYeg8ih9vZIa7esRI9AWg
	oiHA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
	:content-transfer-encoding;
	bh=3YDe4sx4TukZQoIYAshzvjnWfDkwlF7wiohpKvgY4Ig=;
	b=bVhbjyoJ7rG4e5rPmdB8vthBWA0SrwTSo6P5iZkFyjnrsrFspRi9jd8zbPGZpDQkiA
	Rvj2UXHK+IHrx4hssfv/rkt138CB46fdn5JsXwa+jcXYwN5UCdSZW8nXYC4ebimP+iWe
	ZKtV8YZbOCcDMOQtHndyytKGjTF+6pKqqoaFveuLwL4GHrIF6f/a9N0UByvXPpOOSMyc
	TGF0FNgVm7Cr34R8Fi6Cun39Avq9ZOtVVJKkP4icrW2G+h4NrYExJArYebibwDbmfMSt
	9OUe7nqFoBwOkFMJYWp55Yoe0bjdy6Qd4AlxVm9aDCFBaGUdNtLBk+yKwAAlDrBNlU0M
	DQJQ==
X-Gm-Message-State: AKGB3mL8zNg3EYylI7HN/DI7EJnW+aOjMNWWsvZ67myiEkUHT7+V8hjO
	s/MRLhTqXfE7FNcxiYHACmg=
X-Google-Smtp-Source: ACJfBotbgFRBnWulXKm2vbVYZhIVb+15mzamReWmdHsFdmQ5v286Ja/4SZw/Hm8sr9WRhTxy338QLw==
X-Received: by 10.28.191.3 with SMTP id p3mr903523wmf.81.1514974198369;
	Wed, 03 Jan 2018 02:09:58 -0800 (PST)
Received: from localhost.localdomain
	([2a02:908:1251:8fc0:6180:85eb:56d2:5dea])
	by smtp.gmail.com with ESMTPSA id t4sm542937wmt.9.2018.01.03.02.09.57
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 03 Jan 2018 02:09:57 -0800 (PST)
From: &quot;=?UTF-8?q?Christian=20K=C3=B6nig?=&quot; 
	&lt;ckoenig.leichtzumerken@gmail.com&gt;
X-Google-Original-From: =?UTF-8?q?Christian=20K=C3=B6nig?=
	&lt;christian.koenig@amd.com&gt;
To: konrad.wilk@oracle.com
Cc: linux-kernel@vger.kernel.org
Subject: [PATCH] swiotlb: suppress warning when __GFP_NOWARN is set v3
Date: Wed,  3 Jan 2018 11:09:55 +0100
Message-Id: &lt;20180103100955.17182-1-christian.koenig@amd.com&gt;
X-Mailer: git-send-email 2.11.0
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176413">Christian König</a> - Jan. 3, 2018, 10:09 a.m.</div>
<pre class="content">
TTM tries to allocate coherent memory in chunks of 2MB first to improve
TLB efficiency and falls back to allocating 4K pages if that fails.

Suppress the warning when the 2MB allocations fails since there is a
valid fall back path.

v2: suppress warnings from swiotlb_tbl_map_single as well
v3: coding style fixes as suggested by Konrad
<span class="signed-off-by">
Signed-off-by: Christian König &lt;christian.koenig@amd.com&gt;</span>
Reported-by: Mike Galbraith &lt;efault@gmx.de&gt;
Bug: https://bugs.freedesktop.org/show_bug.cgi?id=104082
CC: stable@vger.kernel.org
---
 lib/swiotlb.c | 44 +++++++++++++++++++++++++++++---------------
 1 file changed, 29 insertions(+), 15 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - Jan. 3, 2018, 3:01 p.m.</div>
<pre class="content">
On Wed, 2018-01-03 at 11:09 +0100, Christian König wrote:
<span class="quote">&gt; TTM tries to allocate coherent memory in chunks of 2MB first to improve</span>
<span class="quote">&gt; TLB efficiency and falls back to allocating 4K pages if that fails.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Suppress the warning when the 2MB allocations fails since there is a</span>
<span class="quote">&gt; valid fall back path.</span>
[]
<span class="quote">&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
[]
<span class="quote">&gt; @@ -490,11 +490,11 @@ static void swiotlb_bounce(phys_addr_t orig_addr, phys_addr_t tlb_addr,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
<span class="quote">&gt; -				   dma_addr_t tbl_dma_addr,</span>
<span class="quote">&gt; -				   phys_addr_t orig_addr, size_t size,</span>
<span class="quote">&gt; -				   enum dma_data_direction dir,</span>
<span class="quote">&gt; -				   unsigned long attrs)</span>
<span class="quote">&gt; +phys_addr_t tbl_map_single(struct device *hwdev,</span>
<span class="quote">&gt; +			   dma_addr_t tbl_dma_addr,</span>
<span class="quote">&gt; +			   phys_addr_t orig_addr, size_t size,</span>
<span class="quote">&gt; +			   enum dma_data_direction dir,</span>
<span class="quote">&gt; +			   unsigned long attrs, bool warn)</span>

shouldn&#39;t this be static?
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index cea19aaf303c..9890cc2e416f 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -490,11 +490,11 @@</span> <span class="p_context"> static void swiotlb_bounce(phys_addr_t orig_addr, phys_addr_t tlb_addr,</span>
 	}
 }
 
<span class="p_del">-phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
<span class="p_del">-				   dma_addr_t tbl_dma_addr,</span>
<span class="p_del">-				   phys_addr_t orig_addr, size_t size,</span>
<span class="p_del">-				   enum dma_data_direction dir,</span>
<span class="p_del">-				   unsigned long attrs)</span>
<span class="p_add">+phys_addr_t tbl_map_single(struct device *hwdev,</span>
<span class="p_add">+			   dma_addr_t tbl_dma_addr,</span>
<span class="p_add">+			   phys_addr_t orig_addr, size_t size,</span>
<span class="p_add">+			   enum dma_data_direction dir,</span>
<span class="p_add">+			   unsigned long attrs, bool warn)</span>
 {
 	unsigned long flags;
 	phys_addr_t tlb_addr;
<span class="p_chunk">@@ -586,7 +586,7 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 
 not_found:
 	spin_unlock_irqrestore(&amp;io_tlb_lock, flags);
<span class="p_del">-	if (printk_ratelimit())</span>
<span class="p_add">+	if (warn &amp;&amp; printk_ratelimit())</span>
 		dev_warn(hwdev, &quot;swiotlb buffer is full (sz: %zd bytes)\n&quot;, size);
 	return SWIOTLB_MAP_ERROR;
 found:
<span class="p_chunk">@@ -605,6 +605,16 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 
 	return tlb_addr;
 }
<span class="p_add">+</span>
<span class="p_add">+phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
<span class="p_add">+				   dma_addr_t tbl_dma_addr,</span>
<span class="p_add">+				   phys_addr_t orig_addr, size_t size,</span>
<span class="p_add">+				   enum dma_data_direction dir,</span>
<span class="p_add">+				   unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return tbl_map_single(hwdev, tbl_dma_addr, orig_addr,</span>
<span class="p_add">+			      size, dir, attrs, true);</span>
<span class="p_add">+}</span>
 EXPORT_SYMBOL_GPL(swiotlb_tbl_map_single);
 
 /*
<span class="p_chunk">@@ -613,7 +623,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(swiotlb_tbl_map_single);</span>
 
 static phys_addr_t
 map_single(struct device *hwdev, phys_addr_t phys, size_t size,
<span class="p_del">-	   enum dma_data_direction dir, unsigned long attrs)</span>
<span class="p_add">+	   enum dma_data_direction dir, unsigned long attrs, bool warn)</span>
 {
 	dma_addr_t start_dma_addr;
 
<span class="p_chunk">@@ -624,8 +634,8 @@</span> <span class="p_context"> map_single(struct device *hwdev, phys_addr_t phys, size_t size,</span>
 	}
 
 	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);
<span class="p_del">-	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,</span>
<span class="p_del">-				      dir, attrs);</span>
<span class="p_add">+	return tbl_map_single(hwdev, start_dma_addr, phys, size,</span>
<span class="p_add">+			      dir, attrs, warn);</span>
 }
 
 /*
<span class="p_chunk">@@ -713,6 +723,7 @@</span> <span class="p_context"> void *</span>
 swiotlb_alloc_coherent(struct device *hwdev, size_t size,
 		       dma_addr_t *dma_handle, gfp_t flags)
 {
<span class="p_add">+	bool warn = !(flags &amp; __GFP_NOWARN);</span>
 	dma_addr_t dev_addr;
 	void *ret;
 	int order = get_order(size);
<span class="p_chunk">@@ -739,7 +750,7 @@</span> <span class="p_context"> swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 		 * will grab memory from the lowest available address range.
 		 */
 		phys_addr_t paddr = map_single(hwdev, 0, size,
<span class="p_del">-					       DMA_FROM_DEVICE, 0);</span>
<span class="p_add">+					       DMA_FROM_DEVICE, 0, warn);</span>
 		if (paddr == SWIOTLB_MAP_ERROR)
 			goto err_warn;
 
<span class="p_chunk">@@ -769,9 +780,11 @@</span> <span class="p_context"> swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 	return ret;
 
 err_warn:
<span class="p_del">-	pr_warn(&quot;swiotlb: coherent allocation failed for device %s size=%zu\n&quot;,</span>
<span class="p_del">-		dev_name(hwdev), size);</span>
<span class="p_del">-	dump_stack();</span>
<span class="p_add">+	if (warn &amp;&amp; printk_ratelimit()) {</span>
<span class="p_add">+		pr_warn(&quot;swiotlb: coherent allocation failed for device %s size=%zu\n&quot;,</span>
<span class="p_add">+			dev_name(hwdev), size);</span>
<span class="p_add">+		dump_stack();</span>
<span class="p_add">+	}</span>
 
 	return NULL;
 }
<span class="p_chunk">@@ -851,7 +864,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	trace_swiotlb_bounced(dev, dev_addr, size, swiotlb_force);
 
 	/* Oh well, have to allocate and map a bounce buffer. */
<span class="p_del">-	map = map_single(dev, phys, size, dir, attrs);</span>
<span class="p_add">+	map = map_single(dev, phys, size, dir, attrs, true);</span>
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
 		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);
<span class="p_chunk">@@ -989,7 +1002,8 @@</span> <span class="p_context"> swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl, int nelems,</span>
 		if (swiotlb_force == SWIOTLB_FORCE ||
 		    !dma_capable(hwdev, dev_addr, sg-&gt;length)) {
 			phys_addr_t map = map_single(hwdev, sg_phys(sg),
<span class="p_del">-						     sg-&gt;length, dir, attrs);</span>
<span class="p_add">+						     sg-&gt;length, dir, attrs,</span>
<span class="p_add">+						     true /*Always warn.*/);</span>
 			if (map == SWIOTLB_MAP_ERROR) {
 				/* Don&#39;t panic here, we expect map_sg users
 				   to do proper error handling. */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



