
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,02/59] sparc/PCI: Use correct bus address to resource offset - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,02/59] sparc/PCI: Use correct bus address to resource offset</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 25, 2016, 2:11 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1456366370-28995-3-git-send-email-yinghai@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8417111/mbox/"
   >mbox</a>
|
   <a href="/patch/8417111/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8417111/">/patch/8417111/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 5197CC0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 25 Feb 2016 02:29:37 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 6D74920274
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 25 Feb 2016 02:29:36 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 693F5201CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 25 Feb 2016 02:29:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932336AbcBYCNd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 Feb 2016 21:13:33 -0500
Received: from aserp1040.oracle.com ([141.146.126.69]:38144 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756834AbcBYCN2 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 Feb 2016 21:13:28 -0500
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id u1P2D5Lc018850
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Thu, 25 Feb 2016 02:13:06 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0022.oracle.com (8.14.4/8.13.8) with ESMTP id u1P2D4j4012991
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 25 Feb 2016 02:13:04 GMT
Received: from abhmp0017.oracle.com (abhmp0017.oracle.com [141.146.116.23])
	by userv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	u1P2D3wW002985; Thu, 25 Feb 2016 02:13:03 GMT
Received: from userv0022.oracle.com (/10.132.126.176)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 24 Feb 2016 18:13:02 -0800
From: Yinghai Lu &lt;yinghai@kernel.org&gt;
To: Bjorn Helgaas &lt;bhelgaas@google.com&gt;, David Miller &lt;davem@davemloft.net&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Wei Yang &lt;weiyang@linux.vnet.ibm.com&gt;, TJ &lt;linux@iam.tj&gt;,
	Yijing Wang &lt;wangyijing@huawei.com&gt;, Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
Cc: linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
	Yinghai Lu &lt;yinghai@kernel.org&gt;
Subject: [PATCH v10 02/59] sparc/PCI: Use correct bus address to resource
	offset
Date: Wed, 24 Feb 2016 18:11:53 -0800
Message-Id: &lt;1456366370-28995-3-git-send-email-yinghai@kernel.org&gt;
X-Mailer: git-send-email 1.8.4.5
In-Reply-To: &lt;1456366370-28995-1-git-send-email-yinghai@kernel.org&gt;
References: &lt;1456366370-28995-1-git-send-email-yinghai@kernel.org&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a> - Feb. 25, 2016, 2:11 a.m.</div>
<pre class="content">
After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;
warning on anther new model that support 64bit resource.

It turns out that we can not use mem_space.start as 64bit mem space
offset, aka there is mem_space.start != offset.

Use child_phys_addr to calculate exact offset and record offset in
pbm.

After patch we get correct offset.

/pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000
/pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000
/pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000
...
pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])
pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])
pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])
<span class="signed-off-by">
Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
<span class="tested-by">Tested-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
---
 arch/sparc/kernel/pci.c        | 50 +++++++++++++++++++-----------------------
 arch/sparc/kernel/pci_common.c | 32 ++++++++++++++++++++-------
 arch/sparc/kernel/pci_impl.h   |  4 ++++
 3 files changed, 50 insertions(+), 36 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=142961">Bjorn Helgaas</a> - March 10, 2016, 6:24 p.m.</div>
<pre class="content">
Hi Yinghai,

On Wed, Feb 24, 2016 at 06:11:53PM -0800, Yinghai Lu wrote:
<span class="quote">&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt; offset, aka there is mem_space.start != offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use child_phys_addr to calculate exact offset and record offset in</span>
<span class="quote">&gt; pbm.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; After patch we get correct offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>

Just double-checking that your ioport space really contains 256M ports.
It&#39;s fine if it does; it&#39;s just a little unusual.
<span class="quote">
&gt; pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
<span class="quote">&gt; Tested-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/sparc/kernel/pci.c        | 50 +++++++++++++++++++-----------------------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_common.c | 32 ++++++++++++++++++++-------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_impl.h   |  4 ++++</span>
<span class="quote">&gt;  3 files changed, 50 insertions(+), 36 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; index badf095..269630a 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; @@ -654,12 +654,12 @@ struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
<span class="quote">&gt;  	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,</span>
<span class="quote">&gt; -				pbm-&gt;io_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;io_offset);</span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,</span>
<span class="quote">&gt; -				pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;mem_offset);</span>
<span class="quote">&gt;  	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt;  		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,</span>
<span class="quote">&gt; -					pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +					pbm-&gt;mem64_offset);</span>
<span class="quote">&gt;  	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.flags	= IORESOURCE_BUS;</span>
<span class="quote">&gt; @@ -733,30 +733,28 @@ int pcibios_enable_device(struct pci_dev *dev, int mask)</span>
<span class="quote">&gt;  static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  				      enum pci_mmap_state mmap_state)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	struct pci_pbm_info *pbm = pdev-&gt;dev.archdata.host_controller;</span>
<span class="quote">&gt; -	unsigned long space_size, user_offset, user_size;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	if (mmap_state == pci_mmap_io) {</span>
<span class="quote">&gt; -		space_size = resource_size(&amp;pbm-&gt;io_space);</span>
<span class="quote">&gt; -	} else {</span>
<span class="quote">&gt; -		space_size = resource_size(&amp;pbm-&gt;mem_space);</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +	unsigned long user_offset, user_size;</span>
<span class="quote">&gt; +	struct resource res, *root_bus_res;</span>
<span class="quote">&gt; +	struct pci_bus_region region;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Make sure the request is in range. */</span>
<span class="quote">&gt;  	user_offset = vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	user_size = vma-&gt;vm_end - vma-&gt;vm_start;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (user_offset &gt;= space_size ||</span>
<span class="quote">&gt; -	    (user_offset + user_size) &gt; space_size)</span>
<span class="quote">&gt; +	region.start = user_offset;</span>
<span class="quote">&gt; +	region.end = user_offset + user_size - 1;</span>
<span class="quote">&gt; +	memset(&amp;res, 0, sizeof(res));</span>
<span class="quote">&gt; +	if (mmap_state == pci_mmap_io)</span>
<span class="quote">&gt; +		res.flags = IORESOURCE_IO;</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		res.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pcibios_bus_to_resource(pdev-&gt;bus, &amp;res, &amp;region);</span>
<span class="quote">&gt; +	root_bus_res = pci_find_root_bus_resource(pdev-&gt;bus, &amp;res);</span>
<span class="quote">&gt; +	if (!root_bus_res)</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (mmap_state == pci_mmap_io) {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="quote">&gt; -				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; -	} else {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="quote">&gt; -				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +	vma-&gt;vm_pgoff = res.start &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>

This needs to explain what&#39;s unique about sparc that means it needs
pci_find_root_bus_resource() when no other arch does.

This is used in the pci_mmap_resource() path.  I don&#39;t understand how
that path works on sparc.  I tried to work through the simple case of
a user mapping the first 4096 bytes of a BAR.  Assume the BAR is 4096
bytes in size:

  # User does something like this:
  #   mmap(NULL, 4096, ..., &quot;/sys/.../resourceN&quot;, 0);

  pci_mmap_resource

    # At entry, &quot;vma-&gt;vm_pgoff&quot; is the offset into the BAR (in pages).
    # In this case, the user wants the first page of the BAR, so
    # vma-&gt;vm_pgoff == 0.

    # &quot;res&quot; is the the pdev-&gt;resource[n], which contains the CPU
    # physical address of the BAR.

    pci_mmap_fits(pdev, i, vma, PCI_MMAP_SYSFS)
      start = vma-&gt;vm_pgoff           # == 0
      size = 4096
      pci_start = 0                   # offset into BAR (PCI_MMAP_SYSFS case)

      # we return 1 because [0x0000-0x0fff] is a valid area in this
      # BAR

    pci_resource_to_user(pdev, i, res, &amp;start, &amp;end);

    # On most platforms: pci_resource_to_user() copies res-&gt;start to
    # *start, so &quot;start&quot; is the CPU physical address of the
    # BAR.
    
    # On sparc: pci_resource_to_user() calls pcibios_resource_to_bus()
    # (see below), so &quot;start&quot; is the PCI bus address of the BAR.

    vma-&gt;vm_pgoff += start &gt;&gt; PAGE_SHIFT;

    # On most platforms: &quot;vma-&gt;vm_pgoff&quot; is now the CPU physical page
    # number of the part of the BAR we&#39;re mapping.

    # On sparc: &quot;vma-&gt;vm_pgoff&quot; is the PCI bus page number of the part
    # of the BAR we&#39;re mapping.  This seems wrong: doesn&#39;t the VM
    # system assume vm_pgoff is a CPU physical page number?

    if (... &amp;&amp; iomem_is_exclusive(start))

    # On most platforms, &quot;start&quot; is a CPU physical address, and
    # iomem_is_exclusive() looks it up in the iomem_resource tree,
    # which contains resources of CPU physical addresses.

    # On sparc, &quot;start&quot; is a PCI bus address.  How can this work in
    # iomem_is_exclusive()?  I assume the resources in iomem_resource
    # still contain CPU physical addresses, not PCI bus addresses,
    # don&#39;t they?
<span class="quote">
&gt;  }</span>
<span class="quote">&gt; @@ -977,16 +975,12 @@ void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
<span class="quote">&gt;  			  const struct resource *rp, resource_size_t *start,</span>
<span class="quote">&gt;  			  resource_size_t *end)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	struct pci_pbm_info *pbm = pdev-&gt;dev.archdata.host_controller;</span>
<span class="quote">&gt; -	unsigned long offset;</span>
<span class="quote">&gt; +	struct pci_bus_region region;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (rp-&gt;flags &amp; IORESOURCE_IO)</span>
<span class="quote">&gt; -		offset = pbm-&gt;io_space.start;</span>
<span class="quote">&gt; -	else</span>
<span class="quote">&gt; -		offset = pbm-&gt;mem_space.start;</span>
<span class="quote">&gt; +	pcibios_resource_to_bus(pdev-&gt;bus, &amp;region, (struct resource *)rp);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	*start = rp-&gt;start - offset;</span>
<span class="quote">&gt; -	*end = rp-&gt;end - offset;</span>
<span class="quote">&gt; +	*start = region.start;</span>
<span class="quote">&gt; +	*end = region.end;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void pcibios_set_master(struct pci_dev *dev)</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; index 33524c1..76998f8 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; @@ -410,13 +410,16 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (i = 0; i &lt; num_pbm_ranges; i++) {</span>
<span class="quote">&gt;  		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];</span>
<span class="quote">&gt; -		unsigned long a, size;</span>
<span class="quote">&gt; +		unsigned long a, size, region_a;</span>
<span class="quote">&gt;  		u32 parent_phys_hi, parent_phys_lo;</span>
<span class="quote">&gt; +		u32 child_phys_mid, child_phys_lo;</span>
<span class="quote">&gt;  		u32 size_hi, size_lo;</span>
<span class="quote">&gt;  		int type;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		parent_phys_hi = pr-&gt;parent_phys_hi;</span>
<span class="quote">&gt;  		parent_phys_lo = pr-&gt;parent_phys_lo;</span>
<span class="quote">&gt; +		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="quote">&gt; +		child_phys_lo = pr-&gt;child_phys_lo;</span>
<span class="quote">&gt;  		if (tlb_type == hypervisor)</span>
<span class="quote">&gt;  			parent_phys_hi &amp;= 0x0fffffff;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -426,6 +429,8 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;</span>
<span class="quote">&gt;  		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt; +		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="quote">&gt; +		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  		size = (((unsigned long)size_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  			((unsigned long)size_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -440,6 +445,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;io_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.flags = IORESOURCE_IO;</span>
<span class="quote">&gt; +			pbm-&gt;io_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_io = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -448,6 +454,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			pbm-&gt;mem_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -456,6 +463,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			pbm-&gt;mem64_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -471,14 +479,22 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		prom_halt();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="quote">&gt; -	       pbm-&gt;name,</span>
<span class="quote">&gt; -	       pbm-&gt;io_space.start,</span>
<span class="quote">&gt; -	       pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +	if (pbm-&gt;io_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem64_space.flags &amp;&amp; pbm-&gt;mem_space.flags) {</span>
<span class="quote">&gt; +		if (pbm-&gt;mem64_space.start &lt;= pbm-&gt;mem_space.end)</span>
<span class="quote">&gt; +			pbm-&gt;mem64_space.start = pbm-&gt;mem_space.end + 1;</span>
<span class="quote">&gt; +		if (pbm-&gt;mem64_space.start &gt; pbm-&gt;mem64_space.end)</span>
<span class="quote">&gt; +			pbm-&gt;mem64_space.flags = 0;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt; -		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="quote">&gt; -		       pbm-&gt;mem64_space.start);</span>
<span class="quote">&gt; -	printk(&quot;\n&quot;);</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem64_offset);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;</span>
<span class="quote">&gt;  	pbm-&gt;mem64_space.name = pbm-&gt;name;</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; index 37222ca..2853af7 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; @@ -99,6 +99,10 @@ struct pci_pbm_info {</span>
<span class="quote">&gt;  	struct resource			mem_space;</span>
<span class="quote">&gt;  	struct resource			mem64_space;</span>
<span class="quote">&gt;  	struct resource			busn;</span>
<span class="quote">&gt; +	/* offset */</span>
<span class="quote">&gt; +	resource_size_t			io_offset;</span>
<span class="quote">&gt; +	resource_size_t			mem_offset;</span>
<span class="quote">&gt; +	resource_size_t			mem64_offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Base of PCI Config space, can be per-PBM or shared. */</span>
<span class="quote">&gt;  	unsigned long			config_space;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.8.4.5</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe from this list: send the line &quot;unsubscribe linux-pci&quot; in</span>
<span class="quote">&gt; the body of a message to majordomo@vger.kernel.org</span>
<span class="quote">&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - March 10, 2016, 7:47 p.m.</div>
<pre class="content">
<span class="from">From: Bjorn Helgaas &lt;helgaas@kernel.org&gt;</span>
Date: Thu, 10 Mar 2016 12:24:40 -0600
<span class="quote">
&gt; Hi Yinghai,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Wed, Feb 24, 2016 at 06:11:53PM -0800, Yinghai Lu wrote:</span>
<span class="quote">&gt;&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt;&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt;&gt; offset, aka there is mem_space.start != offset.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Use child_phys_addr to calculate exact offset and record offset in</span>
<span class="quote">&gt;&gt; pbm.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; After patch we get correct offset.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt;&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt;&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt;&gt; ...</span>
<span class="quote">&gt;&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt;&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just double-checking that your ioport space really contains 256M ports.</span>
<span class="quote">&gt; It&#39;s fine if it does; it&#39;s just a little unusual.</span>

It should be 16MB, but we trust the OF properties in the &#39;pci&#39; device
node to determine these ranges and the above must be what it is
advertising there.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="p_header">index badf095..269630a 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci.c</span>
<span class="p_chunk">@@ -654,12 +654,12 @@</span> <span class="p_context"> struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
 	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);
 
 	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,
<span class="p_del">-				pbm-&gt;io_space.start);</span>
<span class="p_add">+				pbm-&gt;io_offset);</span>
 	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,
<span class="p_del">-				pbm-&gt;mem_space.start);</span>
<span class="p_add">+				pbm-&gt;mem_offset);</span>
 	if (pbm-&gt;mem64_space.flags)
 		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,
<span class="p_del">-					pbm-&gt;mem_space.start);</span>
<span class="p_add">+					pbm-&gt;mem64_offset);</span>
 	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;
 	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;
 	pbm-&gt;busn.flags	= IORESOURCE_BUS;
<span class="p_chunk">@@ -733,30 +733,28 @@</span> <span class="p_context"> int pcibios_enable_device(struct pci_dev *dev, int mask)</span>
 static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struct *vma,
 				      enum pci_mmap_state mmap_state)
 {
<span class="p_del">-	struct pci_pbm_info *pbm = pdev-&gt;dev.archdata.host_controller;</span>
<span class="p_del">-	unsigned long space_size, user_offset, user_size;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (mmap_state == pci_mmap_io) {</span>
<span class="p_del">-		space_size = resource_size(&amp;pbm-&gt;io_space);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		space_size = resource_size(&amp;pbm-&gt;mem_space);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	unsigned long user_offset, user_size;</span>
<span class="p_add">+	struct resource res, *root_bus_res;</span>
<span class="p_add">+	struct pci_bus_region region;</span>
 
 	/* Make sure the request is in range. */
 	user_offset = vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT;
 	user_size = vma-&gt;vm_end - vma-&gt;vm_start;
 
<span class="p_del">-	if (user_offset &gt;= space_size ||</span>
<span class="p_del">-	    (user_offset + user_size) &gt; space_size)</span>
<span class="p_add">+	region.start = user_offset;</span>
<span class="p_add">+	region.end = user_offset + user_size - 1;</span>
<span class="p_add">+	memset(&amp;res, 0, sizeof(res));</span>
<span class="p_add">+	if (mmap_state == pci_mmap_io)</span>
<span class="p_add">+		res.flags = IORESOURCE_IO;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		res.flags = IORESOURCE_MEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	pcibios_bus_to_resource(pdev-&gt;bus, &amp;res, &amp;region);</span>
<span class="p_add">+	root_bus_res = pci_find_root_bus_resource(pdev-&gt;bus, &amp;res);</span>
<span class="p_add">+	if (!root_bus_res)</span>
 		return -EINVAL;
 
<span class="p_del">-	if (mmap_state == pci_mmap_io) {</span>
<span class="p_del">-		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="p_del">-				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="p_del">-				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	vma-&gt;vm_pgoff = res.start &gt;&gt; PAGE_SHIFT;</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -977,16 +975,12 @@</span> <span class="p_context"> void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
 			  const struct resource *rp, resource_size_t *start,
 			  resource_size_t *end)
 {
<span class="p_del">-	struct pci_pbm_info *pbm = pdev-&gt;dev.archdata.host_controller;</span>
<span class="p_del">-	unsigned long offset;</span>
<span class="p_add">+	struct pci_bus_region region;</span>
 
<span class="p_del">-	if (rp-&gt;flags &amp; IORESOURCE_IO)</span>
<span class="p_del">-		offset = pbm-&gt;io_space.start;</span>
<span class="p_del">-	else</span>
<span class="p_del">-		offset = pbm-&gt;mem_space.start;</span>
<span class="p_add">+	pcibios_resource_to_bus(pdev-&gt;bus, &amp;region, (struct resource *)rp);</span>
 
<span class="p_del">-	*start = rp-&gt;start - offset;</span>
<span class="p_del">-	*end = rp-&gt;end - offset;</span>
<span class="p_add">+	*start = region.start;</span>
<span class="p_add">+	*end = region.end;</span>
 }
 
 void pcibios_set_master(struct pci_dev *dev)
<span class="p_header">diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="p_header">index 33524c1..76998f8 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci_common.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci_common.c</span>
<span class="p_chunk">@@ -410,13 +410,16 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 
 	for (i = 0; i &lt; num_pbm_ranges; i++) {
 		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];
<span class="p_del">-		unsigned long a, size;</span>
<span class="p_add">+		unsigned long a, size, region_a;</span>
 		u32 parent_phys_hi, parent_phys_lo;
<span class="p_add">+		u32 child_phys_mid, child_phys_lo;</span>
 		u32 size_hi, size_lo;
 		int type;
 
 		parent_phys_hi = pr-&gt;parent_phys_hi;
 		parent_phys_lo = pr-&gt;parent_phys_lo;
<span class="p_add">+		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="p_add">+		child_phys_lo = pr-&gt;child_phys_lo;</span>
 		if (tlb_type == hypervisor)
 			parent_phys_hi &amp;= 0x0fffffff;
 
<span class="p_chunk">@@ -426,6 +429,8 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;
 		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |
 		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));
<span class="p_add">+		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="p_add">+		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
 		size = (((unsigned long)size_hi &lt;&lt; 32UL) |
 			((unsigned long)size_lo  &lt;&lt;  0UL));
 
<span class="p_chunk">@@ -440,6 +445,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;io_space.start = a;
 			pbm-&gt;io_space.end = a + size - 1UL;
 			pbm-&gt;io_space.flags = IORESOURCE_IO;
<span class="p_add">+			pbm-&gt;io_offset = a - region_a;</span>
 			saw_io = 1;
 			break;
 
<span class="p_chunk">@@ -448,6 +454,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;mem_space.start = a;
 			pbm-&gt;mem_space.end = a + size - 1UL;
 			pbm-&gt;mem_space.flags = IORESOURCE_MEM;
<span class="p_add">+			pbm-&gt;mem_offset = a - region_a;</span>
 			saw_mem = 1;
 			break;
 
<span class="p_chunk">@@ -456,6 +463,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;mem64_space.start = a;
 			pbm-&gt;mem64_space.end = a + size - 1UL;
 			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;
<span class="p_add">+			pbm-&gt;mem64_offset = a - region_a;</span>
 			saw_mem = 1;
 			break;
 
<span class="p_chunk">@@ -471,14 +479,22 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 		prom_halt();
 	}
 
<span class="p_del">-	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="p_del">-	       pbm-&gt;name,</span>
<span class="p_del">-	       pbm-&gt;io_space.start,</span>
<span class="p_del">-	       pbm-&gt;mem_space.start);</span>
<span class="p_add">+	if (pbm-&gt;io_space.flags)</span>
<span class="p_add">+		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="p_add">+	if (pbm-&gt;mem_space.flags)</span>
<span class="p_add">+		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="p_add">+	if (pbm-&gt;mem64_space.flags &amp;&amp; pbm-&gt;mem_space.flags) {</span>
<span class="p_add">+		if (pbm-&gt;mem64_space.start &lt;= pbm-&gt;mem_space.end)</span>
<span class="p_add">+			pbm-&gt;mem64_space.start = pbm-&gt;mem_space.end + 1;</span>
<span class="p_add">+		if (pbm-&gt;mem64_space.start &gt; pbm-&gt;mem64_space.end)</span>
<span class="p_add">+			pbm-&gt;mem64_space.flags = 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (pbm-&gt;mem64_space.flags)
<span class="p_del">-		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="p_del">-		       pbm-&gt;mem64_space.start);</span>
<span class="p_del">-	printk(&quot;\n&quot;);</span>
<span class="p_add">+		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem64_offset);</span>
 
 	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;
 	pbm-&gt;mem64_space.name = pbm-&gt;name;
<span class="p_header">diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="p_header">index 37222ca..2853af7 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci_impl.h</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="p_chunk">@@ -99,6 +99,10 @@</span> <span class="p_context"> struct pci_pbm_info {</span>
 	struct resource			mem_space;
 	struct resource			mem64_space;
 	struct resource			busn;
<span class="p_add">+	/* offset */</span>
<span class="p_add">+	resource_size_t			io_offset;</span>
<span class="p_add">+	resource_size_t			mem_offset;</span>
<span class="p_add">+	resource_size_t			mem64_offset;</span>
 
 	/* Base of PCI Config space, can be per-PBM or shared. */
 	unsigned long			config_space;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



