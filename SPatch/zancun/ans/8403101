
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[14/15] perf x86 intel: Add DATALA events into sysfs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [14/15] perf x86 intel: Add DATALA events into sysfs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 24, 2016, 8:46 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1456303616-26926-15-git-send-email-jolsa@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8403101/mbox/"
   >mbox</a>
|
   <a href="/patch/8403101/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8403101/">/patch/8403101/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 3A72A9F1D4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Feb 2016 08:48:23 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 4C866201FA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Feb 2016 08:48:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 330BC2034A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Feb 2016 08:48:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932987AbcBXIsF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 Feb 2016 03:48:05 -0500
Received: from mx1.redhat.com ([209.132.183.28]:47363 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932649AbcBXIsB (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 Feb 2016 03:48:01 -0500
Received: from int-mx10.intmail.prod.int.phx2.redhat.com
	(int-mx10.intmail.prod.int.phx2.redhat.com [10.5.11.23])
	by mx1.redhat.com (Postfix) with ESMTPS id A696A1E22;
	Wed, 24 Feb 2016 08:48:01 +0000 (UTC)
Received: from krava.redhat.com (vpn1-4-180.ams2.redhat.com [10.36.4.180])
	by int-mx10.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id u1O8kuWl012722; Wed, 24 Feb 2016 03:47:57 -0500
From: Jiri Olsa &lt;jolsa@kernel.org&gt;
To: Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;
Cc: lkml &lt;linux-kernel@vger.kernel.org&gt;, David Ahern &lt;dsahern@gmail.com&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Namhyung Kim &lt;namhyung@kernel.org&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Stephane Eranian &lt;eranian@google.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 14/15] perf x86 intel: Add DATALA events into sysfs
Date: Wed, 24 Feb 2016 09:46:55 +0100
Message-Id: &lt;1456303616-26926-15-git-send-email-jolsa@kernel.org&gt;
In-Reply-To: &lt;1456303616-26926-1-git-send-email-jolsa@kernel.org&gt;
References: &lt;1456303616-26926-1-git-send-email-jolsa@kernel.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.23
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a> - Feb. 24, 2016, 8:46 a.m.</div>
<pre class="content">
Adding DATALA events into Haaswell events sysfs
directory, so it&#39;s easier to use them.

Adding all DATALA events as specified by Intel SDM
manual 18.10.3 PEBS Data Address Profiling.

Link: http://lkml.kernel.org/n/tip-dvpk5ys80v41oh5xgqvloviw@git.kernel.org
<span class="signed-off-by">Signed-off-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
---
 arch/x86/events/intel/core.c | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123">Andi Kleen</a> - Feb. 24, 2016, 3:59 p.m.</div>
<pre class="content">
On Wed, Feb 24, 2016 at 09:46:55AM +0100, Jiri Olsa wrote:
<span class="quote">&gt; Adding DATALA events into Haaswell events sysfs</span>
<span class="quote">&gt; directory, so it&#39;s easier to use them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Adding all DATALA events as specified by Intel SDM</span>
<span class="quote">&gt; manual 18.10.3 PEBS Data Address Profiling.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Link: http://lkml.kernel.org/n/tip-dvpk5ys80v41oh5xgqvloviw@git.kernel.org</span>
<span class="quote">&gt; Signed-off-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/events/intel/core.c | 39 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 39 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/events/intel/core.c b/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; index a7ec685657a5..199f645aedc1 100644</span>
<span class="quote">&gt; --- a/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; +++ b/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; @@ -3253,6 +3253,26 @@ static __init void intel_ht_bug(void)</span>
<span class="quote">&gt;  EVENT_ATTR_STR(mem-loads,	mem_ld_hsw,	&quot;event=0xcd,umask=0x1,ldlat=3&quot;);</span>
<span class="quote">&gt;  EVENT_ATTR_STR(mem-stores,	mem_st_hsw,	&quot;event=0xd0,umask=0x82&quot;)</span>
<span class="quote">
&gt; +EVENT_ATTR_STR(mem-load-hit-lfb,	hsw_load_hit_lfb,	&quot;event=0xd1,umask=0x40&quot;);</span>
<span class="quote">&gt; +EVENT_ATTR_STR(mem-snp-miss,		hsw_snp_miss,		&quot;event=0xd2,umask=0x01&quot;);</span>
<span class="quote">&gt; +EVENT_ATTR_STR(mem-snp-hit,		hsw_snp_hit,		&quot;event=0xd2,umask=0x02&quot;);</span>
<span class="quote">&gt; +EVENT_ATTR_STR(mem-snp-hitm,		hsw_snp_hitm,		&quot;event=0xd2,umask=0x04&quot;);</span>
<span class="quote">&gt; +EVENT_ATTR_STR(mem-snp-none,		hsw_snp_none,		&quot;event=0xd2,umask=0x08&quot;);</span>

I don&#39;t think these are well enough defined for generic events. For example what does
hit-lfb mean generally? Snooping is also a fairly nebulous concept that can change
between micro architectures.

Instead of adding more and more badly defined and not really portable 
generic events I think it would be better to apply the patches that enable
the full Intel/POWER/other JSON event lists.

They have been posted multiple times by Sukadev and just need to be reviewed,
and would be a far better solution to this.

That would also make them &quot;easy to use&quot;.

This would have the advantage that we actually have documentation 
what they actually mean in the SDM, and they map to the
documentation, and people can understand them without needing
to reverse engineer perf.

Also these events can have bugs (see e.g. the Haswell Server spec updates)
and if you can&#39;t look them up it can be hard to use.

-Andi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Feb. 24, 2016, 6:54 p.m.</div>
<pre class="content">
On Wed, Feb 24, 2016 at 07:59:05AM -0800, Andi Kleen wrote:
<span class="quote">&gt; On Wed, Feb 24, 2016 at 09:46:55AM +0100, Jiri Olsa wrote:</span>
<span class="quote">&gt; &gt; Adding DATALA events into Haaswell events sysfs</span>
<span class="quote">&gt; &gt; directory, so it&#39;s easier to use them.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Adding all DATALA events as specified by Intel SDM</span>
<span class="quote">&gt; &gt; manual 18.10.3 PEBS Data Address Profiling.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Link: http://lkml.kernel.org/n/tip-dvpk5ys80v41oh5xgqvloviw@git.kernel.org</span>
<span class="quote">&gt; &gt; Signed-off-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/events/intel/core.c | 39 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  1 file changed, 39 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/events/intel/core.c b/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; &gt; index a7ec685657a5..199f645aedc1 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/events/intel/core.c</span>
<span class="quote">&gt; &gt; @@ -3253,6 +3253,26 @@ static __init void intel_ht_bug(void)</span>
<span class="quote">&gt; &gt;  EVENT_ATTR_STR(mem-loads,	mem_ld_hsw,	&quot;event=0xcd,umask=0x1,ldlat=3&quot;);</span>
<span class="quote">&gt; &gt;  EVENT_ATTR_STR(mem-stores,	mem_st_hsw,	&quot;event=0xd0,umask=0x82&quot;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +EVENT_ATTR_STR(mem-load-hit-lfb,	hsw_load_hit_lfb,	&quot;event=0xd1,umask=0x40&quot;);</span>
<span class="quote">&gt; &gt; +EVENT_ATTR_STR(mem-snp-miss,		hsw_snp_miss,		&quot;event=0xd2,umask=0x01&quot;);</span>
<span class="quote">&gt; &gt; +EVENT_ATTR_STR(mem-snp-hit,		hsw_snp_hit,		&quot;event=0xd2,umask=0x02&quot;);</span>
<span class="quote">&gt; &gt; +EVENT_ATTR_STR(mem-snp-hitm,		hsw_snp_hitm,		&quot;event=0xd2,umask=0x04&quot;);</span>
<span class="quote">&gt; &gt; +EVENT_ATTR_STR(mem-snp-none,		hsw_snp_none,		&quot;event=0xd2,umask=0x08&quot;);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t think these are well enough defined for generic events. For example what does</span>
<span class="quote">&gt; hit-lfb mean generally? Snooping is also a fairly nebulous concept that can change</span>
<span class="quote">&gt; between micro architectures.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Instead of adding more and more badly defined and not really portable </span>
<span class="quote">&gt; generic events I think it would be better to apply the patches that enable</span>
<span class="quote">&gt; the full Intel/POWER/other JSON event lists.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; They have been posted multiple times by Sukadev and just need to be reviewed,</span>
<span class="quote">&gt; and would be a far better solution to this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That would also make them &quot;easy to use&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This would have the advantage that we actually have documentation </span>
<span class="quote">&gt; what they actually mean in the SDM, and they map to the</span>
<span class="quote">&gt; documentation, and people can understand them without needing</span>
<span class="quote">&gt; to reverse engineer perf.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Also these events can have bugs (see e.g. the Haswell Server spec updates)</span>
<span class="quote">&gt; and if you can&#39;t look them up it can be hard to use.</span>

right, I&#39;ll keep that only in my queue.. we discussed with Peter
and he said he&#39;ll try to check on JSON patchset state ;-)

thanks,
jirka
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/events/intel/core.c b/arch/x86/events/intel/core.c</span>
<span class="p_header">index a7ec685657a5..199f645aedc1 100644</span>
<span class="p_header">--- a/arch/x86/events/intel/core.c</span>
<span class="p_header">+++ b/arch/x86/events/intel/core.c</span>
<span class="p_chunk">@@ -3253,6 +3253,26 @@</span> <span class="p_context"> static __init void intel_ht_bug(void)</span>
 EVENT_ATTR_STR(mem-loads,	mem_ld_hsw,	&quot;event=0xcd,umask=0x1,ldlat=3&quot;);
 EVENT_ATTR_STR(mem-stores,	mem_st_hsw,	&quot;event=0xd0,umask=0x82&quot;)
 
<span class="p_add">+EVENT_ATTR_STR(mem-stlb-miss-loads,	hsw_stlb_miss_loads,	&quot;event=0xd0,umask=0x11&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-stlb-miss-stores,	hsw_stlb_miss_stores,	&quot;event=0xd0,umask=0x12&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-lock-loads,		hsw_lock_loads,		&quot;event=0xd0,umask=0x21&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-split-loads,		hsw_split_loads,	&quot;event=0xd0,umask=0x41&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-split-stores,	hsw_split_stores,	&quot;event=0xd0,umask=0x42&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-all-loads,		hsw_all_loads,		&quot;event=0xd0,umask=0x81&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-all-stores,		hsw_all_stores,		&quot;event=0xd0,umask=0x82&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l1-hit,		hsw_load_l1_hit,	&quot;event=0xd1,umask=0x01&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l2-hit,		hsw_load_l2_hit,	&quot;event=0xd1,umask=0x02&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l3-hit,		hsw_load_l3_hit,	&quot;event=0xd1,umask=0x04&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l1-miss,	hsw_load_l1_miss,	&quot;event=0xd1,umask=0x08&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l2-miss,	hsw_load_l2_miss,	&quot;event=0xd1,umask=0x10&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-l3-miss,	hsw_load_l3_miss,	&quot;event=0xd1,umask=0x20&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-load-hit-lfb,	hsw_load_hit_lfb,	&quot;event=0xd1,umask=0x40&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-snp-miss,		hsw_snp_miss,		&quot;event=0xd2,umask=0x01&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-snp-hit,		hsw_snp_hit,		&quot;event=0xd2,umask=0x02&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-snp-hitm,		hsw_snp_hitm,		&quot;event=0xd2,umask=0x04&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-snp-none,		hsw_snp_none,		&quot;event=0xd2,umask=0x08&quot;);</span>
<span class="p_add">+EVENT_ATTR_STR(mem-local-dram,		hsw_local_dram,		&quot;event=0xd3,umask=0x01&quot;);</span>
<span class="p_add">+</span>
 /* Haswell special events */
 EVENT_ATTR_STR(tx-start,	tx_start,	&quot;event=0xc9,umask=0x1&quot;);
 EVENT_ATTR_STR(tx-commit,	tx_commit,	&quot;event=0xc9,umask=0x2&quot;);
<span class="p_chunk">@@ -3282,6 +3302,25 @@</span> <span class="p_context"> static struct attribute *hsw_events_attrs[] = {</span>
 	EVENT_PTR(cycles_ct),
 	EVENT_PTR(mem_ld_hsw),
 	EVENT_PTR(mem_st_hsw),
<span class="p_add">+	EVENT_PTR(hsw_stlb_miss_loads),</span>
<span class="p_add">+	EVENT_PTR(hsw_stlb_miss_stores),</span>
<span class="p_add">+	EVENT_PTR(hsw_lock_loads),</span>
<span class="p_add">+	EVENT_PTR(hsw_split_loads),</span>
<span class="p_add">+	EVENT_PTR(hsw_split_stores),</span>
<span class="p_add">+	EVENT_PTR(hsw_all_loads),</span>
<span class="p_add">+	EVENT_PTR(hsw_all_stores),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l1_hit),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l2_hit),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l3_hit),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l1_miss),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l2_miss),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_l3_miss),</span>
<span class="p_add">+	EVENT_PTR(hsw_load_hit_lfb),</span>
<span class="p_add">+	EVENT_PTR(hsw_snp_miss),</span>
<span class="p_add">+	EVENT_PTR(hsw_snp_hit),</span>
<span class="p_add">+	EVENT_PTR(hsw_snp_hitm),</span>
<span class="p_add">+	EVENT_PTR(hsw_snp_none),</span>
<span class="p_add">+	EVENT_PTR(hsw_local_dram),</span>
 	NULL
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



