
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] acpi, apei, arm64: APEI initial support for aarch64. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] acpi, apei, arm64: APEI initial support for aarch64.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 3, 2015, 5:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1449162903-11203-1-git-send-email-fu.wei@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7762001/mbox/"
   >mbox</a>
|
   <a href="/patch/7762001/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7762001/">/patch/7762001/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 396C49F30B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Dec 2015 17:15:35 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 53EDE204E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Dec 2015 17:15:34 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 50941204E0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  3 Dec 2015 17:15:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753102AbbLCRP2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 3 Dec 2015 12:15:28 -0500
Received: from mx1.redhat.com ([209.132.183.28]:44320 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752424AbbLCRP0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 3 Dec 2015 12:15:26 -0500
Received: from int-mx11.intmail.prod.int.phx2.redhat.com
	(int-mx11.intmail.prod.int.phx2.redhat.com [10.5.11.24])
	by mx1.redhat.com (Postfix) with ESMTPS id 8C63CC000410;
	Thu,  3 Dec 2015 17:15:25 +0000 (UTC)
Received: from magi-f22.redhat.com (vpn1-5-12.pek2.redhat.com [10.72.5.12])
	by int-mx11.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id tB3HF6jB022148; Thu, 3 Dec 2015 12:15:08 -0500
From: fu.wei@linaro.org
To: linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	linux-acpi@vger.kernel.org, linaro-acpi@lists.linaro.org,
	jon.zhixiong.zhang@gmail.com, tomasz.nowicki@linaro.org,
	tn@semihalf.com, rjw@rjwysocki.net, lenb@kernel.org,
	jarkko.nikula@linux.intel.com
Cc: graeme.gregory@linaro.org, al.stone@linaro.org,
	hanjun.guo@linaro.org, jcm@redhat.com, mark.rutland@arm.com,
	catalin.marinas@arm.com, will.deacon@arm.com, msalter@redhat.com,
	Marc.Zyngier@arm.com, grant.likely@linaro.org, rrichter@cavium.com,
	lorenzo.pieralisi@arm.com, rruigrok@codeaurora.org,
	harba@qti.qualcomm.com, Fu Wei &lt;fu.wei@linaro.org&gt;
Subject: [PATCH v3] acpi, apei, arm64: APEI initial support for aarch64.
Date: Fri,  4 Dec 2015 01:15:03 +0800
Message-Id: &lt;1449162903-11203-1-git-send-email-fu.wei@linaro.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.24
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Dec. 3, 2015, 5:15 p.m.</div>
<pre class="content">
<span class="from">From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>

This commit provides APEI arch-specific bits for aarch64

The reason for wrapping &quot;acpi_disable_cmcff&quot; by 
&quot;#if defined(__i386__) || defined(__x86_64__)&quot; in hest.c is:
according to ACPI spec CMC(Corrected Machine Check) is only for IA-32
Architecture.

Changelog:
v3: Remove &quot;acpi_disable_cmcff&quot; from arm64 code,
    and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;

v2: https://lkml.org/lkml/2015/12/2/432
    Rebase to latest kernel version(4.4-rc3).
    Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c

v1: https://lkml.org/lkml/2015/8/14/199
    Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.
    Delete arch/arm64/kernel/apei.c.
    Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.
<span class="signed-off-by">
Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
---
 arch/arm64/Kconfig            | 1 +
 arch/arm64/include/asm/acpi.h | 1 +
 arch/arm64/kernel/acpi.c      | 6 ++++++
 drivers/acpi/apei/hest.c      | 2 ++
 4 files changed, 10 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Dec. 7, 2015, 7:27 a.m.</div>
<pre class="content">
Hi all,

On 4 December 2015 at 01:15,  &lt;fu.wei@linaro.org&gt; wrote:
<span class="quote">&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The reason for wrapping &quot;acpi_disable_cmcff&quot; by</span>
<span class="quote">&gt; &quot;#if defined(__i386__) || defined(__x86_64__)&quot; in hest.c is:</span>
<span class="quote">&gt; according to ACPI spec CMC(Corrected Machine Check) is only for IA-32</span>
<span class="quote">&gt; Architecture.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Changelog:</span>
<span class="quote">&gt; v3: Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;     and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;     Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;     Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;     Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/Kconfig            | 1 +</span>
<span class="quote">&gt;  arch/arm64/include/asm/acpi.h | 1 +</span>
<span class="quote">&gt;  arch/arm64/kernel/acpi.c      | 6 ++++++</span>
<span class="quote">&gt;  drivers/acpi/apei/hest.c      | 2 ++</span>
<span class="quote">&gt;  4 files changed, 10 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt; index 871f217..58c8992 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;         select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;         select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;         select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt; +       select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;         select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;         select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt;         select ARCH_HAS_GCOV_PROFILE_ALL</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; index caafd63..7207f8e 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; @@ -94,6 +94,7 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; +void arch_apei_flush_tlb_one(unsigned long addr);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #endif /*_ASM_ACPI_H*/</span>
<span class="quote">&gt; diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; index d1ce8e2..7a742e7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; +++ b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; @@ -32,6 +32,7 @@</span>
<span class="quote">&gt;  #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt;  # include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt;  # include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt; +# include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  int acpi_noirq = 1;            /* skip ACPI IRQ initialization */</span>
<span class="quote">&gt; @@ -233,4 +234,9 @@ pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt;                 return __pgprot(PROT_NORMAL_NC);</span>
<span class="quote">&gt;         return __pgprot(PROT_DEVICE_nGnRnE);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; index 20b3fcf..4ead747 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; @@ -232,8 +232,10 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;                 goto err;</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#if defined(__i386__) || defined(__x86_64__)</span>
<span class="quote">&gt;         if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;                 apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; +#endif</span>

Another thought is moving acpi_disable_cmcff to drivers/acpi/apei/hest.c
I am not sure which one is best, but AFAIK CMC(Corrected Machine Check)
is only for IA-32 Architecture, so I thinks we can comment out this code
in other architectures, even with &quot;hest_parse_cmc&quot;.

Any suggestion?
<span class="quote">
&gt;</span>
<span class="quote">&gt;         if (!ghes_disable) {</span>
<span class="quote">&gt;                 rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.5.0</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=67511">Hanjun Guo</a> - Dec. 7, 2015, 9:36 a.m.</div>
<pre class="content">
Hi Fu Wei,

On 12/04/2015 01:15 AM, fu.wei@linaro.org wrote:
<span class="quote">&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The reason for wrapping &quot;acpi_disable_cmcff&quot; by</span>
<span class="quote">&gt; &quot;#if defined(__i386__) || defined(__x86_64__)&quot; in hest.c is:</span>
<span class="quote">&gt; according to ACPI spec CMC(Corrected Machine Check) is only for IA-32</span>
<span class="quote">&gt; Architecture.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Changelog:</span>
<span class="quote">&gt; v3: Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;      and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;      Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;      Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;      Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;      Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;      Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>

The version updates is not belong here, if you need to add
it, please place it under &quot;---&quot; below.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>

...just here.
<span class="quote">
&gt;   arch/arm64/Kconfig            | 1 +</span>
<span class="quote">&gt;   arch/arm64/include/asm/acpi.h | 1 +</span>
<span class="quote">&gt;   arch/arm64/kernel/acpi.c      | 6 ++++++</span>
<span class="quote">&gt;   drivers/acpi/apei/hest.c      | 2 ++</span>
<span class="quote">&gt;   4 files changed, 10 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt; index 871f217..58c8992 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;   	select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;   	select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;   	select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt; +	select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;   	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;   	select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt;   	select ARCH_HAS_GCOV_PROFILE_ALL</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; index caafd63..7207f8e 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; @@ -94,6 +94,7 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   #ifdef	CONFIG_ACPI_APEI</span>
<span class="quote">&gt;   pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; +void arch_apei_flush_tlb_one(unsigned long addr);</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   #endif /*_ASM_ACPI_H*/</span>
<span class="quote">&gt; diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; index d1ce8e2..7a742e7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; +++ b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; @@ -32,6 +32,7 @@</span>
<span class="quote">&gt;   #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt;   # include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt;   # include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt; +# include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;   #endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   int acpi_noirq = 1;		/* skip ACPI IRQ initialization */</span>
<span class="quote">&gt; @@ -233,4 +234,9 @@ pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt;   		return __pgprot(PROT_NORMAL_NC);</span>
<span class="quote">&gt;   	return __pgprot(PROT_DEVICE_nGnRnE);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; +}</span>

Maybe just a static inline function in arch/arm64/include/asm/acpi.h
will be good?
<span class="quote">
&gt;   #endif</span>
<span class="quote">&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; index 20b3fcf..4ead747 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; @@ -232,8 +232,10 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;   		goto err;</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#if defined(__i386__) || defined(__x86_64__)</span>
<span class="quote">&gt;   	if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;   		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; +#endif</span>

How about put it together into a function, and
introduce a stub function when no __i386__ and
__x86_64__ case?

Thanks
Hanjun
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Dec. 7, 2015, 1:06 p.m.</div>
<pre class="content">
Hi Hanjun,

On 7 December 2015 at 17:36, Hanjun Guo &lt;hanjun.guo@linaro.org&gt; wrote:
<span class="quote">&gt; Hi Fu Wei,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 12/04/2015 01:15 AM, fu.wei@linaro.org wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The reason for wrapping &quot;acpi_disable_cmcff&quot; by</span>
<span class="quote">&gt;&gt; &quot;#if defined(__i386__) || defined(__x86_64__)&quot; in hest.c is:</span>
<span class="quote">&gt;&gt; according to ACPI spec CMC(Corrected Machine Check) is only for IA-32</span>
<span class="quote">&gt;&gt; Architecture.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Changelog:</span>
<span class="quote">&gt;&gt; v3: Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;&gt;      and wrap it in hest.c by &quot;#if defined(__i386__) ||</span>
<span class="quote">&gt;&gt; defined(__x86_64__)&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;&gt;      Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;&gt;      Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;&gt;      Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;&gt;      Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;&gt;      Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The version updates is not belong here, if you need to add</span>
<span class="quote">&gt; it, please place it under &quot;---&quot; below.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ...just here.</span>

OK , thanks
<span class="quote">
&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;   arch/arm64/Kconfig            | 1 +</span>
<span class="quote">&gt;&gt;   arch/arm64/include/asm/acpi.h | 1 +</span>
<span class="quote">&gt;&gt;   arch/arm64/kernel/acpi.c      | 6 ++++++</span>
<span class="quote">&gt;&gt;   drivers/acpi/apei/hest.c      | 2 ++</span>
<span class="quote">&gt;&gt;   4 files changed, 10 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; index 871f217..58c8992 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;&gt;         select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;&gt;         select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;&gt;         select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt;&gt; +       select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_GCOV_PROFILE_ALL</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; index caafd63..7207f8e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; @@ -94,6 +94,7 @@ static inline const char *acpi_get_enable_method(int</span>
<span class="quote">&gt;&gt; cpu)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   #ifdef        CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt;   pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;&gt; +void arch_apei_flush_tlb_one(unsigned long addr);</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   #endif /*_ASM_ACPI_H*/</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt; index d1ce8e2..7a742e7 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt; @@ -32,6 +32,7 @@</span>
<span class="quote">&gt;&gt;   #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt;   # include &lt;linux/efi.h&gt;</span>
<span class="quote">&gt;&gt;   # include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt;&gt; +# include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   int acpi_noirq = 1;           /* skip ACPI IRQ initialization */</span>
<span class="quote">&gt;&gt; @@ -233,4 +234,9 @@ pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
<span class="quote">&gt;&gt;                 return __pgprot(PROT_NORMAL_NC);</span>
<span class="quote">&gt;&gt;         return __pgprot(PROT_DEVICE_nGnRnE);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Maybe just a static inline function in arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; will be good?</span>

yes, this suggestion makes sense, it is just one line.
And I also understood the reason why the original author make this
code like that:
coordinating with x86 code.

let&#39;s improve it this time.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; index 20b3fcf..4ead747 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; @@ -232,8 +232,10 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;&gt;                 goto err;</span>
<span class="quote">&gt;&gt;         }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#if defined(__i386__) || defined(__x86_64__)</span>
<span class="quote">&gt;&gt;         if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt;                 apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; +#endif</span>

OK, that makes sense, will do
<span class="quote">
&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; How about put it together into a function, and</span>
<span class="quote">&gt; introduce a stub function when no __i386__ and</span>
<span class="quote">&gt; __x86_64__ case?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thanks</span>
<span class="quote">&gt; Hanjun</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 871f217..58c8992 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"> config ARM64</span>
 	select ACPI_CCA_REQUIRED if ACPI
 	select ACPI_GENERIC_GSI if ACPI
 	select ACPI_REDUCED_HARDWARE_ONLY if ACPI
<span class="p_add">+	select HAVE_ACPI_APEI if ACPI</span>
 	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 	select ARCH_HAS_ELF_RANDOMIZE
 	select ARCH_HAS_GCOV_PROFILE_ALL
<span class="p_header">diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">index caafd63..7207f8e 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -94,6 +94,7 @@</span> <span class="p_context"> static inline const char *acpi_get_enable_method(int cpu)</span>
 
 #ifdef	CONFIG_ACPI_APEI
 pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);
<span class="p_add">+void arch_apei_flush_tlb_one(unsigned long addr);</span>
 #endif
 
 #endif /*_ASM_ACPI_H*/
<span class="p_header">diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c</span>
<span class="p_header">index d1ce8e2..7a742e7 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/acpi.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/acpi.c</span>
<span class="p_chunk">@@ -32,6 +32,7 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_ACPI_APEI
 # include &lt;linux/efi.h&gt;
 # include &lt;asm/pgtable.h&gt;
<span class="p_add">+# include &lt;asm/tlbflush.h&gt;</span>
 #endif
 
 int acpi_noirq = 1;		/* skip ACPI IRQ initialization */
<span class="p_chunk">@@ -233,4 +234,9 @@</span> <span class="p_context"> pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)</span>
 		return __pgprot(PROT_NORMAL_NC);
 	return __pgprot(PROT_DEVICE_nGnRnE);
 }
<span class="p_add">+</span>
<span class="p_add">+void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="p_add">+}</span>
 #endif
<span class="p_header">diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="p_header">index 20b3fcf..4ead747 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/hest.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/hest.c</span>
<span class="p_chunk">@@ -232,8 +232,10 @@</span> <span class="p_context"> void __init acpi_hest_init(void)</span>
 		goto err;
 	}
 
<span class="p_add">+#if defined(__i386__) || defined(__x86_64__)</span>
 	if (!acpi_disable_cmcff)
 		apei_hest_parse(hest_parse_cmc, NULL);
<span class="p_add">+#endif</span>
 
 	if (!ghes_disable) {
 		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



