
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,16/22] mm: Provide speculative fault infrastructure - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,16/22] mm: Provide speculative fault infrastructure</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 11, 2017, 1:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1507729966-10660-17-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9999713/mbox/"
   >mbox</a>
|
   <a href="/patch/9999713/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9999713/">/patch/9999713/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	319A86037F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Oct 2017 13:57:28 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 227D528A49
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Oct 2017 13:57:28 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1714028A52; Wed, 11 Oct 2017 13:57:28 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0B72428A49
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Oct 2017 13:57:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757841AbdJKN5Y (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 11 Oct 2017 09:57:24 -0400
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:58332 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1757503AbdJKNxl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 11 Oct 2017 09:53:41 -0400
Received: from pps.filterd (m0098420.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id
	v9BDmuKP089353
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 11 Oct 2017 09:53:41 -0400
Received: from e06smtp13.uk.ibm.com (e06smtp13.uk.ibm.com [195.75.94.109])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2dhk0hpmrx-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 11 Oct 2017 09:53:40 -0400
Received: from localhost
	by e06smtp13.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Wed, 11 Oct 2017 14:53:37 +0100
Received: from b06cxnps4075.portsmouth.uk.ibm.com (9.149.109.197)
	by e06smtp13.uk.ibm.com (192.168.101.143) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Wed, 11 Oct 2017 14:53:35 +0100
Received: from d06av22.portsmouth.uk.ibm.com (d06av22.portsmouth.uk.ibm.com
	[9.149.105.58])
	by b06cxnps4075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v9BDrZTg22020322; Wed, 11 Oct 2017 13:53:35 GMT
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id E24714C046;
	Wed, 11 Oct 2017 14:49:31 +0100 (BST)
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 1C7A64C04A;
	Wed, 11 Oct 2017 14:49:30 +0100 (BST)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.30.240])
	by d06av22.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Wed, 11 Oct 2017 14:49:30 +0100 (BST)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: paulmck@linux.vnet.ibm.com, peterz@infradead.org,
	akpm@linux-foundation.org, kirill@shutemov.name,
	ak@linux.intel.com, mhocko@kernel.org, dave@stgolabs.net,
	jack@suse.cz, Matthew Wilcox &lt;willy@infradead.org&gt;,
	benh@kernel.crashing.org, mpe@ellerman.id.au, paulus@samba.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, hpa@zytor.com,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Sergey Senozhatsky &lt;sergey.senozhatsky@gmail.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Alexei Starovoitov &lt;alexei.starovoitov@gmail.com&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	haren@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	npiggin@gmail.com, bsingharora@gmail.com,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;,
	linuxppc-dev@lists.ozlabs.org, x86@kernel.org
Subject: [PATCH v5 16/22] mm: Provide speculative fault infrastructure
Date: Wed, 11 Oct 2017 15:52:40 +0200
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1507729966-10660-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1507729966-10660-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 17101113-0012-0000-0000-00000580C7F9
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17101113-0013-0000-0000-000018FAD674
Message-Id: &lt;1507729966-10660-17-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-10-11_05:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1707230000
	definitions=main-1710110191
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Oct. 11, 2017, 1:52 p.m.</div>
<pre class="content">
<span class="from">From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>

Provide infrastructure to do a speculative fault (not holding
mmap_sem).

The not holding of mmap_sem means we can race against VMA
change/removal and page-table destruction. We use the SRCU VMA freeing
to keep the VMA around. We use the VMA seqcount to detect change
(including umapping / page-table deletion) and we use gup_fast() style
page-table walking to deal with page-table races.

Once we&#39;ve obtained the page and are ready to update the PTE, we
validate if the state we started the fault with is still valid, if
not, we&#39;ll fail the fault with VM_FAULT_RETRY, otherwise we update the
PTE and we&#39;re done.
<span class="signed-off-by">
Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>

[Manage the newly introduced pte_spinlock() for speculative page
 fault to fail if the VMA is touched in our back]
[Rename vma_is_dead() to vma_has_changed() and declare it here]
[Call p4d_alloc() as it is safe since pgd is valid]
[Call pud_alloc() as it is safe since p4d is valid]
[Set fe.sequence in __handle_mm_fault()]
[Abort speculative path when handle_userfault() has to be called]
[Add additional VMA&#39;s flags checks in handle_speculative_fault()]
[Clear FAULT_FLAG_ALLOW_RETRY in handle_speculative_fault()]
[Don&#39;t set vmf-&gt;pte and vmf-&gt;ptl if pte_map_lock() failed]
[Remove warning comment about waiting for !seq&amp;1 since we don&#39;t want
 to wait]
[Remove warning about no huge page support, mention it explictly]
[Don&#39;t call do_fault() in the speculative path as __do_fault() calls
 vma-&gt;vm_ops-&gt;fault() which may want to release mmap_sem]
[Only vm_fault pointer argument for vma_has_changed()]
[Fix check against huge page, calling pmd_trans_huge()]
[Use READ_ONCE() when reading VMA&#39;s fields in the speculative path]
[Explicitly check for __HAVE_ARCH_PTE_SPECIAL as we can&#39;t support for
 processing done in vm_normal_page()]
[Check that vma-&gt;anon_vma is already set when starting the speculative
 path]
[Check for memory policy as we can&#39;t support MPOL_INTERLEAVE case due to
 the processing done in mpol_misplaced()]
[Don&#39;t support VMA growing up or down]
[Move check on vm_sequence just before calling handle_pte_fault()]
[Don&#39;t build SPF services if !CONFIG_SPF]
[Add mem cgroup oom check]
[Use use READ_ONCE to access p*d entries]
<span class="signed-off-by">Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 include/linux/hugetlb_inline.h |   2 +-
 include/linux/mm.h             |   5 +
 include/linux/pagemap.h        |   4 +-
 mm/internal.h                  |  16 +++
 mm/memory.c                    | 285 ++++++++++++++++++++++++++++++++++++++++-
 5 files changed, 306 insertions(+), 6 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb_inline.h b/include/linux/hugetlb_inline.h</span>
<span class="p_header">index a4e7ca0f3585..6cfdfca4cc2a 100644</span>
<span class="p_header">--- a/include/linux/hugetlb_inline.h</span>
<span class="p_header">+++ b/include/linux/hugetlb_inline.h</span>
<span class="p_chunk">@@ -7,7 +7,7 @@</span> <span class="p_context"></span>
 
 static inline bool is_vm_hugetlb_page(struct vm_area_struct *vma)
 {
<span class="p_del">-	return !!(vma-&gt;vm_flags &amp; VM_HUGETLB);</span>
<span class="p_add">+	return !!(READ_ONCE(vma-&gt;vm_flags) &amp; VM_HUGETLB);</span>
 }
 
 #else
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 6feff53f4775..00ca43bf28da 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -320,6 +320,7 @@</span> <span class="p_context"> struct vm_fault {</span>
 	gfp_t gfp_mask;			/* gfp mask to be used for allocations */
 	pgoff_t pgoff;			/* Logical page offset based on vma */
 	unsigned long address;		/* Faulting virtual address */
<span class="p_add">+	unsigned int sequence;</span>
 	pmd_t *pmd;			/* Pointer to pmd entry matching
 					 * the &#39;address&#39; */
 	pud_t *pud;			/* Pointer to pud entry matching
<span class="p_chunk">@@ -1342,6 +1343,10 @@</span> <span class="p_context"> int invalidate_inode_page(struct page *page);</span>
 #ifdef CONFIG_MMU
 extern int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,
 		unsigned int flags);
<span class="p_add">+#ifdef CONFIG_SPF</span>
<span class="p_add">+extern int handle_speculative_fault(struct mm_struct *mm,</span>
<span class="p_add">+				    unsigned long address, unsigned int flags);</span>
<span class="p_add">+#endif /* CONFIG_SPF */</span>
 extern int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
 			    unsigned long address, unsigned int fault_flags,
 			    bool *unlocked);
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index 5bbd6780f205..832aa3ec7d00 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -451,8 +451,8 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
 	pgoff_t pgoff;
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return linear_hugepage_index(vma, address);
<span class="p_del">-	pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	pgoff += vma-&gt;vm_pgoff;</span>
<span class="p_add">+	pgoff = (address - READ_ONCE(vma-&gt;vm_start)) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	pgoff += READ_ONCE(vma-&gt;vm_pgoff);</span>
 	return pgoff;
 }
 
<span class="p_header">diff --git a/mm/internal.h b/mm/internal.h</span>
<span class="p_header">index aced97623bff..f75fe537286a 100644</span>
<span class="p_header">--- a/mm/internal.h</span>
<span class="p_header">+++ b/mm/internal.h</span>
<span class="p_chunk">@@ -45,6 +45,22 @@</span> <span class="p_context"> extern struct srcu_struct vma_srcu;</span>
 extern struct vm_area_struct *find_vma_srcu(struct mm_struct *mm,
 					    unsigned long addr);
 
<span class="p_add">+#ifdef CONFIG_SPF</span>
<span class="p_add">+static inline bool vma_has_changed(struct vm_fault *vmf)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = RB_EMPTY_NODE(&amp;vmf-&gt;vma-&gt;vm_rb);</span>
<span class="p_add">+	unsigned seq = ACCESS_ONCE(vmf-&gt;vma-&gt;vm_sequence.sequence);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Matches both the wmb in write_seqlock_{begin,end}() and</span>
<span class="p_add">+	 * the wmb in vma_rb_erase().</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	smp_rmb();</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret || seq != vmf-&gt;sequence;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_SPF */</span>
<span class="p_add">+</span>
 void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
 		unsigned long floor, unsigned long ceiling);
 
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 3705ff3e04d5..eff40abfc1a6 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -763,7 +763,8 @@</span> <span class="p_context"> static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,</span>
 	if (page)
 		dump_page(page, &quot;bad pte&quot;);
 	pr_alert(&quot;addr:%p vm_flags:%08lx anon_vma:%p mapping:%p index:%lx\n&quot;,
<span class="p_del">-		 (void *)addr, vma-&gt;vm_flags, vma-&gt;anon_vma, mapping, index);</span>
<span class="p_add">+		 (void *)addr, READ_ONCE(vma-&gt;vm_flags), vma-&gt;anon_vma,</span>
<span class="p_add">+		 mapping, index);</span>
 	/*
 	 * Choose text because data symbols depend on CONFIG_KALLSYMS_ALL=y
 	 */
<span class="p_chunk">@@ -2458,18 +2459,90 @@</span> <span class="p_context"> static inline void wp_page_reuse(struct vm_fault *vmf)</span>
 	pte_unmap_unlock(vmf-&gt;pte, vmf-&gt;ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_SPF</span>
 static bool pte_spinlock(struct vm_fault *vmf)
 {
<span class="p_add">+	bool ret = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if vma is still valid */</span>
<span class="p_add">+	if (!(vmf-&gt;flags &amp; FAULT_FLAG_SPECULATIVE)) {</span>
<span class="p_add">+		vmf-&gt;ptl = pte_lockptr(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd);</span>
<span class="p_add">+		spin_lock(vmf-&gt;ptl);</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+	if (vma_has_changed(vmf))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	vmf-&gt;ptl = pte_lockptr(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd);</span>
<span class="p_add">+	spin_lock(vmf-&gt;ptl);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (vma_has_changed(vmf)) {</span>
<span class="p_add">+		spin_unlock(vmf-&gt;ptl);</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = true;</span>
<span class="p_add">+out:</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline bool pte_spinlock(struct vm_fault *vmf)</span>
<span class="p_add">+{</span>
 	vmf-&gt;ptl = pte_lockptr(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd);
 	spin_lock(vmf-&gt;ptl);
 	return true;
 }
<span class="p_add">+#endif /* CONFIG_SPF */</span>
 
<span class="p_add">+#ifdef CONFIG_SPF</span>
 static bool pte_map_lock(struct vm_fault *vmf)
 {
<span class="p_del">-	vmf-&gt;pte = pte_offset_map_lock(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd, vmf-&gt;address, &amp;vmf-&gt;ptl);</span>
<span class="p_add">+	bool ret = false;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(vmf-&gt;flags &amp; FAULT_FLAG_SPECULATIVE)) {</span>
<span class="p_add">+		vmf-&gt;pte = pte_offset_map_lock(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd,</span>
<span class="p_add">+					       vmf-&gt;address, &amp;vmf-&gt;ptl);</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The first vma_has_changed() guarantees the page-tables are still</span>
<span class="p_add">+	 * valid, having IRQs disabled ensures they stay around, hence the</span>
<span class="p_add">+	 * second vma_has_changed() to make sure they are still valid once</span>
<span class="p_add">+	 * we&#39;ve got the lock. After that a concurrent zap_pte_range() will</span>
<span class="p_add">+	 * block on the PTL and thus we&#39;re safe.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+	if (vma_has_changed(vmf))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = pte_offset_map_lock(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd,</span>
<span class="p_add">+				  vmf-&gt;address, &amp;ptl);</span>
<span class="p_add">+	if (vma_has_changed(vmf)) {</span>
<span class="p_add">+		pte_unmap_unlock(pte, ptl);</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	vmf-&gt;pte = pte;</span>
<span class="p_add">+	vmf-&gt;ptl = ptl;</span>
<span class="p_add">+	ret = true;</span>
<span class="p_add">+out:</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline bool pte_map_lock(struct vm_fault *vmf)</span>
<span class="p_add">+{</span>
<span class="p_add">+	vmf-&gt;pte = pte_offset_map_lock(vmf-&gt;vma-&gt;vm_mm, vmf-&gt;pmd,</span>
<span class="p_add">+				       vmf-&gt;address, &amp;vmf-&gt;ptl);</span>
 	return true;
 }
<span class="p_add">+#endif /* CONFIG_SPF */</span>
 
 /*
  * Handle the case of a page which we actually need to copy to a new page.
<span class="p_chunk">@@ -3165,6 +3238,14 @@</span> <span class="p_context"> static int do_anonymous_page(struct vm_fault *vmf)</span>
 		ret = check_stable_address_space(vma-&gt;vm_mm);
 		if (ret)
 			goto unlock;
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Don&#39;t call the userfaultfd during the speculative path.</span>
<span class="p_add">+		 * We already checked for the VMA to not be managed through</span>
<span class="p_add">+		 * userfaultfd, but it may be set in our back once we have lock</span>
<span class="p_add">+		 * the pte. In such a case we can ignore it this time.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (vmf-&gt;flags &amp; FAULT_FLAG_SPECULATIVE)</span>
<span class="p_add">+			goto setpte;</span>
 		/* Deliver the page fault to userland, check inside PT lock */
 		if (userfaultfd_missing(vma)) {
 			pte_unmap_unlock(vmf-&gt;pte, vmf-&gt;ptl);
<span class="p_chunk">@@ -3207,7 +3288,7 @@</span> <span class="p_context"> static int do_anonymous_page(struct vm_fault *vmf)</span>
 		goto release;
 
 	/* Deliver the page fault to userland, check inside PT lock */
<span class="p_del">-	if (userfaultfd_missing(vma)) {</span>
<span class="p_add">+	if (!(vmf-&gt;flags &amp; FAULT_FLAG_SPECULATIVE) &amp;&amp; userfaultfd_missing(vma)) {</span>
 		pte_unmap_unlock(vmf-&gt;pte, vmf-&gt;ptl);
 		mem_cgroup_cancel_charge(page, memcg, false);
 		put_page(page);
<span class="p_chunk">@@ -3986,6 +4067,8 @@</span> <span class="p_context"> static int handle_pte_fault(struct vm_fault *vmf)</span>
 	if (!vmf-&gt;pte) {
 		if (vma_is_anonymous(vmf-&gt;vma))
 			return do_anonymous_page(vmf);
<span class="p_add">+		else if (vmf-&gt;flags &amp; FAULT_FLAG_SPECULATIVE)</span>
<span class="p_add">+			return VM_FAULT_RETRY;</span>
 		else
 			return do_fault(vmf);
 	}
<span class="p_chunk">@@ -4083,6 +4166,9 @@</span> <span class="p_context"> static int __handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 	vmf.pmd = pmd_alloc(mm, vmf.pud, address);
 	if (!vmf.pmd)
 		return VM_FAULT_OOM;
<span class="p_add">+#ifdef CONFIG_SPF</span>
<span class="p_add">+	vmf.sequence = raw_read_seqcount(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+#endif</span>
 	if (pmd_none(*vmf.pmd) &amp;&amp; transparent_hugepage_enabled(vma)) {
 		ret = create_huge_pmd(&amp;vmf);
 		if (!(ret &amp; VM_FAULT_FALLBACK))
<span class="p_chunk">@@ -4116,6 +4202,199 @@</span> <span class="p_context"> static int __handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 	return handle_pte_fault(&amp;vmf);
 }
 
<span class="p_add">+#ifdef CONFIG_SPF</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __HAVE_ARCH_PTE_SPECIAL</span>
<span class="p_add">+/* This is required by vm_normal_page() */</span>
<span class="p_add">+#error &quot;Speculative page fault handler requires __HAVE_ARCH_PTE_SPECIAL&quot;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * vm_normal_page() adds some processing which should be done while</span>
<span class="p_add">+ * hodling the mmap_sem.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int handle_speculative_fault(struct mm_struct *mm, unsigned long address,</span>
<span class="p_add">+			     unsigned int flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_fault vmf = {</span>
<span class="p_add">+		.address = address,</span>
<span class="p_add">+	};</span>
<span class="p_add">+	pgd_t *pgd, pgde;</span>
<span class="p_add">+	p4d_t *p4d, p4de;</span>
<span class="p_add">+	pud_t *pud, pude;</span>
<span class="p_add">+	pmd_t *pmd, pmde;</span>
<span class="p_add">+	int dead, seq, idx, ret = VM_FAULT_RETRY;</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+#ifdef CONFIG_NUMA</span>
<span class="p_add">+	struct mempolicy *pol;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Clear flags that may lead to release the mmap_sem to retry */</span>
<span class="p_add">+	flags &amp;= ~(FAULT_FLAG_ALLOW_RETRY|FAULT_FLAG_KILLABLE);</span>
<span class="p_add">+	flags |= FAULT_FLAG_SPECULATIVE;</span>
<span class="p_add">+</span>
<span class="p_add">+	idx = srcu_read_lock(&amp;vma_srcu);</span>
<span class="p_add">+	vma = find_vma_srcu(mm, address);</span>
<span class="p_add">+	if (!vma)</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Validate the VMA found by the lockless lookup.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	dead = RB_EMPTY_NODE(&amp;vma-&gt;vm_rb);</span>
<span class="p_add">+	seq = raw_read_seqcount(&amp;vma-&gt;vm_sequence); /* rmb &lt;-&gt; seqlock,vma_rb_erase() */</span>
<span class="p_add">+	if ((seq &amp; 1) || dead)</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Can&#39;t call vm_ops service has we don&#39;t know what they would do</span>
<span class="p_add">+	 * with the VMA.</span>
<span class="p_add">+	 * This include huge page from hugetlbfs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (vma-&gt;vm_ops)</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * __anon_vma_prepare() requires the mmap_sem to be held</span>
<span class="p_add">+	 * because vm_next and vm_prev must be safe. This can&#39;t be guaranteed</span>
<span class="p_add">+	 * in the speculative path.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (unlikely(!vma-&gt;anon_vma))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	vmf.vma_flags = READ_ONCE(vma-&gt;vm_flags);</span>
<span class="p_add">+	vmf.vma_page_prot = READ_ONCE(vma-&gt;vm_page_prot);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Can&#39;t call userland page fault handler in the speculative path */</span>
<span class="p_add">+	if (unlikely(vmf.vma_flags &amp; VM_UFFD_MISSING))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_NUMA</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * MPOL_INTERLEAVE implies additional check in mpol_misplaced() which</span>
<span class="p_add">+	 * are not compatible with the speculative page fault processing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	pol = __get_vma_policy(vma, address);</span>
<span class="p_add">+	if (!pol)</span>
<span class="p_add">+		pol = get_task_policy(current);</span>
<span class="p_add">+	if (pol &amp;&amp; pol-&gt;mode == MPOL_INTERLEAVE)</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	if (vmf.vma_flags &amp; VM_GROWSDOWN || vmf.vma_flags &amp; VM_GROWSUP)</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * This could be detected by the check address against VMA&#39;s</span>
<span class="p_add">+		 * boundaries but we want to trace it as not supported instead</span>
<span class="p_add">+		 * of changed.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (address &lt; READ_ONCE(vma-&gt;vm_start)</span>
<span class="p_add">+	    || READ_ONCE(vma-&gt;vm_end) &lt;= address)</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE,</span>
<span class="p_add">+				       flags &amp; FAULT_FLAG_INSTRUCTION,</span>
<span class="p_add">+				       flags &amp; FAULT_FLAG_REMOTE)) {</span>
<span class="p_add">+		ret = VM_FAULT_SIGSEGV;</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* This is one is required to check that the VMA has write access set */</span>
<span class="p_add">+	if (flags &amp; FAULT_FLAG_WRITE) {</span>
<span class="p_add">+		if (unlikely(!(vmf.vma_flags &amp; VM_WRITE))) {</span>
<span class="p_add">+			ret = VM_FAULT_SIGSEGV;</span>
<span class="p_add">+			goto unlock;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else if (unlikely(!(vmf.vma_flags &amp; (VM_READ|VM_EXEC|VM_WRITE)))) {</span>
<span class="p_add">+		ret = VM_FAULT_SIGSEGV;</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Do a speculative lookup of the PTE entry.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	local_irq_disable();</span>
<span class="p_add">+	pgd = pgd_offset(mm, address);</span>
<span class="p_add">+	pgde = READ_ONCE(*pgd);</span>
<span class="p_add">+	if (pgd_none(pgde) || unlikely(pgd_bad(pgde)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_alloc(mm, pgd, address);</span>
<span class="p_add">+	p4de = READ_ONCE(*p4d);</span>
<span class="p_add">+	if (p4d_none(p4de) || unlikely(p4d_bad(p4de)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_alloc(mm, p4d, address);</span>
<span class="p_add">+	pude = READ_ONCE(*pud);</span>
<span class="p_add">+	if (pud_none(pude) || unlikely(pud_bad(pude)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Transparent huge pages are not supported. */</span>
<span class="p_add">+	if (unlikely(pud_trans_huge(pude)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, address);</span>
<span class="p_add">+	pmde = READ_ONCE(*pmd);</span>
<span class="p_add">+	if (pmd_none(pmde) || unlikely(pmd_bad(pmde)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The above does not allocate/instantiate page-tables because doing so</span>
<span class="p_add">+	 * would lead to the possibility of instantiating page-tables after</span>
<span class="p_add">+	 * free_pgtables() -- and consequently leaking them.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * The result is that we take at least one !speculative fault per PMD</span>
<span class="p_add">+	 * in order to instantiate it.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	/* Transparent huge pages are not supported. */</span>
<span class="p_add">+	if (unlikely(pmd_trans_huge(pmde)))</span>
<span class="p_add">+		goto out_walk;</span>
<span class="p_add">+</span>
<span class="p_add">+	vmf.vma = vma;</span>
<span class="p_add">+	vmf.pmd = pmd;</span>
<span class="p_add">+	vmf.pgoff = linear_page_index(vma, address);</span>
<span class="p_add">+	vmf.gfp_mask = __get_fault_gfp_mask(vma);</span>
<span class="p_add">+	vmf.sequence = seq;</span>
<span class="p_add">+	vmf.flags = flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We need to re-validate the VMA after checking the bounds, otherwise</span>
<span class="p_add">+	 * we might have a false positive on the bounds.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (read_seqcount_retry(&amp;vma-&gt;vm_sequence, seq))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	mem_cgroup_oom_enable();</span>
<span class="p_add">+	ret = handle_pte_fault(&amp;vmf);</span>
<span class="p_add">+	mem_cgroup_oom_disable();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * There is no more need to hold SRCU since the VMA pointer is no more</span>
<span class="p_add">+	 * used. Release it right now to avoid longer SRCU grace period.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	srcu_read_unlock(&amp;vma_srcu, idx);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The task may have entered a memcg OOM situation but</span>
<span class="p_add">+	 * if the allocation error was handled gracefully (no</span>
<span class="p_add">+	 * VM_FAULT_OOM), there is no need to kill anything.</span>
<span class="p_add">+	 * Just clean up the OOM state peacefully.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (task_in_memcg_oom(current) &amp;&amp; !(ret &amp; VM_FAULT_OOM))</span>
<span class="p_add">+		mem_cgroup_oom_synchronize(false);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+out_walk:</span>
<span class="p_add">+	local_irq_enable();</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	srcu_read_unlock(&amp;vma_srcu, idx);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_SPF */</span>
<span class="p_add">+</span>
 /*
  * By the time we get here, we already hold the mm semaphore
  *

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



