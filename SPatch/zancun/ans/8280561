
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,13/28] thp: support file pages in zap_huge_pmd() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,13/28] thp: support file pages in zap_huge_pmd()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 11, 2016, 2:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1455200516-132137-14-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8280561/mbox/"
   >mbox</a>
|
   <a href="/patch/8280561/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8280561/">/patch/8280561/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 9A837BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Feb 2016 14:26:36 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0D8952039E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Feb 2016 14:26:36 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 62AC2203AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Feb 2016 14:26:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752118AbcBKOW6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 11 Feb 2016 09:22:58 -0500
Received: from mga03.intel.com ([134.134.136.65]:49725 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751399AbcBKOWz (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 11 Feb 2016 09:22:55 -0500
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by orsmga103.jf.intel.com with ESMTP; 11 Feb 2016 06:22:08 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.22,431,1449561600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;882085727&quot;
Received: from black.fi.intel.com ([10.237.72.93])
	by orsmga001.jf.intel.com with ESMTP; 11 Feb 2016 06:22:05 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 6D9ACC56; Thu, 11 Feb 2016 16:22:00 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Hugh Dickins &lt;hughd@google.com&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Christoph Lameter &lt;cl@gentwo.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Jerome Marchand &lt;jmarchan@redhat.com&gt;, Yang Shi &lt;yang.shi@linaro.org&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv2 13/28] thp: support file pages in zap_huge_pmd()
Date: Thu, 11 Feb 2016 17:21:41 +0300
Message-Id: &lt;1455200516-132137-14-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1455200516-132137-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1455200516-132137-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Feb. 11, 2016, 2:21 p.m.</div>
<pre class="content">
For file pages we don&#39;t deposit page table on mapping: no need to
withdraw it.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 mm/huge_memory.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Feb. 12, 2016, 6:33 p.m.</div>
<pre class="content">
On 02/11/2016 06:21 AM, Kirill A. Shutemov wrote:
<span class="quote">&gt; For file pages we don&#39;t deposit page table on mapping: no need to</span>
<span class="quote">&gt; withdraw it.</span>

I thought the deposit thing was to guarantee we could always do a PMD
split.  It still seems like if you wanted to split a huge-tmpfs page,
you&#39;d need to first split the PMD which might need the deposited one.

Why not?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Feb. 16, 2016, 10 a.m.</div>
<pre class="content">
On Fri, Feb 12, 2016 at 10:33:37AM -0800, Dave Hansen wrote:
<span class="quote">&gt; On 02/11/2016 06:21 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; For file pages we don&#39;t deposit page table on mapping: no need to</span>
<span class="quote">&gt; &gt; withdraw it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I thought the deposit thing was to guarantee we could always do a PMD</span>
<span class="quote">&gt; split.  It still seems like if you wanted to split a huge-tmpfs page,</span>
<span class="quote">&gt; you&#39;d need to first split the PMD which might need the deposited one.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why not?</span>

For file thp, split_huge_pmd() is implemented by clearing out the pmd: we
can setup and fill pte table later. Therefore no need to deposit page
table -- we would not use it. DAX does the same.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Feb. 16, 2016, 3:31 p.m.</div>
<pre class="content">
On 02/16/2016 02:00 AM, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Fri, Feb 12, 2016 at 10:33:37AM -0800, Dave Hansen wrote:</span>
<span class="quote">&gt;&gt; On 02/11/2016 06:21 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt;&gt;&gt; For file pages we don&#39;t deposit page table on mapping: no need to</span>
<span class="quote">&gt;&gt;&gt; withdraw it.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I thought the deposit thing was to guarantee we could always do a PMD</span>
<span class="quote">&gt;&gt; split.  It still seems like if you wanted to split a huge-tmpfs page,</span>
<span class="quote">&gt;&gt; you&#39;d need to first split the PMD which might need the deposited one.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Why not?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For file thp, split_huge_pmd() is implemented by clearing out the pmd: we</span>
<span class="quote">&gt; can setup and fill pte table later. Therefore no need to deposit page</span>
<span class="quote">&gt; table -- we would not use it. DAX does the same.</span>

Ahh...  Do we just never split in any fault contexts, or do we just
retry the fault?

In any case, that seems like fine enough (although subtle) behavior.
Can you call it out a bit more explicitly in the patch text?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 18, 2016, 12:19 p.m.</div>
<pre class="content">
On Tue, Feb 16, 2016 at 07:31:58AM -0800, Dave Hansen wrote:
<span class="quote">&gt; On 02/16/2016 02:00 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Fri, Feb 12, 2016 at 10:33:37AM -0800, Dave Hansen wrote:</span>
<span class="quote">&gt; &gt;&gt; On 02/11/2016 06:21 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; For file pages we don&#39;t deposit page table on mapping: no need to</span>
<span class="quote">&gt; &gt;&gt;&gt; withdraw it.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; I thought the deposit thing was to guarantee we could always do a PMD</span>
<span class="quote">&gt; &gt;&gt; split.  It still seems like if you wanted to split a huge-tmpfs page,</span>
<span class="quote">&gt; &gt;&gt; you&#39;d need to first split the PMD which might need the deposited one.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Why not?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; For file thp, split_huge_pmd() is implemented by clearing out the pmd: we</span>
<span class="quote">&gt; &gt; can setup and fill pte table later. Therefore no need to deposit page</span>
<span class="quote">&gt; &gt; table -- we would not use it. DAX does the same.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ahh...  Do we just never split in any fault contexts, or do we just</span>
<span class="quote">&gt; retry the fault?</span>

In fault contexts we would just continue fault handling as if we had
pmd_none().
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 732bda42ca80..8fd5a3c58353 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1654,10 +1654,16 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		struct page *page = pmd_page(orig_pmd);
 		page_remove_rmap(page, true);
 		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);
<span class="p_del">-		add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
 		VM_BUG_ON_PAGE(!PageHead(page), page);
<span class="p_del">-		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));</span>
<span class="p_del">-		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+		if (PageAnon(page)) {</span>
<span class="p_add">+			pgtable_t pgtable;</span>
<span class="p_add">+			pgtable = pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd);</span>
<span class="p_add">+			pte_free(tlb-&gt;mm, pgtable);</span>
<span class="p_add">+			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);</span>
<span class="p_add">+		}</span>
 		spin_unlock(ptl);
 		tlb_remove_page(tlb, page);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



