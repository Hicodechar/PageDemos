
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,4/7] arm64: tlbflush.h: add __tlbi() macro - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,4/7] arm64: tlbflush.h: add __tlbi() macro</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 5, 2016, 4:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1473093097-30932-5-git-send-email-punit.agrawal@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9314311/mbox/"
   >mbox</a>
|
   <a href="/patch/9314311/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9314311/">/patch/9314311/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	40130607D3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Sep 2016 16:33:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 336B428AFF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Sep 2016 16:33:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 27D9E28B04; Mon,  5 Sep 2016 16:33:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8D6BE28AFF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Sep 2016 16:33:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933939AbcIEQd4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 5 Sep 2016 12:33:56 -0400
Received: from fw-tnat.cambridge.arm.com ([217.140.96.140]:28910 &quot;EHLO
	cam-smtp0.cambridge.arm.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S933713AbcIEQc5 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 5 Sep 2016 12:32:57 -0400
Received: from e105922-lin.cambridge.arm.com (e105922-lin.cambridge.arm.com
	[10.1.194.52])
	by cam-smtp0.cambridge.arm.com (8.13.8/8.13.8) with SMTP id
	u85GWPqN009170; Mon, 5 Sep 2016 17:32:25 +0100
Received: by e105922-lin.cambridge.arm.com (sSMTP sendmail emulation);
	Mon, 05 Sep 2016 17:32:25 +0100
From: Punit Agrawal &lt;punit.agrawal@arm.com&gt;
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org,
	kvmarm@lists.cs.columbia.edu, linux-arm-kernel@lists.infradead.org
Cc: Mark Rutland &lt;mark.rutland@arm.com&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Marc Zyngier &lt;marc.zyngier@arm.com&gt;,
	Steven Rostedt &lt;rostedt@goodmis.org&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Punit Agrawal &lt;punit.agrawal@arm.com&gt;
Subject: [RFC v2 PATCH 4/7] arm64: tlbflush.h: add __tlbi() macro
Date: Mon,  5 Sep 2016 17:31:34 +0100
Message-Id: &lt;1473093097-30932-5-git-send-email-punit.agrawal@arm.com&gt;
X-Mailer: git-send-email 2.8.1
In-Reply-To: &lt;1473093097-30932-1-git-send-email-punit.agrawal@arm.com&gt;
References: &lt;1473093097-30932-1-git-send-email-punit.agrawal@arm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a> - Sept. 5, 2016, 4:31 p.m.</div>
<pre class="content">
<span class="from">From: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>

As with dsb() and isb(), add a __tlbi() helper so that we can avoid
distracting asm boilerplate every time we want a TLBI. As some TLBI
operations take an argument while others do not, some pre-processor is
used to handle these two cases with different assembly blocks.

The existing tlbflush.h code is moved over to use the helper.
<span class="signed-off-by">
Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
[ rename helper to __tlbi, update commit log ]
<span class="signed-off-by">Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
---
 arch/arm64/include/asm/tlbflush.h | 31 +++++++++++++++++++++++--------
 1 file changed, 23 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68151">Christoffer Dall</a> - Sept. 6, 2016, 6:38 a.m.</div>
<pre class="content">
On Mon, Sep 05, 2016 at 05:31:34PM +0100, Punit Agrawal wrote:
<span class="quote">&gt; From: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As with dsb() and isb(), add a __tlbi() helper so that we can avoid</span>
<span class="quote">&gt; distracting asm boilerplate every time we want a TLBI. As some TLBI</span>
<span class="quote">&gt; operations take an argument while others do not, some pre-processor is</span>
<span class="quote">&gt; used to handle these two cases with different assembly blocks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The existing tlbflush.h code is moved over to use the helper.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="quote">&gt; Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>
<span class="quote">&gt; Cc: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; [ rename helper to __tlbi, update commit log ]</span>
<span class="quote">&gt; Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/include/asm/tlbflush.h | 31 +++++++++++++++++++++++--------</span>
<span class="quote">&gt;  1 file changed, 23 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; index b460ae2..e9e42a7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -25,6 +25,21 @@</span>
<span class="quote">&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; + * Raw TLBI operations. Drivers and most kernel code should use the TLB</span>
<span class="quote">&gt; + * management routines below in preference to these. Where necessary, these can</span>

in preference to these?
<span class="quote">
&gt; + * be used to avoid asm() boilerplate.</span>

&#39;these&#39; seem to be a bit overloaded in this commentary.
<span class="quote">
&gt; + *</span>
<span class="quote">&gt; + * Can be used as __tlbi(op) or __tlbi(op, arg), depending on whether a</span>
<span class="quote">&gt; + * particular TLBI op takes an argument or not. The macros below handle invoking</span>
<span class="quote">&gt; + * the asm with or without the register argument as appropriate.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="quote">&gt; +#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="quote">&gt; +#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt;   *	TLB Management</span>
<span class="quote">&gt;   *	==============</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt; @@ -66,7 +81,7 @@</span>
<span class="quote">&gt;  static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	dsb(nshst);</span>
<span class="quote">&gt; -	asm(&quot;tlbi	vmalle1&quot;);</span>
<span class="quote">&gt; +	__tlbi(vmalle1);</span>
<span class="quote">&gt;  	dsb(nsh);</span>
<span class="quote">&gt;  	isb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -74,7 +89,7 @@ static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt;  static inline void flush_tlb_all(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	dsb(ishst);</span>
<span class="quote">&gt; -	asm(&quot;tlbi	vmalle1is&quot;);</span>
<span class="quote">&gt; +	__tlbi(vmalle1is);</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  	isb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -84,7 +99,7 @@ static inline void flush_tlb_mm(struct mm_struct *mm)</span>
<span class="quote">&gt;  	unsigned long asid = ASID(mm) &lt;&lt; 48;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	dsb(ishst);</span>
<span class="quote">&gt; -	asm(&quot;tlbi	aside1is, %0&quot; : : &quot;r&quot; (asid));</span>
<span class="quote">&gt; +	__tlbi(aside1is, asid);</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -94,7 +109,7 @@ static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(vma-&gt;vm_mm) &lt;&lt; 48);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	dsb(ishst);</span>
<span class="quote">&gt; -	asm(&quot;tlbi	vale1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt; +	__tlbi(vale1is, addr);</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -122,9 +137,9 @@ static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	dsb(ishst);</span>
<span class="quote">&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12)) {</span>
<span class="quote">&gt;  		if (last_level)</span>
<span class="quote">&gt; -			asm(&quot;tlbi vale1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; +			__tlbi(vale1is, addr);</span>
<span class="quote">&gt;  		else</span>
<span class="quote">&gt; -			asm(&quot;tlbi vae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; +			__tlbi(vae1is, addr);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -149,7 +164,7 @@ static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	dsb(ishst);</span>
<span class="quote">&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="quote">&gt; -		asm(&quot;tlbi vaae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; +		__tlbi(vaae1is, addr);</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  	isb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -163,7 +178,7 @@ static inline void __flush_tlb_pgtable(struct mm_struct *mm,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(mm) &lt;&lt; 48);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	asm(&quot;tlbi	vae1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt; +	__tlbi(vae1is, addr);</span>
<span class="quote">&gt;  	dsb(ish);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.8.1</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=58591">Punit Agrawal</a> - Sept. 6, 2016, 10:05 a.m.</div>
<pre class="content">
Christoffer Dall &lt;christoffer.dall@linaro.org&gt; writes:
<span class="quote">
&gt; On Mon, Sep 05, 2016 at 05:31:34PM +0100, Punit Agrawal wrote:</span>
<span class="quote">&gt;&gt; From: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; As with dsb() and isb(), add a __tlbi() helper so that we can avoid</span>
<span class="quote">&gt;&gt; distracting asm boilerplate every time we want a TLBI. As some TLBI</span>
<span class="quote">&gt;&gt; operations take an argument while others do not, some pre-processor is</span>
<span class="quote">&gt;&gt; used to handle these two cases with different assembly blocks.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; The existing tlbflush.h code is moved over to use the helper.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt;&gt; [ rename helper to __tlbi, update commit log ]</span>
<span class="quote">&gt;&gt; Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/tlbflush.h | 31 +++++++++++++++++++++++--------</span>
<span class="quote">&gt;&gt;  1 file changed, 23 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; index b460ae2..e9e42a7 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt;&gt; @@ -25,6 +25,21 @@</span>
<span class="quote">&gt;&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt; + * Raw TLBI operations. Drivers and most kernel code should use the TLB</span>
<span class="quote">&gt;&gt; + * management routines below in preference to these. Where necessary, these can</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; in preference to these?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; + * be used to avoid asm() boilerplate.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; &#39;these&#39; seem to be a bit overloaded in this commentary.</span>
<span class="quote">&gt;</span>

I&#39;ve locally updated the comment to - 

&quot;Raw TLBI operations.

Where necessary, use the __tlbi macro to avoid asm()
boilerplate. *Note:* Drivers and most kernel code should use the
TLB management routines in preference to the macros.&quot;

Is that better?
<span class="quote">
&gt;&gt; + *</span>
<span class="quote">&gt;&gt; + * Can be used as __tlbi(op) or __tlbi(op, arg), depending on whether a</span>
<span class="quote">&gt;&gt; + * particular TLBI op takes an argument or not. The macros below handle invoking</span>
<span class="quote">&gt;&gt; + * the asm with or without the register argument as appropriate.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="quote">&gt;&gt; +#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="quote">&gt;&gt; +#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt;   *	TLB Management</span>
<span class="quote">&gt;&gt;   *	==============</span>
<span class="quote">&gt;&gt;   *</span>
<span class="quote">&gt;&gt; @@ -66,7 +81,7 @@</span>
<span class="quote">&gt;&gt;  static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	dsb(nshst);</span>
<span class="quote">&gt;&gt; -	asm(&quot;tlbi	vmalle1&quot;);</span>
<span class="quote">&gt;&gt; +	__tlbi(vmalle1);</span>
<span class="quote">&gt;&gt;  	dsb(nsh);</span>
<span class="quote">&gt;&gt;  	isb();</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -74,7 +89,7 @@ static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt;&gt;  static inline void flush_tlb_all(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt;&gt; -	asm(&quot;tlbi	vmalle1is&quot;);</span>
<span class="quote">&gt;&gt; +	__tlbi(vmalle1is);</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  	isb();</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -84,7 +99,7 @@ static inline void flush_tlb_mm(struct mm_struct *mm)</span>
<span class="quote">&gt;&gt;  	unsigned long asid = ASID(mm) &lt;&lt; 48;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt;&gt; -	asm(&quot;tlbi	aside1is, %0&quot; : : &quot;r&quot; (asid));</span>
<span class="quote">&gt;&gt; +	__tlbi(aside1is, asid);</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; @@ -94,7 +109,7 @@ static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(vma-&gt;vm_mm) &lt;&lt; 48);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt;&gt; -	asm(&quot;tlbi	vale1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt;&gt; +	__tlbi(vale1is, addr);</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; @@ -122,9 +137,9 @@ static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt;&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12)) {</span>
<span class="quote">&gt;&gt;  		if (last_level)</span>
<span class="quote">&gt;&gt; -			asm(&quot;tlbi vale1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt;&gt; +			__tlbi(vale1is, addr);</span>
<span class="quote">&gt;&gt;  		else</span>
<span class="quote">&gt;&gt; -			asm(&quot;tlbi vae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt;&gt; +			__tlbi(vae1is, addr);</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -149,7 +164,7 @@ static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt;&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="quote">&gt;&gt; -		asm(&quot;tlbi vaae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt;&gt; +		__tlbi(vaae1is, addr);</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  	isb();</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -163,7 +178,7 @@ static inline void __flush_tlb_pgtable(struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(mm) &lt;&lt; 48);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -	asm(&quot;tlbi	vae1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt;&gt; +	__tlbi(vae1is, addr);</span>
<span class="quote">&gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -- </span>
<span class="quote">&gt;&gt; 2.8.1</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; kvmarm mailing list</span>
<span class="quote">&gt; kvmarm@lists.cs.columbia.edu</span>
<span class="quote">&gt; https://lists.cs.columbia.edu/mailman/listinfo/kvmarm</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68151">Christoffer Dall</a> - Sept. 6, 2016, 10:39 a.m.</div>
<pre class="content">
On Tue, Sep 06, 2016 at 11:05:17AM +0100, Punit Agrawal wrote:
<span class="quote">&gt; Christoffer Dall &lt;christoffer.dall@linaro.org&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Mon, Sep 05, 2016 at 05:31:34PM +0100, Punit Agrawal wrote:</span>
<span class="quote">&gt; &gt;&gt; From: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; As with dsb() and isb(), add a __tlbi() helper so that we can avoid</span>
<span class="quote">&gt; &gt;&gt; distracting asm boilerplate every time we want a TLBI. As some TLBI</span>
<span class="quote">&gt; &gt;&gt; operations take an argument while others do not, some pre-processor is</span>
<span class="quote">&gt; &gt;&gt; used to handle these two cases with different assembly blocks.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; The existing tlbflush.h code is moved over to use the helper.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; [ rename helper to __tlbi, update commit log ]</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/include/asm/tlbflush.h | 31 +++++++++++++++++++++++--------</span>
<span class="quote">&gt; &gt;&gt;  1 file changed, 23 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt;&gt; index b460ae2..e9e42a7 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt;&gt; @@ -25,6 +25,21 @@</span>
<span class="quote">&gt; &gt;&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt;  /*</span>
<span class="quote">&gt; &gt;&gt; + * Raw TLBI operations. Drivers and most kernel code should use the TLB</span>
<span class="quote">&gt; &gt;&gt; + * management routines below in preference to these. Where necessary, these can</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; in preference to these?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; + * be used to avoid asm() boilerplate.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; &#39;these&#39; seem to be a bit overloaded in this commentary.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve locally updated the comment to - </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &quot;Raw TLBI operations.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Where necessary, use the __tlbi macro to avoid asm()</span>
<span class="quote">&gt; boilerplate. *Note:* Drivers and most kernel code should use the</span>
<span class="quote">&gt; TLB management routines in preference to the macros.&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is that better?</span>

Yes.  I would get rid of the *Note:* part, but that&#39;s really
nit-picking.

Thanks,
-Christoffer
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt;&gt; + *</span>
<span class="quote">&gt; &gt;&gt; + * Can be used as __tlbi(op) or __tlbi(op, arg), depending on whether a</span>
<span class="quote">&gt; &gt;&gt; + * particular TLBI op takes an argument or not. The macros below handle invoking</span>
<span class="quote">&gt; &gt;&gt; + * the asm with or without the register argument as appropriate.</span>
<span class="quote">&gt; &gt;&gt; + */</span>
<span class="quote">&gt; &gt;&gt; +#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="quote">&gt; &gt;&gt; +#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="quote">&gt; &gt;&gt; +#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +/*</span>
<span class="quote">&gt; &gt;&gt;   *	TLB Management</span>
<span class="quote">&gt; &gt;&gt;   *	==============</span>
<span class="quote">&gt; &gt;&gt;   *</span>
<span class="quote">&gt; &gt;&gt; @@ -66,7 +81,7 @@</span>
<span class="quote">&gt; &gt;&gt;  static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt;  	dsb(nshst);</span>
<span class="quote">&gt; &gt;&gt; -	asm(&quot;tlbi	vmalle1&quot;);</span>
<span class="quote">&gt; &gt;&gt; +	__tlbi(vmalle1);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(nsh);</span>
<span class="quote">&gt; &gt;&gt;  	isb();</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt; @@ -74,7 +89,7 @@ static inline void local_flush_tlb_all(void)</span>
<span class="quote">&gt; &gt;&gt;  static inline void flush_tlb_all(void)</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt; &gt;&gt; -	asm(&quot;tlbi	vmalle1is&quot;);</span>
<span class="quote">&gt; &gt;&gt; +	__tlbi(vmalle1is);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  	isb();</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt; @@ -84,7 +99,7 @@ static inline void flush_tlb_mm(struct mm_struct *mm)</span>
<span class="quote">&gt; &gt;&gt;  	unsigned long asid = ASID(mm) &lt;&lt; 48;</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt; &gt;&gt; -	asm(&quot;tlbi	aside1is, %0&quot; : : &quot;r&quot; (asid));</span>
<span class="quote">&gt; &gt;&gt; +	__tlbi(aside1is, asid);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; @@ -94,7 +109,7 @@ static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(vma-&gt;vm_mm) &lt;&lt; 48);</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt; &gt;&gt; -	asm(&quot;tlbi	vale1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt; &gt;&gt; +	__tlbi(vale1is, addr);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; @@ -122,9 +137,9 @@ static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt; &gt;&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12)) {</span>
<span class="quote">&gt; &gt;&gt;  		if (last_level)</span>
<span class="quote">&gt; &gt;&gt; -			asm(&quot;tlbi vale1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; &gt;&gt; +			__tlbi(vale1is, addr);</span>
<span class="quote">&gt; &gt;&gt;  		else</span>
<span class="quote">&gt; &gt;&gt; -			asm(&quot;tlbi vae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; &gt;&gt; +			__tlbi(vae1is, addr);</span>
<span class="quote">&gt; &gt;&gt;  	}</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt; @@ -149,7 +164,7 @@ static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt;  	dsb(ishst);</span>
<span class="quote">&gt; &gt;&gt;  	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12))</span>
<span class="quote">&gt; &gt;&gt; -		asm(&quot;tlbi vaae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="quote">&gt; &gt;&gt; +		__tlbi(vaae1is, addr);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  	isb();</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt; @@ -163,7 +178,7 @@ static inline void __flush_tlb_pgtable(struct mm_struct *mm,</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt;  	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(mm) &lt;&lt; 48);</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; -	asm(&quot;tlbi	vae1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="quote">&gt; &gt;&gt; +	__tlbi(vae1is, addr);</span>
<span class="quote">&gt; &gt;&gt;  	dsb(ish);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; -- </span>
<span class="quote">&gt; &gt;&gt; 2.8.1</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt; _______________________________________________</span>
<span class="quote">&gt; &gt; kvmarm mailing list</span>
<span class="quote">&gt; &gt; kvmarm@lists.cs.columbia.edu</span>
<span class="quote">&gt; &gt; https://lists.cs.columbia.edu/mailman/listinfo/kvmarm</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Sept. 6, 2016, 6:17 p.m.</div>
<pre class="content">
On Mon, Sep 05, 2016 at 05:31:34PM +0100, Punit Agrawal wrote:
<span class="quote">&gt; From: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As with dsb() and isb(), add a __tlbi() helper so that we can avoid</span>
<span class="quote">&gt; distracting asm boilerplate every time we want a TLBI. As some TLBI</span>
<span class="quote">&gt; operations take an argument while others do not, some pre-processor is</span>
<span class="quote">&gt; used to handle these two cases with different assembly blocks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The existing tlbflush.h code is moved over to use the helper.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt; Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="quote">&gt; Cc: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>
<span class="quote">&gt; Cc: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; [ rename helper to __tlbi, update commit log ]</span>
<span class="quote">&gt; Signed-off-by: Punit Agrawal &lt;punit.agrawal@arm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/include/asm/tlbflush.h | 31 +++++++++++++++++++++++--------</span>
<span class="quote">&gt;  1 file changed, 23 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; index b460ae2..e9e42a7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -25,6 +25,21 @@</span>
<span class="quote">&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; + * Raw TLBI operations. Drivers and most kernel code should use the TLB</span>
<span class="quote">&gt; + * management routines below in preference to these. Where necessary, these can</span>
<span class="quote">&gt; + * be used to avoid asm() boilerplate.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Can be used as __tlbi(op) or __tlbi(op, arg), depending on whether a</span>
<span class="quote">&gt; + * particular TLBI op takes an argument or not. The macros below handle invoking</span>
<span class="quote">&gt; + * the asm with or without the register argument as appropriate.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="quote">&gt; +#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="quote">&gt; +#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>

This looks ok to me now. With Christoffer&#39;s comments address:
<span class="reviewed-by">
Reviewed-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>

Will
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">index b460ae2..e9e42a7 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -25,6 +25,21 @@</span> <span class="p_context"></span>
 #include &lt;asm/cputype.h&gt;
 
 /*
<span class="p_add">+ * Raw TLBI operations. Drivers and most kernel code should use the TLB</span>
<span class="p_add">+ * management routines below in preference to these. Where necessary, these can</span>
<span class="p_add">+ * be used to avoid asm() boilerplate.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Can be used as __tlbi(op) or __tlbi(op, arg), depending on whether a</span>
<span class="p_add">+ * particular TLBI op takes an argument or not. The macros below handle invoking</span>
<span class="p_add">+ * the asm with or without the register argument as appropriate.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define __TLBI_0(op, arg)		asm (&quot;tlbi &quot; #op)</span>
<span class="p_add">+#define __TLBI_1(op, arg)		asm (&quot;tlbi &quot; #op &quot;, %0&quot; : : &quot;r&quot; (arg))</span>
<span class="p_add">+#define __TLBI_N(op, arg, n, ...)	__TLBI_##n(op, arg)</span>
<span class="p_add">+</span>
<span class="p_add">+#define __tlbi(op, ...)		__TLBI_N(op, ##__VA_ARGS__, 1, 0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  *	TLB Management
  *	==============
  *
<span class="p_chunk">@@ -66,7 +81,7 @@</span> <span class="p_context"></span>
 static inline void local_flush_tlb_all(void)
 {
 	dsb(nshst);
<span class="p_del">-	asm(&quot;tlbi	vmalle1&quot;);</span>
<span class="p_add">+	__tlbi(vmalle1);</span>
 	dsb(nsh);
 	isb();
 }
<span class="p_chunk">@@ -74,7 +89,7 @@</span> <span class="p_context"> static inline void local_flush_tlb_all(void)</span>
 static inline void flush_tlb_all(void)
 {
 	dsb(ishst);
<span class="p_del">-	asm(&quot;tlbi	vmalle1is&quot;);</span>
<span class="p_add">+	__tlbi(vmalle1is);</span>
 	dsb(ish);
 	isb();
 }
<span class="p_chunk">@@ -84,7 +99,7 @@</span> <span class="p_context"> static inline void flush_tlb_mm(struct mm_struct *mm)</span>
 	unsigned long asid = ASID(mm) &lt;&lt; 48;
 
 	dsb(ishst);
<span class="p_del">-	asm(&quot;tlbi	aside1is, %0&quot; : : &quot;r&quot; (asid));</span>
<span class="p_add">+	__tlbi(aside1is, asid);</span>
 	dsb(ish);
 }
 
<span class="p_chunk">@@ -94,7 +109,7 @@</span> <span class="p_context"> static inline void flush_tlb_page(struct vm_area_struct *vma,</span>
 	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(vma-&gt;vm_mm) &lt;&lt; 48);
 
 	dsb(ishst);
<span class="p_del">-	asm(&quot;tlbi	vale1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="p_add">+	__tlbi(vale1is, addr);</span>
 	dsb(ish);
 }
 
<span class="p_chunk">@@ -122,9 +137,9 @@</span> <span class="p_context"> static inline void __flush_tlb_range(struct vm_area_struct *vma,</span>
 	dsb(ishst);
 	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12)) {
 		if (last_level)
<span class="p_del">-			asm(&quot;tlbi vale1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="p_add">+			__tlbi(vale1is, addr);</span>
 		else
<span class="p_del">-			asm(&quot;tlbi vae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="p_add">+			__tlbi(vae1is, addr);</span>
 	}
 	dsb(ish);
 }
<span class="p_chunk">@@ -149,7 +164,7 @@</span> <span class="p_context"> static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
 
 	dsb(ishst);
 	for (addr = start; addr &lt; end; addr += 1 &lt;&lt; (PAGE_SHIFT - 12))
<span class="p_del">-		asm(&quot;tlbi vaae1is, %0&quot; : : &quot;r&quot;(addr));</span>
<span class="p_add">+		__tlbi(vaae1is, addr);</span>
 	dsb(ish);
 	isb();
 }
<span class="p_chunk">@@ -163,7 +178,7 @@</span> <span class="p_context"> static inline void __flush_tlb_pgtable(struct mm_struct *mm,</span>
 {
 	unsigned long addr = uaddr &gt;&gt; 12 | (ASID(mm) &lt;&lt; 48);
 
<span class="p_del">-	asm(&quot;tlbi	vae1is, %0&quot; : : &quot;r&quot; (addr));</span>
<span class="p_add">+	__tlbi(vae1is, addr);</span>
 	dsb(ish);
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



