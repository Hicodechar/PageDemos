
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,04/20] mm: VMA sequence count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,04/20] mm: VMA sequence count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 8, 2017, 6:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1504894024-2750-5-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9944823/mbox/"
   >mbox</a>
|
   <a href="/patch/9944823/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9944823/">/patch/9944823/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	724A260224 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 18:07:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5CE372885D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 18:07:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 502FA2886F; Fri,  8 Sep 2017 18:07:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 864672885D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 18:07:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756807AbdIHSHg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 8 Sep 2017 14:07:36 -0400
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:46242 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1756734AbdIHSH3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 8 Sep 2017 14:07:29 -0400
Received: from pps.filterd (m0098409.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id
	v88I4QOq096635
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 8 Sep 2017 14:07:29 -0400
Received: from e06smtp15.uk.ibm.com (e06smtp15.uk.ibm.com [195.75.94.111])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2cuys5144u-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 08 Sep 2017 14:07:29 -0400
Received: from localhost
	by e06smtp15.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Fri, 8 Sep 2017 19:07:26 +0100
Received: from b06cxnps3075.portsmouth.uk.ibm.com (9.149.109.195)
	by e06smtp15.uk.ibm.com (192.168.101.145) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Fri, 8 Sep 2017 19:07:20 +0100
Received: from d06av24.portsmouth.uk.ibm.com (d06av24.portsmouth.uk.ibm.com
	[9.149.105.60])
	by b06cxnps3075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v88I7JXd25100314; Fri, 8 Sep 2017 18:07:19 GMT
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id B185D42041;
	Fri,  8 Sep 2017 19:03:46 +0100 (BST)
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id DDFE84203F;
	Fri,  8 Sep 2017 19:03:44 +0100 (BST)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.31.125])
	by d06av24.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Fri,  8 Sep 2017 19:03:44 +0100 (BST)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: paulmck@linux.vnet.ibm.com, peterz@infradead.org,
	akpm@linux-foundation.org, kirill@shutemov.name,
	ak@linux.intel.com, mhocko@kernel.org, dave@stgolabs.net,
	jack@suse.cz, Matthew Wilcox &lt;willy@infradead.org&gt;,
	benh@kernel.crashing.org, mpe@ellerman.id.au, paulus@samba.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, hpa@zytor.com,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Sergey Senozhatsky &lt;sergey.senozhatsky@gmail.com&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	haren@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	npiggin@gmail.com, bsingharora@gmail.com,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;,
	linuxppc-dev@lists.ozlabs.org, x86@kernel.org
Subject: [PATCH v3 04/20] mm: VMA sequence count
Date: Fri,  8 Sep 2017 20:06:48 +0200
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1504894024-2750-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1504894024-2750-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 17090818-0020-0000-0000-000003B69F38
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17090818-0021-0000-0000-00004247AAA1
Message-Id: &lt;1504894024-2750-5-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-09-08_12:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1707230000
	definitions=main-1709080270
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Sept. 8, 2017, 6:06 p.m.</div>
<pre class="content">
<span class="from">From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>

Wrap the VMA modifications (vma_adjust/unmap_page_range) with sequence
counts such that we can easily test if a VMA is changed.

The unmap_page_range() one allows us to make assumptions about
page-tables; when we find the seqcount hasn&#39;t changed we can assume
page-tables are still valid.

The flip side is that we cannot distinguish between a vma_adjust() and
the unmap_page_range() -- where with the former we could have
re-checked the vma bounds against the address.
<span class="signed-off-by">
Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>

[Port to 4.12 kernel]
[Fix lock dependency between mapping-&gt;i_mmap_rwsem and vma-&gt;vm_sequence]
<span class="signed-off-by">Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 include/linux/mm_types.h |  1 +
 mm/memory.c              |  2 ++
 mm/mmap.c                | 21 ++++++++++++++++++---
 3 files changed, 21 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=121341">Sergey Senozhatsky</a> - Sept. 13, 2017, 11:53 a.m.</div>
<pre class="content">
Hi,

On (09/08/17 20:06), Laurent Dufour wrote:
[..]
<span class="quote">&gt; @@ -903,6 +910,7 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  		mm-&gt;map_count--;</span>
<span class="quote">&gt;  		mpol_put(vma_policy(next));</span>
<span class="quote">&gt;  		kmem_cache_free(vm_area_cachep, next);</span>
<span class="quote">&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt;  		 * In mprotect&#39;s case 6 (see comments on vma_merge),</span>
<span class="quote">&gt;  		 * we must remove another next too. It would clutter</span>
<span class="quote">&gt; @@ -932,11 +940,14 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  		if (remove_next == 2) {</span>
<span class="quote">&gt;  			remove_next = 1;</span>
<span class="quote">&gt;  			end = next-&gt;vm_end;</span>
<span class="quote">&gt; +			write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt;  			goto again;</span>
<span class="quote">&gt; -		}</span>
<span class="quote">&gt; -		else if (next)</span>
<span class="quote">&gt; +		} else if (next) {</span>
<span class="quote">&gt; +			if (next != vma)</span>
<span class="quote">&gt; +				write_seqcount_begin_nested(&amp;next-&gt;vm_sequence,</span>
<span class="quote">&gt; +							    SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt;  			vma_gap_update(next);</span>
<span class="quote">&gt; -		else {</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt;  			/*</span>
<span class="quote">&gt;  			 * If remove_next == 2 we obviously can&#39;t</span>
<span class="quote">&gt;  			 * reach this path.</span>
<span class="quote">&gt; @@ -962,6 +973,10 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  	if (insert &amp;&amp; file)</span>
<span class="quote">&gt;  		uprobe_mmap(insert);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (next &amp;&amp; next != vma)</span>
<span class="quote">&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt; +	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>


ok, so what I got on my box is:

vm_munmap()  -&gt; down_write_killable(&amp;mm-&gt;mmap_sem)
 do_munmap()
  __split_vma()
   __vma_adjust()  -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)
                   -&gt; write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING)

so this gives 3 dependencies  -&gt;mmap_sem   -&gt;   -&gt;vm_seq
                              -&gt;vm_seq     -&gt;   -&gt;vm_seq/1
                              -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1


SyS_mremap() -&gt; down_write_killable(&amp;current-&gt;mm-&gt;mmap_sem)
 move_vma()   -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)
              -&gt; write_seqcount_begin_nested(&amp;new_vma-&gt;vm_sequence, SINGLE_DEPTH_NESTING);
  move_page_tables()
   __pte_alloc()
    pte_alloc_one()
     __alloc_pages_nodemask()
      fs_reclaim_acquire()


I think here we have prepare_alloc_pages() call, that does

        -&gt; fs_reclaim_acquire(gfp_mask)
        -&gt; fs_reclaim_release(gfp_mask)

so that adds one more dependency  -&gt;mmap_sem   -&gt;   -&gt;vm_seq    -&gt;   fs_reclaim
                                  -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1  -&gt;   fs_reclaim


now, under memory pressure we hit the slow path and perform direct
reclaim. direct reclaim is done under fs_reclaim lock, so we end up
with the following call chain

__alloc_pages_nodemask()
 __alloc_pages_slowpath()
  __perform_reclaim()       -&gt;   fs_reclaim_acquire(gfp_mask);
   try_to_free_pages()
    shrink_node()
     shrink_active_list()
      rmap_walk_file()      -&gt;   i_mmap_lock_read(mapping);


and this break the existing dependency. since we now take the leaf lock
(fs_reclaim) first and the the root lock (-&gt;mmap_sem).


well, seems to be the case.

	-ss
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Sept. 13, 2017, 4:56 p.m.</div>
<pre class="content">
Hi Sergey,

On 13/09/2017 13:53, Sergey Senozhatsky wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On (09/08/17 20:06), Laurent Dufour wrote:</span>
<span class="quote">&gt; [..]</span>
<span class="quote">&gt;&gt; @@ -903,6 +910,7 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;&gt;  		mm-&gt;map_count--;</span>
<span class="quote">&gt;&gt;  		mpol_put(vma_policy(next));</span>
<span class="quote">&gt;&gt;  		kmem_cache_free(vm_area_cachep, next);</span>
<span class="quote">&gt;&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt;&gt;  		/*</span>
<span class="quote">&gt;&gt;  		 * In mprotect&#39;s case 6 (see comments on vma_merge),</span>
<span class="quote">&gt;&gt;  		 * we must remove another next too. It would clutter</span>
<span class="quote">&gt;&gt; @@ -932,11 +940,14 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;&gt;  		if (remove_next == 2) {</span>
<span class="quote">&gt;&gt;  			remove_next = 1;</span>
<span class="quote">&gt;&gt;  			end = next-&gt;vm_end;</span>
<span class="quote">&gt;&gt; +			write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt;&gt;  			goto again;</span>
<span class="quote">&gt;&gt; -		}</span>
<span class="quote">&gt;&gt; -		else if (next)</span>
<span class="quote">&gt;&gt; +		} else if (next) {</span>
<span class="quote">&gt;&gt; +			if (next != vma)</span>
<span class="quote">&gt;&gt; +				write_seqcount_begin_nested(&amp;next-&gt;vm_sequence,</span>
<span class="quote">&gt;&gt; +							    SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt;&gt;  			vma_gap_update(next);</span>
<span class="quote">&gt;&gt; -		else {</span>
<span class="quote">&gt;&gt; +		} else {</span>
<span class="quote">&gt;&gt;  			/*</span>
<span class="quote">&gt;&gt;  			 * If remove_next == 2 we obviously can&#39;t</span>
<span class="quote">&gt;&gt;  			 * reach this path.</span>
<span class="quote">&gt;&gt; @@ -962,6 +973,10 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;&gt;  	if (insert &amp;&amp; file)</span>
<span class="quote">&gt;&gt;  		uprobe_mmap(insert);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +	if (next &amp;&amp; next != vma)</span>
<span class="quote">&gt;&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt;&gt; +	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ok, so what I got on my box is:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; vm_munmap()  -&gt; down_write_killable(&amp;mm-&gt;mmap_sem)</span>
<span class="quote">&gt;  do_munmap()</span>
<span class="quote">&gt;   __split_vma()</span>
<span class="quote">&gt;    __vma_adjust()  -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt;                    -&gt; write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; so this gives 3 dependencies  -&gt;mmap_sem   -&gt;   -&gt;vm_seq</span>
<span class="quote">&gt;                               -&gt;vm_seq     -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt;                               -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; SyS_mremap() -&gt; down_write_killable(&amp;current-&gt;mm-&gt;mmap_sem)</span>
<span class="quote">&gt;  move_vma()   -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt;               -&gt; write_seqcount_begin_nested(&amp;new_vma-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt;   move_page_tables()</span>
<span class="quote">&gt;    __pte_alloc()</span>
<span class="quote">&gt;     pte_alloc_one()</span>
<span class="quote">&gt;      __alloc_pages_nodemask()</span>
<span class="quote">&gt;       fs_reclaim_acquire()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think here we have prepare_alloc_pages() call, that does</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;         -&gt; fs_reclaim_acquire(gfp_mask)</span>
<span class="quote">&gt;         -&gt; fs_reclaim_release(gfp_mask)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; so that adds one more dependency  -&gt;mmap_sem   -&gt;   -&gt;vm_seq    -&gt;   fs_reclaim</span>
<span class="quote">&gt;                                   -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1  -&gt;   fs_reclaim</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; now, under memory pressure we hit the slow path and perform direct</span>
<span class="quote">&gt; reclaim. direct reclaim is done under fs_reclaim lock, so we end up</span>
<span class="quote">&gt; with the following call chain</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; __alloc_pages_nodemask()</span>
<span class="quote">&gt;  __alloc_pages_slowpath()</span>
<span class="quote">&gt;   __perform_reclaim()       -&gt;   fs_reclaim_acquire(gfp_mask);</span>
<span class="quote">&gt;    try_to_free_pages()</span>
<span class="quote">&gt;     shrink_node()</span>
<span class="quote">&gt;      shrink_active_list()</span>
<span class="quote">&gt;       rmap_walk_file()      -&gt;   i_mmap_lock_read(mapping);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and this break the existing dependency. since we now take the leaf lock</span>
<span class="quote">&gt; (fs_reclaim) first and the the root lock (-&gt;mmap_sem).</span>

Thanks for looking at this.
I&#39;m sorry, I should have miss something.

My understanding is that there are 2 chains of locks:
 1. from __vma_adjust() mmap_sem -&gt; i_mmap_rwsem -&gt; vm_seq
 2. from move_vmap() mmap_sem -&gt; vm_seq -&gt; fs_reclaim
 2. from __alloc_pages_nodemask() fs_reclaim -&gt; i_mmap_rwsem

So the solution would be to have in __vma_adjust()
 mmap_sem -&gt; vm_seq -&gt; i_mmap_rwsem

But this will raised the following dependency from  unmap_mapping_range()
unmap_mapping_range() 		-&gt; i_mmap_rwsem
 unmap_mapping_range_tree()
  unmap_mapping_range_vma()
   zap_page_range_single()
    unmap_single_vma()
     unmap_page_range()	 	-&gt; vm_seq

And there is no way to get rid of it easily as in unmap_mapping_range()
there is no VMA identified yet.

That&#39;s being said I can&#39;t see any clear way to get lock dependency cleaned
here.
Furthermore, this is not clear to me how a deadlock could happen as vm_seq
is a sequence lock, and there is no way to get blocked here.

Cheers,
Laurent.
<span class="quote">
&gt; </span>
<span class="quote">&gt; well, seems to be the case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	-ss</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=121341">Sergey Senozhatsky</a> - Sept. 14, 2017, 12:31 a.m.</div>
<pre class="content">
Hi,

On (09/13/17 18:56), Laurent Dufour wrote:
<span class="quote">&gt; Hi Sergey,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 13/09/2017 13:53, Sergey Senozhatsky wrote:</span>
<span class="quote">&gt; &gt; Hi,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On (09/08/17 20:06), Laurent Dufour wrote:</span>
[..]
<span class="quote">&gt; &gt; ok, so what I got on my box is:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; vm_munmap()  -&gt; down_write_killable(&amp;mm-&gt;mmap_sem)</span>
<span class="quote">&gt; &gt;  do_munmap()</span>
<span class="quote">&gt; &gt;   __split_vma()</span>
<span class="quote">&gt; &gt;    __vma_adjust()  -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt; &gt;                    -&gt; write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; so this gives 3 dependencies  -&gt;mmap_sem   -&gt;   -&gt;vm_seq</span>
<span class="quote">&gt; &gt;                               -&gt;vm_seq     -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt; &gt;                               -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; SyS_mremap() -&gt; down_write_killable(&amp;current-&gt;mm-&gt;mmap_sem)</span>
<span class="quote">&gt; &gt;  move_vma()   -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt; &gt;               -&gt; write_seqcount_begin_nested(&amp;new_vma-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt; &gt;   move_page_tables()</span>
<span class="quote">&gt; &gt;    __pte_alloc()</span>
<span class="quote">&gt; &gt;     pte_alloc_one()</span>
<span class="quote">&gt; &gt;      __alloc_pages_nodemask()</span>
<span class="quote">&gt; &gt;       fs_reclaim_acquire()</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think here we have prepare_alloc_pages() call, that does</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;         -&gt; fs_reclaim_acquire(gfp_mask)</span>
<span class="quote">&gt; &gt;         -&gt; fs_reclaim_release(gfp_mask)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; so that adds one more dependency  -&gt;mmap_sem   -&gt;   -&gt;vm_seq    -&gt;   fs_reclaim</span>
<span class="quote">&gt; &gt;                                   -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1  -&gt;   fs_reclaim</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; now, under memory pressure we hit the slow path and perform direct</span>
<span class="quote">&gt; &gt; reclaim. direct reclaim is done under fs_reclaim lock, so we end up</span>
<span class="quote">&gt; &gt; with the following call chain</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; __alloc_pages_nodemask()</span>
<span class="quote">&gt; &gt;  __alloc_pages_slowpath()</span>
<span class="quote">&gt; &gt;   __perform_reclaim()       -&gt;   fs_reclaim_acquire(gfp_mask);</span>
<span class="quote">&gt; &gt;    try_to_free_pages()</span>
<span class="quote">&gt; &gt;     shrink_node()</span>
<span class="quote">&gt; &gt;      shrink_active_list()</span>
<span class="quote">&gt; &gt;       rmap_walk_file()      -&gt;   i_mmap_lock_read(mapping);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; and this break the existing dependency. since we now take the leaf lock</span>
<span class="quote">&gt; &gt; (fs_reclaim) first and the the root lock (-&gt;mmap_sem).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for looking at this.</span>
<span class="quote">&gt; I&#39;m sorry, I should have miss something.</span>

no prob :)
<span class="quote">

&gt; My understanding is that there are 2 chains of locks:</span>
<span class="quote">&gt;  1. from __vma_adjust() mmap_sem -&gt; i_mmap_rwsem -&gt; vm_seq</span>
<span class="quote">&gt;  2. from move_vmap() mmap_sem -&gt; vm_seq -&gt; fs_reclaim</span>
<span class="quote">&gt;  2. from __alloc_pages_nodemask() fs_reclaim -&gt; i_mmap_rwsem</span>

yes, as far as lockdep warning suggests.
<span class="quote">
&gt; So the solution would be to have in __vma_adjust()</span>
<span class="quote">&gt;  mmap_sem -&gt; vm_seq -&gt; i_mmap_rwsem</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But this will raised the following dependency from  unmap_mapping_range()</span>
<span class="quote">&gt; unmap_mapping_range() 		-&gt; i_mmap_rwsem</span>
<span class="quote">&gt;  unmap_mapping_range_tree()</span>
<span class="quote">&gt;   unmap_mapping_range_vma()</span>
<span class="quote">&gt;    zap_page_range_single()</span>
<span class="quote">&gt;     unmap_single_vma()</span>
<span class="quote">&gt;      unmap_page_range()	 	-&gt; vm_seq</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And there is no way to get rid of it easily as in unmap_mapping_range()</span>
<span class="quote">&gt; there is no VMA identified yet.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s being said I can&#39;t see any clear way to get lock dependency cleaned</span>
<span class="quote">&gt; here.</span>
<span class="quote">&gt; Furthermore, this is not clear to me how a deadlock could happen as vm_seq</span>
<span class="quote">&gt; is a sequence lock, and there is no way to get blocked here.</span>

as far as I understand,
   seq locks can deadlock, technically. not on the write() side, but on
the read() side:

read_seqcount_begin()
 raw_read_seqcount_begin()
   __read_seqcount_begin()

and __read_seqcount_begin() spins for ever

   __read_seqcount_begin()
   {
    repeat:
     ret = READ_ONCE(s-&gt;sequence);
     if (unlikely(ret &amp; 1)) {
         cpu_relax();
         goto repeat;
     }
     return ret;
   }


so if there are two CPUs, one doing write_seqcount() and the other one
doing read_seqcount() then what can happen is something like this

	CPU0					CPU1

						fs_reclaim_acquire()
	write_seqcount_begin()
	fs_reclaim_acquire()			read_seqcount_begin()
	write_seqcount_end()

CPU0 can&#39;t write_seqcount_end() because of fs_reclaim_acquire() from
CPU1, CPU1 can&#39;t read_seqcount_begin() because CPU0 did write_seqcount_begin()
and now waits for fs_reclaim_acquire(). makes sense?

	-ss
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Sept. 14, 2017, 7:55 a.m.</div>
<pre class="content">
Hi,

On 14/09/2017 02:31, Sergey Senozhatsky wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On (09/13/17 18:56), Laurent Dufour wrote:</span>
<span class="quote">&gt;&gt; Hi Sergey,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 13/09/2017 13:53, Sergey Senozhatsky wrote:</span>
<span class="quote">&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On (09/08/17 20:06), Laurent Dufour wrote:</span>
<span class="quote">&gt; [..]</span>
<span class="quote">&gt;&gt;&gt; ok, so what I got on my box is:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; vm_munmap()  -&gt; down_write_killable(&amp;mm-&gt;mmap_sem)</span>
<span class="quote">&gt;&gt;&gt;  do_munmap()</span>
<span class="quote">&gt;&gt;&gt;   __split_vma()</span>
<span class="quote">&gt;&gt;&gt;    __vma_adjust()  -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt;&gt;&gt;                    -&gt; write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; so this gives 3 dependencies  -&gt;mmap_sem   -&gt;   -&gt;vm_seq</span>
<span class="quote">&gt;&gt;&gt;                               -&gt;vm_seq     -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt;&gt;&gt;                               -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; SyS_mremap() -&gt; down_write_killable(&amp;current-&gt;mm-&gt;mmap_sem)</span>
<span class="quote">&gt;&gt;&gt;  move_vma()   -&gt; write_seqcount_begin(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt;&gt;&gt;               -&gt; write_seqcount_begin_nested(&amp;new_vma-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt;&gt;&gt;   move_page_tables()</span>
<span class="quote">&gt;&gt;&gt;    __pte_alloc()</span>
<span class="quote">&gt;&gt;&gt;     pte_alloc_one()</span>
<span class="quote">&gt;&gt;&gt;      __alloc_pages_nodemask()</span>
<span class="quote">&gt;&gt;&gt;       fs_reclaim_acquire()</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I think here we have prepare_alloc_pages() call, that does</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;         -&gt; fs_reclaim_acquire(gfp_mask)</span>
<span class="quote">&gt;&gt;&gt;         -&gt; fs_reclaim_release(gfp_mask)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; so that adds one more dependency  -&gt;mmap_sem   -&gt;   -&gt;vm_seq    -&gt;   fs_reclaim</span>
<span class="quote">&gt;&gt;&gt;                                   -&gt;mmap_sem   -&gt;   -&gt;vm_seq/1  -&gt;   fs_reclaim</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; now, under memory pressure we hit the slow path and perform direct</span>
<span class="quote">&gt;&gt;&gt; reclaim. direct reclaim is done under fs_reclaim lock, so we end up</span>
<span class="quote">&gt;&gt;&gt; with the following call chain</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; __alloc_pages_nodemask()</span>
<span class="quote">&gt;&gt;&gt;  __alloc_pages_slowpath()</span>
<span class="quote">&gt;&gt;&gt;   __perform_reclaim()       -&gt;   fs_reclaim_acquire(gfp_mask);</span>
<span class="quote">&gt;&gt;&gt;    try_to_free_pages()</span>
<span class="quote">&gt;&gt;&gt;     shrink_node()</span>
<span class="quote">&gt;&gt;&gt;      shrink_active_list()</span>
<span class="quote">&gt;&gt;&gt;       rmap_walk_file()      -&gt;   i_mmap_lock_read(mapping);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; and this break the existing dependency. since we now take the leaf lock</span>
<span class="quote">&gt;&gt;&gt; (fs_reclaim) first and the the root lock (-&gt;mmap_sem).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks for looking at this.</span>
<span class="quote">&gt;&gt; I&#39;m sorry, I should have miss something.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; no prob :)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; My understanding is that there are 2 chains of locks:</span>
<span class="quote">&gt;&gt;  1. from __vma_adjust() mmap_sem -&gt; i_mmap_rwsem -&gt; vm_seq</span>
<span class="quote">&gt;&gt;  2. from move_vmap() mmap_sem -&gt; vm_seq -&gt; fs_reclaim</span>
<span class="quote">&gt;&gt;  2. from __alloc_pages_nodemask() fs_reclaim -&gt; i_mmap_rwsem</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; yes, as far as lockdep warning suggests.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; So the solution would be to have in __vma_adjust()</span>
<span class="quote">&gt;&gt;  mmap_sem -&gt; vm_seq -&gt; i_mmap_rwsem</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; But this will raised the following dependency from  unmap_mapping_range()</span>
<span class="quote">&gt;&gt; unmap_mapping_range() 		-&gt; i_mmap_rwsem</span>
<span class="quote">&gt;&gt;  unmap_mapping_range_tree()</span>
<span class="quote">&gt;&gt;   unmap_mapping_range_vma()</span>
<span class="quote">&gt;&gt;    zap_page_range_single()</span>
<span class="quote">&gt;&gt;     unmap_single_vma()</span>
<span class="quote">&gt;&gt;      unmap_page_range()	 	-&gt; vm_seq</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; And there is no way to get rid of it easily as in unmap_mapping_range()</span>
<span class="quote">&gt;&gt; there is no VMA identified yet.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; That&#39;s being said I can&#39;t see any clear way to get lock dependency cleaned</span>
<span class="quote">&gt;&gt; here.</span>
<span class="quote">&gt;&gt; Furthermore, this is not clear to me how a deadlock could happen as vm_seq</span>
<span class="quote">&gt;&gt; is a sequence lock, and there is no way to get blocked here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; as far as I understand,</span>
<span class="quote">&gt;    seq locks can deadlock, technically. not on the write() side, but on</span>
<span class="quote">&gt; the read() side:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; read_seqcount_begin()</span>
<span class="quote">&gt;  raw_read_seqcount_begin()</span>
<span class="quote">&gt;    __read_seqcount_begin()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and __read_seqcount_begin() spins for ever</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    __read_seqcount_begin()</span>
<span class="quote">&gt;    {</span>
<span class="quote">&gt;     repeat:</span>
<span class="quote">&gt;      ret = READ_ONCE(s-&gt;sequence);</span>
<span class="quote">&gt;      if (unlikely(ret &amp; 1)) {</span>
<span class="quote">&gt;          cpu_relax();</span>
<span class="quote">&gt;          goto repeat;</span>
<span class="quote">&gt;      }</span>
<span class="quote">&gt;      return ret;</span>
<span class="quote">&gt;    }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; so if there are two CPUs, one doing write_seqcount() and the other one</span>
<span class="quote">&gt; doing read_seqcount() then what can happen is something like this</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	CPU0					CPU1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 						fs_reclaim_acquire()</span>
<span class="quote">&gt; 	write_seqcount_begin()</span>
<span class="quote">&gt; 	fs_reclaim_acquire()			read_seqcount_begin()</span>
<span class="quote">&gt; 	write_seqcount_end()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; CPU0 can&#39;t write_seqcount_end() because of fs_reclaim_acquire() from</span>
<span class="quote">&gt; CPU1, CPU1 can&#39;t read_seqcount_begin() because CPU0 did write_seqcount_begin()</span>
<span class="quote">&gt; and now waits for fs_reclaim_acquire(). makes sense?</span>

Yes, this makes sense.

But in the case of this series, there is no call to
__read_seqcount_begin(), and the reader (the speculative page fault
handler), is just checking for (vm_seq &amp; 1) and if this is true, simply
exit the speculative path without waiting.
So there is no deadlock possibility.

The bad case would be to have 2 concurrent threads calling
write_seqcount_begin() on the same VMA, leading a wrongly freed sequence
lock but this can&#39;t happen because of the mmap_sem holding for write in
such a case.

Cheers,
Laurent.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=121341">Sergey Senozhatsky</a> - Sept. 14, 2017, 8:13 a.m.</div>
<pre class="content">
Hi,

On (09/14/17 09:55), Laurent Dufour wrote:
[..]
<span class="quote">&gt; &gt; so if there are two CPUs, one doing write_seqcount() and the other one</span>
<span class="quote">&gt; &gt; doing read_seqcount() then what can happen is something like this</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; 	CPU0					CPU1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; 						fs_reclaim_acquire()</span>
<span class="quote">&gt; &gt; 	write_seqcount_begin()</span>
<span class="quote">&gt; &gt; 	fs_reclaim_acquire()			read_seqcount_begin()</span>
<span class="quote">&gt; &gt; 	write_seqcount_end()</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; CPU0 can&#39;t write_seqcount_end() because of fs_reclaim_acquire() from</span>
<span class="quote">&gt; &gt; CPU1, CPU1 can&#39;t read_seqcount_begin() because CPU0 did write_seqcount_begin()</span>
<span class="quote">&gt; &gt; and now waits for fs_reclaim_acquire(). makes sense?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, this makes sense.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But in the case of this series, there is no call to</span>
<span class="quote">&gt; __read_seqcount_begin(), and the reader (the speculative page fault</span>
<span class="quote">&gt; handler), is just checking for (vm_seq &amp; 1) and if this is true, simply</span>
<span class="quote">&gt; exit the speculative path without waiting.</span>
<span class="quote">&gt; So there is no deadlock possibility.</span>

probably lockdep just knows that those locks interleave at some
point.


by the way, I think there is one path that can spin

find_vma_srcu()
 read_seqbegin()
  read_seqcount_begin()
   raw_read_seqcount_begin()
    __read_seqcount_begin()

	-ss
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Sept. 14, 2017, 8:58 a.m.</div>
<pre class="content">
On 14/09/2017 10:13, Sergey Senozhatsky wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On (09/14/17 09:55), Laurent Dufour wrote:</span>
<span class="quote">&gt; [..]</span>
<span class="quote">&gt;&gt;&gt; so if there are two CPUs, one doing write_seqcount() and the other one</span>
<span class="quote">&gt;&gt;&gt; doing read_seqcount() then what can happen is something like this</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; 	CPU0					CPU1</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; 						fs_reclaim_acquire()</span>
<span class="quote">&gt;&gt;&gt; 	write_seqcount_begin()</span>
<span class="quote">&gt;&gt;&gt; 	fs_reclaim_acquire()			read_seqcount_begin()</span>
<span class="quote">&gt;&gt;&gt; 	write_seqcount_end()</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; CPU0 can&#39;t write_seqcount_end() because of fs_reclaim_acquire() from</span>
<span class="quote">&gt;&gt;&gt; CPU1, CPU1 can&#39;t read_seqcount_begin() because CPU0 did write_seqcount_begin()</span>
<span class="quote">&gt;&gt;&gt; and now waits for fs_reclaim_acquire(). makes sense?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Yes, this makes sense.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; But in the case of this series, there is no call to</span>
<span class="quote">&gt;&gt; __read_seqcount_begin(), and the reader (the speculative page fault</span>
<span class="quote">&gt;&gt; handler), is just checking for (vm_seq &amp; 1) and if this is true, simply</span>
<span class="quote">&gt;&gt; exit the speculative path without waiting.</span>
<span class="quote">&gt;&gt; So there is no deadlock possibility.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; probably lockdep just knows that those locks interleave at some</span>
<span class="quote">&gt; point.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; by the way, I think there is one path that can spin</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; find_vma_srcu()</span>
<span class="quote">&gt;  read_seqbegin()</span>
<span class="quote">&gt;   read_seqcount_begin()</span>
<span class="quote">&gt;    raw_read_seqcount_begin()</span>
<span class="quote">&gt;     __read_seqcount_begin()</span>


That&#39;s right, but here this is the  sequence counter mm-&gt;mm_seq, not the
vm_seq one.

This one is held to protect walking the VMA list &quot;locklessly&quot;...

Cheers,
Laurent.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=121341">Sergey Senozhatsky</a> - Sept. 14, 2017, 9:11 a.m.</div>
<pre class="content">
On (09/14/17 10:58), Laurent Dufour wrote:
[..]
<span class="quote">&gt; That&#39;s right, but here this is the  sequence counter mm-&gt;mm_seq, not the</span>
<span class="quote">&gt; vm_seq one.</span>

d&#39;oh... you are right.

	-ss
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Sept. 14, 2017, 9:15 a.m.</div>
<pre class="content">
On 14/09/2017 11:11, Sergey Senozhatsky wrote:
<span class="quote">&gt; On (09/14/17 10:58), Laurent Dufour wrote:</span>
<span class="quote">&gt; [..]</span>
<span class="quote">&gt;&gt; That&#39;s right, but here this is the  sequence counter mm-&gt;mm_seq, not the</span>
<span class="quote">&gt;&gt; vm_seq one.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; d&#39;oh... you are right.</span>

So I&#39;m doubting about the probability of a deadlock here, but I don&#39;t like
to see lockdep complaining. Is there an easy way to make it happy ?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=121341">Sergey Senozhatsky</a> - Sept. 14, 2017, 9:40 a.m.</div>
<pre class="content">
On (09/14/17 11:15), Laurent Dufour wrote:
<span class="quote">&gt; On 14/09/2017 11:11, Sergey Senozhatsky wrote:</span>
<span class="quote">&gt; &gt; On (09/14/17 10:58), Laurent Dufour wrote:</span>
<span class="quote">&gt; &gt; [..]</span>
<span class="quote">&gt; &gt;&gt; That&#39;s right, but here this is the  sequence counter mm-&gt;mm_seq, not the</span>
<span class="quote">&gt; &gt;&gt; vm_seq one.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; d&#39;oh... you are right.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I&#39;m doubting about the probability of a deadlock here, but I don&#39;t like</span>
<span class="quote">&gt; to see lockdep complaining. Is there an easy way to make it happy ?</span>


 /*
  * well... answering your question - it seems raw versions of seqcount
  * functions don&#39;t call lockdep&#39;s lock_acquire/lock_release...
  *
  * but I have never told you that. never.
  */


lockdep, perhaps, can be wrong sometimes, and may be it&#39;s one of those
cases. may be not... I&#39;m not a MM guy myself.

below is a lockdep splat I got yesterday. that&#39;s v3 of SPF patch set.


[ 2763.365898] ======================================================
[ 2763.365899] WARNING: possible circular locking dependency detected
[ 2763.365902] 4.13.0-next-20170913-dbg-00039-ge3c06ea4b028-dirty #1837 Not tainted
[ 2763.365903] ------------------------------------------------------
[ 2763.365905] khugepaged/42 is trying to acquire lock:
[ 2763.365906]  (&amp;mapping-&gt;i_mmap_rwsem){++++}, at: [&lt;ffffffff811181cc&gt;] rmap_walk_file+0x5a/0x142
[ 2763.365913] 
               but task is already holding lock:
[ 2763.365915]  (fs_reclaim){+.+.}, at: [&lt;ffffffff810e99dc&gt;] fs_reclaim_acquire+0x12/0x35
[ 2763.365920] 
               which lock already depends on the new lock.

[ 2763.365922] 
               the existing dependency chain (in reverse order) is:
[ 2763.365924] 
               -&gt; #3 (fs_reclaim){+.+.}:
[ 2763.365930]        lock_acquire+0x176/0x19e
[ 2763.365932]        fs_reclaim_acquire+0x32/0x35
[ 2763.365934]        __alloc_pages_nodemask+0x6d/0x1f9
[ 2763.365937]        pte_alloc_one+0x17/0x62
[ 2763.365940]        __pte_alloc+0x1f/0x83
[ 2763.365943]        move_page_tables+0x2c3/0x5a2
[ 2763.365944]        move_vma.isra.25+0xff/0x29f
[ 2763.365946]        SyS_mremap+0x41b/0x49e
[ 2763.365949]        entry_SYSCALL_64_fastpath+0x18/0xad
[ 2763.365951] 
               -&gt; #2 (&amp;vma-&gt;vm_sequence/1){+.+.}:
[ 2763.365955]        lock_acquire+0x176/0x19e
[ 2763.365958]        write_seqcount_begin_nested+0x1b/0x1d
[ 2763.365959]        __vma_adjust+0x1c4/0x5f1
[ 2763.365961]        __split_vma+0x12c/0x181
[ 2763.365963]        do_munmap+0x128/0x2af
[ 2763.365965]        vm_munmap+0x5a/0x73
[ 2763.365968]        elf_map+0xb1/0xce
[ 2763.365970]        load_elf_binary+0x91e/0x137a
[ 2763.365973]        search_binary_handler+0x70/0x1f3
[ 2763.365974]        do_execveat_common+0x45e/0x68e
[ 2763.365978]        call_usermodehelper_exec_async+0xf7/0x11f
[ 2763.365980]        ret_from_fork+0x27/0x40
[ 2763.365981] 
               -&gt; #1 (&amp;vma-&gt;vm_sequence){+.+.}:
[ 2763.365985]        lock_acquire+0x176/0x19e
[ 2763.365987]        write_seqcount_begin_nested+0x1b/0x1d
[ 2763.365989]        __vma_adjust+0x1a9/0x5f1
[ 2763.365991]        __split_vma+0x12c/0x181
[ 2763.365993]        do_munmap+0x128/0x2af
[ 2763.365994]        vm_munmap+0x5a/0x73
[ 2763.365996]        elf_map+0xb1/0xce
[ 2763.365998]        load_elf_binary+0x91e/0x137a
[ 2763.365999]        search_binary_handler+0x70/0x1f3
[ 2763.366001]        do_execveat_common+0x45e/0x68e
[ 2763.366003]        call_usermodehelper_exec_async+0xf7/0x11f
[ 2763.366005]        ret_from_fork+0x27/0x40
[ 2763.366006] 
               -&gt; #0 (&amp;mapping-&gt;i_mmap_rwsem){++++}:
[ 2763.366010]        __lock_acquire+0xa72/0xca0
[ 2763.366012]        lock_acquire+0x176/0x19e
[ 2763.366015]        down_read+0x3b/0x55
[ 2763.366017]        rmap_walk_file+0x5a/0x142
[ 2763.366018]        page_referenced+0xfc/0x134
[ 2763.366022]        shrink_active_list+0x1ac/0x37d
[ 2763.366024]        shrink_node_memcg.constprop.72+0x3ca/0x567
[ 2763.366026]        shrink_node+0x3f/0x14c
[ 2763.366028]        try_to_free_pages+0x288/0x47a
[ 2763.366030]        __alloc_pages_slowpath+0x3a7/0xa49
[ 2763.366032]        __alloc_pages_nodemask+0xf1/0x1f9
[ 2763.366035]        khugepaged+0xc8/0x167c
[ 2763.366037]        kthread+0x133/0x13b
[ 2763.366039]        ret_from_fork+0x27/0x40
[ 2763.366040] 
               other info that might help us debug this:

[ 2763.366042] Chain exists of:
                 &amp;mapping-&gt;i_mmap_rwsem --&gt; &amp;vma-&gt;vm_sequence/1 --&gt; fs_reclaim

[ 2763.366048]  Possible unsafe locking scenario:

[ 2763.366049]        CPU0                    CPU1
[ 2763.366050]        ----                    ----
[ 2763.366051]   lock(fs_reclaim);
[ 2763.366054]                                lock(&amp;vma-&gt;vm_sequence/1);
[ 2763.366056]                                lock(fs_reclaim);
[ 2763.366058]   lock(&amp;mapping-&gt;i_mmap_rwsem);
[ 2763.366061] 
                *** DEADLOCK ***

[ 2763.366063] 1 lock held by khugepaged/42:
[ 2763.366064]  #0:  (fs_reclaim){+.+.}, at: [&lt;ffffffff810e99dc&gt;] fs_reclaim_acquire+0x12/0x35
[ 2763.366068] 
               stack backtrace:
[ 2763.366071] CPU: 2 PID: 42 Comm: khugepaged Not tainted 4.13.0-next-20170913-dbg-00039-ge3c06ea4b028-dirty #1837
[ 2763.366073] Call Trace:
[ 2763.366077]  dump_stack+0x67/0x8e
[ 2763.366080]  print_circular_bug+0x2a1/0x2af
[ 2763.366083]  ? graph_unlock+0x69/0x69
[ 2763.366085]  check_prev_add+0x76/0x20d
[ 2763.366087]  ? graph_unlock+0x69/0x69
[ 2763.366090]  __lock_acquire+0xa72/0xca0
[ 2763.366093]  ? __save_stack_trace+0xa3/0xbf
[ 2763.366096]  lock_acquire+0x176/0x19e
[ 2763.366098]  ? rmap_walk_file+0x5a/0x142
[ 2763.366100]  down_read+0x3b/0x55
[ 2763.366102]  ? rmap_walk_file+0x5a/0x142
[ 2763.366103]  rmap_walk_file+0x5a/0x142
[ 2763.366106]  page_referenced+0xfc/0x134
[ 2763.366108]  ? page_vma_mapped_walk_done.isra.17+0xb/0xb
[ 2763.366109]  ? page_get_anon_vma+0x6d/0x6d
[ 2763.366112]  shrink_active_list+0x1ac/0x37d
[ 2763.366115]  shrink_node_memcg.constprop.72+0x3ca/0x567
[ 2763.366118]  ? ___might_sleep+0xd5/0x234
[ 2763.366121]  shrink_node+0x3f/0x14c
[ 2763.366123]  try_to_free_pages+0x288/0x47a
[ 2763.366126]  __alloc_pages_slowpath+0x3a7/0xa49
[ 2763.366128]  ? ___might_sleep+0xd5/0x234
[ 2763.366131]  __alloc_pages_nodemask+0xf1/0x1f9
[ 2763.366133]  khugepaged+0xc8/0x167c
[ 2763.366138]  ? remove_wait_queue+0x47/0x47
[ 2763.366140]  ? collapse_shmem.isra.45+0x828/0x828
[ 2763.366142]  kthread+0x133/0x13b
[ 2763.366145]  ? __list_del_entry+0x1d/0x1d
[ 2763.366147]  ret_from_fork+0x27/0x40

	-ss
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Sept. 25, 2017, 12:22 p.m.</div>
<pre class="content">
On Fri, Sep 15, 2017 at 02:38:51PM +0200, Laurent Dufour wrote:
<span class="quote">&gt; &gt;  /*</span>
<span class="quote">&gt; &gt;   * well... answering your question - it seems raw versions of seqcount</span>
<span class="quote">&gt; &gt;   * functions don&#39;t call lockdep&#39;s lock_acquire/lock_release...</span>
<span class="quote">&gt; &gt;   *</span>
<span class="quote">&gt; &gt;   * but I have never told you that. never.</span>
<span class="quote">&gt; &gt;   */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hum... I&#39;m not sure that would be the best way since in other case lockdep</span>
<span class="quote">&gt; checks are valid, but if getting rid of locked&#39;s warning is required to get</span>
<span class="quote">&gt; this series upstream, I&#39;d use raw versions... Please advice...</span>

No sensible other way to shut it up come to mind though. Might be best
to use the raw primitives with a comment explaining why.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 46f4ecf5479a..df9a530c8ca1 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -344,6 +344,7 @@</span> <span class="p_context"> struct vm_area_struct {</span>
 	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
 #endif
 	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
<span class="p_add">+	seqcount_t vm_sequence;</span>
 } __randomize_layout;
 
 struct core_thread {
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 530d887ca885..f250e7c92948 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1499,6 +1499,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 	unsigned long next;
 
 	BUG_ON(addr &gt;= end);
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	tlb_start_vma(tlb, vma);
 	pgd = pgd_offset(vma-&gt;vm_mm, addr);
 	do {
<span class="p_chunk">@@ -1508,6 +1509,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 		next = zap_p4d_range(tlb, vma, pgd, addr, next, details);
 	} while (pgd++, addr = next, addr != end);
 	tlb_end_vma(tlb, vma);
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 }
 
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 680506faceae..0a0012c7e50c 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -558,6 +558,8 @@</span> <span class="p_context"> void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	else
 		mm-&gt;highest_vm_end = vm_end_gap(vma);
 
<span class="p_add">+	seqcount_init(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+</span>
 	/*
 	 * vma-&gt;vm_prev wasn&#39;t known when we followed the rbtree to find the
 	 * correct insertion point for that vma. As a result, we could not
<span class="p_chunk">@@ -799,6 +801,11 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 		}
 	}
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+	if (next &amp;&amp; next != vma)</span>
<span class="p_add">+		write_seqcount_begin_nested(&amp;next-&gt;vm_sequence,</span>
<span class="p_add">+					    SINGLE_DEPTH_NESTING);</span>
<span class="p_add">+</span>
 	anon_vma = vma-&gt;anon_vma;
 	if (!anon_vma &amp;&amp; adjust_next)
 		anon_vma = next-&gt;anon_vma;
<span class="p_chunk">@@ -903,6 +910,7 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 		mm-&gt;map_count--;
 		mpol_put(vma_policy(next));
 		kmem_cache_free(vm_area_cachep, next);
<span class="p_add">+		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
 		/*
 		 * In mprotect&#39;s case 6 (see comments on vma_merge),
 		 * we must remove another next too. It would clutter
<span class="p_chunk">@@ -932,11 +940,14 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 		if (remove_next == 2) {
 			remove_next = 1;
 			end = next-&gt;vm_end;
<span class="p_add">+			write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 			goto again;
<span class="p_del">-		}</span>
<span class="p_del">-		else if (next)</span>
<span class="p_add">+		} else if (next) {</span>
<span class="p_add">+			if (next != vma)</span>
<span class="p_add">+				write_seqcount_begin_nested(&amp;next-&gt;vm_sequence,</span>
<span class="p_add">+							    SINGLE_DEPTH_NESTING);</span>
 			vma_gap_update(next);
<span class="p_del">-		else {</span>
<span class="p_add">+		} else {</span>
 			/*
 			 * If remove_next == 2 we obviously can&#39;t
 			 * reach this path.
<span class="p_chunk">@@ -962,6 +973,10 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 	if (insert &amp;&amp; file)
 		uprobe_mmap(insert);
 
<span class="p_add">+	if (next &amp;&amp; next != vma)</span>
<span class="p_add">+		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+</span>
 	validate_mm(mm);
 
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



