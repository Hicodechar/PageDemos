
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v12,3/3] mm, x86, powerpc: display pkey in smaps only if arch supports pkeys - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v12,3/3] mm, x86, powerpc: display pkey in smaps only if arch supports pkeys</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2448">Ram Pai</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 21, 2018, 11:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1519257138-23797-4-git-send-email-linuxram@us.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10234399/mbox/"
   >mbox</a>
|
   <a href="/patch/10234399/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10234399/">/patch/10234399/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D330B6019C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Feb 2018 23:53:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CB6A2285C6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Feb 2018 23:53:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BFD7F285FD; Wed, 21 Feb 2018 23:53:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C4DF4285C6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Feb 2018 23:53:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751500AbeBUXxV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 21 Feb 2018 18:53:21 -0500
Received: from mail-qk0-f194.google.com ([209.85.220.194]:44167 &quot;EHLO
	mail-qk0-f194.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751453AbeBUXxM (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 21 Feb 2018 18:53:12 -0500
Received: by mail-qk0-f194.google.com with SMTP id v124so4321640qkh.11;
	Wed, 21 Feb 2018 15:53:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=sra53Tt7ExbQjIXtI+GCBSRazE+x5zx5SXrD7qrQQ44=;
	b=I3KciERbOm9xyPijecwnyWZ1iM6C1cfzq7s2rBtSVlpLcYDIKoHizzV4vKWhkMW10J
	UeNCQ1JK7bu9eNNWfsNig+4ya/hRSkdzWZSXQQW5vU9d1UPtYc6tiTmdhJoq5fnWNuVL
	hI0yhGSZSoO/ZPKKEPoVAuqsBrycvo+rKDjuBploBxCdNNNe3GctuIaEZ0Dcr2qpliw/
	Pxjn+JcYKtrEKO1l3GlOxGXRk4TjASyIf1HZ0AnQKe77OuinQl3beqk8B3Ybua5I6UI1
	q+hGrR3uCo7D4nwDR6cQ6FuCxZvST3jJCbzGjM1Rs20oxvp2Npx28p0iSVuthfG+s2OB
	G0bA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=sra53Tt7ExbQjIXtI+GCBSRazE+x5zx5SXrD7qrQQ44=;
	b=cx64iq0uZbABkRPXLoWmI0hpo1+CSx155cf04I5d4JU9ibz1EHZkxgfcFfsRnzhKcD
	PctH230SxiIB2wPGHro91hXeThDk5hln2zmcSZxzySBJDVF4NbN0SK5aIpgtDKuK14yF
	oxJDgt6w+gNLmAJN/IoExnS0MDFEfXXKL81qykafYcAC6jBFX4EZa8mxeQinnK36xqGk
	dMHIGByB3KVlsvlbFoz/Jv6OE9zPz4gxgH9BxYNYt9pJILPHOzTiFUyG+CK7x9HnkbDd
	ItTnndptYobbewxmkxVZ48SyksKdmaR/Zx+49NKGa+dW4f+T0sgP8oo6emi6qN+2t+Kb
	wLUg==
X-Gm-Message-State: APf1xPDcNX8Ss08NWxI5eZ3s47zLF7DDbUdmFLcLpq+PzG+DDVoc4VhU
	GmQ+51KPDfiR2QWq/WU3TOs=
X-Google-Smtp-Source: AH8x227K39il3lFBQMPK0q1b09Z2tjnO+ZSqyESsFC1I4BvRKo2Pw/JWaE3W2PGi8m/4vA6lHnTvmQ==
X-Received: by 10.55.19.232 with SMTP id 101mr8005831qkt.198.1519257191860; 
	Wed, 21 Feb 2018 15:53:11 -0800 (PST)
Received: from localhost.localdomain (50-39-100-161.bvtn.or.frontiernet.net.
	[50.39.100.161]) by smtp.gmail.com with ESMTPSA id
	b25sm3804881qte.40.2018.02.21.15.53.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 21 Feb 2018 15:53:11 -0800 (PST)
From: Ram Pai &lt;linuxram@us.ibm.com&gt;
To: mpe@ellerman.id.au, mingo@redhat.com, akpm@linux-foundation.org
Cc: linuxppc-dev@lists.ozlabs.org, linux-mm@kvack.org, x86@kernel.org,
	linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
	dave.hansen@intel.com, benh@kernel.crashing.org, paulus@samba.org,
	khandual@linux.vnet.ibm.com, aneesh.kumar@linux.vnet.ibm.com,
	bsingharora@gmail.com, hbabu@us.ibm.com, mhocko@kernel.org,
	bauerman@linux.vnet.ibm.com, ebiederm@xmission.com,
	linuxram@us.ibm.com, corbet@lwn.net, arnd@arndb.de,
	fweimer@redhat.com, msuchanek@suse.com
Subject: [PATCH v12 3/3] mm, x86,
	powerpc: display pkey in smaps only if arch supports pkeys
Date: Wed, 21 Feb 2018 15:52:18 -0800
Message-Id: &lt;1519257138-23797-4-git-send-email-linuxram@us.ibm.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1519257138-23797-1-git-send-email-linuxram@us.ibm.com&gt;
References: &lt;1519257138-23797-1-git-send-email-linuxram@us.ibm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - Feb. 21, 2018, 11:52 p.m.</div>
<pre class="content">
Currently the  architecture  specific code is expected to
display  the  protection  keys  in  smap  for a given vma.
This can lead to redundant code and possibly to divergent
formats in which the key gets displayed.

This  patch  changes  the implementation. It displays the
pkey only if the architecture support pkeys, i.e
arch_pkeys_enabled() returns true.  This patch
provides x86 implementation for arch_pkeys_enabled().

x86 arch_show_smap() function is not needed anymore.
Deleting it.

cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
cc: Michael Ellermen &lt;mpe@ellerman.id.au&gt;
cc: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;
cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
<span class="signed-off-by">Signed-off-by: Thiago Jung Bauermann &lt;bauerman@linux.vnet.ibm.com&gt;</span>
(fixed compilation errors for x86 configs)
<span class="acked-by">Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
---
 arch/powerpc/include/asm/mmu_context.h |    5 -----
 arch/x86/include/asm/mmu_context.h     |    5 -----
 arch/x86/include/asm/pkeys.h           |    1 +
 arch/x86/kernel/fpu/xstate.c           |    5 +++++
 arch/x86/kernel/setup.c                |    8 --------
 fs/proc/task_mmu.c                     |   10 +++++-----
 include/linux/pkeys.h                  |    7 ++++++-
 7 files changed, 17 insertions(+), 24 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Feb. 26, 2018, 9:16 p.m.</div>
<pre class="content">
On 02/21/2018 03:52 PM, Ram Pai wrote:
<span class="quote">&gt; Currently the  architecture  specific code is expected to</span>
<span class="quote">&gt; display  the  protection  keys  in  smap  for a given vma.</span>
<span class="quote">&gt; This can lead to redundant code and possibly to divergent</span>
<span class="quote">&gt; formats in which the key gets displayed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This  patch  changes  the implementation. It displays the</span>
<span class="quote">&gt; pkey only if the architecture support pkeys, i.e</span>
<span class="quote">&gt; arch_pkeys_enabled() returns true.  This patch</span>
<span class="quote">&gt; provides x86 implementation for arch_pkeys_enabled().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; x86 arch_show_smap() function is not needed anymore.</span>
<span class="quote">&gt; Deleting it.</span>

This looks fine to me.  Thanks for doing these, Ram.
<span class="reviewed-by">
Reviewed-by: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - March 8, 2018, 6:25 p.m.</div>
<pre class="content">
Dave,

Is there a reason why the default key; key-0, is not allowed to be
explicitly associated with pages using pkey_mprotect()?

I see valid usecases where an application may initially want to
associate an address-range with some key and latter choose to revert to
its initial state, by associating key-0.  However our implementation
(both x86 and power) do not allow pkey_mprotect() to be called with
key-0.

I do not see a reason why it must be blocked.

Thoughts?
RP
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - March 8, 2018, 7:30 p.m.</div>
<pre class="content">
On 03/08/2018 10:25 AM, Ram Pai wrote:
<span class="quote">&gt; Is there a reason why the default key; key-0, is not allowed to be</span>
<span class="quote">&gt; explicitly associated with pages using pkey_mprotect()?</span>

No, it&#39;s a bug if it is not permitted.  I have a vague recollection of
knowing about this and having a patch.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu_context.h b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">index 051b3d6..566b3c2 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -203,11 +203,6 @@</span> <span class="p_context"> static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
 #define thread_pkey_regs_restore(new_thread, old_thread)
 #define thread_pkey_regs_init(thread)
 
<span class="p_del">-static inline int vma_pkey(struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline u64 pte_to_hpte_pkey_bits(u64 pteflags)
 {
 	return 0x0UL;
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index c931b88..134f3a0 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -294,11 +294,6 @@</span> <span class="p_context"> static inline int vma_pkey(struct vm_area_struct *vma)</span>
 
 	return (vma-&gt;vm_flags &amp; vma_pkey_mask) &gt;&gt; VM_PKEY_SHIFT;
 }
<span class="p_del">-#else</span>
<span class="p_del">-static inline int vma_pkey(struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
 #endif
 
 /*
<span class="p_header">diff --git a/arch/x86/include/asm/pkeys.h b/arch/x86/include/asm/pkeys.h</span>
<span class="p_header">index a0ba1ff..f6c287b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pkeys.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pkeys.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 
 extern int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
 		unsigned long init_val);
<span class="p_add">+extern bool arch_pkeys_enabled(void);</span>
 
 /*
  * Try to dedicate one of the protection keys to be used as an
<span class="p_header">diff --git a/arch/x86/kernel/fpu/xstate.c b/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_header">index 87a57b7..4f566e9 100644</span>
<span class="p_header">--- a/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_header">+++ b/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_chunk">@@ -945,6 +945,11 @@</span> <span class="p_context"> int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
 
 	return 0;
 }
<span class="p_add">+</span>
<span class="p_add">+bool arch_pkeys_enabled(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return boot_cpu_has(X86_FEATURE_OSPKE);</span>
<span class="p_add">+}</span>
 #endif /* ! CONFIG_ARCH_HAS_PKEYS */
 
 /*
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 1ae67e9..d0539e3 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -1314,11 +1314,3 @@</span> <span class="p_context"> static int __init register_kernel_offset_dumper(void)</span>
 	return 0;
 }
 __initcall(register_kernel_offset_dumper);
<span class="p_del">-</span>
<span class="p_del">-void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="p_del">-}</span>
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 6d83bb7..70aa912 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -18,10 +18,12 @@</span> <span class="p_context"></span>
 #include &lt;linux/page_idle.h&gt;
 #include &lt;linux/shmem_fs.h&gt;
 #include &lt;linux/uaccess.h&gt;
<span class="p_add">+#include &lt;linux/pkeys.h&gt;</span>
 
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/tlb.h&gt;
 #include &lt;asm/tlbflush.h&gt;
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &quot;internal.h&quot;
 
 void task_mem(struct seq_file *m, struct mm_struct *mm)
<span class="p_chunk">@@ -733,10 +735,6 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
 }
 #endif /* HUGETLB_PAGE */
 
<span class="p_del">-void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct proc_maps_private *priv = m-&gt;private;
<span class="p_chunk">@@ -856,9 +854,11 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));
 
 	if (!rollup_mode) {
<span class="p_del">-		arch_show_smap(m, vma);</span>
<span class="p_add">+		if (arch_pkeys_enabled())</span>
<span class="p_add">+			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
 		show_smap_vma_flags(m, vma);
 	}
<span class="p_add">+</span>
 	m_cache_vma(m, vma);
 	return ret;
 }
<span class="p_header">diff --git a/include/linux/pkeys.h b/include/linux/pkeys.h</span>
<span class="p_header">index 0794ca7..49dff15 100644</span>
<span class="p_header">--- a/include/linux/pkeys.h</span>
<span class="p_header">+++ b/include/linux/pkeys.h</span>
<span class="p_chunk">@@ -3,7 +3,6 @@</span> <span class="p_context"></span>
 #define _LINUX_PKEYS_H
 
 #include &lt;linux/mm_types.h&gt;
<span class="p_del">-#include &lt;asm/mmu_context.h&gt;</span>
 
 #ifdef CONFIG_ARCH_HAS_PKEYS
 #include &lt;asm/pkeys.h&gt;
<span class="p_chunk">@@ -13,6 +12,7 @@</span> <span class="p_context"></span>
 #define arch_override_mprotect_pkey(vma, prot, pkey) (0)
 #define PKEY_DEDICATED_EXECUTE_ONLY 0
 #define ARCH_VM_PKEY_FLAGS 0
<span class="p_add">+#define vma_pkey(vma) 0</span>
 
 static inline bool mm_pkey_is_allocated(struct mm_struct *mm, int pkey)
 {
<span class="p_chunk">@@ -35,6 +35,11 @@</span> <span class="p_context"> static inline int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
 	return 0;
 }
 
<span class="p_add">+static inline bool arch_pkeys_enabled(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void copy_init_pkru_to_fpregs(void)
 {
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



