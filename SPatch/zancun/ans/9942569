
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,10/11] mm: add a user_virt_to_phys symbol - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,10/11] mm: add a user_virt_to_phys symbol</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 7, 2017, 5:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170907173609.22696-11-tycho@docker.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9942569/mbox/"
   >mbox</a>
|
   <a href="/patch/9942569/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9942569/">/patch/9942569/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0B055600CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:37:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EFA01285B5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:37:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E3AB3285C2; Thu,  7 Sep 2017 17:37:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3F9A0285B5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:37:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755710AbdIGRhl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 7 Sep 2017 13:37:41 -0400
Received: from mail-io0-f173.google.com ([209.85.223.173]:38882 &quot;EHLO
	mail-io0-f173.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755646AbdIGRhQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 7 Sep 2017 13:37:16 -0400
Received: by mail-io0-f173.google.com with SMTP id m98so16875ioo.5
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 07 Sep 2017 10:37:15 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=docker.com; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=yWLMvWiIkQBXavqJwTy2g4oINQIE3t0ookUGU9hHwZo=;
	b=bZahIN4wvazBsgPjJFaTIVgg6WqUvhvmq4ywOxFrJ8M3RQAahXSSm7pZIrgSRve4Jt
	2++viaJ8fSuXC3hk/HCf1lpI2r5Rjaxx3APQ3uaeHMe4UxiZdqQyoWoWh4cQc4Ue4zUy
	P7Eyg7mRoFDFbDk1+Fr1ZKnBzCVkvqV4q+fZE=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=yWLMvWiIkQBXavqJwTy2g4oINQIE3t0ookUGU9hHwZo=;
	b=acKYHATpGCJMjASZ3KcPiAjEHqwLqXRTEYtEbqjvAL1TNW/8qRrRZnf5tbCmdFYUHC
	lNu0ZOQHCTDoVrt9OwwmWbT/u9hg/STH0z3UT2qjNmzTe/uVsQPZNzXNCzev7FtAc8CB
	F13+temAU9JJhEQkKCrOEPsSvnnENR1mYrEu3xKBlXSDTJcqJB+QF7WE1S4+DIX1BmB8
	t+BCMdu1MZEuRxnMZpgd0fpbo3kODZRKhG+78CxF8oNMNCNhEUy7aOvMjUlUOBfgMx7G
	zYId/pkPILFcZTFaUFVhJ6r8nMjVkk7PQ14lkmpzHGQ1hTM00MCpqF+QRG1h0avpuIFg
	5svg==
X-Gm-Message-State: AHPjjUhZ2HqvUkSpi9SWjWOqtMw6mwDwe6eu6yxjVPB8h5aBgT511PZq
	mxtgS+TwDNEyTD+2RN/AkQ==
X-Google-Smtp-Source: ADKCNb4Al3+ec69tCfL8dYXUht+PmbbGu2pr6LgoKWYY7bBdNaGNuRRfvJP0/o6Cfxo73x1vA9Oz+g==
X-Received: by 10.107.155.16 with SMTP id d16mr111662ioe.220.1504805834907; 
	Thu, 07 Sep 2017 10:37:14 -0700 (PDT)
Received: from localhost.localdomain ([8.24.24.129])
	by smtp.gmail.com with ESMTPSA id
	t127sm94404iod.26.2017.09.07.10.37.13
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 07 Sep 2017 10:37:14 -0700 (PDT)
From: Tycho Andersen &lt;tycho@docker.com&gt;
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, kernel-hardening@lists.openwall.com,
	Marco Benatto &lt;marco.antonio.780@gmail.com&gt;,
	Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;,
	Tycho Andersen &lt;tycho@docker.com&gt;,
	linux-arm-kernel@lists.infradead.org, x86@kernel.org
Subject: [PATCH v6 10/11] mm: add a user_virt_to_phys symbol
Date: Thu,  7 Sep 2017 11:36:08 -0600
Message-Id: &lt;20170907173609.22696-11-tycho@docker.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170907173609.22696-1-tycho@docker.com&gt;
References: &lt;20170907173609.22696-1-tycho@docker.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Sept. 7, 2017, 5:36 p.m.</div>
<pre class="content">
We need someting like this for testing XPFO. Since it&#39;s architecture
specific, putting it in the test code is slightly awkward, so let&#39;s make it
an arch-specific symbol and export it for use in LKDTM.

v6: * add a definition of user_virt_to_phys in the !CONFIG_XPFO case

CC: linux-arm-kernel@lists.infradead.org
CC: x86@kernel.org
<span class="signed-off-by">Signed-off-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="tested-by">Tested-by: Marco Benatto &lt;marco.antonio.780@gmail.com&gt;</span>
---
 arch/arm64/mm/xpfo.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++
 arch/x86/mm/xpfo.c   | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/xpfo.h |  5 +++++
 3 files changed, 113 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - Sept. 8, 2017, 7:55 a.m.</div>
<pre class="content">
On Thu, Sep 07, 2017 at 11:36:08AM -0600, Tycho Andersen wrote:
<span class="quote">&gt; We need someting like this for testing XPFO. Since it&#39;s architecture</span>
<span class="quote">&gt; specific, putting it in the test code is slightly awkward, so let&#39;s make it</span>
<span class="quote">&gt; an arch-specific symbol and export it for use in LKDTM.</span>

We really should not add an export for this.

I think you&#39;ll want to just open code it in your test module.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=38541">Kees Cook</a> - Sept. 8, 2017, 3:44 p.m.</div>
<pre class="content">
On Fri, Sep 8, 2017 at 12:55 AM, Christoph Hellwig &lt;hch@infradead.org&gt; wrote:
<span class="quote">&gt; On Thu, Sep 07, 2017 at 11:36:08AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt;&gt; We need someting like this for testing XPFO. Since it&#39;s architecture</span>
<span class="quote">&gt;&gt; specific, putting it in the test code is slightly awkward, so let&#39;s make it</span>
<span class="quote">&gt;&gt; an arch-specific symbol and export it for use in LKDTM.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We really should not add an export for this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think you&#39;ll want to just open code it in your test module.</span>

Isn&#39;t that going to be fragile? Why not an export?

-Kees
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - Sept. 11, 2017, 7:36 a.m.</div>
<pre class="content">
On Fri, Sep 08, 2017 at 08:44:22AM -0700, Kees Cook wrote:
<span class="quote">&gt; On Fri, Sep 8, 2017 at 12:55 AM, Christoph Hellwig &lt;hch@infradead.org&gt; wrote:</span>
<span class="quote">&gt; &gt; On Thu, Sep 07, 2017 at 11:36:08AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt;&gt; We need someting like this for testing XPFO. Since it&#39;s architecture</span>
<span class="quote">&gt; &gt;&gt; specific, putting it in the test code is slightly awkward, so let&#39;s make it</span>
<span class="quote">&gt; &gt;&gt; an arch-specific symbol and export it for use in LKDTM.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; We really should not add an export for this.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I think you&#39;ll want to just open code it in your test module.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Isn&#39;t that going to be fragile? Why not an export?</span>

It is a little fragile, but it is functionality not needed at all by
the kernel, so we should not add it to the kernel image and/or export
it.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Sept. 14, 2017, 6:34 p.m.</div>
<pre class="content">
On Thu, Sep 07, 2017 at 11:36:08AM -0600, Tycho Andersen wrote:
<span class="quote">&gt; We need someting like this for testing XPFO. Since it&#39;s architecture</span>
<span class="quote">&gt; specific, putting it in the test code is slightly awkward, so let&#39;s make it</span>
<span class="quote">&gt; an arch-specific symbol and export it for use in LKDTM.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v6: * add a definition of user_virt_to_phys in the !CONFIG_XPFO case</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; CC: linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; CC: x86@kernel.org</span>
<span class="quote">&gt; Signed-off-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="quote">&gt; Tested-by: Marco Benatto &lt;marco.antonio.780@gmail.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/mm/xpfo.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  arch/x86/mm/xpfo.c   | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  include/linux/xpfo.h |  5 +++++</span>
<span class="quote">&gt;  3 files changed, 113 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/xpfo.c b/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; index 342a9ccb93c1..94a667d94e15 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; @@ -74,3 +74,54 @@ void xpfo_dma_map_unmap_area(bool map, const void *addr, size_t size,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	xpfo_temp_unmap(addr, size, mapping, sizeof(mapping[0]) * num_pages);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Convert a user space virtual address to a physical address.</span>
<span class="quote">&gt; + * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="quote">&gt; + * arch/x86/mm/pageattr.c</span>
<span class="quote">&gt; + */</span>

When can this be called? What prevents concurrent modification of the user page
tables?

i.e. must mmap_sem be held?
<span class="quote">
&gt; +phys_addr_t user_virt_to_phys(unsigned long addr)</span>

Does this really need to be architecture specific?

Core mm code manages to walk user page tables just fine...
<span class="quote">
&gt; +{</span>
<span class="quote">&gt; +	phys_addr_t phys_addr;</span>
<span class="quote">&gt; +	unsigned long offset;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; +	p4d_t *p4d;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; +	pte_t *pte;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="quote">&gt; +	if (pgd_none(*pgd))</span>
<span class="quote">&gt; +		return 0;</span>

Can we please separate the address and return value? e.g. pass the PA by
reference and return an error code.

AFAIK, zero is a valid PA, and even if the tables exist, they might point there
in the presence of an error.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	p4d = p4d_offset(pgd, addr);</span>
<span class="quote">&gt; +	if (p4d_none(*p4d))</span>
<span class="quote">&gt; +		return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pud = pud_offset(p4d, addr);</span>
<span class="quote">&gt; +	if (pud_none(*pud))</span>
<span class="quote">&gt; +		return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (pud_sect(*pud) || !pud_present(*pud)) {</span>
<span class="quote">&gt; +		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>

Was there some problem with:

	phys_addr = pmd_page_paddr(*pud);

... and similar for the other levels?

... I&#39;d rather introduce new helpers than more open-coded calculations.

Thanks,
Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Sept. 18, 2017, 8:56 p.m.</div>
<pre class="content">
Hi Mark,

On Thu, Sep 14, 2017 at 07:34:02PM +0100, Mark Rutland wrote:
<span class="quote">&gt; On Thu, Sep 07, 2017 at 11:36:08AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; We need someting like this for testing XPFO. Since it&#39;s architecture</span>
<span class="quote">&gt; &gt; specific, putting it in the test code is slightly awkward, so let&#39;s make it</span>
<span class="quote">&gt; &gt; an arch-specific symbol and export it for use in LKDTM.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; v6: * add a definition of user_virt_to_phys in the !CONFIG_XPFO case</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; CC: linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; &gt; CC: x86@kernel.org</span>
<span class="quote">&gt; &gt; Signed-off-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="quote">&gt; &gt; Tested-by: Marco Benatto &lt;marco.antonio.780@gmail.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/arm64/mm/xpfo.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  arch/x86/mm/xpfo.c   | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  include/linux/xpfo.h |  5 +++++</span>
<span class="quote">&gt; &gt;  3 files changed, 113 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/arm64/mm/xpfo.c b/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; &gt; index 342a9ccb93c1..94a667d94e15 100644</span>
<span class="quote">&gt; &gt; --- a/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; &gt; +++ b/arch/arm64/mm/xpfo.c</span>
<span class="quote">&gt; &gt; @@ -74,3 +74,54 @@ void xpfo_dma_map_unmap_area(bool map, const void *addr, size_t size,</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	xpfo_temp_unmap(addr, size, mapping, sizeof(mapping[0]) * num_pages);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +/* Convert a user space virtual address to a physical address.</span>
<span class="quote">&gt; &gt; + * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="quote">&gt; &gt; + * arch/x86/mm/pageattr.c</span>
<span class="quote">&gt; &gt; + */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When can this be called? What prevents concurrent modification of the user page</span>
<span class="quote">&gt; tables?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; i.e. must mmap_sem be held?</span>

Yes, it should be. Since we&#39;re moving this back into the lkdtm test
code I think it&#39;s less important, since nothing should be modifying
the tables while the thread is doing the lookup, but I&#39;ll add it in
the next version.
<span class="quote">
&gt; &gt; +phys_addr_t user_virt_to_phys(unsigned long addr)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Does this really need to be architecture specific?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Core mm code manages to walk user page tables just fine...</span>

I think so since we don&#39;t support section mappings right now, so
p*d_sect will always be false.
<span class="quote">
&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	phys_addr_t phys_addr;</span>
<span class="quote">&gt; &gt; +	unsigned long offset;</span>
<span class="quote">&gt; &gt; +	pgd_t *pgd;</span>
<span class="quote">&gt; &gt; +	p4d_t *p4d;</span>
<span class="quote">&gt; &gt; +	pud_t *pud;</span>
<span class="quote">&gt; &gt; +	pmd_t *pmd;</span>
<span class="quote">&gt; &gt; +	pte_t *pte;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="quote">&gt; &gt; +	if (pgd_none(*pgd))</span>
<span class="quote">&gt; &gt; +		return 0;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can we please separate the address and return value? e.g. pass the PA by</span>
<span class="quote">&gt; reference and return an error code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; AFAIK, zero is a valid PA, and even if the tables exist, they might point there</span>
<span class="quote">&gt; in the presence of an error.</span>

Sure, I&#39;ll rearrange this.
<span class="quote">
&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	p4d = p4d_offset(pgd, addr);</span>
<span class="quote">&gt; &gt; +	if (p4d_none(*p4d))</span>
<span class="quote">&gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	pud = pud_offset(p4d, addr);</span>
<span class="quote">&gt; &gt; +	if (pud_none(*pud))</span>
<span class="quote">&gt; &gt; +		return 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	if (pud_sect(*pud) || !pud_present(*pud)) {</span>
<span class="quote">&gt; &gt; +		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Was there some problem with:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	phys_addr = pmd_page_paddr(*pud);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... and similar for the other levels?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... I&#39;d rather introduce new helpers than more open-coded calculations.</span>

I wasn&#39;t aware of these; we could define a similar set of functions
for x86 and then make it not arch-specific.

I wonder if we could also use follow_page_pte(), since we know that
the page is always present (given that it&#39;s been allocated).
Unfortunately follow_page_pte() is not exported.

Tycho
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/xpfo.c b/arch/arm64/mm/xpfo.c</span>
<span class="p_header">index 342a9ccb93c1..94a667d94e15 100644</span>
<span class="p_header">--- a/arch/arm64/mm/xpfo.c</span>
<span class="p_header">+++ b/arch/arm64/mm/xpfo.c</span>
<span class="p_chunk">@@ -74,3 +74,54 @@</span> <span class="p_context"> void xpfo_dma_map_unmap_area(bool map, const void *addr, size_t size,</span>
 
 	xpfo_temp_unmap(addr, size, mapping, sizeof(mapping[0]) * num_pages);
 }
<span class="p_add">+</span>
<span class="p_add">+/* Convert a user space virtual address to a physical address.</span>
<span class="p_add">+ * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="p_add">+ * arch/x86/mm/pageattr.c</span>
<span class="p_add">+ */</span>
<span class="p_add">+phys_addr_t user_virt_to_phys(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t phys_addr;</span>
<span class="p_add">+	unsigned long offset;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_sect(*pud) || !pud_present(*pud)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PUD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_sect(*pmd) || !pmd_present(*pmd)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pmd_pfn(*pmd) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PMD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pte =  pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	phys_addr = (phys_addr_t)pte_pfn(*pte) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	offset = addr &amp; ~PAGE_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return (phys_addr_t)(phys_addr | offset);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(user_virt_to_phys);</span>
<span class="p_header">diff --git a/arch/x86/mm/xpfo.c b/arch/x86/mm/xpfo.c</span>
<span class="p_header">index 6794d6724ab5..d24cf2c600e8 100644</span>
<span class="p_header">--- a/arch/x86/mm/xpfo.c</span>
<span class="p_header">+++ b/arch/x86/mm/xpfo.c</span>
<span class="p_chunk">@@ -112,3 +112,60 @@</span> <span class="p_context"> inline void xpfo_flush_kernel_tlb(struct page *page, int order)</span>
 
 	flush_tlb_kernel_range(kaddr, kaddr + (1 &lt;&lt; order) * size);
 }
<span class="p_add">+</span>
<span class="p_add">+/* Convert a user space virtual address to a physical address.</span>
<span class="p_add">+ * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="p_add">+ * arch/x86/mm/pageattr.c</span>
<span class="p_add">+ */</span>
<span class="p_add">+phys_addr_t user_virt_to_phys(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t phys_addr;</span>
<span class="p_add">+	unsigned long offset;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (p4d_large(*p4d) || !p4d_present(*p4d)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)p4d_pfn(*p4d) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~P4D_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_large(*pud) || !pud_present(*pud)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PUD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_large(*pmd) || !pmd_present(*pmd)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pmd_pfn(*pmd) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PMD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pte =  pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	phys_addr = (phys_addr_t)pte_pfn(*pte) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	offset = addr &amp; ~PAGE_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return (phys_addr_t)(phys_addr | offset);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(user_virt_to_phys);</span>
<span class="p_header">diff --git a/include/linux/xpfo.h b/include/linux/xpfo.h</span>
<span class="p_header">index 1693af1a0293..be72da5fba26 100644</span>
<span class="p_header">--- a/include/linux/xpfo.h</span>
<span class="p_header">+++ b/include/linux/xpfo.h</span>
<span class="p_chunk">@@ -19,6 +19,7 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_XPFO
 
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/types.h&gt;</span>
 
 extern struct page_ext_operations page_xpfo_ops;
 
<span class="p_chunk">@@ -45,6 +46,8 @@</span> <span class="p_context"> void xpfo_temp_unmap(const void *addr, size_t size, void **mapping,</span>
 
 bool xpfo_enabled(void);
 
<span class="p_add">+phys_addr_t user_virt_to_phys(unsigned long addr);</span>
<span class="p_add">+</span>
 #else /* !CONFIG_XPFO */
 
 static inline void xpfo_kmap(void *kaddr, struct page *page) { }
<span class="p_chunk">@@ -69,6 +72,8 @@</span> <span class="p_context"> static inline void xpfo_temp_unmap(const void *addr, size_t size,</span>
 
 static inline bool xpfo_enabled(void) { return false; }
 
<span class="p_add">+static inline phys_addr_t user_virt_to_phys(unsigned long addr) { return 0; }</span>
<span class="p_add">+</span>
 #endif /* CONFIG_XPFO */
 
 #endif /* _LINUX_XPFO_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



