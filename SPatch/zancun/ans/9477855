
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86: mpx: move bd_addr to mm_context_t - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86: mpx: move bd_addr to mm_context_t</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2016, 12:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1481892055-24596-1-git-send-email-mark.rutland@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9477855/mbox/"
   >mbox</a>
|
   <a href="/patch/9477855/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9477855/">/patch/9477855/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7E225601C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 12:42:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6F57B28810
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 12:42:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6289928827; Fri, 16 Dec 2016 12:42:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BBC7528810
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 12:42:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759916AbcLPMmD (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Dec 2016 07:42:03 -0500
Received: from foss.arm.com ([217.140.101.70]:52602 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1755331AbcLPMly (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Dec 2016 07:41:54 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 36F38152D;
	Fri, 16 Dec 2016 04:41:54 -0800 (PST)
Received: from leverpostej.cambridge.arm.com
	(usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id
	0FEB43F445; Fri, 16 Dec 2016 04:41:52 -0800 (PST)
From: Mark Rutland &lt;mark.rutland@arm.com&gt;
To: linux-kernel@vger.kernel.org
Cc: Mark Rutland &lt;mark.rutland@arm.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;
Subject: [PATCH] x86: mpx: move bd_addr to mm_context_t
Date: Fri, 16 Dec 2016 12:40:55 +0000
Message-Id: &lt;1481892055-24596-1-git-send-email-mark.rutland@arm.com&gt;
X-Mailer: git-send-email 1.9.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Dec. 16, 2016, 12:40 p.m.</div>
<pre class="content">
Currently bd_addr lives in mm_struct, which is otherwise architecture
independent. Architecture-specific data is supposed to live within
mm_context_t (itself contained in mm_struct).

Other x86-specific context like the pkey accounting data lives in
mm_context_t, and there&#39;s no readon the MPX data can&#39;t also live there.
So as to keep the arch-specific data togather, and to set a good example
for others, this patch moves bd_addr into x86&#39;s mm_context_t.
<span class="signed-off-by">
Signed-off-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
---
 arch/x86/include/asm/mmu.h |  4 ++++
 arch/x86/include/asm/mpx.h |  4 ++--
 arch/x86/mm/mpx.c          | 10 +++++-----
 include/linux/mm_types.h   |  4 ----
 4 files changed, 11 insertions(+), 11 deletions(-)

I spotted this while trying to find a place to but some arm64-specific data.
I now know to use mm_context_t, but was almost lead astray by the MPX example.

I&#39;ve given this a build-test (with CONFIG_X86_INTEL_MPX selected), and all
seems happy.

Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Dec. 16, 2016, 3:19 p.m.</div>
<pre class="content">
On 12/16/2016 04:40 AM, Mark Rutland wrote:
<span class="quote">&gt; Other x86-specific context like the pkey accounting data lives in</span>
<span class="quote">&gt; mm_context_t, and there&#39;s no readon the MPX data can&#39;t also live there.</span>
<span class="quote">&gt; So as to keep the arch-specific data togather, and to set a good example</span>
<span class="quote">&gt; for others, this patch moves bd_addr into x86&#39;s mm_context_t.</span>

Makes total sense to me.
<span class="acked-by">
Acked-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mmu.h b/arch/x86/include/asm/mmu.h</span>
<span class="p_header">index 72198c6..f9813b6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu.h</span>
<span class="p_chunk">@@ -31,6 +31,10 @@</span> <span class="p_context"></span>
 	u16 pkey_allocation_map;
 	s16 execute_only_pkey;
 #endif
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MPX</span>
<span class="p_add">+	/* address of the bounds directory */</span>
<span class="p_add">+	void __user *bd_addr;</span>
<span class="p_add">+#endif</span>
 } mm_context_t;
 
 #ifdef CONFIG_SMP
<span class="p_header">diff --git a/arch/x86/include/asm/mpx.h b/arch/x86/include/asm/mpx.h</span>
<span class="p_header">index 7a35495..0b416d4 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mpx.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mpx.h</span>
<span class="p_chunk">@@ -59,7 +59,7 @@</span> <span class="p_context"></span>
 int mpx_handle_bd_fault(void);
 static inline int kernel_managing_mpx_tables(struct mm_struct *mm)
 {
<span class="p_del">-	return (mm-&gt;bd_addr != MPX_INVALID_BOUNDS_DIR);</span>
<span class="p_add">+	return (mm-&gt;context.bd_addr != MPX_INVALID_BOUNDS_DIR);</span>
 }
 static inline void mpx_mm_init(struct mm_struct *mm)
 {
<span class="p_chunk">@@ -67,7 +67,7 @@</span> <span class="p_context"> static inline void mpx_mm_init(struct mm_struct *mm)</span>
 	 * NULL is theoretically a valid place to put the bounds
 	 * directory, so point this at an invalid address.
 	 */
<span class="p_del">-	mm-&gt;bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
<span class="p_add">+	mm-&gt;context.bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
 }
 void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,
 		      unsigned long start, unsigned long end);
<span class="p_header">diff --git a/arch/x86/mm/mpx.c b/arch/x86/mm/mpx.c</span>
<span class="p_header">index e4f8009..324e571 100644</span>
<span class="p_header">--- a/arch/x86/mm/mpx.c</span>
<span class="p_header">+++ b/arch/x86/mm/mpx.c</span>
<span class="p_chunk">@@ -350,12 +350,12 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	 * The copy_xregs_to_kernel() beneath get_xsave_field_ptr() is
 	 * expected to be relatively expensive. Storing the bounds
 	 * directory here means that we do not have to do xsave in the
<span class="p_del">-	 * unmap path; we can just use mm-&gt;bd_addr instead.</span>
<span class="p_add">+	 * unmap path; we can just use mm-&gt;context.bd_addr instead.</span>
 	 */
 	bd_base = mpx_get_bounds_dir();
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_del">-	mm-&gt;bd_addr = bd_base;</span>
<span class="p_del">-	if (mm-&gt;bd_addr == MPX_INVALID_BOUNDS_DIR)</span>
<span class="p_add">+	mm-&gt;context.bd_addr = bd_base;</span>
<span class="p_add">+	if (mm-&gt;context.bd_addr == MPX_INVALID_BOUNDS_DIR)</span>
 		ret = -ENXIO;
 
 	up_write(&amp;mm-&gt;mmap_sem);
<span class="p_chunk">@@ -370,7 +370,7 @@</span> <span class="p_context"> int mpx_disable_management(void)</span>
 		return -ENXIO;
 
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_del">-	mm-&gt;bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
<span class="p_add">+	mm-&gt;context.bd_addr = MPX_INVALID_BOUNDS_DIR;</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 	return 0;
 }
<span class="p_chunk">@@ -947,7 +947,7 @@</span> <span class="p_context"> static int try_unmap_single_bt(struct mm_struct *mm,</span>
 		end = bta_end_vaddr;
 	}
 
<span class="p_del">-	bde_vaddr = mm-&gt;bd_addr + mpx_get_bd_entry_offset(mm, start);</span>
<span class="p_add">+	bde_vaddr = mm-&gt;context.bd_addr + mpx_get_bd_entry_offset(mm, start);</span>
 	ret = get_bt_addr(mm, bde_vaddr, &amp;bt_addr);
 	/*
 	 * No bounds table there, so nothing to unmap.
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 4a8aced..ce70ceb 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -508,10 +508,6 @@</span> <span class="p_context"> struct mm_struct {</span>
 	bool tlb_flush_pending;
 #endif
 	struct uprobes_state uprobes_state;
<span class="p_del">-#ifdef CONFIG_X86_INTEL_MPX</span>
<span class="p_del">-	/* address of the bounds directory */</span>
<span class="p_del">-	void __user *bd_addr;</span>
<span class="p_del">-#endif</span>
 #ifdef CONFIG_HUGETLB_PAGE
 	atomic_long_t hugetlb_usage;
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



