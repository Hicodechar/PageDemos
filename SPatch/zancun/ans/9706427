
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] x86/platform changes for v4.12 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] x86/platform changes for v4.12</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 1, 2017, 11:43 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170501114342.x4v4ligruf5kuob6@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9706427/mbox/"
   >mbox</a>
|
   <a href="/patch/9706427/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9706427/">/patch/9706427/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	018576020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 May 2017 11:45:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D7D6122B39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 May 2017 11:45:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CC3D725EF7; Mon,  1 May 2017 11:45:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.3 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI, RCVD_IN_SORBS_SPAM,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 82A2522B39
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 May 2017 11:45:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S969036AbdEALoE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 1 May 2017 07:44:04 -0400
Received: from mail-wr0-f193.google.com ([209.85.128.193]:36663 &quot;EHLO
	mail-wr0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S936795AbdEALnq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 1 May 2017 07:43:46 -0400
Received: by mail-wr0-f193.google.com with SMTP id v42so13573481wrc.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 01 May 2017 04:43:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=ODpOl4X8cSj0KquRkFUOudKZXTlZ+iC7iekUY8V9jjA=;
	b=FHYxgZgRn2ASaJ8C1YqWE2nyCObHQQ26tfBsNStheRlt9BUZbiyYxt1G7M3WWyz7ex
	0b4vxIJ2yGf9j8dZjnSSB9xH3RxzQeKnM1SPk0tJQG7Kzuu5mgkY/G3VR+EqYWLXA5d9
	gIzPpNh618adeG92lf0RwaBndqfO2HgPbe9UbmpNZv4JvuTon+qfdHg74ovr64XT9ykP
	Bom009vzX+S2sgRNRUjBU2rdVehgsZdaWSZRSgQ5m2Jnfz57TSOdnS0E0WNvb88GYJvB
	yLU8KNjx2gDBaxph4nbMVFnAwIf9Uw1r6hahxXK9KRSNuKoVuoihpO+nHBc0LZ6z0/UC
	c2Pw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=ODpOl4X8cSj0KquRkFUOudKZXTlZ+iC7iekUY8V9jjA=;
	b=YMJwGiN3dw2pS4avbz1DQj/CEMPPgkE1svI9hXFixOsKgTE/N6UOMUMEPdaLPhICh/
	Nm0/ytmqyDnpQsljWboXMLZdRX0nw91jeVvkmfSyHe3a85I8FultcFccl2JcxSv44gba
	lLWIQTDWy8puUPeJj2Uf2PIRt6SqoZxpkukr8wOmEKMLGbPxl5UY5UCpEOeFmAeJuLBL
	iyNoqsCozRZsl6P/dcMjdR75h0K0g/uSHggZlgDq59RVRPYkDeyWMQPwb41flFNv+ERX
	FI+dLIrcRisGvQLXwFTM8bIw6Yis4UHlUE45cdHq1JwL7td++TgWTkOa6UnYslZ7Qeqc
	PJrg==
X-Gm-Message-State: AN3rC/7iegd3nz0IiYLojnKYVJ2oLNnCp5ABLalvE7SUJwQM56RqOSla
	ilE+mDiRONggZg==
X-Received: by 10.223.167.76 with SMTP id e12mr11738643wrd.177.1493639024884;
	Mon, 01 May 2017 04:43:44 -0700 (PDT)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	137sm13657249wmi.19.2017.05.01.04.43.43
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Mon, 01 May 2017 04:43:44 -0700 (PDT)
Date: Mon, 1 May 2017 13:43:42 +0200
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Subject: [GIT PULL] x86/platform changes for v4.12
Message-ID: &lt;20170501114342.x4v4ligruf5kuob6@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - May 1, 2017, 11:43 a.m.</div>
<pre class="content">
Linus,

Please pull the latest x86-platform-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-platform-for-linus

   # HEAD: d4d969909bef4c1e103eec0fc2c820773811fb72 x86/platform/intel-mid: Enable Bluetooth support on Intel Edison

Most of the commits are continued SGI UV4 hardware-enablement changes, plus 
there&#39;s also new Bluetooth support for the Intel Edison platform.

 Thanks,

	Ingo

------------------&gt;
Andrew Banman (6):
      x86/platform/uv/BAU: Add uv_bau_version enumerated constants
      x86/platform/uv/BAU: Add payload descriptor qualifier
      x86/platform/uv/BAU: Cleanup bau_operations declaration and instances
      x86/platform/uv/BAU: Add status mmr location fields to bau_control
      x86/platform/uv/BAU: Add wait_completion to bau_operations
      x86/platform/uv/BAU: Implement uv4_wait_completion with read_status

Andy Shevchenko (1):
      x86/platform/intel-mid: Enable Bluetooth support on Intel Edison


 arch/x86/include/asm/uv/uv_bau.h                   |  82 ++++++---
 arch/x86/platform/intel-mid/device_libs/Makefile   |   3 +-
 .../platform/intel-mid/device_libs/platform_bt.c   | 108 ++++++++++++
 arch/x86/platform/uv/tlb_uv.c                      | 195 ++++++++++++++-------
 4 files changed, 299 insertions(+), 89 deletions(-)
 create mode 100644 arch/x86/platform/intel-mid/device_libs/platform_bt.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/uv/uv_bau.h b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">index 57ab86d94d64..7cac79802ad2 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_chunk">@@ -185,6 +185,15 @@</span> <span class="p_context"></span>
 #define MSG_REGULAR			1
 #define MSG_RETRY			2
 
<span class="p_add">+#define BAU_DESC_QUALIFIER		0x534749</span>
<span class="p_add">+</span>
<span class="p_add">+enum uv_bau_version {</span>
<span class="p_add">+	UV_BAU_V1 = 1,</span>
<span class="p_add">+	UV_BAU_V2,</span>
<span class="p_add">+	UV_BAU_V3,</span>
<span class="p_add">+	UV_BAU_V4,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /*
  * Distribution: 32 bytes (256 bits) (bytes 0-0x1f of descriptor)
  * If the &#39;multilevel&#39; flag in the header portion of the descriptor
<span class="p_chunk">@@ -222,20 +231,32 @@</span> <span class="p_context"> struct bau_local_cpumask {</span>
  *   the s/w ack bit vector  ]
  */
 
<span class="p_del">-/*</span>
<span class="p_del">- * The payload is software-defined for INTD transactions</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * struct uv1_2_3_bau_msg_payload - defines payload for INTD transactions</span>
<span class="p_add">+ * @address:		Signifies a page or all TLB&#39;s of the cpu</span>
<span class="p_add">+ * @sending_cpu:	CPU from which the message originates</span>
<span class="p_add">+ * @acknowledge_count:	CPUs on the destination Hub that received the interrupt</span>
  */
<span class="p_del">-struct bau_msg_payload {</span>
<span class="p_del">-	unsigned long	address;		/* signifies a page or all</span>
<span class="p_del">-						   TLB&#39;s of the cpu */</span>
<span class="p_del">-	/* 64 bits */</span>
<span class="p_del">-	unsigned short	sending_cpu;		/* filled in by sender */</span>
<span class="p_del">-	/* 16 bits */</span>
<span class="p_del">-	unsigned short	acknowledge_count;	/* filled in by destination */</span>
<span class="p_del">-	/* 16 bits */</span>
<span class="p_del">-	unsigned int	reserved1:32;		/* not usable */</span>
<span class="p_add">+struct uv1_2_3_bau_msg_payload {</span>
<span class="p_add">+	u64 address;</span>
<span class="p_add">+	u16 sending_cpu;</span>
<span class="p_add">+	u16 acknowledge_count;</span>
 };
 
<span class="p_add">+/**</span>
<span class="p_add">+ * struct uv4_bau_msg_payload - defines payload for INTD transactions</span>
<span class="p_add">+ * @address:		Signifies a page or all TLB&#39;s of the cpu</span>
<span class="p_add">+ * @sending_cpu:	CPU from which the message originates</span>
<span class="p_add">+ * @acknowledge_count:	CPUs on the destination Hub that received the interrupt</span>
<span class="p_add">+ * @qualifier:		Set by source to verify origin of INTD broadcast</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct uv4_bau_msg_payload {</span>
<span class="p_add">+	u64 address;</span>
<span class="p_add">+	u16 sending_cpu;</span>
<span class="p_add">+	u16 acknowledge_count;</span>
<span class="p_add">+	u32 reserved:8;</span>
<span class="p_add">+	u32 qualifier:24;</span>
<span class="p_add">+};</span>
 
 /*
  * UV1 Message header:  16 bytes (128 bits) (bytes 0x30-0x3f of descriptor)
<span class="p_chunk">@@ -385,17 +406,6 @@</span> <span class="p_context"> struct uv2_3_bau_msg_header {</span>
 	/* bits 127:120 */
 };
 
<span class="p_del">-/* Abstracted BAU functions */</span>
<span class="p_del">-struct bau_operations {</span>
<span class="p_del">-	unsigned long (*read_l_sw_ack)(void);</span>
<span class="p_del">-	unsigned long (*read_g_sw_ack)(int pnode);</span>
<span class="p_del">-	unsigned long (*bau_gpa_to_offset)(unsigned long vaddr);</span>
<span class="p_del">-	void (*write_l_sw_ack)(unsigned long mmr);</span>
<span class="p_del">-	void (*write_g_sw_ack)(int pnode, unsigned long mmr);</span>
<span class="p_del">-	void (*write_payload_first)(int pnode, unsigned long mmr);</span>
<span class="p_del">-	void (*write_payload_last)(int pnode, unsigned long mmr);</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 /*
  * The activation descriptor:
  * The format of the message to send, plus all accompanying control
<span class="p_chunk">@@ -411,7 +421,10 @@</span> <span class="p_context"> struct bau_desc {</span>
 		struct uv2_3_bau_msg_header	uv2_3_hdr;
 	} header;
 
<span class="p_del">-	struct bau_msg_payload			payload;</span>
<span class="p_add">+	union bau_payload_header {</span>
<span class="p_add">+		struct uv1_2_3_bau_msg_payload	uv1_2_3;</span>
<span class="p_add">+		struct uv4_bau_msg_payload	uv4;</span>
<span class="p_add">+	} payload;</span>
 };
 /* UV1:
  *   -payload--    ---------header------
<span class="p_chunk">@@ -588,8 +601,12 @@</span> <span class="p_context"> struct uvhub_desc {</span>
 	struct socket_desc	socket[2];
 };
 
<span class="p_del">-/*</span>
<span class="p_del">- * one per-cpu; to locate the software tables</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * struct bau_control</span>
<span class="p_add">+ * @status_mmr: location of status mmr, determined by uvhub_cpu</span>
<span class="p_add">+ * @status_index: index of ERR|BUSY bits in status mmr, determined by uvhub_cpu</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Per-cpu control struct containing CPU topology information and BAU tuneables.</span>
  */
 struct bau_control {
 	struct bau_desc		*descriptor_base;
<span class="p_chunk">@@ -607,6 +624,8 @@</span> <span class="p_context"> struct bau_control {</span>
 	int			timeout_tries;
 	int			ipi_attempts;
 	int			conseccompletes;
<span class="p_add">+	u64			status_mmr;</span>
<span class="p_add">+	int			status_index;</span>
 	bool			nobau;
 	short			baudisabled;
 	short			cpu;
<span class="p_chunk">@@ -644,6 +663,19 @@</span> <span class="p_context"> struct bau_control {</span>
 	struct hub_and_pnode	*thp;
 };
 
<span class="p_add">+/* Abstracted BAU functions */</span>
<span class="p_add">+struct bau_operations {</span>
<span class="p_add">+	unsigned long	(*read_l_sw_ack)(void);</span>
<span class="p_add">+	unsigned long	(*read_g_sw_ack)(int pnode);</span>
<span class="p_add">+	unsigned long	(*bau_gpa_to_offset)(unsigned long vaddr);</span>
<span class="p_add">+	void		(*write_l_sw_ack)(unsigned long mmr);</span>
<span class="p_add">+	void		(*write_g_sw_ack)(int pnode, unsigned long mmr);</span>
<span class="p_add">+	void		(*write_payload_first)(int pnode, unsigned long mmr);</span>
<span class="p_add">+	void		(*write_payload_last)(int pnode, unsigned long mmr);</span>
<span class="p_add">+	int		(*wait_completion)(struct bau_desc*,</span>
<span class="p_add">+				struct bau_control*, long try);</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static inline void write_mmr_data_broadcast(int pnode, unsigned long mmr_image)
 {
 	write_gmmr(pnode, UVH_BAU_DATA_BROADCAST, mmr_image);
<span class="p_header">diff --git a/arch/x86/platform/intel-mid/device_libs/Makefile b/arch/x86/platform/intel-mid/device_libs/Makefile</span>
<span class="p_header">index a7dbec4dce27..36f0fdf6079a 100644</span>
<span class="p_header">--- a/arch/x86/platform/intel-mid/device_libs/Makefile</span>
<span class="p_header">+++ b/arch/x86/platform/intel-mid/device_libs/Makefile</span>
<span class="p_chunk">@@ -2,8 +2,9 @@</span> <span class="p_context"></span>
 obj-$(subst m,y,$(CONFIG_PINCTRL_MERRIFIELD)) += platform_mrfld_pinctrl.o
 # SDHCI Devices
 obj-$(subst m,y,$(CONFIG_MMC_SDHCI_PCI)) += platform_mrfld_sd.o
<span class="p_del">-# WiFi</span>
<span class="p_add">+# WiFi + BT</span>
 obj-$(subst m,y,$(CONFIG_BRCMFMAC_SDIO)) += platform_bcm43xx.o
<span class="p_add">+obj-$(subst m,y,$(CONFIG_BT_HCIUART_BCM)) += platform_bt.o</span>
 # IPC Devices
 obj-$(subst m,y,$(CONFIG_MFD_INTEL_MSIC)) += platform_msic.o
 obj-$(subst m,y,$(CONFIG_SND_MFLD_MACHINE)) += platform_msic_audio.o
<span class="p_header">diff --git a/arch/x86/platform/intel-mid/device_libs/platform_bt.c b/arch/x86/platform/intel-mid/device_libs/platform_bt.c</span>
new file mode 100644
<span class="p_header">index 000000000000..5a0483e7bf66</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/x86/platform/intel-mid/device_libs/platform_bt.c</span>
<span class="p_chunk">@@ -0,0 +1,108 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Bluetooth platform data initialization file</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * (C) Copyright 2017 Intel Corporation</span>
<span class="p_add">+ * Author: Andy Shevchenko &lt;andriy.shevchenko@linux.intel.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or</span>
<span class="p_add">+ * modify it under the terms of the GNU General Public License</span>
<span class="p_add">+ * as published by the Free Software Foundation; version 2</span>
<span class="p_add">+ * of the License.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/gpio/machine.h&gt;</span>
<span class="p_add">+#include &lt;linux/pci.h&gt;</span>
<span class="p_add">+#include &lt;linux/platform_device.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/cpu_device_id.h&gt;</span>
<span class="p_add">+#include &lt;asm/intel-family.h&gt;</span>
<span class="p_add">+#include &lt;asm/intel-mid.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+struct bt_sfi_data {</span>
<span class="p_add">+	struct device *dev;</span>
<span class="p_add">+	const char *name;</span>
<span class="p_add">+	int (*setup)(struct bt_sfi_data *ddata);</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct gpiod_lookup_table tng_bt_sfi_gpio_table = {</span>
<span class="p_add">+	.dev_id	= &quot;hci_bcm&quot;,</span>
<span class="p_add">+	.table	= {</span>
<span class="p_add">+		GPIO_LOOKUP(&quot;0000:00:0c.0&quot;, -1, &quot;device-wakeup&quot;, GPIO_ACTIVE_HIGH),</span>
<span class="p_add">+		GPIO_LOOKUP(&quot;0000:00:0c.0&quot;, -1, &quot;shutdown&quot;,      GPIO_ACTIVE_HIGH),</span>
<span class="p_add">+		GPIO_LOOKUP(&quot;0000:00:0c.0&quot;, -1, &quot;host-wakeup&quot;,   GPIO_ACTIVE_HIGH),</span>
<span class="p_add">+		{ },</span>
<span class="p_add">+	},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define TNG_BT_SFI_GPIO_DEVICE_WAKEUP	&quot;bt_wakeup&quot;</span>
<span class="p_add">+#define TNG_BT_SFI_GPIO_SHUTDOWN	&quot;BT-reset&quot;</span>
<span class="p_add">+#define TNG_BT_SFI_GPIO_HOST_WAKEUP	&quot;bt_uart_enable&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+static int __init tng_bt_sfi_setup(struct bt_sfi_data *ddata)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct gpiod_lookup_table *table = &amp;tng_bt_sfi_gpio_table;</span>
<span class="p_add">+	struct gpiod_lookup *lookup = table-&gt;table;</span>
<span class="p_add">+	struct pci_dev *pdev;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Connected to /dev/ttyS0 */</span>
<span class="p_add">+	pdev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(4, 1));</span>
<span class="p_add">+	if (!pdev)</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	ddata-&gt;dev = &amp;pdev-&gt;dev;</span>
<span class="p_add">+	ddata-&gt;name = table-&gt;dev_id;</span>
<span class="p_add">+</span>
<span class="p_add">+	lookup[0].chip_hwnum = get_gpio_by_name(TNG_BT_SFI_GPIO_DEVICE_WAKEUP);</span>
<span class="p_add">+	lookup[1].chip_hwnum = get_gpio_by_name(TNG_BT_SFI_GPIO_SHUTDOWN);</span>
<span class="p_add">+	lookup[2].chip_hwnum = get_gpio_by_name(TNG_BT_SFI_GPIO_HOST_WAKEUP);</span>
<span class="p_add">+</span>
<span class="p_add">+	gpiod_add_lookup_table(table);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct bt_sfi_data tng_bt_sfi_data __initdata = {</span>
<span class="p_add">+	.setup	= tng_bt_sfi_setup,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define ICPU(model, ddata)	\</span>
<span class="p_add">+	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (kernel_ulong_t)&amp;ddata }</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct x86_cpu_id bt_sfi_cpu_ids[] = {</span>
<span class="p_add">+	ICPU(INTEL_FAM6_ATOM_MERRIFIELD, tng_bt_sfi_data),</span>
<span class="p_add">+	{}</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int __init bt_sfi_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct platform_device_info info;</span>
<span class="p_add">+	struct platform_device *pdev;</span>
<span class="p_add">+	const struct x86_cpu_id *id;</span>
<span class="p_add">+	struct bt_sfi_data *ddata;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	id = x86_match_cpu(bt_sfi_cpu_ids);</span>
<span class="p_add">+	if (!id)</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	ddata = (struct bt_sfi_data *)id-&gt;driver_data;</span>
<span class="p_add">+	if (!ddata)</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = ddata-&gt;setup(ddata);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(&amp;info, 0, sizeof(info));</span>
<span class="p_add">+	info.fwnode	= ddata-&gt;dev-&gt;fwnode;</span>
<span class="p_add">+	info.parent	= ddata-&gt;dev;</span>
<span class="p_add">+	info.name	= ddata-&gt;name,</span>
<span class="p_add">+	info.id		= PLATFORM_DEVID_NONE,</span>
<span class="p_add">+</span>
<span class="p_add">+	pdev = platform_device_register_full(&amp;info);</span>
<span class="p_add">+	if (IS_ERR(pdev))</span>
<span class="p_add">+		return PTR_ERR(pdev);</span>
<span class="p_add">+</span>
<span class="p_add">+	dev_info(ddata-&gt;dev, &quot;Registered Bluetooth device: %s\n&quot;, ddata-&gt;name);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+device_initcall(bt_sfi_init);</span>
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index f25982cdff90..42e65fee5673 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -23,28 +23,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/irq_vectors.h&gt;
 #include &lt;asm/timer.h&gt;
 
<span class="p_del">-static struct bau_operations ops;</span>
<span class="p_del">-</span>
<span class="p_del">-static struct bau_operations uv123_bau_ops = {</span>
<span class="p_del">-	.bau_gpa_to_offset       = uv_gpa_to_offset,</span>
<span class="p_del">-	.read_l_sw_ack           = read_mmr_sw_ack,</span>
<span class="p_del">-	.read_g_sw_ack           = read_gmmr_sw_ack,</span>
<span class="p_del">-	.write_l_sw_ack          = write_mmr_sw_ack,</span>
<span class="p_del">-	.write_g_sw_ack          = write_gmmr_sw_ack,</span>
<span class="p_del">-	.write_payload_first     = write_mmr_payload_first,</span>
<span class="p_del">-	.write_payload_last      = write_mmr_payload_last,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static struct bau_operations uv4_bau_ops = {</span>
<span class="p_del">-	.bau_gpa_to_offset       = uv_gpa_to_soc_phys_ram,</span>
<span class="p_del">-	.read_l_sw_ack           = read_mmr_proc_sw_ack,</span>
<span class="p_del">-	.read_g_sw_ack           = read_gmmr_proc_sw_ack,</span>
<span class="p_del">-	.write_l_sw_ack          = write_mmr_proc_sw_ack,</span>
<span class="p_del">-	.write_g_sw_ack          = write_gmmr_proc_sw_ack,</span>
<span class="p_del">-	.write_payload_first     = write_mmr_proc_payload_first,</span>
<span class="p_del">-	.write_payload_last      = write_mmr_proc_payload_last,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_add">+static struct bau_operations ops __ro_after_init;</span>
 
 /* timeouts in nanoseconds (indexed by UVH_AGING_PRESCALE_SEL urgency7 30:28) */
 static int timeout_base_ns[] = {
<span class="p_chunk">@@ -548,11 +527,12 @@</span> <span class="p_context"> static unsigned long uv1_read_status(unsigned long mmr_offset, int right_shift)</span>
  * return COMPLETE, RETRY(PLUGGED or TIMEOUT) or GIVEUP
  */
 static int uv1_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_status;
 	cycles_t ttm;
<span class="p_add">+	u64 mmr_offset = bcp-&gt;status_mmr;</span>
<span class="p_add">+	int right_shift = bcp-&gt;status_index;</span>
 	struct ptc_stats *stat = bcp-&gt;statp;
 
 	descriptor_status = uv1_read_status(mmr_offset, right_shift);
<span class="p_chunk">@@ -640,11 +620,12 @@</span> <span class="p_context"> int handle_uv2_busy(struct bau_control *bcp)</span>
 }
 
 static int uv2_3_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_stat;
 	cycles_t ttm;
<span class="p_add">+	u64 mmr_offset = bcp-&gt;status_mmr;</span>
<span class="p_add">+	int right_shift = bcp-&gt;status_index;</span>
 	int desc = bcp-&gt;uvhub_cpu;
 	long busy_reps = 0;
 	struct ptc_stats *stat = bcp-&gt;statp;
<span class="p_chunk">@@ -706,28 +687,59 @@</span> <span class="p_context"> static int uv2_3_wait_completion(struct bau_desc *bau_desc,</span>
 }
 
 /*
<span class="p_del">- * There are 2 status registers; each and array[32] of 2 bits. Set up for</span>
<span class="p_del">- * which register to read and position in that register based on cpu in</span>
<span class="p_del">- * current hub.</span>
<span class="p_add">+ * Returns the status of current BAU message for cpu desc as a bit field</span>
<span class="p_add">+ * [Error][Busy][Aux]</span>
  */
<span class="p_del">-static int wait_completion(struct bau_desc *bau_desc, struct bau_control *bcp, long try)</span>
<span class="p_add">+static u64 read_status(u64 status_mmr, int index, int desc)</span>
 {
<span class="p_del">-	int right_shift;</span>
<span class="p_del">-	unsigned long mmr_offset;</span>
<span class="p_add">+	u64 stat;</span>
<span class="p_add">+</span>
<span class="p_add">+	stat = ((read_lmmr(status_mmr) &gt;&gt; index) &amp; UV_ACT_STATUS_MASK) &lt;&lt; 1;</span>
<span class="p_add">+	stat |= (read_lmmr(UVH_LB_BAU_SB_ACTIVATION_STATUS_2) &gt;&gt; desc) &amp; 0x1;</span>
<span class="p_add">+</span>
<span class="p_add">+	return stat;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int uv4_wait_completion(struct bau_desc *bau_desc,</span>
<span class="p_add">+				struct bau_control *bcp, long try)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct ptc_stats *stat = bcp-&gt;statp;</span>
<span class="p_add">+	u64 descriptor_stat;</span>
<span class="p_add">+	u64 mmr = bcp-&gt;status_mmr;</span>
<span class="p_add">+	int index = bcp-&gt;status_index;</span>
 	int desc = bcp-&gt;uvhub_cpu;
 
<span class="p_del">-	if (desc &lt; UV_CPUS_PER_AS) {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_del">-		right_shift = desc * UV_ACT_STATUS_SIZE;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_del">-		right_shift = ((desc - UV_CPUS_PER_AS) * UV_ACT_STATUS_SIZE);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	descriptor_stat = read_status(mmr, index, desc);</span>
 
<span class="p_del">-	if (bcp-&gt;uvhub_version == 1)</span>
<span class="p_del">-		return uv1_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		return uv2_3_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_add">+	/* spin on the status MMR, waiting for it to go idle */</span>
<span class="p_add">+	while (descriptor_stat != UV2H_DESC_IDLE) {</span>
<span class="p_add">+		switch (descriptor_stat) {</span>
<span class="p_add">+		case UV2H_DESC_SOURCE_TIMEOUT:</span>
<span class="p_add">+			stat-&gt;s_stimeout++;</span>
<span class="p_add">+			return FLUSH_GIVEUP;</span>
<span class="p_add">+</span>
<span class="p_add">+		case UV2H_DESC_DEST_TIMEOUT:</span>
<span class="p_add">+			stat-&gt;s_dtimeout++;</span>
<span class="p_add">+			bcp-&gt;conseccompletes = 0;</span>
<span class="p_add">+			return FLUSH_RETRY_TIMEOUT;</span>
<span class="p_add">+</span>
<span class="p_add">+		case UV2H_DESC_DEST_STRONG_NACK:</span>
<span class="p_add">+			stat-&gt;s_plugged++;</span>
<span class="p_add">+			bcp-&gt;conseccompletes = 0;</span>
<span class="p_add">+			return FLUSH_RETRY_PLUGGED;</span>
<span class="p_add">+</span>
<span class="p_add">+		case UV2H_DESC_DEST_PUT_ERR:</span>
<span class="p_add">+			bcp-&gt;conseccompletes = 0;</span>
<span class="p_add">+			return FLUSH_GIVEUP;</span>
<span class="p_add">+</span>
<span class="p_add">+		default:</span>
<span class="p_add">+			/* descriptor_stat is still BUSY */</span>
<span class="p_add">+			cpu_relax();</span>
<span class="p_add">+		}</span>
<span class="p_add">+		descriptor_stat = read_status(mmr, index, desc);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	bcp-&gt;conseccompletes++;</span>
<span class="p_add">+	return FLUSH_COMPLETE;</span>
 }
 
 /*
<span class="p_chunk">@@ -918,7 +930,7 @@</span> <span class="p_context"> int uv_flush_send_and_wait(struct cpumask *flush_mask, struct bau_control *bcp,</span>
 	struct uv1_bau_msg_header *uv1_hdr = NULL;
 	struct uv2_3_bau_msg_header *uv2_3_hdr = NULL;
 
<span class="p_del">-	if (bcp-&gt;uvhub_version == 1) {</span>
<span class="p_add">+	if (bcp-&gt;uvhub_version == UV_BAU_V1) {</span>
 		uv1 = 1;
 		uv1_throttle(hmaster, stat);
 	}
<span class="p_chunk">@@ -958,7 +970,7 @@</span> <span class="p_context"> int uv_flush_send_and_wait(struct cpumask *flush_mask, struct bau_control *bcp,</span>
 		write_mmr_activation(index);
 
 		try++;
<span class="p_del">-		completion_stat = wait_completion(bau_desc, bcp, try);</span>
<span class="p_add">+		completion_stat = ops.wait_completion(bau_desc, bcp, try);</span>
 
 		handle_cmplt(completion_stat, bau_desc, bcp, hmaster, stat);
 
<span class="p_chunk">@@ -1114,15 +1126,12 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
 						unsigned long end,
 						unsigned int cpu)
 {
<span class="p_del">-	int locals = 0;</span>
<span class="p_del">-	int remotes = 0;</span>
<span class="p_del">-	int hubs = 0;</span>
<span class="p_add">+	int locals = 0, remotes = 0, hubs = 0;</span>
 	struct bau_desc *bau_desc;
 	struct cpumask *flush_mask;
 	struct ptc_stats *stat;
 	struct bau_control *bcp;
<span class="p_del">-	unsigned long descriptor_status;</span>
<span class="p_del">-	unsigned long status;</span>
<span class="p_add">+	unsigned long descriptor_status, status, address;</span>
 
 	bcp = &amp;per_cpu(bau_control, cpu);
 
<span class="p_chunk">@@ -1171,10 +1180,24 @@</span> <span class="p_context"> const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,</span>
 	record_send_statistics(stat, locals, hubs, remotes, bau_desc);
 
 	if (!end || (end - start) &lt;= PAGE_SIZE)
<span class="p_del">-		bau_desc-&gt;payload.address = start;</span>
<span class="p_add">+		address = start;</span>
 	else
<span class="p_del">-		bau_desc-&gt;payload.address = TLB_FLUSH_ALL;</span>
<span class="p_del">-	bau_desc-&gt;payload.sending_cpu = cpu;</span>
<span class="p_add">+		address = TLB_FLUSH_ALL;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (bcp-&gt;uvhub_version) {</span>
<span class="p_add">+	case UV_BAU_V1:</span>
<span class="p_add">+	case UV_BAU_V2:</span>
<span class="p_add">+	case UV_BAU_V3:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv1_2_3.sending_cpu = cpu;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case UV_BAU_V4:</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.address = address;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.sending_cpu = cpu;</span>
<span class="p_add">+		bau_desc-&gt;payload.uv4.qualifier = BAU_DESC_QUALIFIER;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
 	 * uv_flush_send_and_wait returns 0 if all cpu&#39;s were messaged,
 	 * or 1 if it gave up and the original cpumask should be returned.
<span class="p_chunk">@@ -1296,7 +1319,7 @@</span> <span class="p_context"> void uv_bau_message_interrupt(struct pt_regs *regs)</span>
 
 		msgdesc.msg_slot = msg - msgdesc.queue_first;
 		msgdesc.msg = msg;
<span class="p_del">-		if (bcp-&gt;uvhub_version == 2)</span>
<span class="p_add">+		if (bcp-&gt;uvhub_version == UV_BAU_V2)</span>
 			process_uv2_message(&amp;msgdesc, bcp);
 		else
 			/* no error workaround for uv1 or uv3 */
<span class="p_chunk">@@ -1838,7 +1861,7 @@</span> <span class="p_context"> static void pq_init(int node, int pnode)</span>
 	 * and the payload queue tail must be maintained by the kernel.
 	 */
 	bcp = &amp;per_cpu(bau_control, smp_processor_id());
<span class="p_del">-	if (bcp-&gt;uvhub_version &lt;= 3) {</span>
<span class="p_add">+	if (bcp-&gt;uvhub_version &lt;= UV_BAU_V3) {</span>
 		tail = first;
 		gnode = uv_gpa_to_gnode(uv_gpa(pqp));
 		first = (gnode &lt;&lt; UV_PAYLOADQ_GNODE_SHIFT) | tail;
<span class="p_chunk">@@ -2034,8 +2057,7 @@</span> <span class="p_context"> static int scan_sock(struct socket_desc *sdp, struct uvhub_desc *bdp,</span>
 			struct bau_control **smasterp,
 			struct bau_control **hmasterp)
 {
<span class="p_del">-	int i;</span>
<span class="p_del">-	int cpu;</span>
<span class="p_add">+	int i, cpu, uvhub_cpu;</span>
 	struct bau_control *bcp;
 
 	for (i = 0; i &lt; sdp-&gt;num_cpus; i++) {
<span class="p_chunk">@@ -2052,19 +2074,33 @@</span> <span class="p_context"> static int scan_sock(struct socket_desc *sdp, struct uvhub_desc *bdp,</span>
 		bcp-&gt;socket_master = *smasterp;
 		bcp-&gt;uvhub = bdp-&gt;uvhub;
 		if (is_uv1_hub())
<span class="p_del">-			bcp-&gt;uvhub_version = 1;</span>
<span class="p_add">+			bcp-&gt;uvhub_version = UV_BAU_V1;</span>
 		else if (is_uv2_hub())
<span class="p_del">-			bcp-&gt;uvhub_version = 2;</span>
<span class="p_add">+			bcp-&gt;uvhub_version = UV_BAU_V2;</span>
 		else if (is_uv3_hub())
<span class="p_del">-			bcp-&gt;uvhub_version = 3;</span>
<span class="p_add">+			bcp-&gt;uvhub_version = UV_BAU_V3;</span>
 		else if (is_uv4_hub())
<span class="p_del">-			bcp-&gt;uvhub_version = 4;</span>
<span class="p_add">+			bcp-&gt;uvhub_version = UV_BAU_V4;</span>
 		else {
 			pr_emerg(&quot;uvhub version not 1, 2, 3, or 4\n&quot;);
 			return 1;
 		}
 		bcp-&gt;uvhub_master = *hmasterp;
<span class="p_del">-		bcp-&gt;uvhub_cpu = uv_cpu_blade_processor_id(cpu);</span>
<span class="p_add">+		uvhub_cpu = uv_cpu_blade_processor_id(cpu);</span>
<span class="p_add">+		bcp-&gt;uvhub_cpu = uvhub_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The ERROR and BUSY status registers are located pairwise over</span>
<span class="p_add">+		 * the STATUS_0 and STATUS_1 mmrs; each an array[32] of 2 bits.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (uvhub_cpu &lt; UV_CPUS_PER_AS) {</span>
<span class="p_add">+			bcp-&gt;status_mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_add">+			bcp-&gt;status_index = uvhub_cpu * UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			bcp-&gt;status_mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_add">+			bcp-&gt;status_index = (uvhub_cpu - UV_CPUS_PER_AS)</span>
<span class="p_add">+						* UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+		}</span>
 
 		if (bcp-&gt;uvhub_cpu &gt;= MAX_CPUS_PER_UVHUB) {
 			pr_emerg(&quot;%d cpus per uvhub invalid\n&quot;,
<span class="p_chunk">@@ -2147,6 +2183,39 @@</span> <span class="p_context"> static int __init init_per_cpu(int nuvhubs, int base_part_pnode)</span>
 	return 1;
 }
 
<span class="p_add">+static const struct bau_operations uv1_bau_ops __initconst = {</span>
<span class="p_add">+	.bau_gpa_to_offset       = uv_gpa_to_offset,</span>
<span class="p_add">+	.read_l_sw_ack           = read_mmr_sw_ack,</span>
<span class="p_add">+	.read_g_sw_ack           = read_gmmr_sw_ack,</span>
<span class="p_add">+	.write_l_sw_ack          = write_mmr_sw_ack,</span>
<span class="p_add">+	.write_g_sw_ack          = write_gmmr_sw_ack,</span>
<span class="p_add">+	.write_payload_first     = write_mmr_payload_first,</span>
<span class="p_add">+	.write_payload_last      = write_mmr_payload_last,</span>
<span class="p_add">+	.wait_completion	 = uv1_wait_completion,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct bau_operations uv2_3_bau_ops __initconst = {</span>
<span class="p_add">+	.bau_gpa_to_offset       = uv_gpa_to_offset,</span>
<span class="p_add">+	.read_l_sw_ack           = read_mmr_sw_ack,</span>
<span class="p_add">+	.read_g_sw_ack           = read_gmmr_sw_ack,</span>
<span class="p_add">+	.write_l_sw_ack          = write_mmr_sw_ack,</span>
<span class="p_add">+	.write_g_sw_ack          = write_gmmr_sw_ack,</span>
<span class="p_add">+	.write_payload_first     = write_mmr_payload_first,</span>
<span class="p_add">+	.write_payload_last      = write_mmr_payload_last,</span>
<span class="p_add">+	.wait_completion	 = uv2_3_wait_completion,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct bau_operations uv4_bau_ops __initconst = {</span>
<span class="p_add">+	.bau_gpa_to_offset       = uv_gpa_to_soc_phys_ram,</span>
<span class="p_add">+	.read_l_sw_ack           = read_mmr_proc_sw_ack,</span>
<span class="p_add">+	.read_g_sw_ack           = read_gmmr_proc_sw_ack,</span>
<span class="p_add">+	.write_l_sw_ack          = write_mmr_proc_sw_ack,</span>
<span class="p_add">+	.write_g_sw_ack          = write_gmmr_proc_sw_ack,</span>
<span class="p_add">+	.write_payload_first     = write_mmr_proc_payload_first,</span>
<span class="p_add">+	.write_payload_last      = write_mmr_proc_payload_last,</span>
<span class="p_add">+	.wait_completion         = uv4_wait_completion,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /*
  * Initialization of BAU-related structures
  */
<span class="p_chunk">@@ -2166,11 +2235,11 @@</span> <span class="p_context"> static int __init uv_bau_init(void)</span>
 	if (is_uv4_hub())
 		ops = uv4_bau_ops;
 	else if (is_uv3_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv2_3_bau_ops;</span>
 	else if (is_uv2_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv2_3_bau_ops;</span>
 	else if (is_uv1_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv1_bau_ops;</span>
 
 	for_each_possible_cpu(cur_cpu) {
 		mask = &amp;per_cpu(uv_flush_tlb_mask, cur_cpu);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



