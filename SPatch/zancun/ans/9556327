
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.10,024/319] KVM: MIPS: Drop other CPU ASIDs on guest MMU changes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.10,024/319] KVM: MIPS: Drop other CPU ASIDs on guest MMU changes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2017, 7:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1486322467-7968-2-git-send-email-w@1wt.eu&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9556327/mbox/"
   >mbox</a>
|
   <a href="/patch/9556327/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9556327/">/patch/9556327/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2906D60236 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 19:22:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1ACEC223C7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 19:22:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0F50D2621D; Sun,  5 Feb 2017 19:22:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 08219223C7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Feb 2017 19:22:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752530AbdBETWP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 5 Feb 2017 14:22:15 -0500
Received: from wtarreau.pck.nerim.net ([62.212.114.60]:27369 &quot;EHLO 1wt.eu&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752462AbdBETWN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 5 Feb 2017 14:22:13 -0500
Received: (from willy@localhost)
	by pcw.home.local (8.15.2/8.15.2/Submit) id v15JL9uT008017;
	Sun, 5 Feb 2017 20:21:09 +0100
From: Willy Tarreau &lt;w@1wt.eu&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org, linux@roeck-us.net
Cc: James Hogan &lt;james.hogan@imgtec.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Ralf Baechle &lt;ralf@linux-mips.org&gt;, linux-mips@linux-mips.org,
	kvm@vger.kernel.org, Jiri Slaby &lt;jslaby@suse.cz&gt;,
	Willy Tarreau &lt;w@1wt.eu&gt;
Subject: [PATCH 3.10 024/319] KVM: MIPS: Drop other CPU ASIDs on guest MMU
	changes
Date: Sun,  5 Feb 2017 20:21:02 +0100
Message-Id: &lt;1486322467-7968-2-git-send-email-w@1wt.eu&gt;
X-Mailer: git-send-email 2.8.0.rc2.1.gbe9624a
In-Reply-To: &lt;1486322467-7968-1-git-send-email-w@1wt.eu&gt;
References: &lt;1486322467-7968-1-git-send-email-w@1wt.eu&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=latin1
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a> - Feb. 5, 2017, 7:21 p.m.</div>
<pre class="content">
<span class="from">From: James Hogan &lt;james.hogan@imgtec.com&gt;</span>

commit 91e4f1b6073dd680d86cdb7e42d7cccca9db39d8 upstream.

When a guest TLB entry is replaced by TLBWI or TLBWR, we only invalidate
TLB entries on the local CPU. This doesn&#39;t work correctly on an SMP host
when the guest is migrated to a different physical CPU, as it could pick
up stale TLB mappings from the last time the vCPU ran on that physical
CPU.

Therefore invalidate both user and kernel host ASIDs on other CPUs,
which will cause new ASIDs to be generated when it next runs on those
CPUs.

We&#39;re careful only to do this if the TLB entry was already valid, and
only for the kernel ASID where the virtual address it mapped is outside
of the guest user address range.
<span class="signed-off-by">
Signed-off-by: James Hogan &lt;james.hogan@imgtec.com&gt;</span>
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Radim KrÄmÃ¡Å&quot; &lt;rkrcmar@redhat.com&gt;
Cc: Ralf Baechle &lt;ralf@linux-mips.org&gt;
Cc: linux-mips@linux-mips.org
Cc: kvm@vger.kernel.org
Cc: &lt;stable@vger.kernel.org&gt; 
Cc: Jiri Slaby &lt;jslaby@suse.cz&gt;
[james.hogan@imgtec.com: Backport to 3.10..3.16]
<span class="signed-off-by">Signed-off-by: James Hogan &lt;james.hogan@imgtec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Willy Tarreau &lt;w@1wt.eu&gt;</span>
---
 arch/mips/kvm/kvm_mips_emul.c | 61 +++++++++++++++++++++++++++++++++++++------
 1 file changed, 53 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/kvm/kvm_mips_emul.c b/arch/mips/kvm/kvm_mips_emul.c</span>
<span class="p_header">index e5977f2..4cfb5bd 100644</span>
<span class="p_header">--- a/arch/mips/kvm/kvm_mips_emul.c</span>
<span class="p_header">+++ b/arch/mips/kvm/kvm_mips_emul.c</span>
<span class="p_chunk">@@ -310,6 +310,47 @@</span> <span class="p_context"> enum emulation_result kvm_mips_emul_tlbr(struct kvm_vcpu *vcpu)</span>
 	return er;
 }
 
<span class="p_add">+/**</span>
<span class="p_add">+ * kvm_mips_invalidate_guest_tlb() - Indicates a change in guest MMU map.</span>
<span class="p_add">+ * @vcpu:	VCPU with changed mappings.</span>
<span class="p_add">+ * @tlb:	TLB entry being removed.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This is called to indicate a single change in guest MMU mappings, so that we</span>
<span class="p_add">+ * can arrange TLB flushes on this and other CPUs.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void kvm_mips_invalidate_guest_tlb(struct kvm_vcpu *vcpu,</span>
<span class="p_add">+					  struct kvm_mips_tlb *tlb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int cpu, i;</span>
<span class="p_add">+	bool user;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* No need to flush for entries which are already invalid */</span>
<span class="p_add">+	if (!((tlb-&gt;tlb_lo0 | tlb-&gt;tlb_lo1) &amp; MIPS3_PG_V))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	/* User address space doesn&#39;t need flushing for KSeg2/3 changes */</span>
<span class="p_add">+	user = tlb-&gt;tlb_hi &lt; KVM_GUEST_KSEG0;</span>
<span class="p_add">+</span>
<span class="p_add">+	preempt_disable();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Probe the shadow host TLB for the entry being overwritten, if one</span>
<span class="p_add">+	 * matches, invalidate it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	kvm_mips_host_tlb_inv(vcpu, tlb-&gt;tlb_hi);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Invalidate the whole ASID on other CPUs */</span>
<span class="p_add">+	cpu = smp_processor_id();</span>
<span class="p_add">+	for_each_possible_cpu(i) {</span>
<span class="p_add">+		if (i == cpu)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (user)</span>
<span class="p_add">+			vcpu-&gt;arch.guest_user_asid[i] = 0;</span>
<span class="p_add">+		vcpu-&gt;arch.guest_kernel_asid[i] = 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	preempt_enable();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Write Guest TLB Entry @ Index */
 enum emulation_result kvm_mips_emul_tlbwi(struct kvm_vcpu *vcpu)
 {
<span class="p_chunk">@@ -331,10 +372,8 @@</span> <span class="p_context"> enum emulation_result kvm_mips_emul_tlbwi(struct kvm_vcpu *vcpu)</span>
 	}
 
 	tlb = &amp;vcpu-&gt;arch.guest_tlb[index];
<span class="p_del">-#if 1</span>
<span class="p_del">-	/* Probe the shadow host TLB for the entry being overwritten, if one matches, invalidate it */</span>
<span class="p_del">-	kvm_mips_host_tlb_inv(vcpu, tlb-&gt;tlb_hi);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	kvm_mips_invalidate_guest_tlb(vcpu, tlb);</span>
 
 	tlb-&gt;tlb_mask = kvm_read_c0_guest_pagemask(cop0);
 	tlb-&gt;tlb_hi = kvm_read_c0_guest_entryhi(cop0);
<span class="p_chunk">@@ -373,10 +412,7 @@</span> <span class="p_context"> enum emulation_result kvm_mips_emul_tlbwr(struct kvm_vcpu *vcpu)</span>
 
 	tlb = &amp;vcpu-&gt;arch.guest_tlb[index];
 
<span class="p_del">-#if 1</span>
<span class="p_del">-	/* Probe the shadow host TLB for the entry being overwritten, if one matches, invalidate it */</span>
<span class="p_del">-	kvm_mips_host_tlb_inv(vcpu, tlb-&gt;tlb_hi);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	kvm_mips_invalidate_guest_tlb(vcpu, tlb);</span>
 
 	tlb-&gt;tlb_mask = kvm_read_c0_guest_pagemask(cop0);
 	tlb-&gt;tlb_hi = kvm_read_c0_guest_entryhi(cop0);
<span class="p_chunk">@@ -419,6 +455,7 @@</span> <span class="p_context"> kvm_mips_emulate_CP0(uint32_t inst, uint32_t *opc, uint32_t cause,</span>
 	int32_t rt, rd, copz, sel, co_bit, op;
 	uint32_t pc = vcpu-&gt;arch.pc;
 	unsigned long curr_pc;
<span class="p_add">+	int cpu, i;</span>
 
 	/*
 	 * Update PC and hold onto current PC in case there is
<span class="p_chunk">@@ -538,8 +575,16 @@</span> <span class="p_context"> kvm_mips_emulate_CP0(uint32_t inst, uint32_t *opc, uint32_t cause,</span>
 					     ASID_MASK,
 					     vcpu-&gt;arch.gprs[rt] &amp; ASID_MASK);
 
<span class="p_add">+					preempt_disable();</span>
 					/* Blow away the shadow host TLBs */
 					kvm_mips_flush_host_tlb(1);
<span class="p_add">+					cpu = smp_processor_id();</span>
<span class="p_add">+					for_each_possible_cpu(i)</span>
<span class="p_add">+						if (i != cpu) {</span>
<span class="p_add">+							vcpu-&gt;arch.guest_user_asid[i] = 0;</span>
<span class="p_add">+							vcpu-&gt;arch.guest_kernel_asid[i] = 0;</span>
<span class="p_add">+						}</span>
<span class="p_add">+					preempt_enable();</span>
 				}
 				kvm_write_c0_guest_entryhi(cop0,
 							   vcpu-&gt;arch.gprs[rt]);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



