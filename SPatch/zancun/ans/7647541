
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,5/6] mm, shmem: add internal shmem resident memory accounting - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,5/6] mm, shmem: add internal shmem resident memory accounting</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 18, 2015, 9:29 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1447838976-17607-6-git-send-email-vbabka@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7647541/mbox/"
   >mbox</a>
|
   <a href="/patch/7647541/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7647541/">/patch/7647541/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 8D10DBF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 Nov 2015 09:30:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 5C4E72047D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 Nov 2015 09:30:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0144E204D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 Nov 2015 09:30:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755539AbbKRJat (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 18 Nov 2015 04:30:49 -0500
Received: from mx2.suse.de ([195.135.220.15]:43898 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1755008AbbKRJaA (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 18 Nov 2015 04:30:00 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 0AF6CAD17;
	Wed, 18 Nov 2015 09:29:33 +0000 (UTC)
From: Vlastimil Babka &lt;vbabka@suse.cz&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;, linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, Jerome Marchand &lt;jmarchan@redhat.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;, linux-api@vger.kernel.org,
	linux-doc@vger.kernel.org, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH v5 5/6] mm,
	shmem: add internal shmem resident memory accounting
Date: Wed, 18 Nov 2015 10:29:35 +0100
Message-Id: &lt;1447838976-17607-6-git-send-email-vbabka@suse.cz&gt;
X-Mailer: git-send-email 2.6.3
In-Reply-To: &lt;1447838976-17607-1-git-send-email-vbabka@suse.cz&gt;
References: &lt;1447838976-17607-1-git-send-email-vbabka@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Nov. 18, 2015, 9:29 a.m.</div>
<pre class="content">
<span class="from">From: Jerome Marchand &lt;jmarchan@redhat.com&gt;</span>

Currently looking at /proc/&lt;pid&gt;/status or statm, there is no way to
distinguish shmem pages from pages mapped to a regular file (shmem pages are
mapped to /dev/zero), even though their implication in actual memory use is
quite different.

The internal accounting currently counts shmem pages together with regular
files. As a preparation to extend the userspace interfaces, this patch adds
MM_SHMEMPAGES counter to mm_rss_stat to account for shmem pages separately from
MM_FILEPAGES. The next patch will expose it to userspace - this patch doesn&#39;t
change the exported values yet, by adding up MM_SHMEMPAGES to MM_FILEPAGES at
places where MM_FILEPAGES was used before. The only user-visible change after
this patch is the OOM killer message that separates the reported &quot;shmem-rss&quot;
from &quot;file-rss&quot;.

[vbabka@suse.cz: forward-porting, tweak changelog]
<span class="signed-off-by">Signed-off-by: Jerome Marchand &lt;jmarchan@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
<span class="acked-by">Acked-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="acked-by">Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="acked-by">Acked-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
---
 arch/s390/mm/pgtable.c   |  5 +----
 fs/proc/task_mmu.c       |  3 ++-
 include/linux/mm.h       | 18 +++++++++++++++++-
 include/linux/mm_types.h |  7 ++++---
 kernel/events/uprobes.c  |  2 +-
 mm/memory.c              | 30 ++++++++++--------------------
 mm/oom_kill.c            |  5 +++--
 mm/rmap.c                | 12 +++---------
 8 files changed, 41 insertions(+), 41 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/s390/mm/pgtable.c b/arch/s390/mm/pgtable.c</span>
<span class="p_header">index 34f3790..43b9a48 100644</span>
<span class="p_header">--- a/arch/s390/mm/pgtable.c</span>
<span class="p_header">+++ b/arch/s390/mm/pgtable.c</span>
<span class="p_chunk">@@ -603,10 +603,7 @@</span> <span class="p_context"> static void gmap_zap_swap_entry(swp_entry_t entry, struct mm_struct *mm)</span>
 	else if (is_migration_entry(entry)) {
 		struct page *page = migration_entry_to_page(entry);
 
<span class="p_del">-		if (PageAnon(page))</span>
<span class="p_del">-			dec_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			dec_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+		dec_mm_counter(mm, mm_counter(page));</span>
 	}
 	free_swap_and_cache(entry);
 }
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index a0338ec..19d190b 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -83,7 +83,8 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 			 unsigned long *shared, unsigned long *text,
 			 unsigned long *data, unsigned long *resident)
 {
<span class="p_del">-	*shared = get_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+	*shared = get_mm_counter(mm, MM_FILEPAGES) +</span>
<span class="p_add">+			get_mm_counter(mm, MM_SHMEMPAGES);</span>
 	*text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK))
 								&gt;&gt; PAGE_SHIFT;
 	*data = mm-&gt;total_vm - mm-&gt;shared_vm;
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index fc9a3b8..25cdec3 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1342,10 +1342,26 @@</span> <span class="p_context"> static inline void dec_mm_counter(struct mm_struct *mm, int member)</span>
 	atomic_long_dec(&amp;mm-&gt;rss_stat.count[member]);
 }
 
<span class="p_add">+/* Optimized variant when page is already known not to be PageAnon */</span>
<span class="p_add">+static inline int mm_counter_file(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (PageSwapBacked(page))</span>
<span class="p_add">+		return MM_SHMEMPAGES;</span>
<span class="p_add">+	return MM_FILEPAGES;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int mm_counter(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (PageAnon(page))</span>
<span class="p_add">+		return MM_ANONPAGES;</span>
<span class="p_add">+	return mm_counter_file(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline unsigned long get_mm_rss(struct mm_struct *mm)
 {
 	return get_mm_counter(mm, MM_FILEPAGES) +
<span class="p_del">-		get_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_add">+		get_mm_counter(mm, MM_ANONPAGES) +</span>
<span class="p_add">+		get_mm_counter(mm, MM_SHMEMPAGES);</span>
 }
 
 static inline unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 5e37e91..22beb22 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -361,9 +361,10 @@</span> <span class="p_context"> struct core_state {</span>
 };
 
 enum {
<span class="p_del">-	MM_FILEPAGES,</span>
<span class="p_del">-	MM_ANONPAGES,</span>
<span class="p_del">-	MM_SWAPENTS,</span>
<span class="p_add">+	MM_FILEPAGES,	/* Resident file mapping pages */</span>
<span class="p_add">+	MM_ANONPAGES,	/* Resident anonymous pages */</span>
<span class="p_add">+	MM_SWAPENTS,	/* Anonymous swap entries */</span>
<span class="p_add">+	MM_SHMEMPAGES,	/* Resident shared memory pages */</span>
 	NR_MM_COUNTERS
 };
 
<span class="p_header">diff --git a/kernel/events/uprobes.c b/kernel/events/uprobes.c</span>
<span class="p_header">index 5137399..373a3ab 100644</span>
<span class="p_header">--- a/kernel/events/uprobes.c</span>
<span class="p_header">+++ b/kernel/events/uprobes.c</span>
<span class="p_chunk">@@ -181,7 +181,7 @@</span> <span class="p_context"> static int __replace_page(struct vm_area_struct *vma, unsigned long addr,</span>
 	lru_cache_add_active_or_unevictable(kpage, vma);
 
 	if (!PageAnon(page)) {
<span class="p_del">-		dec_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+		dec_mm_counter(mm, mm_counter_file(page));</span>
 		inc_mm_counter(mm, MM_ANONPAGES);
 	}
 
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 7f3b9f2..f5b8e8c 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -826,10 +826,7 @@</span> <span class="p_context"> copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 		} else if (is_migration_entry(entry)) {
 			page = migration_entry_to_page(entry);
 
<span class="p_del">-			if (PageAnon(page))</span>
<span class="p_del">-				rss[MM_ANONPAGES]++;</span>
<span class="p_del">-			else</span>
<span class="p_del">-				rss[MM_FILEPAGES]++;</span>
<span class="p_add">+			rss[mm_counter(page)]++;</span>
 
 			if (is_write_migration_entry(entry) &amp;&amp;
 					is_cow_mapping(vm_flags)) {
<span class="p_chunk">@@ -868,10 +865,7 @@</span> <span class="p_context"> copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	if (page) {
 		get_page(page);
 		page_dup_rmap(page, false);
<span class="p_del">-		if (PageAnon(page))</span>
<span class="p_del">-			rss[MM_ANONPAGES]++;</span>
<span class="p_del">-		else</span>
<span class="p_del">-			rss[MM_FILEPAGES]++;</span>
<span class="p_add">+		rss[mm_counter(page)]++;</span>
 	}
 
 out_set_pte:
<span class="p_chunk">@@ -1107,9 +1101,8 @@</span> <span class="p_context"> static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
 			tlb_remove_tlb_entry(tlb, pte, addr);
 			if (unlikely(!page))
 				continue;
<span class="p_del">-			if (PageAnon(page))</span>
<span class="p_del">-				rss[MM_ANONPAGES]--;</span>
<span class="p_del">-			else {</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!PageAnon(page)) {</span>
 				if (pte_dirty(ptent)) {
 					force_flush = 1;
 					set_page_dirty(page);
<span class="p_chunk">@@ -1117,8 +1110,8 @@</span> <span class="p_context"> static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
 				if (pte_young(ptent) &amp;&amp;
 				    likely(!(vma-&gt;vm_flags &amp; VM_SEQ_READ)))
 					mark_page_accessed(page);
<span class="p_del">-				rss[MM_FILEPAGES]--;</span>
 			}
<span class="p_add">+			rss[mm_counter(page)]--;</span>
 			page_remove_rmap(page, false);
 			if (unlikely(page_mapcount(page) &lt; 0))
 				print_bad_pte(vma, addr, ptent, page);
<span class="p_chunk">@@ -1140,11 +1133,7 @@</span> <span class="p_context"> static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
 			struct page *page;
 
 			page = migration_entry_to_page(entry);
<span class="p_del">-</span>
<span class="p_del">-			if (PageAnon(page))</span>
<span class="p_del">-				rss[MM_ANONPAGES]--;</span>
<span class="p_del">-			else</span>
<span class="p_del">-				rss[MM_FILEPAGES]--;</span>
<span class="p_add">+			rss[mm_counter(page)]--;</span>
 		}
 		if (unlikely(!free_swap_and_cache(entry)))
 			print_bad_pte(vma, addr, ptent, NULL);
<span class="p_chunk">@@ -1454,7 +1443,7 @@</span> <span class="p_context"> static int insert_page(struct vm_area_struct *vma, unsigned long addr,</span>
 
 	/* Ok, finally just insert the thing.. */
 	get_page(page);
<span class="p_del">-	inc_mm_counter_fast(mm, MM_FILEPAGES);</span>
<span class="p_add">+	inc_mm_counter_fast(mm, mm_counter_file(page));</span>
 	page_add_file_rmap(page);
 	set_pte_at(mm, addr, pte, mk_pte(page, prot));
 
<span class="p_chunk">@@ -2091,7 +2080,8 @@</span> <span class="p_context"> static int wp_page_copy(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	if (likely(pte_same(*page_table, orig_pte))) {
 		if (old_page) {
 			if (!PageAnon(old_page)) {
<span class="p_del">-				dec_mm_counter_fast(mm, MM_FILEPAGES);</span>
<span class="p_add">+				dec_mm_counter_fast(mm,</span>
<span class="p_add">+						mm_counter_file(old_page));</span>
 				inc_mm_counter_fast(mm, MM_ANONPAGES);
 			}
 		} else {
<span class="p_chunk">@@ -2815,7 +2805,7 @@</span> <span class="p_context"> void do_set_pte(struct vm_area_struct *vma, unsigned long address,</span>
 		inc_mm_counter_fast(vma-&gt;vm_mm, MM_ANONPAGES);
 		page_add_new_anon_rmap(page, vma, address, false);
 	} else {
<span class="p_del">-		inc_mm_counter_fast(vma-&gt;vm_mm, MM_FILEPAGES);</span>
<span class="p_add">+		inc_mm_counter_fast(vma-&gt;vm_mm, mm_counter_file(page));</span>
 		page_add_file_rmap(page);
 	}
 	set_pte_at(vma-&gt;vm_mm, address, pte, entry);
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index d13a339..5314b20 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -585,10 +585,11 @@</span> <span class="p_context"> void oom_kill_process(struct oom_control *oc, struct task_struct *p,</span>
 	 */
 	do_send_sig_info(SIGKILL, SEND_SIG_FORCED, victim, true);
 	mark_oom_victim(victim);
<span class="p_del">-	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB\n&quot;,</span>
<span class="p_add">+	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
 		task_pid_nr(victim), victim-&gt;comm, K(victim-&gt;mm-&gt;total_vm),
 		K(get_mm_counter(victim-&gt;mm, MM_ANONPAGES)),
<span class="p_del">-		K(get_mm_counter(victim-&gt;mm, MM_FILEPAGES)));</span>
<span class="p_add">+		K(get_mm_counter(victim-&gt;mm, MM_FILEPAGES)),</span>
<span class="p_add">+		K(get_mm_counter(victim-&gt;mm, MM_SHMEMPAGES)));</span>
 	task_unlock(victim);
 
 	/*
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index e045fea..2d87940 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1450,10 +1450,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		if (PageHuge(page)) {
 			hugetlb_count_sub(1 &lt;&lt; compound_order(page), mm);
 		} else {
<span class="p_del">-			if (PageAnon(page))</span>
<span class="p_del">-				dec_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				dec_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+			dec_mm_counter(mm, mm_counter(page));</span>
 		}
 		set_pte_at(mm, address, pte,
 			   swp_entry_to_pte(make_hwpoison_entry(page)));
<span class="p_chunk">@@ -1463,10 +1460,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		 * interest anymore. Simply discard the pte, vmscan
 		 * will take care of the rest.
 		 */
<span class="p_del">-		if (PageAnon(page))</span>
<span class="p_del">-			dec_mm_counter(mm, MM_ANONPAGES);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			dec_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+		dec_mm_counter(mm, mm_counter(page));</span>
 	} else if (IS_ENABLED(CONFIG_MIGRATION) &amp;&amp; (flags &amp; TTU_MIGRATION)) {
 		swp_entry_t entry;
 		pte_t swp_pte;
<span class="p_chunk">@@ -1506,7 +1500,7 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 			swp_pte = pte_swp_mksoft_dirty(swp_pte);
 		set_pte_at(mm, address, pte, swp_pte);
 	} else
<span class="p_del">-		dec_mm_counter(mm, MM_FILEPAGES);</span>
<span class="p_add">+		dec_mm_counter(mm, mm_counter_file(page));</span>
 
 	page_remove_rmap(page, PageHuge(page));
 	page_cache_release(page);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



