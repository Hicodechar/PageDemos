
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v7,3/7] iommu/exynos: Simplify internal enable/disable functions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v7,3/7] iommu/exynos: Simplify internal enable/disable functions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2061">Marek Szyprowski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 14, 2016, 10:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1479118092-1365-4-git-send-email-m.szyprowski@samsung.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9427067/mbox/"
   >mbox</a>
|
   <a href="/patch/9427067/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9427067/">/patch/9427067/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	68CF960756 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Nov 2016 10:11:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 55358287CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Nov 2016 10:11:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4A17B287C4; Mon, 14 Nov 2016 10:11:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F2703287B4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Nov 2016 10:11:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755038AbcKNKKz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 14 Nov 2016 05:10:55 -0500
Received: from mailout1.w1.samsung.com ([210.118.77.11]:24828 &quot;EHLO
	mailout1.w1.samsung.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752286AbcKNKJP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 14 Nov 2016 05:09:15 -0500
Received: from eucas1p2.samsung.com (unknown [182.198.249.207])
	by mailout1.w1.samsung.com
	(Oracle Communications Messaging Server 7.0.5.31.0 64bit (built May 5
	2014))
	with ESMTP id &lt;0OGM00CC7MVB1K00@mailout1.w1.samsung.com&gt;; Mon,
	14 Nov 2016 10:09:11 +0000 (GMT)
Received: from eusmges4.samsung.com (unknown [203.254.199.244])
	by     eucas1p2.samsung.com (KnoxPortal) with ESMTP id
	20161114100911eucas1p2b471824925ab71d962a41d93595c4461~G4h87bEXD2921929219eucas1p2i;
	Mon, 14 Nov 2016 10:09:11 +0000 (GMT)
Received: from eucas1p1.samsung.com ( [182.198.249.206])
	by eusmges4.samsung.com (EUCPMTA) with SMTP id 7D.78.28332.74D89285;
	Mon, 14     Nov 2016 10:09:11 +0000 (GMT)
Received: from eusmgms1.samsung.com (unknown [182.198.249.179])
	by     eucas1p1.samsung.com (KnoxPortal) with ESMTP id
	20161114100910eucas1p1d146481b6818212c30884e91e01a663b~G4h8Rwu_m1167211672eucas1p1Y;
	Mon, 14 Nov 2016 10:09:10 +0000 (GMT)
X-AuditID: cbfec7f4-f791c6d000006eac-16-58298d472243
Received: from eusync4.samsung.com ( [203.254.199.214])
	by eusmgms1.samsung.com (EUCPMTA) with SMTP id 43.B3.07726.A4D89285;
	Mon, 14     Nov 2016 10:09:14 +0000 (GMT)
Received: from AMDC2765.digital.local ([106.116.147.25])
	by eusync4.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit  (built May  5 2014))
	with ESMTPA id &lt;0OGM00IDHMV2LBA0@eusync4.samsung.com&gt;; Mon,
	14 Nov 2016 10:09:10 +0000 (GMT)
From: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;
To: linux-pm@vger.kernel.org, linux-kernel@vger.kernel.org,
	iommu@lists.linux-foundation.org,
	linux-samsung-soc@vger.kernel.org, Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Inki Dae &lt;inki.dae@samsung.com&gt;, Kukjin Kim &lt;kgene@kernel.org&gt;,
	Krzysztof Kozlowski &lt;krzk@kernel.org&gt;,
	Bartlomiej Zolnierkiewicz &lt;b.zolnierkie@samsung.com&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rjw@rjwysocki.net&gt;, Mark Brown &lt;broonie@kernel.org&gt;,
	&quot;Luis R. Rodriguez&quot; &lt;mcgrof@kernel.org&gt;,
	Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	Tomeu Vizoso &lt;tomeu.vizoso@collabora.com&gt;,
	Lukas Wunner &lt;lukas@wunner.de&gt;, Kevin Hilman &lt;khilman@kernel.org&gt;,
	Tobias Jakobi &lt;tjakobi@math.uni-bielefeld.de&gt;,
	Tomasz Figa &lt;tomasz.figa@gmail.com&gt;
Subject: [PATCH v7 3/7] iommu/exynos: Simplify internal enable/disable
	functions
Date: Mon, 14 Nov 2016 11:08:08 +0100
Message-id: &lt;1479118092-1365-4-git-send-email-m.szyprowski@samsung.com&gt;
X-Mailer: git-send-email 1.9.1
In-reply-to: &lt;1479118092-1365-1-git-send-email-m.szyprowski@samsung.com&gt;
X-Brightmail-Tracker: H4sIAAAAAAAAAzWSa0hTYRjHfc85285Wi+OUelOTWBR5yRQMXtRKQfAQRCaEVh9y5ElNp7aj
	pvVlad6Gd1FXtrS8wcrUucREmppMxdDSNCm84SVvi3BaijZyHvv2+/P8n//zPPCQuKSS50BG
	xyUyijhZrJQvIlqNW4NngvJcwjxzdCRqVjfyUOnMHB+lVzfyUfFUIYGqDL4op6JJgApmV3A0
	3zKLoaGhXTnS/oyPzHk9AKmH3mNo8YcjauiZEKDxwnmAPg4M81Dmq188pG3fASi/YZjvb0fP
	dT3H6LaJGkC/ezohoHXaHD5t0LwW0CXj9YC2GAW0fjSLoPP1WkCbdc60OquVF3zghsgvgomN
	TmYUZy+Ei6JMtecTWn1SFssf40rQ5akCQhJS3nBgW8Pn+DD8NNm4yyJSQtUCqNHlCawFCWUG
	sHk0WAXIvQaT8iHnqQPQklGEc0KJweea1b0GPuUFVSbVXpI9VQ1gX8UYZhU41UnApaJZ3Oqy
	o0Jg2sIUZmWCOgkta1vAymIqCL40bQu4nZxhv7GEZ2UhRUONeY2wBkFqQwDTf9dh3E7HoK4T
	5/yBsGxscp/t4HKvfj/HCeZkd2EcFwCYluHGsRrAQZOYY1/4offz3iycOgSLW8txLl4MszMl
	nIWGzfmbgOMAuLmwA7jrKwBcNi8ThcCpCthogT2TxMojGdbbg5XJ2aS4SI/b8XId2H2bAUvv
	ehuoNvp0A4oE0oPi7PjTYRKeLJlNlXcDSOJSe/GJXJcwiThClvqAUcTfUiTFMmw3cCQJ6RFx
	R9WXUAkVKUtkYhgmgVH8r2Kk0EEJrmh3Wm66382q1hOVT3R4irut6SqbYnCv57mEX65RLr9t
	uFhvW/r3/rWpUxtYWc83+Wpibvh3h/4/3h3n1uwC3TLfNPlPh947fpS+HoFPOpXbqInhktAE
	YdX6I0OIa8zX4p/Bd+bb/aYDDNuX1lcq+vSdI5XOueyLlqUQrxm9cFhKsFEyL1dcwcr+AfM6
	/SQyAwAA
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFjrAIsWRmVeSWpSXmKPExsVy+t/xa7pevZoRBivP6VhsnLGe1WLqwyds
	Fs2L17NZTLo/gcViwX5ri87ZG9gt+h+/ZrZ4uvkxk8X580Du5V1z2Cw+9x5htJhxfh+TxYvn
	0hZrj9xlt7gx4SmjxZnTl1gt2lZ/YLVYtesPo0Xf2ktsDsIeTw7OY/LYcXcJo8fOWXfZPTat
	6mTz2D93DbvH5BvLGT3+HWP32HK1ncWjb8sqRo/Pm+Q8ZrRvYw3gjnKzyUhNTEktUkjNS85P
	ycxLt1UKDXHTtVBSyEvMTbVVitD1DQlSUihLzCkF8owM0ICDc4B7sJK+XYJbxtultgXbrCpe
	TG9hbmA8aNDFyMEhIWAi8bahuouRE8gUk7hwbz1bFyMXh5DAEkaJDduPskI4TUwSx37MZwSp
	YhMwlOh62wVWJSKwmFGi4dAURhCHWeAYi8TinoPMIFXCAgESp54eZAOxWQRUJf59+gnWzSvg
	LrHo7W92iH1yEiePTWYFsTkFPCTmfv7EAmILAdVcvbyfeQIj7wJGhlWMIqmlxbnpucWGesWJ
	ucWleel6yfm5mxiBsbft2M/NOxgvbQw+xCjAwajEw9uRrxEhxJpYVlyZe4hRgoNZSYRXuUcz
	Qog3JbGyKrUoP76oNCe1+BCjKdBRE5mlRJPzgWkhryTe0MTQ3NLQyNjCwtzISEmct+TDlXAh
	gfTEktTs1NSC1CKYPiYOTqkGxhCPZU2y37M33rPos284o6u+ImZ7lvpT7i8d1Ve3mLAFb/tY
	0yR4LEWwfolh8tlPxvekV6rGdenNk5v/udL7xIabn10PczCen/siXk3t21JGZdGLzfs5z9Xc
	ZvnT4Ru///DW9/d3iC457v44Ou1E3ceZlgfcnZnZw651v0+84uIpXVySarixUomlOCPRUIu5
	qDgRAM43OUzTAgAA
X-MTR: 20000000000000000@CPGS
X-CMS-MailID: 20161114100910eucas1p1d146481b6818212c30884e91e01a663b
X-Msg-Generator: CA
X-Sender-IP: 182.198.249.179
X-Local-Sender: =?UTF-8?B?TWFyZWsgU3p5cHJvd3NraRtTUlBPTC1LZXJuZWwgKFRQKRs=?=
	=?UTF-8?B?7IK87ISx7KCE7J6QG1NlbmlvciBTb2Z0d2FyZSBFbmdpbmVlcg==?=
X-Global-Sender: =?UTF-8?B?TWFyZWsgU3p5cHJvd3NraRtTUlBPTC1LZXJuZWwgKFRQKRtT?=
	=?UTF-8?B?YW1zdW5nIEVsZWN0cm9uaWNzG1NlbmlvciBTb2Z0d2FyZSBFbmdpbmVlcg==?=
X-Sender-Code: =?UTF-8?B?QzEwG0VIURtDMTBDRDAyQ0QwMjczOTI=?=
CMS-TYPE: 201P
X-HopCount: 7
X-CMS-RootMailID: 20161114100910eucas1p1d146481b6818212c30884e91e01a663b
X-RootMTR: 20161114100910eucas1p1d146481b6818212c30884e91e01a663b
References: &lt;1479118092-1365-1-git-send-email-m.szyprowski@samsung.com&gt;
	&lt;CGME20161114100910eucas1p1d146481b6818212c30884e91e01a663b@eucas1p1.samsung.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2061">Marek Szyprowski</a> - Nov. 14, 2016, 10:08 a.m.</div>
<pre class="content">
Remove remaining leftovers of the ref-count related code in the
__sysmmu_enable/disable functions inline __sysmmu_enable/disable_nocount
to them. Suspend/resume callbacks now checks if master device is set for
given SYSMMU controller instead of relying on the activation count.
<span class="signed-off-by">
Signed-off-by: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;</span>
---
 drivers/iommu/exynos-iommu.c | 104 ++++++++++++-------------------------------
 1 file changed, 29 insertions(+), 75 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/exynos-iommu.c b/drivers/iommu/exynos-iommu.c</span>
<span class="p_header">index 4056228..f45b274 100644</span>
<span class="p_header">--- a/drivers/iommu/exynos-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/exynos-iommu.c</span>
<span class="p_chunk">@@ -237,8 +237,8 @@</span> <span class="p_context"> struct sysmmu_drvdata {</span>
 	struct clk *aclk;		/* SYSMMU&#39;s aclk clock */
 	struct clk *pclk;		/* SYSMMU&#39;s pclk clock */
 	struct clk *clk_master;		/* master&#39;s device clock */
<span class="p_del">-	int activations;		/* number of calls to sysmmu_enable */</span>
 	spinlock_t lock;		/* lock for modyfying state */
<span class="p_add">+	bool active;			/* current status */</span>
 	struct exynos_iommu_domain *domain; /* domain we belong to */
 	struct list_head domain_node;	/* node for domain clients list */
 	struct list_head owner_node;	/* node for owner controllers list */
<span class="p_chunk">@@ -251,25 +251,6 @@</span> <span class="p_context"> static struct exynos_iommu_domain *to_exynos_domain(struct iommu_domain *dom)</span>
 	return container_of(dom, struct exynos_iommu_domain, domain);
 }
 
<span class="p_del">-static bool set_sysmmu_active(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* return true if the System MMU was not active previously</span>
<span class="p_del">-	   and it needs to be initialized */</span>
<span class="p_del">-	return ++data-&gt;activations == 1;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool set_sysmmu_inactive(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* return true if the System MMU is needed to be disabled */</span>
<span class="p_del">-	BUG_ON(data-&gt;activations &lt; 1);</span>
<span class="p_del">-	return --data-&gt;activations == 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool is_sysmmu_active(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return data-&gt;activations &gt; 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void sysmmu_unblock(struct sysmmu_drvdata *data)
 {
 	writel(CTRL_ENABLE, data-&gt;sfrbase + REG_MMU_CTRL);
<span class="p_chunk">@@ -388,7 +369,7 @@</span> <span class="p_context"> static irqreturn_t exynos_sysmmu_irq(int irq, void *dev_id)</span>
 	unsigned short reg_status, reg_clear;
 	int ret = -ENOSYS;
 
<span class="p_del">-	WARN_ON(!is_sysmmu_active(data));</span>
<span class="p_add">+	WARN_ON(!data-&gt;active);</span>
 
 	if (MMU_MAJ_VER(data-&gt;version) &lt; 5) {
 		reg_status = REG_INT_STATUS;
<span class="p_chunk">@@ -434,37 +415,19 @@</span> <span class="p_context"> static irqreturn_t exynos_sysmmu_irq(int irq, void *dev_id)</span>
 	return IRQ_HANDLED;
 }
 
<span class="p_del">-static void __sysmmu_disable_nocount(struct sysmmu_drvdata *data)</span>
<span class="p_add">+static void __sysmmu_disable(struct sysmmu_drvdata *data)</span>
 {
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
 	clk_enable(data-&gt;clk_master);
 
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
 	writel(CTRL_DISABLE, data-&gt;sfrbase + REG_MMU_CTRL);
 	writel(0, data-&gt;sfrbase + REG_MMU_CFG);
<span class="p_del">-</span>
<span class="p_del">-	__sysmmu_disable_clocks(data);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool __sysmmu_disable(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	bool disabled;</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	disabled = set_sysmmu_inactive(data);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (disabled) {</span>
<span class="p_del">-		data-&gt;pgtable = 0;</span>
<span class="p_del">-		data-&gt;domain = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-		__sysmmu_disable_nocount(data);</span>
<span class="p_del">-</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;Disabled\n&quot;);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_add">+	data-&gt;active = false;</span>
 	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);
 
<span class="p_del">-	return disabled;</span>
<span class="p_add">+	__sysmmu_disable_clocks(data);</span>
 }
 
 static void __sysmmu_init_config(struct sysmmu_drvdata *data)
<span class="p_chunk">@@ -481,17 +444,19 @@</span> <span class="p_context"> static void __sysmmu_init_config(struct sysmmu_drvdata *data)</span>
 	writel(cfg, data-&gt;sfrbase + REG_MMU_CFG);
 }
 
<span class="p_del">-static void __sysmmu_enable_nocount(struct sysmmu_drvdata *data)</span>
<span class="p_add">+static void __sysmmu_enable(struct sysmmu_drvdata *data)</span>
 {
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
 	__sysmmu_enable_clocks(data);
 
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
 	writel(CTRL_BLOCK, data-&gt;sfrbase + REG_MMU_CTRL);
<span class="p_del">-</span>
 	__sysmmu_init_config(data);
<span class="p_del">-</span>
 	__sysmmu_set_ptbase(data, data-&gt;pgtable);
<span class="p_del">-</span>
 	writel(CTRL_ENABLE, data-&gt;sfrbase + REG_MMU_CTRL);
<span class="p_add">+	data-&gt;active = true;</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
 
 	/*
 	 * SYSMMU driver keeps master&#39;s clock enabled only for the short
<span class="p_chunk">@@ -502,37 +467,18 @@</span> <span class="p_context"> static void __sysmmu_enable_nocount(struct sysmmu_drvdata *data)</span>
 	clk_disable(data-&gt;clk_master);
 }
 
<span class="p_del">-static int __sysmmu_enable(struct sysmmu_drvdata *data, phys_addr_t pgtable,</span>
<span class="p_del">-			   struct exynos_iommu_domain *domain)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-	if (set_sysmmu_active(data)) {</span>
<span class="p_del">-		data-&gt;pgtable = pgtable;</span>
<span class="p_del">-		data-&gt;domain = domain;</span>
<span class="p_del">-		__sysmmu_enable_nocount(data);</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;Enabled\n&quot;);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void sysmmu_tlb_invalidate_flpdcache(struct sysmmu_drvdata *data,
 					    sysmmu_iova_t iova)
 {
 	unsigned long flags;
 
<span class="p_del">-</span>
 	spin_lock_irqsave(&amp;data-&gt;lock, flags);
<span class="p_del">-	if (is_sysmmu_active(data) &amp;&amp; data-&gt;version &gt;= MAKE_MMU_VER(3, 3)) {</span>
<span class="p_add">+	if (data-&gt;active &amp;&amp; data-&gt;version &gt;= MAKE_MMU_VER(3, 3)) {</span>
 		clk_enable(data-&gt;clk_master);
 		__sysmmu_tlb_invalidate_entry(data, iova, 1);
 		clk_disable(data-&gt;clk_master);
 	}
 	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);
<span class="p_del">-</span>
 }
 
 static void sysmmu_tlb_invalidate_entry(struct sysmmu_drvdata *data,
<span class="p_chunk">@@ -541,7 +487,7 @@</span> <span class="p_context"> static void sysmmu_tlb_invalidate_entry(struct sysmmu_drvdata *data,</span>
 	unsigned long flags;
 
 	spin_lock_irqsave(&amp;data-&gt;lock, flags);
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_add">+	if (data-&gt;active) {</span>
 		unsigned int num_inv = 1;
 
 		clk_enable(data-&gt;clk_master);
<span class="p_chunk">@@ -652,10 +598,11 @@</span> <span class="p_context"> static int __init exynos_sysmmu_probe(struct platform_device *pdev)</span>
 static int exynos_sysmmu_suspend(struct device *dev)
 {
 	struct sysmmu_drvdata *data = dev_get_drvdata(dev);
<span class="p_add">+	struct device *master = data-&gt;master;</span>
 
 	dev_dbg(dev, &quot;suspend\n&quot;);
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_del">-		__sysmmu_disable_nocount(data);</span>
<span class="p_add">+	if (master) {</span>
<span class="p_add">+		__sysmmu_disable(data);</span>
 		pm_runtime_put(dev);
 	}
 	return 0;
<span class="p_chunk">@@ -664,11 +611,12 @@</span> <span class="p_context"> static int exynos_sysmmu_suspend(struct device *dev)</span>
 static int exynos_sysmmu_resume(struct device *dev)
 {
 	struct sysmmu_drvdata *data = dev_get_drvdata(dev);
<span class="p_add">+	struct device *master = data-&gt;master;</span>
 
 	dev_dbg(dev, &quot;resume\n&quot;);
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_add">+	if (master) {</span>
 		pm_runtime_get_sync(dev);
<span class="p_del">-		__sysmmu_enable_nocount(data);</span>
<span class="p_add">+		__sysmmu_enable(data);</span>
 	}
 	return 0;
 }
<span class="p_chunk">@@ -780,6 +728,8 @@</span> <span class="p_context"> static void exynos_iommu_domain_free(struct iommu_domain *iommu_domain)</span>
 
 	list_for_each_entry_safe(data, next, &amp;domain-&gt;clients, domain_node) {
 		__sysmmu_disable(data);
<span class="p_add">+		data-&gt;pgtable = 0;</span>
<span class="p_add">+		data-&gt;domain = NULL;</span>
 		data-&gt;master = NULL;
 		list_del_init(&amp;data-&gt;domain_node);
 	}
<span class="p_chunk">@@ -823,6 +773,8 @@</span> <span class="p_context"> static void exynos_iommu_detach_device(struct iommu_domain *iommu_domain,</span>
 	list_for_each_entry_safe(data, next, &amp;domain-&gt;clients, domain_node) {
 		__sysmmu_disable(data);
 		data-&gt;master = NULL;
<span class="p_add">+		data-&gt;pgtable = 0;</span>
<span class="p_add">+		data-&gt;domain = NULL;</span>
 		list_del_init(&amp;data-&gt;domain_node);
 		pm_runtime_put(data-&gt;sysmmu);
 	}
<span class="p_chunk">@@ -850,8 +802,10 @@</span> <span class="p_context"> static int exynos_iommu_attach_device(struct iommu_domain *iommu_domain,</span>
 		exynos_iommu_detach_device(owner-&gt;domain, dev);
 
 	list_for_each_entry(data, &amp;owner-&gt;controllers, owner_node) {
<span class="p_add">+		data-&gt;pgtable = pagetable;</span>
<span class="p_add">+		data-&gt;domain = domain;</span>
 		pm_runtime_get_sync(data-&gt;sysmmu);
<span class="p_del">-		__sysmmu_enable(data, pagetable, domain);</span>
<span class="p_add">+		__sysmmu_enable(data);</span>
 		data-&gt;master = dev;
 
 		spin_lock_irqsave(&amp;domain-&gt;lock, flags);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



