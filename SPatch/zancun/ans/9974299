
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v5,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v5,02/17] x86/mm: Add Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 27, 2017, 3:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170927151329.70011-3-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9974299/mbox/"
   >mbox</a>
|
   <a href="/patch/9974299/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9974299/">/patch/9974299/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5D54960365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Sep 2017 15:20:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4DF2A2925A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Sep 2017 15:20:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4C4A229261; Wed, 27 Sep 2017 15:20:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9F74B2924D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Sep 2017 15:20:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753464AbdI0PUo (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 27 Sep 2017 11:20:44 -0400
Received: from mail-by2nam03on0075.outbound.protection.outlook.com
	([104.47.42.75]:3040
	&quot;EHLO NAM03-BY2-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752034AbdI0PNt (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 27 Sep 2017 11:13:49 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=PlOEglaObfXBBeMx6UV/oZohea6PNjiN3XxG2BG2Qbs=;
	b=CMAlRDypMcpAuzRxJK8kq/7XsAH69cAJPOBqDegwjWfpcPm1lFPK0021y2CKJP+q8U2tTW1U1HTaIt3P9Run/zeCv7TilSRUU78Up2g8q2bTXAK4NMlbZ3PC9UG94nP5QQRga93wC6UvxpU8m/uKh6oJwccvS95sfD1Ss/dxLxM=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Wed, 27 Sep 2017 15:13:46 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: kvm@vger.kernel.org, linux-kernel@vger.kernel.org, x86@kernel.org
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v5 02/17] x86/mm: Add Secure Encrypted Virtualization
	(SEV) support
Date: Wed, 27 Sep 2017 10:13:14 -0500
Message-Id: &lt;20170927151329.70011-3-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20170927151329.70011-1-brijesh.singh@amd.com&gt;
References: &lt;20170927151329.70011-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: BN6PR04CA0033.namprd04.prod.outlook.com (10.174.93.150) To
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: b1528bb4-995f-478d-eac9-08d505ba5a25
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:CY1PR12MB0152; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	3:rsn2rtkrBEv+WhXL9dm/HB9KIfwgWn5GdV+e05HONDg8imxMBYuk0zmHrX6ijwBdzLvb5DzOPn6ZbH/MjfylOrJFek030OPuwiBdqYe299VO5oHH9A1NM556uEQYOo9JcwghInLyF1wTkomwmRACT3s6nR7shizhvOIOH9vh13ZGhVes/6NhewqWNWf7NftIcK+IiCU8orhKleU8ZQcTafj6mjxfEEMLx9EEiGiQBdI5IE5mm+3qbI2IusYOyImG;
	25:rslhNyLRFPkUM74T+JPtVerctyMvXARcJ5jrEPyjNIT3A/LqOcj7agpDaQk7vUZgDblM395CSGqNHE4S1xYsqnSp8Ikl167uPX4dD+e5ng9JBQ/a5PQOc0lxh8Cb2wff8GOXHGdL6ChYMPgS3okVtPL20fndoTsYo57gnPBd3/xYBsPdK3A+3DQuPis3f7S8eEJVhe2K62ir8peXYhZgAfqkgCnIi0u6ZNrNFQ5LaQZH21LCB/wW/d/QkD2EvkdXaDIZSdemN5BZtZjyycAX2aHlNJI2vuHaXPAI+w8ka5zEEDwh83W/bVwo4WkGGoKYWv+4bJ4JIz1FQHqOnV2tiQ==;
	31:lp+2NKG00dp9s8R8B16wsCTQxio4pGj56Z6TVGmAay2t811DhapkKjBPa6EWm5urbV+XKQ/npUpPqVixltPirAtmtjLeEGLezrjO3spDyxNGevDlwyw5Mg2WmgCGwdehAYdGBhwUKAjWdjdnxvAigzjIkCBngOa46BchCM4umbC5tWWVRVWHaAbzwL3aNPHoHrVnRrf2gSoN2OcO1Y2v7TxhFvKbqT3Hb8Qf3xLOgEc=
X-MS-TrafficTypeDiagnostic: CY1PR12MB0152:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:JzRmU/NEavCJR2QwXch+H5T1La15Vs+B9yVAmY2GR4w+gZq3UyKIkycfD/Pqy0xvPxdbQV6J2Zp+N4hXw48Tbe3SO11Vb9nfe5vKRBzlIm+ZAYXC+lQLwMb+//nQ10cNhcSz5/P/zWaK1fR8mqtFEf+ZY5NPuCamsWtj+cJHtzuy855qRvECBgweHZ/Zs6M0wY8Zvl7ca45uPjBsU+3/dT0dzw/rdqR5QEBDFmENQ/Cvvmz+RweVMbDUfSo+Y7hbJ3yxGcoVVDNKOu5NuCi6asjs/9YPC6K+Zl5TeCy4u1xeYbWlchmkDbwz2zMpstZ6mb2vARSA2K7CpdzwgiWSBTK2UNlxBS9TKVVdM3E8bC8lVi/eSo61TDMMIlLMZv87Z+zoBj9rmq+yf9/ywTS100c0OKmpI7Bqkf/uBBS9JWrGqZdTpmyKpcQ31uUb5Wlf2kqKntamVHFEYpRO0/p53EigZdMLLrlCM/W9ANMiivIgCdWGBY72qKFaSGp3iFmo;
	4:aaX1AJMNZR/PmpOPwFu3/U+aAntPxaYNL74xt9PJRIKdrFKDLMMBfV/XsBE2bAmeIZ8Bq+uLfU1JC1Vn2npDHPlNB7EAR+X0gl3FvYVuFJxNJnLqN6QWRsxrXzFC444Z5zHvOOAiYMEOw2QnLGYMj3OJ7zPaXHV6t9PCY5OfkHuSh8f9e+DFiE26qEpQg1fndaHj2nbMYeB05ZNir7+La2TbT+D2ziGrLs2tTKXm3wKczUsnz+Tdgc0fCpA9vBVI75rO2jKgfdeiUBFtFRQ4KoBPuriS9KGibsW9MLb5saI8JUzYZ/CfYyo9ttsDSw364BY3r145y14C3PAzAIVtow==
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB01526662B87CB7BB27728758E5780@CY1PR12MB0152.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(10201501046)(3002001)(93006095)(93001095)(100000703101)(100105400095)(6055026)(6041248)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(20161123555025)(20161123562025)(20161123564025)(20161123558100)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY1PR12MB0152; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY1PR12MB0152; 
X-Forefront-PRVS: 04433051BF
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(376002)(39860400002)(199003)(189002)(3846002)(25786009)(6116002)(53416004)(106356001)(8936002)(4326008)(54906003)(1076002)(6486002)(50226002)(8676002)(305945005)(50466002)(5003940100001)(81156014)(48376002)(81166006)(6666003)(68736007)(36756003)(189998001)(7736002)(105586002)(97736004)(53936002)(2950100002)(101416001)(478600001)(16526017)(16586007)(76176999)(50986999)(316002)(47776003)(66066001)(86362001)(33646002)(5660300001)(2906002)(309714004);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0152;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0152;
	23:aA49R5kjj2PRkThG5iAON21eOYvopGo1tKVvJOj+E?=
	=?us-ascii?Q?qtF4i3lnBv3FyMrfCNH4bPvv1gQflubXJdTjHmfW+t/NOforFfysQTSI3gBz?=
	=?us-ascii?Q?l3MavgMyy93vLzAnqWOTZ2YQ+YIi81D3Wwi/QgcYqViy5KU1EBnkVIgIQYt0?=
	=?us-ascii?Q?FvmYQjoHbBpV1rsMlJKGluOs0+Pp8UP6ZkaEaOyq8PxpdKLcCTzyJl+4S8pj?=
	=?us-ascii?Q?Kjs0y8uW5UJuUiD4opXi0mBFCyZGAaIwhhPe3I7W4p8LBNprjXbLkcHn5P+k?=
	=?us-ascii?Q?lemxhIrxd+kIdFY8ThXQInERIltEiYxbDf1z5oBFyGXdou2fsnKjT4Nw4Sfn?=
	=?us-ascii?Q?+jqW2BCVSvdJY/lsmtarVs0H9jKyZo4SBH0zT5pxQcMeU6IUikzjjkwbqFVc?=
	=?us-ascii?Q?SCEomvXTpZ5Qxsdjw7H3qVQqaibR9W6t3kFl2GC5SRG5BdofgnMvJ6eG2mPm?=
	=?us-ascii?Q?VpfwkLcyUujd7Y60YAwtmn8eFlYECJreMDdOdROMIKIOohzvxnvSUci986rp?=
	=?us-ascii?Q?S2mxaixSgyk7D2Ylux9YtpbQjSJiBYgXxSUCmSfuPK6b9p5ltmdV+bRkujXT?=
	=?us-ascii?Q?rRu/0eSeShBYxBVDJ1p5Z0sx9o5Pxpr+1SChApplefsPE9f7Pu/8iMiI2qnz?=
	=?us-ascii?Q?l5Qhyfad8db4g6assOiWhrwdA1r19/Nr7+d3j8a+t1Y8wnrjUfcbDN0AwOXu?=
	=?us-ascii?Q?ZmZNDGzpt6+PBdJUmFUD1rd/fBOu0ysUqk9VzwuGftu4U73y5AcvlHUBM9s9?=
	=?us-ascii?Q?kD4U9CNNBzqWgNj0GupY0TocQy5JjsEY+WWJ2zaS0L/Z9XKLWfXefQzo0cMA?=
	=?us-ascii?Q?/a2BleHsouLgLqtVvVrpnGwQOEgzntU9CNuTiKBrro2dQ7ceid8kIyeREcXK?=
	=?us-ascii?Q?cxzvPb/UWfKjY3DacQ/JdUYTH19AT0gydrnxNQV0eTdiMIi9tkLuKU6ZY8/7?=
	=?us-ascii?Q?DUXJJSjsCu3ah4gZJfwbao+tMuHb64w73rMyD+SJHegwzDFx83CZMWwvXTqI?=
	=?us-ascii?Q?MOrkNrq2cYriK8t5rqsoALYhQbBl6RMGLnAqhjpOO71s3c1FfMOdbOSPQSvb?=
	=?us-ascii?Q?50M/Xp0KjTKFcpKpKcH+ajx9lDhRCQheV2wqhqqE4SDrlZ3eA6rp29T6cvt+?=
	=?us-ascii?Q?haY4ci4r4w=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	6:S8i4Beo5iK2M+5mJrA1X0wOpTxoJ3tnvCxhlil+YgaNter2QETWUfKNcO1c+Gov1yeS6GUqLgNrxPzsTfIGOiCuVMutz8XNRkffM/VoBueGOrh8JVS8Jq3iyiH288WyfO4lsN09orzhwuPtC0CqzJ+aW8FQGbv9S4pP5UJIVZ0mYdjADDk5XCDhNTO0L8a23wtVNTE6uDkUphPbYJRP1+UDSalYeieyNkpKOCUHbPZwe5dmkdhSlLuHGVYomX1pTMi+GuUkqhALKvUou+xFsxDY/OfeW2SjcCZ4mn57TpEUj6AJYuWFVebLmPL+//3BHDwOXILq07I+SCDRK3XO2vA==;
	5:yIc6UhKtgbCaTYIi9cg6HCCRqKP2WYP9nj9whVBkZS8hcQz6WDo+zK5L/IAGzlfsUKxLZexlJxWqZriSHUgvHxW9HQvq5N4iiDfP05KA8U3MONJfSTsPLP8WYheYmKf1dYd/PnSZVfC8dU8S29Y8Gg==;
	24:R/QjmCrT6dDwUDh05UqVLLV1Cq6AjRn2ShSdfixkdGG1K/lWJD4ZXNtXN4590+oMFydObFWx6ZWnssPNtni3etOmFwHAcJe1oXiQ4ZpQh9s=;
	7:hsL7H4ul397Nse/XKOKzN0C5aBgARmuepbQlpDir0cR2hoy5LSIu0Vi1ZnxrvqoI5tOzz/8PvNu0Nh2UPATwghQ/FXEp0nJlHQqUaP/0drJebR3p7QfSsFJ3yj6JMwYStp/hz6H8jYPv9Kw+uENERqoe0v/dQ0F0ZZA/SVoRYndx2UaqjmQ+ztVZftgPoiYlHlO6rcTeih3WCqdWuGnv3ulE7q/+q9oji/x7+prH3Sc=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:27bE9/VUoTUsL8H6xcsEhn6YnGgJz/s1np9JtUpcLechQofftlrLrNSb9QF/NKQBj6OwrwQwI9NtxZu9K2viUAJe2zVQ+YBDhSpXfLcz7GZvy6qU1Hj/x3yp2Kc4Y3EtPvHeGcgS+RCiaK4EWx9fM6CTym8ayfsMrCfQBjgD3Id8eDXy+PC7mru58zf1yAX+OUJnh4PFMkV7zf91394WAieHlV/TmGsOpfWOS5D73KQOpxQq9C7Mjy+5DJMagQr2
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 27 Sep 2017 15:13:46.5876
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0152
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 27, 2017, 3:13 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encrypted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org
Cc: x86@kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |  6 ++++++
 arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++
 include/linux/mem_encrypt.h        |  7 +++++--
 3 files changed, 37 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 28, 2017, 9:02 a.m.</div>
<pre class="content">
On Wed, Sep 27, 2017 at 10:13:14AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encrypted Virtualization (SEV). This initial</span>
<span class="quote">&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |  6 ++++++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        |  7 +++++--</span>
<span class="quote">&gt;  3 files changed, 37 insertions(+), 2 deletions(-)</span>
<span class="reviewed-by">
Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">
&gt; +bool sev_active(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return sme_me_mask &amp;&amp; sev_enabled;</span>

What I&#39;m still missing is the chicken bit. I.e., to be able to boot with
&quot;mem_encrypt=smeonly&quot; or so, which disables the SEV side but can still
allow SME. For when SEV has issues and people want to disable it.

You can do the patch ontop of those and send it as a reply to this
thread - no need to wait to resend the whole thing again.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 28, 2017, 6:48 p.m.</div>
<pre class="content">
Hi Boris,

On 09/28/2017 04:02 AM, Borislav Petkov wrote:
...
<span class="quote">
&gt;&gt; +bool sev_active(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What I&#39;m still missing is the chicken bit. I.e., to be able to boot with</span>
<span class="quote">&gt; &quot;mem_encrypt=smeonly&quot; or so, which disables the SEV side but can still</span>
<span class="quote">&gt; allow SME. For when SEV has issues and people want to disable it.</span>
<span class="quote">&gt; </span>


Let me understand the ask, are you saying that we need a method to disable the SEV
feature from the host OS so that Hypervisor will not be able to create a SEV guest?
Because once a guest is booted with SEV feature, there is no way to disable the SEV
feature from the guest.

i.e if &quot;mem_encrypt=smeonly&quot; is set then we clear X86_FEATURE_SEV capability flag
defined in [1].

[1] https://marc.info/?l=linux-kernel&amp;m=150585470323923&amp;w=2
<span class="quote">

&gt; You can do the patch ontop of those and send it as a reply to this</span>
<span class="quote">&gt; thread - no need to wait to resend the whole thing again.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 28, 2017, 7:23 p.m.</div>
<pre class="content">
Hi,

On Thu, Sep 28, 2017 at 01:48:48PM -0500, Brijesh Singh wrote:
<span class="quote">&gt; Let me understand the ask, are you saying that we need a method to disable the SEV</span>
<span class="quote">&gt; feature from the host OS so that Hypervisor will not be able to create a SEV guest?</span>
<span class="quote">&gt; Because once a guest is booted with SEV feature, there is no way to disable the SEV</span>
<span class="quote">&gt; feature from the guest.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; i.e if &quot;mem_encrypt=smeonly&quot; is set then we clear X86_FEATURE_SEV capability flag</span>
<span class="quote">&gt; defined in [1].</span>

So actually we need chicken bits to be able to *enable* both when
CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT is not set.

I.e.,

* mem_encrypt=on - both SME and SEV enabled

* mem_encrypt=smeonly - only SME, no SEV on the host. This option will
basically prevent from using any SEV guests and make the SEV part of the
code inactive. I.e., sev_active() and sev_enabled should be false. As
you say above, we should clear X86_FEATURE_SEV, yes.

* mem_encrypt=off - neither SME/SEV are enabled.

And =on and =off we already have.

How does that sound?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 29, 2017, 12:28 p.m.</div>
<pre class="content">
On 9/28/17 2:23 PM, Borislav Petkov wrote:
...
<span class="quote">&gt; So actually we need chicken bits to be able to *enable* both when</span>
<span class="quote">&gt; CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT is not set.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I.e.,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; * mem_encrypt=on - both SME and SEV enabled</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; * mem_encrypt=smeonly - only SME, no SEV on the host. This option will</span>
<span class="quote">&gt; basically prevent from using any SEV guests and make the SEV part of the</span>
<span class="quote">&gt; code inactive. I.e., sev_active() and sev_enabled should be false. As</span>
<span class="quote">&gt; you say above, we should clear X86_FEATURE_SEV, yes.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; * mem_encrypt=off - neither SME/SEV are enabled.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And =on and =off we already have.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; How does that sound?</span>

if we are adding a chicken bits then I think we should do it for both
&quot;smeonly&quot; and &quot;sevonly&quot;. We can boot host OS with SME disabled and SEV
enabled, and still be able to create the SEV guest from the hypervisor.

How about this ?

mem_encrypt=on     both SME and SEV enabled
mem_encrypt=sev    only SEV enabled
mem_encrypt=sme   only SME enabled
mem_encrypt=off     neither SME/SEV are enabled

-Brijesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 29, 2017, 2:41 p.m.</div>
<pre class="content">
On Fri, Sep 29, 2017 at 07:28:47AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; if we are adding a chicken bits then I think we should do it for both</span>
<span class="quote">&gt; &quot;smeonly&quot; and &quot;sevonly&quot;. We can boot host OS with SME disabled and SEV</span>
<span class="quote">&gt; enabled, and still be able to create the SEV guest from the hypervisor.</span>

Sure, but is that a real use case? I mean, who would want to run
encrypted guests on an unencrypted hypervisor?
<span class="quote">
&gt; How about this ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mem_encrypt=on     both SME and SEV enabled</span>
<span class="quote">&gt; mem_encrypt=sev    only SEV enabled</span>
<span class="quote">&gt; mem_encrypt=sme   only SME enabled</span>
<span class="quote">&gt; mem_encrypt=off     neither SME/SEV are enabled</span>

I like those short mnemonics, ACK. Less typing is always good.

Thx.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 29, 2017, 3:54 p.m.</div>
<pre class="content">
On 09/29/2017 09:41 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Sep 29, 2017 at 07:28:47AM -0500, Brijesh Singh wrote:</span>
<span class="quote">&gt;&gt; if we are adding a chicken bits then I think we should do it for both</span>
<span class="quote">&gt;&gt; &quot;smeonly&quot; and &quot;sevonly&quot;. We can boot host OS with SME disabled and SEV</span>
<span class="quote">&gt;&gt; enabled, and still be able to create the SEV guest from the hypervisor.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sure, but is that a real use case? I mean, who would want to run</span>
<span class="quote">&gt; encrypted guests on an unencrypted hypervisor?</span>
<span class="quote">&gt; </span>

In production, you do not want to run encrypted guest on an unencrypted
hypervisor -- I was thinking about the debug environment. We can start
with mem_encrypt=sme and if we see the need for &#39;sev&#39; arg then we can
extend it later.

I am working on the patch and will send for the review. thanks

-Brijesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 29, 2017, 3:56 p.m.</div>
<pre class="content">
On Fri, Sep 29, 2017 at 10:54:39AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; In production, you do not want to run encrypted guest on an unencrypted</span>
<span class="quote">&gt; hypervisor -- I was thinking about the debug environment. We can start</span>
<span class="quote">&gt; with mem_encrypt=sme and if we see the need for &#39;sev&#39; arg then we can</span>
<span class="quote">&gt; extend it later.</span>

Yap, exactly.
<span class="quote">
&gt; I am working on the patch and will send for the review. thanks</span>

Thanks.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 6a77c63540f7..2b024741bce9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void);</span>
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);
 
<span class="p_add">+bool sme_active(void);</span>
<span class="p_add">+bool sev_active(void);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_chunk">@@ -64,6 +67,9 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 3fcc8e01683b..5ad6ea61bd1a 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -40,6 +40,8 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 u64 sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+static bool sev_enabled;</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_chunk">@@ -190,6 +192,30 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * SME and SEV are very similar but they are not the same, so there are</span>
<span class="p_add">+ * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="p_add">+ * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="p_add">+ * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The trampoline code is a good example for this requirement.  Before</span>
<span class="p_add">+ * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="p_add">+ * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="p_add">+ * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="p_add">+ * the trampoline area must be encrypted.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool sme_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="p_add">+</span>
<span class="p_add">+bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 265a9cd21cb4..b310a9c18113 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -23,11 +23,14 @@</span> <span class="p_context"></span>
 
 #define sme_me_mask	0ULL
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-static inline bool sme_active(void)</span>
<span class="p_add">+static inline bool mem_encrypt_active(void)</span>
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return sme_me_mask;</span>
 }
 
 static inline u64 sme_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



