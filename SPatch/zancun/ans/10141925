
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[6/6] hugetlb, mempolicy: fix the mbind hugetlb migration - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [6/6] hugetlb, mempolicy: fix the mbind hugetlb migration</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 9:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103093213.26329-7-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10141925/mbox/"
   >mbox</a>
|
   <a href="/patch/10141925/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10141925/">/patch/10141925/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DFE7A60594 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:33:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C716928D53
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:33:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C58E729029; Wed,  3 Jan 2018 09:33:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 91D922902A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:33:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752162AbeACJdV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 04:33:21 -0500
Received: from mail-pg0-f68.google.com ([74.125.83.68]:35027 &quot;EHLO
	mail-pg0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752119AbeACJck (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 04:32:40 -0500
Received: by mail-pg0-f68.google.com with SMTP id b70so505677pga.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Jan 2018 01:32:40 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=VYsbMoM02msnEAD2ybBMbTC3hELM6ErbUDvVrnzIEuM=;
	b=FvIHzEEmCEdh9gG3h8DvrTFnNVn2aYQPoJtdDXQy7EwA5Hum8GA2D2d2Y+5QPCNwS/
	b2p9JdWIBd78vJtx5tmwVbyeij6hNXsyrRE1Wc7PTz6NhjnfskqoZvDfyYsgKGTr3eYs
	G35iwu5e0XLewqX+Lsbmz4/r5GcdvUd1X7GMpXPzXt7+L8K+7BkSRiSNZubBua0KGXbP
	UAiNPLEJlPW09mZynQuKiFJPuUZfMLy4x310bsdPQLxeY9GAuEiWy18APsdmVxI/tivj
	UlFlp2oUR3Up/EmstjClqKkF0apwFsXEt+Vkn0TkDNJlgYkuQvUl8xqFYSrb6FxIdemr
	Kc4w==
X-Gm-Message-State: AKGB3mJYEENaf7K2aAefZeeE/rDq0a3tbOFEFuOkIih3q2Xt7UVQ2crI
	SVWlsUyYbqrVnUXYmLhfwX0=
X-Google-Smtp-Source: ACJfBotkBmh9tZxQ0anLzvnk1B+KUiOx5AwJMveppcpPRkcuKkKd06jcNrZi1tAH/gGFK5trgf/A6A==
X-Received: by 10.98.248.67 with SMTP id c3mr848380pfm.205.1514971959697;
	Wed, 03 Jan 2018 01:32:39 -0800 (PST)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	c2sm1790628pgq.48.2018.01.03.01.32.37
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 03 Jan 2018 01:32:39 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: &lt;linux-mm@kvack.org&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 6/6] hugetlb, mempolicy: fix the mbind hugetlb migration
Date: Wed,  3 Jan 2018 10:32:13 +0100
Message-Id: &lt;20180103093213.26329-7-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
References: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 3, 2018, 9:32 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

do_mbind migration code relies on alloc_huge_page_noerr for hugetlb
pages. alloc_huge_page_noerr uses alloc_huge_page which is a highlevel
allocation function which has to take care of reserves, overcommit or
hugetlb cgroup accounting.  None of that is really required for the page
migration because the new page is only temporal and either will replace
the original page or it will be dropped. This is essentially as for
other migration call paths and there shouldn&#39;t be any reason to handle
mbind in a special way.

The current implementation is even suboptimal because the migration
might fail just because the hugetlb cgroup limit is reached, or the
overcommit is saturated.

Fix this by making mbind like other hugetlb migration paths. Add
a new migration helper alloc_huge_page_vma as a wrapper around
alloc_huge_page_nodemask with additional mempolicy handling.

alloc_huge_page_noerr has no more users and it can go.
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/hugetlb.h |  5 ++---
 mm/hugetlb.c            | 33 +++++++++++++++++++--------------
 mm/mempolicy.c          |  3 +--
 3 files changed, 22 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index 66992348531e..612a29b7f6c6 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -356,10 +356,9 @@</span> <span class="p_context"> struct huge_bootmem_page {</span>
 struct page *alloc_huge_page(struct vm_area_struct *vma,
 				unsigned long addr, int avoid_reserve);
 struct page *alloc_huge_page_node(struct hstate *h, int nid);
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve);</span>
 struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,
 				nodemask_t *nmask);
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address);</span>
 int huge_add_to_page_cache(struct page *page, struct address_space *mapping,
 			pgoff_t idx);
 
<span class="p_chunk">@@ -537,7 +536,7 @@</span> <span class="p_context"> struct hstate {};</span>
 #define alloc_huge_page(v, a, r) NULL
 #define alloc_huge_page_node(h, nid) NULL
 #define alloc_huge_page_nodemask(h, preferred_nid, nmask) NULL
<span class="p_del">-#define alloc_huge_page_noerr(v, a, r) NULL</span>
<span class="p_add">+#define alloc_huge_page_vma(vma, address) NULL</span>
 #define alloc_bootmem_huge_page(h) NULL
 #define hstate_file(f) NULL
 #define hstate_sizelog(s) NULL
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 60acd3e93a95..ffcae114ceed 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1674,6 +1674,25 @@</span> <span class="p_context"> struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
 	return alloc_migrate_huge_page(h, gfp_mask, preferred_nid, nmask);
 }
 
<span class="p_add">+/* mempolicy aware migration callback */</span>
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mempolicy *mpol;</span>
<span class="p_add">+	nodemask_t *nodemask;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	struct hstate *h;</span>
<span class="p_add">+	gfp_t gfp_mask;</span>
<span class="p_add">+	int node;</span>
<span class="p_add">+</span>
<span class="p_add">+	h = hstate_vma(vma);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h);</span>
<span class="p_add">+	node = huge_node(vma, address, gfp_mask, &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+	page = alloc_huge_page_nodemask(h, node, nodemask);</span>
<span class="p_add">+	mpol_cond_put(mpol);</span>
<span class="p_add">+</span>
<span class="p_add">+	return page;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Increase the hugetlb pool such that it can accommodate a reservation
  * of size &#39;delta&#39;.
<span class="p_chunk">@@ -2079,20 +2098,6 @@</span> <span class="p_context"> struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	return ERR_PTR(-ENOSPC);
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * alloc_huge_page()&#39;s wrapper which simply returns the page if allocation</span>
<span class="p_del">- * succeeds, otherwise NULL. This function is called from new_vma_page(),</span>
<span class="p_del">- * where no ERR_VALUE is expected to be returned.</span>
<span class="p_del">- */</span>
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct page *page = alloc_huge_page(vma, addr, avoid_reserve);</span>
<span class="p_del">-	if (IS_ERR(page))</span>
<span class="p_del">-		page = NULL;</span>
<span class="p_del">-	return page;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 int alloc_bootmem_huge_page(struct hstate *h)
 	__attribute__ ((weak, alias(&quot;__alloc_bootmem_huge_page&quot;)));
 int __alloc_bootmem_huge_page(struct hstate *h)
<span class="p_header">diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="p_header">index b6f4fcf9df64..30e68da64873 100644</span>
<span class="p_header">--- a/mm/mempolicy.c</span>
<span class="p_header">+++ b/mm/mempolicy.c</span>
<span class="p_chunk">@@ -1097,8 +1097,7 @@</span> <span class="p_context"> static struct page *new_page(struct page *page, unsigned long start)</span>
 	}
 
 	if (PageHuge(page)) {
<span class="p_del">-		BUG_ON(!vma);</span>
<span class="p_del">-		return alloc_huge_page_noerr(vma, address, 1);</span>
<span class="p_add">+		return alloc_huge_page_vma(vma, address);</span>
 	} else if (PageTransHuge(page)) {
 		struct page *thp;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



