
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.10,080/250] mm/hugetlb.c: fix reservation race when freeing surplus pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.10,080/250] mm/hugetlb.c: fix reservation race when freeing surplus pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2017, 10:57 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1496876436-32402-81-git-send-email-w@1wt.eu&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9773431/mbox/"
   >mbox</a>
|
   <a href="/patch/9773431/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9773431/">/patch/9773431/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F059E60350 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 23:49:01 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E703426224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 23:49:01 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DB79128396; Wed,  7 Jun 2017 23:49:01 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E694D26224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 23:49:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753097AbdFGXs6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Jun 2017 19:48:58 -0400
Received: from wtarreau.pck.nerim.net ([62.212.114.60]:50488 &quot;EHLO 1wt.eu&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752865AbdFGXEI (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Jun 2017 19:04:08 -0400
Received: (from willy@localhost)
	by pcw.home.local (8.15.2/8.15.2/Submit) id v57N16gq000312;
	Thu, 8 Jun 2017 01:01:06 +0200
From: Willy Tarreau &lt;w@1wt.eu&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org, linux@roeck-us.net
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Masayoshi Mizuma &lt;m.mizuma@jp.fujitsu.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;, Willy Tarreau &lt;w@1wt.eu&gt;
Subject: [PATCH 3.10 080/250] mm/hugetlb.c: fix reservation race when
	freeing surplus pages
Date: Thu,  8 Jun 2017 00:57:46 +0200
Message-Id: &lt;1496876436-32402-81-git-send-email-w@1wt.eu&gt;
X-Mailer: git-send-email 2.8.0.rc2.1.gbe9624a
In-Reply-To: &lt;1496876436-32402-1-git-send-email-w@1wt.eu&gt;
References: &lt;1496876436-32402-1-git-send-email-w@1wt.eu&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a> - June 7, 2017, 10:57 p.m.</div>
<pre class="content">
<span class="from">From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

commit e5bbc8a6c992901058bc09e2ce01d16c111ff047 upstream.

return_unused_surplus_pages() decrements the global reservation count,
and frees any unused surplus pages that were backing the reservation.

Commit 7848a4bf51b3 (&quot;mm/hugetlb.c: add cond_resched_lock() in
return_unused_surplus_pages()&quot;) added a call to cond_resched_lock in the
loop freeing the pages.

As a result, the hugetlb_lock could be dropped, and someone else could
use the pages that will be freed in subsequent iterations of the loop.
This could result in inconsistent global hugetlb page state, application
api failures (such as mmap) failures or application crashes.

When dropping the lock in return_unused_surplus_pages, make sure that
the global reservation count (resv_huge_pages) remains sufficiently
large to prevent someone else from claiming pages about to be freed.

Analyzed by Paul Cassella.

Fixes: 7848a4bf51b3 (&quot;mm/hugetlb.c: add cond_resched_lock() in return_unused_surplus_pages()&quot;)
Link: http://lkml.kernel.org/r/1483991767-6879-1-git-send-email-mike.kravetz@oracle.com
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
Reported-by: Paul Cassella &lt;cassella@cray.com&gt;
Suggested-by: Michal Hocko &lt;mhocko@kernel.org&gt;
Cc: Masayoshi Mizuma &lt;m.mizuma@jp.fujitsu.com&gt;
Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Willy Tarreau &lt;w@1wt.eu&gt;</span>
---
 mm/hugetlb.c | 37 ++++++++++++++++++++++++++++---------
 1 file changed, 28 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index e9fd382..6983229 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1070,23 +1070,32 @@</span> <span class="p_context"> free:</span>
 }
 
 /*
<span class="p_del">- * When releasing a hugetlb pool reservation, any surplus pages that were</span>
<span class="p_del">- * allocated to satisfy the reservation must be explicitly freed if they were</span>
<span class="p_del">- * never used.</span>
<span class="p_del">- * Called with hugetlb_lock held.</span>
<span class="p_add">+ * This routine has two main purposes:</span>
<span class="p_add">+ * 1) Decrement the reservation count (resv_huge_pages) by the value passed</span>
<span class="p_add">+ *    in unused_resv_pages.  This corresponds to the prior adjustments made</span>
<span class="p_add">+ *    to the associated reservation map.</span>
<span class="p_add">+ * 2) Free any unused surplus pages that may have been allocated to satisfy</span>
<span class="p_add">+ *    the reservation.  As many as unused_resv_pages may be freed.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Called with hugetlb_lock held.  However, the lock could be dropped (and</span>
<span class="p_add">+ * reacquired) during calls to cond_resched_lock.  Whenever dropping the lock,</span>
<span class="p_add">+ * we must make sure nobody else can claim pages we are in the process of</span>
<span class="p_add">+ * freeing.  Do this by ensuring resv_huge_page always is greater than the</span>
<span class="p_add">+ * number of huge pages we plan to free when dropping the lock.</span>
  */
 static void return_unused_surplus_pages(struct hstate *h,
 					unsigned long unused_resv_pages)
 {
 	unsigned long nr_pages;
 
<span class="p_del">-	/* Uncommit the reservation */</span>
<span class="p_del">-	h-&gt;resv_huge_pages -= unused_resv_pages;</span>
<span class="p_del">-</span>
 	/* Cannot return gigantic pages currently */
 	if (h-&gt;order &gt;= MAX_ORDER)
<span class="p_del">-		return;</span>
<span class="p_add">+		goto out;</span>
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Part (or even all) of the reservation could have been backed</span>
<span class="p_add">+	 * by pre-allocated pages. Only free surplus pages.</span>
<span class="p_add">+	 */</span>
 	nr_pages = min(unused_resv_pages, h-&gt;surplus_huge_pages);
 
 	/*
<span class="p_chunk">@@ -1096,12 +1105,22 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
 	 * when the nodes with surplus pages have no free pages.
 	 * free_pool_huge_page() will balance the the freed pages across the
 	 * on-line nodes with memory and will handle the hstate accounting.
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Note that we decrement resv_huge_pages as we free the pages.  If</span>
<span class="p_add">+	 * we drop the lock, resv_huge_pages will still be sufficiently large</span>
<span class="p_add">+	 * to cover subsequent pages we may free.</span>
 	 */
 	while (nr_pages--) {
<span class="p_add">+		h-&gt;resv_huge_pages--;</span>
<span class="p_add">+		unused_resv_pages--;</span>
 		if (!free_pool_huge_page(h, &amp;node_states[N_MEMORY], 1))
<span class="p_del">-			break;</span>
<span class="p_add">+			goto out;</span>
 		cond_resched_lock(&amp;hugetlb_lock);
 	}
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	/* Fully uncommit the reservation */</span>
<span class="p_add">+	h-&gt;resv_huge_pages -= unused_resv_pages;</span>
 }
 
 /*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



