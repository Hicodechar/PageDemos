
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv10,1/2] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv10,1/2] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 28, 2016, 11:35 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160628113539.13606-2-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9203001/mbox/"
   >mbox</a>
|
   <a href="/patch/9203001/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9203001/">/patch/9203001/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	48B246075F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Jun 2016 11:37:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 39184285F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Jun 2016 11:37:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2D307285FC; Tue, 28 Jun 2016 11:37:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DF17B285F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Jun 2016 11:37:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752577AbcF1LhJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 28 Jun 2016 07:37:09 -0400
Received: from mail-db3on0122.outbound.protection.outlook.com
	([157.55.234.122]:21403
	&quot;EHLO emea01-db3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752342AbcF1LhE (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 28 Jun 2016 07:37:04 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1; h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=VOFL5WsMENiIW7DXCQH6COsHYkkIdxw7NmkrFXOmRD4=;
	b=eBxBhyqMv3DAYmh+G83aET3Gi/bc6yKS244KFjiofybrcF1x2EwAiE/KmQ8emWN1wsDXi2goTmyI7LHCx7hEyZ1vfONWQC/FZXB39Nb8xM8V9PucwqLt7h5HLiitm1ibZ0o6KKZgFJ4Zdyo3KYHfy0g/lcJOFHkMluSmS2a57gk=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=dsafonov@virtuozzo.com; 
Received: from dsafonov.sw.ru (195.214.232.10) by
	HE1PR0801MB1737.eurprd08.prod.outlook.com (10.168.149.149) with
	Microsoft
	SMTP Server (TLS) id 15.1.523.12; Tue, 28 Jun 2016 11:36:57 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;0x7f454c46@gmail.com&gt;, &lt;mingo@redhat.com&gt;, &lt;luto@kernel.org&gt;,
	&lt;linux-mm@kvack.org&gt;, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;
Subject: [PATCHv10 1/2] x86/vdso: add mremap hook to vm_special_mapping
Date: Tue, 28 Jun 2016 14:35:38 +0300
Message-ID: &lt;20160628113539.13606-2-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.9.0
In-Reply-To: &lt;20160628113539.13606-1-dsafonov@virtuozzo.com&gt;
References: &lt;20160628113539.13606-1-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: AMSPR02CA0032.eurprd02.prod.outlook.com (10.242.225.160)
	To
	HE1PR0801MB1737.eurprd08.prod.outlook.com (10.168.149.149)
X-MS-Office365-Filtering-Correlation-Id: 223899c1-b06e-45e4-7bfd-08d39f4883f0
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1737;
	2:BosetKZss8WKvzTfwVz0bqolfutcA2YWG76UUQU8EPeItq+Zux8jbuo8W8GsakCXhNAERcQ07sRzEkiJN5yKnvFwbVbkzej+0VXqOiAESeoAYoYsnuCcIYgPaOkZMdmSlrgcd7xn29m1D2wNV0Togj4LbtDU3bmWNESerCtqYNipEJjLAXi1fpqxojFK045n;
	3:tdLVOwAQzoB9O6mETNkH5X59Qi4M84VfRX8Zak6bnGdUjXReI27uDmqV/ixibg5PpU623h6QoF2W2seg3SmjUa34T77BuGMj7d3XstrUDq4hO327XUqK+eqhaHxwyXFs
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:HE1PR0801MB1737;
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1737;
	25:YHHVc/J6JE2w+zTJaVkuj5ufiqEz7sgUiWLLvhuvjqQxTUoyp0usnh9U2ThFmWLbdLcRRJQpsR4CfE6BKim1WdLV9jlIyGdBm1tYBUoZrTdew3wElKE4/abKuP4GHxxpJCDVRSKAkemWsMFJK2EehhIyyhlMJcysUQ7PEwHEGgAAnTCXNo6Mx9bULnrTVGqGVG8DXHkH/Sui2AlUMWWfy+o34GgaJe0JJ6GuUxzUDawOK853XBBB7XfMZDSFS2Z42x8unfiY6ebg9d/i0WqEyrnAuSxnDPpMzkggl+VkMgA3+ao00n0Wl3/e/C7KrT7Z+ZhFUyy5z6DllsuM04pbapVB+I3V9Kr6ZRKZg1twluyTG9I/MOhqh1rKGPRQRphs9tCpWjwLuLYdI5imrwq+MqiAWGWf1QoP8y+0JT4hchn1z/d58Ba8WPwE8NJtl5mosbq8Nl6BEqWQigN9dn/rfbpxPao0P2/hZBNooOu2AQpsJSZaPBURY+GwKawuapTkS02nOOZH6pIUCAQhV7k7vNQMe6aTWHAkNL2b0GEkFwenrGSpnSxqe8CkmDTCzUqyKgKpo0lb6qGStj54PWZVZQgfubJ8MbBKrPi4HJ7bHlMPxrMVI0cmlrADucYvmkpmCBHb8H0uWlc7kgqPv2QUMMmSyYeUk1Fupr15qJLi2EH1DllOnja3aMtVSpMb8XLd+jGYsYyZjRHo2we3V0zxrw==
X-Microsoft-Antispam-PRVS: &lt;HE1PR0801MB17371E31F78B03D7D54E0DC4D1220@HE1PR0801MB1737.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(278428928389397)(17755550239193);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040130)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(6041072)(6043046);
	SRVR:HE1PR0801MB1737; BCL:0; PCL:0; RULEID:;
	SRVR:HE1PR0801MB1737; 
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1737;
	4:mmgHROQLv3naaQiwmKJZFebm6NZEbAlQBGlFIKVo3Ywm4dmxs0jOi5Qp5HTh/9nSxKkP/TEFNClAWTwLfHDHLyT8Baryl03Ft1A5SL2lS6w+ByS+muAUK/5kUkWSp0Eo9T00ziDDZ75ciS5vXAS9X63Ubs2KLTRpYbXyOYCpG7SbfmMUUtdylUP/yT7psCBbttgqVPH7b2DvD4SE0kpMl7FsmHmw9Qp41D2PQDmK6lB9qY9uqQF4M8qEFtqB2pQepGbIAmnaVXzQ3xVXreOid7ifAOfX+ZE+damg6/ZrfPjXZkaDhraUwHSz9eIA7CzU7BbhOIk5qKP6yB1lBA+GNs6+T1uICu1jjQZR8GL6AI7QR83oeP5Pv9inQqGVC4/zvxPsS7zZD/rP1AoGVV/aKl3ywgoFxuqD/HWoFw6XPSKyawLe6Yt/ftw0/eREsxNg95ynlyCzsKo27FvBgGekfilNmANhC+dpngXhpf09RI6kxkvfPzuoVtk2bPHYLr3z
X-Forefront-PRVS: 0987ACA2E2
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(7916002)(199003)(189002)(3846002)(105586002)(586003)(92566002)(53416004)(6116002)(5003940100001)(69596002)(19580405001)(19580395003)(7736002)(305945005)(81156014)(77096005)(81166006)(106356001)(8676002)(66066001)(47776003)(42186005)(1076002)(68736007)(33646002)(76176999)(7846002)(50466002)(97736004)(50226002)(229853001)(2906002)(101416001)(2351001)(2950100001)(110136002)(48376002)(4326007)(36756003)(189998001)(86362001)(575784001)(50986999);
	DIR:OUT; SFP:1102; SCL:1; SRVR:HE1PR0801MB1737;
	H:dsafonov.sw.ru; FPR:; SPF:None; PTR:InfoNoRecords; A:1; MX:1;
	LANG:en; 
Received-SPF: None (protection.outlook.com: virtuozzo.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; HE1PR0801MB1737;
	23:oVyrY4aX8SlgjNMhXhf8gsPNkBaDFbz3Vm89rA1?=
	=?us-ascii?Q?jK8/mogjTuJymGn45Z3oOEuwmw6KSQkdjreLMG1IIImlpefzcta3KttP4eH8?=
	=?us-ascii?Q?pac8NiZakGYW9CUKZwKeGc5vDxwaFHx7IovbPYJPf1mdDqLHxrq3FRARQbfK?=
	=?us-ascii?Q?WhYre04+qGj34SHcDTw8F919ICcTIaczYjeObJczR1lbBfMuVoTMFiOxoPXb?=
	=?us-ascii?Q?LUNNbfFmNkOB4tucoZzNqlfvfk9F660ZO/stG1Zgl56aR7YdW7m+JQr2LaTA?=
	=?us-ascii?Q?PR4/JC/nzH7RviOVYo546TL5cqjZoaFO9nPnHEUn2BEiwZ2xSwOOARqTQPod?=
	=?us-ascii?Q?oQGVA4hwRWVv4zBOr7rA3gmxe5Vu2+qBdrFkPzMcaGHKdzxCljy7BTyHnMW2?=
	=?us-ascii?Q?b2X6AH5H3y7KLmuOySC3TPc4FvBpftpH5bI0OlEDI1tYjDkIpU9YMur8yixC?=
	=?us-ascii?Q?P76/hRTRfIY7bq49gF6h+VJt06M0oS8kGkh1EVRFXVmWB+9V8kk9aW9gAdsL?=
	=?us-ascii?Q?19Yj+KPjBKq7hHonFic1KH6jEYBQnrj0FjeVtZt/VLFuTixCcLs+bGEZZkvC?=
	=?us-ascii?Q?gaIz9pdJlE6d4fSpCyOUrDm/RMzI+UFRgXg5RADUrwp71N+Bn0655LfegtFV?=
	=?us-ascii?Q?sjftGMNN2Xg41ucFtBxnccU1h3PtSs+4p1fENIggL7TNYcLcaj8ZCmjDJdO9?=
	=?us-ascii?Q?QrghiMdQThZ/ne6VIXejZt4JkzgdAwaDh4rrLZQn7d1fQ7cl8NqhdBAsI9DO?=
	=?us-ascii?Q?i0ZxKOaj+aKlJn3VIszYaL/W3U+GKCddPJl3FUtst0yd1SR/vD57RoqMdos/?=
	=?us-ascii?Q?rC4rTvNGoMfXFoCT/afKNoCl75PNPi8THHvNDCNw9TwWhfsZjv43bGnuMu7+?=
	=?us-ascii?Q?28x3tSYz+rmTUr3I/AwJykoy0FukgDVcz5JOPU1SZPxK2GyKGubn7yrf+rlN?=
	=?us-ascii?Q?YdBCvkIcAjCdPCc/aNJuq+jz9dGZ/ALTSDeX/yNPYZfOPCMqvdndBohxHAyE?=
	=?us-ascii?Q?2pDNsHbCGv+eNXhZYSXWOeEZS2D194xXcJl9UtHWeK30V7uh3o0uYPxiYxo9?=
	=?us-ascii?Q?gecH9iCo2Op+eBLX4SmF36tbgBRY5rl7Pow2qdrustvn1drjQY1GSpuGpDr7?=
	=?us-ascii?Q?To1HNIIm1nxMfEgoMr0bayFkZj2Ce6EDZbYF4t2Yxw8/1/H9pc1V22g=3D?=
	=?us-ascii?Q?=3D?=
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1737;
	6:iZjwK90pEIuKg4nBPjdAgHPhaMxUsZuabLFCHmJ9IoT4RmBockhSnYllG+qxMDZ4QNqtwh+SjPR0SMCd3nQLJvsUu8Ue4QXhiJrwnf/N5+vYxkPGAhCz3mfBadQuJ0DyXFsvSYG3bjWBF3SsDz+dQaHIRNAilZldMjqCYrcttlshMdI4x/tNUbWXZwUnXIccnx2gB1MPtPWasA6qCoNUFe9TdD0CMPkndFBc9DET96X2/tXNXYBhhaxfIxpfmzViCtH/flsa2ukl+IISJWG2HfkUR4CiCd3G9aWxoqHGEmL4qv828PuB3MKRYIv2XipIfZ9D2gqw9R5hDtpwa9FB8w==;
	5:2wPXUUwTRhGs/Yq3S6n+Nizv5sArQNAdAv4Y7rfDv/EuQ39XOSbopU4W6aEQ1HkyeEDto68BdvWCeGRKhWV7yC7zLXmJOmBguJVQ0tlEMaRrz5RAKYw9QEJdwCjePx1JZyGV6chNIiVqJ1kYNC7Fkg==;
	24:e18kuf2JMxlRlRytyEM20xe5OrUnYdloTTViFMWyaVPrNwj3M+Pawe6cyREDqQ9mnha1tdxJjJH7KvbRPICp0rJGssT+FprYBQjW2pnXog0=;
	7:yYfDWIX5FmdVj+5Mul66o2wDSqhcX5cf3KxMfPTC7PPtkhXJ3GGjPenPmDQzpczRa5MxdI14jNCk7Gt0Q2AwQpCVgbE6wkBOcxFFl4osKlVJz1aBrVpu3i6gT4PjySTepaOwKTnhcHbsxw6X78xzM0somz/YI6uF0OwvPh4wbiTYpj/KtwqUohfLM2s6UBqlfgFLg+sEOzgTPV8PWm5lrCZAI1ezIBX+hziEo33KWn2pKZF8hkRnJCF2/kn8XzgFINZrVAJPdPc0NugcyHGl5A==
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1737;
	20:ATHvyqc8F3Jl04KFI3msc/uVnWJroqVFvBbDUKEQzCrI5VIlQ278qaMJtmeREAEQWY8D8CLGqsM8NiYkuMfvWl4flImA+CCDoKCIFVBSCSoySUXVPEcnBAyio+4xuGbpA2DSyWq5VKMjoaY1cGdcnPDZhNpiapuc9D4JtBF/ZUA=
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Jun 2016 11:36:57.7219
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: HE1PR0801MB1737
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - June 28, 2016, 11:35 a.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: x86@kernel.org
Cc: linux-mm@kvack.org
<span class="acked-by">Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/entry/vdso/vma.c | 47 ++++++++++++++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 55 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - July 6, 2016, 2:03 p.m.</div>
<pre class="content">
On Tue, Jun 28, 2016 at 4:35 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;   Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;   #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;   #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="acked-by">
Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index ab220ac9b3b9..3329844e3c43 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -97,10 +98,40 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined CONFIG_X86_32 || defined CONFIG_IA32_EMULATION</span>
<span class="p_add">+	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (WARN_ON_ONCE(current-&gt;mm != new_vma-&gt;vm_mm))</span>
<span class="p_add">+		return -EFAULT;</span>
<span class="p_add">+</span>
<span class="p_add">+	vdso_fix_landing(image, new_vma);</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -151,6 +182,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -185,7 +222,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index e093e1d3285b..79472b22d23f 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -595,6 +595,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 25c2b4e0fbdc..86b18f334f4f 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2961,9 +2961,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



