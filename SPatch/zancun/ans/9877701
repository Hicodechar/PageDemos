
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,10/15] x86/kasan: explicitly zero kasan shadow memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,10/15] x86/kasan: explicitly zero kasan shadow memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 2, 2017, 8:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1501706304-869240-11-git-send-email-pasha.tatashin@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9877701/mbox/"
   >mbox</a>
|
   <a href="/patch/9877701/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9877701/">/patch/9877701/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B918B603B4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 20:42:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AA82328824
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 20:42:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9E8C42883B; Wed,  2 Aug 2017 20:42:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_SPAM,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1962828833
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 20:42:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753447AbdHBUmG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 2 Aug 2017 16:42:06 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:29280 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752116AbdHBUjg (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 2 Aug 2017 16:39:36 -0400
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v72KcbMZ024938
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 2 Aug 2017 20:38:38 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id
	v72Kcbpj025007
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 2 Aug 2017 20:38:37 GMT
Received: from abhmp0001.oracle.com (abhmp0001.oracle.com [141.146.116.7])
	by aserv0121.oracle.com (8.14.4/8.13.8) with ESMTP id v72KcbRP021790; 
	Wed, 2 Aug 2017 20:38:37 GMT
Received: from ca-ldom-ol-build-1.us.oracle.com (/10.129.68.23)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 02 Aug 2017 13:38:37 -0700
From: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;
To: linux-kernel@vger.kernel.org, sparclinux@vger.kernel.org,
	linux-mm@kvack.org, linuxppc-dev@lists.ozlabs.org,
	linux-s390@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	x86@kernel.org, kasan-dev@googlegroups.com, borntraeger@de.ibm.com,
	heiko.carstens@de.ibm.com, davem@davemloft.net,
	willy@infradead.org, mhocko@kernel.org
Subject: [v4 10/15] x86/kasan: explicitly zero kasan shadow memory
Date: Wed,  2 Aug 2017 16:38:19 -0400
Message-Id: &lt;1501706304-869240-11-git-send-email-pasha.tatashin@oracle.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1501706304-869240-1-git-send-email-pasha.tatashin@oracle.com&gt;
References: &lt;1501706304-869240-1-git-send-email-pasha.tatashin@oracle.com&gt;
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a> - Aug. 2, 2017, 8:38 p.m.</div>
<pre class="content">
To optimize the performance of struct page initialization,
vmemmap_populate() will no longer zero memory.

We must explicitly zero the memory that is allocated by vmemmap_populate()
for kasan, as this memory does not go through struct page initialization
path.
<span class="signed-off-by">
Signed-off-by: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Steven Sistare &lt;steven.sistare@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Daniel Jordan &lt;daniel.m.jordan@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Bob Picco &lt;bob.picco@oracle.com&gt;</span>
---
 arch/x86/mm/kasan_init_64.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 02c9d7553409..7d06cf0b0b6e 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -84,6 +84,28 @@</span> <span class="p_context"> static struct notifier_block kasan_die_notifier = {</span>
 };
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Memory that was allocated by vmemmap_populate is not zeroed, so we must</span>
<span class="p_add">+ * zero it here explicitly.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void</span>
<span class="p_add">+zero_vemmap_populated_memory(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u64 i, start, end;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; E820_MAX_ENTRIES &amp;&amp; pfn_mapped[i].end; i++) {</span>
<span class="p_add">+		void *kaddr_start = pfn_to_kaddr(pfn_mapped[i].start);</span>
<span class="p_add">+		void *kaddr_end = pfn_to_kaddr(pfn_mapped[i].end);</span>
<span class="p_add">+</span>
<span class="p_add">+		start = (u64)kasan_mem_to_shadow(kaddr_start);</span>
<span class="p_add">+		end = (u64)kasan_mem_to_shadow(kaddr_end);</span>
<span class="p_add">+		memset((void *)start, 0, end - start);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	start = (u64)kasan_mem_to_shadow(_stext);</span>
<span class="p_add">+	end = (u64)kasan_mem_to_shadow(_end);</span>
<span class="p_add">+	memset((void *)start, 0, end - start);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init kasan_early_init(void)
 {
 	int i;
<span class="p_chunk">@@ -156,6 +178,13 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 		pte_t pte = __pte(__pa(kasan_zero_page) | __PAGE_KERNEL_RO);
 		set_pte(&amp;kasan_zero_pte[i], pte);
 	}
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * vmemmap_populate does not zero the memory, so we need to zero it</span>
<span class="p_add">+	 * explicitly</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	zero_vemmap_populated_memory();</span>
<span class="p_add">+</span>
 	/* Flush TLBs again to be sure that write protection applied. */
 	__flush_tlb_all();
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



