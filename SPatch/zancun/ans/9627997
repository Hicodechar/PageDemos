
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/mm] x86: Remap GDT tables in the fixmap section - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/mm] x86: Remap GDT tables in the fixmap section</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 16, 2017, 11:10 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-69218e47994da614e7af600bf06887750ab6657a@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9627997/mbox/"
   >mbox</a>
|
   <a href="/patch/9627997/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9627997/">/patch/9627997/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8290260244 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Mar 2017 11:44:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6323A285B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Mar 2017 11:44:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 554E6285D4; Thu, 16 Mar 2017 11:44:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 63266285B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Mar 2017 11:44:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752155AbdCPLok (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 16 Mar 2017 07:44:40 -0400
Received: from terminus.zytor.com ([65.50.211.136]:45424 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751483AbdCPLoh (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 16 Mar 2017 07:44:37 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v2GBAvUm021606;
	Thu, 16 Mar 2017 04:10:57 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v2GBAuDc021601;
	Thu, 16 Mar 2017 04:10:56 -0700
Date: Thu, 16 Mar 2017 04:10:56 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Thomas Garnier &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-69218e47994da614e7af600bf06887750ab6657a@git.kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, vkuznets@redhat.com,
	keescook@chromium.org, tim.c.chen@linux.intel.com,
	glider@google.com, jikos@kernel.org, rjw@rjwysocki.net,
	corbet@lwn.net, paul.gortmaker@windriver.com,
	torvalds@linux-foundation.org, len.brown@intel.com,
	lstoakes@gmail.com, pavel@ucw.cz, akpm@linux-foundation.org,
	mcgrof@kernel.org, rkrcmar@redhat.com, dvyukov@google.com,
	tglx@linutronix.de, joro@8bytes.org, mhocko@suse.com,
	matt@codeblueprint.co.uk, luto@kernel.org,
	chris@chris-wilson.co.uk, thgarnie@google.com, jpoimboe@redhat.com,
	zijun_hu@htc.com, jgross@suse.com, fweisbec@gmail.com,
	mingo@kernel.org, pbonzini@redhat.com, boris.ostrovsky@oracle.com,
	aryabinin@virtuozzo.com, bp@suse.de, ard.biesheuvel@linaro.org,
	hpa@zytor.com, peterz@infradead.org, borntraeger@de.ibm.com,
	sgruszka@redhat.com, rusty@rustcorp.com.au
Reply-To: jgross@suse.com, zijun_hu@htc.com, jpoimboe@redhat.com,
	pbonzini@redhat.com, fweisbec@gmail.com, mingo@kernel.org,
	chris@chris-wilson.co.uk, thgarnie@google.com,
	rusty@rustcorp.com.au, sgruszka@redhat.com,
	borntraeger@de.ibm.com, peterz@infradead.org, bp@suse.de,
	boris.ostrovsky@oracle.com, aryabinin@virtuozzo.com,
	hpa@zytor.com, ard.biesheuvel@linaro.org, rjw@rjwysocki.net,
	glider@google.com, jikos@kernel.org,
	torvalds@linux-foundation.org, corbet@lwn.net,
	paul.gortmaker@windriver.com, vkuznets@redhat.com,
	linux-kernel@vger.kernel.org, keescook@chromium.org,
	tim.c.chen@linux.intel.com, mhocko@suse.com, joro@8bytes.org,
	tglx@linutronix.de, dvyukov@google.com, luto@kernel.org,
	matt@codeblueprint.co.uk, lstoakes@gmail.com,
	len.brown@intel.com, rkrcmar@redhat.com,
	akpm@linux-foundation.org, mcgrof@kernel.org, pavel@ucw.cz
In-Reply-To: &lt;20170314170508.100882-2-thgarnie@google.com&gt;
References: &lt;20170314170508.100882-2-thgarnie@google.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86: Remap GDT tables in the fixmap section
Git-Commit-ID: 69218e47994da614e7af600bf06887750ab6657a
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - March 16, 2017, 11:10 a.m.</div>
<pre class="content">
Commit-ID:  69218e47994da614e7af600bf06887750ab6657a
Gitweb:     http://git.kernel.org/tip/69218e47994da614e7af600bf06887750ab6657a
Author:     Thomas Garnier &lt;thgarnie@google.com&gt;
AuthorDate: Tue, 14 Mar 2017 10:05:07 -0700
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Thu, 16 Mar 2017 09:06:35 +0100

x86: Remap GDT tables in the fixmap section

Each processor holds a GDT in its per-cpu structure. The sgdt
instruction gives the base address of the current GDT. This address can
be used to bypass KASLR memory randomization. With another bug, an
attacker could target other per-cpu structures or deduce the base of
the main memory section (PAGE_OFFSET).

This patch relocates the GDT table for each processor inside the
fixmap section. The space is reserved based on number of supported
processors.

For consistency, the remapping is done by default on 32 and 64-bit.

Each processor switches to its remapped GDT at the end of
initialization. For hibernation, the main processor returns with the
original GDT and switches back to the remapping at completion.

This patch was tested on both architectures. Hibernation and KVM were
both tested specially for their usage of the GDT.

Thanks to Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt; for testing and
recommending changes for Xen support.
<span class="signed-off-by">
Signed-off-by: Thomas Garnier &lt;thgarnie@google.com&gt;</span>
Cc: Alexander Potapenko &lt;glider@google.com&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Chris Wilson &lt;chris@chris-wilson.co.uk&gt;
Cc: Christian Borntraeger &lt;borntraeger@de.ibm.com&gt;
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;
Cc: Frederic Weisbecker &lt;fweisbec@gmail.com&gt;
Cc: Jiri Kosina &lt;jikos@kernel.org&gt;
Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Jonathan Corbet &lt;corbet@lwn.net&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Len Brown &lt;len.brown@intel.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Lorenzo Stoakes &lt;lstoakes@gmail.com&gt;
Cc: Luis R . Rodriguez &lt;mcgrof@kernel.org&gt;
Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;
Cc: Pavel Machek &lt;pavel@ucw.cz&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Radim Krčmář &lt;rkrcmar@redhat.com&gt;
Cc: Rafael J . Wysocki &lt;rjw@rjwysocki.net&gt;
Cc: Rusty Russell &lt;rusty@rustcorp.com.au&gt;
Cc: Stanislaw Gruszka &lt;sgruszka@redhat.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
Cc: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
Cc: kasan-dev@googlegroups.com
Cc: kernel-hardening@lists.openwall.com
Cc: kvm@vger.kernel.org
Cc: lguest@lists.ozlabs.org
Cc: linux-doc@vger.kernel.org
Cc: linux-efi@vger.kernel.org
Cc: linux-mm@kvack.org
Cc: linux-pm@vger.kernel.org
Cc: xen-devel@lists.xenproject.org
Cc: zijun_hu &lt;zijun_hu@htc.com&gt;
Link: http://lkml.kernel.org/r/20170314170508.100882-2-thgarnie@google.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/entry/vdso/vma.c             |  2 +-
 arch/x86/include/asm/desc.h           | 58 ++++++++++++++++++++++++++++++++---
 arch/x86/include/asm/fixmap.h         |  4 +++
 arch/x86/include/asm/processor.h      |  1 +
 arch/x86/include/asm/stackprotector.h |  2 +-
 arch/x86/kernel/acpi/sleep.c          |  2 +-
 arch/x86/kernel/apm_32.c              |  6 ++--
 arch/x86/kernel/cpu/common.c          | 29 ++++++++++++++++--
 arch/x86/kernel/setup_percpu.c        |  2 +-
 arch/x86/kernel/smpboot.c             |  2 +-
 arch/x86/platform/efi/efi_32.c        |  4 +--
 arch/x86/power/cpu.c                  |  7 +++--
 arch/x86/xen/enlighten.c              |  5 ++-
 arch/x86/xen/mmu.c                    |  1 +
 arch/x86/xen/smp.c                    |  2 +-
 drivers/lguest/x86/core.c             |  6 ++--
 drivers/pnp/pnpbios/bioscalls.c       | 10 +++---
 17 files changed, 114 insertions(+), 29 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 226ca70..5c5d4d7 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -354,7 +354,7 @@</span> <span class="p_context"> static void vgetcpu_cpu_init(void *arg)</span>
 	d.p = 1;		/* Present */
 	d.d = 1;		/* 32-bit */
 
<span class="p_del">-	write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_PER_CPU, &amp;d, DESCTYPE_S);</span>
<span class="p_add">+	write_gdt_entry(get_cpu_gdt_rw(cpu), GDT_ENTRY_PER_CPU, &amp;d, DESCTYPE_S);</span>
 }
 
 static int vgetcpu_online(unsigned int cpu)
<span class="p_header">diff --git a/arch/x86/include/asm/desc.h b/arch/x86/include/asm/desc.h</span>
<span class="p_header">index 1548ca9..4b5ef0c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/desc.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/desc.h</span>
<span class="p_chunk">@@ -4,6 +4,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/desc_defs.h&gt;
 #include &lt;asm/ldt.h&gt;
 #include &lt;asm/mmu.h&gt;
<span class="p_add">+#include &lt;asm/fixmap.h&gt;</span>
 
 #include &lt;linux/smp.h&gt;
 #include &lt;linux/percpu.h&gt;
<span class="p_chunk">@@ -38,6 +39,7 @@</span> <span class="p_context"> extern struct desc_ptr idt_descr;</span>
 extern gate_desc idt_table[];
 extern const struct desc_ptr debug_idt_descr;
 extern gate_desc debug_idt_table[];
<span class="p_add">+extern pgprot_t pg_fixmap_gdt_flags;</span>
 
 struct gdt_page {
 	struct desc_struct gdt[GDT_ENTRIES];
<span class="p_chunk">@@ -45,11 +47,57 @@</span> <span class="p_context"> struct gdt_page {</span>
 
 DECLARE_PER_CPU_PAGE_ALIGNED(struct gdt_page, gdt_page);
 
<span class="p_del">-static inline struct desc_struct *get_cpu_gdt_table(unsigned int cpu)</span>
<span class="p_add">+/* Provide the original GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_cpu_gdt_rw(unsigned int cpu)</span>
 {
 	return per_cpu(gdt_page, cpu).gdt;
 }
 
<span class="p_add">+static inline unsigned long get_cpu_gdt_rw_vaddr(unsigned int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)get_cpu_gdt_rw(cpu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Provide the current original GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_current_gdt_rw(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return this_cpu_ptr(&amp;gdt_page)-&gt;gdt;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long get_current_gdt_rw_vaddr(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)get_current_gdt_rw();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Get the fixmap index for a specific processor */</span>
<span class="p_add">+static inline unsigned int get_cpu_gdt_ro_index(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return FIX_GDT_REMAP_BEGIN + cpu;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Provide the fixmap address of the remapped GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_cpu_gdt_ro(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int idx = get_cpu_gdt_ro_index(cpu);</span>
<span class="p_add">+	return (struct desc_struct *)__fix_to_virt(idx);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long get_cpu_gdt_ro_vaddr(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)get_cpu_gdt_ro(cpu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Provide the current read-only GDT */</span>
<span class="p_add">+static inline struct desc_struct *get_current_gdt_ro(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return get_cpu_gdt_ro(smp_processor_id());</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long get_current_gdt_ro_vaddr(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)get_current_gdt_ro();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_X86_64
 
 static inline void pack_gate(gate_desc *gate, unsigned type, unsigned long func,
<span class="p_chunk">@@ -174,7 +222,7 @@</span> <span class="p_context"> static inline void set_tssldt_descriptor(void *d, unsigned long addr, unsigned t</span>
 
 static inline void __set_tss_desc(unsigned cpu, unsigned int entry, void *addr)
 {
<span class="p_del">-	struct desc_struct *d = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *d = get_cpu_gdt_rw(cpu);</span>
 	tss_desc tss;
 
 	set_tssldt_descriptor(&amp;tss, (unsigned long)addr, DESC_TSS,
<span class="p_chunk">@@ -194,7 +242,7 @@</span> <span class="p_context"> static inline void native_set_ldt(const void *addr, unsigned int entries)</span>
 
 		set_tssldt_descriptor(&amp;ldt, (unsigned long)addr, DESC_LDT,
 				      entries * LDT_ENTRY_SIZE - 1);
<span class="p_del">-		write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_LDT,</span>
<span class="p_add">+		write_gdt_entry(get_cpu_gdt_rw(cpu), GDT_ENTRY_LDT,</span>
 				&amp;ldt, DESC_LDT);
 		asm volatile(&quot;lldt %w0&quot;::&quot;q&quot; (GDT_ENTRY_LDT*8));
 	}
<span class="p_chunk">@@ -209,7 +257,7 @@</span> <span class="p_context"> DECLARE_PER_CPU(bool, __tss_limit_invalid);</span>
 
 static inline void force_reload_TR(void)
 {
<span class="p_del">-	struct desc_struct *d = get_cpu_gdt_table(smp_processor_id());</span>
<span class="p_add">+	struct desc_struct *d = get_current_gdt_rw();</span>
 	tss_desc tss;
 
 	memcpy(&amp;tss, &amp;d[GDT_ENTRY_TSS], sizeof(tss_desc));
<span class="p_chunk">@@ -288,7 +336,7 @@</span> <span class="p_context"> static inline unsigned long native_store_tr(void)</span>
 
 static inline void native_load_tls(struct thread_struct *t, unsigned int cpu)
 {
<span class="p_del">-	struct desc_struct *gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *gdt = get_cpu_gdt_rw(cpu);</span>
 	unsigned int i;
 
 	for (i = 0; i &lt; GDT_ENTRY_TLS_ENTRIES; i++)
<span class="p_header">diff --git a/arch/x86/include/asm/fixmap.h b/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">index 8554f96..b65155c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -100,6 +100,10 @@</span> <span class="p_context"> enum fixed_addresses {</span>
 #ifdef	CONFIG_X86_INTEL_MID
 	FIX_LNW_VRTC,
 #endif
<span class="p_add">+	/* Fixmap entries to remap the GDTs, one per processor. */</span>
<span class="p_add">+	FIX_GDT_REMAP_BEGIN,</span>
<span class="p_add">+	FIX_GDT_REMAP_END = FIX_GDT_REMAP_BEGIN + NR_CPUS - 1,</span>
<span class="p_add">+</span>
 	__end_of_permanent_fixed_addresses,
 
 	/*
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 7caa2ac..1150e1b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -716,6 +716,7 @@</span> <span class="p_context"> extern struct desc_ptr		early_gdt_descr;</span>
 
 extern void cpu_set_gdt(int);
 extern void switch_to_new_gdt(int);
<span class="p_add">+extern void load_fixmap_gdt(int);</span>
 extern void load_percpu_segment(int);
 extern void cpu_init(void);
 
<span class="p_header">diff --git a/arch/x86/include/asm/stackprotector.h b/arch/x86/include/asm/stackprotector.h</span>
<span class="p_header">index 58505f0..dcbd9bc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/stackprotector.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/stackprotector.h</span>
<span class="p_chunk">@@ -87,7 +87,7 @@</span> <span class="p_context"> static inline void setup_stack_canary_segment(int cpu)</span>
 {
 #ifdef CONFIG_X86_32
 	unsigned long canary = (unsigned long)&amp;per_cpu(stack_canary, cpu);
<span class="p_del">-	struct desc_struct *gdt_table = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *gdt_table = get_cpu_gdt_rw(cpu);</span>
 	struct desc_struct desc;
 
 	desc = gdt_table[GDT_ENTRY_STACK_CANARY];
<span class="p_header">diff --git a/arch/x86/kernel/acpi/sleep.c b/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_header">index 4858733..ed01481 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/sleep.c</span>
<span class="p_chunk">@@ -101,7 +101,7 @@</span> <span class="p_context"> int x86_acpi_suspend_lowlevel(void)</span>
 #ifdef CONFIG_SMP
 	initial_stack = (unsigned long)temp_stack + sizeof(temp_stack);
 	early_gdt_descr.address =
<span class="p_del">-			(unsigned long)get_cpu_gdt_table(smp_processor_id());</span>
<span class="p_add">+			(unsigned long)get_cpu_gdt_rw(smp_processor_id());</span>
 	initial_gs = per_cpu_offset(smp_processor_id());
 #endif
 	initial_code = (unsigned long)wakeup_long64;
<span class="p_header">diff --git a/arch/x86/kernel/apm_32.c b/arch/x86/kernel/apm_32.c</span>
<span class="p_header">index 5a41454..446b0d3 100644</span>
<span class="p_header">--- a/arch/x86/kernel/apm_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/apm_32.c</span>
<span class="p_chunk">@@ -609,7 +609,7 @@</span> <span class="p_context"> static long __apm_bios_call(void *_call)</span>
 
 	cpu = get_cpu();
 	BUG_ON(cpu != 0);
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_gdt_rw(cpu);</span>
 	save_desc_40 = gdt[0x40 / 8];
 	gdt[0x40 / 8] = bad_bios_desc;
 
<span class="p_chunk">@@ -685,7 +685,7 @@</span> <span class="p_context"> static long __apm_bios_call_simple(void *_call)</span>
 
 	cpu = get_cpu();
 	BUG_ON(cpu != 0);
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_gdt_rw(cpu);</span>
 	save_desc_40 = gdt[0x40 / 8];
 	gdt[0x40 / 8] = bad_bios_desc;
 
<span class="p_chunk">@@ -2352,7 +2352,7 @@</span> <span class="p_context"> static int __init apm_init(void)</span>
 	 * Note we only set APM segments on CPU zero, since we pin the APM
 	 * code to that CPU.
 	 */
<span class="p_del">-	gdt = get_cpu_gdt_table(0);</span>
<span class="p_add">+	gdt = get_cpu_gdt_rw(0);</span>
 	set_desc_base(&amp;gdt[APM_CS &gt;&gt; 3],
 		 (unsigned long)__va((unsigned long)apm_info.bios.cseg &lt;&lt; 4));
 	set_desc_base(&amp;gdt[APM_CS_16 &gt;&gt; 3],
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 58094a1..3cf1590 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -448,6 +448,26 @@</span> <span class="p_context"> void load_percpu_segment(int cpu)</span>
 	load_stack_canary_segment();
 }
 
<span class="p_add">+/* Used by XEN to force the GDT read-only when required */</span>
<span class="p_add">+pgprot_t pg_fixmap_gdt_flags = PAGE_KERNEL;</span>
<span class="p_add">+</span>
<span class="p_add">+/* Setup the fixmap mapping only once per-processor */</span>
<span class="p_add">+static inline void setup_fixmap_gdt(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	__set_fixmap(get_cpu_gdt_ro_index(cpu),</span>
<span class="p_add">+		     __pa(get_cpu_gdt_rw(cpu)), pg_fixmap_gdt_flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Load a fixmap remapping of the per-cpu GDT */</span>
<span class="p_add">+void load_fixmap_gdt(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct desc_ptr gdt_descr;</span>
<span class="p_add">+</span>
<span class="p_add">+	gdt_descr.address = (long)get_cpu_gdt_ro(cpu);</span>
<span class="p_add">+	gdt_descr.size = GDT_SIZE - 1;</span>
<span class="p_add">+	load_gdt(&amp;gdt_descr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Current gdt points %fs at the &quot;master&quot; per-cpu area: after this,
  * it&#39;s on the real one.
<span class="p_chunk">@@ -456,11 +476,10 @@</span> <span class="p_context"> void switch_to_new_gdt(int cpu)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_del">-	gdt_descr.address = (long)get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt_descr.address = (long)get_cpu_gdt_rw(cpu);</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 	/* Reload the per-cpu base */
<span class="p_del">-</span>
 	load_percpu_segment(cpu);
 }
 
<span class="p_chunk">@@ -1526,6 +1545,9 @@</span> <span class="p_context"> void cpu_init(void)</span>
 
 	if (is_uv_system())
 		uv_cpu_init();
<span class="p_add">+</span>
<span class="p_add">+	setup_fixmap_gdt(cpu);</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 
 #else
<span class="p_chunk">@@ -1581,6 +1603,9 @@</span> <span class="p_context"> void cpu_init(void)</span>
 	dbg_restore_debug_regs();
 
 	fpu__init_cpu();
<span class="p_add">+</span>
<span class="p_add">+	setup_fixmap_gdt(cpu);</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 #endif
 
<span class="p_header">diff --git a/arch/x86/kernel/setup_percpu.c b/arch/x86/kernel/setup_percpu.c</span>
<span class="p_header">index 9820d6d..11338b0 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup_percpu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup_percpu.c</span>
<span class="p_chunk">@@ -160,7 +160,7 @@</span> <span class="p_context"> static inline void setup_percpu_segment(int cpu)</span>
 	pack_descriptor(&amp;gdt, per_cpu_offset(cpu), 0xFFFFF,
 			0x2 | DESCTYPE_S, 0x8);
 	gdt.s = 1;
<span class="p_del">-	write_gdt_entry(get_cpu_gdt_table(cpu),</span>
<span class="p_add">+	write_gdt_entry(get_cpu_gdt_rw(cpu),</span>
 			GDT_ENTRY_PERCPU, &amp;gdt, DESCTYPE_S);
 #endif
 }
<span class="p_header">diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c</span>
<span class="p_header">index bd1f1ad..f04479a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -983,7 +983,7 @@</span> <span class="p_context"> static int do_boot_cpu(int apicid, int cpu, struct task_struct *idle)</span>
 	unsigned long timeout;
 
 	idle-&gt;thread.sp = (unsigned long)task_pt_regs(idle);
<span class="p_del">-	early_gdt_descr.address = (unsigned long)get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	early_gdt_descr.address = (unsigned long)get_cpu_gdt_rw(cpu);</span>
 	initial_code = (unsigned long)start_secondary;
 	initial_stack  = idle-&gt;thread.sp;
 
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index cef39b0..9500711 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -68,7 +68,7 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	load_cr3(initial_page_table);
 	__flush_tlb_all();
 
<span class="p_del">-	gdt_descr.address = __pa(get_cpu_gdt_table(0));</span>
<span class="p_add">+	gdt_descr.address = __pa(get_cpu_gdt_rw(0));</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_del">-	gdt_descr.address = (unsigned long)get_cpu_gdt_table(0);</span>
<span class="p_add">+	gdt_descr.address = (unsigned long)get_cpu_gdt_rw(0);</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_header">diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c</span>
<span class="p_header">index 66ade16..6b05a92 100644</span>
<span class="p_header">--- a/arch/x86/power/cpu.c</span>
<span class="p_header">+++ b/arch/x86/power/cpu.c</span>
<span class="p_chunk">@@ -95,7 +95,7 @@</span> <span class="p_context"> static void __save_processor_state(struct saved_context *ctxt)</span>
 	 * &#39;pmode_gdt&#39; in wakeup_start.
 	 */
 	ctxt-&gt;gdt_desc.size = GDT_SIZE - 1;
<span class="p_del">-	ctxt-&gt;gdt_desc.address = (unsigned long)get_cpu_gdt_table(smp_processor_id());</span>
<span class="p_add">+	ctxt-&gt;gdt_desc.address = (unsigned long)get_cpu_gdt_rw(smp_processor_id());</span>
 
 	store_tr(ctxt-&gt;tr);
 
<span class="p_chunk">@@ -162,7 +162,7 @@</span> <span class="p_context"> static void fix_processor_context(void)</span>
 	int cpu = smp_processor_id();
 	struct tss_struct *t = &amp;per_cpu(cpu_tss, cpu);
 #ifdef CONFIG_X86_64
<span class="p_del">-	struct desc_struct *desc = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	struct desc_struct *desc = get_cpu_gdt_rw(cpu);</span>
 	tss_desc tss;
 #endif
 	set_tss_desc(cpu, t);	/*
<span class="p_chunk">@@ -183,6 +183,9 @@</span> <span class="p_context"> static void fix_processor_context(void)</span>
 	load_mm_ldt(current-&gt;active_mm);	/* This does lldt */
 
 	fpu__resume_cpu();
<span class="p_add">+</span>
<span class="p_add">+	/* The processor is back on the direct GDT, load back the fixmap */</span>
<span class="p_add">+	load_fixmap_gdt(cpu);</span>
 }
 
 /**
<span class="p_header">diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c</span>
<span class="p_header">index ec1d5c4..08faa61 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten.c</span>
<span class="p_chunk">@@ -710,7 +710,7 @@</span> <span class="p_context"> static void load_TLS_descriptor(struct thread_struct *t,</span>
 
 	*shadow = t-&gt;tls_array[i];
 
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_gdt_rw(cpu);</span>
 	maddr = arbitrary_virt_to_machine(&amp;gdt[GDT_ENTRY_TLS_MIN+i]);
 	mc = __xen_mc_entry(0);
 
<span class="p_chunk">@@ -1545,6 +1545,9 @@</span> <span class="p_context"> asmlinkage __visible void __init xen_start_kernel(void)</span>
 	 */
 	xen_initial_gdt = &amp;per_cpu(gdt_page, 0);
 
<span class="p_add">+	/* GDT can only be remapped RO */</span>
<span class="p_add">+	pg_fixmap_gdt_flags = PAGE_KERNEL_RO;</span>
<span class="p_add">+</span>
 	xen_smp_init();
 
 #ifdef CONFIG_ACPI_NUMA
<span class="p_header">diff --git a/arch/x86/xen/mmu.c b/arch/x86/xen/mmu.c</span>
<span class="p_header">index 37cb5aa..ebbfe00 100644</span>
<span class="p_header">--- a/arch/x86/xen/mmu.c</span>
<span class="p_header">+++ b/arch/x86/xen/mmu.c</span>
<span class="p_chunk">@@ -2326,6 +2326,7 @@</span> <span class="p_context"> static void xen_set_fixmap(unsigned idx, phys_addr_t phys, pgprot_t prot)</span>
 #endif
 	case FIX_TEXT_POKE0:
 	case FIX_TEXT_POKE1:
<span class="p_add">+	case FIX_GDT_REMAP_BEGIN ... FIX_GDT_REMAP_END:</span>
 		/* All local page mappings */
 		pte = pfn_pte(phys, prot);
 		break;
<span class="p_header">diff --git a/arch/x86/xen/smp.c b/arch/x86/xen/smp.c</span>
<span class="p_header">index 7ff2f1b..eaa3616 100644</span>
<span class="p_header">--- a/arch/x86/xen/smp.c</span>
<span class="p_header">+++ b/arch/x86/xen/smp.c</span>
<span class="p_chunk">@@ -392,7 +392,7 @@</span> <span class="p_context"> cpu_initialize_context(unsigned int cpu, struct task_struct *idle)</span>
 	if (ctxt == NULL)
 		return -ENOMEM;
 
<span class="p_del">-	gdt = get_cpu_gdt_table(cpu);</span>
<span class="p_add">+	gdt = get_cpu_gdt_rw(cpu);</span>
 
 #ifdef CONFIG_X86_32
 	ctxt-&gt;user_regs.fs = __KERNEL_PERCPU;
<span class="p_header">diff --git a/drivers/lguest/x86/core.c b/drivers/lguest/x86/core.c</span>
<span class="p_header">index d71f632..b4f79b9 100644</span>
<span class="p_header">--- a/drivers/lguest/x86/core.c</span>
<span class="p_header">+++ b/drivers/lguest/x86/core.c</span>
<span class="p_chunk">@@ -504,7 +504,7 @@</span> <span class="p_context"> void __init lguest_arch_host_init(void)</span>
 		 * byte, not the size, hence the &quot;-1&quot;).
 		 */
 		state-&gt;host_gdt_desc.size = GDT_SIZE-1;
<span class="p_del">-		state-&gt;host_gdt_desc.address = (long)get_cpu_gdt_table(i);</span>
<span class="p_add">+		state-&gt;host_gdt_desc.address = (long)get_cpu_gdt_rw(i);</span>
 
 		/*
 		 * All CPUs on the Host use the same Interrupt Descriptor
<span class="p_chunk">@@ -554,8 +554,8 @@</span> <span class="p_context"> void __init lguest_arch_host_init(void)</span>
 		 * The Host needs to be able to use the LGUEST segments on this
 		 * CPU, too, so put them in the Host GDT.
 		 */
<span class="p_del">-		get_cpu_gdt_table(i)[GDT_ENTRY_LGUEST_CS] = FULL_EXEC_SEGMENT;</span>
<span class="p_del">-		get_cpu_gdt_table(i)[GDT_ENTRY_LGUEST_DS] = FULL_SEGMENT;</span>
<span class="p_add">+		get_cpu_gdt_rw(i)[GDT_ENTRY_LGUEST_CS] = FULL_EXEC_SEGMENT;</span>
<span class="p_add">+		get_cpu_gdt_rw(i)[GDT_ENTRY_LGUEST_DS] = FULL_SEGMENT;</span>
 	}
 
 	/*
<span class="p_header">diff --git a/drivers/pnp/pnpbios/bioscalls.c b/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_header">index 438d4c7..ff563db 100644</span>
<span class="p_header">--- a/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_header">+++ b/drivers/pnp/pnpbios/bioscalls.c</span>
<span class="p_chunk">@@ -54,7 +54,7 @@</span> <span class="p_context"> __asm__(&quot;.text			\n&quot;</span>
 
 #define Q2_SET_SEL(cpu, selname, address, size) \
 do { \
<span class="p_del">-	struct desc_struct *gdt = get_cpu_gdt_table((cpu)); \</span>
<span class="p_add">+	struct desc_struct *gdt = get_cpu_gdt_rw((cpu)); \</span>
 	set_desc_base(&amp;gdt[(selname) &gt;&gt; 3], (u32)(address)); \
 	set_desc_limit(&amp;gdt[(selname) &gt;&gt; 3], (size) - 1); \
 } while(0)
<span class="p_chunk">@@ -95,8 +95,8 @@</span> <span class="p_context"> static inline u16 call_pnp_bios(u16 func, u16 arg1, u16 arg2, u16 arg3,</span>
 		return PNP_FUNCTION_NOT_SUPPORTED;
 
 	cpu = get_cpu();
<span class="p_del">-	save_desc_40 = get_cpu_gdt_table(cpu)[0x40 / 8];</span>
<span class="p_del">-	get_cpu_gdt_table(cpu)[0x40 / 8] = bad_bios_desc;</span>
<span class="p_add">+	save_desc_40 = get_cpu_gdt_rw(cpu)[0x40 / 8];</span>
<span class="p_add">+	get_cpu_gdt_rw(cpu)[0x40 / 8] = bad_bios_desc;</span>
 
 	/* On some boxes IRQ&#39;s during PnP BIOS calls are deadly.  */
 	spin_lock_irqsave(&amp;pnp_bios_lock, flags);
<span class="p_chunk">@@ -134,7 +134,7 @@</span> <span class="p_context"> static inline u16 call_pnp_bios(u16 func, u16 arg1, u16 arg2, u16 arg3,</span>
 			     :&quot;memory&quot;);
 	spin_unlock_irqrestore(&amp;pnp_bios_lock, flags);
 
<span class="p_del">-	get_cpu_gdt_table(cpu)[0x40 / 8] = save_desc_40;</span>
<span class="p_add">+	get_cpu_gdt_rw(cpu)[0x40 / 8] = save_desc_40;</span>
 	put_cpu();
 
 	/* If we get here and this is set then the PnP BIOS faulted on us. */
<span class="p_chunk">@@ -477,7 +477,7 @@</span> <span class="p_context"> void pnpbios_calls_init(union pnp_bios_install_struct *header)</span>
 	pnp_bios_callpoint.segment = PNP_CS16;
 
 	for_each_possible_cpu(i) {
<span class="p_del">-		struct desc_struct *gdt = get_cpu_gdt_table(i);</span>
<span class="p_add">+		struct desc_struct *gdt = get_cpu_gdt_rw(i);</span>
 		if (!gdt)
 			continue;
 		set_desc_base(&amp;gdt[GDT_ENTRY_PNPBIOS_CS32],

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



