
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/speculation: Use Indirect Branch Prediction Barrier in context switch - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/speculation: Use Indirect Branch Prediction Barrier in context switch</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=178213">Woodhouse, David</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 29, 2018, 10:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1517263487-3708-1-git-send-email-dwmw@amazon.co.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10190991/mbox/"
   >mbox</a>
|
   <a href="/patch/10190991/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10190991/">/patch/10190991/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	ED48160383 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Jan 2018 22:05:18 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C84411FF66
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Jan 2018 22:05:18 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B934528927; Mon, 29 Jan 2018 22:05:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 29CB61FF66
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Jan 2018 22:05:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751625AbeA2WFP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 29 Jan 2018 17:05:15 -0500
Received: from smtp-fw-9102.amazon.com ([207.171.184.29]:29786 &quot;EHLO
	smtp-fw-9102.amazon.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751402AbeA2WFO (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 29 Jan 2018 17:05:14 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amazon.co.uk; i=@amazon.co.uk; q=dns/txt;
	s=amazon201209; t=1517263513; x=1548799513;
	h=from:to:subject:date:message-id:mime-version:
	content-transfer-encoding;
	bh=1dfz5YPk3SCSLHXzW8OyyjfnXBJbnqVw5bOIX3hLuPo=;
	b=qu0bMrUflNbxVzI1RaIJ9ybuk7FO8O5/KM9QAtrXaAZwuWpgZVmYlZOK
	pRrYdzDToZkKR9vLWla/tdhM2TsfO2RfmBJcxkKgAs6Kz4kszsZUiYwzD
	jXHXHBqLHxvX+xIfu5cz3/onRboqqgGGu+RQdS/O7t3edY2bQYaqrA1hQ A=;
X-IronPort-AV: E=Sophos;i=&quot;5.46,432,1511827200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;591069749&quot;
Received: from sea3-co-svc-lb6-vlan3.sea.amazon.com (HELO
	email-inbound-relay-1d-38ae4ad2.us-east-1.amazon.com)
	([10.47.22.38]) by smtp-border-fw-out-9102.sea19.amazon.com with
	ESMTP/TLS/DHE-RSA-AES256-SHA; 29 Jan 2018 22:05:07 +0000
Received: from uc8d3ff76b9bc5848a9cc.ant.amazon.com
	(iad1-ws-svc-lb91-vlan3.amazon.com [10.0.103.150])
	by email-inbound-relay-1d-38ae4ad2.us-east-1.amazon.com
	(8.14.7/8.14.7) with ESMTP id w0TM4uQ4087162
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Mon, 29 Jan 2018 22:04:59 GMT
Received: from uc8d3ff76b9bc5848a9cc.ant.amazon.com (localhost [127.0.0.1])
	by uc8d3ff76b9bc5848a9cc.ant.amazon.com (8.15.2/8.15.2/Debian-3)
	with ESMTP id w0TM4rF4003850; Mon, 29 Jan 2018 22:04:53 GMT
Received: (from dwmw@localhost)
	by uc8d3ff76b9bc5848a9cc.ant.amazon.com (8.15.2/8.15.2/Submit) id
	w0TM4pZo003847; Mon, 29 Jan 2018 22:04:51 GMT
From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;
To: arjan@linux.intel.com, tglx@linutronix.de, karahmed@amazon.de,
	x86@kernel.org, linux-kernel@vger.kernel.org,
	tim.c.chen@linux.intel.com, bp@alien8.de, peterz@infradead.org,
	pbonzini@redhat.com, ak@linux.intel.com,
	torvalds@linux-foundation.org, gregkh@linux-foundation.org,
	mingo@kernel.org, luto@kernel.org, linux@dominikbrodowski.net
Subject: [PATCH] x86/speculation: Use Indirect Branch Prediction Barrier in
	context switch
Date: Mon, 29 Jan 2018 22:04:47 +0000
Message-Id: &lt;1517263487-3708-1-git-send-email-dwmw@amazon.co.uk&gt;
X-Mailer: git-send-email 2.7.4
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=178213">Woodhouse, David</a> - Jan. 29, 2018, 10:04 p.m.</div>
<pre class="content">
<span class="from">From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>

Flush indirect branches when switching into a process that marked itself
non dumpable. This protects high value processes like gpg better,
without having too high performance overhead.

If done na√Øvely, we could switch to a kernel idle thread and then back
to the original process, such as:

    process A -&gt; idle -&gt; process A

In such scenario, we do not have to do IBPB here even though the process
is non-dumpable, as we are switching back to the same process after a
hiatus.

To avoid the redundant IBPB, which is expensive, we track the last mm
user context ID. The cost is to have an extra u64 mm context id to track
the last mm we were using before switching to the init_mm used by idle.
Avoiding the extra IBPB is probably worth the extra memory for this
common scenario.

For those cases where tlb_defer_switch_to_init_mm() returns true (non
PCID), lazy tlb will defer switch to init_mm, so we will not be changing
the mm for the process A -&gt; idle -&gt; process A switch. So IBPB will be
skipped for this case.

Thanks to the reviewers and Andy Lutomirski for the suggestion of
using ctx_id which got rid of the problem of mm pointer recycling.
<span class="signed-off-by">
Signed-off-by: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
---
 arch/x86/include/asm/tlbflush.h |  2 ++
 arch/x86/mm/tlb.c               | 33 ++++++++++++++++++++++++++++++++-
 2 files changed, 34 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Jan. 30, 2018, 5:48 p.m.</div>
<pre class="content">
On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:
<span class="quote">&gt; From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Flush indirect branches when switching into a process that marked itself</span>
<span class="quote">&gt; non dumpable. This protects high value processes like gpg better,</span>
<span class="quote">&gt; without having too high performance overhead.</span>

I wonder what the point of this patch is.  An audit of my laptop shows
only a single user of PR_SET_DUMPABLE: systemd-coredump.

[ And yes, I have gpg-agent running.  Also, a grep of the gnupg source
doesn&#39;t show any evidence of it being used there.  So the gpg thing
seems to be a myth. ]

But also, I much preferred the original version of the patch which only
skipped IBPB when &#39;prev&#39; could ptrace &#39;next&#39;.

If performance is a concern, let&#39;s look at that in more detail.  But I
don&#39;t see how the solution to a performance issue could possibly be
&quot;leave (almost) all tasks vulnerable by default.&quot;

If the argument is that everyone should &quot;rebuild the world&quot; with
retpolines, then this patch would still be pointless, as we wouldn&#39;t
even need IBPB.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 30, 2018, 8:38 p.m.</div>
<pre class="content">
On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:
<span class="quote">&gt; +		if (tsk &amp;&amp; tsk-&gt;mm &amp;&amp;</span>
<span class="quote">&gt; +		    tsk-&gt;mm-&gt;context.ctx_id != last_ctx_id &amp;&amp;</span>
<span class="quote">&gt; +		    get_dumpable(tsk-&gt;mm) != SUID_DUMP_USER)</span>
<span class="quote">&gt; +			indirect_branch_prediction_barrier();</span>

Ok, so while staring at this, someone just came up with the following
sequence:

1. Malicious process runs with UID=A, does BTB poisoning
2. Sensitive process (e.g. gpg) starts also with UID=A, no IBPB flush occurs since task is initially dumpable
3. gpg now does prctl(PR_SET_DUMPABLE, ...) to clear the dumpable flag
4. gpg now does sensitive stuff that it thinks is protected
5. gpg does indirect branches that shouldn&#39;t be influenced by the malicious process

Now, if you switch between steps 3. and 4., you&#39;re good because gpg
became non-dumpable. But if you *don&#39;t* switch, the bad BTB entries are
still there.

So, *actually*, we need to flush IBPB in set_dumpable() too, when we
clear SUID_DUMP_USER.

Or, are we missing something obvious here and that is not needed because
of reasons I haven&#39;t thought about?

I know, gpg doesn&#39;t do prctl() but disables core dumping with
setrlimit() but there might be other processes who do that...

Thx.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 30, 2018, 9:03 p.m.</div>
<pre class="content">
On 01/30/2018 12:38 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:</span>
<span class="quote">&gt;&gt; +		if (tsk &amp;&amp; tsk-&gt;mm &amp;&amp;</span>
<span class="quote">&gt;&gt; +		    tsk-&gt;mm-&gt;context.ctx_id != last_ctx_id &amp;&amp;</span>
<span class="quote">&gt;&gt; +		    get_dumpable(tsk-&gt;mm) != SUID_DUMP_USER)</span>
<span class="quote">&gt;&gt; +			indirect_branch_prediction_barrier();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ok, so while staring at this, someone just came up with the following</span>
<span class="quote">&gt; sequence:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 1. Malicious process runs with UID=A, does BTB poisoning</span>
<span class="quote">&gt; 2. Sensitive process (e.g. gpg) starts also with UID=A, no IBPB flush occurs since task is initially dumpable</span>
<span class="quote">&gt; 3. gpg now does prctl(PR_SET_DUMPABLE, ...) to clear the dumpable flag</span>
<span class="quote">&gt; 4. gpg now does sensitive stuff that it thinks is protected</span>
<span class="quote">&gt; 5. gpg does indirect branches that shouldn&#39;t be influenced by the malicious process</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Now, if you switch between steps 3. and 4., you&#39;re good because gpg</span>
<span class="quote">&gt; became non-dumpable. But if you *don&#39;t* switch, the bad BTB entries are</span>
<span class="quote">&gt; still there.</span>

The attacker has to guarantee itself to run right before victim. And
the window of attack is very small, as only the first context switch to victim
may be vulnerable. The victim will be immune on the next switch.  
For timing attack, the attacker needs to scan one bit at a time.  
So probably the attacker could glean 1 bit of information
on the switch back to the attacker and then the attacker could not scan
further.  So it doesn&#39;t seem to be very practical attack if the victim
has set itself to be non-dumpable.

Tim
<span class="quote">
&gt; </span>
<span class="quote">&gt; So, *actually*, we need to flush IBPB in set_dumpable() too, when we</span>
<span class="quote">&gt; clear SUID_DUMP_USER.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Or, are we missing something obvious here and that is not needed because</span>
<span class="quote">&gt; of reasons I haven&#39;t thought about?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I know, gpg doesn&#39;t do prctl() but disables core dumping with</span>
<span class="quote">&gt; setrlimit() but there might be other processes who do that...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thx.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 30, 2018, 9:23 p.m.</div>
<pre class="content">
On 01/30/2018 09:48 AM, Josh Poimboeuf wrote:
<span class="quote">&gt; On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:</span>
<span class="quote">&gt;&gt; From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Flush indirect branches when switching into a process that marked itself</span>
<span class="quote">&gt;&gt; non dumpable. This protects high value processes like gpg better,</span>
<span class="quote">&gt;&gt; without having too high performance overhead.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I wonder what the point of this patch is.  An audit of my laptop shows</span>
<span class="quote">&gt; only a single user of PR_SET_DUMPABLE: systemd-coredump.</span>

This is an opt in approach.  For processes who need extra
security, it set itself as non-dumpable.  Then it can
ensure that it doesn&#39;t see any poisoned BTB.  
<span class="quote">
&gt; </span>
<span class="quote">&gt; [ And yes, I have gpg-agent running.  Also, a grep of the gnupg source</span>
<span class="quote">&gt; doesn&#39;t show any evidence of it being used there.  So the gpg thing</span>
<span class="quote">&gt; seems to be a myth. ]</span>

I&#39;m less familiar with gpg-agent.  Dave was the one who
put in comments about gpg-agent in this patch so perhaps
he can comment.
<span class="quote">
&gt; </span>
<span class="quote">&gt; But also, I much preferred the original version of the patch which only</span>
<span class="quote">&gt; skipped IBPB when &#39;prev&#39; could ptrace &#39;next&#39;.</span>

For the A-&gt;kernel thread-&gt;B scenario, you will need context of A
to decide if you need IBPB when switching to B.  You need to
worry about whether the context of A has been released ... etc if
you want to use ptrace.
<span class="quote">
&gt; </span>
<span class="quote">&gt; If performance is a concern, let&#39;s look at that in more detail.  But I</span>
<span class="quote">&gt; don&#39;t see how the solution to a performance issue could possibly be</span>
<span class="quote">&gt; &quot;leave (almost) all tasks vulnerable by default.&quot;</span>
<span class="quote">&gt; </span>

Thanks.

Tim
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 30, 2018, 9:57 p.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 01:03:20PM -0800, Tim Chen wrote:
<span class="quote">&gt; So it doesn&#39;t seem to be very practical attack if the victim has set</span>
<span class="quote">&gt; itself to be non-dumpable.</span>

Probably, but considering how cheap our fix is, we might just as well
plug that hole too.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 30, 2018, 10 p.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 01:23:17PM -0800, Tim Chen wrote:
<span class="quote">&gt; I&#39;m less familiar with gpg-agent.  Dave was the one who</span>
<span class="quote">&gt; put in comments about gpg-agent in this patch so perhaps</span>
<span class="quote">&gt; he can comment.</span>

So I looked at gpg-agent and AFAICT, it disables core dumping with
setrlimit().

I wasn&#39;t able to attach to it either with gdb but didn&#39;t find where we
disable the attaching, for the couple of minutes I grepped through it.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Jan. 30, 2018, 10:21 p.m.</div>
<pre class="content">
On Tue, 30 Jan 2018, Borislav Petkov wrote:
<span class="quote">
&gt; On Tue, Jan 30, 2018 at 01:23:17PM -0800, Tim Chen wrote:</span>
<span class="quote">&gt; &gt; I&#39;m less familiar with gpg-agent.  Dave was the one who</span>
<span class="quote">&gt; &gt; put in comments about gpg-agent in this patch so perhaps</span>
<span class="quote">&gt; &gt; he can comment.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I looked at gpg-agent and AFAICT, it disables core dumping with</span>
<span class="quote">&gt; setrlimit().</span>

setrlimit() does not end up fiddling with the dumpable bits in
mm-&gt;flags. So no.
<span class="quote">
&gt; I wasn&#39;t able to attach to it either with gdb but didn&#39;t find where we</span>
<span class="quote">&gt; disable the attaching, for the couple of minutes I grepped through it.</span>

prctl(PR_SET_DUMPABLE, 0)               = 0

That does the trick.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 30, 2018, 10:26 p.m.</div>
<pre class="content">
On 01/30/2018 01:57 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Tue, Jan 30, 2018 at 01:03:20PM -0800, Tim Chen wrote:</span>
<span class="quote">&gt;&gt; So it doesn&#39;t seem to be very practical attack if the victim has set</span>
<span class="quote">&gt;&gt; itself to be non-dumpable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Probably, but considering how cheap our fix is, we might just as well</span>
<span class="quote">&gt; plug that hole too.</span>
<span class="quote">&gt; </span>

If the process has multiple threads running on different cpus,
you will need to set IBPB on all cpus they are running in
order to achieve your purpose.  So it is not necessarily cheap.
But I don&#39;t think it is really necessary.

Tim
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 30, 2018, 10:43 p.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 02:26:53PM -0800, Tim Chen wrote:
<span class="quote">&gt; If the process has multiple threads running on different cpus,</span>

I&#39;m talking about issuing the barrier in set_dumpable(). What threads on
multiple CPUs?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 30, 2018, 10:55 p.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 11:21:58PM +0100, Thomas Gleixner wrote:
<span class="quote">&gt; prctl(PR_SET_DUMPABLE, 0)               = 0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That does the trick.</span>

Ok, found it: https://dev.gnupg.org/T1211

Looks like this is debian-specific for now. Not in gnupg mainlne, AFAICT.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 31, 2018, 12:25 a.m.</div>
<pre class="content">
On 01/30/2018 02:43 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Tue, Jan 30, 2018 at 02:26:53PM -0800, Tim Chen wrote:</span>
<span class="quote">&gt;&gt; If the process has multiple threads running on different cpus,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m talking about issuing the barrier in set_dumpable(). What threads on</span>
<span class="quote">&gt; multiple CPUs?</span>
<span class="quote">&gt; </span>

As dumpable is a property in mm-&gt;flags, it affects all threads running on other cpus sharing
the same mm.  If you issue IBPB only on the cpu that perform the set_dumpable(),
the theoretical hole you are trying to close still exist on threads running on
other cpu.

        time -----&gt;
(cpu A)                set_dumpable victim (thread1), issue IBPB 
(cpu B) attacker -&gt; victim (thread2), missed IBPB                 -&gt; attacker -&gt; victim (IBPB issued)                      


That said, I think the risk is minuscule and is not worth the cost to set IBPB on the other cpus.

Tim
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Jan. 31, 2018, 12:41 a.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 04:25:26PM -0800, Tim Chen wrote:
<span class="quote">&gt; As dumpable is a property in mm-&gt;flags, it affects all threads running</span>
<span class="quote">&gt; on other cpus sharing the same mm.</span>

It is not about sharing the same mm - it is about sharing the RSB. How
many logical CPUs share an RSB? If it is per core (which can have two
threads) then issuing the barrier should have effect on both threads.
Thus one barrier is enough.

IOW, the granularity is determined by how many logical CPUs share the
RSB not by how many logical CPUs share an mm.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Jan. 31, 2018, 3:59 a.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 01:23:17PM -0800, Tim Chen wrote:
<span class="quote">&gt; On 01/30/2018 09:48 AM, Josh Poimboeuf wrote:</span>
<span class="quote">&gt; &gt; On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:</span>
<span class="quote">&gt; &gt;&gt; From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Flush indirect branches when switching into a process that marked itself</span>
<span class="quote">&gt; &gt;&gt; non dumpable. This protects high value processes like gpg better,</span>
<span class="quote">&gt; &gt;&gt; without having too high performance overhead.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I wonder what the point of this patch is.  An audit of my laptop shows</span>
<span class="quote">&gt; &gt; only a single user of PR_SET_DUMPABLE: systemd-coredump.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is an opt in approach.  For processes who need extra</span>
<span class="quote">&gt; security, it set itself as non-dumpable.  Then it can</span>
<span class="quote">&gt; ensure that it doesn&#39;t see any poisoned BTB.  </span>

I don&#39;t want other users reading my applications&#39; memory.

I don&#39;t want other containers reading my containers&#39; memory.

I don&#39;t want *any* user tasks reading root daemons&#39; memory.

Those are not unreasonable expectations.

So now I have to go and modify all my containers and applications to set
PR_SET_DUMPABLE?  That seems highly impractical and unlikely.

Plus, I happen to *like* core dumps.

The other option is to rebuild the entire userland with retpolines, but
again, that would make this patch completely pointless.
<span class="quote">
&gt; &gt; [ And yes, I have gpg-agent running.  Also, a grep of the gnupg source</span>
<span class="quote">&gt; &gt; doesn&#39;t show any evidence of it being used there.  So the gpg thing</span>
<span class="quote">&gt; &gt; seems to be a myth. ]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m less familiar with gpg-agent.  Dave was the one who</span>
<span class="quote">&gt; put in comments about gpg-agent in this patch so perhaps</span>
<span class="quote">&gt; he can comment.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; But also, I much preferred the original version of the patch which only</span>
<span class="quote">&gt; &gt; skipped IBPB when &#39;prev&#39; could ptrace &#39;next&#39;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For the A-&gt;kernel thread-&gt;B scenario, you will need context of A</span>
<span class="quote">&gt; to decide if you need IBPB when switching to B.  You need to</span>
<span class="quote">&gt; worry about whether the context of A has been released ... etc if</span>
<span class="quote">&gt; you want to use ptrace.</span>

Is that why the ptrace approach was abandoned?  Surely that&#39;s a solvable
problem?  We have some smart people on lkml.  And anyway I didn&#39;t see it
discussed anywhere.  In the worst case we could just always do IBPB when
switching between kernel and user tasks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 31, 2018, 11:25 p.m.</div>
<pre class="content">
On 01/30/2018 07:59 PM, Josh Poimboeuf wrote:
<span class="quote">&gt; On Tue, Jan 30, 2018 at 01:23:17PM -0800, Tim Chen wrote:</span>
<span class="quote">&gt;&gt; On 01/30/2018 09:48 AM, Josh Poimboeuf wrote:</span>
<span class="quote">&gt;&gt;&gt; On Mon, Jan 29, 2018 at 10:04:47PM +0000, David Woodhouse wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Flush indirect branches when switching into a process that marked itself</span>
<span class="quote">&gt;&gt;&gt;&gt; non dumpable. This protects high value processes like gpg better,</span>
<span class="quote">&gt;&gt;&gt;&gt; without having too high performance overhead.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I wonder what the point of this patch is.  An audit of my laptop shows</span>
<span class="quote">&gt;&gt;&gt; only a single user of PR_SET_DUMPABLE: systemd-coredump.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is an opt in approach.  For processes who need extra</span>
<span class="quote">&gt;&gt; security, it set itself as non-dumpable.  Then it can</span>
<span class="quote">&gt;&gt; ensure that it doesn&#39;t see any poisoned BTB.  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t want other users reading my applications&#39; memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t want other containers reading my containers&#39; memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t want *any* user tasks reading root daemons&#39; memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Those are not unreasonable expectations.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So now I have to go and modify all my containers and applications to set</span>
<span class="quote">&gt; PR_SET_DUMPABLE?  That seems highly impractical and unlikely.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Plus, I happen to *like* core dumps.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The other option is to rebuild the entire userland with retpolines, but</span>
<span class="quote">&gt; again, that would make this patch completely pointless.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; [ And yes, I have gpg-agent running.  Also, a grep of the gnupg source</span>
<span class="quote">&gt;&gt;&gt; doesn&#39;t show any evidence of it being used there.  So the gpg thing</span>
<span class="quote">&gt;&gt;&gt; seems to be a myth. ]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;m less familiar with gpg-agent.  Dave was the one who</span>
<span class="quote">&gt;&gt; put in comments about gpg-agent in this patch so perhaps</span>
<span class="quote">&gt;&gt; he can comment.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; But also, I much preferred the original version of the patch which only</span>
<span class="quote">&gt;&gt;&gt; skipped IBPB when &#39;prev&#39; could ptrace &#39;next&#39;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; For the A-&gt;kernel thread-&gt;B scenario, you will need context of A</span>
<span class="quote">&gt;&gt; to decide if you need IBPB when switching to B.  You need to</span>
<span class="quote">&gt;&gt; worry about whether the context of A has been released ... etc if</span>
<span class="quote">&gt;&gt; you want to use ptrace.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is that why the ptrace approach was abandoned?  Surely that&#39;s a solvable</span>
<span class="quote">&gt; problem?  We have some smart people on lkml.  And anyway I didn&#39;t see it</span>
<span class="quote">&gt; discussed anywhere.  In the worst case we could just always do IBPB when</span>
<span class="quote">&gt; switching between kernel and user tasks.</span>
<span class="quote">&gt; </span>

I think dumpable is not the end all policy.  It is a reasonable starting point
to provide us a means to secure the most sensitive processes without
IBPBing the world.  It is on the performance end of the security/performance trade off.

For people who opt for more security, it is reasonable to consider
alternate policies to distinguish friend and foe so we know if we are coming
from a potentially hostile environment.  Ptrace is one means to do so, and probably
there are other ways depending on usages.  I hope we can have a discussion on what we should
use to determine if two processes are friend or foe.  Say do all the processes
from the same containers are considered friends with each other?
I think once we have this decided, actually putting in IBPB will simple.

Tim
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 3effd3c..4405c4b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -174,6 +174,8 @@</span> <span class="p_context"> struct tlb_state {</span>
 	struct mm_struct *loaded_mm;
 	u16 loaded_mm_asid;
 	u16 next_asid;
<span class="p_add">+	/* last user mm&#39;s ctx id */</span>
<span class="p_add">+	u64 last_ctx_id;</span>
 
 	/*
 	 * We can be in one of several states:
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index a156195..7489890 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -6,13 +6,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/export.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/debugfs.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/mmu_context.h&gt;
<span class="p_add">+#include &lt;asm/nospec-branch.h&gt;</span>
 #include &lt;asm/cache.h&gt;
 #include &lt;asm/apic.h&gt;
 #include &lt;asm/uv/uv.h&gt;
<span class="p_del">-#include &lt;linux/debugfs.h&gt;</span>
 
 /*
  *	TLB flushing, formerly SMP-only
<span class="p_chunk">@@ -219,6 +220,27 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	} else {
 		u16 new_asid;
 		bool need_flush;
<span class="p_add">+		u64 last_ctx_id = this_cpu_read(cpu_tlbstate.last_ctx_id);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Avoid user/user BTB poisoning by flushing the branch</span>
<span class="p_add">+		 * predictor when switching between processes. This stops</span>
<span class="p_add">+		 * one process from doing Spectre-v2 attacks on another.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * As an optimization, flush indirect branches only when</span>
<span class="p_add">+		 * switching into processes that disable dumping. This</span>
<span class="p_add">+		 * protects high value processes like gpg, without having</span>
<span class="p_add">+		 * too high performance overhead. IBPB is *expensive*!</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * This will not flush branches when switching into kernel</span>
<span class="p_add">+		 * threads. It will also not flush if we switch to idle</span>
<span class="p_add">+		 * thread and back to the same process. It will flush if we</span>
<span class="p_add">+		 * switch to a different non-dumpable process.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (tsk &amp;&amp; tsk-&gt;mm &amp;&amp;</span>
<span class="p_add">+		    tsk-&gt;mm-&gt;context.ctx_id != last_ctx_id &amp;&amp;</span>
<span class="p_add">+		    get_dumpable(tsk-&gt;mm) != SUID_DUMP_USER)</span>
<span class="p_add">+			indirect_branch_prediction_barrier();</span>
 
 		if (IS_ENABLED(CONFIG_VMAP_STACK)) {
 			/*
<span class="p_chunk">@@ -268,6 +290,14 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);
 		}
 
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Record last user mm&#39;s context id, so we can avoid</span>
<span class="p_add">+		 * flushing branch buffer with IBPB if we switch back</span>
<span class="p_add">+		 * to the same user.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (next != &amp;init_mm)</span>
<span class="p_add">+			this_cpu_write(cpu_tlbstate.last_ctx_id, next-&gt;context.ctx_id);</span>
<span class="p_add">+</span>
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
 		this_cpu_write(cpu_tlbstate.loaded_mm_asid, new_asid);
 	}
<span class="p_chunk">@@ -345,6 +375,7 @@</span> <span class="p_context"> void initialize_tlbstate_and_flush(void)</span>
 	write_cr3(build_cr3(mm-&gt;pgd, 0));
 
 	/* Reinitialize tlbstate. */
<span class="p_add">+	this_cpu_write(cpu_tlbstate.last_ctx_id, mm-&gt;context.ctx_id);</span>
 	this_cpu_write(cpu_tlbstate.loaded_mm_asid, 0);
 	this_cpu_write(cpu_tlbstate.next_asid, 1);
 	this_cpu_write(cpu_tlbstate.ctxs[0].ctx_id, mm-&gt;context.ctx_id);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



