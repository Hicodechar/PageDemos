
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>hugetlb: Do not account hugetlb pages as NR_FILE_PAGES - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    hugetlb: Do not account hugetlb pages as NR_FILE_PAGES</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1091">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 22, 2015, 2:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150522142143.GF5109@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6464831/mbox/"
   >mbox</a>
|
   <a href="/patch/6464831/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6464831/">/patch/6464831/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 9B8D7C0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 May 2015 14:21:58 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 787BC20495
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 May 2015 14:21:57 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3E59F20494
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 22 May 2015 14:21:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756974AbbEVOVs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 22 May 2015 10:21:48 -0400
Received: from mail-wg0-f51.google.com ([74.125.82.51]:35746 &quot;EHLO
	mail-wg0-f51.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755934AbbEVOVq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 22 May 2015 10:21:46 -0400
Received: by wgfl8 with SMTP id l8so19370841wgf.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 22 May 2015 07:21:44 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:date:from:to:cc:subject:message-id:references:mime-version
	:content-type:content-disposition:in-reply-to:user-agent;
	bh=dpMIvtPlXIWcDvH98P8dABhU1NaR0AUbhdasEJ6kLwI=;
	b=U6YlwMrxZNcu5Krhk8T+rmZdR9lHWOj+d9Bz3cyREQAsKs/gUG1jqZp+nwGqEwP6h2
	UNkVma3gVeBEPOK5nR8oihdSBunCDxs0rJHb1Wrwe62ms9cHXnH/8ogYo+klsR2Q+wSq
	3cOzHwBBxUstC7M3z2V0Ke/i0fZDiTuWtMtg3c1Wzf0P+AlJwuIWAU6Qp+XoUDoSgLLZ
	j3Kdja9TWKfdinxq9vgStPHIBoHmi77uOW3dxy6pZVpAEkJ+iM68ecDuwvBA7ZRbH4g/
	8WQusI+9sfqfbF6AXp3K88T/+Cuqs/FNiAKoJSFaUwGKls94tYLpMYolFg47ZbWvo5/g
	eXVQ==
X-Received: by 10.180.7.169 with SMTP id k9mr8195935wia.70.1432304504841;
	Fri, 22 May 2015 07:21:44 -0700 (PDT)
Received: from localhost (ip-86-49-65-8.net.upcbroadband.cz. [86.49.65.8])
	by mx.google.com with ESMTPSA id
	ei8sm3366912wjd.32.2015.05.22.07.21.43
	(version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 22 May 2015 07:21:43 -0700 (PDT)
Date: Fri, 22 May 2015 16:21:43 +0200
From: Michal Hocko &lt;mhocko@suse.cz&gt;
To: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	linux-mm@kvack.org, LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [PATCH] hugetlb: Do not account hugetlb pages as NR_FILE_PAGES
Message-ID: &lt;20150522142143.GF5109@dhcp22.suse.cz&gt;
References: &lt;1432214842-22730-1-git-send-email-mhocko@suse.cz&gt;
	&lt;20150521170909.GA12800@cmpxchg.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20150521170909.GA12800@cmpxchg.org&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID,T_RP_MATCHES_RCVD,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1091">Michal Hocko</a> - May 22, 2015, 2:21 p.m.</div>
<pre class="content">
On Thu 21-05-15 13:09:09, Johannes Weiner wrote:
<span class="quote">&gt; On Thu, May 21, 2015 at 03:27:22PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; hugetlb pages uses add_to_page_cache to track shared mappings. This</span>
<span class="quote">&gt; &gt; is OK from the data structure point of view but it is less so from the</span>
<span class="quote">&gt; &gt; NR_FILE_PAGES accounting:</span>
<span class="quote">&gt; &gt; 	- huge pages are accounted as 4k which is clearly wrong</span>
<span class="quote">&gt; &gt; 	- this counter is used as the amount of the reclaimable page</span>
<span class="quote">&gt; &gt; 	  cache which is incorrect as well because hugetlb pages are</span>
<span class="quote">&gt; &gt; 	  special and not reclaimable</span>
<span class="quote">&gt; &gt; 	- the counter is then exported to userspace via /proc/meminfo</span>
<span class="quote">&gt; &gt; 	  (in Cached:), /proc/vmstat and /proc/zoneinfo as</span>
<span class="quote">&gt; &gt; 	  nr_file_pages which is confusing at least:</span>
<span class="quote">&gt; &gt; 	  Cached:          8883504 kB</span>
<span class="quote">&gt; &gt; 	  HugePages_Free:     8348</span>
<span class="quote">&gt; &gt; 	  ...</span>
<span class="quote">&gt; &gt; 	  Cached:          8916048 kB</span>
<span class="quote">&gt; &gt; 	  HugePages_Free:      156</span>
<span class="quote">&gt; &gt; 	  ...</span>
<span class="quote">&gt; &gt; 	  thats 8192 huge pages allocated which is ~16G accounted as 32M</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; There are usually not that many huge pages in the system for this to</span>
<span class="quote">&gt; &gt; make any visible difference e.g. by fooling __vm_enough_memory or</span>
<span class="quote">&gt; &gt; zone_pagecache_reclaimable.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Fix this by special casing huge pages in both __delete_from_page_cache</span>
<span class="quote">&gt; &gt; and __add_to_page_cache_locked. replace_page_cache_page is currently</span>
<span class="quote">&gt; &gt; only used by fuse and that shouldn&#39;t touch hugetlb pages AFAICS but it</span>
<span class="quote">&gt; &gt; is more robust to check for special casing there as well.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hugetlb pages shouldn&#39;t get to any other paths where we do accounting:</span>
<span class="quote">&gt; &gt; 	- migration - we have a special handling via</span>
<span class="quote">&gt; &gt; 	  hugetlbfs_migrate_page</span>
<span class="quote">&gt; &gt; 	- shmem - doesn&#39;t handle hugetlb pages directly even for</span>
<span class="quote">&gt; &gt; 	  SHM_HUGETLB resp. MAP_HUGETLB</span>
<span class="quote">&gt; &gt; 	- swapcache - hugetlb is not swapable</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This has a user visible effect but I believe it is reasonable because</span>
<span class="quote">&gt; &gt; the previously exported number is simply bogus.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; An alternative would be to account hugetlb pages with their real size</span>
<span class="quote">&gt; &gt; and treat them similar to shmem. But this has some drawbacks.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; First we would have to special case in kernel users of NR_FILE_PAGES and</span>
<span class="quote">&gt; &gt; considering how hugetlb is special we would have to do it everywhere. We</span>
<span class="quote">&gt; &gt; do not want Cached exported by /proc/meminfo to include it because the</span>
<span class="quote">&gt; &gt; value would be even more misleading.</span>
<span class="quote">&gt; &gt; __vm_enough_memory and zone_pagecache_reclaimable would have to do</span>
<span class="quote">&gt; &gt; the same thing because those pages are simply not reclaimable. The</span>
<span class="quote">&gt; &gt; correction is even not trivial because we would have to consider all</span>
<span class="quote">&gt; &gt; active hugetlb page sizes properly. Users of the counter outside of the</span>
<span class="quote">&gt; &gt; kernel would have to do the same.</span>
<span class="quote">&gt; &gt; So the question is why to account something that needs to be basically</span>
<span class="quote">&gt; &gt; excluded for each reasonable usage. This doesn&#39;t make much sense to me.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; It seems that this has been broken since hugetlb was introduced but I</span>
<span class="quote">&gt; &gt; haven&#39;t checked the whole history.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.cz&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Acked-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>

Thanks!
<span class="quote">
&gt; This makes a lot of sense to me.  The only thing I worry about is the</span>
<span class="quote">&gt; proliferation of PageHuge(), a function call, in relatively hot paths.</span>

I&#39;ve tried that (see the patch below) but it enlarged the code by almost
1k
   text    data     bss     dec     hex filename
 510323   74273   44440  629036   9992c mm/built-in.o.before
 511248   74273   44440  629961   99cc9 mm/built-in.o.after

I am not sure the code size increase is worth it. Maybe we can reduce
the check to only PageCompound(page) as huge pages are no in the page
cache (yet).

---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1091">Michal Hocko</a> - May 22, 2015, 2:28 p.m.</div>
<pre class="content">
On Fri 22-05-15 16:21:43, Michal Hocko wrote:
<span class="quote">&gt; On Thu 21-05-15 13:09:09, Johannes Weiner wrote:</span>
[...]
<span class="quote">&gt; &gt; This makes a lot of sense to me.  The only thing I worry about is the</span>
<span class="quote">&gt; &gt; proliferation of PageHuge(), a function call, in relatively hot paths.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve tried that (see the patch below) but it enlarged the code by almost</span>
<span class="quote">&gt; 1k</span>
<span class="quote">&gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt;  510323   74273   44440  629036   9992c mm/built-in.o.before</span>
<span class="quote">&gt;  511248   74273   44440  629961   99cc9 mm/built-in.o.after</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not sure the code size increase is worth it. Maybe we can reduce</span>
<span class="quote">&gt; the check to only PageCompound(page) as huge pages are no in the page</span>
<span class="quote">&gt; cache (yet).</span>

Just to prevent from confusion. I means to reduce the check only for
this particular case. But that is probably not worth the troubles
either...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=24451">Mel Gorman</a> - May 22, 2015, 2:35 p.m.</div>
<pre class="content">
On Fri, May 22, 2015 at 04:21:43PM +0200, Michal Hocko wrote:
<span class="quote">&gt; On Thu 21-05-15 13:09:09, Johannes Weiner wrote:</span>
<span class="quote">&gt; &gt; On Thu, May 21, 2015 at 03:27:22PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; hugetlb pages uses add_to_page_cache to track shared mappings. This</span>
<span class="quote">&gt; &gt; &gt; is OK from the data structure point of view but it is less so from the</span>
<span class="quote">&gt; &gt; &gt; NR_FILE_PAGES accounting:</span>
<span class="quote">&gt; &gt; &gt; 	- huge pages are accounted as 4k which is clearly wrong</span>
<span class="quote">&gt; &gt; &gt; 	- this counter is used as the amount of the reclaimable page</span>
<span class="quote">&gt; &gt; &gt; 	  cache which is incorrect as well because hugetlb pages are</span>
<span class="quote">&gt; &gt; &gt; 	  special and not reclaimable</span>
<span class="quote">&gt; &gt; &gt; 	- the counter is then exported to userspace via /proc/meminfo</span>
<span class="quote">&gt; &gt; &gt; 	  (in Cached:), /proc/vmstat and /proc/zoneinfo as</span>
<span class="quote">&gt; &gt; &gt; 	  nr_file_pages which is confusing at least:</span>
<span class="quote">&gt; &gt; &gt; 	  Cached:          8883504 kB</span>
<span class="quote">&gt; &gt; &gt; 	  HugePages_Free:     8348</span>
<span class="quote">&gt; &gt; &gt; 	  ...</span>
<span class="quote">&gt; &gt; &gt; 	  Cached:          8916048 kB</span>
<span class="quote">&gt; &gt; &gt; 	  HugePages_Free:      156</span>
<span class="quote">&gt; &gt; &gt; 	  ...</span>
<span class="quote">&gt; &gt; &gt; 	  thats 8192 huge pages allocated which is ~16G accounted as 32M</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; There are usually not that many huge pages in the system for this to</span>
<span class="quote">&gt; &gt; &gt; make any visible difference e.g. by fooling __vm_enough_memory or</span>
<span class="quote">&gt; &gt; &gt; zone_pagecache_reclaimable.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Fix this by special casing huge pages in both __delete_from_page_cache</span>
<span class="quote">&gt; &gt; &gt; and __add_to_page_cache_locked. replace_page_cache_page is currently</span>
<span class="quote">&gt; &gt; &gt; only used by fuse and that shouldn&#39;t touch hugetlb pages AFAICS but it</span>
<span class="quote">&gt; &gt; &gt; is more robust to check for special casing there as well.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Hugetlb pages shouldn&#39;t get to any other paths where we do accounting:</span>
<span class="quote">&gt; &gt; &gt; 	- migration - we have a special handling via</span>
<span class="quote">&gt; &gt; &gt; 	  hugetlbfs_migrate_page</span>
<span class="quote">&gt; &gt; &gt; 	- shmem - doesn&#39;t handle hugetlb pages directly even for</span>
<span class="quote">&gt; &gt; &gt; 	  SHM_HUGETLB resp. MAP_HUGETLB</span>
<span class="quote">&gt; &gt; &gt; 	- swapcache - hugetlb is not swapable</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; This has a user visible effect but I believe it is reasonable because</span>
<span class="quote">&gt; &gt; &gt; the previously exported number is simply bogus.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; An alternative would be to account hugetlb pages with their real size</span>
<span class="quote">&gt; &gt; &gt; and treat them similar to shmem. But this has some drawbacks.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; First we would have to special case in kernel users of NR_FILE_PAGES and</span>
<span class="quote">&gt; &gt; &gt; considering how hugetlb is special we would have to do it everywhere. We</span>
<span class="quote">&gt; &gt; &gt; do not want Cached exported by /proc/meminfo to include it because the</span>
<span class="quote">&gt; &gt; &gt; value would be even more misleading.</span>
<span class="quote">&gt; &gt; &gt; __vm_enough_memory and zone_pagecache_reclaimable would have to do</span>
<span class="quote">&gt; &gt; &gt; the same thing because those pages are simply not reclaimable. The</span>
<span class="quote">&gt; &gt; &gt; correction is even not trivial because we would have to consider all</span>
<span class="quote">&gt; &gt; &gt; active hugetlb page sizes properly. Users of the counter outside of the</span>
<span class="quote">&gt; &gt; &gt; kernel would have to do the same.</span>
<span class="quote">&gt; &gt; &gt; So the question is why to account something that needs to be basically</span>
<span class="quote">&gt; &gt; &gt; excluded for each reasonable usage. This doesn&#39;t make much sense to me.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; It seems that this has been broken since hugetlb was introduced but I</span>
<span class="quote">&gt; &gt; &gt; haven&#39;t checked the whole history.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.cz&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Acked-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; This makes a lot of sense to me.  The only thing I worry about is the</span>
<span class="quote">&gt; &gt; proliferation of PageHuge(), a function call, in relatively hot paths.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve tried that (see the patch below) but it enlarged the code by almost</span>
<span class="quote">&gt; 1k</span>
<span class="quote">&gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt;  510323   74273   44440  629036   9992c mm/built-in.o.before</span>
<span class="quote">&gt;  511248   74273   44440  629961   99cc9 mm/built-in.o.after</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not sure the code size increase is worth it. Maybe we can reduce</span>
<span class="quote">&gt; the check to only PageCompound(page) as huge pages are no in the page</span>
<span class="quote">&gt; cache (yet).</span>
<span class="quote">&gt; </span>

That would be a more sensible route because it also avoids exposing the
hugetlbfs destructor unnecessarily.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - May 25, 2015, 3:24 p.m.</div>
<pre class="content">
On 05/22/2015 04:35 PM, Mel Gorman wrote:
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Thanks!</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; This makes a lot of sense to me.  The only thing I worry about is the</span>
<span class="quote">&gt;&gt; &gt; proliferation of PageHuge(), a function call, in relatively hot paths.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; I&#39;ve tried that (see the patch below) but it enlarged the code by almost</span>
<span class="quote">&gt;&gt; 1k</span>
<span class="quote">&gt;&gt;    text    data     bss     dec     hex filename</span>
<span class="quote">&gt;&gt;  510323   74273   44440  629036   9992c mm/built-in.o.before</span>
<span class="quote">&gt;&gt;  511248   74273   44440  629961   99cc9 mm/built-in.o.after</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; I am not sure the code size increase is worth it. Maybe we can reduce</span>
<span class="quote">&gt;&gt; the check to only PageCompound(page) as huge pages are no in the page</span>
<span class="quote">&gt;&gt; cache (yet).</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That would be a more sensible route because it also avoids exposing the</span>
<span class="quote">&gt; hugetlbfs destructor unnecessarily.</span>

You could maybe do test such as (PageCompound(page) &amp;&amp; PageHuge(page)) to
short-circuit the call while remaining future-proof.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index 205026175c42..2e36251ad31b 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -84,7 +84,6 @@</span> <span class="p_context"> void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed);</span>
 int dequeue_hwpoisoned_huge_page(struct page *page);
 bool isolate_huge_page(struct page *page, struct list_head *list);
 void putback_active_hugepage(struct page *page);
<span class="p_del">-void free_huge_page(struct page *page);</span>
 
 #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE
 pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 2923a51979e9..5b6c49e55f80 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -531,23 +531,6 @@</span> <span class="p_context"> void put_pages_list(struct list_head *pages);</span>
 void split_page(struct page *page, unsigned int order);
 int split_free_page(struct page *page);
 
<span class="p_del">-/*</span>
<span class="p_del">- * Compound pages have a destructor function.  Provide a</span>
<span class="p_del">- * prototype for that function and accessor functions.</span>
<span class="p_del">- * These are _only_ valid on the head of a PG_compound page.</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void set_compound_page_dtor(struct page *page,</span>
<span class="p_del">-						compound_page_dtor *dtor)</span>
<span class="p_del">-{</span>
<span class="p_del">-	page[1].compound_dtor = dtor;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline compound_page_dtor *get_compound_page_dtor(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return page[1].compound_dtor;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline int compound_order(struct page *page)
 {
 	if (!PageHead(page))
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 8d37e26a1007..a9ecaebb5392 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -226,6 +226,23 @@</span> <span class="p_context"> struct page_frag {</span>
 #endif
 };
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Compound pages have a destructor function.  Provide a</span>
<span class="p_add">+ * prototype for that function and accessor functions.</span>
<span class="p_add">+ * These are _only_ valid on the head of a PG_compound page.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void set_compound_page_dtor(struct page *page,</span>
<span class="p_add">+						compound_page_dtor *dtor)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page[1].compound_dtor = dtor;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline compound_page_dtor *get_compound_page_dtor(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return page[1].compound_dtor;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 typedef unsigned long __nocast vm_flags_t;
 
 /*
<span class="p_header">diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="p_header">index 91b7f9b2b774..41329fbb5890 100644</span>
<span class="p_header">--- a/include/linux/page-flags.h</span>
<span class="p_header">+++ b/include/linux/page-flags.h</span>
<span class="p_chunk">@@ -547,7 +547,21 @@</span> <span class="p_context"> static inline void ClearPageCompound(struct page *page)</span>
 #endif /* !PAGEFLAGS_EXTENDED */
 
 #ifdef CONFIG_HUGETLB_PAGE
<span class="p_del">-int PageHuge(struct page *page);</span>
<span class="p_add">+void free_huge_page(struct page *page);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * PageHuge() only returns true for hugetlbfs pages, but not for normal or</span>
<span class="p_add">+ * transparent huge pages.  See the PageTransHuge() documentation for more</span>
<span class="p_add">+ * details.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int PageHuge(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!PageCompound(page))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	return get_compound_page_dtor(page) == free_huge_page;</span>
<span class="p_add">+}</span>
 int PageHeadHuge(struct page *page);
 bool page_huge_active(struct page *page);
 #else
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 54f129dc37f6..406913f3b234 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1041,21 +1041,6 @@</span> <span class="p_context"> static void prep_compound_gigantic_page(struct page *page, unsigned long order)</span>
 }
 
 /*
<span class="p_del">- * PageHuge() only returns true for hugetlbfs pages, but not for normal or</span>
<span class="p_del">- * transparent huge pages.  See the PageTransHuge() documentation for more</span>
<span class="p_del">- * details.</span>
<span class="p_del">- */</span>
<span class="p_del">-int PageHuge(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (!PageCompound(page))</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	page = compound_head(page);</span>
<span class="p_del">-	return get_compound_page_dtor(page) == free_huge_page;</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(PageHuge);</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * PageHeadHuge() only returns true for hugetlbfs head page, but not for
  * normal or transparent huge pages.
  */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



