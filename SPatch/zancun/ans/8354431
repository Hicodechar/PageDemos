
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:mm/pkeys] mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:mm/pkeys] mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 18, 2016, 8:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-33a709b25a760b91184bb335cf7d7c32b8123013@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8354431/mbox/"
   >mbox</a>
|
   <a href="/patch/8354431/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8354431/">/patch/8354431/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 5FC3C9F372
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Feb 2016 20:25:26 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 20C8F203C3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Feb 2016 20:25:18 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 864B320397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 18 Feb 2016 20:25:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1948170AbcBRUZB (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 18 Feb 2016 15:25:01 -0500
Received: from terminus.zytor.com ([198.137.202.10]:47181 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1947059AbcBRUY4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 18 Feb 2016 15:24:56 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.14.8/8.14.7) with ESMTP id u1IKMHA9024399;
	Thu, 18 Feb 2016 12:22:22 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.14.8/8.14.7/Submit) id u1IKMCF7024381;
	Thu, 18 Feb 2016 12:22:12 -0800
Date: Thu, 18 Feb 2016 12:22:12 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Dave Hansen &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-33a709b25a760b91184bb335cf7d7c32b8123013@git.kernel.org&gt;
Cc: hpa@zytor.com, dan.j.williams@intel.com, willy@linux.intel.com,
	dvlasenk@redhat.com, mgorman@suse.de, raindel@mellanox.com,
	mingo@kernel.org, dave@sr71.net, riel@redhat.com,
	david@gibson.dropbear.id.au, boaz@plexistor.com,
	tglx@linutronix.de, torvalds@linux-foundation.org,
	jmarchan@redhat.com, vogt@linux.vnet.ibm.com, arnd@arndb.de,
	dingel@linux.vnet.ibm.com, peterz@infradead.org, sds@tycho.nsa.gov,
	mhocko@suse.com, luto@kernel.org, mpe@ellerman.id.au,
	dave.hansen@linux.intel.com, dahi@linux.vnet.ibm.com,
	sasha.levin@oracle.com, gxt@mprc.pku.edu.cn,
	david.vrabel@citrix.com, hughd@google.com, minchan@kernel.org,
	luto@amacapital.net, benh@kernel.crashing.org, bp@alien8.de,
	vbabka@suse.cz, toshi.kani@hpe.com, heiko.carstens@de.ibm.com,
	aneesh.kumar@linux.vnet.ibm.com, jgross@suse.com,
	kirill.shutemov@linux.intel.com, jason.low2@hp.com,
	brgerst@gmail.com, akpm@linux-foundation.org,
	linux-kernel@vger.kernel.org, schwidefsky@de.ibm.com,
	mpatocka@redhat.com, aik@ozlabs.ru, ldufour@linux.vnet.ibm.com,
	paulus@samba.org
Reply-To: dave@sr71.net, mingo@kernel.org, dvlasenk@redhat.com,
	raindel@mellanox.com, mgorman@suse.de, riel@redhat.com,
	david@gibson.dropbear.id.au, hpa@zytor.com,
	dan.j.williams@intel.com, willy@linux.intel.com,
	peterz@infradead.org, dingel@linux.vnet.ibm.com, mhocko@suse.com,
	sds@tycho.nsa.gov, arnd@arndb.de, vogt@linux.vnet.ibm.com,
	mpe@ellerman.id.au, dave.hansen@linux.intel.com, luto@kernel.org,
	tglx@linutronix.de, boaz@plexistor.com, jmarchan@redhat.com,
	torvalds@linux-foundation.org, luto@amacapital.net,
	minchan@kernel.org, benh@kernel.crashing.org,
	david.vrabel@citrix.com, dahi@linux.vnet.ibm.com,
	gxt@mprc.pku.edu.cn, sasha.levin@oracle.com, hughd@google.com,
	schwidefsky@de.ibm.com, mpatocka@redhat.com,
	akpm@linux-foundation.org, linux-kernel@vger.kernel.org,
	paulus@samba.org, aik@ozlabs.ru, ldufour@linux.vnet.ibm.com,
	heiko.carstens@de.ibm.com, toshi.kani@hpe.com,
	aneesh.kumar@linux.vnet.ibm.com, jgross@suse.com, vbabka@suse.cz,
	bp@alien8.de, jason.low2@hp.com, brgerst@gmail.com,
	kirill.shutemov@linux.intel.com
In-Reply-To: &lt;20160212210219.14D5D715@viggo.jf.intel.com&gt;
References: &lt;20160212210219.14D5D715@viggo.jf.intel.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:mm/pkeys] mm/gup, x86/mm/pkeys:
	Check VMAs and PTEs for protection keys
Git-Commit-ID: 33a709b25a760b91184bb335cf7d7c32b8123013
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt;
	to get blacklisted from these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Feb. 18, 2016, 8:22 p.m.</div>
<pre class="content">
Commit-ID:  33a709b25a760b91184bb335cf7d7c32b8123013
Gitweb:     http://git.kernel.org/tip/33a709b25a760b91184bb335cf7d7c32b8123013
Author:     Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
AuthorDate: Fri, 12 Feb 2016 13:02:19 -0800
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Thu, 18 Feb 2016 09:32:44 +0100

mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys

Today, for normal faults and page table walks, we check the VMA
and/or PTE to ensure that it is compatible with the action.  For
instance, if we get a write fault on a non-writeable VMA, we
SIGSEGV.

We try to do the same thing for protection keys.  Basically, we
try to make sure that if a user does this:

	mprotect(ptr, size, PROT_NONE);
	*ptr = foo;

they see the same effects with protection keys when they do this:

	mprotect(ptr, size, PROT_READ|PROT_WRITE);
	set_pkey(ptr, size, 4);
	wrpkru(0xffffff3f); // access disable pkey 4
	*ptr = foo;

The state to do that checking is in the VMA, but we also
sometimes have to do it on the page tables only, like when doing
a get_user_pages_fast() where we have no VMA.

We add two functions and expose them to generic code:

	arch_pte_access_permitted(pte_flags, write)
	arch_vma_access_permitted(vma, write)

These are, of course, backed up in x86 arch code with checks
against the PTE or VMA&#39;s protection key.

But, there are also cases where we do not want to respect
protection keys.  When we ptrace(), for instance, we do not want
to apply the tracer&#39;s PKRU permissions to the PTEs from the
process being traced.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: Alexey Kardashevskiy &lt;aik@ozlabs.ru&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;
Cc: Boaz Harrosh &lt;boaz@plexistor.com&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Dan Williams &lt;dan.j.williams@intel.com&gt;
Cc: Dave Hansen &lt;dave@sr71.net&gt;
Cc: David Gibson &lt;david@gibson.dropbear.id.au&gt;
Cc: David Hildenbrand &lt;dahi@linux.vnet.ibm.com&gt;
Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: Dominik Dingel &lt;dingel@linux.vnet.ibm.com&gt;
Cc: Dominik Vogt &lt;vogt@linux.vnet.ibm.com&gt;
Cc: Guan Xuetao &lt;gxt@mprc.pku.edu.cn&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Jason Low &lt;jason.low2@hp.com&gt;
Cc: Jerome Marchand &lt;jmarchan@redhat.com&gt;
Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;
Cc: Matthew Wilcox &lt;willy@linux.intel.com&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
Cc: Michael Ellerman &lt;mpe@ellerman.id.au&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Mikulas Patocka &lt;mpatocka@redhat.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Paul Mackerras &lt;paulus@samba.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Sasha Levin &lt;sasha.levin@oracle.com&gt;
Cc: Shachar Raindel &lt;raindel@mellanox.com&gt;
Cc: Stephen Smalley &lt;sds@tycho.nsa.gov&gt;
Cc: Toshi Kani &lt;toshi.kani@hpe.com&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: linux-arch@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org
Cc: linux-s390@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org
Link: http://lkml.kernel.org/r/20160212210219.14D5D715@viggo.jf.intel.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/powerpc/include/asm/mmu_context.h   | 11 +++++++
 arch/s390/include/asm/mmu_context.h      | 11 +++++++
 arch/unicore32/include/asm/mmu_context.h | 11 +++++++
 arch/x86/include/asm/mmu_context.h       | 49 ++++++++++++++++++++++++++++++++
 arch/x86/include/asm/pgtable.h           | 29 +++++++++++++++++++
 arch/x86/mm/fault.c                      | 21 +++++++++++++-
 arch/x86/mm/gup.c                        |  5 ++++
 include/asm-generic/mm_hooks.h           | 11 +++++++
 mm/gup.c                                 | 18 ++++++++++--
 mm/memory.c                              |  4 +++
 10 files changed, 166 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu_context.h b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">index 878c277..a0f1838 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -148,5 +148,16 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(struct mm_struct *mm,</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __KERNEL__ */
 #endif /* __ASM_POWERPC_MMU_CONTEXT_H */
<span class="p_header">diff --git a/arch/s390/include/asm/mmu_context.h b/arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">index fb1b93e..2627b33 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -130,4 +130,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(struct mm_struct *mm,</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __S390_MMU_CONTEXT_H */
<span class="p_header">diff --git a/arch/unicore32/include/asm/mmu_context.h b/arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_header">index 1cb5220..3133f94 100644</span>
<span class="p_header">--- a/arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -97,4 +97,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(struct mm_struct *mm,</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index 94c4c8b..19036cd 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -286,4 +286,53 @@</span> <span class="p_context"> static inline int vma_pkey(struct vm_area_struct *vma)</span>
 	return pkey;
 }
 
<span class="p_add">+static inline bool __pkru_allows_pkey(u16 pkey, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 pkru = read_pkru();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!__pkru_allows_read(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (write &amp;&amp; !__pkru_allows_write(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * We only want to enforce protection keys on the current process</span>
<span class="p_add">+ * because we effectively have no access to PKRU for other</span>
<span class="p_add">+ * processes or any way to tell *which * PKRU in a threaded</span>
<span class="p_add">+ * process we could use.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * So do not enforce things if the VMA is not from the current</span>
<span class="p_add">+ * mm, or if we are in a kernel thread.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool vma_is_foreign(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!current-&gt;mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Should PKRU be enforced on the access to this VMA?  If</span>
<span class="p_add">+	 * the VMA is from another process, then PKRU has no</span>
<span class="p_add">+	 * relevance and should not be enforced.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (current-&gt;mm != vma-&gt;vm_mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* allow access if the VMA is not one from this process */</span>
<span class="p_add">+	if (vma_is_foreign(vma))</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return __pkru_allows_pkey(vma_pkey(vma), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __pkru_allows_pkey(pte_flags_pkey(pte_flags(pte)), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_MMU_CONTEXT_H */
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index e997dcc..3cbfae8 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -919,6 +919,35 @@</span> <span class="p_context"> static inline pte_t pte_swp_clear_soft_dirty(pte_t pte)</span>
 }
 #endif
 
<span class="p_add">+#define PKRU_AD_BIT 0x1</span>
<span class="p_add">+#define PKRU_WD_BIT 0x2</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_read(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	return !(pkru &amp; (PKRU_AD_BIT &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_write(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access-disable disables writes too so we need to check</span>
<span class="p_add">+	 * both bits here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return !(pkru &amp; ((PKRU_AD_BIT|PKRU_WD_BIT) &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u16 pte_flags_pkey(unsigned long pte_flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="p_add">+	/* ifdef to avoid doing 59-bit shift on 32-bit values */</span>
<span class="p_add">+	return (pte_flags &amp; _PAGE_PKEY_MASK) &gt;&gt; _PAGE_BIT_PKEY_BIT0;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #include &lt;asm-generic/pgtable.h&gt;
 #endif	/* __ASSEMBLY__ */
 
<span class="p_header">diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c</span>
<span class="p_header">index 6e71dcf..319331a 100644</span>
<span class="p_header">--- a/arch/x86/mm/fault.c</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c</span>
<span class="p_chunk">@@ -897,6 +897,16 @@</span> <span class="p_context"> bad_area(struct pt_regs *regs, unsigned long error_code, unsigned long address)</span>
 	__bad_area(regs, error_code, address, NULL, SEGV_MAPERR);
 }
 
<span class="p_add">+static inline bool bad_area_access_from_pkeys(unsigned long error_code,</span>
<span class="p_add">+		struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static noinline void
 bad_area_access_error(struct pt_regs *regs, unsigned long error_code,
 		      unsigned long address, struct vm_area_struct *vma)
<span class="p_chunk">@@ -906,7 +916,7 @@</span> <span class="p_context"> bad_area_access_error(struct pt_regs *regs, unsigned long error_code,</span>
 	 * But, doing it this way allows compiler optimizations
 	 * if pkeys are compiled out.
 	 */
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_OSPKE) &amp;&amp; (error_code &amp; PF_PK))</span>
<span class="p_add">+	if (bad_area_access_from_pkeys(error_code, vma))</span>
 		__bad_area(regs, error_code, address, vma, SEGV_PKUERR);
 	else
 		__bad_area(regs, error_code, address, vma, SEGV_ACCERR);
<span class="p_chunk">@@ -1081,6 +1091,15 @@</span> <span class="p_context"> int show_unhandled_signals = 1;</span>
 static inline int
 access_error(unsigned long error_code, struct vm_area_struct *vma)
 {
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access or read was blocked by protection keys. We do</span>
<span class="p_add">+	 * this check before any others because we do not want</span>
<span class="p_add">+	 * to, for instance, confuse a protection-key-denied</span>
<span class="p_add">+	 * write with one for which we should do a COW.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+</span>
 	if (error_code &amp; PF_WRITE) {
 		/* write, present and write, not present: */
 		if (unlikely(!(vma-&gt;vm_flags &amp; VM_WRITE)))
<span class="p_header">diff --git a/arch/x86/mm/gup.c b/arch/x86/mm/gup.c</span>
<span class="p_header">index 2f0a329..bab259e 100644</span>
<span class="p_header">--- a/arch/x86/mm/gup.c</span>
<span class="p_header">+++ b/arch/x86/mm/gup.c</span>
<span class="p_chunk">@@ -11,6 +11,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/memremap.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 
 static inline pte_t gup_get_pte(pte_t *ptep)
<span class="p_chunk">@@ -89,6 +90,10 @@</span> <span class="p_context"> static inline int pte_allows_gup(unsigned long pteval, int write)</span>
 	if ((pteval &amp; need_pte_bits) != need_pte_bits)
 		return 0;
 
<span class="p_add">+	/* Check memory protection keys permissions. */</span>
<span class="p_add">+	if (!__pkru_allows_pkey(pte_flags_pkey(pteval), write))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
 	return 1;
 }
 
<span class="p_header">diff --git a/include/asm-generic/mm_hooks.h b/include/asm-generic/mm_hooks.h</span>
<span class="p_header">index 866aa46..c1fc5af 100644</span>
<span class="p_header">--- a/include/asm-generic/mm_hooks.h</span>
<span class="p_header">+++ b/include/asm-generic/mm_hooks.h</span>
<span class="p_chunk">@@ -26,4 +26,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(struct mm_struct *mm,</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif	/* _ASM_GENERIC_MM_HOOKS_H */
<span class="p_header">diff --git a/mm/gup.c b/mm/gup.c</span>
<span class="p_header">index b935c2c..e0f5f357 100644</span>
<span class="p_header">--- a/mm/gup.c</span>
<span class="p_header">+++ b/mm/gup.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/rwsem.h&gt;
 #include &lt;linux/hugetlb.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 
<span class="p_chunk">@@ -444,6 +445,8 @@</span> <span class="p_context"> static int check_vma_flags(struct vm_area_struct *vma, unsigned long gup_flags)</span>
 		if (!(vm_flags &amp; VM_MAYREAD))
 			return -EFAULT;
 	}
<span class="p_add">+	if (!arch_vma_access_permitted(vma, (gup_flags &amp; FOLL_WRITE)))</span>
<span class="p_add">+		return -EFAULT;</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -612,13 +615,19 @@</span> <span class="p_context"> EXPORT_SYMBOL(__get_user_pages);</span>
 
 bool vma_permits_fault(struct vm_area_struct *vma, unsigned int fault_flags)
 {
<span class="p_del">-	vm_flags_t vm_flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	vm_flags = (fault_flags &amp; FAULT_FLAG_WRITE) ? VM_WRITE : VM_READ;</span>
<span class="p_add">+	bool write = !!(fault_flags &amp; FAULT_FLAG_WRITE);</span>
<span class="p_add">+	vm_flags_t vm_flags = write ? VM_WRITE : VM_READ;</span>
 
 	if (!(vm_flags &amp; vma-&gt;vm_flags))
 		return false;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The architecture might have a hardware protection</span>
<span class="p_add">+	 * mechanism other than read/write that can deny access</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, write))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
 	return true;
 }
 
<span class="p_chunk">@@ -1172,6 +1181,9 @@</span> <span class="p_context"> static int gup_pte_range(pmd_t pmd, unsigned long addr, unsigned long end,</span>
 			pte_protnone(pte) || (write &amp;&amp; !pte_write(pte)))
 			goto pte_unmap;
 
<span class="p_add">+		if (!arch_pte_access_permitted(pte, write))</span>
<span class="p_add">+			goto pte_unmap;</span>
<span class="p_add">+</span>
 		VM_BUG_ON(!pfn_valid(pte_pfn(pte)));
 		page = pte_page(pte);
 		head = compound_head(page);
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 8bfbad0..d7e84fe 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -65,6 +65,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/userfaultfd_k.h&gt;
 
 #include &lt;asm/io.h&gt;
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/uaccess.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -3378,6 +3379,9 @@</span> <span class="p_context"> static int __handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	pmd_t *pmd;
 	pte_t *pte;
 
<span class="p_add">+	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE))</span>
<span class="p_add">+		return VM_FAULT_SIGSEGV;</span>
<span class="p_add">+</span>
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return hugetlb_fault(mm, vma, address, flags);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



