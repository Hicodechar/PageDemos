
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/hyperv] x86/hyperv: Stop suppressing X86_FEATURE_PCID - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/hyperv] x86/hyperv: Stop suppressing X86_FEATURE_PCID</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 24, 2018, 12:48 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-04651dd978a8749e59065df14b970a127f219ac2@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10182459/mbox/"
   >mbox</a>
|
   <a href="/patch/10182459/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10182459/">/patch/10182459/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A3EC9602B7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 12:50:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 404E32890A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 12:50:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3EC122891B; Wed, 24 Jan 2018 12:50:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 77D6C2890A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 Jan 2018 12:50:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933626AbeAXMuL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 Jan 2018 07:50:11 -0500
Received: from terminus.zytor.com ([65.50.211.136]:59511 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933386AbeAXMuJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 Jan 2018 07:50:09 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id w0OCmxaj026778;
	Wed, 24 Jan 2018 04:48:59 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id w0OCmwYG026771;
	Wed, 24 Jan 2018 04:48:58 -0800
Date: Wed, 24 Jan 2018 04:48:58 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Vitaly Kuznetsov &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-04651dd978a8749e59065df14b970a127f219ac2@git.kernel.org&gt;
Cc: dazhan@microsoft.com, haiyangz@microsoft.com, kys@microsoft.com,
	hpa@zytor.com, linux-kernel@vger.kernel.org, luto@kernel.org,
	vkuznets@redhat.com, mingo@kernel.org, sthemmin@microsoft.com,
	tglx@linutronix.de, adityabh@microsoft.com,
	Michael.H.Kelley@microsoft.com
Reply-To: dazhan@microsoft.com, haiyangz@microsoft.com, kys@microsoft.com,
	linux-kernel@vger.kernel.org, hpa@zytor.com, luto@kernel.org,
	vkuznets@redhat.com, tglx@linutronix.de,
	Michael.H.Kelley@microsoft.com, adityabh@microsoft.com,
	mingo@kernel.org, sthemmin@microsoft.com
In-Reply-To: &lt;20180124103629.29980-1-vkuznets@redhat.com&gt;
References: &lt;20180124103629.29980-1-vkuznets@redhat.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/hyperv] x86/hyperv: Stop suppressing X86_FEATURE_PCID
Git-Commit-ID: 04651dd978a8749e59065df14b970a127f219ac2
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Jan. 24, 2018, 12:48 p.m.</div>
<pre class="content">
Commit-ID:  04651dd978a8749e59065df14b970a127f219ac2
Gitweb:     https://git.kernel.org/tip/04651dd978a8749e59065df14b970a127f219ac2
Author:     Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
AuthorDate: Wed, 24 Jan 2018 11:36:29 +0100
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Wed, 24 Jan 2018 13:44:57 +0100

x86/hyperv: Stop suppressing X86_FEATURE_PCID

When hypercall-based TLB flush was enabled for Hyper-V guests PCID feature
was deliberately suppressed as a precaution: back then PCID was never
exposed to Hyper-V guests and it wasn&#39;t clear what will happen if some day
it becomes available. The day came and PCID/INVPCID features are already
exposed on certain Hyper-V hosts.

From TLFS (as of 5.0b) it is unclear how TLB flush hypercalls combine with
PCID. In particular the usage of PCID is per-cpu based: the same mm gets
different CR3 values on different CPUs. If the hypercall does exact
matching this will fail. However, this is not the case. David Zhang
explains:

 &quot;In practice, the AddressSpace argument is ignored on any VM that supports
  PCIDs.

  Architecturally, the AddressSpace argument must match the CR3 with PCID
  bits stripped out (i.e., the low 12 bits of AddressSpace should be 0 in
  long mode). The flush hypercalls flush all PCIDs for the specified
  AddressSpace.&quot;

With this, PCID can be enabled.
<span class="signed-off-by">
Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: David Zhang &lt;dazhan@microsoft.com&gt;
Cc: Stephen Hemminger &lt;sthemmin@microsoft.com&gt;
Cc: Haiyang Zhang &lt;haiyangz@microsoft.com&gt;
Cc: &quot;Michael Kelley (EOSG)&quot; &lt;Michael.H.Kelley@microsoft.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: devel@linuxdriverproject.org
Cc: &quot;K. Y. Srinivasan&quot; &lt;kys@microsoft.com&gt;
Cc: Aditya Bhandari &lt;adityabh@microsoft.com&gt;
Link: https://lkml.kernel.org/r/20180124103629.29980-1-vkuznets@redhat.com
---
 arch/x86/hyperv/mmu.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Jan. 24, 2018, 4:27 p.m.</div>
<pre class="content">
On Wed, Jan 24, 2018 at 4:48 AM, tip-bot for Vitaly Kuznetsov
&lt;tipbot@zytor.com&gt; wrote:
<span class="quote">&gt; Commit-ID:  04651dd978a8749e59065df14b970a127f219ac2</span>
<span class="quote">&gt; Gitweb:     https://git.kernel.org/tip/04651dd978a8749e59065df14b970a127f219ac2</span>
<span class="quote">&gt; Author:     Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="quote">&gt; AuthorDate: Wed, 24 Jan 2018 11:36:29 +0100</span>
<span class="quote">&gt; Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; CommitDate: Wed, 24 Jan 2018 13:44:57 +0100</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; x86/hyperv: Stop suppressing X86_FEATURE_PCID</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; When hypercall-based TLB flush was enabled for Hyper-V guests PCID feature</span>
<span class="quote">&gt; was deliberately suppressed as a precaution: back then PCID was never</span>
<span class="quote">&gt; exposed to Hyper-V guests and it wasn&#39;t clear what will happen if some day</span>
<span class="quote">&gt; it becomes available. The day came and PCID/INVPCID features are already</span>
<span class="quote">&gt; exposed on certain Hyper-V hosts.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; From TLFS (as of 5.0b) it is unclear how TLB flush hypercalls combine with</span>
<span class="quote">&gt; PCID. In particular the usage of PCID is per-cpu based: the same mm gets</span>
<span class="quote">&gt; different CR3 values on different CPUs. If the hypercall does exact</span>
<span class="quote">&gt; matching this will fail. However, this is not the case. David Zhang</span>
<span class="quote">&gt; explains:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  &quot;In practice, the AddressSpace argument is ignored on any VM that supports</span>
<span class="quote">&gt;   PCIDs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   Architecturally, the AddressSpace argument must match the CR3 with PCID</span>
<span class="quote">&gt;   bits stripped out (i.e., the low 12 bits of AddressSpace should be 0 in</span>
<span class="quote">&gt;   long mode). The flush hypercalls flush all PCIDs for the specified</span>
<span class="quote">&gt;   AddressSpace.&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; With this, PCID can be enabled.</span>

So what, exactly, does the flush hypercall do?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=178585">David Zhang</a> - Jan. 25, 2018, 4:32 p.m.</div>
<pre class="content">
When the FLUSH_ALL_VIRTUAL_ADDRESS_SPACES flag (0x2) is not specified, the flush hypercall matches the AddressSpace parameter with the base address of the page table root on each processor (the base address is page-aligned in long/32-bit mode, 32-byte aligned in PAE mode). If there is a match, it flushes the specified VAs, for all PCIDs.

The flush hypercall is allowed to flush more than the above, however.

We will update the TLFS with this behavior. 

-----Original Message-----
<span class="from">From: Andy Lutomirski [mailto:luto@kernel.org] </span>
Sent: Wednesday, January 24, 2018 8:28 AM
To: David Zhang &lt;dazhan@microsoft.com&gt;; Haiyang Zhang &lt;haiyangz@microsoft.com&gt;; KY Srinivasan &lt;kys@microsoft.com&gt;; LKML &lt;linux-kernel@vger.kernel.org&gt;; H. Peter Anvin &lt;hpa@zytor.com&gt;; Andrew Lutomirski &lt;luto@kernel.org&gt;; Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;; Thomas Gleixner &lt;tglx@linutronix.de&gt;; Michael Kelley (EOSG) &lt;Michael.H.Kelley@microsoft.com&gt;; Aditya Bhandari &lt;adityabh@microsoft.com&gt;; Ingo Molnar &lt;mingo@kernel.org&gt;; Stephen Hemminger &lt;sthemmin@microsoft.com&gt;
Cc: linux-tip-commits@vger.kernel.org
Subject: Re: [tip:x86/hyperv] x86/hyperv: Stop suppressing X86_FEATURE_PCID

On Wed, Jan 24, 2018 at 4:48 AM, tip-bot for Vitaly Kuznetsov &lt;tipbot@zytor.com&gt; wrote:
<span class="quote">&gt; Commit-ID:  04651dd978a8749e59065df14b970a127f219ac2</span>
<span class="quote">&gt; Gitweb:     https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgit.kernel.org%2Ftip%2F04651dd978a8749e59065df14b970a127f219ac2&amp;data=02%7C01%7Cdazhan%40microsoft.com%7C59a83800e5b84e1bb97008d56347705b%7Cee3303d7fb734b0c8589bcd847f1c277%7C1%7C0%7C636524080843155861&amp;sdata=qA5eG6L9MieOSWL8SCBQaWcYJtN7IT75rO0I1PdoZ%2FE%3D&amp;reserved=0</span>
<span class="quote">&gt; Author:     Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="quote">&gt; AuthorDate: Wed, 24 Jan 2018 11:36:29 +0100</span>
<span class="quote">&gt; Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; CommitDate: Wed, 24 Jan 2018 13:44:57 +0100</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; x86/hyperv: Stop suppressing X86_FEATURE_PCID</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; When hypercall-based TLB flush was enabled for Hyper-V guests PCID </span>
<span class="quote">&gt; feature was deliberately suppressed as a precaution: back then PCID </span>
<span class="quote">&gt; was never exposed to Hyper-V guests and it wasn&#39;t clear what will </span>
<span class="quote">&gt; happen if some day it becomes available. The day came and PCID/INVPCID </span>
<span class="quote">&gt; features are already exposed on certain Hyper-V hosts.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; From TLFS (as of 5.0b) it is unclear how TLB flush hypercalls combine </span>
<span class="quote">&gt; with PCID. In particular the usage of PCID is per-cpu based: the same </span>
<span class="quote">&gt; mm gets different CR3 values on different CPUs. If the hypercall does </span>
<span class="quote">&gt; exact matching this will fail. However, this is not the case. David </span>
<span class="quote">&gt; Zhang</span>
<span class="quote">&gt; explains:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  &quot;In practice, the AddressSpace argument is ignored on any VM that supports</span>
<span class="quote">&gt;   PCIDs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   Architecturally, the AddressSpace argument must match the CR3 with PCID</span>
<span class="quote">&gt;   bits stripped out (i.e., the low 12 bits of AddressSpace should be 0 in</span>
<span class="quote">&gt;   long mode). The flush hypercalls flush all PCIDs for the specified</span>
<span class="quote">&gt;   AddressSpace.&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; With this, PCID can be enabled.</span>

So what, exactly, does the flush hypercall do?

--Andy
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/hyperv/mmu.c b/arch/x86/hyperv/mmu.c</span>
<span class="p_header">index 9cc9e1c..694abf1 100644</span>
<span class="p_header">--- a/arch/x86/hyperv/mmu.c</span>
<span class="p_header">+++ b/arch/x86/hyperv/mmu.c</span>
<span class="p_chunk">@@ -111,7 +111,7 @@</span> <span class="p_context"> static void hyperv_flush_tlb_others(const struct cpumask *cpus,</span>
 	int cpu, vcpu, gva_n, max_gvas;
 	struct hv_flush_pcpu **flush_pcpu;
 	struct hv_flush_pcpu *flush;
<span class="p_del">-	u64 status = U64_MAX;</span>
<span class="p_add">+	u64 base, status = U64_MAX;</span>
 	unsigned long flags;
 
 	trace_hyperv_mmu_flush_tlb_others(cpus, info);
<span class="p_chunk">@@ -137,7 +137,12 @@</span> <span class="p_context"> static void hyperv_flush_tlb_others(const struct cpumask *cpus,</span>
 	}
 
 	if (info-&gt;mm) {
<span class="p_add">+		/*</span>
<span class="p_add">+		 * AddressSpace argument must match the CR3 with PCID bits</span>
<span class="p_add">+		 * stripped out.</span>
<span class="p_add">+		 */</span>
 		flush-&gt;address_space = virt_to_phys(info-&gt;mm-&gt;pgd);
<span class="p_add">+		flush-&gt;address_space &amp;= CR3_ADDR_MASK;</span>
 		flush-&gt;flags = 0;
 	} else {
 		flush-&gt;address_space = 0;
<span class="p_chunk">@@ -219,7 +224,12 @@</span> <span class="p_context"> static void hyperv_flush_tlb_others_ex(const struct cpumask *cpus,</span>
 	}
 
 	if (info-&gt;mm) {
<span class="p_add">+		/*</span>
<span class="p_add">+		 * AddressSpace argument must match the CR3 with PCID bits</span>
<span class="p_add">+		 * stripped out.</span>
<span class="p_add">+		 */</span>
 		flush-&gt;address_space = virt_to_phys(info-&gt;mm-&gt;pgd);
<span class="p_add">+		flush-&gt;address_space &amp;= CR3_ADDR_MASK;</span>
 		flush-&gt;flags = 0;
 	} else {
 		flush-&gt;address_space = 0;
<span class="p_chunk">@@ -278,8 +288,6 @@</span> <span class="p_context"> void hyperv_setup_mmu_ops(void)</span>
 	if (!(ms_hyperv.hints &amp; HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED))
 		return;
 
<span class="p_del">-	setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="p_del">-</span>
 	if (!(ms_hyperv.hints &amp; HV_X64_EX_PROCESSOR_MASKS_RECOMMENDED)) {
 		pr_info(&quot;Using hypercall for remote TLB flush\n&quot;);
 		pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



