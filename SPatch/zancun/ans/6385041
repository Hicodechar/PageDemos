
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/9] KVM: MMU: introduce for_each_rmap_spte() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/9] KVM: MMU: introduce for_each_rmap_spte()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=119561">Xiao Guangrong</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 12, 2015, 2:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1431397953-16642-3-git-send-email-guangrong.xiao@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6385041/mbox/"
   >mbox</a>
|
   <a href="/patch/6385041/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6385041/">/patch/6385041/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 4FA96BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 02:36:22 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3C14B20384
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 02:36:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 18ABB203AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 02:36:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752575AbbELCgN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 11 May 2015 22:36:13 -0400
Received: from mga03.intel.com ([134.134.136.65]:35129 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752470AbbELCgI (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 11 May 2015 22:36:08 -0400
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by orsmga103.jf.intel.com with ESMTP; 11 May 2015 19:36:07 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.13,411,1427785200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;727611877&quot;
Received: from xiao.sh.intel.com ([10.239.159.86])
	by orsmga002.jf.intel.com with ESMTP; 11 May 2015 19:36:06 -0700
From: Xiao Guangrong &lt;guangrong.xiao@linux.intel.com&gt;
To: pbonzini@redhat.com
Cc: gleb@kernel.org, mtosatti@redhat.com, kvm@vger.kernel.org,
	linux-kernel@vger.kernel.org,
	Xiao Guangrong &lt;guangrong.xiao@linux.intel.com&gt;
Subject: [PATCH v2 2/9] KVM: MMU: introduce for_each_rmap_spte()
Date: Tue, 12 May 2015 10:32:26 +0800
Message-Id: &lt;1431397953-16642-3-git-send-email-guangrong.xiao@linux.intel.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1431397953-16642-1-git-send-email-guangrong.xiao@linux.intel.com&gt;
References: &lt;1431397953-16642-1-git-send-email-guangrong.xiao@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119561">Xiao Guangrong</a> - May 12, 2015, 2:32 a.m.</div>
<pre class="content">
It&#39;s used to walk all the sptes on the rmap to clean up the
code
<span class="signed-off-by">
Signed-off-by: Xiao Guangrong &lt;guangrong.xiao@linux.intel.com&gt;</span>
---
 arch/x86/kvm/mmu.c       | 63 +++++++++++++++++++-----------------------------
 arch/x86/kvm/mmu_audit.c |  4 +--
 2 files changed, 26 insertions(+), 41 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - May 12, 2015, 8:08 a.m.</div>
<pre class="content">
On 12/05/2015 04:32, Xiao Guangrong wrote:
<span class="quote">&gt; -	while ((sptep = rmap_get_first(*rmapp, &amp;iter))) {</span>
<span class="quote">&gt; -		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="quote">&gt; +restart:</span>
<span class="quote">&gt; +	for_each_rmap_spte(rmapp, &amp;iter, sptep) {</span>
<span class="quote">&gt;  		rmap_printk(&quot;kvm_rmap_unmap_hva: spte %p %llx gfn %llx (%d)\n&quot;,</span>
<span class="quote">&gt;  			     sptep, *sptep, gfn, level);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		drop_spte(kvm, sptep);</span>
<span class="quote">&gt;  		need_tlb_flush = 1;</span>
<span class="quote">&gt; +		goto restart;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>

For this one, I would keep using rmap_get_first.  Otherwise looks good.

Paolo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119561">Xiao Guangrong</a> - May 12, 2015, 9:36 a.m.</div>
<pre class="content">
On 05/12/2015 04:08 PM, Paolo Bonzini wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 12/05/2015 04:32, Xiao Guangrong wrote:</span>
<span class="quote">&gt;&gt; -	while ((sptep = rmap_get_first(*rmapp, &amp;iter))) {</span>
<span class="quote">&gt;&gt; -		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="quote">&gt;&gt; +restart:</span>
<span class="quote">&gt;&gt; +	for_each_rmap_spte(rmapp, &amp;iter, sptep) {</span>
<span class="quote">&gt;&gt;   		rmap_printk(&quot;kvm_rmap_unmap_hva: spte %p %llx gfn %llx (%d)\n&quot;,</span>
<span class="quote">&gt;&gt;   			     sptep, *sptep, gfn, level);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   		drop_spte(kvm, sptep);</span>
<span class="quote">&gt;&gt;   		need_tlb_flush = 1;</span>
<span class="quote">&gt;&gt; +		goto restart;</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; For this one, I would keep using rmap_get_first.  Otherwise looks good.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Paolo</span>
<span class="quote">&gt;</span>

Okay, will do.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c</span>
<span class="p_header">index f5fcfc1..0da9cf0 100644</span>
<span class="p_header">--- a/arch/x86/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/x86/kvm/mmu.c</span>
<span class="p_chunk">@@ -1142,6 +1142,11 @@</span> <span class="p_context"> static u64 *rmap_get_next(struct rmap_iterator *iter)</span>
 	return NULL;
 }
 
<span class="p_add">+#define for_each_rmap_spte(_rmap_, _iter_, _spte_)			    \</span>
<span class="p_add">+	   for (_spte_ = rmap_get_first(*_rmap_, _iter_);		    \</span>
<span class="p_add">+		_spte_ &amp;&amp; ({BUG_ON(!is_shadow_present_pte(*_spte_)); 1;});  \</span>
<span class="p_add">+			_spte_ = rmap_get_next(_iter_))</span>
<span class="p_add">+</span>
 static void drop_spte(struct kvm *kvm, u64 *sptep)
 {
 	if (mmu_spte_clear_track_bits(sptep))
<span class="p_chunk">@@ -1205,12 +1210,8 @@</span> <span class="p_context"> static bool __rmap_write_protect(struct kvm *kvm, unsigned long *rmapp,</span>
 	struct rmap_iterator iter;
 	bool flush = false;
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;) {</span>
<span class="p_del">-		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="p_del">-</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		flush |= spte_write_protect(kvm, sptep, pt_protect);
<span class="p_del">-		sptep = rmap_get_next(&amp;iter);</span>
<span class="p_del">-	}</span>
 
 	return flush;
 }
<span class="p_chunk">@@ -1232,12 +1233,8 @@</span> <span class="p_context"> static bool __rmap_clear_dirty(struct kvm *kvm, unsigned long *rmapp)</span>
 	struct rmap_iterator iter;
 	bool flush = false;
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;) {</span>
<span class="p_del">-		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="p_del">-</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		flush |= spte_clear_dirty(kvm, sptep);
<span class="p_del">-		sptep = rmap_get_next(&amp;iter);</span>
<span class="p_del">-	}</span>
 
 	return flush;
 }
<span class="p_chunk">@@ -1259,12 +1256,8 @@</span> <span class="p_context"> static bool __rmap_set_dirty(struct kvm *kvm, unsigned long *rmapp)</span>
 	struct rmap_iterator iter;
 	bool flush = false;
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;) {</span>
<span class="p_del">-		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="p_del">-</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		flush |= spte_set_dirty(kvm, sptep);
<span class="p_del">-		sptep = rmap_get_next(&amp;iter);</span>
<span class="p_del">-	}</span>
 
 	return flush;
 }
<span class="p_chunk">@@ -1368,13 +1361,14 @@</span> <span class="p_context"> static int kvm_unmap_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 	struct rmap_iterator iter;
 	int need_tlb_flush = 0;
 
<span class="p_del">-	while ((sptep = rmap_get_first(*rmapp, &amp;iter))) {</span>
<span class="p_del">-		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="p_add">+restart:</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep) {</span>
 		rmap_printk(&quot;kvm_rmap_unmap_hva: spte %p %llx gfn %llx (%d)\n&quot;,
 			     sptep, *sptep, gfn, level);
 
 		drop_spte(kvm, sptep);
 		need_tlb_flush = 1;
<span class="p_add">+		goto restart;</span>
 	}
 
 	return need_tlb_flush;
<span class="p_chunk">@@ -1394,8 +1388,8 @@</span> <span class="p_context"> static int kvm_set_pte_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 	WARN_ON(pte_huge(*ptep));
 	new_pfn = pte_pfn(*ptep);
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;) {</span>
<span class="p_del">-		BUG_ON(!is_shadow_present_pte(*sptep));</span>
<span class="p_add">+restart:</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep) {</span>
 		rmap_printk(&quot;kvm_set_pte_rmapp: spte %p %llx gfn %llx (%d)\n&quot;,
 			     sptep, *sptep, gfn, level);
 
<span class="p_chunk">@@ -1403,7 +1397,7 @@</span> <span class="p_context"> static int kvm_set_pte_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 
 		if (pte_write(*ptep)) {
 			drop_spte(kvm, sptep);
<span class="p_del">-			sptep = rmap_get_first(*rmapp, &amp;iter);</span>
<span class="p_add">+			goto restart;</span>
 		} else {
 			new_spte = *sptep &amp; ~PT64_BASE_ADDR_MASK;
 			new_spte |= (u64)new_pfn &lt;&lt; PAGE_SHIFT;
<span class="p_chunk">@@ -1414,7 +1408,6 @@</span> <span class="p_context"> static int kvm_set_pte_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 
 			mmu_spte_clear_track_bits(sptep);
 			mmu_spte_set(sptep, new_spte);
<span class="p_del">-			sptep = rmap_get_next(&amp;iter);</span>
 		}
 	}
 
<span class="p_chunk">@@ -1518,16 +1511,13 @@</span> <span class="p_context"> static int kvm_age_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 
 	BUG_ON(!shadow_accessed_mask);
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;</span>
<span class="p_del">-	     sptep = rmap_get_next(&amp;iter)) {</span>
<span class="p_del">-		BUG_ON(!is_shadow_present_pte(*sptep));</span>
<span class="p_del">-</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		if (*sptep &amp; shadow_accessed_mask) {
 			young = 1;
 			clear_bit((ffs(shadow_accessed_mask) - 1),
 				 (unsigned long *)sptep);
 		}
<span class="p_del">-	}</span>
<span class="p_add">+</span>
 	trace_kvm_age_page(gfn, level, slot, young);
 	return young;
 }
<span class="p_chunk">@@ -1548,15 +1538,11 @@</span> <span class="p_context"> static int kvm_test_age_rmapp(struct kvm *kvm, unsigned long *rmapp,</span>
 	if (!shadow_accessed_mask)
 		goto out;
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;</span>
<span class="p_del">-	     sptep = rmap_get_next(&amp;iter)) {</span>
<span class="p_del">-		BUG_ON(!is_shadow_present_pte(*sptep));</span>
<span class="p_del">-</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		if (*sptep &amp; shadow_accessed_mask) {
 			young = 1;
 			break;
 		}
<span class="p_del">-	}</span>
 out:
 	return young;
 }
<span class="p_chunk">@@ -2232,8 +2218,11 @@</span> <span class="p_context"> static void kvm_mmu_unlink_parents(struct kvm *kvm, struct kvm_mmu_page *sp)</span>
 	u64 *sptep;
 	struct rmap_iterator iter;
 
<span class="p_del">-	while ((sptep = rmap_get_first(sp-&gt;parent_ptes, &amp;iter)))</span>
<span class="p_add">+restart:</span>
<span class="p_add">+	for_each_rmap_spte(&amp;sp-&gt;parent_ptes, &amp;iter, sptep) {</span>
 		drop_parent_pte(sp, sptep);
<span class="p_add">+		goto restart;</span>
<span class="p_add">+	}</span>
 }
 
 static int mmu_zap_unsync_children(struct kvm *kvm,
<span class="p_chunk">@@ -4473,9 +4462,8 @@</span> <span class="p_context"> static bool kvm_mmu_zap_collapsible_spte(struct kvm *kvm,</span>
 	pfn_t pfn;
 	struct kvm_mmu_page *sp;
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;) {</span>
<span class="p_del">-		BUG_ON(!(*sptep &amp; PT_PRESENT_MASK));</span>
<span class="p_del">-</span>
<span class="p_add">+restart:</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep) {</span>
 		sp = page_header(__pa(sptep));
 		pfn = spte_to_pfn(*sptep);
 
<span class="p_chunk">@@ -4490,10 +4478,9 @@</span> <span class="p_context"> static bool kvm_mmu_zap_collapsible_spte(struct kvm *kvm,</span>
 			!kvm_is_reserved_pfn(pfn) &amp;&amp;
 			PageTransCompound(pfn_to_page(pfn))) {
 			drop_spte(kvm, sptep);
<span class="p_del">-			sptep = rmap_get_first(*rmapp, &amp;iter);</span>
 			need_tlb_flush = 1;
<span class="p_del">-		} else</span>
<span class="p_del">-			sptep = rmap_get_next(&amp;iter);</span>
<span class="p_add">+			goto restart;</span>
<span class="p_add">+		}</span>
 	}
 
 	return need_tlb_flush;
<span class="p_header">diff --git a/arch/x86/kvm/mmu_audit.c b/arch/x86/kvm/mmu_audit.c</span>
<span class="p_header">index 9ade5cf..368d534 100644</span>
<span class="p_header">--- a/arch/x86/kvm/mmu_audit.c</span>
<span class="p_header">+++ b/arch/x86/kvm/mmu_audit.c</span>
<span class="p_chunk">@@ -197,13 +197,11 @@</span> <span class="p_context"> static void audit_write_protection(struct kvm *kvm, struct kvm_mmu_page *sp)</span>
 
 	rmapp = gfn_to_rmap(kvm, sp-&gt;gfn, PT_PAGE_TABLE_LEVEL);
 
<span class="p_del">-	for (sptep = rmap_get_first(*rmapp, &amp;iter); sptep;</span>
<span class="p_del">-	     sptep = rmap_get_next(&amp;iter)) {</span>
<span class="p_add">+	for_each_rmap_spte(rmapp, &amp;iter, sptep)</span>
 		if (is_writable_pte(*sptep))
 			audit_printk(kvm, &quot;shadow page has writable &quot;
 				     &quot;mappings: gfn %llx role %x\n&quot;,
 				     sp-&gt;gfn, sp-&gt;role.word);
<span class="p_del">-	}</span>
 }
 
 static void audit_sp(struct kvm *kvm, struct kvm_mmu_page *sp)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



