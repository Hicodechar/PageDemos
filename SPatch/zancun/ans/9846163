
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,38/38] x86/mm: Add support to make use of Secure Memory Encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,38/38] x86/mm: Add support to make use of Secure Memory Encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 17, 2017, 9:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;5f0da2fd4cce63f556117549e2c89c170072209f.1500319216.git.thomas.lendacky@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9846163/mbox/"
   >mbox</a>
|
   <a href="/patch/9846163/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9846163/">/patch/9846163/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BB28960386 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:14:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F30752621B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:14:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E74BC274D0; Mon, 17 Jul 2017 21:14:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 366522621B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:14:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752502AbdGQVOI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 17 Jul 2017 17:14:08 -0400
Received: from mail-bn3nam01on0058.outbound.protection.outlook.com
	([104.47.33.58]:39086
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752365AbdGQVNb (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 17 Jul 2017 17:13:31 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=WE8v4kfwaz0yWte26uBzltz1AgBPbHRyzBdq2pCT3is=;
	b=a0eOWKnUAL6bOpDXQowwDASnQ5NZ9WvrKDFleUPjxc2slrlV7VZXctj6vv6ys+Dx19wfo6Hw6O8VMtSR7NklsQ4GCtckKUpN6CAxCK/nneDAZTWKOx6oDmHVGNsMeeRJruN3fdzYAqcGQY4cSdGeNSLhAKLsb17d6TNhYxjn+Kg=
Authentication-Results: kernel.org; dkim=none (message not signed)
	header.d=none; kernel.org; dmarc=none action=none header.from=amd.com;
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1261.13; Mon, 17 Jul 2017 21:13:17 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org,
	linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	linux-doc@vger.kernel.org, linux-mm@kvack.org, kvm@vger.kernel.org,
	kasan-dev@googlegroups.com
Cc: =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [PATCH v10 38/38] x86/mm: Add support to make use of Secure Memory
	Encryption
Date: Mon, 17 Jul 2017 16:10:35 -0500
Message-Id: &lt;5f0da2fd4cce63f556117549e2c89c170072209f.1500319216.git.thomas.lendacky@amd.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
References: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR03CA0008.namprd03.prod.outlook.com (10.168.230.146)
	To MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: e60dc9bc-51d0-4650-de50-08d4cd58a722
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	3:nTYe3QPuiE8hQUsCUrMUvzfYnGGJMaqicGbgMDcHYf+S7YUczSrBLpXJYDjp1dCPfZxEzGSZl0fwwde6SQOfABEjoOFZFBTv7IdPHmSDHpfSxFcQ4wLou8KoEYL2I/L4EzXshFGH+ZLNDqfoi+WeOsWSxPQpIOVgzh++WWAZN4nSjQc8sfdzeG3glPNDOgfF+/h6E4UNFqBsioOG9vzy9Om/tjqUwtciQyfcCPcztwwQ9YYMYFlZkwHEnU0c+w1Nbp00F36kzbgHXDT8g0Sai6NMytgEtyJ8t085WzBQkjKu18WIubEMUO1GLTK21Bs75htRfMuryzcYu00P4YlDRnoT96QqreqN2a9Ko7VDKpf/1dO9h22n8b1jXzRzIAtOTSI5EDQNoWDkgMFPOQu1OylatZ1MQ1P95h0QIFXc9dXbHO7fu3BvduIUyA5/4cum39kbWcfi8ekL32zWidDcbh9R+OGfhXy/9cvIdKRGz7RCIs5yh+fcKcG8veMDpaDTxnt/KeTdSTQGgVyYzljc6s6pR/+rcQJlF5MI8ixBuR1g24DpRcENjbnttYoeOi6ipP6Q/c8GX3LiXOS9S60Yzwln0kN5EnQQTfCB+GwEh+3iOWs4ElYkyCDP/A+jGLNzIso2rPlAChyeIs4oiECAkHaPms8SNY+1u+cXzo8C8jvRxMslQDDZXAvVQoVys4qlZyaHmhFwMLcEp57pJJADpQDoDrBgT3XQCf9Jf4cevdV3RY5nC89vzAEGwIilgBqcZgpaJ0QUtxkh2rdLyk4Lsg==
X-MS-TrafficTypeDiagnostic: MWHPR12MB1151:
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	25:C63pJDpx3QOFUN6F7rUrdh1h4c3R5HCXaYDjPnctx/XKgEezGOiZCa+1qa77ueodKh3iNyeoVbZSgS654fSd9MLyazjspCrZ4wqMkZMQ7C9PWGlK6tCmv9LpuXpNs8Vd9RcjxH9KG6CFMm+L96UFsx3c4l9k51wcJpnqJxV94JE1hhDRSngbBjkiqYy2cy81LdXoK3fTqY9wwKS7XBCH2XxS/thGwZH2ecZKA+eU119eylHGzLpu0CIJA3vzONyiIrVinxznnXQ0HJqOJZtlLBttRWYJOj4EiH4aFx5LtMp5iOGOS+L8NRxxyZjyPollOzzOiGUzw2wyvJ66ewEy7fOk72K9z35X17JLDib2NzAGNBa/NWoHiy3Yr8ukvOz5184q6AwtntmWZ3Ds0WEC1j9CnEzoqW0uQM/d/IPzHvb0tl8pggjQBM3AGQOvN8SUStC2XV7sGaymDJa3L2TBOFx/scrB3lpEh0h1CGwY0CIdij+X9tolkX73RgzN0rnfUntVNq7TVna6uqbyS3Yl9FHdNzeW5D0XOJK0FOsGbpR1jaheQ04p31Mt0yJD6sBo4ONQDKvtKogwBDh+TBxIzhfkTUrbVFQY17wZ/kfwKVvLytVyRrfkQvDFsZf8MFzXHhhJRyRGH3a+NKRyo42C16nWtxKC2rIxs1ufqx4wlvX6K9WSTc/5GZfQJnzBp1wm1Q73fTyoPaRtJDiWlJ0vPRFmWfd5YTpYkukulPlSQvzoLSpUJLx5hKMRVvKBd5OJvVlTQn14a4BXyO4FPE+G2sEgFiPN21sBY3v2Wd9rvtwg7JIEI7dWTh1da3E4/5SSSSuXZyQpIQqcZ3rhCl4T08IkKiWU9eut2/eAcJgDfFxBMsH26YHD7+6Fd5vxAMAx309f/rSiQDK7aVEARbVGQiy+StnbDKT7lw4bLr1ye
	fA=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	31:gvtj2/boIdPO6QSicXlrBFIXEBulLG686gk83dxpqwWJQSV34jktbYt1Ri1qCJnLi5YZuSj219ITN0iR0D7mJcrqD3AuQHDu0TbmCcA4XE+LmdNUWjLBSJgqEuxjRKbEXFiIkh8uA68S8OTXiVIwJbRyUibHvGRDlUVhHt2WXIkMWF2KeY3FTKjfwm5VjyJnMzjiGtiheg9E5FObamHq5rIB4tEbdlCBL+pUmkNV0BPQqKiDbDT2uAoeXBWfyhvZm0ofOppb6a/HoyFXkE+iNFkNAUkwBmammrS+5D/B7oP2/Buc+VaCjbAs9WK6J0P+FjE7T5yf8kXOO1CYdCFQk9mgT5OdBg58GS1RDhRGunAbTgMwxkFTjdQaOyBYXkXuKLGByFHSaxKaip9JGhA2giglejhQ+WB+4vnX1msXi+FoBQGpgZ+nMLQMOnPqUANoZ5/4USsYJTCvoc+S2LXDRTA2CCvmOjM6Ou0gg7suZSKJbIdzF352a6ND8yg1XpOHp+tYHV0obgJVNze6jSv922f0BhAIvN1JMhvYgFsChLHdaSJ9DZjNdpMBdOh6Ld2r9qSR6Cb3YasY7ZQC1TIB6UG5NHH08yaZfxbxGNaXlmxV9Zxju/PqfACWx2jVv3IGJadn+0EbZFCjAydr04kxAdpG5qMtWqEEaJTvNrPSFfU=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:+L183NLNxQJeOliOzcDHGfW4yWRYwfuWTX6dSyYXb4N2ecKTR13vrLF+9TK2puctY0sqQRIO3NzFmOFPzRpsPY9kVmrwxfw+SE/B6SWbuAqt5b9xjBQUNEhj7onI98VpnxL2fi/Za594HTbMdFSpUkOq5/R95X3eGfowxDsyOZ/MasWvjPCPHWJQ8Ti911/nQHi60Lev1uLCrYYBVUcBBBHr1iaOzBzsOJi8QRDwF1Hqbv6jJ3AzX8yo6Qq1N18tTcQIcZUJ9ajDLBTXatgZvejgHXHRQoDrA6Eym/TprtqE78iDXocQASGZ4kJA/sQkznErUguJ+TdAo6c3s+m5ct0tHGvYJz3fANOBW2t6YBBWcSAJ36HWxZPcr/iZ9HQx+QpVPLD4FfGGSlk5Xxq6bTYlx6r1Q44UZ8CHiELT8F8MP+wbIes6PQse+v1ufu3wnTLMWMc12PgKY6YJU8/2eWxPe/fwv7RxZpnF7EY1GRyH12Vqz25ITsY8E84yhrhR
X-Exchange-Antispam-Report-Test: UriScan:(125551606395959)(133145235818549)(236129657087228)(767451399110)(167848164394848);
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB1151E96F183F73761F2D8A1BECA00@MWHPR12MB1151.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(2017060910075)(5005006)(8121501046)(100000703101)(100105400095)(3002001)(10201501046)(93006095)(93001095)(6055026)(6041248)(20161123558100)(20161123555025)(20161123562025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123564025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:MWHPR12MB1151; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	4:Hj2VMoLHED1X8UQ4Go+ToytArA0kyjXEnElWUQh24f?=
	=?us-ascii?Q?IVt7VnuXxH2nt1IDvvv2TeWjDyETVJrmECSsF8XU37a9d9OjNhVZPvjcBT19?=
	=?us-ascii?Q?yfPib1N9i9KBbXq264Ch/P1HjO5LD93sMD5vFKXUl1hQ4R8ROqgOarIIBV1s?=
	=?us-ascii?Q?DCeCD4J7VmQh+fhAF/TDuJeobU5FM+65OiKoDT5920hh22/nbxXc87Yy0ULT?=
	=?us-ascii?Q?05R+o/MLJozc+K3zDkH71LmpdVq/Lz4wari60WbOvSDu7RfsgdFJPRplQHhr?=
	=?us-ascii?Q?gqwLU3XkM7hFV1Er7bbdFCulHYfguuJQkTxwj8Fslh9m3O/F5NHsv7lfvK7b?=
	=?us-ascii?Q?3xrG4ovWMXywTXHMxo29/8WFcXq43BK+Bl/kzYrDODTlor+Y8mPUhyOV2kc4?=
	=?us-ascii?Q?U+Z05Wgy1w0QZh5Ufyqt7Cyef2P2egyCiqJTtU4OGLXL/8z7G4CiOPk/JXct?=
	=?us-ascii?Q?HDOLdC3pIBywCCqdWv+TSDmOj+qiVEVbHMKBINJ5pwPz/P0Ty8HWDuNS2duD?=
	=?us-ascii?Q?RvE/sy4rsKkTGijGlJpcRjtw9rm60ITE+Qzep6mNuLlcAZe9ylbpz02UAfIk?=
	=?us-ascii?Q?NLgC5BkJyUYEDqn/SUkL11Y7+Y9d8HanFZTmotUChBsMYARi+vhDPSzaSYpC?=
	=?us-ascii?Q?o9np5GRdAGdQhqIBArPcviz8xzY0eVcGvaKTFtzngW9Rs7gixqcrriPjE8l4?=
	=?us-ascii?Q?6AAjUSP8ZR5e5oyo0i214BY4a5v/EvrmW2SpQiiswPokEO1JSsIv15Kl7wfK?=
	=?us-ascii?Q?r/5/QEB4vsZe24+iQ2EGa8BiOJTy7bk7YEYlHUyOunTYi4zqMxEr1NsidGln?=
	=?us-ascii?Q?s9O0LVxnAc7erWSUoNjjR8QL1CEGqQAz5V2uCjS5VXxYKHEU5MZz9qNE7O8u?=
	=?us-ascii?Q?XHimvqlUlBLcRhAcVvtMKwPrZKj63bSxy4M9VyNNAeGpr5NwG5gxs1Y1eOJj?=
	=?us-ascii?Q?+KR0zq8QGfoqA+NGqeYB/h2ilta7kA2geKXwbKJ0cVQM4LJWYrwGHRvl5LZR?=
	=?us-ascii?Q?BAVnR0FM/qU2pzn8Z++FusmLIOhpMTyGwpgTbB33g07LCIhyj70SmAYUVJk4?=
	=?us-ascii?Q?9hPka0UpJ3QjuEYEchUYNWPDRU3qWc6T2fZxHPrXDDm4iPISLcPMVtj1XWyS?=
	=?us-ascii?Q?6Gt+bsVzcbGx8ljjXVOft7UXlaoLgprIhFYrLFPSIM3N45YfEo84v8BoLAG/?=
	=?us-ascii?Q?bkjIWQSbQ8yFLMQ7+akjBjxsWnRtJPVGcTPA+2GiSSuQSrkWTlTHQUlojENW?=
	=?us-ascii?Q?/eHePSKMsvff91Ow1+R3nRx1h+nWwMJ/FZ/QKTmebT5H05OPs7w3P/aouDze?=
	=?us-ascii?Q?taE5Qa3vQLvh8s805Td6H6pk2L8mnzEE1GwAIoOw3q3BCisEIK4+UucYrg93?=
	=?us-ascii?Q?OmXdruiuH4wuZaJ0fz+BdmKxk=3D?=
X-Forefront-PRVS: 0371762FE7
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(7370300001)(6009001)(39410400002)(39850400002)(39840400002)(39860400002)(39400400002)(39450400003)(25786009)(6506006)(33646002)(54906002)(7416002)(76176999)(478600001)(8676002)(50986999)(6486002)(47776003)(5660300001)(189998001)(42186005)(38730400002)(305945005)(72206003)(53416004)(66066001)(50466002)(48376002)(110136004)(118296001)(2950100002)(81166006)(5003940100001)(3846002)(6666003)(36756003)(53936002)(7350300001)(6512007)(2906002)(7736002)(6116002)(86362001)(4326008)(50226002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1151;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	23:UGckf65fifLjS2lReeNW4GYHFQhahIw249RYbgr3E?=
	=?us-ascii?Q?MNuUC+khlpAHF+khoOgOC6gIfb/KTfIiB5c+hjQ9vKFjfM4ySLBpd4CHfjjO?=
	=?us-ascii?Q?CdQvPRZKn/cTWEOMbDmLWlv516h5TpYGUGDFWsoH8wlmhXD3HJLJtKVkE7JV?=
	=?us-ascii?Q?v2JLmK1fBGERzZYVt3omeiLF1LovnuRCBt18xLy5u6Uc3fUoG1vSsapGWlct?=
	=?us-ascii?Q?WFdt0YnGp1B8shm4d0xGXBCu8n6fgYmzE7aJNRDlIh1J09zkpy4q/bSMbwaW?=
	=?us-ascii?Q?VoISTtDaQQUQnlox1sR3g6VTUZl9dtzLlf1s3vV49ANO1UPVRXb7D1KXgofo?=
	=?us-ascii?Q?bg92BpmG86wa9mQPDttPKLgzStuKBsatWT+hGo8MqiSe+eIT/oVF9yOC+IK+?=
	=?us-ascii?Q?Tkdm4CJt9FN7nCQJGbBdZ8n4ywMHWBFfW+rw7iD6cMrJeLXL/bTDaB4o9k7N?=
	=?us-ascii?Q?V/amVl5nNN6mk/sAR1U9Gy77QtOj2XUMciB+k+4+KBKpcn6G3sM8lLXMlYuz?=
	=?us-ascii?Q?eGTda4uEIXRgcULgFAxQqtMwNpTwRt3iPtIcBPn2xANYJt8/WiRzF4h783PF?=
	=?us-ascii?Q?pVxg3Oj8TWCfBZwpuSCO4X5pLDupp4KoTFDDcmcktvUORchO48GsS19pfUnK?=
	=?us-ascii?Q?f8E951uHUTEq98mFB7riLyAoBeHl1mog0c4slNmTmK5iR3gLVOYNpfgYgDHS?=
	=?us-ascii?Q?272h3QsiabAYOq+MMTIqIeGit6NbmyP7V7IOubFN1fK2DpoakLOia4PuDKBg?=
	=?us-ascii?Q?L1nwdJ4fG7+7QtfSbazoEA8jM28fEHhyZ7glOPBITHw2/lOmfQjcx3l2pqIY?=
	=?us-ascii?Q?QUSseIE85xWQAbY3FxEv60iyG0tofh4UfeJdEWRq2NXMNds9EPzMo8WBUirb?=
	=?us-ascii?Q?NDLSfzYhBhE2GUjnc74pMBYrPIsO1UMF3EbUGpC4YcVn1yYB4GELyWP4Js2I?=
	=?us-ascii?Q?Lzk1RNBWomHc7bIg3clzSUJZufyj8A0EZw0LPpwP9w5a6WdlXO5mpme4jG07?=
	=?us-ascii?Q?DcVucNAYPiyRKnG/95QtNX59K2UbyRgK/yEio/Rajwwq22lrtPOGEdtO7AIV?=
	=?us-ascii?Q?DKbZSBBdninTCXSByfkuFKBKHQ9SWJW1UO2bbMNwq7zFi7545CmbXd2FXAJJ?=
	=?us-ascii?Q?10Jdo2FYH0ngmHaH0EVHQagfO5+FtM1vuvFLacovp8cIOr7JvUHe7r/So1KX?=
	=?us-ascii?Q?mwXPzjbYbqcw4s=3D?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	6:luD+nNYrLcsWcs7aOfgRI+ZCLkSnNMgYvKyb5m5mHP?=
	=?us-ascii?Q?j3NMrONHvCUpJpgG0pGiRPD5v+WZ+QSHsMIpfHgvFiBzMSLDCmlWwTNagnDQ?=
	=?us-ascii?Q?PAlElkKXFxDZbxztrTk9lok4k/LvlTL44TqeWJ6xqPywSgbaKb8jFk14uhdo?=
	=?us-ascii?Q?voJbcWBeNqQ8benAhaP9LAqXjoku0Hwnw4TleSbpyUhI7RsDNJ6PSpfzIpuh?=
	=?us-ascii?Q?tTZLFbEmmYXOtM8GbR3c3CF0VnRrWOABxqWrM2rqwpNcgkXXvJCbVNhcTymH?=
	=?us-ascii?Q?1Dwz1GiiRyGeaRbBcVQL5nssfCrxITZZmF2M6RpaQ4OVFiEK7w9sFSKqIM66?=
	=?us-ascii?Q?03KtW+uZW5YbSATVUsgp5ALaal+qpqHdD2KJ1JQALv7PNGMguwzeAkiTWbW/?=
	=?us-ascii?Q?NzeFqokqPuZfWI1vC3Nj1X/+F2ruZVGCDnFBTyCdy2j6bzZ677xPFB//1oun?=
	=?us-ascii?Q?fZIC3HGYWMOsPYw+JWHl1a1MWbq04CizkoT4yUdgVqt9xA7eVATYUuoAelbt?=
	=?us-ascii?Q?mdlIs/jU1E9vF+fonnr4CbG4ddoFsj6NY7iclrxVMz53s3kSsUujzYZj378E?=
	=?us-ascii?Q?eq5VDkAiPJsOOXV1uS4D5jKnrSIE2TeldWc2E94dIfKaT9cp9oJfOxqg1H71?=
	=?us-ascii?Q?xB3U+aJsxZ6WmqCtQw4WbYGAUF5RjrBsesIWBeRORr11zkLzhz8mwahXlqPZ?=
	=?us-ascii?Q?JOKSRoLRB8V9vQhlRSa6+z3oRB333mWmUhL/2xtt6l2v0cq+X8nzCIT76jlL?=
	=?us-ascii?Q?wF2jI6yQvMROplKi9TXy/heVtmS58FOeCaRjPCk9OGka43sHcjU6ZGxbOtO3?=
	=?us-ascii?Q?XoNAiOBSdPChvWSvyMknOIfbbhz6mT+8iQHMFoPLUnGgqsOOKYOkbh260BNm?=
	=?us-ascii?Q?8gEH6hD5jgU9tD2pveqGzDrIV2o53ATX9rSl+8F5WH9q1GRVkCPnMZqWh+HE?=
	=?us-ascii?Q?QpxzQHJDhpxKBWWD9ejwJiMYHpZq7H2JNYY5TmsV9j+urfBEDBLSBVq9gpnx?=
	=?us-ascii?Q?6RwS2WSEJoyTSe+NGxNGbt?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	5:KV4sVEBQ3NKS6jNAXA8Yv5ghUDkKOuZEPFexSdN9H2wNQR4vXeJWmDJcbK7X8S/iXEbYLck+i6r3NHcY46fuASfeLvVZOQTM6w7sv6+2My2V0VYi2m1AS2ET2PX/AdQ9+MaDtSPVvk73OhkzqtjXHIdCm24GRJqObKPSU32a5sOYhVJIgy4IKJzNJ50aRUNF3t4/W7FgzV4sKSj4Pp8Rz2Qtollef5tLTr7QcfmODaHIht4QK/dm7SszpIFnnAp+4k8xK5JqBagMQU13GddtB/zSt30bB0fPK5hjQqk+ejnTKct65X9LflX/oau69+Rr59Ft1/Ljmhk/ObpWuHL5/3xTQH8I7/T3VIC+5y+yurXiWd3ERkkZIPfgaysfy17yftMvSDXPiH7cjdeBvklKNsC8GMxUQGVSNh6tHnzAm3sdYkNA0ISYswicgKBOr9OZWoXAkO4qYmH820HR9YiVgM3QGck3OTO2MA58OVlTGzvcYDN4sIgR9Dxkn8TrNNU3;
	24:HwaKxgoAUJybmuJMH5iUtIbmZ2B0mU8wEGZhtY89ZNdxIaJFp80KyrPqrrVg1/ilj/8Ibf09Nd8DHktooeVwoaHZLPHkVEuu9sMUYn8S/BY=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	7:VVJWUyEH+o3GnnLr+67fGs6TBRtmoRrMGJ+vr/CE/WUbW07Bh5SCKCVA1SLAoAvo/RaJFnH8MlaMXwZWO8UWqjxqxBK/nFxy6tTGDxMeWKBPzxeJ3WKiRlJDar+YUDGB2MJNH0yG1JdyXJJrWuYIh6tV4Oi77xyZhojnM2vDEnuSaKvISPhf1fY+wqJvwSdY5f3/i7HsYIUCTc9MRuJ0OUQuLL8uNZtFoSrIjM2aWmqt+SrgtR81rXr75f3rcOOf3+xQHf6CAQkaYUlE6UsJVaAHmTSIDEBu6rT7RENcNzhxd73717FbmhyHCHVTgoC0s4e6j/nyBvvg+5dSAXYNMvkDrL7bWRpuhd2LGZ4jYOp1m9YDEABU63gIQ4DGEIlLygEteFNfcOONPrwWTNOgJ0CB37pnUNuKL/gpBI1tzfOhhyKpjNrxk7wSiB8MdSYFVXaNOJJOHnfWO+mcJRh/ktJvwCxXwosE+RPf/oA49Ofn+Oj3dRVK4y2hSdEByVGi1oZVwWwrBPjtVBerSCCqvWmYO8Jv4hEc/Md1JsiskD5T4J1HQeK4Gj1hpHLSBSBxP4iJ+hcAnq+TfRtrZq/Q5KvJ0dB+CAZyscVdlNyt4z3nZ1O6KeperyH8xItDporZnvwkiGHsqOyNuo7M2YwVV/1hpnFmdasBwfSRPVnLsyPkdeMMbqpbzZMRKeW3iSb/8bKGTI03jC5CL2aVfJuZPsxpznaDc93g8pbiprmD4Dd3CLPZF8mLtveP+4KWgdb0hPY0lLRcl9Z+7xnxI8q6zX4vuRz92/LAB0PP16r3WPg=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:/0eZQpBt6u47dInkZQEIVu6H8+HyFEiCsLU1V5JI0mYkAXFtFLCKH7H+wS20g5gXhbG7VP32rpmZrLyvpibW9XEZ4M8PEar0RcTxboxiouTdy3H3kc25IFVO0vIcej5XeAEERBVwAgyvs5ZxMASilhQ3Vns9pil2Ec/p/SAAp5av9ds8wpAM8U0/yMyQkbvGAgY6r22CE5/ad8BTiAajXrgl6kNyVq+8V9G+yUsx9Aub/zrn+svIkFcK/wW+L6Sl
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 17 Jul 2017 21:13:17.6450
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1151
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - July 17, 2017, 9:10 p.m.</div>
<pre class="content">
Add support to check if SME has been enabled and if memory encryption
should be activated (checking of command line option based on the
configuration of the default state).  If memory encryption is to be
activated, then the encryption mask is set and the kernel is encrypted
&quot;in place.&quot;
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |  6 ++-
 arch/x86/kernel/head64.c           |  5 ++-
 arch/x86/mm/mem_encrypt.c          | 77 +++++++++++++++++++++++++++++++++++++-
 3 files changed, 83 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 7122c36..8e618fc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -17,6 +17,8 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/init.h&gt;
 
<span class="p_add">+#include &lt;asm/bootparam.h&gt;</span>
<span class="p_add">+</span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 extern unsigned long sme_me_mask;
<span class="p_chunk">@@ -38,7 +40,7 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 void __init sme_early_init(void);
 
 void __init sme_encrypt_kernel(void);
<span class="p_del">-void __init sme_enable(void);</span>
<span class="p_add">+void __init sme_enable(struct boot_params *bp);</span>
 
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
<span class="p_chunk">@@ -60,7 +62,7 @@</span> <span class="p_context"> static inline void __init sme_unmap_bootdata(char *real_mode_data) { }</span>
 static inline void __init sme_early_init(void) { }
 
 static inline void __init sme_encrypt_kernel(void) { }
<span class="p_del">-static inline void __init sme_enable(void) { }</span>
<span class="p_add">+static inline void __init sme_enable(struct boot_params *bp) { }</span>
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index 0cdb53b..925b292 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -45,7 +45,8 @@</span> <span class="p_context"> static void __head *fixup_pointer(void *ptr, unsigned long physaddr)</span>
 	return ptr - (void *)_text + (void *)physaddr;
 }
 
<span class="p_del">-unsigned long __head __startup_64(unsigned long physaddr)</span>
<span class="p_add">+unsigned long __head __startup_64(unsigned long physaddr,</span>
<span class="p_add">+				  struct boot_params *bp)</span>
 {
 	unsigned long load_delta, *p;
 	unsigned long pgtable_flags;
<span class="p_chunk">@@ -70,7 +71,7 @@</span> <span class="p_context"> unsigned long __head __startup_64(unsigned long physaddr)</span>
 		for (;;);
 
 	/* Activate Secure Memory Encryption (SME) if supported and enabled */
<span class="p_del">-	sme_enable();</span>
<span class="p_add">+	sme_enable(bp);</span>
 
 	/* Include the SME encryption mask in the fixup value */
 	load_delta += sme_get_me_mask();
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index e5d5439..053d540 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
 #include &lt;linux/swiotlb.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
<span class="p_chunk">@@ -23,6 +24,13 @@</span> <span class="p_context"></span>
 #include &lt;asm/set_memory.h&gt;
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/cmdline.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static char sme_cmdline_arg[] __initdata = &quot;mem_encrypt&quot;;</span>
<span class="p_add">+static char sme_cmdline_on[]  __initdata = &quot;on&quot;;</span>
<span class="p_add">+static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -190,6 +198,8 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 
 	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */
 	swiotlb_update_mem_attributes();
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);</span>
 }
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
<span class="p_chunk">@@ -513,6 +523,71 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	native_write_cr3(__native_read_cr3());
 }
 
<span class="p_del">-void __init sme_enable(void)</span>
<span class="p_add">+void __init __nostackp sme_enable(struct boot_params *bp)</span>
 {
<span class="p_add">+	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;</span>
<span class="p_add">+	unsigned int eax, ebx, ecx, edx;</span>
<span class="p_add">+	bool active_by_default;</span>
<span class="p_add">+	unsigned long me_mask;</span>
<span class="p_add">+	char buffer[16];</span>
<span class="p_add">+	u64 msr;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for the SME support leaf */</span>
<span class="p_add">+	eax = 0x80000000;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (eax &lt; 0x8000001f)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SME feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_add">+	 *     Secure Memory Encryption support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	eax = 0x8000001f;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (!(eax &amp; 1))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	me_mask = 1UL &lt;&lt; (ebx &amp; 0x3f);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if SME is enabled */</span>
<span class="p_add">+	msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_add">+	if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Fixups have not been applied to phys_base yet and we&#39;re running</span>
<span class="p_add">+	 * identity mapped, so we must obtain the address to the SME command</span>
<span class="p_add">+	 * line argument data using rip-relative addressing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_arg(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_arg)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_arg));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_on(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_on)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_on));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_off(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_off)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_off));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT))</span>
<span class="p_add">+		active_by_default = true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		active_by_default = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_ptr = (const char *)((u64)bp-&gt;hdr.cmd_line_ptr |</span>
<span class="p_add">+				     ((u64)bp-&gt;ext_cmd_line_ptr &lt;&lt; 32));</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_find_option(cmdline_ptr, cmdline_arg, buffer, sizeof(buffer));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!strncmp(buffer, cmdline_on, sizeof(buffer)))</span>
<span class="p_add">+		sme_me_mask = me_mask;</span>
<span class="p_add">+	else if (!strncmp(buffer, cmdline_off, sizeof(buffer)))</span>
<span class="p_add">+		sme_me_mask = 0;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		sme_me_mask = active_by_default ? me_mask : 0;</span>
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



