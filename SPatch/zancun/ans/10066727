
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arch, mm: introduce arch_tlb_gather_mmu_lazy - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arch, mm: introduce arch_tlb_gather_mmu_lazy</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 20, 2017, 4:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171120160422.5ieustt5ovbyelyx@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10066727/mbox/"
   >mbox</a>
|
   <a href="/patch/10066727/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10066727/">/patch/10066727/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2CBAD603FA for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 16:04:31 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1C2F12941E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 16:04:31 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 10F21292DC; Mon, 20 Nov 2017 16:04:31 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 19757292DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Nov 2017 16:04:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751758AbdKTQEZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Nov 2017 11:04:25 -0500
Received: from mx2.suse.de ([195.135.220.15]:44784 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751733AbdKTQEY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Nov 2017 11:04:24 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id EFDA6ABF6;
	Mon, 20 Nov 2017 16:04:22 +0000 (UTC)
Date: Mon, 20 Nov 2017 17:04:22 +0100
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;, Wang Nan &lt;wangnan0@huawei.com&gt;,
	linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	Bob Liu &lt;liubo95@huawei.com&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Roman Gushchin &lt;guro@fb.com&gt;,
	Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;
Subject: [PATCH] arch, mm: introduce arch_tlb_gather_mmu_lazy
Message-ID: &lt;20171120160422.5ieustt5ovbyelyx@dhcp22.suse.cz&gt;
References: &lt;20171107095453.179940-1-wangnan0@huawei.com&gt;
	&lt;20171110001933.GA12421@bbox&gt;
	&lt;20171110101529.op6yaxtdke2p4bsh@dhcp22.suse.cz&gt;
	&lt;20171110122635.q26xdxytgdfjy5q3@dhcp22.suse.cz&gt;
	&lt;20171115173332.GL19071@arm.com&gt;
	&lt;20171116092042.esxqtnfxdrozfwey@dhcp22.suse.cz&gt;
	&lt;20171120142444.GA32488@arm.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20171120142444.GA32488@arm.com&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Nov. 20, 2017, 4:04 p.m.</div>
<pre class="content">
On Mon 20-11-17 14:24:44, Will Deacon wrote:
<span class="quote">&gt; On Thu, Nov 16, 2017 at 10:20:42AM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Wed 15-11-17 17:33:32, Will Deacon wrote:</span>
[...]
<span class="quote">&gt; &gt; &gt; &gt; diff --git a/arch/arm64/include/asm/tlb.h b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; index ffdaea7954bb..7adde19b2bcc 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; --- a/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; +++ b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; @@ -43,7 +43,7 @@ static inline void tlb_flush(struct mmu_gather *tlb)</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 * The ASID allocator will either invalidate the ASID or mark</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 * it as used.</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; -	if (tlb-&gt;fullmm)</span>
<span class="quote">&gt; &gt; &gt; &gt; +	if (tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; &gt;  		return;</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; This looks like the right idea, but I&#39;d rather make this check:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; since the optimisation doesn&#39;t work for anything than tearing down the</span>
<span class="quote">&gt; &gt; &gt; entire address space.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; OK, that makes sense.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Alternatively, I could actually go check MMF_UNSTABLE in tlb-&gt;mm, which</span>
<span class="quote">&gt; &gt; &gt; would save you having to add an extra flag in the first place, e.g.:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; !test_bit(MMF_UNSTABLE, &amp;tlb-&gt;mm-&gt;flags))</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; which is a nice one-liner.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; But that would make it oom_reaper specific. What about the softdirty</span>
<span class="quote">&gt; &gt; case Minchan has mentioned earlier?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We don&#39;t (yet) support that on arm64, so we&#39;re ok for now. If we do grow</span>
<span class="quote">&gt; support for it, then I agree that we want a flag to identify the case where</span>
<span class="quote">&gt; the address space is going away and only elide the invalidation then.</span>

What do you think about the following patch instead? I have to confess
I do not really understand the fullmm semantic so I might introduce some
duplication by this flag. If you think this is a good idea, I will post
it in a separate thread.
---
From ba2633169d355a77dc17bda11735432b554efc28 Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Mon, 20 Nov 2017 17:02:00 +0100
Subject: [PATCH] arch, mm: introduce arch_tlb_gather_mmu_lazy

5a7862e83000 (&quot;arm64: tlbflush: avoid flushing when fullmm == 1&quot;) has
introduced an optimization to not flush tlb when we are tearing the
whole address space down. Will goes on to explain

: Basically, we tag each address space with an ASID (PCID on x86) which
: is resident in the TLB. This means we can elide TLB invalidation when
: pulling down a full mm because we won&#39;t ever assign that ASID to
: another mm without doing TLB invalidation elsewhere (which actually
: just nukes the whole TLB).

This all is nice but tlb_gather users are not aware of that and this can
actually cause some real problems. E.g. the oom_reaper tries to reap the
whole address space but it might race with threads accessing the memory [1].
It is possible that soft-dirty handling might suffer from the same
problem [2] as soon as it starts supporting the feature.

Introduce an explicit lazy variant tlb_gather_mmu_lazy which allows the
behavior arm64 implements for the fullmm case and replace it by an
explicit lazy flag in the mmu_gather structure. exit_mmap path is then
turned into the explicit lazy variant. Other architectures simply ignore
the flag.

[1] http://lkml.kernel.org/r/20171106033651.172368-1-wangnan0@huawei.com
[2] http://lkml.kernel.org/r/20171110001933.GA12421@bbox
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 arch/arm/include/asm/tlb.h   |  3 ++-
 arch/arm64/include/asm/tlb.h |  2 +-
 arch/ia64/include/asm/tlb.h  |  3 ++-
 arch/s390/include/asm/tlb.h  |  3 ++-
 arch/sh/include/asm/tlb.h    |  2 +-
 arch/um/include/asm/tlb.h    |  2 +-
 include/asm-generic/tlb.h    |  6 ++++--
 include/linux/mm_types.h     |  2 ++
 mm/memory.c                  | 17 +++++++++++++++--
 mm/mmap.c                    |  2 +-
 10 files changed, 31 insertions(+), 11 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Nov. 22, 2017, 7:30 p.m.</div>
<pre class="content">
Hi Michal,

On Mon, Nov 20, 2017 at 05:04:22PM +0100, Michal Hocko wrote:
<span class="quote">&gt; On Mon 20-11-17 14:24:44, Will Deacon wrote:</span>
<span class="quote">&gt; &gt; On Thu, Nov 16, 2017 at 10:20:42AM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed 15-11-17 17:33:32, Will Deacon wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; diff --git a/arch/arm64/include/asm/tlb.h b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; index ffdaea7954bb..7adde19b2bcc 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; --- a/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +++ b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; @@ -43,7 +43,7 @@ static inline void tlb_flush(struct mmu_gather *tlb)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 * The ASID allocator will either invalidate the ASID or mark</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 * it as used.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	if (tlb-&gt;fullmm)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	if (tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  		return;</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; This looks like the right idea, but I&#39;d rather make this check:</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; since the optimisation doesn&#39;t work for anything than tearing down the</span>
<span class="quote">&gt; &gt; &gt; &gt; entire address space.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; OK, that makes sense.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Alternatively, I could actually go check MMF_UNSTABLE in tlb-&gt;mm, which</span>
<span class="quote">&gt; &gt; &gt; &gt; would save you having to add an extra flag in the first place, e.g.:</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; !test_bit(MMF_UNSTABLE, &amp;tlb-&gt;mm-&gt;flags))</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; which is a nice one-liner.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; But that would make it oom_reaper specific. What about the softdirty</span>
<span class="quote">&gt; &gt; &gt; case Minchan has mentioned earlier?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We don&#39;t (yet) support that on arm64, so we&#39;re ok for now. If we do grow</span>
<span class="quote">&gt; &gt; support for it, then I agree that we want a flag to identify the case where</span>
<span class="quote">&gt; &gt; the address space is going away and only elide the invalidation then.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What do you think about the following patch instead? I have to confess</span>
<span class="quote">&gt; I do not really understand the fullmm semantic so I might introduce some</span>
<span class="quote">&gt; duplication by this flag. If you think this is a good idea, I will post</span>
<span class="quote">&gt; it in a separate thread.</span>


Please do! My only suggestion would be s/lazy/exit/, since I don&#39;t think the
optimisation works in any other situation than the address space going away
for good.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Nov. 23, 2017, 6:18 a.m.</div>
<pre class="content">
On Wed, Nov 22, 2017 at 07:30:50PM +0000, Will Deacon wrote:
<span class="quote">&gt; Hi Michal,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Mon, Nov 20, 2017 at 05:04:22PM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Mon 20-11-17 14:24:44, Will Deacon wrote:</span>
<span class="quote">&gt; &gt; &gt; On Thu, Nov 16, 2017 at 10:20:42AM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; On Wed 15-11-17 17:33:32, Will Deacon wrote:</span>
<span class="quote">&gt; &gt; [...]</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; diff --git a/arch/arm64/include/asm/tlb.h b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; index ffdaea7954bb..7adde19b2bcc 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; --- a/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; +++ b/arch/arm64/include/asm/tlb.h</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; @@ -43,7 +43,7 @@ static inline void tlb_flush(struct mmu_gather *tlb)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt;  	 * The ASID allocator will either invalidate the ASID or mark</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt;  	 * it as used.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; -	if (tlb-&gt;fullmm)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; +	if (tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt;  		return;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; This looks like the right idea, but I&#39;d rather make this check:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; tlb-&gt;lazy)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; since the optimisation doesn&#39;t work for anything than tearing down the</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; entire address space.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; OK, that makes sense.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Alternatively, I could actually go check MMF_UNSTABLE in tlb-&gt;mm, which</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; would save you having to add an extra flag in the first place, e.g.:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; 	if (tlb-&gt;fullmm &amp;&amp; !test_bit(MMF_UNSTABLE, &amp;tlb-&gt;mm-&gt;flags))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; which is a nice one-liner.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; But that would make it oom_reaper specific. What about the softdirty</span>
<span class="quote">&gt; &gt; &gt; &gt; case Minchan has mentioned earlier?</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; We don&#39;t (yet) support that on arm64, so we&#39;re ok for now. If we do grow</span>
<span class="quote">&gt; &gt; &gt; support for it, then I agree that we want a flag to identify the case where</span>
<span class="quote">&gt; &gt; &gt; the address space is going away and only elide the invalidation then.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; What do you think about the following patch instead? I have to confess</span>
<span class="quote">&gt; &gt; I do not really understand the fullmm semantic so I might introduce some</span>
<span class="quote">&gt; &gt; duplication by this flag. If you think this is a good idea, I will post</span>
<span class="quote">&gt; &gt; it in a separate thread.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please do! My only suggestion would be s/lazy/exit/, since I don&#39;t think the</span>
<span class="quote">&gt; optimisation works in any other situation than the address space going away</span>
<span class="quote">&gt; for good.</span>

Yes, address space going. That&#39;s why I wanted to add additional check that
address space going without adding new flags.

http://lkml.kernel.org/r/&lt;20171113002833.GA18301@bbox&gt;

However, if you guys love to add new flag to distinguish, I prefer
&quot;exit&quot; to &quot;lazy&quot;. It also would be better to add WARN_ON to catch
future potential wrong use case like OOM reaper.
Anyway, I&#39;m not strong against so it up to you, Michal.

        WARN_ON_ONCE(exit == true &amp;&amp; atomic_read(&amp;mm-&gt;mm_users) &gt; 0);
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/tlb.h b/arch/arm/include/asm/tlb.h</span>
<span class="p_header">index d5562f9ce600..fe9042aee8e9 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/tlb.h</span>
<span class="p_chunk">@@ -149,7 +149,8 @@</span> <span class="p_context"> static inline void tlb_flush_mmu(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;fullmm = !(start | (end+1));
<span class="p_header">diff --git a/arch/arm64/include/asm/tlb.h b/arch/arm64/include/asm/tlb.h</span>
<span class="p_header">index ffdaea7954bb..52bfbeae2aca 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -43,7 +43,7 @@</span> <span class="p_context"> static inline void tlb_flush(struct mmu_gather *tlb)</span>
 	 * The ASID allocator will either invalidate the ASID or mark
 	 * it as used.
 	 */
<span class="p_del">-	if (tlb-&gt;fullmm)</span>
<span class="p_add">+	if (tlb-&gt;fullmm &amp;&amp; tlb-&gt;lazy)</span>
 		return;
 
 	/*
<span class="p_header">diff --git a/arch/ia64/include/asm/tlb.h b/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">index cbe5ac3699bf..50c440f5b7bc 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -169,7 +169,8 @@</span> <span class="p_context"> static inline void __tlb_alloc_page(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;max = ARRAY_SIZE(tlb-&gt;local);
<span class="p_header">diff --git a/arch/s390/include/asm/tlb.h b/arch/s390/include/asm/tlb.h</span>
<span class="p_header">index 2eb8ff0d6fca..2310657b64c4 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/tlb.h</span>
<span class="p_chunk">@@ -49,7 +49,8 @@</span> <span class="p_context"> extern void tlb_remove_table(struct mmu_gather *tlb, void *table);</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/arch/sh/include/asm/tlb.h b/arch/sh/include/asm/tlb.h</span>
<span class="p_header">index 51a8bc967e75..ae4c50a7c1ec 100644</span>
<span class="p_header">--- a/arch/sh/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/sh/include/asm/tlb.h</span>
<span class="p_chunk">@@ -37,7 +37,7 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-		unsigned long start, unsigned long end)</span>
<span class="p_add">+		unsigned long start, unsigned long end, bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/arch/um/include/asm/tlb.h b/arch/um/include/asm/tlb.h</span>
<span class="p_header">index 344d95619d03..f24af66d07a4 100644</span>
<span class="p_header">--- a/arch/um/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/um/include/asm/tlb.h</span>
<span class="p_chunk">@@ -46,7 +46,7 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-		unsigned long start, unsigned long end)</span>
<span class="p_add">+		unsigned long start, unsigned long end, bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index faddde44de8c..e6f0b8715e52 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -101,7 +101,8 @@</span> <span class="p_context"> struct mmu_gather {</span>
 	unsigned int		fullmm : 1,
 	/* we have performed an operation which
 	 * requires a complete flush of the tlb */
<span class="p_del">-				need_flush_all : 1;</span>
<span class="p_add">+				need_flush_all : 1,</span>
<span class="p_add">+				lazy : 1;</span>
 
 	struct mmu_gather_batch *active;
 	struct mmu_gather_batch	local;
<span class="p_chunk">@@ -113,7 +114,8 @@</span> <span class="p_context"> struct mmu_gather {</span>
 #define HAVE_GENERIC_MMU_GATHER
 
 void arch_tlb_gather_mmu(struct mmu_gather *tlb,
<span class="p_del">-	struct mm_struct *mm, unsigned long start, unsigned long end);</span>
<span class="p_add">+	struct mm_struct *mm, unsigned long start, unsigned long end,</span>
<span class="p_add">+	bool lazy);</span>
 void tlb_flush_mmu(struct mmu_gather *tlb);
 void arch_tlb_finish_mmu(struct mmu_gather *tlb,
 			 unsigned long start, unsigned long end, bool force);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 2a728317cba0..3208bea0356f 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -523,6 +523,8 @@</span> <span class="p_context"> static inline cpumask_t *mm_cpumask(struct mm_struct *mm)</span>
 struct mmu_gather;
 extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 				unsigned long start, unsigned long end);
<span class="p_add">+extern void tlb_gather_mmu_lazy(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+				unsigned long start, unsigned long end);</span>
 extern void tlb_finish_mmu(struct mmu_gather *tlb,
 				unsigned long start, unsigned long end);
 
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 590709e84a43..7dfdd4d8224f 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -218,13 +218,15 @@</span> <span class="p_context"> static bool tlb_next_batch(struct mmu_gather *tlb)</span>
 }
 
 void arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-				unsigned long start, unsigned long end)</span>
<span class="p_add">+				unsigned long start, unsigned long end,</span>
<span class="p_add">+				bool lazy)</span>
 {
 	tlb-&gt;mm = mm;
 
 	/* Is it from 0 to ~0? */
 	tlb-&gt;fullmm     = !(start | (end+1));
 	tlb-&gt;need_flush_all = 0;
<span class="p_add">+	tlb-&gt;lazy	= lazy;</span>
 	tlb-&gt;local.next = NULL;
 	tlb-&gt;local.nr   = 0;
 	tlb-&gt;local.max  = ARRAY_SIZE(tlb-&gt;__pages);
<span class="p_chunk">@@ -408,7 +410,18 @@</span> <span class="p_context"> void tlb_remove_table(struct mmu_gather *tlb, void *table)</span>
 void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 			unsigned long start, unsigned long end)
 {
<span class="p_del">-	arch_tlb_gather_mmu(tlb, mm, start, end);</span>
<span class="p_add">+	arch_tlb_gather_mmu(tlb, mm, start, end, false);</span>
<span class="p_add">+	inc_tlb_flush_pending(tlb-&gt;mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* tlb_gather_mmu_lazy</span>
<span class="p_add">+ * 	Basically same as tlb_gather_mmu except it allows architectures to</span>
<span class="p_add">+ * 	skip tlb flushing if they can ensure that nobody will reuse tlb entries</span>
<span class="p_add">+ */</span>
<span class="p_add">+void tlb_gather_mmu_lazy(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	arch_tlb_gather_mmu(tlb, mm, start, end, true);</span>
 	inc_tlb_flush_pending(tlb-&gt;mm);
 }
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 680506faceae..43594a6a2eac 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2997,7 +2997,7 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 
 	lru_add_drain();
 	flush_cache_mm(mm);
<span class="p_del">-	tlb_gather_mmu(&amp;tlb, mm, 0, -1);</span>
<span class="p_add">+	tlb_gather_mmu_lazy(&amp;tlb, mm, 0, -1);</span>
 	/* update_hiwater_rss(mm) here? but nobody should be looking */
 	/* Use -1 here to ensure all VMAs in the mm are unmapped */
 	unmap_vmas(&amp;tlb, vma, 0, -1);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



