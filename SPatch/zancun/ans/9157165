
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,02/11] iommu/ipmmu-vmsa: Add optional root device feature - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,02/11] iommu/ipmmu-vmsa: Add optional root device feature</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 6, 2016, 3:57 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160606035743.31763.22662.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9157165/mbox/"
   >mbox</a>
|
   <a href="/patch/9157165/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9157165/">/patch/9157165/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4374F60573 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 04:08:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 389AD27B13
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 04:08:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2D20228210; Mon,  6 Jun 2016 04:08:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9817327B13
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 04:08:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753061AbcFFEIN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Jun 2016 00:08:13 -0400
Received: from mail-pa0-f65.google.com ([209.85.220.65]:34822 &quot;EHLO
	mail-pa0-f65.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752991AbcFFEIJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Jun 2016 00:08:09 -0400
Received: by mail-pa0-f65.google.com with SMTP id gp3so10818136pac.2;
	Sun, 05 Jun 2016 21:08:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=OVLRjh3jQIPjFLqRbVBQDCtwTBORsTzTTpFYoNteRl0=;
	b=wCK79O7uxnvQTG41F7LSdXw6F46KXc4YccVKUM0rPAGxHWIeKY9N+4cwTR2Xx+JglX
	NDlhowtRh9A5UTaZxG1Yld++rrTdyOcAJ+eeX/f8Q+HpJb4fgisXBJ892feJau9xIWJg
	TkDKmAb62sQSGbBVj0k9sc/+s81l6kqr2D7cmH6p2ZyNF/Zm+OmVZHqPxPsCmzVEUfQ0
	GeyF/YQ2l2zZ6KUpAzcXWGnvojZVJ/8ypeoiNLQOiZ2+PG51/YOM9wAi9hgdHbaupSY5
	SHfy0Yp5EVppELymxLa8cKmu3ethy7TFL8JTwIT9F/b0+ef814JCb223Wusq5AT2s7rK
	B8iQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=OVLRjh3jQIPjFLqRbVBQDCtwTBORsTzTTpFYoNteRl0=;
	b=jioWLSPznjQqkt5+stE2lA/EdzY2K5CU1RH8P78az/0QE++iyIpxVN9APJoJDtM6qz
	vY0PAKfPLLjh3aBdnhF/cd59vlTHqyXCVRut8Iv8QIC9kxbjkiPu8gUPq50/pXkoGRB6
	8pBxOSWpPhfeXdC7HZZkXej0z4A6J9izAfM6DTKxPiumCXPXm+9uCjMttqSo18uizU4A
	I3YHtb/oVnXol20K5NPf48r30iebBGlNVt+22yR8RMlwn9aTOABHkR71ekCcpRWnlcT1
	nxUe6cVxeniOY8R+HzHYrZwXHqDbh2mLk663DCKeKTfXA0KsKF2+aiFl0bivpdQwiYsf
	LbQQ==
X-Gm-Message-State: ALyK8tLAbIHtKad5Vpjh90OaWdKhe/ZkEN0rtDiZl3Vv0EXbspw0IjuWpmYjVJKOcPL4Pw==
X-Received: by 10.66.65.133 with SMTP id x5mr22356662pas.108.1465186083738; 
	Sun, 05 Jun 2016 21:08:03 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	ap3sm20979868pad.33.2016.06.05.21.08.00
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sun, 05 Jun 2016 21:08:02 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: iommu@lists.linux-foundation.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	joro@8bytes.org, linux-kernel@vger.kernel.org,
	linux-renesas-soc@vger.kernel.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;
Date: Mon, 06 Jun 2016 12:57:43 +0900
Message-Id: &lt;20160606035743.31763.22662.sendpatchset@little-apple&gt;
In-Reply-To: &lt;20160606035723.31763.66500.sendpatchset@little-apple&gt;
References: &lt;20160606035723.31763.66500.sendpatchset@little-apple&gt;
Subject: [PATCH v2 02/11] iommu/ipmmu-vmsa: Add optional root device feature
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - June 6, 2016, 3:57 a.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Add root device handling to the IPMMU driver by allowing certain
DT compat strings to enable has_cache_leaf_nodes that in turn will
support both root devices with interrupts and leaf devices that
face the actual IPMMU consumer devices.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
---

 Changes since V1:
 - Moved patch to earlier in the series
 - Updated code to work with recent changes in:
   [PATCH v3 00/06] iommu/ipmmu-vmsa: IPMMU multi-arch update V3

 drivers/iommu/ipmmu-vmsa.c |   87 +++++++++++++++++++++++++++++++++++---------
 1 file changed, 70 insertions(+), 17 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0009/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2016-06-06 10:11:32.130607110 +0900</span>
<span class="p_chunk">@@ -34,6 +34,7 @@</span> <span class="p_context"></span>
 
 struct ipmmu_features {
 	bool use_ns_alias_offset;
<span class="p_add">+	bool has_cache_leaf_nodes;</span>
 };
 
 struct ipmmu_vmsa_device {
<span class="p_chunk">@@ -41,6 +42,7 @@</span> <span class="p_context"> struct ipmmu_vmsa_device {</span>
 	void __iomem *base;
 	struct list_head list;
 	const struct ipmmu_features *features;
<span class="p_add">+	bool is_leaf;</span>
 	unsigned int num_utlbs;
 	spinlock_t lock;			/* Protects ctx and domains[] */
 	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);
<span class="p_chunk">@@ -51,6 +53,7 @@</span> <span class="p_context"> struct ipmmu_vmsa_device {</span>
 
 struct ipmmu_vmsa_domain {
 	struct ipmmu_vmsa_device *mmu;
<span class="p_add">+	struct ipmmu_vmsa_device *root;</span>
 	struct iommu_domain io_domain;
 
 	struct io_pgtable_cfg cfg;
<span class="p_chunk">@@ -195,6 +198,36 @@</span> <span class="p_context"> static struct ipmmu_vmsa_domain *to_vmsa</span>
 #define IMUASID_ASID0_SHIFT		0
 
 /* -----------------------------------------------------------------------------
<span class="p_add">+ * Root device handling</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static bool ipmmu_is_root(struct ipmmu_vmsa_device *mmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (mmu-&gt;features-&gt;has_cache_leaf_nodes)</span>
<span class="p_add">+		return mmu-&gt;is_leaf ? false : true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		return true; /* older IPMMU hardware treated as single root */</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct ipmmu_vmsa_device *ipmmu_find_root(struct ipmmu_vmsa_device *leaf)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct ipmmu_vmsa_device *mmu = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ipmmu_is_root(leaf))</span>
<span class="p_add">+		return leaf;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;ipmmu_devices_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(mmu, &amp;ipmmu_devices, list) {</span>
<span class="p_add">+		if (ipmmu_is_root(mmu))</span>
<span class="p_add">+			break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock(&amp;ipmmu_devices_lock);</span>
<span class="p_add">+	return mmu;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* -----------------------------------------------------------------------------</span>
  * Read/Write Access
  */
 
<span class="p_chunk">@@ -211,13 +244,13 @@</span> <span class="p_context"> static void ipmmu_write(struct ipmmu_vms</span>
 
 static u32 ipmmu_ctx_read(struct ipmmu_vmsa_domain *domain, unsigned int reg)
 {
<span class="p_del">-	return ipmmu_read(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="p_add">+	return ipmmu_read(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
 }
 
 static void ipmmu_ctx_write(struct ipmmu_vmsa_domain *domain, unsigned int reg,
 			    u32 data)
 {
<span class="p_del">-	ipmmu_write(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="p_add">+	ipmmu_write(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -350,7 +383,7 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	 * TODO: Add support for coherent walk through CCI with DVM and remove
 	 * cache handling. For now, delegate it to the io-pgtable code.
 	 */
<span class="p_del">-	domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;dev;</span>
<span class="p_add">+	domain-&gt;cfg.iommu_dev = domain-&gt;root-&gt;dev;</span>
 
 	domain-&gt;iop = alloc_io_pgtable_ops(ARM_32_LPAE_S1, &amp;domain-&gt;cfg,
 					   domain);
<span class="p_chunk">@@ -360,7 +393,7 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	/*
 	 * Find an unused context.
 	 */
<span class="p_del">-	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="p_add">+	ret = ipmmu_domain_allocate_context(domain-&gt;root, domain);</span>
 	if (ret == IPMMU_CTX_MAX) {
 		free_io_pgtable_ops(domain-&gt;iop);
 		return -EBUSY;
<span class="p_chunk">@@ -431,7 +464,7 @@</span> <span class="p_context"> static void ipmmu_domain_destroy_context</span>
 	 */
 	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);
 	ipmmu_tlb_sync(domain);
<span class="p_del">-	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="p_add">+	ipmmu_domain_free_context(domain-&gt;root, domain-&gt;context_id);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -544,7 +577,7 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 			       struct device *dev)
 {
 	struct ipmmu_vmsa_archdata *archdata = dev-&gt;archdata.iommu;
<span class="p_del">-	struct ipmmu_vmsa_device *mmu = archdata-&gt;mmu;</span>
<span class="p_add">+	struct ipmmu_vmsa_device *root, *mmu = archdata-&gt;mmu;</span>
 	struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);
 	unsigned long flags;
 	unsigned int i;
<span class="p_chunk">@@ -555,11 +588,18 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 		return -ENXIO;
 	}
 
<span class="p_add">+	root = ipmmu_find_root(archdata-&gt;mmu);</span>
<span class="p_add">+	if (!root) {</span>
<span class="p_add">+		dev_err(dev, &quot;Unable to locate root IPMMU\n&quot;);</span>
<span class="p_add">+		return -EAGAIN;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	spin_lock_irqsave(&amp;domain-&gt;lock, flags);
 
 	if (!domain-&gt;mmu) {
 		/* The domain hasn&#39;t been used yet, initialize it. */
 		domain-&gt;mmu = mmu;
<span class="p_add">+		domain-&gt;root = root;</span>
 		ret = ipmmu_domain_init_context(domain);
 	} else if (domain-&gt;mmu != mmu) {
 		/*
<span class="p_chunk">@@ -935,6 +975,7 @@</span> <span class="p_context"> static void ipmmu_device_reset(struct ip</span>
 
 static const struct ipmmu_features ipmmu_features_default = {
 	.use_ns_alias_offset = true,
<span class="p_add">+	.has_cache_leaf_nodes = false,</span>
 };
 
 static const struct of_device_id ipmmu_of_ids[] = {
<span class="p_chunk">@@ -994,19 +1035,31 @@</span> <span class="p_context"> static int ipmmu_probe(struct platform_d</span>
 		mmu-&gt;base += IM_NS_ALIAS_OFFSET;
 
 	irq = platform_get_irq(pdev, 0);
<span class="p_del">-	if (irq &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_del">-		return irq;</span>
<span class="p_del">-	}</span>
 
<span class="p_del">-	ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_del">-			       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_del">-	if (ret &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Determine if this IPMMU instance is a leaf device by checking</span>
<span class="p_add">+	 * if the renesas,ipmmu-main property exists or not.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mmu-&gt;features-&gt;has_cache_leaf_nodes &amp;&amp;</span>
<span class="p_add">+	    of_find_property(pdev-&gt;dev.of_node, &quot;renesas,ipmmu-main&quot;, NULL))</span>
<span class="p_add">+		mmu-&gt;is_leaf = true;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Root devices have mandatory IRQs */</span>
<span class="p_add">+	if (ipmmu_is_root(mmu)) {</span>
<span class="p_add">+		if (irq &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_add">+			return irq;</span>
<span class="p_add">+		}</span>
 
<span class="p_del">-	ipmmu_device_reset(mmu);</span>
<span class="p_add">+		ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_add">+				       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_add">+		if (ret &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ipmmu_device_reset(mmu);</span>
<span class="p_add">+	}</span>
 
 	/*
 	 * We can&#39;t create the ARM mapping here as it requires the bus to have

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



