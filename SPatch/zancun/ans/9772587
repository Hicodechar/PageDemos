
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,34/34] x86/mm: Add support to make use of Secure Memory Encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,34/34] x86/mm: Add support to make use of Secure Memory Encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2017, 7:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170607191916.28645.87015.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9772587/mbox/"
   >mbox</a>
|
   <a href="/patch/9772587/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9772587/">/patch/9772587/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A89C560350 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:19:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 966CB28173
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:19:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 898F828323; Wed,  7 Jun 2017 19:19:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D386528173
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Jun 2017 19:19:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752764AbdFGTTc (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Jun 2017 15:19:32 -0400
Received: from mail-sn1nam01on0085.outbound.protection.outlook.com
	([104.47.32.85]:29847
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751805AbdFGTTY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Jun 2017 15:19:24 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=iK7VbO4GNd+TUxkbB1zx+UPTfRftTLv5XafKA6yCNEc=;
	b=qq4f4AOR79DHcqzNMbLEAEJz/BiI2DjrTQr1c0NIxHIOYm9A9B52YS4rETAI2iWMiAyzadVXED6FjsanYZjWd9txJrWFDLPI3QbXj8EiXzVHDCHhLrlJ2gGgZVwsuQBp3Zx5EptYwB091id4gYveDQKritU4w9huGk/FA5FUqfw=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	DM5PR12MB1145.namprd12.prod.outlook.com (10.168.236.140) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1143.10; Wed, 7 Jun 2017 19:19:18 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v6 34/34] x86/mm: Add support to make use of Secure Memory
	Encryption
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, linux-mm@kvack.org,
	iommu@lists.linux-foundation.org
Cc: Rik van Riel &lt;riel@redhat.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;, Dave Young &lt;dyoung@redhat.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Wed, 07 Jun 2017 14:19:16 -0500
Message-ID: &lt;20170607191916.28645.87015.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170607191309.28645.15241.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR1001CA0028.namprd10.prod.outlook.com (10.174.84.41)
	To
	DM5PR12MB1145.namprd12.prod.outlook.com (10.168.236.140)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM5PR12MB1145:
X-MS-Office365-Filtering-Correlation-Id: f763cf95-3e69-4135-7bbe-08d4adda19da
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(48565401081)(201703131423075)(201703031133081);
	SRVR:DM5PR12MB1145; 
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1145;
	3:pvZh32t7DUAszs1Hx4eJIbb+RUHacZv2koZmKx21gqg6FCFcrPbXTtrVUKJ5YmP3Rxsbnx+2nZlqK4YyjYCWwFThMNmeVRFCkSXBkKyD4C0MVavhI4aZWS/oJ/R/Oyzr7LdRohexrLqvqA1NPDeJMAMJ9ocmqnPRm+gPdMCvu5wMgD4twh4luSmTZpvukz9UEFAQXEi4aEkX0B9bY6I5SfrlpCC/7Q0GcBtu059jdsuWl/8IodhAzBRgXCgBGU8ZciLcMcXExwBReo8MLG9gIJlsLrlA0LoXdJ4/SEO7OzECUnGJxcbZcDw3MtfrgirRUeEDLl8w5emcWlXuauNLGN58NpchlcjOREl+VkArXBI=;
	25:sdHcn8QlOW8zV6uogHK+ia87KIZD5pjT1j+nfIauVoChtcDghT1oXIcDVHsfEYmSe9k5HywNeMJBT334PkZnHQNr/DFXvjg4hiskHO47fW/nCYw2wFCPTVh+TjctP/cmPcwWP3NKrig1srcSLjnM4G4OdKckSQTUwW4Wat/v1fAQy7puQd4A23TrzX11PbVzCqrwfFWbUNX4/9uPWYOxXhQ9ztJ+c4jsTVas5vz7VUKOzTEo5jDgF7eRpEzx4itts5Ede4jg0IYp6sOP/ReOJG/ZQ6SSHgrdMP9mlYXHdCSI8o5KSeHnyhi1uxTC+0WNpargQV/1AxUXpmFJ1hRtnu7sj6FvrVUzvTDPyfKGFTPZFv6BTBW4ZEmDaMFAaaloOG9AptlCtuQTHtmH4SOgc5aNYZ/XteyreJOQVDRcPxiS/KZsXO9gs7HxDIotK5y6/IbM26mMjRiFVlRs5xRhJaFNZMJHaqi2jnOZAIdPrKE=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1145;
	31:V0ZyK9UJ5Y2ORJson2vim/VMoH578WUf9Tuan4L9HVEsFGIC1w9L6l1E3TrBz+qJ3qbwBHZrFxFFEcIxUxWcR/9RYNhV3Mmzgu1uqs8dcraQ31kyyXIf26m2YURq5wxYJqq7gP1IZYbZa9SLEe6MFa/qnDYId/AC9I0rtxdlfflaIOZ9KqFz3Ng4hVTzK+5v9Q+o13Bae5KhGyrTTVPCuRA7fk4+PYjF2umAcSf00pE=;
	20:Hisxxnl56FUZZLFf6WWZ3OFtHJedYGuM9GL5MSC/fU2UDUCEw3jePoPz6hfHp7Lhek07m0Inm567bOscc1AuCXx7SLCLHkoYCwFo40li5l7lz9dF4rucvLSVt+NOuh9RGb7RmO8IAH9sX0Ff1TYAnHyhqfb8vM+MBUGUvL04K66UT7uzcawM2LqjQBkkpHZcioMVNmqpEU/Q23Ej7jrRB2Igf60TrRbtTn7tv++ShTUFpLMGIbDRhkTP533gUMnuo39Cs6+a8ZLDmEsnzreHXn1DySaDq0wBlFCEpEg3UOsL0DjCgA0mOmZ8nrrEzVWENY6niKW9kBXh8Ky8GA/yuC/nV3Xh4TZHEn5zhvEU8hl6ZkJCutFdVhT4nztqHdFv2csr8KACbSdn6F5VdKWrgsqyAY0UAqeKQ/iIqaOnPX2LuIthuBPuifJa48W1oREOa35UOjg91jQ/YacTJJFysK/P6h7hyfQXCj3E1GNhOUJCjIylB/rmag9cdrqow3Xk
X-Microsoft-Antispam-PRVS: &lt;DM5PR12MB1145DB2BDD52772EF497D0B8ECC80@DM5PR12MB1145.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(93006095)(93001095)(3002001)(100000703101)(100105400095)(10201501046)(6055026)(6041248)(20161123564025)(20161123562025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123555025)(20161123558100)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:DM5PR12MB1145; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:DM5PR12MB1145; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ1OzQ6S3QxVW5EaXZ0OExIWjUyS0kvd0dHNDJ4c1RW?=
	=?utf-8?B?MVkxVWw3UkJEajRyUi9CQ293WTdLSFJXZ2R5cXg5L1dOc3EzVUlOcUdKcmxv?=
	=?utf-8?B?OU9kb29ORi9sb3EzbVN1bWs3V3g4SERUelR3bjVIcUJCM1I1Q3kremtmY1BZ?=
	=?utf-8?B?cHhNZHh1bUpYWk4vNEZZUWcrcFZLYWc2OEZ6RzlnZC92akVOemtlYWIzdjh1?=
	=?utf-8?B?dGpiY1dodWVhbUNYSkVoQzFJQUQ3NGt3VjZwNnd1YlhyZ29tWmJ6MjFJaEdX?=
	=?utf-8?B?RGhka0FobWR2VTI0OTI2bFVXTVFRMVlEYzA4Szh0MzF3OWs2SXpnc0tpOHpJ?=
	=?utf-8?B?WWdXOGZacFVlNU5YdG00UGpQQ240Z2ZhQTVHRnM3a0hXZU1iNUZSL0Fia0Vt?=
	=?utf-8?B?M09OREVWTzUxelFWTlRwU2RMZVphdWtCcG5BajQ4NnVLYWRHOXJFWldSTEJu?=
	=?utf-8?B?TnRteHRZK3p0ZUF2Sm1IQXg2NWhzb29NSzNIUEx3MDQzeFduUGdQVFRHTWlr?=
	=?utf-8?B?K2UvaS9xU3dRSXNQR1hUbVBhNUZxZ2E2dk83R2syVU5jWEZhQWJKMGpqU0dh?=
	=?utf-8?B?TXhwUnhiSUV5YWtsMVNPT1RMeFdONmtJU3Qwd292SXh5dUpNZkxaMjhybG16?=
	=?utf-8?B?YU9hbVZHek9OWjJvZ2h5a2V1MXRNbXdROFhlaVpwdHhKZ21HUWN0Y05RZVpD?=
	=?utf-8?B?WDhIQnZvcERXRkpXdDBVZFFUUi80bVpqRDl3MWtaaG0xVTlSbjRGb1hQNmw5?=
	=?utf-8?B?Zk5JUVczVzhsTktqb1B1cm9rUzNHTElRRVU4SGlzSmN0V20yS3pIZDE2eHFU?=
	=?utf-8?B?UkFyVmJqRU1LcC8wbGR5Q05icUtEQmsyYTJWeGVHZXVoNFduWEdNaVNrUE1k?=
	=?utf-8?B?Q1ZocTVrcTRMcDRQQ2lQVU9CNTZJM1dnNUlIVmJCRWh1cExUZFZhZERpaDU1?=
	=?utf-8?B?aklZaFYxTTlPUS9FY3NPbGFOdFpaYkRseFpJZWVkaFBYM1FQbFNxbWdNVEpZ?=
	=?utf-8?B?RHlra1MwQTFpYUNRS25uYis2NVhkaGUyRXNIR2RTYm1hNlJuZUg4YmMrNUU4?=
	=?utf-8?B?cnZHWFhmT0YxakZ5VXZCWEZzQzV6ZG5mMXZJVTFkUStSa2ZnV3hDd1lnbEp0?=
	=?utf-8?B?T3dBekovanRjNThVKzNDVXArM2g1ck5GSVJQbk13Sm5ZcjJsaWRUbUg1MTBP?=
	=?utf-8?B?aktHSVZHbmJNTng5R0U5UmZwdDlramdjY3RoMTJrUXFMV24rNzRJOVVub3U1?=
	=?utf-8?B?azdwbW5VbGFFa0FTSWJJMXRxZitwZWlMbGUvU0xiR1ZDUlM0aTA3YnZKbE9v?=
	=?utf-8?B?Y3JIa096Y2Q0dmRwZERMZDc1NEJQS3BLREYvRkNURG5sS0U2dUdOWnIvbjMw?=
	=?utf-8?B?dTZMTHJ1TFpKL1RpVkxyOTFJSXJFdnIwUTVTd3VSUUIxYUh5S0d1a0Ixd2RP?=
	=?utf-8?B?TEFPSVhTRFNlUmdUMzAySkJwSnFPL1YrOHRyeU85K0JTTk9xUm9oMVJkZnpa?=
	=?utf-8?B?ajQzVno2bjZpeDByaW9aK0dVOE4zcjFnYlRMenVSQnNyczNOa2ExdjI2TVdk?=
	=?utf-8?B?NXdZNzc1R1docjdDSXd2eGNoYzdNTzRERzNYTXBkbkhQRkRCelp3c0dtbjE2?=
	=?utf-8?Q?FuLVAYtpedo+T66Qf4G?=
X-Forefront-PRVS: 03319F6FEF
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39850400002)(39400400002)(39410400002)(39450400003)(39860400002)(39840400002)(25786009)(2950100002)(3846002)(83506001)(8676002)(7406005)(2906002)(7416002)(81166006)(189998001)(6116002)(305945005)(5660300001)(230700001)(4001350100001)(7736002)(23676002)(110136004)(1076002)(38730400002)(4326008)(72206003)(55016002)(54906002)(53416004)(86362001)(103116003)(50986999)(54356999)(76176999)(478600001)(6506006)(53936002)(33646002)(66066001)(47776003)(42186005)(9686003)(50466002)(97746001)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:DM5PR12MB1145;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ1OzIzOmNYYU1zNm93Q2M2V1VxemhkTFRwdnRiRm1m?=
	=?utf-8?B?N2NxV2J5N0dlWlRrL3QyYkZHbkpRalRFQTdVNkYvTHdseDNESkYvWEs3MTRX?=
	=?utf-8?B?REZkV3FFRzQ0d1VwK3dtL2FYV01iNWxpVE5TYmV2eE1FUFRZclllejVadWpM?=
	=?utf-8?B?T082Qmh2WElna0ZJa0lLS1R3Q2Njem04dHRSRXNUd2dBMEQ4bXFBbnY0d2Ex?=
	=?utf-8?B?OHpBYS9YbHdXMGVjUkc3bUdOTzg5K3UxTGRPbmUvREFBTEIyeG4wOUljbVVE?=
	=?utf-8?B?MkVDa1lVdm1aS2VDSnNVQnJkVCsvVUlqOElKd1lqOEpObHlIYXN2Qk8vSENw?=
	=?utf-8?B?YVNKcU55VXI4akppZGduKzlWTzJsU0Y1WTFqNFNaTDZjR0dYR1J3U1o5OENm?=
	=?utf-8?B?b2RubDA1c0RFaXQ0cC9QSEhaU1haMjhpcHB1QzdBN3lPY05YdjlDZ0JwY0JF?=
	=?utf-8?B?KzlGUjAzVDlsR1l6VlppNURDRFdHMGROU3U3ZUZURUkvK3BiN3o3cEVWbnRT?=
	=?utf-8?B?OHJSVUp3SGllZzVSdy9xNjFjNlhZakNEM214WjIwWEZlUlpMa3VIaWEyMHg0?=
	=?utf-8?B?VmJURzBPaUdsS0hNbGdSNUNYTWJBdFRFVk1XblZWSVZoNEY4aVZFSGtwcUJn?=
	=?utf-8?B?dzZ2UkxFb1kvc2JMRlVla29RYnpmY3Q1TWp4TWJIZm1zblI2eE1Ga3dWL2gw?=
	=?utf-8?B?QVVFQ0pPNUF4MHlSTEFmbERDVzI4Z3BLbjhURjl4akFheEVZbjlQL2tUNWov?=
	=?utf-8?B?eHU1YllZZjdqWW5Bcm42aWlFb0tqZlVXTDc5RzRCTU5TazJXNWVTL0dtQXY1?=
	=?utf-8?B?RUF6QUc4R2R0dDNGcDJKNW1FYUpCWHRLamJ0QUZUZklFWjkra0sxV1p0NUo3?=
	=?utf-8?B?TXNmbEZ0N1htZU1tZ1JjcEllTldJanNVblJyM01nL3Jwd0NXUHVCVTlrMVdU?=
	=?utf-8?B?QldyWHQyQWxEWGlHd2JJeFcvQWdFR01uZ2pJb09weEl6bHBYcnQ1TWNCTThN?=
	=?utf-8?B?cngrandlZzJwa0hSWEQxZUx5VFZleWwrN3pwNjcwbXo4eVhUbEFOWXpxV1Rv?=
	=?utf-8?B?UUswZEtJR21iR2k1c0p0NmVFYy9OY0o0bnh5NFlDQlljVFFrTmJ2RnQzM1Z2?=
	=?utf-8?B?YU5QRDAxdlJPMTRRcFN5Q05hTmhhU05yaysxcW9EbURFMzV5SVdxYlVpbGxP?=
	=?utf-8?B?VXRBMUduQk96Z0pnOG1nS0l1UUk1VDJQT3Z4YTYyL21FZm5OS0dnbGxEVVVv?=
	=?utf-8?B?cXRzVGpINkxZQUN3dHdPa2VNWVRsUTkwN3hXVVFOZkhsOUExdWp1d2Q1UUp0?=
	=?utf-8?B?SEJIQzB0UWVlWVZ0S3NzbktPMFBKMndHWHZLdnFIcUFsZktkUnFsWlprNThv?=
	=?utf-8?B?NVNSSHFqRCtUSi9MNi9wc1YrMzlQTEpQanBXSWxCKzRZL1ZzeHN2Z3J2Rncy?=
	=?utf-8?B?eERNNHJKU0JIZmNxOUZtTC9vY1Zrd3phZXpzQlJpYWVKVVZoYUhZVVd6Njln?=
	=?utf-8?B?U2V6Qk5xVDJpaUpBdW12SmpvRlB4UmEwaXhTSjdNNnhOaVZXbkwzRHp2RFJO?=
	=?utf-8?B?MVlaNDhjMjRUNm13M1p3eGlrcWdHZnFFY1E0dzV3Q1B2OHgxL3F3SXJBWXNZ?=
	=?utf-8?B?Q0VaVHI4SGU1MXgvSHppUi9qMUliRE5Idk9jSTRRQ3hXY0JNc3dwY0dVeml6?=
	=?utf-8?Q?ZhzSH/lEUb7C0aoX0E=3D?=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1145;
	6:id/eiKcdBOGB3LaL3JshzKn33cBEUEwotxPWcWtuXVBfR6I0ZIPXidvVbfYCF/hLYiVOyZVBWgCM6r1aTS3CeoStiQFmmV0dp63WQlVU7OrdlK5kJBearb5kYO1HMGyT3jWMRNDxia4znEso2Xn9eR9DHaU4xsUJqYEcDbMjaJXc/vwQuRMqri4WnkO+6kg4m7NI0trTiz/Fxznupw7mBJzFuWmZ0TvxFTv/ixa6bTgvHRx1M1Us8oBff3CmJj+KviB4AFzxeVyvJG68qSbi2vYVcQ7lV7rkdHMRx19dFZCuCESXpxIAjxd2JiBfXBQnNtl0s38CSwJVOk4xFS4Vwh7Q//SLYzfZ4tzwBZmOVdRzpdjoW3M5+uymM6B5le11P+1PtqQCOhy8d+5xfiFq4L4IegOKotO3G20IGGkVB2VdYbWz2abkUp59szFAwIPsZtrwvumXoMqiBa1MgEZWcpPTrXt2T+nhoy3uolevfPh5XmS9xeyCNw4EMSKr/x3FBYzEepxkcy+gIdGeqaWTc1CAqVDmx5Kn6F/C1b7CWF0=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1145;
	5:SWkaRPgCe+UGAP5xwD+WbEHbRDV7R/D9+eS542yWr5EYhOZVHam+sBlk/SNTkoV+YJWl5/uEU28AtiPGdVNepNKpilKxL10n5B23VhymGZX1v8W5fOQ5Yw4BXTNdsCUvxjbqcWrR9bp7m/VipF4Cqz9C+v2XxgXrbEXBRMatNGPpumEldFaxjZtHaLuCnlHJhKPYlyFTCwI2JCCWM3YU6KB2yMH0zBC2UPBGIclwMV3RNibNJSDZVtl4OdTGKasskY2Lll+wZpsTBODwNQKoTdDFVBg113k1ykoXKD/2D4mEhuPGmzPuddSLg8Ps38dWn9arv1cdNdWDxflA/Yceb7J3IWpKlp6Gwlk1DG1sxp6R92kwrMCUo32ZqkTCuBjTDG6UORr3DlU9aEXi97d0QveDH0s3lGmvWqfOp/7OunErAWygquG+8h7As6lU+4ekDuRg3lgroAg/wX4uikuWh0z8wwTkI6svf6rp4H1Yl8Hxss2h+YiNs2ckyJmC2GC8;
	24:F2Youq4WL7PXSeUdvwZk2eNJkkxojLxq0Nbc4Je64FiUe9hTUkONWBdeUSfH1IAfrR9ekhHcubLyPbmD0k7DRkRkJiyD2kpYCtBPdtTKUCY=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1145;
	7:5TUbYDupQyDiPotA/5zr786vGQxCQX/RnofecrYZIorM9M5LZzS0cAcoMo39usFv+IRgHojam9DBi6Jy+6RB1j9fVcvcvKDvveuuk9DFGyRmem6AHfFtz9su89GJmRUMk/FD3WUHb/8G5qjb1yLGsrCTO3k42e0xJIbOdyi7FumHHg+lPoexOE3bxn/sYdj9qDfq1etcXyARrOhfvSM1JQzZsrOmCXCfnhK8sgfDwyrMHg5J/jrJwtkTgRa1w1QF1EaumvPrLr6maqGNpdU72rhHDR/7c4bl3OP1tKaTgSMcXt/ZTkcNXrb8ApEaMDxAd5ZGaZ7MZ5+sqs0QiQ4dKw==;
	20:DBzvSlP0oCW0EIicD8BBh24Sn5RQkEvnDIucBAx3JO1fYu1cb0d27MFkK9pVAIJblKyNZeGKun8ACDEz+rlKeeYLMBuVOpbXMLxlvi2f/KRld5qj9Z00WKe4ozWwz3m2ccqZ3rGdZDUL7Z2T6Kh9yod0vby1RBfga5aqOsn/45GnNeokyKHBaAPhigrwklkN+FvHT7Win4vm4HeksBcDplZOqsoAWqVeljWQrXxjSwkocLHPHElTQ7B+fsZEt1Ol
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 07 Jun 2017 19:19:18.9307
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1145
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 7, 2017, 7:19 p.m.</div>
<pre class="content">
Add support to check if SME has been enabled and if memory encryption
should be activated (checking of command line option based on the
configuration of the default state).  If memory encryption is to be
activated, then the encryption mask is set and the kernel is encrypted
&quot;in place.&quot;
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/kernel/head_64.S |    1 
 arch/x86/mm/mem_encrypt.c |   93 +++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 89 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S</span>
<span class="p_header">index 1fe944b..660bf8e 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/x86/kernel/head_64.S</span>
<span class="p_chunk">@@ -97,6 +97,7 @@</span> <span class="p_context"> startup_64:</span>
 	 * Save the returned mask in %r12 for later use.
 	 */
 	push	%rsi
<span class="p_add">+	movq	%rsi, %rdi</span>
 	call	sme_enable
 	pop	%rsi
 	movq	%rax, %r12
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 6129477..d624058 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/linkage.h&gt;
 #include &lt;linux/init.h&gt;
<span class="p_add">+#include &lt;asm/bootparam.h&gt;</span>
 
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
<span class="p_chunk">@@ -22,10 +23,23 @@</span> <span class="p_context"></span>
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/setup.h&gt;
<span class="p_del">-#include &lt;asm/bootparam.h&gt;</span>
 #include &lt;asm/set_memory.h&gt;
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_add">+#include &lt;asm/mem_encrypt.h&gt;</span>
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/cmdline.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static char sme_cmdline_arg[] __initdata = &quot;mem_encrypt&quot;;</span>
<span class="p_add">+static char sme_cmdline_on[]  __initdata = &quot;on&quot;;</span>
<span class="p_add">+static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Some SME functions run very early causing issues with the stack-protector</span>
<span class="p_add">+ * support. Provide a way to turn off this support on a per-function basis.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define SME_NOSTACKP __attribute__((__optimize__(&quot;no-stack-protector&quot;)))</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -237,6 +251,8 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 
 	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */
 	swiotlb_update_mem_attributes();
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);</span>
 }
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
<span class="p_chunk">@@ -564,8 +580,75 @@</span> <span class="p_context"> void __init sme_encrypt_kernel(void)</span>
 	native_write_cr3(native_read_cr3());
 }
 
<span class="p_del">-unsigned long __init sme_enable(void)</span>
<span class="p_add">+unsigned long __init SME_NOSTACKP sme_enable(struct boot_params *bp)</span>
 {
<span class="p_add">+	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;</span>
<span class="p_add">+	unsigned int eax, ebx, ecx, edx;</span>
<span class="p_add">+	bool active_by_default;</span>
<span class="p_add">+	unsigned long me_mask;</span>
<span class="p_add">+	char buffer[16];</span>
<span class="p_add">+	u64 msr;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for the SME support leaf */</span>
<span class="p_add">+	eax = 0x80000000;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (eax &lt; 0x8000001f)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SME feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_add">+	 *     Secure Memory Encryption support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	eax = 0x8000001f;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	if (!(eax &amp; 1))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	me_mask = 1UL &lt;&lt; (ebx &amp; 0x3f);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if SME is enabled */</span>
<span class="p_add">+	msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_add">+	if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Fixups have not been applied to phys_base yet and we&#39;re running</span>
<span class="p_add">+	 * identity mapped, so we must obtain the address to the SME command</span>
<span class="p_add">+	 * line argument data using rip-relative addressing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_arg(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_arg)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_arg));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_on(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_on)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_on));</span>
<span class="p_add">+	asm (&quot;lea sme_cmdline_off(%%rip), %0&quot;</span>
<span class="p_add">+	     : &quot;=r&quot; (cmdline_off)</span>
<span class="p_add">+	     : &quot;p&quot; (sme_cmdline_off));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT))</span>
<span class="p_add">+		active_by_default = true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		active_by_default = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_ptr = (const char *)((u64)bp-&gt;hdr.cmd_line_ptr |</span>
<span class="p_add">+				     ((u64)bp-&gt;ext_cmd_line_ptr &lt;&lt; 32));</span>
<span class="p_add">+</span>
<span class="p_add">+	cmdline_find_option(cmdline_ptr, cmdline_arg, buffer, sizeof(buffer));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (strncmp(buffer, cmdline_on, sizeof(buffer)) == 0)</span>
<span class="p_add">+		sme_me_mask = me_mask;</span>
<span class="p_add">+	else if (strncmp(buffer, cmdline_off, sizeof(buffer)) == 0)</span>
<span class="p_add">+		sme_me_mask = 0;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		sme_me_mask = active_by_default ? me_mask : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
 	return sme_me_mask;
 }
 
<span class="p_chunk">@@ -576,9 +659,9 @@</span> <span class="p_context"> unsigned long sme_get_me_mask(void)</span>
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_del">-void __init sme_encrypt_kernel(void)	{ }</span>
<span class="p_del">-unsigned long __init sme_enable(void)	{ return 0; }</span>
<span class="p_add">+void __init sme_encrypt_kernel(void)			{ }</span>
<span class="p_add">+unsigned long __init sme_enable(struct boot_params *bp)	{ return 0; }</span>
 
<span class="p_del">-unsigned long sme_get_me_mask(void)	{ return 0; }</span>
<span class="p_add">+unsigned long sme_get_me_mask(void)			{ return 0; }</span>
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



