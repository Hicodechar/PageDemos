
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,3/5] iommu/arm-smmu: Invoke pm_runtime during probe, add/remove device - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,3/5] iommu/arm-smmu: Invoke pm_runtime during probe, add/remove device</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170013">Vivek Gautam</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 14, 2018, 8:14 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180314081434.30875-4-vivek.gautam@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10281593/mbox/"
   >mbox</a>
|
   <a href="/patch/10281593/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10281593/">/patch/10281593/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5F8ED602C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 08:15:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5125828768
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 08:15:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 45AF52876D; Wed, 14 Mar 2018 08:15:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 910EA28768
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 08:15:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753521AbeCNIPQ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Mar 2018 04:15:16 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:32958 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753456AbeCNIPI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Mar 2018 04:15:08 -0400
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
	id C68DE607A2; Wed, 14 Mar 2018 08:15:07 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1521015307;
	bh=9wuLJCzUInOlnh9MsgnsTk0hxwzMMYXYTk0e8yVlEEg=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=kgAl+URLfDzOzSKj5v80Gio97sxUForfmJBEshfTiFchNEzcyLMVNZkwldLvJ3FV1
	+FW/YXeNDyA8M1r84FTrHyvLipGKH93adkoAIHW+OELlLiNxcd77+igF/PZt303abE
	IzcwSFavbI3lFaD0qpn77jVHKiivDTWUF6Tf5prU=
Received: from blr-ubuntu-41.ap.qualcomm.com
	(blr-bdr-fw-01_globalnat_allzones-outside.qualcomm.com
	[103.229.18.19])
	(using TLSv1.1 with cipher ECDHE-RSA-AES128-SHA (128/128 bits))
	(No client certificate requested)
	(Authenticated sender: vivek.gautam@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 9BA62605FB;
	Wed, 14 Mar 2018 08:15:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1521015306;
	bh=9wuLJCzUInOlnh9MsgnsTk0hxwzMMYXYTk0e8yVlEEg=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=JZUMNg2W7kDzZiatGrSupxM+J3+S/9tIKJRRJb2vM+dILld1zCk5cOFxD/+dgOBV7
	pJ4RRp51XNc0GaHsDYslvtlZpVvwkCIq6SjrIaDT00CSd5t0kQHwA6o29JTB/73+Fa
	v4DrYqPYRv3g1u22RMyKPwUlL/5peX+ZSE+GDPio=
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 9BA62605FB
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	dmarc=none (p=none dis=none)
	header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	spf=none smtp.mailfrom=vivek.gautam@codeaurora.org
From: Vivek Gautam &lt;vivek.gautam@codeaurora.org&gt;
To: joro@8bytes.org, robh+dt@kernel.org, rafael.j.wysocki@intel.com,
	robin.murphy@arm.com, iommu@lists.linux-foundation.org,
	devicetree@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: mark.rutland@arm.com, will.deacon@arm.com, robdclark@gmail.com,
	tfiga@chromium.org, sricharan@codeaurora.org,
	m.szyprowski@samsung.com, architt@codeaurora.org,
	linux-arm-kernel@lists.infradead.org,
	linux-arm-msm@vger.kernel.org, vivek.gautam@codeaurora.org
Subject: [PATCH v10 3/5] iommu/arm-smmu: Invoke pm_runtime during probe,
	add/remove device
Date: Wed, 14 Mar 2018 13:44:32 +0530
Message-Id: &lt;20180314081434.30875-4-vivek.gautam@codeaurora.org&gt;
X-Mailer: git-send-email 2.16.1.72.g5be1f00a9a70
In-Reply-To: &lt;20180314081434.30875-1-vivek.gautam@codeaurora.org&gt;
References: &lt;20180314081434.30875-1-vivek.gautam@codeaurora.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170013">Vivek Gautam</a> - March 14, 2018, 8:14 a.m.</div>
<pre class="content">
<span class="from">From: Sricharan R &lt;sricharan@codeaurora.org&gt;</span>

The smmu device probe/remove and add/remove master device callbacks
gets called when the smmu is not linked to its master, that is without
the context of the master device. So calling runtime apis in those places
separately.
<span class="signed-off-by">
Signed-off-by: Sricharan R &lt;sricharan@codeaurora.org&gt;</span>
[vivek: Cleanup pm runtime calls]
<span class="signed-off-by">Signed-off-by: Vivek Gautam &lt;vivek.gautam@codeaurora.org&gt;</span>
<span class="reviewed-by">Reviewed-by: Tomasz Figa &lt;tfiga@chromium.org&gt;</span>
---

 - No change since v9.

 drivers/iommu/arm-smmu.c | 95 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 87 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="p_header">index d5873d545024..56a04ae80bf3 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu.c</span>
<span class="p_chunk">@@ -268,6 +268,20 @@</span> <span class="p_context"> static struct arm_smmu_option_prop arm_smmu_options[] = {</span>
 	{ 0, NULL},
 };
 
<span class="p_add">+static inline int arm_smmu_rpm_get(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (pm_runtime_enabled(smmu-&gt;dev))</span>
<span class="p_add">+		return pm_runtime_get_sync(smmu-&gt;dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void arm_smmu_rpm_put(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (pm_runtime_enabled(smmu-&gt;dev))</span>
<span class="p_add">+		pm_runtime_put(smmu-&gt;dev);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct arm_smmu_domain *to_smmu_domain(struct iommu_domain *dom)
 {
 	return container_of(dom, struct arm_smmu_domain, domain);
<span class="p_chunk">@@ -913,11 +927,15 @@</span> <span class="p_context"> static void arm_smmu_destroy_domain_context(struct iommu_domain *domain)</span>
 	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);
 	struct arm_smmu_device *smmu = smmu_domain-&gt;smmu;
 	struct arm_smmu_cfg *cfg = &amp;smmu_domain-&gt;cfg;
<span class="p_del">-	int irq;</span>
<span class="p_add">+	int ret, irq;</span>
 
 	if (!smmu || domain-&gt;type == IOMMU_DOMAIN_IDENTITY)
 		return;
 
<span class="p_add">+	ret = arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	/*
 	 * Disable the context bank and free the page tables before freeing
 	 * it.
<span class="p_chunk">@@ -932,6 +950,8 @@</span> <span class="p_context"> static void arm_smmu_destroy_domain_context(struct iommu_domain *domain)</span>
 
 	free_io_pgtable_ops(smmu_domain-&gt;pgtbl_ops);
 	__arm_smmu_free_bitmap(smmu-&gt;context_map, cfg-&gt;cbndx);
<span class="p_add">+</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
 }
 
 static struct iommu_domain *arm_smmu_domain_alloc(unsigned type)
<span class="p_chunk">@@ -1213,10 +1233,15 @@</span> <span class="p_context"> static int arm_smmu_attach_dev(struct iommu_domain *domain, struct device *dev)</span>
 		return -ENODEV;
 
 	smmu = fwspec_smmu(fwspec);
<span class="p_add">+</span>
<span class="p_add">+	ret = arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+</span>
 	/* Ensure that the domain is finalised */
 	ret = arm_smmu_init_domain_context(domain, smmu);
 	if (ret &lt; 0)
<span class="p_del">-		return ret;</span>
<span class="p_add">+		goto rpm_put;</span>
 
 	/*
 	 * Sanity check the domain. We don&#39;t support domains across
<span class="p_chunk">@@ -1230,29 +1255,47 @@</span> <span class="p_context"> static int arm_smmu_attach_dev(struct iommu_domain *domain, struct device *dev)</span>
 	}
 
 	/* Looks ok, so add the device to the domain */
<span class="p_del">-	return arm_smmu_domain_add_master(smmu_domain, fwspec);</span>
<span class="p_add">+	ret = arm_smmu_domain_add_master(smmu_domain, fwspec);</span>
<span class="p_add">+</span>
<span class="p_add">+rpm_put:</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+	return ret;</span>
 }
 
 static int arm_smmu_map(struct iommu_domain *domain, unsigned long iova,
 			phys_addr_t paddr, size_t size, int prot)
 {
 	struct io_pgtable_ops *ops = to_smmu_domain(domain)-&gt;pgtbl_ops;
<span class="p_add">+	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);</span>
<span class="p_add">+	struct arm_smmu_device *smmu = smmu_domain-&gt;smmu;</span>
<span class="p_add">+	int ret;</span>
 
 	if (!ops)
 		return -ENODEV;
 
<span class="p_del">-	return ops-&gt;map(ops, iova, paddr, size, prot);</span>
<span class="p_add">+	arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	ret = ops-&gt;map(ops, iova, paddr, size, prot);</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
 }
 
 static size_t arm_smmu_unmap(struct iommu_domain *domain, unsigned long iova,
 			     size_t size)
 {
 	struct io_pgtable_ops *ops = to_smmu_domain(domain)-&gt;pgtbl_ops;
<span class="p_add">+	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);</span>
<span class="p_add">+	struct arm_smmu_device *smmu = smmu_domain-&gt;smmu;</span>
<span class="p_add">+	size_t ret;</span>
 
 	if (!ops)
 		return 0;
 
<span class="p_del">-	return ops-&gt;unmap(ops, iova, size);</span>
<span class="p_add">+	arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	ret = ops-&gt;unmap(ops, iova, size);</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
 }
 
 static void arm_smmu_iotlb_sync(struct iommu_domain *domain)
<span class="p_chunk">@@ -1407,14 +1450,22 @@</span> <span class="p_context"> static int arm_smmu_add_device(struct device *dev)</span>
 	while (i--)
 		cfg-&gt;smendx[i] = INVALID_SMENDX;
 
<span class="p_add">+	ret = arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		goto out_cfg_free;</span>
<span class="p_add">+</span>
 	ret = arm_smmu_master_alloc_smes(dev);
 	if (ret)
<span class="p_del">-		goto out_cfg_free;</span>
<span class="p_add">+		goto out_rpm_put;</span>
 
 	iommu_device_link(&amp;smmu-&gt;iommu, dev);
 
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
 	return 0;
 
<span class="p_add">+out_rpm_put:</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
 out_cfg_free:
 	kfree(cfg);
 out_free:
<span class="p_chunk">@@ -1427,7 +1478,7 @@</span> <span class="p_context"> static void arm_smmu_remove_device(struct device *dev)</span>
 	struct iommu_fwspec *fwspec = dev-&gt;iommu_fwspec;
 	struct arm_smmu_master_cfg *cfg;
 	struct arm_smmu_device *smmu;
<span class="p_del">-</span>
<span class="p_add">+	int ret;</span>
 
 	if (!fwspec || fwspec-&gt;ops != &amp;arm_smmu_ops)
 		return;
<span class="p_chunk">@@ -1435,8 +1486,15 @@</span> <span class="p_context"> static void arm_smmu_remove_device(struct device *dev)</span>
 	cfg  = fwspec-&gt;iommu_priv;
 	smmu = cfg-&gt;smmu;
 
<span class="p_add">+	ret = arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	iommu_device_unlink(&amp;smmu-&gt;iommu, dev);
 	arm_smmu_master_free_smes(fwspec);
<span class="p_add">+</span>
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
 	iommu_group_remove_device(dev);
 	kfree(fwspec-&gt;iommu_priv);
 	iommu_fwspec_free(dev);
<span class="p_chunk">@@ -2124,6 +2182,8 @@</span> <span class="p_context"> static int arm_smmu_device_probe(struct platform_device *pdev)</span>
 		smmu-&gt;irqs[i] = irq;
 	}
 
<span class="p_add">+	platform_set_drvdata(pdev, smmu);</span>
<span class="p_add">+</span>
 	err = devm_clk_bulk_get(smmu-&gt;dev, smmu-&gt;num_clks, smmu-&gt;clks);
 	if (err)
 		return err;
<span class="p_chunk">@@ -2132,6 +2192,19 @@</span> <span class="p_context"> static int arm_smmu_device_probe(struct platform_device *pdev)</span>
 	if (err)
 		return err;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We want to avoid touching dev-&gt;power.lock in fastpaths unless</span>
<span class="p_add">+	 * it&#39;s really going to do something useful - pm_runtime_enabled()</span>
<span class="p_add">+	 * can serve as an ideal proxy for that decision. So, conditionally</span>
<span class="p_add">+	 * enable pm_runtime.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (dev-&gt;pm_domain)</span>
<span class="p_add">+		pm_runtime_enable(dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	err = arm_smmu_rpm_get(smmu);</span>
<span class="p_add">+	if (err &lt; 0)</span>
<span class="p_add">+		return err;</span>
<span class="p_add">+</span>
 	err = arm_smmu_device_cfg_probe(smmu);
 	if (err)
 		return err;
<span class="p_chunk">@@ -2173,10 +2246,11 @@</span> <span class="p_context"> static int arm_smmu_device_probe(struct platform_device *pdev)</span>
 		return err;
 	}
 
<span class="p_del">-	platform_set_drvdata(pdev, smmu);</span>
 	arm_smmu_device_reset(smmu);
 	arm_smmu_test_smr_masks(smmu);
 
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
 	/*
 	 * For ACPI and generic DT bindings, an SMMU will be probed before
 	 * any device which might need it, so we want the bus ops in place
<span class="p_chunk">@@ -2212,8 +2286,13 @@</span> <span class="p_context"> static int arm_smmu_device_remove(struct platform_device *pdev)</span>
 	if (!bitmap_empty(smmu-&gt;context_map, ARM_SMMU_MAX_CBS))
 		dev_err(&amp;pdev-&gt;dev, &quot;removing device with active domains!\n&quot;);
 
<span class="p_add">+	arm_smmu_rpm_get(smmu);</span>
 	/* Turn the thing off */
 	writel(sCR0_CLIENTPD, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
<span class="p_add">+	arm_smmu_rpm_put(smmu);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pm_runtime_enabled(smmu-&gt;dev))</span>
<span class="p_add">+		pm_runtime_disable(smmu-&gt;dev);</span>
 
 	clk_bulk_unprepare(smmu-&gt;num_clks, smmu-&gt;clks);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



