
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,5/6] x86/platform/uv/BAU: Add wait_completion to bau_operations - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,5/6] x86/platform/uv/BAU: Add wait_completion to bau_operations</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 17, 2017, 10:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1487369197-79054-6-git-send-email-abanman@hpe.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9580827/mbox/"
   >mbox</a>
|
   <a href="/patch/9580827/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9580827/">/patch/9580827/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CBA156043A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Feb 2017 22:07:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B497B24B44
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Feb 2017 22:07:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A90F827FA8; Fri, 17 Feb 2017 22:07:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0C86A24B44
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Feb 2017 22:07:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S935196AbdBQWHP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 17 Feb 2017 17:07:15 -0500
Received: from relay2.sgi.com ([192.48.180.65]:60314 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S935083AbdBQWHN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 17 Feb 2017 17:07:13 -0500
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay2.corp.sgi.com (Postfix) with ESMTP id 00EFC304051;
	Fri, 17 Feb 2017 14:07:08 -0800 (PST)
Received: by stormcage.americas.sgi.com (Postfix, from userid 200151)
	id D037A20162367; Fri, 17 Feb 2017 16:07:07 -0600 (CST)
From: Andrew Banman &lt;abanman@hpe.com&gt;
To: tglx@linutronix.de
Cc: mingo@redhat.com, akpm@linux-foundation.org, hpa@zytor.com,
	mike.travis@hpe.com, rja@hpe.com, sivanich@hpe.com, x86@kernel.org,
	linux-kernel@vger.kernel.org, abanman@hpe.com
Subject: [PATCH v2 5/6] x86/platform/uv/BAU: Add wait_completion to
	bau_operations
Date: Fri, 17 Feb 2017 16:06:36 -0600
Message-Id: &lt;1487369197-79054-6-git-send-email-abanman@hpe.com&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1487369197-79054-1-git-send-email-abanman@hpe.com&gt;
References: &lt;1487369197-79054-1-git-send-email-abanman@hpe.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 17, 2017, 10:06 p.m.</div>
<pre class="content">
Remove the present wait_completion routine and add a function pointer by
the same name to the bau_operations struct. Rather than switching on the
UV hub version during message processing, set the architecture-specific
uv*_wait_completion during initialization.

The uv123_bau_ops struct must be split into uv1 and uv2_3 versions to
accomodate the corresponding wait_completion routines.
<span class="signed-off-by">
Signed-off-by: Andrew Banman &lt;abanman@hpe.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;mike.travis@hpe.com&gt;</span>
---
 arch/x86/include/asm/uv/uv_bau.h |  2 ++
 arch/x86/platform/uv/tlb_uv.c    | 31 ++++++++++++++++++-------------
 2 files changed, 20 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 27, 2017, 7:26 p.m.</div>
<pre class="content">
The above patch has a conflict in wait_completion with the enumerated UV_BAU
symbol because I let an old version of the patch creep into the set. Following
is the correct version.

Sorry about that!

Andrew
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/uv/uv_bau.h b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">index a02019a..b52b356 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/uv/uv_bau.h</span>
<span class="p_chunk">@@ -671,6 +671,8 @@</span> <span class="p_context"> struct bau_operations {</span>
 	void		(*write_g_sw_ack)(int pnode, unsigned long mmr);
 	void		(*write_payload_first)(int pnode, unsigned long mmr);
 	void		(*write_payload_last)(int pnode, unsigned long mmr);
<span class="p_add">+	int		(*wait_completion)(struct bau_desc*,</span>
<span class="p_add">+				struct bau_control*, long try);</span>
 };
 
 static inline void write_mmr_data_broadcast(int pnode, unsigned long mmr_image)
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index b8d3830..2a826dd 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -686,14 +686,6 @@</span> <span class="p_context"> static int uv2_3_wait_completion(struct bau_desc *bau_desc,</span>
 	return FLUSH_COMPLETE;
 }
 
<span class="p_del">-static int wait_completion(struct bau_desc *bau_desc, struct bau_control *bcp, long try)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (bcp-&gt;uvhub_version == 1)</span>
<span class="p_del">-		return uv1_wait_completion(bau_desc, bcp, try);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		return uv2_3_wait_completion(bau_desc, bcp, try);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /*
  * Our retries are blocked by all destination sw ack resources being
  * in use, and a timeout is pending. In that case hardware immediately
<span class="p_chunk">@@ -922,7 +914,7 @@</span> <span class="p_context"> int uv_flush_send_and_wait(struct cpumask *flush_mask, struct bau_control *bcp,</span>
 		write_mmr_activation(index);
 
 		try++;
<span class="p_del">-		completion_stat = wait_completion(bau_desc, bcp, try);</span>
<span class="p_add">+		completion_stat = ops.wait_completion(bau_desc, bcp, try);</span>
 
 		handle_cmplt(completion_stat, bau_desc, bcp, hmaster, stat);
 
<span class="p_chunk">@@ -2135,7 +2127,18 @@</span> <span class="p_context"> static int __init init_per_cpu(int nuvhubs, int base_part_pnode)</span>
 	return 1;
 }
 
<span class="p_del">-static const struct bau_operations uv123_bau_ops __initconst = {</span>
<span class="p_add">+static const struct bau_operations uv1_bau_ops __initconst = {</span>
<span class="p_add">+	.bau_gpa_to_offset       = uv_gpa_to_offset,</span>
<span class="p_add">+	.read_l_sw_ack           = read_mmr_sw_ack,</span>
<span class="p_add">+	.read_g_sw_ack           = read_gmmr_sw_ack,</span>
<span class="p_add">+	.write_l_sw_ack          = write_mmr_sw_ack,</span>
<span class="p_add">+	.write_g_sw_ack          = write_gmmr_sw_ack,</span>
<span class="p_add">+	.write_payload_first     = write_mmr_payload_first,</span>
<span class="p_add">+	.write_payload_last      = write_mmr_payload_last,</span>
<span class="p_add">+	.wait_completion	 = uv1_wait_completion,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct bau_operations uv2_3_bau_ops __initconst = {</span>
 	.bau_gpa_to_offset       = uv_gpa_to_offset,
 	.read_l_sw_ack           = read_mmr_sw_ack,
 	.read_g_sw_ack           = read_gmmr_sw_ack,
<span class="p_chunk">@@ -2143,6 +2146,7 @@</span> <span class="p_context"> static int __init init_per_cpu(int nuvhubs, int base_part_pnode)</span>
 	.write_g_sw_ack          = write_gmmr_sw_ack,
 	.write_payload_first     = write_mmr_payload_first,
 	.write_payload_last      = write_mmr_payload_last,
<span class="p_add">+	.wait_completion	 = uv2_3_wait_completion,</span>
 };
 
 static const struct bau_operations uv4_bau_ops __initconst = {
<span class="p_chunk">@@ -2153,6 +2157,7 @@</span> <span class="p_context"> static int __init init_per_cpu(int nuvhubs, int base_part_pnode)</span>
 	.write_g_sw_ack          = write_gmmr_proc_sw_ack,
 	.write_payload_first     = write_mmr_proc_payload_first,
 	.write_payload_last      = write_mmr_proc_payload_last,
<span class="p_add">+	.wait_completion	 = uv2_3_wait_completion,</span>
 };
 
 /*
<span class="p_chunk">@@ -2174,11 +2179,11 @@</span> <span class="p_context"> static int __init uv_bau_init(void)</span>
 	if (is_uv4_hub())
 		ops = uv4_bau_ops;
 	else if (is_uv3_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv2_3_bau_ops;</span>
 	else if (is_uv2_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv2_3_bau_ops;</span>
 	else if (is_uv1_hub())
<span class="p_del">-		ops = uv123_bau_ops;</span>
<span class="p_add">+		ops = uv1_bau_ops;</span>
 
 	for_each_possible_cpu(cur_cpu) {
 		mask = &amp;per_cpu(uv_flush_tlb_mask, cur_cpu);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



