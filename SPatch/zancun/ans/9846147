
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,24/38] x86, swiotlb: Add memory encryption support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,24/38] x86, swiotlb: Add memory encryption support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 17, 2017, 9:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;aa2d29b78ae7d508db8881e46a3215231b9327a7.1500319216.git.thomas.lendacky@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9846147/mbox/"
   >mbox</a>
|
   <a href="/patch/9846147/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9846147/">/patch/9846147/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9264B60386 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:12:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CB682274D0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:12:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BFACD27F92; Mon, 17 Jul 2017 21:12:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DE014274D0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Jul 2017 21:12:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752148AbdGQVMn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 17 Jul 2017 17:12:43 -0400
Received: from mail-bn3nam01on0054.outbound.protection.outlook.com
	([104.47.33.54]:47168
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752013AbdGQVM3 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 17 Jul 2017 17:12:29 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=b+yNg43OAft2Yr6wkxk12Uyn6Gq6iY2ZPCzlU7AR4sw=;
	b=bPDP7i66eoDkRQahq45mUEGLnLV34ES8S7fFT3rmwp2WHdG+YSzyyic62fRPXertUsmHmbKLLhIJf7fRoI5Ljtu2KTaMAsOaeCdHOqQhNpTfDx1Wz3wqJ/KWUw5mxG18HkZGem1IO4h5uKq3wZEqbNc/ajmqZZXBmTRjGbEllns=
Authentication-Results: kernel.org; dkim=none (message not signed)
	header.d=none; kernel.org; dmarc=none action=none header.from=amd.com;
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1261.13; Mon, 17 Jul 2017 21:12:22 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org,
	linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	linux-doc@vger.kernel.org, linux-mm@kvack.org, kvm@vger.kernel.org,
	kasan-dev@googlegroups.com
Cc: =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [PATCH v10 24/38] x86, swiotlb: Add memory encryption support
Date: Mon, 17 Jul 2017 16:10:21 -0500
Message-Id: &lt;aa2d29b78ae7d508db8881e46a3215231b9327a7.1500319216.git.thomas.lendacky@amd.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
References: &lt;cover.1500319216.git.thomas.lendacky@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR03CA0008.namprd03.prod.outlook.com (10.168.230.146)
	To MWHPR12MB1151.namprd12.prod.outlook.com (10.169.204.15)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 6d067b19-14eb-41a7-1d52-08d4cd58865f
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	3:Lk7Ev29Xw5U0/DLdUZZAVIBzyzlRkk4Amw9lHz/SgNscDecTgcv48NQ4djW+w9C96UgRRa8dlaW3tonv0lSr7xv4BT0KWa/8iP+iUhDKPunoMEEJog78R/ZzkIR0dC5PQxazzDAxjBEGYef5xn1WrFT1Vy1qpnDN9Q5/MHKeZLon0aXQs+h5tLhlW5RnCIDN54tM2K2XaeWB7chVsCYTw9x7JXcsibb2DJxZH0+7kC+V0NEB0yPot0ranWF4n3rsgwnu4w8Hl7tdF9W7sl7MSmZpNOMTyPUrdEEKj4G1ZRg9Xheltk/7IUCS5CvVjEo47JoI9kLxc5etDu4RZ+nkfYrJT1iulSRKa2FXQNkpufNxC6aiVFXP6/dMerQ7Vac3a9UOIhlglXMwW96YlPksAPySkxcmOL1sw0C2JmxIswRfN6ZwkV1dhEML+c9sYT3fJJ0Q7iGDJgOZgtz8k4RfV1mFCLdX6x4XO2WEgFRSZM2F/o5Cl4UH9TvRbw9aE6zSY0PiK7yHhzxA7QdqqFSu/keFxJEsXHK5hgSxfsl3fQWgjjoUMUVu69GdT1kDWbUobwXULYMOuyTUPk1qNjbCtjz0hWCVeRPQModzWqvxTFqw+7z1PhTwYIxi1tiNFQ3/0FNgJZoKLq6RRENz+OnF2kuwXPljHbYs0utgpCsVRrmyN7iBriyUyCNfq1s0S4Y/HdlIYh8pm8gSZNdP9yA3pgjSsT+TMoI1kwYd8Vk/oqS6WIvRzlTcGEPIOxmsQWWITwsgOjsvp1AbozgVmrr6iw==
X-MS-TrafficTypeDiagnostic: MWHPR12MB1151:
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	25:D3lumQ74Eylsxfz81cGgWxDqh/D6vz0c7NNGZDG6NCu9OHqO9AGs4aClwBeyC8jw8B04O+bpmjhCqLXDJVW9G8/1IOabHzhgbZzfz8OZhl4vTEY4ZPQG7DC1xZWWu2MoQtvxQITE7a0bu/EFcPH5evFR9DlGMlV1crTFC/AFW/XDaZGnH9ZZzsmqijvmPEs5Wgb1cM+GGk0GxvTVDd80F+BhCqxn9GvjMsCh744gmj5SWCRBG/lfFOnoMVTQKFuUYgSW+xyZQZCOvuP1DMqZoiNDjkMHeMOn12BTHrD3TwbTtPUrj9fpolJjChXC/RqDrmDT22/aKgMhHZF1S8ts19Fy5dSHedh1Huwvg4oynzx3DOTrqJ4W9sU0ROErl/cqreH8ryuIkVhRpf36kh2XQXjVDScmFSe+caKCBByIyCHdZq0utVBivI1bfw/BPJNGvlhs0oT2U7eAuNpbj/xnJtIPE6RjGsAeiDn7PxjjjINliHYpWW3iGMc2gDQwLBv5RsFPLswiG4KT9lixDhsz9OTtjlyaEIRwVZItpWdja1DIWYz4a9eJ2s+JGlkYQ++/fUh5V2zs5V+Y69/AJPNDLp8Uh8y4WJxSZLCbSWqODLuN3AP3UYAKickqaQij9BdjG+lnaAXYKY2JpNHpV3mq+Gq8tI61A2v/A7xyCmyzpqToS9wVpNAkgGUF0TmFHGvd+5e1dMbX0fdbXvSLD01bgRbeSxseFw+4ICoRaIBdAavCPGx9340cPtLh3UZBppcLnxX/Hd5AfCdGPOnt9h8kgnqejKvnJ0FgVeSqewkjywHdul5R7kKVPpWk9hvo9I6danBhJh2D2w4yRyyl0c2Jxd795TG+dSToO7ZmBNdgza76bOzsE18E1htFjWDFkaQZHoPDODzQa2mEhOnukBxt7a5YD/xi7Q/5ri0ZR1tFU
	3Q=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	31:qx0AwuDouM4CxsbQW1B7ciGR1ZfhSyabEgqXnmWKBlZHOZr5bClpZ+aDcHblnBFqXSSEFP3u1GN4S5qIS8Ftj4eJbQelggkGdDu0f1HWKqWTIFD4g4U5IqDY2AL6YxORtNbzaWBWswRQd2jI5DWReor2gnZvnM8xbY/mzegmZxgfpdCpPb180bKro4U7ia4gT5UqCRsgpByrgp0wL8T1FR/hCqJq5TkwY+Z3iGtdI+wm9s3Pe8cj2qK/Czf7iqFbE0cQFP+uDsrX4VHKq1vqz8fokLWf5/3oGeYEYyVq/tcmCjSGMo7AQhPvZfUB7ucYqam1FmnkofsHsua6qgE5eHtyR5u+8R909ArFNzMw5U9Xyf+uikYFUz0EtsjM+SvRkiEBVRQkLI9Pv7Kp6QGONFgv3ORYH1DU/2VKGcDfte99eGnu9ThDiXSH/wfmQAF4o07BlrsRrwjF60/wFDZjNs5XknPPVHY9IdtNg47fzfX3YIL6h+BDAPhPg3l1likJ4r0aAyOeQ2aa1N1zy946L+TSF+2Whhw++dOBCrzsrkDoNI2kqk/etOFfCYZvscdJS6e07sd2wOoCg18XIv+G8L5+ZA/K/3J1HQkuJ6Msmt4kt0yqsv1ME0NEMv/ER99qdkjk2TiB0Lmu7hF4Zh79vMO+33iEIp0HssiEInrVpTa4qjih5jDdEggZoYupznuRJpRcZs6s+ZmzUA0TNBZbig==
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:59F6C2yc1zdNElXn6rWJ2DtK9QJFHfGyOqL4KQ2EdRcWlUgNkMUvITPlR3+9N/l4u0Y3SCWgtUelXxWw7gKm7nN69sIqwwShA3bgpBsnpKyg8AF/aRwTrD3QbyJHnDeHjGpPcGD8hAKqBKM6Abr+VSIUDSEI0996vIMRC38jeW7SKuW4ELbYZa8SeJ9x7eo/rh7DZTvmeqP8gVn61clYyVxHe/QQh4bRX6rdptpvNjYBmyXNX02RikeW5naGjIQDCM50mS4E3nK9R1WERI9jACL2VC1VRQWBQltoC5KRYLYKBaWwywZACsKA7jQFLplh1HYxqA6QmHXABJSAuI8S5tU+Qnz/U8h5m5qxHnqRyuGZJxOPmWA7vkj+ZpcjOmScNHNJXjNiu7nD8KQwzeMjHSblxq7LbR85MNwjSbwN1rEdHvBSQNJtVl+TjQ+rP84x9x9atGVSO1IkfCwYsbsjkEr2Nsk41bIF5kri62N4pPwBwWd4w0yUXLlMJOpvcxOQ
X-Exchange-Antispam-Report-Test: UriScan:(133145235818549)(236129657087228)(767451399110)(167848164394848);
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB1151FBA73DDA2BD038FC0D65ECA00@MWHPR12MB1151.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(2017060910075)(5005006)(8121501046)(100000703101)(100105400095)(3002001)(10201501046)(93006095)(93001095)(6055026)(6041248)(20161123558100)(20161123555025)(20161123562025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123564025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:MWHPR12MB1151; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:MWHPR12MB1151; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	4:Ax9OW2gPuojbdfvGY4HCqNJT7NkR2CDy+F7Tl6mufW?=
	=?us-ascii?Q?9dJfGS0gN5TOru8Zg6cEBrHitWqRhdxQOYZFfsfCNRQCrAKnvkwr1dbTeITW?=
	=?us-ascii?Q?qbtSvVXaWngy7LNP8XbGDE4W2LwiYBv4ba9peRkBJiDi+Yv3XDyTG6ypg4a5?=
	=?us-ascii?Q?l32X/uWjoQzY32rCGJJ/Hv6RA8YRhHvhjsKpKRuycJahigPpxLyyMf8ze2fy?=
	=?us-ascii?Q?NgmY5UbFgiuetfmxPm3AHKcdhvJZHXW5nnj3pw/W7KBZCIkxSwBgZDiTZrdX?=
	=?us-ascii?Q?sOaadoJuvcLqiHdbILujSFyGWFErpU202GqMWZ64oWWl7rLhhBTtdhRf0jWz?=
	=?us-ascii?Q?mH+WaMLFLe/LeV7Zs53rZmNp36KuAdPC7itpjj7u3DYpFuSfzMF2zKozfasV?=
	=?us-ascii?Q?fvmVl8Gpwe/BhMnCad7+rXlKd5iDalc3ZhmWMVUHM0vxYexqYHlYT7PB42+/?=
	=?us-ascii?Q?8TmvtAeQiWcpRa0ayyQK66h9QWw0fj1xaZ/An3NfXLPukByxc1fSjiraRFkI?=
	=?us-ascii?Q?vLiYNdbnS0LJ8+9LbIDkwkDB0VHNTrCF++O6+sjkanLsIjT+r8zi15Lu2zm0?=
	=?us-ascii?Q?sN56h2HRr+8lV6cBkFtvUC5x3IKnVZ1ch6IINRVa2N0IIy2A5M/CjIiGD1Zz?=
	=?us-ascii?Q?FEtnTlUO6QEDl2JPAFhJDghGWn7bAgWy6apoCYYH4pOwVwZhKRldxJqsrFZs?=
	=?us-ascii?Q?cVy9goZDqBmR7516J/s9ZDRUyVwkLRKHRGLAfUx+ThvPUHOKZYkwlhfghOES?=
	=?us-ascii?Q?oEcF9oA9Vl8jXH9i1bMAe7DA32Y7bLvR5ZjxB/KRMxhN5iuH3GGI/Jg7Z0KC?=
	=?us-ascii?Q?xrupzMBYqOa58bo3ejHyD6Re11zwoLprD0NoKygc0QLnazsRAJHt35lSxlLL?=
	=?us-ascii?Q?GlEsBfytIgA4OQIhRviyQMm86W+fSap3UMApr2G3XLItDH+kWcXZ0iAIxvPJ?=
	=?us-ascii?Q?YR0i0ppQqZpuIhB6XEZc/1x3tjlll2OqwzovrsqTAx7ikQi+TtZhuflEwHNl?=
	=?us-ascii?Q?lsRkdXLkqx3nV8+TCIT51WaEF4hYPkip7PL14KfH0MmE/BnJ7ImwjhcGjKIQ?=
	=?us-ascii?Q?J8qfxsTMz5zikmwNZWY3YxeBG1fcS17mfgdLCEXrBqSbl7xGRzq78W5EihVh?=
	=?us-ascii?Q?zUXaNc4vYWROaWgYI2AtrL2KAbg1vE2OHRDboWLwZ6T6VYr2ESlfFl0sq+w5?=
	=?us-ascii?Q?zAON/BrcqKm58Q+UZuXKKT1+wRdJDkTprHHfas7M38ChXYvR7d0pxRyabhQI?=
	=?us-ascii?Q?nctgRhpL4Xy9ZL+bai3mWlX+S1vVCKW1xmwokOLRxkGUsfuPdRqcZbTJcDcX?=
	=?us-ascii?Q?Xda/jnyIqZOd9F0vj15+mVx0X5F8EGv2hCZq9JkZzU?=
X-Forefront-PRVS: 0371762FE7
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(7370300001)(6009001)(39410400002)(39850400002)(39840400002)(39860400002)(39400400002)(39450400003)(25786009)(6506006)(33646002)(54906002)(7416002)(76176999)(478600001)(8676002)(50986999)(6486002)(47776003)(5660300001)(189998001)(42186005)(38730400002)(305945005)(72206003)(53416004)(66066001)(50466002)(48376002)(110136004)(118296001)(2950100002)(81166006)(5003940100001)(3846002)(36756003)(53936002)(7350300001)(6512007)(2906002)(7736002)(6116002)(86362001)(4326008)(50226002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1151;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	23:mfdrxs/K4iLxa7h4XHBk3G09qY+/eQ7PEOTuE2DQ8?=
	=?us-ascii?Q?Jij9pyfbLwgGaAtePWeuh5eCxjGS9O+t131hG5XXloBABFzNRnsKbMDlJefK?=
	=?us-ascii?Q?IR1sf30dkvk5+R6q1/5PhSEodtUJ7+wZX7LSJLaavj479iTQlZ6g0caCumNu?=
	=?us-ascii?Q?XdNUzqxtL1mrxUVW/PwQTHEss2Az168EIimsIlr2fOpZBIMgnpm8vRqFo0Hx?=
	=?us-ascii?Q?Z/RVJKkBDhlnWiDPkERRHzBfNCPD18Bf0EkWyfpP3QwcEIi8YRAImUeGwcZJ?=
	=?us-ascii?Q?NPZBJpPxzCAM7ffofrf+3nbjvJpNvoJZPtEoA5w13nqXI7glupaIrxh/Bqx0?=
	=?us-ascii?Q?AQkEfQ7eSzCvC4Ig8soPgnF6hwwu97e9bsDmdJfsncYHQ0ksN3A5wlxkiYSo?=
	=?us-ascii?Q?guirAISYzVc5P+s2QwZshQIAuTzd01ZoneCS/1twrNGpmYenhKlh8dDcJyXO?=
	=?us-ascii?Q?h+xFNXYcc89Cl9kMbmJZdABEX/Dx0KC+MlshiTawTBC41Y3BOWYc/LEUbC3A?=
	=?us-ascii?Q?w1hUALb4MA0pj0Ltp3xxEuR0onkj5sq39Qr8LKeXKRdLw7PLlTpIIe97A++8?=
	=?us-ascii?Q?yzoZxm8RpcM+Q8ixry72vyJq7hA4EzkoH1R3e195L762KKtCazXs1RB0F5H6?=
	=?us-ascii?Q?1xyISXcwO21SqaP7a3E4xmU17HEP7iZ2sX7yTkR/8p4+v7GDbzjGfF5xRtla?=
	=?us-ascii?Q?yreNlvLq2p8flypDxqjO5NjVbP6WMkrI6yGuO4f5B2s6v7YFlON06KLmo4Yn?=
	=?us-ascii?Q?C7odbaKHjhZS1w5W+YcbUFfKmMHKAuJf+8d3p7Lu9hP/mDFNAOGbJIjR9Ac5?=
	=?us-ascii?Q?hPfYBClXeMYXqr3H7eFsaA0Uk6BTBenKzdAue+uozKMof1zkmOkrXhat+wri?=
	=?us-ascii?Q?nUb65Fcuvk8ocDYRX/TVRxcZsCO38fKp9pynhA0eo/TjyqvtSlZiNVC2vDku?=
	=?us-ascii?Q?895VmEyspFjmjF9Xx6jcHxpgiKi3x4yNT+C9yqHptNeapcxkxMJ+klLR/m/S?=
	=?us-ascii?Q?MaZvWtYvx8QFB4r/Ycwv4PKvT091Uo+pgPMvfOm7TGS4/8BwNseWVjHkB+XZ?=
	=?us-ascii?Q?91IUtFNNzwgx3aIFlebKEsR85Tl3vwkmlIwqCx6S+oIRToSYqRoarSc0qHwT?=
	=?us-ascii?Q?55GQKVGdvUetH5xWdOuVPDi3fNSNUuzVXe5q8JAQk9pNu+nFbxcA/BMU37w3?=
	=?us-ascii?Q?L7hrJcZoHhy5yw=3D?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1151;
	6:1ZdYeaoh7QX1frcRMiI7lgnFYV7dcEwFR1wLWFr8Dx?=
	=?us-ascii?Q?/2ivGhNsLh1Tt0SdTSBVaQtNzENRUMBJACqWSEOtzJu9i4y+nBqxShuPOj4N?=
	=?us-ascii?Q?6KdAUUHtDzsO8iNi6SL4KHzysgVxvAVcFLfq1xAf2256OkxtxMB/JQk6bSy2?=
	=?us-ascii?Q?IJeYcxch01KJACbBp8k6mShJDkvtgJaehTTWBheZuHVqGo4ZYC+fyLTvLDcq?=
	=?us-ascii?Q?+59+H0qFuzO2vUPdXHLWGblkY6aED3v7t31Sq8/94O9QMIxsnl7yfchjTpg6?=
	=?us-ascii?Q?kyu0vjzpkIy1ItHh+peSjxn+Vlz7yiqJHb8wuOSZdoN6SS84QTUaDwoMTfcl?=
	=?us-ascii?Q?Ae1I5K5SOkxOuspbjQ/T+qef+DgShhdMB5WszXhZoP15W58OxsXWQyLW2Y3I?=
	=?us-ascii?Q?dOdlPkHiR7H+WId/MtVUH7gu5saNtXLRIEi/Sz2DRnYwpIBoUzGVskVM1VEX?=
	=?us-ascii?Q?jMPk0OPwHs+CQdLQvZ4mGpn/etla8cWNj3jVmaqOUsV4WjzJ0iSMKRKSe7h8?=
	=?us-ascii?Q?ofMvLqKa4V4Dernw0ZTodM8ne7BZFqDzRhaFkCroQRaAu1xYp4IoL9QTk2qJ?=
	=?us-ascii?Q?Q/8QSKh+BPXIws1Fs2pn7PuzYLOIZlRON9HoDudHf7NfkcFPIzV0TrPv4TSb?=
	=?us-ascii?Q?ZRzcrFpAbraJq19Dby3b1cErGw9m1B6/3QY9n220MxfE8mdOcUGTvWamLJA4?=
	=?us-ascii?Q?s7dzpnTou1HwgMwVkriqS+vxJX8SYX/IDQt4odVPJTfa5MAefjOsZcIpzWju?=
	=?us-ascii?Q?5a42/zrHDDkl/nzxLvzw4BIjxjz9To1llIdhMG41UjOumN2fpWRJJz4tWKRo?=
	=?us-ascii?Q?MKaWnI/upZdXJMXZs/ThobKFZVKU5RnLL257HydYszvMvGKoJByCEYuN3406?=
	=?us-ascii?Q?ZgKPT8ADf6jJxMJ8FzagNZ2j72b8KrhCLUpU7SNrLPvDOUIwbxp9WiM8VGiR?=
	=?us-ascii?Q?dTXrUJ2f1RJYaT7LQmUA8HHIVGmCNhfPOd5fWj3zqlS0+/92f4KDdwFDtuKH?=
	=?us-ascii?Q?of/WawzMR6Sg9bf3B8sO7/?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	5:EMaOlNBcnCNSfcI09Z/bbGcVIA6ypbjmSnaqIy2+czTe+iOOrXMtCmQ5yHyHEV0g3HihlwqAJOfo1khQtf4yQGSKkuahR0+1NdCez53Q0OnGjHGVKKnUGw44C3ZH1ccxDpD/JCK6xc+h2s7YBFzU6NtsHlebUs8siBY4PU3lQpaZtGa51fhHk+kHZDXIKCKyAbos1gQrUdiclsIH3/rsIMX6N8GT/E+p7lRCSuoj/ztIcIBW6t7xRoo8R/IyKgRnwrYbJmxKiHAXFoeu0feYvH23YGsAsBp7r3fvbeoxE/7qmv+296GOyvhRnUYzkrL7S9fVmhnN+C+ROuT+es+r8XVEvtWWgu7lb6MuOv/IrEbEC5QCiV7fsAXBrA8bwc28MoB8fXDuExksxI9VseE/FOaOwgBDcMpEs2diDMH9IYglF/cnZ5yGqpAQFMhVIOJTNHXyOekmAYpNgzhbjh1DZPh9UlyJlncSA4Jk02VCaggEj/AEdbZMIDi+09qt0Vbk;
	24:N0cjFKhwFKTjpZewG5nCcX+JEOuwFXA0b+yzpSPIBQ7wQVFa7VQJyjUsFszkZm3s1T6KJp4V8Uc/wALX3+/kHf3pkx8fyjwFixXqGxRWZLk=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	7:rDA73yHRjVlV9j7hEBat4cYVkeqdBRWKcAw95aQwZ8QSBsfZtvJ3N8WSFyWH/+T7pnzCXWrqpCr8KJfnHVBnxJr+rNo0UdpQyYFy7kxxJVx52GNHrN5TNJ5QrfsK8S8JQF473Dw8GtDsu3CWiNPXXcbYLCDOEZNHZ6/LY1twD61xNGs+93Y/J6P96/5lmxKCn60DDvCjWfQtee418EGumxhWAFpi6FEn+R6RniwTCKuAXwRkpgzfLd/nw7U9pdFzg4C5ZGuZCmjmYYV6P3bKZrAdVAuAAmVQEI5GuY9+MQv2UpJzkgQpatfSY/bEo90Wo0L+VH4q1a02YI+tqinRngmqec1LlUPQK8hW4u057QlhQ7kCGwwMwhWCx8o/cPhtWA5yZiuC9diPBKWtC8h+apxdpcK+Epj8fowW1lC0QWSdCpAjGcUlUrFVAAohmcHY9DeqUn6+WPPy5XCcxEpJZi47wPX7fD3QjKdYWfdo/p17F53CvxwRx7pc90EmLzHmkUNG5UPOC0YS5XS4R/ePkzyAHI+Cy1FhsXZnmLSCcbu0cxoX2aE3lx6JV1arPEhTRKEwJ2eGAca49DQIsGnYYx/TI47GgBYCdLZdm60CfGIFRgvl+9nMfzLxVJo74c5heRN5qU0iHNAIQQ6GaTmM/1J9wmjywtnT9WUo8mEilCXwssBjYS3ECnMLMtzHiCGdklMJbjqkehXcn44vUMwXD+9zk0Avmd+gUf9hqmneT0HPGaCjDIAh4rZ1SYS98WzG+OvEcmAFl3gRtbiVOVt34LMPcYb1MJAFzmXIOxqGIHI=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1151;
	20:eyyU65d3ZpR1U8aGyMkepyOMulhl+es/iWNtSUSc8m2kggOgQKE++8byMBOzTjpjkIV/ai2AM2RVPrV2NJU3/BdVWaXgB9X2PYh6K8uXilO+mLfj+ofz+P/OQ+mnyVwgMTncrLiKVvhZORe+TnFQ2zflEO/B2RoWYaLtUROLQJD+tuucq0Qf6ICx068CA96uZv3BWfT9yC8UXDH06xDOJwj/EBfsEXPbmGYmDoC4Am02KQ5AGVxjrt8hg8gWVuZH
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 17 Jul 2017 21:12:22.5639
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1151
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - July 17, 2017, 9:10 p.m.</div>
<pre class="content">
Since DMA addresses will effectively look like 48-bit addresses when the
memory encryption mask is set, SWIOTLB is needed if the DMA mask of the
device performing the DMA does not support 48-bits. SWIOTLB will be
initialized to create decrypted bounce buffers for use by these devices.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/dma-mapping.h |  5 ++--
 arch/x86/include/asm/mem_encrypt.h |  5 ++++
 arch/x86/kernel/pci-dma.c          | 11 +++++---
 arch/x86/kernel/pci-nommu.c        |  2 +-
 arch/x86/kernel/pci-swiotlb.c      | 15 +++++++++--
 arch/x86/mm/mem_encrypt.c          | 22 ++++++++++++++++
 include/linux/swiotlb.h            |  1 +
 init/main.c                        | 10 +++++++
 lib/swiotlb.c                      | 54 ++++++++++++++++++++++++++++++++------
 9 files changed, 108 insertions(+), 17 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">index 398c798..1387daf 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/io.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #ifdef CONFIG_ISA
 # define ISA_DMA_BIT_MASK DMA_BIT_MASK(24)
<span class="p_chunk">@@ -57,12 +58,12 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 
 static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
 {
<span class="p_del">-	return paddr;</span>
<span class="p_add">+	return __sme_set(paddr);</span>
 }
 
 static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
 {
<span class="p_del">-	return daddr;</span>
<span class="p_add">+	return __sme_clr(daddr);</span>
 }
 #endif /* CONFIG_X86_DMA_REMAP */
 
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index ab1fe77..70e55f6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -34,6 +34,11 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 void __init sme_encrypt_kernel(void);
 void __init sme_enable(void);
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0UL
<span class="p_header">diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">index 5e16d3f..0accc24 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-dma.c</span>
<span class="p_chunk">@@ -93,9 +93,12 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (gfpflags_allow_blocking(flag)) {
 		page = dma_alloc_from_contiguous(dev, count, get_order(size),
 						 flag);
<span class="p_del">-		if (page &amp;&amp; page_to_phys(page) + size &gt; dma_mask) {</span>
<span class="p_del">-			dma_release_from_contiguous(dev, page, count);</span>
<span class="p_del">-			page = NULL;</span>
<span class="p_add">+		if (page) {</span>
<span class="p_add">+			addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+			if (addr + size &gt; dma_mask) {</span>
<span class="p_add">+				dma_release_from_contiguous(dev, page, count);</span>
<span class="p_add">+				page = NULL;</span>
<span class="p_add">+			}</span>
 		}
 	}
 	/* fallback */
<span class="p_chunk">@@ -104,7 +107,7 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (!page)
 		return NULL;
 
<span class="p_del">-	addr = page_to_phys(page);</span>
<span class="p_add">+	addr = phys_to_dma(dev, page_to_phys(page));</span>
 	if (addr + size &gt; dma_mask) {
 		__free_pages(page, get_order(size));
 
<span class="p_header">diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">index a6d4040..4fc3cb6 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_chunk">@@ -32,7 +32,7 @@</span> <span class="p_context"> static dma_addr_t nommu_map_page(struct device *dev, struct page *page,</span>
 				 enum dma_data_direction dir,
 				 unsigned long attrs)
 {
<span class="p_del">-	dma_addr_t bus = page_to_phys(page) + offset;</span>
<span class="p_add">+	dma_addr_t bus = phys_to_dma(dev, page_to_phys(page)) + offset;</span>
 	WARN_ON(size == 0);
 	if (!check_addr(&quot;map_single&quot;, dev, bus, size))
 		return NOMMU_MAPPING_ERROR;
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index 1e23577..6770775 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -6,12 +6,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/swiotlb.h&gt;
 #include &lt;linux/bootmem.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/iommu.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;asm/dma.h&gt;
 #include &lt;asm/xen/swiotlb-xen.h&gt;
 #include &lt;asm/iommu_table.h&gt;
<span class="p_add">+</span>
 int swiotlb __read_mostly;
 
 void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
<span class="p_chunk">@@ -79,8 +81,8 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_override(void)</span>
 		  pci_swiotlb_late_init);
 
 /*
<span class="p_del">- * if 4GB or more detected (and iommu=off not set) return 1</span>
<span class="p_del">- * and set swiotlb to 1.</span>
<span class="p_add">+ * If 4GB or more detected (and iommu=off not set) or if SME is active</span>
<span class="p_add">+ * then set swiotlb to 1 and return 1.</span>
  */
 int __init pci_swiotlb_detect_4gb(void)
 {
<span class="p_chunk">@@ -89,6 +91,15 @@</span> <span class="p_context"> int __init pci_swiotlb_detect_4gb(void)</span>
 	if (!no_iommu &amp;&amp; max_possible_pfn &gt; MAX_DMA32_PFN)
 		swiotlb = 1;
 #endif
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If SME is active then swiotlb will be set to 1 so that bounce</span>
<span class="p_add">+	 * buffers are allocated and used for devices that do not support</span>
<span class="p_add">+	 * the addressing range required for the encryption mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sme_active())</span>
<span class="p_add">+		swiotlb = 1;</span>
<span class="p_add">+</span>
 	return swiotlb;
 }
 IOMMU_INIT(pci_swiotlb_detect_4gb,
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 0843d02..a7400ec 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -13,11 +13,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/linkage.h&gt;
 #include &lt;linux/init.h&gt;
 #include &lt;linux/mm.h&gt;
<span class="p_add">+#include &lt;linux/dma-mapping.h&gt;</span>
<span class="p_add">+#include &lt;linux/swiotlb.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/bootparam.h&gt;
<span class="p_add">+#include &lt;asm/set_memory.h&gt;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -177,6 +180,25 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */</span>
<span class="p_add">+	swiotlb_update_mem_attributes();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	WARN(PAGE_ALIGN(size) != size,</span>
<span class="p_add">+	     &quot;size is not page-aligned (%#lx)\n&quot;, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make the SWIOTLB buffer area decrypted */</span>
<span class="p_add">+	set_memory_decrypted((unsigned long)vaddr, size &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void)
 {
 }
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 4ee479f..15e7160 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -35,6 +35,7 @@</span> <span class="p_context"> enum swiotlb_force {</span>
 extern unsigned long swiotlb_nr_tbl(void);
 unsigned long swiotlb_size_or_default(void);
 extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);
<span class="p_add">+extern void __init swiotlb_update_mem_attributes(void);</span>
 
 /*
  * Enumeration for sync targets
<span class="p_header">diff --git a/init/main.c b/init/main.c</span>
<span class="p_header">index 052481f..9789ab7 100644</span>
<span class="p_header">--- a/init/main.c</span>
<span class="p_header">+++ b/init/main.c</span>
<span class="p_chunk">@@ -488,6 +488,8 @@</span> <span class="p_context"> void __init __weak thread_stack_cache_init(void)</span>
 }
 #endif
 
<span class="p_add">+void __init __weak mem_encrypt_init(void) { }</span>
<span class="p_add">+</span>
 /*
  * Set up kernel memory allocators
  */
<span class="p_chunk">@@ -641,6 +643,14 @@</span> <span class="p_context"> asmlinkage __visible void __init start_kernel(void)</span>
 	 */
 	locking_selftest();
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This needs to be called before any devices perform DMA</span>
<span class="p_add">+	 * operations that might use the SWIOTLB bounce buffers. It will</span>
<span class="p_add">+	 * mark the bounce buffers as decrypted so that their usage will</span>
<span class="p_add">+	 * not cause &quot;plain-text&quot; data to be decrypted when accessed.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mem_encrypt_init();</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;
 	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index a8d74a7..04ac91a 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/gfp.h&gt;
 #include &lt;linux/scatterlist.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/io.h&gt;
 #include &lt;asm/dma.h&gt;
<span class="p_chunk">@@ -155,6 +156,15 @@</span> <span class="p_context"> unsigned long swiotlb_size_or_default(void)</span>
 	return size ? size : (IO_TLB_DEFAULT_SIZE);
 }
 
<span class="p_add">+void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size) { }</span>
<span class="p_add">+</span>
<span class="p_add">+/* For swiotlb, clear memory encryption mask from dma addresses */</span>
<span class="p_add">+static dma_addr_t swiotlb_phys_to_dma(struct device *hwdev,</span>
<span class="p_add">+				      phys_addr_t address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_clr(phys_to_dma(hwdev, address));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Note that this doesn&#39;t work with highmem page */
 static dma_addr_t swiotlb_virt_to_bus(struct device *hwdev,
 				      volatile void *address)
<span class="p_chunk">@@ -183,6 +193,31 @@</span> <span class="p_context"> void swiotlb_print_info(void)</span>
 	       bytes &gt;&gt; 20, vstart, vend - 1);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Early SWIOTLB allocation may be too early to allow an architecture to</span>
<span class="p_add">+ * perform the desired operations.  This function allows the architecture to</span>
<span class="p_add">+ * call SWIOTLB when the operations are possible.  It needs to be called</span>
<span class="p_add">+ * before the SWIOTLB memory is used.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void __init swiotlb_update_mem_attributes(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *vaddr;</span>
<span class="p_add">+	unsigned long bytes;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (no_iotlb_memory || late_alloc)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_start);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_overflow_buffer);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_overflow);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)
 {
 	void *v_overflow_buffer;
<span class="p_chunk">@@ -320,6 +355,7 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	io_tlb_start = virt_to_phys(tlb);
 	io_tlb_end = io_tlb_start + bytes;
 
<span class="p_add">+	swiotlb_set_mem_attributes(tlb, bytes);</span>
 	memset(tlb, 0, bytes);
 
 	/*
<span class="p_chunk">@@ -330,6 +366,8 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	if (!v_overflow_buffer)
 		goto cleanup2;
 
<span class="p_add">+	swiotlb_set_mem_attributes(v_overflow_buffer, io_tlb_overflow);</span>
<span class="p_add">+	memset(v_overflow_buffer, 0, io_tlb_overflow);</span>
 	io_tlb_overflow_buffer = virt_to_phys(v_overflow_buffer);
 
 	/*
<span class="p_chunk">@@ -581,7 +619,7 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 		return SWIOTLB_MAP_ERROR;
 	}
 
<span class="p_del">-	start_dma_addr = phys_to_dma(hwdev, io_tlb_start);</span>
<span class="p_add">+	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);</span>
 	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,
 				      dir, attrs);
 }
<span class="p_chunk">@@ -702,7 +740,7 @@</span> <span class="p_context"> void swiotlb_tbl_sync_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 			goto err_warn;
 
 		ret = phys_to_virt(paddr);
<span class="p_del">-		dev_addr = phys_to_dma(hwdev, paddr);</span>
<span class="p_add">+		dev_addr = swiotlb_phys_to_dma(hwdev, paddr);</span>
 
 		/* Confirm address can be DMA&#39;d by device */
 		if (dev_addr + size - 1 &gt; dma_mask) {
<span class="p_chunk">@@ -812,10 +850,10 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	map = map_single(dev, phys, size, dir, attrs);
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
<span class="p_del">-		return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 	}
 
<span class="p_del">-	dev_addr = phys_to_dma(dev, map);</span>
<span class="p_add">+	dev_addr = swiotlb_phys_to_dma(dev, map);</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (dma_capable(dev, dev_addr, size))
<span class="p_chunk">@@ -824,7 +862,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);
 
<span class="p_del">-	return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+	return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_map_page);
 
<span class="p_chunk">@@ -958,7 +996,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 				sg_dma_len(sgl) = 0;
 				return 0;
 			}
<span class="p_del">-			sg-&gt;dma_address = phys_to_dma(hwdev, map);</span>
<span class="p_add">+			sg-&gt;dma_address = swiotlb_phys_to_dma(hwdev, map);</span>
 		} else
 			sg-&gt;dma_address = dev_addr;
 		sg_dma_len(sg) = sg-&gt;length;
<span class="p_chunk">@@ -1026,7 +1064,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
 {
<span class="p_del">-	return (dma_addr == phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
<span class="p_add">+	return (dma_addr == swiotlb_phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_mapping_error);
 
<span class="p_chunk">@@ -1039,6 +1077,6 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_del">-	return phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="p_add">+	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_supported);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



