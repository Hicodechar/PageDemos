
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,Part1,v3,15/17] x86: Add support for changing memory encryption attribute in early boot - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,Part1,v3,15/17] x86: Add support for changing memory encryption attribute in early boot</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 24, 2017, 7:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170724190757.11278-16-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9860163/mbox/"
   >mbox</a>
|
   <a href="/patch/9860163/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9860163/">/patch/9860163/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AF20760385 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:15:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A26F027E71
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:15:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9654728558; Mon, 24 Jul 2017 19:15:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DB26927E71
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:15:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756723AbdGXTPS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 24 Jul 2017 15:15:18 -0400
Received: from mail-sn1nam01on0083.outbound.protection.outlook.com
	([104.47.32.83]:8000
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1756589AbdGXTLx (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 24 Jul 2017 15:11:53 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=iSb+uOaCdM8L1tuWBDgcbmBFGBFyP5E7kJzZbEZXGac=;
	b=RynOIGONBi4jIrLdiUwMRX+VRNkHzj8w1GmR4L5z6ft4caiW+2woVsc2/p2Y2YGuC+BwaZdACwg3MrRj0Q49dIGcCsvbc/pkGDzn0tSXtNFpXV0dmzb6iNYaSqcNOnUAkio5pH1jM/iG4Ks2/HHvlbL57Wio0zEZh5IcA/wD8VY=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	CY1PR12MB0150.namprd12.prod.outlook.com (10.161.173.20) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1282.10; Mon, 24 Jul 2017 19:08:40 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: linux-kernel@vger.kernel.org, x86@kernel.org,
	linux-efi@vger.kernel.org, linuxppc-dev@lists.ozlabs.org,
	kvm@vger.kernel.org
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Tony Luck &lt;tony.luck@intel.com&gt;,
	Piotr Luc &lt;piotr.luc@intel.com&gt;, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Fenghua Yu &lt;fenghua.yu@intel.com&gt;, Lu Baolu &lt;baolu.lu@linux.intel.com&gt;,
	Reza Arbab &lt;arbab@linux.vnet.ibm.com&gt;,
	David Howells &lt;dhowells@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Laura Abbott &lt;labbott@redhat.com&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Eric Biederman &lt;ebiederm@xmission.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;, Dave Airlie &lt;airlied@redhat.com&gt;,
	Kees Cook &lt;keescook@chromium.org&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Tejun Heo &lt;tj@kernel.org&gt;,
	Christoph Lameter &lt;cl@linux.com&gt;, Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [RFC Part1 PATCH v3 15/17] x86: Add support for changing memory
	encryption attribute in early boot
Date: Mon, 24 Jul 2017 14:07:55 -0500
Message-Id: &lt;20170724190757.11278-16-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;20170724190757.11278-1-brijesh.singh@amd.com&gt;
References: &lt;20170724190757.11278-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: CY4PR04CA0049.namprd04.prod.outlook.com (10.171.243.142)
	To CY1PR12MB0150.namprd12.prod.outlook.com (10.161.173.20)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ca27d2fb-ff55-48f7-6e9c-08d4d2c7664b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:CY1PR12MB0150; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	3:mH1+iWLhOzDBaEmjvZLi804OpxnWM1O2cRCzYP61cuiSgACxLmw79ay0OIePCz4qAK+KyhAUbe7LBP8qRVDpJF8IHQaN/28Py5+WTWaEeLLJ/bxEWwz61rUtdNr+zDI6ueQS0+7d2RlaNcyvDrc71Vfi7Fbnr/aQBPJ0jVCtBuDIXFwmpOwXdBDu10aPhTFq3cOkDG8SeOdT6KOP/VJ/SyFojXlugn4vdaLg1Eq3VC9LjGC4QUn4oxquFVL12CjyhEMkT1pV67AVo3YpPgb5eV4Tg+j0Ch2okCmlf2lbrKKibg1Wk+M9mUNXJnoP7G9dpSl15HXr5I4xLjE8VOlKGAxuxzs+HyGYCer9Yi8agizatSapCy3/wTywkTaf1mJ6qax3+/SAwNbD2DmBY7TYkIkivGSXgg018TfzqHwYvhFLgu1z6xe03JkpzV1qaw1RpAdB9bvWnwwFYxQgqo/33D3Rcvj1BGhPQaZrMMfaLCQhFTpGB2HGKmXxU1c3/dLKjgBgpR/8ebVvmxlWbb3lur0jV5TQdTHg71YIvTozZlsfJwUonV8OxdbEa9mdfgUXMCjP73pZqI7i5uvYvWyRR8GS6eZHCZol2Epp1cdWCnHKssNZT08NLkMqBkNjR+qtxncSCLXc0JgB0hkCd0N++l7UZt20JGk0cFZiAye/XfpQfXATI6xPDTUAe7mDgnZJ91KrpwouRbGQ+31LnqOwmQ/ByU4RhRt3kPzbC5mW6h2gNdpym2bHMvt0rxtFWaoM9sGje5Jzamebj47keQjNBg==
X-MS-TrafficTypeDiagnostic: CY1PR12MB0150:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	25:kIYZzoeRBOnmgq3vlwIkO2O8fCr/Eyjw9XJom1FR8KDvQQdQ8ormD5lqQISnka5G3GmSxK3/YRXzKSR+uABH6w7vYN3tONIvYWU55Tfi38Dvu1mNhkIJUU9aCz4rJriBal7Ikr4/EFo1Eq0u1VeWiXGNsOe5+5xILmK0p7vQQC4nOA9Ai5vrqulib0brEsUUX9+XHcjBFcORKL5hRlUDW7PgwNveW2SKM8FBOOJL7bhhXx3FRV9hBhtWZFCFXvz5OILiL7P9YBVkCYrJKUVrLqcKe8H7JwYUYw4twvl++fUT7vpR0CdouFu4X2Szs5DzXuvgremNMPT7q4BS9hNKySM1lRlUhgrw8RJ+V5rly3NICK/giO1Mdb+vsOaHchgDRmxj2OhEqXPQz+tfunFOhBluHZ8jrXaukHYIr9xwXk+/0OwQiDiL89cBOsnCEw6BC9mMAJxbpoj54X9sogqDIxuwpzPYXnhibz0+8Qolwo9baoM3GKeNgRxc+15BQkkEJf2Ne0+BEC5zGsCJX59bG+l13ntVI0xhkF3JOFTaSKhHxqtYCzGaGAeu2fLpHVeLl9/JX5akNCEF+23oxErY3OgA3k4AdQmz/81/Se83EUfjKW0Wz9UuwIZNdKr+3NcYNsOLK5WDuzSr/nr5hKjbOQ+W9pwFdWRxOLfL92eCg1TXS/B75su8/gfyvDx21L0iX1Iajh8Kst3n5wrX0eQjeMxnHilzp2KLcqG3PWB3Zjk34D4UoGsqWAbXV6me0VHlOWYmuuCENZvkFNuKUu42Pxp33kBH9heV/WDil64mGSz/xYQ0uhTueBQmuNTE4enZVeJuFZ7JxJLvlP4aReDCCSyYCnC7oPhTgMiartBgyJg+Tgmq9XGtdRZFay9AaGDbATbVvt0PIrlMtHR6DacuwS1LF3+/HlQuRSRkDwZoj
	uE=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	31:nco4w9TsTClMeiTRXfK3P8M8Krc5x1VK+VTRKBAmGStn8fnoGOUfoYLDt6/IWACq8NPTnouoOav7ciHRSyoMFoUIbVepM3NjmlAHv4IHy4R5gv9Tdtl8jgDfMk7NK6jnA+8nhf8RTKk/3odYaSrzaM2uE6Bt72Md0UNqJhdkuQ101KjsndG5S/QT8tztDDBGG13XE5HMfXDkTD1MVk3VFrTWycArsbJqOvGS03O7DnR1Ab2lWUApbjCGb1rzRRz/7hIBhMxD7+yVVQolt3Hc6fAlOW2oQLOnxb61X9wpC5ME6VMoPPavI9s0Ej5A2gNaCO/MeJOl4MwuToa/hqDRFqW1Ak/M05LBeZnsuZvT6bSZYKKW1flmQ7+443Jwv/NxkGATo8gKQTy3CkO8QHCwHqMg8aEwf7hSLycn3AdCknrE2yAzPSvCrfQqg5gthj2q2DyMcUEekw1LS+bLl211xkKb1q57J8EJErtObWcI3DZqeaP402jt3mZk/VoUjqc+jxF1zD3GdIWANMXZGHKK+rfQT5YNxgDWKEXrTeorhVS/SFKDRPfbGGFjJ7w9OBGm53uFPUm3UnxdOR5QXVCxAAyazks4u1xyV/JjYnXdCkviQh0ae/niSpwBGlXjcpi3LDLw6Rd0vUXywNmz5tZu1XerguAd5PZLNLZyK/NJc/Q=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	20:waWL4e+QtenB8lfeY57BrZa9t1TLc6BynFNSNKM/JehiLJOMS8GDUgvtcWzMme806DOKPPKcIbVAPLSmPvYybq47LIrhToR4UvxHvkgQKM3cb/3sISSTCPkEo+cjmyjLlNBcjloQ2dkzNXTEMJeh5vISpWQKkqYKtRUYBBaT3tQdq4PAhvnlm2BjU5xMaIh1yylQ4DytHVjQZ7il1LWBS3guRZzd5pUeCDYMFDY0MkA7bXUzMZIkEFdUotXyMCGauzkFujWsz0gFfoFnCH9zFsuXFbOPT4W1Q9ymNavXAFvxzUfJWsuRE34/xDcBSOam5zPPI0uo8iG88AXAstPIh8AGlls4xGwIWAUNOFOWGrUz5apNx9CFvJCudIeldE85dFwbIBA8ZBy/wJ5nxwwvm7mnOUTDTIm5o6JBiWFXu7QqeyThct1SZ1+J8E3wM6JOdCDYdQlAudQg7NHv3VQd2OTb4RTPl8CNaVsF4gAZ8fQTKFkM86nufko/b56CJKig
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB0150DB88B4B3362BE044068CE5BB0@CY1PR12MB0150.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(93006095)(93001095)(10201501046)(100000703101)(100105400095)(3002001)(6055026)(6041248)(20161123564025)(20161123555025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123558100)(20161123562025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY1PR12MB0150; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY1PR12MB0150; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	4:Xnow6KlBxCtHULItg2Dzig+MGL/ammv489Qbg140k5?=
	=?us-ascii?Q?pTVQ3H6wvQKeD/hQ7NxEyNNy280AHlUWOe7+wQGLDgyH0DIZnjncqpWBY7db?=
	=?us-ascii?Q?Aq57bHaPhGCzu38EU8mk4uyFjgLML8utfna0duT5lZwPO8C9vkYn2TTiLQIC?=
	=?us-ascii?Q?Rd0rHGZ72rsgouYnmyhLL1m3Zgd0QYjaNdzJlAnJitASPQoYkmkPfuCj/0s/?=
	=?us-ascii?Q?+ULUngLx+yg7lQVnvl+uMSc7r7TCEstrBJfbM3OKwLf2zJ5QzvMQpBPqUUZZ?=
	=?us-ascii?Q?nJ176ySaoVWpp6NaTal07X7vztVmqYVMlQImoEtyiNHBcY4k58bycM6UCpKk?=
	=?us-ascii?Q?1HakAEmbkY3CvqNDEEP4CD1ZNWd11QPu+i9Cp0IBWG7FLt9ZetXbdHA6zhAU?=
	=?us-ascii?Q?ce9oaBLcHJ3dT/wbUR/thlOvBtZ1N3eNGRsruF05Nu5I3moUANFkX4a0ekZU?=
	=?us-ascii?Q?Y2VJ4qY8LXHvXvaLfedZWtvezkZ5W7aIs40jie3QMCeiJa8O/oRt6pTgcGMR?=
	=?us-ascii?Q?cegS+1vaubF97F5J8v1TGH0VO5WdTscEfLqGXiKN1ohJOEbx1eI25CpFHO6d?=
	=?us-ascii?Q?Th0xjsBRBLUP7SFVIRDqqQo2LrU6Xs+1uUT/yDKVigxXDvIQ17iplyXAyTKk?=
	=?us-ascii?Q?CFvKE44Taz/f8xmoAnH0r+TWiHFYWTGrS7cneMB58n7dKKwOi0xFFUspXG1o?=
	=?us-ascii?Q?rfqDTcvFn3SoLu3OzJfGTmPYzWCLeKpEGQmRf7aHbuP9WC4u4E1ROUQbWDOT?=
	=?us-ascii?Q?0u9FMougzVH68Wz8ntSaqtuxq88Hcn3eNw5emAXlwpfUDrQ5+kO282cooJQI?=
	=?us-ascii?Q?G0O+ojU2NTPlFu11j1IeYULOD+pY/UQbQtji9sBuIIGoq0WE2aMh97ufRtEg?=
	=?us-ascii?Q?as/Ct7MZpYz4rRS6MEftULIGn/uvy3K6omtOl3M3JR2AKX/cSlPQQF+zrNG5?=
	=?us-ascii?Q?v5dpENpSwuNYnQ8J+JEqcS4Th4NDTzlreq6pTLeDrWTQNxJ0zOGznYoqC/MJ?=
	=?us-ascii?Q?HHeZLnmd3RH0eXOzbcBlO6tkCq40O5v7qzZcSfhx7qUyTIVtJePvVTKAEf9H?=
	=?us-ascii?Q?eCHApwAMcRdcaD6PZ9xhXKPvCDxknwZiFdXPk+L9UGZ+30bw4MF2Goybcb8T?=
	=?us-ascii?Q?W884kBdFMU+E7vJeef1VCk1SsTATmmT/lo8c52nwc0YBKXFz24Cxa2hmTlYY?=
	=?us-ascii?Q?QsvQzC2nAGR+dJp2yUWAGvXAbTmQ2f2rjf?=
X-Forefront-PRVS: 0378F1E47A
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(7370300001)(6009001)(39840400002)(39850400002)(39450400003)(39400400002)(39410400002)(39860400002)(199003)(189002)(4326008)(81156014)(7350300001)(81166006)(50226002)(50466002)(68736007)(36756003)(38730400002)(1076002)(110136004)(53936002)(6116002)(25786009)(48376002)(8676002)(86362001)(305945005)(54906002)(7736002)(2950100002)(6666003)(50986999)(101416001)(47776003)(105586002)(5660300001)(5003940100001)(7416002)(33646002)(106356001)(66066001)(6486002)(7406005)(97736004)(189998001)(3846002)(76176999)(2906002)(53416004)(42186005)(478600001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0150;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	23:BHplzpCg5SrcvyQUYPksZ8NEyfEZf+8Flif52zMES?=
	=?us-ascii?Q?92t716grO7owT6Ro9/fjBCqo6zyvGvCNHead3N7SXxYh2aHM7FFiwnwLrcLq?=
	=?us-ascii?Q?t0EEM0Hnxyq9ViBrItkrH9P4PiI4yCFl7UjXgZ4+3D85Ro1W/cVjXv+Zad3R?=
	=?us-ascii?Q?rW9dLh31as8oBYat75lTm/h/Ca7GX9EeikiNH04gsqUhDqvVvdcv3KTUCO7h?=
	=?us-ascii?Q?xg5/Rt4Hk5HXedQsTEzlWEivw4F9myr25vkR/rGoXaVAedcxe0WxkfVVHibd?=
	=?us-ascii?Q?SXjZUxJwYaDG53Md5bobXdhK5tpBbZqZbD7BMYfA0FWz8ij10o2Cs4BkoqIq?=
	=?us-ascii?Q?iYORzSDREmAxIqhlRPgGnFJXB1eBZYA+4ky5Sb2rRt+DB12cHmqp79rUKIz3?=
	=?us-ascii?Q?KwW7aOSV33kAHf0x9z4tDvoDB14pKMY4eiEjTQd68NgCkM/dLI5PrnijAGCs?=
	=?us-ascii?Q?8jWXEivwSS2dIxKPFR6buMC0HOxytHLQ9ow6wGo6gjry/ZC0HjZ2Qh1mH5Yu?=
	=?us-ascii?Q?g64QHevLMw20tahKvzHX+CWEV62j5sXum9Srr1nRrDm4KMGVvIhh7DwyDI0s?=
	=?us-ascii?Q?cvxQ7elv092TWlGIhh+UddijFG/nvGIL5Ue1Q0IgzDSmrUOyE0rDj92TPUk0?=
	=?us-ascii?Q?ZWUgHb/f/SZrD4gPnGbuMBjnlnwlP8lpgiTCWCLcQ5+w/NqGq/H/UZ6e+s3z?=
	=?us-ascii?Q?fapH7QD1zS2lOKujL6r+n78uc9t32TF2gce3DlUaK2fhn0905Cq1E9LlZOOD?=
	=?us-ascii?Q?z1EBpEKMuyeakoVvJ2dqWpXSrLmDsTE0OnRaWS7xnR+TECgkW2aZN+aFYzLt?=
	=?us-ascii?Q?hF9z5PUhTCbcuIdAcw1DAeLWxS3HfliQxArAPBxdWvjp28j5gBomkThDvbQX?=
	=?us-ascii?Q?LDJLrrfieFy78W7TEDNy4+5TbNRpfNPDb3IlG97ppHOFwywJor30X62Nt0Mb?=
	=?us-ascii?Q?+m8ciPav0E7wMDjD0ffuKrn3lLB/G2Tkipha/64vJOxr+U15rusB9D9/3eIb?=
	=?us-ascii?Q?5P4DtEPoLLvLqT8wpmOeNs3N2ztoE2ml9fgZsxlM2WvyjkFhbgKz+4NtAAzM?=
	=?us-ascii?Q?3Z0+h5HS+HRoPkbTd2UmJ6r1z/7OYgS8Q2tQxLUN8rjaulAggaGyEQMbPJvl?=
	=?us-ascii?Q?CrzbP1SeytGq+bFCNOO7L66/dXbg1mIW922I3VdXhytAwPNkw2p3p8pS+yVI?=
	=?us-ascii?Q?F8qO9CyzUmZoMd3PmPtYFIt3GGWXfzBl+aPe4IbjF7l2n6r2PHW7qjE4Vq73?=
	=?us-ascii?Q?3wRi8MH/SYdzldXiCP78WvSCsnSWDEHqpGOV5cktRT9wysC8rumu1TzYvLhD?=
	=?us-ascii?Q?OoQRnx9sToW/h7wXOZsdF0=3D?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	6:3tFTzcZR9TsSYwiIunXthGSTVQhMmgFLICIAfjnfwE?=
	=?us-ascii?Q?fvMNvLHKz3Cp4Nb3CuNPpBvlA7gXfCbjqsC4FihWZ3tjiqnrITPwTrQWsBWJ?=
	=?us-ascii?Q?+ETf2sTodHtWsd9sQzUlL7YZC35VFGxsRnbWLe0zAmGdrp4dv9lnHxUzeSVU?=
	=?us-ascii?Q?5Z+arxeadWHDXk2Q0T4503OTgT574i9quAU3LdmUTQo8eN/RCKVxlCKODsp5?=
	=?us-ascii?Q?vY3XLUWGjjHDfmLaRlzpMEbwmfkasNEKv4lCYYn72xiOU/iRQLJ/fYMKiOan?=
	=?us-ascii?Q?M6syz3EFKExyj1RTwxauo8OcgnphZjg6YQLxapozwl8EjJ2D/P5fWvZQsb3w?=
	=?us-ascii?Q?Q050bwZd1pPdduv9zHUO1+lfbV/cUBezOzEjnke77vgP1TzXWalNQLRu24gc?=
	=?us-ascii?Q?GxeLRtoxNr24uZ77rhlbi/F1zQJrD3RkdKSLP8WJKUE6LjT6U/K1nVhTKj4T?=
	=?us-ascii?Q?GYSjOgu3B3E9QTNXZkykh30G0xmOFU1jZKs8sd6/VL6j06H7ZuJgmItx7ySR?=
	=?us-ascii?Q?NU9xXjFiRhWYbRYqWniVROT+FhHQPb5uzlER2HBCm1S2D+BNB6DWQJ9VAJ1x?=
	=?us-ascii?Q?N9avvIY6sst9twbJnppHZcXy2wECfhXxzvZYrtaJ5nqxvZf6++XOf2qEip2y?=
	=?us-ascii?Q?L5r3Su52YYuGHO5thgccW4CM2kYPVSbDhyvHj/p43ihIJyWzAutCS+Ifnhg/?=
	=?us-ascii?Q?7H6f3A5M4NmfQLyvyN3L9bC0X87J47tnMCBYw0zeTdgtCWQkQ9uB8r27fxsM?=
	=?us-ascii?Q?dfMPIU/LC2/92pmzZyekkEnOEfEiBxyFM5E3K9r3QFOjrU6b6KhXUO3m8Ka2?=
	=?us-ascii?Q?VQaBq/jU2CKGmJNUbFCjRusofwbW51ZgUjXRo4s9HdW1KdCsKWOd5DWejkjH?=
	=?us-ascii?Q?3uAtY4OADOA7Y9gXB7StXrPZeKAfWyqpXni3l4eqircgKvyjVuHxL+AZ1xMb?=
	=?us-ascii?Q?jqyav73444LkFPaUIyPPm7C2Eu7av8lFHtqtMcOgu8BuYDiHcpkNMiqUc4uE?=
	=?us-ascii?Q?jmoGXJ3fuQHQo+OFeGKJlK?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	5:oRI5xG80Paa0UEBcc8QM6dKRebA8i/7W1S7414CSp2InUAoO8A6pGMUfBNaZzjz2CczusrrXoD7k0PKNgoqeE67ZYJpzVCpRDQQy6Mee6SFbokwHMYbdd+06Inqrvpvge0qTeZhvDYFy2tNLQMhbR/woiR93Uvar+xqaNH2RDf7wEuusJmS1u8bEyinhO5IxNCG+rqtfR4W7IanpdiUyqrcZUcMAxH+kNybAFT1uyJ/Y4u61PavOYBQ4/ytDfBUFD9kimifcHjt9ZrykdHlnUY09T/RyoSSfEb8iSKO3BQtfMvE4U2g1CoEBGl7G47xwqaYXHo/U4g3E3lFtJjTxjzksfOs8MfWHlN+m8JlP3d7r50FQokJ2DqoJPqTrdj/GnwwLsegiPEj/pDfC2RVTeOq0HTai9hCaoWn+6Zpab2IXvZAV6M1zatM7nI3OXkhHI7bbRjv9AtAlMKt4OTH6apgkqZPxNT+XIddljs6FUSa27KDi6HrDDxtf6hCz3OEm;
	24:46m6YrL5TN4IJe4Bvq0deBhloFgy2xRNi+rm7p8w3BtejqFcfPFVWh4tXcsFi11IeEyaXeCMrWOUdb7PRoRqDFzHqx0lVRKvby/7Bbh6kgQ=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	7:Vruqpmot58VQY2oITtEkPVBzgUKsGenNfWLETMrI3K8j5qiKpGul5IotrLonaGHpR2uyJjlet+N93G2gKvMjGFf9uMNCnKdWkXbR/w+45+uSD+F349lx+f6CoKGkMBDaKm34Hbyz7XvwRGPHg1z1/8QQMD/jjhj5ATuLL9lDsDa2EvYHNQ1BXggPpuxIdBjhnvhlyAyVGuf9Zx26iqoNTw4nMd13rIzx6bQJCPTY0zcp4pDuPskN2LJW+NMB7G7gfreSzultEolOffjRSPsQlxHkb3MHlO/6FBEJITkaz/F24FQuABKqnjjlO5dGpb0ld6TdxzSQRVmnUlf5iGwSEmjRyWc8QWWR55doCg1tiCP05MwJgj2p7VMWt5HEkj7SY5+M4fXU2vl5RxnLDXvhLeaVhiDZgblmXWkb1T4HKyLWf9oxqV8qwozCglGHvc7uUFViuRi/+HSvbtijvKC1vP9t8dKlaHCM8Ldj2Edvf8gFQF1fTj0y2RqPKquRWxTLC4IlDRNLS5D5Y9TJqd7xMP52f2AVX5WnnMyLaLMuJrempqAh0xL8GAD86n4CkujsKIDaHRGW1KgkLkHzO88ghEPFrmMW+ZXvxlxhDm3/rdR+/9dB7L/uShDHisUl4kClT6wz4don88W66e+kskADZMl4dxHm60zIs998aAGIZnTnfYfrUL3ybO56tnT2dWxSF5Uxd+46EEVxUIe/C83dAvJEo+GA9t6pohGMuj3BWHfy5w6lE6bNdxne6VH+7Erebtblil7MMYxQLxD77JYvXM+HSDJ887ezlRQyWkB/Qow=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	20:GtoCSU3HAaCw1l117ukKAdQOCwH6LZI686YuRngKoDlob/vHK8e9k1FMBjjyENZbMqnYL5yf2Rd1GpWCEQ8BAYVG896A8qjR9HsMTjcdJ0q1bGs/Nrcr6JpVUnXUa3sxUZ/ySyb8iDA58hH/A/kAuEBIOiPH2Xrg+O85kRy59f5l6I3cOFfp5whHc1Cfpj4Nuggq+/twsFOab6M44MtQK6CxWoawXaVS2mLm2VHK81RR/oMvtkrdJ8Azg7+02G1d
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 24 Jul 2017 19:08:40.7939
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0150
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - July 24, 2017, 7:07 p.m.</div>
<pre class="content">
Some KVM-specific custom MSRs shares the guest physical address with
hypervisor. When SEV is active, the shared physical address must be mapped
with encryption attribute cleared so that both hypervsior and guest can
access the data.

Add APIs to change memory encryption attribute in early boot code.
<span class="signed-off-by">
Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |  17 ++++++
 arch/x86/mm/mem_encrypt.c          | 117 +++++++++++++++++++++++++++++++++++++
 2 files changed, 134 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Aug. 28, 2017, 10:51 a.m.</div>
<pre class="content">
On Mon, Jul 24, 2017 at 02:07:55PM -0500, Brijesh Singh wrote:
<span class="quote">&gt; Some KVM-specific custom MSRs shares the guest physical address with</span>

s/shares/share/
<span class="quote">
&gt; hypervisor.</span>

&quot;the hypervisor.&quot;
<span class="quote">
&gt; When SEV is active, the shared physical address must be mapped</span>
<span class="quote">&gt; with encryption attribute cleared so that both hypervsior and guest can</span>
<span class="quote">&gt; access the data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add APIs to change memory encryption attribute in early boot code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |  17 ++++++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          | 117 +++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 134 insertions(+)</span>

...
<span class="quote">
&gt; +static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
<span class="quote">&gt; +					   unsigned long size, bool enc)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long vaddr, vaddr_end, vaddr_next;</span>
<span class="quote">&gt; +	unsigned long psize, pmask;</span>
<span class="quote">&gt; +	int split_page_size_mask;</span>
<span class="quote">&gt; +	pte_t *kpte;</span>
<span class="quote">&gt; +	int level;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	vaddr = (unsigned long)__va(paddr);</span>
<span class="quote">&gt; +	vaddr_next = vaddr;</span>
<span class="quote">&gt; +	vaddr_end = vaddr + size;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * We are going to change the physical page attribute from C=1 to C=0</span>
<span class="quote">&gt; +	 * or vice versa. Flush the caches to ensure that data is written into</span>
<span class="quote">&gt; +	 * memory with correct C-bit before we change attribute.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	clflush_cache_range(__va(paddr), size);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {</span>
<span class="quote">&gt; +		kpte = lookup_address(vaddr, &amp;level);</span>
<span class="quote">&gt; +		if (!kpte || pte_none(*kpte))</span>
<span class="quote">&gt; +			return 1;</span>

Return before flushing TLBs? Perhaps you mean

			ret = 1;
			goto out;

here and out does

	__flush_tlb_all();
	return ret;

?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Aug. 28, 2017, 11:49 a.m.</div>
<pre class="content">
Hi Boris,


On 8/28/17 5:51 AM, Borislav Petkov wrote:

[..]
<span class="quote">
&gt; +static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
<span class="quote">&gt;&gt; +					   unsigned long size, bool enc)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	unsigned long vaddr, vaddr_end, vaddr_next;</span>
<span class="quote">&gt;&gt; +	unsigned long psize, pmask;</span>
<span class="quote">&gt;&gt; +	int split_page_size_mask;</span>
<span class="quote">&gt;&gt; +	pte_t *kpte;</span>
<span class="quote">&gt;&gt; +	int level;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	vaddr = (unsigned long)__va(paddr);</span>
<span class="quote">&gt;&gt; +	vaddr_next = vaddr;</span>
<span class="quote">&gt;&gt; +	vaddr_end = vaddr + size;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * We are going to change the physical page attribute from C=1 to C=0</span>
<span class="quote">&gt;&gt; +	 * or vice versa. Flush the caches to ensure that data is written into</span>
<span class="quote">&gt;&gt; +	 * memory with correct C-bit before we change attribute.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	clflush_cache_range(__va(paddr), size);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {</span>
<span class="quote">&gt;&gt; +		kpte = lookup_address(vaddr, &amp;level);</span>
<span class="quote">&gt;&gt; +		if (!kpte || pte_none(*kpte))</span>
<span class="quote">&gt;&gt; +			return 1;</span>
<span class="quote">&gt; Return before flushing TLBs? Perhaps you mean</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 			ret = 1;</span>
<span class="quote">&gt; 			goto out;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; here and out does</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	__flush_tlb_all();</span>
<span class="quote">&gt; 	return ret;</span>

thanks, good catch. I will fix in next rev.

-Brijesh
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 9cb6472..30b539e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -46,6 +46,11 @@</span> <span class="p_context"> void __init sme_early_init(void);</span>
 void __init sme_encrypt_kernel(void);
 void __init sme_enable(struct boot_params *bp);
 
<span class="p_add">+int __init early_set_memory_decrypted(resource_size_t paddr,</span>
<span class="p_add">+				      unsigned long size);</span>
<span class="p_add">+int __init early_set_memory_encrypted(resource_size_t paddr,</span>
<span class="p_add">+				      unsigned long size);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
 
<span class="p_chunk">@@ -69,6 +74,18 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline int __init early_set_memory_decrypted(resource_size_t paddr,</span>
<span class="p_add">+						    unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int __init early_set_memory_encrypted(resource_size_t paddr,</span>
<span class="p_add">+						    unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index ed8780e..d174b1c 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -28,6 +28,8 @@</span> <span class="p_context"></span>
 #include &lt;asm/msr.h&gt;
 #include &lt;asm/cmdline.h&gt;
 
<span class="p_add">+#include &quot;mm_internal.h&quot;</span>
<span class="p_add">+</span>
 static char sme_cmdline_arg[] __initdata = &quot;mem_encrypt&quot;;
 static char sme_cmdline_on[]  __initdata = &quot;on&quot;;
 static char sme_cmdline_off[] __initdata = &quot;off&quot;;
<span class="p_chunk">@@ -257,6 +259,121 @@</span> <span class="p_context"> static void sme_free(struct device *dev, size_t size, void *vaddr,</span>
 	swiotlb_free_coherent(dev, size, vaddr, dma_handle);
 }
 
<span class="p_add">+static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgprot_t old_prot, new_prot;</span>
<span class="p_add">+	unsigned long pfn;</span>
<span class="p_add">+	pte_t new_pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (level) {</span>
<span class="p_add">+	case PG_LEVEL_4K:</span>
<span class="p_add">+		pfn = pte_pfn(*kpte);</span>
<span class="p_add">+		old_prot = pte_pgprot(*kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_2M:</span>
<span class="p_add">+		pfn = pmd_pfn(*(pmd_t *)kpte);</span>
<span class="p_add">+		old_prot = pmd_pgprot(*(pmd_t *)kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_1G:</span>
<span class="p_add">+		pfn = pud_pfn(*(pud_t *)kpte);</span>
<span class="p_add">+		old_prot = pud_pgprot(*(pud_t *)kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	new_prot = old_prot;</span>
<span class="p_add">+	if (enc)</span>
<span class="p_add">+		pgprot_val(new_prot) |= _PAGE_ENC;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		pgprot_val(new_prot) &amp;= ~_PAGE_ENC;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* if prot is same then do nothing */</span>
<span class="p_add">+	if (pgprot_val(old_prot) == pgprot_val(new_prot))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	new_pte = pfn_pte(pfn, new_prot);</span>
<span class="p_add">+	set_pte_atomic(kpte, new_pte);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
<span class="p_add">+					   unsigned long size, bool enc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long vaddr, vaddr_end, vaddr_next;</span>
<span class="p_add">+	unsigned long psize, pmask;</span>
<span class="p_add">+	int split_page_size_mask;</span>
<span class="p_add">+	pte_t *kpte;</span>
<span class="p_add">+	int level;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = (unsigned long)__va(paddr);</span>
<span class="p_add">+	vaddr_next = vaddr;</span>
<span class="p_add">+	vaddr_end = vaddr + size;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We are going to change the physical page attribute from C=1 to C=0</span>
<span class="p_add">+	 * or vice versa. Flush the caches to ensure that data is written into</span>
<span class="p_add">+	 * memory with correct C-bit before we change attribute.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	clflush_cache_range(__va(paddr), size);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {</span>
<span class="p_add">+		kpte = lookup_address(vaddr, &amp;level);</span>
<span class="p_add">+		if (!kpte || pte_none(*kpte))</span>
<span class="p_add">+			return 1;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (level == PG_LEVEL_4K) {</span>
<span class="p_add">+			__set_clr_pte_enc(kpte, level, enc);</span>
<span class="p_add">+			vaddr_next = (vaddr &amp; PAGE_MASK) + PAGE_SIZE;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		psize = page_level_size(level);</span>
<span class="p_add">+		pmask = page_level_mask(level);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Check, whether we can change the large page in one go.</span>
<span class="p_add">+		 * We request a split, when the address is not aligned and</span>
<span class="p_add">+		 * the number of pages to set/clear encryption bit is smaller</span>
<span class="p_add">+		 * than the number of pages in the large page.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (vaddr == (vaddr &amp; pmask) &amp;&amp;</span>
<span class="p_add">+			((vaddr_end - vaddr) &gt;= psize)) {</span>
<span class="p_add">+			__set_clr_pte_enc(kpte, level, enc);</span>
<span class="p_add">+			vaddr_next = (vaddr &amp; pmask) + psize;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * virtual address is part of large page, create the page table</span>
<span class="p_add">+		 * mapping to use smaller pages (4K or 2M). If virtual address</span>
<span class="p_add">+		 * is part of 2M page the we request spliting the large page</span>
<span class="p_add">+		 * into 4K, similarly 1GB large page is requested to split into</span>
<span class="p_add">+		 * 2M pages.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (level == PG_LEVEL_2M)</span>
<span class="p_add">+			split_page_size_mask = 0;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			split_page_size_mask = 1 &lt;&lt; PG_LEVEL_2M;</span>
<span class="p_add">+</span>
<span class="p_add">+		kernel_physical_mapping_init(__pa(vaddr &amp; pmask),</span>
<span class="p_add">+					     __pa((vaddr_end &amp; pmask) + psize),</span>
<span class="p_add">+					     split_page_size_mask);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	__flush_tlb_all();</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_decrypted(resource_size_t paddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return early_set_memory_enc_dec(paddr, size, false);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_encrypted(resource_size_t paddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return early_set_memory_enc_dec(paddr, size, true);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct dma_map_ops sme_dma_ops = {
 	.alloc                  = sme_alloc,
 	.free                   = sme_free,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



