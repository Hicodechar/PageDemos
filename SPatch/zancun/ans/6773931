
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,07/10] mm/hugetlb: alloc_huge_page handle areas hole punched by fallocate - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,07/10] mm/hugetlb: alloc_huge_page handle areas hole punched by fallocate</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 13, 2015, 4:21 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1436761268-6397-8-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6773931/mbox/"
   >mbox</a>
|
   <a href="/patch/6773931/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6773931/">/patch/6773931/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id E5C30C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Jul 2015 04:22:28 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 08DE72055C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Jul 2015 04:22:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F2AF3206B5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 13 Jul 2015 04:22:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751835AbbGMEWO (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 13 Jul 2015 00:22:14 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:30009 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751729AbbGMEWH (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 13 Jul 2015 00:22:07 -0400
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t6D4Lbx3020667
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Mon, 13 Jul 2015 04:21:37 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0021.oracle.com (8.13.8/8.13.8) with ESMTP id t6D4LbHe027638
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Mon, 13 Jul 2015 04:21:37 GMT
Received: from abhmp0013.oracle.com (abhmp0013.oracle.com [141.146.116.19])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	t6D4La7H006198; Mon, 13 Jul 2015 04:21:36 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Sun, 12 Jul 2015 21:21:36 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v3 07/10] mm/hugetlb: alloc_huge_page handle areas hole
	punched by fallocate
Date: Sun, 12 Jul 2015 21:21:05 -0700
Message-Id: &lt;1436761268-6397-8-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1436761268-6397-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1436761268-6397-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 13, 2015, 4:21 a.m.</div>
<pre class="content">
Areas hole punched by fallocate will not have entries in the
region/reserve map.  However, shared mappings with min_size subpool
reservations may still have reserved pages.  alloc_huge_page needs
to handle this special case and do the proper accounting.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 54 +++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 39 insertions(+), 15 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index f72cb96..5a2ee06 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1732,34 +1732,58 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	struct hugepage_subpool *spool = subpool_vma(vma);
 	struct hstate *h = hstate_vma(vma);
 	struct page *page;
<span class="p_del">-	long chg, commit;</span>
<span class="p_add">+	long map_chg, map_commit;</span>
<span class="p_add">+	long gbl_chg;</span>
 	int ret, idx;
 	struct hugetlb_cgroup *h_cg;
 
 	idx = hstate_index(h);
 	/*
<span class="p_del">-	 * Processes that did not create the mapping will have no</span>
<span class="p_del">-	 * reserves and will not have accounted against subpool</span>
<span class="p_del">-	 * limit. Check that the subpool limit can be made before</span>
<span class="p_del">-	 * satisfying the allocation MAP_NORESERVE mappings may also</span>
<span class="p_del">-	 * need pages and subpool limit allocated allocated if no reserve</span>
<span class="p_del">-	 * mapping overlaps.</span>
<span class="p_add">+	 * Examine the region/reserve map to determine if the process</span>
<span class="p_add">+	 * has a reservation for the page to be allocated.  A return</span>
<span class="p_add">+	 * code of zero indicates a reservation exists (no change).</span>
 	 */
<span class="p_del">-	chg = vma_needs_reservation(h, vma, addr);</span>
<span class="p_del">-	if (chg &lt; 0)</span>
<span class="p_add">+	map_chg = gbl_chg = vma_needs_reservation(h, vma, addr);</span>
<span class="p_add">+	if (map_chg &lt; 0)</span>
 		return ERR_PTR(-ENOMEM);
<span class="p_del">-	if (chg || avoid_reserve)</span>
<span class="p_del">-		if (hugepage_subpool_get_pages(spool, 1) &lt; 0) {</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Processes that did not create the mapping will have no</span>
<span class="p_add">+	 * reserves as indicated by the region/reserve map. Check</span>
<span class="p_add">+	 * that the allocation will not exceed the subpool limit.</span>
<span class="p_add">+	 * Allocations for MAP_NORESERVE mappings also need to be</span>
<span class="p_add">+	 * checked against any subpool limit.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (map_chg || avoid_reserve) {</span>
<span class="p_add">+		gbl_chg = hugepage_subpool_get_pages(spool, 1);</span>
<span class="p_add">+		if (gbl_chg &lt; 0) {</span>
 			vma_abort_reservation(h, vma, addr);
 			return ERR_PTR(-ENOSPC);
 		}
 
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Even though there was no reservation in the region/reserve</span>
<span class="p_add">+		 * map, there could be reservations associated with the</span>
<span class="p_add">+		 * subpool that can be used.  This would be indicated if the</span>
<span class="p_add">+		 * return value of hugepage_subpool_get_pages() is zero.</span>
<span class="p_add">+		 * However, if avoid_reserve is specified we still avoid even</span>
<span class="p_add">+		 * the subpool reservations.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (avoid_reserve)</span>
<span class="p_add">+			gbl_chg = 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	ret = hugetlb_cgroup_charge_cgroup(idx, pages_per_huge_page(h), &amp;h_cg);
 	if (ret)
 		goto out_subpool_put;
 
 	spin_lock(&amp;hugetlb_lock);
<span class="p_del">-	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve, chg);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * glb_chg is passed to indicate whether or not a page must be taken</span>
<span class="p_add">+	 * from the global free pool (global change).  gbl_chg == 0 indicates</span>
<span class="p_add">+	 * a reservation exists for the allocation.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	page = dequeue_huge_page_vma(h, vma, addr, avoid_reserve, gbl_chg);</span>
 	if (!page) {
 		spin_unlock(&amp;hugetlb_lock);
 		page = alloc_buddy_huge_page(h, NUMA_NO_NODE);
<span class="p_chunk">@@ -1775,8 +1799,8 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 
 	set_page_private(page, (unsigned long)spool);
 
<span class="p_del">-	commit = vma_commit_reservation(h, vma, addr);</span>
<span class="p_del">-	if (unlikely(chg &gt; commit)) {</span>
<span class="p_add">+	map_commit = vma_commit_reservation(h, vma, addr);</span>
<span class="p_add">+	if (unlikely(map_chg &gt; map_commit)) {</span>
 		/*
 		 * The page was added to the reservation map between
 		 * vma_needs_reservation and vma_commit_reservation.
<span class="p_chunk">@@ -1796,7 +1820,7 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 out_uncharge_cgroup:
 	hugetlb_cgroup_uncharge_cgroup(idx, pages_per_huge_page(h), h_cg);
 out_subpool_put:
<span class="p_del">-	if (chg || avoid_reserve)</span>
<span class="p_add">+	if (map_chg || avoid_reserve)</span>
 		hugepage_subpool_put_pages(spool, 1);
 	vma_abort_reservation(h, vma, addr);
 	return ERR_PTR(-ENOSPC);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



