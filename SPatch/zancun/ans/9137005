
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>oom_reaper: close race with exiting task - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    oom_reaper: close race with exiting task</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 26, 2016, 2:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1464271493-20008-1-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9137005/mbox/"
   >mbox</a>
|
   <a href="/patch/9137005/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9137005/">/patch/9137005/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D6591607D7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 May 2016 14:05:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C27BF27984
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 May 2016 14:05:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B7783282FE; Thu, 26 May 2016 14:05:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C2C27282F2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 May 2016 14:05:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754047AbcEZOFE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 26 May 2016 10:05:04 -0400
Received: from mail-wm0-f68.google.com ([74.125.82.68]:36096 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754013AbcEZOFB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 26 May 2016 10:05:01 -0400
Received: by mail-wm0-f68.google.com with SMTP id q62so5786162wmg.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 26 May 2016 07:05:00 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=OIuvqVb8uDAeaA4SJLxvwbMeEl61h9Jt30L+f/RT32g=;
	b=d2/dfAteIF9AiEUlafBZtpjfQ4xi/VOPCJC6eOY2f4wHe2uxppS8D87sDJ0ekCcKQD
	Xt9LZb3z76OxPH0+OnS22V3ElTNLx+v1VfbRBGvhApc4XOYSkkvtiSi06Neu6Ezayvlg
	OTP8zKcnV8RZvUH/KUuRYfNUlonvTarDKAwVnwzUvqCYSSYvfR4FsgUL3VDPnF9PtXg/
	POuUSSIw29VfI/zw2S21KjVpRQs4Jj0txRrSOCOmAqjVTHhZ+Op/tHd+/4EVAaE7eCk2
	wTaxf7DuUJWKkmfGRn7W2/a3UqvNSe2cIhpp4sytyxFL7J/JTBRpBT8IdOWsmKiU6A91
	0AIw==
X-Gm-Message-State: ALyK8tKKO4ur4GVw8q1tqgklGj9FJybajC8KA4hxbo9MYyUnrVqwt2x8pmUR3ymkNJtqYQ==
X-Received: by 10.28.232.136 with SMTP id f8mr4223103wmi.52.1464271499800;
	Thu, 26 May 2016 07:04:59 -0700 (PDT)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	w10sm14554439wjk.18.2016.05.26.07.04.58
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 26 May 2016 07:04:59 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH] oom_reaper: close race with exiting task
Date: Thu, 26 May 2016 16:04:53 +0200
Message-Id: &lt;1464271493-20008-1-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.8.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - May 26, 2016, 2:04 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Tetsuo has reported:
[   74.453958] Out of memory: Kill process 443 (oleg&#39;s-test) score 855 or sacrifice child
[   74.456234] Killed process 443 (oleg&#39;s-test) total-vm:493248kB, anon-rss:423880kB, file-rss:4kB, shmem-rss:0kB
[   74.459219] sh invoked oom-killer: gfp_mask=0x24201ca(GFP_HIGHUSER_MOVABLE|__GFP_COLD), order=0, oom_score_adj=0
[   74.462813] sh cpuset=/ mems_allowed=0
[   74.465221] CPU: 2 PID: 1 Comm: sh Not tainted 4.6.0-rc7+ #51
[   74.467037] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/31/2013
[   74.470207]  0000000000000286 00000000a17a86b0 ffff88001e673a18 ffffffff812c7cbd
[   74.473422]  0000000000000000 ffff88001e673bd0 ffff88001e673ab8 ffffffff811b9e94
[   74.475704]  ffff88001e66cbe0 ffff88001e673ab8 0000000000000246 0000000000000000
[   74.477990] Call Trace:
[   74.479170]  [&lt;ffffffff812c7cbd&gt;] dump_stack+0x85/0xc8
[   74.480872]  [&lt;ffffffff811b9e94&gt;] dump_header+0x5b/0x394
[   74.481837] oom_reaper: reaped process 443 (oleg&#39;s-test), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB

In other words:
__oom_reap_task			exit_mm
  atomic_inc_not_zero
				  tsk-&gt;mm = NULL
				  mmput
				    atomic_dec_and_test # &gt; 0
				  exit_oom_victim # New victim will be
						  # selected
				&lt;OOM killer invoked&gt;
				  # no TIF_MEMDIE task so we can select a new one
  unmap_page_range # to release the memory

The race exists even without the oom_reaper because anybody who pins the
address space and gets preempted might race with exit_mm but oom_reaper
made this race more probable.

We can address the oom_reaper part by using oom_lock for __oom_reap_task
because this would guarantee that a new oom victim will not be selected
if the oom reaper might race with the exit path. This doesn&#39;t solve the
original issue, though, because somebody else still might be pinning
mm_users and so __mmput won&#39;t be called to release the memory but that
is not really realiably solvable because the task will get away from the
oom sight as soon as it is unhashed from the task_list and so we cannot
guarantee a new victim won&#39;t be selected.

Fixes: aac453635549 (&quot;mm, oom: introduce oom reaper&quot;)
Reported-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---

Hi,
I haven&#39;t marked this for stable because the race is quite unlikely I
believe. I have noted the original commit, though, for those who might
want to backport it and consider this follow up fix as well.

I guess this would be good to go in the current merge window, unless I
have missed something subtle. It would be great if Tetsuo could try to
reproduce and confirm this really solves his issue.

Thanks!

 mm/oom_kill.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 5bb2f7698ad7..d0f42cc88f6a 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -450,6 +450,22 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	bool ret = true;
 
 	/*
<span class="p_add">+	 * We have to make sure to not race with the victim exit path</span>
<span class="p_add">+	 * and cause premature new oom victim selection:</span>
<span class="p_add">+	 * __oom_reap_task		exit_mm</span>
<span class="p_add">+	 *   atomic_inc_not_zero</span>
<span class="p_add">+	 *   				  mmput</span>
<span class="p_add">+	 *   				    atomic_dec_and_test</span>
<span class="p_add">+	 *				  exit_oom_victim</span>
<span class="p_add">+	 *				[...]</span>
<span class="p_add">+	 *				out_of_memory</span>
<span class="p_add">+	 *				  select_bad_process</span>
<span class="p_add">+	 *				    # no TIF_MEMDIE task select new victim</span>
<span class="p_add">+	 *  unmap_page_range # frees some memory</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mutex_lock(&amp;oom_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
 	 * Make sure we find the associated mm_struct even when the particular
 	 * thread has already terminated and cleared its mm.
 	 * We might have race with exit path so consider our work done if there
<span class="p_chunk">@@ -457,19 +473,19 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	 */
 	p = find_lock_task_mm(tsk);
 	if (!p)
<span class="p_del">-		return true;</span>
<span class="p_add">+		goto unlock_oom;</span>
 
 	mm = p-&gt;mm;
 	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users)) {
 		task_unlock(p);
<span class="p_del">-		return true;</span>
<span class="p_add">+		goto unlock_oom;</span>
 	}
 
 	task_unlock(p);
 
 	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {
 		ret = false;
<span class="p_del">-		goto out;</span>
<span class="p_add">+		goto unlock_oom;</span>
 	}
 
 	tlb_gather_mmu(&amp;tlb, mm, 0, -1);
<span class="p_chunk">@@ -511,7 +527,8 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	 * to release its memory.
 	 */
 	set_bit(MMF_OOM_REAPED, &amp;mm-&gt;flags);
<span class="p_del">-out:</span>
<span class="p_add">+unlock_oom:</span>
<span class="p_add">+	mutex_unlock(&amp;oom_lock);</span>
 	/*
 	 * Drop our reference but make sure the mmput slow path is called from a
 	 * different context because we shouldn&#39;t risk we get stuck there and

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



