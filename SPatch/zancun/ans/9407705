
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,5/7] powerpc: Rename context.vdso_base to context.vdso - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,5/7] powerpc: Rename context.vdso_base to context.vdso</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 1, 2016, 5:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161101171101.24704-5-cov@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9407705/mbox/"
   >mbox</a>
|
   <a href="/patch/9407705/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9407705/">/patch/9407705/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D909660234 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Nov 2016 17:11:28 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C781B29A7C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Nov 2016 17:11:28 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BC29829A80; Tue,  1 Nov 2016 17:11:28 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ADB2529A7F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Nov 2016 17:11:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753586AbcKARLV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 1 Nov 2016 13:11:21 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:50102 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751645AbcKARLS (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 1 Nov 2016 13:11:18 -0400
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
	id BD088615DD; Tue,  1 Nov 2016 17:11:16 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1478020277;
	bh=3jC0zLvTYMSXGKVO7daCJ8chkNGb7p+925lw++UE9cQ=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=QtTPH5/6BJodJRKD23gu15Lax5Gax9iAexd4UkdOt15JU4TVRddjVN3dmLiv/gIsM
	LBaEjoRbaqIjapIdgzQOPd2LsdU6Q0fMZl54BCHgWTltqpwQddI1XB4rzGetreiTtN
	KksiQoLIvOcSXdpA2yWOok7MEFrwP7U8Z3V25iMs=
Received: from localhost.localdomain (unknown [198.233.217.214])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	(Authenticated sender: cov@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 8555462339;
	Tue,  1 Nov 2016 17:11:14 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=codeaurora.org;
	s=default; t=1478020275;
	bh=3jC0zLvTYMSXGKVO7daCJ8chkNGb7p+925lw++UE9cQ=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=OlpFGhC6zbfEniQLo/7Oy46aAVXWjd/26AWIS0syq93vmUJO9oD8mL9i3P4KuW9bV
	KbTrGObljh8AmB52r0A/cRg1DoesLGRbKv93JYOFe2t3Y3ru9UiUUbjdr7OA+TUmC+
	fa3ZYlZgX30SiWydWh6jE5jzqdzowcOdHHrBPyww=
DMARC-Filter: OpenDMARC Filter v1.3.1 smtp.codeaurora.org 8555462339
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	dmarc=none header.from=codeaurora.org
Authentication-Results: pdx-caf-mail.web.codeaurora.org;
	spf=pass smtp.mailfrom=cov@codeaurora.org
From: Christopher Covington &lt;cov@codeaurora.org&gt;
To: criu@openvz.org, Will Deacon &lt;will.deacon@arm.com&gt;,
	linux-mm@kvack.org, Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
Cc: Christopher Covington &lt;cov@codeaurora.org&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	linuxppc-dev@lists.ozlabs.org, linux-kernel@vger.kernel.org
Subject: [RFC v2 5/7] powerpc: Rename context.vdso_base to context.vdso
Date: Tue,  1 Nov 2016 11:10:59 -0600
Message-Id: &lt;20161101171101.24704-5-cov@codeaurora.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20161101171101.24704-1-cov@codeaurora.org&gt;
References: &lt;20161101171101.24704-1-cov@codeaurora.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a> - Nov. 1, 2016, 5:10 p.m.</div>
<pre class="content">
Checkpoint/Restore In Userspace (CRIU) needs to be able to unmap and remap
the VDSO to successfully checkpoint and restore applications in the face of
changing VDSO addresses due to Address Space Layout Randomization (ASLR,
randmaps). x86 and PowerPC have had architecture-specific code to support
this. In order to expand the architectures that support this without
unnecessary duplication of code, a generic version based on the PowerPC code
was created. It differs slightly, based on the results of an informal
survey of all architectures that indicated

	unsigned long vdso;

is popular (and it&#39;s also concise). Therefore, change the variable name in
powerpc from mm-&gt;context.vdso_base to mm-&gt;context.vdso.
<span class="signed-off-by">
Signed-off-by: Christopher Covington &lt;cov@codeaurora.org&gt;</span>
---
 arch/powerpc/include/asm/book3s/32/mmu-hash.h |  2 +-
 arch/powerpc/include/asm/book3s/64/mmu.h      |  2 +-
 arch/powerpc/include/asm/mm-arch-hooks.h      |  6 +++---
 arch/powerpc/include/asm/mmu-40x.h            |  2 +-
 arch/powerpc/include/asm/mmu-44x.h            |  2 +-
 arch/powerpc/include/asm/mmu-8xx.h            |  2 +-
 arch/powerpc/include/asm/mmu-book3e.h         |  2 +-
 arch/powerpc/include/asm/mmu_context.h        |  4 ++--
 arch/powerpc/include/asm/vdso.h               |  2 +-
 arch/powerpc/include/uapi/asm/elf.h           |  2 +-
 arch/powerpc/kernel/signal_32.c               |  8 ++++----
 arch/powerpc/kernel/signal_64.c               |  4 ++--
 arch/powerpc/kernel/vdso.c                    |  8 ++++----
 arch/powerpc/perf/callchain.c                 | 12 ++++++------
 14 files changed, 29 insertions(+), 29 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Nov. 4, 2016, 8:13 p.m.</div>
<pre class="content">
[fixing akpm&#39;s email address]

On Fri, Nov 04, 2016 at 03:58:22PM +1100, Michael Ellerman wrote:
<span class="quote">&gt; Christopher Covington &lt;cov@codeaurora.org&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Checkpoint/Restore In Userspace (CRIU) needs to be able to unmap and remap</span>
<span class="quote">&gt; &gt; the VDSO to successfully checkpoint and restore applications in the face of</span>
<span class="quote">&gt; &gt; changing VDSO addresses due to Address Space Layout Randomization (ASLR,</span>
<span class="quote">&gt; &gt; randmaps). x86 and PowerPC have had architecture-specific code to support</span>
<span class="quote">&gt; &gt; this. In order to expand the architectures that support this without</span>
<span class="quote">&gt; &gt; unnecessary duplication of code, a generic version based on the PowerPC code</span>
<span class="quote">&gt; &gt; was created. It differs slightly, based on the results of an informal</span>
<span class="quote">&gt; &gt; survey of all architectures that indicated</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; 	unsigned long vdso;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; is popular (and it&#39;s also concise). Therefore, change the variable name in</span>
<span class="quote">&gt; &gt; powerpc from mm-&gt;context.vdso_base to mm-&gt;context.vdso.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Christopher Covington &lt;cov@codeaurora.org&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/book3s/32/mmu-hash.h |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/book3s/64/mmu.h      |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mm-arch-hooks.h      |  6 +++---</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mmu-40x.h            |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mmu-44x.h            |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mmu-8xx.h            |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mmu-book3e.h         |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/mmu_context.h        |  4 ++--</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/asm/vdso.h               |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/include/uapi/asm/elf.h           |  2 +-</span>
<span class="quote">&gt; &gt;  arch/powerpc/kernel/signal_32.c               |  8 ++++----</span>
<span class="quote">&gt; &gt;  arch/powerpc/kernel/signal_64.c               |  4 ++--</span>
<span class="quote">&gt; &gt;  arch/powerpc/kernel/vdso.c                    |  8 ++++----</span>
<span class="quote">&gt; &gt;  arch/powerpc/perf/callchain.c                 | 12 ++++++------</span>
<span class="quote">&gt; &gt;  14 files changed, 29 insertions(+), 29 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is kind of annoying, but I guess it&#39;s worth doing.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s going to conflict like hell though. Who were you thinking would</span>
<span class="quote">&gt; merge this series? I think it should go via Andrew Morton&#39;s tree, as</span>
<span class="quote">&gt; that way if we get bad conflicts we can pull it out and redo it.</span>

The other thing you can do is generate the patch towards the end of the
merge window and send it as a separate pull request. The disadvantage of
that is that it can&#39;t spend any time in -next, but that might be ok for a
mechanical rename.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - Nov. 7, 2016, 8:01 a.m.</div>
<pre class="content">
Will Deacon &lt;will.deacon@arm.com&gt; writes:
<span class="quote">&gt; On Fri, Nov 04, 2016 at 03:58:22PM +1100, Michael Ellerman wrote:</span>
<span class="quote">&gt;&gt; Christopher Covington &lt;cov@codeaurora.org&gt; writes:</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/book3s/32/mmu-hash.h |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/book3s/64/mmu.h      |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mm-arch-hooks.h      |  6 +++---</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mmu-40x.h            |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mmu-44x.h            |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mmu-8xx.h            |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mmu-book3e.h         |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/mmu_context.h        |  4 ++--</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/asm/vdso.h               |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/include/uapi/asm/elf.h           |  2 +-</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/kernel/signal_32.c               |  8 ++++----</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/kernel/signal_64.c               |  4 ++--</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/kernel/vdso.c                    |  8 ++++----</span>
<span class="quote">&gt;&gt; &gt;  arch/powerpc/perf/callchain.c                 | 12 ++++++------</span>
<span class="quote">&gt;&gt; &gt;  14 files changed, 29 insertions(+), 29 deletions(-)</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; This is kind of annoying, but I guess it&#39;s worth doing.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; It&#39;s going to conflict like hell though. Who were you thinking would</span>
<span class="quote">&gt;&gt; merge this series? I think it should go via Andrew Morton&#39;s tree, as</span>
<span class="quote">&gt;&gt; that way if we get bad conflicts we can pull it out and redo it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The other thing you can do is generate the patch towards the end of the</span>
<span class="quote">&gt; merge window and send it as a separate pull request. The disadvantage of</span>
<span class="quote">&gt; that is that it can&#39;t spend any time in -next, but that might be ok for a</span>
<span class="quote">&gt; mechanical rename.</span>

True. Though in this case it&#39;s a mechanical rename that then allows us
to use the generic code, so I&#39;d prefer we had some -next coverage on the
latter.

The other other option would be to wrap all uses of the arch value in a
macro (or actually two probably, one a getter one a setter). That would
then allow arches to use the generic code regardless of the name and
type of their mm-&gt;context.vdso_whatever.

That would allow the basic series to go in, and then each arch could do
a series later that switches it to the &quot;standard&quot; name and type.

cheers
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/book3s/32/mmu-hash.h b/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_header">index b82e063..75738bb 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> struct hash_pte {</span>
 
 typedef struct {
 	unsigned long id;
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/book3s/64/mmu.h b/arch/powerpc/include/asm/book3s/64/mmu.h</span>
<span class="p_header">index 8afb0e0..8486a10 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/book3s/64/mmu.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/book3s/64/mmu.h</span>
<span class="p_chunk">@@ -72,7 +72,7 @@</span> <span class="p_context"> typedef struct {</span>
 #else
 	u16 sllp;		/* SLB page size encoding */
 #endif
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 #ifdef CONFIG_PPC_SUBPAGE_PROT
 	struct subpage_prot_table spt;
 #endif /* CONFIG_PPC_SUBPAGE_PROT */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mm-arch-hooks.h b/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_header">index f2a2da8..ea6da89 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_chunk">@@ -18,10 +18,10 @@</span> <span class="p_context"> static inline void arch_remap(struct mm_struct *mm,</span>
 {
 	/*
 	 * mremap() doesn&#39;t allow moving multiple vmas so we can limit the
<span class="p_del">-	 * check to old_start == vdso_base.</span>
<span class="p_add">+	 * check to old_start == vdso.</span>
 	 */
<span class="p_del">-	if (old_start == mm-&gt;context.vdso_base)</span>
<span class="p_del">-		mm-&gt;context.vdso_base = new_start;</span>
<span class="p_add">+	if (old_start == mm-&gt;context.vdso)</span>
<span class="p_add">+		mm-&gt;context.vdso = new_start;</span>
 }
 #define arch_remap arch_remap
 
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-40x.h b/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_header">index 3491686..e8e57b7 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"></span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-44x.h b/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_header">index bf52d70..471891c 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_chunk">@@ -107,7 +107,7 @@</span> <span class="p_context"> extern unsigned int tlb_44x_index;</span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">index 3e0e492..2834af0 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_chunk">@@ -167,7 +167,7 @@</span> <span class="p_context"></span>
 typedef struct {
 	unsigned int id;
 	unsigned int active;
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 } mm_context_t;
 
 #define PHYS_IMMR_BASE (mfspr(SPRN_IMMR) &amp; 0xfff80000)
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-book3e.h b/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_header">index b62a8d4..28dc4e0 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_chunk">@@ -228,7 +228,7 @@</span> <span class="p_context"> extern unsigned int tlbcam_index;</span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 #ifdef CONFIG_PPC_MM_SLICES
 	u64 low_slices_psize;   /* SLB page size encodings */
 	u64 high_slices_psize;  /* 4 bits per slice for now */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu_context.h b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">index 5c45114..c907478 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -146,8 +146,8 @@</span> <span class="p_context"> static inline void arch_unmap(struct mm_struct *mm,</span>
 			      struct vm_area_struct *vma,
 			      unsigned long start, unsigned long end)
 {
<span class="p_del">-	if (start &lt;= mm-&gt;context.vdso_base &amp;&amp; mm-&gt;context.vdso_base &lt; end)</span>
<span class="p_del">-		mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+	if (start &lt;= mm-&gt;context.vdso &amp;&amp; mm-&gt;context.vdso &lt; end)</span>
<span class="p_add">+		mm-&gt;context.vdso = 0;</span>
 }
 
 static inline void arch_bprm_mm_init(struct mm_struct *mm,
<span class="p_header">diff --git a/arch/powerpc/include/asm/vdso.h b/arch/powerpc/include/asm/vdso.h</span>
<span class="p_header">index c53f5f6..fc90971 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/vdso.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/vdso.h</span>
<span class="p_chunk">@@ -17,7 +17,7 @@</span> <span class="p_context"></span>
 
 #ifndef __ASSEMBLY__
 
<span class="p_del">-/* Offsets relative to thread-&gt;vdso_base */</span>
<span class="p_add">+/* Offsets relative to mm-&gt;context.vdso */</span>
 extern unsigned long vdso64_rt_sigtramp;
 extern unsigned long vdso32_sigtramp;
 extern unsigned long vdso32_rt_sigtramp;
<span class="p_header">diff --git a/arch/powerpc/include/uapi/asm/elf.h b/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_header">index 3a9e44c..d7c81ae 100644</span>
<span class="p_header">--- a/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_header">+++ b/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_chunk">@@ -182,7 +182,7 @@</span> <span class="p_context"> do {									\</span>
 	NEW_AUX_ENT(AT_DCACHEBSIZE, dcache_bsize);			\
 	NEW_AUX_ENT(AT_ICACHEBSIZE, icache_bsize);			\
 	NEW_AUX_ENT(AT_UCACHEBSIZE, ucache_bsize);			\
<span class="p_del">-	VDSO_AUX_ENT(AT_SYSINFO_EHDR, current-&gt;mm-&gt;context.vdso_base);	\</span>
<span class="p_add">+	VDSO_AUX_ENT(AT_SYSINFO_EHDR, current-&gt;mm-&gt;context.vdso);	\</span>
 } while (0)
 
 /* PowerPC64 relocations defined by the ABIs */
<span class="p_header">diff --git a/arch/powerpc/kernel/signal_32.c b/arch/powerpc/kernel/signal_32.c</span>
<span class="p_header">index 27aa913..7bb0882 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/signal_32.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/signal_32.c</span>
<span class="p_chunk">@@ -1006,9 +1006,9 @@</span> <span class="p_context"> int handle_rt_signal32(struct ksignal *ksig, sigset_t *oldset,</span>
 	/* Save user registers on the stack */
 	frame = &amp;rt_sf-&gt;uc.uc_mcontext;
 	addr = frame;
<span class="p_del">-	if (vdso32_rt_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_add">+	if (vdso32_rt_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso) {</span>
 		sigret = 0;
<span class="p_del">-		tramp = tsk-&gt;mm-&gt;context.vdso_base + vdso32_rt_sigtramp;</span>
<span class="p_add">+		tramp = tsk-&gt;mm-&gt;context.vdso + vdso32_rt_sigtramp;</span>
 	} else {
 		sigret = __NR_rt_sigreturn;
 		tramp = (unsigned long) frame-&gt;tramp;
<span class="p_chunk">@@ -1449,9 +1449,9 @@</span> <span class="p_context"> int handle_signal32(struct ksignal *ksig, sigset_t *oldset,</span>
 	    || __put_user(ksig-&gt;sig, &amp;sc-&gt;signal))
 		goto badframe;
 
<span class="p_del">-	if (vdso32_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_add">+	if (vdso32_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso) {</span>
 		sigret = 0;
<span class="p_del">-		tramp = tsk-&gt;mm-&gt;context.vdso_base + vdso32_sigtramp;</span>
<span class="p_add">+		tramp = tsk-&gt;mm-&gt;context.vdso + vdso32_sigtramp;</span>
 	} else {
 		sigret = __NR_sigreturn;
 		tramp = (unsigned long) frame-&gt;mctx.tramp;
<span class="p_header">diff --git a/arch/powerpc/kernel/signal_64.c b/arch/powerpc/kernel/signal_64.c</span>
<span class="p_header">index 96698fd..608a919 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/signal_64.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/signal_64.c</span>
<span class="p_chunk">@@ -791,8 +791,8 @@</span> <span class="p_context"> int handle_rt_signal64(struct ksignal *ksig, sigset_t *set,</span>
 	tsk-&gt;thread.fp_state.fpscr = 0;
 
 	/* Set up to return from userspace. */
<span class="p_del">-	if (vdso64_rt_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_del">-		regs-&gt;link = tsk-&gt;mm-&gt;context.vdso_base + vdso64_rt_sigtramp;</span>
<span class="p_add">+	if (vdso64_rt_sigtramp &amp;&amp; tsk-&gt;mm-&gt;context.vdso) {</span>
<span class="p_add">+		regs-&gt;link = tsk-&gt;mm-&gt;context.vdso + vdso64_rt_sigtramp;</span>
 	} else {
 		err |= setup_trampoline(__NR_rt_sigreturn, &amp;frame-&gt;tramp[0]);
 		if (err)
<span class="p_header">diff --git a/arch/powerpc/kernel/vdso.c b/arch/powerpc/kernel/vdso.c</span>
<span class="p_header">index 4111d30..33ea0f8 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/vdso.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/vdso.c</span>
<span class="p_chunk">@@ -180,7 +180,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 	vdso_base = VDSO32_MBASE;
 #endif
 
<span class="p_del">-	current-&gt;mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = 0;</span>
 
 	/* vDSO has a problem and was disabled, just don&#39;t &quot;enable&quot; it for the
 	 * process
<span class="p_chunk">@@ -215,7 +215,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 	 * install_special_mapping or the perf counter mmap tracking code
 	 * will fail to recognise it as a vDSO (since arch_vma_name fails).
 	 */
<span class="p_del">-	current-&gt;mm-&gt;context.vdso_base = vdso_base;</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = vdso_base;</span>
 
 	/*
 	 * our vma flags don&#39;t have VM_WRITE so by default, the process isn&#39;t
<span class="p_chunk">@@ -232,7 +232,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 				     VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
 				     vdso_pagelist);
 	if (rc) {
<span class="p_del">-		current-&gt;mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+		current-&gt;mm-&gt;context.vdso = 0;</span>
 		goto fail_mmapsem;
 	}
 
<span class="p_chunk">@@ -246,7 +246,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 
 const char *arch_vma_name(struct vm_area_struct *vma)
 {
<span class="p_del">-	if (vma-&gt;vm_mm &amp;&amp; vma-&gt;vm_start == vma-&gt;vm_mm-&gt;context.vdso_base)</span>
<span class="p_add">+	if (vma-&gt;vm_mm &amp;&amp; vma-&gt;vm_start == vma-&gt;vm_mm-&gt;context.vdso)</span>
 		return &quot;[vdso]&quot;;
 	return NULL;
 }
<span class="p_header">diff --git a/arch/powerpc/perf/callchain.c b/arch/powerpc/perf/callchain.c</span>
<span class="p_header">index 0fc2671..5c893a2 100644</span>
<span class="p_header">--- a/arch/powerpc/perf/callchain.c</span>
<span class="p_header">+++ b/arch/powerpc/perf/callchain.c</span>
<span class="p_chunk">@@ -209,8 +209,8 @@</span> <span class="p_context"> static int is_sigreturn_64_address(unsigned long nip, unsigned long fp)</span>
 {
 	if (nip == fp + offsetof(struct signal_frame_64, tramp))
 		return 1;
<span class="p_del">-	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso64_rt_sigtramp)</span>
<span class="p_add">+	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso64_rt_sigtramp)</span>
 		return 1;
 	return 0;
 }
<span class="p_chunk">@@ -368,8 +368,8 @@</span> <span class="p_context"> static int is_sigreturn_32_address(unsigned int nip, unsigned int fp)</span>
 {
 	if (nip == fp + offsetof(struct signal_frame_32, mctx.mc_pad))
 		return 1;
<span class="p_del">-	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso32_sigtramp)</span>
<span class="p_add">+	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso32_sigtramp)</span>
 		return 1;
 	return 0;
 }
<span class="p_chunk">@@ -379,8 +379,8 @@</span> <span class="p_context"> static int is_rt_sigreturn_32_address(unsigned int nip, unsigned int fp)</span>
 	if (nip == fp + offsetof(struct rt_signal_frame_32,
 				 uc.uc_mcontext.mc_pad))
 		return 1;
<span class="p_del">-	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso32_rt_sigtramp)</span>
<span class="p_add">+	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso32_rt_sigtramp)</span>
 		return 1;
 	return 0;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



