
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[33/43] x86/mm: Move CR3 construction functions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [33/43] x86/mm: Move CR3 construction functions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2017, 5:24 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171124172411.19476-34-mingo@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10074457/mbox/"
   >mbox</a>
|
   <a href="/patch/10074457/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10074457/">/patch/10074457/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2A0AC602DC for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:25:38 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0FF232A224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:25:38 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 04C232A288; Fri, 24 Nov 2017 17:25:38 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 403682A224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:25:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754090AbdKXRZe (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Nov 2017 12:25:34 -0500
Received: from mail-wr0-f196.google.com ([209.85.128.196]:33984 &quot;EHLO
	mail-wr0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754070AbdKXRZ1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Nov 2017 12:25:27 -0500
Received: by mail-wr0-f196.google.com with SMTP id k18so16002148wre.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 24 Nov 2017 09:25:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=GM510kgthUuqO3XScKX2DfawjXIZKUCAJj5ERbbHQjg=;
	b=VQNs8feSfpEdMdwwmTGfD9nRXcJ0tSp13EcXHkWQpR4urzZgtB/CG89jIl/Jgoqzyp
	Q4ETDGzgoP3JxL7nDWdWcv9pJORAm/BbsQRd+u0N/+P3lkJHoSzqHXyUetXNqm5cFyXI
	UpjJrZXRkS2RbyqI6IjwBOtjzLf0aUvwxNxbIGJAhbB1V/LpbKsXeJb00KjM9qLK8Jgr
	8TDqLyXRso/J8vU5o7RZ2HLSjPtLisZfQ4dUvKhSerCXeBERmq2/Ju92J16Ku/voBPDq
	+DL/E1xrrgLgHTArjh3Wh1JY/bAqaWMwwEuZlQM/VB9FrT9H4M9/ivbjg9hIx4M57zY8
	DUWw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=GM510kgthUuqO3XScKX2DfawjXIZKUCAJj5ERbbHQjg=;
	b=Z/EyF7HdjtVHUNNyvLWfNGWgAMWGLSWMSr9bq187H09GJNim+3pWU6psW6IehRGAn9
	3JqqDLM4Lse9cWSvK3A++rrCdes+TvVgebOH1rWuPHIfCRvIelZ6oaxamndOKO9OyqNS
	jJ62zuvUWWZ7HytroWmZdnRCIqiJ1xWiBRGnZAc832jKrKx3vBJm6nV3ZYIpn0kxGpjL
	z17uKDS1EVIX/xo1SwCaUxvn2QSBmxRSY56WIsVp6qhTfLdK4yHeHn99togjrXKDpR5R
	tzSVdWmP5Q0yCqyeOG1J8ozyzNg2+QQEC+6veeb107odnGBK/ZZAE4tptF/HYmfBLWEy
	XhXA==
X-Gm-Message-State: AJaThX5U2Ezwz6oUMQHXVdzHvSGn9KnAAq6z8cDpWO5mj0p/DXVYn5n7
	fwFhngsFGNPLsGtEjougTkrYYg==
X-Google-Smtp-Source: AGs4zMZ12TX7F2CvI+1LXx4KIJ3sjdS/UpmX3xCRlkoz+leSHatYRJjQU7aFHAWaTb0gm0fX03RWHg==
X-Received: by 10.223.195.136 with SMTP id p8mr24087040wrf.4.1511544325644; 
	Fri, 24 Nov 2017 09:25:25 -0800 (PST)
Received: from localhost.localdomain (2E8B0CD5.catv.pool.telekom.hu.
	[46.139.12.213]) by smtp.gmail.com with ESMTPSA id
	y145sm4603992wmd.40.2017.11.24.09.25.24
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 24 Nov 2017 09:25:24 -0800 (PST)
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 33/43] x86/mm: Move CR3 construction functions
Date: Fri, 24 Nov 2017 18:24:01 +0100
Message-Id: &lt;20171124172411.19476-34-mingo@kernel.org&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20171124172411.19476-1-mingo@kernel.org&gt;
References: &lt;20171124172411.19476-1-mingo@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Nov. 24, 2017, 5:24 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

For flushing the TLB, the ASID which has been programmed into the
hardware must be known.  That differs from what is in &#39;cpu_tlbstate&#39;.

Add functions to transform the &#39;cpu_tlbstate&#39; values into to the one
programmed into the hardware (CR3).

It&#39;s not easy to include mmu_context.h into tlbflush.h, so just move
the CR3 building over to tlbflush.h.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: daniel.gruss@iaik.tugraz.at
Cc: hughd@google.com
Cc: keescook@google.com
Cc: linux-mm@kvack.org
Cc: luto@kernel.org
Cc: michael.schwarz@iaik.tugraz.at
Cc: moritz.lipp@iaik.tugraz.at
Cc: richard.fellner@student.tugraz.at
Link: https://lkml.kernel.org/r/20171123003502.CC87BF47@viggo.jf.intel.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/include/asm/mmu_context.h | 29 +----------------------------
 arch/x86/include/asm/tlbflush.h    | 27 +++++++++++++++++++++++++++
 arch/x86/mm/tlb.c                  |  8 ++++----
 3 files changed, 32 insertions(+), 32 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index 6d16d15d09a0..5e1a1ecb65c6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -281,33 +281,6 @@</span> <span class="p_context"> static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
 	return __pkru_allows_pkey(vma_pkey(vma), write);
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="p_del">- * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="p_del">- * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="p_del">- * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="p_del">- * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="p_del">- * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="p_del">- * deterministically.</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long build_cr3(struct mm_struct *mm, u16 asid)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (static_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_del">-		VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_del">-		return __sme_pa(mm-&gt;pgd) | (asid + 1);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		VM_WARN_ON_ONCE(asid != 0);</span>
<span class="p_del">-		return __sme_pa(mm-&gt;pgd);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long build_cr3_noflush(struct mm_struct *mm, u16 asid)</span>
<span class="p_del">-{</span>
<span class="p_del">-	VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_del">-	return __sme_pa(mm-&gt;pgd) | (asid + 1) | CR3_NOFLUSH;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /*
  * This can be used from process context to figure out what the value of
  * CR3 is without needing to do a (slow) __read_cr3().
<span class="p_chunk">@@ -317,7 +290,7 @@</span> <span class="p_context"> static inline unsigned long build_cr3_noflush(struct mm_struct *mm, u16 asid)</span>
  */
 static inline unsigned long __get_current_cr3_fast(void)
 {
<span class="p_del">-	unsigned long cr3 = build_cr3(this_cpu_read(cpu_tlbstate.loaded_mm),</span>
<span class="p_add">+	unsigned long cr3 = build_cr3(this_cpu_read(cpu_tlbstate.loaded_mm)-&gt;pgd,</span>
 		this_cpu_read(cpu_tlbstate.loaded_mm_asid));
 
 	/* For now, be very restrictive about when this can be called. */
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 509046cfa5ce..df28f1a61afa 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -75,6 +75,33 @@</span> <span class="p_context"> static inline u64 inc_mm_tlb_gen(struct mm_struct *mm)</span>
 	return new_tlb_gen;
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="p_add">+ * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="p_add">+ * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="p_add">+ * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="p_add">+ * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="p_add">+ * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="p_add">+ * deterministically.</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct pgd_t;</span>
<span class="p_add">+static inline unsigned long build_cr3(pgd_t *pgd, u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_add">+		VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_add">+		return __sme_pa(pgd) | (asid + 1);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		VM_WARN_ON_ONCE(asid != 0);</span>
<span class="p_add">+		return __sme_pa(pgd);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long build_cr3_noflush(pgd_t *pgd, u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_add">+	return __sme_pa(pgd) | (asid + 1) | CR3_NOFLUSH;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_PARAVIRT
 #include &lt;asm/paravirt.h&gt;
 #else
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 3118392cdf75..e629dbda01a0 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -128,7 +128,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	 * isn&#39;t free.
 	 */
 #ifdef CONFIG_DEBUG_VM
<span class="p_del">-	if (WARN_ON_ONCE(__read_cr3() != build_cr3(real_prev, prev_asid))) {</span>
<span class="p_add">+	if (WARN_ON_ONCE(__read_cr3() != build_cr3(real_prev-&gt;pgd, prev_asid))) {</span>
 		/*
 		 * If we were to BUG here, we&#39;d be very likely to kill
 		 * the system so hard that we don&#39;t see the call trace.
<span class="p_chunk">@@ -195,7 +195,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 		if (need_flush) {
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].ctx_id, next-&gt;context.ctx_id);
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].tlb_gen, next_tlb_gen);
<span class="p_del">-			write_cr3(build_cr3(next, new_asid));</span>
<span class="p_add">+			write_cr3(build_cr3(next-&gt;pgd, new_asid));</span>
 
 			/*
 			 * NB: This gets called via leave_mm() in the idle path
<span class="p_chunk">@@ -208,7 +208,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);
 		} else {
 			/* The new ASID is already up to date. */
<span class="p_del">-			write_cr3(build_cr3_noflush(next, new_asid));</span>
<span class="p_add">+			write_cr3(build_cr3_noflush(next-&gt;pgd, new_asid));</span>
 
 			/* See above wrt _rcuidle. */
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);
<span class="p_chunk">@@ -288,7 +288,7 @@</span> <span class="p_context"> void initialize_tlbstate_and_flush(void)</span>
 		!(cr4_read_shadow() &amp; X86_CR4_PCIDE));
 
 	/* Force ASID 0 and force a TLB flush. */
<span class="p_del">-	write_cr3(build_cr3(mm, 0));</span>
<span class="p_add">+	write_cr3(build_cr3(mm-&gt;pgd, 0));</span>
 
 	/* Reinitialize tlbstate. */
 	this_cpu_write(cpu_tlbstate.loaded_mm_asid, 0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



