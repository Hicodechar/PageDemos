
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v7,25/36] swiotlb: Add warnings for use of bounce buffers with SME - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v7,25/36] swiotlb: Add warnings for use of bounce buffers with SME</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 16, 2017, 6:54 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170616185435.18967.26665.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9793263/mbox/"
   >mbox</a>
|
   <a href="/patch/9793263/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9793263/">/patch/9793263/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	46F5360325 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 18:54:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 399F42865B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 18:54:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2DC0B28670; Fri, 16 Jun 2017 18:54:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D69D2865B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 18:54:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752852AbdFPSyx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Jun 2017 14:54:53 -0400
Received: from mail-co1nam03on0079.outbound.protection.outlook.com
	([104.47.40.79]:9132
	&quot;EHLO NAM03-CO1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750797AbdFPSyo (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Jun 2017 14:54:44 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=F+jMwYkBA3bpANX2UJ4+P6u4nVLHmlNhe8V914ikmH0=;
	b=Sp5iH4xJVEIlMpYYry+HRaPFw9TAwB102ztvIkd33MUV5FHUPlZI5NTJn2G+NPlzekWFUttarrXcGytb5Y/8QlpSiBtUgQKi41sKJ0CEc5toSbgblhRx9GzkwPp480tKmG+ZRxFHcC9V6Uo8LzlISXHcUQo45ZYQ2hp77sfcU/0=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	CY4PR12MB1141.namprd12.prod.outlook.com (10.168.163.149) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1157.12; Fri, 16 Jun 2017 18:54:39 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v7 25/36] swiotlb: Add warnings for use of bounce buffers
	with SME
To: linux-arch@vger.kernel.org, linux-efi@vger.kernel.org,
	kvm@vger.kernel.org, linux-doc@vger.kernel.org, x86@kernel.org,
	kexec@lists.infradead.org, linux-kernel@vger.kernel.org,
	kasan-dev@googlegroups.com, xen-devel@lists.xen.org,
	linux-mm@kvack.org, iommu@lists.linux-foundation.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Dave Young &lt;dyoung@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Date: Fri, 16 Jun 2017 13:54:36 -0500
Message-ID: &lt;20170616185435.18967.26665.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170616184947.18967.84890.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170616184947.18967.84890.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: MWHPR1701CA0009.namprd17.prod.outlook.com (10.172.58.19)
	To
	CY4PR12MB1141.namprd12.prod.outlook.com (10.168.163.149)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PR12MB1141:
X-MS-Office365-Filtering-Correlation-Id: adef362e-0566-432d-370e-08d4b4e9259e
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(48565401081)(201703131423075)(201703031133081);
	SRVR:CY4PR12MB1141; 
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	3:lOhRE5KrbjlKiyJLCYDb5yEcan8PYj6U4Kw+2IBhMSBzq6mPRBry6z2sRcmDNHRtXubVCDH3zKsof/odlrq/aFvO1N0XBQN4pADeJgWXQYjPhLxTAA29LVmt9OjoqhxZFJstXbtRVyZu6eLZhBOq5Iy4yEkjFM3xFFUdfEO0nErXIB/mRj8ok3FEUDOENupdMO5pnEPOj0abTe/6hK0ksTrbmQrAYTHvfWgivqiWE3jzF+IzdLRWqNe0eyDYPy44NMx8+ipY7WKNxXrqt/+koQMUACXFQx2n5qtEKcmXshq83N5rjTBKbqpFGujrzUaa6UGw2QcNpTZa0PVKDLQjAPg+UZ2zSAPjKomaC4392/s=;
	25:zbfinA7TxRLLFqHXX98l8WUKXU0sTjRk6NgksmD56ranFbWroYzQuo2aPV8bZzQwRlhfwEnpy/weWQQ50SEJcchV5SdmgSFQ1ZILCTz9No+s8+c7tBpCr3kWE79jlODw1OLeAJJB9jc8XCA+wVby2Msi/O6LrIH4xQ/PQbNeVAearOfgKbh8w8cC3ImxHGMor9yiHMX2/16/vVgUwaBePon4irUQWXHwtysdJtOUBaWYq3frvW1VWwVwA7OJCDiaVpaLkRSGcglH76TYgp8kQ5Uuo/pB6IZU5dm11T+sgF3PVF4T20s4POayonAluiG4bdx+2SMZrvASI10UHvKS20RAAig2Q8IS41/rNZEVMB1LB7VbdEyxZABVJTTkSIOMUJvFZAugLhlWz6itZE+UZrHRwtiRZrJ+XKECS3EgQuekz1hfdNgJ7fTOZuD2ljykBuiBhzvoGhsRcoPl0iX+wgf33LRUJDKp7GPexpt/EV8=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	31:4Xmbgo9GWInOpgNrEkfXPEDc5Nu5PirALI8RoY9kh+2nzbgW3/Ut1sLcEAMVdJNXbcjpDdN96tADJ/Vcu+NkVljMDZ6sZ6l3fcsYsJuAJtZOEeNEdx/bXmBBwrOITRlEtEUxpPo0bbTIN/8vWDtJYrLL8n/o+AXFYOhI+b8xyrd9R/btwhGOyHe8iaRkYDwEzk4yxAZuGY3/RmGGHYnyEf/2nTrUePW/hsPElViyLUY=;
	20:hF0xikAJakweCja9dxab/9DEKsa0hGCWXaUoeP0i8+W9dJ0EKG2XzM9AT1ZDss4JGlI5v2WCziiMK6hVYK43tvJKMV8zNg6idJDRtKO3RJ1wQtugLXuc/8uRO8dC3/tJBwWS+4AavnnDwdiIlKcdRW2oXP9KvVA5xC3o0F8w5X829Ox1L/7dNI3PZzTPewuhze5ybnk6GoWdIDKCbbhlRRMMDp2lljUZbbGc8py/zu5TfB5WJTEstw9wVmRiWyVvgpX79Owxkb6kqNVR9eAloVC7u2ZLb8acz3eMAH2H9n+vWq9VmBXs2d1fy7lf+E5TLzcfEKyTWsjjx+ebZ5G+VcbrCUUSsFZ3L8PaCOTR72Ui8D2D42jZoCS/WV7IHhnFEV2QdLOe4HVMxrIAulvij59KsEiupdiQHmZB6iQquZ2TrFFveWh5/wPPCvwD7vdeHsg85+ptDTixzHKi98icrgwOCZhW/7M1uVF4JZY3jUrQcKk6iHEXM3qLpbKypnrZ
X-Microsoft-Antispam-PRVS: &lt;CY4PR12MB114164DD063A69E405A83E0DECC10@CY4PR12MB1141.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(100000703101)(100105400095)(93006095)(93001095)(6055026)(6041248)(20161123555025)(20161123564025)(20161123560025)(20161123562025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY4PR12MB1141; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY4PR12MB1141; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQxOzQ6d2JnTVlZcUg3QWM3dVgwNnlqbFNqWjdJbkI1?=
	=?utf-8?B?TTVlWXlneHlGaENuL3Y0R2lUdU9HdmRWNWM2c1k4dzgzYWFKWXhJcWJGajg4?=
	=?utf-8?B?TGVjTDUxelJadTZXMmtBbzJpUkYzVS9PcUFQSzBzazNiRElRbUNLMkd3bnBa?=
	=?utf-8?B?WWpFQ1czdzBIMEdLOXdmK0h2Wno5aTB0Z2FNQ2VrUjlQNzRCR3pKQ0xBNVJ0?=
	=?utf-8?B?WXlZVW1BNldqZm5wMjN5Sy9yYit3eXByc1NyZHJzQlNjbW9qbTNnNGltdEdx?=
	=?utf-8?B?c3pmYzlmRm9PU0d4UGpsblNDbWNydUFvTnZBUW5yNElMM3hJdFlPTDBYY21p?=
	=?utf-8?B?YnFmbnE0enJHS1dBOTc1S2ttbEdLdjQzYzB5MnV3NFZ5ZjlVbGdMYTBBQmdV?=
	=?utf-8?B?L3hvM2c1NUltYVZ3WURNZDNTSlR6SmEwL01uTWUwb016cDBDbVBFNUNydE1j?=
	=?utf-8?B?VS9tcmdFNEREMmN6SXBWSFFaWkpieGdpOG9xbE15d2hIZVF6NVBwTm1pUWY1?=
	=?utf-8?B?M0I1Zlc2R3BKWjlwTm1BcWVQQTRlVStFNkhYdURCY3BjRHBKM3V4R3AyVm9p?=
	=?utf-8?B?dHNvVE1LTXU5OE9zMW5FQ3pNNEZoZEpvSWFXSEkrdnlpcTk0NmRtWmxxcTNK?=
	=?utf-8?B?NWwrZFA3VmFvUHlaR3BmTzVkL3ZZQkxzZzIxa1BsejR5V1NpU0YvY3dLVFdj?=
	=?utf-8?B?bHdtdU16M0RjTDFEQkFJaXFSQW4xMFdld1hZZ0c2OG85MDdiV2xIQWhYaG1H?=
	=?utf-8?B?eHdBa3lpUE1KNVhTaDQ2Zm0zRi95aFlENER2OHJOSjBxbW41VWxhNEk3eU4y?=
	=?utf-8?B?TFQ4L29ZdmdaT2tUb3FvdFB3U3ZMYU1Pd2x4bkUwNjBsZ1Z0MlAyU0lPOU5Z?=
	=?utf-8?B?MzBxQjRXcTk2emlnSnNtV1l4eEI1c0Z3RFA2M1l0N1hGaWwrT2hBVTBNMTlm?=
	=?utf-8?B?THN6V0JGNk9GSXhFNWtobTl4ME1TVkoyUWNpMWxiVmZ3a0VHVmR4d200c1l4?=
	=?utf-8?B?ZXdqTHh5OGtWWHlZRGVVc2lwRlIrdmZJRnVVR3lYaUM0UVJUanFJOElDclZw?=
	=?utf-8?B?N3FacXEvYSt2Q1BzQWJEMjdtQWdqTGxzVEtzZi8yVnFXdmQzSDRiYVo2T1JZ?=
	=?utf-8?B?MFFRRjlqZ2hhd3pMNnpsMVp4czJLbHFQSTZualZMM3pyUVB5WTZhK1J1U2pD?=
	=?utf-8?B?T0Jhd2hpYjFoa3VuMmNBbnh3MXhZb0tvbDMwZ3FmMUsrMjRwY0tweXJTYVdZ?=
	=?utf-8?B?TUJ6NkJueksxc0tOWDI3Q0VNM0ZFRmtZT0pPQXJOSGkxUkEyOFpZOTJGYVVM?=
	=?utf-8?B?MTM0RnlaYWJMbmJnYm9RS2k4MTJsODl5MSszVWVwWmw4R0lPek00WjVyNkZW?=
	=?utf-8?B?Wm4wNVVBZXNIL0dZNFVuK2JxNE53RW13QWFKSmFnSlRWcEd0Yk5kRVFPQnBO?=
	=?utf-8?B?ODRuckxZd3Q4dFNaZm5VUEZYdGk4YTJpWDY0Vk9UcWZMeG5RL2d0dEIxMzZz?=
	=?utf-8?B?MkJqTTBxcmpkdHdjWFEyQ3h1Z3p5WVh3VGF5R0x4UHNIWjA4elpPRzBMNVp5?=
	=?utf-8?B?bFYvL01qaTAzcDgxRFFYNFpNckhWaXJuWXhIVmZuT3E2VkZTNFVaMnZ6c20w?=
	=?utf-8?Q?EwyWcp+ENhog4paMLPp?=
X-Forefront-PRVS: 0340850FCD
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39850400002)(39410400002)(39860400002)(39400400002)(39840400002)(39450400003)(2906002)(23676002)(33646002)(103116003)(2950100002)(230700001)(6666003)(9686003)(66066001)(3846002)(6116002)(47776003)(72206003)(53936002)(42186005)(53416004)(55016002)(50466002)(7406005)(54906002)(7416002)(38730400002)(110136004)(478600001)(8676002)(81166006)(86362001)(76176999)(6506006)(50986999)(305945005)(54356999)(4001350100001)(1076002)(5660300001)(7736002)(4326008)(83506001)(25786009)(189998001)(921003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY4PR12MB1141;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQxOzIzOk1CNXkya0ppS1o3ZWFjNVRvdnp6bXEyeDY1?=
	=?utf-8?B?dGw5Qi96N3d2alA1K2R2UUZ2MHdCZG1IV0pqdXhUNjNwU3pBZWJGeUcvUDAx?=
	=?utf-8?B?R3N2TEN2UDdaYll0WHAzM2lpb0x3RVROWnVvRzZ2STJlMkRkcHlJOWZmWHY3?=
	=?utf-8?B?Y1hjUHcreUNhOC9VVThFanoxZTlwbmVWeDNLQXd0aDFiVzE4bW5UVTNZZThq?=
	=?utf-8?B?VS9wQVRHdUtSUW50aTZ6b1R0clhISEVQWEhlM2twSFlsY3ZCay9OTDVrakxw?=
	=?utf-8?B?dmRpc25jVVYrSjhvQWJRVkVpbjB5czBNNkFtOEdCQkN4MCtuS0lQeEloUVps?=
	=?utf-8?B?N1R5QnExVEozUStKS1VVb2JoeUpSR0N5OE5tNlMrY1gwSldoNU5LMmswTi94?=
	=?utf-8?B?NlhvVE0zZFRoUnovTk9HWXl0Z2I1R292ZjY4eUhicEF0Z1NYVTNGK3RxdGFJ?=
	=?utf-8?B?OGRVc09teFVqOHVZZmlBUTlLMWo2ci9sNHgzYjN3VlcxR25HV1dUNWJwbjJH?=
	=?utf-8?B?RXBLV2FVNlpET3JEaG1Pc0RrUXhHVHllTExSam1QVjZ1U2M0TWRmUG4zeDVN?=
	=?utf-8?B?all4VVBPa0hTNGpMWThSNjY2R0VRQVVWM01sSnFBdFBkdEFQRnhSSEVFV3Mv?=
	=?utf-8?B?OS9IN3FkMlFMQkowRDdVOGxVMENIN2s2ZzZMSzFmdGptTFRFejNBb1FYNitH?=
	=?utf-8?B?YWU3NnVBMUdsTHhhS0xEMlVtbGJ6d1pMakR6SytwM2RIM2thaVVZSmFSOG90?=
	=?utf-8?B?TXVyK25rb1dJQnBZTnhiYTVBK0VVYmxOalY4N0lSd3EvTnhVc01RQlBVVEZa?=
	=?utf-8?B?NWZTMXlWWXo3S3dnMHNBVUpKN1RmbDd0Q1A2RDNlRFR5cGJhUnMwRzJXU0Jm?=
	=?utf-8?B?YUJMRWFhRkRWaHNRRGlMTFBUQmRSRHRoRjZHVTE4TVdydENUWHdnK1Fzbmh0?=
	=?utf-8?B?aDZqN29IMXlQcGNHRlJCQzFwYXR0Q1g0dHdOTnBQcHZnL3l4TktkRGg2UlRB?=
	=?utf-8?B?UjFhbXJ5MkVyaW05Z3NzRXk5Uk1uNjNLNWJqOWlPNDlJcU9FSjNuYjBGSTJP?=
	=?utf-8?B?dzdnam5TOUxqc011UnBRRzFvMnl0aDlqRWZqVXQ2d0hJY2xROWxiQTBpUzYz?=
	=?utf-8?B?N2s5RHA1R1BiaUQ2SzJUdWEyWm03dnNTTGFtMC9LVTlVYUxJZk5ZL0RBMUlI?=
	=?utf-8?B?em1mQzB4emRJUWZ2cE5OSGtIYjVZZkU1TmZDalpJUnZ1Y2lkYkNHRTU3QWFr?=
	=?utf-8?B?Y1Ixd3ZFaksxc3gzMlBsZDhmZXJiTGdSQnYzNlBIcis2QkVKRGRHMU1GcUZJ?=
	=?utf-8?B?WVZ1cmxyVzNmeXZJRXNpRkZGSHNhVUxpdXYwTUVxcFRkNDJDRk5DZEZTUVFI?=
	=?utf-8?B?WDd0b2NkZ1ErQ3IySjZvYnFUTlFac0dWTUpkc2FERC81aU5UUmZvbkhBdUR6?=
	=?utf-8?B?ZUNMUTYvS1piV2V4MEFjWG84Q080dlpBZGtQSk9GKzk2RmdOY2xLT2gyejZP?=
	=?utf-8?B?Qm1sT0tQeWRxLzd5Z01IZkdsZUxhTFZBQ3oyMDhYT0NqNk9STzY1bklDalVx?=
	=?utf-8?B?K0NBcHlUNVNtMitaWGlEaDNHZWx5QThDOTFEMjl0NDFLeE5wakdtSit0TFBr?=
	=?utf-8?B?UnY5OGx6NzcwUWpYMjVsWFhxTlZLVG1SUWdKTE5KY3ZVazZSajhFdlh3PT0=?=
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTRQUjEyTUIxMTQxOzY6ZDZnSHNwRVlqUWM1ekhXS3FjejhlaDRlZVFS?=
	=?utf-8?B?RlZqUWxvUVVwa2tQKzJaQk8xdkR1K1hqUTU5L28wZGNTRG91UkU5QWk3M21I?=
	=?utf-8?B?R1JLUkZ4anpTRkVDOVF1L0x3eVZRd1VsUVJqRThlNGhHbDNuZ3h4SHJ5T3Ur?=
	=?utf-8?B?TU91WlpQY3JjUjZrMEkvSUtRdHRVOEFpajRFMVk4V0ZMeHV2a1BsTXluNDNn?=
	=?utf-8?B?OU4wai9QUURBQ2QvZUxEdmZSNHVxcVZSTzNvRFFMNkFDQ0dLWmFOU2FQZ2Jp?=
	=?utf-8?B?UTJtcUtPakgrWWMwZzR6T1NTcDlaV1Zoa2pLN1d4NDhOcWh6YXAwTktWQnh6?=
	=?utf-8?B?WVE2cjI2alpuK1ZSSDV2VHFJcE80N3VEcm11N2p3cWlSdStuZjAvYXcrOGJa?=
	=?utf-8?B?SjZKcTN6cnFUYjhKT3pVZzJFLzExY3czZjVCcjc5WEVOakViZXZQc2ZvUTND?=
	=?utf-8?B?NUZ3TXdNR3RRQkFQUlpyQmR1NmdCTUJXMTZuVDRZYkRDQlBjTUJnT1VBUk5h?=
	=?utf-8?B?R09wWDJ2bnVuRUJ2VmZhNXM4OFZMRHcwZVJmR2ROT3BYcmxtcjZoQ01FQXVQ?=
	=?utf-8?B?cFVWYWsxV0Y2MnUybWkrNHVKclVMbTZPejc5eHhUa3FpZC81dXFwc1dRclJy?=
	=?utf-8?B?aTZYdVYyaWNwNTl3ZWwrQnAxRVVaVEx4cCtuY3RjWS9tSDZSRmhzNVBDbG4x?=
	=?utf-8?B?OTAxN1l0WGsveFVmc3hWTUdkblZ6NG5UUitLdnM2ejM2b0pxa0hvU0NlNDF6?=
	=?utf-8?B?c0Voc2dObzdJbGY1dzhMdkZRRkZkd0tLM01tQVoxRWo0S0tKRFBkMEtQb2RP?=
	=?utf-8?B?empOa2d4L2dZbC9XTCt5Y3VWU1pLL29EaXBjWVljNTdpQmVVcnN2amVuRHpa?=
	=?utf-8?B?aHJHcG96RWxxYWV5a2JiaGNFYlpqNGhHd1pPUzNON0FwQlBvOEVPMEtaVVBM?=
	=?utf-8?B?OEFPckRJaXpGdTZXZHNJeUw4amZLaUxKd1REd29RWDFOK0p0a0o4TTYxU0F3?=
	=?utf-8?B?UDdoUXFKSW9FM3RWZG9wRW1EN2x2RkVRNktVTm5pMEFZQnI4aXI5d09EeHQ3?=
	=?utf-8?B?L3VLMmNaMzRnWTV2RWZEUTk5NlJ2SzdSeTNLblJDam5DVC80eFo5eG1ZMlNs?=
	=?utf-8?B?bm1zeW9WL1hmK2V5eGY5ZWQ2Rk9SSmp1RnkvdmY4NzZQZVdPOFBGa2N2T2ZI?=
	=?utf-8?B?bkw2d09aWEx6dVNjVG1HRWN6Q2k0WktxR21DUkdQaGVxNVBEMlllN3QyZW1X?=
	=?utf-8?B?My9GUUdkV29VTWRXNHA1bnJSKzBGTnpJaHhrSkZXamY4U2VQMW1DZG54d3M1?=
	=?utf-8?B?dTM4aDJEbk1aUEhEWURiYnh6NHhFcFlBVWZGeU1ybUdLL3Zib1A4RnROVzNF?=
	=?utf-8?Q?KdvZoER?=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	5:OebrXhdnZX7JXHjCGokTCLCuZGsou7gWaxxg+c9Isi+44pu7P5F18vIu3q+a3Mmc81QQCUNa9UCqDWrwg3H+1ash7NF/cGONiEzgJMp5IoVbH5h9N3ex1Tfb8LBg0DGpNbD0hKjFhD2qny9bqKAvoOvd1HeKcJvY8ufAwAXATBrBQkwFafNiUvE8/+hy90Kn6MNPFcaQD7xH687GITr+q9kEGb3/Te55cgFS5fhsFTC/La2dz3QR8TH+mWXqgtHfMDhcvXYIuIKRNhRhhuPLVQCJrM/EtIIVi2XDaWxq222WKAliYWAkn8MMs8ghY2YGZBlqwltJOUTknna3kZfRmYP/AxP80mhc3vyHNAjnvx00rKGKX8Uo3hrEK8MqEOIW6GqVk63F0USXs/qbe3bE/oWqnVyibmulBDdKAkFkwefS9/jiFG202Al0obhubLvqZyXAwy2Y62z0zQvqSWiWHz3nB2D5JU2fKPNFbcO3kL/TnyVaT3LIOM99x7etsqYj;
	24:aHQEY+OiepFuZoexYW8qU7ln/2JReB3jGyp0E3KhYENagwd+kQaw5RqEAy7w2R8L2qJkie9N4EyoX0AlowCj03KPE4rk/EYq5F5OOKT3GFw=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	7:AdEI30VM5zQTnMr8EUpxx9rewbggzUy49iRA1CYtdjdlocXL7TzKDoo02iaXtSq3tVtlMVpLJs/UdplvzBpfTB+R359gi0LyY/rzXozaCfa9lZqFhnb3mugZCIoaJrl82CPHQdB/qcNckNki4YyvmiIpdZ2Kpqd741Dvs6jAz9LmP+s97yQsKpJQ31M0nu4Ys9EcG+f/wpcXJt2vHSD54B7nZ4t9OxtFJuvqyVMMfniRY3PDGaMGH36K/aZ6PN9so/VVKj/W/+GeHYjraPLXmOiPHiroU06UbvwTQbsSNXPGjmWI/p8mFNmrh7oiBELAX4GbtKKTmpBgp4TIH/6vdsQA44FaRInxjijI0FuvekmDOvtx9Udn7WB4RG6Um8nXNXU2gX26XwOoFuKGAsJGxcS19B5PkN4QnWRmFsCKyMWORG7Q54+BPK6Yil6HrtJqYEd3DLjXojq+YFy7vI6AZXDPop+Z6JVSCnwUKlGBYNcA4fcRGfbjyXnT9u7Hz3ZBQVCC/JD09i1jjJDqwpzn0f7TPHKu5KJ0L2ckQCMQcRSN8xl7hPw1AKlTKljOn+zMUMrEOcOO7N4E7cJ62A9Qy5dhCYKv+koeRY3CnvArSV4dzTXCKyCtMkBZoQk49UfODvJZjO4ICmUcVQ7cMBhlTJPEGyESn/UdDuL1E5nsk/xEkel+sajfJ//pjytfvlQPljLdtClMIEJxJRimAfgvwt8RDxhv+MHK82yPTXRsubw9igxdCRH6M1U9OypAdmROGsnjuV39EcphryXoP+pSmeyTS06WGFO4Pkbx1seu8xA=
X-Microsoft-Exchange-Diagnostics: 1; CY4PR12MB1141;
	20:Gus3aqjeE3w+gpAiUopuwp9LpsI3qFuCR0iWn99yi0hELjRm04lT1Bdyh99GdfDEPPdh9SbcOXbz9AnxiYhrR7REkdWs4gfJLXVRSAWaBgW/oQYgkqr94jJ0qzVHnQQcCSFCiQGqhL5yUa87z3xZ9dS1+tjXECyM5B/dWVoADw3FFT8AsU+R49nlsDaarOFAwZy0GeKvvz7JpYg9Z9I7dtRRhpokLVVKse3XQemd7lYxDg7doIHqf6b1hsyA7KDF
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jun 2017 18:54:39.0074
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1141
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 16, 2017, 6:54 p.m.</div>
<pre class="content">
Add warnings to let the user know when bounce buffers are being used for
DMA when SME is active.  Since the bounce buffers are not in encrypted
memory, these notifications are to allow the user to determine some
appropriate action - if necessary.  Actions can range from utilizing an
IOMMU, replacing the device with another device that can support 64-bit
DMA, ignoring the message if the device isn&#39;t used much, etc.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 include/linux/dma-mapping.h |   11 +++++++++++
 include/linux/mem_encrypt.h |    8 ++++++++
 lib/swiotlb.c               |    3 +++
 3 files changed, 22 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 21, 2017, 10:50 a.m.</div>
<pre class="content">
On Fri, Jun 16, 2017 at 01:54:36PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt; appropriate action - if necessary.  Actions can range from utilizing an</span>
<span class="quote">&gt; IOMMU, replacing the device with another device that can support 64-bit</span>
<span class="quote">&gt; DMA, ignoring the message if the device isn&#39;t used much, etc.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/dma-mapping.h |   11 +++++++++++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h |    8 ++++++++</span>
<span class="quote">&gt;  lib/swiotlb.c               |    3 +++</span>
<span class="quote">&gt;  3 files changed, 22 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; index 4f3eece..ee2307e 100644</span>
<span class="quote">&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt; @@ -577,6 +578,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="quote">&gt; +	if (mask &lt; sme_dma_mask())</span>
<span class="quote">&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -596,6 +602,11 @@ static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (!dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="quote">&gt; +	if (mask &lt; sme_dma_mask())</span>
<span class="quote">&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>

Looks to me like those two checks above need to be a:

void sme_check_mask(struct device *dev, u64 mask)
{
        if (!sme_me_mask)
                return;

        /* Since mask is unsigned, this can only be true if SME is active */
        if (mask &lt; (((u64)sme_me_mask &lt;&lt; 1) - 1))
                dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);
}

which gets called and sme_dma_mask() is not really needed.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - June 21, 2017, 3:37 p.m.</div>
<pre class="content">
On 6/21/2017 5:50 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Jun 16, 2017 at 01:54:36PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt;&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt;&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt;&gt; appropriate action - if necessary.  Actions can range from utilizing an</span>
<span class="quote">&gt;&gt; IOMMU, replacing the device with another device that can support 64-bit</span>
<span class="quote">&gt;&gt; DMA, ignoring the message if the device isn&#39;t used much, etc.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   include/linux/dma-mapping.h |   11 +++++++++++</span>
<span class="quote">&gt;&gt;   include/linux/mem_encrypt.h |    8 ++++++++</span>
<span class="quote">&gt;&gt;   lib/swiotlb.c               |    3 +++</span>
<span class="quote">&gt;&gt;   3 files changed, 22 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; index 4f3eece..ee2307e 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   /**</span>
<span class="quote">&gt;&gt;    * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt;&gt; @@ -577,6 +578,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;   		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="quote">&gt;&gt; +	if (mask &lt; sme_dma_mask())</span>
<span class="quote">&gt;&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt;&gt;   	return 0;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt; @@ -596,6 +602,11 @@ static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt;   	if (!dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;   		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="quote">&gt;&gt; +	if (mask &lt; sme_dma_mask())</span>
<span class="quote">&gt;&gt; +		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Looks to me like those two checks above need to be a:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; void sme_check_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;          if (!sme_me_mask)</span>
<span class="quote">&gt;                  return;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;          /* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="quote">&gt;          if (mask &lt; (((u64)sme_me_mask &lt;&lt; 1) - 1))</span>
<span class="quote">&gt;                  dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; which gets called and sme_dma_mask() is not really needed.</span>

Makes a lot of sense, I&#39;ll update the patch.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="p_header">index 4f3eece..ee2307e 100644</span>
<span class="p_header">--- a/include/linux/dma-mapping.h</span>
<span class="p_header">+++ b/include/linux/dma-mapping.h</span>
<span class="p_chunk">@@ -10,6 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/kmemcheck.h&gt;
 #include &lt;linux/bug.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 /**
  * List of possible attributes associated with a DMA mapping. The semantics
<span class="p_chunk">@@ -577,6 +578,11 @@</span> <span class="p_context"> static inline int dma_set_mask(struct device *dev, u64 mask)</span>
 
 	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="p_add">+	if (mask &lt; sme_dma_mask())</span>
<span class="p_add">+		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	*dev-&gt;dma_mask = mask;
 	return 0;
 }
<span class="p_chunk">@@ -596,6 +602,11 @@</span> <span class="p_context"> static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
 {
 	if (!dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	/* Since mask is unsigned, this can only be true if SME is active */</span>
<span class="p_add">+	if (mask &lt; sme_dma_mask())</span>
<span class="p_add">+		dev_warn(dev, &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	dev-&gt;coherent_dma_mask = mask;
 	return 0;
 }
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 837c66b..2168002 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -30,6 +30,14 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return !!sme_me_mask;
 }
 
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return 0ULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * The __sme_set() and __sme_clr() macros are useful for adding or removing
  * the encryption mask from a value (e.g. when dealing with pagetable
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 04ac91a..8c6c83e 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -507,6 +507,9 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 	if (no_iotlb_memory)
 		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);
 
<span class="p_add">+	if (sme_active())</span>
<span class="p_add">+		pr_warn_once(&quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	mask = dma_get_seg_boundary(hwdev);
 
 	tbl_dma_addr &amp;= mask;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



