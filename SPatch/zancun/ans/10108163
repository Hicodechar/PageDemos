
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/pti: Make X86_BUG_CPU_SECURE_MODE_PTI an X86_FEATURE - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/pti: Make X86_BUG_CPU_SECURE_MODE_PTI an X86_FEATURE</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 12, 2017, 7 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171212190031.21308-1-bp@alien8.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10108163/mbox/"
   >mbox</a>
|
   <a href="/patch/10108163/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10108163/">/patch/10108163/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	76370602C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 19:00:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 677D4298A9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 19:00:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6413A2996C; Tue, 12 Dec 2017 19:00:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3A25F298A9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 19:00:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752552AbdLLTAs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Dec 2017 14:00:48 -0500
Received: from mail.skyhub.de ([5.9.137.197]:53290 &quot;EHLO mail.skyhub.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752066AbdLLTAo (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Dec 2017 14:00:44 -0500
X-Virus-Scanned: Nedap ESD1 at mail.skyhub.de
Received: from mail.skyhub.de ([127.0.0.1])
	by localhost (blast.alien8.de [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id T6tnJS8b1NyR; Tue, 12 Dec 2017 20:00:43 +0100 (CET)
Received: from pd.tnic (p200300EC2BD3FC00041C2426F60E07FD.dip0.t-ipconnect.de
	[IPv6:2003:ec:2bd3:fc00:41c:2426:f60e:7fd])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id
	140071EC021B; Tue, 12 Dec 2017 20:00:43 +0100 (CET)
From: Borislav Petkov &lt;bp@alien8.de&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, daniel.gruss@iaik.tugraz.at
Subject: [PATCH] x86/pti: Make X86_BUG_CPU_SECURE_MODE_PTI an X86_FEATURE
Date: Tue, 12 Dec 2017 20:00:31 +0100
Message-Id: &lt;20171212190031.21308-1-bp@alien8.de&gt;
X-Mailer: git-send-email 2.13.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Dec. 12, 2017, 7 p.m.</div>
<pre class="content">
<span class="from">From: Borislav Petkov &lt;bp@suse.de&gt;</span>

... to denote that we have enabled page table isolation. Which is not a
bug but a feature! :-)
<span class="signed-off-by">
Signed-off-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Andy Lutomirsky &lt;luto@kernel.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Greg KH &lt;gregkh@linuxfoundation.org&gt;
Cc: keescook@google.com
Cc: hughd@google.com
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: David Laight &lt;David.Laight@aculab.com&gt;
Cc: Eduardo Valentin &lt;eduval@amazon.com&gt;
Cc: aliguori@amazon.com
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: daniel.gruss@iaik.tugraz.at
---
 arch/x86/entry/calling.h           | 8 ++++----
 arch/x86/include/asm/cpufeatures.h | 3 +--
 arch/x86/include/asm/tlbflush.h    | 6 +++---
 arch/x86/kernel/cpu/common.c       | 2 +-
 arch/x86/kernel/ldt.c              | 2 +-
 arch/x86/mm/dump_pagetables.c      | 4 ++--
 arch/x86/mm/init.c                 | 2 +-
 arch/x86/mm/pti.c                  | 6 +++---
 arch/x86/mm/tlb.c                  | 2 +-
 9 files changed, 17 insertions(+), 18 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h</span>
<span class="p_header">index 393a5bf190b7..45a63e00a6af 100644</span>
<span class="p_header">--- a/arch/x86/entry/calling.h</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h</span>
<span class="p_chunk">@@ -212,7 +212,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_PTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_PTI</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_KERNEL_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_chunk">@@ -223,7 +223,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 	PER_CPU_VAR(cpu_tlbstate) + TLB_STATE_user_pcid_flush_mask
 
 .macro SWITCH_TO_USER_CR3_NOSTACK scratch_reg:req scratch_reg2:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_PTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_PTI</span>
 	mov	%cr3, \scratch_reg
 
 	ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID
<span class="p_chunk">@@ -259,7 +259,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg:req save_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Ldone_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_PTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Ldone_\@&quot;, &quot;&quot;, X86_FEATURE_PTI</span>
 	movq	%cr3, \scratch_reg
 	movq	\scratch_reg, \save_reg
 	/*
<span class="p_chunk">@@ -282,7 +282,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro RESTORE_CR3 scratch_reg:req save_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_PTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_PTI</span>
 
 	ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID
 
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">index f8c2bd42ec48..df7e474b470b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -198,10 +198,10 @@</span> <span class="p_context"></span>
 #define X86_FEATURE_CAT_L2		( 7*32+ 5) /* Cache Allocation Technology L2 */
 #define X86_FEATURE_CDP_L3		( 7*32+ 6) /* Code and Data Prioritization L3 */
 #define X86_FEATURE_INVPCID_SINGLE	( 7*32+ 7) /* Effectively INVPCID &amp;&amp; CR4.PCIDE=1 */
<span class="p_del">-</span>
 #define X86_FEATURE_HW_PSTATE		( 7*32+ 8) /* AMD HW-PState */
 #define X86_FEATURE_PROC_FEEDBACK	( 7*32+ 9) /* AMD ProcFeedbackInterface */
 #define X86_FEATURE_SME			( 7*32+10) /* AMD Secure Memory Encryption */
<span class="p_add">+#define X86_FEATURE_PTI		( 7*32+11) /* Kernel Page Table Isolation enabled */</span>
 
 #define X86_FEATURE_INTEL_PPIN		( 7*32+14) /* Intel Processor Inventory Number */
 #define X86_FEATURE_INTEL_PT		( 7*32+15) /* Intel Processor Trace */
<span class="p_chunk">@@ -342,6 +342,5 @@</span> <span class="p_context"></span>
 #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */
 #define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */
 #define X86_BUG_CPU_INSECURE		X86_BUG(14) /* CPU is insecure and needs kernel page table isolation */
<span class="p_del">-#define X86_BUG_CPU_SECURE_MODE_PTI	X86_BUG(15) /* Kernel Page Table Isolation enabled*/</span>
 
 #endif /* _ASM_X86_CPUFEATURES_H */
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index a97f000caf2f..8590aa954a1d 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -333,7 +333,7 @@</span> <span class="p_context"> static inline void invalidate_user_asid(u16 asid)</span>
 	if (!cpu_feature_enabled(X86_FEATURE_PCID))
 		return;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return;
 
 	__set_bit(kern_pcid(asid),
<span class="p_chunk">@@ -399,7 +399,7 @@</span> <span class="p_context"> static inline void __native_flush_tlb_single(unsigned long addr)</span>
 
 	asm volatile(&quot;invlpg (%0)&quot; ::&quot;r&quot; (addr) : &quot;memory&quot;);
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return;
 
 	/*
<span class="p_chunk">@@ -435,7 +435,7 @@</span> <span class="p_context"> static inline void __flush_tlb_one(unsigned long addr)</span>
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);
 	__flush_tlb_single(addr);
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return;
 
 	/*
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 7b9d87107950..7b2988e521a7 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -1456,7 +1456,7 @@</span> <span class="p_context"> void syscall_init(void)</span>
 		(entry_SYSCALL_64_trampoline - _entry_trampoline);
 
 	wrmsr(MSR_STAR, 0, (__USER32_CS &lt;&lt; 16) | __KERNEL_CS);
<span class="p_del">-	if (static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PTI))</span>
 		wrmsrl(MSR_LSTAR, SYSCALL64_entry_trampoline);
 	else
 		wrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64);
<span class="p_header">diff --git a/arch/x86/kernel/ldt.c b/arch/x86/kernel/ldt.c</span>
<span class="p_header">index a10286342e05..b88dcaf7249e 100644</span>
<span class="p_header">--- a/arch/x86/kernel/ldt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/ldt.c</span>
<span class="p_chunk">@@ -53,7 +53,7 @@</span> <span class="p_context"> static void set_ldt_and_map(struct ldt_struct *ldt)</span>
 	void *fixva;
 	int idx, i;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI)) {</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI)) {</span>
 		set_ldt(ldt-&gt;entries, ldt-&gt;nr_entries);
 		return;
 	}
<span class="p_header">diff --git a/arch/x86/mm/dump_pagetables.c b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">index e5a2df886130..b740c2b100fe 100644</span>
<span class="p_header">--- a/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">+++ b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_chunk">@@ -504,7 +504,7 @@</span> <span class="p_context"> void ptdump_walk_pgd_level(struct seq_file *m, pgd_t *pgd)</span>
 void ptdump_walk_pgd_level_debugfs(struct seq_file *m, pgd_t *pgd, bool user)
 {
 #ifdef CONFIG_PAGE_TABLE_ISOLATION
<span class="p_del">-	if (user &amp;&amp; static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (user &amp;&amp; static_cpu_has(X86_FEATURE_PTI))</span>
 		pgd = kernel_to_user_pgdp(pgd);
 #endif
 	ptdump_walk_pgd_level_core(m, pgd, false, false);
<span class="p_chunk">@@ -516,7 +516,7 @@</span> <span class="p_context"> static void ptdump_walk_user_pgd_level_checkwx(void)</span>
 #ifdef CONFIG_PAGE_TABLE_ISOLATION
 	pgd_t *pgd = (pgd_t *) &amp;init_top_pgt;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return;
 
 	pr_info(&quot;x86/mm: Checking user space page tables\n&quot;);
<span class="p_header">diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c</span>
<span class="p_header">index 3fb7806c6806..80259ad8c386 100644</span>
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -164,7 +164,7 @@</span> <span class="p_context"> static int page_size_mask;</span>
 
 static void enable_global_pages(void)
 {
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		__supported_pte_mask |= _PAGE_GLOBAL;
 }
 
<span class="p_header">diff --git a/arch/x86/mm/pti.c b/arch/x86/mm/pti.c</span>
<span class="p_header">index 1f8114689528..6294c44a60cf 100644</span>
<span class="p_header">--- a/arch/x86/mm/pti.c</span>
<span class="p_header">+++ b/arch/x86/mm/pti.c</span>
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> void __init pti_check_boottime_disable(void)</span>
 
 enable:
 	if (enable)
<span class="p_del">-		setup_force_cpu_bug(X86_BUG_CPU_SECURE_MODE_PTI);</span>
<span class="p_add">+		setup_force_cpu_cap(X86_FEATURE_PTI);</span>
 }
 
 /*
<span class="p_chunk">@@ -89,7 +89,7 @@</span> <span class="p_context"> void __init pti_check_boottime_disable(void)</span>
  */
 pgd_t pti_set_user_pgd(pgd_t *pgdp, pgd_t pgd)
 {
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return pgd;
 
 	if (pgdp_maps_userspace(pgdp)) {
<span class="p_chunk">@@ -272,7 +272,7 @@</span> <span class="p_context"> static void __init pti_clone_entry_text(void)</span>
  */
 void __init pti_init(void)
 {
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
 		return;
 
 	pr_info(&quot;enabled\n&quot;);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 7982d873a6ac..a1561957dccb 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -42,7 +42,7 @@</span> <span class="p_context"> void clear_asid_other(void)</span>
 	 * This is only expected to be set if we have disabled
 	 * kernel _PAGE_GLOBAL pages.
 	 */
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_PTI)) {</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI)) {</span>
 		WARN_ON_ONCE(1);
 		return;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



