
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] proc: mm: export PTE sizes directly in smaps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] proc: mm: export PTE sizes directly in smaps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 16, 2016, 7:05 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161116190504.0B2BCCFC@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9432389/mbox/"
   >mbox</a>
|
   <a href="/patch/9432389/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9432389/">/patch/9432389/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A38326021C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Nov 2016 19:05:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8659D28FBD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Nov 2016 19:05:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 773472909F; Wed, 16 Nov 2016 19:05:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 25AF328FBD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Nov 2016 19:05:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753556AbcKPTFR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Nov 2016 14:05:17 -0500
Received: from mga07.intel.com ([134.134.136.100]:34364 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752219AbcKPTFO (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Nov 2016 14:05:14 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by orsmga105.jf.intel.com with ESMTP; 16 Nov 2016 11:05:12 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.31,649,1473145200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;787264275&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.121])
	by FMSMGA003.fm.intel.com with ESMTP; 16 Nov 2016 11:05:04 -0800
Subject: [RFC][PATCH] proc: mm: export PTE sizes directly in smaps
To: linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave@sr71.net&gt;, hch@lst.de, akpm@linux-foundation.org,
	dan.j.williams@intel.com, khandual@linux.vnet.ibm.com
From: Dave Hansen &lt;dave@sr71.net&gt;
Date: Wed, 16 Nov 2016 11:05:04 -0800
Message-Id: &lt;20161116190504.0B2BCCFC@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Nov. 16, 2016, 7:05 p.m.</div>
<pre class="content">
/proc/$pid/smaps has a number of fields that are intended to imply the
kinds of PTEs used to map memory.  &quot;AnonHugePages&quot; obviously tells you
how many PMDs are being used.  &quot;MMUPageSize&quot; along with the &quot;Hugetlb&quot;
fields tells you how many PTEs you have for a huge page.

The current mechanisms work fine when we have one or two page sizes.
But, they start to get a bit muddled when we mix page sizes inside
one VMA.  For instance, the DAX folks were proposing adding a set of
fields like:

	DevicePages:
	DeviceHugePages:
	DeviceGiganticPages:
	DeviceGinormousPages:

to unmuddle things when page sizes get mixed.  That&#39;s fine, but
it does require userspace know the mapping from our various
arbitrary names to hardware page sizes on each architecture and
kernel configuration.

What folks really want is to know how much memory is mapped with
each page size.  How about we just do *that*?

Patch attached.  Seems harmless enough.  Probably doesn&#39;t compile
everywhere.  Makes smaps look like this:

Private_Hugetlb:       0 kB
Swap:                  0 kB
SwapPss:               0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
Locked:                0 kB
Ptes:               4096 kB @        4 kB     4096 kB @     2048 kB
VmFlags: rd wr mr mw me ac 

1. I&#39;d like to thank Dan Williams for showing me a mirror as I
   complained about the bozo that introduced &#39;AnonHugePages&#39;.

Cc: Christoph Hellwig &lt;hch@lst.de&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Dan Williams &lt;dan.j.williams@intel.com&gt;
Cc: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;

---

 b/fs/proc/task_mmu.c |   38 ++++++++++++++++++++++++++++++++++++--
 1 file changed, 36 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=320">Dan Williams</a> - Nov. 16, 2016, 7:39 p.m.</div>
<pre class="content">
On Wed, Nov 16, 2016 at 11:05 AM, Dave Hansen &lt;dave@sr71.net&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; /proc/$pid/smaps has a number of fields that are intended to imply the</span>
<span class="quote">&gt; kinds of PTEs used to map memory.  &quot;AnonHugePages&quot; obviously tells you</span>
<span class="quote">&gt; how many PMDs are being used.  &quot;MMUPageSize&quot; along with the &quot;Hugetlb&quot;</span>
<span class="quote">&gt; fields tells you how many PTEs you have for a huge page.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The current mechanisms work fine when we have one or two page sizes.</span>
<span class="quote">&gt; But, they start to get a bit muddled when we mix page sizes inside</span>
<span class="quote">&gt; one VMA.  For instance, the DAX folks were proposing adding a set of</span>
<span class="quote">&gt; fields like:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         DevicePages:</span>
<span class="quote">&gt;         DeviceHugePages:</span>
<span class="quote">&gt;         DeviceGiganticPages:</span>
<span class="quote">&gt;         DeviceGinormousPages:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; to unmuddle things when page sizes get mixed.  That&#39;s fine, but</span>
<span class="quote">&gt; it does require userspace know the mapping from our various</span>
<span class="quote">&gt; arbitrary names to hardware page sizes on each architecture and</span>
<span class="quote">&gt; kernel configuration.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What folks really want is to know how much memory is mapped with</span>
<span class="quote">&gt; each page size.  How about we just do *that*?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Patch attached.  Seems harmless enough.  Probably doesn&#39;t compile</span>
<span class="quote">&gt; everywhere.  Makes smaps look like this:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Private_Hugetlb:       0 kB</span>
<span class="quote">&gt; Swap:                  0 kB</span>
<span class="quote">&gt; SwapPss:               0 kB</span>
<span class="quote">&gt; KernelPageSize:        4 kB</span>
<span class="quote">&gt; MMUPageSize:           4 kB</span>
<span class="quote">&gt; Locked:                0 kB</span>
<span class="quote">&gt; Ptes:               4096 kB @        4 kB     4096 kB @     2048 kB</span>
<span class="quote">&gt; VmFlags: rd wr mr mw me ac</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 1. I&#39;d like to thank Dan Williams for showing me a mirror as I</span>
<span class="quote">&gt;    complained about the bozo that introduced &#39;AnonHugePages&#39;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Cc: Christoph Hellwig &lt;hch@lst.de&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Dan Williams &lt;dan.j.williams@intel.com&gt;</span>
<span class="quote">&gt; Cc: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  b/fs/proc/task_mmu.c |   38 ++++++++++++++++++++++++++++++++++++--</span>
<span class="quote">&gt;  1 file changed, 36 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff -puN fs/proc/task_mmu.c~smaps-pte-sizes fs/proc/task_mmu.c</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c~smaps-pte-sizes        2016-11-16 08:47:35.609910046 -0800</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c        2016-11-16 10:40:40.529937746 -0800</span>
<span class="quote">&gt; @@ -445,6 +445,9 @@ struct mem_size_stats {</span>
<span class="quote">&gt;         unsigned long swap;</span>
<span class="quote">&gt;         unsigned long shared_hugetlb;</span>
<span class="quote">&gt;         unsigned long private_hugetlb;</span>
<span class="quote">&gt; +       unsigned long rss_pte;</span>
<span class="quote">&gt; +       unsigned long rss_pmd;</span>
<span class="quote">&gt; +       unsigned long rss_pud;</span>
<span class="quote">&gt;         u64 pss;</span>
<span class="quote">&gt;         u64 swap_pss;</span>
<span class="quote">&gt;         bool check_shmem_swap;</span>
<span class="quote">&gt; @@ -519,6 +522,7 @@ static void smaps_pte_entry(pte_t *pte,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (pte_present(*pte)) {</span>
<span class="quote">&gt;                 page = vm_normal_page(vma, addr, *pte);</span>
<span class="quote">&gt; +               mss-&gt;rss_pte += PAGE_SIZE;</span>
<span class="quote">&gt;         } else if (is_swap_pte(*pte)) {</span>
<span class="quote">&gt;                 swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -578,6 +582,7 @@ static void smaps_pmd_entry(pmd_t *pmd,</span>
<span class="quote">&gt;                 /* pass */;</span>
<span class="quote">&gt;         else</span>
<span class="quote">&gt;                 VM_BUG_ON_PAGE(1, page);</span>
<span class="quote">&gt; +       mss-&gt;rss_pmd += PAGE_SIZE;</span>

Should this be &quot;HPAGE_PMD_SIZE&quot;?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Nov. 16, 2016, 11:32 p.m.</div>
<pre class="content">
On 11/16/2016 11:39 AM, Dan Williams wrote:
<span class="quote">&gt;&gt; &gt; @@ -578,6 +582,7 @@ static void smaps_pmd_entry(pmd_t *pmd,</span>
<span class="quote">&gt;&gt; &gt;                 /* pass */;</span>
<span class="quote">&gt;&gt; &gt;         else</span>
<span class="quote">&gt;&gt; &gt;                 VM_BUG_ON_PAGE(1, page);</span>
<span class="quote">&gt;&gt; &gt; +       mss-&gt;rss_pmd += PAGE_SIZE;</span>
<span class="quote">&gt; Should this be &quot;HPAGE_PMD_SIZE&quot;?</span>

Yep, that&#39;s a typo.  I probably need to resend this and cc linux-mm@ anyway.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN fs/proc/task_mmu.c~smaps-pte-sizes fs/proc/task_mmu.c</span>
<span class="p_header">--- a/fs/proc/task_mmu.c~smaps-pte-sizes	2016-11-16 08:47:35.609910046 -0800</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c	2016-11-16 10:40:40.529937746 -0800</span>
<span class="p_chunk">@@ -445,6 +445,9 @@</span> <span class="p_context"> struct mem_size_stats {</span>
 	unsigned long swap;
 	unsigned long shared_hugetlb;
 	unsigned long private_hugetlb;
<span class="p_add">+	unsigned long rss_pte;</span>
<span class="p_add">+	unsigned long rss_pmd;</span>
<span class="p_add">+	unsigned long rss_pud;</span>
 	u64 pss;
 	u64 swap_pss;
 	bool check_shmem_swap;
<span class="p_chunk">@@ -519,6 +522,7 @@</span> <span class="p_context"> static void smaps_pte_entry(pte_t *pte,</span>
 
 	if (pte_present(*pte)) {
 		page = vm_normal_page(vma, addr, *pte);
<span class="p_add">+		mss-&gt;rss_pte += PAGE_SIZE;</span>
 	} else if (is_swap_pte(*pte)) {
 		swp_entry_t swpent = pte_to_swp_entry(*pte);
 
<span class="p_chunk">@@ -578,6 +582,7 @@</span> <span class="p_context"> static void smaps_pmd_entry(pmd_t *pmd,</span>
 		/* pass */;
 	else
 		VM_BUG_ON_PAGE(1, page);
<span class="p_add">+	mss-&gt;rss_pmd += PAGE_SIZE;</span>
 	smaps_account(mss, page, true, pmd_young(*pmd), pmd_dirty(*pmd));
 }
 #else
<span class="p_chunk">@@ -702,11 +707,13 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pt</span>
 	}
 	if (page) {
 		int mapcount = page_mapcount(page);
<span class="p_add">+		unsigned long hpage_size = huge_page_size(hstate_vma(vma));</span>
 
<span class="p_add">+		mss-&gt;rss_pud += hpage_size;</span>
 		if (mapcount &gt;= 2)
<span class="p_del">-			mss-&gt;shared_hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+			mss-&gt;shared_hugetlb += hpage_size;</span>
 		else
<span class="p_del">-			mss-&gt;private_hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="p_add">+			mss-&gt;private_hugetlb += hpage_size;</span>
 	}
 	return 0;
 }
<span class="p_chunk">@@ -716,6 +723,32 @@</span> <span class="p_context"> void __weak arch_show_smap(struct seq_fi</span>
 {
 }
 
<span class="p_add">+#define K(x) ((x) &gt;&gt; 10)</span>
<span class="p_add">+</span>
<span class="p_add">+static void show_smap_ptes(struct seq_file *m, struct mem_size_stats *mss)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Don&#39;t print anything if there was nothing mapped in */</span>
<span class="p_add">+	if (!(mss-&gt;rss_pte || mss-&gt;rss_pmd || mss-&gt;rss_pmd))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m, &quot;Ptes:           &quot;);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Always print the small-page entry.  This, among other</span>
<span class="p_add">+	 * things, guarantees that we have *something* that says</span>
<span class="p_add">+	 * &quot;kB&quot; on each line which is less likely to break parsers.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	seq_printf(m, &quot;%8lu kB @ %8lu kB&quot;, mss-&gt;rss_pte, K(PAGE_SIZE));</span>
<span class="p_add">+	if (mss-&gt;rss_pmd) {</span>
<span class="p_add">+		seq_printf(m, &quot; &quot;);</span>
<span class="p_add">+		seq_printf(m, &quot;%8lu kB @ %8lu kB&quot;, mss-&gt;rss_pmd, K(PMD_SIZE));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (mss-&gt;rss_pud) {</span>
<span class="p_add">+		seq_printf(m, &quot; &quot;);</span>
<span class="p_add">+		seq_printf(m, &quot;%8lu kB @ %8lu kB&quot;, mss-&gt;rss_pud, K(PUD_SIZE));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	seq_printf(m, &quot;\n&quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct vm_area_struct *vma = v;
<span class="p_chunk">@@ -799,6 +832,7 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m,</span>
 		   (vma-&gt;vm_flags &amp; VM_LOCKED) ?
 			(unsigned long)(mss.pss &gt;&gt; (10 + PSS_SHIFT)) : 0);
 
<span class="p_add">+	show_smap_ptes(m, &amp;mss);</span>
 	arch_show_smap(m, vma);
 	show_smap_vma_flags(m, vma);
 	m_cache_vma(m, vma);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



