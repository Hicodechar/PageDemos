
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.1,52/65] x86/kaiser: Check boottime cmdline params - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.1,52/65] x86/kaiser: Check boottime cmdline params</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 6, 2018, 12:25 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180306002538.1761-53-pasha.tatashin@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10260353/mbox/"
   >mbox</a>
|
   <a href="/patch/10260353/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10260353/">/patch/10260353/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CFE976037E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:30:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C100628D1A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:30:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B539728D1D; Tue,  6 Mar 2018 00:30:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1079A28D1A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  6 Mar 2018 00:30:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933597AbeCFAau (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 5 Mar 2018 19:30:50 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:35156 &quot;EHLO
	aserp2130.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933474AbeCFA0v (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 5 Mar 2018 19:26:51 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
	by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w260LfRk115073; Tue, 6 Mar 2018 00:26:47 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : subject :
	date : message-id : in-reply-to : references; s=corp-2017-10-26;
	bh=QQc2cgXTaincKDmalJY5apVwnkdis0a1rFBgV6JAKYU=;
	b=HSq1zjguigHwJqYr7Wezn+IFAOu2Vu3LkGsOX6eNTa6C46q2+0c9GExHskT6qG2hHi0d
	eHcoPiI58znx5umBaFhxhHq4zTErVs89l+anm0P6mKm0bntr6u+IwxkB2uzTle/lgyNe
	678TRnze1dZKLrxjwI3aRA/nalnFNZsW+VlXqIT9Ftsh7ExbmuR6Ru6uc4QqSkk84niI
	2YLU36uW31toCf1CJNIQ5X4Kbh6jv2XHj/cDqRxzHuFlRyjLurF96XcibUb6F+AJ8oum
	4sNkzoJXruEsXKjzHyHXQORAlTKNtopBkLk4ueRUx7d9YBfRWChUQnZ7WBUe+/H9qzt+
	/A== 
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by aserp2130.oracle.com with ESMTP id 2ghdxf8k5r-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 06 Mar 2018 00:26:46 +0000
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id
	w260Qjpe012017
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Tue, 6 Mar 2018 00:26:46 GMT
Received: from abhmp0008.oracle.com (abhmp0008.oracle.com [141.146.116.14])
	by aserv0121.oracle.com (8.14.4/8.13.8) with ESMTP id
	w260QjXv000537; Tue, 6 Mar 2018 00:26:45 GMT
Received: from localhost.localdomain (/98.216.35.41)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 05 Mar 2018 16:26:45 -0800
From: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;
To: steven.sistare@oracle.com, daniel.m.jordan@oracle.com,
	linux-kernel@vger.kernel.org, Alexander.Levin@microsoft.com,
	dan.j.williams@intel.com, sathyanarayanan.kuppuswamy@intel.com,
	pankaj.laxminarayan.bharadiya@intel.com, akuster@mvista.com,
	cminyard@mvista.com, pasha.tatashin@oracle.com,
	gregkh@linuxfoundation.org, stable@vger.kernel.org
Subject: [PATCH 4.1 52/65] x86/kaiser: Check boottime cmdline params
Date: Mon,  5 Mar 2018 19:25:25 -0500
Message-Id: &lt;20180306002538.1761-53-pasha.tatashin@oracle.com&gt;
X-Mailer: git-send-email 2.16.2
In-Reply-To: &lt;20180306002538.1761-1-pasha.tatashin@oracle.com&gt;
References: &lt;20180306002538.1761-1-pasha.tatashin@oracle.com&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8823
	signatures=668683
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=802
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1803060003
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173041">Pavel Tatashin</a> - March 6, 2018, 12:25 a.m.</div>
<pre class="content">
<span class="from">From: Borislav Petkov &lt;bp@suse.de&gt;</span>

AMD (and possibly other vendors) are not affected by the leak
KAISER is protecting against.

Keep the &quot;nopti&quot; for traditional reasons and add pti=&lt;on|off|auto&gt;
like upstream.
<span class="signed-off-by">
Signed-off-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
(cherry picked from commit e405a064bd7d6eca88935342ddb71057a9d6ceab)
<span class="signed-off-by">Signed-off-by: Pavel Tatashin &lt;pasha.tatashin@oracle.com&gt;</span>
---
 Documentation/kernel-parameters.txt |  6 ++++
 arch/x86/mm/kaiser.c                | 59 ++++++++++++++++++++++++++-----------
 2 files changed, 47 insertions(+), 18 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="p_header">index c1f3dbed0021..f6c046f03905 100644</span>
<span class="p_header">--- a/Documentation/kernel-parameters.txt</span>
<span class="p_header">+++ b/Documentation/kernel-parameters.txt</span>
<span class="p_chunk">@@ -2972,6 +2972,12 @@</span> <span class="p_context"> bytes respectively. Such letter suffixes can also be entirely omitted.</span>
 	pt.		[PARIDE]
 			See Documentation/blockdev/paride.txt.
 
<span class="p_add">+	pti=		[X86_64]</span>
<span class="p_add">+			Control KAISER user/kernel address space isolation:</span>
<span class="p_add">+			on - enable</span>
<span class="p_add">+			off - disable</span>
<span class="p_add">+			auto - default setting</span>
<span class="p_add">+</span>
 	pty.legacy_count=
 			[KNL] Number of legacy pty&#39;s. Overwrites compiled-in
 			default number.
<span class="p_header">diff --git a/arch/x86/mm/kaiser.c b/arch/x86/mm/kaiser.c</span>
<span class="p_header">index a724496a5852..88b4526d57a5 100644</span>
<span class="p_header">--- a/arch/x86/mm/kaiser.c</span>
<span class="p_header">+++ b/arch/x86/mm/kaiser.c</span>
<span class="p_chunk">@@ -16,6 +16,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/desc.h&gt;
<span class="p_add">+#include &lt;asm/cmdline.h&gt;</span>
 
 int kaiser_enabled __read_mostly = 1;
 EXPORT_SYMBOL(kaiser_enabled);	/* for inlined TLB flush functions */
<span class="p_chunk">@@ -264,6 +265,43 @@</span> <span class="p_context"> static void __init kaiser_init_all_pgds(void)</span>
 	WARN_ON(__ret);							\
 } while (0)
 
<span class="p_add">+void __init kaiser_check_boottime_disable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	bool enable = true;</span>
<span class="p_add">+	char arg[5];</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = cmdline_find_option(boot_command_line, &quot;pti&quot;, arg, sizeof(arg));</span>
<span class="p_add">+	if (ret &gt; 0) {</span>
<span class="p_add">+		if (!strncmp(arg, &quot;on&quot;, 2))</span>
<span class="p_add">+			goto enable;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!strncmp(arg, &quot;off&quot;, 3))</span>
<span class="p_add">+			goto disable;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!strncmp(arg, &quot;auto&quot;, 4))</span>
<span class="p_add">+			goto skip;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (cmdline_find_option_bool(boot_command_line, &quot;nopti&quot;))</span>
<span class="p_add">+		goto disable;</span>
<span class="p_add">+</span>
<span class="p_add">+skip:</span>
<span class="p_add">+	if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)</span>
<span class="p_add">+		goto disable;</span>
<span class="p_add">+</span>
<span class="p_add">+enable:</span>
<span class="p_add">+	if (enable)</span>
<span class="p_add">+		setup_force_cpu_cap(X86_FEATURE_KAISER);</span>
<span class="p_add">+</span>
<span class="p_add">+	return;</span>
<span class="p_add">+</span>
<span class="p_add">+disable:</span>
<span class="p_add">+	pr_info(&quot;Kernel/User page tables isolation: disabled\n&quot;);</span>
<span class="p_add">+	kaiser_enabled = 0;</span>
<span class="p_add">+	setup_clear_cpu_cap(X86_FEATURE_KAISER);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * If anything in here fails, we will likely die on one of the
  * first kernel-&gt;user transitions and init will die.  But, we
<span class="p_chunk">@@ -275,12 +313,10 @@</span> <span class="p_context"> void __init kaiser_init(void)</span>
 {
 	int cpu;
 
<span class="p_del">-	if (!kaiser_enabled) {</span>
<span class="p_del">-		setup_clear_cpu_cap(X86_FEATURE_KAISER);</span>
<span class="p_del">-		return;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	kaiser_check_boottime_disable();</span>
 
<span class="p_del">-	setup_force_cpu_cap(X86_FEATURE_KAISER);</span>
<span class="p_add">+	if (!kaiser_enabled)</span>
<span class="p_add">+		return;</span>
 
 	kaiser_init_all_pgds();
 
<span class="p_chunk">@@ -424,16 +460,3 @@</span> <span class="p_context"> void kaiser_flush_tlb_on_return_to_user(void)</span>
 			X86_CR3_PCID_USER_FLUSH | KAISER_SHADOW_PGD_OFFSET);
 }
 EXPORT_SYMBOL(kaiser_flush_tlb_on_return_to_user);
<span class="p_del">-</span>
<span class="p_del">-static int __init x86_nokaiser_setup(char *s)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* nopti doesn&#39;t accept parameters */</span>
<span class="p_del">-	if (s)</span>
<span class="p_del">-		return -EINVAL;</span>
<span class="p_del">-</span>
<span class="p_del">-	kaiser_enabled = 0;</span>
<span class="p_del">-	pr_info(&quot;Kernel/User page tables isolation: disabled\n&quot;);</span>
<span class="p_del">-</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-early_param(&quot;nopti&quot;, x86_nokaiser_setup);</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



