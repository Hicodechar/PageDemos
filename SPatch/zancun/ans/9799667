
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,3/3] iommu/arm-smmu-v3: Add workaround for Cavium ThunderX2 erratum #126 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,3/3] iommu/arm-smmu-v3: Add workaround for Cavium ThunderX2 erratum #126</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170805">Geetha sowjanya</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 20, 2017, 2:17 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497968259-16390-4-git-send-email-gakula@caviumnetworks.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9799667/mbox/"
   >mbox</a>
|
   <a href="/patch/9799667/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9799667/">/patch/9799667/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CAF6560329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Jun 2017 14:38:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9D618284B0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Jun 2017 14:38:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8AD62284B2; Tue, 20 Jun 2017 14:38:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D22AF284B0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Jun 2017 14:38:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752117AbdFTOiC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Jun 2017 10:38:02 -0400
Received: from mail-cys01nam02on0066.outbound.protection.outlook.com
	([104.47.37.66]:45472
	&quot;EHLO NAM02-CY1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751138AbdFTOhu (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Jun 2017 10:37:50 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=CAVIUMNETWORKS.onmicrosoft.com; s=selector1-cavium-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=vG6cQAfie/ocYgUTYlqoOsYu1YDbumCPkz5BUf22k9s=;
	b=YrFdID1KcimE4kVmicNCI/RLba8SoDaPsFwzdfQuX7wfO3jf7q2fyV8xbaRE5P15AePNCADQyCMW0Yw7dWQFTqGwEAlqxe1v5f0hCfk8qHdGwWDaim3GxZ5PsJbzI+w5gbxmxb9zG5PbhpFaH/NESkGhAST6GDfPdiMinPVSOeU=
Authentication-Results: arm.com; dkim=none (message not signed)
	header.d=none; arm.com;
	dmarc=none action=none header.from=caviumnetworks.com; 
Received: from localhost.localdomain (14.140.2.178) by
	SN1PR0701MB2031.namprd07.prod.outlook.com (10.163.132.14) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1178.14; Tue, 20 Jun 2017 14:37:41 +0000
From: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;
To: will.deacon@arm.com, robin.murphy@arm.com,
	lorenzo.pieralisi@arm.com, hanjun.guo@linaro.org,
	sudeep.holla@arm.com, iommu@lists.linux-foundation.org
Cc: robert.moore@intel.com, lv.zheng@intel.com, rjw@rjwysocki.net,
	jcm@redhat.com, linux-kernel@vger.kernel.org,
	robert.richter@cavium.com, catalin.marinas@arm.com,
	sgoutham@cavium.com, linux-arm-kernel@lists.infradead.org,
	linux-acpi@vger.kernel.org, geethasowjanya.akula@gmail.com,
	devel@acpica.org, linu.cherian@cavium.com,
	Charles.Garcia-Tobin@arm.com, robh@kernel.org,
	Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;,
	Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;
Subject: [PATCH v8 3/3] iommu/arm-smmu-v3: Add workaround for Cavium
	ThunderX2 erratum #126
Date: Tue, 20 Jun 2017 19:47:39 +0530
Message-Id: &lt;1497968259-16390-4-git-send-email-gakula@caviumnetworks.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1497968259-16390-1-git-send-email-gakula@caviumnetworks.com&gt;
References: &lt;1497968259-16390-1-git-send-email-gakula@caviumnetworks.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [14.140.2.178]
X-ClientProxiedBy: PN1PR01CA0105.INDPRD01.PROD.OUTLOOK.COM (10.174.144.21) To
	SN1PR0701MB2031.namprd07.prod.outlook.com (10.163.132.14)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: ad116add-4245-4e4e-e205-08d4b7e9ec17
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(201703131423075)(201703031133081);
	SRVR:SN1PR0701MB2031; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR0701MB2031;
	3:mig2LHBWzwpcIzjNbzVRxuhekt3lXHc717ShoVRuit+XAoFGxZ1x5lR6zUt3qdphtX/7tZhj6bccqDfhdy/qPYciYCLih6CuaEgYsNA3qFhToRB/MhtGeg1PLcMnX0u3Tb4lZi6uhxvN2sLpXmFYvRuGwGUGmpP54Y1pJ/pVtxMLNuQXgXpmCfmZinYrWvl3h/ui4ZB2HiziTWfIiU2gF8vahYBcXsTCCd/aScxyqjL8Jxa61c9Qk1qyCiOINnw3LlJMAHivzwjDZBPy/mGxIbNA+qa8iMIxSfODrWZmy7QRHWLaaavGIR0VZNVn9HKyZ+V6+b4mM43hegdXXvTLXw==;
	25:4xIFZ0IP4La3wfjBvlqAK+FREF5pFdLWtweP7EWwq8xX+a8YBTCzbjAHmNrxh4513rssuAvam3m2f+W417RUvIlEiC/BdkbiUbdiyetPmU/i25w8sTuRIbatu3KNPGkL4LSK1IRp7hvJXVm7na9/UDsSBNnSqfBRFDQ9OfsAa26+WHpNQlx2ZvLJMA3nuHiGa+nhrFGJlAYwaKCfeWOt33BqmvUf+t+M20weDwAepMISqpKuddQeTPNQycuEZ9ZrNIsebGDqUFbN/J2Z9NHasC3z0p/7L+OYizgWv/WvCsIJy2cGdGgrTnR8x6ZJHvEf/Ngcv2Pylf0rVdaPMtbZ+QWnFLOrNZEQMcBR1Rb6n28bx1ttj3jL8MZ40MXdNawo2VM/mnnz6I9tFoDpREVANhpF1qd+rY+hJ517ngDFPETOXm/mOseVSbT2bi7CR1eGSFmSic1PVywe4C2KDeod5Tp529MPGD24gXQW41zSfPc=
X-MS-TrafficTypeDiagnostic: SN1PR0701MB2031:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR0701MB2031;
	31:IF7kbhwGqQTnZnlkmLK1neKWLynLJbdvt6FK61MOhGZJxVFclSFTVMKEP3dttxf+zmX9ZbTL0iFyWEhHKr7LQENstGblbZCZtaed18JiAYjeRXKq5xPPSfCce2KbuxAK0PresxX7fS4Kd/7HXjrp6IVJoVhgls7Fv8zeP2VkaLQANTZ5+xIb0AXOjjX3K4G3wxLub6cLjdrRO/hZ6yRTXPYVAF//BvZvLN3otSnucG4=;
	20:NKabQTtMGhKlNmk4p2jaqRFRqCt4Dnttr1LKTa31qK9ylZL3ctKJzvFsOxrvwfe4ryKlgku/peul+CrygYCMlQbbX9PlroQEfDfEFCzRtZerf/q1QoT6gzvO1cuvoVBFodHazJ0nZBWaRxgAosPfCUE1GYZKX/GDqDdV6tnkZjeXKTl9/wwnB4HJalCc+egWZxG0wJ4kQ5yFzCWW64s4/Rbc4np+eeSIWaWeayoJ0AVHLK48K0HaWFGgrnoVNretSYVWFM0RsERwVIBjliVIfrSwKbV4dpPMLnbJOYQ6tvTyt2z+89DHUvVCl4+GyNgMCpQ/BGOZarcOZ8R5L+B5oUWFX6jqU8nGqZC26MZE/0utvonQZ4Kr4CNYcfrgiXVaPC7XNFDTDKmhbbu2QO6wQrXkymumJWEr7LmQeex+9DT+ox+CcnGuTsGZdPhXqJ1pwzXN98qjPSxEGCk2VXX3tee7ksdXH9f9zVuXEHE0YMRFOKYnyk/n9WeXnVnRZDVK7yrOTZrkFhb3a4DFhIIm9CxQNNyyYPW7o4rYBqAd9vEVG55qYgJoH1Qtqylo6wPDoP8Z2cWcnVTL+Su1ftRicAzVmV3SUMVrHKU2MUly1dE=
X-Microsoft-Antispam-PRVS: &lt;SN1PR0701MB203180C88A226BEFBB71749FE0C50@SN1PR0701MB2031.namprd07.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(10201501046)(100000703101)(100105400095)(93006095)(3002001)(6041248)(20161123564025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123555025)(20161123562025)(20161123558100)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR0701MB2031; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR0701MB2031; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR0701MB2031;
	4:62SQ/IRItXhKfxoPcoJDAgyYkn9EXQQatByUHRJ9?=
	=?us-ascii?Q?qzgaxKq1ixEyNzXmUzWh2dfqFLXQHv/0F1R/BVj3tthxfE9lPVdJbp7cz1eF?=
	=?us-ascii?Q?0YcvTLWhar9SN8cCNjA3+gzxiVM7jQNBXCDsksuDbx4eld5jfn00TSu2wog2?=
	=?us-ascii?Q?koZ2Ma9PZ2jVa5FQNfVpDeUwOsMGckOTeIlGTHi70QfpbUuklAFtBrkKpqQp?=
	=?us-ascii?Q?w3zA5yKyQHCAbNtdjDxHfoo1ymVRsnsJG2eIS6L82NYKmzCTRGRvVVgg9/Yg?=
	=?us-ascii?Q?X5XMS5ziMQkLPX2UsV/z2TV3qSPedEJfYTXfKRa3l2kzgKyEcOIzgCyVozqE?=
	=?us-ascii?Q?NoCSPioGdch7/zHlXxO9PenWfv8wQD1rLIgG7N9s0gob3e95nEFKLCTMghy/?=
	=?us-ascii?Q?yucfAopalY9XMecOEqqjwOYQjZs92Fp4+oNWf22rLd6feCA//7IDcUMtGfUz?=
	=?us-ascii?Q?aWpoNlH9p6AkvbOPXjFMObvZQ8j4sxepGLCw+00ff+g/s1lSvC7jv770uf1e?=
	=?us-ascii?Q?wEDfQlbEUOUWjRozbMNYvoZapaYXKcb1epPzDBAl5/3Q+e8zuUowo66Krci4?=
	=?us-ascii?Q?mHH9CbDLKi3VloDYvWqSBAGddLDv0myb4H77kHV8MRWYNa/sTSvjMievzrDM?=
	=?us-ascii?Q?JIRoZ3TwHgOvgPmLHFFK46+moqpGTyr3e0exDCDy5kSFK3Xx+HklD1Uby6xb?=
	=?us-ascii?Q?nr2PnjTK/hW05KfSe0YV7C4OtVEQMXJvDWHzImel8hAaiihArhdbl+p2WHf+?=
	=?us-ascii?Q?2QN6ZnwCRe05HOFnZKbzdK2ujjpPAFQHPTF8/b6u1QTnprwW1QLBAdM4NZ0k?=
	=?us-ascii?Q?6LuT4Bi2YrN8KWEnaK9MY57xnjKic5rz35uVJQrMNNpbqZ+PU2lHHAWviWpY?=
	=?us-ascii?Q?imKPFlv7D66rnT87DBwjp7CAFzYt+iGFFrTh/CSWVFNH+d+/7aCeK2Jle3Xh?=
	=?us-ascii?Q?ODclVuHTEL4unB44j7N5NNGUgZpm5gqbnBgwe0UrUfbFlUXxZ1eumw+twCjH?=
	=?us-ascii?Q?7oAPVbCGsi7JDZX6xSPuKrdDZKwWPGR2MLkRZDeNo6ZLarneLPgmKMrG5s66?=
	=?us-ascii?Q?TBXIyH/NDF4O/TA0fYxADubFSPPVUkXaTO+ntB/2gNZhrxfZgTtNoL6WKfoG?=
	=?us-ascii?Q?uIV3BDFfric=3D?=
X-Forefront-PRVS: 03449D5DD1
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6069001)(6009001)(39410400002)(39840400002)(39850400002)(39450400003)(39400400002)(4326008)(7416002)(3846002)(6116002)(50226002)(5009440100003)(5660300001)(305945005)(54906002)(230783001)(38730400002)(110136004)(107886003)(53936002)(6512007)(6506006)(66066001)(47776003)(575784001)(81166006)(8676002)(5003940100001)(478600001)(6486002)(2906002)(2950100002)(42882006)(48376002)(72206003)(189998001)(33646002)(50466002)(36756003)(50986999)(25786009)(76176999)(42186005)(110426004)(42262002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR0701MB2031;
	H:localhost.localdomain; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR0701MB2031;
	23:WJWMpGu+/zr9tG9wyO78KvipZ9jvGCckTuj8lFs?=
	=?us-ascii?Q?u0gspJcQlojmDF2NsiBv6wYd++7MixYMkgicVn+NIezlTGJkaKQTFwNKXSoW?=
	=?us-ascii?Q?5+MUMyBb6EN+40vY3m3vn57UdjiG1ok6/cs0TKMpnKbZiCIzID4urgayEOVI?=
	=?us-ascii?Q?atr8c3Nas/0F5R/kpsl2L3UsmQZNsO9aZUvQaxKgD8McovpK9GFGCGjA86qs?=
	=?us-ascii?Q?Ev64YPAta3bqszFVdyTeSwbbMRHrnj+uN0yTfHaaJfdpzdC1TDHgyb6UfHdV?=
	=?us-ascii?Q?jPcAgkFUIHGUUqatgtuPodWTisF2VeOPkioUzLNXYCOkDENs1O9HQA3m1xhq?=
	=?us-ascii?Q?aqsUtwZ3QXoJUjqg334quq3tgvWOhDd5HBRASihyevDhyko0k6DZNH/0YFhG?=
	=?us-ascii?Q?DkkV0hzXBC6qVLblyQbecGaM8MIkhGyxBlbcc+/Qgwd5M+TX97+fz+GPHY/h?=
	=?us-ascii?Q?AW2lvq0eQDWrhqPPBmCPhSUs/bBuHZOWARx6/vJvddKLckrHccoex5i8DRF8?=
	=?us-ascii?Q?r5ft7eZxGe9rH72Vtx5jT6Jk4psq+ILt4KLE43FBdCi3coTB3OBi2K9sT06b?=
	=?us-ascii?Q?CA4TC933q9NAPBTqDvYP5i9wmob7+xDjAQJvKXdTQRN2IyiRVg9ovPJHZkJQ?=
	=?us-ascii?Q?rXBj2Mn/YfmWFzliubWs5b4EgS3sSJfHlJgvLkGnir7CrNWmfeESMgJFFSJZ?=
	=?us-ascii?Q?jd1SFcGW9pkJfxYDCszOGZR1ZQbQhRgmRmjBfUjWABjnIlRCdzn8ynYe+VLF?=
	=?us-ascii?Q?cQLUA3bvzPcIRwSyz0CEceKvezSKonZOZJFdpvyWV0U6VoB+Xvm/0EIRSKd2?=
	=?us-ascii?Q?FKrKeRq9/pNc75AMCn4QiloSVkTUYdF5R3q8AwuOy83lh++1riBDSoV9Cjab?=
	=?us-ascii?Q?ZksIpbXCxHaoH+nj2+XO8bCyw7Uxx6zT5XOUpMBdIeI9lJmegRq7PUvVyUc8?=
	=?us-ascii?Q?Y57eMTA/QqWuR7etxVazXP5DA3dH7J3Atz4CXI/71B447VlIemP0x7VgZhyh?=
	=?us-ascii?Q?N44sC5iHfJvPVBLGqSZu7jLnj8CF7od/UHmoSC/1gfJN8gJ1OALX/Ad2E8Qv?=
	=?us-ascii?Q?N0u/JSnZcTcckYkHbUq718BSu9Rep01WHpd8NeXXg9r54x7sEepcPwTpFYaa?=
	=?us-ascii?Q?cAMiFGioamWlpCTaYMgnzjOuR/jUKCmuGxs8Dx/6ZOgWaklNniqzTphcC7cF?=
	=?us-ascii?Q?zT0/rRzqSdgWxQhk=3D?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN1PR0701MB2031;
	6:3TZvY4eBG5SXz0O3Aut5RqxRlcdfhnlOGtYekBcm?=
	=?us-ascii?Q?WgVTNHjeAuaGcW+xgbNbYa0915s79+MTR1cy8mVGWqv3W0v8SWswMJ0/GNt2?=
	=?us-ascii?Q?c2/96sf3saxju2XUpB/xTsus0e2W+SUP4DrAeI10yXl8LzQuO0GG14kKJCBo?=
	=?us-ascii?Q?FrxGZ90PZg/ErI0x+iqfQrBgpIxNq5C0SgUv+M4DhBMHL1inZPeKl8AqPPho?=
	=?us-ascii?Q?j9O31Q0mpZYlxYEZB+UrZPfxfNCKgtuq0vHfCNicD5sB2I/xsGjzVCNzFx9O?=
	=?us-ascii?Q?YRA4pGYEYc9IutnFyPwVrkJ8sr+0Fgkr/CWBhZmY3vCyARm1r10uQy0P9raq?=
	=?us-ascii?Q?7gd+IrFPq8O7Mw4PTISUp+4T5i53ln/TR8qf8BcUORLtBj8q7K+LwA/RdhwO?=
	=?us-ascii?Q?zM4j27GGpoLLu7NRW4UqNeVbPlMwQvZkr2N8h/dAbIpYCDDcSPWlbeDuuuGQ?=
	=?us-ascii?Q?iDfwTi6zp/U40oCJ6bio4VKK4bj6zmqctwHXpGkJ6BHXAYthFVy6AZJMPCHk?=
	=?us-ascii?Q?acsBwkpGeGDYgrFS4VyVnqbswzdYUvVOFLh1WfuYXJmrYlO9Z9Up9GrT9P+D?=
	=?us-ascii?Q?8LbUsFdcvzGMWO3kSdQ4VasVpSSwVbShfvIk6BY0k92FOkqp4aG7072OO5Ym?=
	=?us-ascii?Q?dlrER2rIToAdx4nQ0FcDlhwKoQ/lC4QrZ+FqMCojoTz8fuUp6s0fErUchkfN?=
	=?us-ascii?Q?O2cmPtX/7guBwKBeeuirJFxUV8SlhtJVyNgDVEo6gyZFygAm36/cZPviy8qI?=
	=?us-ascii?Q?M4DZ7FCFTEuWbCjX/bonyQSi7Nqsf4mXqRmGFyhXs3R1dP4HkSOHzY9UW7VL?=
	=?us-ascii?Q?ILkiZ9tnrxsI9Hbjcx2IWZS6U/ifjLfiqWjJ++L5eaiss0I0ajp0zFxi1z9T?=
	=?us-ascii?Q?R3DbNGrwtA9lpQP8ceCrzSHq/4exWrnOgJZWuNM91qO0V192haViHExAGlFB?=
	=?us-ascii?Q?6kBirPhTlYC0710PHTXDjEfzo1ubvTx/e0U8Bq5numv5tC8IDDbR2XRKn4lh?=
	=?us-ascii?Q?zYg=3D?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR0701MB2031;
	5:yht8+602s6jjP9PVVh7owVQiz1v7jwjBD4I3auBi9AVivTHe01V0SWTc8kgXMEjMqDLPXAH+fjsmkoe0CrhWjLAhyeYDNuLVyS/HDeyu43XHQxW9SLYFL1YulY+R8WtT5DV5Vw2VXrQQMZcq85V0GfQ2z3tWy1uAA1a91VAto65fxlzDeh3MGLOapNthWnMvD4+6xEu/4RwMXEDKkiqtAst2YRSGrhPcLI6Z5FwMyt1FhS5PzrPsK4vcH5NOwfNgGLrLr8tnE0BptXQf8nwuP92s6KuxgyK3fOpHeYC2KNWTkofqBd8G1FSqx4vV/B0svbCvIJd0iHdhYRNXy5noSfTt5zIzLINI1mxJ6jCZfyNwVPfwXcKVYTQphoeWHvo77fhzs6j/tjRzEvGQJfYgn/IjJ64+LwnjjL1+PVj0KrnciK2HwY/eFrsP6IptB/5kcbVgHRJioOzIURQA0kh380URPmVk192mUPOo5dfBGSPPLGg+sAZwCxSF5Rf5gcyh;
	24:0SuyIvbnTT6jMn38vVFbmsXTDt6SMWYxiVKSvjrYIPF5FlgNHVUsN9VTTcjebiWK67OlnZ2EsLxinBNH2+o5ZwcHam4VpiJ7E4W5QL1jOGg=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR0701MB2031;
	7:h/XAbhWY5HzHt3fYuHwS7O9VKEUX7N/4e7ouHPFfIoZUHQiOM5GN2pQQJER4NZbVZAtxHkjyUxpUIYLalpsRLt67t9VyUQxA2p7qGbDwwnRVrrBknn6SugQc2DZS9VunYFMuRTRDuzVDK7lNq3cQ3l1hvwavJal7LY2zQE2zLg+DsKk/Sk6M3ti6AHOJsQGdDRz71kEUr8QArTe1L6TZprtsFkEJD8I3du8uZ8E0cm2AtnjViRmePK14MD/qbqiGxkZr4J33Wpsd3JkWovUcorPEWSUFM5q+w/DGw2QznpXV73zYKCe8fbQkEJhz7FIqI0pPyKFoPneR7cb0PvFyV5I5yqnL2B1TqUWrIWL/wNiOfh43iHlq28LIli9pZXqDeHhybDZu15SUC/1XBoRTbmCGCqYy0ImOjsSAaiQtV6ZMv3ekLL1hwLwRM5bOTqrAjpKL7wGIp6r7J67n1g48+ggohimezplwVfqpS8wAb257CI29uls+fDMDhLC4w4Zh6KXSopJ1+Hd2rjAOUHAzIbgbqLFLtojBHnL31tE+l6eWwnK7+GRDIn/xF21To/tbiTJRI4HrT6U3FXxPaLOTXmKUV6yxVSWcNm4/0q9I+nzqvNk/NHxeE6vl0rYJTXPPh8j9twVfQuHhfz+7xZkVNxd9IkTn7dQOoC3HUtnFe14qLylxLEy4+ZEcICHDKfFYirtWAl1SipPWu8sHTzqXIif+1e6j3PJKS5sEWnc/QV+9C/DW2qYQu4SJgSyRABMjLklT7PjVftkgbxn7dcLOrWWqxI0mgopR9yUUSwMBLqo=
X-OriginatorOrg: caviumnetworks.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 20 Jun 2017 14:37:41.5924
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR0701MB2031
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170805">Geetha sowjanya</a> - June 20, 2017, 2:17 p.m.</div>
<pre class="content">
<span class="from">From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>

Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq
lines for gerror, eventq and cmdq-sync.

SHARED_IRQ option is set as a errata workaround, which allows to share the irq
line by register single irq handler for all the interrupts.
<span class="signed-off-by">
Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
---
 .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++
 drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----
 2 files changed, 64 insertions(+), 14 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - June 20, 2017, 6 p.m.</div>
<pre class="content">
On Tue, Jun 20, 2017 at 07:47:39PM +0530, Geetha sowjanya wrote:
<span class="quote">&gt; From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq</span>
<span class="quote">&gt; lines for gerror, eventq and cmdq-sync.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; SHARED_IRQ option is set as a errata workaround, which allows to share the irq</span>
<span class="quote">&gt; line by register single irq handler for all the interrupts.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++</span>
<span class="quote">&gt;  drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----</span>
<span class="quote">&gt;  2 files changed, 64 insertions(+), 14 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; index 6ecc48c..44b40e0 100644</span>
<span class="quote">&gt; --- a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; +++ b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; @@ -55,6 +55,11 @@ the PCIe specification.</span>
<span class="quote">&gt;  		      Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt;  		      SMMU page1 register space.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +- cavium,cn9900-broken-unique-irqline</span>
<span class="quote">&gt; +                    : Use single irq line for all the SMMUv3 interrupts.</span>
<span class="quote">&gt; +		      Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt; +		      MSI and also doesn&#39;t have unique irq lines for gerror,</span>
<span class="quote">&gt; +		      eventq and cmdq-sync.</span>

I think we&#39;re better off just supporting a new (optional) named interrupt
as &quot;combined&quot;, and then allowing that to be used instead of the others.
<span class="quote">
&gt;  ** Example</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;          smmu@2b400000 {</span>
<span class="quote">&gt; diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; index 2dea4a9..6c0c632 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; @@ -598,6 +598,7 @@ struct arm_smmu_device {</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define ARM_SMMU_OPT_SKIP_PREFETCH	(1 &lt;&lt; 0)</span>
<span class="quote">&gt;  #define ARM_SMMU_OPT_PAGE0_REGS_ONLY	(1 &lt;&lt; 1)</span>
<span class="quote">&gt; +#define ARM_SMMU_OPT_SHARED_IRQ	(1 &lt;&lt; 2)</span>

Please call this COMBINED instead of SHARED (similarly elsewhere). That
said, not sure we need this.
<span class="quote">
&gt;  	u32				options;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	struct arm_smmu_cmdq		cmdq;</span>
<span class="quote">&gt; @@ -665,6 +666,7 @@ struct arm_smmu_option_prop {</span>
<span class="quote">&gt;  static struct arm_smmu_option_prop arm_smmu_options[] = {</span>
<span class="quote">&gt;  	{ ARM_SMMU_OPT_SKIP_PREFETCH, &quot;hisilicon,broken-prefetch-cmd&quot; },</span>
<span class="quote">&gt;  	{ ARM_SMMU_OPT_PAGE0_REGS_ONLY, &quot;cavium,cn9900-broken-page1-regspace&quot;},</span>
<span class="quote">&gt; +	{ ARM_SMMU_OPT_SHARED_IRQ, &quot;cavium,cn9900-broken-unique-irqline&quot;},</span>
<span class="quote">&gt;  	{ 0, NULL},</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1313,6 +1315,21 @@ static irqreturn_t arm_smmu_gerror_handler(int irq, void *dev)</span>
<span class="quote">&gt;  	writel(gerror, smmu-&gt;base + ARM_SMMU_GERRORN);</span>
<span class="quote">&gt;  	return IRQ_HANDLED;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +/* Shared irq handler*/</span>
<span class="quote">&gt; +static irqreturn_t arm_smmu_shared_irq_thread(int irq, void *dev)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct arm_smmu_device *smmu = dev;</span>
<span class="quote">&gt; +	irqreturn_t ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ret = arm_smmu_gerror_handler(irq, dev);</span>
<span class="quote">&gt; +	if (ret == IRQ_NONE) {</span>
<span class="quote">&gt; +		arm_smmu_evtq_thread(irq, dev);</span>
<span class="quote">&gt; +		arm_smmu_cmdq_sync_handler(irq, dev);</span>
<span class="quote">&gt; +		if (smmu-&gt;features &amp; ARM_SMMU_FEAT_PRI)</span>
<span class="quote">&gt; +			arm_smmu_priq_thread(irq, dev);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	return IRQ_HANDLED;</span>
<span class="quote">&gt; +}</span>

This isn&#39;t quite right, because you&#39;re now running low-level handlers (like
the gerror handler) in threaded context. You&#39;re better off registering a
low-level handler too (see below) which can kick gerror and cmdq_sync
before unconditionally returning IRQ_WAKE_THREAD.
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  /* IO_PGTABLE API */</span>
<span class="quote">&gt;  static void __arm_smmu_tlb_sync(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt; @@ -2230,18 +2247,9 @@ static void arm_smmu_setup_msis(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  	devm_add_action(dev, arm_smmu_free_msis, dev);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt; +static void arm_smmu_setup_unique_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	int ret, irq;</span>
<span class="quote">&gt; -	u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	/* Disable IRQs first */</span>
<span class="quote">&gt; -	ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="quote">&gt; -				      ARM_SMMU_IRQ_CTRLACK);</span>
<span class="quote">&gt; -	if (ret) {</span>
<span class="quote">&gt; -		dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="quote">&gt; -		return ret;</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +	int irq, ret;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	arm_smmu_setup_msis(smmu);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -2284,10 +2292,46 @@ static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			if (ret &lt; 0)</span>
<span class="quote">&gt;  				dev_warn(smmu-&gt;dev,</span>
<span class="quote">&gt;  					 &quot;failed to enable priq irq\n&quot;);</span>
<span class="quote">&gt; -			else</span>
<span class="quote">&gt; -				irqen_flags |= IRQ_CTRL_PRIQ_IRQEN;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void arm_smmu_setup_shared_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int ret, irq;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Single irq is used for all queues, request single interrupt lines */</span>
<span class="quote">&gt; +	irq = smmu-&gt;evtq.q.irq;</span>
<span class="quote">&gt; +	if (irq) {</span>
<span class="quote">&gt; +		ret = devm_request_threaded_irq(smmu-&gt;dev, irq, NULL,</span>

As above, stick your low-level handler in instead of NULL here.
<span class="quote">
&gt; +					arm_smmu_shared_irq_thread,</span>
<span class="quote">&gt; +					IRQF_ONESHOT | IRQF_SHARED,</span>

Why do you need IRQF_SHARED here?
<span class="quote">
&gt; +					&quot;arm-smmu-v3-shared_irq&quot;, smmu);</span>

Call this &quot;combined&quot; instead of shared, to avoid confusion with the IRQ
flags.
<span class="quote">
&gt; +		if (ret &lt; 0)</span>
<span class="quote">&gt; +			dev_warn(smmu-&gt;dev, &quot;failed to enable shared irq\n&quot;);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; +	u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Disable IRQs first */</span>
<span class="quote">&gt; +	ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="quote">&gt; +				      ARM_SMMU_IRQ_CTRLACK);</span>
<span class="quote">&gt; +	if (ret) {</span>
<span class="quote">&gt; +		dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="quote">&gt; +		return ret;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (smmu-&gt;options &amp; ARM_SMMU_OPT_SHARED_IRQ)</span>
<span class="quote">&gt; +		arm_smmu_setup_shared_irqs(smmu);</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		arm_smmu_setup_unique_irqs(smmu);</span>

I&#39;d rather just have something like:

  irq = platform_get_irq_byname(pdev, &quot;combined&quot;);

in the arm_smmu_device_probe function. If we find it&#39;s there, we use that
in preference to the other interrupts.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=174071">Geetha Akula</a> - June 21, 2017, 6:39 a.m.</div>
<pre class="content">
Hi Will,

On Tue, Jun 20, 2017 at 11:30 PM, Will Deacon &lt;will.deacon@arm.com&gt; wrote:
<span class="quote">&gt; On Tue, Jun 20, 2017 at 07:47:39PM +0530, Geetha sowjanya wrote:</span>
<span class="quote">&gt;&gt; From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq</span>
<span class="quote">&gt;&gt; lines for gerror, eventq and cmdq-sync.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; SHARED_IRQ option is set as a errata workaround, which allows to share the irq</span>
<span class="quote">&gt;&gt; line by register single irq handler for all the interrupts.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++</span>
<span class="quote">&gt;&gt;  drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----</span>
<span class="quote">&gt;&gt;  2 files changed, 64 insertions(+), 14 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt; index 6ecc48c..44b40e0 100644</span>
<span class="quote">&gt;&gt; --- a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt; +++ b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt; @@ -55,6 +55,11 @@ the PCIe specification.</span>
<span class="quote">&gt;&gt;                     Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt;&gt;                     SMMU page1 register space.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +- cavium,cn9900-broken-unique-irqline</span>
<span class="quote">&gt;&gt; +                    : Use single irq line for all the SMMUv3 interrupts.</span>
<span class="quote">&gt;&gt; +                   Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt;&gt; +                   MSI and also doesn&#39;t have unique irq lines for gerror,</span>
<span class="quote">&gt;&gt; +                   eventq and cmdq-sync.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think we&#39;re better off just supporting a new (optional) named interrupt</span>
<span class="quote">&gt; as &quot;combined&quot;, and then allowing that to be used instead of the others.</span>

Are you suggesting to have new name irq &quot;combined&quot; like gerror ?
If yes, then this won&#39;t be possible with apci. We need to update iort spec to
add new name irq.
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;  ** Example</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;          smmu@2b400000 {</span>
<span class="quote">&gt;&gt; diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; index 2dea4a9..6c0c632 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; @@ -598,6 +598,7 @@ struct arm_smmu_device {</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_OPT_SKIP_PREFETCH   (1 &lt;&lt; 0)</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_OPT_PAGE0_REGS_ONLY (1 &lt;&lt; 1)</span>
<span class="quote">&gt;&gt; +#define ARM_SMMU_OPT_SHARED_IRQ      (1 &lt;&lt; 2)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Please call this COMBINED instead of SHARED (similarly elsewhere). That</span>
<span class="quote">&gt; said, not sure we need this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;       u32                             options;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       struct arm_smmu_cmdq            cmdq;</span>
<span class="quote">&gt;&gt; @@ -665,6 +666,7 @@ struct arm_smmu_option_prop {</span>
<span class="quote">&gt;&gt;  static struct arm_smmu_option_prop arm_smmu_options[] = {</span>
<span class="quote">&gt;&gt;       { ARM_SMMU_OPT_SKIP_PREFETCH, &quot;hisilicon,broken-prefetch-cmd&quot; },</span>
<span class="quote">&gt;&gt;       { ARM_SMMU_OPT_PAGE0_REGS_ONLY, &quot;cavium,cn9900-broken-page1-regspace&quot;},</span>
<span class="quote">&gt;&gt; +     { ARM_SMMU_OPT_SHARED_IRQ, &quot;cavium,cn9900-broken-unique-irqline&quot;},</span>
<span class="quote">&gt;&gt;       { 0, NULL},</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -1313,6 +1315,21 @@ static irqreturn_t arm_smmu_gerror_handler(int irq, void *dev)</span>
<span class="quote">&gt;&gt;       writel(gerror, smmu-&gt;base + ARM_SMMU_GERRORN);</span>
<span class="quote">&gt;&gt;       return IRQ_HANDLED;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; +/* Shared irq handler*/</span>
<span class="quote">&gt;&gt; +static irqreturn_t arm_smmu_shared_irq_thread(int irq, void *dev)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     struct arm_smmu_device *smmu = dev;</span>
<span class="quote">&gt;&gt; +     irqreturn_t ret;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     ret = arm_smmu_gerror_handler(irq, dev);</span>
<span class="quote">&gt;&gt; +     if (ret == IRQ_NONE) {</span>
<span class="quote">&gt;&gt; +             arm_smmu_evtq_thread(irq, dev);</span>
<span class="quote">&gt;&gt; +             arm_smmu_cmdq_sync_handler(irq, dev);</span>
<span class="quote">&gt;&gt; +             if (smmu-&gt;features &amp; ARM_SMMU_FEAT_PRI)</span>
<span class="quote">&gt;&gt; +                     arm_smmu_priq_thread(irq, dev);</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;&gt; +     return IRQ_HANDLED;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This isn&#39;t quite right, because you&#39;re now running low-level handlers (like</span>
<span class="quote">&gt; the gerror handler) in threaded context. You&#39;re better off registering a</span>
<span class="quote">&gt; low-level handler too (see below) which can kick gerror and cmdq_sync</span>
<span class="quote">&gt; before unconditionally returning IRQ_WAKE_THREAD.</span>

+static irqreturn_t arm_smmu_combined_irq_thread(int irq, void *dev)
+{
+       struct arm_smmu_device *smmu = dev;
+
+       arm_smmu_evtq_thread(irq, dev);
+       if (smmu-&gt;features &amp; ARM_SMMU_FEAT_PRI)
+               arm_smmu_priq_thread(irq, dev);
+
+       return IRQ_HANDLED;
+}
+
+static irqreturn_t arm_smmu_combined_irq_handler(int irq, void *dev)
+{
+       irqreturn_t ret;
+
+       ret = arm_smmu_gerror_handler(irq, dev);
+       if (ret == IRQ_NONE) {
+               arm_smmu_cmdq_sync_handler(irq, dev);
+               return IRQ_WAKE_THREAD;
+       }
+       else
+               return ret;
+}
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* IO_PGTABLE API */</span>
<span class="quote">&gt;&gt;  static void __arm_smmu_tlb_sync(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt; @@ -2230,18 +2247,9 @@ static void arm_smmu_setup_msis(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;       devm_add_action(dev, arm_smmu_free_msis, dev);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt; +static void arm_smmu_setup_unique_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     int ret, irq;</span>
<span class="quote">&gt;&gt; -     u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt; -     /* Disable IRQs first */</span>
<span class="quote">&gt;&gt; -     ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="quote">&gt;&gt; -                                   ARM_SMMU_IRQ_CTRLACK);</span>
<span class="quote">&gt;&gt; -     if (ret) {</span>
<span class="quote">&gt;&gt; -             dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="quote">&gt;&gt; -             return ret;</span>
<span class="quote">&gt;&gt; -     }</span>
<span class="quote">&gt;&gt; +     int irq, ret;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       arm_smmu_setup_msis(smmu);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -2284,10 +2292,46 @@ static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;                       if (ret &lt; 0)</span>
<span class="quote">&gt;&gt;                               dev_warn(smmu-&gt;dev,</span>
<span class="quote">&gt;&gt;                                        &quot;failed to enable priq irq\n&quot;);</span>
<span class="quote">&gt;&gt; -                     else</span>
<span class="quote">&gt;&gt; -                             irqen_flags |= IRQ_CTRL_PRIQ_IRQEN;</span>
<span class="quote">&gt;&gt;               }</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static void arm_smmu_setup_shared_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     int ret, irq;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     /* Single irq is used for all queues, request single interrupt lines */</span>
<span class="quote">&gt;&gt; +     irq = smmu-&gt;evtq.q.irq;</span>
<span class="quote">&gt;&gt; +     if (irq) {</span>
<span class="quote">&gt;&gt; +             ret = devm_request_threaded_irq(smmu-&gt;dev, irq, NULL,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As above, stick your low-level handler in instead of NULL here.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +                                     arm_smmu_shared_irq_thread,</span>
<span class="quote">&gt;&gt; +                                     IRQF_ONESHOT | IRQF_SHARED,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Why do you need IRQF_SHARED here?</span>


+devm_request_threaded_irq(smmu-&gt;dev, irq,
+                                       arm_smmu_combined_irq_handler,
+                                       arm_smmu_combined_irq_thread,
+                                       IRQF_SHARED,
+                                       &quot;arm-smmu-v3-combined-irq&quot;, smmu);

On multi-node system, node1 SMMU&#39;s share irq lines with node0 SMMU&#39;s.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +                                     &quot;arm-smmu-v3-shared_irq&quot;, smmu);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Call this &quot;combined&quot; instead of shared, to avoid confusion with the IRQ</span>
<span class="quote">&gt; flags.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +             if (ret &lt; 0)</span>
<span class="quote">&gt;&gt; +                     dev_warn(smmu-&gt;dev, &quot;failed to enable shared irq\n&quot;);</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     int ret;</span>
<span class="quote">&gt;&gt; +     u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     /* Disable IRQs first */</span>
<span class="quote">&gt;&gt; +     ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="quote">&gt;&gt; +                                   ARM_SMMU_IRQ_CTRLACK);</span>
<span class="quote">&gt;&gt; +     if (ret) {</span>
<span class="quote">&gt;&gt; +             dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="quote">&gt;&gt; +             return ret;</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     if (smmu-&gt;options &amp; ARM_SMMU_OPT_SHARED_IRQ)</span>
<span class="quote">&gt;&gt; +             arm_smmu_setup_shared_irqs(smmu);</span>
<span class="quote">&gt;&gt; +     else</span>
<span class="quote">&gt;&gt; +             arm_smmu_setup_unique_irqs(smmu);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;d rather just have something like:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   irq = platform_get_irq_byname(pdev, &quot;combined&quot;);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; in the arm_smmu_device_probe function. If we find it&#39;s there, we use that</span>
<span class="quote">&gt; in preference to the other interrupts.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Will</span>

Thanks,
Geetha.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - June 21, 2017, 9:08 a.m.</div>
<pre class="content">
Hi Geetha,

On Wed, Jun 21, 2017 at 12:09:45PM +0530, Geetha Akula wrote:
<span class="quote">&gt; On Tue, Jun 20, 2017 at 11:30 PM, Will Deacon &lt;will.deacon@arm.com&gt; wrote:</span>
<span class="quote">&gt; &gt; On Tue, Jun 20, 2017 at 07:47:39PM +0530, Geetha sowjanya wrote:</span>
<span class="quote">&gt; &gt;&gt; From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq</span>
<span class="quote">&gt; &gt;&gt; lines for gerror, eventq and cmdq-sync.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; SHARED_IRQ option is set as a errata workaround, which allows to share the irq</span>
<span class="quote">&gt; &gt;&gt; line by register single irq handler for all the interrupts.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;  .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++</span>
<span class="quote">&gt; &gt;&gt;  drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----</span>
<span class="quote">&gt; &gt;&gt;  2 files changed, 64 insertions(+), 14 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; &gt;&gt; index 6ecc48c..44b40e0 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; &gt;&gt; +++ b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt; &gt;&gt; @@ -55,6 +55,11 @@ the PCIe specification.</span>
<span class="quote">&gt; &gt;&gt;                     Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt; &gt;&gt;                     SMMU page1 register space.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; +- cavium,cn9900-broken-unique-irqline</span>
<span class="quote">&gt; &gt;&gt; +                    : Use single irq line for all the SMMUv3 interrupts.</span>
<span class="quote">&gt; &gt;&gt; +                   Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt; &gt;&gt; +                   MSI and also doesn&#39;t have unique irq lines for gerror,</span>
<span class="quote">&gt; &gt;&gt; +                   eventq and cmdq-sync.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I think we&#39;re better off just supporting a new (optional) named interrupt</span>
<span class="quote">&gt; &gt; as &quot;combined&quot;, and then allowing that to be used instead of the others.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Are you suggesting to have new name irq &quot;combined&quot; like gerror ?</span>
<span class="quote">&gt; If yes, then this won&#39;t be possible with apci. We need to update iort spec to</span>
<span class="quote">&gt; add new name irq.</span>

I&#39;m mainly talking about the DT binding here, but I don&#39;t see why you
can&#39;t hack drivers/acpi/arm64/iort.c like you did for the other erratum and
have it register a single interrupt called &quot;combined&quot; based on the model
number.
<span class="quote">
&gt; &gt;&gt; +                                     arm_smmu_shared_irq_thread,</span>
<span class="quote">&gt; &gt;&gt; +                                     IRQF_ONESHOT | IRQF_SHARED,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Why do you need IRQF_SHARED here?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +devm_request_threaded_irq(smmu-&gt;dev, irq,</span>
<span class="quote">&gt; +                                       arm_smmu_combined_irq_handler,</span>
<span class="quote">&gt; +                                       arm_smmu_combined_irq_thread,</span>
<span class="quote">&gt; +                                       IRQF_SHARED,</span>
<span class="quote">&gt; +                                       &quot;arm-smmu-v3-combined-irq&quot;, smmu);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On multi-node system, node1 SMMU&#39;s share irq lines with node0 SMMU&#39;s.</span>

How does that work? Are these really MSIs under the hood? If so, why didn&#39;t
you just build them as... MSIs?

I sincerely hope that you never want to support paging of DMA memory on this
platform. It will run like a dog.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - June 21, 2017, 9:30 a.m.</div>
<pre class="content">
On 21/06/17 10:08, Will Deacon wrote:
<span class="quote">&gt; Hi Geetha,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Wed, Jun 21, 2017 at 12:09:45PM +0530, Geetha Akula wrote:</span>
<span class="quote">&gt;&gt; On Tue, Jun 20, 2017 at 11:30 PM, Will Deacon &lt;will.deacon@arm.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On Tue, Jun 20, 2017 at 07:47:39PM +0530, Geetha sowjanya wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq</span>
<span class="quote">&gt;&gt;&gt;&gt; lines for gerror, eventq and cmdq-sync.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; SHARED_IRQ option is set as a errata workaround, which allows to share the irq</span>
<span class="quote">&gt;&gt;&gt;&gt; line by register single irq handler for all the interrupts.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++</span>
<span class="quote">&gt;&gt;&gt;&gt;  drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----</span>
<span class="quote">&gt;&gt;&gt;&gt;  2 files changed, 64 insertions(+), 14 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; index 6ecc48c..44b40e0 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -55,6 +55,11 @@ the PCIe specification.</span>
<span class="quote">&gt;&gt;&gt;&gt;                     Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt;&gt;&gt;&gt;                     SMMU page1 register space.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; +- cavium,cn9900-broken-unique-irqline</span>
<span class="quote">&gt;&gt;&gt;&gt; +                    : Use single irq line for all the SMMUv3 interrupts.</span>
<span class="quote">&gt;&gt;&gt;&gt; +                   Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="quote">&gt;&gt;&gt;&gt; +                   MSI and also doesn&#39;t have unique irq lines for gerror,</span>
<span class="quote">&gt;&gt;&gt;&gt; +                   eventq and cmdq-sync.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I think we&#39;re better off just supporting a new (optional) named interrupt</span>
<span class="quote">&gt;&gt;&gt; as &quot;combined&quot;, and then allowing that to be used instead of the others.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Are you suggesting to have new name irq &quot;combined&quot; like gerror ?</span>
<span class="quote">&gt;&gt; If yes, then this won&#39;t be possible with apci. We need to update iort spec to</span>
<span class="quote">&gt;&gt; add new name irq.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m mainly talking about the DT binding here, but I don&#39;t see why you</span>
<span class="quote">&gt; can&#39;t hack drivers/acpi/arm64/iort.c like you did for the other erratum and</span>
<span class="quote">&gt; have it register a single interrupt called &quot;combined&quot; based on the model</span>
<span class="quote">&gt; number.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; +                                     arm_smmu_shared_irq_thread,</span>
<span class="quote">&gt;&gt;&gt;&gt; +                                     IRQF_ONESHOT | IRQF_SHARED,</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Why do you need IRQF_SHARED here?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +devm_request_threaded_irq(smmu-&gt;dev, irq,</span>
<span class="quote">&gt;&gt; +                                       arm_smmu_combined_irq_handler,</span>
<span class="quote">&gt;&gt; +                                       arm_smmu_combined_irq_thread,</span>
<span class="quote">&gt;&gt; +                                       IRQF_SHARED,</span>
<span class="quote">&gt;&gt; +                                       &quot;arm-smmu-v3-combined-irq&quot;, smmu);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On multi-node system, node1 SMMU&#39;s share irq lines with node0 SMMU&#39;s.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; How does that work? Are these really MSIs under the hood? If so, why didn&#39;t</span>
<span class="quote">&gt; you just build them as... MSIs?</span>

More specifically, I suspect that they are made out of message-signalled
SPIs, targeting the GIC distributor directly... That&#39;s the only way I
can imagine it has been built... If I&#39;m right, we probably have the
firmware programming the same SPI number in both nodes.

But of course, that&#39;s pure speculation.

	M.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168391">Robert Richter</a> - June 21, 2017, 6:19 p.m.</div>
<pre class="content">
On 20.06.17 19:47:39, Geetha sowjanya wrote:
<span class="quote">&gt; From: Geetha Sowjanya &lt;geethasowjanya.akula@cavium.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cavium ThunderX2 SMMU doesn&#39;t support MSI and also doesn&#39;t have unique irq</span>
<span class="quote">&gt; lines for gerror, eventq and cmdq-sync.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; SHARED_IRQ option is set as a errata workaround, which allows to share the irq</span>
<span class="quote">&gt; line by register single irq handler for all the interrupts.</span>

I found the entry in silicon-errata.txt missing, is that on purpose?

-Robert
<span class="quote">
&gt; </span>
<span class="quote">&gt; Signed-off-by: Geetha sowjanya &lt;gakula@caviumnetworks.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  .../devicetree/bindings/iommu/arm,smmu-v3.txt      |    5 ++</span>
<span class="quote">&gt;  drivers/iommu/arm-smmu-v3.c                        |   73 ++++++++++++++++----</span>
<span class="quote">&gt;  2 files changed, 64 insertions(+), 14 deletions(-)</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="p_header">index 6ecc48c..44b40e0 100644</span>
<span class="p_header">--- a/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="p_header">+++ b/Documentation/devicetree/bindings/iommu/arm,smmu-v3.txt</span>
<span class="p_chunk">@@ -55,6 +55,11 @@</span> <span class="p_context"> the PCIe specification.</span>
 		      Set for Caviun ThunderX2 silicon that doesn&#39;t support
 		      SMMU page1 register space.
 
<span class="p_add">+- cavium,cn9900-broken-unique-irqline</span>
<span class="p_add">+                    : Use single irq line for all the SMMUv3 interrupts.</span>
<span class="p_add">+		      Set for Caviun ThunderX2 silicon that doesn&#39;t support</span>
<span class="p_add">+		      MSI and also doesn&#39;t have unique irq lines for gerror,</span>
<span class="p_add">+		      eventq and cmdq-sync.</span>
 ** Example
 
         smmu@2b400000 {
<span class="p_header">diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_header">index 2dea4a9..6c0c632 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_chunk">@@ -598,6 +598,7 @@</span> <span class="p_context"> struct arm_smmu_device {</span>
 
 #define ARM_SMMU_OPT_SKIP_PREFETCH	(1 &lt;&lt; 0)
 #define ARM_SMMU_OPT_PAGE0_REGS_ONLY	(1 &lt;&lt; 1)
<span class="p_add">+#define ARM_SMMU_OPT_SHARED_IRQ	(1 &lt;&lt; 2)</span>
 	u32				options;
 
 	struct arm_smmu_cmdq		cmdq;
<span class="p_chunk">@@ -665,6 +666,7 @@</span> <span class="p_context"> struct arm_smmu_option_prop {</span>
 static struct arm_smmu_option_prop arm_smmu_options[] = {
 	{ ARM_SMMU_OPT_SKIP_PREFETCH, &quot;hisilicon,broken-prefetch-cmd&quot; },
 	{ ARM_SMMU_OPT_PAGE0_REGS_ONLY, &quot;cavium,cn9900-broken-page1-regspace&quot;},
<span class="p_add">+	{ ARM_SMMU_OPT_SHARED_IRQ, &quot;cavium,cn9900-broken-unique-irqline&quot;},</span>
 	{ 0, NULL},
 };
 
<span class="p_chunk">@@ -1313,6 +1315,21 @@</span> <span class="p_context"> static irqreturn_t arm_smmu_gerror_handler(int irq, void *dev)</span>
 	writel(gerror, smmu-&gt;base + ARM_SMMU_GERRORN);
 	return IRQ_HANDLED;
 }
<span class="p_add">+/* Shared irq handler*/</span>
<span class="p_add">+static irqreturn_t arm_smmu_shared_irq_thread(int irq, void *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct arm_smmu_device *smmu = dev;</span>
<span class="p_add">+	irqreturn_t ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = arm_smmu_gerror_handler(irq, dev);</span>
<span class="p_add">+	if (ret == IRQ_NONE) {</span>
<span class="p_add">+		arm_smmu_evtq_thread(irq, dev);</span>
<span class="p_add">+		arm_smmu_cmdq_sync_handler(irq, dev);</span>
<span class="p_add">+		if (smmu-&gt;features &amp; ARM_SMMU_FEAT_PRI)</span>
<span class="p_add">+			arm_smmu_priq_thread(irq, dev);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return IRQ_HANDLED;</span>
<span class="p_add">+}</span>
 
 /* IO_PGTABLE API */
 static void __arm_smmu_tlb_sync(struct arm_smmu_device *smmu)
<span class="p_chunk">@@ -2230,18 +2247,9 @@</span> <span class="p_context"> static void arm_smmu_setup_msis(struct arm_smmu_device *smmu)</span>
 	devm_add_action(dev, arm_smmu_free_msis, dev);
 }
 
<span class="p_del">-static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="p_add">+static void arm_smmu_setup_unique_irqs(struct arm_smmu_device *smmu)</span>
 {
<span class="p_del">-	int ret, irq;</span>
<span class="p_del">-	u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Disable IRQs first */</span>
<span class="p_del">-	ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="p_del">-				      ARM_SMMU_IRQ_CTRLACK);</span>
<span class="p_del">-	if (ret) {</span>
<span class="p_del">-		dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	int irq, ret;</span>
 
 	arm_smmu_setup_msis(smmu);
 
<span class="p_chunk">@@ -2284,10 +2292,46 @@</span> <span class="p_context"> static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
 			if (ret &lt; 0)
 				dev_warn(smmu-&gt;dev,
 					 &quot;failed to enable priq irq\n&quot;);
<span class="p_del">-			else</span>
<span class="p_del">-				irqen_flags |= IRQ_CTRL_PRIQ_IRQEN;</span>
 		}
 	}
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void arm_smmu_setup_shared_irqs(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret, irq;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Single irq is used for all queues, request single interrupt lines */</span>
<span class="p_add">+	irq = smmu-&gt;evtq.q.irq;</span>
<span class="p_add">+	if (irq) {</span>
<span class="p_add">+		ret = devm_request_threaded_irq(smmu-&gt;dev, irq, NULL,</span>
<span class="p_add">+					arm_smmu_shared_irq_thread,</span>
<span class="p_add">+					IRQF_ONESHOT | IRQF_SHARED,</span>
<span class="p_add">+					&quot;arm-smmu-v3-shared_irq&quot;, smmu);</span>
<span class="p_add">+		if (ret &lt; 0)</span>
<span class="p_add">+			dev_warn(smmu-&gt;dev, &quot;failed to enable shared irq\n&quot;);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int arm_smmu_setup_irqs(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+	u32 irqen_flags = IRQ_CTRL_EVTQ_IRQEN | IRQ_CTRL_GERROR_IRQEN;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Disable IRQs first */</span>
<span class="p_add">+	ret = arm_smmu_write_reg_sync(smmu, 0, ARM_SMMU_IRQ_CTRL,</span>
<span class="p_add">+				      ARM_SMMU_IRQ_CTRLACK);</span>
<span class="p_add">+	if (ret) {</span>
<span class="p_add">+		dev_err(smmu-&gt;dev, &quot;failed to disable irqs\n&quot;);</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (smmu-&gt;options &amp; ARM_SMMU_OPT_SHARED_IRQ)</span>
<span class="p_add">+		arm_smmu_setup_shared_irqs(smmu);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		arm_smmu_setup_unique_irqs(smmu);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_PRI)</span>
<span class="p_add">+		irqen_flags |= IRQ_CTRL_PRIQ_IRQEN;</span>
 
 	/* Enable interrupt generation on the SMMU */
 	ret = arm_smmu_write_reg_sync(smmu, irqen_flags,
<span class="p_chunk">@@ -2622,7 +2666,8 @@</span> <span class="p_context"> static int arm_smmu_device_hw_probe(struct arm_smmu_device *smmu)</span>
 static void acpi_smmu_get_options(u32 model, struct arm_smmu_device *smmu)
 {
 	if (model == ACPI_IORT_SMMU_V3_CAVIUM_CN99XX)
<span class="p_del">-		smmu-&gt;options |= ARM_SMMU_OPT_PAGE0_REGS_ONLY;</span>
<span class="p_add">+		smmu-&gt;options |= ARM_SMMU_OPT_PAGE0_REGS_ONLY</span>
<span class="p_add">+				| ARM_SMMU_OPT_SHARED_IRQ;</span>
 
 	dev_notice(smmu-&gt;dev, &quot;option mask 0x%x\n&quot;, smmu-&gt;options);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



