
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part2,v4,15/29] KVM: SVM: VMRUN should use assosiated ASID when SEV is enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part2,v4,15/29] KVM: SVM: VMRUN should use assosiated ASID when SEV is enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 19, 2017, 8:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170919204627.3875-16-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9960267/mbox/"
   >mbox</a>
|
   <a href="/patch/9960267/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9960267/">/patch/9960267/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8A7F06038F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 20:53:31 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7ED5728E8E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 20:53:31 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7386C28EDA; Tue, 19 Sep 2017 20:53:31 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BEFC728E8E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 20:53:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752084AbdISUx0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 19 Sep 2017 16:53:26 -0400
Received: from mail-by2nam01on0056.outbound.protection.outlook.com
	([104.47.34.56]:55572
	&quot;EHLO NAM01-BY2-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751858AbdISUrM (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 19 Sep 2017 16:47:12 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=tnwnPFfDWPRKyyWEwzpzs6TT2ZFJHHxKg/UgsAkFRIM=;
	b=kFAFc82WmLQjXuRe4NQ1JBuhNIY0SIl7Gv1B1WdcPjBy98DmlA9ll0vSs7FMkRvFUcETF1LNIvrTt/P2vSW4+lVTUSeh/ihD2pWLFvISJxIKxAIvI1rcOVXscfmLT05LnlExmPFyZldIouZm5oRCi5A3pc9g376UaSscjZHPewo=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.56.11; Tue, 19 Sep 2017 20:47:03 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;, x86@kernel.org
Subject: [Part2 PATCH v4 15/29] KVM: SVM: VMRUN should use assosiated ASID
	when SEV is enabled
Date: Tue, 19 Sep 2017 15:46:13 -0500
Message-Id: &lt;20170919204627.3875-16-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20170919204627.3875-1-brijesh.singh@amd.com&gt;
References: &lt;20170919204627.3875-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: CY4PR04CA0071.namprd04.prod.outlook.com (10.171.243.164)
	To SN1PR12MB0158.namprd12.prod.outlook.com (10.162.3.145)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 5a7618bf-098f-4904-a6c7-08d4ff9f9585
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(2017030254152)(48565401081)(300000503095)(300135400095)(2017052603199)(201703131423075)(201703031133081)(201702281549075)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:SN1PR12MB0158; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	3:O6jzeyuDgHWWHxKpNJKdAX375uoaLEHR80rcTc1W40xo9/Vcv4GPzruq22HxZ0WbRRNFUGDorlvjdDisyceA2iJXEnmjZ4ZGz7oUHFczA2J2un4NdQDItz6UIEto70SCQ1gDjJGIagOHQMYOAkxIn7wKkeg5GGqvkLMQpbJ0pAojo19c065U+CNIjXYph9tn3ecApW/BPi7Ta/o89RSg6yK5nGFSQ30OP0LcLiclPPGx2QMVg87ZpTnzM9PCfOLj;
	25:m7k+oyQD6uw6x+rJrNjpC8DGq+dCDzuC8cReB3uthhiKzfwH5+CAWIYe31dtspaEbCVALlok4yyDGFP2JMfKg2jyQecfdE+guFydSiZpRNC4Yxb+IcIZAwmdf5FTwg0BPOplQllrgdOIoBUp+Vqh38aYD6ZeBaZUqKJPZ6Pxo+XjKFift4ncZpdgN6OK1oz5jxWZo5Oi8JYojDltBL6WBvryqvosZixD8UcH1aORUGHMLipz65E56XXiAVuCvuYjnbJz9CCEdi6MdoOQnFKibpj590NDj9MUjPjLSeddAObqSG1MBa+QjVfuQv7x4s5/kwNbMK+E65hJtVkkrdM2ow==;
	31:3SDpbK+mRIrxGkV00eU3SItm1LcYscqHbiJpYXtST7ckooft2O/XQ8JfJAgUSNc/IYCj4ef/8ffKMvWCa6d4t223sRJEcpLc6k2kut8x3prnIDZMrrNygsCdz9Yn+R2cRYWotSaOLldi2Q1WoimZeDaV5ULvBBSvORfDCgM6zt0C7aYWld1GJWFAH/x5bsisjpenuAkQsZVyDFdC7VOTFBM0kwhD507xGAbHpEUeoms=
X-MS-TrafficTypeDiagnostic: SN1PR12MB0158:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:lCvQjS5XLA0d244SLBeonMsPNY8jKWJnFDmCiUtLYrYBBmZJVqfwBo+ezYuCmmT/yTYA8PBKEKjh7Ferk4EljW4sxKuYx0SUbaer9Xg/3UkQYj2Fe7k0bhj6jTSAJ1iS1pB5sSvjU/FAqqlicnShYw0RzGrE0esJtY6Z/+BaW2xFUGZszTFCChdvAVA464QhIyHPHYFa/plsUhvL3E0Qm4JUSvgpXkdCLhEnc+0t2HGaE7AcuW19VN3UeuER7GqXD67W2LH+WpM23rfmmUufsjBRpUCcMKpXmWi4RQ68bYCR4hulXDbzK+rfRK0ts5LijlttjBogkct+KuReEL5wNVMAotfUIcLyAlVniVK65FBfWCvtX+qNAwvziy5FzTyjF/L2mQ1nkX8qbQ5nQ1kTZ2vTRgyF+7xb7bAvb64oLDWcmZ0nIKY9OXfyXQPW9u9WbrGXU7AIedkOIaqYI8FyTM6dpI/x5r38XcjIhgXgQ7zHU2kvs4EQIwNnG9BrlAB2;
	4:wxLfUh1wLScLpHOaJNDakeSG2vFcz0RF3QbcFHlVfPJba7/tiJF1RYVjouMuH7Q0ptqo93ArnB9aqzXCMXTIXfBoeL36tFqyRAeCdUPfZUb2gI3TLHfDJ6ZgGAMU1w8KtNOj98NRN9CqzM6nnF7Dt2ZFfqzRr2867HPPmMe+few+qP7KqZss+MOVllg1nYZqEtvwYSV0/FAUM3wr/vffRyELtpWqfWlCUfmbQKuznwTjmDRRx6RTECw7kC/oKqZ6HKOlIcMQw0lEYJhbGbCo+pw3afb+Eh+Y4Ysz/FSDNjUPNM/rnyeol2thYpGUXJim
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;SN1PR12MB0158DA7EAAC6797665144FB5E5600@SN1PR12MB0158.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(93006095)(93001095)(100000703101)(100105400095)(3002001)(10201501046)(6055026)(6041248)(20161123560025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123555025)(20161123562025)(20161123564025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR12MB0158; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR12MB0158; 
X-Forefront-PRVS: 04359FAD81
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(376002)(39860400002)(199003)(189002)(86362001)(50466002)(8936002)(97736004)(6116002)(3846002)(7416002)(81156014)(8676002)(50226002)(2950100002)(81166006)(316002)(478600001)(16526017)(6666003)(7736002)(66066001)(305945005)(47776003)(6486002)(189998001)(53416004)(25786009)(101416001)(2870700001)(50986999)(76176999)(53936002)(2906002)(68736007)(36756003)(106356001)(1076002)(4326008)(5660300001)(105586002)(33646002)(23676002)(54906003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR12MB0158;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtTTjFQUjEyTUIwMTU4OzIzOjlYK1JGajQrQkF0TEJuUDU1SDFOWVQ5WmlK?=
	=?utf-8?B?K0x4YWdzMlIzcWZmYnV5aENuNjVDUFVLaTBXMXdLOVlqdWlRbUI5dmUvS2Fk?=
	=?utf-8?B?b1FpUkhoZWFjZzJUUFc1WHhyN3pjczBNNjQ0WStlYnE5NHdGOXZ6NEMvUjJi?=
	=?utf-8?B?SWgyMFNEcy9UU2dWaWxOQitTN1R6YXhlZ0VITk1nZTN6V1FpVTBiN3hZQnZj?=
	=?utf-8?B?Zmx5emRDWk1CL1lsSnVlQVllVjlPVExPdHJ6eEsyOUFkNWRZcUdxK1NaUnNO?=
	=?utf-8?B?dVNXNm4zR3RXb21JTGd5dXNMWVhwV1NlNkNOZG9PcG5VWDZsRFB6Zk5DbEQ1?=
	=?utf-8?B?N3VnZEtpMUE2VmNnY0RpcW5YNHdHclRqb0VlaUdsR0FIV3RKU1Vhc25QMVMr?=
	=?utf-8?B?LzR3RHN6RXhZdkhkNEVBWlVZRTZtQ3lIUnMvTUovVnAzck5hSHlFSG9kYjVD?=
	=?utf-8?B?TUpPWGpJVDFzYlBiVld6Z0hDRm1PM2ZUV25qaVI3UCtMUVlPTVhNNEUwaGpl?=
	=?utf-8?B?Z29DNUpDMHg1SXpZZGxwMFZlR1h3ZEdYQ01zUDFHbU42TGFReHZLdElJbGM1?=
	=?utf-8?B?MlZ3c2I3RUpDM05LRktXeXBkVUZLeTd6Q01OUUxMWUZadDFadmZIMmc0MDN5?=
	=?utf-8?B?aWd6SnRTY29nNHIrUW9qdmRHNXVKbWlHeFp3d2ZlZDhqV3ZsckFUWHlLQUZy?=
	=?utf-8?B?c3NzNW5qSHV5Q0JRQ1hDK2pUcUN2RFFhcHlpQlFvajJSRXFXUjhUY2Q0YnA4?=
	=?utf-8?B?dWY3ZFhtSFEzWnp5bkxwb05mRThFci9UNmJNalVEc0t5LzhJS2VsZ3c3aEYv?=
	=?utf-8?B?M3FROXVFZzJsUmQvZUx5SWpEbmhoY1pGWXdRaEpNL1VYZ1dWQ2ZIbkswQmxH?=
	=?utf-8?B?K2RaU0NMeExHMHJmMGc1b3Bsa1FWc2VGL0YrM3VLREtWZ0RuWXhaM1Zrb3ZO?=
	=?utf-8?B?WE1rNFR6UjhTR2ZqdUk3bjVKUG5WUHlvMjIyaFNuVnNQMDc1WnpPOEU3cm5I?=
	=?utf-8?B?Y3hvWmZkd3pjVGQzcDg5dDI3c1Ywb0VmWHVkWG9DOXhVa0JRQkVNVGYrTjE0?=
	=?utf-8?B?MEEzYUFYanZxZkNMVWJGYm81eXJ3QUN2bk8xSnVIV2hLSHY0YXo2VjNxNE9k?=
	=?utf-8?B?M0hJMWRLWloxMFhpMEdRWG85bW1xZ1h6ek5hSmNTL0RvdlVVWkIxWTBPL0Nh?=
	=?utf-8?B?ZXE5NmV0QzFYUUxtTThJdUMxelErZnU0SzJORjF2Q0VBR2NoNlF1WWltbTN5?=
	=?utf-8?B?YUN3Vk1mS3FVaS8xZUNQT2FMNHBweHJpOHEzSFRzSmIxT0NReE9EV0NpQWpH?=
	=?utf-8?B?ZXVZTmNrbzlMaWxOVFNVZGQxZlBvVUd2Y0FTUnYrdjJvRElTeVROTTBFR0Iz?=
	=?utf-8?B?UHN0SFRwY20yQ0hnOHE1UVl1aGJNNjJwUmRFOW16VzlrSVJ0aFdRKzhONU5k?=
	=?utf-8?Q?8oEnOcvu01LLDGM+wRRObqIYr0g?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	6:a+FnVPxTJ4OBdRk9KdbEYB+1YZT/qa2/07OjEVJ8ArxbJzJ3kJjtMHY7MlZUs8HpNlYkvoOXZAVp0SJA7tZS5AMuLxrSS0H+Z/C344O/U7BoZy/P+tmzDvVDmCn64C4/zomzW9YSYvZDStBqALspZqTYuNiRuKQFC/+zcQMhhOts9Ktt8PWr0ux34B5WxR4zEiPbYW7DFUE69kW599ITVReZaBtqRSFxQ8Pvo6J7Eo3Edy/ktWakjwfq31sKHTPhWaSag/CBEakEpbaRZEJwdJZGR0L2kogYUDzfbTppW+qNqDAgLdhWOkI5NnU0sYp98JIaA+KQVhblMBa2qCqXFA==;
	5:Zxj7E5i9JOvEM//q3iBG2bfMi1hSTbYtkOGvph5inInDAFIsRgALTzL9ACEhRhXFBAMp5TsJHmFnzTjjS+3rLKoO/SmHLvb/yAGBSo/Fsujtp0l0BVn/SkkznPI3okwaqtuqIMRBhy+ctfuMqZZdPg==;
	24:9wDU9d5HciDt44x8VpgYpVNs0AQA+tGP3+AORwXBU1+ixSJKtBbUHNsl3Be3jvc8CX37MBwdxCqskUjncflKDbfsWQxLA3qzn6grBE99Waw=;
	7:TOsgDHRVhpdgpt8JrTuNTU/73NqH714B9XI38cH9z7sDjooPwc/eT4K5iWqeSSHzQmb9U6vpc50cN3j2fyuA6FZ8NDCBzq5nLI4qpzeg/DrVgkP6CTlDWT32VGXLTcV7/M6fui0OlcKAKIYmPXVt2hWS0Kt4/tZOqcBVzmw14TRUEeKljd6T9Wlk2ZiuBksDcFoQSz8W1r5Kpty6K7+aQM3057/5R8uXQ9tuO3h7M5g=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0158;
	20:D3sPwyjXpoY2LGRxaZXC7u9tQ5Ga2bQAQGrf2uP5RxoZ2u/1pYJH1vtvvEX2jo6BarCP516zIemUjH2i0KIup/MFPaHS8sjpQl224JtDbv40Ck309zAE5m0vUx1rPsuvD+hBRsVHVpwX0PkQn7Ux7rXeArnd+sC2BHwIxBAe2wGXWzxGBIdiYGpMa6p56iIiGFVzML88m1w2gkQTqvv75Qf2XLRE9YgXGSRzcVPgHcjly7qLz9m0aSIdXWbKufIm
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Sep 2017 20:47:03.0625
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR12MB0158
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 19, 2017, 8:46 p.m.</div>
<pre class="content">
SEV hardware uses ASIDs to associate memory encryption key with the
guest VMs. During the guest creation time, SEV VM use SEV_CMD_ACTIVATE
command to bind a particular ASID to the guest. Lets make sure that the
VMCB is programmed with the bound ASID before a VMRUN.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;
Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/kvm/svm.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 56 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index 229bb7d09c44..0149bfa75bb2 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -213,6 +213,9 @@</span> <span class="p_context"> struct vcpu_svm {</span>
 	 */
 	struct list_head ir_list;
 	spinlock_t ir_list_lock;
<span class="p_add">+</span>
<span class="p_add">+	/* which host CPU was used for running this vcpu */</span>
<span class="p_add">+	unsigned int last_cpu;</span>
 };
 
 /*
<span class="p_chunk">@@ -336,6 +339,13 @@</span> <span class="p_context"> static inline bool sev_guest(struct kvm *kvm)</span>
 	return sev-&gt;active;
 }
 
<span class="p_add">+static inline int sev_get_asid(struct kvm *kvm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_sev_info *sev = &amp;kvm-&gt;arch.sev_info;</span>
<span class="p_add">+</span>
<span class="p_add">+	return sev-&gt;asid;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void mark_all_dirty(struct vmcb *vmcb)
 {
 	vmcb-&gt;control.clean = 0;
<span class="p_chunk">@@ -546,6 +556,9 @@</span> <span class="p_context"> struct svm_cpu_data {</span>
 	struct kvm_ldttss_desc *tss_desc;
 
 	struct page *save_area;
<span class="p_add">+</span>
<span class="p_add">+	/* index = sev_asid, value = vmcb pointer */</span>
<span class="p_add">+	struct vmcb **sev_vmcbs;</span>
 };
 
 static DEFINE_PER_CPU(struct svm_cpu_data *, svm_data);
<span class="p_chunk">@@ -859,6 +872,7 @@</span> <span class="p_context"> static void svm_cpu_uninit(int cpu)</span>
 		return;
 
 	per_cpu(svm_data, raw_smp_processor_id()) = NULL;
<span class="p_add">+	kfree(sd-&gt;sev_vmcbs);</span>
 	__free_page(sd-&gt;save_area);
 	kfree(sd);
 }
<span class="p_chunk">@@ -872,11 +886,18 @@</span> <span class="p_context"> static int svm_cpu_init(int cpu)</span>
 	if (!sd)
 		return -ENOMEM;
 	sd-&gt;cpu = cpu;
<span class="p_del">-	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	r = -ENOMEM;
<span class="p_add">+	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	if (!sd-&gt;save_area)
 		goto err_1;
 
<span class="p_add">+	if (svm_sev_enabled()) {</span>
<span class="p_add">+		r = -ENOMEM;</span>
<span class="p_add">+		sd-&gt;sev_vmcbs = kmalloc((max_sev_asid + 1) * sizeof(void *), GFP_KERNEL);</span>
<span class="p_add">+		if (!sd-&gt;sev_vmcbs)</span>
<span class="p_add">+			goto err_1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	per_cpu(svm_data, cpu) = sd;
 
 	return 0;
<span class="p_chunk">@@ -1503,7 +1524,8 @@</span> <span class="p_context"> static void sev_firmware_exit(void)</span>
 static void sev_asid_free(struct kvm *kvm)
 {
 	struct kvm_sev_info *sev = &amp;kvm-&gt;arch.sev_info;
<span class="p_del">-	int pos, asid;</span>
<span class="p_add">+	struct svm_cpu_data *sd;</span>
<span class="p_add">+	int pos, asid, cpu;</span>
 
 	if (svm_sev_enabled())
 		return;
<span class="p_chunk">@@ -1511,6 +1533,11 @@</span> <span class="p_context"> static void sev_asid_free(struct kvm *kvm)</span>
 	asid = sev-&gt;asid;
 	pos = asid - 1;
 	clear_bit(pos, sev_asid_bitmap);
<span class="p_add">+</span>
<span class="p_add">+	for_each_possible_cpu(cpu) {</span>
<span class="p_add">+		sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+		sd-&gt;sev_vmcbs[pos] = NULL;</span>
<span class="p_add">+	}</span>
 }
 
 static void sev_vm_destroy(struct kvm *kvm)
<span class="p_chunk">@@ -4444,12 +4471,39 @@</span> <span class="p_context"> static void reload_tss(struct kvm_vcpu *vcpu)</span>
 	load_TR_desc();
 }
 
<span class="p_add">+static void pre_sev_run(struct vcpu_svm *svm, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+	int asid = sev_get_asid(svm-&gt;vcpu.kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Assign the asid allocated with this SEV guest */</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.asid = asid;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Flush guest TLB:</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * 1) when different VMCB for the same ASID is to be run on the same host CPU.</span>
<span class="p_add">+	 * 2) or this VMCB was executed on different host CPU in previous VMRUNs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sd-&gt;sev_vmcbs[asid] == svm-&gt;vmcb &amp;&amp;</span>
<span class="p_add">+		svm-&gt;last_cpu == cpu)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm-&gt;last_cpu = cpu;</span>
<span class="p_add">+	sd-&gt;sev_vmcbs[asid] = svm-&gt;vmcb;</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.tlb_ctl = TLB_CONTROL_FLUSH_ASID;</span>
<span class="p_add">+	mark_dirty(svm-&gt;vmcb, VMCB_ASID);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void pre_svm_run(struct vcpu_svm *svm)
 {
 	int cpu = raw_smp_processor_id();
 
 	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
 
<span class="p_add">+	if (sev_guest(svm-&gt;vcpu.kvm))</span>
<span class="p_add">+		return pre_sev_run(svm, cpu);</span>
<span class="p_add">+</span>
 	/* FIXME: handle wraparound of asid_generation */
 	if (svm-&gt;asid_generation != sd-&gt;asid_generation)
 		new_asid(svm, sd);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



