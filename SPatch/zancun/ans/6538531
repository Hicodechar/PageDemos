
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[7/9] perf stat: Add output file argument to print_shadow_stats function - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [7/9] perf stat: Add output file argument to print_shadow_stats function</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 3, 2015, 2:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1433341559-31848-8-git-send-email-jolsa@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6538531/mbox/"
   >mbox</a>
|
   <a href="/patch/6538531/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6538531/">/patch/6538531/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 95FCAC0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:27 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 5FA6B20612
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:26 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0CB3A20608
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933008AbbFCO1Q (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jun 2015 10:27:16 -0400
Received: from mx1.redhat.com ([209.132.183.28]:34785 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932930AbbFCO0m (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jun 2015 10:26:42 -0400
Received: from int-mx09.intmail.prod.int.phx2.redhat.com
	(int-mx09.intmail.prod.int.phx2.redhat.com [10.5.11.22])
	by mx1.redhat.com (Postfix) with ESMTPS id 1C6262C72F5;
	Wed,  3 Jun 2015 14:26:42 +0000 (UTC)
Received: from krava.redhat.com (vpn-203-104.tlv.redhat.com [10.35.203.104])
	by int-mx09.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id t53EQ0AY030580; Wed, 3 Jun 2015 10:26:37 -0400
From: Jiri Olsa &lt;jolsa@kernel.org&gt;
To: Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;
Cc: lkml &lt;linux-kernel@vger.kernel.org&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, David Ahern &lt;dsahern@gmail.com&gt;,
	Namhyung Kim &lt;namhyung@kernel.org&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	Andi Kleen &lt;ak@linux.intel.com&gt;, Stephane Eranian &lt;eranian@google.com&gt;
Subject: [PATCH 7/9] perf stat: Add output file argument to
	print_shadow_stats function
Date: Wed,  3 Jun 2015 16:25:57 +0200
Message-Id: &lt;1433341559-31848-8-git-send-email-jolsa@kernel.org&gt;
In-Reply-To: &lt;1433341559-31848-1-git-send-email-jolsa@kernel.org&gt;
References: &lt;1433341559-31848-1-git-send-email-jolsa@kernel.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.22
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a> - June 3, 2015, 2:25 p.m.</div>
<pre class="content">
As preparation for moving shadow counters code into its own object.

Link: http://lkml.kernel.org/n/tip-uhx2opot7qtd3xdq9pvx4z8v@git.kernel.org
<span class="signed-off-by">Signed-off-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
---
 tools/perf/builtin-stat.c | 112 +++++++++++++++++++++++-----------------------
 1 file changed, 56 insertions(+), 56 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 2ff2e22aa140..14a75ddb60c7 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -899,7 +899,7 @@</span> <span class="p_context"> static const char *get_ratio_color(enum grc_type type, double ratio)</span>
 	return color;
 }
 
<span class="p_del">-static void print_stalled_cycles_frontend(int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
 					  struct perf_evsel *evsel
 					  __maybe_unused, double avg)
 {
<span class="p_chunk">@@ -914,12 +914,12 @@</span> <span class="p_context"> static void print_stalled_cycles_frontend(int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; frontend cycles idle   &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
 }
 
<span class="p_del">-static void print_stalled_cycles_backend(int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
 					 struct perf_evsel *evsel
 					 __maybe_unused, double avg)
 {
<span class="p_chunk">@@ -934,12 +934,12 @@</span> <span class="p_context"> static void print_stalled_cycles_backend(int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; backend  cycles idle   &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
 }
 
<span class="p_del">-static void print_branch_misses(int cpu,</span>
<span class="p_add">+static void print_branch_misses(FILE *out, int cpu,</span>
 				struct perf_evsel *evsel __maybe_unused,
 				double avg)
 {
<span class="p_chunk">@@ -954,12 +954,12 @@</span> <span class="p_context"> static void print_branch_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all branches        &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all branches        &quot;);</span>
 }
 
<span class="p_del">-static void print_l1_dcache_misses(int cpu,</span>
<span class="p_add">+static void print_l1_dcache_misses(FILE *out, int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
 				   double avg)
 {
<span class="p_chunk">@@ -974,12 +974,12 @@</span> <span class="p_context"> static void print_l1_dcache_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
 }
 
<span class="p_del">-static void print_l1_icache_misses(int cpu,</span>
<span class="p_add">+static void print_l1_icache_misses(FILE *out, int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
 				   double avg)
 {
<span class="p_chunk">@@ -994,12 +994,12 @@</span> <span class="p_context"> static void print_l1_icache_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
 }
 
<span class="p_del">-static void print_dtlb_cache_misses(int cpu,</span>
<span class="p_add">+static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
 				    double avg)
 {
<span class="p_chunk">@@ -1014,12 +1014,12 @@</span> <span class="p_context"> static void print_dtlb_cache_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
 }
 
<span class="p_del">-static void print_itlb_cache_misses(int cpu,</span>
<span class="p_add">+static void print_itlb_cache_misses(FILE *out, int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
 				    double avg)
 {
<span class="p_chunk">@@ -1034,12 +1034,12 @@</span> <span class="p_context"> static void print_itlb_cache_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
 }
 
<span class="p_del">-static void print_ll_cache_misses(int cpu,</span>
<span class="p_add">+static void print_ll_cache_misses(FILE *out, int cpu,</span>
 				  struct perf_evsel *evsel __maybe_unused,
 				  double avg)
 {
<span class="p_chunk">@@ -1054,12 +1054,12 @@</span> <span class="p_context"> static void print_ll_cache_misses(int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(output, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(output, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(output, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
 }
 
<span class="p_del">-static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
<span class="p_add">+static void print_shadow_stats(FILE *out, struct perf_evsel *evsel, double avg, int cpu)</span>
 {
 	double total, ratio = 0.0, total2;
 	int ctx = evsel_context(evsel);
<span class="p_chunk">@@ -1068,59 +1068,59 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(output, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_add">+			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(output, &quot;                                   &quot;);</span>
<span class="p_add">+			fprintf(out, &quot;                                   &quot;);</span>
 		}
 		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);
 		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));
 
 		if (total &amp;&amp; avg) {
 			ratio = total / avg;
<span class="p_del">-			fprintf(output, &quot;\n&quot;);</span>
<span class="p_add">+			fprintf(out, &quot;\n&quot;);</span>
 			if (aggr_mode == AGGR_NONE)
<span class="p_del">-				fprintf(output, &quot;        &quot;);</span>
<span class="p_del">-			fprintf(output, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_add">+				fprintf(out, &quot;        &quot;);</span>
<span class="p_add">+			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
 		}
 
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;
 			runtime_branches_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_branch_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_branch_misses(out, cpu, evsel, avg);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;
 			runtime_l1_dcache_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_l1_dcache_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;
 			runtime_l1_icache_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_l1_icache_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_l1_icache_misses(out, cpu, evsel, avg);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;
 			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_dtlb_cache_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;
 			runtime_itlb_cache_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_itlb_cache_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;
 			runtime_ll_cache_stats[ctx][cpu].n != 0) {
<span class="p_del">-		print_ll_cache_misses(cpu, evsel, avg);</span>
<span class="p_add">+		print_ll_cache_misses(out, cpu, evsel, avg);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;
 			runtime_cacherefs_stats[ctx][cpu].n != 0) {
 		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);
<span class="p_chunk">@@ -1128,25 +1128,25 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 		if (total)
 			ratio = avg * 100 / total;
 
<span class="p_del">-		fprintf(output, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_add">+		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
 
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {
<span class="p_del">-		print_stalled_cycles_frontend(cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {
<span class="p_del">-		print_stalled_cycles_backend(cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(output, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_add">+			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(output, &quot;                                   &quot;);</span>
<span class="p_add">+			fprintf(out, &quot;                                   &quot;);</span>
 		}
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total)
<span class="p_del">-			fprintf(output,</span>
<span class="p_add">+			fprintf(out,</span>
 				&quot; #   %5.2f%% transactional cycles   &quot;,
 				100.0 * (avg / total));
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {
<span class="p_chunk">@@ -1155,7 +1155,7 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 		if (total2 &lt; avg)
 			total2 = avg;
 		if (total)
<span class="p_del">-			fprintf(output,</span>
<span class="p_add">+			fprintf(out,</span>
 				&quot; #   %5.2f%% aborted cycles         &quot;,
 				100.0 * ((total2-avg) / total));
 	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;
<span class="p_chunk">@@ -1166,7 +1166,7 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 		if (total)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(output, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_add">+		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
 	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;
 		   avg &gt; 0 &amp;&amp;
 		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {
<span class="p_chunk">@@ -1175,7 +1175,7 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 		if (total)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(output, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_add">+		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
 
<span class="p_chunk">@@ -1188,9 +1188,9 @@</span> <span class="p_context"> static void print_shadow_stats(struct perf_evsel *evsel, double avg, int cpu)</span>
 			unit = &#39;K&#39;;
 		}
 
<span class="p_del">-		fprintf(output, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_add">+		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
 	} else {
<span class="p_del">-		fprintf(output, &quot;                                   &quot;);</span>
<span class="p_add">+		fprintf(out, &quot;                                   &quot;);</span>
 	}
 }
 
<span class="p_chunk">@@ -1229,7 +1229,7 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 	if (csv_output || interval)
 		return;
 
<span class="p_del">-	print_shadow_stats(evsel, avg, cpu);</span>
<span class="p_add">+	print_shadow_stats(output, evsel, avg, cpu);</span>
 }
 
 static void print_aggr(char *prefix)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



