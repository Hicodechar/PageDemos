
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv4,19/33] x86: convert the rest of the code to support p4d_t - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv4,19/33] x86: convert the rest of the code to support p4d_t</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 6, 2017, 1:53 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170306135357.3124-20-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9606257/mbox/"
   >mbox</a>
|
   <a href="/patch/9606257/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9606257/">/patch/9606257/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	68A8660414 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:07:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5909E2621D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:07:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4D7C22654B; Mon,  6 Mar 2017 14:07:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C096C2621D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:07:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754537AbdCFOHR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Mar 2017 09:07:17 -0500
Received: from mga03.intel.com ([134.134.136.65]:54734 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753026AbdCFN5p (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Mar 2017 08:57:45 -0500
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	06 Mar 2017 05:54:20 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.35,253,1484035200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;941111479&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga003.jf.intel.com with ESMTP; 06 Mar 2017 05:54:15 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id D7B021E0; Mon,  6 Mar 2017 15:54:00 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	linux-arch@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv4 19/33] x86: convert the rest of the code to support p4d_t
Date: Mon,  6 Mar 2017 16:53:43 +0300
Message-Id: &lt;20170306135357.3124-20-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170306135357.3124-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170306135357.3124-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - March 6, 2017, 1:53 p.m.</div>
<pre class="content">
This patch converts x86 to use proper folding of new page table level
with &lt;asm-generic/pgtable-nop4d.h&gt;.

That&#39;s a bit of kitchen sink, but I don&#39;t see how to split it further.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 arch/x86/include/asm/paravirt.h       |  33 +++++-
 arch/x86/include/asm/paravirt_types.h |  12 ++-
 arch/x86/include/asm/pgalloc.h        |  35 ++++++-
 arch/x86/include/asm/pgtable.h        |  59 ++++++++++-
 arch/x86/include/asm/pgtable_64.h     |  12 ++-
 arch/x86/include/asm/pgtable_types.h  |  10 +-
 arch/x86/include/asm/xen/page.h       |   8 +-
 arch/x86/kernel/paravirt.c            |  10 +-
 arch/x86/mm/init_64.c                 | 183 +++++++++++++++++++++++++++-------
 arch/x86/xen/mmu.c                    | 152 ++++++++++++++++------------
 include/trace/events/xen.h            |  28 +++---
 11 files changed, 401 insertions(+), 141 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">index 0489884fdc44..158d877ce9e9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt.h</span>
<span class="p_chunk">@@ -536,7 +536,7 @@</span> <span class="p_context"> static inline void set_pud(pud_t *pudp, pud_t pud)</span>
 		PVOP_VCALL2(pv_mmu_ops.set_pud, pudp,
 			    val);
 }
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 static inline pud_t __pud(pudval_t val)
 {
 	pudval_t ret;
<span class="p_chunk">@@ -565,6 +565,32 @@</span> <span class="p_context"> static inline pudval_t pud_val(pud_t pud)</span>
 	return ret;
 }
 
<span class="p_add">+static inline void pud_clear(pud_t *pudp)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_pud(pudp, __pud(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void set_p4d(p4d_t *p4dp, p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	p4dval_t val = native_p4d_val(p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sizeof(p4dval_t) &gt; sizeof(long))</span>
<span class="p_add">+		PVOP_VCALL3(pv_mmu_ops.set_p4d, p4dp,</span>
<span class="p_add">+			    val, (u64)val &gt;&gt; 32);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		PVOP_VCALL2(pv_mmu_ops.set_p4d, p4dp,</span>
<span class="p_add">+			    val);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void p4d_clear(p4d_t *p4dp)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_p4d(p4dp, __p4d(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+</span>
 static inline void set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 	pgdval_t val = native_pgd_val(pgd);
<span class="p_chunk">@@ -582,10 +608,7 @@</span> <span class="p_context"> static inline void pgd_clear(pgd_t *pgdp)</span>
 	set_pgd(pgdp, __pgd(0));
 }
 
<span class="p_del">-static inline void pud_clear(pud_t *pudp)</span>
<span class="p_del">-{</span>
<span class="p_del">-	set_pud(pudp, __pud(0));</span>
<span class="p_del">-}</span>
<span class="p_add">+#endif  /* CONFIG_PGTABLE_LEVELS == 5 */</span>
 
 #endif	/* CONFIG_PGTABLE_LEVELS == 4 */
 
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">index b060f962d581..93c49cf09b63 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_chunk">@@ -279,12 +279,18 @@</span> <span class="p_context"> struct pv_mmu_ops {</span>
 	struct paravirt_callee_save pmd_val;
 	struct paravirt_callee_save make_pmd;
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	struct paravirt_callee_save pud_val;
 	struct paravirt_callee_save make_pud;
 
<span class="p_del">-	void (*set_pgd)(pgd_t *pudp, pgd_t pgdval);</span>
<span class="p_del">-#endif	/* CONFIG_PGTABLE_LEVELS == 4 */</span>
<span class="p_add">+	void (*set_p4d)(p4d_t *p4dp, p4d_t p4dval);</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt;= 5 */</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_PGTABLE_LEVELS &gt;= 3 */
 
 	struct pv_lazy_ops lazy_mode;
<span class="p_header">diff --git a/arch/x86/include/asm/pgalloc.h b/arch/x86/include/asm/pgalloc.h</span>
<span class="p_header">index b6d425999f99..2f585054c63c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgalloc.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgalloc.h</span>
<span class="p_chunk">@@ -121,10 +121,10 @@</span> <span class="p_context"> static inline void pud_populate(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)</span>
 #endif	/* CONFIG_X86_PAE */
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
<span class="p_del">-static inline void pgd_populate(struct mm_struct *mm, pgd_t *pgd, pud_t *pud)</span>
<span class="p_add">+static inline void p4d_populate(struct mm_struct *mm, p4d_t *p4d, pud_t *pud)</span>
 {
 	paravirt_alloc_pud(mm, __pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(pud)));</span>
<span class="p_add">+	set_p4d(p4d, __p4d(_PAGE_TABLE | __pa(pud)));</span>
 }
 
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
<span class="p_chunk">@@ -150,6 +150,37 @@</span> <span class="p_context"> static inline void __pud_free_tlb(struct mmu_gather *tlb, pud_t *pud,</span>
 	___pud_free_tlb(tlb, pud);
 }
 
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 4</span>
<span class="p_add">+static inline void pgd_populate(struct mm_struct *mm, pgd_t *pgd, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	paravirt_alloc_p4d(mm, __pa(p4d) &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+	set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(p4d)));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline p4d_t *p4d_alloc_one(struct mm_struct *mm, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	gfp_t gfp = GFP_KERNEL_ACCOUNT;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mm == &amp;init_mm)</span>
<span class="p_add">+		gfp &amp;= ~__GFP_ACCOUNT;</span>
<span class="p_add">+	return (p4d_t *)get_zeroed_page(gfp);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void p4d_free(struct mm_struct *mm, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUG_ON((unsigned long)p4d &amp; (PAGE_SIZE-1));</span>
<span class="p_add">+	free_page((unsigned long)p4d);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+extern void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void __p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d,</span>
<span class="p_add">+				  unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	___p4d_free_tlb(tlb, p4d);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 2 */
 
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index 6f6f351e0a81..90f32116acd8 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -53,11 +53,19 @@</span> <span class="p_context"> extern struct mm_struct *pgd_page_get_mm(struct page *page);</span>
 
 #define set_pmd(pmdp, pmd)		native_set_pmd(pmdp, pmd)
 
<span class="p_del">-#ifndef __PAGETABLE_PUD_FOLDED</span>
<span class="p_add">+#ifndef __PAGETABLE_P4D_FOLDED</span>
 #define set_pgd(pgdp, pgd)		native_set_pgd(pgdp, pgd)
 #define pgd_clear(pgd)			native_pgd_clear(pgd)
 #endif
 
<span class="p_add">+#ifndef set_p4d</span>
<span class="p_add">+# define set_p4d(p4dp, p4d)		native_set_p4d(p4dp, p4d)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __PAGETABLE_PUD_FOLDED</span>
<span class="p_add">+#define p4d_clear(p4d)			native_p4d_clear(p4d)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef set_pud
 # define set_pud(pudp, pud)		native_set_pud(pudp, pud)
 #endif
<span class="p_chunk">@@ -74,6 +82,11 @@</span> <span class="p_context"> extern struct mm_struct *pgd_page_get_mm(struct page *page);</span>
 #define pgd_val(x)	native_pgd_val(x)
 #define __pgd(x)	native_make_pgd(x)
 
<span class="p_add">+#ifndef __PAGETABLE_P4D_FOLDED</span>
<span class="p_add">+#define p4d_val(x)	native_p4d_val(x)</span>
<span class="p_add">+#define __p4d(x)	native_make_p4d(x)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef __PAGETABLE_PUD_FOLDED
 #define pud_val(x)	native_pud_val(x)
 #define __pud(x)	native_make_pud(x)
<span class="p_chunk">@@ -549,6 +562,7 @@</span> <span class="p_context"> static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)</span>
 #define pte_pgprot(x) __pgprot(pte_flags(x))
 #define pmd_pgprot(x) __pgprot(pmd_flags(x))
 #define pud_pgprot(x) __pgprot(pud_flags(x))
<span class="p_add">+#define p4d_pgprot(x) __pgprot(p4d_flags(x))</span>
 
 #define canon_pgprot(p) __pgprot(massage_pgprot(p))
 
<span class="p_chunk">@@ -786,12 +800,47 @@</span> <span class="p_context"> static inline unsigned long pud_index(unsigned long address)</span>
 	return (address &gt;&gt; PUD_SHIFT) &amp; (PTRS_PER_PUD - 1);
 }
 
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_add">+static inline int p4d_none(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (native_p4d_val(p4d) &amp; ~(_PAGE_KNL_ERRATUM_MASK)) == 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int p4d_present(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return p4d_flags(p4d) &amp; _PAGE_PRESENT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long p4d_page_vaddr(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)__va(p4d_val(p4d) &amp; p4d_pfn_mask(p4d));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Currently stuck as a macro due to indirect forward reference to</span>
<span class="p_add">+ * linux/mmzone.h&#39;s __section_mem_map_addr() definition:</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define p4d_page(p4d)		\</span>
<span class="p_add">+	pfn_to_page((p4d_val(p4d) &amp; p4d_pfn_mask(p4d)) &gt;&gt; PAGE_SHIFT)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Find an entry in the third-level page table.. */</span>
<span class="p_add">+static inline pud_t *pud_offset(p4d_t *p4d, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (pud_t *)p4d_page_vaddr(*p4d) + pud_index(address);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int p4d_bad(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (p4d_flags(p4d) &amp; ~(_KERNPG_TABLE | _PAGE_USER)) != 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif  /* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="p_add">+</span>
 static inline unsigned long p4d_index(unsigned long address)
 {
 	return (address &gt;&gt; P4D_SHIFT) &amp; (PTRS_PER_P4D - 1);
 }
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 4</span>
 static inline int pgd_present(pgd_t pgd)
 {
 	return pgd_flags(pgd) &amp; _PAGE_PRESENT;
<span class="p_chunk">@@ -809,9 +858,9 @@</span> <span class="p_context"> static inline unsigned long pgd_page_vaddr(pgd_t pgd)</span>
 #define pgd_page(pgd)		pfn_to_page(pgd_val(pgd) &gt;&gt; PAGE_SHIFT)
 
 /* to find an entry in a page-table-directory. */
<span class="p_del">-static inline pud_t *pud_offset(pgd_t *pgd, unsigned long address)</span>
<span class="p_add">+static inline p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)</span>
 {
<span class="p_del">-	return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);</span>
<span class="p_add">+	return (p4d_t *)pgd_page_vaddr(*pgd) + p4d_index(address);</span>
 }
 
 static inline int pgd_bad(pgd_t pgd)
<span class="p_chunk">@@ -829,7 +878,7 @@</span> <span class="p_context"> static inline int pgd_none(pgd_t pgd)</span>
 	 */
 	return !native_pgd_val(pgd);
 }
<span class="p_del">-#endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
 
 #endif	/* __ASSEMBLY__ */
 
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 73c7ccc38912..79396bfdc791 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -41,9 +41,9 @@</span> <span class="p_context"> extern void paging_init(void);</span>
 
 struct mm_struct;
 
<span class="p_add">+void set_pte_vaddr_p4d(p4d_t *p4d_page, unsigned long vaddr, pte_t new_pte);</span>
 void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);
 
<span class="p_del">-</span>
 static inline void native_pte_clear(struct mm_struct *mm, unsigned long addr,
 				    pte_t *ptep)
 {
<span class="p_chunk">@@ -121,6 +121,16 @@</span> <span class="p_context"> static inline pud_t native_pudp_get_and_clear(pud_t *xp)</span>
 #endif
 }
 
<span class="p_add">+static inline void native_set_p4d(p4d_t *p4dp, p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	*p4dp = p4d;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void native_p4d_clear(p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	native_set_p4d(p4d, (p4d_t) { .pgd = native_make_pgd(0)});</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 	*pgdp = pgd;
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">index df08535f774a..4930afe9df0a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_chunk">@@ -277,11 +277,11 @@</span> <span class="p_context"> static inline pgdval_t pgd_flags(pgd_t pgd)</span>
 #error FIXME
 
 #else
<span class="p_del">-#include &lt;asm-generic/5level-fixup.h&gt;</span>
<span class="p_add">+#include &lt;asm-generic/pgtable-nop4d.h&gt;</span>
 
 static inline p4dval_t native_p4d_val(p4d_t p4d)
 {
<span class="p_del">-	return native_pgd_val(p4d);</span>
<span class="p_add">+	return native_pgd_val(p4d.pgd);</span>
 }
 #endif
 
<span class="p_chunk">@@ -298,12 +298,11 @@</span> <span class="p_context"> static inline pudval_t native_pud_val(pud_t pud)</span>
 	return pud.pud;
 }
 #else
<span class="p_del">-#define __ARCH_USE_5LEVEL_HACK</span>
 #include &lt;asm-generic/pgtable-nopud.h&gt;
 
 static inline pudval_t native_pud_val(pud_t pud)
 {
<span class="p_del">-	return native_pgd_val(pud.pgd);</span>
<span class="p_add">+	return native_pgd_val(pud.p4d.pgd);</span>
 }
 #endif
 
<span class="p_chunk">@@ -320,12 +319,11 @@</span> <span class="p_context"> static inline pmdval_t native_pmd_val(pmd_t pmd)</span>
 	return pmd.pmd;
 }
 #else
<span class="p_del">-#define __ARCH_USE_5LEVEL_HACK</span>
 #include &lt;asm-generic/pgtable-nopmd.h&gt;
 
 static inline pmdval_t native_pmd_val(pmd_t pmd)
 {
<span class="p_del">-	return native_pgd_val(pmd.pud.pgd);</span>
<span class="p_add">+	return native_pgd_val(pmd.pud.p4d.pgd);</span>
 }
 #endif
 
<span class="p_header">diff --git a/arch/x86/include/asm/xen/page.h b/arch/x86/include/asm/xen/page.h</span>
<span class="p_header">index 33cbd3db97b9..bf2ca56fba11 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/xen/page.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/xen/page.h</span>
<span class="p_chunk">@@ -279,13 +279,17 @@</span> <span class="p_context"> static inline pte_t __pte_ma(pteval_t x)</span>
 
 #define pmd_val_ma(v) ((v).pmd)
 #ifdef __PAGETABLE_PUD_FOLDED
<span class="p_del">-#define pud_val_ma(v) ((v).pgd.pgd)</span>
<span class="p_add">+#define pud_val_ma(v) ((v).p4d.pgd.pgd)</span>
 #else
 #define pud_val_ma(v) ((v).pud)
 #endif
 #define __pmd_ma(x)	((pmd_t) { (x) } )
 
<span class="p_del">-#define pgd_val_ma(x)	((x).pgd)</span>
<span class="p_add">+#ifdef __PAGETABLE_P4D_FOLDED</span>
<span class="p_add">+#define p4d_val_ma(x)	((x).pgd.pgd)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define p4d_val_ma(x)	((x).p4d)</span>
<span class="p_add">+#endif</span>
 
 void xen_set_domain_pte(pte_t *ptep, pte_t pteval, unsigned domid);
 
<span class="p_header">diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c</span>
<span class="p_header">index 4797e87b0fb6..110daf22f5c7 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt.c</span>
<span class="p_chunk">@@ -430,12 +430,16 @@</span> <span class="p_context"> struct pv_mmu_ops pv_mmu_ops __ro_after_init = {</span>
 	.pmd_val = PTE_IDENT,
 	.make_pmd = PTE_IDENT,
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	.pud_val = PTE_IDENT,
 	.make_pud = PTE_IDENT,
 
<span class="p_del">-	.set_pgd = native_set_pgd,</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	.set_p4d = native_set_p4d,</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+#endif /* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
<span class="p_add">+#endif /* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
 #endif /* CONFIG_PGTABLE_LEVELS &gt;= 3 */
 
 	.pte_val = PTE_IDENT,
<span class="p_header">diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c</span>
<span class="p_header">index 15173d37f399..7bdda6f1d135 100644</span>
<span class="p_header">--- a/arch/x86/mm/init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/init_64.c</span>
<span class="p_chunk">@@ -97,28 +97,38 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end)</span>
 	unsigned long address;
 
 	for (address = start; address &lt;= end; address += PGDIR_SIZE) {
<span class="p_del">-		const pgd_t *pgd_ref = pgd_offset_k(address);</span>
<span class="p_add">+		pgd_t *pgd_ref = pgd_offset_k(address);</span>
<span class="p_add">+		const p4d_t *p4d_ref;</span>
 		struct page *page;
 
<span class="p_del">-		if (pgd_none(*pgd_ref))</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * With folded p4d, pgd_none() is always false, we need to</span>
<span class="p_add">+		 * handle synchonization on p4d level.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		BUILD_BUG_ON(pgd_none(*pgd_ref));</span>
<span class="p_add">+		p4d_ref = p4d_offset(pgd_ref, address);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (p4d_none(*p4d_ref))</span>
 			continue;
 
 		spin_lock(&amp;pgd_lock);
 		list_for_each_entry(page, &amp;pgd_list, lru) {
 			pgd_t *pgd;
<span class="p_add">+			p4d_t *p4d;</span>
 			spinlock_t *pgt_lock;
 
 			pgd = (pgd_t *)page_address(page) + pgd_index(address);
<span class="p_add">+			p4d = p4d_offset(pgd, address);</span>
 			/* the pgt_lock only for Xen */
 			pgt_lock = &amp;pgd_page_get_mm(page)-&gt;page_table_lock;
 			spin_lock(pgt_lock);
 
<span class="p_del">-			if (!pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
<span class="p_del">-				BUG_ON(pgd_page_vaddr(*pgd)</span>
<span class="p_del">-				       != pgd_page_vaddr(*pgd_ref));</span>
<span class="p_add">+			if (!p4d_none(*p4d_ref) &amp;&amp; !p4d_none(*p4d))</span>
<span class="p_add">+				BUG_ON(p4d_page_vaddr(*p4d)</span>
<span class="p_add">+				       != p4d_page_vaddr(*p4d_ref));</span>
 
<span class="p_del">-			if (pgd_none(*pgd))</span>
<span class="p_del">-				set_pgd(pgd, *pgd_ref);</span>
<span class="p_add">+			if (p4d_none(*p4d))</span>
<span class="p_add">+				set_p4d(p4d, *p4d_ref);</span>
 
 			spin_unlock(pgt_lock);
 		}
<span class="p_chunk">@@ -149,16 +159,28 @@</span> <span class="p_context"> static __ref void *spp_getpage(void)</span>
 	return ptr;
 }
 
<span class="p_del">-static pud_t *fill_pud(pgd_t *pgd, unsigned long vaddr)</span>
<span class="p_add">+static p4d_t *fill_p4d(pgd_t *pgd, unsigned long vaddr)</span>
 {
 	if (pgd_none(*pgd)) {
<span class="p_del">-		pud_t *pud = (pud_t *)spp_getpage();</span>
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, pud);</span>
<span class="p_del">-		if (pud != pud_offset(pgd, 0))</span>
<span class="p_add">+		p4d_t *p4d = (p4d_t *)spp_getpage();</span>
<span class="p_add">+		pgd_populate(&amp;init_mm, pgd, p4d);</span>
<span class="p_add">+		if (p4d != p4d_offset(pgd, 0))</span>
 			printk(KERN_ERR &quot;PAGETABLE BUG #00! %p &lt;-&gt; %p\n&quot;,
<span class="p_del">-			       pud, pud_offset(pgd, 0));</span>
<span class="p_add">+			       p4d, p4d_offset(pgd, 0));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return p4d_offset(pgd, vaddr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static pud_t *fill_pud(p4d_t *p4d, unsigned long vaddr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (p4d_none(*p4d)) {</span>
<span class="p_add">+		pud_t *pud = (pud_t *)spp_getpage();</span>
<span class="p_add">+		p4d_populate(&amp;init_mm, p4d, pud);</span>
<span class="p_add">+		if (pud != pud_offset(p4d, 0))</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #01! %p &lt;-&gt; %p\n&quot;,</span>
<span class="p_add">+			       pud, pud_offset(p4d, 0));</span>
 	}
<span class="p_del">-	return pud_offset(pgd, vaddr);</span>
<span class="p_add">+	return pud_offset(p4d, vaddr);</span>
 }
 
 static pmd_t *fill_pmd(pud_t *pud, unsigned long vaddr)
<span class="p_chunk">@@ -167,7 +189,7 @@</span> <span class="p_context"> static pmd_t *fill_pmd(pud_t *pud, unsigned long vaddr)</span>
 		pmd_t *pmd = (pmd_t *) spp_getpage();
 		pud_populate(&amp;init_mm, pud, pmd);
 		if (pmd != pmd_offset(pud, 0))
<span class="p_del">-			printk(KERN_ERR &quot;PAGETABLE BUG #01! %p &lt;-&gt; %p\n&quot;,</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #02! %p &lt;-&gt; %p\n&quot;,</span>
 			       pmd, pmd_offset(pud, 0));
 	}
 	return pmd_offset(pud, vaddr);
<span class="p_chunk">@@ -179,20 +201,15 @@</span> <span class="p_context"> static pte_t *fill_pte(pmd_t *pmd, unsigned long vaddr)</span>
 		pte_t *pte = (pte_t *) spp_getpage();
 		pmd_populate_kernel(&amp;init_mm, pmd, pte);
 		if (pte != pte_offset_kernel(pmd, 0))
<span class="p_del">-			printk(KERN_ERR &quot;PAGETABLE BUG #02!\n&quot;);</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #03!\n&quot;);</span>
 	}
 	return pte_offset_kernel(pmd, vaddr);
 }
 
<span class="p_del">-void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte)</span>
<span class="p_add">+static void __set_pte_vaddr(pud_t *pud, unsigned long vaddr, pte_t new_pte)</span>
 {
<span class="p_del">-	pud_t *pud;</span>
<span class="p_del">-	pmd_t *pmd;</span>
<span class="p_del">-	pte_t *pte;</span>
<span class="p_del">-</span>
<span class="p_del">-	pud = pud_page + pud_index(vaddr);</span>
<span class="p_del">-	pmd = fill_pmd(pud, vaddr);</span>
<span class="p_del">-	pte = fill_pte(pmd, vaddr);</span>
<span class="p_add">+	pmd_t *pmd = fill_pmd(pud, vaddr);</span>
<span class="p_add">+	pte_t *pte = fill_pte(pmd, vaddr);</span>
 
 	set_pte(pte, new_pte);
 
<span class="p_chunk">@@ -203,10 +220,25 @@</span> <span class="p_context"> void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte)</span>
 	__flush_tlb_one(vaddr);
 }
 
<span class="p_add">+void set_pte_vaddr_p4d(p4d_t *p4d_page, unsigned long vaddr, pte_t new_pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	p4d_t *p4d = p4d_page + p4d_index(vaddr);</span>
<span class="p_add">+	pud_t *pud = fill_pud(p4d, vaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	__set_pte_vaddr(pud, vaddr, new_pte);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud = pud_page + pud_index(vaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	__set_pte_vaddr(pud, vaddr, new_pte);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void set_pte_vaddr(unsigned long vaddr, pte_t pteval)
 {
 	pgd_t *pgd;
<span class="p_del">-	pud_t *pud_page;</span>
<span class="p_add">+	p4d_t *p4d_page;</span>
 
 	pr_debug(&quot;set_pte_vaddr %lx to %lx\n&quot;, vaddr, native_pte_val(pteval));
 
<span class="p_chunk">@@ -216,17 +248,20 @@</span> <span class="p_context"> void set_pte_vaddr(unsigned long vaddr, pte_t pteval)</span>
 			&quot;PGD FIXMAP MISSING, it should be setup in head.S!\n&quot;);
 		return;
 	}
<span class="p_del">-	pud_page = (pud_t*)pgd_page_vaddr(*pgd);</span>
<span class="p_del">-	set_pte_vaddr_pud(pud_page, vaddr, pteval);</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d_page = p4d_offset(pgd, 0);</span>
<span class="p_add">+	set_pte_vaddr_p4d(p4d_page, vaddr, pteval);</span>
 }
 
 pmd_t * __init populate_extra_pmd(unsigned long vaddr)
 {
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 
 	pgd = pgd_offset_k(vaddr);
<span class="p_del">-	pud = fill_pud(pgd, vaddr);</span>
<span class="p_add">+	p4d = fill_p4d(pgd, vaddr);</span>
<span class="p_add">+	pud = fill_pud(p4d, vaddr);</span>
 	return fill_pmd(pud, vaddr);
 }
 
<span class="p_chunk">@@ -245,6 +280,7 @@</span> <span class="p_context"> static void __init __init_extra_mapping(unsigned long phys, unsigned long size,</span>
 					enum page_cache_mode cache)
 {
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	pgprot_t prot;
<span class="p_chunk">@@ -255,11 +291,17 @@</span> <span class="p_context"> static void __init __init_extra_mapping(unsigned long phys, unsigned long size,</span>
 	for (; size; phys += PMD_SIZE, size -= PMD_SIZE) {
 		pgd = pgd_offset_k((unsigned long)__va(phys));
 		if (pgd_none(*pgd)) {
<span class="p_add">+			p4d = (p4d_t *) spp_getpage();</span>
<span class="p_add">+			set_pgd(pgd, __pgd(__pa(p4d) | _KERNPG_TABLE |</span>
<span class="p_add">+						_PAGE_USER));</span>
<span class="p_add">+		}</span>
<span class="p_add">+		p4d = p4d_offset(pgd, (unsigned long)__va(phys));</span>
<span class="p_add">+		if (p4d_none(*p4d)) {</span>
 			pud = (pud_t *) spp_getpage();
<span class="p_del">-			set_pgd(pgd, __pgd(__pa(pud) | _KERNPG_TABLE |</span>
<span class="p_add">+			set_p4d(p4d, __p4d(__pa(pud) | _KERNPG_TABLE |</span>
 						_PAGE_USER));
 		}
<span class="p_del">-		pud = pud_offset(pgd, (unsigned long)__va(phys));</span>
<span class="p_add">+		pud = pud_offset(p4d, (unsigned long)__va(phys));</span>
 		if (pud_none(*pud)) {
 			pmd = (pmd_t *) spp_getpage();
 			set_pud(pud, __pud(__pa(pmd) | _KERNPG_TABLE |
<span class="p_chunk">@@ -563,12 +605,15 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 
 	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {
 		pgd_t *pgd = pgd_offset_k(vaddr);
<span class="p_add">+		p4d_t *p4d;</span>
 		pud_t *pud;
 
 		vaddr_next = (vaddr &amp; PGDIR_MASK) + PGDIR_SIZE;
 
<span class="p_del">-		if (pgd_val(*pgd)) {</span>
<span class="p_del">-			pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		BUILD_BUG_ON(pgd_none(*pgd));</span>
<span class="p_add">+		p4d = p4d_offset(pgd, vaddr);</span>
<span class="p_add">+		if (p4d_val(*p4d)) {</span>
<span class="p_add">+			pud = (pud_t *)p4d_page_vaddr(*p4d);</span>
 			paddr_last = phys_pud_init(pud, __pa(vaddr),
 						   __pa(vaddr_end),
 						   page_size_mask);
<span class="p_chunk">@@ -580,7 +625,7 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 					   page_size_mask);
 
 		spin_lock(&amp;init_mm.page_table_lock);
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, pud);</span>
<span class="p_add">+		p4d_populate(&amp;init_mm, p4d, pud);</span>
 		spin_unlock(&amp;init_mm.page_table_lock);
 		pgd_changed = true;
 	}
<span class="p_chunk">@@ -726,6 +771,24 @@</span> <span class="p_context"> static void __meminit free_pmd_table(pmd_t *pmd_start, pud_t *pud)</span>
 	spin_unlock(&amp;init_mm.page_table_lock);
 }
 
<span class="p_add">+static void __meminit free_pud_table(pud_t *pud_start, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; PTRS_PER_PUD; i++) {</span>
<span class="p_add">+		pud = pud_start + i;</span>
<span class="p_add">+		if (!pud_none(*pud))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* free a pud talbe */</span>
<span class="p_add">+	free_pagetable(p4d_page(*p4d), 0);</span>
<span class="p_add">+	spin_lock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+	p4d_clear(p4d);</span>
<span class="p_add">+	spin_unlock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void __meminit
 remove_pte_table(pte_t *pte_start, unsigned long addr, unsigned long end,
 		 bool direct)
<span class="p_chunk">@@ -908,6 +971,32 @@</span> <span class="p_context"> remove_pud_table(pud_t *pud_start, unsigned long addr, unsigned long end,</span>
 		update_page_count(PG_LEVEL_1G, -pages);
 }
 
<span class="p_add">+static void __meminit</span>
<span class="p_add">+remove_p4d_table(p4d_t *p4d_start, unsigned long addr, unsigned long end,</span>
<span class="p_add">+		 bool direct)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long next, pages = 0;</span>
<span class="p_add">+	pud_t *pud_base;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_start + p4d_index(addr);</span>
<span class="p_add">+	for (; addr &lt; end; addr = next, p4d++) {</span>
<span class="p_add">+		next = p4d_addr_end(addr, end);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!p4d_present(*p4d))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		BUILD_BUG_ON(p4d_large(*p4d));</span>
<span class="p_add">+</span>
<span class="p_add">+		pud_base = (pud_t *)p4d_page_vaddr(*p4d);</span>
<span class="p_add">+		remove_pud_table(pud_base, addr, next, direct);</span>
<span class="p_add">+		free_pud_table(pud_base, p4d);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (direct)</span>
<span class="p_add">+		update_page_count(PG_LEVEL_512G, -pages);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* start and end are both virtual address. */
 static void __meminit
 remove_pagetable(unsigned long start, unsigned long end, bool direct)
<span class="p_chunk">@@ -915,7 +1004,7 @@</span> <span class="p_context"> remove_pagetable(unsigned long start, unsigned long end, bool direct)</span>
 	unsigned long next;
 	unsigned long addr;
 	pgd_t *pgd;
<span class="p_del">-	pud_t *pud;</span>
<span class="p_add">+	p4d_t *p4d;</span>
 
 	for (addr = start; addr &lt; end; addr = next) {
 		next = pgd_addr_end(addr, end);
<span class="p_chunk">@@ -924,8 +1013,8 @@</span> <span class="p_context"> remove_pagetable(unsigned long start, unsigned long end, bool direct)</span>
 		if (!pgd_present(*pgd))
 			continue;
 
<span class="p_del">-		pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_del">-		remove_pud_table(pud, addr, next, direct);</span>
<span class="p_add">+		p4d = (p4d_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		remove_p4d_table(p4d, addr, next, direct);</span>
 	}
 
 	flush_tlb_all();
<span class="p_chunk">@@ -1090,6 +1179,7 @@</span> <span class="p_context"> int kern_addr_valid(unsigned long addr)</span>
 {
 	unsigned long above = ((long)addr) &gt;&gt; __VIRTUAL_MASK_SHIFT;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
<span class="p_chunk">@@ -1101,7 +1191,11 @@</span> <span class="p_context"> int kern_addr_valid(unsigned long addr)</span>
 	if (pgd_none(*pgd))
 		return 0;
 
<span class="p_del">-	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
 	if (pud_none(*pud))
 		return 0;
 
<span class="p_chunk">@@ -1158,6 +1252,7 @@</span> <span class="p_context"> static int __meminit vmemmap_populate_hugepages(unsigned long start,</span>
 	unsigned long addr;
 	unsigned long next;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 
<span class="p_chunk">@@ -1168,7 +1263,11 @@</span> <span class="p_context"> static int __meminit vmemmap_populate_hugepages(unsigned long start,</span>
 		if (!pgd)
 			return -ENOMEM;
 
<span class="p_del">-		pud = vmemmap_pud_populate(pgd, addr, node);</span>
<span class="p_add">+		p4d = vmemmap_p4d_populate(pgd, addr, node);</span>
<span class="p_add">+		if (!p4d)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+		pud = vmemmap_pud_populate(p4d, addr, node);</span>
 		if (!pud)
 			return -ENOMEM;
 
<span class="p_chunk">@@ -1236,6 +1335,7 @@</span> <span class="p_context"> void register_page_bootmem_memmap(unsigned long section_nr,</span>
 	unsigned long end = (unsigned long)(start_page + size);
 	unsigned long next;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	unsigned int nr_pages;
<span class="p_chunk">@@ -1251,7 +1351,14 @@</span> <span class="p_context"> void register_page_bootmem_memmap(unsigned long section_nr,</span>
 		}
 		get_page_bootmem(section_nr, pgd_page(*pgd), MIX_SECTION_INFO);
 
<span class="p_del">-		pud = pud_offset(pgd, addr);</span>
<span class="p_add">+		p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+		if (p4d_none(*p4d)) {</span>
<span class="p_add">+			next = (addr + PAGE_SIZE) &amp; PAGE_MASK;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		get_page_bootmem(section_nr, p4d_page(*p4d), MIX_SECTION_INFO);</span>
<span class="p_add">+</span>
<span class="p_add">+		pud = pud_offset(p4d, addr);</span>
 		if (pud_none(*pud)) {
 			next = (addr + PAGE_SIZE) &amp; PAGE_MASK;
 			continue;
<span class="p_header">diff --git a/arch/x86/xen/mmu.c b/arch/x86/xen/mmu.c</span>
<span class="p_header">index 75af8da7b54f..c36c8178847d 100644</span>
<span class="p_header">--- a/arch/x86/xen/mmu.c</span>
<span class="p_header">+++ b/arch/x86/xen/mmu.c</span>
<span class="p_chunk">@@ -535,40 +535,41 @@</span> <span class="p_context"> static pgd_t *xen_get_user_pgd(pgd_t *pgd)</span>
 	return user_ptr;
 }
 
<span class="p_del">-static void __xen_set_pgd_hyper(pgd_t *ptr, pgd_t val)</span>
<span class="p_add">+static void __xen_set_p4d_hyper(p4d_t *ptr, p4d_t val)</span>
 {
 	struct mmu_update u;
 
 	u.ptr = virt_to_machine(ptr).maddr;
<span class="p_del">-	u.val = pgd_val_ma(val);</span>
<span class="p_add">+	u.val = p4d_val_ma(val);</span>
 	xen_extend_mmu_update(&amp;u);
 }
 
 /*
<span class="p_del">- * Raw hypercall-based set_pgd, intended for in early boot before</span>
<span class="p_add">+ * Raw hypercall-based set_p4d, intended for in early boot before</span>
  * there&#39;s a page structure.  This implies:
  *  1. The only existing pagetable is the kernel&#39;s
  *  2. It is always pinned
  *  3. It has no user pagetable attached to it
  */
<span class="p_del">-static void __init xen_set_pgd_hyper(pgd_t *ptr, pgd_t val)</span>
<span class="p_add">+static void __init xen_set_p4d_hyper(p4d_t *ptr, p4d_t val)</span>
 {
 	preempt_disable();
 
 	xen_mc_batch();
 
<span class="p_del">-	__xen_set_pgd_hyper(ptr, val);</span>
<span class="p_add">+	__xen_set_p4d_hyper(ptr, val);</span>
 
 	xen_mc_issue(PARAVIRT_LAZY_MMU);
 
 	preempt_enable();
 }
 
<span class="p_del">-static void xen_set_pgd(pgd_t *ptr, pgd_t val)</span>
<span class="p_add">+static void xen_set_p4d(p4d_t *ptr, p4d_t val)</span>
 {
<span class="p_del">-	pgd_t *user_ptr = xen_get_user_pgd(ptr);</span>
<span class="p_add">+	pgd_t *user_ptr = xen_get_user_pgd((pgd_t *)ptr);</span>
<span class="p_add">+	pgd_t pgd_val;</span>
 
<span class="p_del">-	trace_xen_mmu_set_pgd(ptr, user_ptr, val);</span>
<span class="p_add">+	trace_xen_mmu_set_p4d(ptr, (p4d_t *)user_ptr, val);</span>
 
 	/* If page is not pinned, we can just update the entry
 	   directly */
<span class="p_chunk">@@ -576,7 +577,8 @@</span> <span class="p_context"> static void xen_set_pgd(pgd_t *ptr, pgd_t val)</span>
 		*ptr = val;
 		if (user_ptr) {
 			WARN_ON(xen_page_pinned(user_ptr));
<span class="p_del">-			*user_ptr = val;</span>
<span class="p_add">+			pgd_val.pgd = p4d_val_ma(val);</span>
<span class="p_add">+			*user_ptr = pgd_val;</span>
 		}
 		return;
 	}
<span class="p_chunk">@@ -585,9 +587,9 @@</span> <span class="p_context"> static void xen_set_pgd(pgd_t *ptr, pgd_t val)</span>
 	   user updates together. */
 	xen_mc_batch();
 
<span class="p_del">-	__xen_set_pgd_hyper(ptr, val);</span>
<span class="p_add">+	__xen_set_p4d_hyper(ptr, val);</span>
 	if (user_ptr)
<span class="p_del">-		__xen_set_pgd_hyper(user_ptr, val);</span>
<span class="p_add">+		__xen_set_p4d_hyper((p4d_t *)user_ptr, val);</span>
 
 	xen_mc_issue(PARAVIRT_LAZY_MMU);
 }
<span class="p_chunk">@@ -1589,7 +1591,6 @@</span> <span class="p_context"> static int xen_pgd_alloc(struct mm_struct *mm)</span>
 		BUG_ON(PagePinned(virt_to_page(xen_get_user_pgd(pgd))));
 	}
 #endif
<span class="p_del">-</span>
 	return ret;
 }
 
<span class="p_chunk">@@ -1781,7 +1782,7 @@</span> <span class="p_context"> static void xen_release_pmd(unsigned long pfn)</span>
 	xen_release_ptpage(pfn, PT_PMD);
 }
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 static void xen_alloc_pud(struct mm_struct *mm, unsigned long pfn)
 {
 	xen_alloc_ptpage(mm, pfn, PT_PUD);
<span class="p_chunk">@@ -2122,21 +2123,27 @@</span> <span class="p_context"> static phys_addr_t __init xen_early_virt_to_phys(unsigned long vaddr)</span>
  */
 void __init xen_relocate_p2m(void)
 {
<span class="p_del">-	phys_addr_t size, new_area, pt_phys, pmd_phys, pud_phys;</span>
<span class="p_add">+	phys_addr_t size, new_area, pt_phys, pmd_phys, pud_phys, p4d_phys;</span>
 	unsigned long p2m_pfn, p2m_pfn_end, n_frames, pfn, pfn_end;
<span class="p_del">-	int n_pte, n_pt, n_pmd, n_pud, idx_pte, idx_pt, idx_pmd, idx_pud;</span>
<span class="p_add">+	int n_pte, n_pt, n_pmd, n_pud, n_p4d, idx_pte, idx_pt, idx_pmd, idx_pud, idx_p4d;</span>
 	pte_t *pt;
 	pmd_t *pmd;
 	pud_t *pud;
<span class="p_add">+	p4d_t *p4d = NULL;</span>
 	pgd_t *pgd;
 	unsigned long *new_p2m;
<span class="p_add">+	int save_pud;</span>
 
 	size = PAGE_ALIGN(xen_start_info-&gt;nr_pages * sizeof(unsigned long));
 	n_pte = roundup(size, PAGE_SIZE) &gt;&gt; PAGE_SHIFT;
 	n_pt = roundup(size, PMD_SIZE) &gt;&gt; PMD_SHIFT;
 	n_pmd = roundup(size, PUD_SIZE) &gt;&gt; PUD_SHIFT;
<span class="p_del">-	n_pud = roundup(size, PGDIR_SIZE) &gt;&gt; PGDIR_SHIFT;</span>
<span class="p_del">-	n_frames = n_pte + n_pt + n_pmd + n_pud;</span>
<span class="p_add">+	n_pud = roundup(size, P4D_SIZE) &gt;&gt; P4D_SHIFT;</span>
<span class="p_add">+	if (PTRS_PER_P4D &gt; 1)</span>
<span class="p_add">+		n_p4d = roundup(size, PGDIR_SIZE) &gt;&gt; PGDIR_SHIFT;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		n_p4d = 0;</span>
<span class="p_add">+	n_frames = n_pte + n_pt + n_pmd + n_pud + n_p4d;</span>
 
 	new_area = xen_find_free_area(PFN_PHYS(n_frames));
 	if (!new_area) {
<span class="p_chunk">@@ -2152,55 +2159,76 @@</span> <span class="p_context"> void __init xen_relocate_p2m(void)</span>
 	 * To avoid any possible virtual address collision, just use
 	 * 2 * PUD_SIZE for the new area.
 	 */
<span class="p_del">-	pud_phys = new_area;</span>
<span class="p_add">+	p4d_phys = new_area;</span>
<span class="p_add">+	pud_phys = p4d_phys + PFN_PHYS(n_p4d);</span>
 	pmd_phys = pud_phys + PFN_PHYS(n_pud);
 	pt_phys = pmd_phys + PFN_PHYS(n_pmd);
 	p2m_pfn = PFN_DOWN(pt_phys) + n_pt;
 
 	pgd = __va(read_cr3());
 	new_p2m = (unsigned long *)(2 * PGDIR_SIZE);
<span class="p_del">-	for (idx_pud = 0; idx_pud &lt; n_pud; idx_pud++) {</span>
<span class="p_del">-		pud = early_memremap(pud_phys, PAGE_SIZE);</span>
<span class="p_del">-		clear_page(pud);</span>
<span class="p_del">-		for (idx_pmd = 0; idx_pmd &lt; min(n_pmd, PTRS_PER_PUD);</span>
<span class="p_del">-		     idx_pmd++) {</span>
<span class="p_del">-			pmd = early_memremap(pmd_phys, PAGE_SIZE);</span>
<span class="p_del">-			clear_page(pmd);</span>
<span class="p_del">-			for (idx_pt = 0; idx_pt &lt; min(n_pt, PTRS_PER_PMD);</span>
<span class="p_del">-			     idx_pt++) {</span>
<span class="p_del">-				pt = early_memremap(pt_phys, PAGE_SIZE);</span>
<span class="p_del">-				clear_page(pt);</span>
<span class="p_del">-				for (idx_pte = 0;</span>
<span class="p_del">-				     idx_pte &lt; min(n_pte, PTRS_PER_PTE);</span>
<span class="p_del">-				     idx_pte++) {</span>
<span class="p_del">-					set_pte(pt + idx_pte,</span>
<span class="p_del">-						pfn_pte(p2m_pfn, PAGE_KERNEL));</span>
<span class="p_del">-					p2m_pfn++;</span>
<span class="p_add">+	idx_p4d = 0;</span>
<span class="p_add">+	save_pud = n_pud;</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		if (n_p4d &gt; 0) {</span>
<span class="p_add">+			p4d = early_memremap(p4d_phys, PAGE_SIZE);</span>
<span class="p_add">+			clear_page(p4d);</span>
<span class="p_add">+			n_pud = min(save_pud, PTRS_PER_P4D);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		for (idx_pud = 0; idx_pud &lt; n_pud; idx_pud++) {</span>
<span class="p_add">+			pud = early_memremap(pud_phys, PAGE_SIZE);</span>
<span class="p_add">+			clear_page(pud);</span>
<span class="p_add">+			for (idx_pmd = 0; idx_pmd &lt; min(n_pmd, PTRS_PER_PUD);</span>
<span class="p_add">+				 idx_pmd++) {</span>
<span class="p_add">+				pmd = early_memremap(pmd_phys, PAGE_SIZE);</span>
<span class="p_add">+				clear_page(pmd);</span>
<span class="p_add">+				for (idx_pt = 0; idx_pt &lt; min(n_pt, PTRS_PER_PMD);</span>
<span class="p_add">+					 idx_pt++) {</span>
<span class="p_add">+					pt = early_memremap(pt_phys, PAGE_SIZE);</span>
<span class="p_add">+					clear_page(pt);</span>
<span class="p_add">+					for (idx_pte = 0;</span>
<span class="p_add">+						 idx_pte &lt; min(n_pte, PTRS_PER_PTE);</span>
<span class="p_add">+						 idx_pte++) {</span>
<span class="p_add">+						set_pte(pt + idx_pte,</span>
<span class="p_add">+								pfn_pte(p2m_pfn, PAGE_KERNEL));</span>
<span class="p_add">+						p2m_pfn++;</span>
<span class="p_add">+					}</span>
<span class="p_add">+					n_pte -= PTRS_PER_PTE;</span>
<span class="p_add">+					early_memunmap(pt, PAGE_SIZE);</span>
<span class="p_add">+					make_lowmem_page_readonly(__va(pt_phys));</span>
<span class="p_add">+					pin_pagetable_pfn(MMUEXT_PIN_L1_TABLE,</span>
<span class="p_add">+							PFN_DOWN(pt_phys));</span>
<span class="p_add">+					set_pmd(pmd + idx_pt,</span>
<span class="p_add">+							__pmd(_PAGE_TABLE | pt_phys));</span>
<span class="p_add">+					pt_phys += PAGE_SIZE;</span>
 				}
<span class="p_del">-				n_pte -= PTRS_PER_PTE;</span>
<span class="p_del">-				early_memunmap(pt, PAGE_SIZE);</span>
<span class="p_del">-				make_lowmem_page_readonly(__va(pt_phys));</span>
<span class="p_del">-				pin_pagetable_pfn(MMUEXT_PIN_L1_TABLE,</span>
<span class="p_del">-						  PFN_DOWN(pt_phys));</span>
<span class="p_del">-				set_pmd(pmd + idx_pt,</span>
<span class="p_del">-					__pmd(_PAGE_TABLE | pt_phys));</span>
<span class="p_del">-				pt_phys += PAGE_SIZE;</span>
<span class="p_add">+				n_pt -= PTRS_PER_PMD;</span>
<span class="p_add">+				early_memunmap(pmd, PAGE_SIZE);</span>
<span class="p_add">+				make_lowmem_page_readonly(__va(pmd_phys));</span>
<span class="p_add">+				pin_pagetable_pfn(MMUEXT_PIN_L2_TABLE,</span>
<span class="p_add">+						PFN_DOWN(pmd_phys));</span>
<span class="p_add">+				set_pud(pud + idx_pmd, __pud(_PAGE_TABLE | pmd_phys));</span>
<span class="p_add">+				pmd_phys += PAGE_SIZE;</span>
 			}
<span class="p_del">-			n_pt -= PTRS_PER_PMD;</span>
<span class="p_del">-			early_memunmap(pmd, PAGE_SIZE);</span>
<span class="p_del">-			make_lowmem_page_readonly(__va(pmd_phys));</span>
<span class="p_del">-			pin_pagetable_pfn(MMUEXT_PIN_L2_TABLE,</span>
<span class="p_del">-					  PFN_DOWN(pmd_phys));</span>
<span class="p_del">-			set_pud(pud + idx_pmd, __pud(_PAGE_TABLE | pmd_phys));</span>
<span class="p_del">-			pmd_phys += PAGE_SIZE;</span>
<span class="p_add">+			n_pmd -= PTRS_PER_PUD;</span>
<span class="p_add">+			early_memunmap(pud, PAGE_SIZE);</span>
<span class="p_add">+			make_lowmem_page_readonly(__va(pud_phys));</span>
<span class="p_add">+			pin_pagetable_pfn(MMUEXT_PIN_L3_TABLE, PFN_DOWN(pud_phys));</span>
<span class="p_add">+			if (n_p4d &gt; 0)</span>
<span class="p_add">+				set_p4d(p4d + idx_pud, __p4d(_PAGE_TABLE | pud_phys));</span>
<span class="p_add">+			else</span>
<span class="p_add">+				set_pgd(pgd + 2 + idx_pud, __pgd(_PAGE_TABLE | pud_phys));</span>
<span class="p_add">+			pud_phys += PAGE_SIZE;</span>
 		}
<span class="p_del">-		n_pmd -= PTRS_PER_PUD;</span>
<span class="p_del">-		early_memunmap(pud, PAGE_SIZE);</span>
<span class="p_del">-		make_lowmem_page_readonly(__va(pud_phys));</span>
<span class="p_del">-		pin_pagetable_pfn(MMUEXT_PIN_L3_TABLE, PFN_DOWN(pud_phys));</span>
<span class="p_del">-		set_pgd(pgd + 2 + idx_pud, __pgd(_PAGE_TABLE | pud_phys));</span>
<span class="p_del">-		pud_phys += PAGE_SIZE;</span>
<span class="p_del">-	}</span>
<span class="p_add">+		if (n_p4d &gt; 0) {</span>
<span class="p_add">+			save_pud -= PTRS_PER_P4D;</span>
<span class="p_add">+			early_memunmap(p4d, PAGE_SIZE);</span>
<span class="p_add">+			make_lowmem_page_readonly(__va(p4d_phys));</span>
<span class="p_add">+			pin_pagetable_pfn(MMUEXT_PIN_L4_TABLE, PFN_DOWN(p4d_phys));</span>
<span class="p_add">+			set_pgd(pgd + 2 + idx_p4d, __pgd(_PAGE_TABLE | p4d_phys));</span>
<span class="p_add">+			p4d_phys += PAGE_SIZE;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} while (++idx_p4d &lt; n_p4d);</span>
 
 	/* Now copy the old p2m info to the new area. */
 	memcpy(new_p2m, xen_p2m_addr, size);
<span class="p_chunk">@@ -2429,8 +2457,8 @@</span> <span class="p_context"> static void __init xen_post_allocator_init(void)</span>
 	pv_mmu_ops.set_pte = xen_set_pte;
 	pv_mmu_ops.set_pmd = xen_set_pmd;
 	pv_mmu_ops.set_pud = xen_set_pud;
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_del">-	pv_mmu_ops.set_pgd = xen_set_pgd;</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
<span class="p_add">+	pv_mmu_ops.set_p4d = xen_set_p4d;</span>
 #endif
 
 	/* This will work as long as patching hasn&#39;t happened yet
<span class="p_chunk">@@ -2439,7 +2467,7 @@</span> <span class="p_context"> static void __init xen_post_allocator_init(void)</span>
 	pv_mmu_ops.alloc_pmd = xen_alloc_pmd;
 	pv_mmu_ops.release_pte = xen_release_pte;
 	pv_mmu_ops.release_pmd = xen_release_pmd;
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	pv_mmu_ops.alloc_pud = xen_alloc_pud;
 	pv_mmu_ops.release_pud = xen_release_pud;
 #endif
<span class="p_chunk">@@ -2505,10 +2533,10 @@</span> <span class="p_context"> static const struct pv_mmu_ops xen_mmu_ops __initconst = {</span>
 	.make_pmd = PV_CALLEE_SAVE(xen_make_pmd),
 	.pmd_val = PV_CALLEE_SAVE(xen_pmd_val),
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	.pud_val = PV_CALLEE_SAVE(xen_pud_val),
 	.make_pud = PV_CALLEE_SAVE(xen_make_pud),
<span class="p_del">-	.set_pgd = xen_set_pgd_hyper,</span>
<span class="p_add">+	.set_p4d = xen_set_p4d_hyper,</span>
 
 	.alloc_pud = xen_alloc_pmd_init,
 	.release_pud = xen_release_pmd_init,
<span class="p_header">diff --git a/include/trace/events/xen.h b/include/trace/events/xen.h</span>
<span class="p_header">index bce990f5a35d..31acce9019a6 100644</span>
<span class="p_header">--- a/include/trace/events/xen.h</span>
<span class="p_header">+++ b/include/trace/events/xen.h</span>
<span class="p_chunk">@@ -241,21 +241,21 @@</span> <span class="p_context"> TRACE_EVENT(xen_mmu_set_pud,</span>
 		      (int)sizeof(pudval_t) * 2, (unsigned long long)__entry-&gt;pudval)
 	);
 
<span class="p_del">-TRACE_EVENT(xen_mmu_set_pgd,</span>
<span class="p_del">-	    TP_PROTO(pgd_t *pgdp, pgd_t *user_pgdp, pgd_t pgdval),</span>
<span class="p_del">-	    TP_ARGS(pgdp, user_pgdp, pgdval),</span>
<span class="p_add">+TRACE_EVENT(xen_mmu_set_p4d,</span>
<span class="p_add">+	    TP_PROTO(p4d_t *p4dp, p4d_t *user_p4dp, p4d_t p4dval),</span>
<span class="p_add">+	    TP_ARGS(p4dp, user_p4dp, p4dval),</span>
 	    TP_STRUCT__entry(
<span class="p_del">-		    __field(pgd_t *, pgdp)</span>
<span class="p_del">-		    __field(pgd_t *, user_pgdp)</span>
<span class="p_del">-		    __field(pgdval_t, pgdval)</span>
<span class="p_del">-		    ),</span>
<span class="p_del">-	    TP_fast_assign(__entry-&gt;pgdp = pgdp;</span>
<span class="p_del">-			   __entry-&gt;user_pgdp = user_pgdp;</span>
<span class="p_del">-			   __entry-&gt;pgdval = pgdval.pgd),</span>
<span class="p_del">-	    TP_printk(&quot;pgdp %p user_pgdp %p pgdval %0*llx (raw %0*llx)&quot;,</span>
<span class="p_del">-		      __entry-&gt;pgdp, __entry-&gt;user_pgdp,</span>
<span class="p_del">-		      (int)sizeof(pgdval_t) * 2, (unsigned long long)pgd_val(native_make_pgd(__entry-&gt;pgdval)),</span>
<span class="p_del">-		      (int)sizeof(pgdval_t) * 2, (unsigned long long)__entry-&gt;pgdval)</span>
<span class="p_add">+		    __field(p4d_t *, p4dp)</span>
<span class="p_add">+		    __field(p4d_t *, user_p4dp)</span>
<span class="p_add">+		    __field(p4dval_t, p4dval)</span>
<span class="p_add">+		    ),</span>
<span class="p_add">+	    TP_fast_assign(__entry-&gt;p4dp = p4dp;</span>
<span class="p_add">+			   __entry-&gt;user_p4dp = user_p4dp;</span>
<span class="p_add">+			   __entry-&gt;p4dval = p4d_val(p4dval)),</span>
<span class="p_add">+	    TP_printk(&quot;p4dp %p user_p4dp %p p4dval %0*llx (raw %0*llx)&quot;,</span>
<span class="p_add">+		      __entry-&gt;p4dp, __entry-&gt;user_p4dp,</span>
<span class="p_add">+		      (int)sizeof(p4dval_t) * 2, (unsigned long long)pgd_val(native_make_pgd(__entry-&gt;p4dval)),</span>
<span class="p_add">+		      (int)sizeof(p4dval_t) * 2, (unsigned long long)__entry-&gt;p4dval)</span>
 	);
 
 TRACE_EVENT(xen_mmu_pud_clear,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



