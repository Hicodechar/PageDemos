
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[5/9] iommu: Introduce fault notifier API - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [5/9] iommu: Introduce fault notifier API</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 27, 2017, 7:47 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1498592883-56224-6-git-send-email-jacob.jun.pan@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9813039/mbox/"
   >mbox</a>
|
   <a href="/patch/9813039/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9813039/">/patch/9813039/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CB6C360210 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 19:47:09 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BE0BF27F7F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 19:47:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B015F28111; Tue, 27 Jun 2017 19:47:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1B68127F7F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 27 Jun 2017 19:47:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753731AbdF0TrG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 27 Jun 2017 15:47:06 -0400
Received: from mga04.intel.com ([192.55.52.120]:25423 &quot;EHLO mga04.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753505AbdF0Tqg (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 27 Jun 2017 15:46:36 -0400
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	27 Jun 2017 12:46:32 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.40,271,1496127600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;104284157&quot;
Received: from jacob-builder.jf.intel.com ([10.7.199.158])
	by orsmga002.jf.intel.com with ESMTP; 27 Jun 2017 12:46:32 -0700
From: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;
To: iommu@lists.linux-foundation.org, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, David Woodhouse &lt;dwmw2@infradead.org&gt;
Cc: &quot;Liu, Yi L&quot; &lt;yi.l.liu@intel.com&gt;, Lan Tianyu &lt;tianyu.lan@intel.com&gt;,
	&quot;Tian, Kevin&quot; &lt;kevin.tian@intel.com&gt;, Raj Ashok &lt;ashok.raj@intel.com&gt;,
	Alex Williamson &lt;alex.williamson@redhat.com&gt;,
	Jean Delvare &lt;khali@linux-fr.org&gt;,
	Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;
Subject: [PATCH 5/9] iommu: Introduce fault notifier API
Date: Tue, 27 Jun 2017 12:47:59 -0700
Message-Id: &lt;1498592883-56224-6-git-send-email-jacob.jun.pan@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1498592883-56224-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
References: &lt;1498592883-56224-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a> - June 27, 2017, 7:47 p.m.</div>
<pre class="content">
Traditionally, device specific faults are detected and handled within
their own device drivers. When IOMMU is enabled, faults such as DMA
related transactions are detected by IOMMU. There is no generic
reporting mechanism to report faults back to the in-kernel device
driver or the guest OS in case of assigned devices.

Faults detected by IOMMU is based on the transaction&#39;s source ID which
can be reported at per device basis, regardless of the device type is a
PCI device or not.

The fault types includes recoverable (e.g. page request) and
unrecoverable faults(e.g. invalid context). In most cases, faults can be
handled by IOMMU drivers. However, there are use cases that require
fault processing outside IOMMU driver, e.g.

1. page request fault originated from an SVM capable device that is
assigned to guest via vIOMMU. In this case, the first level page tables
are owned by the guest. Page request must be propagated to the guest to
let guest OS fault in the pages then send page response. In this
mechanism, the direct receiver of IOMMU fault notification is VFIO,
which can relay notification events to QEMU or other user space
software.

2. faults need more subtle handling by device drivers. Other than
simply invoke reset function, there are needs to let device driver
handle the fault with a smaller impact.

This patchset is intended to create a generic fault notification API such
that it can scale as follows:
- all IOMMU types
- PCI and non-PCI devices
- recoverable and unrecoverable faults
- VFIO and other other in kernel users
- DMA &amp; IRQ remapping (TBD)

The event data contains both generic and raw architectural data
such that performance is not compromised as the data propagation may
involve many layers.
<span class="signed-off-by">
Signed-off-by: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Ashok Raj &lt;ashok.raj@intel.com&gt;</span>
---
 drivers/iommu/iommu.c      | 44 ++++++++++++++++++++++++++++++++++++++++++++
 include/linux/iommu.h      | 23 +++++++++++++++++++++++
 include/uapi/linux/iommu.h | 34 ++++++++++++++++++++++++++++++++++
 3 files changed, 101 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a> - June 28, 2017, 10:16 a.m.</div>
<pre class="content">
On Tue, Jun 27, 2017 at 12:47:59PM -0700, Jacob Pan wrote:
<span class="quote">&gt; diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; index d973555..07cfd92 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; @@ -48,6 +48,7 @@ struct iommu_group {</span>
<span class="quote">&gt;  	struct list_head devices;</span>
<span class="quote">&gt;  	struct mutex mutex;</span>
<span class="quote">&gt;  	struct blocking_notifier_head notifier;</span>
<span class="quote">&gt; +	struct blocking_notifier_head fault_notifier;</span>

Do you really need a notifier chain here? Will there ever be more than
one callback registered to it?
<span class="quote">
&gt; +struct iommu_fault_event {</span>
<span class="quote">&gt; +	struct device *dev;</span>

Putting a &#39;struct device *&#39; member in a uapi struct looks fundamentally
wrong.



	Joerg
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a> - June 28, 2017, 4:16 p.m.</div>
<pre class="content">
On Wed, 28 Jun 2017 12:16:03 +0200
Joerg Roedel &lt;joro@8bytes.org&gt; wrote:
<span class="quote">
&gt; On Tue, Jun 27, 2017 at 12:47:59PM -0700, Jacob Pan wrote:</span>
<span class="quote">&gt; &gt; diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; &gt; index d973555..07cfd92 100644</span>
<span class="quote">&gt; &gt; --- a/drivers/iommu/iommu.c</span>
<span class="quote">&gt; &gt; +++ b/drivers/iommu/iommu.c</span>
<span class="quote">&gt; &gt; @@ -48,6 +48,7 @@ struct iommu_group {</span>
<span class="quote">&gt; &gt;  	struct list_head devices;</span>
<span class="quote">&gt; &gt;  	struct mutex mutex;</span>
<span class="quote">&gt; &gt;  	struct blocking_notifier_head notifier;</span>
<span class="quote">&gt; &gt; +	struct blocking_notifier_head fault_notifier;  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Do you really need a notifier chain here? Will there ever be more than</span>
<span class="quote">&gt; one callback registered to it?</span>
<span class="quote">&gt; </span>
yes, this notifier chain is shared by all devices under a group. the
event contains device info which notifier callbacks can filter.
<span class="quote">&gt; &gt; +struct iommu_fault_event {</span>
<span class="quote">&gt; &gt; +	struct device *dev;  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Putting a &#39;struct device *&#39; member in a uapi struct looks</span>
<span class="quote">&gt; fundamentally wrong.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
my mistake, it was originally (RFC) not in uapi but with the
consideration of using vfio to expose it to user space I have moved it
to uapi. But you are right, it should be some other forms of device
representation used by vfio. VFIO layer has to do the translation and
inject that into the guest. In kernel driver users can use struct
device to identify the faulting device.
<span class="quote">
&gt; </span>
<span class="quote">&gt; 	Joerg</span>
<span class="quote">&gt; </span>

[Jacob Pan]
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c</span>
<span class="p_header">index d973555..07cfd92 100644</span>
<span class="p_header">--- a/drivers/iommu/iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/iommu.c</span>
<span class="p_chunk">@@ -48,6 +48,7 @@</span> <span class="p_context"> struct iommu_group {</span>
 	struct list_head devices;
 	struct mutex mutex;
 	struct blocking_notifier_head notifier;
<span class="p_add">+	struct blocking_notifier_head fault_notifier;</span>
 	void *iommu_data;
 	void (*iommu_data_release)(void *iommu_data);
 	char *name;
<span class="p_chunk">@@ -345,6 +346,7 @@</span> <span class="p_context"> struct iommu_group *iommu_group_alloc(void)</span>
 	mutex_init(&amp;group-&gt;mutex);
 	INIT_LIST_HEAD(&amp;group-&gt;devices);
 	BLOCKING_INIT_NOTIFIER_HEAD(&amp;group-&gt;notifier);
<span class="p_add">+	BLOCKING_INIT_NOTIFIER_HEAD(&amp;group-&gt;fault_notifier);</span>
 
 	ret = ida_simple_get(&amp;iommu_group_ida, 0, 0, GFP_KERNEL);
 	if (ret &lt; 0) {
<span class="p_chunk">@@ -790,6 +792,48 @@</span> <span class="p_context"> int iommu_group_unregister_notifier(struct iommu_group *group,</span>
 EXPORT_SYMBOL_GPL(iommu_group_unregister_notifier);
 
 /**
<span class="p_add">+ * iommu_register_fault_notifier - Register a notifier for fault reporting</span>
<span class="p_add">+ * @group: device&#39;s iommu group to notify fault events</span>
<span class="p_add">+ * @nb: notifier block to signal</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+int iommu_register_fault_notifier(struct iommu_group *group,</span>
<span class="p_add">+				struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return blocking_notifier_chain_register(&amp;group-&gt;fault_notifier, nb);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(iommu_register_fault_notifier);</span>
<span class="p_add">+</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * iommu_unregister_fault_notifier - Unregister a notifier for fault reporting</span>
<span class="p_add">+ * @domain: the domain to watch</span>
<span class="p_add">+ * @nb: notifier block to signal</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+int iommu_unregister_fault_notifier(struct iommu_group *group,</span>
<span class="p_add">+				  struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return blocking_notifier_chain_unregister(&amp;group-&gt;fault_notifier, nb);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(iommu_unregister_fault_notifier);</span>
<span class="p_add">+</span>
<span class="p_add">+int iommu_fault_notifier_call_chain(struct iommu_fault_event *event)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+	struct iommu_group *group = iommu_group_get(event-&gt;dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!group)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	/* caller provide generic data related to the event, TBD */</span>
<span class="p_add">+	ret = (blocking_notifier_call_chain(&amp;group-&gt;fault_notifier, 0, (void *)event)</span>
<span class="p_add">+		== NOTIFY_BAD) ? -EINVAL : 0;</span>
<span class="p_add">+	iommu_group_put(group);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(iommu_fault_notifier_call_chain);</span>
<span class="p_add">+</span>
<span class="p_add">+/**</span>
  * iommu_group_id - Return ID for a group
  * @group: the group to ID
  *
<span class="p_header">diff --git a/include/linux/iommu.h b/include/linux/iommu.h</span>
<span class="p_header">index fbc08ae..ed2f804 100644</span>
<span class="p_header">--- a/include/linux/iommu.h</span>
<span class="p_header">+++ b/include/linux/iommu.h</span>
<span class="p_chunk">@@ -342,6 +342,12 @@</span> <span class="p_context"> extern int iommu_group_register_notifier(struct iommu_group *group,</span>
 					 struct notifier_block *nb);
 extern int iommu_group_unregister_notifier(struct iommu_group *group,
 					   struct notifier_block *nb);
<span class="p_add">+extern int iommu_register_fault_notifier(struct iommu_group *group,</span>
<span class="p_add">+					 struct notifier_block *nb);</span>
<span class="p_add">+extern int iommu_unregister_fault_notifier(struct iommu_group *group,</span>
<span class="p_add">+					 struct notifier_block *nb);</span>
<span class="p_add">+extern int iommu_fault_notifier_call_chain(struct iommu_fault_event *event);</span>
<span class="p_add">+</span>
 extern int iommu_group_id(struct iommu_group *group);
 extern struct iommu_group *iommu_group_get_for_dev(struct device *dev);
 extern struct iommu_domain *iommu_group_default_domain(struct iommu_group *);
<span class="p_chunk">@@ -574,6 +580,23 @@</span> <span class="p_context"> static inline int iommu_group_unregister_notifier(struct iommu_group *group,</span>
 	return 0;
 }
 
<span class="p_add">+static inline int iommu_register_fault_notifier(struct device *dev,</span>
<span class="p_add">+						  struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int iommu_unregister_fault_notifier(struct device *dev,</span>
<span class="p_add">+						  struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int iommu_fault_notifier_call_chain(struct iommu_fault_event *event)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline int iommu_group_id(struct iommu_group *group)
 {
 	return -ENODEV;
<span class="p_header">diff --git a/include/uapi/linux/iommu.h b/include/uapi/linux/iommu.h</span>
<span class="p_header">index f077353..a8e3d7f 100644</span>
<span class="p_header">--- a/include/uapi/linux/iommu.h</span>
<span class="p_header">+++ b/include/uapi/linux/iommu.h</span>
<span class="p_chunk">@@ -48,4 +48,38 @@</span> <span class="p_context"> struct tlb_invalidate_info {</span>
 	__u8	opaque[];
 };
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Generic fault event notification data, used by all IOMMU models</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * - PCI and non-PCI devices</span>
<span class="p_add">+ * - Recoverable faults (e.g. page request) &amp; un-recoverable faults</span>
<span class="p_add">+ * - DMA remapping and IRQ remapping faults</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * @dev The device which faults are reported by IOMMU</span>
<span class="p_add">+ * @addr tells the offending address</span>
<span class="p_add">+ * @pasid contains process address space ID, used in shared virtual memory (SVM)</span>
<span class="p_add">+ * @prot page access protection flag, e.g. IOMMU_READ, IOMMU_WRITE</span>
<span class="p_add">+ * @flags contains fault type, etc.</span>
<span class="p_add">+ * @length tells the size of the buf in bytes</span>
<span class="p_add">+ * @buf contains any raw or arch specific data</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct iommu_fault_event {</span>
<span class="p_add">+	struct device *dev;</span>
<span class="p_add">+	__u64 addr;</span>
<span class="p_add">+	__u32 pasid;</span>
<span class="p_add">+	__u32 prot;</span>
<span class="p_add">+	__u32 flags;</span>
<span class="p_add">+/* page request as result of recoverable translation fault */</span>
<span class="p_add">+#define IOMMU_FAULT_PAGE_REQ	BIT(0)</span>
<span class="p_add">+/* unrecoverable fault, e.g. invalid device context  */</span>
<span class="p_add">+#define IOMMU_FAULT_UNRECOV	BIT(1)</span>
<span class="p_add">+/* unrecoverable fault related to interrupt remapping */</span>
<span class="p_add">+#define IOMMU_FAULT_IRQ_REMAP	BIT(2)</span>
<span class="p_add">+/* unrecoverable fault on invalidation of translation caches */</span>
<span class="p_add">+#define IOMMU_FAULT_INVAL	BIT(3)</span>
<span class="p_add">+	__u32 length;</span>
<span class="p_add">+	__u8  buf[];</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 #endif /* _UAPI_IOMMU_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



