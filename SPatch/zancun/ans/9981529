
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,20/31] KVM: arm64: Implement AT instruction handling - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,20/31] KVM: arm64: Implement AT instruction handling</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=174677">Jintack Lim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 3, 2017, 3:11 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1507000273-3735-18-git-send-email-jintack.lim@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9981529/mbox/"
   >mbox</a>
|
   <a href="/patch/9981529/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9981529/">/patch/9981529/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9DAF2602B8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 Oct 2017 03:16:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8FDA82887F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 Oct 2017 03:16:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 84C0228882; Tue,  3 Oct 2017 03:16:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CC0332887F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  3 Oct 2017 03:16:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751965AbdJCDQL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 2 Oct 2017 23:16:11 -0400
Received: from mail-it0-f45.google.com ([209.85.214.45]:46915 &quot;EHLO
	mail-it0-f45.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751830AbdJCDMB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 2 Oct 2017 23:12:01 -0400
Received: by mail-it0-f45.google.com with SMTP id d192so9964173itd.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 02 Oct 2017 20:12:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=9i2WruQyyjnDqIxjHGFDBHeRvu6kqt7bRb8vlRJ9+LE=;
	b=bD3UogmOUupo5kk4LGa3fWHTB9vB2pXsal59760y+eBdEORJSuHa9eRoGkSALEaGsg
	bdCXASNKxQqIKS3qbR+1n+BpRb9tFp7Ua5u4XMzbQQ8iwajVOuzqOnFJrsiHqkFRwhOw
	UdTR5MnmHur0yeplMq8IA6EoBdz9nC6w62A4I=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=9i2WruQyyjnDqIxjHGFDBHeRvu6kqt7bRb8vlRJ9+LE=;
	b=a7rfwpOkQLZgyNmZxAMwZOZcQswKoEMHF/lk4sULkf3rWzm7xcnbxj3h+9MhpAraCA
	6MpbCvCEx91m1vhYn72ftHwTSZYX6ws/Gt+RI9FInCb0oc5ePGELgWL6jcH435YVm2E3
	uDuISAhZSOOgev26clLbFA1vEzgZDX1FOUBs369UBzPg+2VHwxLjP4N614BpoJXNghEf
	M1WnJ3IQXaxPFKDEkssKJXwlqRIqSiCePy6quqB20v3xN1ETX0fpd/m4OUqX10khHfc3
	NWG3hGg0BYyNy2aCItVSfCOVPF/Gf5bbhg+wRe8YMG6sS0xwRkLLA2mEK7RHPs1aeGVf
	CJbg==
X-Gm-Message-State: AMCzsaUZBicE0aoTb/XQbr0iFbvIe2sEjiUrAMlLDWnk8aBn5SBczWKJ
	vYJohyYwD4f3HNNIYUxF0Nt99A==
X-Google-Smtp-Source: AOwi7QA5Hwz+ppAhnZZczBWAMg1E57MizxFDvWGSjLH+Iehu+YSF7cQ1H+CbweLiWS21SaWMaIDEeQ==
X-Received: by 10.36.237.79 with SMTP id r76mr9971346ith.140.1507000320823; 
	Mon, 02 Oct 2017 20:12:00 -0700 (PDT)
Received: from node.jintackl-qv28633.kvmarm-pg0.wisc.cloudlab.us
	(c220g1-031126.wisc.cloudlab.us. [128.104.222.76])
	by smtp.gmail.com with ESMTPSA id
	h84sm5367193iod.72.2017.10.02.20.11.59
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 02 Oct 2017 20:12:00 -0700 (PDT)
From: Jintack Lim &lt;jintack.lim@linaro.org&gt;
To: christoffer.dall@linaro.org, marc.zyngier@arm.com,
	kvmarm@lists.cs.columbia.edu
Cc: jintack@cs.columbia.edu, pbonzini@redhat.com, rkrcmar@redhat.com,
	catalin.marinas@arm.com, will.deacon@arm.com,
	linux@armlinux.org.uk, mark.rutland@arm.com,
	linux-arm-kernel@lists.infradead.org, kvm@vger.kernel.org,
	linux-kernel@vger.kernel.org, Jintack Lim &lt;jintack.lim@linaro.org&gt;
Subject: [RFC PATCH v2 20/31] KVM: arm64: Implement AT instruction handling
Date: Mon,  2 Oct 2017 22:11:02 -0500
Message-Id: &lt;1507000273-3735-18-git-send-email-jintack.lim@linaro.org&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1507000273-3735-1-git-send-email-jintack.lim@linaro.org&gt;
References: &lt;1507000273-3735-1-git-send-email-jintack.lim@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=174677">Jintack Lim</a> - Oct. 3, 2017, 3:11 a.m.</div>
<pre class="content">
Implement AT instruction handling logic in EL2. This will be used to
emulate AT instructions executed in the virtual EL2.

AT instruction emulation works by loading the proper processor context,
which depends on the trapped instruction and the virtual HCR_EL2, to the
EL1 virtual memory control registers and executing AT instructions. Note
that ctxt-&gt;hw_sys_regs is expected to have the proper processor context
before calling the handling function(__kvm_at_insn) implemented in this
patch.
<span class="signed-off-by">
Signed-off-by: Jintack Lim &lt;jintack.lim@linaro.org&gt;</span>
---
 arch/arm64/include/asm/kvm_asm.h |   3 +
 arch/arm64/kvm/hyp/Makefile      |   1 +
 arch/arm64/kvm/hyp/at.c          | 131 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 135 insertions(+)
 create mode 100644 arch/arm64/kvm/hyp/at.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">index e492749..4bded9d 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -56,6 +56,9 @@</span> <span class="p_context"></span>
 extern void __kvm_tlb_flush_vmid(u64 vttbr);
 extern void __kvm_tlb_flush_local_vmid(u64 vttbr);
 
<span class="p_add">+extern void __kvm_at_insn(struct kvm_vcpu *vcpu, unsigned long vaddr,</span>
<span class="p_add">+			  bool el2_regime, int sys_encoding);</span>
<span class="p_add">+</span>
 extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);
 
 extern u64 __vgic_v3_get_ich_vtr_el2(void);
<span class="p_header">diff --git a/arch/arm64/kvm/hyp/Makefile b/arch/arm64/kvm/hyp/Makefile</span>
<span class="p_header">index 14c4e3b..1b03adb 100644</span>
<span class="p_header">--- a/arch/arm64/kvm/hyp/Makefile</span>
<span class="p_header">+++ b/arch/arm64/kvm/hyp/Makefile</span>
<span class="p_chunk">@@ -16,6 +16,7 @@</span> <span class="p_context"> obj-$(CONFIG_KVM_ARM_HOST) += entry.o</span>
 obj-$(CONFIG_KVM_ARM_HOST) += switch.o
 obj-$(CONFIG_KVM_ARM_HOST) += fpsimd.o
 obj-$(CONFIG_KVM_ARM_HOST) += tlb.o
<span class="p_add">+obj-$(CONFIG_KVM_ARM_HOST) += at.o</span>
 obj-$(CONFIG_KVM_ARM_HOST) += hyp-entry.o
 obj-$(CONFIG_KVM_ARM_HOST) += s2-setup.o
 
<span class="p_header">diff --git a/arch/arm64/kvm/hyp/at.c b/arch/arm64/kvm/hyp/at.c</span>
new file mode 100644
<span class="p_header">index 0000000..d491d94</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arm64/kvm/hyp/at.c</span>
<span class="p_chunk">@@ -0,0 +1,131 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2017 - Linaro Ltd</span>
<span class="p_add">+ * Author: Jintack Lim &lt;jintack.lim@linaro.org&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * You should have received a copy of the GNU General Public License</span>
<span class="p_add">+ * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/kvm_hyp.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static void __hyp_text __save_vmregs(struct kvm_cpu_context *ctxt)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u64 *sys_regs = kern_hyp_va(ctxt-&gt;hw_sys_regs);</span>
<span class="p_add">+</span>
<span class="p_add">+	sys_regs[TTBR0_EL1]     = read_sysreg_el1(ttbr0);</span>
<span class="p_add">+	sys_regs[TTBR1_EL1]     = read_sysreg_el1(ttbr1);</span>
<span class="p_add">+	sys_regs[TCR_EL1]       = read_sysreg_el1(tcr);</span>
<span class="p_add">+	sys_regs[SCTLR_EL1]     = read_sysreg_el1(sctlr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __hyp_text __restore_vmregs(struct kvm_cpu_context *ctxt)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u64 *sys_regs = kern_hyp_va(ctxt-&gt;hw_sys_regs);</span>
<span class="p_add">+</span>
<span class="p_add">+	write_sysreg_el1(sys_regs[TTBR0_EL1],   ttbr0);</span>
<span class="p_add">+	write_sysreg_el1(sys_regs[TTBR1_EL1],   ttbr1);</span>
<span class="p_add">+	write_sysreg_el1(sys_regs[TCR_EL1],     tcr);</span>
<span class="p_add">+	write_sysreg_el1(sys_regs[SCTLR_EL1],   sctlr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __hyp_text __at_switch_to_guest_nvhe(struct kvm_vcpu *vcpu,</span>
<span class="p_add">+					  bool el2_regime)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_cpu_context *host_ctxt;</span>
<span class="p_add">+	struct kvm_cpu_context *guest_ctxt;</span>
<span class="p_add">+	u64 val;</span>
<span class="p_add">+</span>
<span class="p_add">+	host_ctxt = kern_hyp_va(vcpu-&gt;arch.host_cpu_context);</span>
<span class="p_add">+	guest_ctxt = &amp;vcpu-&gt;arch.ctxt;</span>
<span class="p_add">+</span>
<span class="p_add">+	__save_vmregs(host_ctxt);</span>
<span class="p_add">+	__restore_vmregs(guest_ctxt);</span>
<span class="p_add">+</span>
<span class="p_add">+	val = read_sysreg(hcr_el2);</span>
<span class="p_add">+	if (el2_regime)</span>
<span class="p_add">+		val |= (HCR_NV | HCR_NV1);</span>
<span class="p_add">+	write_sysreg(val, hcr_el2);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __hyp_text __at_switch_to_guest_vhe(struct kvm_vcpu *vcpu, bool el2_regime)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_cpu_context *guest_ctxt = &amp;vcpu-&gt;arch.ctxt;</span>
<span class="p_add">+	u64 val;</span>
<span class="p_add">+</span>
<span class="p_add">+	__restore_vmregs(guest_ctxt);</span>
<span class="p_add">+</span>
<span class="p_add">+	val = read_sysreg(hcr_el2);</span>
<span class="p_add">+	val &amp;= ~HCR_TGE;</span>
<span class="p_add">+	if (el2_regime)</span>
<span class="p_add">+		val |= (HCR_NV | HCR_NV1);</span>
<span class="p_add">+	write_sysreg(val, hcr_el2);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Switching to guest.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * 1. [nvhe] Save host vm regs</span>
<span class="p_add">+ * 2. [both] Restore guest vm regs</span>
<span class="p_add">+ * 3. [both] Set HCR_EL2.NV/NV1 bit if necessary</span>
<span class="p_add">+ * 4. [vhe]  Clear HCR_EL2.TGE</span>
<span class="p_add">+ */</span>
<span class="p_add">+static hyp_alternate_select(__at_switch_to_guest,</span>
<span class="p_add">+			    __at_switch_to_guest_nvhe, __at_switch_to_guest_vhe,</span>
<span class="p_add">+			    ARM64_HAS_VIRT_HOST_EXTN);</span>
<span class="p_add">+</span>
<span class="p_add">+void __hyp_text __kvm_at_insn(struct kvm_vcpu *vcpu, unsigned long vaddr,</span>
<span class="p_add">+			      bool el2_regime, int sys_encoding)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_cpu_context *ctxt = &amp;vcpu-&gt;arch.ctxt;</span>
<span class="p_add">+	struct kvm_cpu_context *host_ctxt;</span>
<span class="p_add">+</span>
<span class="p_add">+	host_ctxt = kern_hyp_va(vcpu-&gt;arch.host_cpu_context);</span>
<span class="p_add">+</span>
<span class="p_add">+	__at_switch_to_guest()(vcpu, el2_regime);</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (sys_encoding) {</span>
<span class="p_add">+	case AT_S1E1R:</span>
<span class="p_add">+	case AT_S1E2R:</span>
<span class="p_add">+		asm volatile(&quot;at s1e1r, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case AT_S1E1W:</span>
<span class="p_add">+	case AT_S1E2W:</span>
<span class="p_add">+		asm volatile(&quot;at s1e1w, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case AT_S1E0R:</span>
<span class="p_add">+		asm volatile(&quot;at s1e0r, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case AT_S1E0W:</span>
<span class="p_add">+		asm volatile(&quot;at s1e0w, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case AT_S1E1RP:</span>
<span class="p_add">+		asm volatile(&quot;at s1e1rp, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case AT_S1E1WP:</span>
<span class="p_add">+		asm volatile(&quot;at s1e1wp, %0&quot; : : &quot;r&quot; (vaddr));</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Save the translation result to the virtual machine&#39;s context */</span>
<span class="p_add">+	ctxt-&gt;sys_regs[PAR_EL1] = read_sysreg(par_el1);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Switch to the host */</span>
<span class="p_add">+	if (has_vhe()) {</span>
<span class="p_add">+		write_sysreg(HCR_HOST_VHE_FLAGS, hcr_el2);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/* We don&#39;t save guest vm regs; we didn&#39;t make any changes */</span>
<span class="p_add">+		__restore_vmregs(host_ctxt);</span>
<span class="p_add">+		write_sysreg(HCR_RW, hcr_el2);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



