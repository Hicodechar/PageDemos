
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>perf stat: Support metrics with perf stat --per-thread - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    perf stat: Support metrics with perf stat --per-thread</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 12, 2017, 11:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171012113027.GB4872@krava&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10001683/mbox/"
   >mbox</a>
|
   <a href="/patch/10001683/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10001683/">/patch/10001683/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	86034602BF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Oct 2017 11:30:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 75FA828D61
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Oct 2017 11:30:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6A9BB28D7E; Thu, 12 Oct 2017 11:30:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C451B28D61
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 12 Oct 2017 11:30:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756667AbdJLLac (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 12 Oct 2017 07:30:32 -0400
Received: from mx1.redhat.com ([209.132.183.28]:32986 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1756577AbdJLLaa (ORCPT &lt;rfc822;Linux-kernel@vger.kernel.org&gt;);
	Thu, 12 Oct 2017 07:30:30 -0400
Received: from smtp.corp.redhat.com
	(int-mx04.intmail.prod.int.phx2.redhat.com [10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 80DEB80F97;
	Thu, 12 Oct 2017 11:30:30 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 80DEB80F97
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=jolsa@redhat.com
Received: from krava (unknown [10.43.17.103])
	by smtp.corp.redhat.com (Postfix) with SMTP id 8C45317D35;
	Thu, 12 Oct 2017 11:30:28 +0000 (UTC)
Date: Thu, 12 Oct 2017 13:30:27 +0200
From: Jiri Olsa &lt;jolsa@redhat.com&gt;
To: Jin Yao &lt;yao.jin@linux.intel.com&gt;
Cc: acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
	mingo@redhat.com, alexander.shishkin@linux.intel.com,
	Linux-kernel@vger.kernel.org, ak@linux.intel.com,
	kan.liang@intel.com, yao.jin@intel.com
Subject: Re: [PATCH] perf stat: Support metrics with perf stat --per-thread
Message-ID: &lt;20171012113027.GB4872@krava&gt;
References: &lt;1507799100-2667-1-git-send-email-yao.jin@linux.intel.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;1507799100-2667-1-git-send-email-yao.jin@linux.intel.com&gt;
User-Agent: Mutt/1.9.1 (2017-09-22)
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 12 Oct 2017 11:30:30 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Oct. 12, 2017, 11:30 a.m.</div>
<pre class="content">
On Thu, Oct 12, 2017 at 05:05:00PM +0800, Jin Yao wrote:

SNIP
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  tools/perf/util/stat.c | 23 +++++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 23 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="quote">&gt; index 35e9848..1164e68 100644</span>
<span class="quote">&gt; --- a/tools/perf/util/stat.c</span>
<span class="quote">&gt; +++ b/tools/perf/util/stat.c</span>
<span class="quote">&gt; @@ -314,6 +314,26 @@ static int process_counter_maps(struct perf_stat_config *config,</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static int process_aggr_thread_counter(struct perf_evsel *counter)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int nthreads = thread_map__nr(counter-&gt;threads);</span>
<span class="quote">&gt; +	int ncpus = cpu_map__nr(counter-&gt;cpus);</span>
<span class="quote">&gt; +	int cpu, thread;</span>
<span class="quote">&gt; +	u64 tmp;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (thread = 0; thread &lt; nthreads; thread++) {</span>
<span class="quote">&gt; +		u64 val = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		for (cpu = 0; cpu &lt; ncpus; cpu++)</span>
<span class="quote">&gt; +			val += perf_counts(counter-&gt;counts, cpu, thread)-&gt;val;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		tmp = val * counter-&gt;scale;</span>
<span class="quote">&gt; +		perf_stat__update_shadow_stats(counter, &amp;tmp, 0);</span>


also maybe we should move scale mult. into perf_stat__update_shadow_stats,
something like below (on top of my earlier patch)

not much tested so far.. but looks ok ;-)

jirka


---
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 9f2f07c0237d..4e109e6ba341 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -1267,8 +1267,7 @@</span> <span class="p_context"> static void aggr_update_shadow(void)</span>
 					continue;
 				val += perf_counts(counter-&gt;counts, cpu, 0)-&gt;val;
 			}
<span class="p_del">-			val = val * counter-&gt;scale;</span>
<span class="p_del">-			perf_stat__update_shadow_stats(counter, &amp;val,</span>
<span class="p_add">+			perf_stat__update_shadow_stats(counter, val,</span>
 						       first_shadow_cpu(counter, id));
 		}
 	}
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index a2c12d1ef32a..e66ac456d103 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -178,58 +178,60 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
  * more semantic information such as miss/hit ratios,
  * instruction rates, etc:
  */
<span class="p_del">-void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="p_add">+void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,</span>
 				    int cpu)
 {
 	int ctx = evsel_context(counter);
 
<span class="p_add">+	count *= counter-&gt;scale;</span>
<span class="p_add">+</span>
 	if (perf_evsel__match(counter, SOFTWARE, SW_TASK_CLOCK) ||
 	    perf_evsel__match(counter, SOFTWARE, SW_CPU_CLOCK))
<span class="p_del">-		update_stats(&amp;runtime_nsecs_stats[cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_nsecs_stats[cpu], count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CPU_CYCLES))
<span class="p_del">-		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, CYCLES_IN_TX))
<span class="p_del">-		update_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, TRANSACTION_START))
<span class="p_del">-		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, ELISION_START))
<span class="p_del">-		update_stats(&amp;runtime_elision_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_elision_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_TOTAL_SLOTS))
<span class="p_del">-		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_ISSUED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_RETIRED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_FETCH_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu],count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu],count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_RECOVERY_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_BRANCH_INSTRUCTIONS))
<span class="p_del">-		update_stats(&amp;runtime_branches_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_branches_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CACHE_REFERENCES))
<span class="p_del">-		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1D))
<span class="p_del">-		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1I))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_LL))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_DTLB))
<span class="p_del">-		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))
<span class="p_del">-		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, SMI_NUM))
<span class="p_del">-		update_stats(&amp;runtime_smi_num_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_smi_num_stats[ctx][cpu], count);</span>
 	else if (perf_stat_evsel__is(counter, APERF))
<span class="p_del">-		update_stats(&amp;runtime_aperf_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+		update_stats(&amp;runtime_aperf_stats[ctx][cpu], count);</span>
 
 	if (counter-&gt;collect_stat) {
 		struct saved_value *v = saved_value_lookup(counter, cpu, true);
<span class="p_del">-		update_stats(&amp;v-&gt;stats, count[0]);</span>
<span class="p_add">+		update_stats(&amp;v-&gt;stats, count);</span>
 	}
 }
 
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index 6f94f3a2282e..c1cf42d04826 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -259,7 +259,6 @@</span> <span class="p_context"> process_counter_values(struct perf_stat_config *config, struct perf_evsel *evsel</span>
 	struct perf_counts_values *aggr = &amp;evsel-&gt;counts-&gt;aggr;
 	static struct perf_counts_values zero;
 	bool skip = false;
<span class="p_del">-	u64 val;</span>
 
 	if (check_per_pkg(evsel, count, cpu, &amp;skip)) {
 		pr_err(&quot;failed to read per-pkg counter\n&quot;);
<span class="p_chunk">@@ -278,11 +277,9 @@</span> <span class="p_context"> process_counter_values(struct perf_stat_config *config, struct perf_evsel *evsel</span>
 			perf_evsel__compute_deltas(evsel, cpu, thread, count);
 		perf_counts_values__scale(count, config-&gt;scale, NULL);
 		if (config-&gt;aggr_mode == AGGR_NONE)
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, count-&gt;values, cpu);</span>
<span class="p_del">-		if (config-&gt;aggr_mode == AGGR_THREAD) {</span>
<span class="p_del">-			val = count-&gt;val * evsel-&gt;scale;</span>
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, &amp;val, 0);</span>
<span class="p_del">-		}</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, cpu);</span>
<span class="p_add">+		if (config-&gt;aggr_mode == AGGR_THREAD)</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, 0);</span>
 		break;
 	case AGGR_GLOBAL:
 		aggr-&gt;val += count-&gt;val;
<span class="p_chunk">@@ -325,7 +322,6 @@</span> <span class="p_context"> int perf_stat_process_counter(struct perf_stat_config *config,</span>
 	struct perf_counts_values *aggr = &amp;counter-&gt;counts-&gt;aggr;
 	struct perf_stat_evsel *ps = counter-&gt;priv;
 	u64 *count = counter-&gt;counts-&gt;aggr.values;
<span class="p_del">-	u64 val;</span>
 	int i, ret;
 
 	aggr-&gt;val = aggr-&gt;ena = aggr-&gt;run = 0;
<span class="p_chunk">@@ -365,8 +361,7 @@</span> <span class="p_context"> int perf_stat_process_counter(struct perf_stat_config *config,</span>
 	/*
 	 * Save the full runtime - to allow normalization during printout:
 	 */
<span class="p_del">-	val = counter-&gt;scale * *count;</span>
<span class="p_del">-	perf_stat__update_shadow_stats(counter, &amp;val, 0);</span>
<span class="p_add">+	perf_stat__update_shadow_stats(counter, *count, 0);</span>
 
 	return 0;
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 47915df346fb..490b78aa7230 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -82,7 +82,7 @@</span> <span class="p_context"> typedef void (*new_line_t )(void *ctx);</span>
 
 void perf_stat__init_shadow_stats(void);
 void perf_stat__reset_shadow_stats(void);
<span class="p_del">-void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="p_add">+void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,</span>
 				    int cpu);
 struct perf_stat_output_ctx {
 	void *ctx;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



