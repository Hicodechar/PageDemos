
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v5,06/11] mm: Protect VMA modifications using VMA sequence count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v5,06/11] mm: Protect VMA modifications using VMA sequence count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 16, 2017, 5:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497635555-25679-7-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9792467/mbox/"
   >mbox</a>
|
   <a href="/patch/9792467/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9792467/">/patch/9792467/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3389C60325 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2691120373
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1AE6B28562; Fri, 16 Jun 2017 17:54:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7824020373
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753064AbdFPRyM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Jun 2017 13:54:12 -0400
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:46473 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752910AbdFPRxE (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Jun 2017 13:53:04 -0400
Received: from pps.filterd (m0098396.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v5GHn8fr048037
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Jun 2017 13:52:58 -0400
Received: from e06smtp13.uk.ibm.com (e06smtp13.uk.ibm.com [195.75.94.109])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2b4kfms9xr-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Jun 2017 13:52:58 -0400
Received: from localhost
	by e06smtp13.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Fri, 16 Jun 2017 18:52:55 +0100
Received: from b06cxnps3074.portsmouth.uk.ibm.com (9.149.109.194)
	by e06smtp13.uk.ibm.com (192.168.101.143) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Fri, 16 Jun 2017 18:52:51 +0100
Received: from d06av22.portsmouth.uk.ibm.com (d06av22.portsmouth.uk.ibm.com
	[9.149.105.58])
	by b06cxnps3074.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v5GHqpKj12583274; Fri, 16 Jun 2017 17:52:51 GMT
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id CC1064C058;
	Fri, 16 Jun 2017 18:51:00 +0100 (BST)
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id AF8134C044;
	Fri, 16 Jun 2017 18:50:59 +0100 (BST)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.146.24])
	by d06av22.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Fri, 16 Jun 2017 18:50:59 +0100 (BST)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: paulmck@linux.vnet.ibm.com, peterz@infradead.org,
	akpm@linux-foundation.org, kirill@shutemov.name,
	ak@linux.intel.com, mhocko@kernel.org, dave@stgolabs.net,
	jack@suse.cz, Matthew Wilcox &lt;willy@infradead.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	haren@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	npiggin@gmail.com, bsingharora@gmail.com,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
Subject: [RFC v5 06/11] mm: Protect VMA modifications using VMA sequence
	count
Date: Fri, 16 Jun 2017 19:52:30 +0200
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1497635555-25679-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1497635555-25679-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 17061617-0012-0000-0000-0000054F609E
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17061617-0013-0000-0000-000018BFE499
Message-Id: &lt;1497635555-25679-7-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-06-16_10:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1703280000
	definitions=main-1706160296
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - June 16, 2017, 5:52 p.m.</div>
<pre class="content">
The VMA sequence count has been introduced to allow fast detection of
VMA modification when running a page fault handler without holding
the mmap_sem.

This patch provides protection agains the VMA modification done in :
	- madvise()
	- mremap()
	- mpol_rebind_policy()
	- vma_replace_policy()
	- change_prot_numa()
	- mlock(), munlock()
	- mprotect()
	- mmap_region()
<span class="signed-off-by">
Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 fs/proc/task_mmu.c |  2 ++
 mm/madvise.c       |  4 ++++
 mm/mempolicy.c     | 10 +++++++++-
 mm/mlock.c         |  9 ++++++---
 mm/mmap.c          |  2 ++
 mm/mprotect.c      |  2 ++
 mm/mremap.c        |  7 +++++++
 7 files changed, 32 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index f0c8b33d99b1..9bc40620ba39 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -1069,8 +1069,10 @@</span> <span class="p_context"> static ssize_t clear_refs_write(struct file *file, const char __user *buf,</span>
 					goto out_mm;
 				}
 				for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
<span class="p_add">+					write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 					vma-&gt;vm_flags &amp;= ~VM_SOFTDIRTY;
 					vma_set_page_prot(vma);
<span class="p_add">+					write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 				}
 				downgrade_write(&amp;mm-&gt;mmap_sem);
 				break;
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 25b78ee4fc2c..d1fa6a7ee604 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -172,7 +172,9 @@</span> <span class="p_context"> static long madvise_behavior(struct vm_area_struct *vma,</span>
 	/*
 	 * vm_flags is protected by the mmap_sem held in write mode.
 	 */
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	vma-&gt;vm_flags = new_flags;
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 out:
 	return error;
 }
<span class="p_chunk">@@ -439,9 +441,11 @@</span> <span class="p_context"> static void madvise_free_page_range(struct mmu_gather *tlb,</span>
 		.private = tlb,
 	};
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	tlb_start_vma(tlb, vma);
 	walk_page_range(addr, end, &amp;free_walk);
 	tlb_end_vma(tlb, vma);
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 }
 
 static int madvise_free_single_vma(struct vm_area_struct *vma,
<span class="p_header">diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="p_header">index 37d0b334bfe9..5e44b3e69a0d 100644</span>
<span class="p_header">--- a/mm/mempolicy.c</span>
<span class="p_header">+++ b/mm/mempolicy.c</span>
<span class="p_chunk">@@ -447,8 +447,11 @@</span> <span class="p_context"> void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)</span>
 	struct vm_area_struct *vma;
 
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_del">-	for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next)</span>
<span class="p_add">+	for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {</span>
<span class="p_add">+		write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 		mpol_rebind_policy(vma-&gt;vm_policy, new, MPOL_REBIND_ONCE);
<span class="p_add">+		write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+	}</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 }
 
<span class="p_chunk">@@ -606,9 +609,11 @@</span> <span class="p_context"> unsigned long change_prot_numa(struct vm_area_struct *vma,</span>
 {
 	int nr_updated;
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	nr_updated = change_protection(vma, addr, end, PAGE_NONE, 0, 1);
 	if (nr_updated)
 		count_vm_numa_events(NUMA_PTE_UPDATES, nr_updated);
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 
 	return nr_updated;
 }
<span class="p_chunk">@@ -709,6 +714,7 @@</span> <span class="p_context"> static int vma_replace_policy(struct vm_area_struct *vma,</span>
 	if (IS_ERR(new))
 		return PTR_ERR(new);
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	if (vma-&gt;vm_ops &amp;&amp; vma-&gt;vm_ops-&gt;set_policy) {
 		err = vma-&gt;vm_ops-&gt;set_policy(vma, new);
 		if (err)
<span class="p_chunk">@@ -717,10 +723,12 @@</span> <span class="p_context"> static int vma_replace_policy(struct vm_area_struct *vma,</span>
 
 	old = vma-&gt;vm_policy;
 	vma-&gt;vm_policy = new; /* protected by mmap_sem */
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 	mpol_put(old);
 
 	return 0;
  err_out:
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 	mpol_put(new);
 	return err;
 }
<span class="p_header">diff --git a/mm/mlock.c b/mm/mlock.c</span>
<span class="p_header">index b562b5523a65..30d9bfc61929 100644</span>
<span class="p_header">--- a/mm/mlock.c</span>
<span class="p_header">+++ b/mm/mlock.c</span>
<span class="p_chunk">@@ -438,7 +438,9 @@</span> <span class="p_context"> static unsigned long __munlock_pagevec_fill(struct pagevec *pvec,</span>
 void munlock_vma_pages_range(struct vm_area_struct *vma,
 			     unsigned long start, unsigned long end)
 {
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	vma-&gt;vm_flags &amp;= VM_LOCKED_CLEAR_MASK;
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 
 	while (start &lt; end) {
 		struct page *page;
<span class="p_chunk">@@ -563,10 +565,11 @@</span> <span class="p_context"> static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,</span>
 	 * It&#39;s okay if try_to_unmap_one unmaps a page just after we
 	 * set VM_LOCKED, populate_vma_page_range will bring it back.
 	 */
<span class="p_del">-</span>
<span class="p_del">-	if (lock)</span>
<span class="p_add">+	if (lock) {</span>
<span class="p_add">+		write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 		vma-&gt;vm_flags = newflags;
<span class="p_del">-	else</span>
<span class="p_add">+		write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+	} else</span>
 		munlock_vma_pages_range(vma, start, end);
 
 out:
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index ad85f210a92c..b48bbe6a49c6 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -1720,6 +1720,7 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *file, unsigned long addr,</span>
 out:
 	perf_event_mmap(vma);
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	vm_stat_account(mm, vm_flags, len &gt;&gt; PAGE_SHIFT);
 	if (vm_flags &amp; VM_LOCKED) {
 		if (!((vm_flags &amp; VM_SPECIAL) || is_vm_hugetlb_page(vma) ||
<span class="p_chunk">@@ -1742,6 +1743,7 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *file, unsigned long addr,</span>
 	vma-&gt;vm_flags |= VM_SOFTDIRTY;
 
 	vma_set_page_prot(vma);
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 
 	return addr;
 
<span class="p_header">diff --git a/mm/mprotect.c b/mm/mprotect.c</span>
<span class="p_header">index 8edd0d576254..1db5b0bf6952 100644</span>
<span class="p_header">--- a/mm/mprotect.c</span>
<span class="p_header">+++ b/mm/mprotect.c</span>
<span class="p_chunk">@@ -345,6 +345,7 @@</span> <span class="p_context"> mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,</span>
 	 * vm_flags and vm_page_prot are protected by the mmap_sem
 	 * held in write mode.
 	 */
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	vma-&gt;vm_flags = newflags;
 	dirty_accountable = vma_wants_writenotify(vma, vma-&gt;vm_page_prot);
 	vma_set_page_prot(vma);
<span class="p_chunk">@@ -360,6 +361,7 @@</span> <span class="p_context"> mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,</span>
 			(newflags &amp; VM_WRITE)) {
 		populate_vma_page_range(vma, start, end, NULL);
 	}
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 
 	vm_stat_account(mm, oldflags, -nrpages);
 	vm_stat_account(mm, newflags, nrpages);
<span class="p_header">diff --git a/mm/mremap.c b/mm/mremap.c</span>
<span class="p_header">index cd8a1b199ef9..9c7f69c9e80f 100644</span>
<span class="p_header">--- a/mm/mremap.c</span>
<span class="p_header">+++ b/mm/mremap.c</span>
<span class="p_chunk">@@ -300,6 +300,10 @@</span> <span class="p_context"> static unsigned long move_vma(struct vm_area_struct *vma,</span>
 	if (!new_vma)
 		return -ENOMEM;
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+	write_seqcount_begin_nested(&amp;new_vma-&gt;vm_sequence,</span>
<span class="p_add">+				    SINGLE_DEPTH_NESTING);</span>
<span class="p_add">+</span>
 	moved_len = move_page_tables(vma, old_addr, new_vma, new_addr, old_len,
 				     need_rmap_locks);
 	if (moved_len &lt; old_len) {
<span class="p_chunk">@@ -316,6 +320,7 @@</span> <span class="p_context"> static unsigned long move_vma(struct vm_area_struct *vma,</span>
 		 */
 		move_page_tables(new_vma, new_addr, vma, old_addr, moved_len,
 				 true);
<span class="p_add">+		write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 		vma = new_vma;
 		old_len = new_len;
 		old_addr = new_addr;
<span class="p_chunk">@@ -324,7 +329,9 @@</span> <span class="p_context"> static unsigned long move_vma(struct vm_area_struct *vma,</span>
 		mremap_userfaultfd_prep(new_vma, uf);
 		arch_remap(mm, old_addr, old_addr + old_len,
 			   new_addr, new_addr + new_len);
<span class="p_add">+		write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 	}
<span class="p_add">+	write_seqcount_end(&amp;new_vma-&gt;vm_sequence);</span>
 
 	/* Conceal VM_ACCOUNT so old reservation is not undone */
 	if (vm_flags &amp; VM_ACCOUNT) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



