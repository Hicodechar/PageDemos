
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/5] uffd: Add fork() event - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/5] uffd: Add fork() event</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7136">Pavel Emelyanov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 13, 2015, 2:54 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;5553658E.2070100@parallels.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6397461/mbox/"
   >mbox</a>
|
   <a href="/patch/6397461/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6397461/">/patch/6397461/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id C31DE9F32E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 14:54:26 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 89DFB20397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 14:54:25 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2D146203EB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 14:54:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934487AbbEMOyR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 13 May 2015 10:54:17 -0400
Received: from mx2.parallels.com ([199.115.105.18]:49122 &quot;EHLO
	mx2.parallels.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S934284AbbEMOyP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 13 May 2015 10:54:15 -0400
Received: from [199.115.105.250] (helo=mail.parallels.com)
	by mx2.parallels.com with esmtps (TLSv1.2:AES256-SHA:256)
	(Exim 4.85) (envelope-from &lt;xemul@odin.com&gt;)
	id 1YsY33-0006Lv-R0; Wed, 13 May 2015 07:54:13 -0700
Received: from [10.30.16.89] (195.214.232.10) by US-EXCH2.sw.swsoft.com
	(10.255.249.46) with Microsoft SMTP Server (TLS) id 15.0.1076.9;
	Wed, 13 May 2015 07:54:10 -0700
Message-ID: &lt;5553658E.2070100@parallels.com&gt;
Date: Wed, 13 May 2015 17:54:06 +0300
From: Pavel Emelyanov &lt;xemul@parallels.com&gt;
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:24.0) Gecko/20100101 Thunderbird/24.5.0
MIME-Version: 1.0
To: Andrea Arcangeli &lt;aarcange@redhat.com&gt;
CC: Linux Kernel Mailing List &lt;linux-kernel@vger.kernel.org&gt;,
	Linux MM &lt;linux-mm@kvack.org&gt;,
	Sanidhya Kashyap &lt;sanidhya.gatech@gmail.com&gt;
Subject: [PATCH 3/5] uffd: Add fork() event
References: &lt;5553651B.1020909@parallels.com&gt;
In-Reply-To: &lt;5553651B.1020909@parallels.com&gt;
Content-Type: text/plain; charset=&quot;ISO-8859-1&quot;
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: US-EXCH2.sw.swsoft.com (10.255.249.46) To
	US-EXCH2.sw.swsoft.com (10.255.249.46)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7136">Pavel Emelyanov</a> - May 13, 2015, 2:54 p.m.</div>
<pre class="content">
When the mm with uffd-ed vmas fork()-s the respective vmas
notify their uffds with the event which contains a descriptor
with new uffd. This new descriptor can then be used to get
events from the child and populate its mm with data. Note,
that there can be different uffd-s controlling different
vmas within one mm, so first we should collect all those
uffds (and ctx-s) in a list and then notify them all one by
one but only once per fork().

The context is created at fork() time but the descriptor, file
struct and anon inode object is created at event read time. So
some trickery is added to the userfaultfd_ctx_read() to handle
the ctx queues&#39; locking vs file creation.

Another thing worth noticing is that the task that fork()-s
waits for the uffd event to get processed WITHOUT the mmap sem.
<span class="signed-off-by">
Signed-off-by: Pavel Emelyanov &lt;xemul@parallels.com&gt;</span>
---
 fs/userfaultfd.c                 | 137 +++++++++++++++++++++++++++++++++++++++
 include/linux/userfaultfd_k.h    |  12 ++++
 include/uapi/linux/userfaultfd.h |  13 ++--
 kernel/fork.c                    |   9 ++-
 4 files changed, 163 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/userfaultfd.c b/fs/userfaultfd.c</span>
<span class="p_header">index 83acb19..202d0ac 100644</span>
<span class="p_header">--- a/fs/userfaultfd.c</span>
<span class="p_header">+++ b/fs/userfaultfd.c</span>
<span class="p_chunk">@@ -62,6 +62,12 @@</span> <span class="p_context"> struct userfaultfd_ctx {</span>
 	struct mm_struct *mm;
 };
 
<span class="p_add">+struct userfaultfd_fork_ctx {</span>
<span class="p_add">+	struct userfaultfd_ctx *orig;</span>
<span class="p_add">+	struct userfaultfd_ctx *new;</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct userfaultfd_wait_queue {
 	struct uffd_msg msg;
 	wait_queue_t wq;
<span class="p_chunk">@@ -432,6 +438,79 @@</span> <span class="p_context"> static void userfaultfd_event_complete(struct userfaultfd_ctx *ctx,</span>
 	__remove_wait_queue(&amp;ctx-&gt;event_wqh, &amp;ewq-&gt;wq);
 }
 
<span class="p_add">+int dup_userfaultfd(struct vm_area_struct *vma, struct list_head *fcs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct userfaultfd_ctx *ctx = NULL, *octx;</span>
<span class="p_add">+	struct userfaultfd_fork_ctx *fctx;</span>
<span class="p_add">+</span>
<span class="p_add">+	octx = vma-&gt;vm_userfaultfd_ctx.ctx;</span>
<span class="p_add">+	if (!octx || !(octx-&gt;features &amp; UFFD_FEATURE_EVENT_FORK)) {</span>
<span class="p_add">+		vma-&gt;vm_userfaultfd_ctx = NULL_VM_UFFD_CTX;</span>
<span class="p_add">+		vma-&gt;vm_flags &amp;= ~(VM_UFFD_WP | VM_UFFD_MISSING);</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(fctx, fcs, list)</span>
<span class="p_add">+		if (fctx-&gt;orig == octx) {</span>
<span class="p_add">+			ctx = fctx-&gt;new;</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!ctx) {</span>
<span class="p_add">+		fctx = kmalloc(sizeof(*fctx), GFP_KERNEL);</span>
<span class="p_add">+		if (!fctx)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+		ctx = kmem_cache_alloc(userfaultfd_ctx_cachep, GFP_KERNEL);</span>
<span class="p_add">+		if (!ctx) {</span>
<span class="p_add">+			kfree(fctx);</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		atomic_set(&amp;ctx-&gt;refcount, 1);</span>
<span class="p_add">+		ctx-&gt;flags = octx-&gt;flags;</span>
<span class="p_add">+		ctx-&gt;state = UFFD_STATE_RUNNING;</span>
<span class="p_add">+		ctx-&gt;features = octx-&gt;features;</span>
<span class="p_add">+		ctx-&gt;released = false;</span>
<span class="p_add">+		ctx-&gt;mm = vma-&gt;vm_mm;</span>
<span class="p_add">+		atomic_inc(&amp;ctx-&gt;mm-&gt;mm_users);</span>
<span class="p_add">+</span>
<span class="p_add">+		userfaultfd_ctx_get(octx);</span>
<span class="p_add">+		fctx-&gt;orig = octx;</span>
<span class="p_add">+		fctx-&gt;new = ctx;</span>
<span class="p_add">+		list_add_tail(&amp;fctx-&gt;list, fcs);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	vma-&gt;vm_userfaultfd_ctx.ctx = ctx;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int dup_fctx(struct userfaultfd_fork_ctx *fctx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct userfaultfd_ctx *ctx = fctx-&gt;orig;</span>
<span class="p_add">+	struct userfaultfd_wait_queue ewq;</span>
<span class="p_add">+</span>
<span class="p_add">+	msg_init(&amp;ewq.msg);</span>
<span class="p_add">+</span>
<span class="p_add">+	ewq.msg.event = UFFD_EVENT_FORK;</span>
<span class="p_add">+	ewq.msg.arg.reserved.reserved1 = (__u64)fctx-&gt;new;</span>
<span class="p_add">+</span>
<span class="p_add">+	return userfaultfd_event_wait_completion(ctx, &amp;ewq);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dup_userfaultfd_complete(struct list_head *fcs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	struct userfaultfd_fork_ctx *fctx, *n;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry_safe(fctx, n, fcs, list) {</span>
<span class="p_add">+		if (!ret)</span>
<span class="p_add">+			ret = dup_fctx(fctx);</span>
<span class="p_add">+		list_del(&amp;fctx-&gt;list);</span>
<span class="p_add">+		kfree(fctx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int userfaultfd_release(struct inode *inode, struct file *file)
 {
 	struct userfaultfd_ctx *ctx = file-&gt;private_data;
<span class="p_chunk">@@ -563,12 +642,47 @@</span> <span class="p_context"> static unsigned int userfaultfd_poll(struct file *file, poll_table *wait)</span>
 	}
 }
 
<span class="p_add">+static const struct file_operations userfaultfd_fops;</span>
<span class="p_add">+</span>
<span class="p_add">+static int resolve_userfault_fork(struct userfaultfd_ctx *ctx,</span>
<span class="p_add">+		struct userfaultfd_ctx *new, struct uffd_msg *msg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int fd;</span>
<span class="p_add">+	struct file *file;</span>
<span class="p_add">+</span>
<span class="p_add">+	fd = get_unused_fd_flags(new-&gt;flags &amp; UFFD_SHARED_FCNTL_FLAGS);</span>
<span class="p_add">+	if (fd &lt; 0)</span>
<span class="p_add">+		return fd;</span>
<span class="p_add">+</span>
<span class="p_add">+	file = anon_inode_getfile(&quot;[userfaultfd]&quot;, &amp;userfaultfd_fops, new,</span>
<span class="p_add">+				  O_RDWR | (new-&gt;flags &amp; UFFD_SHARED_FCNTL_FLAGS));</span>
<span class="p_add">+	if (IS_ERR(file)) {</span>
<span class="p_add">+		put_unused_fd(fd);</span>
<span class="p_add">+		return PTR_ERR(file);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	fd_install(fd, file);</span>
<span class="p_add">+	msg-&gt;arg.reserved.reserved1 = 0;</span>
<span class="p_add">+	msg-&gt;arg.fork.ufd = fd;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static ssize_t userfaultfd_ctx_read(struct userfaultfd_ctx *ctx, int no_wait,
 				    struct uffd_msg *msg)
 {
 	ssize_t ret;
 	DECLARE_WAITQUEUE(wait, current);
 	struct userfaultfd_wait_queue *uwq;
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Handling fork event requires sleeping operations, so</span>
<span class="p_add">+	 * we drop the event_wqh lock, then do these ops, then</span>
<span class="p_add">+	 * lock it back wake up the waiter. While the lock is</span>
<span class="p_add">+	 * dropped the ewq may go away so we keep track of it</span>
<span class="p_add">+	 * carefully.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	LIST_HEAD(fork_event);</span>
<span class="p_add">+	struct userfaultfd_ctx *fork_nctx = NULL;</span>
 
 	/* always take the fd_wqh lock before the fault_pending_wqh lock */
 	spin_lock(&amp;ctx-&gt;fd_wqh.lock);
<span class="p_chunk">@@ -602,6 +716,14 @@</span> <span class="p_context"> static ssize_t userfaultfd_ctx_read(struct userfaultfd_ctx *ctx, int no_wait,</span>
 		if (uwq) {
 			*msg = uwq-&gt;msg;
 
<span class="p_add">+			if (uwq-&gt;msg.event == UFFD_EVENT_FORK) {</span>
<span class="p_add">+				fork_nctx = (struct userfaultfd_ctx *)uwq-&gt;msg.arg.reserved.reserved1;</span>
<span class="p_add">+				list_move(&amp;uwq-&gt;wq.task_list, &amp;fork_event);</span>
<span class="p_add">+				spin_unlock(&amp;ctx-&gt;event_wqh.lock);</span>
<span class="p_add">+				ret = 0;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
 			userfaultfd_event_complete(ctx, uwq);
 			spin_unlock(&amp;ctx-&gt;event_wqh.lock);
 			ret = 0;
<span class="p_chunk">@@ -625,6 +747,21 @@</span> <span class="p_context"> static ssize_t userfaultfd_ctx_read(struct userfaultfd_ctx *ctx, int no_wait,</span>
 	__set_current_state(TASK_RUNNING);
 	spin_unlock_irq(&amp;ctx-&gt;fd_wqh.lock);
 
<span class="p_add">+	if (!ret &amp;&amp; msg-&gt;event == UFFD_EVENT_FORK) {</span>
<span class="p_add">+		ret = resolve_userfault_fork(ctx, fork_nctx, msg);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!ret) {</span>
<span class="p_add">+			spin_lock(&amp;ctx-&gt;event_wqh.lock);</span>
<span class="p_add">+			if (!list_empty(&amp;fork_event)) {</span>
<span class="p_add">+				uwq = list_first_entry(&amp;fork_event, typeof(*uwq), wq.task_list);</span>
<span class="p_add">+				list_del(&amp;uwq-&gt;wq.task_list);</span>
<span class="p_add">+				__add_wait_queue(&amp;ctx-&gt;event_wqh, &amp;uwq-&gt;wq);</span>
<span class="p_add">+				userfaultfd_event_complete(ctx, uwq);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			spin_unlock(&amp;ctx-&gt;event_wqh.lock);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	return ret;
 }
 
<span class="p_header">diff --git a/include/linux/userfaultfd_k.h b/include/linux/userfaultfd_k.h</span>
<span class="p_header">index 81f0d11..44827f7 100644</span>
<span class="p_header">--- a/include/linux/userfaultfd_k.h</span>
<span class="p_header">+++ b/include/linux/userfaultfd_k.h</span>
<span class="p_chunk">@@ -75,6 +75,9 @@</span> <span class="p_context"> static inline bool userfaultfd_armed(struct vm_area_struct *vma)</span>
 	return vma-&gt;vm_flags &amp; (VM_UFFD_MISSING | VM_UFFD_WP);
 }
 
<span class="p_add">+extern int dup_userfaultfd(struct vm_area_struct *, struct list_head *);</span>
<span class="p_add">+extern void dup_userfaultfd_complete(struct list_head *);</span>
<span class="p_add">+</span>
 #else /* CONFIG_USERFAULTFD */
 
 /* mm helpers */
<span class="p_chunk">@@ -107,6 +110,15 @@</span> <span class="p_context"> static inline bool userfaultfd_armed(struct vm_area_struct *vma)</span>
 	return false;
 }
 
<span class="p_add">+static inline int dup_userfaultfd(struct vm_area_struct *, struct list_head *)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void dup_userfaultfd_complete(struct list_head *)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* CONFIG_USERFAULTFD */
 
 #endif /* _LINUX_USERFAULTFD_K_H */
<span class="p_header">diff --git a/include/uapi/linux/userfaultfd.h b/include/uapi/linux/userfaultfd.h</span>
<span class="p_header">index 52b7c99..fb9ced2 100644</span>
<span class="p_header">--- a/include/uapi/linux/userfaultfd.h</span>
<span class="p_header">+++ b/include/uapi/linux/userfaultfd.h</span>
<span class="p_chunk">@@ -12,10 +12,9 @@</span> <span class="p_context"></span>
 #define UFFD_API ((__u64)0xAA)
 /*
  * After implementing the respective features it will become:
<span class="p_del">- * #define UFFD_API_FEATURES (UFFD_FEATURE_PAGEFAULT_FLAG_WP | \</span>
<span class="p_del">- *			      UFFD_FEATURE_EVENT_FORK)</span>
<span class="p_add">+ * #define UFFD_API_FEATURES (UFFD_FEATURE_PAGEFAULT_FLAG_WP)</span>
  */
<span class="p_del">-#define UFFD_API_FEATURES (0)</span>
<span class="p_add">+#define UFFD_API_FEATURES (UFFD_FEATURE_EVENT_FORK)</span>
 #define UFFD_API_IOCTLS				\
 	((__u64)1 &lt;&lt; _UFFDIO_REGISTER |		\
 	 (__u64)1 &lt;&lt; _UFFDIO_UNREGISTER |	\
<span class="p_chunk">@@ -70,6 +69,10 @@</span> <span class="p_context"> struct uffd_msg {</span>
 		} pagefault;
 
 		struct {
<span class="p_add">+			__u32	ufd;</span>
<span class="p_add">+		} fork;</span>
<span class="p_add">+</span>
<span class="p_add">+		struct {</span>
 			/* unused reserved fields */
 			__u64	reserved1;
 			__u64	reserved2;
<span class="p_chunk">@@ -82,9 +85,7 @@</span> <span class="p_context"> struct uffd_msg {</span>
  * Start at 0x12 and not at 0 to be more strict against bugs.
  */
 #define UFFD_EVENT_PAGEFAULT	0x12
<span class="p_del">-#if 0 /* not available yet */</span>
 #define UFFD_EVENT_FORK		0x13
<span class="p_del">-#endif</span>
 
 /* flags for UFFD_EVENT_PAGEFAULT */
 #define UFFD_PAGEFAULT_FLAG_WRITE	(1&lt;&lt;0)	/* If this was a write fault */
<span class="p_chunk">@@ -105,8 +106,8 @@</span> <span class="p_context"> struct uffdio_api {</span>
 	 */
 #if 0 /* not available yet */
 #define UFFD_FEATURE_PAGEFAULT_FLAG_WP		(1&lt;&lt;0)
<span class="p_del">-#define UFFD_FEATURE_EVENT_FORK			(1&lt;&lt;1)</span>
 #endif
<span class="p_add">+#define UFFD_FEATURE_EVENT_FORK			(1&lt;&lt;1)</span>
 	__u64 features;
 
 	__u64 ioctls;
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 6f285a9..a5c2883 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -55,6 +55,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/rmap.h&gt;
 #include &lt;linux/ksm.h&gt;
 #include &lt;linux/acct.h&gt;
<span class="p_add">+#include &lt;linux/userfaultfd_k.h&gt;</span>
 #include &lt;linux/tsacct_kern.h&gt;
 #include &lt;linux/cn_proc.h&gt;
 #include &lt;linux/freezer.h&gt;
<span class="p_chunk">@@ -393,6 +394,7 @@</span> <span class="p_context"> static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)</span>
 	struct rb_node **rb_link, *rb_parent;
 	int retval;
 	unsigned long charge;
<span class="p_add">+	LIST_HEAD(uf);</span>
 
 	uprobe_start_dup_mmap();
 	down_write(&amp;oldmm-&gt;mmap_sem);
<span class="p_chunk">@@ -447,11 +449,13 @@</span> <span class="p_context"> static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)</span>
 		if (retval)
 			goto fail_nomem_policy;
 		tmp-&gt;vm_mm = mm;
<span class="p_add">+		retval = dup_userfaultfd(tmp, &amp;uf);</span>
<span class="p_add">+		if (retval)</span>
<span class="p_add">+			goto fail_nomem_anon_vma_fork;</span>
 		if (anon_vma_fork(tmp, mpnt))
 			goto fail_nomem_anon_vma_fork;
<span class="p_del">-		tmp-&gt;vm_flags &amp;= ~(VM_LOCKED|VM_UFFD_MISSING|VM_UFFD_WP);</span>
<span class="p_add">+		tmp-&gt;vm_flags &amp;= ~(VM_LOCKED);</span>
 		tmp-&gt;vm_next = tmp-&gt;vm_prev = NULL;
<span class="p_del">-		tmp-&gt;vm_userfaultfd_ctx = NULL_VM_UFFD_CTX;</span>
 		file = tmp-&gt;vm_file;
 		if (file) {
 			struct inode *inode = file_inode(file);
<span class="p_chunk">@@ -507,6 +511,7 @@</span> <span class="p_context"> out:</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 	flush_tlb_mm(oldmm);
 	up_write(&amp;oldmm-&gt;mmap_sem);
<span class="p_add">+	dup_userfaultfd_complete(&amp;uf);</span>
 	uprobe_end_dup_mmap();
 	return retval;
 fail_nomem_anon_vma_fork:

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



