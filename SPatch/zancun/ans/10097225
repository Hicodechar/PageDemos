
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] x86 fixes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] x86 fixes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 6, 2017, 10:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171206223620.kpdoj5qcu767j5q3@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10097225/mbox/"
   >mbox</a>
|
   <a href="/patch/10097225/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10097225/">/patch/10097225/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0FC93602BF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 22:36:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6B69288D2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 22:36:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D9E98293C2; Wed,  6 Dec 2017 22:36:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.1 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	FSL_HELO_FAKE, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D3D29288D2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 22:36:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752160AbdLFWgb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 6 Dec 2017 17:36:31 -0500
Received: from mail-wr0-f196.google.com ([209.85.128.196]:40129 &quot;EHLO
	mail-wr0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751598AbdLFWg3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 6 Dec 2017 17:36:29 -0500
Received: by mail-wr0-f196.google.com with SMTP id q9so5512952wre.7
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 06 Dec 2017 14:36:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=YbNbhkM9SleK9lCA20SBvaJixWud4MR+gNlD0Cws06Q=;
	b=Fi/Uy+ticX4/iFCMuWdbYSCsazeRQ/aI3ILjIgHRIGbG4mGpzL+tWasS0pa9HOmf1h
	+OUYywoujVJ3H8WwFPiPAGrGubq9pY5DzLzlcWYFXPLbPJ8G6vfnKo/u5ebVw7Z5cW6Q
	tEhGJHSDv8C7W2jqjvBPxhrUPJNdBqmPI8LfP80FPyP8PNdRuZJHd9y5ObBfuLp5bHGf
	xwFwH+WWMZwuqm9Nc+dst2Lafm82qHzJJ5/+gRfoW7jwoful+o0vTWOXp8CB2UpFfqVY
	G2NPxHcI7yIIgSxZ6oTUwq5wGYXlACZ5yfCGBnKSh0yzN8GJfkpd+fnFjb97jsNaqEux
	hUxw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=YbNbhkM9SleK9lCA20SBvaJixWud4MR+gNlD0Cws06Q=;
	b=DD47flpmkgVGYy7EaIpm87S2GeFcBVv+/PgWN5TxOdBN/4gX0UuiR3YCXm4YMGvNkf
	tB5JZxtvbC/pA4DeTxvZbWzgK/PI9Ra/Wo2gPwwwPq4R2X+efYmz/p8p1/Ji2URx7FuI
	nA4+bVTA33cHGMK0BKqv9XzAj2y38cxxp1P1Z/NrLYPtQWdfmngx9pmKS3c8NTtPpIBY
	M5um6ez5b9DWeLkt+duB7NV0MICAsjUZVDFZWdZi/JEk6DJHNvkF6T9hWfv9gKBSXC4V
	VsPfiSp9Xc6FxJIzzu6vxEcqZo5bPKfmnJZ7XZ0bC/Ez46TjX/wJdfd/VG/RomrJYo2c
	YxMQ==
X-Gm-Message-State: AJaThX6ecyenAaeEbJc+bU7pAfKYDarHvCv7phk2CxLdTPB0pj1Xqn/p
	jBM2nhWo84b5dl9LcgWtp4/pVA==
X-Google-Smtp-Source: AGs4zMZMeqkwkx9tXTBqQ79ssnu/PnQ8vh88d07DTh8RMQ/34FkbHpgQpBKSeSe4JcNCGMvHAsyslQ==
X-Received: by 10.223.184.245 with SMTP id
	c50mr20434307wrg.268.1512599783481; 
	Wed, 06 Dec 2017 14:36:23 -0800 (PST)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	o48sm4063095wrf.85.2017.12.06.14.36.22
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Wed, 06 Dec 2017 14:36:23 -0800 (PST)
Date: Wed, 6 Dec 2017 23:36:20 +0100
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Subject: [GIT PULL] x86 fixes
Message-ID: &lt;20171206223620.kpdoj5qcu767j5q3@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Dec. 6, 2017, 10:36 p.m.</div>
<pre class="content">
Linus,

Please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

   # HEAD: 88edb57d1e0b262e669c5cad36646dcf5a7f37f5 x86/vdso: Change time() prototype to match __vdso_time()

Misc fixes:

 - Make CR4 handling irq-safe, which bug vmware guests ran into
 - Don&#39;t crash on early IRQs in Xen guests
 - Don&#39;t crash secondary CPU bringup if #UD assisted WARN()ings are triggered
 - Make X86_BUG_FXSAVE_LEAK optional on newer AMD CPUs that have the fix
 - Fix AMD Fam17h microcode loading
 - Fix broadcom_postcore_init() if ACPI is disabled
 - Fix resume regression in __restore_processor_context()
 - Fix Sparse warnings
 - Fix a GCC-8 warning

 Thanks,

	Ingo

------------------&gt;
Andy Lutomirski (1):
      x86/power: Fix some ordering bugs in __restore_processor_context()

Arnd Bergmann (1):
      x86/vdso: Change time() prototype to match __vdso_time()

Chunyu Hu (1):
      x86/idt: Load idt early in start_secondary

Colin Ian King (1):
      x86: Fix Sparse warnings about non-static functions

Juergen Gross (1):
      x86/xen: Support early interrupts in xen pv guests

Nadav Amit (2):
      x86/tlb: Refactor CR4 setting and shadow write
      x86/tlb: Disable interrupts when changing CR4

Rafael J. Wysocki (1):
      x86/PCI: Make broadcom_postcore_init() check acpi_disabled

Rudolf Marek (1):
      x86/cpufeatures: Make X86_BUG_FXSAVE_LEAK detectable in CPUID on AMD

Tom Lendacky (1):
      x86/microcode/AMD: Add support for fam17h microcode loading


 arch/x86/entry/vdso/vclock_gettime.c |  2 +-
 arch/x86/include/asm/cpufeatures.h   |  1 +
 arch/x86/include/asm/segment.h       | 12 ++++++++++++
 arch/x86/include/asm/tlbflush.h      | 35 ++++++++++++++++++----------------
 arch/x86/kernel/apic/vector.c        |  4 ++--
 arch/x86/kernel/cpu/amd.c            |  7 +++++--
 arch/x86/kernel/cpu/microcode/amd.c  |  4 ++++
 arch/x86/kernel/process.c            |  2 +-
 arch/x86/kernel/smpboot.c            |  2 +-
 arch/x86/mm/extable.c                |  4 +++-
 arch/x86/pci/broadcom_bus.c          |  2 +-
 arch/x86/platform/uv/uv_nmi.c        |  4 ++--
 arch/x86/power/cpu.c                 | 21 ++++++++++++++++----
 arch/x86/xen/enlighten_pv.c          | 37 +++++++++++++++++++++++-------------
 arch/x86/xen/xen-asm_64.S            | 14 ++++++++++++++
 15 files changed, 107 insertions(+), 44 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vclock_gettime.c b/arch/x86/entry/vdso/vclock_gettime.c</span>
<span class="p_header">index 11b13c4b43d5..f19856d95c60 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vclock_gettime.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vclock_gettime.c</span>
<span class="p_chunk">@@ -324,5 +324,5 @@</span> <span class="p_context"> notrace time_t __vdso_time(time_t *t)</span>
 		*t = result;
 	return result;
 }
<span class="p_del">-int time(time_t *t)</span>
<span class="p_add">+time_t time(time_t *t)</span>
 	__attribute__((weak, alias(&quot;__vdso_time&quot;)));
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">index c0b0e9e8aa66..800104c8a3ed 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -266,6 +266,7 @@</span> <span class="p_context"></span>
 /* AMD-defined CPU features, CPUID level 0x80000008 (EBX), word 13 */
 #define X86_FEATURE_CLZERO		(13*32+ 0) /* CLZERO instruction */
 #define X86_FEATURE_IRPERF		(13*32+ 1) /* Instructions Retired Count */
<span class="p_add">+#define X86_FEATURE_XSAVEERPTR		(13*32+ 2) /* Always save/restore FP error pointers */</span>
 
 /* Thermal and Power Management Leaf, CPUID level 0x00000006 (EAX), word 14 */
 #define X86_FEATURE_DTHERM		(14*32+ 0) /* Digital Thermal Sensor */
<span class="p_header">diff --git a/arch/x86/include/asm/segment.h b/arch/x86/include/asm/segment.h</span>
<span class="p_header">index b20f9d623f9c..8f09012b92e7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/segment.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/segment.h</span>
<span class="p_chunk">@@ -236,11 +236,23 @@</span> <span class="p_context"></span>
  */
 #define EARLY_IDT_HANDLER_SIZE 9
 
<span class="p_add">+/*</span>
<span class="p_add">+ * xen_early_idt_handler_array is for Xen pv guests: for each entry in</span>
<span class="p_add">+ * early_idt_handler_array it contains a prequel in the form of</span>
<span class="p_add">+ * pop %rcx; pop %r11; jmp early_idt_handler_array[i]; summing up to</span>
<span class="p_add">+ * max 8 bytes.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define XEN_EARLY_IDT_HANDLER_SIZE 8</span>
<span class="p_add">+</span>
 #ifndef __ASSEMBLY__
 
 extern const char early_idt_handler_array[NUM_EXCEPTION_VECTORS][EARLY_IDT_HANDLER_SIZE];
 extern void early_ignore_irq(void);
 
<span class="p_add">+#if defined(CONFIG_X86_64) &amp;&amp; defined(CONFIG_XEN_PV)</span>
<span class="p_add">+extern const char xen_early_idt_handler_array[NUM_EXCEPTION_VECTORS][XEN_EARLY_IDT_HANDLER_SIZE];</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * Load a segment. Fall back on loading the zero segment if something goes
  * wrong.  This variant assumes that loading zero fully clears the segment.
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 509046cfa5ce..877b5c1a1b12 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -173,40 +173,43 @@</span> <span class="p_context"> static inline void cr4_init_shadow(void)</span>
 	this_cpu_write(cpu_tlbstate.cr4, __read_cr4());
 }
 
<span class="p_add">+static inline void __cr4_set(unsigned long cr4)</span>
<span class="p_add">+{</span>
<span class="p_add">+	lockdep_assert_irqs_disabled();</span>
<span class="p_add">+	this_cpu_write(cpu_tlbstate.cr4, cr4);</span>
<span class="p_add">+	__write_cr4(cr4);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Set in this cpu&#39;s CR4. */
 static inline void cr4_set_bits(unsigned long mask)
 {
<span class="p_del">-	unsigned long cr4;</span>
<span class="p_add">+	unsigned long cr4, flags;</span>
 
<span class="p_add">+	local_irq_save(flags);</span>
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
<span class="p_del">-	if ((cr4 | mask) != cr4) {</span>
<span class="p_del">-		cr4 |= mask;</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.cr4, cr4);</span>
<span class="p_del">-		__write_cr4(cr4);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if ((cr4 | mask) != cr4)</span>
<span class="p_add">+		__cr4_set(cr4 | mask);</span>
<span class="p_add">+	local_irq_restore(flags);</span>
 }
 
 /* Clear in this cpu&#39;s CR4. */
 static inline void cr4_clear_bits(unsigned long mask)
 {
<span class="p_del">-	unsigned long cr4;</span>
<span class="p_add">+	unsigned long cr4, flags;</span>
 
<span class="p_add">+	local_irq_save(flags);</span>
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
<span class="p_del">-	if ((cr4 &amp; ~mask) != cr4) {</span>
<span class="p_del">-		cr4 &amp;= ~mask;</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.cr4, cr4);</span>
<span class="p_del">-		__write_cr4(cr4);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if ((cr4 &amp; ~mask) != cr4)</span>
<span class="p_add">+		__cr4_set(cr4 &amp; ~mask);</span>
<span class="p_add">+	local_irq_restore(flags);</span>
 }
 
<span class="p_del">-static inline void cr4_toggle_bits(unsigned long mask)</span>
<span class="p_add">+static inline void cr4_toggle_bits_irqsoff(unsigned long mask)</span>
 {
 	unsigned long cr4;
 
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
<span class="p_del">-	cr4 ^= mask;</span>
<span class="p_del">-	this_cpu_write(cpu_tlbstate.cr4, cr4);</span>
<span class="p_del">-	__write_cr4(cr4);</span>
<span class="p_add">+	__cr4_set(cr4 ^ mask);</span>
 }
 
 /* Read the CR4 shadow. */
<span class="p_header">diff --git a/arch/x86/kernel/apic/vector.c b/arch/x86/kernel/apic/vector.c</span>
<span class="p_header">index 6a823a25eaff..750449152b04 100644</span>
<span class="p_header">--- a/arch/x86/kernel/apic/vector.c</span>
<span class="p_header">+++ b/arch/x86/kernel/apic/vector.c</span>
<span class="p_chunk">@@ -542,8 +542,8 @@</span> <span class="p_context"> static int x86_vector_alloc_irqs(struct irq_domain *domain, unsigned int virq,</span>
 }
 
 #ifdef CONFIG_GENERIC_IRQ_DEBUGFS
<span class="p_del">-void x86_vector_debug_show(struct seq_file *m, struct irq_domain *d,</span>
<span class="p_del">-			   struct irq_data *irqd, int ind)</span>
<span class="p_add">+static void x86_vector_debug_show(struct seq_file *m, struct irq_domain *d,</span>
<span class="p_add">+				  struct irq_data *irqd, int ind)</span>
 {
 	unsigned int cpu, vector, prev_cpu, prev_vector;
 	struct apic_chip_data *apicd;
<span class="p_header">diff --git a/arch/x86/kernel/cpu/amd.c b/arch/x86/kernel/cpu/amd.c</span>
<span class="p_header">index d58184b7cd44..bcb75dc97d44 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/amd.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/amd.c</span>
<span class="p_chunk">@@ -804,8 +804,11 @@</span> <span class="p_context"> static void init_amd(struct cpuinfo_x86 *c)</span>
 	case 0x17: init_amd_zn(c); break;
 	}
 
<span class="p_del">-	/* Enable workaround for FXSAVE leak */</span>
<span class="p_del">-	if (c-&gt;x86 &gt;= 6)</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Enable workaround for FXSAVE leak on CPUs</span>
<span class="p_add">+	 * without a XSaveErPtr feature</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((c-&gt;x86 &gt;= 6) &amp;&amp; (!cpu_has(c, X86_FEATURE_XSAVEERPTR)))</span>
 		set_cpu_bug(c, X86_BUG_FXSAVE_LEAK);
 
 	cpu_detect_cache_sizes(c);
<span class="p_header">diff --git a/arch/x86/kernel/cpu/microcode/amd.c b/arch/x86/kernel/cpu/microcode/amd.c</span>
<span class="p_header">index c6daec4bdba5..330b8462d426 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/microcode/amd.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/microcode/amd.c</span>
<span class="p_chunk">@@ -470,6 +470,7 @@</span> <span class="p_context"> static unsigned int verify_patch_size(u8 family, u32 patch_size,</span>
 #define F14H_MPB_MAX_SIZE 1824
 #define F15H_MPB_MAX_SIZE 4096
 #define F16H_MPB_MAX_SIZE 3458
<span class="p_add">+#define F17H_MPB_MAX_SIZE 3200</span>
 
 	switch (family) {
 	case 0x14:
<span class="p_chunk">@@ -481,6 +482,9 @@</span> <span class="p_context"> static unsigned int verify_patch_size(u8 family, u32 patch_size,</span>
 	case 0x16:
 		max_size = F16H_MPB_MAX_SIZE;
 		break;
<span class="p_add">+	case 0x17:</span>
<span class="p_add">+		max_size = F17H_MPB_MAX_SIZE;</span>
<span class="p_add">+		break;</span>
 	default:
 		max_size = F1XH_MPB_MAX_SIZE;
 		break;
<span class="p_header">diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c</span>
<span class="p_header">index 97fb3e5737f5..bb988a24db92 100644</span>
<span class="p_header">--- a/arch/x86/kernel/process.c</span>
<span class="p_header">+++ b/arch/x86/kernel/process.c</span>
<span class="p_chunk">@@ -299,7 +299,7 @@</span> <span class="p_context"> void __switch_to_xtra(struct task_struct *prev_p, struct task_struct *next_p,</span>
 	}
 
 	if ((tifp ^ tifn) &amp; _TIF_NOTSC)
<span class="p_del">-		cr4_toggle_bits(X86_CR4_TSD);</span>
<span class="p_add">+		cr4_toggle_bits_irqsoff(X86_CR4_TSD);</span>
 
 	if ((tifp ^ tifn) &amp; _TIF_NOCPUID)
 		set_cpuid_faulting(!!(tifn &amp; _TIF_NOCPUID));
<span class="p_header">diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c</span>
<span class="p_header">index 3d01df7d7cf6..05a97d5fe298 100644</span>
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -237,7 +237,7 @@</span> <span class="p_context"> static void notrace start_secondary(void *unused)</span>
 	load_cr3(swapper_pg_dir);
 	__flush_tlb_all();
 #endif
<span class="p_del">-</span>
<span class="p_add">+	load_current_idt();</span>
 	cpu_init();
 	x86_cpuinit.early_percpu_clock_init();
 	preempt_disable();
<span class="p_header">diff --git a/arch/x86/mm/extable.c b/arch/x86/mm/extable.c</span>
<span class="p_header">index 3321b446b66c..88754bfd425f 100644</span>
<span class="p_header">--- a/arch/x86/mm/extable.c</span>
<span class="p_header">+++ b/arch/x86/mm/extable.c</span>
<span class="p_chunk">@@ -1,6 +1,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/extable.h&gt;
 #include &lt;linux/uaccess.h&gt;
 #include &lt;linux/sched/debug.h&gt;
<span class="p_add">+#include &lt;xen/xen.h&gt;</span>
 
 #include &lt;asm/fpu/internal.h&gt;
 #include &lt;asm/traps.h&gt;
<span class="p_chunk">@@ -212,8 +213,9 @@</span> <span class="p_context"> void __init early_fixup_exception(struct pt_regs *regs, int trapnr)</span>
 	 * Old CPUs leave the high bits of CS on the stack
 	 * undefined.  I&#39;m not sure which CPUs do this, but at least
 	 * the 486 DX works this way.
<span class="p_add">+	 * Xen pv domains are not using the default __KERNEL_CS.</span>
 	 */
<span class="p_del">-	if (regs-&gt;cs != __KERNEL_CS)</span>
<span class="p_add">+	if (!xen_pv_domain() &amp;&amp; regs-&gt;cs != __KERNEL_CS)</span>
 		goto fail;
 
 	/*
<span class="p_header">diff --git a/arch/x86/pci/broadcom_bus.c b/arch/x86/pci/broadcom_bus.c</span>
<span class="p_header">index bb461cfd01ab..526536c81ddc 100644</span>
<span class="p_header">--- a/arch/x86/pci/broadcom_bus.c</span>
<span class="p_header">+++ b/arch/x86/pci/broadcom_bus.c</span>
<span class="p_chunk">@@ -97,7 +97,7 @@</span> <span class="p_context"> static int __init broadcom_postcore_init(void)</span>
 	 * We should get host bridge information from ACPI unless the BIOS
 	 * doesn&#39;t support it.
 	 */
<span class="p_del">-	if (acpi_os_get_root_pointer())</span>
<span class="p_add">+	if (!acpi_disabled &amp;&amp; acpi_os_get_root_pointer())</span>
 		return 0;
 #endif
 
<span class="p_header">diff --git a/arch/x86/platform/uv/uv_nmi.c b/arch/x86/platform/uv/uv_nmi.c</span>
<span class="p_header">index c34bd8233f7c..5f64f30873e2 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/uv_nmi.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/uv_nmi.c</span>
<span class="p_chunk">@@ -905,7 +905,7 @@</span> <span class="p_context"> static inline void uv_call_kgdb_kdb(int cpu, struct pt_regs *regs, int master)</span>
 /*
  * UV NMI handler
  */
<span class="p_del">-int uv_handle_nmi(unsigned int reason, struct pt_regs *regs)</span>
<span class="p_add">+static int uv_handle_nmi(unsigned int reason, struct pt_regs *regs)</span>
 {
 	struct uv_hub_nmi_s *hub_nmi = uv_hub_nmi;
 	int cpu = smp_processor_id();
<span class="p_chunk">@@ -1013,7 +1013,7 @@</span> <span class="p_context"> void uv_nmi_init(void)</span>
 }
 
 /* Setup HUB NMI info */
<span class="p_del">-void __init uv_nmi_setup_common(bool hubbed)</span>
<span class="p_add">+static void __init uv_nmi_setup_common(bool hubbed)</span>
 {
 	int size = sizeof(void *) * (1 &lt;&lt; NODES_SHIFT);
 	int cpu;
<span class="p_header">diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c</span>
<span class="p_header">index 84fcfde53f8f..5191de14f4df 100644</span>
<span class="p_header">--- a/arch/x86/power/cpu.c</span>
<span class="p_header">+++ b/arch/x86/power/cpu.c</span>
<span class="p_chunk">@@ -226,8 +226,20 @@</span> <span class="p_context"> static void notrace __restore_processor_state(struct saved_context *ctxt)</span>
 	load_idt((const struct desc_ptr *)&amp;ctxt-&gt;idt_limit);
 #endif
 
<span class="p_add">+#ifdef CONFIG_X86_64</span>
 	/*
<span class="p_del">-	 * segment registers</span>
<span class="p_add">+	 * We need GSBASE restored before percpu access can work.</span>
<span class="p_add">+	 * percpu access can happen in exception handlers or in complicated</span>
<span class="p_add">+	 * helpers like load_gs_index().</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	wrmsrl(MSR_GS_BASE, ctxt-&gt;gs_base);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	fix_processor_context();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Restore segment registers.  This happens after restoring the GDT</span>
<span class="p_add">+	 * and LDT, which happen in fix_processor_context().</span>
 	 */
 #ifdef CONFIG_X86_32
 	loadsegment(es, ctxt-&gt;es);
<span class="p_chunk">@@ -248,13 +260,14 @@</span> <span class="p_context"> static void notrace __restore_processor_state(struct saved_context *ctxt)</span>
 	load_gs_index(ctxt-&gt;gs);
 	asm volatile (&quot;movw %0, %%ss&quot; :: &quot;r&quot; (ctxt-&gt;ss));
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Restore FSBASE and user GSBASE after reloading the respective</span>
<span class="p_add">+	 * segment selectors.</span>
<span class="p_add">+	 */</span>
 	wrmsrl(MSR_FS_BASE, ctxt-&gt;fs_base);
<span class="p_del">-	wrmsrl(MSR_GS_BASE, ctxt-&gt;gs_base);</span>
 	wrmsrl(MSR_KERNEL_GS_BASE, ctxt-&gt;gs_kernel_base);
 #endif
 
<span class="p_del">-	fix_processor_context();</span>
<span class="p_del">-</span>
 	do_fpu_end();
 	tsc_verify_tsc_adjust(true);
 	x86_platform.restore_sched_clock_state();
<span class="p_header">diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c</span>
<span class="p_header">index 5b2b3f3f6531..f2414c6c5e7c 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten_pv.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten_pv.c</span>
<span class="p_chunk">@@ -622,7 +622,7 @@</span> <span class="p_context"> static struct trap_array_entry trap_array[] = {</span>
 	{ simd_coprocessor_error,      xen_simd_coprocessor_error,      false },
 };
 
<span class="p_del">-static bool get_trap_addr(void **addr, unsigned int ist)</span>
<span class="p_add">+static bool __ref get_trap_addr(void **addr, unsigned int ist)</span>
 {
 	unsigned int nr;
 	bool ist_okay = false;
<span class="p_chunk">@@ -644,6 +644,14 @@</span> <span class="p_context"> static bool get_trap_addr(void **addr, unsigned int ist)</span>
 		}
 	}
 
<span class="p_add">+	if (nr == ARRAY_SIZE(trap_array) &amp;&amp;</span>
<span class="p_add">+	    *addr &gt;= (void *)early_idt_handler_array[0] &amp;&amp;</span>
<span class="p_add">+	    *addr &lt; (void *)early_idt_handler_array[NUM_EXCEPTION_VECTORS]) {</span>
<span class="p_add">+		nr = (*addr - (void *)early_idt_handler_array[0]) /</span>
<span class="p_add">+		     EARLY_IDT_HANDLER_SIZE;</span>
<span class="p_add">+		*addr = (void *)xen_early_idt_handler_array[nr];</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (WARN_ON(ist != 0 &amp;&amp; !ist_okay))
 		return false;
 
<span class="p_chunk">@@ -1262,6 +1270,21 @@</span> <span class="p_context"> asmlinkage __visible void __init xen_start_kernel(void)</span>
 	xen_setup_gdt(0);
 
 	xen_init_irq_ops();
<span class="p_add">+</span>
<span class="p_add">+	/* Let&#39;s presume PV guests always boot on vCPU with id 0. */</span>
<span class="p_add">+	per_cpu(xen_vcpu_id, 0) = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Setup xen_vcpu early because idt_setup_early_handler needs it for</span>
<span class="p_add">+	 * local_irq_disable(), irqs_disabled().</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Don&#39;t do the full vcpu_info placement stuff until we have</span>
<span class="p_add">+	 * the cpu_possible_mask and a non-dummy shared_info.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	xen_vcpu_info_reset(0);</span>
<span class="p_add">+</span>
<span class="p_add">+	idt_setup_early_handler();</span>
<span class="p_add">+</span>
 	xen_init_capabilities();
 
 #ifdef CONFIG_X86_LOCAL_APIC
<span class="p_chunk">@@ -1295,18 +1318,6 @@</span> <span class="p_context"> asmlinkage __visible void __init xen_start_kernel(void)</span>
 	 */
 	acpi_numa = -1;
 #endif
<span class="p_del">-	/* Let&#39;s presume PV guests always boot on vCPU with id 0. */</span>
<span class="p_del">-	per_cpu(xen_vcpu_id, 0) = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Setup xen_vcpu early because start_kernel needs it for</span>
<span class="p_del">-	 * local_irq_disable(), irqs_disabled().</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * Don&#39;t do the full vcpu_info placement stuff until we have</span>
<span class="p_del">-	 * the cpu_possible_mask and a non-dummy shared_info.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	xen_vcpu_info_reset(0);</span>
<span class="p_del">-</span>
 	WARN_ON(xen_cpuhp_setup(xen_cpu_up_prepare_pv, xen_cpu_dead_pv));
 
 	local_irq_disable();
<span class="p_header">diff --git a/arch/x86/xen/xen-asm_64.S b/arch/x86/xen/xen-asm_64.S</span>
<span class="p_header">index 8a10c9a9e2b5..417b339e5c8e 100644</span>
<span class="p_header">--- a/arch/x86/xen/xen-asm_64.S</span>
<span class="p_header">+++ b/arch/x86/xen/xen-asm_64.S</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 
 #include &lt;xen/interface/xen.h&gt;
 
<span class="p_add">+#include &lt;linux/init.h&gt;</span>
 #include &lt;linux/linkage.h&gt;
 
 .macro xen_pv_trap name
<span class="p_chunk">@@ -54,6 +55,19 @@</span> <span class="p_context"> xen_pv_trap entry_INT80_compat</span>
 #endif
 xen_pv_trap hypervisor_callback
 
<span class="p_add">+	__INIT</span>
<span class="p_add">+ENTRY(xen_early_idt_handler_array)</span>
<span class="p_add">+	i = 0</span>
<span class="p_add">+	.rept NUM_EXCEPTION_VECTORS</span>
<span class="p_add">+	pop %rcx</span>
<span class="p_add">+	pop %r11</span>
<span class="p_add">+	jmp early_idt_handler_array + i*EARLY_IDT_HANDLER_SIZE</span>
<span class="p_add">+	i = i + 1</span>
<span class="p_add">+	.fill xen_early_idt_handler_array + i*XEN_EARLY_IDT_HANDLER_SIZE - ., 1, 0xcc</span>
<span class="p_add">+	.endr</span>
<span class="p_add">+END(xen_early_idt_handler_array)</span>
<span class="p_add">+	__FINIT</span>
<span class="p_add">+</span>
 hypercall_iret = hypercall_page + __HYPERVISOR_iret * 32
 /*
  * Xen64 iret frame:

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



