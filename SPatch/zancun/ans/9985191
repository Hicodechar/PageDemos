
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm: Consolidate page table accounting - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm: Consolidate page table accounting</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 4, 2017, 4:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171004163648.11234-2-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9985191/mbox/"
   >mbox</a>
|
   <a href="/patch/9985191/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9985191/">/patch/9985191/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4632E60291 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 342C928B77
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 264AE28B7B; Wed,  4 Oct 2017 16:37:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2488D28B77
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751344AbdJDQhE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 4 Oct 2017 12:37:04 -0400
Received: from mga03.intel.com ([134.134.136.65]:6120 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750966AbdJDQhC (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 4 Oct 2017 12:37:02 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by orsmga103.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	04 Oct 2017 09:37:01 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.42,477,1500966000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1202194384&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga001.fm.intel.com with ESMTP; 04 Oct 2017 09:36:57 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 09811E4; Wed,  4 Oct 2017 19:36:55 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org, Michal Hocko &lt;mhocko@kernel.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 2/2] mm: Consolidate page table accounting
Date: Wed,  4 Oct 2017 19:36:48 +0300
Message-Id: &lt;20171004163648.11234-2-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20171004163648.11234-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20171004163648.11234-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Oct. 4, 2017, 4:36 p.m.</div>
<pre class="content">
This patch switches page table accounting to single counter from
three -- nr_ptes, nr_pmds and nr_puds.

mm-&gt;pgtables_bytes is now used to account page table levels. We use
bytes, because page table size for different levels of page table tree
may be different.

The change has user-visible effect: we don&#39;t have VmPMD and VmPUD
reported in /proc/[pid]/status. Not sure if anybody uses them.
(As alternative, we can always report 0 kB for them.)

OOM-killer report is also slightly changed: we now report pgtables_bytes
instead of nr_ptes, nr_pmd, nr_puds.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 Documentation/filesystems/proc.txt |  1 -
 Documentation/sysctl/vm.txt        |  8 +++---
 fs/proc/task_mmu.c                 | 11 ++------
 include/linux/mm.h                 | 58 ++++++++------------------------------
 include/linux/mm_types.h           |  8 +-----
 kernel/fork.c                      | 16 +++--------
 mm/debug.c                         |  7 ++---
 mm/oom_kill.c                      | 14 ++++-----
 8 files changed, 31 insertions(+), 92 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Oct. 5, 2017, 5:08 a.m.</div>
<pre class="content">
On 10/04/2017 10:06 PM, Kirill A. Shutemov wrote:
<span class="quote">&gt; This patch switches page table accounting to single counter from</span>
<span class="quote">&gt; three -- nr_ptes, nr_pmds and nr_puds.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mm-&gt;pgtables_bytes is now used to account page table levels. We use</span>
<span class="quote">&gt; bytes, because page table size for different levels of page table tree</span>
<span class="quote">&gt; may be different.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The change has user-visible effect: we don&#39;t have VmPMD and VmPUD</span>
<span class="quote">&gt; reported in /proc/[pid]/status. Not sure if anybody uses them.</span>
<span class="quote">&gt; (As alternative, we can always report 0 kB for them.)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; OOM-killer report is also slightly changed: we now report pgtables_bytes</span>
<span class="quote">&gt; instead of nr_ptes, nr_pmd, nr_puds.</span>

Could you please mention the motivation of doing this ? Why we are
consolidating the counters which also changes /proc/ interface as
well as OOM report ? What is the benefit ?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Oct. 5, 2017, 10:10 a.m.</div>
<pre class="content">
On Thu, Oct 05, 2017 at 10:38:29AM +0530, Anshuman Khandual wrote:
<span class="quote">&gt; On 10/04/2017 10:06 PM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; This patch switches page table accounting to single counter from</span>
<span class="quote">&gt; &gt; three -- nr_ptes, nr_pmds and nr_puds.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; mm-&gt;pgtables_bytes is now used to account page table levels. We use</span>
<span class="quote">&gt; &gt; bytes, because page table size for different levels of page table tree</span>
<span class="quote">&gt; &gt; may be different.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The change has user-visible effect: we don&#39;t have VmPMD and VmPUD</span>
<span class="quote">&gt; &gt; reported in /proc/[pid]/status. Not sure if anybody uses them.</span>
<span class="quote">&gt; &gt; (As alternative, we can always report 0 kB for them.)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; OOM-killer report is also slightly changed: we now report pgtables_bytes</span>
<span class="quote">&gt; &gt; instead of nr_ptes, nr_pmd, nr_puds.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Could you please mention the motivation of doing this ? Why we are</span>
<span class="quote">&gt; consolidating the counters which also changes /proc/ interface as</span>
<span class="quote">&gt; well as OOM report ? What is the benefit ?</span>

Sure, I&#39;ll update description.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/filesystems/proc.txt b/Documentation/filesystems/proc.txt</span>
<span class="p_header">index adba21b5ada7..ec571b9bb18a 100644</span>
<span class="p_header">--- a/Documentation/filesystems/proc.txt</span>
<span class="p_header">+++ b/Documentation/filesystems/proc.txt</span>
<span class="p_chunk">@@ -250,7 +250,6 @@</span> <span class="p_context"> Table 1-2: Contents of the status files (as of 4.8)</span>
  VmExe                       size of text segment
  VmLib                       size of shared library code
  VmPTE                       size of page table entries
<span class="p_del">- VmPMD                       size of second level page tables</span>
  VmSwap                      amount of swap used by anonymous private data
                              (shmem swap usage is not included)
  HugetlbPages                size of hugetlb memory portions
<span class="p_header">diff --git a/Documentation/sysctl/vm.txt b/Documentation/sysctl/vm.txt</span>
<span class="p_header">index 2717b6f2d706..2db0596d12f4 100644</span>
<span class="p_header">--- a/Documentation/sysctl/vm.txt</span>
<span class="p_header">+++ b/Documentation/sysctl/vm.txt</span>
<span class="p_chunk">@@ -622,10 +622,10 @@</span> <span class="p_context"> oom_dump_tasks</span>
 
 Enables a system-wide task dump (excluding kernel threads) to be produced
 when the kernel performs an OOM-killing and includes such information as
<span class="p_del">-pid, uid, tgid, vm size, rss, nr_ptes, nr_pmds, nr_puds, swapents,</span>
<span class="p_del">-oom_score_adj score, and name.  This is helpful to determine why the OOM</span>
<span class="p_del">-killer was invoked, to identify the rogue task that caused it, and to</span>
<span class="p_del">-determine why the OOM killer chose the task it did to kill.</span>
<span class="p_add">+pid, uid, tgid, vm size, rss, pgtables_bytes, swapents, oom_score_adj</span>
<span class="p_add">+score, and name.  This is helpful to determine why the OOM killer was</span>
<span class="p_add">+invoked, to identify the rogue task that caused it, and to determine why</span>
<span class="p_add">+the OOM killer chose the task it did to kill.</span>
 
 If this is set to zero, this information is suppressed.  On very
 large systems with thousands of tasks it may not be feasible to dump
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 84c262d5197a..c9c81373225d 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -25,7 +25,7 @@</span> <span class="p_context"></span>
 
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
<span class="p_del">-	unsigned long text, lib, swap, ptes, pmds, puds, anon, file, shmem;</span>
<span class="p_add">+	unsigned long text, lib, swap, anon, file, shmem;</span>
 	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss;
 
 	anon = get_mm_counter(mm, MM_ANONPAGES);
<span class="p_chunk">@@ -49,9 +49,6 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 	text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK)) &gt;&gt; 10;
 	lib = (mm-&gt;exec_vm &lt;&lt; (PAGE_SHIFT-10)) - text;
 	swap = get_mm_counter(mm, MM_SWAPENTS);
<span class="p_del">-	ptes = PTRS_PER_PTE * sizeof(pte_t) * mm_nr_ptes(mm);</span>
<span class="p_del">-	pmds = PTRS_PER_PMD * sizeof(pmd_t) * mm_nr_pmds(mm);</span>
<span class="p_del">-	puds = PTRS_PER_PUD * sizeof(pud_t) * mm_nr_puds(mm);</span>
 	seq_printf(m,
 		&quot;VmPeak:\t%8lu kB\n&quot;
 		&quot;VmSize:\t%8lu kB\n&quot;
<span class="p_chunk">@@ -67,8 +64,6 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		&quot;VmExe:\t%8lu kB\n&quot;
 		&quot;VmLib:\t%8lu kB\n&quot;
 		&quot;VmPTE:\t%8lu kB\n&quot;
<span class="p_del">-		&quot;VmPMD:\t%8lu kB\n&quot;</span>
<span class="p_del">-		&quot;VmPUD:\t%8lu kB\n&quot;</span>
 		&quot;VmSwap:\t%8lu kB\n&quot;,
 		hiwater_vm &lt;&lt; (PAGE_SHIFT-10),
 		total_vm &lt;&lt; (PAGE_SHIFT-10),
<span class="p_chunk">@@ -81,9 +76,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		shmem &lt;&lt; (PAGE_SHIFT-10),
 		mm-&gt;data_vm &lt;&lt; (PAGE_SHIFT-10),
 		mm-&gt;stack_vm &lt;&lt; (PAGE_SHIFT-10), text, lib,
<span class="p_del">-		ptes &gt;&gt; 10,</span>
<span class="p_del">-		pmds &gt;&gt; 10,</span>
<span class="p_del">-		puds &gt;&gt; 10,</span>
<span class="p_add">+		mm_pgtables_bytes(mm) &gt;&gt; 10,</span>
 		swap &lt;&lt; (PAGE_SHIFT-10));
 	hugetlb_report_usage(m, mm);
 }
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index e185dcdc5183..a7e50c464021 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1604,37 +1604,20 @@</span> <span class="p_context"> static inline int __pud_alloc(struct mm_struct *mm, p4d_t *p4d,</span>
 {
 	return 0;
 }
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long mm_nr_puds(const struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline void mm_nr_puds_init(struct mm_struct *mm) {}</span>
 static inline void mm_inc_nr_puds(struct mm_struct *mm) {}
 static inline void mm_dec_nr_puds(struct mm_struct *mm) {}
 
 #else
 int __pud_alloc(struct mm_struct *mm, p4d_t *p4d, unsigned long address);
 
<span class="p_del">-static inline void mm_nr_puds_init(struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	atomic_long_set(&amp;mm-&gt;nr_puds, 0);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long mm_nr_puds(const struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return atomic_long_read(&amp;mm-&gt;nr_puds);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void mm_inc_nr_puds(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_inc(&amp;mm-&gt;nr_puds);</span>
<span class="p_add">+	atomic_long_add(PTRS_PER_PUD * sizeof(pud_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 
 static inline void mm_dec_nr_puds(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_puds);</span>
<span class="p_add">+	atomic_long_sub(PTRS_PER_PUD * sizeof(pud_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 #endif
 
<span class="p_chunk">@@ -1645,64 +1628,47 @@</span> <span class="p_context"> static inline int __pmd_alloc(struct mm_struct *mm, pud_t *pud,</span>
 	return 0;
 }
 
<span class="p_del">-static inline void mm_nr_pmds_init(struct mm_struct *mm) {}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long mm_nr_pmds(const struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void mm_inc_nr_pmds(struct mm_struct *mm) {}
 static inline void mm_dec_nr_pmds(struct mm_struct *mm) {}
 
 #else
 int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);
 
<span class="p_del">-static inline void mm_nr_pmds_init(struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	atomic_long_set(&amp;mm-&gt;nr_pmds, 0);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long mm_nr_pmds(const struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return atomic_long_read(&amp;mm-&gt;nr_pmds);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void mm_inc_nr_pmds(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_inc(&amp;mm-&gt;nr_pmds);</span>
<span class="p_add">+	atomic_long_add(PTRS_PER_PMD * sizeof(pmd_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 
 static inline void mm_dec_nr_pmds(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_pmds);</span>
<span class="p_add">+	atomic_long_sub(PTRS_PER_PMD * sizeof(pmd_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 #endif
 
 #ifdef CONFIG_MMU
<span class="p_del">-static inline void mm_nr_ptes_init(struct mm_struct *mm)</span>
<span class="p_add">+static inline void mm_pgtables_bytes_init(struct mm_struct *mm)</span>
 {
<span class="p_del">-	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="p_add">+	atomic_long_set(&amp;mm-&gt;pgtables_bytes, 0);</span>
 }
 
<span class="p_del">-static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="p_add">+static inline unsigned long mm_pgtables_bytes(const struct mm_struct *mm)</span>
 {
<span class="p_del">-	return atomic_long_read(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	return atomic_long_read(&amp;mm-&gt;pgtables_bytes);</span>
 }
 
 static inline void mm_inc_nr_ptes(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	atomic_long_add(PTRS_PER_PTE * sizeof(pte_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 
 static inline void mm_dec_nr_ptes(struct mm_struct *mm)
 {
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	atomic_long_sub(PTRS_PER_PTE * sizeof(pte_t), &amp;mm-&gt;pgtables_bytes);</span>
 }
 #else
<span class="p_del">-static inline void mm_nr_ptes_init(struct mm_struct *mm) {}</span>
 
<span class="p_del">-static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="p_add">+static inline void mm_pgtables_bytes_init(struct mm_struct *mm) {}</span>
<span class="p_add">+static inline unsigned long mm_pgtables_bytes(struct mm_struct *mm)</span>
 {
 	return 0;
 }
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 95d0eefe1f4a..aadd23377fbb 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -399,13 +399,7 @@</span> <span class="p_context"> struct mm_struct {</span>
 	atomic_t mm_count;
 
 #ifdef CONFIG_MMU
<span class="p_del">-	atomic_long_t nr_ptes;			/* PTE page table pages */</span>
<span class="p_del">-#endif</span>
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="p_del">-	atomic_long_t nr_pmds;			/* PMD page table pages */</span>
<span class="p_del">-#endif</span>
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_del">-	atomic_long_t nr_puds;			/* PUD page table pages */</span>
<span class="p_add">+	atomic_long_t pgtables_bytes;		/* PTE page table pages */</span>
 #endif
 	int map_count;				/* number of VMAs */
 
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 1c08f0136667..ad849ccdad9e 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -813,9 +813,7 @@</span> <span class="p_context"> static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p,</span>
 	init_rwsem(&amp;mm-&gt;mmap_sem);
 	INIT_LIST_HEAD(&amp;mm-&gt;mmlist);
 	mm-&gt;core_state = NULL;
<span class="p_del">-	mm_nr_ptes_init(mm);</span>
<span class="p_del">-	mm_nr_pmds_init(mm);</span>
<span class="p_del">-	mm_nr_puds_init(mm);</span>
<span class="p_add">+	mm_pgtables_bytes_init(mm);</span>
 	mm-&gt;map_count = 0;
 	mm-&gt;locked_vm = 0;
 	mm-&gt;pinned_vm = 0;
<span class="p_chunk">@@ -869,15 +867,9 @@</span> <span class="p_context"> static void check_mm(struct mm_struct *mm)</span>
 					  &quot;mm:%p idx:%d val:%ld\n&quot;, mm, i, x);
 	}
 
<span class="p_del">-	if (mm_nr_pmds(mm))</span>
<span class="p_del">-		pr_alert(&quot;BUG: non-zero nr_ptes on freeing mm: %ld\n&quot;,</span>
<span class="p_del">-				mm_nr_ptes(mm));</span>
<span class="p_del">-	if (mm_nr_pmds(mm))</span>
<span class="p_del">-		pr_alert(&quot;BUG: non-zero nr_pmds on freeing mm: %ld\n&quot;,</span>
<span class="p_del">-				mm_nr_pmds(mm));</span>
<span class="p_del">-	if (mm_nr_puds(mm))</span>
<span class="p_del">-		pr_alert(&quot;BUG: non-zero nr_puds on freeing mm: %ld\n&quot;,</span>
<span class="p_del">-				mm_nr_puds(mm));</span>
<span class="p_add">+	if (mm_pgtables_bytes(mm))</span>
<span class="p_add">+		pr_alert(&quot;BUG: non-zero pgtables_bytes on freeing mm: %ld\n&quot;,</span>
<span class="p_add">+				mm_pgtables_bytes(mm));</span>
 
 #if defined(CONFIG_TRANSPARENT_HUGEPAGE) &amp;&amp; !USE_SPLIT_PMD_PTLOCKS
 	VM_BUG_ON_MM(mm-&gt;pmd_huge_pte, mm);
<span class="p_header">diff --git a/mm/debug.c b/mm/debug.c</span>
<span class="p_header">index 177326818d24..299248a7fe0d 100644</span>
<span class="p_header">--- a/mm/debug.c</span>
<span class="p_header">+++ b/mm/debug.c</span>
<span class="p_chunk">@@ -104,8 +104,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		&quot;get_unmapped_area %p\n&quot;
 #endif
 		&quot;mmap_base %lu mmap_legacy_base %lu highest_vm_end %lu\n&quot;
<span class="p_del">-		&quot;pgd %p mm_users %d mm_count %d\n&quot;</span>
<span class="p_del">-		&quot;nr_ptes %lu nr_pmds %lu nr_puds %lu map_count %d\n&quot;</span>
<span class="p_add">+		&quot;pgd %p mm_users %d mm_count %d pgtables_bytes %lu map_count %d\n&quot;</span>
 		&quot;hiwater_rss %lx hiwater_vm %lx total_vm %lx locked_vm %lx\n&quot;
 		&quot;pinned_vm %lx data_vm %lx exec_vm %lx stack_vm %lx\n&quot;
 		&quot;start_code %lx end_code %lx start_data %lx end_data %lx\n&quot;
<span class="p_chunk">@@ -135,9 +134,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		mm-&gt;mmap_base, mm-&gt;mmap_legacy_base, mm-&gt;highest_vm_end,
 		mm-&gt;pgd, atomic_read(&amp;mm-&gt;mm_users),
 		atomic_read(&amp;mm-&gt;mm_count),
<span class="p_del">-		mm_nr_ptes(mm),</span>
<span class="p_del">-		mm_nr_pmds(mm),</span>
<span class="p_del">-		mm_nr_puds(mm),</span>
<span class="p_add">+		mm_pgtables_bytes(mm),</span>
 		mm-&gt;map_count,
 		mm-&gt;hiwater_rss, mm-&gt;hiwater_vm, mm-&gt;total_vm, mm-&gt;locked_vm,
 		mm-&gt;pinned_vm, mm-&gt;data_vm, mm-&gt;exec_vm, mm-&gt;stack_vm,
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 851a0eec2624..a48280e64be6 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -200,7 +200,7 @@</span> <span class="p_context"> unsigned long oom_badness(struct task_struct *p, struct mem_cgroup *memcg,</span>
 	 * task&#39;s rss, pagetable and swap space use.
 	 */
 	points = get_mm_rss(p-&gt;mm) + get_mm_counter(p-&gt;mm, MM_SWAPENTS) +
<span class="p_del">-		mm_nr_ptes(p-&gt;mm) + mm_nr_pmds(p-&gt;mm) + mm_nr_puds(p-&gt;mm);</span>
<span class="p_add">+		mm_pgtables_bytes(p-&gt;mm) / PAGE_SIZE;</span>
 	task_unlock(p);
 
 	/*
<span class="p_chunk">@@ -368,15 +368,15 @@</span> <span class="p_context"> static void select_bad_process(struct oom_control *oc)</span>
  * Dumps the current memory state of all eligible tasks.  Tasks not in the same
  * memcg, not in the same cpuset, or bound to a disjoint set of mempolicy nodes
  * are not shown.
<span class="p_del">- * State information includes task&#39;s pid, uid, tgid, vm size, rss, nr_ptes,</span>
<span class="p_del">- * swapents, oom_score_adj value, and name.</span>
<span class="p_add">+ * State information includes task&#39;s pid, uid, tgid, vm size, rss,</span>
<span class="p_add">+ * pgtables_bytes, swapents, oom_score_adj value, and name.</span>
  */
 static void dump_tasks(struct mem_cgroup *memcg, const nodemask_t *nodemask)
 {
 	struct task_struct *p;
 	struct task_struct *task;
 
<span class="p_del">-	pr_info(&quot;[ pid ]   uid  tgid total_vm      rss nr_ptes nr_pmds nr_puds swapents oom_score_adj name\n&quot;);</span>
<span class="p_add">+	pr_info(&quot;[ pid ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name\n&quot;);</span>
 	rcu_read_lock();
 	for_each_process(p) {
 		if (oom_unkillable_task(p, memcg, nodemask))
<span class="p_chunk">@@ -392,12 +392,10 @@</span> <span class="p_context"> static void dump_tasks(struct mem_cgroup *memcg, const nodemask_t *nodemask)</span>
 			continue;
 		}
 
<span class="p_del">-		pr_info(&quot;[%5d] %5d %5d %8lu %8lu %7ld %7ld %7ld %8lu         %5hd %s\n&quot;,</span>
<span class="p_add">+		pr_info(&quot;[%5d] %5d %5d %8lu %8lu %8ld %8lu         %5hd %s\n&quot;,</span>
 			task-&gt;pid, from_kuid(&amp;init_user_ns, task_uid(task)),
 			task-&gt;tgid, task-&gt;mm-&gt;total_vm, get_mm_rss(task-&gt;mm),
<span class="p_del">-			mm_nr_ptes(task-&gt;mm),</span>
<span class="p_del">-			mm_nr_pmds(task-&gt;mm),</span>
<span class="p_del">-			mm_nr_puds(task-&gt;mm),</span>
<span class="p_add">+			mm_pgtables_bytes(task-&gt;mm),</span>
 			get_mm_counter(task-&gt;mm, MM_SWAPENTS),
 			task-&gt;signal-&gt;oom_score_adj, task-&gt;comm);
 		task_unlock(task);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



