
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V163,15/51] x86/mm: Move the CR3 construction functions to tlbflush.h - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V163,15/51] x86/mm: Move the CR3 construction functions to tlbflush.h</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 18, 2017, 11:42 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171218115254.833033747@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10118983/mbox/"
   >mbox</a>
|
   <a href="/patch/10118983/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10118983/">/patch/10118983/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	016A46019C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Dec 2017 12:08:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E0A6B28F8C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Dec 2017 12:08:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D513D28FA4; Mon, 18 Dec 2017 12:08:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 904A228F8C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Dec 2017 12:08:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758801AbdLRMIW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 18 Dec 2017 07:08:22 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:45008 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932926AbdLRLyF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 18 Dec 2017 06:54:05 -0500
Received: from localhost ([127.0.0.1] helo=[127.0.1.1])
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1eQty3-0000lf-1w; Mon, 18 Dec 2017 12:52:23 +0100
Message-Id: &lt;20171218115254.833033747@linutronix.de&gt;
User-Agent: quilt/0.63-1
Date: Mon, 18 Dec 2017 12:42:30 +0100
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: x86@kernel.org, Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, daniel.gruss@iaik.tugraz.at,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, linux-mm@kvack.org
Subject: [patch V163 15/51] x86/mm: Move the CR3 construction functions to
	tlbflush.h
References: &lt;20171218114215.239543034@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=0047-x86-mm-Move-the-CR3-construction-functions-to-tlbflu.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Dec. 18, 2017, 11:42 a.m.</div>
<pre class="content">
For flushing the TLB, the ASID which has been programmed into the hardware
must be known.  That differs from what is in &#39;cpu_tlbstate&#39;.

Add functions to transform the &#39;cpu_tlbstate&#39; values into to the one
programmed into the hardware (CR3).

It&#39;s not easy to include mmu_context.h into tlbflush.h, so just move the
CR3 building over to tlbflush.h.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: David Laight &lt;David.Laight@aculab.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: Eduardo Valentin &lt;eduval@amazon.com&gt;
Cc: Greg KH &lt;gregkh@linuxfoundation.org&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: aliguori@amazon.com
Cc: daniel.gruss@iaik.tugraz.at
Cc: hughd@google.com
Cc: keescook@google.com
Cc: linux-mm@kvack.org

---
 arch/x86/include/asm/mmu_context.h |   29 +----------------------------
 arch/x86/include/asm/tlbflush.h    |   26 ++++++++++++++++++++++++++
 arch/x86/mm/tlb.c                  |    8 ++++----
 3 files changed, 31 insertions(+), 32 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -291,33 +291,6 @@</span> <span class="p_context"> static inline bool arch_vma_access_permi</span>
 }
 
 /*
<span class="p_del">- * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID</span>
<span class="p_del">- * bits.  This serves two purposes.  It prevents a nasty situation in</span>
<span class="p_del">- * which PCID-unaware code saves CR3, loads some other value (with PCID</span>
<span class="p_del">- * == 0), and then restores CR3, thus corrupting the TLB for ASID 0 if</span>
<span class="p_del">- * the saved ASID was nonzero.  It also means that any bugs involving</span>
<span class="p_del">- * loading a PCID-enabled CR3 with CR4.PCIDE off will trigger</span>
<span class="p_del">- * deterministically.</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long build_cr3(struct mm_struct *mm, u16 asid)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (static_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_del">-		VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_del">-		return __sme_pa(mm-&gt;pgd) | (asid + 1);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		VM_WARN_ON_ONCE(asid != 0);</span>
<span class="p_del">-		return __sme_pa(mm-&gt;pgd);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline unsigned long build_cr3_noflush(struct mm_struct *mm, u16 asid)</span>
<span class="p_del">-{</span>
<span class="p_del">-	VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_del">-	return __sme_pa(mm-&gt;pgd) | (asid + 1) | CR3_NOFLUSH;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * This can be used from process context to figure out what the value of
  * CR3 is without needing to do a (slow) __read_cr3().
  *
<span class="p_chunk">@@ -326,7 +299,7 @@</span> <span class="p_context"> static inline unsigned long build_cr3_no</span>
  */
 static inline unsigned long __get_current_cr3_fast(void)
 {
<span class="p_del">-	unsigned long cr3 = build_cr3(this_cpu_read(cpu_tlbstate.loaded_mm),</span>
<span class="p_add">+	unsigned long cr3 = build_cr3(this_cpu_read(cpu_tlbstate.loaded_mm)-&gt;pgd,</span>
 		this_cpu_read(cpu_tlbstate.loaded_mm_asid));
 
 	/* For now, be very restrictive about when this can be called. */
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -69,6 +69,32 @@</span> <span class="p_context"> static inline u64 inc_mm_tlb_gen(struct</span>
 	return atomic64_inc_return(&amp;mm-&gt;context.tlb_gen);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * If PCID is on, ASID-aware code paths put the ASID+1 into the PCID bits.</span>
<span class="p_add">+ * This serves two purposes.  It prevents a nasty situation in which</span>
<span class="p_add">+ * PCID-unaware code saves CR3, loads some other value (with PCID == 0),</span>
<span class="p_add">+ * and then restores CR3, thus corrupting the TLB for ASID 0 if the saved</span>
<span class="p_add">+ * ASID was nonzero.  It also means that any bugs involving loading a</span>
<span class="p_add">+ * PCID-enabled CR3 with CR4.PCIDE off will trigger deterministically.</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct pgd_t;</span>
<span class="p_add">+static inline unsigned long build_cr3(pgd_t *pgd, u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_add">+		VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_add">+		return __sme_pa(pgd) | (asid + 1);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		VM_WARN_ON_ONCE(asid != 0);</span>
<span class="p_add">+		return __sme_pa(pgd);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long build_cr3_noflush(pgd_t *pgd, u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_WARN_ON_ONCE(asid &gt; 4094);</span>
<span class="p_add">+	return __sme_pa(pgd) | (asid + 1) | CR3_NOFLUSH;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_PARAVIRT
 #include &lt;asm/paravirt.h&gt;
 #else
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -128,7 +128,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct</span>
 	 * isn&#39;t free.
 	 */
 #ifdef CONFIG_DEBUG_VM
<span class="p_del">-	if (WARN_ON_ONCE(__read_cr3() != build_cr3(real_prev, prev_asid))) {</span>
<span class="p_add">+	if (WARN_ON_ONCE(__read_cr3() != build_cr3(real_prev-&gt;pgd, prev_asid))) {</span>
 		/*
 		 * If we were to BUG here, we&#39;d be very likely to kill
 		 * the system so hard that we don&#39;t see the call trace.
<span class="p_chunk">@@ -195,7 +195,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct</span>
 		if (need_flush) {
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].ctx_id, next-&gt;context.ctx_id);
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].tlb_gen, next_tlb_gen);
<span class="p_del">-			write_cr3(build_cr3(next, new_asid));</span>
<span class="p_add">+			write_cr3(build_cr3(next-&gt;pgd, new_asid));</span>
 
 			/*
 			 * NB: This gets called via leave_mm() in the idle path
<span class="p_chunk">@@ -208,7 +208,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct</span>
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);
 		} else {
 			/* The new ASID is already up to date. */
<span class="p_del">-			write_cr3(build_cr3_noflush(next, new_asid));</span>
<span class="p_add">+			write_cr3(build_cr3_noflush(next-&gt;pgd, new_asid));</span>
 
 			/* See above wrt _rcuidle. */
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);
<span class="p_chunk">@@ -288,7 +288,7 @@</span> <span class="p_context"> void initialize_tlbstate_and_flush(void)</span>
 		!(cr4_read_shadow() &amp; X86_CR4_PCIDE));
 
 	/* Force ASID 0 and force a TLB flush. */
<span class="p_del">-	write_cr3(build_cr3(mm, 0));</span>
<span class="p_add">+	write_cr3(build_cr3(mm-&gt;pgd, 0));</span>
 
 	/* Reinitialize tlbstate. */
 	this_cpu_write(cpu_tlbstate.loaded_mm_asid, 0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



