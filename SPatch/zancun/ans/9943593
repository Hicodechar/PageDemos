
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>net: bonding: Fix transmit load balancing in balance-alb mode if specified by sysfs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    net: bonding: Fix transmit load balancing in balance-alb mode if specified by sysfs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 8, 2017, 10:10 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;52a22af7-cc99-e441-79fa-e48da283b001@cumulusnetworks.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9943593/mbox/"
   >mbox</a>
|
   <a href="/patch/9943593/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9943593/">/patch/9943593/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A013A604D4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 10:10:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 90B0D28643
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 10:10:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 81B0528658; Fri,  8 Sep 2017 10:10:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8121228674
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 10:10:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753931AbdIHKKT (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 8 Sep 2017 06:10:19 -0400
Received: from mail-wr0-f179.google.com ([209.85.128.179]:35944 &quot;EHLO
	mail-wr0-f179.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751556AbdIHKKR (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 8 Sep 2017 06:10:17 -0400
Received: by mail-wr0-f179.google.com with SMTP id o42so3770826wrb.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 08 Sep 2017 03:10:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=cumulusnetworks.com; s=google;
	h=subject:to:references:cc:from:message-id:date:user-agent
	:mime-version:in-reply-to:content-transfer-encoding;
	bh=2+2hYZB3QwK8iHHlbCh9PZkh3OjPhW33g2H/mB7kAZY=;
	b=Ow9s/3gyth23rOm4CJH2zkLQUF83FnyB59GdCV1JxzIbN3W+dBdqk0LEPq8p4Ka5vy
	DMe2L1pUHjSwCgdr14QFIa0HLB4iSkaFg7qBRbau2RYWa2DDtqA6Mdf3o3OxAySky3sF
	WUYG/luT9u8ApwW14VkjQff94B5XXtfa+L+l0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:subject:to:references:cc:from:message-id:date
	:user-agent:mime-version:in-reply-to:content-transfer-encoding;
	bh=2+2hYZB3QwK8iHHlbCh9PZkh3OjPhW33g2H/mB7kAZY=;
	b=nocVeUNDmTanBU4eIOlmavOY/9SLDTx2YPuumDirtNe9NMGZq865NbnKQBQFI3bRuR
	btZDth1s4lBxnk19wK71BFuj906TrnVeLsPLDFLiFBlqNMUQON5P/GtWr1uC9vXX471o
	gDysiFlpt7nV7V953gVBHqa1TgRdPYlq+IKcYz74xahazgksbQczAQVVpxcDrmvFEERC
	KF+4F4mNWKEAYhNW5rGIeWSwKooQyz49zDcDdpLYeWQ6Wp/Y6JqZkN0aDg4FtZC5cnDm
	38O9MuyHT/YN5NF4sG+qDq2PH4caqpjTpoKKcf0qPIWIyqdU9kFW6KvWuN7YttA3v0KN
	u3/g==
X-Gm-Message-State: AHPjjUhx1NhkFjpEgS3470mQQZmHn43h1/VXM3VKkOWX407sr0LnXuAr
	HqQh34ibvUygz48h0cc=
X-Google-Smtp-Source: ADKCNb402GKWKpPdH4ZbucwUzO3+NbhbgNsGDTcoHPX1U9b/xU5CX9yvdgwAlHFw4WJsI7yvEQi6RA==
X-Received: by 10.223.196.161 with SMTP id m30mr1531994wrf.187.1504865415511;
	Fri, 08 Sep 2017 03:10:15 -0700 (PDT)
Received: from [192.168.0.103] (46-10-142-144.ip.btc-net.bg. [46.10.142.144])
	by smtp.googlemail.com with ESMTPSA id
	z14sm803060wre.35.2017.09.08.03.10.13
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 08 Sep 2017 03:10:14 -0700 (PDT)
Subject: Re: [PATCH] net: bonding: Fix transmit load balancing in balance-alb
	mode if specified by sysfs
To: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;
References: &lt;17EC94B0A072C34B8DCF0D30AD16044A029864AC@BPXM09GP.gisp.nec.co.jp&gt;
Cc: Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;,
	Veaceslav Falico &lt;vfalico@gmail.com&gt;,
	Andy Gospodarek &lt;andy@greyhouse.net&gt;,
	&quot;netdev@vger.kernel.org&quot; &lt;netdev@vger.kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Reinis Rozitis &lt;r@roze.lv&gt;
From: Nikolay Aleksandrov &lt;nikolay@cumulusnetworks.com&gt;
X-Enigmail-Draft-Status: N1110
Message-ID: &lt;52a22af7-cc99-e441-79fa-e48da283b001@cumulusnetworks.com&gt;
Date: Fri, 8 Sep 2017 13:10:12 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
	Icedove/45.6.0
MIME-Version: 1.0
In-Reply-To: &lt;17EC94B0A072C34B8DCF0D30AD16044A029864AC@BPXM09GP.gisp.nec.co.jp&gt;
Content-Type: text/plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a> - Sept. 8, 2017, 10:10 a.m.</div>
<pre class="content">
On 08/09/17 05:06, Kosuke Tatsukawa wrote:
<span class="quote">&gt; Hi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On  7.09.2017 01:47, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt; Commit cbf5ecb30560 (&quot;net: bonding: Fix transmit load balancing in</span>
<span class="quote">&gt;&gt;&gt; balance-alb mode&quot;) tried to fix transmit dynamic load balancing in</span>
<span class="quote">&gt;&gt;&gt; balance-alb mode, which wasn&#39;t working after commit 8b426dc54cf4</span>
<span class="quote">&gt;&gt;&gt; (&quot;bonding: remove hardcoded value&quot;).</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; It turned out that my previous patch only fixed the case when</span>
<span class="quote">&gt;&gt;&gt; balance-alb was specified as bonding module parameter, and not when</span>
<span class="quote">&gt;&gt;&gt; balance-alb mode was set using /sys/class/net/*/bonding/mode (the most</span>
<span class="quote">&gt;&gt;&gt; common usage).  In the latter case, tlb_dynamic_lb was set up according</span>
<span class="quote">&gt;&gt;&gt; to the default mode of the bonding interface, which happens to be</span>
<span class="quote">&gt;&gt;&gt; balance-rr.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This additional patch addresses this issue by setting up tlb_dynamic_lb</span>
<span class="quote">&gt;&gt;&gt; to 1 if &quot;mode&quot; is set to balance-alb through the sysfs interface.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I didn&#39;t add code to change tlb_balance_lb back to the default value for</span>
<span class="quote">&gt;&gt;&gt; other modes, because &quot;mode&quot; is usually set up only once during</span>
<span class="quote">&gt;&gt;&gt; initialization, and it&#39;s not worthwhile to change the static variable</span>
<span class="quote">&gt;&gt;&gt; bonding_defaults in bond_main.c to a global variable just for this</span>
<span class="quote">&gt;&gt;&gt; purpose.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Commit 8b426dc54cf4 also changes the value of tlb_dynamic_lb for</span>
<span class="quote">&gt;&gt;&gt; balance-tlb mode if it is set up using the sysfs interface.  I didn&#39;t</span>
<span class="quote">&gt;&gt;&gt; change that behavior, because the value of tlb_balance_lb can be changed</span>
<span class="quote">&gt;&gt;&gt; using the sysfs interface for balance-tlb, and I didn&#39;t like changing</span>
<span class="quote">&gt;&gt;&gt; the default value back and forth for balance-tlb.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; As for balance-alb, /sys/class/net/*/bonding/tlb_balance_lb cannot be</span>
<span class="quote">&gt;&gt;&gt; written to.  However, I think balance-alb with tlb_dynamic_lb set to 0</span>
<span class="quote">&gt;&gt;&gt; is not an intended usage, so there is little use making it writable at</span>
<span class="quote">&gt;&gt;&gt; this moment.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Fixes: 8b426dc54cf4 (&quot;bonding: remove hardcoded value&quot;)</span>
<span class="quote">&gt;&gt;&gt; Reported-by: Reinis Rozitis &lt;r@roze.lv&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: stable@vger.kernel.org  # v4.12+</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  drivers/net/bonding/bond_options.c |    3 +++</span>
<span class="quote">&gt;&gt;&gt;  1 files changed, 3 insertions(+), 0 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I don&#39;t believe this to be the right solution, hardcoding it like this</span>
<span class="quote">&gt;&gt; changes user-visible behaviour. The issue is that if someone configured</span>
<span class="quote">&gt;&gt; it to be 0 in tlb mode, suddenly it will become 1 and will silently</span>
<span class="quote">&gt;&gt; override their config if they switch the mode to alb. Also it robs users</span>
<span class="quote">&gt;&gt; from their choice.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; If you think this should be settable in ALB mode, then IMO you should</span>
<span class="quote">&gt;&gt; edit tlb_dynamic_lb option&#39;s unsuppmodes and allow it to be set in ALB.</span>
<span class="quote">&gt;&gt; That would also be consistent with how it&#39;s handled in TLB mode.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; No, I don&#39;t think tlb_dynamic_lb should be settable in balance-alb at</span>
<span class="quote">&gt; this point.  All the current commits regarding tlb_dynamic_lb are for</span>
<span class="quote">&gt; balance-tlb mode, so I don&#39;t think balance-alb with tlb_dynamic_lb set</span>
<span class="quote">&gt; to 0 is an intended usage.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; Going back and looking at your previous fix I&#39;d argue that it is also</span>
<span class="quote">&gt;&gt; wrong, you should&#39;ve removed the mode check altogether to return the</span>
<span class="quote">&gt;&gt; original behaviour where the dynamic_lb is set to 1 (enabled) by</span>
<span class="quote">&gt;&gt; default and then ALB mode would&#39;ve had it, of course that would&#39;ve left</span>
<span class="quote">&gt;&gt; the case of setting it to 0 in TLB mode and switching to ALB, but that</span>
<span class="quote">&gt;&gt; is a different issue.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe balance-alb shouldn&#39;t be dependent on tlb_dynamic_lb.</span>
<span class="quote">&gt; tlb_dynamic_lb is referenced in the following functions.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  + bond_do_alb_xmit()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;  + bond_tlb_xmit()  -- Only used by balance-tlb</span>
<span class="quote">&gt;  + bond_open()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;  + bond_check_params()  -- Used during module initialization</span>
<span class="quote">&gt;  + bond_fill_info()  -- Used to get/set value</span>
<span class="quote">&gt;  + bond_option_tlb_dynamic_lb_set()  -- Used to get/set value</span>
<span class="quote">&gt;  + bonding_show_tlb_dynamic_lb()  -- Used to get/set value</span>
<span class="quote">&gt;  + bond_is_nondyn_tlb()  -- Only referenced if balance-tlb mode</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The following untested patch adds code to make balance-alb work as if</span>
<span class="quote">&gt; tlb_dynamic_lb==1 for the functions which affect balance-alb mode.  It</span>
<span class="quote">&gt; also reverts my previous patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What do you think about this approach?</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt; </span>

Logically the approach looks good, that being said it adds unnecessary tests in
the fast path, why not just something like the patch below ? That only leaves the
problem if it is zeroed in TLB and switched to ALB mode, and that is a one line
fix to unsuppmodes just allow it to be set for that specific case. The below
returns the default behaviour before the commit in your Fixes tag.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a> - Sept. 8, 2017, 10:13 a.m.</div>
<pre class="content">
On 08/09/17 13:10, Nikolay Aleksandrov wrote:
<span class="quote">&gt; On 08/09/17 05:06, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On  7.09.2017 01:47, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Commit cbf5ecb30560 (&quot;net: bonding: Fix transmit load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-alb mode&quot;) tried to fix transmit dynamic load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-alb mode, which wasn&#39;t working after commit 8b426dc54cf4</span>
<span class="quote">&gt;&gt;&gt;&gt; (&quot;bonding: remove hardcoded value&quot;).</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; It turned out that my previous patch only fixed the case when</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-alb was specified as bonding module parameter, and not when</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-alb mode was set using /sys/class/net/*/bonding/mode (the most</span>
<span class="quote">&gt;&gt;&gt;&gt; common usage).  In the latter case, tlb_dynamic_lb was set up according</span>
<span class="quote">&gt;&gt;&gt;&gt; to the default mode of the bonding interface, which happens to be</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-rr.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; This additional patch addresses this issue by setting up tlb_dynamic_lb</span>
<span class="quote">&gt;&gt;&gt;&gt; to 1 if &quot;mode&quot; is set to balance-alb through the sysfs interface.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I didn&#39;t add code to change tlb_balance_lb back to the default value for</span>
<span class="quote">&gt;&gt;&gt;&gt; other modes, because &quot;mode&quot; is usually set up only once during</span>
<span class="quote">&gt;&gt;&gt;&gt; initialization, and it&#39;s not worthwhile to change the static variable</span>
<span class="quote">&gt;&gt;&gt;&gt; bonding_defaults in bond_main.c to a global variable just for this</span>
<span class="quote">&gt;&gt;&gt;&gt; purpose.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Commit 8b426dc54cf4 also changes the value of tlb_dynamic_lb for</span>
<span class="quote">&gt;&gt;&gt;&gt; balance-tlb mode if it is set up using the sysfs interface.  I didn&#39;t</span>
<span class="quote">&gt;&gt;&gt;&gt; change that behavior, because the value of tlb_balance_lb can be changed</span>
<span class="quote">&gt;&gt;&gt;&gt; using the sysfs interface for balance-tlb, and I didn&#39;t like changing</span>
<span class="quote">&gt;&gt;&gt;&gt; the default value back and forth for balance-tlb.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; As for balance-alb, /sys/class/net/*/bonding/tlb_balance_lb cannot be</span>
<span class="quote">&gt;&gt;&gt;&gt; written to.  However, I think balance-alb with tlb_dynamic_lb set to 0</span>
<span class="quote">&gt;&gt;&gt;&gt; is not an intended usage, so there is little use making it writable at</span>
<span class="quote">&gt;&gt;&gt;&gt; this moment.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Fixes: 8b426dc54cf4 (&quot;bonding: remove hardcoded value&quot;)</span>
<span class="quote">&gt;&gt;&gt;&gt; Reported-by: Reinis Rozitis &lt;r@roze.lv&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: stable@vger.kernel.org  # v4.12+</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  drivers/net/bonding/bond_options.c |    3 +++</span>
<span class="quote">&gt;&gt;&gt;&gt;  1 files changed, 3 insertions(+), 0 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I don&#39;t believe this to be the right solution, hardcoding it like this</span>
<span class="quote">&gt;&gt;&gt; changes user-visible behaviour. The issue is that if someone configured</span>
<span class="quote">&gt;&gt;&gt; it to be 0 in tlb mode, suddenly it will become 1 and will silently</span>
<span class="quote">&gt;&gt;&gt; override their config if they switch the mode to alb. Also it robs users</span>
<span class="quote">&gt;&gt;&gt; from their choice.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; If you think this should be settable in ALB mode, then IMO you should</span>
<span class="quote">&gt;&gt;&gt; edit tlb_dynamic_lb option&#39;s unsuppmodes and allow it to be set in ALB.</span>
<span class="quote">&gt;&gt;&gt; That would also be consistent with how it&#39;s handled in TLB mode.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; No, I don&#39;t think tlb_dynamic_lb should be settable in balance-alb at</span>
<span class="quote">&gt;&gt; this point.  All the current commits regarding tlb_dynamic_lb are for</span>
<span class="quote">&gt;&gt; balance-tlb mode, so I don&#39;t think balance-alb with tlb_dynamic_lb set</span>
<span class="quote">&gt;&gt; to 0 is an intended usage.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Going back and looking at your previous fix I&#39;d argue that it is also</span>
<span class="quote">&gt;&gt;&gt; wrong, you should&#39;ve removed the mode check altogether to return the</span>
<span class="quote">&gt;&gt;&gt; original behaviour where the dynamic_lb is set to 1 (enabled) by</span>
<span class="quote">&gt;&gt;&gt; default and then ALB mode would&#39;ve had it, of course that would&#39;ve left</span>
<span class="quote">&gt;&gt;&gt; the case of setting it to 0 in TLB mode and switching to ALB, but that</span>
<span class="quote">&gt;&gt;&gt; is a different issue.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Maybe balance-alb shouldn&#39;t be dependent on tlb_dynamic_lb.</span>
<span class="quote">&gt;&gt; tlb_dynamic_lb is referenced in the following functions.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  + bond_do_alb_xmit()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;  + bond_tlb_xmit()  -- Only used by balance-tlb</span>
<span class="quote">&gt;&gt;  + bond_open()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;  + bond_check_params()  -- Used during module initialization</span>
<span class="quote">&gt;&gt;  + bond_fill_info()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;  + bond_option_tlb_dynamic_lb_set()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;  + bonding_show_tlb_dynamic_lb()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;  + bond_is_nondyn_tlb()  -- Only referenced if balance-tlb mode</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The following untested patch adds code to make balance-alb work as if</span>
<span class="quote">&gt;&gt; tlb_dynamic_lb==1 for the functions which affect balance-alb mode.  It</span>
<span class="quote">&gt;&gt; also reverts my previous patch.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; What do you think about this approach?</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Logically the approach looks good, that being said it adds unnecessary tests in</span>
<span class="quote">&gt; the fast path, why not just something like the patch below ? That only leaves the</span>
<span class="quote">&gt; problem if it is zeroed in TLB and switched to ALB mode, and that is a one line</span>
<span class="quote">&gt; fix to unsuppmodes just allow it to be set for that specific case. The below</span>
<span class="quote">&gt; returns the default behaviour before the commit in your Fixes tag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>

Actually I&#39;m fine with your approach, too. It will fix this regardless of the
value of tlb_dynamic_lb which sounds good to me for the price of a test in
the fast path.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="p_header">index fc63992ab0e0..c99dc59d729b 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_main.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_main.c</span>
<span class="p_chunk">@@ -4289,7 +4289,7 @@</span> <span class="p_context"> static int bond_check_params(struct bond_params *params)</span>
 	int bond_mode	= BOND_MODE_ROUNDROBIN;
 	int xmit_hashtype = BOND_XMIT_POLICY_LAYER2;
 	int lacp_fast = 0;
<span class="p_del">-	int tlb_dynamic_lb = 0;</span>
<span class="p_add">+	int tlb_dynamic_lb;</span>
 
 	/* Convert string parameters. */
 	if (mode) {
<span class="p_chunk">@@ -4601,16 +4601,13 @@</span> <span class="p_context"> static int bond_check_params(struct bond_params *params)</span>
 	}
 	ad_user_port_key = valptr-&gt;value;
 
<span class="p_del">-	if ((bond_mode == BOND_MODE_TLB) || (bond_mode == BOND_MODE_ALB)) {</span>
<span class="p_del">-		bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="p_del">-		valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB),</span>
<span class="p_del">-					&amp;newval);</span>
<span class="p_del">-		if (!valptr) {</span>
<span class="p_del">-			pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_del">-		}</span>
<span class="p_del">-		tlb_dynamic_lb = valptr-&gt;value;</span>
<span class="p_add">+	bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="p_add">+	valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB), &amp;newval);</span>
<span class="p_add">+	if (!valptr) {</span>
<span class="p_add">+		pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="p_add">+		return -EINVAL;</span>
 	}
<span class="p_add">+	tlb_dynamic_lb = valptr-&gt;value;</span>
 
 	if (lp_interval == 0) {
 		pr_warn(&quot;Warning: ip_interval must be between 1 and %d, so it was reset to %d\n&quot;,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



