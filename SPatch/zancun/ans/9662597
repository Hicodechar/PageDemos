
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[net-next] bonding: attempt to better support longer hw addresses - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [net-next] bonding: attempt to better support longer hw addresses</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=800">Jarod Wilson</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 4, 2017, 9:32 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170404213242.50079-1-jarod@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9662597/mbox/"
   >mbox</a>
|
   <a href="/patch/9662597/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9662597/">/patch/9662597/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4ECAA6032D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 21:33:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3FA9E2855A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 21:33:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 33A74285A4; Tue,  4 Apr 2017 21:33:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DFE0B2855A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 21:33:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754728AbdDDVdB (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 4 Apr 2017 17:33:01 -0400
Received: from mx1.redhat.com ([209.132.183.28]:43078 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754657AbdDDVdA (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 4 Apr 2017 17:33:00 -0400
Received: from smtp.corp.redhat.com
	(int-mx03.intmail.prod.int.phx2.redhat.com [10.5.11.13])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 864A180474;
	Tue,  4 Apr 2017 21:32:59 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 864A180474
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	spf=pass smtp.mailfrom=jarod@redhat.com
DKIM-Filter: OpenDKIM Filter v2.11.0 mx1.redhat.com 864A180474
Received: from hp-dl360pgen8-07.khw.lab.eng.bos.redhat.com
	(hp-dl360pgen8-07.khw.lab.eng.bos.redhat.com [10.16.184.47])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 17053993FD;
	Tue,  4 Apr 2017 21:32:57 +0000 (UTC)
From: Jarod Wilson &lt;jarod@redhat.com&gt;
To: linux-kernel@vger.kernel.org
Cc: Jarod Wilson &lt;jarod@redhat.com&gt;, Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;,
	Veaceslav Falico &lt;vfalico@gmail.com&gt;,
	Andy Gospodarek &lt;andy@greyhouse.net&gt;, netdev@vger.kernel.org
Subject: [PATCH net-next] bonding: attempt to better support longer hw
	addresses
Date: Tue,  4 Apr 2017 17:32:42 -0400
Message-Id: &lt;20170404213242.50079-1-jarod@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.13
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Tue, 04 Apr 2017 21:32:59 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=800">Jarod Wilson</a> - April 4, 2017, 9:32 p.m.</div>
<pre class="content">
People are using bonding over Infiniband IPoIB connections, and who knows
what else. Infiniband has a hardware address length of 20 octets
(INFINIBAND_ALEN), and the network core defines a MAX_ADDR_LEN of 32.
Various places in the bonding code are currently hard-wired to 6 octets
(ETH_ALEN), such as the 3ad code, which I&#39;ve left untouched here. Besides,
only alb is currently possible on Infiniband links right now anyway, due
to commit 1533e7731522, so the alb code is where most of the changes are.

One major component of this change is the addition of a bond_hw_addr_copy
function that takes a length argument, instead of using ether_addr_copy
everywhere that hardware addresses need to be copied about. The other
major component of this change is converting the bonding code from using
struct sockaddr for address storage to struct sockaddr_storage, as the
former has an address storage space of only 14, while the latter is 128
minus a few, which is necessary to support bonding over device with up to
MAX_ADDR_LEN octet hardware addresses. Additionally, this probably fixes
up some memory corruption issues with the current code, where it&#39;s
possible to write an infiniband hardware address into a sockaddr declared
on the stack.

Lightly tested on a dual mlx4 IPoIB setup, which properly shows a 20-octet
hardware address now:

$ cat /proc/net/bonding/bond0
Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)

Bonding Mode: fault-tolerance (active-backup) (fail_over_mac active)
Primary Slave: mlx4_ib0 (primary_reselect always)
Currently Active Slave: mlx4_ib0
MII Status: up
MII Polling Interval (ms): 100
Up Delay (ms): 100
Down Delay (ms): 100

Slave Interface: mlx4_ib0
MII Status: up
Speed: Unknown
Duplex: Unknown
Link Failure Count: 0
Permanent HW addr:
80:00:02:08:fe:80:00:00:00:00:00:00:e4:1d:2d:03:00:1d:67:01
Slave queue ID: 0

Slave Interface: mlx4_ib1
MII Status: up
Speed: Unknown
Duplex: Unknown
Link Failure Count: 0
Permanent HW addr:
80:00:02:09:fe:80:00:00:00:00:00:01:e4:1d:2d:03:00:1d:67:02
Slave queue ID: 0

Also tested with a standard 1Gbps NIC bonding setup (with a mix of
e1000 and e1000e cards), running LNST&#39;s bonding tests.

CC: Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;
CC: Veaceslav Falico &lt;vfalico@gmail.com&gt;
CC: Andy Gospodarek &lt;andy@greyhouse.net&gt;
CC: netdev@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Jarod Wilson &lt;jarod@redhat.com&gt;</span>
---
 drivers/net/bonding/bond_alb.c    | 88 +++++++++++++++++++++++----------------
 drivers/net/bonding/bond_main.c   | 73 ++++++++++++++++++--------------
 drivers/net/bonding/bond_procfs.c |  3 +-
 include/net/bonding.h             | 12 +++++-
 4 files changed, 108 insertions(+), 68 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - April 6, 2017, 1:45 a.m.</div>
<pre class="content">
<span class="from">From: Jarod Wilson &lt;jarod@redhat.com&gt;</span>
Date: Tue,  4 Apr 2017 17:32:42 -0400
<span class="quote">
&gt; People are using bonding over Infiniband IPoIB connections, and who knows</span>
<span class="quote">&gt; what else. Infiniband has a hardware address length of 20 octets</span>
<span class="quote">&gt; (INFINIBAND_ALEN), and the network core defines a MAX_ADDR_LEN of 32.</span>
<span class="quote">&gt; Various places in the bonding code are currently hard-wired to 6 octets</span>
<span class="quote">&gt; (ETH_ALEN), such as the 3ad code, which I&#39;ve left untouched here. Besides,</span>
<span class="quote">&gt; only alb is currently possible on Infiniband links right now anyway, due</span>
<span class="quote">&gt; to commit 1533e7731522, so the alb code is where most of the changes are.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; One major component of this change is the addition of a bond_hw_addr_copy</span>
<span class="quote">&gt; function that takes a length argument, instead of using ether_addr_copy</span>
<span class="quote">&gt; everywhere that hardware addresses need to be copied about. The other</span>
<span class="quote">&gt; major component of this change is converting the bonding code from using</span>
<span class="quote">&gt; struct sockaddr for address storage to struct sockaddr_storage, as the</span>
<span class="quote">&gt; former has an address storage space of only 14, while the latter is 128</span>
<span class="quote">&gt; minus a few, which is necessary to support bonding over device with up to</span>
<span class="quote">&gt; MAX_ADDR_LEN octet hardware addresses. Additionally, this probably fixes</span>
<span class="quote">&gt; up some memory corruption issues with the current code, where it&#39;s</span>
<span class="quote">&gt; possible to write an infiniband hardware address into a sockaddr declared</span>
<span class="quote">&gt; on the stack.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Lightly tested on a dual mlx4 IPoIB setup, which properly shows a 20-octet</span>
<span class="quote">&gt; hardware address now:</span>
 ...
<span class="quote">&gt; CC: Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;</span>
<span class="quote">&gt; CC: Veaceslav Falico &lt;vfalico@gmail.com&gt;</span>
<span class="quote">&gt; CC: Andy Gospodarek &lt;andy@greyhouse.net&gt;</span>
<span class="quote">&gt; CC: netdev@vger.kernel.org</span>
<span class="quote">&gt; Signed-off-by: Jarod Wilson &lt;jarod@redhat.com&gt;</span>

Applied, but:
<span class="quote">
&gt; +static inline void bond_hw_addr_copy(u8 *dst, const u8 *src, unsigned int len)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (len == ETH_ALEN) {</span>
<span class="quote">&gt; +		ether_addr_copy(dst, src);</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	memcpy(dst, src, len);</span>
<span class="quote">&gt; +}</span>

I wonder how much value there is in trying to conditionally use
ether_addr_copy().  Unless some of these calls are in the data
plane, just a straight memcpy() all the time is fine and much
simpler.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=800">Jarod Wilson</a> - April 6, 2017, 6:01 p.m.</div>
<pre class="content">
On 2017-04-05 9:45 PM, David Miller wrote:
<span class="quote">&gt; From: Jarod Wilson &lt;jarod@redhat.com&gt;</span>
<span class="quote">&gt; Date: Tue,  4 Apr 2017 17:32:42 -0400</span>
...
<span class="quote">&gt; Applied, but:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; +static inline void bond_hw_addr_copy(u8 *dst, const u8 *src, unsigned int len)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	if (len == ETH_ALEN) {</span>
<span class="quote">&gt;&gt; +		ether_addr_copy(dst, src);</span>
<span class="quote">&gt;&gt; +		return;</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	memcpy(dst, src, len);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I wonder how much value there is in trying to conditionally use</span>
<span class="quote">&gt; ether_addr_copy().  Unless some of these calls are in the data</span>
<span class="quote">&gt; plane, just a straight memcpy() all the time is fine and much</span>
<span class="quote">&gt; simpler.</span>

Yeah, I wasn&#39;t sure how much gain the bonding driver actually got from 
using the super-optimized ether_addr_copy(), and thought about just 
doing a memcpy all the time, but wanted to go for minimal impact to 
traditional ethernet bonding. Looks like bond_handle_frame() might 
benefit from sticking to ether_addr_copy() when it can, but the majority 
of other callers, at least in bond_main.c, are all in setup, teardown 
and failover paths, which ought to be tolerant of some overhead, though 
optimized failover isn&#39;t a bad thing for connection uptime. I do see 
bond_alb.c has one caller in the arp transmit path as well. I think I&#39;m 
inclined to just leave well enough alone for the moment.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/net/bonding/bond_alb.c b/drivers/net/bonding/bond_alb.c</span>
<span class="p_header">index c80b023092dd..7d7a3cec149a 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_alb.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_alb.c</span>
<span class="p_chunk">@@ -687,7 +687,8 @@</span> <span class="p_context"> static struct slave *rlb_arp_xmit(struct sk_buff *skb, struct bonding *bond)</span>
 		/* the arp must be sent on the selected rx channel */
 		tx_slave = rlb_choose_channel(skb, bond);
 		if (tx_slave)
<span class="p_del">-			ether_addr_copy(arp-&gt;mac_src, tx_slave-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+			bond_hw_addr_copy(arp-&gt;mac_src, tx_slave-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+					  tx_slave-&gt;dev-&gt;addr_len);</span>
 		netdev_dbg(bond-&gt;dev, &quot;Server sent ARP Reply packet\n&quot;);
 	} else if (arp-&gt;op_code == htons(ARPOP_REQUEST)) {
 		/* Create an entry in the rx_hashtbl for this client as a
<span class="p_chunk">@@ -1017,22 +1018,23 @@</span> <span class="p_context"> static void alb_send_learning_packets(struct slave *slave, u8 mac_addr[],</span>
 	rcu_read_unlock();
 }
 
<span class="p_del">-static int alb_set_slave_mac_addr(struct slave *slave, u8 addr[])</span>
<span class="p_add">+static int alb_set_slave_mac_addr(struct slave *slave, u8 addr[],</span>
<span class="p_add">+				  unsigned int len)</span>
 {
 	struct net_device *dev = slave-&gt;dev;
<span class="p_del">-	struct sockaddr s_addr;</span>
<span class="p_add">+	struct sockaddr_storage ss;</span>
 
 	if (BOND_MODE(slave-&gt;bond) == BOND_MODE_TLB) {
<span class="p_del">-		memcpy(dev-&gt;dev_addr, addr, dev-&gt;addr_len);</span>
<span class="p_add">+		memcpy(dev-&gt;dev_addr, addr, len);</span>
 		return 0;
 	}
 
 	/* for rlb each slave must have a unique hw mac addresses so that
 	 * each slave will receive packets destined to a different mac
 	 */
<span class="p_del">-	memcpy(s_addr.sa_data, addr, dev-&gt;addr_len);</span>
<span class="p_del">-	s_addr.sa_family = dev-&gt;type;</span>
<span class="p_del">-	if (dev_set_mac_address(dev, &amp;s_addr)) {</span>
<span class="p_add">+	memcpy(ss.__data, addr, len);</span>
<span class="p_add">+	ss.ss_family = dev-&gt;type;</span>
<span class="p_add">+	if (dev_set_mac_address(dev, (struct sockaddr *)&amp;ss)) {</span>
 		netdev_err(slave-&gt;bond-&gt;dev, &quot;dev_set_mac_address of dev %s failed! ALB mode requires that the base driver support setting the hw address also when the network device&#39;s interface is open\n&quot;,
 			   dev-&gt;name);
 		return -EOPNOTSUPP;
<span class="p_chunk">@@ -1046,11 +1048,14 @@</span> <span class="p_context"> static int alb_set_slave_mac_addr(struct slave *slave, u8 addr[])</span>
  */
 static void alb_swap_mac_addr(struct slave *slave1, struct slave *slave2)
 {
<span class="p_del">-	u8 tmp_mac_addr[ETH_ALEN];</span>
<span class="p_add">+	u8 tmp_mac_addr[MAX_ADDR_LEN];</span>
 
<span class="p_del">-	ether_addr_copy(tmp_mac_addr, slave1-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-	alb_set_slave_mac_addr(slave1, slave2-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-	alb_set_slave_mac_addr(slave2, tmp_mac_addr);</span>
<span class="p_add">+	bond_hw_addr_copy(tmp_mac_addr, slave1-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+			  slave1-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+	alb_set_slave_mac_addr(slave1, slave2-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+			       slave2-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+	alb_set_slave_mac_addr(slave2, tmp_mac_addr,</span>
<span class="p_add">+			       slave1-&gt;dev-&gt;addr_len);</span>
 
 }
 
<span class="p_chunk">@@ -1177,7 +1182,8 @@</span> <span class="p_context"> static int alb_handle_addr_collision_on_attach(struct bonding *bond, struct slav</span>
 		/* Try setting slave mac to bond address and fall-through
 		 * to code handling that situation below...
 		 */
<span class="p_del">-		alb_set_slave_mac_addr(slave, bond-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+		alb_set_slave_mac_addr(slave, bond-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				       bond-&gt;dev-&gt;addr_len);</span>
 	}
 
 	/* The slave&#39;s address is equal to the address of the bond.
<span class="p_chunk">@@ -1202,7 +1208,8 @@</span> <span class="p_context"> static int alb_handle_addr_collision_on_attach(struct bonding *bond, struct slav</span>
 	}
 
 	if (free_mac_slave) {
<span class="p_del">-		alb_set_slave_mac_addr(slave, free_mac_slave-&gt;perm_hwaddr);</span>
<span class="p_add">+		alb_set_slave_mac_addr(slave, free_mac_slave-&gt;perm_hwaddr,</span>
<span class="p_add">+				       free_mac_slave-&gt;dev-&gt;addr_len);</span>
 
 		netdev_warn(bond-&gt;dev, &quot;the hw address of slave %s is in use by the bond; giving it the hw address of %s\n&quot;,
 			    slave-&gt;dev-&gt;name, free_mac_slave-&gt;dev-&gt;name);
<span class="p_chunk">@@ -1234,8 +1241,8 @@</span> <span class="p_context"> static int alb_set_mac_address(struct bonding *bond, void *addr)</span>
 {
 	struct slave *slave, *rollback_slave;
 	struct list_head *iter;
<span class="p_del">-	struct sockaddr sa;</span>
<span class="p_del">-	char tmp_addr[ETH_ALEN];</span>
<span class="p_add">+	struct sockaddr_storage ss;</span>
<span class="p_add">+	char tmp_addr[MAX_ADDR_LEN];</span>
 	int res;
 
 	if (bond-&gt;alb_info.rlb_enabled)
<span class="p_chunk">@@ -1243,12 +1250,14 @@</span> <span class="p_context"> static int alb_set_mac_address(struct bonding *bond, void *addr)</span>
 
 	bond_for_each_slave(bond, slave, iter) {
 		/* save net_device&#39;s current hw address */
<span class="p_del">-		ether_addr_copy(tmp_addr, slave-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(tmp_addr, slave-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				  slave-&gt;dev-&gt;addr_len);</span>
 
 		res = dev_set_mac_address(slave-&gt;dev, addr);
 
 		/* restore net_device&#39;s hw address */
<span class="p_del">-		ether_addr_copy(slave-&gt;dev-&gt;dev_addr, tmp_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(slave-&gt;dev-&gt;dev_addr, tmp_addr,</span>
<span class="p_add">+				  slave-&gt;dev-&gt;addr_len);</span>
 
 		if (res)
 			goto unwind;
<span class="p_chunk">@@ -1257,16 +1266,19 @@</span> <span class="p_context"> static int alb_set_mac_address(struct bonding *bond, void *addr)</span>
 	return 0;
 
 unwind:
<span class="p_del">-	memcpy(sa.sa_data, bond-&gt;dev-&gt;dev_addr, bond-&gt;dev-&gt;addr_len);</span>
<span class="p_del">-	sa.sa_family = bond-&gt;dev-&gt;type;</span>
<span class="p_add">+	memcpy(ss.__data, bond-&gt;dev-&gt;dev_addr, bond-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+	ss.ss_family = bond-&gt;dev-&gt;type;</span>
 
 	/* unwind from head to the slave that failed */
 	bond_for_each_slave(bond, rollback_slave, iter) {
 		if (rollback_slave == slave)
 			break;
<span class="p_del">-		ether_addr_copy(tmp_addr, rollback_slave-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-		dev_set_mac_address(rollback_slave-&gt;dev, &amp;sa);</span>
<span class="p_del">-		ether_addr_copy(rollback_slave-&gt;dev-&gt;dev_addr, tmp_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(tmp_addr, rollback_slave-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				  rollback_slave-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+		dev_set_mac_address(rollback_slave-&gt;dev,</span>
<span class="p_add">+				    (struct sockaddr *)&amp;ss);</span>
<span class="p_add">+		bond_hw_addr_copy(rollback_slave-&gt;dev-&gt;dev_addr, tmp_addr,</span>
<span class="p_add">+				  rollback_slave-&gt;dev-&gt;addr_len);</span>
 	}
 
 	return res;
<span class="p_chunk">@@ -1582,7 +1594,8 @@</span> <span class="p_context"> int bond_alb_init_slave(struct bonding *bond, struct slave *slave)</span>
 {
 	int res;
 
<span class="p_del">-	res = alb_set_slave_mac_addr(slave, slave-&gt;perm_hwaddr);</span>
<span class="p_add">+	res = alb_set_slave_mac_addr(slave, slave-&gt;perm_hwaddr,</span>
<span class="p_add">+				     slave-&gt;dev-&gt;addr_len);</span>
 	if (res)
 		return res;
 
<span class="p_chunk">@@ -1696,17 +1709,20 @@</span> <span class="p_context"> void bond_alb_handle_active_change(struct bonding *bond, struct slave *new_slave</span>
 	 * and thus filter bond-&gt;dev_addr&#39;s packets, so force bond&#39;s mac
 	 */
 	if (BOND_MODE(bond) == BOND_MODE_TLB) {
<span class="p_del">-		struct sockaddr sa;</span>
<span class="p_del">-		u8 tmp_addr[ETH_ALEN];</span>
<span class="p_add">+		struct sockaddr_storage ss;</span>
<span class="p_add">+		u8 tmp_addr[MAX_ADDR_LEN];</span>
 
<span class="p_del">-		ether_addr_copy(tmp_addr, new_slave-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(tmp_addr, new_slave-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				  new_slave-&gt;dev-&gt;addr_len);</span>
 
<span class="p_del">-		memcpy(sa.sa_data, bond-&gt;dev-&gt;dev_addr, bond-&gt;dev-&gt;addr_len);</span>
<span class="p_del">-		sa.sa_family = bond-&gt;dev-&gt;type;</span>
<span class="p_add">+		bond_hw_addr_copy(ss.__data, bond-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				  bond-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+		ss.ss_family = bond-&gt;dev-&gt;type;</span>
 		/* we don&#39;t care if it can&#39;t change its mac, best effort */
<span class="p_del">-		dev_set_mac_address(new_slave-&gt;dev, &amp;sa);</span>
<span class="p_add">+		dev_set_mac_address(new_slave-&gt;dev, (struct sockaddr *)&amp;ss);</span>
 
<span class="p_del">-		ether_addr_copy(new_slave-&gt;dev-&gt;dev_addr, tmp_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(new_slave-&gt;dev-&gt;dev_addr, tmp_addr,</span>
<span class="p_add">+				  new_slave-&gt;dev-&gt;addr_len);</span>
 	}
 
 	/* curr_active_slave must be set before calling alb_swap_mac_addr */
<span class="p_chunk">@@ -1716,7 +1732,8 @@</span> <span class="p_context"> void bond_alb_handle_active_change(struct bonding *bond, struct slave *new_slave</span>
 		alb_fasten_mac_swap(bond, swap_slave, new_slave);
 	} else {
 		/* set the new_slave to the bond mac address */
<span class="p_del">-		alb_set_slave_mac_addr(new_slave, bond-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+		alb_set_slave_mac_addr(new_slave, bond-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				       bond-&gt;dev-&gt;addr_len);</span>
 		alb_send_learning_packets(new_slave, bond-&gt;dev-&gt;dev_addr,
 					  false);
 	}
<span class="p_chunk">@@ -1726,19 +1743,19 @@</span> <span class="p_context"> void bond_alb_handle_active_change(struct bonding *bond, struct slave *new_slave</span>
 int bond_alb_set_mac_address(struct net_device *bond_dev, void *addr)
 {
 	struct bonding *bond = netdev_priv(bond_dev);
<span class="p_del">-	struct sockaddr *sa = addr;</span>
<span class="p_add">+	struct sockaddr_storage *ss = addr;</span>
 	struct slave *curr_active;
 	struct slave *swap_slave;
 	int res;
 
<span class="p_del">-	if (!is_valid_ether_addr(sa-&gt;sa_data))</span>
<span class="p_add">+	if (!is_valid_ether_addr(ss-&gt;__data))</span>
 		return -EADDRNOTAVAIL;
 
 	res = alb_set_mac_address(bond, addr);
 	if (res)
 		return res;
 
<span class="p_del">-	memcpy(bond_dev-&gt;dev_addr, sa-&gt;sa_data, bond_dev-&gt;addr_len);</span>
<span class="p_add">+	bond_hw_addr_copy(bond_dev-&gt;dev_addr, ss-&gt;__data, bond_dev-&gt;addr_len);</span>
 
 	/* If there is no curr_active_slave there is nothing else to do.
 	 * Otherwise we&#39;ll need to pass the new address to it and handle
<span class="p_chunk">@@ -1754,7 +1771,8 @@</span> <span class="p_context"> int bond_alb_set_mac_address(struct net_device *bond_dev, void *addr)</span>
 		alb_swap_mac_addr(swap_slave, curr_active);
 		alb_fasten_mac_swap(bond, swap_slave, curr_active);
 	} else {
<span class="p_del">-		alb_set_slave_mac_addr(curr_active, bond_dev-&gt;dev_addr);</span>
<span class="p_add">+		alb_set_slave_mac_addr(curr_active, bond_dev-&gt;dev_addr,</span>
<span class="p_add">+				       bond_dev-&gt;addr_len);</span>
 
 		alb_send_learning_packets(curr_active,
 					  bond_dev-&gt;dev_addr, false);
<span class="p_header">diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="p_header">index 27359dab78a1..fd697d30ef06 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_main.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_main.c</span>
<span class="p_chunk">@@ -650,8 +650,8 @@</span> <span class="p_context"> static void bond_do_fail_over_mac(struct bonding *bond,</span>
 				  struct slave *new_active,
 				  struct slave *old_active)
 {
<span class="p_del">-	u8 tmp_mac[ETH_ALEN];</span>
<span class="p_del">-	struct sockaddr saddr;</span>
<span class="p_add">+	u8 tmp_mac[MAX_ADDR_LEN];</span>
<span class="p_add">+	struct sockaddr_storage ss;</span>
 	int rv;
 
 	switch (bond-&gt;params.fail_over_mac) {
<span class="p_chunk">@@ -671,16 +671,20 @@</span> <span class="p_context"> static void bond_do_fail_over_mac(struct bonding *bond,</span>
 			old_active = bond_get_old_active(bond, new_active);
 
 		if (old_active) {
<span class="p_del">-			ether_addr_copy(tmp_mac, new_active-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-			ether_addr_copy(saddr.sa_data,</span>
<span class="p_del">-					old_active-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-			saddr.sa_family = new_active-&gt;dev-&gt;type;</span>
<span class="p_add">+			bond_hw_addr_copy(tmp_mac, new_active-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+					  new_active-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+			bond_hw_addr_copy(ss.__data,</span>
<span class="p_add">+					  old_active-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+					  old_active-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+			ss.ss_family = new_active-&gt;dev-&gt;type;</span>
 		} else {
<span class="p_del">-			ether_addr_copy(saddr.sa_data, bond-&gt;dev-&gt;dev_addr);</span>
<span class="p_del">-			saddr.sa_family = bond-&gt;dev-&gt;type;</span>
<span class="p_add">+			bond_hw_addr_copy(ss.__data, bond-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+					  bond-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+			ss.ss_family = bond-&gt;dev-&gt;type;</span>
 		}
 
<span class="p_del">-		rv = dev_set_mac_address(new_active-&gt;dev, &amp;saddr);</span>
<span class="p_add">+		rv = dev_set_mac_address(new_active-&gt;dev,</span>
<span class="p_add">+					 (struct sockaddr *)&amp;ss);</span>
 		if (rv) {
 			netdev_err(bond-&gt;dev, &quot;Error %d setting MAC of slave %s\n&quot;,
 				   -rv, new_active-&gt;dev-&gt;name);
<span class="p_chunk">@@ -690,10 +694,12 @@</span> <span class="p_context"> static void bond_do_fail_over_mac(struct bonding *bond,</span>
 		if (!old_active)
 			goto out;
 
<span class="p_del">-		ether_addr_copy(saddr.sa_data, tmp_mac);</span>
<span class="p_del">-		saddr.sa_family = old_active-&gt;dev-&gt;type;</span>
<span class="p_add">+		bond_hw_addr_copy(ss.__data, tmp_mac,</span>
<span class="p_add">+				  new_active-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+		ss.ss_family = old_active-&gt;dev-&gt;type;</span>
 
<span class="p_del">-		rv = dev_set_mac_address(old_active-&gt;dev, &amp;saddr);</span>
<span class="p_add">+		rv = dev_set_mac_address(old_active-&gt;dev,</span>
<span class="p_add">+					 (struct sockaddr *)&amp;ss);</span>
 		if (rv)
 			netdev_err(bond-&gt;dev, &quot;Error %d setting MAC of slave %s\n&quot;,
 				   -rv, new_active-&gt;dev-&gt;name);
<span class="p_chunk">@@ -1189,7 +1195,8 @@</span> <span class="p_context"> static rx_handler_result_t bond_handle_frame(struct sk_buff **pskb)</span>
 			kfree_skb(skb);
 			return RX_HANDLER_CONSUMED;
 		}
<span class="p_del">-		ether_addr_copy(eth_hdr(skb)-&gt;h_dest, bond-&gt;dev-&gt;dev_addr);</span>
<span class="p_add">+		bond_hw_addr_copy(eth_hdr(skb)-&gt;h_dest, bond-&gt;dev-&gt;dev_addr,</span>
<span class="p_add">+				  bond-&gt;dev-&gt;addr_len);</span>
 	}
 
 	return ret;
<span class="p_chunk">@@ -1328,7 +1335,7 @@</span> <span class="p_context"> int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)</span>
 	struct bonding *bond = netdev_priv(bond_dev);
 	const struct net_device_ops *slave_ops = slave_dev-&gt;netdev_ops;
 	struct slave *new_slave = NULL, *prev_slave;
<span class="p_del">-	struct sockaddr addr;</span>
<span class="p_add">+	struct sockaddr_storage ss;</span>
 	int link_reporting;
 	int res = 0, i;
 
<span class="p_chunk">@@ -1479,16 +1486,17 @@</span> <span class="p_context"> int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)</span>
 	 * that need it, and for restoring it upon release, and then
 	 * set it to the master&#39;s address
 	 */
<span class="p_del">-	ether_addr_copy(new_slave-&gt;perm_hwaddr, slave_dev-&gt;dev_addr);</span>
<span class="p_add">+	bond_hw_addr_copy(new_slave-&gt;perm_hwaddr, slave_dev-&gt;dev_addr,</span>
<span class="p_add">+			  slave_dev-&gt;addr_len);</span>
 
 	if (!bond-&gt;params.fail_over_mac ||
 	    BOND_MODE(bond) != BOND_MODE_ACTIVEBACKUP) {
 		/* Set slave to master&#39;s mac address.  The application already
 		 * set the master&#39;s mac address to that of the first slave
 		 */
<span class="p_del">-		memcpy(addr.sa_data, bond_dev-&gt;dev_addr, bond_dev-&gt;addr_len);</span>
<span class="p_del">-		addr.sa_family = slave_dev-&gt;type;</span>
<span class="p_del">-		res = dev_set_mac_address(slave_dev, &amp;addr);</span>
<span class="p_add">+		memcpy(ss.__data, bond_dev-&gt;dev_addr, bond_dev-&gt;addr_len);</span>
<span class="p_add">+		ss.ss_family = slave_dev-&gt;type;</span>
<span class="p_add">+		res = dev_set_mac_address(slave_dev, (struct sockaddr *)&amp;ss);</span>
 		if (res) {
 			netdev_dbg(bond_dev, &quot;Error %d calling set_mac_address\n&quot;, res);
 			goto err_restore_mtu;
<span class="p_chunk">@@ -1771,9 +1779,10 @@</span> <span class="p_context"> int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)</span>
 		 * MAC if this slave&#39;s MAC is in use by the bond, or at
 		 * least print a warning.
 		 */
<span class="p_del">-		ether_addr_copy(addr.sa_data, new_slave-&gt;perm_hwaddr);</span>
<span class="p_del">-		addr.sa_family = slave_dev-&gt;type;</span>
<span class="p_del">-		dev_set_mac_address(slave_dev, &amp;addr);</span>
<span class="p_add">+		bond_hw_addr_copy(ss.__data, new_slave-&gt;perm_hwaddr,</span>
<span class="p_add">+				  new_slave-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+		ss.ss_family = slave_dev-&gt;type;</span>
<span class="p_add">+		dev_set_mac_address(slave_dev, (struct sockaddr *)&amp;ss);</span>
 	}
 
 err_restore_mtu:
<span class="p_chunk">@@ -1816,7 +1825,7 @@</span> <span class="p_context"> static int __bond_release_one(struct net_device *bond_dev,</span>
 {
 	struct bonding *bond = netdev_priv(bond_dev);
 	struct slave *slave, *oldcurrent;
<span class="p_del">-	struct sockaddr addr;</span>
<span class="p_add">+	struct sockaddr_storage ss;</span>
 	int old_flags = bond_dev-&gt;flags;
 	netdev_features_t old_features = bond_dev-&gt;features;
 
<span class="p_chunk">@@ -1951,9 +1960,10 @@</span> <span class="p_context"> static int __bond_release_one(struct net_device *bond_dev,</span>
 	if (bond-&gt;params.fail_over_mac != BOND_FOM_ACTIVE ||
 	    BOND_MODE(bond) != BOND_MODE_ACTIVEBACKUP) {
 		/* restore original (&quot;permanent&quot;) mac address */
<span class="p_del">-		ether_addr_copy(addr.sa_data, slave-&gt;perm_hwaddr);</span>
<span class="p_del">-		addr.sa_family = slave_dev-&gt;type;</span>
<span class="p_del">-		dev_set_mac_address(slave_dev, &amp;addr);</span>
<span class="p_add">+		bond_hw_addr_copy(ss.__data, slave-&gt;perm_hwaddr,</span>
<span class="p_add">+				  slave-&gt;dev-&gt;addr_len);</span>
<span class="p_add">+		ss.ss_family = slave_dev-&gt;type;</span>
<span class="p_add">+		dev_set_mac_address(slave_dev, (struct sockaddr *)&amp;ss);</span>
 	}
 
 	dev_set_mtu(slave_dev, slave-&gt;original_mtu);
<span class="p_chunk">@@ -3629,7 +3639,7 @@</span> <span class="p_context"> static int bond_set_mac_address(struct net_device *bond_dev, void *addr)</span>
 {
 	struct bonding *bond = netdev_priv(bond_dev);
 	struct slave *slave, *rollback_slave;
<span class="p_del">-	struct sockaddr *sa = addr, tmp_sa;</span>
<span class="p_add">+	struct sockaddr_storage *ss = addr, tmp_ss;</span>
 	struct list_head *iter;
 	int res = 0;
 
<span class="p_chunk">@@ -3646,7 +3656,7 @@</span> <span class="p_context"> static int bond_set_mac_address(struct net_device *bond_dev, void *addr)</span>
 	    BOND_MODE(bond) == BOND_MODE_ACTIVEBACKUP)
 		return 0;
 
<span class="p_del">-	if (!is_valid_ether_addr(sa-&gt;sa_data))</span>
<span class="p_add">+	if (!is_valid_ether_addr(ss-&gt;__data))</span>
 		return -EADDRNOTAVAIL;
 
 	bond_for_each_slave(bond, slave, iter) {
<span class="p_chunk">@@ -3665,12 +3675,12 @@</span> <span class="p_context"> static int bond_set_mac_address(struct net_device *bond_dev, void *addr)</span>
 	}
 
 	/* success */
<span class="p_del">-	memcpy(bond_dev-&gt;dev_addr, sa-&gt;sa_data, bond_dev-&gt;addr_len);</span>
<span class="p_add">+	memcpy(bond_dev-&gt;dev_addr, ss-&gt;__data, bond_dev-&gt;addr_len);</span>
 	return 0;
 
 unwind:
<span class="p_del">-	memcpy(tmp_sa.sa_data, bond_dev-&gt;dev_addr, bond_dev-&gt;addr_len);</span>
<span class="p_del">-	tmp_sa.sa_family = bond_dev-&gt;type;</span>
<span class="p_add">+	memcpy(tmp_ss.__data, bond_dev-&gt;dev_addr, bond_dev-&gt;addr_len);</span>
<span class="p_add">+	tmp_ss.ss_family = bond_dev-&gt;type;</span>
 
 	/* unwind from head to the slave that failed */
 	bond_for_each_slave(bond, rollback_slave, iter) {
<span class="p_chunk">@@ -3679,7 +3689,8 @@</span> <span class="p_context"> static int bond_set_mac_address(struct net_device *bond_dev, void *addr)</span>
 		if (rollback_slave == slave)
 			break;
 
<span class="p_del">-		tmp_res = dev_set_mac_address(rollback_slave-&gt;dev, &amp;tmp_sa);</span>
<span class="p_add">+		tmp_res = dev_set_mac_address(rollback_slave-&gt;dev,</span>
<span class="p_add">+					      (struct sockaddr *)&amp;tmp_ss);</span>
 		if (tmp_res) {
 			netdev_dbg(bond_dev, &quot;unwind err %d dev %s\n&quot;,
 				   tmp_res, rollback_slave-&gt;dev-&gt;name);
<span class="p_header">diff --git a/drivers/net/bonding/bond_procfs.c b/drivers/net/bonding/bond_procfs.c</span>
<span class="p_header">index f514fe5e80a5..d8d4ada034b7 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_procfs.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_procfs.c</span>
<span class="p_chunk">@@ -183,7 +183,8 @@</span> <span class="p_context"> static void bond_info_show_slave(struct seq_file *seq,</span>
 	seq_printf(seq, &quot;Link Failure Count: %u\n&quot;,
 		   slave-&gt;link_failure_count);
 
<span class="p_del">-	seq_printf(seq, &quot;Permanent HW addr: %pM\n&quot;, slave-&gt;perm_hwaddr);</span>
<span class="p_add">+	seq_printf(seq, &quot;Permanent HW addr: %*phC\n&quot;,</span>
<span class="p_add">+		   slave-&gt;dev-&gt;addr_len, slave-&gt;perm_hwaddr);</span>
 	seq_printf(seq, &quot;Slave queue ID: %d\n&quot;, slave-&gt;queue_id);
 
 	if (BOND_MODE(bond) == BOND_MODE_8023AD) {
<span class="p_header">diff --git a/include/net/bonding.h b/include/net/bonding.h</span>
<span class="p_header">index fb2dd97857c4..04a21e8048be 100644</span>
<span class="p_header">--- a/include/net/bonding.h</span>
<span class="p_header">+++ b/include/net/bonding.h</span>
<span class="p_chunk">@@ -166,7 +166,7 @@</span> <span class="p_context"> struct slave {</span>
 	u32    link_failure_count;
 	u32    speed;
 	u16    queue_id;
<span class="p_del">-	u8     perm_hwaddr[ETH_ALEN];</span>
<span class="p_add">+	u8     perm_hwaddr[MAX_ADDR_LEN];</span>
 	struct ad_slave_info *ad_info;
 	struct tlb_slave_info tlb_info;
 #ifdef CONFIG_NET_POLL_CONTROLLER
<span class="p_chunk">@@ -402,6 +402,16 @@</span> <span class="p_context"> static inline bool bond_slave_can_tx(struct slave *slave)</span>
 	       bond_is_active_slave(slave);
 }
 
<span class="p_add">+static inline void bond_hw_addr_copy(u8 *dst, const u8 *src, unsigned int len)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (len == ETH_ALEN) {</span>
<span class="p_add">+		ether_addr_copy(dst, src);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	memcpy(dst, src, len);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #define BOND_PRI_RESELECT_ALWAYS	0
 #define BOND_PRI_RESELECT_BETTER	1
 #define BOND_PRI_RESELECT_FAILURE	2

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



