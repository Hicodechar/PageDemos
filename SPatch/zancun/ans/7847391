
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[22/32] x86, pkeys: dump PTE pkey in /proc/pid/smaps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [22/32] x86, pkeys: dump PTE pkey in /proc/pid/smaps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 14, 2015, 7:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151214190619.BA65327A@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7847391/mbox/"
   >mbox</a>
|
   <a href="/patch/7847391/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7847391/">/patch/7847391/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 596F5BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:09:47 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 84BE0202E9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:09:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8FEFC20272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:09:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932731AbbLNTJk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 14 Dec 2015 14:09:40 -0500
Received: from mga09.intel.com ([134.134.136.24]:60185 &quot;EHLO mga09.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932539AbbLNTGX (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 14 Dec 2015 14:06:23 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by orsmga102.jf.intel.com with ESMTP; 14 Dec 2015 11:06:24 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,428,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;873444662&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.121])
	by fmsmga002.fm.intel.com with ESMTP; 14 Dec 2015 11:06:19 -0800
Subject: [PATCH 22/32] x86, pkeys: dump PTE pkey in /proc/pid/smaps
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, x86@kernel.org, Dave Hansen &lt;dave@sr71.net&gt;,
	dave.hansen@linux.intel.com
From: Dave Hansen &lt;dave@sr71.net&gt;
Date: Mon, 14 Dec 2015 11:06:19 -0800
References: &lt;20151214190542.39C4886D@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20151214190542.39C4886D@viggo.jf.intel.com&gt;
Message-Id: &lt;20151214190619.BA65327A@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Dec. 14, 2015, 7:06 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

The protection key can now be just as important as read/write
permissions on a VMA.  We need some debug mechanism to help
figure out if it is in play.  smaps seems like a logical
place to expose it.

arch/x86/kernel/setup.c is a bit of a weirdo place to put
this code, but it already had seq_file.h and there was not
a much better existing place to put it.

We also use no #ifdef.  If protection keys is .config&#39;d out
we will get the same function as if we used the weak generic
function.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---

 b/arch/x86/kernel/setup.c |    9 +++++++++
 b/fs/proc/task_mmu.c      |   14 ++++++++++++++
 2 files changed, 23 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Jan. 5, 2016, 1:32 p.m.</div>
<pre class="content">
On 12/14/2015 08:06 PM, Dave Hansen wrote:
<span class="quote">&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

$SUBJ is a bit confusing in that it&#39;s dumping stuff from VMA, not PTE&#39;s?

It could be also useful to extend dump_vma() appropriately. Currently 
there are no string translations for the new &quot;flags&quot; (but one can figure 
it out from the raw value). But maybe we should print pkey separately in 
dump_vma() as you do here. I have a series in flight [1] that touches 
dump_vma() and the flags printing in general, so to avoid conflicts, 
handling pkeys there could wait. But mentioning it now for less chance 
of being forgotten...

[1] https://lkml.org/lkml/2015/12/18/178 - a previous version is in 
mmotm and this should replace it after 4.5-rc1
<span class="quote">
&gt; The protection key can now be just as important as read/write</span>
<span class="quote">&gt; permissions on a VMA.  We need some debug mechanism to help</span>
<span class="quote">&gt; figure out if it is in play.  smaps seems like a logical</span>
<span class="quote">&gt; place to expose it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; arch/x86/kernel/setup.c is a bit of a weirdo place to put</span>
<span class="quote">&gt; this code, but it already had seq_file.h and there was not</span>
<span class="quote">&gt; a much better existing place to put it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We also use no #ifdef.  If protection keys is .config&#39;d out</span>
<span class="quote">&gt; we will get the same function as if we used the weak generic</span>
<span class="quote">&gt; function.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   b/arch/x86/kernel/setup.c |    9 +++++++++</span>
<span class="quote">&gt;   b/fs/proc/task_mmu.c      |   14 ++++++++++++++</span>
<span class="quote">&gt;   2 files changed, 23 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff -puN arch/x86/kernel/setup.c~pkeys-40-smaps arch/x86/kernel/setup.c</span>
<span class="quote">&gt; --- a/arch/x86/kernel/setup.c~pkeys-40-smaps	2015-12-14 10:42:48.777070739 -0800</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/setup.c	2015-12-14 10:42:48.782070963 -0800</span>
<span class="quote">&gt; @@ -112,6 +112,7 @@</span>
<span class="quote">&gt;   #include &lt;asm/alternative.h&gt;</span>
<span class="quote">&gt;   #include &lt;asm/prom.h&gt;</span>
<span class="quote">&gt;   #include &lt;asm/microcode.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/mmu_context.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt;    * max_low_pfn_mapped: highest direct mapped pfn under 4GB</span>
<span class="quote">&gt; @@ -1282,3 +1283,11 @@ static int __init register_kernel_offset</span>
<span class="quote">&gt;   	return 0;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   __initcall(register_kernel_offset_dumper);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; diff -puN fs/proc/task_mmu.c~pkeys-40-smaps fs/proc/task_mmu.c</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c~pkeys-40-smaps	2015-12-14 10:42:48.779070829 -0800</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c	2015-12-14 10:42:48.783071008 -0800</span>
<span class="quote">&gt; @@ -615,11 +615,20 @@ static void show_smap_vma_flags(struct s</span>
<span class="quote">&gt;   		[ilog2(VM_MERGEABLE)]	= &quot;mg&quot;,</span>
<span class="quote">&gt;   		[ilog2(VM_UFFD_MISSING)]= &quot;um&quot;,</span>
<span class="quote">&gt;   		[ilog2(VM_UFFD_WP)]	= &quot;uw&quot;,</span>
<span class="quote">&gt; +#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="quote">&gt; +		/* These come out via ProtectionKey: */</span>
<span class="quote">&gt; +		[ilog2(VM_PKEY_BIT0)]	= &quot;&quot;,</span>
<span class="quote">&gt; +		[ilog2(VM_PKEY_BIT1)]	= &quot;&quot;,</span>
<span class="quote">&gt; +		[ilog2(VM_PKEY_BIT2)]	= &quot;&quot;,</span>
<span class="quote">&gt; +		[ilog2(VM_PKEY_BIT3)]	= &quot;&quot;,</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;   	};</span>
<span class="quote">&gt;   	size_t i;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   	seq_puts(m, &quot;VmFlags: &quot;);</span>
<span class="quote">&gt;   	for (i = 0; i &lt; BITS_PER_LONG; i++) {</span>
<span class="quote">&gt; +		if (!mnemonics[i][0])</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt;   		if (vma-&gt;vm_flags &amp; (1UL &lt;&lt; i)) {</span>
<span class="quote">&gt;   			seq_printf(m, &quot;%c%c &quot;,</span>
<span class="quote">&gt;   				   mnemonics[i][0], mnemonics[i][1]);</span>
<span class="quote">&gt; @@ -657,6 +666,10 @@ static int smaps_hugetlb_range(pte_t *pt</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   #endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct vm_area_struct *vma = v;</span>
<span class="quote">&gt; @@ -713,6 +726,7 @@ static int show_smap(struct seq_file *m,</span>
<span class="quote">&gt;   		   (vma-&gt;vm_flags &amp; VM_LOCKED) ?</span>
<span class="quote">&gt;   			(unsigned long)(mss.pss &gt;&gt; (10 + PSS_SHIFT)) : 0);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	arch_show_smap(m, vma);</span>
<span class="quote">&gt;   	show_smap_vma_flags(m, vma);</span>
<span class="quote">&gt;   	m_cache_vma(m, vma);</span>
<span class="quote">&gt;   	return 0;</span>
<span class="quote">&gt; _</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
<span class="quote">&gt;</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Jan. 6, 2016, 5:46 p.m.</div>
<pre class="content">
On 01/05/2016 05:32 AM, Vlastimil Babka wrote:
<span class="quote">&gt; On 12/14/2015 08:06 PM, Dave Hansen wrote:</span>
<span class="quote">&gt;&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; $SUBJ is a bit confusing in that it&#39;s dumping stuff from VMA, not PTE&#39;s?</span>

Yeah, absolutely.  That&#39;s a relic from when I thought I&#39;d need to be
walking the page tables to figure this out.  I&#39;ll update it.
<span class="quote">
&gt; It could be also useful to extend dump_vma() appropriately. Currently</span>
<span class="quote">&gt; there are no string translations for the new &quot;flags&quot; (but one can figure</span>
<span class="quote">&gt; it out from the raw value). But maybe we should print pkey separately in</span>
<span class="quote">&gt; dump_vma() as you do here. I have a series in flight [1] that touches</span>
<span class="quote">&gt; dump_vma() and the flags printing in general, so to avoid conflicts,</span>
<span class="quote">&gt; handling pkeys there could wait. But mentioning it now for less chance</span>
<span class="quote">&gt; of being forgotten...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [1] https://lkml.org/lkml/2015/12/18/178 - a previous version is in</span>
<span class="quote">&gt; mmotm and this should replace it after 4.5-rc1</span>

Ahhh, very nice.  I&#39;ll go back and add support for it once your patch lands.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/x86/kernel/setup.c~pkeys-40-smaps arch/x86/kernel/setup.c</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c~pkeys-40-smaps	2015-12-14 10:42:48.777070739 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c	2015-12-14 10:42:48.782070963 -0800</span>
<span class="p_chunk">@@ -112,6 +112,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/alternative.h&gt;
 #include &lt;asm/prom.h&gt;
 #include &lt;asm/microcode.h&gt;
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 
 /*
  * max_low_pfn_mapped: highest direct mapped pfn under 4GB
<span class="p_chunk">@@ -1282,3 +1283,11 @@</span> <span class="p_context"> static int __init register_kernel_offset</span>
 	return 0;
 }
 __initcall(register_kernel_offset_dumper);
<span class="p_add">+</span>
<span class="p_add">+void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="p_add">+}</span>
<span class="p_header">diff -puN fs/proc/task_mmu.c~pkeys-40-smaps fs/proc/task_mmu.c</span>
<span class="p_header">--- a/fs/proc/task_mmu.c~pkeys-40-smaps	2015-12-14 10:42:48.779070829 -0800</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c	2015-12-14 10:42:48.783071008 -0800</span>
<span class="p_chunk">@@ -615,11 +615,20 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct s</span>
 		[ilog2(VM_MERGEABLE)]	= &quot;mg&quot;,
 		[ilog2(VM_UFFD_MISSING)]= &quot;um&quot;,
 		[ilog2(VM_UFFD_WP)]	= &quot;uw&quot;,
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="p_add">+		/* These come out via ProtectionKey: */</span>
<span class="p_add">+		[ilog2(VM_PKEY_BIT0)]	= &quot;&quot;,</span>
<span class="p_add">+		[ilog2(VM_PKEY_BIT1)]	= &quot;&quot;,</span>
<span class="p_add">+		[ilog2(VM_PKEY_BIT2)]	= &quot;&quot;,</span>
<span class="p_add">+		[ilog2(VM_PKEY_BIT3)]	= &quot;&quot;,</span>
<span class="p_add">+#endif</span>
 	};
 	size_t i;
 
 	seq_puts(m, &quot;VmFlags: &quot;);
 	for (i = 0; i &lt; BITS_PER_LONG; i++) {
<span class="p_add">+		if (!mnemonics[i][0])</span>
<span class="p_add">+			continue;</span>
 		if (vma-&gt;vm_flags &amp; (1UL &lt;&lt; i)) {
 			seq_printf(m, &quot;%c%c &quot;,
 				   mnemonics[i][0], mnemonics[i][1]);
<span class="p_chunk">@@ -657,6 +666,10 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pt</span>
 }
 #endif /* HUGETLB_PAGE */
 
<span class="p_add">+void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct vm_area_struct *vma = v;
<span class="p_chunk">@@ -713,6 +726,7 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m,</span>
 		   (vma-&gt;vm_flags &amp; VM_LOCKED) ?
 			(unsigned long)(mss.pss &gt;&gt; (10 + PSS_SHIFT)) : 0);
 
<span class="p_add">+	arch_show_smap(m, vma);</span>
 	show_smap_vma_flags(m, vma);
 	m_cache_vma(m, vma);
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



