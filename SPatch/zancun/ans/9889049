
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/4] mm: Add kernel MMU notifier to manage remote TLB - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/4] mm: Add kernel MMU notifier to manage remote TLB</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=133401">Ashok Raj</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 8, 2017, 8:29 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1502224170-5344-4-git-send-email-ashok.raj@intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9889049/mbox/"
   >mbox</a>
|
   <a href="/patch/9889049/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9889049/">/patch/9889049/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2D521603F9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 20:31:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F2EC42895B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 20:31:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E7C1628A22; Tue,  8 Aug 2017 20:31:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2886128A2F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 20:31:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752486AbdHHUar (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 8 Aug 2017 16:30:47 -0400
Received: from mga02.intel.com ([134.134.136.20]:43390 &quot;EHLO mga02.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752448AbdHHUap (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 8 Aug 2017 16:30:45 -0400
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by orsmga101.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	08 Aug 2017 13:30:25 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.41,344,1498546800&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1203471453&quot;
Received: from otc-nc-03.jf.intel.com ([10.54.39.37])
	by fmsmga002.fm.intel.com with ESMTP; 08 Aug 2017 13:30:25 -0700
From: Ashok Raj &lt;ashok.raj@intel.com&gt;
To: linux-kernel@vger.kernel.org, Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Huang Ying &lt;ying.huang@intel.com&gt;, Ashok Raj &lt;ashok.raj@intel.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, CQ Tang &lt;cq.tang@intel.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Kees Cook &lt;keescook@chromium.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;,
	&quot;Paul E. McKenney&quot; &lt;paulmck@linux.vnet.ibm.com&gt;,
	Vegard Nossum &lt;vegard.nossum@oracle.com&gt;, x86@kernel.org,
	linux-mm@kvack.org, iommu@lists.linux-foundation.org,
	David Woodhouse &lt;dwmw2@infradead.org&gt;,
	Jean-Phillipe Brucker &lt;jean-philippe.brucker@arm.com&gt;
Subject: [PATCH 3/4] mm: Add kernel MMU notifier to manage remote TLB
Date: Tue,  8 Aug 2017 13:29:29 -0700
Message-Id: &lt;1502224170-5344-4-git-send-email-ashok.raj@intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1502224170-5344-1-git-send-email-ashok.raj@intel.com&gt;
References: &lt;1502224170-5344-1-git-send-email-ashok.raj@intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=133401">Ashok Raj</a> - Aug. 8, 2017, 8:29 p.m.</div>
<pre class="content">
<span class="from">From: Huang Ying &lt;ying.huang@intel.com&gt;</span>

Shared Virtual Memory (SVM) devices have TLBs that cache entries from
the CPU&#39;s page tables.  We need SVM device drivers to flush them at
the same time that we flush the CPU TLBs.  We can use the existing MMU
notifiers for userspace updates, but we lack a mechanism to get
notified when kernel page tables are updated.

To implement the MMU notification mechanism for the kernel address
space, a kernel MMU notifier chain is defined, and will be called when
the CPU TLB is flushed for the kernel address space.  The IOMMU SVM
driver can register on the notifier chain to flush the device TLBs
when necessary.

To: linux-kernel@vger.kernel.org
To: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Ashok Raj &lt;ashok.raj@intel.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: CQ Tang &lt;cq.tang@intel.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: &quot;Paul E. McKenney&quot; &lt;paulmck@linux.vnet.ibm.com&gt;
Cc: Vegard Nossum &lt;vegard.nossum@oracle.com&gt;
Cc: x86@kernel.org
Cc: linux-mm@kvack.org
Cc: iommu@lists.linux-foundation.org
Cc: David Woodhouse &lt;dwmw2@infradead.org&gt;
CC: Jean-Phillipe Brucker &lt;jean-philippe.brucker@arm.com&gt;
<span class="signed-off-by">Signed-off-by: &quot;Huang, Ying&quot; &lt;ying.huang@intel.com&gt;</span>
---
 arch/x86/include/asm/tlbflush.h |  1 +
 arch/x86/mm/tlb.c               |  1 +
 include/linux/mmu_notifier.h    | 33 +++++++++++++++++++++++++++++++++
 mm/mmu_notifier.c               | 25 +++++++++++++++++++++++++
 4 files changed, 60 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 50ea348..f5fd0b8 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/sched.h&gt;
<span class="p_add">+#include &lt;linux/mmu_notifier.h&gt;</span>
 
 #include &lt;asm/processor.h&gt;
 #include &lt;asm/cpufeature.h&gt;
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 014d07a..6dea8e9 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -314,6 +314,7 @@</span> <span class="p_context"> void flush_tlb_kernel_range(unsigned long start, unsigned long end)</span>
 		info.end = end;
 		on_each_cpu(do_kernel_range_flush, &amp;info, 1);
 	}
<span class="p_add">+	kernel_mmu_notifier_invalidate_range(start, end);</span>
 }
 
 void arch_tlbbatch_flush(struct arch_tlbflush_unmap_batch *batch)
<span class="p_header">diff --git a/include/linux/mmu_notifier.h b/include/linux/mmu_notifier.h</span>
<span class="p_header">index c91b3bc..4a96089 100644</span>
<span class="p_header">--- a/include/linux/mmu_notifier.h</span>
<span class="p_header">+++ b/include/linux/mmu_notifier.h</span>
<span class="p_chunk">@@ -418,6 +418,25 @@</span> <span class="p_context"> extern void mmu_notifier_call_srcu(struct rcu_head *rcu,</span>
 				   void (*func)(struct rcu_head *rcu));
 extern void mmu_notifier_synchronize(void);
 
<span class="p_add">+struct kernel_mmu_address_range {</span>
<span class="p_add">+	unsigned long start;</span>
<span class="p_add">+	unsigned long end;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Before the virtual address range managed by kernel (vmalloc/kmap)</span>
<span class="p_add">+ * is reused, That is, remapped to the new physical addresses, the</span>
<span class="p_add">+ * kernel MMU notifier will be called with KERNEL_MMU_INVALIDATE_RANGE</span>
<span class="p_add">+ * and struct kernel_mmu_address_range as parameters.  This is used to</span>
<span class="p_add">+ * manage the remote TLB.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define KERNEL_MMU_INVALIDATE_RANGE		1</span>
<span class="p_add">+extern int kernel_mmu_notifier_register(struct notifier_block *nb);</span>
<span class="p_add">+extern int kernel_mmu_notifier_unregister(struct notifier_block *nb);</span>
<span class="p_add">+</span>
<span class="p_add">+extern int kernel_mmu_notifier_invalidate_range(unsigned long start,</span>
<span class="p_add">+						unsigned long end);</span>
<span class="p_add">+</span>
 #else /* CONFIG_MMU_NOTIFIER */
 
 static inline void mmu_notifier_release(struct mm_struct *mm)
<span class="p_chunk">@@ -479,6 +498,20 @@</span> <span class="p_context"> static inline void mmu_notifier_mm_destroy(struct mm_struct *mm)</span>
 #define pudp_huge_clear_flush_notify pudp_huge_clear_flush
 #define set_pte_at_notify set_pte_at
 
<span class="p_add">+static inline int kernel_mmu_notifier_register(struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int kernel_mmu_notifier_unregister(struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void kernel_mmu_notifier_invalidate_range(unsigned long start,</span>
<span class="p_add">+							unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif /* CONFIG_MMU_NOTIFIER */
 
 #endif /* _LINUX_MMU_NOTIFIER_H */
<span class="p_header">diff --git a/mm/mmu_notifier.c b/mm/mmu_notifier.c</span>
<span class="p_header">index 54ca545..a919038 100644</span>
<span class="p_header">--- a/mm/mmu_notifier.c</span>
<span class="p_header">+++ b/mm/mmu_notifier.c</span>
<span class="p_chunk">@@ -400,3 +400,28 @@</span> <span class="p_context"> void mmu_notifier_unregister_no_release(struct mmu_notifier *mn,</span>
 	mmdrop(mm);
 }
 EXPORT_SYMBOL_GPL(mmu_notifier_unregister_no_release);
<span class="p_add">+</span>
<span class="p_add">+static ATOMIC_NOTIFIER_HEAD(kernel_mmu_notifier_list);</span>
<span class="p_add">+</span>
<span class="p_add">+int kernel_mmu_notifier_register(struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return atomic_notifier_chain_register(&amp;kernel_mmu_notifier_list, nb);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int kernel_mmu_notifier_unregister(struct notifier_block *nb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return atomic_notifier_chain_unregister(&amp;kernel_mmu_notifier_list, nb);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int kernel_mmu_notifier_invalidate_range(unsigned long start,</span>
<span class="p_add">+					 unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kernel_mmu_address_range range = {</span>
<span class="p_add">+		.start	= start,</span>
<span class="p_add">+		.end	= end,</span>
<span class="p_add">+	};</span>
<span class="p_add">+</span>
<span class="p_add">+	return atomic_notifier_call_chain(&amp;kernel_mmu_notifier_list,</span>
<span class="p_add">+					  KERNEL_MMU_INVALIDATE_RANGE,</span>
<span class="p_add">+					  &amp;range);</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



