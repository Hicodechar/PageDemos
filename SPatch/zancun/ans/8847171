
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[09/12] MIPS: mm: Pass scratch register through to iPTE_SW - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [09/12] MIPS: mm: Pass scratch register through to iPTE_SW</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=86321">Paul Burton</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 15, 2016, 10:36 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460716620-13382-10-git-send-email-paul.burton@imgtec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8847171/mbox/"
   >mbox</a>
|
   <a href="/patch/8847171/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8847171/">/patch/8847171/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id B071CC0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 10:39:44 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 04E3120374
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 10:39:44 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id DC7562037E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 15 Apr 2016 10:39:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751959AbcDOKjk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 15 Apr 2016 06:39:40 -0400
Received: from mailapp01.imgtec.com ([195.59.15.196]:16643 &quot;EHLO
	mailapp01.imgtec.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751321AbcDOKji (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 15 Apr 2016 06:39:38 -0400
Received: from hhmail02.hh.imgtec.org (unknown [10.100.10.20])
	by Websense Email with ESMTPS id A7E7058C9B47C;
	Fri, 15 Apr 2016 11:39:33 +0100 (IST)
Received: from LEMAIL01.le.imgtec.org (192.168.152.62) by
	hhmail02.hh.imgtec.org (10.100.10.20) with Microsoft SMTP Server
	(TLS) id 14.3.266.1; Fri, 15 Apr 2016 11:39:36 +0100
Received: from localhost (10.100.200.59) by LEMAIL01.le.imgtec.org
	(192.168.152.62) with Microsoft SMTP Server (TLS) id 14.3.266.1;
	Fri, 15 Apr 2016 11:39:35 +0100
From: Paul Burton &lt;paul.burton@imgtec.com&gt;
To: &lt;linux-mips@linux-mips.org&gt;, Ralf Baechle &lt;ralf@linux-mips.org&gt;
CC: James Hogan &lt;james.hogan@imgtec.com&gt;,
	Paul Burton &lt;paul.burton@imgtec.com&gt;,
	Adam Buchbinder &lt;adam.buchbinder@gmail.com&gt;,
	&quot;Huacai Chen&quot; &lt;chenhc@lemote.com&gt;,
	Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 09/12] MIPS: mm: Pass scratch register through to iPTE_SW
Date: Fri, 15 Apr 2016 11:36:57 +0100
Message-ID: &lt;1460716620-13382-10-git-send-email-paul.burton@imgtec.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460716620-13382-1-git-send-email-paul.burton@imgtec.com&gt;
References: &lt;1460716620-13382-1-git-send-email-paul.burton@imgtec.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.100.200.59]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=86321">Paul Burton</a> - April 15, 2016, 10:36 a.m.</div>
<pre class="content">
Rather than hardcode a scratch register for the XPA case in iPTE_SW,
pass one through from the work registers allocated by the caller. This
allows for the XPA path to function correctly regardless of the work
registers in use.
<span class="signed-off-by">
Signed-off-by: Paul Burton &lt;paul.burton@imgtec.com&gt;</span>
---

 arch/mips/mm/tlbex.c | 24 +++++++++++-------------
 1 file changed, 11 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=31692">James Hogan</a> - April 15, 2016, 10:28 p.m.</div>
<pre class="content">
On Fri, Apr 15, 2016 at 11:36:57AM +0100, Paul Burton wrote:
<span class="quote">&gt; Rather than hardcode a scratch register for the XPA case in iPTE_SW,</span>
<span class="quote">&gt; pass one through from the work registers allocated by the caller. This</span>
<span class="quote">&gt; allows for the XPA path to function correctly regardless of the work</span>
<span class="quote">&gt; registers in use.</span>

Looks good to me, although probably worth mentioning that the current
behaviour uses the $1 register, so this fixes another case of $1
clobbering.
<span class="reviewed-by">
Reviewed-by: James Hogan &lt;james.hogan@imgtec.com&gt;</span>

Cheers
James
<span class="quote">
&gt; </span>
<span class="quote">&gt; Signed-off-by: Paul Burton &lt;paul.burton@imgtec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  arch/mips/mm/tlbex.c | 24 +++++++++++-------------</span>
<span class="quote">&gt;  1 file changed, 11 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c</span>
<span class="quote">&gt; index 004cd9f..d7a7b3d 100644</span>
<span class="quote">&gt; --- a/arch/mips/mm/tlbex.c</span>
<span class="quote">&gt; +++ b/arch/mips/mm/tlbex.c</span>
<span class="quote">&gt; @@ -1526,14 +1526,12 @@ iPTE_LW(u32 **p, unsigned int pte, unsigned int ptr)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void</span>
<span class="quote">&gt;  iPTE_SW(u32 **p, struct uasm_reloc **r, unsigned int pte, unsigned int ptr,</span>
<span class="quote">&gt; -	unsigned int mode)</span>
<span class="quote">&gt; +	unsigned int mode, unsigned int scratch)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  #ifdef CONFIG_PHYS_ADDR_T_64BIT</span>
<span class="quote">&gt;  	unsigned int hwmode = mode &amp; (_PAGE_VALID | _PAGE_DIRTY);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (config_enabled(CONFIG_XPA) &amp;&amp; !cpu_has_64bits) {</span>
<span class="quote">&gt; -		const int scratch = 1; /* Our extra working register */</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  		uasm_i_lui(p, scratch, (mode &gt;&gt; 16));</span>
<span class="quote">&gt;  		uasm_i_or(p, pte, pte, scratch);</span>
<span class="quote">&gt;  	} else</span>
<span class="quote">&gt; @@ -1630,11 +1628,11 @@ build_pte_present(u32 **p, struct uasm_reloc **r,</span>
<span class="quote">&gt;  /* Make PTE valid, store result in PTR. */</span>
<span class="quote">&gt;  static void</span>
<span class="quote">&gt;  build_make_valid(u32 **p, struct uasm_reloc **r, unsigned int pte,</span>
<span class="quote">&gt; -		 unsigned int ptr)</span>
<span class="quote">&gt; +		 unsigned int ptr, unsigned int scratch)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned int mode = _PAGE_VALID | _PAGE_ACCESSED;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	iPTE_SW(p, r, pte, ptr, mode);</span>
<span class="quote">&gt; +	iPTE_SW(p, r, pte, ptr, mode, scratch);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -1670,12 +1668,12 @@ build_pte_writable(u32 **p, struct uasm_reloc **r,</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static void</span>
<span class="quote">&gt;  build_make_write(u32 **p, struct uasm_reloc **r, unsigned int pte,</span>
<span class="quote">&gt; -		 unsigned int ptr)</span>
<span class="quote">&gt; +		 unsigned int ptr, unsigned int scratch)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned int mode = (_PAGE_ACCESSED | _PAGE_MODIFIED | _PAGE_VALID</span>
<span class="quote">&gt;  			     | _PAGE_DIRTY);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	iPTE_SW(p, r, pte, ptr, mode);</span>
<span class="quote">&gt; +	iPTE_SW(p, r, pte, ptr, mode, scratch);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -1780,7 +1778,7 @@ static void build_r3000_tlb_load_handler(void)</span>
<span class="quote">&gt;  	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);</span>
<span class="quote">&gt;  	build_pte_present(&amp;p, &amp;r, K0, K1, -1, label_nopage_tlbl);</span>
<span class="quote">&gt;  	uasm_i_nop(&amp;p); /* load delay */</span>
<span class="quote">&gt; -	build_make_valid(&amp;p, &amp;r, K0, K1);</span>
<span class="quote">&gt; +	build_make_valid(&amp;p, &amp;r, K0, K1, -1);</span>
<span class="quote">&gt;  	build_r3000_tlb_reload_write(&amp;p, &amp;l, &amp;r, K0, K1);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	uasm_l_nopage_tlbl(&amp;l, p);</span>
<span class="quote">&gt; @@ -1811,7 +1809,7 @@ static void build_r3000_tlb_store_handler(void)</span>
<span class="quote">&gt;  	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);</span>
<span class="quote">&gt;  	build_pte_writable(&amp;p, &amp;r, K0, K1, -1, label_nopage_tlbs);</span>
<span class="quote">&gt;  	uasm_i_nop(&amp;p); /* load delay */</span>
<span class="quote">&gt; -	build_make_write(&amp;p, &amp;r, K0, K1);</span>
<span class="quote">&gt; +	build_make_write(&amp;p, &amp;r, K0, K1, -1);</span>
<span class="quote">&gt;  	build_r3000_tlb_reload_write(&amp;p, &amp;l, &amp;r, K0, K1);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	uasm_l_nopage_tlbs(&amp;l, p);</span>
<span class="quote">&gt; @@ -1842,7 +1840,7 @@ static void build_r3000_tlb_modify_handler(void)</span>
<span class="quote">&gt;  	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);</span>
<span class="quote">&gt;  	build_pte_modifiable(&amp;p, &amp;r, K0, K1,  -1, label_nopage_tlbm);</span>
<span class="quote">&gt;  	uasm_i_nop(&amp;p); /* load delay */</span>
<span class="quote">&gt; -	build_make_write(&amp;p, &amp;r, K0, K1);</span>
<span class="quote">&gt; +	build_make_write(&amp;p, &amp;r, K0, K1, -1);</span>
<span class="quote">&gt;  	build_r3000_pte_reload_tlbwi(&amp;p, K0, K1);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	uasm_l_nopage_tlbm(&amp;l, p);</span>
<span class="quote">&gt; @@ -2010,7 +2008,7 @@ static void build_r4000_tlb_load_handler(void)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		uasm_l_tlbl_goaround1(&amp;l, p);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; -	build_make_valid(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt; +	build_make_valid(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
<span class="quote">&gt;  	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT</span>
<span class="quote">&gt; @@ -2124,7 +2122,7 @@ static void build_r4000_tlb_store_handler(void)</span>
<span class="quote">&gt;  	build_pte_writable(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3, label_nopage_tlbs);</span>
<span class="quote">&gt;  	if (m4kc_tlbp_war())</span>
<span class="quote">&gt;  		build_tlb_probe_entry(&amp;p);</span>
<span class="quote">&gt; -	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt; +	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
<span class="quote">&gt;  	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT</span>
<span class="quote">&gt; @@ -2180,7 +2178,7 @@ static void build_r4000_tlb_modify_handler(void)</span>
<span class="quote">&gt;  	if (m4kc_tlbp_war())</span>
<span class="quote">&gt;  		build_tlb_probe_entry(&amp;p);</span>
<span class="quote">&gt;  	/* Present and writable bits set, set accessed and dirty bits. */</span>
<span class="quote">&gt; -	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt; +	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
<span class="quote">&gt;  	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.8.0</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c</span>
<span class="p_header">index 004cd9f..d7a7b3d 100644</span>
<span class="p_header">--- a/arch/mips/mm/tlbex.c</span>
<span class="p_header">+++ b/arch/mips/mm/tlbex.c</span>
<span class="p_chunk">@@ -1526,14 +1526,12 @@</span> <span class="p_context"> iPTE_LW(u32 **p, unsigned int pte, unsigned int ptr)</span>
 
 static void
 iPTE_SW(u32 **p, struct uasm_reloc **r, unsigned int pte, unsigned int ptr,
<span class="p_del">-	unsigned int mode)</span>
<span class="p_add">+	unsigned int mode, unsigned int scratch)</span>
 {
 #ifdef CONFIG_PHYS_ADDR_T_64BIT
 	unsigned int hwmode = mode &amp; (_PAGE_VALID | _PAGE_DIRTY);
 
 	if (config_enabled(CONFIG_XPA) &amp;&amp; !cpu_has_64bits) {
<span class="p_del">-		const int scratch = 1; /* Our extra working register */</span>
<span class="p_del">-</span>
 		uasm_i_lui(p, scratch, (mode &gt;&gt; 16));
 		uasm_i_or(p, pte, pte, scratch);
 	} else
<span class="p_chunk">@@ -1630,11 +1628,11 @@</span> <span class="p_context"> build_pte_present(u32 **p, struct uasm_reloc **r,</span>
 /* Make PTE valid, store result in PTR. */
 static void
 build_make_valid(u32 **p, struct uasm_reloc **r, unsigned int pte,
<span class="p_del">-		 unsigned int ptr)</span>
<span class="p_add">+		 unsigned int ptr, unsigned int scratch)</span>
 {
 	unsigned int mode = _PAGE_VALID | _PAGE_ACCESSED;
 
<span class="p_del">-	iPTE_SW(p, r, pte, ptr, mode);</span>
<span class="p_add">+	iPTE_SW(p, r, pte, ptr, mode, scratch);</span>
 }
 
 /*
<span class="p_chunk">@@ -1670,12 +1668,12 @@</span> <span class="p_context"> build_pte_writable(u32 **p, struct uasm_reloc **r,</span>
  */
 static void
 build_make_write(u32 **p, struct uasm_reloc **r, unsigned int pte,
<span class="p_del">-		 unsigned int ptr)</span>
<span class="p_add">+		 unsigned int ptr, unsigned int scratch)</span>
 {
 	unsigned int mode = (_PAGE_ACCESSED | _PAGE_MODIFIED | _PAGE_VALID
 			     | _PAGE_DIRTY);
 
<span class="p_del">-	iPTE_SW(p, r, pte, ptr, mode);</span>
<span class="p_add">+	iPTE_SW(p, r, pte, ptr, mode, scratch);</span>
 }
 
 /*
<span class="p_chunk">@@ -1780,7 +1778,7 @@</span> <span class="p_context"> static void build_r3000_tlb_load_handler(void)</span>
 	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);
 	build_pte_present(&amp;p, &amp;r, K0, K1, -1, label_nopage_tlbl);
 	uasm_i_nop(&amp;p); /* load delay */
<span class="p_del">-	build_make_valid(&amp;p, &amp;r, K0, K1);</span>
<span class="p_add">+	build_make_valid(&amp;p, &amp;r, K0, K1, -1);</span>
 	build_r3000_tlb_reload_write(&amp;p, &amp;l, &amp;r, K0, K1);
 
 	uasm_l_nopage_tlbl(&amp;l, p);
<span class="p_chunk">@@ -1811,7 +1809,7 @@</span> <span class="p_context"> static void build_r3000_tlb_store_handler(void)</span>
 	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);
 	build_pte_writable(&amp;p, &amp;r, K0, K1, -1, label_nopage_tlbs);
 	uasm_i_nop(&amp;p); /* load delay */
<span class="p_del">-	build_make_write(&amp;p, &amp;r, K0, K1);</span>
<span class="p_add">+	build_make_write(&amp;p, &amp;r, K0, K1, -1);</span>
 	build_r3000_tlb_reload_write(&amp;p, &amp;l, &amp;r, K0, K1);
 
 	uasm_l_nopage_tlbs(&amp;l, p);
<span class="p_chunk">@@ -1842,7 +1840,7 @@</span> <span class="p_context"> static void build_r3000_tlb_modify_handler(void)</span>
 	build_r3000_tlbchange_handler_head(&amp;p, K0, K1);
 	build_pte_modifiable(&amp;p, &amp;r, K0, K1,  -1, label_nopage_tlbm);
 	uasm_i_nop(&amp;p); /* load delay */
<span class="p_del">-	build_make_write(&amp;p, &amp;r, K0, K1);</span>
<span class="p_add">+	build_make_write(&amp;p, &amp;r, K0, K1, -1);</span>
 	build_r3000_pte_reload_tlbwi(&amp;p, K0, K1);
 
 	uasm_l_nopage_tlbm(&amp;l, p);
<span class="p_chunk">@@ -2010,7 +2008,7 @@</span> <span class="p_context"> static void build_r4000_tlb_load_handler(void)</span>
 		}
 		uasm_l_tlbl_goaround1(&amp;l, p);
 	}
<span class="p_del">-	build_make_valid(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="p_add">+	build_make_valid(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
 	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);
 
 #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT
<span class="p_chunk">@@ -2124,7 +2122,7 @@</span> <span class="p_context"> static void build_r4000_tlb_store_handler(void)</span>
 	build_pte_writable(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3, label_nopage_tlbs);
 	if (m4kc_tlbp_war())
 		build_tlb_probe_entry(&amp;p);
<span class="p_del">-	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="p_add">+	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
 	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);
 
 #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT
<span class="p_chunk">@@ -2180,7 +2178,7 @@</span> <span class="p_context"> static void build_r4000_tlb_modify_handler(void)</span>
 	if (m4kc_tlbp_war())
 		build_tlb_probe_entry(&amp;p);
 	/* Present and writable bits set, set accessed and dirty bits. */
<span class="p_del">-	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2);</span>
<span class="p_add">+	build_make_write(&amp;p, &amp;r, wr.r1, wr.r2, wr.r3);</span>
 	build_r4000_tlbchange_handler_tail(&amp;p, &amp;l, &amp;r, wr.r1, wr.r2);
 
 #ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



