
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] x86 fixes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] x86 fixes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 12, 2017, 3:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170912153855.bwgrnt52mqnzuoal@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9949509/mbox/"
   >mbox</a>
|
   <a href="/patch/9949509/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9949509/">/patch/9949509/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6A4CF6038F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 15:39:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5EDC029015
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 15:39:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 53BCF29019; Tue, 12 Sep 2017 15:39:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9B5E02901A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 15:39:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751508AbdILPjB (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Sep 2017 11:39:01 -0400
Received: from mail-wr0-f194.google.com ([209.85.128.194]:37520 &quot;EHLO
	mail-wr0-f194.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751404AbdILPjA (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Sep 2017 11:39:00 -0400
Received: by mail-wr0-f194.google.com with SMTP id u48so6425273wrf.4
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 12 Sep 2017 08:38:59 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=lexFufovy1oRovbDa3zeybdDtX6aY4duPlJPvMAtEoY=;
	b=ZOZG9xQWFDUtGcPKzLDZ/shoum9mBBkDLmJZXCqH2lZoL1t3sjZ94Uf5u8IN/CNaxu
	US+1k3LNnL01dU06J4wNlibUMGonsfhOE/oGz6IkRCXyFIB8sOL+1i3a2UBA//9TsTV7
	FZoWaAzlzPysz7g6GbePr/2miiAqNDMoppm5Glp+HomWiSxy3lCfQWKJcqCYO3WbyWHS
	kZJiScYWC7canMrQTVlJm8bzLFEUEV98274OBmOx9TF/O/kAzyTWPsltPeFQWsxQHZzf
	52G3TlvAsXIpQvs+w5J71paS0rXv7pkX3ECl+sSpibuzg43Q6/AyhbvAJKWML68I2KDV
	m/ZQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=lexFufovy1oRovbDa3zeybdDtX6aY4duPlJPvMAtEoY=;
	b=Fo6iDYoSRPgn1GN2Ts0jEABB9Cbu/m03RZdFFqowaI9+jKMJsO7r9zCvllGITNAImV
	CcgB9WMKaQjFmdQumq24VXyZtYEdmEIqp/SxJoGsYAvdkHBr5ThWJEk6WtVFcUStQxkt
	Zgjw/rdvsl7en7kQnrH7hFCwXPQrzMSrMu55QdNPYS1Ar9ZOIfov6VCLBwa14g6WUeDu
	7cJYQ2MT9TDtgKGWr92hKBRwr0zdYq5vM1bhJkWJPGtxC877ATFKl0mQGdwr3D+IupMB
	mL86QGqUkef5BVZlI5zChuwQcQNkz8RXoAQ2cHG6D/+QrEmR+gOBM8MUObt6MbHhk3h6
	s+Eg==
X-Gm-Message-State: AHPjjUgwunKQvcwsJla7f9cELCArTGL5Z9Gun8FrtEQDa8YmSxQd4tfD
	l3MF/tClJ3AV9g==
X-Google-Smtp-Source: ADKCNb5HR8I87JieDlRqj5kH0ue2oloE33524lN5oqzt0krCtGXKsChinZDMhMXk/7u0wQZ4QAQaxg==
X-Received: by 10.223.172.239 with SMTP id
	o102mr12147070wrc.135.1505230738819; 
	Tue, 12 Sep 2017 08:38:58 -0700 (PDT)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	c126sm10915126wmh.38.2017.09.12.08.38.57
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Tue, 12 Sep 2017 08:38:57 -0700 (PDT)
Date: Tue, 12 Sep 2017 17:38:55 +0200
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Subject: [GIT PULL] x86 fixes
Message-ID: &lt;20170912153855.bwgrnt52mqnzuoal@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Sept. 12, 2017, 3:38 p.m.</div>
<pre class="content">
Linus,

Please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

   # HEAD: e2329b4252f373c244e75928be38bf1dd45b35da x86/cpu: Remove unused and undefined __generic_processor_info() declaration

Two fixes: dead code removal, plus a SME memory encryption fix on 32-bit kernels 
that crashed Xen guests.

  out-of-topic modifications in x86-urgent-for-linus:
  -----------------------------------------------------
  include/linux/mem_encrypt.h        # 21d9bb4a05ba: x86/mm: Make the SME mask a 

 Thanks,

	Ingo

------------------&gt;
Borislav Petkov (1):
      x86/mm: Make the SME mask a u64

Dou Liyang (1):
      x86/cpu: Remove unused and undefined __generic_processor_info() declaration


 arch/x86/include/asm/mem_encrypt.h |  4 ++--
 arch/x86/include/asm/mpspec.h      |  1 -
 arch/x86/kernel/apic/apic.c        |  2 +-
 arch/x86/mm/mem_encrypt.c          |  2 +-
 include/linux/mem_encrypt.h        | 13 +++++++++----
 5 files changed, 13 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 8e618fcf1f7c..6a77c63540f7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -21,7 +21,7 @@</span> <span class="p_context"></span>
 
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
<span class="p_del">-extern unsigned long sme_me_mask;</span>
<span class="p_add">+extern u64 sme_me_mask;</span>
 
 void sme_encrypt_execute(unsigned long encrypted_kernel_vaddr,
 			 unsigned long decrypted_kernel_vaddr,
<span class="p_chunk">@@ -49,7 +49,7 @@</span> <span class="p_context"> void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_del">-#define sme_me_mask	0UL</span>
<span class="p_add">+#define sme_me_mask	0ULL</span>
 
 static inline void __init sme_early_encrypt(resource_size_t paddr,
 					    unsigned long size) { }
<span class="p_header">diff --git a/arch/x86/include/asm/mpspec.h b/arch/x86/include/asm/mpspec.h</span>
<span class="p_header">index 831eb7895535..c471ca1f9412 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mpspec.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mpspec.h</span>
<span class="p_chunk">@@ -86,7 +86,6 @@</span> <span class="p_context"> static inline void e820__memblock_alloc_reserved_mpc_new(void) { }</span>
 #endif
 
 int generic_processor_info(int apicid, int version);
<span class="p_del">-int __generic_processor_info(int apicid, int version, bool enabled);</span>
 
 #define PHYSID_ARRAY_SIZE	BITS_TO_LONGS(MAX_LOCAL_APIC)
 
<span class="p_header">diff --git a/arch/x86/kernel/apic/apic.c b/arch/x86/kernel/apic/apic.c</span>
<span class="p_header">index 7834f73efbf1..6e19ef152869 100644</span>
<span class="p_header">--- a/arch/x86/kernel/apic/apic.c</span>
<span class="p_header">+++ b/arch/x86/kernel/apic/apic.c</span>
<span class="p_chunk">@@ -2130,7 +2130,7 @@</span> <span class="p_context"> int generic_processor_info(int apicid, int version)</span>
 	 * Since fixing handling of boot_cpu_physical_apicid requires
 	 * another discussion and tests on each platform, we leave it
 	 * for now and here we use read_apic_id() directly in this
<span class="p_del">-	 * function, __generic_processor_info().</span>
<span class="p_add">+	 * function, generic_processor_info().</span>
 	 */
 	if (disabled_cpu_apicid != BAD_APICID &amp;&amp;
 	    disabled_cpu_apicid != read_apic_id() &amp;&amp;
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 0fbd09269757..3fcc8e01683b 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -37,7 +37,7 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
  * reside in the .data section so as not to be zeroed out when the .bss
  * section is later cleared.
  */
<span class="p_del">-unsigned long sme_me_mask __section(.data) = 0;</span>
<span class="p_add">+u64 sme_me_mask __section(.data) = 0;</span>
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
 /* Buffer used for early in-place encryption by BSP, no locking needed */
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 1255f09f5e42..265a9cd21cb4 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -21,7 +21,7 @@</span> <span class="p_context"></span>
 
 #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-#define sme_me_mask	0UL</span>
<span class="p_add">+#define sme_me_mask	0ULL</span>
 
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_chunk">@@ -30,18 +30,23 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return !!sme_me_mask;
 }
 
<span class="p_del">-static inline unsigned long sme_get_me_mask(void)</span>
<span class="p_add">+static inline u64 sme_get_me_mask(void)</span>
 {
 	return sme_me_mask;
 }
 
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
 /*
  * The __sme_set() and __sme_clr() macros are useful for adding or removing
  * the encryption mask from a value (e.g. when dealing with pagetable
  * entries).
  */
<span class="p_del">-#define __sme_set(x)		((unsigned long)(x) | sme_me_mask)</span>
<span class="p_del">-#define __sme_clr(x)		((unsigned long)(x) &amp; ~sme_me_mask)</span>
<span class="p_add">+#define __sme_set(x)		((x) | sme_me_mask)</span>
<span class="p_add">+#define __sme_clr(x)		((x) &amp; ~sme_me_mask)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define __sme_set(x)		(x)</span>
<span class="p_add">+#define __sme_clr(x)		(x)</span>
<span class="p_add">+#endif</span>
 
 #endif	/* __ASSEMBLY__ */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



