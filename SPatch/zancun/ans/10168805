
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/5] powerpc/32: Fix hugepage allocation on 8xx at hint address - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/5] powerpc/32: Fix hugepage allocation on 8xx at hint address</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 17, 2018, 9:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;ed0e31af563aa34045b43a20d0668650e8a7bb7a.1516179904.git.christophe.leroy@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10168805/mbox/"
   >mbox</a>
|
   <a href="/patch/10168805/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10168805/">/patch/10168805/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	14D3D603B5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 09:23:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 066DF209CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 09:23:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id EF7F026E69; Wed, 17 Jan 2018 09:23:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CF3E727CF3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 09:23:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752406AbeAQJWx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 17 Jan 2018 04:22:53 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:59417 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752223AbeAQJWr (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 17 Jan 2018 04:22:47 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zM1p35m88z9ttv8;
	Wed, 17 Jan 2018 10:22:35 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id dgNbrVpDtnug; Wed, 17 Jan 2018 10:22:35 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zM1p34M1tz9ttv1;
	Wed, 17 Jan 2018 10:22:35 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id C74A68B8A7;
	Wed, 17 Jan 2018 10:22:42 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id RgnuQrpm4GTg; Wed, 17 Jan 2018 10:22:42 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 997B78B8A6;
	Wed, 17 Jan 2018 10:22:42 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 90CEF6EEED; Wed, 17 Jan 2018 10:22:42 +0100 (CET)
Message-Id: &lt;ed0e31af563aa34045b43a20d0668650e8a7bb7a.1516179904.git.christophe.leroy@c-s.fr&gt;
In-Reply-To: &lt;49148d07955d3e5f963cedf9adcfcc37c3e03ef4.1516179904.git.christophe.leroy@c-s.fr&gt;
References: &lt;49148d07955d3e5f963cedf9adcfcc37c3e03ef4.1516179904.git.christophe.leroy@c-s.fr&gt;
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH v2 2/5] powerpc/32: Fix hugepage allocation on 8xx at hint
	address
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;, aneesh.kumar@linux.vnet.ibm.com
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Wed, 17 Jan 2018 10:22:42 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 17, 2018, 9:22 a.m.</div>
<pre class="content">
On the 8xx, the page size is set in the PMD entry and applies to
all pages of the page table pointed by the said PMD entry.

When an app has some regular pages allocated (e.g. see below) and tries
to mmap() a huge page at a hint address covered by the same PMD entry,
the kernel accepts the hint allthough the 8xx cannot handle different
page sizes in the same PMD entry.

10000000-10001000 r-xp 00000000 00:0f 2597 /root/malloc
10010000-10011000 rwxp 00000000 00:0f 2597 /root/malloc

mmap(0x10080000, 524288, PROT_READ|PROT_WRITE,
     MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x10080000

This results the app remaining forever in do_page_fault()/hugetlb_fault()
and when interrupting that app, we get the following warning:

[162980.035629] WARNING: CPU: 0 PID: 2777 at arch/powerpc/mm/hugetlbpage.c:354 hugetlb_free_pgd_range+0xc8/0x1e4
[162980.035699] CPU: 0 PID: 2777 Comm: malloc Tainted: G W       4.14.6 #85
[162980.035744] task: c67e2c00 task.stack: c668e000
[162980.035783] NIP:  c000fe18 LR: c00e1eec CTR: c00f90c0
[162980.035830] REGS: c668fc20 TRAP: 0700   Tainted: G W        (4.14.6)
[162980.035854] MSR:  00029032 &lt;EE,ME,IR,DR,RI&gt;  CR: 24044224 XER: 20000000
[162980.036003]
[162980.036003] GPR00: c00e1eec c668fcd0 c67e2c00 00000010 c6869410 10080000 00000000 77fb4000
[162980.036003] GPR08: ffff0001 0683c001 00000000 ffffff80 44028228 10018a34 00004008 418004fc
[162980.036003] GPR16: c668e000 00040100 c668e000 c06c0000 c668fe78 c668e000 c6835ba0 c668fd48
[162980.036003] GPR24: 00000000 73ffffff 74000000 00000001 77fb4000 100fffff 10100000 10100000
[162980.036743] NIP [c000fe18] hugetlb_free_pgd_range+0xc8/0x1e4
[162980.036839] LR [c00e1eec] free_pgtables+0x12c/0x150
[162980.036861] Call Trace:
[162980.036939] [c668fcd0] [c00f0774] unlink_anon_vmas+0x1c4/0x214 (unreliable)
[162980.037040] [c668fd10] [c00e1eec] free_pgtables+0x12c/0x150
[162980.037118] [c668fd40] [c00eabac] exit_mmap+0xe8/0x1b4
[162980.037210] [c668fda0] [c0019710] mmput.part.9+0x20/0xd8
[162980.037301] [c668fdb0] [c001ecb0] do_exit+0x1f0/0x93c
[162980.037386] [c668fe00] [c001f478] do_group_exit+0x40/0xcc
[162980.037479] [c668fe10] [c002a76c] get_signal+0x47c/0x614
[162980.037570] [c668fe70] [c0007840] do_signal+0x54/0x244
[162980.037654] [c668ff30] [c0007ae8] do_notify_resume+0x34/0x88
[162980.037744] [c668ff40] [c000dae8] do_user_signal+0x74/0xc4
[162980.037781] Instruction dump:
[162980.037821] 7fdff378 81370000 54a3463a 80890020 7d24182e 7c841a14 712a0004 4082ff94
[162980.038014] 2f890000 419e0010 712a0ff0 408200e0 &lt;0fe00000&gt; 54a9000a 7f984840 419d0094
[162980.038216] ---[ end trace c0ceeca8e7a5800a ]---
[162980.038754] BUG: non-zero nr_ptes on freeing mm: 1
[162985.363322] BUG: non-zero nr_ptes on freeing mm: -1

In order to fix this, this patch uses the address space &quot;slices&quot;
implemented for BOOK3S/64 and enhanced to support PPC32 by the
preceding patch.

This patch modifies the context.id on the 8xx to be in the range
[1:16] instead of [0:15] in order to identify context.id == 0 as
not initialised contexts as done on BOOK3S

This patch activates CONFIG_PPC_MM_SLICES when CONFIG_HUGETLB_PAGE is
selected for the 8xx

Alltough we could in theory have as many slices as PMD entries, the
current slices implementation limits the number of low slices to 16.
This limitation is not preventing us to fix the initial issue allthough
it is suboptimal. It will be cured in a subsequent patch.

Fixes: 4b91428699477 (&quot;powerpc/8xx: Implement support of hugepages&quot;)
<span class="signed-off-by">Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 v2: First patch of v1 serie split in two parts

 arch/powerpc/include/asm/mmu-8xx.h     | 6 ++++++
 arch/powerpc/kernel/setup-common.c     | 2 ++
 arch/powerpc/mm/8xx_mmu.c              | 2 +-
 arch/powerpc/mm/hugetlbpage.c          | 2 ++
 arch/powerpc/mm/mmu_context_nohash.c   | 4 ++--
 arch/powerpc/mm/slice.c                | 2 ++
 arch/powerpc/platforms/Kconfig.cputype | 1 +
 7 files changed, 16 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 19, 2018, 8:26 a.m.</div>
<pre class="content">
Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:
<span class="quote">
&gt; On the 8xx, the page size is set in the PMD entry and applies to</span>
<span class="quote">&gt; all pages of the page table pointed by the said PMD entry.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; When an app has some regular pages allocated (e.g. see below) and tries</span>
<span class="quote">&gt; to mmap() a huge page at a hint address covered by the same PMD entry,</span>
<span class="quote">&gt; the kernel accepts the hint allthough the 8xx cannot handle different</span>
<span class="quote">&gt; page sizes in the same PMD entry.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 10000000-10001000 r-xp 00000000 00:0f 2597 /root/malloc</span>
<span class="quote">&gt; 10010000-10011000 rwxp 00000000 00:0f 2597 /root/malloc</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; mmap(0x10080000, 524288, PROT_READ|PROT_WRITE,</span>
<span class="quote">&gt;      MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x10080000</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This results the app remaining forever in do_page_fault()/hugetlb_fault()</span>
<span class="quote">&gt; and when interrupting that app, we get the following warning:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [162980.035629] WARNING: CPU: 0 PID: 2777 at arch/powerpc/mm/hugetlbpage.c:354 hugetlb_free_pgd_range+0xc8/0x1e4</span>
<span class="quote">&gt; [162980.035699] CPU: 0 PID: 2777 Comm: malloc Tainted: G W       4.14.6 #85</span>
<span class="quote">&gt; [162980.035744] task: c67e2c00 task.stack: c668e000</span>
<span class="quote">&gt; [162980.035783] NIP:  c000fe18 LR: c00e1eec CTR: c00f90c0</span>
<span class="quote">&gt; [162980.035830] REGS: c668fc20 TRAP: 0700   Tainted: G W        (4.14.6)</span>
<span class="quote">&gt; [162980.035854] MSR:  00029032 &lt;EE,ME,IR,DR,RI&gt;  CR: 24044224 XER: 20000000</span>
<span class="quote">&gt; [162980.036003]</span>
<span class="quote">&gt; [162980.036003] GPR00: c00e1eec c668fcd0 c67e2c00 00000010 c6869410 10080000 00000000 77fb4000</span>
<span class="quote">&gt; [162980.036003] GPR08: ffff0001 0683c001 00000000 ffffff80 44028228 10018a34 00004008 418004fc</span>
<span class="quote">&gt; [162980.036003] GPR16: c668e000 00040100 c668e000 c06c0000 c668fe78 c668e000 c6835ba0 c668fd48</span>
<span class="quote">&gt; [162980.036003] GPR24: 00000000 73ffffff 74000000 00000001 77fb4000 100fffff 10100000 10100000</span>
<span class="quote">&gt; [162980.036743] NIP [c000fe18] hugetlb_free_pgd_range+0xc8/0x1e4</span>
<span class="quote">&gt; [162980.036839] LR [c00e1eec] free_pgtables+0x12c/0x150</span>
<span class="quote">&gt; [162980.036861] Call Trace:</span>
<span class="quote">&gt; [162980.036939] [c668fcd0] [c00f0774] unlink_anon_vmas+0x1c4/0x214 (unreliable)</span>
<span class="quote">&gt; [162980.037040] [c668fd10] [c00e1eec] free_pgtables+0x12c/0x150</span>
<span class="quote">&gt; [162980.037118] [c668fd40] [c00eabac] exit_mmap+0xe8/0x1b4</span>
<span class="quote">&gt; [162980.037210] [c668fda0] [c0019710] mmput.part.9+0x20/0xd8</span>
<span class="quote">&gt; [162980.037301] [c668fdb0] [c001ecb0] do_exit+0x1f0/0x93c</span>
<span class="quote">&gt; [162980.037386] [c668fe00] [c001f478] do_group_exit+0x40/0xcc</span>
<span class="quote">&gt; [162980.037479] [c668fe10] [c002a76c] get_signal+0x47c/0x614</span>
<span class="quote">&gt; [162980.037570] [c668fe70] [c0007840] do_signal+0x54/0x244</span>
<span class="quote">&gt; [162980.037654] [c668ff30] [c0007ae8] do_notify_resume+0x34/0x88</span>
<span class="quote">&gt; [162980.037744] [c668ff40] [c000dae8] do_user_signal+0x74/0xc4</span>
<span class="quote">&gt; [162980.037781] Instruction dump:</span>
<span class="quote">&gt; [162980.037821] 7fdff378 81370000 54a3463a 80890020 7d24182e 7c841a14 712a0004 4082ff94</span>
<span class="quote">&gt; [162980.038014] 2f890000 419e0010 712a0ff0 408200e0 &lt;0fe00000&gt; 54a9000a 7f984840 419d0094</span>
<span class="quote">&gt; [162980.038216] ---[ end trace c0ceeca8e7a5800a ]---</span>
<span class="quote">&gt; [162980.038754] BUG: non-zero nr_ptes on freeing mm: 1</span>
<span class="quote">&gt; [162985.363322] BUG: non-zero nr_ptes on freeing mm: -1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; In order to fix this, this patch uses the address space &quot;slices&quot;</span>
<span class="quote">&gt; implemented for BOOK3S/64 and enhanced to support PPC32 by the</span>
<span class="quote">&gt; preceding patch.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch modifies the context.id on the 8xx to be in the range</span>
<span class="quote">&gt; [1:16] instead of [0:15] in order to identify context.id == 0 as</span>
<span class="quote">&gt; not initialised contexts as done on BOOK3S</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch activates CONFIG_PPC_MM_SLICES when CONFIG_HUGETLB_PAGE is</span>
<span class="quote">&gt; selected for the 8xx</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Alltough we could in theory have as many slices as PMD entries, the</span>
<span class="quote">&gt; current slices implementation limits the number of low slices to 16.</span>
<span class="quote">&gt; This limitation is not preventing us to fix the initial issue allthough</span>
<span class="quote">&gt; it is suboptimal. It will be cured in a subsequent patch.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Fixes: 4b91428699477 (&quot;powerpc/8xx: Implement support of hugepages&quot;)</span>
<span class="quote">&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  v2: First patch of v1 serie split in two parts</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/powerpc/include/asm/mmu-8xx.h     | 6 ++++++</span>
<span class="quote">&gt;  arch/powerpc/kernel/setup-common.c     | 2 ++</span>
<span class="quote">&gt;  arch/powerpc/mm/8xx_mmu.c              | 2 +-</span>
<span class="quote">&gt;  arch/powerpc/mm/hugetlbpage.c          | 2 ++</span>
<span class="quote">&gt;  arch/powerpc/mm/mmu_context_nohash.c   | 4 ++--</span>
<span class="quote">&gt;  arch/powerpc/mm/slice.c                | 2 ++</span>
<span class="quote">&gt;  arch/powerpc/platforms/Kconfig.cputype | 1 +</span>
<span class="quote">&gt;  7 files changed, 16 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt; index 5bb3dbede41a..5f89b6010453 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt; +++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt; @@ -169,6 +169,12 @@ typedef struct {</span>
<span class="quote">&gt;  	unsigned int id;</span>
<span class="quote">&gt;  	unsigned int active;</span>
<span class="quote">&gt;  	unsigned long vdso_base;</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_MM_SLICES</span>
<span class="quote">&gt; +	u16 user_psize;		/* page size index */</span>
<span class="quote">&gt; +	u64 low_slices_psize;	/* page size encodings */</span>
<span class="quote">&gt; +	unsigned char high_slices_psize[0];</span>
<span class="quote">&gt; +	unsigned long slb_addr_limit;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  } mm_context_t;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define PHYS_IMMR_BASE (mfspr(SPRN_IMMR) &amp; 0xfff80000)</span>
<span class="quote">&gt; diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt; index 9d213542a48b..67075a1cff36 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt; @@ -927,6 +927,8 @@ void __init setup_arch(char **cmdline_p)</span>
<span class="quote">&gt;  #ifdef CONFIG_PPC64</span>
<span class="quote">&gt;  	if (!radix_enabled())</span>
<span class="quote">&gt;  		init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW_USER64;</span>
<span class="quote">&gt; +#elif defined(CONFIG_PPC_8xx)</span>
<span class="quote">&gt; +	init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW;</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  #error	&quot;context.addr_limit not initialized.&quot;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/8xx_mmu.c b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt; index f29212e40f40..0be77709446c 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt; @@ -192,7 +192,7 @@ void set_context(unsigned long id, pgd_t *pgd)</span>
<span class="quote">&gt;  	mtspr(SPRN_M_TW, __pa(pgd) - offset);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Update context */</span>
<span class="quote">&gt; -	mtspr(SPRN_M_CASID, id);</span>
<span class="quote">&gt; +	mtspr(SPRN_M_CASID, id - 1);</span>
<span class="quote">&gt;  	/* sync */</span>
<span class="quote">&gt;  	mb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index a9b9083c5e49..79e1378ee303 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -553,9 +553,11 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	struct hstate *hstate = hstate_file(file);</span>
<span class="quote">&gt;  	int mmu_psize = shift_to_mmu_psize(huge_page_shift(hstate));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_RADIX_MMU</span>
<span class="quote">&gt;  	if (radix_enabled())</span>
<span class="quote">&gt;  		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;  						       pgoff, flags);</span>
<span class="quote">&gt; +#endif</span>

if (0) didn&#39;t remove the following radix__hugetlb_get_unmapped_area for
you? 
<span class="quote">

&gt;  	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/mmu_context_nohash.c b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt; index 42e02f5b6660..c1e1bf186871 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt; @@ -435,8 +435,8 @@ void __init mmu_context_init(void)</span>
<span class="quote">&gt;  	 *      -- BenH</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	if (mmu_has_feature(MMU_FTR_TYPE_8xx)) {</span>
<span class="quote">&gt; -		first_context = 0;</span>
<span class="quote">&gt; -		last_context = 15;</span>
<span class="quote">&gt; +		first_context = 1;</span>
<span class="quote">&gt; +		last_context = 16;</span>
<span class="quote">&gt;  		no_selective_tlbil = true;</span>
<span class="quote">&gt;  	} else if (mmu_has_feature(MMU_FTR_TYPE_47x)) {</span>
<span class="quote">&gt;  		first_context = 1;</span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/slice.c b/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt; index 3f35a93afe13..b617acf35836 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt; @@ -206,6 +206,7 @@ static int slice_check_fit(struct mm_struct *mm,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void slice_flush_segments(void *parm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC_BOOK3S_64</span>
<span class="quote">&gt;  	struct mm_struct *mm = parm;</span>
<span class="quote">&gt;  	unsigned long flags;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -217,6 +218,7 @@ static void slice_flush_segments(void *parm)</span>
<span class="quote">&gt;  	local_irq_save(flags);</span>
<span class="quote">&gt;  	slb_flush_and_rebolt();</span>
<span class="quote">&gt;  	local_irq_restore(flags);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void slice_convert(struct mm_struct *mm, struct slice_mask mask, int psize)</span>
<span class="quote">&gt; diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt; index ae07470fde3c..73a7ea333e9e 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt; +++ b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt; @@ -334,6 +334,7 @@ config PPC_BOOK3E_MMU</span>
<span class="quote">&gt;  config PPC_MM_SLICES</span>
<span class="quote">&gt;  	bool</span>
<span class="quote">&gt;  	default y if PPC_BOOK3S_64</span>
<span class="quote">&gt; +	default y if PPC_8xx &amp;&amp; HUGETLB_PAGE</span>
<span class="quote">&gt;  	default n</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  config PPC_HAVE_PMU_SUPPORT</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.13.3</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 19, 2018, 8:49 a.m.</div>
<pre class="content">
Le 19/01/2018 à 09:26, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On the 8xx, the page size is set in the PMD entry and applies to</span>
<span class="quote">&gt;&gt; all pages of the page table pointed by the said PMD entry.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; When an app has some regular pages allocated (e.g. see below) and tries</span>
<span class="quote">&gt;&gt; to mmap() a huge page at a hint address covered by the same PMD entry,</span>
<span class="quote">&gt;&gt; the kernel accepts the hint allthough the 8xx cannot handle different</span>
<span class="quote">&gt;&gt; page sizes in the same PMD entry.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; 10000000-10001000 r-xp 00000000 00:0f 2597 /root/malloc</span>
<span class="quote">&gt;&gt; 10010000-10011000 rwxp 00000000 00:0f 2597 /root/malloc</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; mmap(0x10080000, 524288, PROT_READ|PROT_WRITE,</span>
<span class="quote">&gt;&gt;       MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x10080000</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This results the app remaining forever in do_page_fault()/hugetlb_fault()</span>
<span class="quote">&gt;&gt; and when interrupting that app, we get the following warning:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [162980.035629] WARNING: CPU: 0 PID: 2777 at arch/powerpc/mm/hugetlbpage.c:354 hugetlb_free_pgd_range+0xc8/0x1e4</span>
<span class="quote">&gt;&gt; [162980.035699] CPU: 0 PID: 2777 Comm: malloc Tainted: G W       4.14.6 #85</span>
<span class="quote">&gt;&gt; [162980.035744] task: c67e2c00 task.stack: c668e000</span>
<span class="quote">&gt;&gt; [162980.035783] NIP:  c000fe18 LR: c00e1eec CTR: c00f90c0</span>
<span class="quote">&gt;&gt; [162980.035830] REGS: c668fc20 TRAP: 0700   Tainted: G W        (4.14.6)</span>
<span class="quote">&gt;&gt; [162980.035854] MSR:  00029032 &lt;EE,ME,IR,DR,RI&gt;  CR: 24044224 XER: 20000000</span>
<span class="quote">&gt;&gt; [162980.036003]</span>
<span class="quote">&gt;&gt; [162980.036003] GPR00: c00e1eec c668fcd0 c67e2c00 00000010 c6869410 10080000 00000000 77fb4000</span>
<span class="quote">&gt;&gt; [162980.036003] GPR08: ffff0001 0683c001 00000000 ffffff80 44028228 10018a34 00004008 418004fc</span>
<span class="quote">&gt;&gt; [162980.036003] GPR16: c668e000 00040100 c668e000 c06c0000 c668fe78 c668e000 c6835ba0 c668fd48</span>
<span class="quote">&gt;&gt; [162980.036003] GPR24: 00000000 73ffffff 74000000 00000001 77fb4000 100fffff 10100000 10100000</span>
<span class="quote">&gt;&gt; [162980.036743] NIP [c000fe18] hugetlb_free_pgd_range+0xc8/0x1e4</span>
<span class="quote">&gt;&gt; [162980.036839] LR [c00e1eec] free_pgtables+0x12c/0x150</span>
<span class="quote">&gt;&gt; [162980.036861] Call Trace:</span>
<span class="quote">&gt;&gt; [162980.036939] [c668fcd0] [c00f0774] unlink_anon_vmas+0x1c4/0x214 (unreliable)</span>
<span class="quote">&gt;&gt; [162980.037040] [c668fd10] [c00e1eec] free_pgtables+0x12c/0x150</span>
<span class="quote">&gt;&gt; [162980.037118] [c668fd40] [c00eabac] exit_mmap+0xe8/0x1b4</span>
<span class="quote">&gt;&gt; [162980.037210] [c668fda0] [c0019710] mmput.part.9+0x20/0xd8</span>
<span class="quote">&gt;&gt; [162980.037301] [c668fdb0] [c001ecb0] do_exit+0x1f0/0x93c</span>
<span class="quote">&gt;&gt; [162980.037386] [c668fe00] [c001f478] do_group_exit+0x40/0xcc</span>
<span class="quote">&gt;&gt; [162980.037479] [c668fe10] [c002a76c] get_signal+0x47c/0x614</span>
<span class="quote">&gt;&gt; [162980.037570] [c668fe70] [c0007840] do_signal+0x54/0x244</span>
<span class="quote">&gt;&gt; [162980.037654] [c668ff30] [c0007ae8] do_notify_resume+0x34/0x88</span>
<span class="quote">&gt;&gt; [162980.037744] [c668ff40] [c000dae8] do_user_signal+0x74/0xc4</span>
<span class="quote">&gt;&gt; [162980.037781] Instruction dump:</span>
<span class="quote">&gt;&gt; [162980.037821] 7fdff378 81370000 54a3463a 80890020 7d24182e 7c841a14 712a0004 4082ff94</span>
<span class="quote">&gt;&gt; [162980.038014] 2f890000 419e0010 712a0ff0 408200e0 &lt;0fe00000&gt; 54a9000a 7f984840 419d0094</span>
<span class="quote">&gt;&gt; [162980.038216] ---[ end trace c0ceeca8e7a5800a ]---</span>
<span class="quote">&gt;&gt; [162980.038754] BUG: non-zero nr_ptes on freeing mm: 1</span>
<span class="quote">&gt;&gt; [162985.363322] BUG: non-zero nr_ptes on freeing mm: -1</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; In order to fix this, this patch uses the address space &quot;slices&quot;</span>
<span class="quote">&gt;&gt; implemented for BOOK3S/64 and enhanced to support PPC32 by the</span>
<span class="quote">&gt;&gt; preceding patch.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch modifies the context.id on the 8xx to be in the range</span>
<span class="quote">&gt;&gt; [1:16] instead of [0:15] in order to identify context.id == 0 as</span>
<span class="quote">&gt;&gt; not initialised contexts as done on BOOK3S</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch activates CONFIG_PPC_MM_SLICES when CONFIG_HUGETLB_PAGE is</span>
<span class="quote">&gt;&gt; selected for the 8xx</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Alltough we could in theory have as many slices as PMD entries, the</span>
<span class="quote">&gt;&gt; current slices implementation limits the number of low slices to 16.</span>
<span class="quote">&gt;&gt; This limitation is not preventing us to fix the initial issue allthough</span>
<span class="quote">&gt;&gt; it is suboptimal. It will be cured in a subsequent patch.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Fixes: 4b91428699477 (&quot;powerpc/8xx: Implement support of hugepages&quot;)</span>
<span class="quote">&gt;&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   v2: First patch of v1 serie split in two parts</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   arch/powerpc/include/asm/mmu-8xx.h     | 6 ++++++</span>
<span class="quote">&gt;&gt;   arch/powerpc/kernel/setup-common.c     | 2 ++</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/8xx_mmu.c              | 2 +-</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/hugetlbpage.c          | 2 ++</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/mmu_context_nohash.c   | 4 ++--</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/slice.c                | 2 ++</span>
<span class="quote">&gt;&gt;   arch/powerpc/platforms/Kconfig.cputype | 1 +</span>
<span class="quote">&gt;&gt;   7 files changed, 16 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt;&gt; index 5bb3dbede41a..5f89b6010453 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="quote">&gt;&gt; @@ -169,6 +169,12 @@ typedef struct {</span>
<span class="quote">&gt;&gt;   	unsigned int id;</span>
<span class="quote">&gt;&gt;   	unsigned int active;</span>
<span class="quote">&gt;&gt;   	unsigned long vdso_base;</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_PPC_MM_SLICES</span>
<span class="quote">&gt;&gt; +	u16 user_psize;		/* page size index */</span>
<span class="quote">&gt;&gt; +	u64 low_slices_psize;	/* page size encodings */</span>
<span class="quote">&gt;&gt; +	unsigned char high_slices_psize[0];</span>
<span class="quote">&gt;&gt; +	unsigned long slb_addr_limit;</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt;   } mm_context_t;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   #define PHYS_IMMR_BASE (mfspr(SPRN_IMMR) &amp; 0xfff80000)</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt;&gt; index 9d213542a48b..67075a1cff36 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/kernel/setup-common.c</span>
<span class="quote">&gt;&gt; @@ -927,6 +927,8 @@ void __init setup_arch(char **cmdline_p)</span>
<span class="quote">&gt;&gt;   #ifdef CONFIG_PPC64</span>
<span class="quote">&gt;&gt;   	if (!radix_enabled())</span>
<span class="quote">&gt;&gt;   		init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW_USER64;</span>
<span class="quote">&gt;&gt; +#elif defined(CONFIG_PPC_8xx)</span>
<span class="quote">&gt;&gt; +	init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW;</span>
<span class="quote">&gt;&gt;   #else</span>
<span class="quote">&gt;&gt;   #error	&quot;context.addr_limit not initialized.&quot;</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/8xx_mmu.c b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt;&gt; index f29212e40f40..0be77709446c 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="quote">&gt;&gt; @@ -192,7 +192,7 @@ void set_context(unsigned long id, pgd_t *pgd)</span>
<span class="quote">&gt;&gt;   	mtspr(SPRN_M_TW, __pa(pgd) - offset);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   	/* Update context */</span>
<span class="quote">&gt;&gt; -	mtspr(SPRN_M_CASID, id);</span>
<span class="quote">&gt;&gt; +	mtspr(SPRN_M_CASID, id - 1);</span>
<span class="quote">&gt;&gt;   	/* sync */</span>
<span class="quote">&gt;&gt;   	mb();</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index a9b9083c5e49..79e1378ee303 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -553,9 +553,11 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;   	struct hstate *hstate = hstate_file(file);</span>
<span class="quote">&gt;&gt;   	int mmu_psize = shift_to_mmu_psize(huge_page_shift(hstate));</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_PPC_RADIX_MMU</span>
<span class="quote">&gt;&gt;   	if (radix_enabled())</span>
<span class="quote">&gt;&gt;   		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;   						       pgoff, flags);</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; if (0) didn&#39;t remove the following radix__hugetlb_get_unmapped_area for</span>
<span class="quote">&gt; you?</span>
<span class="quote">&gt; </span>

No

   CC      arch/powerpc/mm/hugetlbpage.o
arch/powerpc/mm/hugetlbpage.c: In function ‘hugetlb_get_unmapped_area’:
arch/powerpc/mm/hugetlbpage.c:558:10: error: implicit declaration of 
function ‘radix__hugetlb_get_unmapped_area’ 
[-Werror=implicit-function-declaration]
    return radix__hugetlb_get_unmapped_area(file, addr, len,
           ^
cc1: all warnings being treated as errors
make[1]: *** [arch/powerpc/mm/hugetlbpage.o] Error 1


Christophe
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt;   	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/mmu_context_nohash.c b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt;&gt; index 42e02f5b6660..c1e1bf186871 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="quote">&gt;&gt; @@ -435,8 +435,8 @@ void __init mmu_context_init(void)</span>
<span class="quote">&gt;&gt;   	 *      -- BenH</span>
<span class="quote">&gt;&gt;   	 */</span>
<span class="quote">&gt;&gt;   	if (mmu_has_feature(MMU_FTR_TYPE_8xx)) {</span>
<span class="quote">&gt;&gt; -		first_context = 0;</span>
<span class="quote">&gt;&gt; -		last_context = 15;</span>
<span class="quote">&gt;&gt; +		first_context = 1;</span>
<span class="quote">&gt;&gt; +		last_context = 16;</span>
<span class="quote">&gt;&gt;   		no_selective_tlbil = true;</span>
<span class="quote">&gt;&gt;   	} else if (mmu_has_feature(MMU_FTR_TYPE_47x)) {</span>
<span class="quote">&gt;&gt;   		first_context = 1;</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/slice.c b/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt;&gt; index 3f35a93afe13..b617acf35836 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/slice.c</span>
<span class="quote">&gt;&gt; @@ -206,6 +206,7 @@ static int slice_check_fit(struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   static void slice_flush_segments(void *parm)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_PPC_BOOK3S_64</span>
<span class="quote">&gt;&gt;   	struct mm_struct *mm = parm;</span>
<span class="quote">&gt;&gt;   	unsigned long flags;</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; @@ -217,6 +218,7 @@ static void slice_flush_segments(void *parm)</span>
<span class="quote">&gt;&gt;   	local_irq_save(flags);</span>
<span class="quote">&gt;&gt;   	slb_flush_and_rebolt();</span>
<span class="quote">&gt;&gt;   	local_irq_restore(flags);</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   static void slice_convert(struct mm_struct *mm, struct slice_mask mask, int psize)</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt;&gt; index ae07470fde3c..73a7ea333e9e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="quote">&gt;&gt; @@ -334,6 +334,7 @@ config PPC_BOOK3E_MMU</span>
<span class="quote">&gt;&gt;   config PPC_MM_SLICES</span>
<span class="quote">&gt;&gt;   	bool</span>
<span class="quote">&gt;&gt;   	default y if PPC_BOOK3S_64</span>
<span class="quote">&gt;&gt; +	default y if PPC_8xx &amp;&amp; HUGETLB_PAGE</span>
<span class="quote">&gt;&gt;   	default n</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   config PPC_HAVE_PMU_SUPPORT</span>
<span class="quote">&gt;&gt; -- </span>
<span class="quote">&gt;&gt; 2.13.3</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - Jan. 27, 2018, 9:37 a.m.</div>
<pre class="content">
&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt; writes:
<span class="quote">
&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On the 8xx, the page size is set in the PMD entry and applies to</span>
<span class="quote">&gt;&gt; all pages of the page table pointed by the said PMD entry.</span>
<span class="quote">&gt;&gt;</span>
...
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index a9b9083c5e49..79e1378ee303 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -553,9 +553,11 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;  	struct hstate *hstate = hstate_file(file);</span>
<span class="quote">&gt;&gt;  	int mmu_psize = shift_to_mmu_psize(huge_page_shift(hstate));</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_PPC_RADIX_MMU</span>
<span class="quote">&gt;&gt;  	if (radix_enabled())</span>
<span class="quote">&gt;&gt;  		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;  						       pgoff, flags);</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; if (0) didn&#39;t remove the following radix__hugetlb_get_unmapped_area for</span>
<span class="quote">&gt; you? </span>

It will remove the call, but you still need at least a prototype, or an
empty static inline.

cheers
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">index 5bb3dbede41a..5f89b6010453 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_chunk">@@ -169,6 +169,12 @@</span> <span class="p_context"> typedef struct {</span>
 	unsigned int id;
 	unsigned int active;
 	unsigned long vdso_base;
<span class="p_add">+#ifdef CONFIG_PPC_MM_SLICES</span>
<span class="p_add">+	u16 user_psize;		/* page size index */</span>
<span class="p_add">+	u64 low_slices_psize;	/* page size encodings */</span>
<span class="p_add">+	unsigned char high_slices_psize[0];</span>
<span class="p_add">+	unsigned long slb_addr_limit;</span>
<span class="p_add">+#endif</span>
 } mm_context_t;
 
 #define PHYS_IMMR_BASE (mfspr(SPRN_IMMR) &amp; 0xfff80000)
<span class="p_header">diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c</span>
<span class="p_header">index 9d213542a48b..67075a1cff36 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/setup-common.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/setup-common.c</span>
<span class="p_chunk">@@ -927,6 +927,8 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 #ifdef CONFIG_PPC64
 	if (!radix_enabled())
 		init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW_USER64;
<span class="p_add">+#elif defined(CONFIG_PPC_8xx)</span>
<span class="p_add">+	init_mm.context.slb_addr_limit = DEFAULT_MAP_WINDOW;</span>
 #else
 #error	&quot;context.addr_limit not initialized.&quot;
 #endif
<span class="p_header">diff --git a/arch/powerpc/mm/8xx_mmu.c b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_header">index f29212e40f40..0be77709446c 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_chunk">@@ -192,7 +192,7 @@</span> <span class="p_context"> void set_context(unsigned long id, pgd_t *pgd)</span>
 	mtspr(SPRN_M_TW, __pa(pgd) - offset);
 
 	/* Update context */
<span class="p_del">-	mtspr(SPRN_M_CASID, id);</span>
<span class="p_add">+	mtspr(SPRN_M_CASID, id - 1);</span>
 	/* sync */
 	mb();
 }
<span class="p_header">diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">index a9b9083c5e49..79e1378ee303 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -553,9 +553,11 @@</span> <span class="p_context"> unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	struct hstate *hstate = hstate_file(file);
 	int mmu_psize = shift_to_mmu_psize(huge_page_shift(hstate));
 
<span class="p_add">+#ifdef CONFIG_PPC_RADIX_MMU</span>
 	if (radix_enabled())
 		return radix__hugetlb_get_unmapped_area(file, addr, len,
 						       pgoff, flags);
<span class="p_add">+#endif</span>
 	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);
 }
 #endif
<span class="p_header">diff --git a/arch/powerpc/mm/mmu_context_nohash.c b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="p_header">index 42e02f5b6660..c1e1bf186871 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/mmu_context_nohash.c</span>
<span class="p_chunk">@@ -435,8 +435,8 @@</span> <span class="p_context"> void __init mmu_context_init(void)</span>
 	 *      -- BenH
 	 */
 	if (mmu_has_feature(MMU_FTR_TYPE_8xx)) {
<span class="p_del">-		first_context = 0;</span>
<span class="p_del">-		last_context = 15;</span>
<span class="p_add">+		first_context = 1;</span>
<span class="p_add">+		last_context = 16;</span>
 		no_selective_tlbil = true;
 	} else if (mmu_has_feature(MMU_FTR_TYPE_47x)) {
 		first_context = 1;
<span class="p_header">diff --git a/arch/powerpc/mm/slice.c b/arch/powerpc/mm/slice.c</span>
<span class="p_header">index 3f35a93afe13..b617acf35836 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/slice.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/slice.c</span>
<span class="p_chunk">@@ -206,6 +206,7 @@</span> <span class="p_context"> static int slice_check_fit(struct mm_struct *mm,</span>
 
 static void slice_flush_segments(void *parm)
 {
<span class="p_add">+#ifdef CONFIG_PPC_BOOK3S_64</span>
 	struct mm_struct *mm = parm;
 	unsigned long flags;
 
<span class="p_chunk">@@ -217,6 +218,7 @@</span> <span class="p_context"> static void slice_flush_segments(void *parm)</span>
 	local_irq_save(flags);
 	slb_flush_and_rebolt();
 	local_irq_restore(flags);
<span class="p_add">+#endif</span>
 }
 
 static void slice_convert(struct mm_struct *mm, struct slice_mask mask, int psize)
<span class="p_header">diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_header">index ae07470fde3c..73a7ea333e9e 100644</span>
<span class="p_header">--- a/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_header">+++ b/arch/powerpc/platforms/Kconfig.cputype</span>
<span class="p_chunk">@@ -334,6 +334,7 @@</span> <span class="p_context"> config PPC_BOOK3E_MMU</span>
 config PPC_MM_SLICES
 	bool
 	default y if PPC_BOOK3S_64
<span class="p_add">+	default y if PPC_8xx &amp;&amp; HUGETLB_PAGE</span>
 	default n
 
 config PPC_HAVE_PMU_SUPPORT

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



