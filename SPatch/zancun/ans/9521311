
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 17, 2017, 3:14 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170117151431.17085-1-aleksey.makarov@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9521311/mbox/"
   >mbox</a>
|
   <a href="/patch/9521311/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9521311/">/patch/9521311/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	192D5601C3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Jan 2017 15:15:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0A302285BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Jan 2017 15:15:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F0D4E285C1; Tue, 17 Jan 2017 15:15:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 22D72285BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 17 Jan 2017 15:15:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1750982AbdAQPPM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 17 Jan 2017 10:15:12 -0500
Received: from mail-lf0-f49.google.com ([209.85.215.49]:33017 &quot;EHLO
	mail-lf0-f49.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750892AbdAQPPK (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 17 Jan 2017 10:15:10 -0500
Received: by mail-lf0-f49.google.com with SMTP id k86so110234822lfi.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 17 Jan 2017 07:15:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=x587emhStWzaStHazQa/GClExYQxZttgz1sQnPVxAvg=;
	b=FfN7jASaCrH3uf1R2AOtaOuQQIY+0MPxxhRcHcxpM5OQy/4jQrpf3ACwgPtZ2QRq9k
	6/oYmFuZidCp0avzu7vblut2ARB4I0s2IqG/LS6gZbCJGjjVlQNfwmBVR4A9Jb3AkxV6
	tEvIhw+l1m+I9O+oXSF6Chr4oukQIq7v4GDNY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=x587emhStWzaStHazQa/GClExYQxZttgz1sQnPVxAvg=;
	b=NMc72i6HAgVCbD+RSCELOyvVrQRHDk/4RjmbJ4wsIwZTjf3+x+0hR+2D8K2EzaUMUZ
	wp0hwG4sQOGqCeBTQIjaUuVcaEhNdJZV+nIiSM012mQk0bkzkTCbSb1HI0SvuqPJVF3W
	VuVjxckRFrVqmqd2UL4pQRJjpb4H96x4igJ+qoGG4MNQyN+zKVXv4bE0zhHlfXB+zeHu
	2QRxfcipKttGHQ3lvEWBLxtJKlIpXf/d//Yud8cgcfGVYqXSZQAerIHGn64dvLaVFRp0
	Zsu3RY5rNg2REU6IwnF8m6ecO3ZjBxPTQ3AJjXO7DcX395Asl4AQGzIaE712UnYJ7ulB
	qNDA==
X-Gm-Message-State: AIkVDXIpj7ghPZ39zxw65anmui9Loct3PzpLaMARHRtYjAlu3TMn2+PX5ZRy2MWQpvjPp5A6
X-Received: by 10.25.15.199 with SMTP id 68mr11741077lfp.53.1484666108603;
	Tue, 17 Jan 2017 07:15:08 -0800 (PST)
Received: from localhost.localdomain (nivc-213.auriga.ru. [80.240.102.213])
	by smtp.gmail.com with ESMTPSA id
	187sm8211281ljj.7.2017.01.17.07.15.07
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 17 Jan 2017 07:15:07 -0800 (PST)
From: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: iommu@lists.linux-foundation.org,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	Robin Murphy &lt;robin.murphy@arm.com&gt;,
	Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;
Subject: [PATCH v3] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit)
Date: Tue, 17 Jan 2017 18:14:29 +0300
Message-Id: &lt;20170117151431.17085-1-aleksey.makarov@linaro.org&gt;
X-Mailer: git-send-email 2.11.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a> - Jan. 17, 2017, 3:14 p.m.</div>
<pre class="content">
Enable the Extended Stream ID feature when available.

This patch on top of series &quot;KVM PCIe/MSI passthrough on ARM/ARM64
and IOVA reserved regions&quot; by Eric Auger [1] allows to passthrough
an external PCIe network card on a ThunderX server successfully.

Without this patch that card caused a warning like

	pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)

during boot.

[1] https://lkml.kernel.org/r/1484127714-3263-1-git-send-email-eric.auger@redhat.com
<span class="signed-off-by">
Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
---
v3:
- keep formatting of the comment
- fix printk message after the deleted chunk.  &quot;[Do] not print a mask
  here, since it&#39;s not overly interesting in itself, and add_device will
  still show the offending mask in full if it ever actually matters (as in
  the commit message).&quot; (Robin Murphy)

v2:
https://lkml.kernel.org/r/20170116141111.29444-1-aleksey.makarov@linaro.org
- remove unnecessary parentheses (Robin Murphy)
- refactor testing SMR fields to after setting sCR0 as theirs width
  depends on sCR0_EXIDENABLE (Robin Murphy)

v1 (rfc):
https://lkml.kernel.org/r/20170110115755.19102-1-aleksey.makarov@linaro.org

 drivers/iommu/arm-smmu.c | 69 +++++++++++++++++++++++++++++++++---------------
 1 file changed, 48 insertions(+), 21 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172153">Tomasz Nowicki</a> - Jan. 19, 2017, 8:55 a.m.</div>
<pre class="content">
Hi Aleksey,

On 17.01.2017 16:14, Aleksey Makarov wrote:
<span class="quote">&gt; Enable the Extended Stream ID feature when available.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch on top of series &quot;KVM PCIe/MSI passthrough on ARM/ARM64</span>
<span class="quote">&gt; and IOVA reserved regions&quot; by Eric Auger [1] allows to passthrough</span>
<span class="quote">&gt; an external PCIe network card on a ThunderX server successfully.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Without this patch that card caused a warning like</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; during boot.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [1] https://lkml.kernel.org/r/1484127714-3263-1-git-send-email-eric.auger@redhat.com</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>

I do not thing this is related to PCIe network card. It is rather common 
to all devices which bus number &gt; 127

----

iommu/arm-smmu: Support for Extended Stream ID (16 bit)

It is the time we have the real 16-bit Stream ID user, which is the 
ThunderX. Its IO topology uses 1:1 map for requester to stream ID 
translation:

RC no. | Requester ID | Stream ID
        |              |
RC_0   | 0-FFFF ---&gt;  | 0-FFFF

which allows to get full 16-bit stream ID. Currently all devices with 
bus number &gt;= 128 (0x80) get non-zero 16th bit of BDF and stream ID (due 
to 1:1 map). Eventually SMMU drops such device because the stream ID is 
out of range. This is the case for all devices connected as external 
endpoints on ThunderX.

To fix above issue enable the Extended Stream ID optional feature when 
available.

----

Please add my:
<span class="reviewed-by">Reviewed-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="tested-by">Tested-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>

Thanks,
Tomasz
<span class="quote">

&gt; ---</span>
<span class="quote">&gt; v3:</span>
<span class="quote">&gt; - keep formatting of the comment</span>
<span class="quote">&gt; - fix printk message after the deleted chunk.  &quot;[Do] not print a mask</span>
<span class="quote">&gt;   here, since it&#39;s not overly interesting in itself, and add_device will</span>
<span class="quote">&gt;   still show the offending mask in full if it ever actually matters (as in</span>
<span class="quote">&gt;   the commit message).&quot; (Robin Murphy)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v2:</span>
<span class="quote">&gt; https://lkml.kernel.org/r/20170116141111.29444-1-aleksey.makarov@linaro.org</span>
<span class="quote">&gt; - remove unnecessary parentheses (Robin Murphy)</span>
<span class="quote">&gt; - refactor testing SMR fields to after setting sCR0 as theirs width</span>
<span class="quote">&gt;   depends on sCR0_EXIDENABLE (Robin Murphy)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v1 (rfc):</span>
<span class="quote">&gt; https://lkml.kernel.org/r/20170110115755.19102-1-aleksey.makarov@linaro.org</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  drivers/iommu/arm-smmu.c | 69 +++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;  1 file changed, 48 insertions(+), 21 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; index 13d26009b8e0..861cc135722f 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; @@ -24,6 +24,7 @@</span>
<span class="quote">&gt;   *	- v7/v8 long-descriptor format</span>
<span class="quote">&gt;   *	- Non-secure access to the SMMU</span>
<span class="quote">&gt;   *	- Context fault reporting</span>
<span class="quote">&gt; + *	- Extended Stream ID (16 bit)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt</span>
<span class="quote">&gt; @@ -87,6 +88,7 @@</span>
<span class="quote">&gt;  #define sCR0_CLIENTPD			(1 &lt;&lt; 0)</span>
<span class="quote">&gt;  #define sCR0_GFRE			(1 &lt;&lt; 1)</span>
<span class="quote">&gt;  #define sCR0_GFIE			(1 &lt;&lt; 2)</span>
<span class="quote">&gt; +#define sCR0_EXIDENABLE			(1 &lt;&lt; 3)</span>
<span class="quote">&gt;  #define sCR0_GCFGFRE			(1 &lt;&lt; 4)</span>
<span class="quote">&gt;  #define sCR0_GCFGFIE			(1 &lt;&lt; 5)</span>
<span class="quote">&gt;  #define sCR0_USFCFG			(1 &lt;&lt; 10)</span>
<span class="quote">&gt; @@ -126,6 +128,7 @@</span>
<span class="quote">&gt;  #define ID0_NUMIRPT_MASK		0xff</span>
<span class="quote">&gt;  #define ID0_NUMSIDB_SHIFT		9</span>
<span class="quote">&gt;  #define ID0_NUMSIDB_MASK		0xf</span>
<span class="quote">&gt; +#define ID0_EXIDS			(1 &lt;&lt; 8)</span>
<span class="quote">&gt;  #define ID0_NUMSMRG_SHIFT		0</span>
<span class="quote">&gt;  #define ID0_NUMSMRG_MASK		0xff</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -169,6 +172,7 @@</span>
<span class="quote">&gt;  #define ARM_SMMU_GR0_S2CR(n)		(0xc00 + ((n) &lt;&lt; 2))</span>
<span class="quote">&gt;  #define S2CR_CBNDX_SHIFT		0</span>
<span class="quote">&gt;  #define S2CR_CBNDX_MASK			0xff</span>
<span class="quote">&gt; +#define S2CR_EXIDVALID			(1 &lt;&lt; 10)</span>
<span class="quote">&gt;  #define S2CR_TYPE_SHIFT			16</span>
<span class="quote">&gt;  #define S2CR_TYPE_MASK			0x3</span>
<span class="quote">&gt;  enum arm_smmu_s2cr_type {</span>
<span class="quote">&gt; @@ -354,6 +358,7 @@ struct arm_smmu_device {</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH64_64K	(1 &lt;&lt; 9)</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_L	(1 &lt;&lt; 10)</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_S	(1 &lt;&lt; 11)</span>
<span class="quote">&gt; +#define ARM_SMMU_FEAT_EXIDS		(1 &lt;&lt; 12)</span>
<span class="quote">&gt;  	u32				features;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)</span>
<span class="quote">&gt; @@ -1051,7 +1056,7 @@ static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;  	struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;</span>
<span class="quote">&gt;  	u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	if (smr-&gt;valid)</span>
<span class="quote">&gt; +	if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
<span class="quote">&gt;  		reg |= SMR_VALID;</span>
<span class="quote">&gt;  	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -1063,6 +1068,9 @@ static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;  		  (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |</span>
<span class="quote">&gt;  		  (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="quote">&gt; +	    smmu-&gt;smrs[idx].valid)</span>
<span class="quote">&gt; +		reg |= S2CR_EXIDVALID;</span>
<span class="quote">&gt;  	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -1073,6 +1081,34 @@ static void arm_smmu_write_sme(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;  		arm_smmu_write_smr(smmu, idx);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * The width of SMR&#39;s mask field depends on sCR0_EXIDENABLE, so this function</span>
<span class="quote">&gt; + * should be called after sCR0 is written.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +static void arm_smmu_test_smr_masks(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	void __iomem *gr0_base = ARM_SMMU_GR0(smmu);</span>
<span class="quote">&gt; +	u32 smr;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!smmu-&gt;smrs)</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt; +	 * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt; +	 * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; +	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +	smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; +	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +	smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int arm_smmu_find_sme(struct arm_smmu_device *smmu, u16 id, u16 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct arm_smmu_smr *smrs = smmu-&gt;smrs;</span>
<span class="quote">&gt; @@ -1674,6 +1710,9 @@ static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)</span>
<span class="quote">&gt;  		reg |= sCR0_VMID16EN;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="quote">&gt; +		reg |= sCR0_EXIDENABLE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* Push the button */</span>
<span class="quote">&gt;  	__arm_smmu_tlb_sync(smmu);</span>
<span class="quote">&gt;  	writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);</span>
<span class="quote">&gt; @@ -1761,11 +1800,14 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	/* Max. number of entries we have for stream matching/indexing */</span>
<span class="quote">&gt; -	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt; +	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="quote">&gt; +		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="quote">&gt; +		size = 1 &lt;&lt; 16;</span>
<span class="quote">&gt; +	} else {</span>
<span class="quote">&gt; +		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  	smmu-&gt;streamid_mask = size - 1;</span>
<span class="quote">&gt;  	if (id &amp; ID0_SMS) {</span>
<span class="quote">&gt; -		u32 smr;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  		smmu-&gt;features |= ARM_SMMU_FEAT_STREAM_MATCH;</span>
<span class="quote">&gt;  		size = (id &gt;&gt; ID0_NUMSMRG_SHIFT) &amp; ID0_NUMSMRG_MASK;</span>
<span class="quote">&gt;  		if (size == 0) {</span>
<span class="quote">&gt; @@ -1774,21 +1816,6 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			return -ENODEV;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -		/*</span>
<span class="quote">&gt; -		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt; -		 * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt; -		 * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt; -		 */</span>
<span class="quote">&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  		/* Zero-initialised to mark as invalid */</span>
<span class="quote">&gt;  		smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),</span>
<span class="quote">&gt;  					  GFP_KERNEL);</span>
<span class="quote">&gt; @@ -1796,8 +1823,7 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			return -ENOMEM;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  		dev_notice(smmu-&gt;dev,</span>
<span class="quote">&gt; -			   &quot;\tstream matching with %lu register groups, mask 0x%x&quot;,</span>
<span class="quote">&gt; -			   size, smmu-&gt;smr_mask_mask);</span>
<span class="quote">&gt; +			   &quot;\tstream matching with %lu register groups&quot;, size);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	/* s2cr-&gt;type == 0 means translation, so initialise explicitly */</span>
<span class="quote">&gt;  	smmu-&gt;s2crs = devm_kmalloc_array(smmu-&gt;dev, size, sizeof(*smmu-&gt;s2crs),</span>
<span class="quote">&gt; @@ -2120,6 +2146,7 @@ static int arm_smmu_device_probe(struct platform_device *pdev)</span>
<span class="quote">&gt;  	iommu_register_instance(dev-&gt;fwnode, &amp;arm_smmu_ops);</span>
<span class="quote">&gt;  	platform_set_drvdata(pdev, smmu);</span>
<span class="quote">&gt;  	arm_smmu_device_reset(smmu);</span>
<span class="quote">&gt; +	arm_smmu_test_smr_masks(smmu);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	/* Oh, for a proper bus abstraction */</span>
<span class="quote">&gt;  	if (!iommu_present(&amp;platform_bus_type))</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a> - Jan. 19, 2017, 10:57 a.m.</div>
<pre class="content">
Hi Tomasz,

On 01/19/2017 11:55 AM, Tomasz Nowicki wrote:
<span class="quote">&gt; Hi Aleksey,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 17.01.2017 16:14, Aleksey Makarov wrote:</span>
<span class="quote">&gt;&gt; Enable the Extended Stream ID feature when available.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch on top of series &quot;KVM PCIe/MSI passthrough on ARM/ARM64</span>
<span class="quote">&gt;&gt; and IOVA reserved regions&quot; by Eric Auger [1] allows to passthrough</span>
<span class="quote">&gt;&gt; an external PCIe network card on a ThunderX server successfully.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Without this patch that card caused a warning like</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;     pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; during boot.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [1] https://lkml.kernel.org/r/1484127714-3263-1-git-send-email-eric.auger@redhat.com</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I do not thing this is related to PCIe network card. It is rather common to all devices which bus number &gt; 127</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ----</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; iommu/arm-smmu: Support for Extended Stream ID (16 bit)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It is the time we have the real 16-bit Stream ID user, which is the ThunderX. Its IO topology uses 1:1 map for requester to stream ID translation:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; RC no. | Requester ID | Stream ID</span>
<span class="quote">&gt;        |              |</span>
<span class="quote">&gt; RC_0   | 0-FFFF ---&gt;  | 0-FFFF</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; which allows to get full 16-bit stream ID. Currently all devices with bus number &gt;= 128 (0x80) get non-zero 16th bit of BDF and stream ID (due to 1:1 map). Eventually SMMU drops such device because the stream ID is out of range. This is the case for all devices connected as external endpoints on ThunderX.</span>

Technically the last sentence it is not correct as far as I can see.  There exists a device connected to PEM (external entpoint?) with BDF (== Stream ID) &lt;= 0x7fff:

	0004:21:00.0 VGA compatible controller: ASPEED Technology, Inc. ASPEED Graphics Family (rev 30)
<span class="quote">
&gt; </span>
<span class="quote">&gt; ----</span>

Thank you for review.  May I change the commit message this way and keep your &#39;Reviewed-by&#39;?:

---
iommu/arm-smmu: Support for Extended Stream ID (16 bit)

It is the time we have the real 16-bit Stream ID user, which is the
ThunderX. Its IO topology uses 1:1 map for requester ID to stream ID
translation for each root complex which allows to get full 16-bit
stream ID.  Firmware assigns bus IDs that are greater than 128 (0x80)
to some buses under PEM (external PCIe interface).  Eventually SMMU
drops devices on that buses because their stream ID is out of range:

  pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)

To fix above issue enable the Extended Stream ID optional feature when available.
---

Thank you
Aleksey Makarov
<span class="quote">
&gt; </span>
<span class="quote">&gt; Please add my:</span>
<span class="quote">&gt; Reviewed-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="quote">&gt; Tested-by: Tomasz Nowicki &lt;tomasz.nowicki@caviumnetworks.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Tomasz</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; v3:</span>
<span class="quote">&gt;&gt; - keep formatting of the comment</span>
<span class="quote">&gt;&gt; - fix printk message after the deleted chunk.  &quot;[Do] not print a mask</span>
<span class="quote">&gt;&gt;   here, since it&#39;s not overly interesting in itself, and add_device will</span>
<span class="quote">&gt;&gt;   still show the offending mask in full if it ever actually matters (as in</span>
<span class="quote">&gt;&gt;   the commit message).&quot; (Robin Murphy)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v2:</span>
<span class="quote">&gt;&gt; https://lkml.kernel.org/r/20170116141111.29444-1-aleksey.makarov@linaro.org</span>
<span class="quote">&gt;&gt; - remove unnecessary parentheses (Robin Murphy)</span>
<span class="quote">&gt;&gt; - refactor testing SMR fields to after setting sCR0 as theirs width</span>
<span class="quote">&gt;&gt;   depends on sCR0_EXIDENABLE (Robin Murphy)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v1 (rfc):</span>
<span class="quote">&gt;&gt; https://lkml.kernel.org/r/20170110115755.19102-1-aleksey.makarov@linaro.org</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  drivers/iommu/arm-smmu.c | 69 +++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;&gt;  1 file changed, 48 insertions(+), 21 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt;&gt; index 13d26009b8e0..861cc135722f 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt;&gt; @@ -24,6 +24,7 @@</span>
<span class="quote">&gt;&gt;   *    - v7/v8 long-descriptor format</span>
<span class="quote">&gt;&gt;   *    - Non-secure access to the SMMU</span>
<span class="quote">&gt;&gt;   *    - Context fault reporting</span>
<span class="quote">&gt;&gt; + *    - Extended Stream ID (16 bit)</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt</span>
<span class="quote">&gt;&gt; @@ -87,6 +88,7 @@</span>
<span class="quote">&gt;&gt;  #define sCR0_CLIENTPD            (1 &lt;&lt; 0)</span>
<span class="quote">&gt;&gt;  #define sCR0_GFRE            (1 &lt;&lt; 1)</span>
<span class="quote">&gt;&gt;  #define sCR0_GFIE            (1 &lt;&lt; 2)</span>
<span class="quote">&gt;&gt; +#define sCR0_EXIDENABLE            (1 &lt;&lt; 3)</span>
<span class="quote">&gt;&gt;  #define sCR0_GCFGFRE            (1 &lt;&lt; 4)</span>
<span class="quote">&gt;&gt;  #define sCR0_GCFGFIE            (1 &lt;&lt; 5)</span>
<span class="quote">&gt;&gt;  #define sCR0_USFCFG            (1 &lt;&lt; 10)</span>
<span class="quote">&gt;&gt; @@ -126,6 +128,7 @@</span>
<span class="quote">&gt;&gt;  #define ID0_NUMIRPT_MASK        0xff</span>
<span class="quote">&gt;&gt;  #define ID0_NUMSIDB_SHIFT        9</span>
<span class="quote">&gt;&gt;  #define ID0_NUMSIDB_MASK        0xf</span>
<span class="quote">&gt;&gt; +#define ID0_EXIDS            (1 &lt;&lt; 8)</span>
<span class="quote">&gt;&gt;  #define ID0_NUMSMRG_SHIFT        0</span>
<span class="quote">&gt;&gt;  #define ID0_NUMSMRG_MASK        0xff</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -169,6 +172,7 @@</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_GR0_S2CR(n)        (0xc00 + ((n) &lt;&lt; 2))</span>
<span class="quote">&gt;&gt;  #define S2CR_CBNDX_SHIFT        0</span>
<span class="quote">&gt;&gt;  #define S2CR_CBNDX_MASK            0xff</span>
<span class="quote">&gt;&gt; +#define S2CR_EXIDVALID            (1 &lt;&lt; 10)</span>
<span class="quote">&gt;&gt;  #define S2CR_TYPE_SHIFT            16</span>
<span class="quote">&gt;&gt;  #define S2CR_TYPE_MASK            0x3</span>
<span class="quote">&gt;&gt;  enum arm_smmu_s2cr_type {</span>
<span class="quote">&gt;&gt; @@ -354,6 +358,7 @@ struct arm_smmu_device {</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_FEAT_FMT_AARCH64_64K    (1 &lt;&lt; 9)</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_L    (1 &lt;&lt; 10)</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_S    (1 &lt;&lt; 11)</span>
<span class="quote">&gt;&gt; +#define ARM_SMMU_FEAT_EXIDS        (1 &lt;&lt; 12)</span>
<span class="quote">&gt;&gt;      u32                features;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)</span>
<span class="quote">&gt;&gt; @@ -1051,7 +1056,7 @@ static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;&gt;      struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;</span>
<span class="quote">&gt;&gt;      u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -    if (smr-&gt;valid)</span>
<span class="quote">&gt;&gt; +    if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
<span class="quote">&gt;&gt;          reg |= SMR_VALID;</span>
<span class="quote">&gt;&gt;      writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -1063,6 +1068,9 @@ static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;&gt;            (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |</span>
<span class="quote">&gt;&gt;            (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +    if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="quote">&gt;&gt; +        smmu-&gt;smrs[idx].valid)</span>
<span class="quote">&gt;&gt; +        reg |= S2CR_EXIDVALID;</span>
<span class="quote">&gt;&gt;      writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -1073,6 +1081,34 @@ static void arm_smmu_write_sme(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;&gt;          arm_smmu_write_smr(smmu, idx);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * The width of SMR&#39;s mask field depends on sCR0_EXIDENABLE, so this function</span>
<span class="quote">&gt;&gt; + * should be called after sCR0 is written.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +static void arm_smmu_test_smr_masks(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    void __iomem *gr0_base = ARM_SMMU_GR0(smmu);</span>
<span class="quote">&gt;&gt; +    u32 smr;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    if (!smmu-&gt;smrs)</span>
<span class="quote">&gt;&gt; +        return;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    /*</span>
<span class="quote">&gt;&gt; +     * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt;&gt; +     * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt;&gt; +     * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt;&gt; +     */</span>
<span class="quote">&gt;&gt; +    smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; +    writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +    smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +    smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; +    writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +    smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +    smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  static int arm_smmu_find_sme(struct arm_smmu_device *smmu, u16 id, u16 mask)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;      struct arm_smmu_smr *smrs = smmu-&gt;smrs;</span>
<span class="quote">&gt;&gt; @@ -1674,6 +1710,9 @@ static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;      if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)</span>
<span class="quote">&gt;&gt;          reg |= sCR0_VMID16EN;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +    if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="quote">&gt;&gt; +        reg |= sCR0_EXIDENABLE;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;      /* Push the button */</span>
<span class="quote">&gt;&gt;      __arm_smmu_tlb_sync(smmu);</span>
<span class="quote">&gt;&gt;      writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);</span>
<span class="quote">&gt;&gt; @@ -1761,11 +1800,14 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;                 &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;      /* Max. number of entries we have for stream matching/indexing */</span>
<span class="quote">&gt;&gt; -    size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt;&gt; +    if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="quote">&gt;&gt; +        smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="quote">&gt;&gt; +        size = 1 &lt;&lt; 16;</span>
<span class="quote">&gt;&gt; +    } else {</span>
<span class="quote">&gt;&gt; +        size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt;&gt; +    }</span>
<span class="quote">&gt;&gt;      smmu-&gt;streamid_mask = size - 1;</span>
<span class="quote">&gt;&gt;      if (id &amp; ID0_SMS) {</span>
<span class="quote">&gt;&gt; -        u32 smr;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;          smmu-&gt;features |= ARM_SMMU_FEAT_STREAM_MATCH;</span>
<span class="quote">&gt;&gt;          size = (id &gt;&gt; ID0_NUMSMRG_SHIFT) &amp; ID0_NUMSMRG_MASK;</span>
<span class="quote">&gt;&gt;          if (size == 0) {</span>
<span class="quote">&gt;&gt; @@ -1774,21 +1816,6 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;              return -ENODEV;</span>
<span class="quote">&gt;&gt;          }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -        /*</span>
<span class="quote">&gt;&gt; -         * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt;&gt; -         * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt;&gt; -         * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt;&gt; -         */</span>
<span class="quote">&gt;&gt; -        smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; -        writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -        smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -        smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt; -        smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; -        writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -        smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -        smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;          /* Zero-initialised to mark as invalid */</span>
<span class="quote">&gt;&gt;          smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),</span>
<span class="quote">&gt;&gt;                        GFP_KERNEL);</span>
<span class="quote">&gt;&gt; @@ -1796,8 +1823,7 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;              return -ENOMEM;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;          dev_notice(smmu-&gt;dev,</span>
<span class="quote">&gt;&gt; -               &quot;\tstream matching with %lu register groups, mask 0x%x&quot;,</span>
<span class="quote">&gt;&gt; -               size, smmu-&gt;smr_mask_mask);</span>
<span class="quote">&gt;&gt; +               &quot;\tstream matching with %lu register groups&quot;, size);</span>
<span class="quote">&gt;&gt;      }</span>
<span class="quote">&gt;&gt;      /* s2cr-&gt;type == 0 means translation, so initialise explicitly */</span>
<span class="quote">&gt;&gt;      smmu-&gt;s2crs = devm_kmalloc_array(smmu-&gt;dev, size, sizeof(*smmu-&gt;s2crs),</span>
<span class="quote">&gt;&gt; @@ -2120,6 +2146,7 @@ static int arm_smmu_device_probe(struct platform_device *pdev)</span>
<span class="quote">&gt;&gt;      iommu_register_instance(dev-&gt;fwnode, &amp;arm_smmu_ops);</span>
<span class="quote">&gt;&gt;      platform_set_drvdata(pdev, smmu);</span>
<span class="quote">&gt;&gt;      arm_smmu_device_reset(smmu);</span>
<span class="quote">&gt;&gt; +    arm_smmu_test_smr_masks(smmu);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;      /* Oh, for a proper bus abstraction */</span>
<span class="quote">&gt;&gt;      if (!iommu_present(&amp;platform_bus_type))</span>
<span class="quote">&gt;&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172153">Tomasz Nowicki</a> - Jan. 19, 2017, 11:08 a.m.</div>
<pre class="content">
On 19.01.2017 11:57, Aleksey Makarov wrote:
<span class="quote">&gt; Hi Tomasz,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 01/19/2017 11:55 AM, Tomasz Nowicki wrote:</span>
<span class="quote">&gt;&gt; Hi Aleksey,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 17.01.2017 16:14, Aleksey Makarov wrote:</span>
<span class="quote">&gt;&gt;&gt; Enable the Extended Stream ID feature when available.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This patch on top of series &quot;KVM PCIe/MSI passthrough on ARM/ARM64</span>
<span class="quote">&gt;&gt;&gt; and IOVA reserved regions&quot; by Eric Auger [1] allows to passthrough</span>
<span class="quote">&gt;&gt;&gt; an external PCIe network card on a ThunderX server successfully.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Without this patch that card caused a warning like</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;     pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; during boot.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; [1] https://lkml.kernel.org/r/1484127714-3263-1-git-send-email-eric.auger@redhat.com</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I do not thing this is related to PCIe network card. It is rather common to all devices which bus number &gt; 127</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ----</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; iommu/arm-smmu: Support for Extended Stream ID (16 bit)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It is the time we have the real 16-bit Stream ID user, which is the ThunderX. Its IO topology uses 1:1 map for requester to stream ID translation:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; RC no. | Requester ID | Stream ID</span>
<span class="quote">&gt;&gt;        |              |</span>
<span class="quote">&gt;&gt; RC_0   | 0-FFFF ---&gt;  | 0-FFFF</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; which allows to get full 16-bit stream ID. Currently all devices with bus number &gt;= 128 (0x80) get non-zero 16th bit of BDF and stream ID (due to 1:1 map). Eventually SMMU drops such device because the stream ID is out of range. This is the case for all devices connected as external endpoints on ThunderX.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Technically the last sentence it is not correct as far as I can see.  There exists a device connected to PEM (external entpoint?) with BDF (== Stream ID) &lt;= 0x7fff:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	0004:21:00.0 VGA compatible controller: ASPEED Technology, Inc. ASPEED Graphics Family (rev 30)</span>

Right. You’ve got a point.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ----</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thank you for review.  May I change the commit message this way and keep your &#39;Reviewed-by&#39;?:</span>

Yes, the commit message is accurate now. Add my R-b please.
<span class="quote">
&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; iommu/arm-smmu: Support for Extended Stream ID (16 bit)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It is the time we have the real 16-bit Stream ID user, which is the</span>
<span class="quote">&gt; ThunderX. Its IO topology uses 1:1 map for requester ID to stream ID</span>
<span class="quote">&gt; translation for each root complex which allows to get full 16-bit</span>
<span class="quote">&gt; stream ID.  Firmware assigns bus IDs that are greater than 128 (0x80)</span>
<span class="quote">&gt; to some buses under PEM (external PCIe interface).  Eventually SMMU</span>
<span class="quote">&gt; drops devices on that buses because their stream ID is out of range:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; To fix above issue enable the Extended Stream ID optional feature when available.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;</span>

Thanks,
Tomasz
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="p_header">index 13d26009b8e0..861cc135722f 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu.c</span>
<span class="p_chunk">@@ -24,6 +24,7 @@</span> <span class="p_context"></span>
  *	- v7/v8 long-descriptor format
  *	- Non-secure access to the SMMU
  *	- Context fault reporting
<span class="p_add">+ *	- Extended Stream ID (16 bit)</span>
  */
 
 #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt
<span class="p_chunk">@@ -87,6 +88,7 @@</span> <span class="p_context"></span>
 #define sCR0_CLIENTPD			(1 &lt;&lt; 0)
 #define sCR0_GFRE			(1 &lt;&lt; 1)
 #define sCR0_GFIE			(1 &lt;&lt; 2)
<span class="p_add">+#define sCR0_EXIDENABLE			(1 &lt;&lt; 3)</span>
 #define sCR0_GCFGFRE			(1 &lt;&lt; 4)
 #define sCR0_GCFGFIE			(1 &lt;&lt; 5)
 #define sCR0_USFCFG			(1 &lt;&lt; 10)
<span class="p_chunk">@@ -126,6 +128,7 @@</span> <span class="p_context"></span>
 #define ID0_NUMIRPT_MASK		0xff
 #define ID0_NUMSIDB_SHIFT		9
 #define ID0_NUMSIDB_MASK		0xf
<span class="p_add">+#define ID0_EXIDS			(1 &lt;&lt; 8)</span>
 #define ID0_NUMSMRG_SHIFT		0
 #define ID0_NUMSMRG_MASK		0xff
 
<span class="p_chunk">@@ -169,6 +172,7 @@</span> <span class="p_context"></span>
 #define ARM_SMMU_GR0_S2CR(n)		(0xc00 + ((n) &lt;&lt; 2))
 #define S2CR_CBNDX_SHIFT		0
 #define S2CR_CBNDX_MASK			0xff
<span class="p_add">+#define S2CR_EXIDVALID			(1 &lt;&lt; 10)</span>
 #define S2CR_TYPE_SHIFT			16
 #define S2CR_TYPE_MASK			0x3
 enum arm_smmu_s2cr_type {
<span class="p_chunk">@@ -354,6 +358,7 @@</span> <span class="p_context"> struct arm_smmu_device {</span>
 #define ARM_SMMU_FEAT_FMT_AARCH64_64K	(1 &lt;&lt; 9)
 #define ARM_SMMU_FEAT_FMT_AARCH32_L	(1 &lt;&lt; 10)
 #define ARM_SMMU_FEAT_FMT_AARCH32_S	(1 &lt;&lt; 11)
<span class="p_add">+#define ARM_SMMU_FEAT_EXIDS		(1 &lt;&lt; 12)</span>
 	u32				features;
 
 #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)
<span class="p_chunk">@@ -1051,7 +1056,7 @@</span> <span class="p_context"> static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
 	struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;
 	u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;
 
<span class="p_del">-	if (smr-&gt;valid)</span>
<span class="p_add">+	if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
 		reg |= SMR_VALID;
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));
 }
<span class="p_chunk">@@ -1063,6 +1068,9 @@</span> <span class="p_context"> static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
 		  (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |
 		  (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="p_add">+	    smmu-&gt;smrs[idx].valid)</span>
<span class="p_add">+		reg |= S2CR_EXIDVALID;</span>
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));
 }
 
<span class="p_chunk">@@ -1073,6 +1081,34 @@</span> <span class="p_context"> static void arm_smmu_write_sme(struct arm_smmu_device *smmu, int idx)</span>
 		arm_smmu_write_smr(smmu, idx);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The width of SMR&#39;s mask field depends on sCR0_EXIDENABLE, so this function</span>
<span class="p_add">+ * should be called after sCR0 is written.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static void arm_smmu_test_smr_masks(struct arm_smmu_device *smmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void __iomem *gr0_base = ARM_SMMU_GR0(smmu);</span>
<span class="p_add">+	u32 smr;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!smmu-&gt;smrs)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="p_add">+	 * bits are set, so check each one separately. We can reject</span>
<span class="p_add">+	 * masters later if they try to claim IDs outside these masks.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_add">+	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_add">+	writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+	smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int arm_smmu_find_sme(struct arm_smmu_device *smmu, u16 id, u16 mask)
 {
 	struct arm_smmu_smr *smrs = smmu-&gt;smrs;
<span class="p_chunk">@@ -1674,6 +1710,9 @@</span> <span class="p_context"> static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
 	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)
 		reg |= sCR0_VMID16EN;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="p_add">+		reg |= sCR0_EXIDENABLE;</span>
<span class="p_add">+</span>
 	/* Push the button */
 	__arm_smmu_tlb_sync(smmu);
 	writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
<span class="p_chunk">@@ -1761,11 +1800,14 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);
 
 	/* Max. number of entries we have for stream matching/indexing */
<span class="p_del">-	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="p_add">+		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="p_add">+		size = 1 &lt;&lt; 16;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	}</span>
 	smmu-&gt;streamid_mask = size - 1;
 	if (id &amp; ID0_SMS) {
<span class="p_del">-		u32 smr;</span>
<span class="p_del">-</span>
 		smmu-&gt;features |= ARM_SMMU_FEAT_STREAM_MATCH;
 		size = (id &gt;&gt; ID0_NUMSMRG_SHIFT) &amp; ID0_NUMSMRG_MASK;
 		if (size == 0) {
<span class="p_chunk">@@ -1774,21 +1816,6 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			return -ENODEV;
 		}
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="p_del">-		 * bits are set, so check each one separately. We can reject</span>
<span class="p_del">-		 * masters later if they try to claim IDs outside these masks.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_del">-</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_del">-</span>
 		/* Zero-initialised to mark as invalid */
 		smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),
 					  GFP_KERNEL);
<span class="p_chunk">@@ -1796,8 +1823,7 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			return -ENOMEM;
 
 		dev_notice(smmu-&gt;dev,
<span class="p_del">-			   &quot;\tstream matching with %lu register groups, mask 0x%x&quot;,</span>
<span class="p_del">-			   size, smmu-&gt;smr_mask_mask);</span>
<span class="p_add">+			   &quot;\tstream matching with %lu register groups&quot;, size);</span>
 	}
 	/* s2cr-&gt;type == 0 means translation, so initialise explicitly */
 	smmu-&gt;s2crs = devm_kmalloc_array(smmu-&gt;dev, size, sizeof(*smmu-&gt;s2crs),
<span class="p_chunk">@@ -2120,6 +2146,7 @@</span> <span class="p_context"> static int arm_smmu_device_probe(struct platform_device *pdev)</span>
 	iommu_register_instance(dev-&gt;fwnode, &amp;arm_smmu_ops);
 	platform_set_drvdata(pdev, smmu);
 	arm_smmu_device_reset(smmu);
<span class="p_add">+	arm_smmu_test_smr_masks(smmu);</span>
 
 	/* Oh, for a proper bus abstraction */
 	if (!iommu_present(&amp;platform_bus_type))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



