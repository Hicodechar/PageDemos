
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1,07/11] x86/kasan: use per-page shadow memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1,07/11] x86/kasan: use per-page shadow memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=39721">Joonsoo Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 16, 2017, 1:16 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1494897409-14408-8-git-send-email-iamjoonsoo.kim@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9728279/mbox/"
   >mbox</a>
|
   <a href="/patch/9728279/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9728279/">/patch/9728279/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A9A7560380 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 May 2017 01:19:36 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 903E7289E8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 May 2017 01:19:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 84C35289EB; Tue, 16 May 2017 01:19:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E1E82289E8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 May 2017 01:19:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751711AbdEPBTa (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 15 May 2017 21:19:30 -0400
Received: from mail-pf0-f196.google.com ([209.85.192.196]:33758 &quot;EHLO
	mail-pf0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751373AbdEPBSH (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 15 May 2017 21:18:07 -0400
Received: by mail-pf0-f196.google.com with SMTP id f27so7514743pfe.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 15 May 2017 18:18:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=NhGPudGzVWmIH5xF0LgzDjh+4V+2YBhmxi86fvkYQso=;
	b=ec/S7m6pCETwAi79VWoeaeRCkB12ogmiMwImTmDON5ae0KjoSlAtdNlPobVeoFV0F1
	RKeiCxp+DDa1ZAASyWvdpVvbYnjEqqWeJR4PqhGMa+1N7YbyFlh1sSy8cmWT9jQ85f1R
	wSI9mys38wWoTJLpkwDrGgqjxFXWCQNibt71agG0ZNp4oa1Pu3ibcYy9i7RDZYz1JSpy
	aGstOiQGFJLeDW+CX0QHBI9qPDFbSW2RhcBJdWZMiLrF3/QApFMV2Sru28ZA4lkPIrhI
	PSihJFGquiZgsfkokIMjPUYEFt4CwWbDK1JH+ePXkjU9v+fFmS3K0mc2dAHu1f6WJuhk
	9HGQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=NhGPudGzVWmIH5xF0LgzDjh+4V+2YBhmxi86fvkYQso=;
	b=Bu7x2KRNiAl+ksFSt2/0Bba9E6e51FUBGkL96vVJ9HdugP/PP+zU3ZUV+p51p5nQjc
	UfqRDAYGR2gCZlNvOnQ6qk+CvHIpnqWkX9MjzXDOYzvBO9qviEOQHj/AhOiQBc4CrDtK
	Q87fxVQjDExK25WlKjF0Gc6OOiWUtqOS+EOxfvP9GA/z4i/aqc0zkoM5f9lmTH6ACnMB
	++R+/dO0yUxY9tUkMUKrPnayakCl6pDgMy4hgSqnPOJJly2T42gX941wqygVAjC5iP00
	H0w5ml7NzNBa1pzxnPIeWysagp2uJ13636I1gPz4qpIzZkDe02sv34kSEirY/iAd54vO
	eJLg==
X-Gm-Message-State: AODbwcBVT2w152ZgLcSpNG28njoYEGddlmNIL++7303YgNYeP8+2U5Q0
	+wlRU/y23ElDlA==
X-Received: by 10.84.178.131 with SMTP id z3mr12092237plb.175.1494897481624; 
	Mon, 15 May 2017 18:18:01 -0700 (PDT)
Received: from localhost.localdomain ([124.56.155.17])
	by smtp.gmail.com with ESMTPSA id
	c7sm25648186pfk.103.2017.05.15.18.17.58
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 15 May 2017 18:18:00 -0700 (PDT)
From: js1304@gmail.com
X-Google-Original-From: iamjoonsoo.kim@lge.com
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, kasan-dev@googlegroups.com,
	linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, kernel-team@lge.com,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;
Subject: [PATCH v1 07/11] x86/kasan: use per-page shadow memory
Date: Tue, 16 May 2017 10:16:45 +0900
Message-Id: &lt;1494897409-14408-8-git-send-email-iamjoonsoo.kim@lge.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1494897409-14408-1-git-send-email-iamjoonsoo.kim@lge.com&gt;
References: &lt;1494897409-14408-1-git-send-email-iamjoonsoo.kim@lge.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=39721">Joonsoo Kim</a> - May 16, 2017, 1:16 a.m.</div>
<pre class="content">
<span class="from">From: Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;</span>

This patch enables for x86 to use per-page shadow memory.
Most of initialization code for per-page shadow memory is
copied from the code for original shadow memory.

There are two things that aren&#39;t trivial.
1. per-page shadow memory for global variable is initialized
as the bypass range. It&#39;s not the target for on-demand shadow
memory allocation since shadow memory for global variable is
always required.
2. per-page shadow memory for the module is initialized as the
bypass range since on-demand shadow memory allocation
for the module is already implemented.

Note that on-demand allocation for original shadow memory isn&#39;t
implemented yet so there is no memory saving on this patch.
It will be implemented in the following patch.
<span class="signed-off-by">
Signed-off-by: Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;</span>
---
 arch/x86/include/asm/kasan.h |  6 +++
 arch/x86/mm/kasan_init_64.c  | 87 +++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 84 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/kasan.h b/arch/x86/include/asm/kasan.h</span>
<span class="p_header">index f527b02..cfa63c7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/kasan.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kasan.h</span>
<span class="p_chunk">@@ -18,6 +18,12 @@</span> <span class="p_context"></span>
  */
 #define KASAN_SHADOW_END        (KASAN_SHADOW_START + (1ULL &lt;&lt; (__VIRTUAL_MASK_SHIFT - 3)))
 
<span class="p_add">+#define HAVE_KASAN_PER_PAGE_SHADOW 1</span>
<span class="p_add">+#define KASAN_PSHADOW_SIZE	((1ULL &lt;&lt; (47 - PAGE_SHIFT)))</span>
<span class="p_add">+#define KASAN_PSHADOW_START	(kasan_pshadow_offset + \</span>
<span class="p_add">+					(0xffff800000000000ULL &gt;&gt; PAGE_SHIFT))</span>
<span class="p_add">+#define KASAN_PSHADOW_END	(KASAN_PSHADOW_START + KASAN_PSHADOW_SIZE)</span>
<span class="p_add">+</span>
 #ifndef __ASSEMBLY__
 
 #ifdef CONFIG_KASAN
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index adc673b..1c300bf 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -15,19 +15,29 @@</span> <span class="p_context"></span>
 extern pgd_t early_level4_pgt[PTRS_PER_PGD];
 extern struct range pfn_mapped[E820_MAX_ENTRIES];
 
<span class="p_del">-static int __init map_range(struct range *range)</span>
<span class="p_add">+static int __init map_range(struct range *range, bool pshadow)</span>
 {
 	unsigned long start;
 	unsigned long end;
 
<span class="p_del">-	start = (unsigned long)kasan_mem_to_shadow(pfn_to_kaddr(range-&gt;start));</span>
<span class="p_del">-	end = (unsigned long)kasan_mem_to_shadow(pfn_to_kaddr(range-&gt;end));</span>
<span class="p_add">+	start = (unsigned long)pfn_to_kaddr(range-&gt;start);</span>
<span class="p_add">+	end = (unsigned long)pfn_to_kaddr(range-&gt;end);</span>
 
 	/*
 	 * end + 1 here is intentional. We check several shadow bytes in advance
 	 * to slightly speed up fastpath. In some rare cases we could cross
 	 * boundary of mapped shadow, so we just map some more here.
 	 */
<span class="p_add">+	if (pshadow) {</span>
<span class="p_add">+		start = (unsigned long)kasan_mem_to_pshadow((void *)start);</span>
<span class="p_add">+		end = (unsigned long)kasan_mem_to_pshadow((void *)end);</span>
<span class="p_add">+</span>
<span class="p_add">+		return vmemmap_populate(start, end + 1, NUMA_NO_NODE);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	start = (unsigned long)kasan_mem_to_shadow((void *)start);</span>
<span class="p_add">+	end = (unsigned long)kasan_mem_to_shadow((void *)end);</span>
<span class="p_add">+</span>
 	return vmemmap_populate(start, end + 1, NUMA_NO_NODE);
 }
 
<span class="p_chunk">@@ -49,11 +59,10 @@</span> <span class="p_context"> static void __init clear_pgds(unsigned long start,</span>
 	}
 }
 
<span class="p_del">-static void __init kasan_map_early_shadow(pgd_t *pgd)</span>
<span class="p_add">+static void __init kasan_map_early_shadow(pgd_t *pgd,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	int i;
<span class="p_del">-	unsigned long start = KASAN_SHADOW_START;</span>
<span class="p_del">-	unsigned long end = KASAN_SHADOW_END;</span>
 
 	for (i = pgd_index(start); start &lt; end; i++) {
 		switch (CONFIG_PGTABLE_LEVELS) {
<span class="p_chunk">@@ -109,8 +118,35 @@</span> <span class="p_context"> void __init kasan_early_init(void)</span>
 	for (i = 0; CONFIG_PGTABLE_LEVELS &gt;= 5 &amp;&amp; i &lt; PTRS_PER_P4D; i++)
 		kasan_zero_p4d[i] = __p4d(p4d_val);
 
<span class="p_del">-	kasan_map_early_shadow(early_level4_pgt);</span>
<span class="p_del">-	kasan_map_early_shadow(init_level4_pgt);</span>
<span class="p_add">+	kasan_map_early_shadow(early_level4_pgt,</span>
<span class="p_add">+		KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+	kasan_map_early_shadow(init_level4_pgt,</span>
<span class="p_add">+		KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_early_init_pshadow();</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_map_early_shadow(early_level4_pgt,</span>
<span class="p_add">+		KASAN_PSHADOW_START, KASAN_PSHADOW_END);</span>
<span class="p_add">+	kasan_map_early_shadow(init_level4_pgt,</span>
<span class="p_add">+		KASAN_PSHADOW_START, KASAN_PSHADOW_END);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Prepare black shadow memory */</span>
<span class="p_add">+	pte_val = __pa_nodebug(kasan_black_page) | __PAGE_KERNEL_RO;</span>
<span class="p_add">+	pmd_val = __pa_nodebug(kasan_black_pte) | _KERNPG_TABLE;</span>
<span class="p_add">+	pud_val = __pa_nodebug(kasan_black_pmd) | _KERNPG_TABLE;</span>
<span class="p_add">+	p4d_val = __pa_nodebug(kasan_black_pud) | _KERNPG_TABLE;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; PTRS_PER_PTE; i++)</span>
<span class="p_add">+		kasan_black_pte[i] = __pte(pte_val);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; PTRS_PER_PMD; i++)</span>
<span class="p_add">+		kasan_black_pmd[i] = __pmd(pmd_val);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; PTRS_PER_PUD; i++)</span>
<span class="p_add">+		kasan_black_pud[i] = __pud(pud_val);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; CONFIG_PGTABLE_LEVELS &gt;= 5 &amp;&amp; i &lt; PTRS_PER_P4D; i++)</span>
<span class="p_add">+		kasan_black_p4d[i] = __p4d(p4d_val);</span>
 }
 
 void __init kasan_init(void)
<span class="p_chunk">@@ -135,7 +171,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 		if (pfn_mapped[i].end == 0)
 			break;
 
<span class="p_del">-		if (map_range(&amp;pfn_mapped[i]))</span>
<span class="p_add">+		if (map_range(&amp;pfn_mapped[i], false))</span>
 			panic(&quot;kasan: unable to allocate shadow!&quot;);
 	}
 	kasan_populate_shadow(
<span class="p_chunk">@@ -151,6 +187,39 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 			(void *)KASAN_SHADOW_END,
 			true, false);
 
<span class="p_add">+	/* For per-page shadow */</span>
<span class="p_add">+	clear_pgds(KASAN_PSHADOW_START, KASAN_PSHADOW_END);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow((void *)KASAN_PSHADOW_START,</span>
<span class="p_add">+			kasan_mem_to_pshadow((void *)PAGE_OFFSET),</span>
<span class="p_add">+			true, false);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; E820_MAX_ENTRIES; i++) {</span>
<span class="p_add">+		if (pfn_mapped[i].end == 0)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (map_range(&amp;pfn_mapped[i], true))</span>
<span class="p_add">+			panic(&quot;kasan: unable to allocate shadow!&quot;);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	kasan_populate_shadow(</span>
<span class="p_add">+		kasan_mem_to_pshadow((void *)PAGE_OFFSET + MAXMEM),</span>
<span class="p_add">+		kasan_mem_to_pshadow((void *)__START_KERNEL_map),</span>
<span class="p_add">+		true, false);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow(</span>
<span class="p_add">+		kasan_mem_to_pshadow(_stext),</span>
<span class="p_add">+		kasan_mem_to_pshadow(_end),</span>
<span class="p_add">+		false, false);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow(</span>
<span class="p_add">+		kasan_mem_to_pshadow((void *)MODULES_VADDR),</span>
<span class="p_add">+		kasan_mem_to_pshadow((void *)MODULES_END),</span>
<span class="p_add">+		false, false);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow(kasan_mem_to_pshadow((void *)MODULES_END),</span>
<span class="p_add">+			(void *)KASAN_PSHADOW_END,</span>
<span class="p_add">+			true, false);</span>
<span class="p_add">+</span>
 	load_cr3(init_level4_pgt);
 	__flush_tlb_all();
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



