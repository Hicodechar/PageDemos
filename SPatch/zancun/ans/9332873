
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/3] mm, mincore2(): retrieve tlb-size attributes of an address range - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/3] mm, mincore2(): retrieve tlb-size attributes of an address range</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=320">Dan Williams</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 15, 2016, 6:54 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;147392248390.9873.17462460294407718981.stgit@dwillia2-desk3.amr.corp.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9332873/mbox/"
   >mbox</a>
|
   <a href="/patch/9332873/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9332873/">/patch/9332873/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	12249608A1 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Sep 2016 06:58:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 005EF29325
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Sep 2016 06:58:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E958729327; Thu, 15 Sep 2016 06:58:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2D8BF29309
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Sep 2016 06:58:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933987AbcIOG54 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Sep 2016 02:57:56 -0400
Received: from mga11.intel.com ([192.55.52.93]:40814 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933923AbcIOG5r (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Sep 2016 02:57:47 -0400
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by fmsmga102.fm.intel.com with ESMTP; 14 Sep 2016 23:57:48 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.30,338,1470726000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;879032030&quot;
Received: from dwillia2-desk3.jf.intel.com (HELO
	dwillia2-desk3.amr.corp.intel.com) ([10.54.39.14])
	by orsmga003.jf.intel.com with ESMTP; 14 Sep 2016 23:57:47 -0700
Subject: [PATCH v2 3/3] mm,
	mincore2(): retrieve tlb-size attributes of an address range
From: Dan Williams &lt;dan.j.williams@intel.com&gt;
To: linux-mm@kvack.org
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Xiao Guangrong &lt;guangrong.xiao@linux.intel.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, linux-nvdimm@lists.01.org,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;, david@fromorbit.com,
	linux-kernel@vger.kernel.org, npiggin@gmail.com, xfs@oss.sgi.com,
	linux-fsdevel@vger.kernel.org,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, hch@lst.de,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Date: Wed, 14 Sep 2016 23:54:44 -0700
Message-ID: &lt;147392248390.9873.17462460294407718981.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
In-Reply-To: &lt;147392246509.9873.17750323049785100997.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
References: &lt;147392246509.9873.17750323049785100997.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
User-Agent: StGit/0.17.1-9-g687f
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=320">Dan Williams</a> - Sept. 15, 2016, 6:54 a.m.</div>
<pre class="content">
There are cases, particularly for testing and validating a configuration
to know the hardware mapping geometry of the pages in a given process
address range.  Consider filesystem-dax where a configuration needs to
take care to align partitions and block allocations before huge page
mappings might be used, or anonymous-transparent-huge-pages where a
process is opportunistically assigned large pages.  mincore2() allows
these configurations to be surveyed and validated.

The implementation takes advantage of the unused bits in the per-page
byte returned for each PAGE_SIZE extent of a given address range.  The
new format of each vector byte is:

(TLB_SHIFT - PAGE_SHIFT) &lt;&lt; 1 | page_present

[1]: https://lkml.org/lkml/2016/9/7/61

Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Cc: Xiao Guangrong &lt;guangrong.xiao@linux.intel.com&gt;
Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
<span class="signed-off-by">Signed-off-by: Dan Williams &lt;dan.j.williams@intel.com&gt;</span>
---
 include/linux/syscalls.h               |    2 
 include/uapi/asm-generic/mman-common.h |    2 
 kernel/sys_ni.c                        |    1 
 mm/mincore.c                           |  130 ++++++++++++++++++++++++--------
 4 files changed, 104 insertions(+), 31 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h</span>
<span class="p_header">index d02239022bd0..4aa2ee7e359a 100644</span>
<span class="p_header">--- a/include/linux/syscalls.h</span>
<span class="p_header">+++ b/include/linux/syscalls.h</span>
<span class="p_chunk">@@ -467,6 +467,8 @@</span> <span class="p_context"> asmlinkage long sys_munlockall(void);</span>
 asmlinkage long sys_madvise(unsigned long start, size_t len, int behavior);
 asmlinkage long sys_mincore(unsigned long start, size_t len,
 				unsigned char __user * vec);
<span class="p_add">+asmlinkage long sys_mincore2(unsigned long start, size_t len,</span>
<span class="p_add">+				unsigned char __user * vec, int flags);</span>
 
 asmlinkage long sys_pivot_root(const char __user *new_root,
 				const char __user *put_old);
<span class="p_header">diff --git a/include/uapi/asm-generic/mman-common.h b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">index 58274382a616..6c7eca1a85ca 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_chunk">@@ -72,4 +72,6 @@</span> <span class="p_context"></span>
 #define MAP_HUGE_SHIFT	26
 #define MAP_HUGE_MASK	0x3f
 
<span class="p_add">+#define MINCORE_ORDER	1		/* retrieve hardware mapping-size-order */</span>
<span class="p_add">+</span>
 #endif /* __ASM_GENERIC_MMAN_COMMON_H */
<span class="p_header">diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c</span>
<span class="p_header">index 2c5e3a8e00d7..e14b87834054 100644</span>
<span class="p_header">--- a/kernel/sys_ni.c</span>
<span class="p_header">+++ b/kernel/sys_ni.c</span>
<span class="p_chunk">@@ -197,6 +197,7 @@</span> <span class="p_context"> cond_syscall(sys_mlockall);</span>
 cond_syscall(sys_munlockall);
 cond_syscall(sys_mlock2);
 cond_syscall(sys_mincore);
<span class="p_add">+cond_syscall(sys_mincore2);</span>
 cond_syscall(sys_madvise);
 cond_syscall(sys_mremap);
 cond_syscall(sys_remap_file_pages);
<span class="p_header">diff --git a/mm/mincore.c b/mm/mincore.c</span>
<span class="p_header">index c0b5ba965200..b0b83ef086eb 100644</span>
<span class="p_header">--- a/mm/mincore.c</span>
<span class="p_header">+++ b/mm/mincore.c</span>
<span class="p_chunk">@@ -15,25 +15,61 @@</span> <span class="p_context"></span>
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/swapops.h&gt;
 #include &lt;linux/hugetlb.h&gt;
<span class="p_add">+#include &lt;linux/dax.h&gt;</span>
 
 #include &lt;asm/uaccess.h&gt;
 #include &lt;asm/pgtable.h&gt;
 
<span class="p_add">+#ifndef MINCORE_ORDER</span>
<span class="p_add">+#define MINCORE_ORDER 0</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#define MINCORE_ORDER_MASK 0x3e</span>
<span class="p_add">+#define MINCORE_ORDER_SHIFT 1</span>
<span class="p_add">+</span>
<span class="p_add">+struct mincore_params {</span>
<span class="p_add">+	unsigned char *vec;</span>
<span class="p_add">+	int flags;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static void mincore_set(unsigned char *vec, struct vm_area_struct *vma, int nr,</span>
<span class="p_add">+		int flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned char mincore = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!nr) {</span>
<span class="p_add">+		*vec = 0;</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (flags &amp; MINCORE_ORDER) {</span>
<span class="p_add">+		unsigned char order = ilog2(nr);</span>
<span class="p_add">+</span>
<span class="p_add">+		WARN_ON((order &lt;&lt; MINCORE_ORDER_SHIFT) &amp; ~MINCORE_ORDER_MASK);</span>
<span class="p_add">+		mincore |= order &lt;&lt; MINCORE_ORDER_SHIFT;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	memset(vec, mincore, nr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int mincore_hugetlb(pte_t *pte, unsigned long hmask, unsigned long addr,
 			unsigned long end, struct mm_walk *walk)
 {
 #ifdef CONFIG_HUGETLB_PAGE
<span class="p_add">+	struct mincore_params *p = walk-&gt;private;</span>
<span class="p_add">+	int nr = (end - addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	unsigned char *vec = p-&gt;vec;</span>
 	unsigned char present;
<span class="p_del">-	unsigned char *vec = walk-&gt;private;</span>
 
 	/*
 	 * Hugepages under user process are always in RAM and never
 	 * swapped out, but theoretically it needs to be checked.
 	 */
 	present = pte &amp;&amp; !huge_pte_none(huge_ptep_get(pte));
<span class="p_del">-	for (; addr != end; vec++, addr += PAGE_SIZE)</span>
<span class="p_del">-		*vec = present;</span>
<span class="p_del">-	walk-&gt;private = vec;</span>
<span class="p_add">+	if (!present)</span>
<span class="p_add">+		memset(vec, 0, nr);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		mincore_set(vec, walk-&gt;vma, nr, p-&gt;flags);</span>
<span class="p_add">+	p-&gt;vec = vec + nr;</span>
 #else
 	BUG();
 #endif
<span class="p_chunk">@@ -82,20 +118,24 @@</span> <span class="p_context"> static unsigned char mincore_page(struct address_space *mapping, pgoff_t pgoff)</span>
 }
 
 static int __mincore_unmapped_range(unsigned long addr, unsigned long end,
<span class="p_del">-				struct vm_area_struct *vma, unsigned char *vec)</span>
<span class="p_add">+				struct vm_area_struct *vma, unsigned char *vec,</span>
<span class="p_add">+				int flags)</span>
 {
 	unsigned long nr = (end - addr) &gt;&gt; PAGE_SHIFT;
<span class="p_add">+	unsigned char present;</span>
 	int i;
 
 	if (vma-&gt;vm_file) {
 		pgoff_t pgoff;
 
 		pgoff = linear_page_index(vma, addr);
<span class="p_del">-		for (i = 0; i &lt; nr; i++, pgoff++)</span>
<span class="p_del">-			vec[i] = mincore_page(vma-&gt;vm_file-&gt;f_mapping, pgoff);</span>
<span class="p_add">+		for (i = 0; i &lt; nr; i++, pgoff++) {</span>
<span class="p_add">+			present = mincore_page(vma-&gt;vm_file-&gt;f_mapping, pgoff);</span>
<span class="p_add">+			mincore_set(vec + i, vma, present, flags);</span>
<span class="p_add">+		}</span>
 	} else {
 		for (i = 0; i &lt; nr; i++)
<span class="p_del">-			vec[i] = 0;</span>
<span class="p_add">+			mincore_set(vec + i, vma, 0, flags);</span>
 	}
 	return nr;
 }
<span class="p_chunk">@@ -103,8 +143,11 @@</span> <span class="p_context"> static int __mincore_unmapped_range(unsigned long addr, unsigned long end,</span>
 static int mincore_unmapped_range(unsigned long addr, unsigned long end,
 				   struct mm_walk *walk)
 {
<span class="p_del">-	walk-&gt;private += __mincore_unmapped_range(addr, end,</span>
<span class="p_del">-						  walk-&gt;vma, walk-&gt;private);</span>
<span class="p_add">+	struct mincore_params *p = walk-&gt;private;</span>
<span class="p_add">+	int nr = __mincore_unmapped_range(addr, end, walk-&gt;vma, p-&gt;vec,</span>
<span class="p_add">+			p-&gt;flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	p-&gt;vec += nr;</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -114,18 +157,20 @@</span> <span class="p_context"> static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,</span>
 	spinlock_t *ptl;
 	struct vm_area_struct *vma = walk-&gt;vma;
 	pte_t *ptep;
<span class="p_del">-	unsigned char *vec = walk-&gt;private;</span>
<span class="p_add">+	struct mincore_params *p = walk-&gt;private;</span>
<span class="p_add">+	unsigned char *vec = p-&gt;vec;</span>
 	int nr = (end - addr) &gt;&gt; PAGE_SHIFT;
<span class="p_add">+	int flags = p-&gt;flags;</span>
 
 	ptl = pmd_trans_huge_lock(pmd, vma);
 	if (ptl) {
<span class="p_del">-		memset(vec, 1, nr);</span>
<span class="p_add">+		mincore_set(vec, vma, nr, flags);</span>
 		spin_unlock(ptl);
 		goto out;
 	}
 
 	if (pmd_trans_unstable(pmd)) {
<span class="p_del">-		__mincore_unmapped_range(addr, end, vma, vec);</span>
<span class="p_add">+		__mincore_unmapped_range(addr, end, vma, vec, flags);</span>
 		goto out;
 	}
 
<span class="p_chunk">@@ -135,9 +180,9 @@</span> <span class="p_context"> static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,</span>
 
 		if (pte_none(pte))
 			__mincore_unmapped_range(addr, addr + PAGE_SIZE,
<span class="p_del">-						 vma, vec);</span>
<span class="p_add">+						 vma, vec, flags);</span>
 		else if (pte_present(pte))
<span class="p_del">-			*vec = 1;</span>
<span class="p_add">+			mincore_set(vec, vma, 1, flags);</span>
 		else { /* pte is a swap entry */
 			swp_entry_t entry = pte_to_swp_entry(pte);
 
<span class="p_chunk">@@ -146,14 +191,17 @@</span> <span class="p_context"> static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,</span>
 				 * migration or hwpoison entries are always
 				 * uptodate
 				 */
<span class="p_del">-				*vec = 1;</span>
<span class="p_add">+				mincore_set(vec, vma, 1, flags);</span>
 			} else {
 #ifdef CONFIG_SWAP
<span class="p_del">-				*vec = mincore_page(swap_address_space(entry),</span>
<span class="p_del">-					entry.val);</span>
<span class="p_add">+				unsigned char present;</span>
<span class="p_add">+</span>
<span class="p_add">+				present = mincore_page(swap_address_space(entry),</span>
<span class="p_add">+						entry.val);</span>
<span class="p_add">+				mincore_set(vec, vma, present, flags);</span>
 #else
 				WARN_ON(1);
<span class="p_del">-				*vec = 1;</span>
<span class="p_add">+				mincore_set(vec, vma, 1, flags);</span>
 #endif
 			}
 		}
<span class="p_chunk">@@ -161,7 +209,7 @@</span> <span class="p_context"> static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,</span>
 	}
 	pte_unmap_unlock(ptep - 1, ptl);
 out:
<span class="p_del">-	walk-&gt;private += nr;</span>
<span class="p_add">+	p-&gt;vec = vec + nr;</span>
 	cond_resched();
 	return 0;
 }
<span class="p_chunk">@@ -171,16 +219,21 @@</span> <span class="p_context"> out:</span>
  * all the arguments, we hold the mmap semaphore: we should
  * just return the amount of info we&#39;re asked for.
  */
<span class="p_del">-static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *vec)</span>
<span class="p_add">+static long do_mincore(unsigned long addr, unsigned long pages,</span>
<span class="p_add">+		unsigned char *vec, int flags)</span>
 {
 	struct vm_area_struct *vma;
 	unsigned long end;
 	int err;
<span class="p_add">+	struct mincore_params p = {</span>
<span class="p_add">+		.vec = vec,</span>
<span class="p_add">+		.flags = flags,</span>
<span class="p_add">+	};</span>
 	struct mm_walk mincore_walk = {
 		.pmd_entry = mincore_pte_range,
 		.pte_hole = mincore_unmapped_range,
 		.hugetlb_entry = mincore_hugetlb,
<span class="p_del">-		.private = vec,</span>
<span class="p_add">+		.private = &amp;p,</span>
 	};
 
 	vma = find_vma(current-&gt;mm, addr);
<span class="p_chunk">@@ -195,13 +248,18 @@</span> <span class="p_context"> static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *v</span>
 }
 
 /*
<span class="p_del">- * The mincore(2) system call.</span>
<span class="p_add">+ * The mincore2(2) system call.</span>
  *
<span class="p_del">- * mincore() returns the memory residency status of the pages in the</span>
<span class="p_del">- * current process&#39;s address space specified by [addr, addr + len).</span>
<span class="p_del">- * The status is returned in a vector of bytes.  The least significant</span>
<span class="p_del">- * bit of each byte is 1 if the referenced page is in memory, otherwise</span>
<span class="p_del">- * it is zero.</span>
<span class="p_add">+ * mincore2() returns the memory residency status of the pages in the</span>
<span class="p_add">+ * current process&#39;s address space specified by [addr, addr + len).  The</span>
<span class="p_add">+ * status is returned in a vector of bytes.  The least significant bit</span>
<span class="p_add">+ * of each byte is 1 if the referenced page is in memory, otherwise it</span>
<span class="p_add">+ * is zero.  When &#39;flags&#39; is non-zero each byte additionally contains an</span>
<span class="p_add">+ * indication of the hardware mapping size of each page (bits 1 through</span>
<span class="p_add">+ * 5 of each vector byte).  Where the order relates to the hardware</span>
<span class="p_add">+ * mapping size backing the given logical-page.  For example, a present</span>
<span class="p_add">+ * 2MB-mapped-huge-page would correspond to 512 vector entries with the</span>
<span class="p_add">+ * value (9 &lt;&lt; 1) | (1) =&gt; 0x13</span>
  *
  * Because the status of a page can change after mincore() checks it
  * but before it returns to the application, the returned vector may
<span class="p_chunk">@@ -218,8 +276,8 @@</span> <span class="p_context"> static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *v</span>
  *		mapped
  *  -EAGAIN - A kernel resource was temporarily unavailable.
  */
<span class="p_del">-SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,</span>
<span class="p_del">-		unsigned char __user *, vec)</span>
<span class="p_add">+SYSCALL_DEFINE4(mincore2, unsigned long, start, size_t, len,</span>
<span class="p_add">+		unsigned char __user *, vec, int, flags)</span>
 {
 	long retval;
 	unsigned long pages;
<span class="p_chunk">@@ -229,6 +287,10 @@</span> <span class="p_context"> SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,</span>
 	if (start &amp; ~PAGE_MASK)
 		return -EINVAL;
 
<span class="p_add">+	/* Check that undefined flags are zero */</span>
<span class="p_add">+	if (flags &amp; ~MINCORE_ORDER)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
 	/* ..and we need to be passed a valid user-space range */
 	if (!access_ok(VERIFY_READ, (void __user *) start, len))
 		return -ENOMEM;
<span class="p_chunk">@@ -251,7 +313,7 @@</span> <span class="p_context"> SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,</span>
 		 * the temporary buffer size.
 		 */
 		down_read(&amp;current-&gt;mm-&gt;mmap_sem);
<span class="p_del">-		retval = do_mincore(start, min(pages, PAGE_SIZE), tmp);</span>
<span class="p_add">+		retval = do_mincore(start, min(pages, PAGE_SIZE), tmp, flags);</span>
 		up_read(&amp;current-&gt;mm-&gt;mmap_sem);
 
 		if (retval &lt;= 0)
<span class="p_chunk">@@ -268,3 +330,9 @@</span> <span class="p_context"> SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,</span>
 	free_page((unsigned long) tmp);
 	return retval;
 }
<span class="p_add">+</span>
<span class="p_add">+SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,</span>
<span class="p_add">+		unsigned char __user *, vec)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sys_mincore2(start, len, vec, 0);</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



