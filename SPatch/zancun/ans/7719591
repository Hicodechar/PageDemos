
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2.6.32,19/38,19/38] pagemap: hide physical addresses from non-privileged users - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2.6.32,19/38,19/38] pagemap: hide physical addresses from non-privileged users</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 29, 2015, 9:47 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151129214703.685445143@1wt.eu&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7719591/mbox/"
   >mbox</a>
|
   <a href="/patch/7719591/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7719591/">/patch/7719591/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 00C36BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Nov 2015 22:05:23 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0FABC2058E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Nov 2015 22:05:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 096C7205DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 29 Nov 2015 22:05:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753699AbbK2WFP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 29 Nov 2015 17:05:15 -0500
Received: from wtarreau.pck.nerim.net ([62.212.114.60]:56520 &quot;EHLO 1wt.eu&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753355AbbK2WBc (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 29 Nov 2015 17:01:32 -0500
Message-Id: &lt;20151129214703.685445143@1wt.eu&gt;
User-Agent: quilt/0.63-1
Date: Sun, 29 Nov 2015 22:47:21 +0100
From: Willy Tarreau &lt;w@1wt.eu&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org
Cc: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Mark Williamson &lt;mwilliamson@undo-software.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Ben Hutchings &lt;ben@decadent.org.uk&gt;, Willy Tarreau &lt;w@1wt.eu&gt;
Subject: [PATCH 2.6.32 19/38] [PATCH 19/38] pagemap: hide physical addresses
	from non-privileged users
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
In-Reply-To: &lt;8acf8256ccc72771a80b7851061027bc@local&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a> - Nov. 29, 2015, 9:47 p.m.</div>
<pre class="content">
2.6.32-longterm review patch.  If anyone has any objections, please let me know.

------------------

commit 1c90308e7a77af6742a97d1021cca923b23b7f0d upstream.

This patch makes pagemap readable for normal users and hides physical
addresses from them.  For some use-cases PFN isn&#39;t required at all.

See http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name

Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)
<span class="signed-off-by">Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
<span class="reviewed-by">Reviewed-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="tested-by">Tested-by:  Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
[bwh: Backported to 3.2:
 - Add the same check in the places where we look up a PFN
 - Add struct pagemapread * parameters where necessary
 - Open-code file_ns_capable()
 - Delete pagemap_open() entirely, as it would always return 0]
<span class="signed-off-by">Signed-off-by: Ben Hutchings &lt;ben@decadent.org.uk&gt;</span>
(cherry picked from commit b1fb185f26e85f76e3ac6ce557398d78797c9684)
[wt: adjusted context, no pagemap_hugetlb_range() in 2.6.32, and
 security_capable() only takes a capability. Tested OK. ]
<span class="signed-off-by">Signed-off-by: Willy Tarreau &lt;w@1wt.eu&gt;</span>
---
 fs/proc/task_mmu.c | 21 ++++++++-------------
 1 file changed, 8 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131">Ben Hutchings</a> - Nov. 30, 2015, 1:54 a.m.</div>
<pre class="content">
On Sun, 2015-11-29 at 22:47 +0100, Willy Tarreau wrote:
<span class="quote">&gt; 2.6.32-longterm review patch.  If anyone has any objections, please let me know.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ------------------</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; commit 1c90308e7a77af6742a97d1021cca923b23b7f0d upstream.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch makes pagemap readable for normal users and hides physical</span>
<span class="quote">&gt; addresses from them.  For some use-cases PFN isn&#39;t required at all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; See http://lkml.kernel.org/r/1425935472-17949-1-git-send-email-kirill@shutemov.name</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: ab676b7d6fbf (&quot;pagemap: do not leak physical addresses to non-privileged userspace&quot;)</span>
<span class="quote">&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="quote">&gt; Tested-by:  Mark Williamson &lt;mwilliamson@undo-software.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="quote">&gt; [bwh: Backported to 3.2:</span>
<span class="quote">&gt;  - Add the same check in the places where we look up a PFN</span>
<span class="quote">&gt;  - Add struct pagemapread * parameters where necessary</span>
<span class="quote">&gt;  - Open-code file_ns_capable()</span>
<span class="quote">&gt;  - Delete pagemap_open() entirely, as it would always return 0]</span>
<span class="quote">&gt; Signed-off-by: Ben Hutchings &lt;ben@decadent.org.uk&gt;</span>
<span class="quote">&gt; (cherry picked from commit b1fb185f26e85f76e3ac6ce557398d78797c9684)</span>
<span class="quote">&gt; [wt: adjusted context, no pagemap_hugetlb_range() in 2.6.32, and</span>
<span class="quote">&gt;  security_capable() only takes a capability. Tested OK. ]</span>
[...]
<span class="quote">&gt; +	/* do not disclose physical addresses: attack vector */</span>
<span class="quote">&gt; +	pm.show_pfn = !security_capable(CAP_SYS_ADMIN);</span>
[...]

This is wrong; see
&lt;https://marc.info/?l=linux-api&amp;m=143144321020852&amp;w=2&gt;.

For 2.6.32 perhaps you could retain the capability check at open time
but store the result in private state for use at read time.

The ptrace check presumably should also be done at open time, as was
implemented upstream in:

commit a06db751c321546e5563041956a57613259c6720
Author: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;
Date:   Tue Sep 8 14:59:59 2015 -0700

    pagemap: check permissions and capabilities at open time

But that wasn&#39;t cc&#39;d to stable and hasn&#39;t been applied to any stable
branch (yet).

Ben.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=197">Willy Tarreau</a> - Nov. 30, 2015, 7:01 a.m.</div>
<pre class="content">
On Mon, Nov 30, 2015 at 01:54:22AM +0000, Ben Hutchings wrote:
<span class="quote">&gt; On Sun, 2015-11-29 at 22:47 +0100, Willy Tarreau wrote:</span>
<span class="quote">&gt; This is wrong; see</span>
<span class="quote">&gt; &lt;https://marc.info/?l=linux-api&amp;m=143144321020852&amp;w=2&gt;.</span>

Damned, and I now remember this discussion. The worst thing is that
I purposely booted a machine to test the fix and was happy with it,
I forgot this point :-(
<span class="quote">
&gt; For 2.6.32 perhaps you could retain the capability check at open time</span>
<span class="quote">&gt; but store the result in private state for use at read time.</span>

I&#39;ll see if it is possible to opencode security_capable() with 2.6.32&#39;s
infrastructure, and how far this brings us. Or maybe we should even drop
this one completely and leave pagemap readable only for superuser on
2.6.32, it doesn&#39;t seem to be that big of a deal either.
<span class="quote">
&gt; The ptrace check presumably should also be done at open time, as was</span>
<span class="quote">&gt; implemented upstream in:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; commit a06db751c321546e5563041956a57613259c6720</span>
<span class="quote">&gt; Author: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Date:   Tue Sep 8 14:59:59 2015 -0700</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     pagemap: check permissions and capabilities at open time</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But that wasn&#39;t cc&#39;d to stable and hasn&#39;t been applied to any stable</span>
<span class="quote">&gt; branch (yet).</span>

I really prefer to avoid fixing things that are not in more recent
branches (especially upgrade candidates for 2.6.32 like yours).

Thanks!
Willy

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 73db5a6..78658aa 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/mempolicy.h&gt;
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/swapops.h&gt;
<span class="p_add">+#include &lt;linux/security.h&gt;</span>
 
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/uaccess.h&gt;
<span class="p_chunk">@@ -539,6 +540,7 @@</span> <span class="p_context"> const struct file_operations proc_clear_refs_operations = {</span>
 
 struct pagemapread {
 	u64 __user *out, *end;
<span class="p_add">+	bool show_pfn;</span>
 };
 
 #define PM_ENTRY_BYTES      sizeof(u64)
<span class="p_chunk">@@ -589,14 +591,14 @@</span> <span class="p_context"> static u64 swap_pte_to_pagemap_entry(pte_t pte)</span>
 	return swp_type(e) | (swp_offset(e) &lt;&lt; MAX_SWAPFILES_SHIFT);
 }
 
<span class="p_del">-static u64 pte_to_pagemap_entry(pte_t pte)</span>
<span class="p_add">+static u64 pte_to_pagemap_entry(struct pagemapread *pm, pte_t pte)</span>
 {
 	u64 pme = 0;
 	if (is_swap_pte(pte))
 		pme = PM_PFRAME(swap_pte_to_pagemap_entry(pte))
 			| PM_PSHIFT(PAGE_SHIFT) | PM_SWAP;
 	else if (pte_present(pte))
<span class="p_del">-		pme = PM_PFRAME(pte_pfn(pte))</span>
<span class="p_add">+		pme = (pm-&gt;show_pfn ? PM_PFRAME(pte_pfn(pte)) : 0)</span>
 			| PM_PSHIFT(PAGE_SHIFT) | PM_PRESENT;
 	return pme;
 }
<span class="p_chunk">@@ -624,7 +626,7 @@</span> <span class="p_context"> static int pagemap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,</span>
 		if (vma &amp;&amp; (vma-&gt;vm_start &lt;= addr) &amp;&amp;
 		    !is_vm_hugetlb_page(vma)) {
 			pte = pte_offset_map(pmd, addr);
<span class="p_del">-			pfn = pte_to_pagemap_entry(*pte);</span>
<span class="p_add">+			pfn = pte_to_pagemap_entry(pm, *pte);</span>
 			/* unmap before userspace copy */
 			pte_unmap(pte);
 		}
<span class="p_chunk">@@ -695,6 +697,9 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 	if (!count)
 		goto out_task;
 
<span class="p_add">+	/* do not disclose physical addresses: attack vector */</span>
<span class="p_add">+	pm.show_pfn = !security_capable(CAP_SYS_ADMIN);</span>
<span class="p_add">+</span>
 	mm = get_task_mm(task);
 	if (!mm)
 		goto out_task;
<span class="p_chunk">@@ -773,19 +778,9 @@</span> <span class="p_context"> out:</span>
 	return ret;
 }
 
<span class="p_del">-static int pagemap_open(struct inode *inode, struct file *file)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* do not disclose physical addresses to unprivileged</span>
<span class="p_del">-	   userspace (closes a rowhammer attack vector) */</span>
<span class="p_del">-	if (!capable(CAP_SYS_ADMIN))</span>
<span class="p_del">-		return -EPERM;</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 const struct file_operations proc_pagemap_operations = {
 	.llseek		= mem_lseek, /* borrow this */
 	.read		= pagemap_read,
<span class="p_del">-	.open		= pagemap_open,</span>
 };
 #endif /* CONFIG_PROC_PAGE_MONITOR */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



