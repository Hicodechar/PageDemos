
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[12/21] X86_64, UV: Move blade local processor ID to the per cpu info struct - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [12/21] X86_64, UV: Move blade local processor ID to the per cpu info struct</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170">Mike Travis</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 28, 2016, 11:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160428231033.651156160@asylum.americas.sgi.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8976021/mbox/"
   >mbox</a>
|
   <a href="/patch/8976021/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8976021/">/patch/8976021/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 95138BF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 23:13:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id DBA3B20251
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 23:13:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 7DB4520274
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 23:13:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752788AbcD1XNw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 28 Apr 2016 19:13:52 -0400
Received: from relay1.sgi.com ([192.48.180.66]:57071 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752582AbcD1XKg (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 28 Apr 2016 19:10:36 -0400
Received: from asylum.americas.sgi.com (asylum.americas.sgi.com
	[128.162.237.107])
	by relay1.corp.sgi.com (Postfix) with ESMTP id DAC518F804C;
	Thu, 28 Apr 2016 16:10:33 -0700 (PDT)
Received: by asylum.americas.sgi.com (Postfix, from userid 5508)
	id C6596921A4C; Thu, 28 Apr 2016 18:10:33 -0500 (CDT)
Message-Id: &lt;20160428231033.651156160@asylum.americas.sgi.com&gt;
References: &lt;20160428231031.265120287@asylum.americas.sgi.com&gt;
User-Agent: quilt/0.46-1
Date: Thu, 28 Apr 2016 18:10:43 -0500
From: Mike Travis &lt;travis@sgi.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Len Brown &lt;len.brown@intel.com&gt;, Dimitri Sivanich &lt;sivanich@sgi.com&gt;
Cc: Russ Anderson &lt;rja@sgi.com&gt;, John Estabrook &lt;estabrook@sgi.com&gt;,
	Andrew Banman &lt;abanman@sgi.com&gt;,
	Nathan Zimmer &lt;nzimmer@sgi.com&gt;, x86@kernel.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH 12/21] X86_64,
	UV: Move blade local processor ID to the per cpu info struct
Content-Disposition: inline; filename=uv4_add_per_cpu_blade_procid
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170">Mike Travis</a> - April 28, 2016, 11:10 p.m.</div>
<pre class="content">
Move references to blade local processor ID to the new per cpu info
structs.  Create an access function that makes this move, and other
potential moves opaque to callers of this function.  Define a flag
that indicates to callers in external GPL modules that this function
replaces any local definition.  This allows calling source code to be
built for both pre-UV4 kernels as well as post-UV4 kernels.
<span class="signed-off-by">
Signed-off-by: Mike Travis &lt;travis@sgi.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Dimitri Sivanich &lt;sivanich@sgi.com&gt;</span>
<span class="tested-by">Tested-by: John Estabrook &lt;estabrook@sgi.com&gt;</span>
<span class="tested-by">Tested-by: Gary Kroening &lt;gfk@sgi.com&gt;</span>
<span class="tested-by">Tested-by: Nathan Zimmer &lt;nzimmer@sgi.com&gt;</span>
---
 arch/x86/include/asm/uv/uv_hub.h   |   10 ++++++++--
 arch/x86/kernel/apic/x2apic_uv_x.c |    2 +-
 arch/x86/platform/uv/tlb_uv.c      |    3 ++-
 arch/x86/platform/uv/uv_time.c     |    6 +++---
 4 files changed, 14 insertions(+), 7 deletions(-)


--
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- linux.orig/arch/x86/include/asm/uv/uv_hub.h</span>
<span class="p_header">+++ linux/arch/x86/include/asm/uv/uv_hub.h</span>
<span class="p_chunk">@@ -159,7 +159,6 @@</span> <span class="p_context"> struct uv_hub_info_s {</span>
 	unsigned short		pnode_mask;
 	unsigned short		coherency_domain_number;
 	unsigned short		numa_blade_id;
<span class="p_del">-	unsigned char		blade_processor_id;</span>
 	unsigned char		m_val;
 	unsigned char		n_val;
 };
<span class="p_chunk">@@ -565,9 +564,16 @@</span> <span class="p_context"> extern short uv_possible_blades;</span>
 /* Blade-local cpu number of current cpu. Numbered 0 .. &lt;# cpus on the blade&gt; */
 static inline int uv_blade_processor_id(void)
 {
<span class="p_del">-	return uv_hub_info-&gt;blade_processor_id;</span>
<span class="p_add">+	return uv_cpu_info-&gt;blade_cpu_id;</span>
 }
 
<span class="p_add">+/* Blade-local cpu number of cpu N. Numbered 0 .. &lt;# cpus on the blade&gt; */</span>
<span class="p_add">+static inline int uv_cpu_blade_processor_id(int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return uv_cpu_info_per(cpu)-&gt;blade_cpu_id;</span>
<span class="p_add">+}</span>
<span class="p_add">+#define _uv_cpu_blade_processor_id 1	/* indicate function available */</span>
<span class="p_add">+</span>
 /* Blade number of current cpu. Numnbered 0 .. &lt;#blades -1&gt; */
 static inline int uv_numa_blade_id(void)
 {
<span class="p_header">--- linux.orig/arch/x86/kernel/apic/x2apic_uv_x.c</span>
<span class="p_header">+++ linux/arch/x86/kernel/apic/x2apic_uv_x.c</span>
<span class="p_chunk">@@ -1075,12 +1075,12 @@</span> <span class="p_context"> void __init uv_system_init(void)</span>
 
 		uv_cpu_hub_info(cpu)-&gt;numa_blade_id = blade;
 		uv_cpu_hub_info(cpu)-&gt;pnode = pnode;
<span class="p_del">-		uv_cpu_hub_info(cpu)-&gt;blade_processor_id = lcpu;</span>
 		uv_node_to_blade[nodeid] = blade;
 		uv_cpu_to_blade[cpu] = blade;
 
 		/* Initialize per cpu info list */
 		uv_cpu_info_per(cpu)-&gt;p_uv_hub_info = uv_cpu_hub_info(cpu);
<span class="p_add">+		uv_cpu_info_per(cpu)-&gt;blade_cpu_id = lcpu;</span>
 		uv_cpu_info_per(cpu)-&gt;scir.offset = uv_scir_offset(apicid);
 	}
 
<span class="p_header">--- linux.orig/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ linux/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -2025,7 +2025,8 @@</span> <span class="p_context"> static int scan_sock(struct socket_desc</span>
 			return 1;
 		}
 		bcp-&gt;uvhub_master = *hmasterp;
<span class="p_del">-		bcp-&gt;uvhub_cpu = uv_cpu_hub_info(cpu)-&gt;blade_processor_id;</span>
<span class="p_add">+		bcp-&gt;uvhub_cpu = uv_cpu_blade_processor_id(cpu);</span>
<span class="p_add">+</span>
 		if (bcp-&gt;uvhub_cpu &gt;= MAX_CPUS_PER_UVHUB) {
 			printk(KERN_EMERG &quot;%d cpus per uvhub invalid\n&quot;,
 				bcp-&gt;uvhub_cpu);
<span class="p_header">--- linux.orig/arch/x86/platform/uv/uv_time.c</span>
<span class="p_header">+++ linux/arch/x86/platform/uv/uv_time.c</span>
<span class="p_chunk">@@ -165,7 +165,7 @@</span> <span class="p_context"> static __init int uv_rtc_allocate_timers</span>
 	for_each_present_cpu(cpu) {
 		int nid = cpu_to_node(cpu);
 		int bid = uv_cpu_to_blade_id(cpu);
<span class="p_del">-		int bcpu = uv_cpu_hub_info(cpu)-&gt;blade_processor_id;</span>
<span class="p_add">+		int bcpu = uv_cpu_blade_processor_id(cpu);</span>
 		struct uv_rtc_timer_head *head = blade_info[bid];
 
 		if (!head) {
<span class="p_chunk">@@ -226,7 +226,7 @@</span> <span class="p_context"> static int uv_rtc_set_timer(int cpu, u64</span>
 	int pnode = uv_cpu_to_pnode(cpu);
 	int bid = uv_cpu_to_blade_id(cpu);
 	struct uv_rtc_timer_head *head = blade_info[bid];
<span class="p_del">-	int bcpu = uv_cpu_hub_info(cpu)-&gt;blade_processor_id;</span>
<span class="p_add">+	int bcpu = uv_cpu_blade_processor_id(cpu);</span>
 	u64 *t = &amp;head-&gt;cpu[bcpu].expires;
 	unsigned long flags;
 	int next_cpu;
<span class="p_chunk">@@ -262,7 +262,7 @@</span> <span class="p_context"> static int uv_rtc_unset_timer(int cpu, i</span>
 	int pnode = uv_cpu_to_pnode(cpu);
 	int bid = uv_cpu_to_blade_id(cpu);
 	struct uv_rtc_timer_head *head = blade_info[bid];
<span class="p_del">-	int bcpu = uv_cpu_hub_info(cpu)-&gt;blade_processor_id;</span>
<span class="p_add">+	int bcpu = uv_cpu_blade_processor_id(cpu);</span>
 	u64 *t = &amp;head-&gt;cpu[bcpu].expires;
 	unsigned long flags;
 	int rc = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



