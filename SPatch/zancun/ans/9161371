
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, oom_reaper: make sure that mmput_async is called only when memory was reaped - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, oom_reaper: make sure that mmput_async is called only when memory was reaped</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 7, 2016, 1:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1465306987-30297-1-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9161371/mbox/"
   >mbox</a>
|
   <a href="/patch/9161371/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9161371/">/patch/9161371/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B212D60467 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 13:43:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A1CB42521F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 13:43:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 96C6825D91; Tue,  7 Jun 2016 13:43:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6F442521F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Jun 2016 13:43:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755201AbcFGNnX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 7 Jun 2016 09:43:23 -0400
Received: from mail-wm0-f67.google.com ([74.125.82.67]:36509 &quot;EHLO
	mail-wm0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755018AbcFGNnV (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 7 Jun 2016 09:43:21 -0400
Received: by mail-wm0-f67.google.com with SMTP id m124so23238327wme.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 07 Jun 2016 06:43:20 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=G9ET+2BKqfEjXPBbH0EsniMej4RupXYmSsfmZ9Yq6Lk=;
	b=KWjWyXD66c+e+mMSD0+BTw38lW2Hcb2HuPnuDLCftXEfJZRFw7JncVQodX6GJedXfh
	kVogov/8bxOhCWFpliyr7lG2d3gxOcVuRDfM7OHRAIrPlec44h4aI9mtRedcAmgPoxfU
	olACjeUxki0iovtA3D8vO5lOIT++NMdXAGi0QoMl7SAhPNN2+urN5UHI1bI1ZdzNjjbJ
	LKhHQj+yJn92XS0YAvaKwMFmhiTUAoQSB86wEWgQFpSLrvY/b9705kagJZM9pWtpuS7A
	tTHbRnQmjKf4V1y+j069dzeqTuD2a0mjrQ1aY+oWFJGxj9dwjjXIpT8Lxr0jPwJDvwOc
	bF6g==
X-Gm-Message-State: ALyK8tJCDxjfS38agnjmNONrHU1sETTMJ/NtehA9gj35pALMxelSofiYpNdg3WdlGsUgfw==
X-Received: by 10.28.144.7 with SMTP id s7mr2864922wmd.103.1465306999602;
	Tue, 07 Jun 2016 06:43:19 -0700 (PDT)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	o129sm19404320wmb.17.2016.06.07.06.43.18
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 07 Jun 2016 06:43:19 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH] mm,
	oom_reaper: make sure that mmput_async is called only when memory
	was reaped
Date: Tue,  7 Jun 2016 15:43:07 +0200
Message-Id: &lt;1465306987-30297-1-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.8.1
In-Reply-To: &lt;1465305264-28715-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1465305264-28715-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 7, 2016, 1:43 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Tetsuo is worried that mmput_async might still lead to a premature
new oom victim selection due to the following race:

__oom_reap_task				exit_mm
  find_lock_task_mm
  atomic_inc(mm-&gt;mm_users) # = 2
  task_unlock
  					  task_lock
					  task-&gt;mm = NULL
					  up_read(&amp;mm-&gt;mmap_sem)
		&lt; somebody write locks mmap_sem &gt;
					  task_unlock
					  mmput
  					    atomic_dec_and_test # = 1
					  exit_oom_victim
  down_read_trylock # failed - no reclaim
  mmput_async # Takes unpredictable amount of time
  		&lt; new OOM situation &gt;

the final __mmput will be executed in the delayed context which might
happen far in the future. Such a race is highly unlikely because the
write holder of mmap_sem would have to be an external task (all direct
holders are already killed or exiting) and it usually have to pin
mm_users in order to do anything reasonable.

We can, however, make sure that the mmput_async is only called when we
do not back off and reap some memory. That would reduce the impact of
the delayed __mmput because the real content would be already freed.
Pin mm_count to keep it alive after we drop task_lock and before we try
to get mmap_sem. If the mmap_sem succeeds we can try to grab mm_users
reference and then go on with unmapping the address space.

It is not clear whether this race is possible at all but it is better
to be more robust and do not pin mm_users unless we are sure we are
actually doing some real work during __oom_reap_task.

Reported-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 mm/oom_kill.c | 25 ++++++++++++++++++-------
 1 file changed, 18 insertions(+), 7 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index c11f8bdd0c12..d4a929d79470 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -452,7 +452,7 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	 * We have to make sure to not race with the victim exit path
 	 * and cause premature new oom victim selection:
 	 * __oom_reap_task		exit_mm
<span class="p_del">-	 *   atomic_inc_not_zero</span>
<span class="p_add">+	 *   mmget_not_zero</span>
 	 *				  mmput
 	 *				    atomic_dec_and_test
 	 *				  exit_oom_victim
<span class="p_chunk">@@ -474,12 +474,22 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	if (!p)
 		goto unlock_oom;
 	mm = p-&gt;mm;
<span class="p_del">-	atomic_inc(&amp;mm-&gt;mm_users);</span>
<span class="p_add">+	atomic_inc(&amp;mm-&gt;mm_count);</span>
 	task_unlock(p);
 
 	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {
 		ret = false;
<span class="p_del">-		goto unlock_oom;</span>
<span class="p_add">+		goto mm_drop;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * increase mm_users only after we know we will reap something so</span>
<span class="p_add">+	 * that the mmput_async is called only when we have reaped something</span>
<span class="p_add">+	 * and delayed __mmput doesn&#39;t matter that much</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!mmget_not_zero(mm)) {</span>
<span class="p_add">+		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		goto mm_drop;</span>
 	}
 
 	tlb_gather_mmu(&amp;tlb, mm, 0, -1);
<span class="p_chunk">@@ -521,15 +531,16 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	 * to release its memory.
 	 */
 	set_bit(MMF_OOM_REAPED, &amp;mm-&gt;flags);
<span class="p_del">-unlock_oom:</span>
<span class="p_del">-	mutex_unlock(&amp;oom_lock);</span>
 	/*
 	 * Drop our reference but make sure the mmput slow path is called from a
 	 * different context because we shouldn&#39;t risk we get stuck there and
 	 * put the oom_reaper out of the way.
 	 */
<span class="p_del">-	if (mm)</span>
<span class="p_del">-		mmput_async(mm);</span>
<span class="p_add">+	mmput_async(mm);</span>
<span class="p_add">+mm_drop:</span>
<span class="p_add">+	mmdrop(mm);</span>
<span class="p_add">+unlock_oom:</span>
<span class="p_add">+	mutex_unlock(&amp;oom_lock);</span>
 	return ret;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



