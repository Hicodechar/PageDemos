
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm, oom_reaper: do not mmput synchronously from the oom reaper context - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm, oom_reaper: do not mmput synchronously from the oom reaper context</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 20, 2016, 6:16 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160520061658.GB19172@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9128617/mbox/"
   >mbox</a>
|
   <a href="/patch/9128617/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9128617/">/patch/9128617/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8A9336048B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 May 2016 06:17:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7155020499
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 May 2016 06:17:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6345D2618C; Fri, 20 May 2016 06:17:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AC5D420499
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 May 2016 06:17:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754819AbcETGRF (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 20 May 2016 02:17:05 -0400
Received: from mail-wm0-f67.google.com ([74.125.82.67]:35268 &quot;EHLO
	mail-wm0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754516AbcETGRC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 20 May 2016 02:17:02 -0400
Received: by mail-wm0-f67.google.com with SMTP id s63so11872436wme.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 19 May 2016 23:17:01 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=mZcuEB8MBTNA6NX8SsLjjQPJd5X1TzwZlX8v44IW6sk=;
	b=gR9MYnqM3ZPIlR2JsXrLpbV/NjS6nSFKMa/20qqRR8X5gKwlqosgxTKNwRaHlpepm/
	8q5bFhPjaeAYXoZNCNS1QnPdWaWS9+BeqEekt8HfaM0tFMw5Xm6AC/ZSsbdunpB64BGK
	Aj5IuGn+/V318V+XPXTafRRFnJPdQhG8z5WU2EKQAQ+IslMxI9Q6CSRCkjSvlsuR+REf
	lOV3DsmWf0A9/Y8r64Tgapd/6wMBK9/LrvqsoiFCsYVVKOafrIpBmeJOdInx+mwd2dxK
	FSCOnvdjkM9i3ia/ooEwrirydO+XbIl7jxYTecqUoEyQfgXkHIrxIMUYzwugxdU9i2Qp
	DCMQ==
X-Gm-Message-State: AOPr4FU2dsMLOzCvZrMI4rgQCB2GzuquxqySsGxDjn4FoTTUd55K/2vAHHtXZlReVVodYg==
X-Received: by 10.28.145.73 with SMTP id t70mr1518876wmd.97.1463725020627;
	Thu, 19 May 2016 23:17:00 -0700 (PDT)
Received: from localhost (ip-86-49-65-8.net.upcbroadband.cz. [86.49.65.8])
	by smtp.gmail.com with ESMTPSA id
	f135sm2862545wmf.22.2016.05.19.23.16.59
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 19 May 2016 23:16:59 -0700 (PDT)
Date: Fri, 20 May 2016 08:16:59 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, linux-mm@kvack.org,
	LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [PATCH 2/2] mm, oom_reaper: do not mmput synchronously from the
	oom reaper context
Message-ID: &lt;20160520061658.GB19172@dhcp22.suse.cz&gt;
References: &lt;20160520013053.GB2224@bbox&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20160520013053.GB2224@bbox&gt;
User-Agent: Mutt/1.6.0 (2016-04-01)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - May 20, 2016, 6:16 a.m.</div>
<pre class="content">
On Fri 20-05-16 10:30:53, Minchan Kim wrote:
<span class="quote">&gt; Forking new thread because my comment is not related to this patch&#39;s</span>
<span class="quote">&gt; purpose but found a thing during reading this patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Tue, Apr 26, 2016 at 04:04:30PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Tetsuo has properly noted that mmput slow path might get blocked waiting</span>
<span class="quote">&gt; &gt; for another party (e.g. exit_aio waits for an IO). If that happens the</span>
<span class="quote">&gt; &gt; oom_reaper would be put out of the way and will not be able to process</span>
<span class="quote">&gt; &gt; next oom victim. We should strive for making this context as reliable</span>
<span class="quote">&gt; &gt; and independent on other subsystems as much as possible.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Introduce mmput_async which will perform the slow path from an async</span>
<span class="quote">&gt; &gt; (WQ) context. This will delay the operation but that shouldn&#39;t be a</span>
<span class="quote">&gt; &gt; problem because the oom_reaper has reclaimed the victim&#39;s address space</span>
<span class="quote">&gt; &gt; for most cases as much as possible and the remaining context shouldn&#39;t</span>
<span class="quote">&gt; &gt; bind too much memory anymore. The only exception is when mmap_sem</span>
<span class="quote">&gt; &gt; trylock has failed which shouldn&#39;t happen too often.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The issue is only theoretical but not impossible.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The mmput_async is used for only OOM reaper which is enabled on CONFIG_MMU.</span>
<span class="quote">&gt; So until someone who want to use mmput_async in !CONFIG_MMU come out,</span>
<span class="quote">&gt; we could save sizeof(struct work_struct) per mm in !CONFIG_MMU.</span>

You are right. What about the following?
---
From 8f8a34bf00882bfc0b557ed79e0e9e956ac9d217 Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Fri, 20 May 2016 08:14:39 +0200
Subject: [PATCH] mmotm:
 mm-oom_reaper-do-not-mmput-synchronously-from-the-oom-reaper-context-fix

mmput_async is currently used only from the oom_reaper which is defined
only for CONFIG_MMU. We can save work_struct in mm_struct for
!CONFIG_MMU.

Reported-by: Minchan Kim &lt;minchan@kernel.org&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/mm_types.h | 2 ++
 include/linux/sched.h    | 2 ++
 kernel/fork.c            | 2 ++
 3 files changed, 6 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - May 20, 2016, 7:12 a.m.</div>
<pre class="content">
On Fri, May 20, 2016 at 08:16:59AM +0200, Michal Hocko wrote:
<span class="quote">&gt; On Fri 20-05-16 10:30:53, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; Forking new thread because my comment is not related to this patch&#39;s</span>
<span class="quote">&gt; &gt; purpose but found a thing during reading this patch.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On Tue, Apr 26, 2016 at 04:04:30PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Tetsuo has properly noted that mmput slow path might get blocked waiting</span>
<span class="quote">&gt; &gt; &gt; for another party (e.g. exit_aio waits for an IO). If that happens the</span>
<span class="quote">&gt; &gt; &gt; oom_reaper would be put out of the way and will not be able to process</span>
<span class="quote">&gt; &gt; &gt; next oom victim. We should strive for making this context as reliable</span>
<span class="quote">&gt; &gt; &gt; and independent on other subsystems as much as possible.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Introduce mmput_async which will perform the slow path from an async</span>
<span class="quote">&gt; &gt; &gt; (WQ) context. This will delay the operation but that shouldn&#39;t be a</span>
<span class="quote">&gt; &gt; &gt; problem because the oom_reaper has reclaimed the victim&#39;s address space</span>
<span class="quote">&gt; &gt; &gt; for most cases as much as possible and the remaining context shouldn&#39;t</span>
<span class="quote">&gt; &gt; &gt; bind too much memory anymore. The only exception is when mmap_sem</span>
<span class="quote">&gt; &gt; &gt; trylock has failed which shouldn&#39;t happen too often.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The issue is only theoretical but not impossible.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The mmput_async is used for only OOM reaper which is enabled on CONFIG_MMU.</span>
<span class="quote">&gt; &gt; So until someone who want to use mmput_async in !CONFIG_MMU come out,</span>
<span class="quote">&gt; &gt; we could save sizeof(struct work_struct) per mm in !CONFIG_MMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You are right. What about the following?</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; From 8f8a34bf00882bfc0b557ed79e0e9e956ac9d217 Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Date: Fri, 20 May 2016 08:14:39 +0200</span>
<span class="quote">&gt; Subject: [PATCH] mmotm:</span>
<span class="quote">&gt;  mm-oom_reaper-do-not-mmput-synchronously-from-the-oom-reaper-context-fix</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mmput_async is currently used only from the oom_reaper which is defined</span>
<span class="quote">&gt; only for CONFIG_MMU. We can save work_struct in mm_struct for</span>
<span class="quote">&gt; !CONFIG_MMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reported-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="acked-by">Acked-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>

Found a typo below although it was not caused by this patch.
My brand new glasses are really good for me.
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  include/linux/mm_types.h | 2 ++</span>
<span class="quote">&gt;  include/linux/sched.h    | 2 ++</span>
<span class="quote">&gt;  kernel/fork.c            | 2 ++</span>
<span class="quote">&gt;  3 files changed, 6 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index ab142ace96f3..a16dcb2efca4 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -514,7 +514,9 @@ struct mm_struct {</span>
<span class="quote">&gt;  #ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt;  	atomic_long_t hugetlb_usage;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +#ifdef CONFIG_MMU</span>
<span class="quote">&gt;  	struct work_struct async_put_work;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void mm_init_cpumask(struct mm_struct *mm)</span>
<span class="quote">&gt; diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="quote">&gt; index df8778e72211..11b31ded65cf 100644</span>
<span class="quote">&gt; --- a/include/linux/sched.h</span>
<span class="quote">&gt; +++ b/include/linux/sched.h</span>
<span class="quote">&gt; @@ -2604,10 +2604,12 @@ static inline void mmdrop(struct mm_struct * mm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* mmput gets rid of the mappings and all user-space */</span>
<span class="quote">&gt;  extern void mmput(struct mm_struct *);</span>
<span class="quote">&gt; +#ifdef CONFIG_MMU</span>
<span class="quote">&gt;  /* same as above but performs the slow path from the async kontext. Can</span>

                                                              c
<span class="quote">
&gt;   * be called from the atomic context as well</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  extern void mmput_async(struct mm_struct *);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* Grab a reference to a task&#39;s mm, if it is not already going away */</span>
<span class="quote">&gt;  extern struct mm_struct *get_task_mm(struct task_struct *task);</span>
<span class="quote">&gt; diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="quote">&gt; index e1dc6b02ac8b..1e3dc3af6845 100644</span>
<span class="quote">&gt; --- a/kernel/fork.c</span>
<span class="quote">&gt; +++ b/kernel/fork.c</span>
<span class="quote">&gt; @@ -732,6 +732,7 @@ void mmput(struct mm_struct *mm)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(mmput);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_MMU</span>
<span class="quote">&gt;  static void mmput_async_fn(struct work_struct *work)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct mm_struct *mm = container_of(work, struct mm_struct, async_put_work);</span>
<span class="quote">&gt; @@ -745,6 +746,7 @@ void mmput_async(struct mm_struct *mm)</span>
<span class="quote">&gt;  		schedule_work(&amp;mm-&gt;async_put_work);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * set_mm_exe_file - change a reference to the mm&#39;s executable file</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.8.1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; Michal Hocko</span>
<span class="quote">&gt; SUSE Labs</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index ab142ace96f3..a16dcb2efca4 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -514,7 +514,9 @@</span> <span class="p_context"> struct mm_struct {</span>
 #ifdef CONFIG_HUGETLB_PAGE
 	atomic_long_t hugetlb_usage;
 #endif
<span class="p_add">+#ifdef CONFIG_MMU</span>
 	struct work_struct async_put_work;
<span class="p_add">+#endif</span>
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index df8778e72211..11b31ded65cf 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -2604,10 +2604,12 @@</span> <span class="p_context"> static inline void mmdrop(struct mm_struct * mm)</span>
 
 /* mmput gets rid of the mappings and all user-space */
 extern void mmput(struct mm_struct *);
<span class="p_add">+#ifdef CONFIG_MMU</span>
 /* same as above but performs the slow path from the async kontext. Can
  * be called from the atomic context as well
  */
 extern void mmput_async(struct mm_struct *);
<span class="p_add">+#endif</span>
 
 /* Grab a reference to a task&#39;s mm, if it is not already going away */
 extern struct mm_struct *get_task_mm(struct task_struct *task);
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index e1dc6b02ac8b..1e3dc3af6845 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -732,6 +732,7 @@</span> <span class="p_context"> void mmput(struct mm_struct *mm)</span>
 }
 EXPORT_SYMBOL_GPL(mmput);
 
<span class="p_add">+#ifdef CONFIG_MMU</span>
 static void mmput_async_fn(struct work_struct *work)
 {
 	struct mm_struct *mm = container_of(work, struct mm_struct, async_put_work);
<span class="p_chunk">@@ -745,6 +746,7 @@</span> <span class="p_context"> void mmput_async(struct mm_struct *mm)</span>
 		schedule_work(&amp;mm-&gt;async_put_work);
 	}
 }
<span class="p_add">+#endif</span>
 
 /**
  * set_mm_exe_file - change a reference to the mm&#39;s executable file

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



