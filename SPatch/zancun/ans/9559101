
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/8] fb: hisilicon: Add framebuffer driver for hi3660 SoC - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/8] fb: hisilicon: Add framebuffer driver for hi3660 SoC</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172513">cailiwei</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 7, 2017, 2:35 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170207023559.79455-4-cailiwei@hisilicon.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9559101/mbox/"
   >mbox</a>
|
   <a href="/patch/9559101/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9559101/">/patch/9559101/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A27FD60236 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Feb 2017 02:40:43 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8151223F88
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Feb 2017 02:40:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 72DE62808C; Tue,  7 Feb 2017 02:40:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2D4C223F88
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Feb 2017 02:40:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752813AbdBGCkd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Feb 2017 21:40:33 -0500
Received: from szxga03-in.huawei.com ([119.145.14.66]:40908 &quot;EHLO
	szxga03-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751690AbdBGCkP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Feb 2017 21:40:15 -0500
Received: from 172.24.1.137 (EHLO szxeml433-hub.china.huawei.com)
	([172.24.1.137])
	by szxrg03-dlp.huawei.com (MOS 4.4.3-GA FastPath queued)
	with ESMTP id COW67594; Tue, 07 Feb 2017 10:36:57 +0800 (CST)
Received: from huawei.com (100.106.171.187) by szxeml433-hub.china.huawei.com
	(10.82.67.210) with Microsoft SMTP Server id 14.3.235.1;
	Tue, 7 Feb 2017 10:36:48 +0800
From: cailiwei &lt;cailiwei@hisilicon.com&gt;
To: &lt;linux-fbdev@vger.kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;b.zolnierkie@samsung.com&gt;, &lt;guodong.xu@linaro.org&gt;
CC: &lt;suzhuangluan@hisilicon.com&gt;, &lt;dengqingshan@hisilicon.com&gt;,
	&lt;xuhongtao8@hisilicon.com&gt;, &lt;zhengwanchun@hisilicon.com&gt;,
	&lt;shizongxuan@huawei.com&gt;, &lt;cailiwei@hisilicon.com&gt;
Subject: [PATCH 4/8] fb: hisilicon: Add framebuffer driver for hi3660 SoC
Date: Tue, 7 Feb 2017 10:35:55 +0800
Message-ID: &lt;20170207023559.79455-4-cailiwei@hisilicon.com&gt;
X-Mailer: git-send-email 2.11.1
In-Reply-To: &lt;20170207023559.79455-1-cailiwei@hisilicon.com&gt;
References: &lt;20170207023559.79455-1-cailiwei@hisilicon.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [100.106.171.187]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172513">cailiwei</a> - Feb. 7, 2017, 2:35 a.m.</div>
<pre class="content">
<span class="from">From: Levy-Cai &lt;cailiwei@hisilicon.com&gt;</span>

Add framebuffer driver for hi3660 SoC, this driver include lcd
driver &amp; Hdmi adv7533/adv7535 driver, support lcd display at
1080p@60 and hdmi display at 1080p@60.
<span class="signed-off-by">
Signed-off-by: cailiwei &lt;cailiwei@hisilicon.com&gt;</span>
---
 .../video/fbdev/hisi/dss/hisi_block_algorithm.c    |  714 +++++
 .../video/fbdev/hisi/dss/hisi_block_algorithm.h    |   29 +
 .../video/fbdev/hisi/dss/hisi_dpe_utils_hi3660.c   | 1549 ++++++++++
 drivers/video/fbdev/hisi/dss/hisi_dss.h            |  493 +++
 .../video/fbdev/hisi/dss/hisi_dss_regs_hi3660.h    | 3164 ++++++++++++++++++++
 5 files changed, 5949 insertions(+)
 create mode 100755 drivers/video/fbdev/hisi/dss/hisi_block_algorithm.c
 create mode 100755 drivers/video/fbdev/hisi/dss/hisi_block_algorithm.h
 create mode 100755 drivers/video/fbdev/hisi/dss/hisi_dpe_utils_hi3660.c
 create mode 100755 drivers/video/fbdev/hisi/dss/hisi_dss.h
 create mode 100755 drivers/video/fbdev/hisi/dss/hisi_dss_regs_hi3660.h
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.c b/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.c</span>
new file mode 100755
<span class="p_header">index 000000000000..28dcfbd1fe13</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.c</span>
<span class="p_chunk">@@ -0,0 +1,714 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (c) 2013-2014, Hisilicon Tech. Co., Ltd. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 and</span>
<span class="p_add">+ * only version 2 as published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &quot;hisi_fb.h&quot;</span>
<span class="p_add">+#include &quot;hisi_block_algorithm.h&quot;</span>
<span class="p_add">+#include &quot;hisi_overlay_utils.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+#define SCF_INPUT_OV  (16)</span>
<span class="p_add">+</span>
<span class="p_add">+#define WDMA_ROT_LINEBUF	(480)</span>
<span class="p_add">+#define AFBCE_LINEBUF	(480)</span>
<span class="p_add">+</span>
<span class="p_add">+#define RCHN_V2_SCF_LINE_BUF (512)</span>
<span class="p_add">+#define SHARPNESS_LINE_BUF	(2560)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MAX_OFFLINE_SCF 4</span>
<span class="p_add">+#define MAX_OFFLINE_LAYER_NUMBER 6</span>
<span class="p_add">+#define BLOCK_SIZE_INVALID	(0xFFFF)</span>
<span class="p_add">+</span>
<span class="p_add">+int rect_across_rect(dss_rect_t rect1, dss_rect_t rect2,</span>
<span class="p_add">+		     dss_rect_t *cross_rect)</span>
<span class="p_add">+{</span>
<span class="p_add">+	uint32_t center_x = 0;</span>
<span class="p_add">+	uint32_t center_y = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(cross_rect == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(cross_rect, 0x0, sizeof(dss_rect_t));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (rect1.w == 0 || rect1.h == 0 || rect2.w == 0 || rect2.h == 0)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	center_x =</span>
<span class="p_add">+	    abs(rect2.x + rect2.w - 1 + rect2.x -</span>
<span class="p_add">+		(rect1.x + rect1.w - 1 + rect1.x));</span>
<span class="p_add">+	center_y =</span>
<span class="p_add">+	    abs(rect2.y + rect2.h - 1 + rect2.y -</span>
<span class="p_add">+		(rect1.y + rect1.h - 1 + rect1.y));</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((center_x &lt; rect2.w + rect1.w) &amp;&amp; (center_y &lt; rect2.h + rect1.h)) {</span>
<span class="p_add">+</span>
<span class="p_add">+		cross_rect-&gt;x = MAX(rect1.x, rect2.x);</span>
<span class="p_add">+		cross_rect-&gt;y = MAX(rect1.y, rect2.y);</span>
<span class="p_add">+		cross_rect-&gt;w =</span>
<span class="p_add">+		    MIN(rect1.x + rect1.w - 1,</span>
<span class="p_add">+			rect2.x + rect2.w - 1) - cross_rect-&gt;x + 1;</span>
<span class="p_add">+		cross_rect-&gt;h =</span>
<span class="p_add">+		    MIN(rect1.y + rect1.h - 1,</span>
<span class="p_add">+			rect2.y + rect2.h - 1) - cross_rect-&gt;y + 1;</span>
<span class="p_add">+</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+uint32_t calc_dest_block_size(dss_overlay_t *pov_req,</span>
<span class="p_add">+			      dss_overlay_block_t *pov_h_block)</span>
<span class="p_add">+{</span>
<span class="p_add">+	uint32_t i = 0;</span>
<span class="p_add">+	uint32_t block_width = BLOCK_SIZE_INVALID;</span>
<span class="p_add">+	int32_t scf_line_buffer = SCF_LINE_BUF;</span>
<span class="p_add">+	dss_layer_t *layer = NULL;</span>
<span class="p_add">+	dss_wb_layer_t *wb_layer = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(pov_req == NULL);</span>
<span class="p_add">+	BUG_ON(pov_h_block == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; pov_h_block-&gt;layer_nums; i++) {</span>
<span class="p_add">+		layer = &amp;(pov_h_block-&gt;layer_infos[i]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (layer-&gt;need_cap &amp; (CAP_DIM | CAP_BASE))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* sharpenss line buffer is 1600 for austin and dallas, but 2560 for chicago */</span>
<span class="p_add">+		if ((layer-&gt;need_cap &amp; CAP_2D_SHARPNESS) &amp;&amp;</span>
<span class="p_add">+		    (layer-&gt;src_rect.w &gt; SHARPNESS_LINE_BUF)) {</span>
<span class="p_add">+			block_width = MIN(block_width, SHARPNESS_LINE_BUF);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* scaler line buffer, default value is 2560, but line buffer of rchn_v2 is 512,</span>
<span class="p_add">+		   scaler line buffer should be subtracted by 32 according to scale algorithm */</span>
<span class="p_add">+		if (layer-&gt;chn_idx == DSS_RCHN_V2) {</span>
<span class="p_add">+			scf_line_buffer = RCHN_V2_SCF_LINE_BUF;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			scf_line_buffer = SCF_LINE_BUF;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		scf_line_buffer = scf_line_buffer - 32;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (layer-&gt;src_rect.h != layer-&gt;dst_rect.h) {</span>
<span class="p_add">+			if (((layer-&gt;src_rect.w &gt;= layer-&gt;dst_rect.w)</span>
<span class="p_add">+			     &amp;&amp; (layer-&gt;dst_rect.w &gt; scf_line_buffer))</span>
<span class="p_add">+			    || ((layer-&gt;src_rect.w &lt; layer-&gt;dst_rect.w)</span>
<span class="p_add">+				&amp;&amp; (layer-&gt;src_rect.w &gt; scf_line_buffer))) {</span>
<span class="p_add">+				block_width = MIN(block_width, scf_line_buffer);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; pov_req-&gt;wb_layer_nums; i++) {</span>
<span class="p_add">+		wb_layer = &amp;(pov_req-&gt;wb_layer_infos[i]);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* maximum of rot linebuffer is 480 */</span>
<span class="p_add">+		if (wb_layer-&gt;transform &amp; HISI_FB_TRANSFORM_ROT_90) {</span>
<span class="p_add">+			block_width = MIN(block_width, WDMA_ROT_LINEBUF);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* maximum of afbce linebuffer is 480 */</span>
<span class="p_add">+		if (wb_layer-&gt;need_cap &amp; CAP_AFBCE) {</span>
<span class="p_add">+			block_width = MIN(block_width, AFBCE_LINEBUF);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return block_width;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int scf_output_suitable(uint32_t x_start, uint32_t x_end, uint32_t pos)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if ((x_start &gt; pos) || (x_end &lt; pos))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* if distance between layer start/end and pos, return 1 for adjust */</span>
<span class="p_add">+	if ((pos - x_start &lt; SCF_MIN_OUTPUT)</span>
<span class="p_add">+	    || (x_end - pos + 1 &lt; SCF_MIN_OUTPUT))</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int block_fix_scf_constraint(dss_overlay_t *pov_req,</span>
<span class="p_add">+			     dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+			     uint32_t block_size, uint32_t end_pos,</span>
<span class="p_add">+			     uint32_t *fix_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	uint32_t i = 0;</span>
<span class="p_add">+	uint32_t end = end_pos;</span>
<span class="p_add">+	uint32_t scf_layer_num = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_rect_t scf_dst_rect[MAX_OFFLINE_LAYER_NUMBER];</span>
<span class="p_add">+	dss_layer_t *layer = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(pov_h_block == NULL);</span>
<span class="p_add">+	BUG_ON(fix_size == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	*fix_size = block_size;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (block_size &lt;= SCF_MIN_OUTPUT) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;block size[%d] is too small!\n&quot;, block_size);</span>
<span class="p_add">+		return -1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; pov_h_block-&gt;layer_nums; i++) {</span>
<span class="p_add">+		layer = &amp;(pov_h_block-&gt;layer_infos[i]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (layer-&gt;need_cap &amp; (CAP_BASE | CAP_DIM | CAP_PURE_COLOR)) {</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (scf_layer_num &gt;= MAX_OFFLINE_LAYER_NUMBER) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;layer number in offline [%d] is more than scf moudle [%d]\n&quot;,</span>
<span class="p_add">+			     scf_layer_num, MAX_OFFLINE_LAYER_NUMBER);</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* get all scaler layers for austin and dallas */</span>
<span class="p_add">+		/* get all layers for chicago */</span>
<span class="p_add">+		scf_dst_rect[scf_layer_num].x = layer-&gt;dst_rect.x;</span>
<span class="p_add">+		scf_dst_rect[scf_layer_num].y = layer-&gt;dst_rect.y;</span>
<span class="p_add">+		scf_dst_rect[scf_layer_num].w = layer-&gt;dst_rect.w;</span>
<span class="p_add">+		scf_dst_rect[scf_layer_num].h = layer-&gt;dst_rect.h;</span>
<span class="p_add">+		scf_layer_num++;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (scf_layer_num == 0)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+ REDO:</span>
<span class="p_add">+	for (i = 0; i &lt; scf_layer_num; i++) {</span>
<span class="p_add">+		if (scf_output_suitable(scf_dst_rect[i].x,</span>
<span class="p_add">+					scf_dst_rect[i].x + scf_dst_rect[i].w -</span>
<span class="p_add">+					1, pov_req-&gt;wb_ov_rect.x + end)) {</span>
<span class="p_add">+			end = end - SCF_MIN_OUTPUT;</span>
<span class="p_add">+			goto REDO;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	*fix_size = block_size - (end_pos - end);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int adjust_layers_cap(dss_overlay_t *pov_req,</span>
<span class="p_add">+		      dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+		      dss_wb_layer_t *wb_layer)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int i = 0;</span>
<span class="p_add">+	int temp = 0;</span>
<span class="p_add">+	dss_layer_t *layer = NULL;</span>
<span class="p_add">+	bool has_rot = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(pov_h_block == NULL);</span>
<span class="p_add">+	BUG_ON(wb_layer == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; pov_h_block-&gt;layer_nums; i++) {</span>
<span class="p_add">+		layer = &amp;pov_h_block-&gt;layer_infos[i];</span>
<span class="p_add">+</span>
<span class="p_add">+		if (layer-&gt;transform &amp; HISI_FB_TRANSFORM_ROT_90) {</span>
<span class="p_add">+			temp = layer-&gt;dst_rect.x;</span>
<span class="p_add">+			layer-&gt;dst_rect.x =</span>
<span class="p_add">+			    pov_req-&gt;wb_ov_rect.x + (layer-&gt;dst_rect.y -</span>
<span class="p_add">+						     pov_req-&gt;wb_ov_rect.y);</span>
<span class="p_add">+			layer-&gt;dst_rect.y =</span>
<span class="p_add">+			    pov_req-&gt;wb_ov_rect.y + temp -</span>
<span class="p_add">+			    pov_req-&gt;wb_ov_rect.x;</span>
<span class="p_add">+</span>
<span class="p_add">+			temp = layer-&gt;dst_rect.w;</span>
<span class="p_add">+			layer-&gt;dst_rect.w = layer-&gt;dst_rect.h;</span>
<span class="p_add">+			layer-&gt;dst_rect.h = temp;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (layer-&gt;transform == HISI_FB_TRANSFORM_ROT_90) {</span>
<span class="p_add">+				layer-&gt;transform = HISI_FB_TRANSFORM_FLIP_V;</span>
<span class="p_add">+</span>
<span class="p_add">+			} else if (layer-&gt;transform ==</span>
<span class="p_add">+				   HISI_FB_TRANSFORM_ROT_270) {</span>
<span class="p_add">+				layer-&gt;transform = HISI_FB_TRANSFORM_FLIP_H;</span>
<span class="p_add">+</span>
<span class="p_add">+			} else if (layer-&gt;transform ==</span>
<span class="p_add">+				   (HISI_FB_TRANSFORM_ROT_90 |</span>
<span class="p_add">+				    HISI_FB_TRANSFORM_FLIP_H)) {</span>
<span class="p_add">+				layer-&gt;transform = HISI_FB_TRANSFORM_ROT_180;</span>
<span class="p_add">+</span>
<span class="p_add">+			} else if (layer-&gt;transform ==</span>
<span class="p_add">+				   (HISI_FB_TRANSFORM_ROT_90 |</span>
<span class="p_add">+				    HISI_FB_TRANSFORM_FLIP_V)) {</span>
<span class="p_add">+				layer-&gt;transform = HISI_FB_TRANSFORM_NOP;</span>
<span class="p_add">+</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			has_rot = true;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	if (has_rot) {</span>
<span class="p_add">+		for (i = 0; i &lt; pov_req-&gt;wb_layer_nums; i++) {</span>
<span class="p_add">+			wb_layer = &amp;(pov_req-&gt;wb_layer_infos[i]);</span>
<span class="p_add">+			temp = wb_layer-&gt;src_rect.w;</span>
<span class="p_add">+			wb_layer-&gt;src_rect.w = wb_layer-&gt;src_rect.h;</span>
<span class="p_add">+			wb_layer-&gt;src_rect.h = temp;</span>
<span class="p_add">+</span>
<span class="p_add">+			wb_layer-&gt;transform =</span>
<span class="p_add">+			    (HISI_FB_TRANSFORM_ROT_90 |</span>
<span class="p_add">+			     HISI_FB_TRANSFORM_FLIP_V);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int get_ov_block_rect(dss_overlay_t *pov_req,</span>
<span class="p_add">+		      dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+		      dss_wb_layer_t *wb_layer, int *block_num,</span>
<span class="p_add">+		      dss_rect_t *ov_block_rects[])</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	uint32_t block_size = 0xFFFF;</span>
<span class="p_add">+	uint32_t current_offset = 0;</span>
<span class="p_add">+	uint32_t last_offset = 0;</span>
<span class="p_add">+	uint32_t fix_scf_span = 0;</span>
<span class="p_add">+	dss_layer_t *layer = NULL;</span>
<span class="p_add">+	uint32_t i = 0;</span>
<span class="p_add">+	int block_has_layer = 0;</span>
<span class="p_add">+	int w = 0;</span>
<span class="p_add">+	int h = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(pov_req == NULL);</span>
<span class="p_add">+	BUG_ON(pov_h_block == NULL);</span>
<span class="p_add">+	BUG_ON(ov_block_rects == NULL);</span>
<span class="p_add">+	BUG_ON(block_num == NULL);</span>
<span class="p_add">+	BUG_ON(wb_layer == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	*block_num = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* adjust layer transform cap, source layer dst_rect and writeback layer src_rect */</span>
<span class="p_add">+	adjust_layers_cap(pov_req, pov_h_block, wb_layer);</span>
<span class="p_add">+	w = wb_layer-&gt;src_rect.w;</span>
<span class="p_add">+	h = wb_layer-&gt;src_rect.h;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* init block size according to source layer dst_rect */</span>
<span class="p_add">+	block_size = calc_dest_block_size(pov_req, pov_h_block);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* if block size is invalid or larger than write back width, block is not needed.</span>
<span class="p_add">+	   Then block num is set to 1, and block rect is set to write back layer rect */</span>
<span class="p_add">+	if ((block_size == BLOCK_SIZE_INVALID) || (block_size &gt;= w)) {</span>
<span class="p_add">+		ov_block_rects[*block_num]-&gt;x = wb_layer-&gt;src_rect.x;</span>
<span class="p_add">+		ov_block_rects[*block_num]-&gt;y = wb_layer-&gt;src_rect.y;</span>
<span class="p_add">+		ov_block_rects[*block_num]-&gt;w = wb_layer-&gt;src_rect.w;</span>
<span class="p_add">+		ov_block_rects[*block_num]-&gt;h = wb_layer-&gt;src_rect.h;</span>
<span class="p_add">+</span>
<span class="p_add">+		*block_num = 1;</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	current_offset = block_size;</span>
<span class="p_add">+	fix_scf_span = block_size;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (current_offset = block_size; last_offset &lt; w;</span>
<span class="p_add">+	     last_offset = current_offset, current_offset += block_size) {</span>
<span class="p_add">+		/* make sure each block of scaler layer is larger than 16 */</span>
<span class="p_add">+		if (block_fix_scf_constraint</span>
<span class="p_add">+		    (pov_req, pov_h_block, block_size, current_offset,</span>
<span class="p_add">+		     &amp;fix_scf_span) != 0) {</span>
<span class="p_add">+			HISI_FB_ERR(&quot;block_fix_scf_constraint err!\n&quot;);</span>
<span class="p_add">+			return -3;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* recalculate the block size, the final value */</span>
<span class="p_add">+		current_offset = current_offset - (block_size - fix_scf_span);</span>
<span class="p_add">+		block_has_layer = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; pov_h_block-&gt;layer_nums; i++) {</span>
<span class="p_add">+			layer = &amp;(pov_h_block-&gt;layer_infos[i]);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (((last_offset + pov_req-&gt;wb_ov_rect.x) &lt;=</span>
<span class="p_add">+			     (layer-&gt;dst_rect.x + layer-&gt;dst_rect.w - 1))</span>
<span class="p_add">+			    &amp;&amp; (layer-&gt;dst_rect.x &lt;</span>
<span class="p_add">+				(current_offset + pov_req-&gt;wb_ov_rect.x))) {</span>
<span class="p_add">+				block_has_layer = 1;</span>
<span class="p_add">+				if ((*block_num) &gt;= HISI_DSS_OFFLINE_MAX_BLOCK)</span>
<span class="p_add">+					return -5;</span>
<span class="p_add">+</span>
<span class="p_add">+				/* get the block rectangles */</span>
<span class="p_add">+				ov_block_rects[*block_num]-&gt;x =</span>
<span class="p_add">+				    wb_layer-&gt;src_rect.x + last_offset;</span>
<span class="p_add">+				ov_block_rects[*block_num]-&gt;y =</span>
<span class="p_add">+				    wb_layer-&gt;src_rect.y;</span>
<span class="p_add">+				ov_block_rects[*block_num]-&gt;w =</span>
<span class="p_add">+				    MIN(current_offset - last_offset,</span>
<span class="p_add">+					w - last_offset);</span>
<span class="p_add">+				ov_block_rects[*block_num]-&gt;h = h;</span>
<span class="p_add">+</span>
<span class="p_add">+				(*block_num)++;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (block_has_layer == 0) {</span>
<span class="p_add">+			if ((*block_num) &gt;= HISI_DSS_OFFLINE_MAX_BLOCK)</span>
<span class="p_add">+				return -6;</span>
<span class="p_add">+</span>
<span class="p_add">+			ov_block_rects[*block_num]-&gt;x =</span>
<span class="p_add">+			    wb_layer-&gt;src_rect.x + last_offset;</span>
<span class="p_add">+			ov_block_rects[*block_num]-&gt;y = wb_layer-&gt;src_rect.y;</span>
<span class="p_add">+			ov_block_rects[*block_num]-&gt;w =</span>
<span class="p_add">+			    MIN(current_offset - last_offset, w - last_offset);</span>
<span class="p_add">+			ov_block_rects[*block_num]-&gt;h = h;</span>
<span class="p_add">+</span>
<span class="p_add">+			(*block_num)++;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (g_debug_ovl_block_composer) {</span>
<span class="p_add">+			HISI_FB_INFO</span>
<span class="p_add">+			    (&quot;ov_block_rects[%d]:[%d:%d:%d:%d], current_offset=%d, &quot;</span>
<span class="p_add">+			     &quot;fix_scf_span=%d, last_offset=%d, w=%d!\n&quot;,</span>
<span class="p_add">+			     *block_num, ov_block_rects[*block_num - 1]-&gt;x,</span>
<span class="p_add">+			     ov_block_rects[*block_num - 1]-&gt;y,</span>
<span class="p_add">+			     ov_block_rects[*block_num - 1]-&gt;w,</span>
<span class="p_add">+			     ov_block_rects[*block_num - 1]-&gt;h, current_offset,</span>
<span class="p_add">+			     fix_scf_span, last_offset, w);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	hisifb_adjust_block_rect(*block_num, ov_block_rects, wb_layer);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int create_h_v_block_layer(dss_layer_t *h_layer,</span>
<span class="p_add">+				  dss_layer_t *h_v_layer,</span>
<span class="p_add">+				  dss_rect_t dst_cross_rect,</span>
<span class="p_add">+				  dss_rect_t ov_block_rect)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int input_startpos = 0;</span>
<span class="p_add">+	int input_span = 0;</span>
<span class="p_add">+	uint32_t output_startpos = 0;</span>
<span class="p_add">+	uint32_t output_span = 0;</span>
<span class="p_add">+	int h_ratio = 0;</span>
<span class="p_add">+	int acc_hscl = 0;</span>
<span class="p_add">+	int scf_read_start = 0;</span>
<span class="p_add">+	int scf_read_end = 0;</span>
<span class="p_add">+	dss_rect_t rect_transform = { 0 };</span>
<span class="p_add">+	dss_rect_t src_rect = { 0 };</span>
<span class="p_add">+	int scf_int = 0;</span>
<span class="p_add">+	int scf_rem = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_rect_t dst_rect = { 0 };</span>
<span class="p_add">+	int first_block = 0;</span>
<span class="p_add">+	int last_block = 0;</span>
<span class="p_add">+	int scf_in_start = 0;</span>
<span class="p_add">+	int scf_in_end = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(h_layer == NULL);</span>
<span class="p_add">+	BUG_ON(h_v_layer == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	first_block = (h_layer-&gt;dst_rect.x &gt;= ov_block_rect.x) ? 1 : 0;</span>
<span class="p_add">+	last_block =</span>
<span class="p_add">+	    ((ov_block_rect.x + ov_block_rect.w) &gt;=</span>
<span class="p_add">+	     (h_layer-&gt;dst_rect.x + h_layer-&gt;dst_rect.w)) ? 1 : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	output_startpos = dst_cross_rect.x - h_layer-&gt;dst_rect.x;</span>
<span class="p_add">+	output_span = dst_cross_rect.w;</span>
<span class="p_add">+	input_startpos = output_startpos;</span>
<span class="p_add">+	input_span = output_span;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* handle arsr2p layer */</span>
<span class="p_add">+#define ARSR2P_OVERLAPH 16</span>
<span class="p_add">+</span>
<span class="p_add">+	if (h_layer-&gt;chn_idx == DSS_RCHN_V0</span>
<span class="p_add">+	    &amp;&amp; (h_layer-&gt;src_rect.w &lt; h_layer-&gt;dst_rect.w</span>
<span class="p_add">+		|| h_layer-&gt;src_rect.h != h_layer-&gt;dst_rect.h</span>
<span class="p_add">+		|| (h_layer-&gt;need_cap &amp; CAP_2D_SHARPNESS))) {</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((!first_block) &amp;&amp; (output_startpos % 2)) {</span>
<span class="p_add">+			h_v_layer-&gt;block_info.arsr2p_left_clip = 1;</span>
<span class="p_add">+			dst_cross_rect.x =</span>
<span class="p_add">+			    dst_cross_rect.x -</span>
<span class="p_add">+			    h_v_layer-&gt;block_info.arsr2p_left_clip;</span>
<span class="p_add">+			dst_cross_rect.w =</span>
<span class="p_add">+			    dst_cross_rect.w +</span>
<span class="p_add">+			    h_v_layer-&gt;block_info.arsr2p_left_clip;</span>
<span class="p_add">+</span>
<span class="p_add">+			output_startpos =</span>
<span class="p_add">+			    output_startpos -</span>
<span class="p_add">+			    h_v_layer-&gt;block_info.arsr2p_left_clip;</span>
<span class="p_add">+			output_span = dst_cross_rect.w;</span>
<span class="p_add">+			input_startpos = output_startpos;</span>
<span class="p_add">+			input_span = output_span;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (h_layer-&gt;src_rect.w &gt; h_layer-&gt;dst_rect.w) {</span>
<span class="p_add">+			src_rect.x = h_layer-&gt;src_rect.x;</span>
<span class="p_add">+			src_rect.y = h_layer-&gt;src_rect.y;</span>
<span class="p_add">+			src_rect.w = h_layer-&gt;dst_rect.w;</span>
<span class="p_add">+			src_rect.h = h_layer-&gt;src_rect.h;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			src_rect = h_layer-&gt;src_rect;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		h_ratio =</span>
<span class="p_add">+		    (DSS_WIDTH(src_rect.w) * ARSR2P_INC_FACTOR +</span>
<span class="p_add">+		     ARSR2P_INC_FACTOR - acc_hscl) / h_layer-&gt;dst_rect.w;</span>
<span class="p_add">+</span>
<span class="p_add">+		scf_int = output_startpos * h_ratio / ARSR2P_INC_FACTOR;</span>
<span class="p_add">+		scf_rem = output_startpos * h_ratio % ARSR2P_INC_FACTOR;</span>
<span class="p_add">+		scf_in_start = (scf_rem &gt; 0) ? (scf_int + 1) : scf_int;</span>
<span class="p_add">+</span>
<span class="p_add">+		scf_int =</span>
<span class="p_add">+		    (output_startpos +</span>
<span class="p_add">+		     output_span) * h_ratio / ARSR2P_INC_FACTOR;</span>
<span class="p_add">+		scf_rem =</span>
<span class="p_add">+		    (output_startpos +</span>
<span class="p_add">+		     output_span) * h_ratio % ARSR2P_INC_FACTOR;</span>
<span class="p_add">+		scf_in_end = (scf_rem &gt; 0) ? (scf_int + 1) : scf_int;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((first_block == 1) &amp;&amp; (last_block == 1)) {</span>
<span class="p_add">+			scf_read_start = 0;</span>
<span class="p_add">+			scf_read_end = DSS_WIDTH(src_rect.w);</span>
<span class="p_add">+			h_v_layer-&gt;block_info.last_tile = 1;</span>
<span class="p_add">+		} else if (first_block == 1) {</span>
<span class="p_add">+			scf_read_start = 0;</span>
<span class="p_add">+			scf_read_end = scf_in_end + ARSR2P_OVERLAPH - 1;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			scf_read_start = scf_in_start - ARSR2P_OVERLAPH;</span>
<span class="p_add">+			if (scf_read_start &lt; 0)</span>
<span class="p_add">+				scf_read_start = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (last_block == 1) {</span>
<span class="p_add">+				scf_read_end = DSS_WIDTH(src_rect.w);</span>
<span class="p_add">+				h_v_layer-&gt;block_info.last_tile = 1;</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				scf_read_end = scf_in_end + ARSR2P_OVERLAPH - 1;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (scf_read_end &gt; DSS_WIDTH(src_rect.w))</span>
<span class="p_add">+			scf_read_end = DSS_WIDTH(src_rect.w);</span>
<span class="p_add">+</span>
<span class="p_add">+		input_startpos = scf_read_start;</span>
<span class="p_add">+		input_span = scf_read_end - scf_read_start + 1;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.h_ratio_arsr2p = h_ratio;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_src_x = h_layer-&gt;src_rect.x;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_src_y = h_layer-&gt;src_rect.y;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_dst_x = h_layer-&gt;dst_rect.x;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_dst_y = h_layer-&gt;dst_rect.y;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_dst_w = h_layer-&gt;dst_rect.w;</span>
<span class="p_add">+</span>
<span class="p_add">+		rect_transform.x = h_layer-&gt;src_rect.x + input_startpos;</span>
<span class="p_add">+		rect_transform.y = h_layer-&gt;src_rect.y;</span>
<span class="p_add">+		rect_transform.w = input_span;</span>
<span class="p_add">+		rect_transform.h = h_layer-&gt;src_rect.h;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.arsr2p_in_rect = rect_transform;</span>
<span class="p_add">+		h_v_layer-&gt;src_rect = rect_transform;</span>
<span class="p_add">+		rect_across_rect(h_v_layer-&gt;src_rect, h_v_layer-&gt;src_rect_mask,</span>
<span class="p_add">+				 &amp;h_v_layer-&gt;src_rect_mask);</span>
<span class="p_add">+		h_v_layer-&gt;dst_rect = dst_cross_rect;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	/* scaling not in rchn v0 or scaling down in rchn v0 */</span>
<span class="p_add">+	if (((h_layer-&gt;src_rect.w != h_layer-&gt;dst_rect.w)</span>
<span class="p_add">+	     &amp;&amp; (h_layer-&gt;chn_idx != DSS_RCHN_V0))</span>
<span class="p_add">+	    || ((h_layer-&gt;src_rect.w &gt; h_layer-&gt;dst_rect.w)</span>
<span class="p_add">+		 &amp;&amp; (h_layer-&gt;chn_idx == DSS_RCHN_V0))) {</span>
<span class="p_add">+		/* check if arsr2p input has already extened width */</span>
<span class="p_add">+		if (h_v_layer-&gt;block_info.h_ratio_arsr2p) {</span>
<span class="p_add">+			dst_rect = rect_transform;</span>
<span class="p_add">+			h_v_layer-&gt;block_info.both_vscfh_arsr2p_used = 1;</span>
<span class="p_add">+			output_startpos = input_startpos;</span>
<span class="p_add">+			output_span = dst_rect.w;</span>
<span class="p_add">+			input_startpos = output_startpos;</span>
<span class="p_add">+			input_span = output_span;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			dst_rect = h_layer-&gt;dst_rect;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		h_ratio =</span>
<span class="p_add">+		    (DSS_WIDTH(h_layer-&gt;src_rect.w) * SCF_INC_FACTOR +</span>
<span class="p_add">+		     SCF_INC_FACTOR / 2 -</span>
<span class="p_add">+		     acc_hscl) / DSS_WIDTH(h_layer-&gt;dst_rect.w);</span>
<span class="p_add">+</span>
<span class="p_add">+		scf_in_start = output_startpos * h_ratio / SCF_INC_FACTOR;</span>
<span class="p_add">+		scf_in_end =</span>
<span class="p_add">+		    DSS_WIDTH(output_startpos +</span>
<span class="p_add">+			      output_span) * h_ratio / SCF_INC_FACTOR;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((first_block == 1) &amp;&amp; (last_block == 1)) {</span>
<span class="p_add">+			acc_hscl = 0;</span>
<span class="p_add">+			scf_read_start = 0;</span>
<span class="p_add">+			scf_read_end = DSS_WIDTH(h_layer-&gt;src_rect.w);</span>
<span class="p_add">+		} else if (first_block == 1) {</span>
<span class="p_add">+			acc_hscl = 0;</span>
<span class="p_add">+			scf_read_start = 0;</span>
<span class="p_add">+			scf_read_end = scf_in_end + SCF_INPUT_OV;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			scf_read_start = scf_in_start - SCF_INPUT_OV;</span>
<span class="p_add">+			if (scf_read_start &lt; 0)</span>
<span class="p_add">+				scf_read_start = 0;</span>
<span class="p_add">+			acc_hscl =</span>
<span class="p_add">+			    output_startpos * h_ratio -</span>
<span class="p_add">+			    scf_read_start * SCF_INC_FACTOR;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (last_block == 1) {</span>
<span class="p_add">+				scf_read_end = DSS_WIDTH(h_layer-&gt;src_rect.w);</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				scf_read_end = scf_in_end + SCF_INPUT_OV;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (scf_read_end &gt; DSS_WIDTH(h_layer-&gt;src_rect.w))</span>
<span class="p_add">+			scf_read_end = DSS_WIDTH(h_layer-&gt;src_rect.w);</span>
<span class="p_add">+</span>
<span class="p_add">+		input_startpos = scf_read_start;</span>
<span class="p_add">+		input_span = scf_read_end - scf_read_start + 1;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.h_ratio = h_ratio;</span>
<span class="p_add">+		h_v_layer-&gt;block_info.acc_hscl = acc_hscl;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (g_debug_ovl_block_composer) {</span>
<span class="p_add">+			HISI_FB_INFO</span>
<span class="p_add">+			    (&quot;first_block=%d, last_block=%d, output_startpos=%d, output_span=%d, &quot;</span>
<span class="p_add">+			     &quot;h_ratio=%d, acc_hscl=%d, scf_read_start=%d,&quot;</span>
<span class="p_add">+			     &quot;scf_read_end=%d, input_startpos=%d, input_span=%d\n&quot;,</span>
<span class="p_add">+			     first_block, last_block, output_startpos,</span>
<span class="p_add">+			     output_span, h_ratio, acc_hscl, scf_read_start,</span>
<span class="p_add">+			     scf_read_end, input_startpos, input_span);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (h_v_layer-&gt;transform) {</span>
<span class="p_add">+	case HISI_FB_TRANSFORM_NOP:</span>
<span class="p_add">+	case HISI_FB_TRANSFORM_FLIP_V:</span>
<span class="p_add">+		rect_transform.x = h_layer-&gt;src_rect.x + input_startpos;</span>
<span class="p_add">+		rect_transform.y = h_layer-&gt;src_rect.y;</span>
<span class="p_add">+		rect_transform.w = input_span;</span>
<span class="p_add">+		rect_transform.h = h_layer-&gt;src_rect.h;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case HISI_FB_TRANSFORM_ROT_180:</span>
<span class="p_add">+	case HISI_FB_TRANSFORM_FLIP_H:</span>
<span class="p_add">+		rect_transform.x =</span>
<span class="p_add">+		    h_layer-&gt;src_rect.x + h_layer-&gt;src_rect.w - input_startpos -</span>
<span class="p_add">+		    input_span;</span>
<span class="p_add">+		rect_transform.y = h_layer-&gt;src_rect.y;</span>
<span class="p_add">+		rect_transform.w = input_span;</span>
<span class="p_add">+		rect_transform.h = h_layer-&gt;src_rect.h;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		HISI_FB_ERR(&quot;unknown h_v_layer-&gt;transform=%d!\n&quot;,</span>
<span class="p_add">+			    h_v_layer-&gt;transform);</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	h_v_layer-&gt;src_rect = rect_transform;</span>
<span class="p_add">+	rect_across_rect(h_v_layer-&gt;src_rect, h_v_layer-&gt;src_rect_mask,</span>
<span class="p_add">+			 &amp;h_v_layer-&gt;src_rect_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!h_v_layer-&gt;block_info.both_vscfh_arsr2p_used)</span>
<span class="p_add">+		h_v_layer-&gt;dst_rect = dst_cross_rect;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int get_block_layers(dss_overlay_t *pov_req, dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+		     dss_rect_t ov_block_rect, dss_overlay_t *pov_req_h_v)</span>
<span class="p_add">+{</span>
<span class="p_add">+	uint32_t i = 0;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	dss_rect_t dst_cross_rect;</span>
<span class="p_add">+	dss_rect_t wb_ov_rect;</span>
<span class="p_add">+	dss_overlay_block_t *pov_h_v_block = NULL;</span>
<span class="p_add">+	dss_layer_t *h_layer = NULL;</span>
<span class="p_add">+	dss_layer_t *h_v_layer = NULL;</span>
<span class="p_add">+	int h_v_layer_idx = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(pov_req == NULL);</span>
<span class="p_add">+	BUG_ON(pov_h_block == NULL);</span>
<span class="p_add">+	BUG_ON(pov_req_h_v == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!ov_block_rect.w || !ov_block_rect.h) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;invaild args, ov_block_rect(%d,%d,%d,%d)!\n&quot;,</span>
<span class="p_add">+			    ov_block_rect.x, ov_block_rect.y, ov_block_rect.w,</span>
<span class="p_add">+			    ov_block_rect.y);</span>
<span class="p_add">+		return -1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pov_h_v_block = (dss_overlay_block_t *) pov_req_h_v-&gt;ov_block_infos_ptr;</span>
<span class="p_add">+	memcpy(pov_req_h_v, pov_req, sizeof(dss_overlay_t));</span>
<span class="p_add">+	pov_req_h_v-&gt;ov_block_infos_ptr = (uint64_t) (pov_h_v_block);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (calc_dest_block_size(pov_req, pov_h_block) == BLOCK_SIZE_INVALID) {</span>
<span class="p_add">+		pov_req_h_v-&gt;ov_block_nums = 1;</span>
<span class="p_add">+		memcpy(pov_h_v_block, pov_h_block, sizeof(dss_overlay_block_t));</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pov_h_v_block-&gt;layer_nums = 0;</span>
<span class="p_add">+	h_v_layer_idx = 0;</span>
<span class="p_add">+	memcpy(&amp;pov_h_v_block-&gt;ov_block_rect, &amp;pov_h_block-&gt;ov_block_rect,</span>
<span class="p_add">+	       sizeof(dss_rect_t));</span>
<span class="p_add">+	wb_ov_rect.x = pov_req-&gt;wb_ov_rect.x + ov_block_rect.x;</span>
<span class="p_add">+	wb_ov_rect.y = pov_req-&gt;wb_ov_rect.y;</span>
<span class="p_add">+	wb_ov_rect.w = ov_block_rect.w;</span>
<span class="p_add">+	wb_ov_rect.h = ov_block_rect.h;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; pov_h_block-&gt;layer_nums; i++) {</span>
<span class="p_add">+		h_layer = &amp;(pov_h_block-&gt;layer_infos[i]);</span>
<span class="p_add">+</span>
<span class="p_add">+		ret =</span>
<span class="p_add">+		    rect_across_rect(h_layer-&gt;dst_rect, wb_ov_rect,</span>
<span class="p_add">+				     &amp;dst_cross_rect);</span>
<span class="p_add">+		if (ret == 0)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		h_v_layer = &amp;(pov_h_v_block-&gt;layer_infos[h_v_layer_idx]);</span>
<span class="p_add">+		memcpy(h_v_layer, h_layer, sizeof(dss_layer_t));</span>
<span class="p_add">+		h_v_layer-&gt;layer_idx = h_v_layer_idx;</span>
<span class="p_add">+</span>
<span class="p_add">+		ret =</span>
<span class="p_add">+		    create_h_v_block_layer(h_layer, h_v_layer, dst_cross_rect,</span>
<span class="p_add">+					   wb_ov_rect);</span>
<span class="p_add">+		if ((ret != 0) || g_debug_ovl_block_composer) {</span>
<span class="p_add">+			HISI_FB_INFO</span>
<span class="p_add">+			    (&quot;h_layer[%d](transform[%d], wb_ov_rect[%d,%d,%d,%d], &quot;</span>
<span class="p_add">+			     &quot;src_rect[%d,%d,%d,%d], dst_rect[%d,%d,%d,%d]), &quot;</span>
<span class="p_add">+			     &quot;h_v_layer[%d](transform[%d], src_rect[%d,%d,%d,%d], &quot;</span>
<span class="p_add">+			     &quot;dst_rect[%d,%d,%d,%d], dst_cross_rect[%d,%d,%d,%d])\n&quot;,</span>
<span class="p_add">+			     i, h_layer-&gt;transform, wb_ov_rect.x, wb_ov_rect.y,</span>
<span class="p_add">+			     wb_ov_rect.w, wb_ov_rect.h, h_layer-&gt;src_rect.x,</span>
<span class="p_add">+			     h_layer-&gt;src_rect.y, h_layer-&gt;src_rect.w,</span>
<span class="p_add">+			     h_layer-&gt;src_rect.h, h_layer-&gt;dst_rect.x,</span>
<span class="p_add">+			     h_layer-&gt;dst_rect.y, h_layer-&gt;dst_rect.w,</span>
<span class="p_add">+			     h_layer-&gt;dst_rect.h, h_v_layer_idx,</span>
<span class="p_add">+			     h_v_layer-&gt;transform, h_v_layer-&gt;src_rect.x,</span>
<span class="p_add">+			     h_v_layer-&gt;src_rect.y, h_v_layer-&gt;src_rect.w,</span>
<span class="p_add">+			     h_v_layer-&gt;src_rect.h, h_v_layer-&gt;dst_rect.x,</span>
<span class="p_add">+			     h_v_layer-&gt;dst_rect.y, h_v_layer-&gt;dst_rect.w,</span>
<span class="p_add">+			     h_v_layer-&gt;dst_rect.h, dst_cross_rect.x,</span>
<span class="p_add">+			     dst_cross_rect.y, dst_cross_rect.w,</span>
<span class="p_add">+			     dst_cross_rect.h);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (ret != 0) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;create_h_v_block_layer failed, h_layer[%d], h_v_layer[%d]!\n&quot;,</span>
<span class="p_add">+			     i, h_v_layer_idx);</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		h_v_layer_idx++;</span>
<span class="p_add">+		pov_h_v_block-&gt;layer_nums = h_v_layer_idx;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.h b/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.h</span>
new file mode 100755
<span class="p_header">index 000000000000..dcbd01650814</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/drivers/video/fbdev/hisi/dss/hisi_block_algorithm.h</span>
<span class="p_chunk">@@ -0,0 +1,29 @@</span> <span class="p_context"></span>
<span class="p_add">+/* Copyright (c) 2013-2014, Hisilicon Tech. Co., Ltd. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 and</span>
<span class="p_add">+ * only version 2 as published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __HISI_BLOCK_ALGORITHM_H__</span>
<span class="p_add">+#define __HISI_BLOCK_ALGORITHM_H__</span>
<span class="p_add">+</span>
<span class="p_add">+#include &quot;hisi_dss.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+int get_ov_block_rect(dss_overlay_t *pov_req_h,</span>
<span class="p_add">+		      dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+		      dss_wb_layer_t *wb_layer, int *block_num,</span>
<span class="p_add">+		      dss_rect_t *ov_block_rects[]);</span>
<span class="p_add">+int get_block_layers(dss_overlay_t *pov_req_h,</span>
<span class="p_add">+		     dss_overlay_block_t *pov_h_block,</span>
<span class="p_add">+		     dss_rect_t ov_block_rect, dss_overlay_t *pov_req_v_block);</span>
<span class="p_add">+int rect_across_rect(dss_rect_t rect1, dss_rect_t rect2,</span>
<span class="p_add">+		     dss_rect_t *cross_rect);</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/drivers/video/fbdev/hisi/dss/hisi_dpe_utils_hi3660.c b/drivers/video/fbdev/hisi/dss/hisi_dpe_utils_hi3660.c</span>
new file mode 100755
<span class="p_header">index 000000000000..87b9768de329</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/drivers/video/fbdev/hisi/dss/hisi_dpe_utils_hi3660.c</span>
<span class="p_chunk">@@ -0,0 +1,1549 @@</span> <span class="p_context"></span>
<span class="p_add">+/* Copyright (c) 2013-2014, Hisilicon Tech. Co., Ltd. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 and</span>
<span class="p_add">+ * only version 2 as published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &quot;hisi_dpe_utils.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+DEFINE_SEMAPHORE(hisi_fb_dss_inner_clk_sem);</span>
<span class="p_add">+</span>
<span class="p_add">+static int dss_inner_clk_refcount = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+#define OFFSET_FRACTIONAL_BITS	(11)</span>
<span class="p_add">+#define ROUND1(x,y)	((x) / (y) + ((x) % (y)  ? 1 : 0))</span>
<span class="p_add">+</span>
<span class="p_add">+static int get_lcd_frame_rate(struct hisi_panel_info *pinfo)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return pinfo-&gt;pxl_clk_rate / (pinfo-&gt;xres + pinfo-&gt;pxl_clk_rate_div *</span>
<span class="p_add">+				      (pinfo-&gt;ldi.h_back_porch +</span>
<span class="p_add">+				       pinfo-&gt;ldi.h_front_porch +</span>
<span class="p_add">+				       pinfo-&gt;ldi.h_pulse_width)) /</span>
<span class="p_add">+	    (pinfo-&gt;yres + pinfo-&gt;ldi.v_back_porch + pinfo-&gt;ldi.v_front_porch +</span>
<span class="p_add">+	     pinfo-&gt;ldi.v_pulse_width);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+struct dss_clk_rate *get_dss_clk_rate(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	struct dss_clk_rate *pdss_clk_rate = NULL;</span>
<span class="p_add">+	int frame_rate = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+	pdss_clk_rate = &amp;(hisifd-&gt;dss_clk_rate);</span>
<span class="p_add">+	frame_rate = get_lcd_frame_rate(pinfo);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pdss_clk_rate-&gt;dss_pclk_dss_rate == 0) {</span>
<span class="p_add">+		if ((pinfo-&gt;xres * pinfo-&gt;yres) &gt;= (RES_4K_PHONE)) {</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pri_clk_rate =</span>
<span class="p_add">+			    DEFAULT_DSS_CORE_CLK_08V_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_dss_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_DSS_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_pctrl_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_PCTRL_RATE;</span>
<span class="p_add">+			hisifd-&gt;core_clk_upt_support = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		} else if ((pinfo-&gt;xres * pinfo-&gt;yres) &gt;= (RES_1440P)) {</span>
<span class="p_add">+			if (frame_rate &gt;= 110) {</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pri_clk_rate =</span>
<span class="p_add">+				    DEFAULT_DSS_CORE_CLK_08V_RATE;</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pclk_dss_rate =</span>
<span class="p_add">+				    DEFAULT_PCLK_DSS_RATE;</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pclk_pctrl_rate =</span>
<span class="p_add">+				    DEFAULT_PCLK_PCTRL_RATE;</span>
<span class="p_add">+				hisifd-&gt;core_clk_upt_support = 0;</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pri_clk_rate =</span>
<span class="p_add">+				    DEFAULT_DSS_CORE_CLK_07V_RATE;</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pclk_dss_rate =</span>
<span class="p_add">+				    DEFAULT_PCLK_DSS_RATE;</span>
<span class="p_add">+				pdss_clk_rate-&gt;dss_pclk_pctrl_rate =</span>
<span class="p_add">+				    DEFAULT_PCLK_PCTRL_RATE;</span>
<span class="p_add">+				hisifd-&gt;core_clk_upt_support = 1;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+		} else if ((pinfo-&gt;xres * pinfo-&gt;yres) &gt;= (RES_1080P)) {</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pri_clk_rate =</span>
<span class="p_add">+			    DEFAULT_DSS_CORE_CLK_07V_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_dss_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_DSS_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_pctrl_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_PCTRL_RATE;</span>
<span class="p_add">+			hisifd-&gt;core_clk_upt_support = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pri_clk_rate =</span>
<span class="p_add">+			    DEFAULT_DSS_CORE_CLK_07V_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_dss_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_DSS_RATE;</span>
<span class="p_add">+			pdss_clk_rate-&gt;dss_pclk_pctrl_rate =</span>
<span class="p_add">+			    DEFAULT_PCLK_PCTRL_RATE;</span>
<span class="p_add">+			hisifd-&gt;core_clk_upt_support = 1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return pdss_clk_rate;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int set_dss_clk_rate(struct hisi_fb_data_type *hisifd,</span>
<span class="p_add">+		     dss_clk_rate_t dss_clk_rate)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (NULL == hisifd) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;NULL Pointer!\n&quot;);</span>
<span class="p_add">+		return -1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((dss_clk_rate.dss_pri_clk_rate != DEFAULT_DSS_CORE_CLK_08V_RATE)</span>
<span class="p_add">+	    &amp;&amp; (dss_clk_rate.dss_pri_clk_rate != DEFAULT_DSS_CORE_CLK_07V_RATE)) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;no support set dss_pri_clk_rate(%llu)!\n&quot;,</span>
<span class="p_add">+			    dss_clk_rate.dss_pri_clk_rate);</span>
<span class="p_add">+		return -1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (dss_clk_rate.dss_pri_clk_rate ==</span>
<span class="p_add">+	    hisifd-&gt;dss_clk_rate.dss_pri_clk_rate) {</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = clk_set_rate(hisifd-&gt;dss_pri_clk, dss_clk_rate.dss_pri_clk_rate);</span>
<span class="p_add">+	if (ret &lt; 0) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;set dss_pri_clk_rate(%llu) failed, error=%d!\n&quot;,</span>
<span class="p_add">+			    dss_clk_rate.dss_pri_clk_rate, ret);</span>
<span class="p_add">+		return -1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	hisifd-&gt;dss_clk_rate.dss_pri_clk_rate = dss_clk_rate.dss_pri_clk_rate;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_common_enable(struct hisi_fb_data_type *hisifd,</span>
<span class="p_add">+				 bool fastboot_enable)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = NULL;</span>
<span class="p_add">+	int prev_refcount = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	down(&amp;hisi_fb_dss_inner_clk_sem);</span>
<span class="p_add">+</span>
<span class="p_add">+	prev_refcount = dss_inner_clk_refcount++;</span>
<span class="p_add">+	if (!prev_refcount &amp;&amp; !fastboot_enable) {</span>
<span class="p_add">+		outp32(dss_base + DSS_CMDLIST_OFFSET + CMD_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_SCL_OFFSET + SCF_COEF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000088);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_SCL_OFFSET + SCF_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_ARSR_OFFSET + ARSR2P_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_DMA_OFFSET + VPP_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG0_DMA_OFFSET + AFBCD_MEM_CTRL,</span>
<span class="p_add">+		       0x00008888);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG1_SCL_OFFSET + SCF_COEF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000088);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG1_SCL_OFFSET + SCF_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG1_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG1_DMA_OFFSET + AFBCD_MEM_CTRL,</span>
<span class="p_add">+		       0x00008888);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG2_SCL_OFFSET + SCF_COEF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000088);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG2_SCL_OFFSET + SCF_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_VG2_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G0_SCL_OFFSET + SCF_COEF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000088);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G0_SCL_OFFSET + SCF_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x0000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G0_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G0_DMA_OFFSET + AFBCD_MEM_CTRL,</span>
<span class="p_add">+		       0x00008888);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G1_SCL_OFFSET + SCF_COEF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000088);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G1_SCL_OFFSET + SCF_LB_MEM_CTRL,</span>
<span class="p_add">+		       0x0000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G1_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_G1_DMA_OFFSET + AFBCD_MEM_CTRL,</span>
<span class="p_add">+		       0x00008888);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_D0_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_D0_DMA_OFFSET + AFBCD_MEM_CTRL,</span>
<span class="p_add">+		       0x00008888);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_D1_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_D2_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_RCH_D3_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH0_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH0_DMA_OFFSET + AFBCE_MEM_CTRL,</span>
<span class="p_add">+		       0x00000888);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH0_DMA_OFFSET + ROT_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH1_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH1_DMA_OFFSET + AFBCE_MEM_CTRL,</span>
<span class="p_add">+		       0x00000888);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH1_DMA_OFFSET + ROT_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH2_DMA_OFFSET + DMA_BUF_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+		outp32(dss_base + DSS_WCH2_DMA_OFFSET + ROT_MEM_CTRL,</span>
<span class="p_add">+		       0x00000008);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_DEBUG(&quot;fb%d, dss_inner_clk_refcount=%d\n&quot;,</span>
<span class="p_add">+		      hisifd-&gt;index, dss_inner_clk_refcount);</span>
<span class="p_add">+</span>
<span class="p_add">+	up(&amp;hisi_fb_dss_inner_clk_sem);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_common_disable(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int new_refcount = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	down(&amp;hisi_fb_dss_inner_clk_sem);</span>
<span class="p_add">+	new_refcount = --dss_inner_clk_refcount;</span>
<span class="p_add">+	WARN_ON(new_refcount &lt; 0);</span>
<span class="p_add">+	if (!new_refcount) {</span>
<span class="p_add">+		;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_DEBUG(&quot;fb%d, dss_inner_clk_refcount=%d\n&quot;,</span>
<span class="p_add">+		      hisifd-&gt;index, dss_inner_clk_refcount);</span>
<span class="p_add">+	up(&amp;hisi_fb_dss_inner_clk_sem);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_pdp_enable(struct hisi_fb_data_type *hisifd,</span>
<span class="p_add">+			      bool fastboot_enable)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (fastboot_enable) return;</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dss_base + DSS_IFBC_OFFSET + IFBC_MEM_CTRL, 0x00000088);</span>
<span class="p_add">+	outp32(dss_base + DSS_DSC_OFFSET + DSC_MEM_CTRL, 0x00000888);</span>
<span class="p_add">+	outp32(dss_base + DSS_LDI0_OFFSET + LDI_MEM_CTRL, 0x00000008);</span>
<span class="p_add">+	outp32(dss_base + DSS_DBUF0_OFFSET + DBUF_MEM_CTRL, 0x00000008);</span>
<span class="p_add">+	outp32(dss_base + DSS_DPP_DITHER_OFFSET + DITHER_MEM_CTRL, 0x00000008);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_pdp_disable(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_sdp_enable(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dss_base + DSS_LDI1_OFFSET + LDI_MEM_CTRL, 0x00000008);</span>
<span class="p_add">+	outp32(dss_base + DSS_DBUF1_OFFSET + DBUF_MEM_CTRL, 0x00000008);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dss_inner_clk_sdp_disable(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_dpp(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dpp_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		dpp_base = hisifd-&gt;dss_base + DSS_DPP_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dpp_base + DPP_IMG_SIZE_BEF_SR,</span>
<span class="p_add">+	       (DSS_HEIGHT(pinfo-&gt;yres) &lt;&lt; 16) | DSS_WIDTH(pinfo-&gt;xres));</span>
<span class="p_add">+	outp32(dpp_base + DPP_IMG_SIZE_AFT_SR,</span>
<span class="p_add">+	       (DSS_HEIGHT(pinfo-&gt;yres) &lt;&lt; 16) | DSS_WIDTH(pinfo-&gt;xres));</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HISI_FB_COLORBAR_USED</span>
<span class="p_add">+	outp32(dpp_base + DPP_CLRBAR_CTRL, (0x30 &lt;&lt; 24) | (0 &lt;&lt; 1) | 0x1);</span>
<span class="p_add">+	set_reg(dpp_base + DPP_CLRBAR_1ST_CLR, 0xFF, 8, 16);</span>
<span class="p_add">+	set_reg(dpp_base + DPP_CLRBAR_2ND_CLR, 0xFF, 8, 8);</span>
<span class="p_add">+	set_reg(dpp_base + DPP_CLRBAR_3RD_CLR, 0xFF, 8, 0);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_dsc(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dsc_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	struct dsc_panel_info *dsc = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t dsc_en = 0;</span>
<span class="p_add">+	uint32_t pic_width = 0;</span>
<span class="p_add">+	uint32_t pic_height = 0;</span>
<span class="p_add">+	uint32_t chunk_size = 0;</span>
<span class="p_add">+	uint32_t groups_per_line = 0;</span>
<span class="p_add">+	uint32_t rbs_min = 0;</span>
<span class="p_add">+	uint32_t hrd_delay = 0;</span>
<span class="p_add">+	uint32_t target_bpp_x16 = 0;</span>
<span class="p_add">+	uint32_t num_extra_mux_bits = 0;</span>
<span class="p_add">+	uint32_t slice_bits = 0;</span>
<span class="p_add">+	uint32_t final_offset = 0;</span>
<span class="p_add">+	uint32_t final_scale = 0;</span>
<span class="p_add">+	uint32_t nfl_bpg_offset = 0;</span>
<span class="p_add">+	uint32_t groups_total = 0;</span>
<span class="p_add">+	uint32_t slice_bpg_offset = 0;</span>
<span class="p_add">+	uint32_t scale_increment_interval = 0;</span>
<span class="p_add">+	uint32_t initial_scale_value = 0;</span>
<span class="p_add">+	uint32_t scale_decrement_interval = 0;</span>
<span class="p_add">+	uint32_t adjustment_bits = 0;</span>
<span class="p_add">+	uint32_t adj_bits_per_grp = 0;</span>
<span class="p_add">+	uint32_t bits_per_grp = 0;</span>
<span class="p_add">+	uint32_t slices_per_line = 0;</span>
<span class="p_add">+	uint32_t pic_line_grp_num = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+	dsc = &amp;(pinfo-&gt;vesa_dsc);</span>
<span class="p_add">+</span>
<span class="p_add">+	dsc_base = hisifd-&gt;dss_base + DSS_DSC_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((pinfo-&gt;ifbc_type == IFBC_TYPE_VESA2X_SINGLE) ||</span>
<span class="p_add">+	    (pinfo-&gt;ifbc_type == IFBC_TYPE_VESA3X_SINGLE)) {</span>
<span class="p_add">+</span>
<span class="p_add">+		dsc_en = 0x5;</span>
<span class="p_add">+		pic_width = DSS_WIDTH(pinfo-&gt;xres);</span>
<span class="p_add">+		outp32(hisifd-&gt;dss_base + DSS_LDI0_OFFSET + LDI_VESA_CLK_SEL,</span>
<span class="p_add">+		       0);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+</span>
<span class="p_add">+		dsc_en = 0xb;</span>
<span class="p_add">+		pic_width = DSS_WIDTH(pinfo-&gt;xres / 2);</span>
<span class="p_add">+		outp32(hisifd-&gt;dss_base + DSS_LDI0_OFFSET + LDI_VESA_CLK_SEL,</span>
<span class="p_add">+		       1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pic_height = DSS_HEIGHT(pinfo-&gt;yres);</span>
<span class="p_add">+	chunk_size = ROUND1((dsc-&gt;slice_width + 1) * dsc-&gt;bits_per_pixel, 8);</span>
<span class="p_add">+</span>
<span class="p_add">+	groups_per_line = (dsc-&gt;slice_width + 3) / 3;</span>
<span class="p_add">+	rbs_min =</span>
<span class="p_add">+	    dsc-&gt;rc_model_size - dsc-&gt;initial_offset +</span>
<span class="p_add">+	    dsc-&gt;initial_xmit_delay * dsc-&gt;bits_per_pixel +</span>
<span class="p_add">+	    groups_per_line * dsc-&gt;first_line_bpg_offset;</span>
<span class="p_add">+	hrd_delay = ROUND1(rbs_min, dsc-&gt;bits_per_pixel);</span>
<span class="p_add">+</span>
<span class="p_add">+	target_bpp_x16 = dsc-&gt;bits_per_pixel * 16;</span>
<span class="p_add">+	slice_bits = 8 * chunk_size * (dsc-&gt;slice_height + 1);</span>
<span class="p_add">+</span>
<span class="p_add">+	num_extra_mux_bits =</span>
<span class="p_add">+	    3 * (dsc-&gt;mux_word_size + (4 * dsc-&gt;bits_per_component + 4) - 2);</span>
<span class="p_add">+	while ((num_extra_mux_bits &gt; 0)</span>
<span class="p_add">+	       &amp;&amp; ((slice_bits - num_extra_mux_bits) % dsc-&gt;mux_word_size))</span>
<span class="p_add">+		num_extra_mux_bits--;</span>
<span class="p_add">+</span>
<span class="p_add">+	final_offset = dsc-&gt;rc_model_size -</span>
<span class="p_add">+		((dsc-&gt;initial_xmit_delay * target_bpp_x16 + 8) &gt;&gt; 4) +</span>
<span class="p_add">+		num_extra_mux_bits;</span>
<span class="p_add">+</span>
<span class="p_add">+	final_scale =</span>
<span class="p_add">+	    8 * dsc-&gt;rc_model_size / (dsc-&gt;rc_model_size - final_offset);</span>
<span class="p_add">+</span>
<span class="p_add">+	nfl_bpg_offset =</span>
<span class="p_add">+		ROUND1(dsc-&gt;first_line_bpg_offset &lt;&lt; OFFSET_FRACTIONAL_BITS, dsc-&gt;slice_height);</span>
<span class="p_add">+</span>
<span class="p_add">+	groups_total = groups_per_line * (dsc-&gt;slice_height + 1);</span>
<span class="p_add">+	slice_bpg_offset =</span>
<span class="p_add">+		ROUND1((1 &lt;&lt; OFFSET_FRACTIONAL_BITS) *</span>
<span class="p_add">+			(dsc-&gt;rc_model_size - dsc-&gt;initial_offset + num_extra_mux_bits),</span>
<span class="p_add">+			groups_total);</span>
<span class="p_add">+</span>
<span class="p_add">+	scale_increment_interval =</span>
<span class="p_add">+		(1 &lt;&lt; OFFSET_FRACTIONAL_BITS) * final_offset /</span>
<span class="p_add">+		 ((final_scale - 9) * (nfl_bpg_offset + slice_bpg_offset));</span>
<span class="p_add">+</span>
<span class="p_add">+	initial_scale_value =</span>
<span class="p_add">+	    8 * dsc-&gt;rc_model_size / (dsc-&gt;rc_model_size - dsc-&gt;initial_offset);</span>
<span class="p_add">+	if (groups_per_line &lt; initial_scale_value - 8) {</span>
<span class="p_add">+		initial_scale_value = groups_per_line + 8;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (initial_scale_value &gt; 8) {</span>
<span class="p_add">+		scale_decrement_interval =</span>
<span class="p_add">+		    groups_per_line / (initial_scale_value - 8);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		scale_decrement_interval = 4095;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	adjustment_bits =</span>
<span class="p_add">+	    (8 - (dsc-&gt;bits_per_pixel * (dsc-&gt;slice_width + 1)) % 8) % 8;</span>
<span class="p_add">+</span>
<span class="p_add">+	adj_bits_per_grp = dsc-&gt;bits_per_pixel * 3 - 3;</span>
<span class="p_add">+	bits_per_grp = dsc-&gt;bits_per_pixel * 3;</span>
<span class="p_add">+	slices_per_line = (pic_width &gt; dsc-&gt;slice_width) ? 1 : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pic_line_grp_num =</span>
<span class="p_add">+	    ((dsc-&gt;slice_width + 3) / 3) * (slices_per_line + 1) - 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_REG_DEFAULT, 0x1, 1, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_EN, dsc_en, 4, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_CTRL,</span>
<span class="p_add">+		dsc-&gt;bits_per_component | (dsc-&gt;linebuf_depth &lt;&lt; 4) |</span>
<span class="p_add">+		(dsc-&gt;block_pred_enable &lt;&lt; 10) |</span>
<span class="p_add">+		(0x1 &lt;&lt; 11) | (dsc-&gt;bits_per_pixel &lt;&lt; 16), 26, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_PIC_SIZE, (pic_width &lt;&lt; 16) | pic_height, 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_SLICE_SIZE,</span>
<span class="p_add">+		(dsc-&gt;slice_width &lt;&lt; 16) | dsc-&gt;slice_height, 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_CHUNK_SIZE, chunk_size, 16, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_INITIAL_DELAY, dsc-&gt;initial_xmit_delay |</span>
<span class="p_add">+		((hrd_delay - dsc-&gt;initial_xmit_delay) &lt;&lt; 16), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM0,</span>
<span class="p_add">+		initial_scale_value | (scale_increment_interval &lt;&lt; 16), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM1,</span>
<span class="p_add">+		(dsc-&gt;first_line_bpg_offset &lt;&lt; 16) | scale_decrement_interval,</span>
<span class="p_add">+		21, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM2,</span>
<span class="p_add">+		nfl_bpg_offset | (slice_bpg_offset &lt;&lt; 16), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM3,</span>
<span class="p_add">+		((final_offset &lt;&lt; 16) | dsc-&gt;initial_offset), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_FLATNESS_QP_TH,</span>
<span class="p_add">+		((dsc-&gt;flatness_max_qp &lt;&lt; 16) | (dsc-&gt;flatness_min_qp &lt;&lt; 0)),</span>
<span class="p_add">+		24, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM4,</span>
<span class="p_add">+		((dsc-&gt;rc_edge_factor &lt;&lt; 20) | (dsc-&gt;rc_model_size &lt;&lt; 0)), 24,</span>
<span class="p_add">+		0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_PARAM5,</span>
<span class="p_add">+		((dsc-&gt;rc_tgt_offset_lo &lt;&lt; 20) | (dsc-&gt;rc_tgt_offset_hi &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;rc_quant_incr_limit1 &lt;&lt; 8) |</span>
<span class="p_add">+		 (dsc-&gt;rc_quant_incr_limit0 &lt;&lt; 0)), 24, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_BUF_THRESH0,</span>
<span class="p_add">+		((dsc-&gt;rc_buf_thresh0 &lt;&lt; 24) | (dsc-&gt;rc_buf_thresh1 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh2 &lt;&lt; 8) | (dsc-&gt;rc_buf_thresh3 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_BUF_THRESH1,</span>
<span class="p_add">+		((dsc-&gt;rc_buf_thresh4 &lt;&lt; 24) | (dsc-&gt;rc_buf_thresh5 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh6 &lt;&lt; 8) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh7 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_BUF_THRESH2,</span>
<span class="p_add">+		((dsc-&gt;rc_buf_thresh8 &lt;&lt; 24) | (dsc-&gt;rc_buf_thresh9 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh10 &lt;&lt; 8) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh11 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_BUF_THRESH3,</span>
<span class="p_add">+		((dsc-&gt;rc_buf_thresh12 &lt;&lt; 24) |</span>
<span class="p_add">+		 (dsc-&gt;rc_buf_thresh13 &lt;&lt; 16)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM0,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp0 &lt;&lt; 27) | (dsc-&gt;range_max_qp0 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset0 &lt;&lt; 16) | (dsc-&gt;range_min_qp1 &lt;&lt; 11) |</span>
<span class="p_add">+		 (dsc-&gt;range_max_qp1 &lt;&lt; 6) | (dsc-&gt;range_bpg_offset1 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM1,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp2 &lt;&lt; 27) | (dsc-&gt;range_max_qp2 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset2 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp3 &lt;&lt; 11) | (dsc-&gt;range_max_qp3 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset3 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM2,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp4 &lt;&lt; 27) | (dsc-&gt;range_max_qp4 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset4 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp5 &lt;&lt; 11) | (dsc-&gt;range_max_qp5 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset5 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM3,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp6 &lt;&lt; 27) | (dsc-&gt;range_max_qp6 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset6 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp7 &lt;&lt; 11) | (dsc-&gt;range_max_qp7 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset7 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM4,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp8 &lt;&lt; 27) | (dsc-&gt;range_max_qp8 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset8 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp9 &lt;&lt; 11) | (dsc-&gt;range_max_qp9 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset9 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM5,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp10 &lt;&lt; 27) | (dsc-&gt;range_max_qp10 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset10 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp11 &lt;&lt; 11) | (dsc-&gt;range_max_qp11 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset11 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM6,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp12 &lt;&lt; 27) | (dsc-&gt;range_max_qp12 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset12 &lt;&lt; 16) |</span>
<span class="p_add">+		 (dsc-&gt;range_min_qp13 &lt;&lt; 11) | (dsc-&gt;range_max_qp13 &lt;&lt; 6) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset13 &lt;&lt; 0)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RC_RANGE_PARAM7,</span>
<span class="p_add">+		((dsc-&gt;range_min_qp14 &lt;&lt; 27) | (dsc-&gt;range_max_qp14 &lt;&lt; 22) |</span>
<span class="p_add">+		 (dsc-&gt;range_bpg_offset14 &lt;&lt; 16)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_ADJUSTMENT_BITS, adjustment_bits, 4, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_BITS_PER_GRP,</span>
<span class="p_add">+		bits_per_grp | (adj_bits_per_grp &lt;&lt; 8), 14, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_MULTI_SLICE_CTL, slices_per_line |</span>
<span class="p_add">+		(pic_line_grp_num &lt;&lt; 16), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((chunk_size % 3 == 0)) {</span>
<span class="p_add">+		set_reg(dsc_base + DSC_OUT_CTRL, 0x0, 1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	} else if ((chunk_size % 2 == 0)) {</span>
<span class="p_add">+		set_reg(dsc_base + DSC_OUT_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR</span>
<span class="p_add">+		    (&quot;fb%d, chunk_size should be mode by 3 or 2,&quot;</span>
<span class="p_add">+		     &quot; but chunk_size = %u\n&quot;,</span>
<span class="p_add">+		     hisifd-&gt;index, chunk_size);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(dsc_base + DSC_CLK_SEL, 0x0, 32, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_CLK_EN, 0x7, 32, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_MEM_CTRL, 0x0, 32, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_ST_DATAIN, 0x0, 28, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_ST_DATAOUT, 0x0, 16, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC0_ST_SLC_POS, 0x0, 28, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC1_ST_SLC_POS, 0x0, 28, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC0_ST_PIC_POS, 0x0, 28, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC1_ST_PIC_POS, 0x0, 28, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC0_ST_FIFO, 0x0, 14, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC1_ST_FIFO, 0x0, 14, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC0_ST_LINEBUF, 0x0, 24, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC1_ST_LINEBUF, 0x0, 24, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_ST_ITFC, 0x0, 10, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_RD_SHADOW_SEL, 0x1, 1, 0);</span>
<span class="p_add">+	set_reg(dsc_base + DSC_REG_DEFAULT, 0x0, 1, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_ifbc(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ifbc_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	uint32_t mipi_idx = 0;</span>
<span class="p_add">+	uint32_t comp_mode = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t ifbc_out_mode = 0;</span>
<span class="p_add">+	uint32_t dpk_mode_sel = 0;</span>
<span class="p_add">+	uint32_t dup_mode_sel = 0;</span>
<span class="p_add">+	uint32_t porch_num = 0;</span>
<span class="p_add">+	uint32_t insert_byte_num = 0;</span>
<span class="p_add">+	uint32_t insert_byte = 0;</span>
<span class="p_add">+	uint32_t num_pad = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+	BUG_ON((pinfo-&gt;ifbc_type &lt; IFBC_TYPE_NONE)</span>
<span class="p_add">+	       || (pinfo-&gt;ifbc_type &gt;= IFBC_TYPE_MAX));</span>
<span class="p_add">+</span>
<span class="p_add">+	/* VESA_CLK_SEL is set to 0 for initial, 1 is needed only by vesa dual pipe compress */</span>
<span class="p_add">+	set_reg(hisifd-&gt;dss_base + DSS_LDI0_OFFSET + LDI_VESA_CLK_SEL, 0, 1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;ifbc_type == IFBC_TYPE_NONE)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!HISI_DSS_SUPPORT_DPP_MODULE_BIT(DPP_MODULE_IFBC))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ifbc_base = hisifd-&gt;dss_base + DSS_IFBC_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	mipi_idx = is_dual_mipi_panel(hisifd) ? 1 : 0;</span>
<span class="p_add">+	comp_mode = g_mipi_ifbc_division[mipi_idx][pinfo-&gt;ifbc_type].comp_mode;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_ifbc_vesa_panel(hisifd)) {</span>
<span class="p_add">+		init_dsc(hisifd);</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_CTRL, comp_mode, 3, 0);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;bpp == LCD_RGB888)</span>
<span class="p_add">+		ifbc_out_mode = 1;</span>
<span class="p_add">+	else if (pinfo-&gt;bpp == LCD_RGB565)</span>
<span class="p_add">+		ifbc_out_mode = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (((pinfo-&gt;ifbc_type == IFBC_TYPE_ORISE2X)</span>
<span class="p_add">+	     &amp;&amp; (pinfo-&gt;ifbc_cmp_dat_rev0 == 1))</span>
<span class="p_add">+	    || ((pinfo-&gt;ifbc_type == IFBC_TYPE_RSP3X)</span>
<span class="p_add">+		 &amp;&amp; (pinfo-&gt;type != PANEL_MIPI_VIDEO) &amp;&amp; (pinfo-&gt;xres % 3 != 0)))</span>
<span class="p_add">+		if (pinfo-&gt;ifbc_auto_sel != 0) {</span>
<span class="p_add">+			HISI_FB_ERR(&quot;fb%d, auto_sel = %u not support!&quot;,</span>
<span class="p_add">+				    hisifd-&gt;index, pinfo-&gt;ifbc_auto_sel);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;ifbc_type == IFBC_TYPE_ORISE2X) {</span>
<span class="p_add">+		if ((pinfo-&gt;xres % 2 != 0) &amp;&amp; (pinfo-&gt;yres % 2 != 0)) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;fb%d, IFBC_ORISE2X not support (xres = %u, yres = %u)!&quot;,</span>
<span class="p_add">+			     hisifd-&gt;index, pinfo-&gt;xres, pinfo-&gt;yres);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		dpk_mode_sel = 1;</span>
<span class="p_add">+		dup_mode_sel = 2;</span>
<span class="p_add">+		porch_num = 0;</span>
<span class="p_add">+	} else if (pinfo-&gt;ifbc_type == IFBC_TYPE_ORISE3X) {</span>
<span class="p_add">+		dpk_mode_sel = 0;</span>
<span class="p_add">+		dup_mode_sel = 3;</span>
<span class="p_add">+		porch_num = 5;</span>
<span class="p_add">+	} else if (pinfo-&gt;ifbc_type == IFBC_TYPE_HIMAX2X) {</span>
<span class="p_add">+		if ((pinfo-&gt;xres % 2 != 0) &amp;&amp; (pinfo-&gt;yres % 2 != 0)) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;fb%d, IFBC_HIMAX2X not support (xres = %u, yres = %u)!&quot;,</span>
<span class="p_add">+			     hisifd-&gt;index, pinfo-&gt;xres, pinfo-&gt;yres);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		dpk_mode_sel = 1;</span>
<span class="p_add">+		dup_mode_sel = 2;</span>
<span class="p_add">+		porch_num = 0;</span>
<span class="p_add">+	} else if (pinfo-&gt;ifbc_type == IFBC_TYPE_RSP2X) {</span>
<span class="p_add">+		dpk_mode_sel = 1;</span>
<span class="p_add">+		dup_mode_sel = 0;</span>
<span class="p_add">+		porch_num = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((pinfo-&gt;type == PANEL_MIPI_CMD) ||</span>
<span class="p_add">+		    (pinfo-&gt;type == PANEL_DUAL_MIPI_CMD)) {</span>
<span class="p_add">+			num_pad = (4 - pinfo-&gt;xres % 4) % 4;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			num_pad = 0;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else if (pinfo-&gt;ifbc_type == IFBC_TYPE_RSP3X) {</span>
<span class="p_add">+		if ((pinfo-&gt;yres % 2 != 0) || (pinfo-&gt;yres &lt; 8)) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;fb%d, IFBC_RSP3X not support (xres = %u, yres = %u)!&quot;,</span>
<span class="p_add">+			     hisifd-&gt;index, pinfo-&gt;xres, pinfo-&gt;yres);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		dpk_mode_sel = 2;</span>
<span class="p_add">+		dup_mode_sel = 1;</span>
<span class="p_add">+		porch_num = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		insert_byte = DSS_WIDTH(pinfo-&gt;xres) / (mipi_idx + 1) + 1;</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((pinfo-&gt;type == PANEL_MIPI_VIDEO) ||</span>
<span class="p_add">+		    (pinfo-&gt;type == PANEL_DUAL_MIPI_VIDEO)) {</span>
<span class="p_add">+			insert_byte_num = (3 - insert_byte % 3) % 3;</span>
<span class="p_add">+			num_pad = (8 - pinfo-&gt;xres % 8) % 8;</span>
<span class="p_add">+		} else if ((pinfo-&gt;type == PANEL_MIPI_CMD) ||</span>
<span class="p_add">+			   (pinfo-&gt;type == PANEL_DUAL_MIPI_CMD)) {</span>
<span class="p_add">+			insert_byte_num = 0;</span>
<span class="p_add">+			num_pad = (4 - pinfo-&gt;xres % 4) % 4;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_SIZE,</span>
<span class="p_add">+		((DSS_WIDTH(pinfo-&gt;xres) &lt;&lt; 16) | DSS_HEIGHT(pinfo-&gt;yres)), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CTRL, comp_mode, 3, 0);</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CTRL, ifbc_out_mode, 1, 3);</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CTRL, pinfo-&gt;ifbc_cmp_dat_rev0, 1, 4);</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CTRL, pinfo-&gt;ifbc_cmp_dat_rev1, 1, 5);</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CTRL, pinfo-&gt;ifbc_auto_sel, 1, 6);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;ifbc_auto_sel == 0) {</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_CTRL, dpk_mode_sel, 3, 7);</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_CTRL, dup_mode_sel, 3, 10);</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_CTRL, porch_num, 8, 13);</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_INSERT,</span>
<span class="p_add">+			insert_byte_num | (insert_byte &lt;&lt; 16), 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		set_reg(ifbc_base + IFBC_PAD, num_pad, 3, 0);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;ifbc_type == IFBC_TYPE_ORISE3X) {</span>
<span class="p_add">+		if (pinfo-&gt;ifbc_orise_ctr == 1) {</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_CORE_GT, 0x0, 2, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (pinfo-&gt;ifbc_orise_ctl == IFBC_ORISE_CTL_8LINE) {</span>
<span class="p_add">+				set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0208, 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			} else if (pinfo-&gt;ifbc_orise_ctl == IFBC_ORISE_CTL_16LINE) {</span>
<span class="p_add">+				set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0210, 32, 0);</span>
<span class="p_add">+			} else if (pinfo-&gt;ifbc_orise_ctl == IFBC_ORISE_CTL_32LINE) {</span>
<span class="p_add">+				set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0220, 32, 0);</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0200, 32, 0);</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0300, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0419, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0500, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x063f, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0700, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0801, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0900, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0a64, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0b00, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0c5c, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0d00, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0e01, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x0f00, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x10a0, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x1100, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x125f, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x1300, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x14a0, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x1500, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x16ff, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x1700, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x200c, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x2100, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4000, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4100, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4200, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4300, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4800, 32, 0);</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_ORISE_CTL, 0x4900, 32, 0);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			set_reg(ifbc_base + IFBC_CORE_GT, 0x2, 2, 0);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_CLK_SEL, 0x0, 32, 0);</span>
<span class="p_add">+	set_reg(ifbc_base + IFBC_EN, 0x3, 2, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_post_scf(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dpp_base = NULL;</span>
<span class="p_add">+	char __iomem *scf_lut_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	dpp_base = hisifd-&gt;dss_base + DSS_DPP_OFFSET;</span>
<span class="p_add">+	scf_lut_base = hisifd-&gt;dss_base + DSS_POST_SCF_LUT_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!HISI_DSS_SUPPORT_DPP_MODULE_BIT(DPP_MODULE_POST_SCF)) {</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* ARSR1P memory shutdown</span>
<span class="p_add">+	   outp32(dpp_base + DPP_ARSR1P_MEM_CTRL, 0X4); */</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo-&gt;post_scf_support = 1;</span>
<span class="p_add">+	hisi_dss_post_scl_load_filter_coef(hisifd, false, scf_lut_base,</span>
<span class="p_add">+					   SCL_COEF_RGB_IDX);</span>
<span class="p_add">+</span>
<span class="p_add">+	return;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_dbuf(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dbuf_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	int sram_valid_num = 0;</span>
<span class="p_add">+	int sram_max_mem_depth = 0;</span>
<span class="p_add">+	int sram_min_support_depth = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t thd_rqos_in = 0;</span>
<span class="p_add">+	uint32_t thd_rqos_out = 0;</span>
<span class="p_add">+	uint32_t thd_wqos_in = 0;</span>
<span class="p_add">+	uint32_t thd_wqos_out = 0;</span>
<span class="p_add">+	uint32_t thd_cg_in = 0;</span>
<span class="p_add">+	uint32_t thd_cg_out = 0;</span>
<span class="p_add">+	uint32_t thd_wr_wait = 0;</span>
<span class="p_add">+	uint32_t thd_cg_hold = 0;</span>
<span class="p_add">+	uint32_t thd_flux_req_befdfs_in = 0;</span>
<span class="p_add">+	uint32_t thd_flux_req_befdfs_out = 0;</span>
<span class="p_add">+	uint32_t thd_flux_req_aftdfs_in = 0;</span>
<span class="p_add">+	uint32_t thd_flux_req_aftdfs_out = 0;</span>
<span class="p_add">+	uint32_t thd_dfs_ok = 0;</span>
<span class="p_add">+	uint32_t dfs_ok_mask = 0;</span>
<span class="p_add">+	uint32_t thd_flux_req_sw_en = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	int dfs_time = 0;</span>
<span class="p_add">+	int dfs_time_min = 0;</span>
<span class="p_add">+	int depth = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		dbuf_base = hisifd-&gt;dss_base + DSS_DBUF0_OFFSET;</span>
<span class="p_add">+		if (!HISI_DSS_SUPPORT_DPP_MODULE_BIT(DPP_MODULE_DBUF)) {</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pinfo-&gt;xres * pinfo-&gt;yres &gt;= RES_4K_PHONE) {</span>
<span class="p_add">+			dfs_time_min = DFS_TIME_MIN_4K;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			dfs_time_min = DFS_TIME_MIN;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		dfs_time = DFS_TIME;</span>
<span class="p_add">+		depth = DBUF0_DEPTH;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		dbuf_base = hisifd-&gt;dss_base + DSS_DBUF1_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+		dfs_time = DFS_TIME;</span>
<span class="p_add">+		dfs_time_min = DFS_TIME_MIN;</span>
<span class="p_add">+		depth = DBUF1_DEPTH;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 ** int K = 0;</span>
<span class="p_add">+	 ** int Tp = 1000000  / pinfo-&gt;pxl_clk_rate;</span>
<span class="p_add">+	 ** K = (pinfo-&gt;ldi.h_pulse_width + pinfo-&gt;ldi.h_back_porch + pinfo-&gt;xres +</span>
<span class="p_add">+	 **     pinfo-&gt;ldi.h_front_porch) / pinfo-&gt;xres;</span>
<span class="p_add">+	 ** thd_cg_out = dfs_time / (Tp * K * 6);</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (pinfo-&gt;pxl_clk_rate_div &lt;= 0)</span>
<span class="p_add">+		pinfo-&gt;pxl_clk_rate_div = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	thd_cg_out = (dfs_time * pinfo-&gt;pxl_clk_rate * pinfo-&gt;xres) /</span>
<span class="p_add">+	    (((pinfo-&gt;ldi.h_pulse_width + pinfo-&gt;ldi.h_back_porch +</span>
<span class="p_add">+	       pinfo-&gt;ldi.h_front_porch) * pinfo-&gt;pxl_clk_rate_div +</span>
<span class="p_add">+	      pinfo-&gt;xres) * 6 * 1000000UL);</span>
<span class="p_add">+	sram_valid_num = thd_cg_out / depth;</span>
<span class="p_add">+	thd_cg_in = (sram_valid_num + 1) * depth - 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	sram_max_mem_depth = (sram_valid_num + 1) * depth;</span>
<span class="p_add">+</span>
<span class="p_add">+	thd_rqos_in = thd_cg_out * 85 / 100;</span>
<span class="p_add">+	thd_rqos_out = thd_cg_out;</span>
<span class="p_add">+	thd_flux_req_befdfs_in = GET_FLUX_REQ_IN(sram_max_mem_depth);</span>
<span class="p_add">+	thd_flux_req_befdfs_out = GET_FLUX_REQ_OUT(sram_max_mem_depth);</span>
<span class="p_add">+</span>
<span class="p_add">+	sram_min_support_depth =</span>
<span class="p_add">+	    dfs_time_min * pinfo-&gt;xres / (1000000 / 60 /</span>
<span class="p_add">+					  (pinfo-&gt;yres +</span>
<span class="p_add">+					   pinfo-&gt;ldi.v_back_porch +</span>
<span class="p_add">+					   pinfo-&gt;ldi.v_front_porch +</span>
<span class="p_add">+					   pinfo-&gt;ldi.v_pulse_width) *</span>
<span class="p_add">+					  (DBUF_WIDTH_BIT / 3 / BITS_PER_BYTE));</span>
<span class="p_add">+</span>
<span class="p_add">+	/* thd_flux_req_aftdfs_in   =[(sram_valid_num+1)*depth - 50*HSIZE/((1000000/60/(VSIZE+VFP+VBP+VSW))*6)]/3 */</span>
<span class="p_add">+	thd_flux_req_aftdfs_in =</span>
<span class="p_add">+	    (sram_max_mem_depth - sram_min_support_depth) / 3;</span>
<span class="p_add">+	/* thd_flux_req_aftdfs_out  =  2*[(sram_valid_num+1)* depth - 50*HSIZE/((1000000/60/(VSIZE+VFP+VBP+VSW))*6)]/3 */</span>
<span class="p_add">+	thd_flux_req_aftdfs_out =</span>
<span class="p_add">+	    2 * (sram_max_mem_depth - sram_min_support_depth) / 3;</span>
<span class="p_add">+</span>
<span class="p_add">+	thd_dfs_ok = thd_flux_req_befdfs_in;</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_DEBUG(&quot;sram_valid_num=%d,\n&quot;</span>
<span class="p_add">+		      &quot;thd_rqos_in=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_rqos_out=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_cg_in=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_cg_out=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_flux_req_befdfs_in=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_flux_req_befdfs_out=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_flux_req_aftdfs_in=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_flux_req_aftdfs_out=0x%x\n&quot;</span>
<span class="p_add">+		      &quot;thd_dfs_ok=0x%x\n&quot;,</span>
<span class="p_add">+		      sram_valid_num,</span>
<span class="p_add">+		      thd_rqos_in,</span>
<span class="p_add">+		      thd_rqos_out,</span>
<span class="p_add">+		      thd_cg_in,</span>
<span class="p_add">+		      thd_cg_out,</span>
<span class="p_add">+		      thd_flux_req_befdfs_in,</span>
<span class="p_add">+		      thd_flux_req_befdfs_out,</span>
<span class="p_add">+		      thd_flux_req_aftdfs_in,</span>
<span class="p_add">+		      thd_flux_req_aftdfs_out, thd_dfs_ok);</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_FRM_SIZE, pinfo-&gt;xres * pinfo-&gt;yres);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_FRM_HSIZE, DSS_WIDTH(pinfo-&gt;xres));</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_SRAM_VALID_NUM, sram_valid_num);</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_RQOS, (thd_rqos_out &lt;&lt; 16) | thd_rqos_in);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_WQOS, (thd_wqos_out &lt;&lt; 16) | thd_wqos_in);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_CG, (thd_cg_out &lt;&lt; 16) | thd_cg_in);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_OTHER, (thd_cg_hold &lt;&lt; 16) | thd_wr_wait);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_FLUX_REQ_BEF,</span>
<span class="p_add">+	       (thd_flux_req_befdfs_out &lt;&lt; 16) | thd_flux_req_befdfs_in);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_FLUX_REQ_AFT,</span>
<span class="p_add">+	       (thd_flux_req_aftdfs_out &lt;&lt; 16) | thd_flux_req_aftdfs_in);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_THD_DFS_OK, thd_dfs_ok);</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_FLUX_REQ_CTRL,</span>
<span class="p_add">+	       (dfs_ok_mask &lt;&lt; 1) | thd_flux_req_sw_en);</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dbuf_base + DBUF_DFS_LP_CTRL, 0x1);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_ldi_pxl_div(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+	uint32_t ifbc_type = 0;</span>
<span class="p_add">+	uint32_t mipi_idx = 0;</span>
<span class="p_add">+	uint32_t pxl0_div2_gt_en = 0;</span>
<span class="p_add">+	uint32_t pxl0_div4_gt_en = 0;</span>
<span class="p_add">+	uint32_t pxl0_divxcfg = 0;</span>
<span class="p_add">+	uint32_t pxl0_dsi_gt_en = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == EXTERNAL_PANEL_IDX)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+	ifbc_type = pinfo-&gt;ifbc_type;</span>
<span class="p_add">+	BUG_ON((ifbc_type &lt; IFBC_TYPE_NONE) || (ifbc_type &gt;= IFBC_TYPE_MAX));</span>
<span class="p_add">+</span>
<span class="p_add">+	mipi_idx = is_dual_mipi_panel(hisifd) ? 1 : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pxl0_div2_gt_en =</span>
<span class="p_add">+	    g_mipi_ifbc_division[mipi_idx][ifbc_type].pxl0_div2_gt_en;</span>
<span class="p_add">+	pxl0_div4_gt_en =</span>
<span class="p_add">+	    g_mipi_ifbc_division[mipi_idx][ifbc_type].pxl0_div4_gt_en;</span>
<span class="p_add">+	pxl0_divxcfg = g_mipi_ifbc_division[mipi_idx][ifbc_type].pxl0_divxcfg;</span>
<span class="p_add">+	pxl0_dsi_gt_en =</span>
<span class="p_add">+	    g_mipi_ifbc_division[mipi_idx][ifbc_type].pxl0_dsi_gt_en;</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(ldi_base + LDI_PXL0_DIV2_GT_EN, pxl0_div2_gt_en, 1, 0);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_PXL0_DIV4_GT_EN, pxl0_div4_gt_en, 1, 0);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_PXL0_GT_EN, 0x1, 1, 0);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_PXL0_DSI_GT_EN, pxl0_dsi_gt_en, 2, 0);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_PXL0_DIVXCFG, pxl0_divxcfg, 3, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_ldi(struct hisi_fb_data_type *hisifd, bool fastboot_enable)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+	dss_rect_t rect = { 0, 0, 0, 0 };</span>
<span class="p_add">+	uint32_t te0_enable = 0;</span>
<span class="p_add">+	uint32_t te1_enable = 0;</span>
<span class="p_add">+	uint32_t te_source = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+		te0_enable = 1;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		te1_enable = 1;</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	rect.x = 0;</span>
<span class="p_add">+	rect.y = 0;</span>
<span class="p_add">+	rect.w = pinfo-&gt;xres;</span>
<span class="p_add">+	rect.h = pinfo-&gt;yres;</span>
<span class="p_add">+	mipi_ifbc_get_rect(hisifd, &amp;rect);</span>
<span class="p_add">+</span>
<span class="p_add">+	init_ldi_pxl_div(hisifd);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_dual_mipi_panel(hisifd)) {</span>
<span class="p_add">+		if (is_mipi_video_panel(hisifd)) {</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL0,</span>
<span class="p_add">+			       (pinfo-&gt;ldi.h_back_porch +</span>
<span class="p_add">+				DSS_WIDTH(pinfo-&gt;ldi.h_pulse_width)) &lt;&lt; 16);</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL1, 0);</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL2,</span>
<span class="p_add">+			       DSS_WIDTH(rect.w));</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL0,</span>
<span class="p_add">+			       pinfo-&gt;ldi.h_back_porch &lt;&lt; 16);</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL1,</span>
<span class="p_add">+			       DSS_WIDTH(pinfo-&gt;ldi.h_pulse_width));</span>
<span class="p_add">+			outp32(ldi_base + LDI_DPI1_HRZ_CTRL2,</span>
<span class="p_add">+			       DSS_WIDTH(rect.w));</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(ldi_base + LDI_OVERLAP_SIZE,</span>
<span class="p_add">+		       pinfo-&gt;ldi.dpi0_overlap_size |</span>
<span class="p_add">+		       (pinfo-&gt;ldi.dpi1_overlap_size &lt;&lt; 16));</span>
<span class="p_add">+</span>
<span class="p_add">+		/* dual_mode_en */</span>
<span class="p_add">+		set_reg(ldi_base + LDI_CTRL, 1, 1, 5);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* split mode */</span>
<span class="p_add">+		set_reg(ldi_base + LDI_CTRL, 0, 1, 16);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* dual lcd: 0x1, dual mipi: 0x0 */</span>
<span class="p_add">+		set_reg(hisifd-&gt;dss_base + DSS_LDI0_OFFSET + LDI_DSI1_CLK_SEL,</span>
<span class="p_add">+			0x0, 1, 0);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (is_mipi_video_panel(hisifd)) {</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL0,</span>
<span class="p_add">+		       pinfo-&gt;ldi.h_front_porch |</span>
<span class="p_add">+		       ((pinfo-&gt;ldi.h_back_porch +</span>
<span class="p_add">+				DSS_WIDTH(pinfo-&gt;ldi.h_pulse_width)) &lt;&lt; 16));</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL1, 0);</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL2, DSS_WIDTH(rect.w));</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL0,</span>
<span class="p_add">+		       pinfo-&gt;ldi.h_front_porch | (pinfo-&gt;ldi.h_back_porch &lt;&lt; 16));</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL1,</span>
<span class="p_add">+		       DSS_WIDTH(pinfo-&gt;ldi.h_pulse_width));</span>
<span class="p_add">+		outp32(ldi_base + LDI_DPI0_HRZ_CTRL2, DSS_WIDTH(rect.w));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	outp32(ldi_base + LDI_VRT_CTRL0,</span>
<span class="p_add">+	       pinfo-&gt;ldi.v_front_porch | (pinfo-&gt;ldi.v_back_porch &lt;&lt; 16));</span>
<span class="p_add">+	outp32(ldi_base + LDI_VRT_CTRL1, DSS_HEIGHT(pinfo-&gt;ldi.v_pulse_width));</span>
<span class="p_add">+	outp32(ldi_base + LDI_VRT_CTRL2, DSS_HEIGHT(rect.h));</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(ldi_base + LDI_PLR_CTRL,</span>
<span class="p_add">+	       pinfo-&gt;ldi.vsync_plr | (pinfo-&gt;ldi.hsync_plr &lt;&lt; 1) |</span>
<span class="p_add">+	       (pinfo-&gt;ldi.pixelclk_plr &lt;&lt; 2) | (pinfo-&gt;ldi.data_en_plr &lt;&lt; 3));</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, pinfo-&gt;bpp, 2, 3);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, pinfo-&gt;bgr_fmt, 1, 13);</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(ldi_base + LDI_VINACT_MSK_LEN, pinfo-&gt;ldi.v_front_porch);</span>
<span class="p_add">+	outp32(ldi_base + LDI_CMD_EVENT_SEL, 0x1);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* for 1Hz LCD and mipi command LCD */</span>
<span class="p_add">+	if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_CMD_MOD_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* DSI_TE_CTRL</span>
<span class="p_add">+		 * te_source = 0, select te_pin</span>
<span class="p_add">+		 * te_source = 1, select te_triger</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		te_source = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x0, 2, 1);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, te_source, 1, 3);</span>
<span class="p_add">+		if (te_source == 0) {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_DSI_TE_CTRL, te0_enable, 1, 6);</span>
<span class="p_add">+			set_reg(ldi_base + LDI_DSI_TE_CTRL, te1_enable, 1, 7);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_DSI_TE_CTRL, te0_enable, 1, 4);</span>
<span class="p_add">+			set_reg(ldi_base + LDI_DSI_TE_CTRL, te1_enable, 1, 5);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x0, 1, 8);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x0, 4, 9);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x0, 4, 13);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_CTRL, 0x1, 1, 17);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* TBD:(dsi_te_hs_num+vactive)*htotal/clk_pxl0_div+0.00004&lt;1/60+vs_te_time+(vactive*hotal) /clk_ddic_rd */</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_HS_NUM, 0x0, 32, 0);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_HS_WD, 0x24024, 32, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* dsi_te0_vs_wd = lcd_te_width / T_pxl_clk, experience lcd_te_width = 2us */</span>
<span class="p_add">+		if (pinfo-&gt;pxl_clk_rate_div == 0) {</span>
<span class="p_add">+			HISI_FB_ERR(&quot;pxl_clk_rate_div is NULL, not support !\n&quot;);</span>
<span class="p_add">+			pinfo-&gt;pxl_clk_rate_div = 1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_TE_VS_WD,</span>
<span class="p_add">+			(0x3FC &lt;&lt; 12) | (2 * pinfo-&gt;pxl_clk_rate /</span>
<span class="p_add">+					 pinfo-&gt;pxl_clk_rate_div / 1000000), 32, 0);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		set_reg(ldi_base + LDI_DSI_CMD_MOD_CTRL, 0x1, 1, 1);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HISI_FB_COLORBAR_USED</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, DSS_WIDTH(0x3c), 7, 6);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_WORK_MODE, 0x0, 1, 1);</span>
<span class="p_add">+	set_reg(ldi_base + LDI_WORK_MODE, 0x0, 1, 0);</span>
<span class="p_add">+#else</span>
<span class="p_add">+	set_reg(ldi_base + LDI_WORK_MODE, 0x1, 1, 0);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+		set_reg(ldi_base + LDI_FRM_MSK,</span>
<span class="p_add">+			(hisifd-&gt;frame_update_flag == 1) ? 0x0 : 0x1, 1, 0);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!fastboot_enable)</span>
<span class="p_add">+		set_reg(ldi_base + LDI_CTRL, 0x0, 1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_DEBUG(&quot;-.!\n&quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void deinit_ldi(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, 0, 1, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void enable_ldi(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* ldi enable */</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void disable_ldi(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* ldi disable */</span>
<span class="p_add">+	set_reg(ldi_base + LDI_CTRL, 0x0, 1, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* set pixel clock to the exact value which is larger than 288M */</span>
<span class="p_add">+int dpe_recover_pxl_clock(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if ((hisifd-&gt;panel_info.pxl_clk_rate &gt; DSS_MAX_PXL0_CLK_288M)</span>
<span class="p_add">+	    &amp;&amp; (hisifd-&gt;index == PRIMARY_PANEL_IDX)) {</span>
<span class="p_add">+		if (clk_set_rate(hisifd-&gt;dss_pxl0_clk,</span>
<span class="p_add">+		     hisifd-&gt;panel_info.pxl_clk_rate) &lt; 0) {</span>
<span class="p_add">+			HISI_FB_ERR</span>
<span class="p_add">+			    (&quot;fb%d dss_pxl0_clk clk_set_rate(%llu) failed!\n&quot;,</span>
<span class="p_add">+			     hisifd-&gt;index, hisifd-&gt;panel_info.pxl_clk_rate);</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void ldi_frame_update(struct hisi_fb_data_type *hisifd, bool update)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_FRM_MSK, (update ? 0x0 : 0x1), 1, 0);</span>
<span class="p_add">+			if (update)</span>
<span class="p_add">+				set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void single_frame_update(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+		if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_FRM_MSK_UP, 0x1, 1, 0);</span>
<span class="p_add">+			set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_FRM_MSK_UP, 0x1, 1, 0);</span>
<span class="p_add">+			set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			set_reg(ldi_base + LDI_CTRL, 0x1, 1, 0);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dpe_interrupt_clear(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = 0;</span>
<span class="p_add">+	uint32_t clear = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		clear = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_PDP_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI0_OFFSET + LDI_CPU_ITF_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DPP_OFFSET + DPP_INTS, clear);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_MCTL_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_WCH0_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_WCH1_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH0_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH1_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH2_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH3_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH4_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH5_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH6_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH7_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_DSS_GLB_INTS, clear);</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		clear = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_SDP_INTS, clear);</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI1_OFFSET + LDI_CPU_ITF_INTS, clear);</span>
<span class="p_add">+	} else if (hisifd-&gt;index == AUXILIARY_PANEL_IDX) {</span>
<span class="p_add">+		clear = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_OFF_INTS, clear);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support this device!\n&quot;, hisifd-&gt;index);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dpe_interrupt_unmask(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = 0;</span>
<span class="p_add">+	uint32_t unmask = 0;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		/* unmask &amp;= ~(BIT_DPP_INTS | BIT_ITF0_INTS | BIT_DSS_GLB_INTS | BIT_MMU_IRPT_NS); */</span>
<span class="p_add">+		unmask &amp;= ~(BIT_DPP_INTS | BIT_ITF0_INTS | BIT_MMU_IRPT_NS);</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_PDP_INT_MSK, unmask);</span>
<span class="p_add">+</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		if (is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+			unmask &amp;=</span>
<span class="p_add">+			    ~(BIT_LCD_TE0_PIN | BIT_VACTIVE0_START |</span>
<span class="p_add">+			      BIT_VACTIVE0_END | BIT_FRM_END);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			unmask &amp;=</span>
<span class="p_add">+			    ~(BIT_VSYNC | BIT_VACTIVE0_START | BIT_VACTIVE0_END</span>
<span class="p_add">+			      | BIT_FRM_END);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI0_OFFSET + LDI_CPU_ITF_INT_MSK,</span>
<span class="p_add">+		       unmask);</span>
<span class="p_add">+</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		/* unmask &amp;= ~(BIT_CE_END_IND | BIT_BACKLIGHT_INTP); */</span>
<span class="p_add">+		if ((pinfo-&gt;acm_ce_support == 1)</span>
<span class="p_add">+		    &amp;&amp; HISI_DSS_SUPPORT_DPP_MODULE_BIT(DPP_MODULE_ACE))</span>
<span class="p_add">+			unmask &amp;= ~(BIT_CE_END_IND);</span>
<span class="p_add">+		if (pinfo-&gt;hiace_support == 1)</span>
<span class="p_add">+			unmask &amp;= ~(BIT_HIACE_IND);</span>
<span class="p_add">+</span>
<span class="p_add">+		outp32(dss_base + DSS_DPP_OFFSET + DPP_INT_MSK, unmask);</span>
<span class="p_add">+</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		/* unmask &amp;= ~(BIT_SDP_ITF1_INTS  | BIT_SDP_DSS_GLB_INTS | BIT_SDP_MMU_IRPT_NS); */</span>
<span class="p_add">+		unmask &amp;= ~(BIT_SDP_ITF1_INTS | BIT_SDP_MMU_IRPT_NS);</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_SDP_INT_MSK, unmask);</span>
<span class="p_add">+</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		unmask &amp;= ~(BIT_VSYNC | BIT_VACTIVE0_START | BIT_VACTIVE0_END);</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI1_OFFSET + LDI_CPU_ITF_INT_MSK,</span>
<span class="p_add">+		       unmask);</span>
<span class="p_add">+	} else if (hisifd-&gt;index == AUXILIARY_PANEL_IDX) {</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		unmask &amp;=</span>
<span class="p_add">+		    ~(BIT_OFF_WCH0_INTS | BIT_OFF_WCH1_INTS |</span>
<span class="p_add">+		      BIT_OFF_WCH0_WCH1_FRM_END_INT | BIT_OFF_MMU_IRPT_NS);</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_OFF_INT_MSK, unmask);</span>
<span class="p_add">+</span>
<span class="p_add">+		unmask = ~0;</span>
<span class="p_add">+		unmask &amp;= ~(BIT_OFF_CAM_WCH2_FRMEND_INTS);</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_OFF_CAM_INT_MSK, unmask);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support this device!\n&quot;, hisifd-&gt;index);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void dpe_interrupt_mask(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dss_base = 0;</span>
<span class="p_add">+	uint32_t mask = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_base = hisifd-&gt;dss_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		mask = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_PDP_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI0_OFFSET + LDI_CPU_ITF_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DPP_OFFSET + DPP_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_DSS_GLB_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_MCTL_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_WCH0_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_WCH1_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH0_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH1_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH2_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH3_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH4_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH5_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH6_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_DBG_OFFSET + DBG_RCH7_INT_MSK, mask);</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		mask = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_SDP_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + DSS_LDI1_OFFSET + LDI_CPU_ITF_INT_MSK, mask);</span>
<span class="p_add">+	} else if (hisifd-&gt;index == AUXILIARY_PANEL_IDX) {</span>
<span class="p_add">+		mask = ~0;</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_OFF_INT_MSK, mask);</span>
<span class="p_add">+		outp32(dss_base + GLB_CPU_OFF_CAM_INT_MSK, mask);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support this device!\n&quot;, hisifd-&gt;index);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void ldi_data_gate(struct hisi_fb_data_type *hisifd, bool enble)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *ldi_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	BUG_ON(hisifd == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!is_mipi_cmd_panel(hisifd)) {</span>
<span class="p_add">+		hisifd-&gt;ldi_data_gate_en = (enble ? 1 : 0);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI0_OFFSET;</span>
<span class="p_add">+	} else if (hisifd-&gt;index == EXTERNAL_PANEL_IDX) {</span>
<span class="p_add">+		ldi_base = hisifd-&gt;dss_base + DSS_LDI1_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (g_ldi_data_gate_en == 1) {</span>
<span class="p_add">+		hisifd-&gt;ldi_data_gate_en = (enble ? 1 : 0);</span>
<span class="p_add">+		set_reg(ldi_base + LDI_CTRL, (enble ? 0x1 : 0x0), 1, 2);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		hisifd-&gt;ldi_data_gate_en = 0;</span>
<span class="p_add">+		set_reg(ldi_base + LDI_CTRL, 0x0, 1, 2);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_DEBUG(&quot;ldi_data_gate_en=%d!\n&quot;, hisifd-&gt;ldi_data_gate_en);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* dpp csc config */</span>
<span class="p_add">+#define CSC_ROW	(3)</span>
<span class="p_add">+#define CSC_COL	(5)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ ** Rec.601 for Computer</span>
<span class="p_add">+ ** [ p00 p01 p02 cscidc2 cscodc2 ]</span>
<span class="p_add">+ ** [ p10 p11 p12 cscidc1 cscodc1 ]</span>
<span class="p_add">+ ** [ p20 p21 p22 cscidc0 cscodc0 ]</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int CSC10B_YUV2RGB709_WIDE_MPREC0[CSC_ROW][CSC_COL] = {</span>
<span class="p_add">+	{0x400, 0x000, 0x64d, 0x000, 0x000},</span>
<span class="p_add">+	{0x400, 0x1f40, 0x1e21, 0x5fe, 0x000},</span>
<span class="p_add">+	{0x400, 0x76c, 0x000, 0x5fe, 0x000}</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int CSC10B_RGB2YUV709_WIDE_MPREC2[CSC_ROW][CSC_COL] = {</span>
<span class="p_add">+	{0x367, 0xb71, 0x128, 0x000, 0x000},</span>
<span class="p_add">+	{0x1e2b, 0x19d5, 0x800, 0x000, 0x202},</span>
<span class="p_add">+	{0x800, 0x18bc, 0x1f44, 0x000, 0x202},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_csc10b(struct hisi_fb_data_type *hisifd,</span>
<span class="p_add">+			char __iomem *dpp_csc10b_base)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int (*csc_coe)[CSC_COL];</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd == NULL || dpp_csc10b_base == NULL) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;hisifd or dpp_csc10b_base is NULL!\n&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (dpp_csc10b_base ==</span>
<span class="p_add">+	    (hisifd-&gt;dss_base + DSS_DPP_CSC_RGB2YUV10B_OFFSET)) {</span>
<span class="p_add">+		csc_coe = CSC10B_RGB2YUV709_WIDE_MPREC2;</span>
<span class="p_add">+		outp32(dpp_csc10b_base + CSC10B_MPREC, 0x2);</span>
<span class="p_add">+	} else if (dpp_csc10b_base ==</span>
<span class="p_add">+		   (hisifd-&gt;dss_base + DSS_DPP_CSC_YUV2RGB10B_OFFSET)) {</span>
<span class="p_add">+		csc_coe = CSC10B_YUV2RGB709_WIDE_MPREC0;</span>
<span class="p_add">+		outp32(dpp_csc10b_base + CSC10B_MPREC, 0x0);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_IDC0, csc_coe[2][3]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_IDC1, csc_coe[1][3]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_IDC2, csc_coe[0][3]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_ODC0, csc_coe[2][4]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_ODC1, csc_coe[1][4]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_ODC2, csc_coe[0][4]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P00, csc_coe[0][0]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P01, csc_coe[0][1]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P02, csc_coe[0][2]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P10, csc_coe[1][0]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P11, csc_coe[1][1]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P12, csc_coe[1][2]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P20, csc_coe[2][0]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P21, csc_coe[2][1]);</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_P22, csc_coe[2][2]);</span>
<span class="p_add">+</span>
<span class="p_add">+	outp32(dpp_csc10b_base + CSC10B_MODULE_EN, 0x1);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_dpp_csc(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd == NULL) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;init_dpp_csc hisifd is NULL!\n&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;acm_support || pinfo-&gt;arsr1p_sharpness_support</span>
<span class="p_add">+	    || pinfo-&gt;post_scf_support) {</span>
<span class="p_add">+		init_csc10b(hisifd,</span>
<span class="p_add">+			    hisifd-&gt;dss_base + DSS_DPP_CSC_RGB2YUV10B_OFFSET);</span>
<span class="p_add">+		init_csc10b(hisifd,</span>
<span class="p_add">+			    hisifd-&gt;dss_base + DSS_DPP_CSC_YUV2RGB10B_OFFSET);</span>
<span class="p_add">+</span>
<span class="p_add">+		set_reg(hisifd-&gt;dss_base + DSS_DPP_BITEXT0_OFFSET +</span>
<span class="p_add">+			BIT_EXT0_CTL, 1, 1, 0);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_acm(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *acm_base = NULL;</span>
<span class="p_add">+	struct hisi_panel_info *pinfo = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd == NULL) {</span>
<span class="p_add">+		HISI_FB_DEBUG(&quot;init_acm hisifd is NULL!\n&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pinfo = &amp;(hisifd-&gt;panel_info);</span>
<span class="p_add">+	acm_base = hisifd-&gt;dss_base + DSS_DPP_ACM_OFFSET;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pinfo-&gt;acm_support != 1) {</span>
<span class="p_add">+		outp32(acm_base + ACM_MEM_CTRL, 0x4);</span>
<span class="p_add">+		HISI_FB_DEBUG(&quot;fb%d, not support acm!\n&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	/* not support */</span>
<span class="p_add">+	outp32(acm_base + ACM_MEM_CTRL, 0x4);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void init_igm_gmp_xcc_gm(struct hisi_fb_data_type *hisifd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	char __iomem *dpp_base = NULL;</span>
<span class="p_add">+	char __iomem *lcp_base = NULL;</span>
<span class="p_add">+	char __iomem *gamma_base = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd == NULL) {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;init_degmma_xcc_gmp hisifd is NULL!\n&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (hisifd-&gt;index == PRIMARY_PANEL_IDX) {</span>
<span class="p_add">+		dpp_base = hisifd-&gt;dss_base + DSS_DPP_OFFSET;</span>
<span class="p_add">+		lcp_base = hisifd-&gt;dss_base + DSS_DPP_LCP_OFFSET;</span>
<span class="p_add">+		gamma_base = hisifd-&gt;dss_base + DSS_DPP_GAMA_OFFSET;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		HISI_FB_ERR(&quot;fb%d, not support!\n&quot;, hisifd-&gt;index);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	outp32(lcp_base + LCP_DEGAMA_MEM_CTRL, 0x4);</span>
<span class="p_add">+	outp32(lcp_base + LCP_GMP_MEM_CTRL, 0x4);</span>
<span class="p_add">+	outp32(gamma_base + GAMA_MEM_CTRL, 0x4);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/drivers/video/fbdev/hisi/dss/hisi_dss.h b/drivers/video/fbdev/hisi/dss/hisi_dss.h</span>
new file mode 100755
<span class="p_header">index 000000000000..8bcb1192c64e</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/drivers/video/fbdev/hisi/dss/hisi_dss.h</span>
<span class="p_chunk">@@ -0,0 +1,493 @@</span> <span class="p_context"></span>
<span class="p_add">+/* include/linux/hisi_dss.h</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (c) 2013-2014, Hisilicon Tech. Co., Ltd. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 and</span>
<span class="p_add">+ * only version 2 as published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef _HISI_DSS_H_</span>
<span class="p_add">+#define _HISI_DSS_H_</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/types.h&gt;</span>
<span class="p_add">+#include &lt;linux/fb.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISIFB_IOCTL_MAGIC &#39;M&#39;</span>
<span class="p_add">+</span>
<span class="p_add">+#define FB_ACCEL_HI62xx     0x1</span>
<span class="p_add">+#define FB_ACCEL_HI363x     0x2</span>
<span class="p_add">+#define FB_ACCEL_HI365x     0x4</span>
<span class="p_add">+#define FB_ACCEL_HI625x     0x8</span>
<span class="p_add">+#define FB_ACCEL_HI366x     0x10</span>
<span class="p_add">+#define FB_ACCEL_PLATFORM_TYPE_FPGA     0x10000000</span>
<span class="p_add">+#define FB_ACCEL_PLATFORM_TYPE_ASIC     0x20000000</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISIFB_LCD_DIRTY_REGION_INFO_GET _IOW(HISIFB_IOCTL_MAGIC, 801, struct lcd_dirty_region_info)</span>
<span class="p_add">+#define HISIFB_PLATFORM_TYPE_GET _IOW(HISIFB_IOCTL_MAGIC, 802, int)</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISIFB_VSYNC_CTRL _IOW(HISIFB_IOCTL_MAGIC, 0x02, unsigned int)</span>
<span class="p_add">+#define HISIFB_DSS_CLK_RATE_SET _IOW(HISIFB_IOCTL_MAGIC, 0x04, struct dss_clk_rate)</span>
<span class="p_add">+#define HISIFB_DIRTY_REGION_UPDT_SET _IOW(HISIFB_IOCTL_MAGIC, 0x06, int)</span>
<span class="p_add">+#define HISIFB_DSS_MMBUF_ALLOC _IOW(HISIFB_IOCTL_MAGIC, 0x08, struct dss_mmbuf)</span>
<span class="p_add">+#define HISIFB_DSS_MMBUF_FREE _IOW(HISIFB_IOCTL_MAGIC, 0x09, struct dss_mmbuf)</span>
<span class="p_add">+#define HISIFB_DSS_VOLTAGE_GET _IOW(HISIFB_IOCTL_MAGIC, 0x10, struct dss_clk_rate)</span>
<span class="p_add">+#define HISIFB_DSS_VOLTAGE_SET _IOW(HISIFB_IOCTL_MAGIC, 0x11, struct dss_clk_rate)</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISIFB_OV_ONLINE_PLAY _IOW(HISIFB_IOCTL_MAGIC, 0x21, struct dss_overlay)</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISIFB_IDLE_IS_ALLOWED  _IOW(HISIFB_IOCTL_MAGIC, 0x42, int)</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef BIT</span>
<span class="p_add">+#define BIT(x)  (1&lt;&lt;(x))</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/* for fb0 fb1 fb2 and so on */</span>
<span class="p_add">+#define PRIMARY_PANEL_IDX	(0)</span>
<span class="p_add">+#define EXTERNAL_PANEL_IDX	(1)</span>
<span class="p_add">+#define AUXILIARY_PANEL_IDX	(2)</span>
<span class="p_add">+</span>
<span class="p_add">+/* lcd fps scence */</span>
<span class="p_add">+#define LCD_FPS_SCENCE_NORMAL   (0)</span>
<span class="p_add">+#define LCD_FPS_SCENCE_IDLE     BIT(0)</span>
<span class="p_add">+#define LCD_FPS_SCENCE_VIDEO    BIT(1)</span>
<span class="p_add">+#define LCD_FPS_SCENCE_GAME     BIT(2)</span>
<span class="p_add">+#define LCD_FPS_SCENCE_WEB      BIT(3)</span>
<span class="p_add">+#define LCD_FPS_SCENCE_EBOOK    BIT(4)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_WCH_MAX  (2)</span>
<span class="p_add">+</span>
<span class="p_add">+/* for YUV */</span>
<span class="p_add">+#define MAX_PLANES	(3)</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_wb_compose_type {</span>
<span class="p_add">+	DSS_WB_COMPOSE_PRIMARY = 0,</span>
<span class="p_add">+	DSS_WB_COMPOSE_COPYBIT,</span>
<span class="p_add">+	DSS_WB_COMPOSE_TYPE_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum hisi_fb_pixel_format {</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGB_565 = 0,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBX_4444,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBA_4444,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBX_5551,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBA_5551,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBX_8888,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_RGBA_8888,</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGR_565,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRX_4444,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRA_4444,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRX_5551,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRA_5551,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRX_8888,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_BGRA_8888,</span>
<span class="p_add">+</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YUV_422_I,</span>
<span class="p_add">+</span>
<span class="p_add">+	/* YUV Semi-planar */</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCbCr_422_SP,	/* NV16 */</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCrCb_422_SP,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCbCr_420_SP,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCrCb_420_SP,	/* NV21 */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* YUV Planar */</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCbCr_422_P,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCrCb_422_P,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCbCr_420_P,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YCrCb_420_P,	/* HISI_FB_PIXEL_FORMAT_YV12 */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* YUV Package */</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YUYV_422_Pkg,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_UYVY_422_Pkg,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_YVYU_422_Pkg,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_VYUY_422_Pkg,</span>
<span class="p_add">+	HISI_FB_PIXEL_FORMAT_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum hisi_fb_blending {</span>
<span class="p_add">+	HISI_FB_BLENDING_NONE = 0,</span>
<span class="p_add">+	HISI_FB_BLENDING_PREMULT = 1,</span>
<span class="p_add">+	HISI_FB_BLENDING_COVERAGE = 2,</span>
<span class="p_add">+	HISI_FB_BLENDING_MAX = 3,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum hisi_fb_transform {</span>
<span class="p_add">+	HISI_FB_TRANSFORM_NOP = 0x0,</span>
<span class="p_add">+	/* flip source image horizontally (around the vertical axis) */</span>
<span class="p_add">+	HISI_FB_TRANSFORM_FLIP_H = 0x01,</span>
<span class="p_add">+	/* flip source image vertically (around the horizontal axis) */</span>
<span class="p_add">+	HISI_FB_TRANSFORM_FLIP_V = 0x02,</span>
<span class="p_add">+	/* rotate source image 90 degrees clockwise */</span>
<span class="p_add">+	HISI_FB_TRANSFORM_ROT_90 = 0x04,</span>
<span class="p_add">+	/* rotate source image 180 degrees */</span>
<span class="p_add">+	HISI_FB_TRANSFORM_ROT_180 = 0x03,</span>
<span class="p_add">+	/* rotate source image 270 degrees clockwise */</span>
<span class="p_add">+	HISI_FB_TRANSFORM_ROT_270 = 0x07,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_csc_mode {</span>
<span class="p_add">+	DSS_CSC_601_WIDE = 0,</span>
<span class="p_add">+	DSS_CSC_601_NARROW,</span>
<span class="p_add">+	DSS_CSC_709_WIDE,</span>
<span class="p_add">+	DSS_CSC_709_NARROW,</span>
<span class="p_add">+	DSS_CSC_MOD_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_afbc_scramble_mode {</span>
<span class="p_add">+	DSS_AFBC_SCRAMBLE_NONE = 0,</span>
<span class="p_add">+	DSS_AFBC_SCRAMBLE_MODE1,</span>
<span class="p_add">+	DSS_AFBC_SCRAMBLE_MODE2,</span>
<span class="p_add">+	DSS_AFBC_SCRAMBLE_MODE3,</span>
<span class="p_add">+	DSS_AFBC_SCRAMBLE_MODE_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_chn_idx {</span>
<span class="p_add">+	DSS_RCHN_NONE = -1,</span>
<span class="p_add">+	DSS_RCHN_D2 = 0,</span>
<span class="p_add">+	DSS_RCHN_D3,</span>
<span class="p_add">+	DSS_RCHN_V0,</span>
<span class="p_add">+	DSS_RCHN_G0,</span>
<span class="p_add">+	DSS_RCHN_V1,</span>
<span class="p_add">+	DSS_RCHN_G1,</span>
<span class="p_add">+	DSS_RCHN_D0,</span>
<span class="p_add">+	DSS_RCHN_D1,</span>
<span class="p_add">+</span>
<span class="p_add">+	DSS_WCHN_W0,</span>
<span class="p_add">+	DSS_WCHN_W1,</span>
<span class="p_add">+</span>
<span class="p_add">+	DSS_CHN_MAX,</span>
<span class="p_add">+</span>
<span class="p_add">+	DSS_RCHN_V2 = DSS_CHN_MAX,</span>
<span class="p_add">+	DSS_WCHN_W2,</span>
<span class="p_add">+</span>
<span class="p_add">+	DSS_COPYBIT_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_ovl_idx {</span>
<span class="p_add">+	DSS_OVL0 = 0,</span>
<span class="p_add">+	DSS_OVL1,</span>
<span class="p_add">+	DSS_OVL2,</span>
<span class="p_add">+	DSS_OVL3,</span>
<span class="p_add">+	DSS_OVL_IDX_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* dss capability priority description */</span>
<span class="p_add">+#define CAP_1D_SHARPNESS	BIT(13)</span>
<span class="p_add">+#define CAP_2D_SHARPNESS	BIT(12)</span>
<span class="p_add">+#define CAP_TILE	BIT(11)</span>
<span class="p_add">+#define CAP_AFBCD	BIT(10)</span>
<span class="p_add">+#define CAP_AFBCE	BIT(9)</span>
<span class="p_add">+#define CAP_YUV_DEINTERLACE	BIT(8)</span>
<span class="p_add">+#define CAP_YUV_PLANAR	BIT(7)</span>
<span class="p_add">+#define CAP_YUV_SEMI_PLANAR	BIT(6)</span>
<span class="p_add">+#define CAP_YUV_PACKAGE	BIT(5)</span>
<span class="p_add">+#define CAP_SCL	BIT(4)</span>
<span class="p_add">+#define CAP_ROT	BIT(3)</span>
<span class="p_add">+#define CAP_PURE_COLOR	BIT(2)</span>
<span class="p_add">+#define CAP_DIM	BIT(1)</span>
<span class="p_add">+#define CAP_BASE	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*this head file to save the structs that both ade and dss will use</span>
<span class="p_add">+**note: if the left_align is 8,right_align is 8,and w_min is larger than 802,then w_min should be set to 808,</span>
<span class="p_add">+**make sure that it is 8 align,if w_min is set to 802,there will be an error.left_align,right_align,top_align</span>
<span class="p_add">+**bottom_align,w_align,h_align,w_min and h_min&#39;s valid value should be larger than 0,top_start and bottom_start</span>
<span class="p_add">+**maybe equal to 0. if it&#39;s not surpport partial update, these value should set to invalid value(-1).</span>
<span class="p_add">+*/</span>
<span class="p_add">+typedef struct lcd_dirty_region_info {</span>
<span class="p_add">+	int left_align;</span>
<span class="p_add">+	int right_align;</span>
<span class="p_add">+	int top_align;</span>
<span class="p_add">+	int bottom_align;</span>
<span class="p_add">+</span>
<span class="p_add">+	int w_align;</span>
<span class="p_add">+	int h_align;</span>
<span class="p_add">+	int w_min;</span>
<span class="p_add">+	int h_min;</span>
<span class="p_add">+</span>
<span class="p_add">+	int top_start;</span>
<span class="p_add">+	int bottom_start;</span>
<span class="p_add">+} lcd_dirty_region_info_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_rect {</span>
<span class="p_add">+	int32_t x;</span>
<span class="p_add">+	int32_t y;</span>
<span class="p_add">+	int32_t w;</span>
<span class="p_add">+	int32_t h;</span>
<span class="p_add">+} dss_rect_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_rect_ltrb {</span>
<span class="p_add">+	int32_t left;</span>
<span class="p_add">+	int32_t top;</span>
<span class="p_add">+	int32_t right;</span>
<span class="p_add">+	int32_t bottom;</span>
<span class="p_add">+} dss_rect_ltrb_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mmbuf {</span>
<span class="p_add">+	uint32_t addr;</span>
<span class="p_add">+	int32_t size;</span>
<span class="p_add">+} dss_mmbuf_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_img {</span>
<span class="p_add">+	uint32_t format;</span>
<span class="p_add">+	uint32_t width;</span>
<span class="p_add">+	uint32_t height;</span>
<span class="p_add">+	uint32_t bpp;		/* bytes per pixel */</span>
<span class="p_add">+	uint32_t buf_size;</span>
<span class="p_add">+	uint32_t stride;</span>
<span class="p_add">+	uint32_t stride_plane1;</span>
<span class="p_add">+	uint32_t stride_plane2;</span>
<span class="p_add">+	uint64_t phy_addr;</span>
<span class="p_add">+	uint64_t vir_addr;</span>
<span class="p_add">+	uint32_t offset_plane1;</span>
<span class="p_add">+	uint32_t offset_plane2;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint64_t afbc_header_addr;</span>
<span class="p_add">+	uint64_t afbc_payload_addr;</span>
<span class="p_add">+	uint32_t afbc_header_stride;</span>
<span class="p_add">+	uint32_t afbc_payload_stride;</span>
<span class="p_add">+	uint32_t afbc_scramble_mode;</span>
<span class="p_add">+	uint32_t mmbuf_base;</span>
<span class="p_add">+	uint32_t mmbuf_size;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t mmu_enable;</span>
<span class="p_add">+	uint32_t csc_mode;</span>
<span class="p_add">+	uint32_t secure_mode;</span>
<span class="p_add">+	int32_t shared_fd;</span>
<span class="p_add">+	uint32_t reserved0;</span>
<span class="p_add">+} dss_img_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_block_info {</span>
<span class="p_add">+	int32_t first_tile;</span>
<span class="p_add">+	int32_t last_tile;</span>
<span class="p_add">+	uint32_t acc_hscl;</span>
<span class="p_add">+	uint32_t h_ratio;</span>
<span class="p_add">+	uint32_t v_ratio;</span>
<span class="p_add">+	uint32_t h_ratio_arsr2p;</span>
<span class="p_add">+	uint32_t arsr2p_left_clip;</span>
<span class="p_add">+	uint32_t both_vscfh_arsr2p_used;</span>
<span class="p_add">+	dss_rect_t arsr2p_in_rect;</span>
<span class="p_add">+	uint32_t arsr2p_src_x;</span>
<span class="p_add">+	uint32_t arsr2p_src_y;</span>
<span class="p_add">+	uint32_t arsr2p_dst_x;</span>
<span class="p_add">+	uint32_t arsr2p_dst_y;</span>
<span class="p_add">+	uint32_t arsr2p_dst_w;</span>
<span class="p_add">+	int32_t h_v_order;</span>
<span class="p_add">+} dss_block_info_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_layer {</span>
<span class="p_add">+	dss_img_t img;</span>
<span class="p_add">+	dss_rect_t src_rect;</span>
<span class="p_add">+	dss_rect_t src_rect_mask;</span>
<span class="p_add">+	dss_rect_t dst_rect;</span>
<span class="p_add">+	uint32_t transform;</span>
<span class="p_add">+	int32_t blending;</span>
<span class="p_add">+	uint32_t glb_alpha;</span>
<span class="p_add">+	uint32_t color;		/* background color or dim color */</span>
<span class="p_add">+	int32_t layer_idx;</span>
<span class="p_add">+	int32_t chn_idx;</span>
<span class="p_add">+	uint32_t need_cap;</span>
<span class="p_add">+	int32_t acquire_fence;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_block_info_t block_info;</span>
<span class="p_add">+} dss_layer_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_wb_layer {</span>
<span class="p_add">+	dss_img_t dst;</span>
<span class="p_add">+	dss_rect_t src_rect;</span>
<span class="p_add">+	dss_rect_t dst_rect;</span>
<span class="p_add">+	uint32_t transform;</span>
<span class="p_add">+	int32_t chn_idx;</span>
<span class="p_add">+	uint32_t need_cap;</span>
<span class="p_add">+	uint32_t reserved0;</span>
<span class="p_add">+</span>
<span class="p_add">+	int32_t acquire_fence;</span>
<span class="p_add">+	int32_t release_fence;</span>
<span class="p_add">+} dss_wb_layer_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ ** dss error status</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DSS_PDP_LDI_UNDERFLOW		BIT(0)</span>
<span class="p_add">+#define DSS_SDP_LDI_UNDERFLOW		BIT(1)</span>
<span class="p_add">+#define DSS_PDP_SMMU_ERR			BIT(2)</span>
<span class="p_add">+#define DSS_SDP_SMMU_ERR			BIT(3)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ ** crc enable status</span>
<span class="p_add">+ */</span>
<span class="p_add">+enum dss_crc_enable_status {</span>
<span class="p_add">+	DSS_CRC_NONE = 0,</span>
<span class="p_add">+	DSS_CRC_OV_EN = 1,</span>
<span class="p_add">+	DSS_CRC_LDI_EN,</span>
<span class="p_add">+	DSS_CRC_SUM_EN,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ ** sec enable status</span>
<span class="p_add">+ */</span>
<span class="p_add">+enum dss_sec_enable_status {</span>
<span class="p_add">+	DSS_SEC_STOP = 0,</span>
<span class="p_add">+	DSS_SEC_RUN = 1,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_crc_info {</span>
<span class="p_add">+	uint32_t crc_ov_result;</span>
<span class="p_add">+	uint32_t crc_ldi_result;</span>
<span class="p_add">+	uint32_t crc_sum_result;</span>
<span class="p_add">+	uint32_t crc_ov_frm;</span>
<span class="p_add">+	uint32_t crc_ldi_frm;</span>
<span class="p_add">+	uint32_t crc_sum_frm;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t err_status;</span>
<span class="p_add">+	uint32_t reserved0;</span>
<span class="p_add">+} dss_crc_info_t;</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_to_be_continued_type {</span>
<span class="p_add">+	DSS_LAYER_SERIAL_COMPOSE = 0,</span>
<span class="p_add">+	DSS_LAYER_PARALLEL_COMPOSE = 1,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* Max multi-src channel number of the DSS. */</span>
<span class="p_add">+#define MAX_DSS_SRC_NUM	(7)</span>
<span class="p_add">+#define MAX_DSS_DST_NUM	(2)</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISI_DSS_OV_BLOCK_NUMS	(23)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_overlay_block {</span>
<span class="p_add">+	dss_layer_t layer_infos[MAX_DSS_SRC_NUM];</span>
<span class="p_add">+	dss_rect_t ov_block_rect;</span>
<span class="p_add">+	uint32_t layer_nums;</span>
<span class="p_add">+	uint32_t reserved0;</span>
<span class="p_add">+} dss_overlay_block_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_overlay {</span>
<span class="p_add">+	dss_wb_layer_t wb_layer_infos[MAX_DSS_DST_NUM];</span>
<span class="p_add">+	dss_rect_t wb_ov_rect;</span>
<span class="p_add">+	uint32_t wb_layer_nums;</span>
<span class="p_add">+	uint32_t wb_compose_type;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint64_t ov_block_infos_ptr;</span>
<span class="p_add">+	uint32_t ov_block_nums;</span>
<span class="p_add">+	int32_t ovl_idx;</span>
<span class="p_add">+	uint32_t wb_enable;</span>
<span class="p_add">+	uint32_t frame_no;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_rect_t dirty_rect;</span>
<span class="p_add">+</span>
<span class="p_add">+	struct dss_rect res_updt_rect;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_crc_info_t crc_info;</span>
<span class="p_add">+	int32_t crc_enable_status;</span>
<span class="p_add">+	uint32_t sec_enable_status;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t to_be_continued;</span>
<span class="p_add">+	int32_t release_fence;</span>
<span class="p_add">+} dss_overlay_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_clk_rate {</span>
<span class="p_add">+	uint64_t dss_pri_clk_rate;</span>
<span class="p_add">+	uint64_t dss_pclk_dss_rate;</span>
<span class="p_add">+	uint64_t dss_pclk_pctrl_rate;</span>
<span class="p_add">+	uint32_t dss_voltage_value;</span>
<span class="p_add">+} dss_clk_rate_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct ce_algorithm_parameter {</span>
<span class="p_add">+	int iDiffMaxTH;</span>
<span class="p_add">+	int iDiffMinTH;</span>
<span class="p_add">+	int iAlphaMinTH;</span>
<span class="p_add">+	int iFlatDiffTH;</span>
<span class="p_add">+	int iBinDiffMaxTH;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iDarkPixelMinTH;</span>
<span class="p_add">+	int iDarkPixelMaxTH;</span>
<span class="p_add">+	int iDarkAvePixelMinTH;</span>
<span class="p_add">+	int iDarkAvePixelMaxTH;</span>
<span class="p_add">+	int iWhitePixelTH;</span>
<span class="p_add">+	int fweight;</span>
<span class="p_add">+	int fDarkRatio;</span>
<span class="p_add">+	int fWhiteRatio;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iDarkPixelTH;</span>
<span class="p_add">+	int fDarkSlopeMinTH;</span>
<span class="p_add">+	int fDarkSlopeMaxTH;</span>
<span class="p_add">+	int fDarkRatioMinTH;</span>
<span class="p_add">+	int fDarkRatioMaxTH;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iBrightPixelTH;</span>
<span class="p_add">+	int fBrightSlopeMinTH;</span>
<span class="p_add">+	int fBrightSlopeMaxTH;</span>
<span class="p_add">+	int fBrightRatioMinTH;</span>
<span class="p_add">+	int fBrightRatioMaxTH;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iZeroPos0MaxTH;</span>
<span class="p_add">+	int iZeroPos1MaxTH;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iDarkFMaxTH;</span>
<span class="p_add">+	int iDarkFMinTH;</span>
<span class="p_add">+	int iPos0MaxTH;</span>
<span class="p_add">+	int iPos0MinTH;</span>
<span class="p_add">+</span>
<span class="p_add">+	int fKeepRatio;</span>
<span class="p_add">+} ce_algorithm_parameter_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct ce_parameter {</span>
<span class="p_add">+	int width;</span>
<span class="p_add">+	int height;</span>
<span class="p_add">+	int hist_mode;</span>
<span class="p_add">+	int mode;</span>
<span class="p_add">+	int result;</span>
<span class="p_add">+	uint32_t reserved0;</span>
<span class="p_add">+	uint32_t *histogram;</span>
<span class="p_add">+	uint8_t *lut_table;</span>
<span class="p_add">+	void *service;</span>
<span class="p_add">+	ce_algorithm_parameter_t ce_alg_param;</span>
<span class="p_add">+} ce_parameter_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct hiace_alg_parameter {</span>
<span class="p_add">+	int iGlobalHistBlackPos;</span>
<span class="p_add">+	int iGlobalHistWhitePos;</span>
<span class="p_add">+	int iGlobalHistBlackWeight;</span>
<span class="p_add">+	int iGlobalHistWhiteWeight;</span>
<span class="p_add">+	int iGlobalHistZeroCutRatio;</span>
<span class="p_add">+	int iGlobalHistSlopeCutRatio;</span>
<span class="p_add">+</span>
<span class="p_add">+	char Classifieresult[1024];</span>
<span class="p_add">+	int iResultLen;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iDoLCE;</span>
<span class="p_add">+	int iDoSRE;</span>
<span class="p_add">+	int iDoAPLC;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iLaSensorSREOnTH;</span>
<span class="p_add">+	int iWidth;</span>
<span class="p_add">+	int iHeight;</span>
<span class="p_add">+	int bitWidth;</span>
<span class="p_add">+	int iMode;</span>
<span class="p_add">+	int iLevel;</span>
<span class="p_add">+	int ilhist_sft;</span>
<span class="p_add">+</span>
<span class="p_add">+	int iMaxLcdLuminance;</span>
<span class="p_add">+	int iMinLcdLuminance;</span>
<span class="p_add">+	int iMaxBackLight;</span>
<span class="p_add">+	int iMinBackLight;</span>
<span class="p_add">+	int iAmbientLight;</span>
<span class="p_add">+	int iBackLight;</span>
<span class="p_add">+	long lTimestamp;</span>
<span class="p_add">+</span>
<span class="p_add">+	char chCfgName[512];</span>
<span class="p_add">+} hiace_alg_parameter_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct hiace_interface_set {</span>
<span class="p_add">+	int result;</span>
<span class="p_add">+	unsigned int *lut;</span>
<span class="p_add">+	int backlight;</span>
<span class="p_add">+} hiace_interface_set_t;</span>
<span class="p_add">+</span>
<span class="p_add">+#endif /*_HISI_DSS_H_*/</span>
<span class="p_header">diff --git a/drivers/video/fbdev/hisi/dss/hisi_dss_regs_hi3660.h b/drivers/video/fbdev/hisi/dss/hisi_dss_regs_hi3660.h</span>
new file mode 100755
<span class="p_header">index 000000000000..a5490bb63dc3</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/drivers/video/fbdev/hisi/dss/hisi_dss_regs_hi3660.h</span>
<span class="p_chunk">@@ -0,0 +1,3164 @@</span> <span class="p_context"></span>
<span class="p_add">+/* Copyright (c) 2013-2014, Hisilicon Tech. Co., Ltd. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 and</span>
<span class="p_add">+ * only version 2 as published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful,</span>
<span class="p_add">+ * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the</span>
<span class="p_add">+ * GNU General Public License for more details.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifndef HISI_DSS_REGS_H</span>
<span class="p_add">+#define HISI_DSS_REGS_H</span>
<span class="p_add">+</span>
<span class="p_add">+#include &quot;hisi_fb.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+/* MACROS */</span>
<span class="p_add">+#define DSS_WIDTH(width)	((width) - 1)</span>
<span class="p_add">+#define DSS_HEIGHT(height)	((height) - 1)</span>
<span class="p_add">+</span>
<span class="p_add">+#define RES_540P	(960 * 540)</span>
<span class="p_add">+#define RES_720P	(1280 * 720)</span>
<span class="p_add">+#define RES_1080P	(1920 * 1080)</span>
<span class="p_add">+#define RES_1200P	(1920 * 1200)</span>
<span class="p_add">+#define RES_1440P	(2560 * 1440)</span>
<span class="p_add">+#define RES_1600P	(2560 * 1600)</span>
<span class="p_add">+#define RES_4K_PHONE	(3840 * 2160)</span>
<span class="p_add">+#define RES_4K_PAD	(3840 * 2400)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DFC_MAX_CLIP_NUM	(31)</span>
<span class="p_add">+</span>
<span class="p_add">+/* for DFS */</span>
<span class="p_add">+/* 1480 * 144bits */</span>
<span class="p_add">+#define DFS_TIME	(80)</span>
<span class="p_add">+#define DFS_TIME_MIN	(50)</span>
<span class="p_add">+#define DFS_TIME_MIN_4K	(10)</span>
<span class="p_add">+#define DBUF0_DEPTH	(1408)</span>
<span class="p_add">+#define DBUF1_DEPTH	(512)</span>
<span class="p_add">+#define DBUF_WIDTH_BIT	(144)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GET_THD_RQOS_IN(max_depth)	((max_depth) * 10 / 100)</span>
<span class="p_add">+#define GET_THD_RQOS_OUT(max_depth)	((max_depth) * 30 / 100)</span>
<span class="p_add">+#define GET_THD_WQOS_IN(max_depth)	((max_depth) * 95 / 100)</span>
<span class="p_add">+#define GET_THD_WQOS_OUT(max_depth)	((max_depth) * 70 / 100)</span>
<span class="p_add">+#define GET_THD_CG_IN(max_depth)	((max_depth) -1)</span>
<span class="p_add">+#define GET_THD_CG_OUT(max_depth)	((max_depth) * 70 / 100)</span>
<span class="p_add">+#define GET_FLUX_REQ_IN(max_depth)	((max_depth) * 50 / 100)</span>
<span class="p_add">+#define GET_FLUX_REQ_OUT(max_depth)	((max_depth) * 90 / 100)</span>
<span class="p_add">+#define GET_THD_OTHER_DFS_CG_HOLD(max_depth)	(0x20)</span>
<span class="p_add">+#define GET_THD_OTHER_WR_WAIT(max_depth)	((max_depth) * 90 / 100)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GET_RDMA_ROT_HQOS_ASSERT_LEV(max_depth)	((max_depth) * 30 /100)</span>
<span class="p_add">+#define GET_RDMA_ROT_HQOS_REMOVE_LEV(max_depth)	((max_depth)* 60 / 100)</span>
<span class="p_add">+</span>
<span class="p_add">+enum lcd_orientation {</span>
<span class="p_add">+	LCD_LANDSCAPE = 0,</span>
<span class="p_add">+	LCD_PORTRAIT,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum lcd_format {</span>
<span class="p_add">+	LCD_RGB888 = 0,</span>
<span class="p_add">+	LCD_RGB101010,</span>
<span class="p_add">+	LCD_RGB565,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum lcd_rgb_order {</span>
<span class="p_add">+	LCD_RGB = 0,</span>
<span class="p_add">+	LCD_BGR,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_addr {</span>
<span class="p_add">+	DSS_ADDR_PLANE0 = 0,</span>
<span class="p_add">+	DSS_ADDR_PLANE1,</span>
<span class="p_add">+	DSS_ADDR_PLANE2,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_transform {</span>
<span class="p_add">+	DSS_TRANSFORM_NOP = 0x0,</span>
<span class="p_add">+	DSS_TRANSFORM_FLIP_H = 0x01,</span>
<span class="p_add">+	DSS_TRANSFORM_FLIP_V = 0x02,</span>
<span class="p_add">+	DSS_TRANSFORM_ROT = 0x04,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_dfc_format {</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_RGB_565 = 0,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XRGB_4444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ARGB_4444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XRGB_5551,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ARGB_5551,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XRGB_8888,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ARGB_8888,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_BGR_565,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XBGR_4444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ABGR_4444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XBGR_5551,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ABGR_5551,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_XBGR_8888,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_ABGR_8888,</span>
<span class="p_add">+</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_YUV444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_YVU444,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_YUYV422,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_YVYU422,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_VYUY422,</span>
<span class="p_add">+	DFC_PIXEL_FORMAT_UYVY422,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_dma_format {</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_RGB_565 = 0,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_ARGB_4444,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_XRGB_4444,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_ARGB_5551,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_XRGB_5551,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_ARGB_8888,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_XRGB_8888,</span>
<span class="p_add">+</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_RESERVED0,</span>
<span class="p_add">+</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_YUYV_422_Pkg,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_YUV_420_SP_HP,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_YUV_420_P_HP,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_YUV_422_SP_HP,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_YUV_422_P_HP,</span>
<span class="p_add">+	DMA_PIXEL_FORMAT_AYUV_4444,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_buf_format {</span>
<span class="p_add">+	DSS_BUF_LINEAR = 0,</span>
<span class="p_add">+	DSS_BUF_TILE,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_blend_mode {</span>
<span class="p_add">+	DSS_BLEND_CLEAR = 0,</span>
<span class="p_add">+	DSS_BLEND_SRC,</span>
<span class="p_add">+	DSS_BLEND_DST,</span>
<span class="p_add">+	DSS_BLEND_SRC_OVER_DST,</span>
<span class="p_add">+	DSS_BLEND_DST_OVER_SRC,</span>
<span class="p_add">+	DSS_BLEND_SRC_IN_DST,</span>
<span class="p_add">+	DSS_BLEND_DST_IN_SRC,</span>
<span class="p_add">+	DSS_BLEND_SRC_OUT_DST,</span>
<span class="p_add">+	DSS_BLEND_DST_OUT_SRC,</span>
<span class="p_add">+	DSS_BLEND_SRC_ATOP_DST,</span>
<span class="p_add">+	DSS_BLEND_DST_ATOP_SRC,</span>
<span class="p_add">+	DSS_BLEND_SRC_XOR_DST,</span>
<span class="p_add">+	DSS_BLEND_SRC_ADD_DST,</span>
<span class="p_add">+	DSS_BLEND_FIX_OVER,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER0,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER1,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER2,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER3,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER4,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER5,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER6,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER7,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER8,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER9,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER10,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER11,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER12,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER13,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER14,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER15,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER16,</span>
<span class="p_add">+	DSS_BLEND_FIX_PER17,</span>
<span class="p_add">+</span>
<span class="p_add">+	DSS_BLEND_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_chn_module {</span>
<span class="p_add">+	MODULE_MIF_CHN,</span>
<span class="p_add">+	MODULE_AIF0_CHN,</span>
<span class="p_add">+	MODULE_AIF1_CHN,</span>
<span class="p_add">+	MODULE_MCTL_CHN_MUTEX,</span>
<span class="p_add">+	MODULE_MCTL_CHN_FLUSH_EN,</span>
<span class="p_add">+	MODULE_MCTL_CHN_OV_OEN,</span>
<span class="p_add">+	MODULE_MCTL_CHN_STARTY,</span>
<span class="p_add">+	MODULE_MCTL_CHN_MOD_DBG,</span>
<span class="p_add">+	MODULE_DMA,</span>
<span class="p_add">+	MODULE_DFC,</span>
<span class="p_add">+	MODULE_SCL,</span>
<span class="p_add">+	MODULE_SCL_LUT,</span>
<span class="p_add">+	MODULE_ARSR2P,</span>
<span class="p_add">+	MODULE_ARSR2P_LUT,</span>
<span class="p_add">+	MODULE_POST_CLIP,</span>
<span class="p_add">+	MODULE_PCSC,</span>
<span class="p_add">+	MODULE_CSC,</span>
<span class="p_add">+	MODULE_CHN_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_chn_cap {</span>
<span class="p_add">+	MODULE_CAP_ROT,</span>
<span class="p_add">+	MODULE_CAP_SCL,</span>
<span class="p_add">+	MODULE_CAP_CSC,</span>
<span class="p_add">+	MODULE_CAP_SHARPNESS_1D,</span>
<span class="p_add">+	MODULE_CAP_SHARPNESS_2D,</span>
<span class="p_add">+	MODULE_CAP_CE,</span>
<span class="p_add">+	MODULE_CAP_AFBCD,</span>
<span class="p_add">+	MODULE_CAP_AFBCE,</span>
<span class="p_add">+	MODULE_CAP_YUV_PLANAR,</span>
<span class="p_add">+	MODULE_CAP_YUV_SEMI_PLANAR,</span>
<span class="p_add">+	MODULE_CAP_YUV_PACKAGE,</span>
<span class="p_add">+	MODULE_CAP_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_ovl_module {</span>
<span class="p_add">+	MODULE_OVL_BASE,</span>
<span class="p_add">+	MODULE_MCTL_BASE,</span>
<span class="p_add">+	MODULE_OVL_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_axi_idx {</span>
<span class="p_add">+	AXI_CHN0 = 0,</span>
<span class="p_add">+	AXI_CHN1,</span>
<span class="p_add">+	AXI_CHN_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define AXI0_MAX_DSS_CHN_THRESHOLD	(3)</span>
<span class="p_add">+#define AXI1_MAX_DSS_CHN_THRESHOLD	(3)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE0	(120 * 1000000)</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE1	(240 * 1000000)</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE2	(360 * 1000000)</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE3	(480 * 1000000)</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE4	(667 * 1000000)</span>
<span class="p_add">+#define DEFAULT_AXI_CLK_RATE5	(800 * 1000000)</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_rdma_idx {</span>
<span class="p_add">+	DSS_RDMA0 = 0,</span>
<span class="p_add">+	DSS_RDMA1,</span>
<span class="p_add">+	DSS_RDMA2,</span>
<span class="p_add">+	DSS_RDMA3,</span>
<span class="p_add">+	DSS_RDMA4,</span>
<span class="p_add">+	DSS_RDMA_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ **</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define PEREN0	(0x000)</span>
<span class="p_add">+#define PERDIS0	(0x004)</span>
<span class="p_add">+#define PEREN2	(0x020)</span>
<span class="p_add">+#define PERDIS2	(0x024)</span>
<span class="p_add">+#define PERCLKEN2	(0x028)</span>
<span class="p_add">+#define PERSTAT2	(0x02C)</span>
<span class="p_add">+#define PEREN3	(0x030)</span>
<span class="p_add">+#define PERDIS3	(0x034)</span>
<span class="p_add">+#define PERCLKEN3	(0x038)</span>
<span class="p_add">+#define PERSTAT3	(0x03C)</span>
<span class="p_add">+#define PEREN5	(0x050)</span>
<span class="p_add">+#define PERDIS5	(0x054)</span>
<span class="p_add">+#define PERCLKEN5	(0x058)</span>
<span class="p_add">+#define PERSTAT5	(0x05C)</span>
<span class="p_add">+#define PERRSTDIS0	(0x064)</span>
<span class="p_add">+#define PERRSTEN2	(0x078)</span>
<span class="p_add">+#define PERRSTDIS2	(0x07C)</span>
<span class="p_add">+#define PERRSTEN3	(0x084)</span>
<span class="p_add">+#define PERRSTDIS3	(0x088)</span>
<span class="p_add">+#define PERRSTSTAT3 (0x08c)</span>
<span class="p_add">+#define PERRSTEN4	(0x090)</span>
<span class="p_add">+#define PERRSTDIS4	(0x094)</span>
<span class="p_add">+#define PERRSTSTAT4 (0x098)</span>
<span class="p_add">+#define CLKDIV3	(0x0B4)</span>
<span class="p_add">+#define CLKDIV5	(0x0BC)</span>
<span class="p_add">+#define CLKDIV10	(0x0D0)</span>
<span class="p_add">+#define CLKDIV18	(0x0F0)</span>
<span class="p_add">+#define CLKDIV20	(0x0F8)</span>
<span class="p_add">+#define ISOEN	(0x144)</span>
<span class="p_add">+#define ISODIS	(0x148)</span>
<span class="p_add">+#define ISOSTAT	(0x14c)</span>
<span class="p_add">+#define PERPWREN	(0x150)</span>
<span class="p_add">+#define PERPWRDIS	(0x154)</span>
<span class="p_add">+#define PERPWRSTAT 	(0x158)</span>
<span class="p_add">+#define PERI_AUTODIV8	(0x380)</span>
<span class="p_add">+#define PERI_AUTODIV9	(0x384)</span>
<span class="p_add">+#define PERI_AUTODIV10	(0x388)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define NOC_POWER_IDLEREQ	(0x380)</span>
<span class="p_add">+#define NOC_POWER_IDLEACK	(0x384)</span>
<span class="p_add">+#define NOC_POWER_IDLE	(0x388)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define SCPWREN 	(0x0D0)</span>
<span class="p_add">+#define SCPEREN1 (0x040)</span>
<span class="p_add">+#define SCPERDIS1  (0x044)</span>
<span class="p_add">+#define SCPERCLKEN1 (0x048)</span>
<span class="p_add">+#define SCPERRSTDIS1	(0x090)</span>
<span class="p_add">+#define SCISODIS	(0x0C4)</span>
<span class="p_add">+#define SCCLKDIV2	(0x258)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define PERI_CTRL23	(0x060)</span>
<span class="p_add">+#define PERI_CTRL29	(0x078)</span>
<span class="p_add">+#define PERI_CTRL30	(0x07C)</span>
<span class="p_add">+#define PERI_CTRL32	(0x084)</span>
<span class="p_add">+#define PERI_STAT0	(0x094)</span>
<span class="p_add">+#define PERI_STAT1	(0x098)</span>
<span class="p_add">+#define PERI_STAT16	(0x0D4)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define PCTRL_DPHYTX_ULPSEXIT1	BIT(4)</span>
<span class="p_add">+#define PCTRL_DPHYTX_ULPSEXIT0	BIT(3)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define PCTRL_DPHYTX_CTRL1	BIT(1)</span>
<span class="p_add">+#define PCTRL_DPHYTX_CTRL0	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ **</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_DSS_GLB_INTS	BIT(30)</span>
<span class="p_add">+#define BIT_MMU_IRPT_S	BIT(29)</span>
<span class="p_add">+#define BIT_MMU_IRPT_NS	BIT(28)</span>
<span class="p_add">+#define BIT_DBG_MCTL_INTS	BIT(27)</span>
<span class="p_add">+#define BIT_DBG_WCH1_INTS	BIT(26)</span>
<span class="p_add">+#define BIT_DBG_WCH0_INTS	BIT(25)</span>
<span class="p_add">+#define BIT_DBG_RCH7_INTS	BIT(24)</span>
<span class="p_add">+#define BIT_DBG_RCH6_INTS	BIT(23)</span>
<span class="p_add">+#define BIT_DBG_RCH5_INTS	BIT(22)</span>
<span class="p_add">+#define BIT_DBG_RCH4_INTS	BIT(21)</span>
<span class="p_add">+#define BIT_DBG_RCH3_INTS	BIT(20)</span>
<span class="p_add">+#define BIT_DBG_RCH2_INTS	BIT(19)</span>
<span class="p_add">+#define BIT_DBG_RCH1_INTS	BIT(18)</span>
<span class="p_add">+#define BIT_DBG_RCH0_INTS	BIT(17)</span>
<span class="p_add">+#define BIT_ITF0_INTS	BIT(16)</span>
<span class="p_add">+#define BIT_DPP_INTS	BIT(15)</span>
<span class="p_add">+#define BIT_CMDLIST13	BIT(14)</span>
<span class="p_add">+#define BIT_CMDLIST12	BIT(13)</span>
<span class="p_add">+#define BIT_CMDLIST11	BIT(12)</span>
<span class="p_add">+#define BIT_CMDLIST10	BIT(11)</span>
<span class="p_add">+#define BIT_CMDLIST9	BIT(10)</span>
<span class="p_add">+#define BIT_CMDLIST8	BIT(9)</span>
<span class="p_add">+#define BIT_CMDLIST7	BIT(8)</span>
<span class="p_add">+#define BIT_CMDLIST6	BIT(7)</span>
<span class="p_add">+#define BIT_CMDLIST5	BIT(6)</span>
<span class="p_add">+#define BIT_CMDLIST4	BIT(5)</span>
<span class="p_add">+#define BIT_CMDLIST3	BIT(4)</span>
<span class="p_add">+#define BIT_CMDLIST2	BIT(3)</span>
<span class="p_add">+#define BIT_CMDLIST1	BIT(2)</span>
<span class="p_add">+#define BIT_CMDLIST0	BIT(1)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_SDP_DSS_GLB_INTS	BIT(29)</span>
<span class="p_add">+#define BIT_SDP_MMU_IRPT_S	BIT(28)</span>
<span class="p_add">+#define BIT_SDP_MMU_IRPT_NS	BIT(27)</span>
<span class="p_add">+#define BIT_SDP_DBG_MCTL_INTS	BIT(26)</span>
<span class="p_add">+#define BIT_SDP_DBG_WCH1_INTS	BIT(25)</span>
<span class="p_add">+#define BIT_SDP_DBG_WCH0_INTS	BIT(24)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH7_INTS	BIT(23)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH6_INTS	BIT(22)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH5_INTS	BIT(21)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH4_INTS	BIT(20)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH3_INTS	BIT(19)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH2_INTS	BIT(18)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH1_INTS	BIT(17)</span>
<span class="p_add">+#define BIT_SDP_DBG_RCH0_INTS	BIT(16)</span>
<span class="p_add">+#define BIT_SDP_ITF1_INTS	BIT(15)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST13	BIT(14)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST12	BIT(13)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST11	BIT(12)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST10	BIT(11)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST9	BIT(10)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST8	BIT(9)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST7	BIT(8)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST6	BIT(7)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST5	BIT(6)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST4	BIT(5)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST3	BIT(4)</span>
<span class="p_add">+#define BIT_SDP_SDP_CMDLIST2	BIT(3)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST1	BIT(2)</span>
<span class="p_add">+#define BIT_SDP_CMDLIST0	BIT(1)</span>
<span class="p_add">+#define BIT_SDP_RCH_CE_INTS	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_OFF_DSS_GLB_INTS	BIT(31)</span>
<span class="p_add">+#define BIT_OFF_MMU_IRPT_S	BIT(30)</span>
<span class="p_add">+#define BIT_OFF_MMU_IRPT_NS	BIT(29)</span>
<span class="p_add">+#define BIT_OFF_DBG_MCTL_INTS	BIT(28)</span>
<span class="p_add">+#define BIT_OFF_DBG_WCH1_INTS	BIT(27)</span>
<span class="p_add">+#define BIT_OFF_DBG_WCH0_INTS	BIT(26)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH7_INTS	BIT(25)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH6_INTS	BIT(24)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH5_INTS	BIT(23)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH4_INTS	BIT(22)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH3_INTS	BIT(21)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH2_INTS	BIT(20)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH1_INTS	BIT(19)</span>
<span class="p_add">+#define BIT_OFF_DBG_RCH0_INTS	BIT(18)</span>
<span class="p_add">+#define BIT_OFF_WCH1_INTS	BIT(17)</span>
<span class="p_add">+#define BIT_OFF_WCH0_INTS	BIT(16)</span>
<span class="p_add">+#define BIT_OFF_WCH0_WCH1_FRM_END_INT	BIT(15)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST13	BIT(14)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST12	BIT(13)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST11	BIT(12)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST10	BIT(11)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST9	BIT(10)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST8	BIT(9)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST7	BIT(8)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST6	BIT(7)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST5	BIT(6)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST4	BIT(5)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST3	BIT(4)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST2	BIT(3)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST1	BIT(2)</span>
<span class="p_add">+#define BIT_OFF_CMDLIST0	BIT(1)</span>
<span class="p_add">+#define BIT_OFF_RCH_CE_INTS	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_OFF_CAM_DBG_WCH2_INTS	BIT(4)</span>
<span class="p_add">+#define BIT_OFF_CAM_DBG_RCH8_INTS	BIT(3)</span>
<span class="p_add">+#define BIT_OFF_CAM_WCH2_FRMEND_INTS  BIT(2)</span>
<span class="p_add">+#define BIT_OFF_CAM_CMDLIST15_INTS	BIT(1)</span>
<span class="p_add">+#define BIT_OFF_CAM_CMDLIST14_INTS	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_VACTIVE_CNT	BIT(14)</span>
<span class="p_add">+#define BIT_DSI_TE_TRI	BIT(13)</span>
<span class="p_add">+#define BIT_LCD_TE0_PIN	BIT(12)</span>
<span class="p_add">+#define BIT_LCD_TE1_PIN	BIT(11)</span>
<span class="p_add">+#define BIT_VACTIVE1_END	BIT(10)</span>
<span class="p_add">+#define BIT_VACTIVE1_START	BIT(9)</span>
<span class="p_add">+#define BIT_VACTIVE0_END	BIT(8)</span>
<span class="p_add">+#define BIT_VACTIVE0_START	BIT(7)</span>
<span class="p_add">+#define BIT_VFRONTPORCH	BIT(6)</span>
<span class="p_add">+#define BIT_VBACKPORCH	BIT(5)</span>
<span class="p_add">+#define BIT_VSYNC	BIT(4)</span>
<span class="p_add">+#define BIT_VFRONTPORCH_END	BIT(3)</span>
<span class="p_add">+#define BIT_LDI_UNFLOW	BIT(2)</span>
<span class="p_add">+#define BIT_FRM_END	BIT(1)</span>
<span class="p_add">+#define BIT_FRM_START	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_CTL_FLUSH_EN	BIT(21)</span>
<span class="p_add">+#define BIT_SCF_FLUSH_EN	BIT(19)</span>
<span class="p_add">+#define BIT_DPP0_FLUSH_EN	BIT(18)</span>
<span class="p_add">+#define BIT_DBUF1_FLUSH_EN	BIT(17)</span>
<span class="p_add">+#define BIT_DBUF0_FLUSH_EN	BIT(16)</span>
<span class="p_add">+#define BIT_OV3_FLUSH_EN	BIT(15)</span>
<span class="p_add">+#define BIT_OV2_FLUSH_EN	BIT(14)</span>
<span class="p_add">+#define BIT_OV1_FLUSH_EN	BIT(13)</span>
<span class="p_add">+#define BIT_OV0_FLUSH_EN	BIT(12)</span>
<span class="p_add">+#define BIT_WB1_FLUSH_EN	BIT(11)</span>
<span class="p_add">+#define BIT_WB0_FLUSH_EN	BIT(10)</span>
<span class="p_add">+#define BIT_DMA3_FLUSH_EN	BIT(9)</span>
<span class="p_add">+#define BIT_DMA2_FLUSH_EN	BIT(8)</span>
<span class="p_add">+#define BIT_DMA1_FLUSH_EN	BIT(7)</span>
<span class="p_add">+#define BIT_DMA0_FLUSH_EN	BIT(6)</span>
<span class="p_add">+#define BIT_RGB1_FLUSH_EN	BIT(4)</span>
<span class="p_add">+#define BIT_RGB0_FLUSH_EN	BIT(3)</span>
<span class="p_add">+#define BIT_VIG1_FLUSH_EN	BIT(1)</span>
<span class="p_add">+#define BIT_VIG0_FLUSH_EN	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_BUS_DBG_INT	BIT(5)</span>
<span class="p_add">+#define BIT_CRC_SUM_INT	BIT(4)</span>
<span class="p_add">+#define BIT_CRC_ITF1_INT	BIT(3)</span>
<span class="p_add">+#define BIT_CRC_ITF0_INT	BIT(2)</span>
<span class="p_add">+#define BIT_CRC_OV1_INT	BIT(1)</span>
<span class="p_add">+#define BIT_CRC_OV0_INT	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_SBL_SEND_FRAME_OUT	BIT(19)</span>
<span class="p_add">+#define BIT_SBL_STOP_FRAME_OUT	BIT(18)</span>
<span class="p_add">+#define BIT_SBL_BACKLIGHT_OUT	BIT(17)</span>
<span class="p_add">+#define BIT_SBL_DARKENH_OUT		BIT(16)</span>
<span class="p_add">+#define BIT_SBL_BRIGHTPTR_OUT	BIT(15)</span>
<span class="p_add">+#define BIT_STRENGTH_INROI_OUT	BIT(14)</span>
<span class="p_add">+#define BIT_STRENGTH_OUTROI_OUT	BIT(13)</span>
<span class="p_add">+#define BIT_DONE_OUT			BIT(12)</span>
<span class="p_add">+#define BIT_PPROC_DONE_OUT		BIT(11)</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_HIACE_IND	BIT(8)</span>
<span class="p_add">+#define BIT_STRENGTH_INTP	BIT(7)</span>
<span class="p_add">+#define BIT_BACKLIGHT_INTP	BIT(6)</span>
<span class="p_add">+#define BIT_CE_END_IND	BIT(5)</span>
<span class="p_add">+#define BIT_CE_CANCEL_IND	BIT(4)</span>
<span class="p_add">+#define BIT_CE_LUT1_RW_COLLIDE_IND	BIT(3)</span>
<span class="p_add">+#define BIT_CE_LUT0_RW_COLLIDE_IND	BIT(2)</span>
<span class="p_add">+#define BIT_CE_HIST1_RW_COLLIDE_IND	BIT(1)</span>
<span class="p_add">+#define BIT_CE_HIST0_RW_COLLIDE_IND	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MODULE BASE ADDRESS</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_MIPI_DSI0_OFFSET	(0x00001000)</span>
<span class="p_add">+#define DSS_MIPI_DSI1_OFFSET	(0x00001400)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_GLB0_OFFSET	(0x12000)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_DBG_OFFSET	(0x11000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_CMDLIST_OFFSET	(0x2000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_SMMU_OFFSET	(0x8000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_VBIF0_AIF	(0x7000)</span>
<span class="p_add">+#define DSS_VBIF1_AIF	(0x9000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_MIF_OFFSET	(0xA000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_MCTRL_SYS_OFFSET	(0x10000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_MCTRL_CTL0_OFFSET	(0x10800)</span>
<span class="p_add">+#define DSS_MCTRL_CTL1_OFFSET	(0x10900)</span>
<span class="p_add">+#define DSS_MCTRL_CTL2_OFFSET	(0x10A00)</span>
<span class="p_add">+#define DSS_MCTRL_CTL3_OFFSET	(0x10B00)</span>
<span class="p_add">+#define DSS_MCTRL_CTL4_OFFSET	(0x10C00)</span>
<span class="p_add">+#define DSS_MCTRL_CTL5_OFFSET	(0x10D00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_VG0_DMA_OFFSET	(0x20000)</span>
<span class="p_add">+#define DSS_RCH_VG0_DFC_OFFSET (0x20100)</span>
<span class="p_add">+#define DSS_RCH_VG0_SCL_OFFSET	(0x20200)</span>
<span class="p_add">+#define DSS_RCH_VG0_ARSR_OFFSET	(0x20300)</span>
<span class="p_add">+#define DSS_RCH_VG0_POST_CLIP_OFFSET	(0x203A0)</span>
<span class="p_add">+#define DSS_RCH_VG0_PCSC_OFFSET	(0x20400)</span>
<span class="p_add">+#define DSS_RCH_VG0_CSC_OFFSET	(0x20500)</span>
<span class="p_add">+#define DSS_RCH_VG0_DEBUG_OFFSET	(0x20600)</span>
<span class="p_add">+#define DSS_RCH_VG0_VPP_OFFSET	(0x20700)</span>
<span class="p_add">+#define DSS_RCH_VG0_DMA_BUF_OFFSET	(0x20800)</span>
<span class="p_add">+#define DSS_RCH_VG0_AFBCD_OFFSET	(0x20900)</span>
<span class="p_add">+#define DSS_RCH_VG0_REG_DEFAULT_OFFSET	(0x20A00)</span>
<span class="p_add">+#define DSS_RCH_VG0_SCL_LUT_OFFSET	(0x21000)</span>
<span class="p_add">+#define DSS_RCH_VG0_ARSR_LUT_OFFSET	(0x25000)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_VG1_DMA_OFFSET	(0x28000)</span>
<span class="p_add">+#define DSS_RCH_VG1_DFC_OFFSET (0x28100)</span>
<span class="p_add">+#define DSS_RCH_VG1_SCL_OFFSET	(0x28200)</span>
<span class="p_add">+#define DSS_RCH_VG1_POST_CLIP_OFFSET	(0x283A0)</span>
<span class="p_add">+#define DSS_RCH_VG1_CSC_OFFSET	(0x28500)</span>
<span class="p_add">+#define DSS_RCH_VG1_DEBUG_OFFSET	(0x28600)</span>
<span class="p_add">+#define DSS_RCH_VG1_VPP_OFFSET	(0x28700)</span>
<span class="p_add">+#define DSS_RCH_VG1_DMA_BUF_OFFSET	(0x28800)</span>
<span class="p_add">+#define DSS_RCH_VG1_AFBCD_OFFSET	(0x28900)</span>
<span class="p_add">+#define DSS_RCH_VG1_REG_DEFAULT_OFFSET	(0x28A00)</span>
<span class="p_add">+#define DSS_RCH_VG1_SCL_LUT_OFFSET	(0x29000)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_VG2_DMA_OFFSET	(0x30000)</span>
<span class="p_add">+#define DSS_RCH_VG2_DFC_OFFSET (0x30100)</span>
<span class="p_add">+#define DSS_RCH_VG2_SCL_OFFSET	(0x30200)</span>
<span class="p_add">+#define DSS_RCH_VG2_POST_CLIP_OFFSET	(0x303A0)</span>
<span class="p_add">+#define DSS_RCH_VG2_CSC_OFFSET	(0x30500)</span>
<span class="p_add">+#define DSS_RCH_VG2_DEBUG_OFFSET	(0x30600)</span>
<span class="p_add">+#define DSS_RCH_VG2_VPP_OFFSET	(0x30700)</span>
<span class="p_add">+#define DSS_RCH_VG2_DMA_BUF_OFFSET	(0x30800)</span>
<span class="p_add">+#define DSS_RCH_VG2_AFBCD_OFFSET	(0x30900)</span>
<span class="p_add">+#define DSS_RCH_VG2_REG_DEFAULT_OFFSET	(0x30A00)</span>
<span class="p_add">+#define DSS_RCH_VG2_SCL_LUT_OFFSET	(0x31000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_G0_DMA_OFFSET	(0x38000)</span>
<span class="p_add">+#define DSS_RCH_G0_DFC_OFFSET	(0x38100)</span>
<span class="p_add">+#define DSS_RCH_G0_SCL_OFFSET	(0x38200)</span>
<span class="p_add">+#define DSS_RCH_G0_POST_CLIP_OFFSET (0x383A0)</span>
<span class="p_add">+#define DSS_RCH_G0_CSC_OFFSET (0x38500)</span>
<span class="p_add">+#define DSS_RCH_G0_DEBUG_OFFSET (0x38600)</span>
<span class="p_add">+#define DSS_RCH_G0_DMA_BUF_OFFSET (0x38800)</span>
<span class="p_add">+#define DSS_RCH_G0_AFBCD_OFFSET (0x38900)</span>
<span class="p_add">+#define DSS_RCH_G0_REG_DEFAULT_OFFSET (0x38A00)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_G1_DMA_OFFSET	(0x40000)</span>
<span class="p_add">+#define DSS_RCH_G1_DFC_OFFSET	(0x40100)</span>
<span class="p_add">+#define DSS_RCH_G1_SCL_OFFSET	(0x40200)</span>
<span class="p_add">+#define DSS_RCH_G1_POST_CLIP_OFFSET (0x403A0)</span>
<span class="p_add">+#define DSS_RCH_G1_CSC_OFFSET (0x40500)</span>
<span class="p_add">+#define DSS_RCH_G1_DEBUG_OFFSET (0x40600)</span>
<span class="p_add">+#define DSS_RCH_G1_DMA_BUF_OFFSET (0x40800)</span>
<span class="p_add">+#define DSS_RCH_G1_AFBCD_OFFSET (0x40900)</span>
<span class="p_add">+#define DSS_RCH_G1_REG_DEFAULT_OFFSET (0x40A00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_D2_DMA_OFFSET	(0x50000)</span>
<span class="p_add">+#define DSS_RCH_D2_DFC_OFFSET	(0x50100)</span>
<span class="p_add">+#define DSS_RCH_D2_CSC_OFFSET	(0x50500)</span>
<span class="p_add">+#define DSS_RCH_D2_DEBUG_OFFSET	(0x50600)</span>
<span class="p_add">+#define DSS_RCH_D2_DMA_BUF_OFFSET	(0x50800)</span>
<span class="p_add">+#define DSS_RCH_D2_AFBCD_OFFSET	(0x50900)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_D3_DMA_OFFSET	(0x51000)</span>
<span class="p_add">+#define DSS_RCH_D3_DFC_OFFSET	(0x51100)</span>
<span class="p_add">+#define DSS_RCH_D3_CSC_OFFSET	(0x51500)</span>
<span class="p_add">+#define DSS_RCH_D3_DEBUG_OFFSET	(0x51600)</span>
<span class="p_add">+#define DSS_RCH_D3_DMA_BUF_OFFSET	(0x51800)</span>
<span class="p_add">+#define DSS_RCH_D3_AFBCD_OFFSET	(0x51900)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_D0_DMA_OFFSET	(0x52000)</span>
<span class="p_add">+#define DSS_RCH_D0_DFC_OFFSET	(0x52100)</span>
<span class="p_add">+#define DSS_RCH_D0_CSC_OFFSET	(0x52500)</span>
<span class="p_add">+#define DSS_RCH_D0_DEBUG_OFFSET	(0x52600)</span>
<span class="p_add">+#define DSS_RCH_D0_DMA_BUF_OFFSET	(0x52800)</span>
<span class="p_add">+#define DSS_RCH_D0_AFBCD_OFFSET	(0x52900)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_RCH_D1_DMA_OFFSET	(0x53000)</span>
<span class="p_add">+#define DSS_RCH_D1_DFC_OFFSET	(0x53100)</span>
<span class="p_add">+#define DSS_RCH_D1_CSC_OFFSET	(0x53500)</span>
<span class="p_add">+#define DSS_RCH_D1_DEBUG_OFFSET	(0x53600)</span>
<span class="p_add">+#define DSS_RCH_D1_DMA_BUF_OFFSET	(0x53800)</span>
<span class="p_add">+#define DSS_RCH_D1_AFBCD_OFFSET	(0x53900)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_WCH0_DMA_OFFSET	(0x5A000)</span>
<span class="p_add">+#define DSS_WCH0_DFC_OFFSET	(0x5A100)</span>
<span class="p_add">+#define DSS_WCH0_CSC_OFFSET	(0x5A500)</span>
<span class="p_add">+#define DSS_WCH0_ROT_OFFSET	(0x5A500)</span>
<span class="p_add">+#define DSS_WCH0_DEBUG_OFFSET	(0x5A600)</span>
<span class="p_add">+#define DSS_WCH0_DMA_BUFFER_OFFSET	(0x5A800)</span>
<span class="p_add">+#define DSS_WCH0_AFBCE_OFFSET	(0x5A900)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_WCH1_DMA_OFFSET	(0x5C000)</span>
<span class="p_add">+#define DSS_WCH1_DFC_OFFSET	(0x5C100)</span>
<span class="p_add">+#define DSS_WCH1_CSC_OFFSET	(0x5C500)</span>
<span class="p_add">+#define DSS_WCH1_ROT_OFFSET	(0x5C500)</span>
<span class="p_add">+#define DSS_WCH1_DEBUG_OFFSET	(0x5C600)</span>
<span class="p_add">+#define DSS_WCH1_DMA_BUFFER_OFFSET	(0x5C800)</span>
<span class="p_add">+#define DSS_WCH1_AFBCE_OFFSET	(0x5C900)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_WCH2_DMA_OFFSET	(0x5E000)</span>
<span class="p_add">+#define DSS_WCH2_DFC_OFFSET	(0x5E100)</span>
<span class="p_add">+#define DSS_WCH2_CSC_OFFSET	(0x5E500)</span>
<span class="p_add">+#define DSS_WCH2_ROT_OFFSET	(0x5E500)</span>
<span class="p_add">+#define DSS_WCH2_DEBUG_OFFSET	(0x5E600)</span>
<span class="p_add">+#define DSS_WCH2_DMA_BUFFER_OFFSET	(0x5E800)</span>
<span class="p_add">+#define DSS_WCH2_AFBCE_OFFSET	(0x5E900)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_OVL0_OFFSET	(0x60000)</span>
<span class="p_add">+#define DSS_OVL1_OFFSET	(0x60400)</span>
<span class="p_add">+#define DSS_OVL2_OFFSET	(0x60800)</span>
<span class="p_add">+#define DSS_OVL3_OFFSET	(0x60C00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_DBUF0_OFFSET	(0x6D000)</span>
<span class="p_add">+#define DSS_DBUF1_OFFSET	(0x6E000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_HI_ACE_OFFSET	(0x6F000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_DPP_OFFSET	(0x70000)</span>
<span class="p_add">+#define DSS_TOP_OFFSET	(0x70000)</span>
<span class="p_add">+#define DSS_DPP_COLORBAR_OFFSET	(0x70100)</span>
<span class="p_add">+#define DSS_DPP_DITHER_OFFSET	(0x70200)</span>
<span class="p_add">+#define DSS_DPP_CSC_RGB2YUV10B_OFFSET	(0x70300)</span>
<span class="p_add">+#define DSS_DPP_CSC_YUV2RGB10B_OFFSET	(0x70400)</span>
<span class="p_add">+#define DSS_DPP_DEGAMA_OFFSET	(0x70500)</span>
<span class="p_add">+#define DSS_DPP_GAMA_OFFSET	(0x70600)</span>
<span class="p_add">+#define DSS_DPP_ACM_OFFSET	(0x70700)</span>
<span class="p_add">+#define DSS_DPP_ACE_OFFSET	(0x70800)</span>
<span class="p_add">+#define DSS_DPP_LCP_OFFSET	(0x70900)</span>
<span class="p_add">+#define DSS_DPP_ARSR1P_OFFSET	(0x70A00)</span>
<span class="p_add">+#define DSS_DPP_BITEXT0_OFFSET	(0x70B00)</span>
<span class="p_add">+#define DSS_DPP_GAMA_LUT_OFFSET	(0x71000)</span>
<span class="p_add">+#define DSS_DPP_ACM_LUT_OFFSET	(0x72000)</span>
<span class="p_add">+#define DSS_DPP_LCP_LUT_OFFSET	(0x73000)</span>
<span class="p_add">+#define DSS_DPP_ACE_LUT_OFFSET	(0x79000)</span>
<span class="p_add">+#define DSS_DPP_ARSR1P_LUT_OFFSET	(0x7B000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_POST_SCF_OFFSET	DSS_DPP_ARSR1P_OFFSET</span>
<span class="p_add">+#define DSS_POST_SCF_LUT_OFFSET	DSS_DPP_ARSR1P_LUT_OFFSET</span>
<span class="p_add">+</span>
<span class="p_add">+#define DSS_DPP_SBL_OFFSET	(0x7C000)</span>
<span class="p_add">+#define DSS_LDI0_OFFSET	(0x7D000)</span>
<span class="p_add">+#define DSS_IFBC_OFFSET	(0x7D800)</span>
<span class="p_add">+#define DSS_DSC_OFFSET	(0x7DC00)</span>
<span class="p_add">+#define DSS_LDI1_OFFSET	(0x7E000)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** GLB</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define GLB_DSS_TAG	 (DSS_GLB0_OFFSET + 0x0000)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_APB_CTL	 (DSS_GLB0_OFFSET + 0x0004)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_DSS_AXI_RST_EN	(DSS_GLB0_OFFSET + 0x0118)</span>
<span class="p_add">+#define GLB_DSS_APB_RST_EN	(DSS_GLB0_OFFSET + 0x011C)</span>
<span class="p_add">+#define GLB_DSS_CORE_RST_EN	(DSS_GLB0_OFFSET + 0x0120)</span>
<span class="p_add">+#define GLB_PXL0_DIV2_RST_EN	(DSS_GLB0_OFFSET + 0x0124)</span>
<span class="p_add">+#define GLB_PXL0_DIV4_RST_EN	(DSS_GLB0_OFFSET + 0x0128)</span>
<span class="p_add">+#define GLB_PXL0_RST_EN	(DSS_GLB0_OFFSET + 0x012C)</span>
<span class="p_add">+#define GLB_PXL0_DSI_RST_EN	(DSS_GLB0_OFFSET + 0x0130)</span>
<span class="p_add">+#define GLB_DSS_PXL1_RST_EN	(DSS_GLB0_OFFSET + 0x0134)</span>
<span class="p_add">+#define GLB_MM_AXI_CLK_RST_EN	(DSS_GLB0_OFFSET + 0x0138)</span>
<span class="p_add">+#define GLB_AFBCD0_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0140)</span>
<span class="p_add">+#define GLB_AFBCD1_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0144)</span>
<span class="p_add">+#define GLB_AFBCD2_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0148)</span>
<span class="p_add">+#define GLB_AFBCD3_IP_RST_EN	(DSS_GLB0_OFFSET + 0x014C)</span>
<span class="p_add">+#define GLB_AFBCD4_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0150)</span>
<span class="p_add">+#define GLB_AFBCD5_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0154)</span>
<span class="p_add">+#define GLB_AFBCD6_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0158)</span>
<span class="p_add">+#define GLB_AFBCD7_IP_RST_EN	(DSS_GLB0_OFFSET + 0x015C)</span>
<span class="p_add">+#define GLB_AFBCE0_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0160)</span>
<span class="p_add">+#define GLB_AFBCE1_IP_RST_EN	(DSS_GLB0_OFFSET + 0x0164)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_MCU_PDP_INTS	(DSS_GLB0_OFFSET + 0x20C)</span>
<span class="p_add">+#define GLB_MCU_PDP_INT_MSK	(DSS_GLB0_OFFSET + 0x210)</span>
<span class="p_add">+#define GLB_MCU_SDP_INTS	(DSS_GLB0_OFFSET + 0x214)</span>
<span class="p_add">+#define GLB_MCU_SDP_INT_MSK	(DSS_GLB0_OFFSET + 0x218)</span>
<span class="p_add">+#define GLB_MCU_OFF_INTS	(DSS_GLB0_OFFSET + 0x21C)</span>
<span class="p_add">+#define GLB_MCU_OFF_INT_MSK	(DSS_GLB0_OFFSET + 0x220)</span>
<span class="p_add">+#define GLB_MCU_OFF_CAM_INTS	(DSS_GLB0_OFFSET + 0x2B4)</span>
<span class="p_add">+#define GLB_MCU_OFF_CAM_INT_MSK	(DSS_GLB0_OFFSET + 0x2B8)</span>
<span class="p_add">+#define GLB_CPU_PDP_INTS	(DSS_GLB0_OFFSET + 0x224)</span>
<span class="p_add">+#define GLB_CPU_PDP_INT_MSK	(DSS_GLB0_OFFSET + 0x228)</span>
<span class="p_add">+#define GLB_CPU_SDP_INTS	(DSS_GLB0_OFFSET + 0x22C)</span>
<span class="p_add">+#define GLB_CPU_SDP_INT_MSK	(DSS_GLB0_OFFSET + 0x230)</span>
<span class="p_add">+#define GLB_CPU_OFF_INTS	(DSS_GLB0_OFFSET + 0x234)</span>
<span class="p_add">+#define GLB_CPU_OFF_INT_MSK	(DSS_GLB0_OFFSET + 0x238)</span>
<span class="p_add">+#define GLB_CPU_OFF_CAM_INTS	(DSS_GLB0_OFFSET + 0x2AC)</span>
<span class="p_add">+#define GLB_CPU_OFF_CAM_INT_MSK	(DSS_GLB0_OFFSET + 0x2B0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_MODULE_CLK_SEL	(DSS_GLB0_OFFSET + 0x0300)</span>
<span class="p_add">+#define GLB_MODULE_CLK_EN	(DSS_GLB0_OFFSET + 0x0304)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_GLB0_DBG_SEL	(DSS_GLB0_OFFSET + 0x310)</span>
<span class="p_add">+#define GLB_GLB1_DBG_SEL	(DSS_GLB0_OFFSET + 0x314)</span>
<span class="p_add">+#define GLB_DBG_IRQ_CPU	(DSS_GLB0_OFFSET + 0x320)</span>
<span class="p_add">+#define GLB_DBG_IRQ_MCU	(DSS_GLB0_OFFSET + 0x324)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_TP_SEL	(DSS_GLB0_OFFSET + 0x0400)</span>
<span class="p_add">+#define GLB_CRC_DBG_LDI0	(DSS_GLB0_OFFSET + 0x0404)</span>
<span class="p_add">+#define GLB_CRC_DBG_LDI1	(DSS_GLB0_OFFSET + 0x0408)</span>
<span class="p_add">+#define GLB_CRC_LDI0_EN	(DSS_GLB0_OFFSET + 0x040C)</span>
<span class="p_add">+#define GLB_CRC_LDI0_FRM	(DSS_GLB0_OFFSET + 0x0410)</span>
<span class="p_add">+#define GLB_CRC_LDI1_EN	(DSS_GLB0_OFFSET + 0x0414)</span>
<span class="p_add">+#define GLB_CRC_LDI1_FRM	(DSS_GLB0_OFFSET + 0x0418)</span>
<span class="p_add">+</span>
<span class="p_add">+#define GLB_DSS_MEM_CTRL	(DSS_GLB0_OFFSET + 0x0600)</span>
<span class="p_add">+#define GLB_DSS_PM_CTRL	(DSS_GLB0_OFFSET + 0x0604)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** DBG</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DBG_CRC_DBG_OV0	(0x0000)</span>
<span class="p_add">+#define DBG_CRC_DBG_OV1	(0x0004)</span>
<span class="p_add">+#define DBG_CRC_DBG_SUM	(0x0008)</span>
<span class="p_add">+#define DBG_CRC_OV0_EN	(0x000C)</span>
<span class="p_add">+#define DBG_DSS_GLB_DBG_O	(0x0010)</span>
<span class="p_add">+#define DBG_DSS_GLB_DBG_I	(0x0014)</span>
<span class="p_add">+#define DBG_CRC_OV0_FRM	(0x0018)</span>
<span class="p_add">+#define DBG_CRC_OV1_EN	(0x001C)</span>
<span class="p_add">+#define DBG_CRC_OV1_FRM	(0x0020)</span>
<span class="p_add">+#define DBG_CRC_SUM_EN	(0x0024)</span>
<span class="p_add">+#define DBG_CRC_SUM_FRM	(0x0028)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DBG_MCTL_INTS	(0x023C)</span>
<span class="p_add">+#define DBG_MCTL_INT_MSK	(0x0240)</span>
<span class="p_add">+#define DBG_WCH0_INTS	(0x0244)</span>
<span class="p_add">+#define DBG_WCH0_INT_MSK	(0x0248)</span>
<span class="p_add">+#define DBG_WCH1_INTS	(0x024C)</span>
<span class="p_add">+#define DBG_WCH1_INT_MSK	(0x0250)</span>
<span class="p_add">+#define DBG_RCH0_INTS	(0x0254)</span>
<span class="p_add">+#define DBG_RCH0_INT_MSK	(0x0258)</span>
<span class="p_add">+#define DBG_RCH1_INTS	(0x025C)</span>
<span class="p_add">+#define DBG_RCH1_INT_MSK	(0x0260)</span>
<span class="p_add">+#define DBG_RCH2_INTS	(0x0264)</span>
<span class="p_add">+#define DBG_RCH2_INT_MSK	(0x0268)</span>
<span class="p_add">+#define DBG_RCH3_INTS	(0x026C)</span>
<span class="p_add">+#define DBG_RCH3_INT_MSK	(0x0270)</span>
<span class="p_add">+#define DBG_RCH4_INTS	(0x0274)</span>
<span class="p_add">+#define DBG_RCH4_INT_MSK	(0x0278)</span>
<span class="p_add">+#define DBG_RCH5_INTS	(0x027C)</span>
<span class="p_add">+#define DBG_RCH5_INT_MSK	(0x0280)</span>
<span class="p_add">+#define DBG_RCH6_INTS	(0x0284)</span>
<span class="p_add">+#define DBG_RCH6_INT_MSK	(0x0288)</span>
<span class="p_add">+#define DBG_RCH7_INTS	(0x028C)</span>
<span class="p_add">+#define DBG_RCH7_INT_MSK	(0x0290)</span>
<span class="p_add">+#define DBG_DSS_GLB_INTS	(0x0294)</span>
<span class="p_add">+#define DBG_DSS_GLB_INT_MSK	(0x0298)</span>
<span class="p_add">+#define DBG_WCH2_INTS	(0x029C)</span>
<span class="p_add">+#define DBG_WCH2_INT_MSK	(0x02A0)</span>
<span class="p_add">+#define DBG_RCH8_INTS	(0x02A4)</span>
<span class="p_add">+#define DBG_RCH8_INT_MSK	(0x02A8)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** CMDLIST</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define CMDLIST_CH0_PENDING_CLR	(0x0000)</span>
<span class="p_add">+#define CMDLIST_CH0_CTRL	(0x0004)</span>
<span class="p_add">+#define CMDLIST_CH0_STATUS	(0x0008)</span>
<span class="p_add">+#define CMDLIST_CH0_STAAD	(0x000C)</span>
<span class="p_add">+#define CMDLIST_CH0_CURAD	(0x0010)</span>
<span class="p_add">+#define CMDLIST_CH0_INTE	(0x0014)</span>
<span class="p_add">+#define CMDLIST_CH0_INTC	(0x0018)</span>
<span class="p_add">+#define CMDLIST_CH0_INTS	(0x001C)</span>
<span class="p_add">+#define CMDLIST_CH0_SCENE	(0x0020)</span>
<span class="p_add">+#define CMDLIST_CH0_DBG	(0x0028)</span>
<span class="p_add">+</span>
<span class="p_add">+#define CMDLIST_DBG	(0x0700)</span>
<span class="p_add">+#define CMDLIST_BUF_DBG_EN	(0x0704)</span>
<span class="p_add">+#define CMDLIST_BUF_DBG_CNT_CLR	(0x0708)</span>
<span class="p_add">+#define CMDLIST_BUF_DBG_CNT	(0x070C)</span>
<span class="p_add">+#define CMDLIST_TIMEOUT_TH	(0x0710)</span>
<span class="p_add">+#define CMDLIST_START	(0x0714)</span>
<span class="p_add">+#define CMDLIST_ADDR_MASK_EN	(0x0718)</span>
<span class="p_add">+#define CMDLIST_ADDR_MASK_DIS	(0x071C)</span>
<span class="p_add">+#define CMDLIST_ADDR_MASK_STATUS	(0x0720)</span>
<span class="p_add">+#define CMDLIST_TASK_CONTINUE	(0x0724)</span>
<span class="p_add">+#define CMDLIST_TASK_STATUS	(0x0728)</span>
<span class="p_add">+#define CMDLIST_CTRL	(0x072C)</span>
<span class="p_add">+#define CMDLIST_SECU	(0x0730)</span>
<span class="p_add">+#define CMDLIST_INTS	(0x0734)</span>
<span class="p_add">+#define CMDLIST_SWRST	(0x0738)</span>
<span class="p_add">+#define CMD_MEM_CTRL	(0x073C)</span>
<span class="p_add">+#define CMD_CLK_SEL		(0x0740)</span>
<span class="p_add">+#define CMD_CLK_EN	(0x0744)</span>
<span class="p_add">+</span>
<span class="p_add">+#define HISI_DSS_MIN_ROT_AFBCE_BLOCK_SIZE (256)</span>
<span class="p_add">+#define HISI_DSS_MAX_ROT_AFBCE_BLOCK_SIZE (480)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_CMDLIST_CH_TASKDONE_INTS	    BIT(7)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_TIMEOUT_INTS	    BIT(6)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_BADCMD_INTS	    BIT(5)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_START_INTS	           BIT(4)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_PENDING_INTS	    BIT(3)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_AXIERR_INTS	    BIT(2)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_ALLDONE_INTS	    BIT(1)</span>
<span class="p_add">+#define BIT_CMDLIST_CH_ONEDONE_INTS	    BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define BIT_CMDLIST_CH15_INTS	BIT(15)</span>
<span class="p_add">+#define BIT_CMDLIST_CH14_INTS	BIT(14)</span>
<span class="p_add">+#define BIT_CMDLIST_CH13_INTS	BIT(13)</span>
<span class="p_add">+#define BIT_CMDLIST_CH12_INTS	BIT(12)</span>
<span class="p_add">+#define BIT_CMDLIST_CH11_INTS	BIT(11)</span>
<span class="p_add">+#define BIT_CMDLIST_CH10_INTS	BIT(10)</span>
<span class="p_add">+#define BIT_CMDLIST_CH9_INTS	BIT(9)</span>
<span class="p_add">+#define BIT_CMDLIST_CH8_INTS	BIT(8)</span>
<span class="p_add">+#define BIT_CMDLIST_CH7_INTS	BIT(7)</span>
<span class="p_add">+#define BIT_CMDLIST_CH6_INTS	BIT(6)</span>
<span class="p_add">+#define BIT_CMDLIST_CH5_INTS	BIT(5)</span>
<span class="p_add">+#define BIT_CMDLIST_CH4_INTS	BIT(4)</span>
<span class="p_add">+#define BIT_CMDLIST_CH3_INTS	BIT(3)</span>
<span class="p_add">+#define BIT_CMDLIST_CH2_INTS	BIT(2)</span>
<span class="p_add">+#define BIT_CMDLIST_CH1_INTS	BIT(1)</span>
<span class="p_add">+#define BIT_CMDLIST_CH0_INTS	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** AIF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define AIF0_CH0_OFFSET	(DSS_VBIF0_AIF + 0x00)</span>
<span class="p_add">+#define AIF0_CH0_ADD_OFFSET	(DSS_VBIF0_AIF + 0x04)</span>
<span class="p_add">+#define AIF0_CH1_OFFSET	(DSS_VBIF0_AIF + 0x20)</span>
<span class="p_add">+#define AIF0_CH1_ADD_OFFSET	(DSS_VBIF0_AIF + 0x24)</span>
<span class="p_add">+#define AIF0_CH2_OFFSET	(DSS_VBIF0_AIF + 0x40)</span>
<span class="p_add">+#define AIF0_CH2_ADD_OFFSET	(DSS_VBIF0_AIF + 0x44)</span>
<span class="p_add">+#define AIF0_CH3_OFFSET	(DSS_VBIF0_AIF + 0x60)</span>
<span class="p_add">+#define AIF0_CH3_ADD_OFFSET	(DSS_VBIF0_AIF + 0x64)</span>
<span class="p_add">+#define AIF0_CH4_OFFSET	(DSS_VBIF0_AIF + 0x80)</span>
<span class="p_add">+#define AIF0_CH4_ADD_OFFSET	(DSS_VBIF0_AIF + 0x84)</span>
<span class="p_add">+#define AIF0_CH5_OFFSET	(DSS_VBIF0_AIF + 0xA0)</span>
<span class="p_add">+#define AIF0_CH5_ADD_OFFSET	(DSS_VBIF0_AIF + 0xa4)</span>
<span class="p_add">+#define AIF0_CH6_OFFSET	(DSS_VBIF0_AIF + 0xC0)</span>
<span class="p_add">+#define AIF0_CH6_ADD_OFFSET	(DSS_VBIF0_AIF + 0xc4)</span>
<span class="p_add">+#define AIF0_CH7_OFFSET	(DSS_VBIF0_AIF + 0xE0)</span>
<span class="p_add">+#define AIF0_CH7_ADD_OFFSET	(DSS_VBIF0_AIF + 0xe4)</span>
<span class="p_add">+#define AIF0_CH8_OFFSET	(DSS_VBIF0_AIF + 0x100)</span>
<span class="p_add">+#define AIF0_CH8_ADD_OFFSET	(DSS_VBIF0_AIF + 0x104)</span>
<span class="p_add">+#define AIF0_CH9_OFFSET	(DSS_VBIF0_AIF + 0x120)</span>
<span class="p_add">+#define AIF0_CH9_ADD_OFFSET	(DSS_VBIF0_AIF + 0x124)</span>
<span class="p_add">+#define AIF0_CH10_OFFSET	(DSS_VBIF0_AIF + 0x140)</span>
<span class="p_add">+#define AIF0_CH10_ADD_OFFSET	(DSS_VBIF0_AIF + 0x144)</span>
<span class="p_add">+#define AIF0_CH11_OFFSET	(DSS_VBIF0_AIF + 0x160)</span>
<span class="p_add">+#define AIF0_CH11_ADD_OFFSET	(DSS_VBIF0_AIF + 0x164)</span>
<span class="p_add">+#define AIF0_CH12_OFFSET	(DSS_VBIF0_AIF + 0x180)</span>
<span class="p_add">+#define AIF0_CH12_ADD_OFFSET	(DSS_VBIF0_AIF + 0x184)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AIF1_CH0_OFFSET	(DSS_VBIF1_AIF + 0x00)</span>
<span class="p_add">+#define AIF1_CH0_ADD_OFFSET	(DSS_VBIF1_AIF + 0x04)</span>
<span class="p_add">+#define AIF1_CH1_OFFSET	(DSS_VBIF1_AIF + 0x20)</span>
<span class="p_add">+#define AIF1_CH1_ADD_OFFSET	(DSS_VBIF1_AIF + 0x24)</span>
<span class="p_add">+#define AIF1_CH2_OFFSET	(DSS_VBIF1_AIF + 0x40)</span>
<span class="p_add">+#define AIF1_CH2_ADD_OFFSET	(DSS_VBIF1_AIF + 0x44)</span>
<span class="p_add">+#define AIF1_CH3_OFFSET	(DSS_VBIF1_AIF + 0x60)</span>
<span class="p_add">+#define AIF1_CH3_ADD_OFFSET	(DSS_VBIF1_AIF + 0x64)</span>
<span class="p_add">+#define AIF1_CH4_OFFSET	(DSS_VBIF1_AIF + 0x80)</span>
<span class="p_add">+#define AIF1_CH4_ADD_OFFSET	(DSS_VBIF1_AIF + 0x84)</span>
<span class="p_add">+#define AIF1_CH5_OFFSET	(DSS_VBIF1_AIF + 0xA0)</span>
<span class="p_add">+#define AIF1_CH5_ADD_OFFSET	(DSS_VBIF1_AIF + 0xa4)</span>
<span class="p_add">+#define AIF1_CH6_OFFSET	(DSS_VBIF1_AIF + 0xC0)</span>
<span class="p_add">+#define AIF1_CH6_ADD_OFFSET	(DSS_VBIF1_AIF + 0xc4)</span>
<span class="p_add">+#define AIF1_CH7_OFFSET	(DSS_VBIF1_AIF + 0xE0)</span>
<span class="p_add">+#define AIF1_CH7_ADD_OFFSET	(DSS_VBIF1_AIF + 0xe4)</span>
<span class="p_add">+#define AIF1_CH8_OFFSET	(DSS_VBIF1_AIF + 0x100)</span>
<span class="p_add">+#define AIF1_CH8_ADD_OFFSET	(DSS_VBIF1_AIF + 0x104)</span>
<span class="p_add">+#define AIF1_CH9_OFFSET	(DSS_VBIF1_AIF + 0x120)</span>
<span class="p_add">+#define AIF1_CH9_ADD_OFFSET	(DSS_VBIF1_AIF + 0x124)</span>
<span class="p_add">+#define AIF1_CH10_OFFSET	(DSS_VBIF1_AIF + 0x140)</span>
<span class="p_add">+#define AIF1_CH10_ADD_OFFSET	(DSS_VBIF1_AIF + 0x144)</span>
<span class="p_add">+#define AIF1_CH11_OFFSET	(DSS_VBIF1_AIF + 0x160)</span>
<span class="p_add">+#define AIF1_CH11_ADD_OFFSET	(DSS_VBIF1_AIF + 0x164)</span>
<span class="p_add">+#define AIF1_CH12_OFFSET	(DSS_VBIF1_AIF + 0x180)</span>
<span class="p_add">+#define AIF1_CH12_ADD_OFFSET	(DSS_VBIF1_AIF + 0x184)</span>
<span class="p_add">+</span>
<span class="p_add">+/* aif dmax */</span>
<span class="p_add">+</span>
<span class="p_add">+#define AIF_CH_CTL	(0x0000)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AIF_CH_CTL_ADD (0x0004)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+/* aif common */</span>
<span class="p_add">+#define AXI0_RID_MSK0	(0x0800)</span>
<span class="p_add">+#define AXI0_RID_MSK1	(0x0804)</span>
<span class="p_add">+#define AXI0_WID_MSK	(0x0808)</span>
<span class="p_add">+#define AXI0_R_QOS_MAP	(0x080c)</span>
<span class="p_add">+#define AXI1_RID_MSK0	(0x0810)</span>
<span class="p_add">+#define AXI1_RID_MSK1	(0x0814)</span>
<span class="p_add">+#define AXI1_WID_MSK	(0x0818)</span>
<span class="p_add">+#define AXI1_R_QOS_MAP	(0x081c)</span>
<span class="p_add">+#define AIF_CLK_SEL0	(0x0820)</span>
<span class="p_add">+#define AIF_CLK_SEL1	(0x0824)</span>
<span class="p_add">+#define AIF_CLK_EN0	(0x0828)</span>
<span class="p_add">+#define AIF_CLK_EN1	(0x082c)</span>
<span class="p_add">+#define MONITOR_CTRL	(0x0830)</span>
<span class="p_add">+#define MONITOR_TIMER_INI	(0x0834)</span>
<span class="p_add">+#define DEBUG_BUF_BASE	(0x0838)</span>
<span class="p_add">+#define DEBUG_CTRL	(0x083C)</span>
<span class="p_add">+#define AIF_SHADOW_READ	(0x0840)</span>
<span class="p_add">+#define AIF_MEM_CTRL	(0x0844)</span>
<span class="p_add">+#define AIF_MONITOR_EN	(0x0848)</span>
<span class="p_add">+#define AIF_MONITOR_CTRL	(0x084C)</span>
<span class="p_add">+#define AIF_MONITOR_SAMPLE_MUN	(0x0850)</span>
<span class="p_add">+#define AIF_MONITOR_SAMPLE_TIME	(0x0854)</span>
<span class="p_add">+#define AIF_MONITOR_SAMPLE_FLOW	(0x0858)</span>
<span class="p_add">+</span>
<span class="p_add">+/* aif debug */</span>
<span class="p_add">+#define AIF_MONITOR_READ_DATA	(0x0880)</span>
<span class="p_add">+#define AIF_MONITOR_WRITE_DATA	(0x0884)</span>
<span class="p_add">+#define AIF_MONITOR_WINDOW_CYCLE	(0x0888)</span>
<span class="p_add">+#define AIF_MONITOR_WBURST_CNT	(0x088C)</span>
<span class="p_add">+#define AIF_MONITOR_MIN_WR_CYCLE	(0x0890)</span>
<span class="p_add">+#define AIF_MONITOR_MAX_WR_CYCLE	(0x0894)</span>
<span class="p_add">+#define AIF_MONITOR_AVR_WR_CYCLE	(0x0898)</span>
<span class="p_add">+#define AIF_MONITOR_MIN_WRW_CYCLE	(0x089C)</span>
<span class="p_add">+#define AIF_MONITOR_MAX_WRW_CYCLE	(0x08A0)</span>
<span class="p_add">+#define AIF_MONITOR_AVR_WRW_CYCLE	(0x08A4)</span>
<span class="p_add">+#define AIF_MONITOR_RBURST_CNT	(0x08A8)</span>
<span class="p_add">+#define AIF_MONITOR_MIN_RD_CYCLE	(0x08AC)</span>
<span class="p_add">+#define AIF_MONITOR_MAX_RD_CYCLE	(0x08B0)</span>
<span class="p_add">+#define AIF_MONITOR_AVR_RD_CYCLE	(0x08B4)</span>
<span class="p_add">+#define AIF_MONITOR_MIN_RDW_CYCLE	(0x08B8)</span>
<span class="p_add">+#define AIF_MONITOR_MAX_RDW_CYCLE	(0x08BC)</span>
<span class="p_add">+#define AIF_MONITOR_AVR_RDW_CYCLE	(0x08C0)</span>
<span class="p_add">+#define AIF_CH_STAT_0	(0x08C4)</span>
<span class="p_add">+#define AIF_CH_STAT_1	(0x08C8)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AIF_MODULE_CLK_SEL	(0x0A04)</span>
<span class="p_add">+#define AIF_MODULE_CLK_EN	(0x0A08)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_aif {</span>
<span class="p_add">+	uint32_t aif_ch_ctl;</span>
<span class="p_add">+	uint32_t aif_ch_ctl_add;</span>
<span class="p_add">+} dss_aif_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_aif_bw {</span>
<span class="p_add">+	uint64_t bw;</span>
<span class="p_add">+	uint8_t chn_idx;</span>
<span class="p_add">+	int8_t axi_sel;</span>
<span class="p_add">+	uint8_t is_used;</span>
<span class="p_add">+} dss_aif_bw_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MIF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define MIF_ENABLE	(0x0000)</span>
<span class="p_add">+#define MIF_MEM_CTRL	(0x0004)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIF_CTRL0	(0x000)</span>
<span class="p_add">+#define MIF_CTRL1	(0x004)</span>
<span class="p_add">+#define MIF_CTRL2	(0x008)</span>
<span class="p_add">+#define MIF_CTRL3	(0x00C)</span>
<span class="p_add">+#define MIF_CTRL4	(0x010)</span>
<span class="p_add">+#define MIF_CTRL5	(0x014)</span>
<span class="p_add">+#define REG_DEFAULT (0x0500)</span>
<span class="p_add">+#define MIF_SHADOW_READ	(0x0504)</span>
<span class="p_add">+#define MIF_CLK_CTL	(0x0508)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIF_STAT0	(0x0600)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIF_STAT1	(0x0604)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIF_STAT2	(0x0608)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIF_CTRL_OFFSET	(0x20)</span>
<span class="p_add">+#define MIF_CH0_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*1)</span>
<span class="p_add">+#define MIF_CH1_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*2)</span>
<span class="p_add">+#define MIF_CH2_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*3)</span>
<span class="p_add">+#define MIF_CH3_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*4)</span>
<span class="p_add">+#define MIF_CH4_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*5)</span>
<span class="p_add">+#define MIF_CH5_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*6)</span>
<span class="p_add">+#define MIF_CH6_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*7)</span>
<span class="p_add">+#define MIF_CH7_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*8)</span>
<span class="p_add">+#define MIF_CH8_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*9)</span>
<span class="p_add">+#define MIF_CH9_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*10)</span>
<span class="p_add">+#define MIF_CH10_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*11)</span>
<span class="p_add">+#define MIF_CH11_OFFSET	(DSS_MIF_OFFSET + MIF_CTRL_OFFSET*12)</span>
<span class="p_add">+#define MIF_CTRL_NUM	(12)</span>
<span class="p_add">+</span>
<span class="p_add">+#define LITTLE_LAYER_BUF_SIZE	(256 * 1024)</span>
<span class="p_add">+#define MIF_STRIDE_UNIT (4 * 1024)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mif {</span>
<span class="p_add">+	uint32_t mif_ctrl1;</span>
<span class="p_add">+	uint32_t mif_ctrl2;</span>
<span class="p_add">+	uint32_t mif_ctrl3;</span>
<span class="p_add">+	uint32_t mif_ctrl4;</span>
<span class="p_add">+	uint32_t mif_ctrl5;</span>
<span class="p_add">+} dss_mif_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ ** stretch blt, linear/tile, rotation, pixel format</span>
<span class="p_add">+ ** 0 0 000</span>
<span class="p_add">+ */</span>
<span class="p_add">+enum dss_mmu_tlb_tag_org {</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x0 = 0x0,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x1 = 0x1,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x2 = 0x2,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x3 = 0x3,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x4 = 0x4,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x7 = 0x7,</span>
<span class="p_add">+</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x8 = 0x8,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x9 = 0x9,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0xA = 0xA,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0xB = 0xB,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0xC = 0xC,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0xF = 0xF,</span>
<span class="p_add">+</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x10 = 0x10,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x11 = 0x11,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x12 = 0x12,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x13 = 0x13,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x14 = 0x14,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x17 = 0x17,</span>
<span class="p_add">+</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x18 = 0x18,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x19 = 0x19,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x1A = 0x1A,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x1B = 0x1B,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x1C = 0x1C,</span>
<span class="p_add">+	MMU_TLB_TAG_ORG_0x1F = 0x1F,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ **SMMU</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define SMMU_SCR	(0x0000)</span>
<span class="p_add">+#define SMMU_MEMCTRL	(0x0004)</span>
<span class="p_add">+#define SMMU_LP_CTRL	(0x0008)</span>
<span class="p_add">+#define SMMU_PRESS_REMAP	(0x000C)</span>
<span class="p_add">+#define SMMU_INTMASK_NS	(0x0010)</span>
<span class="p_add">+#define SMMU_INTRAW_NS	(0x0014)</span>
<span class="p_add">+#define SMMU_INTSTAT_NS	(0x0018)</span>
<span class="p_add">+#define SMMU_INTCLR_NS	(0x001C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define SMMU_SMRx_NS	(0x0020)</span>
<span class="p_add">+#define SMMU_RLD_EN0_NS	(0x01F0)</span>
<span class="p_add">+#define SMMU_RLD_EN1_NS	(0x01F4)</span>
<span class="p_add">+#define SMMU_RLD_EN2_NS	(0x01F8)</span>
<span class="p_add">+#define SMMU_CB_SCTRL	(0x0200)</span>
<span class="p_add">+#define SMMU_CB_TTBR0	(0x0204)</span>
<span class="p_add">+#define SMMU_CB_TTBR1	(0x0208)</span>
<span class="p_add">+#define SMMU_CB_TTBCR	(0x020C)</span>
<span class="p_add">+#define SMMU_OFFSET_ADDR_NS	(0x0210)</span>
<span class="p_add">+#define SMMU_SCACHEI_ALL	(0x0214)</span>
<span class="p_add">+#define SMMU_SCACHEI_L1	(0x0218)</span>
<span class="p_add">+#define SMMU_SCACHEI_L2L3	(0x021C)</span>
<span class="p_add">+#define SMMU_FAMA_CTRL0	(0x0220)</span>
<span class="p_add">+#define SMMU_FAMA_CTRL1	(0x0224)</span>
<span class="p_add">+#define SMMU_ADDR_MSB	(0x0300)</span>
<span class="p_add">+#define SMMU_ERR_RDADDR	(0x0304)</span>
<span class="p_add">+#define SMMU_ERR_WRADDR	(0x0308)</span>
<span class="p_add">+#define SMMU_FAULT_ADDR_TCU (0x0310)</span>
<span class="p_add">+#define SMMU_FAULT_ID_TCU	(0x0314)</span>
<span class="p_add">+</span>
<span class="p_add">+#define SMMU_FAULT_ADDR_TBUx	(0x0320)</span>
<span class="p_add">+#define SMMU_FAULT_ID_TBUx	(0x0324)</span>
<span class="p_add">+#define SMMU_FAULT_INFOx	(0x0328)</span>
<span class="p_add">+#define SMMU_DBGRPTR_TLB	(0x0380)</span>
<span class="p_add">+#define SMMU_DBGRDATA_TLB	(0x0380)</span>
<span class="p_add">+#define SMMU_DBGRDATA0_CACHE	(0x038C)</span>
<span class="p_add">+#define SMMU_DBGRDATA1_CACHE	(0x0390)</span>
<span class="p_add">+#define SMMU_DBGAXI_CTRL	(0x0394)</span>
<span class="p_add">+#define SMMU_OVA_ADDR	(0x0398)</span>
<span class="p_add">+#define SMMU_OPA_ADDR	(0x039C)</span>
<span class="p_add">+#define SMMU_OVA_CTRL	(0x03A0)</span>
<span class="p_add">+#define SMMU_OPREF_ADDR	(0x03A4)</span>
<span class="p_add">+#define SMMU_OPREF_CTRL	(0x03A8)</span>
<span class="p_add">+#define SMMU_OPREF_CNT	(0x03AC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define SMMU_SMRx_S	(0x0500)</span>
<span class="p_add">+#define SMMU_RLD_EN0_S	(0x06F0)</span>
<span class="p_add">+#define SMMU_RLD_EN1_S	(0x06F4)</span>
<span class="p_add">+#define SMMU_RLD_EN2_S	(0x06F8)</span>
<span class="p_add">+#define SMMU_INTMAS_S	(0x0700)</span>
<span class="p_add">+#define SMMU_INTRAW_S	(0x0704)</span>
<span class="p_add">+#define SMMU_INTSTAT_S	(0x0708)</span>
<span class="p_add">+#define SMMU_INTCLR_S	(0x070C)</span>
<span class="p_add">+#define SMMU_SCR_S	(0x0710)</span>
<span class="p_add">+#define SMMU_SCB_SCTRL	(0x0714)</span>
<span class="p_add">+#define SMMU_SCB_TTBR	(0x0718)</span>
<span class="p_add">+#define SMMU_SCB_TTBCR	(0x071C)</span>
<span class="p_add">+#define SMMU_OFFSET_ADDR_S	(0x0720)</span>
<span class="p_add">+</span>
<span class="p_add">+#define SMMU_SID_NUM	(64)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_smmu {</span>
<span class="p_add">+	uint32_t smmu_scr;</span>
<span class="p_add">+	uint32_t smmu_memctrl;</span>
<span class="p_add">+	uint32_t smmu_lp_ctrl;</span>
<span class="p_add">+	uint32_t smmu_press_remap;</span>
<span class="p_add">+	uint32_t smmu_intmask_ns;</span>
<span class="p_add">+	uint32_t smmu_intraw_ns;</span>
<span class="p_add">+	uint32_t smmu_intstat_ns;</span>
<span class="p_add">+	uint32_t smmu_intclr_ns;</span>
<span class="p_add">+	uint32_t smmu_smrx_ns[SMMU_SID_NUM];</span>
<span class="p_add">+	uint32_t smmu_rld_en0_ns;</span>
<span class="p_add">+	uint32_t smmu_rld_en1_ns;</span>
<span class="p_add">+	uint32_t smmu_rld_en2_ns;</span>
<span class="p_add">+	uint32_t smmu_cb_sctrl;</span>
<span class="p_add">+	uint32_t smmu_cb_ttbr0;</span>
<span class="p_add">+	uint32_t smmu_cb_ttbr1;</span>
<span class="p_add">+	uint32_t smmu_cb_ttbcr;</span>
<span class="p_add">+	uint32_t smmu_offset_addr_ns;</span>
<span class="p_add">+	uint32_t smmu_scachei_all;</span>
<span class="p_add">+	uint32_t smmu_scachei_l1;</span>
<span class="p_add">+	uint32_t smmu_scachei_l2l3;</span>
<span class="p_add">+	uint32_t smmu_fama_ctrl0_ns;</span>
<span class="p_add">+	uint32_t smmu_fama_ctrl1_ns;</span>
<span class="p_add">+	uint32_t smmu_addr_msb;</span>
<span class="p_add">+	uint32_t smmu_err_rdaddr;</span>
<span class="p_add">+	uint32_t smmu_err_wraddr;</span>
<span class="p_add">+	uint32_t smmu_fault_addr_tcu;</span>
<span class="p_add">+	uint32_t smmu_fault_id_tcu;</span>
<span class="p_add">+	uint32_t smmu_fault_addr_tbux;</span>
<span class="p_add">+	uint32_t smmu_fault_id_tbux;</span>
<span class="p_add">+	uint32_t smmu_fault_infox;</span>
<span class="p_add">+	uint32_t smmu_dbgrptr_tlb;</span>
<span class="p_add">+	uint32_t smmu_dbgrdata_tlb;</span>
<span class="p_add">+	uint32_t smmu_dbgrptr_cache;</span>
<span class="p_add">+	uint32_t smmu_dbgrdata0_cache;</span>
<span class="p_add">+	uint32_t smmu_dbgrdata1_cache;</span>
<span class="p_add">+	uint32_t smmu_dbgaxi_ctrl;</span>
<span class="p_add">+	uint32_t smmu_ova_addr;</span>
<span class="p_add">+	uint32_t smmu_opa_addr;</span>
<span class="p_add">+	uint32_t smmu_ova_ctrl;</span>
<span class="p_add">+	uint32_t smmu_opref_addr;</span>
<span class="p_add">+	uint32_t smmu_opref_ctrl;</span>
<span class="p_add">+	uint32_t smmu_opref_cnt;</span>
<span class="p_add">+	uint32_t smmu_smrx_s[SMMU_SID_NUM];</span>
<span class="p_add">+	uint32_t smmu_rld_en0_s;</span>
<span class="p_add">+	uint32_t smmu_rld_en1_s;</span>
<span class="p_add">+	uint32_t smmu_rld_en2_s;</span>
<span class="p_add">+	uint32_t smmu_intmas_s;</span>
<span class="p_add">+	uint32_t smmu_intraw_s;</span>
<span class="p_add">+	uint32_t smmu_intstat_s;</span>
<span class="p_add">+	uint32_t smmu_intclr_s;</span>
<span class="p_add">+	uint32_t smmu_scr_s;</span>
<span class="p_add">+	uint32_t smmu_scb_sctrl;</span>
<span class="p_add">+	uint32_t smmu_scb_ttbr;</span>
<span class="p_add">+	uint32_t smmu_scb_ttbcr;</span>
<span class="p_add">+	uint32_t smmu_offset_addr_s;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint8_t smmu_smrx_ns_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+} dss_smmu_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** RDMA</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_OFT_X0	(0x0000)</span>
<span class="p_add">+#define DMA_OFT_Y0	(0x0004)</span>
<span class="p_add">+#define DMA_OFT_X1	(0x0008)</span>
<span class="p_add">+#define DMA_OFT_Y1	(0x000C)</span>
<span class="p_add">+#define DMA_MASK0	(0x0010)</span>
<span class="p_add">+#define DMA_MASK1	(0x0014)</span>
<span class="p_add">+#define DMA_STRETCH_SIZE_VRT	(0x0018)</span>
<span class="p_add">+#define DMA_CTRL	(0x001C)</span>
<span class="p_add">+#define DMA_TILE_SCRAM	(0x0020)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_PULSE	(0x0028)</span>
<span class="p_add">+#define DMA_CORE_GT	(0x002C)</span>
<span class="p_add">+#define RWCH_CFG0	(0x0030)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define WDMA_DMA_SW_MASK_EN	(0x004C)</span>
<span class="p_add">+#define WDMA_DMA_START_MASK0	(0x0050)</span>
<span class="p_add">+#define WDMA_DMA_END_MASK0	(0x0054)</span>
<span class="p_add">+#define WDMA_DMA_START_MASK1	(0x0058)</span>
<span class="p_add">+#define WDMA_DMA_END_MASK1	(0x005C)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_DATA_ADDR0	(0x0060)</span>
<span class="p_add">+#define DMA_STRIDE0	(0x0064)</span>
<span class="p_add">+#define DMA_STRETCH_STRIDE0	(0x0068)</span>
<span class="p_add">+#define DMA_DATA_NUM0	(0x006C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_TEST0	(0x0070)</span>
<span class="p_add">+#define DMA_TEST1	(0x0074)</span>
<span class="p_add">+#define DMA_TEST3	(0x0078)</span>
<span class="p_add">+#define DMA_TEST4	(0x007C)</span>
<span class="p_add">+#define DMA_STATUS_Y	(0x0080)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_DATA_ADDR1	(0x0084)</span>
<span class="p_add">+#define DMA_STRIDE1	(0x0088)</span>
<span class="p_add">+#define DMA_STRETCH_STRIDE1	(0x008C)</span>
<span class="p_add">+#define DMA_DATA_NUM1	(0x0090)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_TEST0_U	(0x0094)</span>
<span class="p_add">+#define DMA_TEST1_U	(0x0098)</span>
<span class="p_add">+#define DMA_TEST3_U	(0x009C)</span>
<span class="p_add">+#define DMA_TEST4_U	(0x00A0)</span>
<span class="p_add">+#define DMA_STATUS_U	(0x00A4)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_DATA_ADDR2	(0x00A8)</span>
<span class="p_add">+#define DMA_STRIDE2	(0x00AC)</span>
<span class="p_add">+#define DMA_STRETCH_STRIDE2	(0x00B0)</span>
<span class="p_add">+#define DMA_DATA_NUM2	(0x00B4)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_TEST0_V	(0x00B8)</span>
<span class="p_add">+#define DMA_TEST1_V	(0x00BC)</span>
<span class="p_add">+#define DMA_TEST3_V	(0x00C0)</span>
<span class="p_add">+#define DMA_TEST4_V	(0x00C4)</span>
<span class="p_add">+#define DMA_STATUS_V	(0x00C8)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define CH_RD_SHADOW	(0x00D0)</span>
<span class="p_add">+#define CH_CTL	(0x00D4)</span>
<span class="p_add">+#define CH_SECU_EN	(0x00D8)</span>
<span class="p_add">+#define CH_SW_END_REQ	(0x00DC)</span>
<span class="p_add">+#define CH_CLK_SEL	(0x00E0)</span>
<span class="p_add">+#define CH_CLK_EN	(0x00E4)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** DFC</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DFC_DISP_SIZE	(0x0000)</span>
<span class="p_add">+#define DFC_PIX_IN_NUM	(0x0004)</span>
<span class="p_add">+#define DFC_GLB_ALPHA	(0x0008)</span>
<span class="p_add">+#define DFC_DISP_FMT	(0x000C)</span>
<span class="p_add">+#define DFC_CLIP_CTL_HRZ	(0x0010)</span>
<span class="p_add">+#define DFC_CLIP_CTL_VRZ	(0x0014)</span>
<span class="p_add">+#define DFC_CTL_CLIP_EN	(0x0018)</span>
<span class="p_add">+#define DFC_ICG_MODULE	(0x001C)</span>
<span class="p_add">+#define DFC_DITHER_ENABLE	(0x0020)</span>
<span class="p_add">+#define DFC_PADDING_CTL	(0x0024)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_dfc {</span>
<span class="p_add">+	uint32_t disp_size;</span>
<span class="p_add">+	uint32_t pix_in_num;</span>
<span class="p_add">+	uint32_t disp_fmt;</span>
<span class="p_add">+	uint32_t clip_ctl_hrz;</span>
<span class="p_add">+	uint32_t clip_ctl_vrz;</span>
<span class="p_add">+	uint32_t ctl_clip_en;</span>
<span class="p_add">+	uint32_t icg_module;</span>
<span class="p_add">+	uint32_t dither_enable;</span>
<span class="p_add">+	uint32_t padding_ctl;</span>
<span class="p_add">+} dss_dfc_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** SCF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DSS_SCF_H0_Y_COEF_OFFSET	(0x0000)</span>
<span class="p_add">+#define DSS_SCF_Y_COEF_OFFSET	(0x2000)</span>
<span class="p_add">+#define DSS_SCF_UV_COEF_OFFSET	(0x2800)</span>
<span class="p_add">+</span>
<span class="p_add">+#define SCF_EN_HSCL_STR	(0x0000)</span>
<span class="p_add">+#define SCF_EN_VSCL_STR	(0x0004)</span>
<span class="p_add">+#define SCF_H_V_ORDER	(0x0008)</span>
<span class="p_add">+#define SCF_SCF_CORE_GT	(0x000C)</span>
<span class="p_add">+#define SCF_INPUT_WIDTH_HEIGHT	(0x0010)</span>
<span class="p_add">+#define SCF_OUTPUT_WIDTH_HEIGHT	(0x0014)</span>
<span class="p_add">+#define SCF_COEF_MEM_CTRL  (0x0018)</span>
<span class="p_add">+#define SCF_EN_HSCL	(0x001C)</span>
<span class="p_add">+#define SCF_EN_VSCL	(0x0020)</span>
<span class="p_add">+#define SCF_ACC_HSCL	(0x0024)</span>
<span class="p_add">+#define SCF_ACC_HSCL1	(0x0028)</span>
<span class="p_add">+#define SCF_INC_HSCL	(0x0034)</span>
<span class="p_add">+#define SCF_ACC_VSCL	(0x0038)</span>
<span class="p_add">+#define SCF_ACC_VSCL1	(0x003C)</span>
<span class="p_add">+#define SCF_INC_VSCL	(0x0048)</span>
<span class="p_add">+#define SCF_EN_NONLINEAR	(0x004C)</span>
<span class="p_add">+#define SCF_EN_MMP	(0x007C)</span>
<span class="p_add">+#define SCF_DB_H0	(0x0080)</span>
<span class="p_add">+#define SCF_DB_H1	(0x0084)</span>
<span class="p_add">+#define SCF_DB_V0	(0x0088)</span>
<span class="p_add">+#define SCF_DB_V1	(0x008C)</span>
<span class="p_add">+#define SCF_LB_MEM_CTRL	(0x0090)</span>
<span class="p_add">+#define SCF_RD_SHADOW	(0x00F0)</span>
<span class="p_add">+#define SCF_CLK_SEL	(0x00F8)</span>
<span class="p_add">+#define SCF_CLK_EN	(0x00FC)</span>
<span class="p_add">+</span>
<span class="p_add">+/* MACROS */</span>
<span class="p_add">+#define SCF_MIN_INPUT	(16)</span>
<span class="p_add">+#define SCF_MIN_OUTPUT	(16)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Threshold for SCF Stretch and SCF filter */</span>
<span class="p_add">+#define RDMA_STRETCH_THRESHOLD	(2)</span>
<span class="p_add">+#define SCF_INC_FACTOR	(1 &lt;&lt; 18)</span>
<span class="p_add">+#define SCF_UPSCALE_MAX	(60)</span>
<span class="p_add">+#define SCF_DOWNSCALE_MAX	  (60)</span>
<span class="p_add">+#define SCF_EDGE_FACTOR (3)</span>
<span class="p_add">+#define ARSR2P_INC_FACTOR (65536)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_scl {</span>
<span class="p_add">+	uint32_t en_hscl_str;</span>
<span class="p_add">+	uint32_t en_vscl_str;</span>
<span class="p_add">+	uint32_t h_v_order;</span>
<span class="p_add">+	uint32_t input_width_height;</span>
<span class="p_add">+	uint32_t output_width_height;</span>
<span class="p_add">+	uint32_t en_hscl;</span>
<span class="p_add">+	uint32_t en_vscl;</span>
<span class="p_add">+	uint32_t acc_hscl;</span>
<span class="p_add">+	uint32_t inc_hscl;</span>
<span class="p_add">+	uint32_t inc_vscl;</span>
<span class="p_add">+	uint32_t en_mmp;</span>
<span class="p_add">+	uint32_t scf_ch_core_gt;</span>
<span class="p_add">+	uint32_t fmt;</span>
<span class="p_add">+} dss_scl_t;</span>
<span class="p_add">+</span>
<span class="p_add">+enum scl_coef_lut_idx {</span>
<span class="p_add">+	SCL_COEF_NONE_IDX = -1,</span>
<span class="p_add">+	SCL_COEF_YUV_IDX = 0,</span>
<span class="p_add">+	SCL_COEF_RGB_IDX = 1,</span>
<span class="p_add">+	SCL_COEF_IDX_MAX = 2,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** ARSR2P  v0</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define ARSR2P_INPUT_WIDTH_HEIGHT		(0x000)</span>
<span class="p_add">+#define ARSR2P_OUTPUT_WIDTH_HEIGHT		(0x004)</span>
<span class="p_add">+#define ARSR2P_IHLEFT		(0x008)</span>
<span class="p_add">+#define ARSR2P_IHRIGHT		(0x00C)</span>
<span class="p_add">+#define ARSR2P_IVTOP		(0x010)</span>
<span class="p_add">+#define ARSR2P_IVBOTTOM		(0x014)</span>
<span class="p_add">+#define ARSR2P_IHINC		(0x018)</span>
<span class="p_add">+#define ARSR2P_IVINC		(0x01C)</span>
<span class="p_add">+#define ARSR2P_UV_OFFSET		(0x020)</span>
<span class="p_add">+#define ARSR2P_MODE		(0x024)</span>
<span class="p_add">+#define ARSR2P_SKIN_THRES_Y		(0x028)</span>
<span class="p_add">+#define ARSR2P_SKIN_THRES_U		(0x02C)</span>
<span class="p_add">+#define ARSR2P_SKIN_THRES_V		(0x030)</span>
<span class="p_add">+#define ARSR2P_SKIN_CFG0		(0x034)</span>
<span class="p_add">+#define ARSR2P_SKIN_CFG1		(0x038)</span>
<span class="p_add">+#define ARSR2P_SKIN_CFG2		(0x03C)</span>
<span class="p_add">+#define ARSR2P_SHOOT_CFG1		(0x040)</span>
<span class="p_add">+#define ARSR2P_SHOOT_CFG2		(0x044)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG1		(0x048)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG2		(0x04C)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG3		(0x050)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG4		(0x054)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG5		(0x058)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG6		(0x05C)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG7		(0x060)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG8		(0x064)</span>
<span class="p_add">+#define ARSR2P_SHARP_CFG9		(0x068)</span>
<span class="p_add">+#define ARSR2P_TEXTURW_ANALYSTS		(0x06C)</span>
<span class="p_add">+#define ARSR2P_INTPLSHOOTCTRL		(0x070)</span>
<span class="p_add">+#define ARSR2P_DEBUG0		(0x074)</span>
<span class="p_add">+#define ARSR2P_DEBUG1		(0x078)</span>
<span class="p_add">+#define ARSR2P_DEBUG2		(0x07C)</span>
<span class="p_add">+#define ARSR2P_DEBUG3		(0x080)</span>
<span class="p_add">+#define ARSR2P_LB_MEM_CTRL		(0x084)</span>
<span class="p_add">+#define ARSR2P_IHLEFT1		(0x088)</span>
<span class="p_add">+#define ARSR2P_IHRIGHT1		(0x090)</span>
<span class="p_add">+#define ARSR2P_IVBOTTOM1		(0x094)</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARSR2P_LUT_COEFY_V_OFFSET (0x0000)</span>
<span class="p_add">+#define ARSR2P_LUT_COEFY_H_OFFSET (0x0100)</span>
<span class="p_add">+#define ARSR2P_LUT_COEFA_V_OFFSET (0x0300)</span>
<span class="p_add">+#define ARSR2P_LUT_COEFA_H_OFFSET (0x0400)</span>
<span class="p_add">+#define ARSR2P_LUT_COEFUV_V_OFFSET (0x0600)</span>
<span class="p_add">+#define ARSR2P_LUT_COEFUV_H_OFFSET (0x0700)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_arsr2p_effect {</span>
<span class="p_add">+	uint32_t skin_thres_y;</span>
<span class="p_add">+	uint32_t skin_thres_u;</span>
<span class="p_add">+	uint32_t skin_thres_v;</span>
<span class="p_add">+	uint32_t skin_cfg0;</span>
<span class="p_add">+	uint32_t skin_cfg1;</span>
<span class="p_add">+	uint32_t skin_cfg2;</span>
<span class="p_add">+	uint32_t shoot_cfg1;</span>
<span class="p_add">+	uint32_t shoot_cfg2;</span>
<span class="p_add">+	uint32_t sharp_cfg1;</span>
<span class="p_add">+	uint32_t sharp_cfg2;</span>
<span class="p_add">+	uint32_t sharp_cfg3;</span>
<span class="p_add">+	uint32_t sharp_cfg4;</span>
<span class="p_add">+	uint32_t sharp_cfg5;</span>
<span class="p_add">+	uint32_t sharp_cfg6;</span>
<span class="p_add">+	uint32_t sharp_cfg7;</span>
<span class="p_add">+	uint32_t sharp_cfg8;</span>
<span class="p_add">+	uint32_t sharp_cfg9;</span>
<span class="p_add">+	uint32_t texturw_analysts;</span>
<span class="p_add">+	uint32_t intplshootctrl;</span>
<span class="p_add">+} dss_arsr2p_effect_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_arsr2p {</span>
<span class="p_add">+	uint32_t arsr_input_width_height;</span>
<span class="p_add">+	uint32_t arsr_output_width_height;</span>
<span class="p_add">+	uint32_t ihleft;</span>
<span class="p_add">+	uint32_t ihright;</span>
<span class="p_add">+	uint32_t ivtop;</span>
<span class="p_add">+	uint32_t ivbottom;</span>
<span class="p_add">+	uint32_t ihinc;</span>
<span class="p_add">+	uint32_t ivinc;</span>
<span class="p_add">+	uint32_t offset;</span>
<span class="p_add">+	uint32_t mode;</span>
<span class="p_add">+	dss_arsr2p_effect_t arsr2p_effect;</span>
<span class="p_add">+	uint32_t ihleft1;</span>
<span class="p_add">+	uint32_t ihright1;</span>
<span class="p_add">+	uint32_t ivbottom1;</span>
<span class="p_add">+} dss_arsr2p_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** POST_CLIP  v g</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define POST_CLIP_DISP_SIZE	(0x0000)</span>
<span class="p_add">+#define POST_CLIP_CTL_HRZ	(0x0010)</span>
<span class="p_add">+#define POST_CLIP_CTL_VRZ	(0x0014)</span>
<span class="p_add">+#define POST_CLIP_EN	(0x0018)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_post_clip {</span>
<span class="p_add">+	uint32_t disp_size;</span>
<span class="p_add">+	uint32_t clip_ctl_hrz;</span>
<span class="p_add">+	uint32_t clip_ctl_vrz;</span>
<span class="p_add">+	uint32_t ctl_clip_en;</span>
<span class="p_add">+} dss_post_clip_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** PCSC v</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define PCSC_IDC0	(0x0000)</span>
<span class="p_add">+#define PCSC_IDC2	(0x0004)</span>
<span class="p_add">+#define PCSC_ODC0	(0x0008)</span>
<span class="p_add">+#define PCSC_ODC2	(0x000C)</span>
<span class="p_add">+#define PCSC_P0	(0x0010)</span>
<span class="p_add">+#define PCSC_P1	(0x0014)</span>
<span class="p_add">+#define PCSC_P2	(0x0018)</span>
<span class="p_add">+#define PCSC_P3	(0x001C)</span>
<span class="p_add">+#define PCSC_P4	(0x0020)</span>
<span class="p_add">+#define PCSC_ICG_MODULE	(0x0024)</span>
<span class="p_add">+#define PCSC_MPREC	(0x0028)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_pcsc {</span>
<span class="p_add">+	uint32_t pcsc_idc0;</span>
<span class="p_add">+} dss_pcsc_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** CSC</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define CSC_IDC0	(0x0000)</span>
<span class="p_add">+#define CSC_IDC2	(0x0004)</span>
<span class="p_add">+#define CSC_ODC0	(0x0008)</span>
<span class="p_add">+#define CSC_ODC2	(0x000C)</span>
<span class="p_add">+#define CSC_P0	(0x0010)</span>
<span class="p_add">+#define CSC_P1	(0x0014)</span>
<span class="p_add">+#define CSC_P2	(0x0018)</span>
<span class="p_add">+#define CSC_P3	(0x001C)</span>
<span class="p_add">+#define CSC_P4	(0x0020)</span>
<span class="p_add">+#define CSC_ICG_MODULE	(0x0024)</span>
<span class="p_add">+#define CSC_MPREC	(0x0028)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_csc {</span>
<span class="p_add">+	uint32_t idc0;</span>
<span class="p_add">+	uint32_t idc2;</span>
<span class="p_add">+	uint32_t odc0;</span>
<span class="p_add">+	uint32_t odc2;</span>
<span class="p_add">+	uint32_t p0;</span>
<span class="p_add">+	uint32_t p1;</span>
<span class="p_add">+	uint32_t p2;</span>
<span class="p_add">+	uint32_t p3;</span>
<span class="p_add">+	uint32_t p4;</span>
<span class="p_add">+	uint32_t icg_module;</span>
<span class="p_add">+	uint32_t mprec;</span>
<span class="p_add">+} dss_csc_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ **channel DEBUG</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define CH_DEBUG_SEL (0x600)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** VPP</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define VPP_CTRL (0x700)</span>
<span class="p_add">+#define VPP_MEM_CTRL (0x704)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ **DMA BUF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DMA_BUF_CTRL	(0x800)</span>
<span class="p_add">+#define DMA_BUF_SIZE  (0x850)</span>
<span class="p_add">+#define DMA_BUF_MEM_CTRL	(0x854)</span>
<span class="p_add">+#define DMA_BUF_DBG0 (0x0838)</span>
<span class="p_add">+#define DMA_BUF_DBG1 (0x083c)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBCD_HREG_HDR_PTR_LO	(0x900)</span>
<span class="p_add">+#define AFBCD_HREG_PIC_WIDTH	(0x904)</span>
<span class="p_add">+#define AFBCD_HREG_PIC_HEIGHT	(0x90C)</span>
<span class="p_add">+#define AFBCD_HREG_FORMAT	(0x910)</span>
<span class="p_add">+#define AFBCD_CTL		(0x914)</span>
<span class="p_add">+#define AFBCD_STR	(0x918)</span>
<span class="p_add">+#define AFBCD_LINE_CROP	(0x91C)</span>
<span class="p_add">+#define AFBCD_INPUT_HEADER_STRIDE	(0x920)</span>
<span class="p_add">+#define AFBCD_PAYLOAD_STRIDE	(0x924)</span>
<span class="p_add">+#define AFBCD_MM_BASE_0	(0x928)</span>
<span class="p_add">+#define AFBCD_AFBCD_PAYLOAD_POINTER	(0x930)</span>
<span class="p_add">+#define AFBCD_HEIGHT_BF_STR	(0x934)</span>
<span class="p_add">+#define AFBCD_OS_CFG	(0x938)</span>
<span class="p_add">+#define AFBCD_MEM_CTRL	(0x93C)</span>
<span class="p_add">+#define AFBCD_SCRAMBLE_MODE	(0x940)</span>
<span class="p_add">+#define AFBCD_HEADER_POINTER_OFFSET	(0x944)</span>
<span class="p_add">+#define AFBCD_MONITOR_REG1_OFFSET	(0x948)</span>
<span class="p_add">+#define AFBCD_MONITOR_REG2_OFFSET	(0x94C)</span>
<span class="p_add">+#define AFBCD_MONITOR_REG3_OFFSET	(0x950)</span>
<span class="p_add">+#define AFBCD_DEBUG_REG0_OFFSET	(0x954)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBCE_HREG_PIC_BLKS	(0x900)</span>
<span class="p_add">+#define AFBCE_HREG_FORMAT	(0x904)</span>
<span class="p_add">+#define AFBCE_HREG_HDR_PTR_LO	(0x908)</span>
<span class="p_add">+#define AFBCE_HREG_PLD_PTR_LO	(0x90C)</span>
<span class="p_add">+#define AFBCE_PICTURE_SIZE	(0x910)</span>
<span class="p_add">+#define AFBCE_CTL	(0x914)</span>
<span class="p_add">+#define AFBCE_HEADER_SRTIDE	(0x918)</span>
<span class="p_add">+#define AFBCE_PAYLOAD_STRIDE	(0x91C)</span>
<span class="p_add">+#define AFBCE_ENC_OS_CFG	(0x920)</span>
<span class="p_add">+#define AFBCE_MEM_CTRL	(0x924)</span>
<span class="p_add">+#define AFBCE_QOS_CFG	(0x928)</span>
<span class="p_add">+#define AFBCE_THRESHOLD	(0x92C)</span>
<span class="p_add">+#define AFBCE_SCRAMBLE_MODE	(0x930)</span>
<span class="p_add">+#define AFBCE_HEADER_POINTER_OFFSET	(0x934)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ROT_FIRST_LNS	(0x530)</span>
<span class="p_add">+#define ROT_STATE	(0x534)</span>
<span class="p_add">+#define ROT_MEM_CTRL		(0x538)</span>
<span class="p_add">+#define ROT_SIZE	(0x53C)</span>
<span class="p_add">+#define ROT_CPU_CTL0	(0x540)</span>
<span class="p_add">+#define ROT_CPU_START0	(0x544)</span>
<span class="p_add">+#define ROT_CPU_ADDR0	(0x548)</span>
<span class="p_add">+#define ROT_CPU_RDATA0	(0x54C)</span>
<span class="p_add">+#define ROT_CPU_RDATA1	(0x550)</span>
<span class="p_add">+#define ROT_CPU_WDATA0	(0x554)</span>
<span class="p_add">+#define ROT_CPU_WDATA1	(0x558)</span>
<span class="p_add">+#define ROT_CPU_CTL1	(0x55C)</span>
<span class="p_add">+#define ROT_CPU_START1	(0x560)</span>
<span class="p_add">+#define ROT_CPU_ADDR1	(0x564)</span>
<span class="p_add">+#define ROT_CPU_RDATA2	(0x568)</span>
<span class="p_add">+#define ROT_CPU_RDATA3	(0x56C)</span>
<span class="p_add">+#define ROT_CPU_WDATA2	(0x570)</span>
<span class="p_add">+#define ROT_CPU_WDATA3	(0x574)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define CH_REG_DEFAULT (0x0A00)</span>
<span class="p_add">+</span>
<span class="p_add">+/* MACROS */</span>
<span class="p_add">+#define MIN_INTERLEAVE	(7)</span>
<span class="p_add">+#define MAX_TILE_SURPORT_NUM	(6)</span>
<span class="p_add">+</span>
<span class="p_add">+/* DMA aligned limited:  128bits aligned */</span>
<span class="p_add">+#define DMA_ALIGN_BYTES	(128 / BITS_PER_BYTE)</span>
<span class="p_add">+#define DMA_ADDR_ALIGN	(128 / BITS_PER_BYTE)</span>
<span class="p_add">+#define DMA_STRIDE_ALIGN	(128 / BITS_PER_BYTE)</span>
<span class="p_add">+</span>
<span class="p_add">+#define TILE_DMA_ADDR_ALIGN	(256 * 1024)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DMA_IN_WIDTH_MAX	(2048)</span>
<span class="p_add">+#define DMA_IN_HEIGHT_MAX	(8192)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_PIC_WIDTH_MIN	(16)</span>
<span class="p_add">+#define AFBC_PIC_WIDTH_MAX	(8192)</span>
<span class="p_add">+#define AFBC_PIC_HEIGHT_MIN	(16)</span>
<span class="p_add">+#define AFBC_PIC_HEIGHT_MAX	(4096)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBCD_TOP_CROP_MAX	(15)</span>
<span class="p_add">+#define AFBCD_BOTTOM_CROP_MAX	(15)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_HEADER_STRIDE_BLOCK	(16)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_PAYLOAD_STRIDE_BLOCK	(1024)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_SUPER_GRAPH_HEADER_ADDR_ALIGN	(128)</span>
<span class="p_add">+#define AFBC_HEADER_ADDR_ALIGN	(64)</span>
<span class="p_add">+#define AFBC_HEADER_STRIDE_ALIGN	(64)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_PAYLOAD_ADDR_ALIGN_32	(1024)</span>
<span class="p_add">+#define AFBC_PAYLOAD_STRIDE_ALIGN_32	(1024)</span>
<span class="p_add">+#define AFBC_PAYLOAD_ADDR_ALIGN_16	(512)</span>
<span class="p_add">+#define AFBC_PAYLOAD_STRIDE_ALIGN_16	(512)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBC_BLOCK_ALIGN	(16)</span>
<span class="p_add">+</span>
<span class="p_add">+#define AFBCE_IN_WIDTH_MAX	(512)</span>
<span class="p_add">+#define WROT_IN_WIDTH_MAX	(512)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MMBUF_BASE	(0x40)</span>
<span class="p_add">+#define MMBUF_LINE_NUM	(8)</span>
<span class="p_add">+#define MMBUF_ADDR_ALIGN	(64)</span>
<span class="p_add">+</span>
<span class="p_add">+enum DSS_AFBC_HALF_BLOCK_MODE {</span>
<span class="p_add">+	AFBC_HALF_BLOCK_UPPER_LOWER_ALL = 0,</span>
<span class="p_add">+	AFBC_HALF_BLOCK_LOWER_UPPER_ALL,</span>
<span class="p_add">+	AFBC_HALF_BLOCK_UPPER_ONLY,</span>
<span class="p_add">+	AFBC_HALF_BLOCK_LOWER_ONLY,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_rdma {</span>
<span class="p_add">+	uint32_t oft_x0;</span>
<span class="p_add">+	uint32_t oft_y0;</span>
<span class="p_add">+	uint32_t oft_x1;</span>
<span class="p_add">+	uint32_t oft_y1;</span>
<span class="p_add">+	uint32_t mask0;</span>
<span class="p_add">+	uint32_t mask1;</span>
<span class="p_add">+	uint32_t stretch_size_vrt;</span>
<span class="p_add">+	uint32_t ctrl;</span>
<span class="p_add">+	uint32_t tile_scram;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t data_addr0;</span>
<span class="p_add">+	uint32_t stride0;</span>
<span class="p_add">+	uint32_t stretch_stride0;</span>
<span class="p_add">+	uint32_t data_num0;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t data_addr1;</span>
<span class="p_add">+	uint32_t stride1;</span>
<span class="p_add">+	uint32_t stretch_stride1;</span>
<span class="p_add">+	uint32_t data_num1;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t data_addr2;</span>
<span class="p_add">+	uint32_t stride2;</span>
<span class="p_add">+	uint32_t stretch_stride2;</span>
<span class="p_add">+	uint32_t data_num2;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t ch_rd_shadow;</span>
<span class="p_add">+	uint32_t ch_ctl;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t dma_buf_ctrl;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t vpp_ctrl;</span>
<span class="p_add">+	uint32_t vpp_mem_ctrl;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t afbcd_hreg_hdr_ptr_lo;</span>
<span class="p_add">+	uint32_t afbcd_hreg_pic_width;</span>
<span class="p_add">+	uint32_t afbcd_hreg_pic_height;</span>
<span class="p_add">+	uint32_t afbcd_hreg_format;</span>
<span class="p_add">+	uint32_t afbcd_ctl;</span>
<span class="p_add">+	uint32_t afbcd_str;</span>
<span class="p_add">+	uint32_t afbcd_line_crop;</span>
<span class="p_add">+	uint32_t afbcd_input_header_stride;</span>
<span class="p_add">+	uint32_t afbcd_payload_stride;</span>
<span class="p_add">+	uint32_t afbcd_mm_base_0;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t afbcd_afbcd_payload_pointer;</span>
<span class="p_add">+	uint32_t afbcd_height_bf_str;</span>
<span class="p_add">+	uint32_t afbcd_os_cfg;</span>
<span class="p_add">+	uint32_t afbcd_mem_ctrl;</span>
<span class="p_add">+	uint32_t afbcd_scramble_mode;</span>
<span class="p_add">+	uint32_t afbcd_header_pointer_offset;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint8_t vpp_used;</span>
<span class="p_add">+	uint8_t afbc_used;</span>
<span class="p_add">+} dss_rdma_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_wdma {</span>
<span class="p_add">+	uint32_t oft_x0;</span>
<span class="p_add">+	uint32_t oft_y0;</span>
<span class="p_add">+	uint32_t oft_x1;</span>
<span class="p_add">+	uint32_t oft_y1;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t mask0;</span>
<span class="p_add">+	uint32_t mask1;</span>
<span class="p_add">+	uint32_t stretch_size_vrt;</span>
<span class="p_add">+	uint32_t ctrl;</span>
<span class="p_add">+	uint32_t tile_scram;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t sw_mask_en;</span>
<span class="p_add">+	uint32_t start_mask0;</span>
<span class="p_add">+	uint32_t end_mask0;</span>
<span class="p_add">+	uint32_t start_mask1;</span>
<span class="p_add">+	uint32_t end_mask1;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t data_addr;</span>
<span class="p_add">+	uint32_t stride0;</span>
<span class="p_add">+	uint32_t data1_addr;</span>
<span class="p_add">+	uint32_t stride1;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t stretch_stride;</span>
<span class="p_add">+	uint32_t data_num;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t ch_rd_shadow;</span>
<span class="p_add">+	uint32_t ch_ctl;</span>
<span class="p_add">+	uint32_t ch_secu_en;</span>
<span class="p_add">+	uint32_t ch_sw_end_req;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t dma_buf_ctrl;</span>
<span class="p_add">+	uint32_t dma_buf_size;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t rot_size;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t afbce_hreg_pic_blks;</span>
<span class="p_add">+	uint32_t afbce_hreg_format;</span>
<span class="p_add">+	uint32_t afbce_hreg_hdr_ptr_lo;</span>
<span class="p_add">+	uint32_t afbce_hreg_pld_ptr_lo;</span>
<span class="p_add">+	uint32_t afbce_picture_size;</span>
<span class="p_add">+	uint32_t afbce_ctl;</span>
<span class="p_add">+	uint32_t afbce_header_srtide;</span>
<span class="p_add">+	uint32_t afbce_payload_stride;</span>
<span class="p_add">+	uint32_t afbce_enc_os_cfg;</span>
<span class="p_add">+	uint32_t afbce_mem_ctrl;</span>
<span class="p_add">+	uint32_t afbce_qos_cfg;</span>
<span class="p_add">+	uint32_t afbce_threshold;</span>
<span class="p_add">+	uint32_t afbce_scramble_mode;</span>
<span class="p_add">+	uint32_t afbce_header_pointer_offset;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint8_t afbc_used;</span>
<span class="p_add">+	uint8_t rot_used;</span>
<span class="p_add">+} dss_wdma_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** CE</span>
<span class="p_add">+</span>
<span class="p_add">+#define CE_HIST_RESET	(0x00)</span>
<span class="p_add">+#define CE_HIST_CTL	(0x04)</span>
<span class="p_add">+#define CE_HIST_FRAME_CNT	(0x08)</span>
<span class="p_add">+#define CE_SIZE	(0x0C)</span>
<span class="p_add">+#define CE_NO_STAT_LINES	(0x10)</span>
<span class="p_add">+#define CE_BLACK_REGION_THRE	(0x14)</span>
<span class="p_add">+#define CE_WHITE_REGION_THRE	(0x18)</span>
<span class="p_add">+#define CE_LUT_SEL	(0x1C)</span>
<span class="p_add">+#define CE_LUT_ENABLE	(0x20)</span>
<span class="p_add">+#define CE_LUT_USING_IND	(0x54)</span>
<span class="p_add">+#define CE_STATE_IND	(0x58)</span>
<span class="p_add">+#define CE_MEM_CTRL	(0x5C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define CE_TOTALGRAY	(0x30)</span>
<span class="p_add">+#define CE_TOTALPIXL	(0x34)</span>
<span class="p_add">+#define CE_MEAN	(0x38)</span>
<span class="p_add">+#define CE_PEC0_3	(0x3C)</span>
<span class="p_add">+#define CE_PEC4_7	(0x40)</span>
<span class="p_add">+#define CE_PEC8	(0x44)</span>
<span class="p_add">+#define CE_BLACK_NUM	(0x48)</span>
<span class="p_add">+#define CE_WHITE_NUM	(0x4C)</span>
<span class="p_add">+#define CE_HIST_RPT_IND	(0x50)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_ce {</span>
<span class="p_add">+uint32_t hist_reset;</span>
<span class="p_add">+uint32_t hist_ctl;</span>
<span class="p_add">+uint32_t hist_frame_cnt;</span>
<span class="p_add">+uint32_t size;</span>
<span class="p_add">+uint32_t no_stat_lines;</span>
<span class="p_add">+uint32_t black_region_thre;</span>
<span class="p_add">+uint32_t white_region_thre;</span>
<span class="p_add">+uint32_t lut_sel;</span>
<span class="p_add">+uint32_t lut_enable;</span>
<span class="p_add">+uint32_t mem_ctrl;</span>
<span class="p_add">+</span>
<span class="p_add">+uint32_t totalgray;</span>
<span class="p_add">+uint32_t totalpixl;</span>
<span class="p_add">+uint32_t mean;</span>
<span class="p_add">+uint32_t pec0_3;</span>
<span class="p_add">+uint32_t pec4_7;</span>
<span class="p_add">+uint32_t pec8;</span>
<span class="p_add">+uint32_t black_num;</span>
<span class="p_add">+uint32_t white_num;</span>
<span class="p_add">+uint32_t hist_rpt_ind;</span>
<span class="p_add">+char __iomem *lut_base;</span>
<span class="p_add">+uint8_t *lut_table;</span>
<span class="p_add">+} dss_ce_t;*/</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MCTL  MUTEX0 1 2 3 4 5</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define MCTL_CTL_EN	(0x0000)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX	(0x0004)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_STATUS	(0x0008)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_ITF	(0x000C)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_DBUF	(0x0010)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_SCF	(0x0014)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_OV	(0x0018)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_WCH0	(0x0020)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_WCH1	(0x0024)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_WCH2	(0x0028)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH8	(0x002C)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH0	(0x0030)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH1	(0x0034)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH2	(0x0038)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH3	(0x003C)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH4	(0x0040)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH5	(0x0044)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH6	(0x0048)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_RCH7	(0x004C)</span>
<span class="p_add">+#define MCTL_CTL_TOP	(0x0050)</span>
<span class="p_add">+#define MCTL_CTL_FLUSH_STATUS	(0x0054)</span>
<span class="p_add">+#define MCTL_CTL_CLEAR	(0x0058)</span>
<span class="p_add">+#define MCTL_CTL_CACK_TOUT	(0x0060)</span>
<span class="p_add">+#define MCTL_CTL_MUTEX_TOUT	(0x0064)</span>
<span class="p_add">+#define MCTL_CTL_STATUS	(0x0068)</span>
<span class="p_add">+#define MCTL_CTL_INTEN	(0x006C)</span>
<span class="p_add">+#define MCTL_CTL_SW_ST	(0x0070)</span>
<span class="p_add">+#define MCTL_CTL_ST_SEL	(0x0074)</span>
<span class="p_add">+#define MCTL_CTL_END_SEL	(0x0078)</span>
<span class="p_add">+#define MCTL_CTL_CLK_SEL	(0x0080)</span>
<span class="p_add">+#define MCTL_CTL_CLK_EN	(0x0084)</span>
<span class="p_add">+#define MCTL_CTL_DBG	(0x00E0)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MCTL  SYS</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_CTL_SECU_CFG	(0x0000)</span>
<span class="p_add">+#define MCTL_PAY_SECU_FLUSH_EN  (0x0018)</span>
<span class="p_add">+#define MCTL_CTL_SECU_GATE0	(0x0080)</span>
<span class="p_add">+#define MCTL_CTL_SECU_GATE1	(0x0084)</span>
<span class="p_add">+#define MCTL_CTL_SECU_GATE2	(0x0088)</span>
<span class="p_add">+#define MCTL_DSI0_SECU_CFG_EN	(0x00A0)</span>
<span class="p_add">+#define MCTL_DSI1_SECU_CFG_EN	(0x00A4)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_RCH0_FLUSH_EN	(0x0100)</span>
<span class="p_add">+#define MCTL_RCH1_FLUSH_EN	(0x0104)</span>
<span class="p_add">+#define MCTL_RCH2_FLUSH_EN	(0x0108)</span>
<span class="p_add">+#define MCTL_RCH3_FLUSH_EN	(0x010C)</span>
<span class="p_add">+#define MCTL_RCH4_FLUSH_EN	(0x0110)</span>
<span class="p_add">+#define MCTL_RCH5_FLUSH_EN	(0x0114)</span>
<span class="p_add">+#define MCTL_RCH6_FLUSH_EN	(0x0118)</span>
<span class="p_add">+#define MCTL_RCH7_FLUSH_EN	(0x011C)</span>
<span class="p_add">+#define MCTL_WCH0_FLUSH_EN	(0x0120)</span>
<span class="p_add">+#define MCTL_WCH1_FLUSH_EN	(0x0124)</span>
<span class="p_add">+#define MCTL_OV0_FLUSH_EN	(0x0128)</span>
<span class="p_add">+#define MCTL_OV1_FLUSH_EN	(0x012C)</span>
<span class="p_add">+#define MCTL_OV2_FLUSH_EN	(0x0130)</span>
<span class="p_add">+#define MCTL_OV3_FLUSH_EN	(0x0134)</span>
<span class="p_add">+#define MCTL_RCH8_FLUSH_EN	(0x0138)</span>
<span class="p_add">+#define MCTL_WCH2_FLUSH_EN	(0x013C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_RCH0_OV_OEN	(0x0160)</span>
<span class="p_add">+#define MCTL_RCH1_OV_OEN	(0x0164)</span>
<span class="p_add">+#define MCTL_RCH2_OV_OEN	(0x0168)</span>
<span class="p_add">+#define MCTL_RCH3_OV_OEN	(0x016C)</span>
<span class="p_add">+#define MCTL_RCH4_OV_OEN	(0x0170)</span>
<span class="p_add">+#define MCTL_RCH5_OV_OEN	(0x0174)</span>
<span class="p_add">+#define MCTL_RCH6_OV_OEN	(0x0178)</span>
<span class="p_add">+#define MCTL_RCH7_OV_OEN	(0x017C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_RCH_OV0_SEL	(0x0180)</span>
<span class="p_add">+#define MCTL_RCH_OV1_SEL	(0x0184)</span>
<span class="p_add">+#define MCTL_RCH_OV2_SEL	(0x0188)</span>
<span class="p_add">+#define MCTL_RCH_OV3_SEL	(0x018C)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_WCH0_OV_IEN   (0x01A0)</span>
<span class="p_add">+#define MCTL_WCH1_OV_IEN   (0x01A4)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_WCH_OV2_SEL   (0x01A8)</span>
<span class="p_add">+#define MCTL_WCH_OV3_SEL   (0x01AC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_WB_ENC_SEL	(0x01B0)</span>
<span class="p_add">+#define MCTL_DSI_MUX_SEL	(0x01B4)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_RCH0_STARTY	(0x01C0)</span>
<span class="p_add">+#define MCTL_RCH1_STARTY	(0x01C4)</span>
<span class="p_add">+#define MCTL_RCH2_STARTY	(0x01C8)</span>
<span class="p_add">+#define MCTL_RCH3_STARTY	(0x01CC)</span>
<span class="p_add">+#define MCTL_RCH4_STARTY	(0x01D0)</span>
<span class="p_add">+#define MCTL_RCH5_STARTY	(0x01D4)</span>
<span class="p_add">+#define MCTL_RCH6_STARTY	(0x01D8)</span>
<span class="p_add">+#define MCTL_RCH7_STARTY	(0x01DC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_MCTL_CLK_SEL	(0x01F0)</span>
<span class="p_add">+#define MCTL_MCTL_CLK_EN	(0x01F4)</span>
<span class="p_add">+#define MCTL_MOD_CLK_SEL	(0x01F8)</span>
<span class="p_add">+#define MCTL_MOD_CLK_EN	(0x01FC)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_MOD0_DBG	(0x0200)</span>
<span class="p_add">+#define MCTL_MOD1_DBG	(0x0204)</span>
<span class="p_add">+#define MCTL_MOD2_DBG	(0x0208)</span>
<span class="p_add">+#define MCTL_MOD3_DBG	(0x020C)</span>
<span class="p_add">+#define MCTL_MOD4_DBG	(0x0210)</span>
<span class="p_add">+#define MCTL_MOD5_DBG	(0x0214)</span>
<span class="p_add">+#define MCTL_MOD6_DBG	(0x0218)</span>
<span class="p_add">+#define MCTL_MOD7_DBG	(0x021C)</span>
<span class="p_add">+#define MCTL_MOD8_DBG	(0x0220)</span>
<span class="p_add">+#define MCTL_MOD9_DBG	(0x0224)</span>
<span class="p_add">+#define MCTL_MOD10_DBG	(0x0228)</span>
<span class="p_add">+#define MCTL_MOD11_DBG	(0x022C)</span>
<span class="p_add">+#define MCTL_MOD12_DBG	(0x0230)</span>
<span class="p_add">+#define MCTL_MOD13_DBG	(0x0234)</span>
<span class="p_add">+#define MCTL_MOD14_DBG	(0x0238)</span>
<span class="p_add">+#define MCTL_MOD15_DBG	(0x023C)</span>
<span class="p_add">+#define MCTL_MOD16_DBG	(0x0240)</span>
<span class="p_add">+#define MCTL_MOD17_DBG	(0x0244)</span>
<span class="p_add">+#define MCTL_MOD18_DBG	(0x0248)</span>
<span class="p_add">+#define MCTL_MOD19_DBG	(0x024C)</span>
<span class="p_add">+#define MCTL_MOD20_DBG	(0x0250)</span>
<span class="p_add">+#define MCTL_MOD0_STATUS	(0x0280)</span>
<span class="p_add">+#define MCTL_MOD1_STATUS	(0x0284)</span>
<span class="p_add">+#define MCTL_MOD2_STATUS	(0x0288)</span>
<span class="p_add">+#define MCTL_MOD3_STATUS	(0x028C)</span>
<span class="p_add">+#define MCTL_MOD4_STATUS	(0x0290)</span>
<span class="p_add">+#define MCTL_MOD5_STATUS	(0x0294)</span>
<span class="p_add">+#define MCTL_MOD6_STATUS	(0x0298)</span>
<span class="p_add">+#define MCTL_MOD7_STATUS	(0x029C)</span>
<span class="p_add">+#define MCTL_MOD8_STATUS	(0x02A0)</span>
<span class="p_add">+#define MCTL_MOD9_STATUS	(0x02A4)</span>
<span class="p_add">+#define MCTL_MOD10_STATUS	(0x02A8)</span>
<span class="p_add">+#define MCTL_MOD11_STATUS	(0x02AC)</span>
<span class="p_add">+#define MCTL_MOD12_STATUS	(0x02B0)</span>
<span class="p_add">+#define MCTL_MOD13_STATUS	(0x02B4)</span>
<span class="p_add">+#define MCTL_MOD14_STATUS	(0x02B8)</span>
<span class="p_add">+#define MCTL_MOD15_STATUS	(0x02BC)</span>
<span class="p_add">+#define MCTL_MOD16_STATUS	(0x02C0)</span>
<span class="p_add">+#define MCTL_MOD17_STATUS	(0x02C4)</span>
<span class="p_add">+#define MCTL_MOD18_STATUS	(0x02C8)</span>
<span class="p_add">+#define MCTL_MOD19_STATUS	(0x02CC)</span>
<span class="p_add">+#define MCTL_MOD20_STATUS	(0x02D0)</span>
<span class="p_add">+#define MCTL_SW_DBG	(0x0300)</span>
<span class="p_add">+#define MCTL_SW0_STATUS0	(0x0304)</span>
<span class="p_add">+#define MCTL_SW0_STATUS1	(0x0308)</span>
<span class="p_add">+#define MCTL_SW0_STATUS2	(0x030C)</span>
<span class="p_add">+#define MCTL_SW0_STATUS3	(0x0310)</span>
<span class="p_add">+#define MCTL_SW0_STATUS4	(0x0314)</span>
<span class="p_add">+#define MCTL_SW0_STATUS5	(0x0318)</span>
<span class="p_add">+#define MCTL_SW0_STATUS6	(0x031C)</span>
<span class="p_add">+#define MCTL_SW0_STATUS7	(0x0320)</span>
<span class="p_add">+#define MCTL_SW1_STATUS	(0x0324)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define MCTL_MOD_DBG_CH_NUM (10)</span>
<span class="p_add">+#define MCTL_MOD_DBG_OV_NUM (4)</span>
<span class="p_add">+#define MCTL_MOD_DBG_DBUF_NUM (2)</span>
<span class="p_add">+#define MCTL_MOD_DBG_SCF_NUM (1)</span>
<span class="p_add">+#define MCTL_MOD_DBG_ITF_NUM (2)</span>
<span class="p_add">+#define MCTL_MOD_DBG_ADD_CH_NUM (2)</span>
<span class="p_add">+</span>
<span class="p_add">+enum dss_mctl_idx {</span>
<span class="p_add">+	DSS_MCTL0 = 0,</span>
<span class="p_add">+	DSS_MCTL1,</span>
<span class="p_add">+	DSS_MCTL2,</span>
<span class="p_add">+	DSS_MCTL3,</span>
<span class="p_add">+	DSS_MCTL4,</span>
<span class="p_add">+	DSS_MCTL5,</span>
<span class="p_add">+	DSS_MCTL_IDX_MAX,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mctl {</span>
<span class="p_add">+	uint32_t ctl_mutex_itf;</span>
<span class="p_add">+	uint32_t ctl_mutex_dbuf;</span>
<span class="p_add">+	uint32_t ctl_mutex_scf;</span>
<span class="p_add">+	uint32_t ctl_mutex_ov;</span>
<span class="p_add">+} dss_mctl_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mctl_ch_base {</span>
<span class="p_add">+	char __iomem *chn_mutex_base;</span>
<span class="p_add">+	char __iomem *chn_flush_en_base;</span>
<span class="p_add">+	char __iomem *chn_ov_en_base;</span>
<span class="p_add">+	char __iomem *chn_starty_base;</span>
<span class="p_add">+	char __iomem *chn_mod_dbg_base;</span>
<span class="p_add">+} dss_mctl_ch_base_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mctl_ch {</span>
<span class="p_add">+	uint32_t chn_mutex;</span>
<span class="p_add">+	uint32_t chn_flush_en;</span>
<span class="p_add">+	uint32_t chn_ov_oen;</span>
<span class="p_add">+	uint32_t chn_starty;</span>
<span class="p_add">+	uint32_t chn_mod_dbg;</span>
<span class="p_add">+} dss_mctl_ch_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mctl_sys {</span>
<span class="p_add">+	uint32_t ov_flush_en[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	uint32_t chn_ov_sel[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	uint32_t wchn_ov_sel[DSS_WCH_MAX];</span>
<span class="p_add">+	uint8_t ov_flush_en_used[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	uint8_t chn_ov_sel_used[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	uint8_t wch_ov_sel_used[DSS_WCH_MAX];</span>
<span class="p_add">+} dss_mctl_sys_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** OVL</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define OVL_SIZE	(0x0000)</span>
<span class="p_add">+#define OVL_BG_COLOR	(0x4)</span>
<span class="p_add">+#define OVL_DST_STARTPOS	(0x8)</span>
<span class="p_add">+#define OVL_DST_ENDPOS	(0xC)</span>
<span class="p_add">+#define OVL_GCFG	(0x10)</span>
<span class="p_add">+#define OVL_LAYER0_POS	(0x14)</span>
<span class="p_add">+#define OVL_LAYER0_SIZE	(0x18)</span>
<span class="p_add">+#define OVL_LAYER0_SRCLOKEY	(0x1C)</span>
<span class="p_add">+#define OVL_LAYER0_SRCHIKEY	(0x20)</span>
<span class="p_add">+#define OVL_LAYER0_DSTLOKEY	(0x24)</span>
<span class="p_add">+#define OVL_LAYER0_DSTHIKEY	(0x28)</span>
<span class="p_add">+#define OVL_LAYER0_PATTERN	(0x2C)</span>
<span class="p_add">+#define OVL_LAYER0_ALPHA	(0x30)</span>
<span class="p_add">+#define OVL_LAYER0_CFG	(0x34)</span>
<span class="p_add">+#define OVL_LAYER0_INFO_ALPHA	(0x40)</span>
<span class="p_add">+#define OVL_LAYER0_INFO_SRCCOLOR	(0x44)</span>
<span class="p_add">+#define OVL_LAYER1_POS	(0x50)</span>
<span class="p_add">+#define OVL_LAYER1_SIZE	(0x54)</span>
<span class="p_add">+#define OVL_LAYER1_SRCLOKEY	(0x58)</span>
<span class="p_add">+#define OVL_LAYER1_SRCHIKEY	(0x5C)</span>
<span class="p_add">+#define OVL_LAYER1_DSTLOKEY	(0x60)</span>
<span class="p_add">+#define OVL_LAYER1_DSTHIKEY	(0x64)</span>
<span class="p_add">+#define OVL_LAYER1_PATTERN	(0x68)</span>
<span class="p_add">+#define OVL_LAYER1_ALPHA	(0x6C)</span>
<span class="p_add">+#define OVL_LAYER1_CFG	(0x70)</span>
<span class="p_add">+#define OVL_LAYER1_INFO_ALPHA	(0x7C)</span>
<span class="p_add">+#define OVL_LAYER1_INFO_SRCCOLOR	(0x80)</span>
<span class="p_add">+#define OVL_LAYER2_POS	(0x8C)</span>
<span class="p_add">+#define OVL_LAYER2_SIZE	(0x90)</span>
<span class="p_add">+#define OVL_LAYER2_SRCLOKEY	(0x94)</span>
<span class="p_add">+#define OVL_LAYER2_SRCHIKEY	(0x98)</span>
<span class="p_add">+#define OVL_LAYER2_DSTLOKEY	(0x9C)</span>
<span class="p_add">+#define OVL_LAYER2_DSTHIKEY	(0xA0)</span>
<span class="p_add">+#define OVL_LAYER2_PATTERN	(0xA4)</span>
<span class="p_add">+#define OVL_LAYER2_ALPHA	(0xA8)</span>
<span class="p_add">+#define OVL_LAYER2_CFG	(0xAC)</span>
<span class="p_add">+#define OVL_LAYER2_INFO_ALPHA	(0xB8)</span>
<span class="p_add">+#define OVL_LAYER2_INFO_SRCCOLOR	(0xBC)</span>
<span class="p_add">+#define OVL_LAYER3_POS	(0xC8)</span>
<span class="p_add">+#define OVL_LAYER3_SIZE	(0xCC)</span>
<span class="p_add">+#define OVL_LAYER3_SRCLOKEY	(0xD0)</span>
<span class="p_add">+#define OVL_LAYER3_SRCHIKEY	(0xD4)</span>
<span class="p_add">+#define OVL_LAYER3_DSTLOKEY	(0xD8)</span>
<span class="p_add">+#define OVL_LAYER3_DSTHIKEY	(0xDC)</span>
<span class="p_add">+#define OVL_LAYER3_PATTERN	(0xE0)</span>
<span class="p_add">+#define OVL_LAYER3_ALPHA	(0xE4)</span>
<span class="p_add">+#define OVL_LAYER3_CFG	(0xE8)</span>
<span class="p_add">+#define OVL_LAYER3_INFO_ALPHA	(0xF4)</span>
<span class="p_add">+#define OVL_LAYER3_INFO_SRCCOLOR	(0xF8)</span>
<span class="p_add">+#define OVL_LAYER4_POS	(0x104)</span>
<span class="p_add">+#define OVL_LAYER4_SIZE	(0x108)</span>
<span class="p_add">+#define OVL_LAYER4_SRCLOKEY	(0x10C)</span>
<span class="p_add">+#define OVL_LAYER4_SRCHIKEY	(0x110)</span>
<span class="p_add">+#define OVL_LAYER4_DSTLOKEY	(0x114)</span>
<span class="p_add">+#define OVL_LAYER4_DSTHIKEY	(0x118)</span>
<span class="p_add">+#define OVL_LAYER4_PATTERN	(0x11C)</span>
<span class="p_add">+#define OVL_LAYER4_ALPHA	(0x120)</span>
<span class="p_add">+#define OVL_LAYER4_CFG	(0x124)</span>
<span class="p_add">+#define OVL_LAYER4_INFO_ALPHA	(0x130)</span>
<span class="p_add">+#define OVL_LAYER4_INFO_SRCCOLOR	(0x134)</span>
<span class="p_add">+#define OVL_LAYER5_POS	(0x140)</span>
<span class="p_add">+#define OVL_LAYER5_SIZE	(0x144)</span>
<span class="p_add">+#define OVL_LAYER5_SRCLOKEY	(0x148)</span>
<span class="p_add">+#define OVL_LAYER5_SRCHIKEY	(0x14C)</span>
<span class="p_add">+#define OVL_LAYER5_DSTLOKEY	(0x150)</span>
<span class="p_add">+#define OVL_LAYER5_DSTHIKEY	(0x154)</span>
<span class="p_add">+#define OVL_LAYER5_PATTERN	(0x158)</span>
<span class="p_add">+#define OVL_LAYER5_ALPHA	(0x15C)</span>
<span class="p_add">+#define OVL_LAYER5_CFG	(0x160)</span>
<span class="p_add">+#define OVL_LAYER5_INFO_ALPHA	(0x16C)</span>
<span class="p_add">+#define OVL_LAYER5_INFO_SRCCOLOR	(0x170)</span>
<span class="p_add">+#define OVL_LAYER6_POS	(0x14)</span>
<span class="p_add">+#define OVL_LAYER6_SIZE	(0x18)</span>
<span class="p_add">+#define OVL_LAYER6_SRCLOKEY	(0x1C)</span>
<span class="p_add">+#define OVL_LAYER6_SRCHIKEY	(0x20)</span>
<span class="p_add">+#define OVL_LAYER6_DSTLOKEY	(0x24)</span>
<span class="p_add">+#define OVL_LAYER6_DSTHIKEY	(0x28)</span>
<span class="p_add">+#define OVL_LAYER6_PATTERN	(0x2C)</span>
<span class="p_add">+#define OVL_LAYER6_ALPHA	(0x30)</span>
<span class="p_add">+#define OVL_LAYER6_CFG	(0x34)</span>
<span class="p_add">+#define OVL_LAYER6_INFO_ALPHA	(0x40)</span>
<span class="p_add">+#define OVL_LAYER6_INFO_SRCCOLOR	(0x44)</span>
<span class="p_add">+#define OVL_LAYER7_POS	(0x50)</span>
<span class="p_add">+#define OVL_LAYER7_SIZE	(0x54)</span>
<span class="p_add">+#define OVL_LAYER7_SRCLOKEY	(0x58)</span>
<span class="p_add">+#define OVL_LAYER7_SRCHIKEY	(0x5C)</span>
<span class="p_add">+#define OVL_LAYER7_DSTLOKEY	(0x60)</span>
<span class="p_add">+#define OVL_LAYER7_DSTHIKEY	(0x64)</span>
<span class="p_add">+#define OVL_LAYER7_PATTERN	(0x68)</span>
<span class="p_add">+#define OVL_LAYER7_ALPHA	(0x6C)</span>
<span class="p_add">+#define OVL_LAYER7_CFG	(0x70)</span>
<span class="p_add">+#define OVL_LAYER7_INFO_ALPHA	(0x7C)</span>
<span class="p_add">+#define OVL_LAYER7_INFO_SRCCOLOR	(0x80)</span>
<span class="p_add">+#define OVL_LAYER0_ST_INFO	(0x48)</span>
<span class="p_add">+#define OVL_LAYER1_ST_INFO	(0x84)</span>
<span class="p_add">+#define OVL_LAYER2_ST_INFO	(0xC0)</span>
<span class="p_add">+#define OVL_LAYER3_ST_INFO	(0xFC)</span>
<span class="p_add">+#define OVL_LAYER4_ST_INFO	(0x138)</span>
<span class="p_add">+#define OVL_LAYER5_ST_INFO	(0x174)</span>
<span class="p_add">+#define OVL_LAYER6_ST_INFO	(0x48)</span>
<span class="p_add">+#define OVL_LAYER7_ST_INFO	(0x84)</span>
<span class="p_add">+#define OVL_LAYER0_IST_INFO	(0x4C)</span>
<span class="p_add">+#define OVL_LAYER1_IST_INFO	(0x88)</span>
<span class="p_add">+#define OVL_LAYER2_IST_INFO	(0xC4)</span>
<span class="p_add">+#define OVL_LAYER3_IST_INFO	(0x100)</span>
<span class="p_add">+#define OVL_LAYER4_IST_INFO	(0x13C)</span>
<span class="p_add">+#define OVL_LAYER5_IST_INFO	(0x178)</span>
<span class="p_add">+#define OVL_LAYER6_IST_INFO	(0x4C)</span>
<span class="p_add">+#define OVL_LAYER7_IST_INFO	(0x88)</span>
<span class="p_add">+#define OVL_LAYER0_PSPOS	(0x38)</span>
<span class="p_add">+#define OVL_LAYER0_PEPOS	(0x3C)</span>
<span class="p_add">+#define OVL_LAYER1_PSPOS	(0x74)</span>
<span class="p_add">+#define OVL_LAYER1_PEPOS	(0x78)</span>
<span class="p_add">+#define OVL_LAYER2_PSPOS	(0xB0)</span>
<span class="p_add">+#define OVL_LAYER2_PEPOS	(0xB4)</span>
<span class="p_add">+#define OVL_LAYER3_PSPOS	(0xEC)</span>
<span class="p_add">+#define OVL_LAYER3_PEPOS	(0xF0)</span>
<span class="p_add">+#define OVL_LAYER4_PSPOS	(0x128)</span>
<span class="p_add">+#define OVL_LAYER4_PEPOS	(0x12C)</span>
<span class="p_add">+#define OVL_LAYER5_PSPOS	(0x164)</span>
<span class="p_add">+#define OVL_LAYER5_PEPOS	(0x168)</span>
<span class="p_add">+#define OVL_LAYER6_PSPOS	(0x38)</span>
<span class="p_add">+#define OVL_LAYER6_PEPOS	(0x3C)</span>
<span class="p_add">+#define OVL_LAYER7_PSPOS	(0x74)</span>
<span class="p_add">+#define OVL_LAYER7_PEPOS	(0x78)</span>
<span class="p_add">+</span>
<span class="p_add">+#define OVL6_BASE_ST_INFO	(0x17C)</span>
<span class="p_add">+#define OVL6_BASE_IST_INFO	(0x180)</span>
<span class="p_add">+#define OVL6_GATE_CTRL	(0x184)</span>
<span class="p_add">+#define OVL6_RD_SHADOW_SEL	(0x188)</span>
<span class="p_add">+#define OVL6_OV_CLK_SEL	(0x18C)</span>
<span class="p_add">+#define OVL6_OV_CLK_EN	(0x190)</span>
<span class="p_add">+#define OVL6_BLOCK_SIZE	(0x1A0)</span>
<span class="p_add">+#define OVL6_BLOCK_DBG	(0x1A4)</span>
<span class="p_add">+#define OVL6_REG_DEFAULT (0x1A8)</span>
<span class="p_add">+</span>
<span class="p_add">+#define OVL2_BASE_ST_INFO	(0x8C)</span>
<span class="p_add">+#define OVL2_BASE_IST_INFO	(0x90)</span>
<span class="p_add">+#define OVL2_GATE_CTRL	(0x94)</span>
<span class="p_add">+#define OVL2_OV_RD_SHADOW_SEL	(0x98)</span>
<span class="p_add">+#define OVL2_OV_CLK_SEL	(0x9C)</span>
<span class="p_add">+#define OVL2_OV_CLK_EN	(0xA0)</span>
<span class="p_add">+#define OVL2_BLOCK_SIZE	(0xB0)</span>
<span class="p_add">+#define OVL2_BLOCK_DBG	(0xB4)</span>
<span class="p_add">+#define OVL2_REG_DEFAULT	(0xB8)</span>
<span class="p_add">+</span>
<span class="p_add">+/* LAYER0_CFG */</span>
<span class="p_add">+#define BIT_OVL_LAYER_SRC_CFG	BIT(8)</span>
<span class="p_add">+#define BIT_OVL_LAYER_ENABLE	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+/* LAYER0_INFO_ALPHA */</span>
<span class="p_add">+#define BIT_OVL_LAYER_SRCALPHA_FLAG	BIT(3)</span>
<span class="p_add">+#define BIT_OVL_LAYER_DSTALPHA_FLAG	BIT(2)</span>
<span class="p_add">+</span>
<span class="p_add">+/* LAYER0_INFO_SRCCOLOR */</span>
<span class="p_add">+#define BIT_OVL_LAYER_SRCCOLOR_FLAG	BIT(0)</span>
<span class="p_add">+</span>
<span class="p_add">+#define OVL_6LAYER_NUM		(6)</span>
<span class="p_add">+#define OVL_2LAYER_NUM		(2)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_ovl_layer {</span>
<span class="p_add">+	uint32_t layer_pos;</span>
<span class="p_add">+	uint32_t layer_size;</span>
<span class="p_add">+	uint32_t layer_pattern;</span>
<span class="p_add">+	uint32_t layer_alpha;</span>
<span class="p_add">+	uint32_t layer_cfg;</span>
<span class="p_add">+</span>
<span class="p_add">+} dss_ovl_layer_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_ovl_layer_pos {</span>
<span class="p_add">+	uint32_t layer_pspos;</span>
<span class="p_add">+	uint32_t layer_pepos;</span>
<span class="p_add">+</span>
<span class="p_add">+} dss_ovl_layer_pos_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_ovl {</span>
<span class="p_add">+	uint32_t ovl_size;</span>
<span class="p_add">+	uint32_t ovl_bg_color;</span>
<span class="p_add">+	uint32_t ovl_dst_startpos;</span>
<span class="p_add">+	uint32_t ovl_dst_endpos;</span>
<span class="p_add">+	uint32_t ovl_gcfg;</span>
<span class="p_add">+	uint32_t ovl_block_size;</span>
<span class="p_add">+	dss_ovl_layer_t ovl_layer[OVL_6LAYER_NUM];</span>
<span class="p_add">+	dss_ovl_layer_pos_t ovl_layer_pos[OVL_6LAYER_NUM];</span>
<span class="p_add">+	uint8_t ovl_layer_used[OVL_6LAYER_NUM];</span>
<span class="p_add">+} dss_ovl_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_ovl_alpha {</span>
<span class="p_add">+	uint32_t src_amode;</span>
<span class="p_add">+	uint32_t src_gmode;</span>
<span class="p_add">+	uint32_t alpha_offsrc;</span>
<span class="p_add">+	uint32_t src_lmode;</span>
<span class="p_add">+	uint32_t src_pmode;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t alpha_smode;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t dst_amode;</span>
<span class="p_add">+	uint32_t dst_gmode;</span>
<span class="p_add">+	uint32_t alpha_offdst;</span>
<span class="p_add">+	uint32_t dst_pmode;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t fix_mode;</span>
<span class="p_add">+} dss_ovl_alpha_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** DBUF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DBUF_FRM_SIZE	(0x0000)</span>
<span class="p_add">+#define DBUF_FRM_HSIZE	(0x0004)</span>
<span class="p_add">+#define DBUF_SRAM_VALID_NUM	(0x0008)</span>
<span class="p_add">+#define DBUF_WBE_EN	(0x000C)</span>
<span class="p_add">+#define DBUF_THD_FILL_LEV0	(0x0010)</span>
<span class="p_add">+#define DBUF_DFS_FILL_LEV1	(0x0014)</span>
<span class="p_add">+#define DBUF_THD_RQOS	(0x0018)</span>
<span class="p_add">+#define DBUF_THD_WQOS	(0x001C)</span>
<span class="p_add">+#define DBUF_THD_CG	(0x0020)</span>
<span class="p_add">+#define DBUF_THD_OTHER	(0x0024)</span>
<span class="p_add">+#define DBUF_FILL_LEV0_CNT	(0x0028)</span>
<span class="p_add">+#define DBUF_FILL_LEV1_CNT	(0x002C)</span>
<span class="p_add">+#define DBUF_FILL_LEV2_CNT	(0x0030)</span>
<span class="p_add">+#define DBUF_FILL_LEV3_CNT	(0x0034)</span>
<span class="p_add">+#define DBUF_FILL_LEV4_CNT	(0x0038)</span>
<span class="p_add">+#define DBUF_ONLINE_FILL_LEVEL	(0x003C)</span>
<span class="p_add">+#define DBUF_WB_FILL_LEVEL	(0x0040)</span>
<span class="p_add">+#define DBUF_DFS_STATUS	(0x0044)</span>
<span class="p_add">+#define DBUF_THD_FLUX_REQ_BEF	(0x0048)</span>
<span class="p_add">+#define DBUF_DFS_LP_CTRL	(0x004C)</span>
<span class="p_add">+#define DBUF_RD_SHADOW_SEL	(0x0050)</span>
<span class="p_add">+#define DBUF_MEM_CTRL	(0x0054)</span>
<span class="p_add">+#define DBUF_PM_CTRL	(0x0058)</span>
<span class="p_add">+#define DBUF_CLK_SEL	(0x005C)</span>
<span class="p_add">+#define DBUF_CLK_EN  	(0x0060)</span>
<span class="p_add">+#define DBUF_THD_FLUX_REQ_AFT (0x0064)</span>
<span class="p_add">+#define DBUF_THD_DFS_OK (0x0068)</span>
<span class="p_add">+#define DBUF_FLUX_REQ_CTRL (0x006C)</span>
<span class="p_add">+#define DBUF_REG_DEFAULT  (0x00A4)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** SBL</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define SBL_REG_FRMT_MODE                                (0x0000)</span>
<span class="p_add">+#define SBL_REG_FRMT_DBUF_CTRL                           (0x0008)</span>
<span class="p_add">+#define SBL_REG_FRMT_FRAME_WIDTH_7_TO_0                  (0x0010)</span>
<span class="p_add">+#define SBL_REG_FRMT_FRAME_WIDTH_15_TO_8                 (0x0014)</span>
<span class="p_add">+#define SBL_REG_FRMT_FRAME_HEIGHT_7_TO_0                 (0x0018)</span>
<span class="p_add">+#define SBL_REG_FRMT_FRAME_HEIGHT_15_TO_8                (0x001c)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_HOR_START_7_TO_0                (0x0080)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_HOR_START_15_TO_8               (0x0084)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_HOR_END_7_TO_0                  (0x0088)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_HOR_END_15_TO_8                 (0x008c)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_VER_START_7_TO_0                (0x0090)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_VER_START_15_TO_8               (0x0094)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_VER_END_7_TO_0                  (0x0098)</span>
<span class="p_add">+#define SBL_REG_FRMT_ROI_VER_END_15_TO_8                 (0x009c)</span>
<span class="p_add">+#define SBL_REG_CALC_CONTROL_0                           (0x0400)</span>
<span class="p_add">+#define SBL_REG_CALC_CONTROL_1                           (0x0404)</span>
<span class="p_add">+#define SBL_REG_CALC_AMBIENT_LIGHT_7_TO_0                (0x0408)</span>
<span class="p_add">+#define SBL_REG_CALC_AMBIENT_LIGHT_15_TO_8               (0x040c)</span>
<span class="p_add">+#define SBL_REG_CALC_BACKLIGHT_7_TO_0                    (0x0410)</span>
<span class="p_add">+#define SBL_REG_CALC_BACKLIGHT_15_TO_8                   (0x0414)</span>
<span class="p_add">+#define SBL_REG_CALC_ASSERTIVENESS                       (0x0418)</span>
<span class="p_add">+#define SBL_REG_CALC_TF_CONTROL                          (0x041c)</span>
<span class="p_add">+#define SBL_REG_CALC_STRENGTH_MANUAL_7_TO_0              (0x0420)</span>
<span class="p_add">+#define SBL_REG_CALC_STRENGTH_MANUAL_9_TO_8              (0x0424)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_MANUAL_7_TO_0               (0x0428)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_MANUAL_11_TO_8              (0x042c)</span>
<span class="p_add">+#define SBL_REG_CALC_ROI_FACTOR_IN_7_TO_0                (0x0430)</span>
<span class="p_add">+#define SBL_REG_CALC_ROI_FACTOR_IN_15_TO_8               (0x0434)</span>
<span class="p_add">+#define SBL_REG_CALC_ROI_FACTOR_OUT_7_TO_0               (0x0438)</span>
<span class="p_add">+#define SBL_REG_CALC_ROI_FACTOR_OUT_15_TO_8              (0x043c)</span>
<span class="p_add">+#define SBL_REG_CALC_PSR_DELTA_CHANGE_7_TO_0             (0x0448)</span>
<span class="p_add">+#define SBL_REG_CALC_PSR_DELTA_CHANGE_15_TO_8            (0x044c)</span>
<span class="p_add">+#define SBL_REG_CALC_PSR_DELTA_SETTLE_7_TO_0             (0x0450)</span>
<span class="p_add">+#define SBL_REG_CALC_PSR_DELTA_SETTLE_15_TO_8            (0x0454)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_SCALE_7_TO_0                     (0x0458)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_SCALE_15_TO_8                    (0x045c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_SAMPLE                   (0x0460)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_WAIT_7_TO_0              (0x0468)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_WAIT_11_TO_8             (0x046c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_WAITUP_7_TO_0            (0x0470)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_WAITUP_11_TO_8           (0x0474)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_SIZE_7_TO_0              (0x0478)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_STEP_SIZE_11_TO_8             (0x047c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_LIMIT_7_TO_0                  (0x0480)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_LIMIT_15_TO_8                 (0x0484)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_ALPHA                         (0x0488)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_ALPHA_UP                      (0x048c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_NOISE_7_TO_0                  (0x0490)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_NOISE_15_TO_8                 (0x0494)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_M_INC_7_TO_0                  (0x0498)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_M_INC_15_TO_8                 (0x049c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_K_INC_7_TO_0                  (0x04a0)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_K_INC_15_TO_8                 (0x04a4)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_M_DEC_7_TO_0                  (0x04a8)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_M_DEC_15_TO_8                 (0x04ac)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_K_DEC_7_TO_0                  (0x04b0)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_K_DEC_15_TO_8                 (0x04b4)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_TF_AGGRESSIVENESS                (0x04b8)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_A_7_TO_0              (0x04c0)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_A_15_TO_8             (0x04c4)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_B_7_TO_0              (0x04c8)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_B_15_TO_8             (0x04cc)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_C_7_TO_0              (0x04d0)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_RTF_FILTER_C_15_TO_8             (0x04d4)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_AL_KNEE1_7_TO_0                  (0x04d8)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_AL_KNEE1_15_TO_8                 (0x04dc)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_AL_KNEE2_7_TO_0                  (0x04e0)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_AL_KNEE2_15_TO_8                 (0x04e4)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_BL_KNEE1_7_TO_0                  (0x04e8)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_BL_KNEE1_15_TO_8                 (0x04ec)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_BL_KNEE2_7_TO_0                  (0x04f0)</span>
<span class="p_add">+#define SBL_REG_CALC_AB_BL_KNEE2_15_TO_8                 (0x04f4)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_PANEL_MAX_7_TO_0                 (0x04f8)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_PANEL_MAX_15_TO_8                (0x04fc)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_OFFSET_7_TO_0                    (0x0500)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_OFFSET_15_TO_8                   (0x0504)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_MIN_7_TO_0                       (0x0508)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_MIN_15_TO_8                      (0x050c)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_ATTEN_ALPHA_7_TO_0               (0x0510)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_ATTEN_ALPHA_9_TO_8               (0x0514)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_DEPTH_7_TO_0                (0x0518)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_DEPTH_15_TO_8               (0x051c)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_STEP_7_TO_0                 (0x0520)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_STEP_15_TO_8                (0x0524)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_ASYM                        (0x0528)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_DEPTH_LOG_7_TO_0            (0x0530)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_DEPTH_LOG_15_TO_8           (0x0534)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_STEP_LOG_7_TO_0             (0x0538)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_STEP_LOG_15_TO_8            (0x053c)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC1_TF_ASYM_LOG                    (0x0540)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_DEPTH_7_TO_0                (0x0548)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_DEPTH_15_TO_8               (0x054c)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_STEP_7_TO_0                 (0x0550)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_STEP_15_TO_8                (0x0554)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_ASYM                        (0x0558)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_DEPTH_LOG_7_TO_0            (0x0560)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_DEPTH_LOG_15_TO_8           (0x0564)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_STEP_LOG_7_TO_0             (0x0568)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_STEP_LOG_15_TO_8            (0x056c)</span>
<span class="p_add">+#define SBL_REG_CALC_SBC2_TF_ASYM_LOG                    (0x0570)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_A_7_TO_0                (0x05b8)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_A_15_TO_8               (0x05bc)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_B_7_TO_0                (0x05c0)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_B_15_TO_8               (0x05c4)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_C_7_TO_0                (0x05c8)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_C_15_TO_8               (0x05cc)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_D_7_TO_0                (0x05d0)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_D_15_TO_8               (0x05d4)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_E_7_TO_0                (0x05d8)</span>
<span class="p_add">+#define SBL_REG_CALC_CALIBRATION_E_15_TO_8               (0x05dc)</span>
<span class="p_add">+#define SBL_REG_CALC_BACKLIGHT_SCALE_7_TO_0              (0x05e0)</span>
<span class="p_add">+#define SBL_REG_CALC_BACKLIGHT_SCALE_15_TO_8             (0x05e4)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_TF_DEPTH_7_TO_0             (0x05e8)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_TF_DEPTH_15_TO_8            (0x05ec)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_TF_STEP_7_TO_0              (0x05f0)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_TF_STEP_11_TO_8             (0x05f4)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_AA_TF_ASYM                     (0x05f8)</span>
<span class="p_add">+#define SBL_REG_CALC_STRENGTH_LIMIT_7_TO_0               (0x0600)</span>
<span class="p_add">+#define SBL_REG_CALC_STRENGTH_LIMIT_9_TO_8               (0x0604)</span>
<span class="p_add">+#define SBL_REG_CALC_ICUT_HIST_MIN                       (0x0608)</span>
<span class="p_add">+#define SBL_REG_CALC_ICUT_BL_MIN_7_TO_0                  (0x0610)</span>
<span class="p_add">+#define SBL_REG_CALC_ICUT_BL_MIN_15_TO_8                 (0x0614)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_CA_TF_DEPTH_7_TO_0             (0x0618)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_CA_TF_DEPTH_15_TO_8            (0x061c)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_CA_TF_STEP_7_TO_0              (0x0620)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_CA_TF_STEP_11_TO_8             (0x0624)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_CA_TF_ASYM                     (0x0628)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_MAX_7_TO_0                     (0x0630)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_MAX_11_TO_8                    (0x0634)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_MIDDLE_7_TO_0                  (0x0638)</span>
<span class="p_add">+#define SBL_REG_CALC_GAIN_MIDDLE_11_TO_8                 (0x063c)</span>
<span class="p_add">+#define SBL_REG_CALC_BRIGHTPR                            (0x0640)</span>
<span class="p_add">+#define SBL_REG_CALC_BPR_CORRECT                         (0x0648)</span>
<span class="p_add">+#define SBL_CALC_BACKLIGHT_OUT_7_TO_0                    (0x0650)</span>
<span class="p_add">+#define SBL_CALC_BACKLIGHT_OUT_15_TO_8                   (0x0654)</span>
<span class="p_add">+#define SBL_CALC_STRENGTH_INROI_OUT_7_TO_0               (0x0658)</span>
<span class="p_add">+#define SBL_CALC_STRENGTH_INROI_OUT_9_TO_8               (0x065c)</span>
<span class="p_add">+#define SBL_CALC_STRENGTH_OUTROI_OUT_7_TO_0              (0x0660)</span>
<span class="p_add">+#define SBL_CALC_STRENGTH_OUTROI_OUT_9_TO_8              (0x0664)</span>
<span class="p_add">+#define SBL_CALC_DARKENH_OUT_7_TO_0                      (0x0668)</span>
<span class="p_add">+#define SBL_CALC_DARKENH_OUT_15_TO_8                     (0x066c)</span>
<span class="p_add">+#define SBL_CALC_BRIGHTPR_OUT                            (0x0670)</span>
<span class="p_add">+#define SBL_CALC_STAT_OUT_7_TO_0                         (0x0678)</span>
<span class="p_add">+#define SBL_CALC_STAT_OUT_15_TO_8                        (0x067c)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_DELTA_SETTLE_7_TO_0              (0x0680)</span>
<span class="p_add">+#define SBL_REG_CALC_AL_DELTA_SETTLE_15_TO_8             (0x0684)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_DELTA_SETTLE_7_TO_0              (0x0688)</span>
<span class="p_add">+#define SBL_REG_CALC_BL_DELTA_SETTLE_15_TO_8             (0x068c)</span>
<span class="p_add">+#define SBL_CALC_AL_CALIB_LUT_ADDR_I                     (0x06c0)</span>
<span class="p_add">+#define SBL_CALC_AL_CALIB_LUT_DATA_W_7_TO_0              (0x06d0)</span>
<span class="p_add">+#define SBL_CALC_AL_CALIB_LUT_DATA_W_15_TO_8             (0x06d4)</span>
<span class="p_add">+#define SBL_CALC_BL_IN_LUT_ADDR_I                        (0x0700)</span>
<span class="p_add">+#define SBL_CALC_BL_IN_LUT_DATA_W_7_TO_0                 (0x0710)</span>
<span class="p_add">+#define SBL_CALC_BL_IN_LUT_DATA_W_15_TO_8                (0x0714)</span>
<span class="p_add">+#define SBL_CALC_BL_OUT_LUT_ADDR_I                       (0x0740)</span>
<span class="p_add">+#define SBL_CALC_BL_OUT_LUT_DATA_W_7_TO_0                (0x0750)</span>
<span class="p_add">+#define SBL_CALC_BL_OUT_LUT_DATA_W_15_TO_8               (0x0754)</span>
<span class="p_add">+#define SBL_CALC_BL_ATTEN_LUT_ADDR_I                     (0x0780)</span>
<span class="p_add">+#define SBL_CALC_BL_ATTEN_LUT_DATA_W_7_TO_0              (0x0790)</span>
<span class="p_add">+#define SBL_CALC_BL_ATTEN_LUT_DATA_W_15_TO_8             (0x0794)</span>
<span class="p_add">+#define SBL_CALC_BL_AUTO_LUT_ADDR_I                      (0x07c0)</span>
<span class="p_add">+#define SBL_CALC_BL_AUTO_LUT_DATA_W_7_TO_0               (0x07d0)</span>
<span class="p_add">+#define SBL_CALC_BL_AUTO_LUT_DATA_W_15_TO_8              (0x07d4)</span>
<span class="p_add">+#define SBL_CALC_AL_CHANGE_LUT_ADDR_I                    (0x0800)</span>
<span class="p_add">+#define SBL_CALC_AL_CHANGE_LUT_DATA_W_7_TO_0             (0x0810)</span>
<span class="p_add">+#define SBL_CALC_AL_CHANGE_LUT_DATA_W_15_TO_8            (0x0814)</span>
<span class="p_add">+#define SBL_REG_CABC_INTENSITY_7_TO_0                    (0x0900)</span>
<span class="p_add">+#define SBL_REG_CABC_INTENSITY_11_TO_8                   (0x0904)</span>
<span class="p_add">+#define SBL_REG_CABC_ICUT_SELECT                         (0x0908)</span>
<span class="p_add">+#define SBL_REG_CABC_ICUT_MANUAL                         (0x090c)</span>
<span class="p_add">+#define SBL_CABC_ICUT_OUT                                (0x0910)</span>
<span class="p_add">+#define SBL_REG_CORE1_VC_CONTROL_0                       (0x0c00)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_CONTROL_0                     (0x0c40)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_CONTROL_1                     (0x0c44)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_VARIANCE                      (0x0c4c)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_SLOPE_MAX                     (0x0c50)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_SLOPE_MIN                     (0x0c54)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_BLACK_LEVEL_7_TO_0            (0x0c58)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_BLACK_LEVEL_9_TO_8            (0x0c5c)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_WHITE_LEVEL_7_TO_0            (0x0c60)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_WHITE_LEVEL_9_TO_8            (0x0c64)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_LIMIT_AMPL                    (0x0c68)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_DITHER                        (0x0c6c)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_STRENGTH_INROI_7_TO_0         (0x0c70)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_STRENGTH_INROI_9_TO_8         (0x0c74)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_STRENGTH_OUTROI_7_TO_0        (0x0c78)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_STRENGTH_OUTROI_9_TO_8        (0x0c7c)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_ASYMMETRY_LUT_ADDR_I              (0x0c80)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_ASYMMETRY_LUT_DATA_W_7_TO_0       (0x0c84)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_ASYMMETRY_LUT_DATA_W_11_TO_8      (0x0c88)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_COLOR_LUT_ADDR_I                  (0x0cc0)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_COLOR_LUT_DATA_W_7_TO_0           (0x0cc4)</span>
<span class="p_add">+#define SBL_CORE1_IRDX_COLOR_LUT_DATA_W_11_TO_8          (0x0cc8)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_FILTER_CTRL                   (0x0d00)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_SVARIANCE                     (0x0d04)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_BRIGHTPR                      (0x0d08)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_CONTRAST                      (0x0d0c)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_DARKENH_7_TO_0                (0x0d10)</span>
<span class="p_add">+#define SBL_REG_CORE1_IRDX_DARKENH_15_TO_8               (0x0d14)</span>
<span class="p_add">+#define SBL_REG_CORE1_DTHR_CONTROL                       (0x0dc0)</span>
<span class="p_add">+#define SBL_REG_CORE1_LOGO_TOP                           (0x0dd0)</span>
<span class="p_add">+#define SBL_REG_CORE1_LOGO_LEFT                          (0x0dd4)</span>
<span class="p_add">+#define SBL_REG_CORE1_CA_D_ARTITHRESH_7_TO_0             (0x0e00)</span>
<span class="p_add">+#define SBL_REG_CORE1_CA_D_ARTITHRESH_9_TO_8             (0x0e04)</span>
<span class="p_add">+#define SBL_CORE1_CA_STR_ATTEN_7_TO_0                    (0x0e10)</span>
<span class="p_add">+#define SBL_CORE1_CA_STR_ATTEN_15_TO_8                   (0x0e14)</span>
<span class="p_add">+#define SBL_CORE1_CA_STR_ATTEN_16                        (0x0e18)</span>
<span class="p_add">+#define SBL_REG_CORE1_FRD_D_THRESH_7_TO_0                (0x0e20)</span>
<span class="p_add">+#define SBL_REG_CORE1_FRD_D_THRESH_9_TO_8                (0x0e24)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG0_7_TO_0                        (0x0e28)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG0_15_TO_8                       (0x0e2c)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG1_7_TO_0                        (0x0e30)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG1_15_TO_8                       (0x0e34)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG2_7_TO_0                        (0x0e38)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG2_15_TO_8                       (0x0e3c)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG3_7_TO_0                        (0x0e40)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG3_15_TO_8                       (0x0e44)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG4_7_TO_0                        (0x0e48)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG4_15_TO_8                       (0x0e4c)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG5_7_TO_0                        (0x0e50)</span>
<span class="p_add">+#define SBL_REG_CORE1_REG5_15_TO_8                       (0x0e54)</span>
<span class="p_add">+#define SBL_CORE1_REG_OUT0_7_TO_0                        (0x0e58)</span>
<span class="p_add">+#define SBL_CORE1_REG_OUT0_15_TO_8                       (0x0e5c)</span>
<span class="p_add">+#define SBL_CORE1_REG_OUT1_7_TO_0                        (0x0e60)</span>
<span class="p_add">+#define SBL_CORE1_REG_OUT1_15_TO_8                       (0x0e64)</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_sbl {</span>
<span class="p_add">+	int sbl_backlight_l;</span>
<span class="p_add">+	int sbl_backlight_h;</span>
<span class="p_add">+	int sbl_ambient_light_l;</span>
<span class="p_add">+	int sbl_ambient_light_h;</span>
<span class="p_add">+	int sbl_calibration_a_l;</span>
<span class="p_add">+	int sbl_calibration_a_h;</span>
<span class="p_add">+	int sbl_calibration_b_l;</span>
<span class="p_add">+	int sbl_calibration_b_h;</span>
<span class="p_add">+	int sbl_calibration_c_l;</span>
<span class="p_add">+	int sbl_calibration_c_h;</span>
<span class="p_add">+	int sbl_calibration_d_l;</span>
<span class="p_add">+	int sbl_calibration_d_h;</span>
<span class="p_add">+	int sbl_enable;</span>
<span class="p_add">+} dss_sbl_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** DPP</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define DPP_RD_SHADOW_SEL	(0x000)</span>
<span class="p_add">+#define DPP_DEFAULT	(0x004)</span>
<span class="p_add">+#define DPP_ID	(0x008)</span>
<span class="p_add">+#define DPP_IMG_SIZE_BEF_SR	(0x00C)</span>
<span class="p_add">+#define DPP_IMG_SIZE_AFT_SR	(0x010)</span>
<span class="p_add">+#define DPP_SBL	(0x014)</span>
<span class="p_add">+#define DPP_SBL_MEM_CTRL	(0x018)</span>
<span class="p_add">+#define DPP_ARSR1P_MEM_CTRL	(0x01C)</span>
<span class="p_add">+#define DPP_CLK_SEL	(0x020)</span>
<span class="p_add">+#define DPP_CLK_EN	(0x024)</span>
<span class="p_add">+#define DPP_DBG1_CNT	(0x028)</span>
<span class="p_add">+#define DPP_DBG2_CNT	(0x02C)</span>
<span class="p_add">+#define DPP_DBG1	(0x030)</span>
<span class="p_add">+#define DPP_DBG2	(0x034)</span>
<span class="p_add">+#define DPP_DBG3	(0x038)</span>
<span class="p_add">+#define DPP_DBG4	(0x03C)</span>
<span class="p_add">+#define DPP_INTS	(0x040)</span>
<span class="p_add">+#define DPP_INT_MSK	(0x044)</span>
<span class="p_add">+#define DPP_ARSR1P	(0x048)</span>
<span class="p_add">+#define DPP_DBG_CNT  DPP_DBG1_CNT</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DPP_CLRBAR_CTRL (0x100)</span>
<span class="p_add">+#define DPP_CLRBAR_1ST_CLR (0x104)</span>
<span class="p_add">+#define DPP_CLRBAR_2ND_CLR (0x108)</span>
<span class="p_add">+#define DPP_CLRBAR_3RD_CLR (0x10C)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DPP_CLIP_TOP (0x180)</span>
<span class="p_add">+#define DPP_CLIP_BOTTOM (0x184)</span>
<span class="p_add">+#define DPP_CLIP_LEFT (0x188)</span>
<span class="p_add">+#define DPP_CLIP_RIGHT (0x18C)</span>
<span class="p_add">+#define DPP_CLIP_EN (0x190)</span>
<span class="p_add">+#define DPP_CLIP_DBG (0x194)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define DITHER_PARA (0x000)</span>
<span class="p_add">+#define DITHER_CTL (0x004)</span>
<span class="p_add">+#define DITHER_MATRIX_PART1 (0x008)</span>
<span class="p_add">+#define DITHER_MATRIX_PART0 (0x00C)</span>
<span class="p_add">+#define DITHER_ERRDIFF_WEIGHT (0x010)</span>
<span class="p_add">+#define DITHER_FRC_01_PART1 (0x014)</span>
<span class="p_add">+#define DITHER_FRC_01_PART0 (0x018)</span>
<span class="p_add">+#define DITHER_FRC_10_PART1 (0x01C)</span>
<span class="p_add">+#define DITHER_FRC_10_PART0 (0x020)</span>
<span class="p_add">+#define DITHER_FRC_11_PART1 (0x024)</span>
<span class="p_add">+#define DITHER_FRC_11_PART0 (0x028)</span>
<span class="p_add">+#define DITHER_MEM_CTRL (0x02C)</span>
<span class="p_add">+#define DITHER_DBG0 (0x030)</span>
<span class="p_add">+#define DITHER_DBG1 (0x034)</span>
<span class="p_add">+#define DITHER_DBG2 (0x038)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define CSC10B_IDC0	(0x000)</span>
<span class="p_add">+#define CSC10B_IDC1	(0x004)</span>
<span class="p_add">+#define CSC10B_IDC2	(0x008)</span>
<span class="p_add">+#define CSC10B_ODC0	(0x00C)</span>
<span class="p_add">+#define CSC10B_ODC1	(0x010)</span>
<span class="p_add">+#define CSC10B_ODC2	(0x014)</span>
<span class="p_add">+#define CSC10B_P00	(0x018)</span>
<span class="p_add">+#define CSC10B_P01	(0x01C)</span>
<span class="p_add">+#define CSC10B_P02	(0x020)</span>
<span class="p_add">+#define CSC10B_P10	(0x024)</span>
<span class="p_add">+#define CSC10B_P11	(0x028)</span>
<span class="p_add">+#define CSC10B_P12	(0x02C)</span>
<span class="p_add">+#define CSC10B_P20	(0x030)</span>
<span class="p_add">+#define CSC10B_P21	(0x034)</span>
<span class="p_add">+#define CSC10B_P22	(0x038)</span>
<span class="p_add">+#define CSC10B_MODULE_EN	(0x03C)</span>
<span class="p_add">+#define CSC10B_MPREC	(0x040)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define GAMA_EN	(0x000)</span>
<span class="p_add">+#define GAMA_MEM_CTRL	(0x004)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ACM_EN	(0x000)</span>
<span class="p_add">+#define ACM_SATA_OFFSET	(0x004)</span>
<span class="p_add">+#define ACM_HUESEL	(0x008)</span>
<span class="p_add">+#define ACM_CSC_IDC0	(0x00C)</span>
<span class="p_add">+#define ACM_CSC_IDC1	(0x010)</span>
<span class="p_add">+#define ACM_CSC_IDC2	(0x014)</span>
<span class="p_add">+#define ACM_CSC_P00	(0x018)</span>
<span class="p_add">+#define ACM_CSC_P01	(0x01C)</span>
<span class="p_add">+#define ACM_CSC_P02	(0x020)</span>
<span class="p_add">+#define ACM_CSC_P10	(0x024)</span>
<span class="p_add">+#define ACM_CSC_P11	(0x028)</span>
<span class="p_add">+#define ACM_CSC_P12	(0x02C)</span>
<span class="p_add">+#define ACM_CSC_P20	(0x030)</span>
<span class="p_add">+#define ACM_CSC_P21	(0x034)</span>
<span class="p_add">+#define ACM_CSC_P22	(0x038)</span>
<span class="p_add">+#define ACM_CSC_MRREC	(0x03C)</span>
<span class="p_add">+#define ACM_R0_H	(0x040)</span>
<span class="p_add">+#define ACM_R1_H	(0x044)</span>
<span class="p_add">+#define ACM_R2_H	(0x048)</span>
<span class="p_add">+#define ACM_R3_H	(0x04C)</span>
<span class="p_add">+#define ACM_R4_H	(0x050)</span>
<span class="p_add">+#define ACM_R5_H	(0x054)</span>
<span class="p_add">+#define ACM_R6_H	(0x058)</span>
<span class="p_add">+#define ACM_LUT_DIS0	(0x05C)</span>
<span class="p_add">+#define ACM_LUT_DIS1	(0x060)</span>
<span class="p_add">+#define ACM_LUT_DIS2	(0x064)</span>
<span class="p_add">+#define ACM_LUT_DIS3	(0x068)</span>
<span class="p_add">+#define ACM_LUT_DIS4	(0x06C)</span>
<span class="p_add">+#define ACM_LUT_DIS5	(0x070)</span>
<span class="p_add">+#define ACM_LUT_DIS6	(0x074)</span>
<span class="p_add">+#define ACM_LUT_DIS7	(0x078)</span>
<span class="p_add">+#define ACM_LUT_PARAM0	(0x07C)</span>
<span class="p_add">+#define ACM_LUT_PARAM1	(0x080)</span>
<span class="p_add">+#define ACM_LUT_PARAM2	(0x084)</span>
<span class="p_add">+#define ACM_LUT_PARAM3	(0x088)</span>
<span class="p_add">+#define ACM_LUT_PARAM4	(0x08C)</span>
<span class="p_add">+#define ACM_LUT_PARAM5	(0x090)</span>
<span class="p_add">+#define ACM_LUT_PARAM6	(0x094)</span>
<span class="p_add">+#define ACM_LUT_PARAM7	(0x098)</span>
<span class="p_add">+#define ACM_LUT_SEL	(0x09C)</span>
<span class="p_add">+#define ACM_MEM_CTRL	(0x0A0)</span>
<span class="p_add">+#define ACM_DEBUG_TOP	(0x0A4)</span>
<span class="p_add">+#define ACM_DEBUG_CFG	(0x0A8)</span>
<span class="p_add">+#define ACM_DEBUG_W	(0x0AC)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ACE_EN	(0x000)</span>
<span class="p_add">+#define ACE_SKIN_CFG	(0x004)</span>
<span class="p_add">+#define ACE_LUT_SEL	(0x008)</span>
<span class="p_add">+#define ACE_HIST_IND	(0x00C)</span>
<span class="p_add">+#define ACE_ACTIVE	(0x010)</span>
<span class="p_add">+#define ACE_DBG	(0x014)</span>
<span class="p_add">+#define ACE_MEM_CTRL	(0x018)</span>
<span class="p_add">+#define ACE_IN_SEL	(0x01C)</span>
<span class="p_add">+#define ACE_R2Y	(0x020)</span>
<span class="p_add">+#define ACE_G2Y	(0x024)</span>
<span class="p_add">+#define ACE_B2Y	(0x028)</span>
<span class="p_add">+#define ACE_Y_OFFSET	(0x02C)</span>
<span class="p_add">+#define ACE_Y_CEN	(0x030)</span>
<span class="p_add">+#define ACE_U_CEN	(0x034)</span>
<span class="p_add">+#define ACE_V_CEN	(0x038)</span>
<span class="p_add">+#define ACE_Y_EXT	(0x03C)</span>
<span class="p_add">+#define ACE_U_EXT	(0x040)</span>
<span class="p_add">+#define ACE_V_EXT	(0x044)</span>
<span class="p_add">+#define ACE_Y_ATTENU 	(0x048)</span>
<span class="p_add">+#define ACE_U_ATTENU	(0x04C)</span>
<span class="p_add">+#define ACE_V_ATTENU	(0x050)</span>
<span class="p_add">+#define ACE_ROTA	(0x054)</span>
<span class="p_add">+#define ACE_ROTB 	(0x058)</span>
<span class="p_add">+#define ACE_Y_CORE	(0x05C)</span>
<span class="p_add">+#define ACE_U_CORE	(0x060)</span>
<span class="p_add">+#define ACE_V_CORE	(0x064)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define LCP_XCC_COEF_00	(0x000)</span>
<span class="p_add">+#define LCP_XCC_COEF_01	(0x004)</span>
<span class="p_add">+#define LCP_XCC_COEF_02	(0x008)</span>
<span class="p_add">+#define LCP_XCC_COEF_03	(0x00C)</span>
<span class="p_add">+#define LCP_XCC_COEF_10	(0x010)</span>
<span class="p_add">+#define LCP_XCC_COEF_11	(0x014)</span>
<span class="p_add">+#define LCP_XCC_COEF_12	(0x018)</span>
<span class="p_add">+#define LCP_XCC_COEF_13	(0x01C)</span>
<span class="p_add">+#define LCP_XCC_COEF_20	(0x020)</span>
<span class="p_add">+#define LCP_XCC_COEF_21	(0x024)</span>
<span class="p_add">+#define LCP_XCC_COEF_22	(0x028)</span>
<span class="p_add">+#define LCP_XCC_COEF_23	(0x02C)</span>
<span class="p_add">+#define LCP_GMP_BYPASS_EN	(0x030)</span>
<span class="p_add">+#define LCP_XCC_BYPASS_EN	(0x034)</span>
<span class="p_add">+#define LCP_DEGAMA_EN	(0x038)</span>
<span class="p_add">+#define LCP_DEGAMA_MEM_CTRL	(0x03C)</span>
<span class="p_add">+#define LCP_GMP_MEM_CTRL	(0x040)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_arsr1p {</span>
<span class="p_add">+	uint32_t ihleft;</span>
<span class="p_add">+	uint32_t ihright;</span>
<span class="p_add">+	uint32_t ihleft1;</span>
<span class="p_add">+	uint32_t ihright1;</span>
<span class="p_add">+	uint32_t ivtop;</span>
<span class="p_add">+	uint32_t ivbottom;</span>
<span class="p_add">+	uint32_t uv_offset;</span>
<span class="p_add">+	uint32_t ihinc;</span>
<span class="p_add">+	uint32_t ivinc;</span>
<span class="p_add">+	uint32_t mode;</span>
<span class="p_add">+	uint32_t format;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t skin_thres_y;</span>
<span class="p_add">+	uint32_t skin_thres_u;</span>
<span class="p_add">+	uint32_t skin_thres_v;</span>
<span class="p_add">+	uint32_t skin_expected;</span>
<span class="p_add">+	uint32_t skin_cfg;</span>
<span class="p_add">+	uint32_t shoot_cfg1;</span>
<span class="p_add">+	uint32_t shoot_cfg2;</span>
<span class="p_add">+	uint32_t sharp_cfg1;</span>
<span class="p_add">+	uint32_t sharp_cfg2;</span>
<span class="p_add">+	uint32_t sharp_cfg3;</span>
<span class="p_add">+	uint32_t sharp_cfg4;</span>
<span class="p_add">+	uint32_t sharp_cfg5;</span>
<span class="p_add">+	uint32_t sharp_cfg6;</span>
<span class="p_add">+	uint32_t sharp_cfg7;</span>
<span class="p_add">+	uint32_t sharp_cfg8;</span>
<span class="p_add">+	uint32_t sharp_cfg9;</span>
<span class="p_add">+	uint32_t sharp_cfg10;</span>
<span class="p_add">+	uint32_t sharp_cfg11;</span>
<span class="p_add">+	uint32_t diff_ctrl;</span>
<span class="p_add">+	uint32_t lsc_cfg1;</span>
<span class="p_add">+	uint32_t lsc_cfg2;</span>
<span class="p_add">+	uint32_t lsc_cfg3;</span>
<span class="p_add">+	uint32_t force_clk_on_cfg;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint32_t dpp_img_hrz_bef_sr;</span>
<span class="p_add">+	uint32_t dpp_img_vrt_bef_sr;</span>
<span class="p_add">+	uint32_t dpp_img_hrz_aft_sr;</span>
<span class="p_add">+	uint32_t dpp_img_vrt_aft_sr;</span>
<span class="p_add">+} dss_arsr1p_t;</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARSR1P_INC_FACTOR (65536)</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARSR1P_IHLEFT		(0x000)</span>
<span class="p_add">+#define ARSR1P_IHRIGHT		(0x004)</span>
<span class="p_add">+#define ARSR1P_IHLEFT1		(0x008)</span>
<span class="p_add">+#define ARSR1P_IHRIGHT1		(0x00C)</span>
<span class="p_add">+#define ARSR1P_IVTOP		(0x010)</span>
<span class="p_add">+#define ARSR1P_IVBOTTOM		(0x014)</span>
<span class="p_add">+#define ARSR1P_UV_OFFSET		(0x018)</span>
<span class="p_add">+#define ARSR1P_IHINC		(0x01C)</span>
<span class="p_add">+#define ARSR1P_IVINC		(0x020)</span>
<span class="p_add">+#define ARSR1P_MODE			(0x024)</span>
<span class="p_add">+#define ARSR1P_FORMAT		(0x028)</span>
<span class="p_add">+#define ARSR1P_SKIN_THRES_Y		(0x02C)</span>
<span class="p_add">+#define ARSR1P_SKIN_THRES_U		(0x030)</span>
<span class="p_add">+#define ARSR1P_SKIN_THRES_V		(0x034)</span>
<span class="p_add">+#define ARSR1P_SKIN_EXPECTED	(0x038)</span>
<span class="p_add">+#define ARSR1P_SKIN_CFG			(0x03C)</span>
<span class="p_add">+#define ARSR1P_SHOOT_CFG1		(0x040)</span>
<span class="p_add">+#define ARSR1P_SHOOT_CFG2		(0x044)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG1		(0x048)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG2		(0x04C)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG3		(0x050)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG4		(0x054)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG5		(0x058)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG6		(0x05C)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG7		(0x060)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG8		(0x064)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG9		(0x068)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG10		(0x06C)</span>
<span class="p_add">+#define ARSR1P_SHARP_CFG11		(0x070)</span>
<span class="p_add">+#define ARSR1P_DIFF_CTRL		(0x074)</span>
<span class="p_add">+#define ARSR1P_LSC_CFG1		(0x078)</span>
<span class="p_add">+#define ARSR1P_LSC_CFG2		(0x07C)</span>
<span class="p_add">+#define ARSR1P_LSC_CFG3		(0x080)</span>
<span class="p_add">+#define ARSR1P_FORCE_CLK_ON_CFG		(0x084)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** BIT EXT</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define BIT_EXT0_CTL (0x000)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define U_GAMA_R_COEF	(0x000)</span>
<span class="p_add">+#define U_GAMA_G_COEF	(0x400)</span>
<span class="p_add">+#define U_GAMA_B_COEF	(0x800)</span>
<span class="p_add">+#define U_GAMA_R_LAST_COEF (0x200)</span>
<span class="p_add">+#define U_GAMA_G_LAST_COEF (0x600)</span>
<span class="p_add">+#define U_GAMA_B_LAST_COEF (0xA00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ACM_U_H_COEF	(0x000)</span>
<span class="p_add">+#define ACM_U_SATA_COEF	(0x200)</span>
<span class="p_add">+#define ACM_U_SATR0_COEF	(0x300)</span>
<span class="p_add">+#define ACM_U_SATR1_COEF	(0x340)</span>
<span class="p_add">+#define ACM_U_SATR2_COEF	(0x380)</span>
<span class="p_add">+#define ACM_U_SATR3_COEF	(0x3C0)</span>
<span class="p_add">+#define ACM_U_SATR4_COEF	(0x400)</span>
<span class="p_add">+#define ACM_U_SATR5_COEF	(0x440)</span>
<span class="p_add">+#define ACM_U_SATR6_COEF	(0x480)</span>
<span class="p_add">+#define ACM_U_SATR7_COEF	(0x4C0)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define LCP_U_GMP_COEF	(0x0000)</span>
<span class="p_add">+#define LCP_U_DEGAMA_R_COEF	(0x5000)</span>
<span class="p_add">+#define LCP_U_DEGAMA_G_COEF	(0x5400)</span>
<span class="p_add">+#define LCP_U_DEGAMA_B_COEF	(0x5800)</span>
<span class="p_add">+#define LCP_U_DEGAMA_R_LAST_COEF (0x5200)</span>
<span class="p_add">+#define LCP_U_DEGAMA_G_LAST_COEF (0x5600)</span>
<span class="p_add">+#define LCP_U_DEGAMA_B_LAST_COEF (0x5A00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ACE_HIST0	(0x000)</span>
<span class="p_add">+#define ACE_HIST1	(0x400)</span>
<span class="p_add">+#define ACE_LUT0	(0x800)</span>
<span class="p_add">+#define ACE_LUT1	(0xA00)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARSR1P_LSC_GAIN		(0x084)</span>
<span class="p_add">+#define ARSR1P_COEFF_H_Y0	(0x0F0)</span>
<span class="p_add">+#define ARSR1P_COEFF_H_Y1	(0x114)</span>
<span class="p_add">+#define ARSR1P_COEFF_V_Y0	(0x138)</span>
<span class="p_add">+#define ARSR1P_COEFF_V_Y1	(0x15C)</span>
<span class="p_add">+#define ARSR1P_COEFF_H_UV0	(0x180)</span>
<span class="p_add">+#define ARSR1P_COEFF_H_UV1	(0x1A4)</span>
<span class="p_add">+#define ARSR1P_COEFF_V_UV0	(0x1C8)</span>
<span class="p_add">+#define ARSR1P_COEFF_V_UV1	(0x1EC)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#define HIACE_INT_STAT (0x0000)</span>
<span class="p_add">+#define HIACE_INT_UNMASK (0x0004)</span>
<span class="p_add">+#define HIACE_BYPASS_ACE (0x0008)</span>
<span class="p_add">+#define HIACE_BYPASS_ACE_STAT (0x000c)</span>
<span class="p_add">+#define HIACE_UPDATE_LOCAL (0x0010)</span>
<span class="p_add">+#define HIACE_LOCAL_VALID (0x0014)</span>
<span class="p_add">+#define HIACE_GAMMA_AB_SHADOW (0x0018)</span>
<span class="p_add">+#define HIACE_GAMMA_AB_WORK (0x001c)</span>
<span class="p_add">+#define HIACE_GLOBAL_HIST_AB_SHADOW (0x0020)</span>
<span class="p_add">+#define HIACE_GLOBAL_HIST_AB_WORK (0x0024)</span>
<span class="p_add">+#define HIACE_IMAGE_INFO (0x0030)</span>
<span class="p_add">+#define HIACE_HALF_BLOCK_H_W (0x0034)</span>
<span class="p_add">+#define HIACE_XYWEIGHT (0x0038)</span>
<span class="p_add">+#define HIACE_LHIST_SFT (0x003c)</span>
<span class="p_add">+#define HIACE_HUE (0x0050)</span>
<span class="p_add">+#define HIACE_SATURATION (0x0054)</span>
<span class="p_add">+#define HIACE_VALUE (0x0058)</span>
<span class="p_add">+#define HIACE_SKIN_GAIN (0x005c)</span>
<span class="p_add">+#define HIACE_UP_LOW_TH (0x0060)</span>
<span class="p_add">+#define HIACE_UP_CNT (0x0070)</span>
<span class="p_add">+#define HIACE_LOW_CNT (0x0074)</span>
<span class="p_add">+#define HIACE_GLOBAL_HIST_LUT_ADDR (0x0080)</span>
<span class="p_add">+#define HIACE_LHIST_EN (0x0100)</span>
<span class="p_add">+#define HIACE_LOCAL_HIST_VxHy_2z_2z1 (0x0104)</span>
<span class="p_add">+#define HIACE_GAMMA_EN (0x0108)</span>
<span class="p_add">+#define HIACE_GAMMA_VxHy_3z2_3z1_3z_W (0x010c)</span>
<span class="p_add">+#define HIACE_GAMMA_EN_HV_R (0x0110)</span>
<span class="p_add">+#define HIACE_GAMMA_VxHy_3z2_3z1_3z_R (0x0114)</span>
<span class="p_add">+#define HIACE_INIT_GAMMA (0x0120)</span>
<span class="p_add">+#define HIACE_MANUAL_RELOAD (0x0124)</span>
<span class="p_add">+#define HIACE_RAMCLK_FUNC (0x0128)</span>
<span class="p_add">+#define HIACE_CLK_GATE (0x012c)</span>
<span class="p_add">+#define HIACE_GAMMA_RAM_A_CFG_MEM_CTRL (0x0130)</span>
<span class="p_add">+#define HIACE_GAMMA_RAM_B_CFG_MEM_CTRL (0x0134)</span>
<span class="p_add">+#define HIACE_LHIST_RAM_CFG_MEM_CTRL (0x0138)</span>
<span class="p_add">+#define HIACE_GAMMA_RAM_A_CFG_PM_CTRL (0x0140)</span>
<span class="p_add">+#define HIACE_GAMMA_RAM_B_CFG_PM_CTRL (0x0144)</span>
<span class="p_add">+#define HIACE_LHIST_RAM_CFG_PM_CTRL (0x0148)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** IFBC</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define IFBC_SIZE	(0x0000)</span>
<span class="p_add">+#define IFBC_CTRL	(0x0004)</span>
<span class="p_add">+#define IFBC_HIMAX_CTRL0	(0x0008)</span>
<span class="p_add">+#define IFBC_HIMAX_CTRL1	(0x000C)</span>
<span class="p_add">+#define IFBC_HIMAX_CTRL2	(0x0010)</span>
<span class="p_add">+#define IFBC_HIMAX_CTRL3	(0x0014)</span>
<span class="p_add">+#define IFBC_EN	(0x0018)</span>
<span class="p_add">+#define IFBC_MEM_CTRL	(0x001C)</span>
<span class="p_add">+#define IFBC_INSERT	(0x0020)</span>
<span class="p_add">+#define IFBC_HIMAX_TEST_MODE	(0x0024)</span>
<span class="p_add">+#define IFBC_CORE_GT	(0x0028)</span>
<span class="p_add">+#define IFBC_PM_CTRL	(0x002C)</span>
<span class="p_add">+#define IFBC_RD_SHADOW	(0x0030)</span>
<span class="p_add">+#define IFBC_ORISE_CTL	(0x0034)</span>
<span class="p_add">+#define IFBC_ORSISE_DEBUG0	(0x0038)</span>
<span class="p_add">+#define IFBC_ORSISE_DEBUG1	(0x003C)</span>
<span class="p_add">+#define IFBC_RSP_COMP_TEST	(0x0040)</span>
<span class="p_add">+#define IFBC_CLK_SEL	(0x044)</span>
<span class="p_add">+#define IFBC_CLK_EN	(0x048)</span>
<span class="p_add">+#define IFBC_PAD	(0x004C)</span>
<span class="p_add">+#define IFBC_REG_DEFAULT	(0x0050)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** DSC</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define DSC_VERSION	(0x0000)</span>
<span class="p_add">+#define DSC_PPS_IDENTIFIER	(0x0004)</span>
<span class="p_add">+#define DSC_EN	(0x0008)</span>
<span class="p_add">+#define DSC_CTRL	(0x000C)</span>
<span class="p_add">+#define DSC_PIC_SIZE	(0x0010)</span>
<span class="p_add">+#define DSC_SLICE_SIZE	(0x0014)</span>
<span class="p_add">+#define DSC_CHUNK_SIZE	(0x0018)</span>
<span class="p_add">+#define DSC_INITIAL_DELAY	(0x001C)</span>
<span class="p_add">+#define DSC_RC_PARAM0	(0x0020)</span>
<span class="p_add">+#define DSC_RC_PARAM1	(0x0024)</span>
<span class="p_add">+#define DSC_RC_PARAM2	(0x0028)</span>
<span class="p_add">+#define DSC_RC_PARAM3	(0x002C)</span>
<span class="p_add">+#define DSC_FLATNESS_QP_TH	(0x0030)</span>
<span class="p_add">+#define DSC_RC_PARAM4	(0x0034)</span>
<span class="p_add">+#define DSC_RC_PARAM5	(0x0038)</span>
<span class="p_add">+#define DSC_RC_BUF_THRESH0	(0x003C)</span>
<span class="p_add">+#define DSC_RC_BUF_THRESH1	(0x0040)</span>
<span class="p_add">+#define DSC_RC_BUF_THRESH2	(0x0044)</span>
<span class="p_add">+#define DSC_RC_BUF_THRESH3	(0x0048)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM0	(0x004C)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM1	(0x0050)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM2	(0x0054)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM3	(0x0058)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM4	(0x005C)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM5	(0x0060)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM6	(0x0064)</span>
<span class="p_add">+#define DSC_RC_RANGE_PARAM7	(0x0068)</span>
<span class="p_add">+#define DSC_ADJUSTMENT_BITS	(0x006C)</span>
<span class="p_add">+#define DSC_BITS_PER_GRP	(0x0070)</span>
<span class="p_add">+#define DSC_MULTI_SLICE_CTL	(0x0074)</span>
<span class="p_add">+#define DSC_OUT_CTRL	(0x0078)</span>
<span class="p_add">+#define DSC_CLK_SEL	(0x007C)</span>
<span class="p_add">+#define DSC_CLK_EN	(0x0080)</span>
<span class="p_add">+#define DSC_MEM_CTRL	(0x0084)</span>
<span class="p_add">+#define DSC_ST_DATAIN	(0x0088)</span>
<span class="p_add">+#define DSC_ST_DATAOUT	(0x008C)</span>
<span class="p_add">+#define DSC0_ST_SLC_POS	(0x0090)</span>
<span class="p_add">+#define DSC1_ST_SLC_POS	(0x0094)</span>
<span class="p_add">+#define DSC0_ST_PIC_POS	(0x0098)</span>
<span class="p_add">+#define DSC1_ST_PIC_POS	(0x009C)</span>
<span class="p_add">+#define DSC0_ST_FIFO	(0x00A0)</span>
<span class="p_add">+#define DSC1_ST_FIFO	(0x00A4)</span>
<span class="p_add">+#define DSC0_ST_LINEBUF	(0x00A8)</span>
<span class="p_add">+#define DSC1_ST_LINEBUF	(0x00AC)</span>
<span class="p_add">+#define DSC_ST_ITFC	(0x00B0)</span>
<span class="p_add">+#define DSC_RD_SHADOW_SEL	(0x00B4)</span>
<span class="p_add">+#define DSC_REG_DEFAULT	(0x00B8)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** LDI</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define LDI_DPI0_HRZ_CTRL0	(0x0000)</span>
<span class="p_add">+#define LDI_DPI0_HRZ_CTRL1	(0x0004)</span>
<span class="p_add">+#define LDI_DPI0_HRZ_CTRL2	(0x0008)</span>
<span class="p_add">+#define LDI_VRT_CTRL0	(0x000C)</span>
<span class="p_add">+#define LDI_VRT_CTRL1	(0x0010)</span>
<span class="p_add">+#define LDI_VRT_CTRL2	(0x0014)</span>
<span class="p_add">+#define LDI_PLR_CTRL	(0x0018)</span>
<span class="p_add">+#define LDI_SH_MASK_INT	(0x001C)</span>
<span class="p_add">+#define LDI_3D_CTRL	(0x0020)</span>
<span class="p_add">+#define LDI_CTRL	(0x0024)</span>
<span class="p_add">+#define LDI_WORK_MODE	(0x0028)</span>
<span class="p_add">+#define LDI_DE_SPACE_LOW	(0x002C)</span>
<span class="p_add">+#define LDI_DSI_CMD_MOD_CTRL	(0x0030)</span>
<span class="p_add">+#define LDI_DSI_TE_CTRL	(0x0034)</span>
<span class="p_add">+#define LDI_DSI_TE_HS_NUM	(0x0038)</span>
<span class="p_add">+#define LDI_DSI_TE_HS_WD	(0x003C)</span>
<span class="p_add">+#define LDI_DSI_TE_VS_WD	(0x0040)</span>
<span class="p_add">+#define LDI_FRM_MSK	(0x0044)</span>
<span class="p_add">+#define LDI_FRM_MSK_UP	(0x0048)</span>
<span class="p_add">+#define LDI_VINACT_MSK_LEN	(0x0050)</span>
<span class="p_add">+#define LDI_VSTATE	(0x0054)</span>
<span class="p_add">+#define LDI_DPI0_HSTATE	(0x0058)</span>
<span class="p_add">+#define LDI_DPI1_HSTATE	(0x005C)</span>
<span class="p_add">+#define LDI_CMD_EVENT_SEL	(0x0060)</span>
<span class="p_add">+#define LDI_SRAM_LP_CTRL	(0x0064)</span>
<span class="p_add">+#define LDI_ITF_RD_SHADOW	(0x006C)</span>
<span class="p_add">+#define LDI_DPI1_HRZ_CTRL0	(0x00F0)</span>
<span class="p_add">+#define LDI_DPI1_HRZ_CTRL1	(0x00F4)</span>
<span class="p_add">+#define LDI_DPI1_HRZ_CTRL2	(0x00F8)</span>
<span class="p_add">+#define LDI_OVERLAP_SIZE	(0x00FC)</span>
<span class="p_add">+#define LDI_MEM_CTRL	(0x0100)</span>
<span class="p_add">+#define LDI_PM_CTRL	(0x0104)</span>
<span class="p_add">+#define LDI_CLK_SEL	(0x0108)</span>
<span class="p_add">+#define LDI_CLK_EN	(0x010C)</span>
<span class="p_add">+#define LDI_IF_BYPASS	(0x0110)</span>
<span class="p_add">+#define LDI_FRM_VALID_DBG (0x0118)</span>
<span class="p_add">+/* LDI GLB*/</span>
<span class="p_add">+#define LDI_PXL0_DIV2_GT_EN (0x0210)</span>
<span class="p_add">+#define LDI_PXL0_DIV4_GT_EN (0x0214)</span>
<span class="p_add">+#define LDI_PXL0_GT_EN (0x0218)</span>
<span class="p_add">+#define LDI_PXL0_DSI_GT_EN (0x021C)</span>
<span class="p_add">+#define LDI_PXL0_DIVXCFG (0x0220)</span>
<span class="p_add">+#define LDI_DSI1_CLK_SEL (0x0224)</span>
<span class="p_add">+#define LDI_VESA_CLK_SEL (0x0228)</span>
<span class="p_add">+/* DSI1 RST*/</span>
<span class="p_add">+#define LDI_DSI1_RST_SEL (0x0238)</span>
<span class="p_add">+/* LDI INTERRUPT*/</span>
<span class="p_add">+#define LDI_MCU_ITF_INTS (0x0240)</span>
<span class="p_add">+#define LDI_MCU_ITF_INT_MSK (0x0244)</span>
<span class="p_add">+#define LDI_CPU_ITF_INTS (0x0248)</span>
<span class="p_add">+#define LDI_CPU_ITF_INT_MSK (0x024C)</span>
<span class="p_add">+/* LDI MODULE CLOCK GATING*/</span>
<span class="p_add">+#define LDI_MODULE_CLK_SEL (0x0258)</span>
<span class="p_add">+#define LDI_MODULE_CLK_EN (0x025C)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MIPI DSI</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define MIPIDSI_VERSION_OFFSET	(0x0000)</span>
<span class="p_add">+#define MIPIDSI_PWR_UP_OFFSET	(0x0004)</span>
<span class="p_add">+#define MIPIDSI_CLKMGR_CFG_OFFSET	(0x0008)</span>
<span class="p_add">+#define MIPIDSI_DPI_VCID_OFFSET	(0x000c)</span>
<span class="p_add">+#define MIPIDSI_DPI_COLOR_CODING_OFFSET	(0x0010)</span>
<span class="p_add">+#define MIPIDSI_DPI_CFG_POL_OFFSET	(0x0014)</span>
<span class="p_add">+#define MIPIDSI_DPI_LP_CMD_TIM_OFFSET	(0x0018)</span>
<span class="p_add">+#define MIPIDSI_PCKHDL_CFG_OFFSET	(0x002c)</span>
<span class="p_add">+#define MIPIDSI_GEN_VCID_OFFSET	(0x0030)</span>
<span class="p_add">+#define MIPIDSI_MODE_CFG_OFFSET	(0x0034)</span>
<span class="p_add">+#define MIPIDSI_VID_MODE_CFG_OFFSET	(0x0038)</span>
<span class="p_add">+#define MIPIDSI_VID_PKT_SIZE_OFFSET	(0x003c)</span>
<span class="p_add">+#define MIPIDSI_VID_NUM_CHUNKS_OFFSET	(0x0040)</span>
<span class="p_add">+#define MIPIDSI_VID_NULL_SIZE_OFFSET	(0x0044)</span>
<span class="p_add">+#define MIPIDSI_VID_HSA_TIME_OFFSET	(0x0048)</span>
<span class="p_add">+#define MIPIDSI_VID_HBP_TIME_OFFSET	(0x004c)</span>
<span class="p_add">+#define MIPIDSI_VID_HLINE_TIME_OFFSET	(0x0050)</span>
<span class="p_add">+#define MIPIDSI_VID_VSA_LINES_OFFSET	(0x0054)</span>
<span class="p_add">+#define MIPIDSI_VID_VBP_LINES_OFFSET	(0x0058)</span>
<span class="p_add">+#define MIPIDSI_VID_VFP_LINES_OFFSET	(0x005c)</span>
<span class="p_add">+#define MIPIDSI_VID_VACTIVE_LINES_OFFSET	(0x0060)</span>
<span class="p_add">+#define MIPIDSI_EDPI_CMD_SIZE_OFFSET	(0x0064)</span>
<span class="p_add">+#define MIPIDSI_CMD_MODE_CFG_OFFSET	(0x0068)</span>
<span class="p_add">+#define MIPIDSI_GEN_HDR_OFFSET	(0x006c)</span>
<span class="p_add">+#define MIPIDSI_GEN_PLD_DATA_OFFSET	(0x0070)</span>
<span class="p_add">+#define MIPIDSI_CMD_PKT_STATUS_OFFSET	(0x0074)</span>
<span class="p_add">+#define MIPIDSI_TO_CNT_CFG_OFFSET	(0x0078)</span>
<span class="p_add">+#define MIPIDSI_HS_RD_TO_CNT_OFFSET	(0x007C)</span>
<span class="p_add">+#define MIPIDSI_LP_RD_TO_CNT_OFFSET	(0x0080)</span>
<span class="p_add">+#define MIPIDSI_HS_WR_TO_CNT_OFFSET	(0x0084)</span>
<span class="p_add">+#define MIPIDSI_LP_WR_TO_CNT_OFFSET	(0x0088)</span>
<span class="p_add">+#define MIPIDSI_BTA_TO_CNT_OFFSET	(0x008C)</span>
<span class="p_add">+#define MIPIDSI_SDF_3D_OFFSET	(0x0090)</span>
<span class="p_add">+#define MIPIDSI_LPCLK_CTRL_OFFSET	(0x0094)</span>
<span class="p_add">+#define MIPIDSI_PHY_TMR_LPCLK_CFG_OFFSET	(0x0098)</span>
<span class="p_add">+#define MIPIDSI_PHY_TMR_CFG_OFFSET	(0x009c)</span>
<span class="p_add">+#define MIPIDSI_PHY_RSTZ_OFFSET	(0x00a0)</span>
<span class="p_add">+#define MIPIDSI_PHY_IF_CFG_OFFSET	(0x00a4)</span>
<span class="p_add">+#define MIPIDSI_PHY_ULPS_CTRL_OFFSET	(0x00a8)</span>
<span class="p_add">+#define MIPIDSI_PHY_TX_TRIGGERS_OFFSET	(0x00ac)</span>
<span class="p_add">+#define MIPIDSI_PHY_STATUS_OFFSET	(0x00b0)</span>
<span class="p_add">+#define MIPIDSI_PHY_TST_CTRL0_OFFSET	(0x00b4)</span>
<span class="p_add">+#define MIPIDSI_PHY_TST_CTRL1_OFFSET	(0x00b8)</span>
<span class="p_add">+#define MIPIDSI_INT_ST0_OFFSET	(0x00bc)</span>
<span class="p_add">+#define MIPIDSI_INT_ST1_OFFSET	(0x00c0)</span>
<span class="p_add">+#define MIPIDSI_INT_MSK0_OFFSET	(0x00c4)</span>
<span class="p_add">+#define MIPIDSI_INT_MSK1_OFFSET	(0x00c8)</span>
<span class="p_add">+#define INT_FORCE0	(0x00D8)</span>
<span class="p_add">+#define INT_FORCE1	(0x00DC)</span>
<span class="p_add">+#define MIPIDSI_DSC_PARAMETER_OFFSET	(0x00f0)</span>
<span class="p_add">+#define MIPIDSI_PHY_TMR_RD_CFG_OFFSET	(0x00f4)</span>
<span class="p_add">+#define VID_SHADOW_CTRL	(0x0100)</span>
<span class="p_add">+#define DPI_VCID_ACT	(0x010C)</span>
<span class="p_add">+#define DPI_COLOR_CODING_ACT	(0x0110)</span>
<span class="p_add">+#define DPI_LP_CMD_TIM_ACT	(0x0118)</span>
<span class="p_add">+#define VID_MODE_CFG_ACT	(0x0138)</span>
<span class="p_add">+#define VID_PKT_SIZE_ACT	(0x013C)</span>
<span class="p_add">+#define VID_NUM_CHUNKS_ACT	(0x0140)</span>
<span class="p_add">+#define VID_NULL_SIZE_ACT	(0x0144)</span>
<span class="p_add">+#define VID_HSA_TIME_ACT	(0x0148)</span>
<span class="p_add">+#define VID_HBP_TIME_ACT	(0x014C)</span>
<span class="p_add">+#define VID_HLINE_TIME_ACT	(0x0150)</span>
<span class="p_add">+#define VID_VSA_LINES_ACT	(0x0154)</span>
<span class="p_add">+#define VID_VBP_LINES_ACT	(0x0158)</span>
<span class="p_add">+#define VID_VFP_LINES_ACT	(0x015C)</span>
<span class="p_add">+#define VID_VACTIVE_LINES_ACT	(0x0160)</span>
<span class="p_add">+#define SDF_3D_ACT	(0x0190)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** MMBUF</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define SMC_LOCK	(0x0000)</span>
<span class="p_add">+#define SMC_MEM_LP	(0x0004)</span>
<span class="p_add">+#define SMC_GCLK_CS	(0x000C)</span>
<span class="p_add">+#define SMC_QOS_BACKDOOR	(0x0010)</span>
<span class="p_add">+#define SMC_DFX_WCMD_CNT_1ST	(0x0014)</span>
<span class="p_add">+#define SMC_DFX_WCMD_CNT_2ND	(0x0018)</span>
<span class="p_add">+#define SMC_DFX_WCMD_CNT_3RD	(0x001C)</span>
<span class="p_add">+#define SMC_DFX_WCMD_CNT_4TH	(0x0020)</span>
<span class="p_add">+#define SMC_DFX_RCMD_CNT_1ST	(0x0024)</span>
<span class="p_add">+#define SMC_DFX_RCMD_CNT_2ND	(0x0028)</span>
<span class="p_add">+#define SMC_DFX_RCMD_CNT_3RD	(0x002C)</span>
<span class="p_add">+#define SMC_DFX_RCMD_CNT_4TH	(0x0030)</span>
<span class="p_add">+#define SMC_CS_IDLE	(0x0034)</span>
<span class="p_add">+#define SMC_DFX_BFIFO_CNT0	(0x0038)</span>
<span class="p_add">+#define SMC_DFX_RDFIFO_CNT1	(0x003C)</span>
<span class="p_add">+#define SMC_SP_SRAM_STATE0	(0x0040)</span>
<span class="p_add">+#define SMC_SP_SRAM_STATE1	(0x0044)</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** dirty_region_updt</span>
<span class="p_add">+ */</span>
<span class="p_add">+typedef struct dirty_region_updt {</span>
<span class="p_add">+	uint32_t dbuf_frm_size;</span>
<span class="p_add">+	uint32_t dbuf_frm_hsize;</span>
<span class="p_add">+	uint32_t dpp_img_hrz_bef_sr;</span>
<span class="p_add">+	uint32_t dpp_img_vrt_bef_sr;</span>
<span class="p_add">+	uint32_t dpp_img_hrz_aft_sr;</span>
<span class="p_add">+	uint32_t dpp_img_vrt_aft_sr;</span>
<span class="p_add">+	uint32_t ldi_dpi0_hrz_ctrl0;</span>
<span class="p_add">+	uint32_t ldi_dpi0_hrz_ctrl1;</span>
<span class="p_add">+	uint32_t ldi_dpi0_hrz_ctrl2;</span>
<span class="p_add">+	uint32_t ldi_dpi1_hrz_ctrl0;</span>
<span class="p_add">+	uint32_t ldi_dpi1_hrz_ctrl1;</span>
<span class="p_add">+	uint32_t ldi_dpi1_hrz_ctrl2;</span>
<span class="p_add">+	uint32_t ldi_vrt_ctrl0;</span>
<span class="p_add">+	uint32_t ldi_vrt_ctrl1;</span>
<span class="p_add">+	uint32_t ldi_vrt_ctrl2;</span>
<span class="p_add">+	uint32_t ldi_ctrl;</span>
<span class="p_add">+	uint32_t ifbc_size;</span>
<span class="p_add">+	uint32_t edpi_cmd_size;</span>
<span class="p_add">+	dss_arsr1p_t s_arsr1p;</span>
<span class="p_add">+} dirty_region_updt_t;</span>
<span class="p_add">+</span>
<span class="p_add">+/*******************************************************************************</span>
<span class="p_add">+ ** dss module reg</span>
<span class="p_add">+ */</span>
<span class="p_add">+typedef struct dss_module_reg {</span>
<span class="p_add">+	char __iomem *mif_ch_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *aif_ch_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *aif1_ch_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_mctl_ch_base_t mctl_ch_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *dma_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *dfc_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *scl_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *scl_lut_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *arsr2p_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *arsr2p_lut_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *post_clip_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *pcsc_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	char __iomem *csc_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+</span>
<span class="p_add">+	char __iomem *ov_base[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	char __iomem *mctl_base[DSS_MCTL_IDX_MAX];</span>
<span class="p_add">+	char __iomem *mctl_sys_base;</span>
<span class="p_add">+	char __iomem *smmu_base;</span>
<span class="p_add">+	char __iomem *post_scf_base;</span>
<span class="p_add">+</span>
<span class="p_add">+	dss_mif_t mif[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_aif_t aif[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_aif_t aif1[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_aif_bw_t aif_bw[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_aif_bw_t aif1_bw[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_rdma_t rdma[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_wdma_t wdma[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_dfc_t dfc[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_scl_t scl[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_arsr2p_t arsr2p[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_post_clip_t post_clip[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_csc_t pcsc[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_csc_t csc[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_ovl_t ov[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	dss_mctl_t mctl[DSS_MCTL_IDX_MAX];</span>
<span class="p_add">+	dss_mctl_ch_t mctl_ch[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	dss_mctl_sys_t mctl_sys;</span>
<span class="p_add">+	dss_smmu_t smmu;</span>
<span class="p_add">+	dirty_region_updt_t dirty_region_updt;</span>
<span class="p_add">+	dss_arsr1p_t post_scf;</span>
<span class="p_add">+</span>
<span class="p_add">+	uint8_t mif_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t aif_ch_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t aif1_ch_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t dma_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t dfc_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t scl_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t arsr2p_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t arsr2p_effect_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t post_cilp_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t pcsc_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t csc_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t ov_used[DSS_OVL_IDX_MAX];</span>
<span class="p_add">+	uint8_t ch_reg_default_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t mctl_used[DSS_MCTL_IDX_MAX];</span>
<span class="p_add">+	uint8_t mctl_ch_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint8_t mctl_sys_used;</span>
<span class="p_add">+	uint8_t smmu_used;</span>
<span class="p_add">+	uint8_t dirty_region_updt_used;</span>
<span class="p_add">+	uint8_t post_scf_used;</span>
<span class="p_add">+} dss_module_reg_t;</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct dss_mmbuf_info {</span>
<span class="p_add">+	uint32_t mm_base[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+	uint32_t mm_size[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+</span>
<span class="p_add">+	uint8_t mm_used[DSS_CHN_MAX_DEFINE];</span>
<span class="p_add">+} dss_mmbuf_info_t;</span>
<span class="p_add">+</span>
<span class="p_add">+#endif				/* HISI_DSS_REGS_H */</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



