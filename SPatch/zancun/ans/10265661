
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>hugetlbfs: check for pgoff value overflow - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    hugetlbfs: check for pgoff value overflow</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 7, 2018, 11:59 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180307235923.12469-1-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10265661/mbox/"
   >mbox</a>
|
   <a href="/patch/10265661/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10265661/">/patch/10265661/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9BD8660211 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 23:59:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8DB8928AD0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 23:59:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 822FE28C61; Wed,  7 Mar 2018 23:59:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_HI,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 16F4D28AD0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 23:59:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755244AbeCGX7n (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Mar 2018 18:59:43 -0500
Received: from aserp2120.oracle.com ([141.146.126.78]:41768 &quot;EHLO
	aserp2120.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755151AbeCGX7k (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Mar 2018 18:59:40 -0500
Received: from pps.filterd (aserp2120.oracle.com [127.0.0.1])
	by aserp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w27Nv2LE164526; Wed, 7 Mar 2018 23:59:31 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references;
	s=corp-2017-10-26; 
	bh=NAMRaBKsZ1qfb0ZaY5OQyCMjt4WrTM9fnWYFjEqYY8Q=;
	b=rZUggMhcbYzr2cM9FDNvMFM6PFQAbfliEBWlPq38ZVH6DdrqGIMGh84bN4DnCPw6tAlL
	6np/+30RFjf0fbT5XcbzyRHD5Iiea0E47gsN+/bR2glohsnRjlAc37IWUN5jGu6ukf1z
	F+SRQCRzXgOAWc6S7iUP0LP/obSAhScUGxHv9aTmQvRmIExqb6NimnCqewape+Qu8qKY
	0NIgWmPzhGH8BH3rZso7OiYeRquX1z8FyHUYDDPxLOXCOGm0MSc83tpGeIu3X2WbHUhv
	0gzY1AbXkiId4jQVN1oRZDHy4Poh/XRbJnXA3Pltm333Cw2T6wMt+e7SbQKpjueWphz+
	AQ== 
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by aserp2120.oracle.com with ESMTP id 2gjt40019h-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 07 Mar 2018 23:59:31 +0000
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id w27NxUnQ007753
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 7 Mar 2018 23:59:30 GMT
Received: from abhmp0007.oracle.com (abhmp0007.oracle.com [141.146.116.13])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	w27NxSuQ013880; Wed, 7 Mar 2018 23:59:29 GMT
Received: from monkey.oracle.com (/98.246.252.205)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 07 Mar 2018 15:59:28 -0800
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	bugzilla-daemon@bugzilla.kernel.org
Cc: Michal Hocko &lt;mhocko@kernel.org&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;, Nic Losby &lt;blurbdust@gmail.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH] hugetlbfs: check for pgoff value overflow
Date: Wed,  7 Mar 2018 15:59:23 -0800
Message-Id: &lt;20180307235923.12469-1-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;20180306133135.4dc344e478d98f0e29f47698@linux-foundation.org&gt;
References: &lt;20180306133135.4dc344e478d98f0e29f47698@linux-foundation.org&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8825
	signatures=668685
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1803070272
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 7, 2018, 11:59 p.m.</div>
<pre class="content">
A vma with vm_pgoff large enough to overflow a loff_t type when
converted to a byte offset can be passed via the remap_file_pages
system call.  The hugetlbfs mmap routine uses the byte offset to
calculate reservations and file size.

A sequence such as:
  mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
  remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);
will result in the following when task exits/file closed,
  kernel BUG at mm/hugetlb.c:749!
Call Trace:
  hugetlbfs_evict_inode+0x2f/0x40
  evict+0xcb/0x190
  __dentry_kill+0xcb/0x150
  __fput+0x164/0x1e0
  task_work_run+0x84/0xa0
  exit_to_usermode_loop+0x7d/0x80
  do_syscall_64+0x18b/0x190
  entry_SYSCALL_64_after_hwframe+0x3d/0xa2

The overflowed pgoff value causes hugetlbfs to try to set up a
mapping with a negative range (end &lt; start) that leaves invalid
state which causes the BUG.

Reported-by: Nic Losby &lt;blurbdust@gmail.com&gt;
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 fs/hugetlbfs/inode.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=169781">Xie Yisheng</a> - March 8, 2018, 1:35 a.m.</div>
<pre class="content">
Hi Mike,

On 2018/3/8 7:59, Mike Kravetz wrote:
<span class="quote">&gt; A vma with vm_pgoff large enough to overflow a loff_t type when</span>
<span class="quote">&gt; converted to a byte offset can be passed via the remap_file_pages</span>
<span class="quote">&gt; system call.  The hugetlbfs mmap routine uses the byte offset to</span>
<span class="quote">&gt; calculate reservations and file size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A sequence such as:</span>
<span class="quote">&gt;   mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);</span>
<span class="quote">&gt;   remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);</span>
<span class="quote">&gt; will result in the following when task exits/file closed,</span>
<span class="quote">&gt;   kernel BUG at mm/hugetlb.c:749!</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;   hugetlbfs_evict_inode+0x2f/0x40</span>
<span class="quote">&gt;   evict+0xcb/0x190</span>
<span class="quote">&gt;   __dentry_kill+0xcb/0x150</span>
<span class="quote">&gt;   __fput+0x164/0x1e0</span>
<span class="quote">&gt;   task_work_run+0x84/0xa0</span>
<span class="quote">&gt;   exit_to_usermode_loop+0x7d/0x80</span>
<span class="quote">&gt;   do_syscall_64+0x18b/0x190</span>
<span class="quote">&gt;   entry_SYSCALL_64_after_hwframe+0x3d/0xa2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The overflowed pgoff value causes hugetlbfs to try to set up a</span>
<span class="quote">&gt; mapping with a negative range (end &lt; start) that leaves invalid</span>
<span class="quote">&gt; state which causes the BUG.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reported-by: Nic Losby &lt;blurbdust@gmail.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/hugetlbfs/inode.c | 7 ++++---</span>
<span class="quote">&gt;  1 file changed, 4 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; index 8fe1b0aa2896..cb288dec5564 100644</span>
<span class="quote">&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; @@ -127,12 +127,13 @@ static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
<span class="quote">&gt;  	vma-&gt;vm_ops = &amp;hugetlb_vm_ops;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; -	 * Offset passed to mmap (before page shift) could have been</span>
<span class="quote">&gt; -	 * negative when represented as a (l)off_t.</span>
<span class="quote">&gt; +	 * page based offset in vm_pgoff could be sufficiently large to</span>
<span class="quote">&gt; +	 * overflow a (l)off_t when converted to byte offset.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	if (((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt; 0)</span>
<span class="quote">&gt; +	if (vma-&gt;vm_pgoff &amp;&amp; ((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt;= 0)</span>
<span class="quote">&gt;  		return -EINVAL;</span>

This seems still no the right fix, taking the following case as an example:
 mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
 remap_file_pages(0x20a00000, 0x600000, 0, 0x0020001000000000, 0);

You should just check the highest PAGE_SHIFT+1 bits of pgoff in you want check
at this point, right?

However, region_chg makes me a litter puzzle that when its return value &lt; 0, sometime
adds_in_progress is added like this case, while sometime it is not. so why not just
change at the beginning of region_chg ?
	if (f &gt; t)
		return -EINVAL;

Thanks
Yisheng
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/* must be huge page aligned */</span>
<span class="quote">&gt;  	if (vma-&gt;vm_pgoff &amp; (~huge_page_mask(h) &gt;&gt; PAGE_SHIFT))</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 8, 2018, 4:25 a.m.</div>
<pre class="content">
On 03/07/2018 05:35 PM, Yisheng Xie wrote:
<span class="quote">&gt; Hi Mike,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 2018/3/8 7:59, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; A vma with vm_pgoff large enough to overflow a loff_t type when</span>
<span class="quote">&gt;&gt; converted to a byte offset can be passed via the remap_file_pages</span>
<span class="quote">&gt;&gt; system call.  The hugetlbfs mmap routine uses the byte offset to</span>
<span class="quote">&gt;&gt; calculate reservations and file size.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; A sequence such as:</span>
<span class="quote">&gt;&gt;   mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);</span>
<span class="quote">&gt;&gt;   remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);</span>
<span class="quote">&gt;&gt; will result in the following when task exits/file closed,</span>
<span class="quote">&gt;&gt;   kernel BUG at mm/hugetlb.c:749!</span>
<span class="quote">&gt;&gt; Call Trace:</span>
<span class="quote">&gt;&gt;   hugetlbfs_evict_inode+0x2f/0x40</span>
<span class="quote">&gt;&gt;   evict+0xcb/0x190</span>
<span class="quote">&gt;&gt;   __dentry_kill+0xcb/0x150</span>
<span class="quote">&gt;&gt;   __fput+0x164/0x1e0</span>
<span class="quote">&gt;&gt;   task_work_run+0x84/0xa0</span>
<span class="quote">&gt;&gt;   exit_to_usermode_loop+0x7d/0x80</span>
<span class="quote">&gt;&gt;   do_syscall_64+0x18b/0x190</span>
<span class="quote">&gt;&gt;   entry_SYSCALL_64_after_hwframe+0x3d/0xa2</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The overflowed pgoff value causes hugetlbfs to try to set up a</span>
<span class="quote">&gt;&gt; mapping with a negative range (end &lt; start) that leaves invalid</span>
<span class="quote">&gt;&gt; state which causes the BUG.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Reported-by: Nic Losby &lt;blurbdust@gmail.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  fs/hugetlbfs/inode.c | 7 ++++---</span>
<span class="quote">&gt;&gt;  1 file changed, 4 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; index 8fe1b0aa2896..cb288dec5564 100644</span>
<span class="quote">&gt;&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; @@ -127,12 +127,13 @@ static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
<span class="quote">&gt;&gt;  	vma-&gt;vm_ops = &amp;hugetlb_vm_ops;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	/*</span>
<span class="quote">&gt;&gt; -	 * Offset passed to mmap (before page shift) could have been</span>
<span class="quote">&gt;&gt; -	 * negative when represented as a (l)off_t.</span>
<span class="quote">&gt;&gt; +	 * page based offset in vm_pgoff could be sufficiently large to</span>
<span class="quote">&gt;&gt; +	 * overflow a (l)off_t when converted to byte offset.</span>
<span class="quote">&gt;&gt;  	 */</span>
<span class="quote">&gt;&gt; -	if (((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt; 0)</span>
<span class="quote">&gt;&gt; +	if (vma-&gt;vm_pgoff &amp;&amp; ((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt;= 0)</span>
<span class="quote">&gt;&gt;  		return -EINVAL;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This seems still no the right fix, taking the following case as an example:</span>
<span class="quote">&gt;  mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);</span>
<span class="quote">&gt;  remap_file_pages(0x20a00000, 0x600000, 0, 0x0020001000000000, 0);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You should just check the highest PAGE_SHIFT+1 bits of pgoff in you want check</span>
<span class="quote">&gt; at this point, right?</span>

Yes, thank you!
That would be the correct check and also much simpler.  Something like,

	unsigned long ovfl_mask;

	ovfl_mask = (1UL &lt;&lt; (PAGE_SHIFT + 1)) - 1;
	ovfl_mask &lt;&lt;= ((sizeof(unsigned long) * BITS_PER_BYTE) -
		      (PAGE_SHIFT + 1));
	if (vma-&gt;vm_pgoff &amp; ovfl_mask)
		return -EINVAL;
<span class="quote">


&gt; However, region_chg makes me a litter puzzle that when its return value &lt; 0, sometime</span>
<span class="quote">&gt; adds_in_progress is added like this case, while sometime it is not. so why not just</span>
<span class="quote">&gt; change at the beginning of region_chg ?</span>
<span class="quote">&gt; 	if (f &gt; t)</span>
<span class="quote">&gt; 		return -EINVAL;</span>

If region_chg returns a value &lt; 0, this indicates an error and adds_in_progress
should not be incremented.  In the case of this bug, region_chg was passed
values where f &gt; t.  Of course, this should never happen.  But, because it
assumed f &lt;= t, it returned a negative count needed huge page reservations.
The calling code interpreted the negative value as an error and a subsequent
region_add or region_abort.

I am not opposed to adding the suggested &quot;if (f &gt; t)&quot;.  However, the
region tracking routines are simple helpers only used by the hugetlbfs
code and the assumption is that they are being called correctly.  As
such, I would prefer to leave off the check.  But, this is the second
time they have been called incorrectly due to insufficient argument
checking.  If we do add this to region_chg, I would also add the check
to all region_* routines for consistency.

I will send out a V2 of this patch tomorrow with the corrected overflow
checking and possibly checks added to the region_* routines.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 8, 2018, 9:03 p.m.</div>
<pre class="content">
On 03/07/2018 08:25 PM, Mike Kravetz wrote:
<span class="quote">&gt; On 03/07/2018 05:35 PM, Yisheng Xie wrote:</span>
<span class="quote">&gt;&gt; However, region_chg makes me a litter puzzle that when its return value &lt; 0, sometime</span>
<span class="quote">&gt;&gt; adds_in_progress is added like this case, while sometime it is not. so why not just</span>
<span class="quote">&gt;&gt; change at the beginning of region_chg ?</span>
<span class="quote">&gt;&gt; 	if (f &gt; t)</span>
<span class="quote">&gt;&gt; 		return -EINVAL;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If region_chg returns a value &lt; 0, this indicates an error and adds_in_progress</span>
<span class="quote">&gt; should not be incremented.  In the case of this bug, region_chg was passed</span>
<span class="quote">&gt; values where f &gt; t.  Of course, this should never happen.  But, because it</span>
<span class="quote">&gt; assumed f &lt;= t, it returned a negative count needed huge page reservations.</span>
<span class="quote">&gt; The calling code interpreted the negative value as an error and a subsequent</span>
<span class="quote">&gt; region_add or region_abort.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not opposed to adding the suggested &quot;if (f &gt; t)&quot;.  However, the</span>
<span class="quote">&gt; region tracking routines are simple helpers only used by the hugetlbfs</span>
<span class="quote">&gt; code and the assumption is that they are being called correctly.  As</span>
<span class="quote">&gt; such, I would prefer to leave off the check.  But, this is the second</span>
<span class="quote">&gt; time they have been called incorrectly due to insufficient argument</span>
<span class="quote">&gt; checking.  If we do add this to region_chg, I would also add the check</span>
<span class="quote">&gt; to all region_* routines for consistency.</span>

I really did not want to add the (f &gt; t) check to the region_* routines.
As mentioned we should never encounter this condition.  Adding the check
here says that we missed discovering an error at higher levels.  Therefore,
I went back and examined the callers of region_chg.  There are only 2:
hugetlb_reserve_pages and __vma_reservation_common.  hugetlb_reserve_pages
is called to set up a reservation for a mapping.  __vma_reservation_common
is called to check on an existing reservation, and only operates on a
single huge page.  With this in mind, a check in hugetlb_reserve_pages
would be sufficient.  Therefore, I added an explicit check to that routine
and printed a warning if ever encountered.
<span class="quote">
&gt; I will send out a V2 of this patch tomorrow with the corrected overflow</span>
<span class="quote">&gt; checking and possibly checks added to the region_* routines.</span>

v2 will be sent shortly.  In v2 I Cc stable as this is an issue for
stable branches as well.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 8fe1b0aa2896..cb288dec5564 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -127,12 +127,13 @@</span> <span class="p_context"> static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
 	vma-&gt;vm_ops = &amp;hugetlb_vm_ops;
 
 	/*
<span class="p_del">-	 * Offset passed to mmap (before page shift) could have been</span>
<span class="p_del">-	 * negative when represented as a (l)off_t.</span>
<span class="p_add">+	 * page based offset in vm_pgoff could be sufficiently large to</span>
<span class="p_add">+	 * overflow a (l)off_t when converted to byte offset.</span>
 	 */
<span class="p_del">-	if (((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt; 0)</span>
<span class="p_add">+	if (vma-&gt;vm_pgoff &amp;&amp; ((loff_t)vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT) &lt;= 0)</span>
 		return -EINVAL;
 
<span class="p_add">+	/* must be huge page aligned */</span>
 	if (vma-&gt;vm_pgoff &amp; (~huge_page_mask(h) &gt;&gt; PAGE_SHIFT))
 		return -EINVAL;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



