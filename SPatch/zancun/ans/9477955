
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/4] oom-reaper: use madvise_dontneed() instead of unmap_page_range() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/4] oom-reaper: use madvise_dontneed() instead of unmap_page_range()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2016, 2:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161216141556.75130-4-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9477955/mbox/"
   >mbox</a>
|
   <a href="/patch/9477955/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9477955/">/patch/9477955/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B7743601C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 14:16:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A64F3288A1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 14:16:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9B39C288AD; Fri, 16 Dec 2016 14:16:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 31531288A1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 14:16:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1760740AbcLPOQT (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Dec 2016 09:16:19 -0500
Received: from mga07.intel.com ([134.134.136.100]:39749 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1759748AbcLPOQC (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Dec 2016 09:16:02 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by orsmga105.jf.intel.com with ESMTP; 16 Dec 2016 06:16:01 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.33,357,1477983600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1100038940&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga002.fm.intel.com with ESMTP; 16 Dec 2016 06:15:59 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 491D3390; Fri, 16 Dec 2016 16:15:58 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Michal Hocko &lt;mhocko@suse.com&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 4/4] oom-reaper: use madvise_dontneed() instead of
	unmap_page_range()
Date: Fri, 16 Dec 2016 17:15:56 +0300
Message-Id: &lt;20161216141556.75130-4-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161216141556.75130-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20161216141556.75130-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Dec. 16, 2016, 2:15 p.m.</div>
<pre class="content">
Logic on whether we can reap pages from the VMA should match what we
have in madvise_dontneed(). In particular, we should skip, VM_PFNMAP
VMAs, but we don&#39;t now.

Let&#39;s just call madvise_dontneed() from __oom_reap_task_mm(), so we
won&#39;t need to sync the logic in the future.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 mm/internal.h |  7 +++----
 mm/madvise.c  |  2 +-
 mm/memory.c   |  2 +-
 mm/oom_kill.c | 15 ++-------------
 4 files changed, 7 insertions(+), 19 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Dec. 16, 2016, 4:10 p.m.</div>
<pre class="content">
Hi Kirill,

[auto build test ERROR on mmotm/master]
[also build test ERROR on v4.9 next-20161216]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Kirill-A-Shutemov/mm-drop-zap_details-ignore_dirty/20161216-231509
base:   git://git.cmpxchg.org/linux-mmotm.git master
config: i386-randconfig-s0-201650 (attached as .config)
compiler: gcc-6 (Debian 6.2.0-3) 6.2.0 20160901
reproduce:
        # save the attached .config to linux build tree
        make ARCH=i386 

All errors (new ones prefixed by &gt;&gt;):

   mm/built-in.o: In function `oom_reaper&#39;:
<span class="quote">&gt;&gt; oom_kill.c:(.text+0x4869): undefined reference to `madvise_dontneed&#39;</span>

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Dec. 16, 2016, 4:45 p.m.</div>
<pre class="content">
Hi Kirill,

[auto build test ERROR on mmotm/master]
[also build test ERROR on v4.9 next-20161216]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Kirill-A-Shutemov/mm-drop-zap_details-ignore_dirty/20161216-231509
base:   git://git.cmpxchg.org/linux-mmotm.git master
config: parisc-allnoconfig (attached as .config)
compiler: hppa-linux-gnu-gcc (Debian 6.1.1-9) 6.1.1 20160705
reproduce:
        wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=parisc 

All errors (new ones prefixed by &gt;&gt;):

   mm/built-in.o: In function `oom_reaper&#39;:
<span class="quote">&gt;&gt; mm/oom_kill.o:(.text.oom_reaper+0x114): undefined reference to `madvise_dontneed&#39;</span>

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - Dec. 19, 2016, 11:39 a.m.</div>
<pre class="content">
On 2016/12/16 23:15, Kirill A. Shutemov wrote:
<span class="quote">&gt; Logic on whether we can reap pages from the VMA should match what we</span>
<span class="quote">&gt; have in madvise_dontneed(). In particular, we should skip, VM_PFNMAP</span>
<span class="quote">&gt; VMAs, but we don&#39;t now.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Let&#39;s just call madvise_dontneed() from __oom_reap_task_mm(), so we</span>
<span class="quote">&gt; won&#39;t need to sync the logic in the future.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/internal.h |  7 +++----</span>
<span class="quote">&gt;  mm/madvise.c  |  2 +-</span>
<span class="quote">&gt;  mm/memory.c   |  2 +-</span>
<span class="quote">&gt;  mm/oom_kill.c | 15 ++-------------</span>
<span class="quote">&gt;  4 files changed, 7 insertions(+), 19 deletions(-)</span>

madvise_dontneed() calls zap_page_range().
zap_page_range() calls mmu_notifier_invalidate_range_start().
mmu_notifier_invalidate_range_start() calls __mmu_notifier_invalidate_range_start().
__mmu_notifier_invalidate_range_start() calls srcu_read_lock()/srcu_read_unlock().
This means that madvise_dontneed() might sleep.

I don&#39;t know what individual notifier will do, but for example

  static const struct mmu_notifier_ops i915_gem_userptr_notifier = {
          .invalidate_range_start = i915_gem_userptr_mn_invalidate_range_start,
  };

i915_gem_userptr_mn_invalidate_range_start() calls flush_workqueue()
which means that we can OOM livelock if work item involves memory allocation.
Some of other notifiers call mutex_lock()/mutex_unlock().

Even if none of currently in-tree notifier users are blocked on memory
allocation, I think it is not guaranteed that future changes/users won&#39;t be
blocked on memory allocation.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 19, 2016, 2 p.m.</div>
<pre class="content">
On Mon 19-12-16 20:39:24, Tetsuo Handa wrote:
<span class="quote">&gt; On 2016/12/16 23:15, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; Logic on whether we can reap pages from the VMA should match what we</span>
<span class="quote">&gt; &gt; have in madvise_dontneed(). In particular, we should skip, VM_PFNMAP</span>
<span class="quote">&gt; &gt; VMAs, but we don&#39;t now.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Let&#39;s just call madvise_dontneed() from __oom_reap_task_mm(), so we</span>
<span class="quote">&gt; &gt; won&#39;t need to sync the logic in the future.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  mm/internal.h |  7 +++----</span>
<span class="quote">&gt; &gt;  mm/madvise.c  |  2 +-</span>
<span class="quote">&gt; &gt;  mm/memory.c   |  2 +-</span>
<span class="quote">&gt; &gt;  mm/oom_kill.c | 15 ++-------------</span>
<span class="quote">&gt; &gt;  4 files changed, 7 insertions(+), 19 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; madvise_dontneed() calls zap_page_range().</span>
<span class="quote">&gt; zap_page_range() calls mmu_notifier_invalidate_range_start().</span>
<span class="quote">&gt; mmu_notifier_invalidate_range_start() calls __mmu_notifier_invalidate_range_start().</span>
<span class="quote">&gt; __mmu_notifier_invalidate_range_start() calls srcu_read_lock()/srcu_read_unlock().</span>
<span class="quote">&gt; This means that madvise_dontneed() might sleep.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t know what individual notifier will do, but for example</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   static const struct mmu_notifier_ops i915_gem_userptr_notifier = {</span>
<span class="quote">&gt;           .invalidate_range_start = i915_gem_userptr_mn_invalidate_range_start,</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; i915_gem_userptr_mn_invalidate_range_start() calls flush_workqueue()</span>
<span class="quote">&gt; which means that we can OOM livelock if work item involves memory allocation.</span>
<span class="quote">&gt; Some of other notifiers call mutex_lock()/mutex_unlock().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Even if none of currently in-tree notifier users are blocked on memory</span>
<span class="quote">&gt; allocation, I think it is not guaranteed that future changes/users won&#39;t be</span>
<span class="quote">&gt; blocked on memory allocation.</span>

Yes I agree. The reason I didn&#39;t go with zap_page_range was that I
didn&#39;t want to rely on any external code path. Moreover I believe that
we even do not have to care about mmu notifiers. The task is dead and
nobody should be watching its address space. If somebody still does then
it would get SEGV anyway. Or am I missing something?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 19, 2016, 2:38 p.m.</div>
<pre class="content">
On Fri 16-12-16 17:15:56, Kirill A. Shutemov wrote:
<span class="quote">&gt; Logic on whether we can reap pages from the VMA should match what we</span>
<span class="quote">&gt; have in madvise_dontneed(). In particular, we should skip, VM_PFNMAP</span>
<span class="quote">&gt; VMAs, but we don&#39;t now.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Let&#39;s just call madvise_dontneed() from __oom_reap_task_mm(), so we</span>
<span class="quote">&gt; won&#39;t need to sync the logic in the future.</span>

I would rather extract those check into can_madv_dontneed_vma() and use
it in the oom reaper. I am really woried about notifier API which can
sleep or rely on locks or do whatever else.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/internal.h b/mm/internal.h</span>
<span class="p_header">index 44d68895a9b9..5c355855e4ad 100644</span>
<span class="p_header">--- a/mm/internal.h</span>
<span class="p_header">+++ b/mm/internal.h</span>
<span class="p_chunk">@@ -41,10 +41,9 @@</span> <span class="p_context"> int do_swap_page(struct vm_fault *vmf);</span>
 void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
 		unsigned long floor, unsigned long ceiling);
 
<span class="p_del">-void unmap_page_range(struct mmu_gather *tlb,</span>
<span class="p_del">-			     struct vm_area_struct *vma,</span>
<span class="p_del">-			     unsigned long addr, unsigned long end,</span>
<span class="p_del">-			     struct zap_details *details);</span>
<span class="p_add">+long madvise_dontneed(struct vm_area_struct *vma,</span>
<span class="p_add">+			     struct vm_area_struct **prev,</span>
<span class="p_add">+			     unsigned long start, unsigned long end);</span>
 
 extern int __do_page_cache_readahead(struct address_space *mapping,
 		struct file *filp, pgoff_t offset, unsigned long nr_to_read,
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index aa4c502caecb..8c9f19b62b4a 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -468,7 +468,7 @@</span> <span class="p_context"> static long madvise_free(struct vm_area_struct *vma,</span>
  * An interface that causes the system to free clean pages and flush
  * dirty pages is already available as msync(MS_INVALIDATE).
  */
<span class="p_del">-static long madvise_dontneed(struct vm_area_struct *vma,</span>
<span class="p_add">+long madvise_dontneed(struct vm_area_struct *vma,</span>
 			     struct vm_area_struct **prev,
 			     unsigned long start, unsigned long end)
 {
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index eed102070dcb..f8836232a492 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1271,7 +1271,7 @@</span> <span class="p_context"> static inline unsigned long zap_pud_range(struct mmu_gather *tlb,</span>
 	return addr;
 }
 
<span class="p_del">-void unmap_page_range(struct mmu_gather *tlb,</span>
<span class="p_add">+static void unmap_page_range(struct mmu_gather *tlb,</span>
 			     struct vm_area_struct *vma,
 			     unsigned long addr, unsigned long end,
 			     struct zap_details *details)
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 96a53ab0c9eb..59a00b1c3145 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -479,7 +479,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 	 *				out_of_memory
 	 *				  select_bad_process
 	 *				    # no TIF_MEMDIE task selects new victim
<span class="p_del">-	 *  unmap_page_range # frees some memory</span>
<span class="p_add">+	 *  madvise_dontneed # frees some memory</span>
 	 */
 	mutex_lock(&amp;oom_lock);
 
<span class="p_chunk">@@ -508,16 +508,6 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 
 	tlb_gather_mmu(&amp;tlb, mm, 0, -1);
 	for (vma = mm-&gt;mmap ; vma; vma = vma-&gt;vm_next) {
<span class="p_del">-		if (is_vm_hugetlb_page(vma))</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * mlocked VMAs require explicit munlocking before unmap.</span>
<span class="p_del">-		 * Let&#39;s keep it simple here and skip such VMAs.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-</span>
 		/*
 		 * Only anonymous pages have a good chance to be dropped
 		 * without additional steps which we cannot afford as we
<span class="p_chunk">@@ -529,8 +519,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 		 * count elevated without a good reason.
 		 */
 		if (vma_is_anonymous(vma) || !(vma-&gt;vm_flags &amp; VM_SHARED))
<span class="p_del">-			unmap_page_range(&amp;tlb, vma, vma-&gt;vm_start, vma-&gt;vm_end,</span>
<span class="p_del">-					 NULL);</span>
<span class="p_add">+			madvise_dontneed(vma, &amp;vma, vma-&gt;vm_start, vma-&gt;vm_end);</span>
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



