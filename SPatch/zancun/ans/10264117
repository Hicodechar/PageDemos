
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,1/4] s390: Use _refcount for pgtables - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,1/4] s390: Use _refcount for pgtables</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172187">willy@infradead.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 7, 2018, 1:44 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180307134443.32646-2-willy@infradead.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10264117/mbox/"
   >mbox</a>
|
   <a href="/patch/10264117/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10264117/">/patch/10264117/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7FE8F6016D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 13:45:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D04028A91
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 13:45:54 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5E8282950B; Wed,  7 Mar 2018 13:45:54 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D550B28A91
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Mar 2018 13:45:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754543AbeCGNpv (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Mar 2018 08:45:51 -0500
Received: from bombadil.infradead.org ([198.137.202.133]:59048 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751151AbeCGNor (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Mar 2018 08:44:47 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=uRDwGtujhK/3XtXR86b0bab+lsCH1qfVsfz5lpvqOjs=;
	b=j8pRGO+Clm1BthPW1g6BmiByx
	+8nw/MKDOJEQlMSAZgealOBlEYeV4CJ7vMRt+154dQdDHOjXIM8vjhlS65PeRhIAZRA2zggYOuWhN
	jidBOltvlOIcxP6Z7p8WjY3Pvl/8bz9XahwuDRrZStn4Zaokp2+DaZPm7p/5KqT+2ozumaKCt/YpK
	Wu+lHwNB/Xv3cB/FOjZ4E19rkhXb2/7r70ntb+E9NMOEG4sSKSRF/XrLqWBm9sPnJkjRhts561Dtj
	HCZEn6nm1i4WnLiSpGeV9FnLHpzQ2wH4XPwUQdtK1TqPbO67gvXk+pkf3J8Yj2C6TN34RQRmY8tFa
	JerOoqq5A==;
Received: from willy by bombadil.infradead.org with local (Exim 4.89 #1 (Red
	Hat Linux)) id 1etZN8-0008WQ-L1; Wed, 07 Mar 2018 13:44:46 +0000
From: Matthew Wilcox &lt;willy@infradead.org&gt;
To: linux-mm@kvack.org
Cc: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;, linux-kernel@vger.kernel.org
Subject: [PATCH v5 1/4] s390: Use _refcount for pgtables
Date: Wed,  7 Mar 2018 05:44:40 -0800
Message-Id: &lt;20180307134443.32646-2-willy@infradead.org&gt;
X-Mailer: git-send-email 2.14.3
In-Reply-To: &lt;20180307134443.32646-1-willy@infradead.org&gt;
References: &lt;20180307134443.32646-1-willy@infradead.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172187">willy@infradead.org</a> - March 7, 2018, 1:44 p.m.</div>
<pre class="content">
<span class="from">From: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;</span>

s390 borrows the storage used for _mapcount in struct page in order to
account whether the bottom or top half is being used for 2kB page
tables.  I want to use that for something else, so use the top byte of
_refcount instead of the bottom byte of _mapcount.  _refcount may
temporarily be incremented by other CPUs that see a stale pointer to
this page in the page cache, but each CPU can only increment it by one,
and there are no systems with 2^24 CPUs today, so they will not change
the upper byte of _refcount.  We do have to be a little careful not to
lose any of their writes (as they will subsequently decrement the
counter).
<span class="signed-off-by">
Signed-off-by: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;</span>
<span class="acked-by">Acked-by: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
---
 arch/s390/mm/pgalloc.c | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/s390/mm/pgalloc.c b/arch/s390/mm/pgalloc.c</span>
<span class="p_header">index cb364153c43c..412c5f48a8e7 100644</span>
<span class="p_header">--- a/arch/s390/mm/pgalloc.c</span>
<span class="p_header">+++ b/arch/s390/mm/pgalloc.c</span>
<span class="p_chunk">@@ -189,14 +189,15 @@</span> <span class="p_context"> unsigned long *page_table_alloc(struct mm_struct *mm)</span>
 		if (!list_empty(&amp;mm-&gt;context.pgtable_list)) {
 			page = list_first_entry(&amp;mm-&gt;context.pgtable_list,
 						struct page, lru);
<span class="p_del">-			mask = atomic_read(&amp;page-&gt;_mapcount);</span>
<span class="p_add">+			mask = atomic_read(&amp;page-&gt;_refcount) &gt;&gt; 24;</span>
 			mask = (mask | (mask &gt;&gt; 4)) &amp; 3;
 			if (mask != 3) {
 				table = (unsigned long *) page_to_phys(page);
 				bit = mask &amp; 1;		/* =1 -&gt; second 2K */
 				if (bit)
 					table += PTRS_PER_PTE;
<span class="p_del">-				atomic_xor_bits(&amp;page-&gt;_mapcount, 1U &lt;&lt; bit);</span>
<span class="p_add">+				atomic_xor_bits(&amp;page-&gt;_refcount,</span>
<span class="p_add">+							1U &lt;&lt; (bit + 24));</span>
 				list_del(&amp;page-&gt;lru);
 			}
 		}
<span class="p_chunk">@@ -217,12 +218,12 @@</span> <span class="p_context"> unsigned long *page_table_alloc(struct mm_struct *mm)</span>
 	table = (unsigned long *) page_to_phys(page);
 	if (mm_alloc_pgste(mm)) {
 		/* Return 4K page table with PGSTEs */
<span class="p_del">-		atomic_set(&amp;page-&gt;_mapcount, 3);</span>
<span class="p_add">+		atomic_xor_bits(&amp;page-&gt;_refcount, 3 &lt;&lt; 24);</span>
 		memset64((u64 *)table, _PAGE_INVALID, PTRS_PER_PTE);
 		memset64((u64 *)table + PTRS_PER_PTE, 0, PTRS_PER_PTE);
 	} else {
 		/* Return the first 2K fragment of the page */
<span class="p_del">-		atomic_set(&amp;page-&gt;_mapcount, 1);</span>
<span class="p_add">+		atomic_xor_bits(&amp;page-&gt;_refcount, 1 &lt;&lt; 24);</span>
 		memset64((u64 *)table, _PAGE_INVALID, 2 * PTRS_PER_PTE);
 		spin_lock_bh(&amp;mm-&gt;context.lock);
 		list_add(&amp;page-&gt;lru, &amp;mm-&gt;context.pgtable_list);
<span class="p_chunk">@@ -241,7 +242,8 @@</span> <span class="p_context"> void page_table_free(struct mm_struct *mm, unsigned long *table)</span>
 		/* Free 2K page table fragment of a 4K page */
 		bit = (__pa(table) &amp; ~PAGE_MASK)/(PTRS_PER_PTE*sizeof(pte_t));
 		spin_lock_bh(&amp;mm-&gt;context.lock);
<span class="p_del">-		mask = atomic_xor_bits(&amp;page-&gt;_mapcount, 1U &lt;&lt; bit);</span>
<span class="p_add">+		mask = atomic_xor_bits(&amp;page-&gt;_refcount, 1U &lt;&lt; (bit + 24));</span>
<span class="p_add">+		mask &gt;&gt;= 24;</span>
 		if (mask &amp; 3)
 			list_add(&amp;page-&gt;lru, &amp;mm-&gt;context.pgtable_list);
 		else
<span class="p_chunk">@@ -252,7 +254,6 @@</span> <span class="p_context"> void page_table_free(struct mm_struct *mm, unsigned long *table)</span>
 	}
 
 	pgtable_page_dtor(page);
<span class="p_del">-	atomic_set(&amp;page-&gt;_mapcount, -1);</span>
 	__free_page(page);
 }
 
<span class="p_chunk">@@ -273,7 +274,8 @@</span> <span class="p_context"> void page_table_free_rcu(struct mmu_gather *tlb, unsigned long *table,</span>
 	}
 	bit = (__pa(table) &amp; ~PAGE_MASK) / (PTRS_PER_PTE*sizeof(pte_t));
 	spin_lock_bh(&amp;mm-&gt;context.lock);
<span class="p_del">-	mask = atomic_xor_bits(&amp;page-&gt;_mapcount, 0x11U &lt;&lt; bit);</span>
<span class="p_add">+	mask = atomic_xor_bits(&amp;page-&gt;_refcount, 0x11U &lt;&lt; (bit + 24));</span>
<span class="p_add">+	mask &gt;&gt;= 24;</span>
 	if (mask &amp; 3)
 		list_add_tail(&amp;page-&gt;lru, &amp;mm-&gt;context.pgtable_list);
 	else
<span class="p_chunk">@@ -295,12 +297,13 @@</span> <span class="p_context"> static void __tlb_remove_table(void *_table)</span>
 		break;
 	case 1:		/* lower 2K of a 4K page table */
 	case 2:		/* higher 2K of a 4K page table */
<span class="p_del">-		if (atomic_xor_bits(&amp;page-&gt;_mapcount, mask &lt;&lt; 4) != 0)</span>
<span class="p_add">+		mask = atomic_xor_bits(&amp;page-&gt;_refcount, mask &lt;&lt; (4 + 24));</span>
<span class="p_add">+		mask &gt;&gt;= 24;</span>
<span class="p_add">+		if (mask != 0)</span>
 			break;
 		/* fallthrough */
 	case 3:		/* 4K page table with pgstes */
 		pgtable_page_dtor(page);
<span class="p_del">-		atomic_set(&amp;page-&gt;_mapcount, -1);</span>
 		__free_page(page);
 		break;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



