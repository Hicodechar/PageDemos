
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[03/13] x86/paravirt: Convert native patch assembly code strings to macros - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [03/13] x86/paravirt: Convert native patch assembly code strings to macros</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 4, 2017, 3:58 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;e4cea2b8aa8ca23122d9c807784ca62ee6cbbff8.1507128293.git.jpoimboe@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9985067/mbox/"
   >mbox</a>
|
   <a href="/patch/9985067/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9985067/">/patch/9985067/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	980046028E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:01:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8956C28B45
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:01:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7DD9528B4D; Wed,  4 Oct 2017 16:01:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 06C9528B45
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:01:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752107AbdJDP6w (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 4 Oct 2017 11:58:52 -0400
Received: from mx1.redhat.com ([209.132.183.28]:54622 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751225AbdJDP6s (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 4 Oct 2017 11:58:48 -0400
Received: from smtp.corp.redhat.com
	(int-mx05.intmail.prod.int.phx2.redhat.com [10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 195567F408;
	Wed,  4 Oct 2017 15:58:48 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 195567F408
Authentication-Results: ext-mx01.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx01.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=jpoimboe@redhat.com
Received: from treble.redhat.com (ovpn-120-76.rdu2.redhat.com [10.10.120.76])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B4D3762690;
	Wed,  4 Oct 2017 15:58:45 +0000 (UTC)
From: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, Juergen Gross &lt;jgross@suse.com&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Sasha Levin &lt;alexander.levin@verizon.com&gt;,
	live-patching@vger.kernel.org, Jiri Slaby &lt;jslaby@suse.cz&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Mike Galbraith &lt;efault@gmx.de&gt;,
	Chris Wright &lt;chrisw@sous-sol.org&gt;, Alok Kataria &lt;akataria@vmware.com&gt;,
	Rusty Russell &lt;rusty@rustcorp.com.au&gt;,
	virtualization@lists.linux-foundation.org,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	xen-devel@lists.xenproject.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;
Subject: [PATCH 03/13] x86/paravirt: Convert native patch assembly code
	strings to macros
Date: Wed,  4 Oct 2017 10:58:24 -0500
Message-Id: &lt;e4cea2b8aa8ca23122d9c807784ca62ee6cbbff8.1507128293.git.jpoimboe@redhat.com&gt;
In-Reply-To: &lt;cover.1507128293.git.jpoimboe@redhat.com&gt;
References: &lt;cover.1507128293.git.jpoimboe@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Wed, 04 Oct 2017 15:58:48 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Oct. 4, 2017, 3:58 p.m.</div>
<pre class="content">
Convert the hard-coded native patch assembly code strings to macros to
facilitate sharing common code between 32-bit and 64-bit.

These macros will also be used by a future patch which requires the GCC
extended asm syntax of two &#39;%&#39; characters instead of one when specifying
a register name.
<span class="signed-off-by">
Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
---
 arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++
 arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------
 arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------
 3 files changed, 50 insertions(+), 24 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Oct. 25, 2017, 9:46 a.m.</div>
<pre class="content">
On 04/10/17 17:58, Josh Poimboeuf wrote:
<span class="quote">&gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt; a register name.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="reviewed-by">
Reviewed-by: Juergen Gross &lt;jgross@suse.com&gt;</span>

Mind adding another patch to merge the now nearly identical
paravirt_patch_32.c and paravirt_patch_64.c either into paravirt.c
or paravirt_patch.c? This would require only very few #ifdef.


Juergen
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt;  arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------</span>
<span class="quote">&gt;  arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------</span>
<span class="quote">&gt;  3 files changed, 50 insertions(+), 24 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; @@ -6,6 +6,30 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/nops.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_X86_64</span>
<span class="quote">&gt; +# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="quote">&gt; +# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>
<span class="quote">&gt; +# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="quote">&gt; +#define NATIVE_IDENTITY			&quot;mov &quot; _REG_ARG1 &quot;, &quot; _REG_RET</span>
<span class="quote">&gt; +#define NATIVE_SAVE_FL			&quot;pushf; pop &quot; _REG_RET</span>
<span class="quote">&gt; +#define NATIVE_RESTORE_FL		&quot;push &quot; _REG_ARG1 &quot;; popf&quot;</span>
<span class="quote">&gt; +#define NATIVE_IRQ_DISABLE		&quot;cli&quot;</span>
<span class="quote">&gt; +#define NATIVE_IRQ_ENABLE		&quot;sti&quot;</span>
<span class="quote">&gt; +#define NATIVE_READ_CR2			&quot;mov %cr2, &quot; _REG_RET</span>
<span class="quote">&gt; +#define NATIVE_READ_CR3			&quot;mov %cr3, &quot; _REG_RET</span>
<span class="quote">&gt; +#define NATIVE_WRITE_CR3		&quot;mov &quot; _REG_ARG1 &quot;, %cr3&quot;</span>
<span class="quote">&gt; +#define NATIVE_FLUSH_TLB_SINGLE		&quot;invlpg (&quot; _REG_ARG1 &quot;)&quot;</span>
<span class="quote">&gt; +#define NATIVE_SWAPGS			&quot;swapgs&quot;</span>
<span class="quote">&gt; +#define NATIVE_IRET			&quot;iret&quot;</span>
<span class="quote">&gt; +#define NATIVE_QUEUED_SPIN_UNLOCK	&quot;movb $0, (&quot; _REG_ARG1 &quot;)&quot;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Volatile isn&#39;t enough to prevent the compiler from reordering the</span>
<span class="quote">&gt;   * read/write functions for the control registers and messing everything up.</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/paravirt_patch_32.c b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="quote">&gt; index 553acbbb4d32..c9c6106ae714 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="quote">&gt; @@ -1,17 +1,18 @@</span>
<span class="quote">&gt;  #include &lt;asm/paravirt.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/special_insns.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, irq_disable, &quot;cli&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, irq_enable, &quot;sti&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, restore_fl, &quot;push %eax; popf&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, save_fl, &quot;pushf; pop %eax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_cpu_ops, iret, &quot;iret&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, read_cr2, &quot;mov %cr2, %eax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, write_cr3, &quot;mov %eax, %cr3&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, read_cr3, &quot;mov %cr3, %eax&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	save_fl,		NATIVE_SAVE_FL);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	restore_fl,		NATIVE_RESTORE_FL);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	irq_disable,		NATIVE_IRQ_DISABLE);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	irq_enable,		NATIVE_IRQ_ENABLE);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_cpu_ops,	iret,			NATIVE_IRET);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	read_cr2,		NATIVE_READ_CR2);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	read_cr3,		NATIVE_READ_CR3);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	write_cr3,		NATIVE_WRITE_CR3);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if defined(CONFIG_PARAVIRT_SPINLOCKS)</span>
<span class="quote">&gt; -DEF_NATIVE(pv_lock_ops, queued_spin_unlock, &quot;movb $0, (%eax)&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_lock_ops, vcpu_is_preempted, &quot;xor %eax, %eax&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len)</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/paravirt_patch_64.c b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="quote">&gt; index 0a1ba3f80cbf..0aa232edd670 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="quote">&gt; @@ -1,25 +1,26 @@</span>
<span class="quote">&gt;  #include &lt;asm/paravirt.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/asm-offsets.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/special_insns.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/stringify.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, irq_disable, &quot;cli&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, irq_enable, &quot;sti&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, restore_fl, &quot;pushq %rdi; popfq&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_irq_ops, save_fl, &quot;pushfq; popq %rax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, read_cr2, &quot;movq %cr2, %rax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, read_cr3, &quot;movq %cr3, %rax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, write_cr3, &quot;movq %rdi, %cr3&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_mmu_ops, flush_tlb_single, &quot;invlpg (%rdi)&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	save_fl,		NATIVE_SAVE_FL);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	restore_fl,		NATIVE_RESTORE_FL);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	irq_disable,		NATIVE_IRQ_DISABLE);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_irq_ops,	irq_enable,		NATIVE_IRQ_ENABLE);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	read_cr2,		NATIVE_READ_CR2);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	read_cr3,		NATIVE_READ_CR3);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	write_cr3,		NATIVE_WRITE_CR3);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_mmu_ops,	flush_tlb_single,	NATIVE_FLUSH_TLB_SINGLE);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -DEF_NATIVE(pv_cpu_ops, usergs_sysret64, &quot;swapgs; sysretq&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_cpu_ops, swapgs, &quot;swapgs&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_cpu_ops,	usergs_sysret64,	NATIVE_USERGS_SYSRET64);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_cpu_ops,	swapgs,			NATIVE_SWAPGS);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -DEF_NATIVE(, mov32, &quot;mov %edi, %eax&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(, mov64, &quot;mov %rdi, %rax&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(,		mov32,			NATIVE_IDENTITY_32);</span>
<span class="quote">&gt; +DEF_NATIVE(,		mov64,			NATIVE_IDENTITY);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if defined(CONFIG_PARAVIRT_SPINLOCKS)</span>
<span class="quote">&gt; -DEF_NATIVE(pv_lock_ops, queued_spin_unlock, &quot;movb $0, (%rdi)&quot;);</span>
<span class="quote">&gt; -DEF_NATIVE(pv_lock_ops, vcpu_is_preempted, &quot;xor %rax, %rax&quot;);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="quote">&gt; +DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len)</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Nov. 16, 2017, 9:04 p.m.</div>
<pre class="content">
On Wed, Oct 25, 2017 at 11:46:18AM +0200, Juergen Gross wrote:
<span class="quote">&gt; On 04/10/17 17:58, Josh Poimboeuf wrote:</span>
<span class="quote">&gt; &gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt; &gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt; &gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt; &gt; a register name.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Mind adding another patch to merge the now nearly identical</span>
<span class="quote">&gt; paravirt_patch_32.c and paravirt_patch_64.c either into paravirt.c</span>
<span class="quote">&gt; or paravirt_patch.c? This would require only very few #ifdef.</span>

Good idea, will do.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Nov. 17, 2017, 6:07 p.m.</div>
<pre class="content">
On Wed, Oct 04, 2017 at 10:58:24AM -0500, Josh Poimboeuf wrote:
<span class="quote">&gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt; a register name.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt;  arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------</span>
<span class="quote">&gt;  arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------</span>
<span class="quote">&gt;  3 files changed, 50 insertions(+), 24 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; @@ -6,6 +6,30 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/nops.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_X86_64</span>
<span class="quote">&gt; +# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="quote">&gt; +# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>

Yeah, that &quot;identity&quot; looks strange. How about NATIVE_NOOP and
NATIVE_NOOP_32 ?
<span class="quote">
&gt; +# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>

NATIVE_ZERO_OUT

I guess. NATIVE_ZERO reads like the native representation of 0 :-)

...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Nov. 17, 2017, 7:10 p.m.</div>
<pre class="content">
On 17/11/17 19:07, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Oct 04, 2017 at 10:58:24AM -0500, Josh Poimboeuf wrote:</span>
<span class="quote">&gt;&gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt;&gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt;&gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt;&gt; a register name.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;  arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------</span>
<span class="quote">&gt;&gt;  arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------</span>
<span class="quote">&gt;&gt;  3 files changed, 50 insertions(+), 24 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt; index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt; @@ -6,6 +6,30 @@</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #include &lt;asm/nops.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_X86_64</span>
<span class="quote">&gt;&gt; +# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="quote">&gt;&gt; +# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah, that &quot;identity&quot; looks strange. How about NATIVE_NOOP and</span>
<span class="quote">&gt; NATIVE_NOOP_32 ?</span>

Those are not NOPs. They return the identical value which was passed to
them. So identity isn&#39;t a bad name after all.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; +# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="quote">&gt;&gt; +#else</span>
<span class="quote">&gt;&gt; +# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; NATIVE_ZERO_OUT</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I guess. NATIVE_ZERO reads like the native representation of 0 :-)</span>

NATIVE_ZERO_ARG1?


Juergen
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Nov. 17, 2017, 7:42 p.m.</div>
<pre class="content">
On Fri, Nov 17, 2017 at 08:10:13PM +0100, Juergen Gross wrote:
<span class="quote">&gt; On 17/11/17 19:07, Borislav Petkov wrote:</span>
<span class="quote">&gt; &gt; On Wed, Oct 04, 2017 at 10:58:24AM -0500, Josh Poimboeuf wrote:</span>
<span class="quote">&gt; &gt;&gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt; &gt;&gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt; &gt;&gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt; &gt;&gt; a register name.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;  arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;&gt;  arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------</span>
<span class="quote">&gt; &gt;&gt;  arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------</span>
<span class="quote">&gt; &gt;&gt;  3 files changed, 50 insertions(+), 24 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; &gt;&gt; index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt; &gt;&gt; @@ -6,6 +6,30 @@</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt;  #include &lt;asm/nops.h&gt;</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; +#ifdef CONFIG_X86_64</span>
<span class="quote">&gt; &gt;&gt; +# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="quote">&gt; &gt;&gt; +# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Yeah, that &quot;identity&quot; looks strange. How about NATIVE_NOOP and</span>
<span class="quote">&gt; &gt; NATIVE_NOOP_32 ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Those are not NOPs. They return the identical value which was passed to</span>
<span class="quote">&gt; them. So identity isn&#39;t a bad name after all.</span>

Right, like the math identity function:

  https://en.wikipedia.org/wiki/Identity_function
<span class="quote">
&gt; &gt;&gt; +# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="quote">&gt; &gt;&gt; +#else</span>
<span class="quote">&gt; &gt;&gt; +# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="quote">&gt; &gt;&gt; +#endif</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; NATIVE_ZERO_OUT</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I guess. NATIVE_ZERO reads like the native representation of 0 :-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; NATIVE_ZERO_ARG1?</span>

On a slight tangent, does anybody know why it zeros the arg?

The only place it&#39;s used is here:

#if defined(CONFIG_PARAVIRT_SPINLOCKS)
DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);
DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);
#endif

Isn&#39;t that a bug?  Seems like it should _return_ zero.  Zeroing the arg
shouldn&#39;t have any effect.

If I&#39;m right, we could call it NATIVE_FALSE.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Nov. 18, 2017, 10:20 a.m.</div>
<pre class="content">
On 17/11/17 20:42, Josh Poimboeuf wrote:
<span class="quote">&gt; On Fri, Nov 17, 2017 at 08:10:13PM +0100, Juergen Gross wrote:</span>
<span class="quote">&gt;&gt; On 17/11/17 19:07, Borislav Petkov wrote:</span>
<span class="quote">&gt;&gt;&gt; On Wed, Oct 04, 2017 at 10:58:24AM -0500, Josh Poimboeuf wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Convert the hard-coded native patch assembly code strings to macros to</span>
<span class="quote">&gt;&gt;&gt;&gt; facilitate sharing common code between 32-bit and 64-bit.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; These macros will also be used by a future patch which requires the GCC</span>
<span class="quote">&gt;&gt;&gt;&gt; extended asm syntax of two &#39;%&#39; characters instead of one when specifying</span>
<span class="quote">&gt;&gt;&gt;&gt; a register name.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/include/asm/special_insns.h | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/kernel/paravirt_patch_32.c  | 21 +++++++++++----------</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/kernel/paravirt_patch_64.c  | 29 +++++++++++++++--------------</span>
<span class="quote">&gt;&gt;&gt;&gt;  3 files changed, 50 insertions(+), 24 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt;&gt;&gt; index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/x86/include/asm/special_insns.h</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -6,6 +6,30 @@</span>
<span class="quote">&gt;&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;&gt;  #include &lt;asm/nops.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;&gt; +#ifdef CONFIG_X86_64</span>
<span class="quote">&gt;&gt;&gt;&gt; +# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="quote">&gt;&gt;&gt;&gt; +# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Yeah, that &quot;identity&quot; looks strange. How about NATIVE_NOOP and</span>
<span class="quote">&gt;&gt;&gt; NATIVE_NOOP_32 ?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Those are not NOPs. They return the identical value which was passed to</span>
<span class="quote">&gt;&gt; them. So identity isn&#39;t a bad name after all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right, like the math identity function:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   https://en.wikipedia.org/wiki/Identity_function</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; +# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="quote">&gt;&gt;&gt;&gt; +#else</span>
<span class="quote">&gt;&gt;&gt;&gt; +# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="quote">&gt;&gt;&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; NATIVE_ZERO_OUT</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I guess. NATIVE_ZERO reads like the native representation of 0 :-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; NATIVE_ZERO_ARG1?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On a slight tangent, does anybody know why it zeros the arg?</span>

Why are _you_ asking? You&#39;ve introduced it.
<span class="quote">
&gt; The only place it&#39;s used is here:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; #if defined(CONFIG_PARAVIRT_SPINLOCKS)</span>
<span class="quote">&gt; DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="quote">&gt; DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
<span class="quote">&gt; #endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Isn&#39;t that a bug?  Seems like it should _return_ zero.  Zeroing the arg</span>
<span class="quote">&gt; shouldn&#39;t have any effect.</span>

Right. Before that patch it _did_ return zero instead of zeroing arg1.
<span class="quote">
&gt; If I&#39;m right, we could call it NATIVE_FALSE.</span>

I&#39;d prefer NATIVE_ZERO, as it will be usable for non-boolean cases, too.


Juergen
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95791">Josh Poimboeuf</a> - Nov. 18, 2017, 1:17 p.m.</div>
<pre class="content">
On Sat, Nov 18, 2017 at 11:20:06AM +0100, Juergen Gross wrote:
<span class="quote">&gt; &gt;&gt;&gt;&gt; +#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; NATIVE_ZERO_OUT</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; I guess. NATIVE_ZERO reads like the native representation of 0 :-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; NATIVE_ZERO_ARG1?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On a slight tangent, does anybody know why it zeros the arg?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why are _you_ asking? You&#39;ve introduced it.</span>

So I did.  Touché!
<span class="quote">
&gt; &gt; The only place it&#39;s used is here:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; #if defined(CONFIG_PARAVIRT_SPINLOCKS)</span>
<span class="quote">&gt; &gt; DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="quote">&gt; &gt; DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
<span class="quote">&gt; &gt; #endif</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Isn&#39;t that a bug?  Seems like it should _return_ zero.  Zeroing the arg</span>
<span class="quote">&gt; &gt; shouldn&#39;t have any effect.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right. Before that patch it _did_ return zero instead of zeroing arg1.</span>

Oops!
<span class="quote">
&gt; &gt; If I&#39;m right, we could call it NATIVE_FALSE.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;d prefer NATIVE_ZERO, as it will be usable for non-boolean cases, too.</span>

NATIVE_ZERO works for me.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">index ac402c6fc24b..0549c5f2c1b3 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/special_insns.h</span>
<span class="p_chunk">@@ -6,6 +6,30 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/nops.h&gt;
 
<span class="p_add">+#ifdef CONFIG_X86_64</span>
<span class="p_add">+# define _REG_ARG1			&quot;%rdi&quot;</span>
<span class="p_add">+# define NATIVE_IDENTITY_32		&quot;mov %edi, %eax&quot;</span>
<span class="p_add">+# define NATIVE_USERGS_SYSRET64		&quot;swapgs; sysretq&quot;</span>
<span class="p_add">+#else</span>
<span class="p_add">+# define _REG_ARG1			&quot;%eax&quot;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#define _REG_RET			&quot;%&quot; _ASM_AX</span>
<span class="p_add">+</span>
<span class="p_add">+#define NATIVE_ZERO			&quot;xor &quot; _REG_ARG1 &quot;, &quot; _REG_ARG1</span>
<span class="p_add">+#define NATIVE_IDENTITY			&quot;mov &quot; _REG_ARG1 &quot;, &quot; _REG_RET</span>
<span class="p_add">+#define NATIVE_SAVE_FL			&quot;pushf; pop &quot; _REG_RET</span>
<span class="p_add">+#define NATIVE_RESTORE_FL		&quot;push &quot; _REG_ARG1 &quot;; popf&quot;</span>
<span class="p_add">+#define NATIVE_IRQ_DISABLE		&quot;cli&quot;</span>
<span class="p_add">+#define NATIVE_IRQ_ENABLE		&quot;sti&quot;</span>
<span class="p_add">+#define NATIVE_READ_CR2			&quot;mov %cr2, &quot; _REG_RET</span>
<span class="p_add">+#define NATIVE_READ_CR3			&quot;mov %cr3, &quot; _REG_RET</span>
<span class="p_add">+#define NATIVE_WRITE_CR3		&quot;mov &quot; _REG_ARG1 &quot;, %cr3&quot;</span>
<span class="p_add">+#define NATIVE_FLUSH_TLB_SINGLE		&quot;invlpg (&quot; _REG_ARG1 &quot;)&quot;</span>
<span class="p_add">+#define NATIVE_SWAPGS			&quot;swapgs&quot;</span>
<span class="p_add">+#define NATIVE_IRET			&quot;iret&quot;</span>
<span class="p_add">+#define NATIVE_QUEUED_SPIN_UNLOCK	&quot;movb $0, (&quot; _REG_ARG1 &quot;)&quot;</span>
<span class="p_add">+</span>
 /*
  * Volatile isn&#39;t enough to prevent the compiler from reordering the
  * read/write functions for the control registers and messing everything up.
<span class="p_header">diff --git a/arch/x86/kernel/paravirt_patch_32.c b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_header">index 553acbbb4d32..c9c6106ae714 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_chunk">@@ -1,17 +1,18 @@</span> <span class="p_context"></span>
 #include &lt;asm/paravirt.h&gt;
<span class="p_add">+#include &lt;asm/special_insns.h&gt;</span>
 
<span class="p_del">-DEF_NATIVE(pv_irq_ops, irq_disable, &quot;cli&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, irq_enable, &quot;sti&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, restore_fl, &quot;push %eax; popf&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, save_fl, &quot;pushf; pop %eax&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_cpu_ops, iret, &quot;iret&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, read_cr2, &quot;mov %cr2, %eax&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, write_cr3, &quot;mov %eax, %cr3&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, read_cr3, &quot;mov %cr3, %eax&quot;);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	save_fl,		NATIVE_SAVE_FL);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	restore_fl,		NATIVE_RESTORE_FL);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	irq_disable,		NATIVE_IRQ_DISABLE);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	irq_enable,		NATIVE_IRQ_ENABLE);</span>
<span class="p_add">+DEF_NATIVE(pv_cpu_ops,	iret,			NATIVE_IRET);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	read_cr2,		NATIVE_READ_CR2);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	read_cr3,		NATIVE_READ_CR3);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	write_cr3,		NATIVE_WRITE_CR3);</span>
 
 #if defined(CONFIG_PARAVIRT_SPINLOCKS)
<span class="p_del">-DEF_NATIVE(pv_lock_ops, queued_spin_unlock, &quot;movb $0, (%eax)&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_lock_ops, vcpu_is_preempted, &quot;xor %eax, %eax&quot;);</span>
<span class="p_add">+DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="p_add">+DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
 #endif
 
 unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len)
<span class="p_header">diff --git a/arch/x86/kernel/paravirt_patch_64.c b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_header">index 0a1ba3f80cbf..0aa232edd670 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_chunk">@@ -1,25 +1,26 @@</span> <span class="p_context"></span>
 #include &lt;asm/paravirt.h&gt;
 #include &lt;asm/asm-offsets.h&gt;
<span class="p_add">+#include &lt;asm/special_insns.h&gt;</span>
 #include &lt;linux/stringify.h&gt;
 
<span class="p_del">-DEF_NATIVE(pv_irq_ops, irq_disable, &quot;cli&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, irq_enable, &quot;sti&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, restore_fl, &quot;pushq %rdi; popfq&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_irq_ops, save_fl, &quot;pushfq; popq %rax&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, read_cr2, &quot;movq %cr2, %rax&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, read_cr3, &quot;movq %cr3, %rax&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, write_cr3, &quot;movq %rdi, %cr3&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_mmu_ops, flush_tlb_single, &quot;invlpg (%rdi)&quot;);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	save_fl,		NATIVE_SAVE_FL);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	restore_fl,		NATIVE_RESTORE_FL);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	irq_disable,		NATIVE_IRQ_DISABLE);</span>
<span class="p_add">+DEF_NATIVE(pv_irq_ops,	irq_enable,		NATIVE_IRQ_ENABLE);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	read_cr2,		NATIVE_READ_CR2);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	read_cr3,		NATIVE_READ_CR3);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	write_cr3,		NATIVE_WRITE_CR3);</span>
<span class="p_add">+DEF_NATIVE(pv_mmu_ops,	flush_tlb_single,	NATIVE_FLUSH_TLB_SINGLE);</span>
 
<span class="p_del">-DEF_NATIVE(pv_cpu_ops, usergs_sysret64, &quot;swapgs; sysretq&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_cpu_ops, swapgs, &quot;swapgs&quot;);</span>
<span class="p_add">+DEF_NATIVE(pv_cpu_ops,	usergs_sysret64,	NATIVE_USERGS_SYSRET64);</span>
<span class="p_add">+DEF_NATIVE(pv_cpu_ops,	swapgs,			NATIVE_SWAPGS);</span>
 
<span class="p_del">-DEF_NATIVE(, mov32, &quot;mov %edi, %eax&quot;);</span>
<span class="p_del">-DEF_NATIVE(, mov64, &quot;mov %rdi, %rax&quot;);</span>
<span class="p_add">+DEF_NATIVE(,		mov32,			NATIVE_IDENTITY_32);</span>
<span class="p_add">+DEF_NATIVE(,		mov64,			NATIVE_IDENTITY);</span>
 
 #if defined(CONFIG_PARAVIRT_SPINLOCKS)
<span class="p_del">-DEF_NATIVE(pv_lock_ops, queued_spin_unlock, &quot;movb $0, (%rdi)&quot;);</span>
<span class="p_del">-DEF_NATIVE(pv_lock_ops, vcpu_is_preempted, &quot;xor %rax, %rax&quot;);</span>
<span class="p_add">+DEF_NATIVE(pv_lock_ops,	queued_spin_unlock,	NATIVE_QUEUED_SPIN_UNLOCK);</span>
<span class="p_add">+DEF_NATIVE(pv_lock_ops,	vcpu_is_preempted,	NATIVE_ZERO);</span>
 #endif
 
 unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



