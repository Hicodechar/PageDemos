
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,3/9] x86/head: Move early exception panic code into early_fixup_exception - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,3/9] x86/head: Move early exception panic code into early_fixup_exception</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 4, 2016, 7:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160404193803.GK351@pd.tnic&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8743791/mbox/"
   >mbox</a>
|
   <a href="/patch/8743791/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8743791/">/patch/8743791/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id E20689F38C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Apr 2016 19:38:19 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 42C8D2025A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Apr 2016 19:38:19 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8ABD220272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Apr 2016 19:38:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756384AbcDDTiP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Apr 2016 15:38:15 -0400
Received: from mail.skyhub.de ([78.46.96.112]:40255 &quot;EHLO mail.skyhub.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754591AbcDDTiN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Apr 2016 15:38:13 -0400
X-Virus-Scanned: Nedap ESD1 at mail.skyhub.de
Received: from mail.skyhub.de ([127.0.0.1])
	by localhost (door.skyhub.de [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id GPOeQPP5SKb9; Mon,  4 Apr 2016 21:38:11 +0200 (CEST)
Received: from pd.tnic (p5DDC51EF.dip0.t-ipconnect.de [93.220.81.239])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id
	0E6F3245A95; Mon,  4 Apr 2016 21:38:11 +0200 (CEST)
Received: by pd.tnic (Postfix, from userid 1000)
	id 834421617AB; Mon,  4 Apr 2016 21:38:03 +0200 (CEST)
Date: Mon, 4 Apr 2016 21:38:03 +0200
From: Borislav Petkov &lt;bp@alien8.de&gt;
To: Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Jan Kara &lt;jack@suse.cz&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	xen-devel &lt;Xen-devel@lists.xen.org&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;, X86 ML &lt;x86@kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Petr Mladek &lt;pmladek@suse.cz&gt;, KVM list &lt;kvm@vger.kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: Re: [PATCH v5 3/9] x86/head: Move early exception panic code into
	early_fixup_exception
Message-ID: &lt;20160404193803.GK351@pd.tnic&gt;
References: &lt;cover.1459605520.git.luto@kernel.org&gt;
	&lt;4085070316fc3ab29538d3fcfe282648d1d4ee2e.1459605520.git.luto@kernel.org&gt;
	&lt;20160402183919.GA2538@pd.tnic&gt;
	&lt;CALCETrUJVDpzNQMsY=_jWNOMer+TdW2p4wES4OBCfYU7gq3fbg@mail.gmail.com&gt;
	&lt;20160402204752.GC2538@pd.tnic&gt;
	&lt;CALCETrXHR3T3PJwOWRFHTMK5WjhDyTJfaJtkiHd+g7evnqp54A@mail.gmail.com&gt;
	&lt;20160404115206.GG8372@quack.suse.cz&gt;
	&lt;CALCETrVriftUPNZ8pCQ1x9TWDHnRx8fWUvJgCQToPEOxqMLb3w@mail.gmail.com&gt;
	&lt;20160404160042.GB3448@twins.programming.kicks-ass.net&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: &lt;20160404160042.GB3448@twins.programming.kicks-ass.net&gt;
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - April 4, 2016, 7:38 p.m.</div>
<pre class="content">
On Mon, Apr 04, 2016 at 06:00:42PM +0200, Peter Zijlstra wrote:
<span class="quote">&gt; On Mon, Apr 04, 2016 at 08:32:21AM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Adding locking would be easy enough, wouldn&#39;t it?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; See patch in this thread..</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; But do any platforms really boot a second CPU before switching to real</span>
<span class="quote">&gt; &gt; printk? </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I _only_ use early_printk() as printk() is a quagmire of fail :-)</span>

And since I&#39;m the king of minimalistic changes... this below
works. However, the problem is that we need to pull up all that
early_param parsing in order to enable the early console, i.e.
&quot;earlyprintk=ttyS0,115200&quot; cmdline parsing.

And we can do all that after having setup the IDT. So I&#39;d need to do
some early dancing with cmdline_find_option_bool(boot_command_line, ...
in asm or so. Need to think about it more.

---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - April 4, 2016, 9:31 p.m.</div>
<pre class="content">
On Mon, Apr 4, 2016 at 12:38 PM, Borislav Petkov &lt;bp@alien8.de&gt; wrote:
<span class="quote">&gt; On Mon, Apr 04, 2016 at 06:00:42PM +0200, Peter Zijlstra wrote:</span>
<span class="quote">&gt;&gt; On Mon, Apr 04, 2016 at 08:32:21AM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; Adding locking would be easy enough, wouldn&#39;t it?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; See patch in this thread..</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; But do any platforms really boot a second CPU before switching to real</span>
<span class="quote">&gt;&gt; &gt; printk?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I _only_ use early_printk() as printk() is a quagmire of fail :-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And since I&#39;m the king of minimalistic changes... this below</span>
<span class="quote">&gt; works. However, the problem is that we need to pull up all that</span>
<span class="quote">&gt; early_param parsing in order to enable the early console, i.e.</span>
<span class="quote">&gt; &quot;earlyprintk=ttyS0,115200&quot; cmdline parsing.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And we can do all that after having setup the IDT. So I&#39;d need to do</span>
<span class="quote">&gt; some early dancing with cmdline_find_option_bool(boot_command_line, ...</span>
<span class="quote">&gt; in asm or so. Need to think about it more.</span>
<span class="quote">&gt;</span>

I&#39;d be nervous about moving early param parsing, especially as part of
the same patch.

Could you do it by moving just the earlyprintk stuff a la
fpu__init_parse_early_param()?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - April 4, 2016, 9:40 p.m.</div>
<pre class="content">
On Mon, Apr 04, 2016 at 02:31:46PM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; Could you do it by moving just the earlyprintk stuff a la</span>
<span class="quote">&gt; fpu__init_parse_early_param()?</span>

Yeah, something like that. I&#39;ll play with this more tomorrow. Btw, no
need to make any of this part of your patchset - I&#39;d like early changes
like that to cook longer for obvious reasons anyway...
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index 1f4422d5c8d0..ad534226653b 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -130,6 +130,13 @@</span> <span class="p_context"> static void __init copy_bootdata(char *real_mode_data)</span>
 	}
 }
 
<span class="p_add">+static int _early_printk(const char *fmt, va_list args)</span>
<span class="p_add">+{</span>
<span class="p_add">+	early_printk(fmt, args);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)
 {
 	int i;
<span class="p_chunk">@@ -164,6 +171,10 @@</span> <span class="p_context"> asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)</span>
 	load_idt((const struct desc_ptr *)&amp;idt_descr);
 
 	copy_bootdata(__va(real_mode_data));
<span class="p_add">+	parse_early_param();</span>
<span class="p_add">+	this_cpu_write(printk_func, _early_printk);</span>
<span class="p_add">+</span>
<span class="p_add">+	printk(&quot;This is a test!\n&quot;);</span>
 
 	/*
 	 * Load microcode early on BSP.
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 2367ae07eb76..998d6c675549 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -882,6 +882,7 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	 */
 	__flush_tlb_all();
 #else
<span class="p_add">+	this_cpu_write(printk_func, vprintk_default);</span>
 	printk(KERN_INFO &quot;Command line: %s\n&quot;, boot_command_line);
 #endif
 
<span class="p_header">diff --git a/include/linux/printk.h b/include/linux/printk.h</span>
<span class="p_header">index 9ccbdf2c1453..97df81c97b2f 100644</span>
<span class="p_header">--- a/include/linux/printk.h</span>
<span class="p_header">+++ b/include/linux/printk.h</span>
<span class="p_chunk">@@ -169,6 +169,7 @@</span> <span class="p_context"> void __init setup_log_buf(int early);</span>
 __printf(1, 2) void dump_stack_set_arch_desc(const char *fmt, ...);
 void dump_stack_print_info(const char *log_lvl);
 void show_regs_print_info(const char *log_lvl);
<span class="p_add">+int vprintk_default(const char *fmt, va_list args);</span>
 #else
 static inline __printf(1, 0)
 int vprintk(const char *s, va_list args)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



