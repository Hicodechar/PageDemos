
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,1/4] mm: refactoring TLB gathering API - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,1/4] mm: refactoring TLB gathering API</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 1, 2017, 5:56 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1501566977-20293-2-git-send-email-minchan@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9873695/mbox/"
   >mbox</a>
|
   <a href="/patch/9873695/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9873695/">/patch/9873695/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D906F603B4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 05:57:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C653A2864C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 05:57:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BA84B2862D; Tue,  1 Aug 2017 05:57:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C82B82864F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Aug 2017 05:57:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751681AbdHAF4Y (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 1 Aug 2017 01:56:24 -0400
Received: from LGEAMRELO13.lge.com ([156.147.23.53]:53640 &quot;EHLO
	lgeamrelo13.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751092AbdHAF4V (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 1 Aug 2017 01:56:21 -0400
Received: from unknown (HELO lgeamrelo02.lge.com) (156.147.1.126)
	by 156.147.23.53 with ESMTP; 1 Aug 2017 14:56:19 +0900
X-Original-SENDERIP: 156.147.1.126
X-Original-MAILFROM: minchan@kernel.org
Received: from unknown (HELO localhost.localdomain) (10.177.220.163)
	by 156.147.1.126 with ESMTP; 1 Aug 2017 14:56:19 +0900
X-Original-SENDERIP: 10.177.220.163
X-Original-MAILFROM: minchan@kernel.org
From: Minchan Kim &lt;minchan@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	kernel-team &lt;kernel-team@lge.com&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Russell King &lt;linux@armlinux.org.uk&gt;,
	Tony Luck &lt;tony.luck@intel.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;,
	Jeff Dike &lt;jdike@addtoit.com&gt;, linux-arch@vger.kernel.org,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;
Subject: [PATCH v2 1/4] mm: refactoring TLB gathering API
Date: Tue,  1 Aug 2017 14:56:14 +0900
Message-Id: &lt;1501566977-20293-2-git-send-email-minchan@kernel.org&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1501566977-20293-1-git-send-email-minchan@kernel.org&gt;
References: &lt;1501566977-20293-1-git-send-email-minchan@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 1, 2017, 5:56 a.m.</div>
<pre class="content">
This patch is ready for solving race problems caused by TLB batch.
For that, we will increase/decrease TLB flush pending count of
mm_struct whenever tlb_[gather|finish]_mmu is called.

Before making it simple, this patch separates architecture specific
part and rename it to arch_tlb_[gather|finish]_mmu and generic part
just calls it.

It shouldn&#39;t change any behavior.

Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: Russell King &lt;linux@armlinux.org.uk&gt;
Cc: Tony Luck &lt;tony.luck@intel.com&gt;
Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;
Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;
Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;
Cc: Jeff Dike &lt;jdike@addtoit.com&gt;
Cc: linux-arch@vger.kernel.org
Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
<span class="signed-off-by">Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
---
 arch/arm/include/asm/tlb.h  |  6 ++++--
 arch/ia64/include/asm/tlb.h |  6 ++++--
 arch/s390/include/asm/tlb.h | 12 ++++++------
 arch/sh/include/asm/tlb.h   |  6 ++++--
 arch/um/include/asm/tlb.h   |  8 +++++---
 include/asm-generic/tlb.h   |  7 ++++---
 include/linux/mm_types.h    |  6 ++++++
 mm/memory.c                 | 36 +++++++++++++++++++++++++++++-------
 8 files changed, 62 insertions(+), 25 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=138281">Mel Gorman</a> - Aug. 1, 2017, 10:30 a.m.</div>
<pre class="content">
On Tue, Aug 01, 2017 at 02:56:14PM +0900, Minchan Kim wrote:
<span class="quote">&gt; This patch is ready for solving race problems caused by TLB batch.</span>

s/is ready/is a preparatory patch/
<span class="quote">
&gt; For that, we will increase/decrease TLB flush pending count of</span>
<span class="quote">&gt; mm_struct whenever tlb_[gather|finish]_mmu is called.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Before making it simple, this patch separates architecture specific</span>
<span class="quote">&gt; part and rename it to arch_tlb_[gather|finish]_mmu and generic part</span>
<span class="quote">&gt; just calls it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It shouldn&#39;t change any behavior.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Russell King &lt;linux@armlinux.org.uk&gt;</span>
<span class="quote">&gt; Cc: Tony Luck &lt;tony.luck@intel.com&gt;</span>
<span class="quote">&gt; Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
<span class="quote">&gt; Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>
<span class="quote">&gt; Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;</span>
<span class="quote">&gt; Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;</span>
<span class="quote">&gt; Cc: Jeff Dike &lt;jdike@addtoit.com&gt;</span>
<span class="quote">&gt; Cc: linux-arch@vger.kernel.org</span>
<span class="quote">&gt; Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>

You could alias arch_generic_tlb_finish_mmu as arch_tlb_gather_mmu
simiilar to how other arch-generic helpers are done to avoid some
#ifdeffery but otherwise
<span class="acked-by">
Acked-by: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=55071">Nadav Amit</a> - Aug. 2, 2017, 12:46 a.m.</div>
<pre class="content">
Mel Gorman &lt;mgorman@techsingularity.net&gt; wrote:
<span class="quote">
&gt; On Tue, Aug 01, 2017 at 02:56:14PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt;&gt; This patch is ready for solving race problems caused by TLB batch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; s/is ready/is a preparatory patch/</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; For that, we will increase/decrease TLB flush pending count of</span>
<span class="quote">&gt;&gt; mm_struct whenever tlb_[gather|finish]_mmu is called.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Before making it simple, this patch separates architecture specific</span>
<span class="quote">&gt;&gt; part and rename it to arch_tlb_[gather|finish]_mmu and generic part</span>
<span class="quote">&gt;&gt; just calls it.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; It shouldn&#39;t change any behavior.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Russell King &lt;linux@armlinux.org.uk&gt;</span>
<span class="quote">&gt;&gt; Cc: Tony Luck &lt;tony.luck@intel.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
<span class="quote">&gt;&gt; Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>
<span class="quote">&gt;&gt; Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;</span>
<span class="quote">&gt;&gt; Cc: Jeff Dike &lt;jdike@addtoit.com&gt;</span>
<span class="quote">&gt;&gt; Cc: linux-arch@vger.kernel.org</span>
<span class="quote">&gt;&gt; Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You could alias arch_generic_tlb_finish_mmu as arch_tlb_gather_mmu</span>
<span class="quote">&gt; simiilar to how other arch-generic helpers are done to avoid some</span>
<span class="quote">&gt; #ifdeffery but otherwise</span>

Minchan,

Andrew wishes me to send one series that combines both series. What about
this comment from Mel? It seems you intentionally did not want to alias
them...

BTW: patch 4 should add “#include &lt;asm/tlb.h&gt;&quot; - I’ll add it. 

Thanks,
Nadav
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 2, 2017, 12:53 a.m.</div>
<pre class="content">
Hi Nadav,

On Tue, Aug 01, 2017 at 05:46:14PM -0700, Nadav Amit wrote:
<span class="quote">&gt; Mel Gorman &lt;mgorman@techsingularity.net&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Tue, Aug 01, 2017 at 02:56:14PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt;&gt; This patch is ready for solving race problems caused by TLB batch.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; s/is ready/is a preparatory patch/</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; For that, we will increase/decrease TLB flush pending count of</span>
<span class="quote">&gt; &gt;&gt; mm_struct whenever tlb_[gather|finish]_mmu is called.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Before making it simple, this patch separates architecture specific</span>
<span class="quote">&gt; &gt;&gt; part and rename it to arch_tlb_[gather|finish]_mmu and generic part</span>
<span class="quote">&gt; &gt;&gt; just calls it.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; It shouldn&#39;t change any behavior.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Russell King &lt;linux@armlinux.org.uk&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Tony Luck &lt;tony.luck@intel.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Jeff Dike &lt;jdike@addtoit.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: linux-arch@vger.kernel.org</span>
<span class="quote">&gt; &gt;&gt; Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; You could alias arch_generic_tlb_finish_mmu as arch_tlb_gather_mmu</span>
<span class="quote">&gt; &gt; simiilar to how other arch-generic helpers are done to avoid some</span>
<span class="quote">&gt; &gt; #ifdeffery but otherwise</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Minchan,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Andrew wishes me to send one series that combines both series. What about</span>
<span class="quote">&gt; this comment from Mel? It seems you intentionally did not want to alias</span>
<span class="quote">&gt; them...</span>

It was not intentional but just forgot it. :(
I really appreciate if you could do for me. :)
<span class="quote">
&gt; </span>
<span class="quote">&gt; BTW: patch 4 should add “#include &lt;asm/tlb.h&gt;&quot; - I’ll add it. </span>

Thanks!
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 2, 2017, 12:56 a.m.</div>
<pre class="content">
Hi Mel,

On Tue, Aug 01, 2017 at 11:30:55AM +0100, Mel Gorman wrote:
<span class="quote">&gt; On Tue, Aug 01, 2017 at 02:56:14PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; This patch is ready for solving race problems caused by TLB batch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; s/is ready/is a preparatory patch/</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; For that, we will increase/decrease TLB flush pending count of</span>
<span class="quote">&gt; &gt; mm_struct whenever tlb_[gather|finish]_mmu is called.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Before making it simple, this patch separates architecture specific</span>
<span class="quote">&gt; &gt; part and rename it to arch_tlb_[gather|finish]_mmu and generic part</span>
<span class="quote">&gt; &gt; just calls it.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; It shouldn&#39;t change any behavior.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Russell King &lt;linux@armlinux.org.uk&gt;</span>
<span class="quote">&gt; &gt; Cc: Tony Luck &lt;tony.luck@intel.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
<span class="quote">&gt; &gt; Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>
<span class="quote">&gt; &gt; Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;</span>
<span class="quote">&gt; &gt; Cc: Jeff Dike &lt;jdike@addtoit.com&gt;</span>
<span class="quote">&gt; &gt; Cc: linux-arch@vger.kernel.org</span>
<span class="quote">&gt; &gt; Cc: Nadav Amit &lt;nadav.amit@gmail.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You could alias arch_generic_tlb_finish_mmu as arch_tlb_gather_mmu</span>
<span class="quote">&gt; simiilar to how other arch-generic helpers are done to avoid some</span>
<span class="quote">&gt; #ifdeffery but otherwise</span>

Good idea. With Andrew&#39;s suggestion, Nadav will resend whole series
including his patchset. I asked to him to fix it when he respin.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Acked-by: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>

Thanks for the review!
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/tlb.h b/arch/arm/include/asm/tlb.h</span>
<span class="p_header">index 3f2eb76243e3..7f5b2a2d3861 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/tlb.h</span>
<span class="p_chunk">@@ -148,7 +148,8 @@</span> <span class="p_context"> static inline void tlb_flush_mmu(struct mmu_gather *tlb)</span>
 }
 
 static inline void
<span class="p_del">-tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;fullmm = !(start | (end+1));
<span class="p_chunk">@@ -166,7 +167,8 @@</span> <span class="p_context"> tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start</span>
 }
 
 static inline void
<span class="p_del">-tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	tlb_flush_mmu(tlb);
 
<span class="p_header">diff --git a/arch/ia64/include/asm/tlb.h b/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">index fced197b9626..93cadc04ac62 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -168,7 +168,8 @@</span> <span class="p_context"> static inline void __tlb_alloc_page(struct mmu_gather *tlb)</span>
 
 
 static inline void
<span class="p_del">-tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;max = ARRAY_SIZE(tlb-&gt;local);
<span class="p_chunk">@@ -185,7 +186,8 @@</span> <span class="p_context"> tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start</span>
  * collected.
  */
 static inline void
<span class="p_del">-tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	/*
 	 * Note: tlb-&gt;nr may be 0 at this point, so we can&#39;t rely on tlb-&gt;start_addr and
<span class="p_header">diff --git a/arch/s390/include/asm/tlb.h b/arch/s390/include/asm/tlb.h</span>
<span class="p_header">index 950af48e88be..fa4b461694b7 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/tlb.h</span>
<span class="p_chunk">@@ -47,10 +47,9 @@</span> <span class="p_context"> struct mmu_table_batch {</span>
 extern void tlb_table_flush(struct mmu_gather *tlb);
 extern void tlb_remove_table(struct mmu_gather *tlb, void *table);
 
<span class="p_del">-static inline void tlb_gather_mmu(struct mmu_gather *tlb,</span>
<span class="p_del">-				  struct mm_struct *mm,</span>
<span class="p_del">-				  unsigned long start,</span>
<span class="p_del">-				  unsigned long end)</span>
<span class="p_add">+static inline void</span>
<span class="p_add">+arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_chunk">@@ -76,8 +75,9 @@</span> <span class="p_context"> static inline void tlb_flush_mmu(struct mmu_gather *tlb)</span>
 	tlb_flush_mmu_free(tlb);
 }
 
<span class="p_del">-static inline void tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_del">-				  unsigned long start, unsigned long end)</span>
<span class="p_add">+static inline void</span>
<span class="p_add">+arch_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	tlb_flush_mmu(tlb);
 }
<span class="p_header">diff --git a/arch/sh/include/asm/tlb.h b/arch/sh/include/asm/tlb.h</span>
<span class="p_header">index 46e0d635e36f..89786560dbd4 100644</span>
<span class="p_header">--- a/arch/sh/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/sh/include/asm/tlb.h</span>
<span class="p_chunk">@@ -36,7 +36,8 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 }
 
 static inline void
<span class="p_del">-tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_chunk">@@ -47,7 +48,8 @@</span> <span class="p_context"> tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start</span>
 }
 
 static inline void
<span class="p_del">-tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	if (tlb-&gt;fullmm)
 		flush_tlb_mm(tlb-&gt;mm);
<span class="p_header">diff --git a/arch/um/include/asm/tlb.h b/arch/um/include/asm/tlb.h</span>
<span class="p_header">index 600a2e9bfee2..2a901eca7145 100644</span>
<span class="p_header">--- a/arch/um/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/um/include/asm/tlb.h</span>
<span class="p_chunk">@@ -45,7 +45,8 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 }
 
 static inline void
<span class="p_del">-tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_chunk">@@ -80,12 +81,13 @@</span> <span class="p_context"> tlb_flush_mmu(struct mmu_gather *tlb)</span>
 	tlb_flush_mmu_free(tlb);
 }
 
<span class="p_del">-/* tlb_finish_mmu</span>
<span class="p_add">+/* arch_tlb_finish_mmu</span>
  *	Called at the end of the shootdown operation to free up any resources
  *	that were required.
  */
 static inline void
<span class="p_del">-tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)</span>
<span class="p_add">+arch_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	tlb_flush_mmu(tlb);
 
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index 8afa4335e5b2..ae05fdf96c2d 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -112,10 +112,11 @@</span> <span class="p_context"> struct mmu_gather {</span>
 
 #define HAVE_GENERIC_MMU_GATHER
 
<span class="p_del">-void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end);</span>
<span class="p_add">+void arch_generic_tlb_gather_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+	struct mm_struct *mm, unsigned long start, unsigned long end);</span>
 void tlb_flush_mmu(struct mmu_gather *tlb);
<span class="p_del">-void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start,</span>
<span class="p_del">-							unsigned long end);</span>
<span class="p_add">+void arch_generic_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end);</span>
 extern bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page,
 				   int page_size);
 
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 0e478ebd2706..c605f2a3a68e 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -522,6 +522,12 @@</span> <span class="p_context"> static inline cpumask_t *mm_cpumask(struct mm_struct *mm)</span>
 	return mm-&gt;cpu_vm_mask_var;
 }
 
<span class="p_add">+struct mmu_gather;</span>
<span class="p_add">+extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+				unsigned long start, unsigned long end);</span>
<span class="p_add">+extern void tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+				unsigned long start, unsigned long end);</span>
<span class="p_add">+</span>
 #if defined(CONFIG_NUMA_BALANCING) || defined(CONFIG_COMPACTION)
 /*
  * Memory barriers to keep this state in sync are graciously provided by
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index edabf6f03447..80012d7a9451 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -215,12 +215,8 @@</span> <span class="p_context"> static bool tlb_next_batch(struct mmu_gather *tlb)</span>
 	return true;
 }
 
<span class="p_del">-/* tlb_gather_mmu</span>
<span class="p_del">- *	Called to initialize an (on-stack) mmu_gather structure for page-table</span>
<span class="p_del">- *	tear-down from @mm. The @fullmm argument is used when @mm is without</span>
<span class="p_del">- *	users and we&#39;re going to destroy the full address space (exit/execve).</span>
<span class="p_del">- */</span>
<span class="p_del">-void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, unsigned long start, unsigned long end)</span>
<span class="p_add">+void arch_generic_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+				unsigned long start, unsigned long end)</span>
 {
 	tlb-&gt;mm = mm;
 
<span class="p_chunk">@@ -275,7 +271,8 @@</span> <span class="p_context"> void tlb_flush_mmu(struct mmu_gather *tlb)</span>
  *	Called at the end of the shootdown operation to free up any resources
  *	that were required.
  */
<span class="p_del">-void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)</span>
<span class="p_add">+void arch_generic_tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
 {
 	struct mmu_gather_batch *batch, *next;
 
<span class="p_chunk">@@ -398,6 +395,31 @@</span> <span class="p_context"> void tlb_remove_table(struct mmu_gather *tlb, void *table)</span>
 
 #endif /* CONFIG_HAVE_RCU_TABLE_FREE */
 
<span class="p_add">+/* tlb_gather_mmu</span>
<span class="p_add">+ *	Called to initialize an (on-stack) mmu_gather structure for page-table</span>
<span class="p_add">+ *	tear-down from @mm. The @fullmm argument is used when @mm is without</span>
<span class="p_add">+ *	users and we&#39;re going to destroy the full address space (exit/execve).</span>
<span class="p_add">+ */</span>
<span class="p_add">+void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,</span>
<span class="p_add">+			unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef HAVE_GENERIC_MMU_GATHER</span>
<span class="p_add">+	arch_generic_tlb_gather_mmu(tlb, mm, start, end);</span>
<span class="p_add">+#else</span>
<span class="p_add">+	arch_tlb_gather_mmu(tlb, mm, start, end);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="p_add">+		unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef HAVE_GENERIC_MMU_GATHER</span>
<span class="p_add">+	arch_generic_tlb_finish_mmu(tlb, start, end);</span>
<span class="p_add">+#else</span>
<span class="p_add">+	arch_tlb_finish_mmu(tlb, start, end);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Note: this doesn&#39;t free the actual pages themselves. That
  * has been handled earlier when unmapping all the memory regions.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



