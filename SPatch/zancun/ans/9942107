
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/urgent] x86/mm: Make the SME mask a u64 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/urgent] x86/mm: Make the SME mask a u64</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 7, 2017, 10:34 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-21d9bb4a05bac50fb4f850517af4030baecd00f6@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9942107/mbox/"
   >mbox</a>
|
   <a href="/patch/9942107/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9942107/">/patch/9942107/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8EC3F6035F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 10:38:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 681F12015F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 10:38:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5C05827FB1; Thu,  7 Sep 2017 10:38:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B37332015F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 10:38:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754854AbdIGKiH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 7 Sep 2017 06:38:07 -0400
Received: from terminus.zytor.com ([65.50.211.136]:51565 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754633AbdIGKiF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 7 Sep 2017 06:38:05 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v87AYLWn011564;
	Thu, 7 Sep 2017 03:34:21 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v87AYLvx011561;
	Thu, 7 Sep 2017 03:34:21 -0700
Date: Thu, 7 Sep 2017 03:34:21 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Borislav Petkov &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-21d9bb4a05bac50fb4f850517af4030baecd00f6@git.kernel.org&gt;
Cc: tglx@linutronix.de, hpa@zytor.com, bp@suse.de,
	linux-kernel@vger.kernel.org, boris.ostrovsky@oracle.com,
	brijesh.singh@amd.com, peterz@infradead.org, mingo@kernel.org,
	Thomas.Lendacky@amd.com, torvalds@linux-foundation.org
Reply-To: mingo@kernel.org, Thomas.Lendacky@amd.com,
	torvalds@linux-foundation.org, peterz@infradead.org,
	brijesh.singh@amd.com, boris.ostrovsky@oracle.com,
	linux-kernel@vger.kernel.org, bp@suse.de, hpa@zytor.com,
	tglx@linutronix.de
In-Reply-To: &lt;20170907093837.76zojtkgebwtqc74@pd.tnic&gt;
References: &lt;20170907093837.76zojtkgebwtqc74@pd.tnic&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/urgent] x86/mm: Make the SME mask a u64
Git-Commit-ID: 21d9bb4a05bac50fb4f850517af4030baecd00f6
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Sept. 7, 2017, 10:34 a.m.</div>
<pre class="content">
Commit-ID:  21d9bb4a05bac50fb4f850517af4030baecd00f6
Gitweb:     http://git.kernel.org/tip/21d9bb4a05bac50fb4f850517af4030baecd00f6
Author:     Borislav Petkov &lt;bp@suse.de&gt;
AuthorDate: Thu, 7 Sep 2017 11:38:37 +0200
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Thu, 7 Sep 2017 11:53:11 +0200

x86/mm: Make the SME mask a u64

The SME encryption mask is for masking 64-bit pagetable entries. It
being an unsigned long works fine on X86_64 but on 32-bit builds in
truncates bits leading to Xen guests crashing very early.

And regardless, the whole SME mask handling shouldnt&#39;ve leaked into
32-bit because SME is X86_64-only feature. So, first make the mask u64.
And then, add trivial 32-bit versions of the __sme_* macros so that
nothing happens there.

Reported-and-tested-by: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
<span class="tested-by">Tested-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="acked-by">Acked-by: Tom Lendacky &lt;Thomas.Lendacky@amd.com&gt;</span>
<span class="acked-by">Acked-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas &lt;Thomas.Lendacky@amd.com&gt;
Fixes: 21729f81ce8a (&quot;x86/mm: Provide general kernel support for memory encryption&quot;)
Link: http://lkml.kernel.org/r/20170907093837.76zojtkgebwtqc74@pd.tnic
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |  4 ++--
 arch/x86/mm/mem_encrypt.c          |  2 +-
 include/linux/mem_encrypt.h        | 13 +++++++++----
 3 files changed, 12 insertions(+), 7 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 8e618fc..6a77c63 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -21,7 +21,7 @@</span> <span class="p_context"></span>
 
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
<span class="p_del">-extern unsigned long sme_me_mask;</span>
<span class="p_add">+extern u64 sme_me_mask;</span>
 
 void sme_encrypt_execute(unsigned long encrypted_kernel_vaddr,
 			 unsigned long decrypted_kernel_vaddr,
<span class="p_chunk">@@ -49,7 +49,7 @@</span> <span class="p_context"> void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
 
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_del">-#define sme_me_mask	0UL</span>
<span class="p_add">+#define sme_me_mask	0ULL</span>
 
 static inline void __init sme_early_encrypt(resource_size_t paddr,
 					    unsigned long size) { }
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 0fbd092..3fcc8e0 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -37,7 +37,7 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
  * reside in the .data section so as not to be zeroed out when the .bss
  * section is later cleared.
  */
<span class="p_del">-unsigned long sme_me_mask __section(.data) = 0;</span>
<span class="p_add">+u64 sme_me_mask __section(.data) = 0;</span>
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
 /* Buffer used for early in-place encryption by BSP, no locking needed */
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 1255f09..265a9cd 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -21,7 +21,7 @@</span> <span class="p_context"></span>
 
 #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-#define sme_me_mask	0UL</span>
<span class="p_add">+#define sme_me_mask	0ULL</span>
 
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_chunk">@@ -30,18 +30,23 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return !!sme_me_mask;
 }
 
<span class="p_del">-static inline unsigned long sme_get_me_mask(void)</span>
<span class="p_add">+static inline u64 sme_get_me_mask(void)</span>
 {
 	return sme_me_mask;
 }
 
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
 /*
  * The __sme_set() and __sme_clr() macros are useful for adding or removing
  * the encryption mask from a value (e.g. when dealing with pagetable
  * entries).
  */
<span class="p_del">-#define __sme_set(x)		((unsigned long)(x) | sme_me_mask)</span>
<span class="p_del">-#define __sme_clr(x)		((unsigned long)(x) &amp; ~sme_me_mask)</span>
<span class="p_add">+#define __sme_set(x)		((x) | sme_me_mask)</span>
<span class="p_add">+#define __sme_clr(x)		((x) &amp; ~sme_me_mask)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define __sme_set(x)		(x)</span>
<span class="p_add">+#define __sme_clr(x)		(x)</span>
<span class="p_add">+#endif</span>
 
 #endif	/* __ASSEMBLY__ */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



