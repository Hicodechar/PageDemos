
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[17/32] x86, pkeys: check VMAs and PTEs for protection keys - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [17/32] x86, pkeys: check VMAs and PTEs for protection keys</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 14, 2015, 7:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151214190612.32A72AD2@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7847441/mbox/"
   >mbox</a>
|
   <a href="/patch/7847441/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7847441/">/patch/7847441/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id EA2699F350
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:11:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8E90720386
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:11:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F25B6203A4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 14 Dec 2015 19:11:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932638AbbLNTLt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 14 Dec 2015 14:11:49 -0500
Received: from mga11.intel.com ([192.55.52.93]:35784 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932330AbbLNTGN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 14 Dec 2015 14:06:13 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by fmsmga102.fm.intel.com with ESMTP; 14 Dec 2015 11:06:12 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,428,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;617862690&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.121])
	by FMSMGA003.fm.intel.com with ESMTP; 14 Dec 2015 11:06:12 -0800
Subject: [PATCH 17/32] x86, pkeys: check VMAs and PTEs for protection keys
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, x86@kernel.org, Dave Hansen &lt;dave@sr71.net&gt;,
	dave.hansen@linux.intel.com
From: Dave Hansen &lt;dave@sr71.net&gt;
Date: Mon, 14 Dec 2015 11:06:12 -0800
References: &lt;20151214190542.39C4886D@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20151214190542.39C4886D@viggo.jf.intel.com&gt;
Message-Id: &lt;20151214190612.32A72AD2@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Dec. 14, 2015, 7:06 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

Today, for normal faults and page table walks, we check the VMA
and/or PTE to ensure that it is compatible with the action.  For
instance, if we get a write fault on a non-writeable VMA, we
SIGSEGV.

We try to do the same thing for protection keys.  Basically, we
try to make sure that if a user does this:

	mprotect(ptr, size, PROT_NONE);
	*ptr = foo;

they see the same effects with protection keys when they do this:

	mprotect(ptr, size, PROT_READ|PROT_WRITE);
	set_pkey(ptr, size, 4);
	wrpkru(0xffffff3f); // access disable pkey 4
	*ptr = foo;

The state to do that checking is in the VMA, but we also
sometimes have to do it on the page tables only, like when doing
a get_user_pages_fast() where we have no VMA.

We add two functions and expose them to generic code:

	arch_pte_access_permitted(pte_flags, write)
	arch_vma_access_permitted(vma, write)

These are, of course, backed up in x86 arch code with checks
against the PTE or VMA&#39;s protection key.

But, there are also cases where we do not want to respect
protection keys.  When we ptrace(), for instance, we do not want
to apply the tracer&#39;s PKRU permissions to the PTEs from the
process being traced.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---

 b/arch/powerpc/include/asm/mmu_context.h   |   11 ++++++
 b/arch/s390/include/asm/mmu_context.h      |   11 ++++++
 b/arch/unicore32/include/asm/mmu_context.h |   11 ++++++
 b/arch/x86/include/asm/mmu_context.h       |   49 +++++++++++++++++++++++++++++
 b/arch/x86/include/asm/pgtable.h           |   29 +++++++++++++++++
 b/arch/x86/mm/fault.c                      |   21 +++++++++++-
 b/arch/x86/mm/gup.c                        |    5 ++
 b/include/asm-generic/mm_hooks.h           |   11 ++++++
 b/mm/gup.c                                 |   18 ++++++++--
 b/mm/memory.c                              |    4 ++
 10 files changed, 166 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/powerpc/include/asm/mmu_context.h~pkeys-13-pte-fault arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h~pkeys-13-pte-fault	2015-12-14 10:42:46.096950632 -0800</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h	2015-12-14 10:42:46.114951438 -0800</span>
<span class="p_chunk">@@ -148,5 +148,16 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __KERNEL__ */
 #endif /* __ASM_POWERPC_MMU_CONTEXT_H */
<span class="p_header">diff -puN arch/s390/include/asm/mmu_context.h~pkeys-13-pte-fault arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/s390/include/asm/mmu_context.h~pkeys-13-pte-fault	2015-12-14 10:42:46.098950721 -0800</span>
<span class="p_header">+++ b/arch/s390/include/asm/mmu_context.h	2015-12-14 10:42:46.114951438 -0800</span>
<span class="p_chunk">@@ -130,4 +130,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __S390_MMU_CONTEXT_H */
<span class="p_header">diff -puN arch/unicore32/include/asm/mmu_context.h~pkeys-13-pte-fault arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/unicore32/include/asm/mmu_context.h~pkeys-13-pte-fault	2015-12-14 10:42:46.099950766 -0800</span>
<span class="p_header">+++ b/arch/unicore32/include/asm/mmu_context.h	2015-12-14 10:42:46.114951438 -0800</span>
<span class="p_chunk">@@ -97,4 +97,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif
<span class="p_header">diff -puN arch/x86/include/asm/mmu_context.h~pkeys-13-pte-fault arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h~pkeys-13-pte-fault	2015-12-14 10:42:46.101950856 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h	2015-12-14 10:42:46.115951483 -0800</span>
<span class="p_chunk">@@ -254,4 +254,53 @@</span> <span class="p_context"> static inline int vma_pkey(struct vm_are</span>
 	return pkey;
 }
 
<span class="p_add">+static inline bool __pkru_allows_pkey(u16 pkey, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 pkru = read_pkru();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!__pkru_allows_read(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (write &amp;&amp; !__pkru_allows_write(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * We only want to enforce protection keys on the current process</span>
<span class="p_add">+ * because we effectively have no access to PKRU for other</span>
<span class="p_add">+ * processes or any way to tell *which * PKRU in a threaded</span>
<span class="p_add">+ * process we could use.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * So do not enforce things if the VMA is not from the current</span>
<span class="p_add">+ * mm, or if we are in a kernel thread.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool vma_is_foreign(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!current-&gt;mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Should PKRU be enforced on the access to this VMA?  If</span>
<span class="p_add">+	 * the VMA is from another process, then PKRU has no</span>
<span class="p_add">+	 * relevance and should not be enforced.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (current-&gt;mm != vma-&gt;vm_mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* allow access if the VMA is not one from this process */</span>
<span class="p_add">+	if (vma_is_foreign(vma))</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return __pkru_allows_pkey(vma_pkey(vma), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __pkru_allows_pkey(pte_flags_pkey(pte_flags(pte)), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_MMU_CONTEXT_H */
<span class="p_header">diff -puN arch/x86/include/asm/pgtable.h~pkeys-13-pte-fault arch/x86/include/asm/pgtable.h</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h~pkeys-13-pte-fault	2015-12-14 10:42:46.103950945 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h	2015-12-14 10:42:46.115951483 -0800</span>
<span class="p_chunk">@@ -910,6 +910,35 @@</span> <span class="p_context"> static inline pte_t pte_swp_clear_soft_d</span>
 }
 #endif
 
<span class="p_add">+#define PKRU_AD_BIT 0x1</span>
<span class="p_add">+#define PKRU_WD_BIT 0x2</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_read(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	return !(pkru &amp; (PKRU_AD_BIT &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_write(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access-disable disables writes too so we need to check</span>
<span class="p_add">+	 * both bits here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return !(pkru &amp; ((PKRU_AD_BIT|PKRU_WD_BIT) &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u16 pte_flags_pkey(unsigned long pte_flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="p_add">+	/* ifdef to avoid doing 59-bit shift on 32-bit values */</span>
<span class="p_add">+	return (pte_flags &amp; _PAGE_PKEY_MASK) &gt;&gt; _PAGE_BIT_PKEY_BIT0;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #include &lt;asm-generic/pgtable.h&gt;
 #endif	/* __ASSEMBLY__ */
 
<span class="p_header">diff -puN arch/x86/mm/fault.c~pkeys-13-pte-fault arch/x86/mm/fault.c</span>
<span class="p_header">--- a/arch/x86/mm/fault.c~pkeys-13-pte-fault	2015-12-14 10:42:46.104950990 -0800</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c	2015-12-14 10:42:46.116951528 -0800</span>
<span class="p_chunk">@@ -897,6 +897,16 @@</span> <span class="p_context"> bad_area(struct pt_regs *regs, unsigned</span>
 	__bad_area(regs, error_code, address, NULL, SEGV_MAPERR);
 }
 
<span class="p_add">+static inline bool bad_area_access_from_pkeys(unsigned long error_code,</span>
<span class="p_add">+		struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static noinline void
 bad_area_access_error(struct pt_regs *regs, unsigned long error_code,
 		      unsigned long address, struct vm_area_struct *vma)
<span class="p_chunk">@@ -906,7 +916,7 @@</span> <span class="p_context"> bad_area_access_error(struct pt_regs *re</span>
 	 * But, doing it this way allows compiler optimizations
 	 * if pkeys are compiled out.
 	 */
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_OSPKE) &amp;&amp; (error_code &amp; PF_PK))</span>
<span class="p_add">+	if (bad_area_access_from_pkeys(error_code, vma))</span>
 		__bad_area(regs, error_code, address, vma, SEGV_PKUERR);
 	else
 		__bad_area(regs, error_code, address, vma, SEGV_ACCERR);
<span class="p_chunk">@@ -1081,6 +1091,15 @@</span> <span class="p_context"> int show_unhandled_signals = 1;</span>
 static inline int
 access_error(unsigned long error_code, struct vm_area_struct *vma)
 {
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access or read was blocked by protection keys. We do</span>
<span class="p_add">+	 * this check before any others because we do not want</span>
<span class="p_add">+	 * to, for instance, confuse a protection-key-denied</span>
<span class="p_add">+	 * write with one for which we should do a COW.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+</span>
 	if (error_code &amp; PF_WRITE) {
 		/* write, present and write, not present: */
 		if (unlikely(!(vma-&gt;vm_flags &amp; VM_WRITE)))
<span class="p_header">diff -puN arch/x86/mm/gup.c~pkeys-13-pte-fault arch/x86/mm/gup.c</span>
<span class="p_header">--- a/arch/x86/mm/gup.c~pkeys-13-pte-fault	2015-12-14 10:42:46.106951080 -0800</span>
<span class="p_header">+++ b/arch/x86/mm/gup.c	2015-12-14 10:42:46.116951528 -0800</span>
<span class="p_chunk">@@ -10,6 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/swap.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 
 static inline pte_t gup_get_pte(pte_t *ptep)
<span class="p_chunk">@@ -78,6 +79,10 @@</span> <span class="p_context"> static inline int pte_allows_gup(unsigne</span>
 	if ((pteval &amp; need_pte_bits) != need_pte_bits)
 		return 0;
 
<span class="p_add">+	/* Check memory protection keys permissions. */</span>
<span class="p_add">+	if (!__pkru_allows_pkey(pte_flags_pkey(pteval), write))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
 	return 1;
 }
 
<span class="p_header">diff -puN include/asm-generic/mm_hooks.h~pkeys-13-pte-fault include/asm-generic/mm_hooks.h</span>
<span class="p_header">--- a/include/asm-generic/mm_hooks.h~pkeys-13-pte-fault	2015-12-14 10:42:46.107951125 -0800</span>
<span class="p_header">+++ b/include/asm-generic/mm_hooks.h	2015-12-14 10:42:46.116951528 -0800</span>
<span class="p_chunk">@@ -26,4 +26,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif	/* _ASM_GENERIC_MM_HOOKS_H */
<span class="p_header">diff -puN mm/gup.c~pkeys-13-pte-fault mm/gup.c</span>
<span class="p_header">--- a/mm/gup.c~pkeys-13-pte-fault	2015-12-14 10:42:46.109951214 -0800</span>
<span class="p_header">+++ b/mm/gup.c	2015-12-14 10:42:46.117951573 -0800</span>
<span class="p_chunk">@@ -13,6 +13,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/rwsem.h&gt;
 #include &lt;linux/hugetlb.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 
<span class="p_chunk">@@ -391,6 +392,8 @@</span> <span class="p_context"> static int check_vma_flags(struct vm_are</span>
 		if (!(vm_flags &amp; VM_MAYREAD))
 			return -EFAULT;
 	}
<span class="p_add">+	if (!arch_vma_access_permitted(vma, (gup_flags &amp; FOLL_WRITE)))</span>
<span class="p_add">+		return -EFAULT;</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -559,13 +562,19 @@</span> <span class="p_context"> EXPORT_SYMBOL(__get_user_pages);</span>
 
 bool vma_permits_fault(struct vm_area_struct *vma, unsigned int fault_flags)
 {
<span class="p_del">-	vm_flags_t vm_flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	vm_flags = (fault_flags &amp; FAULT_FLAG_WRITE) ? VM_WRITE : VM_READ;</span>
<span class="p_add">+	bool write = !!(fault_flags &amp; FAULT_FLAG_WRITE);</span>
<span class="p_add">+	vm_flags_t vm_flags = write ? VM_WRITE : VM_READ;</span>
 
 	if (!(vm_flags &amp; vma-&gt;vm_flags))
 		return false;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The architecture might have a hardware protection</span>
<span class="p_add">+	 * mechanism other than read/write that can deny access</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, write))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
 	return true;
 }
 
<span class="p_chunk">@@ -1102,6 +1111,9 @@</span> <span class="p_context"> static int gup_pte_range(pmd_t pmd, unsi</span>
 			pte_protnone(pte) || (write &amp;&amp; !pte_write(pte)))
 			goto pte_unmap;
 
<span class="p_add">+		if (!arch_pte_access_permitted(pte, write))</span>
<span class="p_add">+			goto pte_unmap;</span>
<span class="p_add">+</span>
 		VM_BUG_ON(!pfn_valid(pte_pfn(pte)));
 		page = pte_page(pte);
 
<span class="p_header">diff -puN mm/memory.c~pkeys-13-pte-fault mm/memory.c</span>
<span class="p_header">--- a/mm/memory.c~pkeys-13-pte-fault	2015-12-14 10:42:46.111951304 -0800</span>
<span class="p_header">+++ b/mm/memory.c	2015-12-14 10:42:46.118951618 -0800</span>
<span class="p_chunk">@@ -64,6 +64,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/userfaultfd_k.h&gt;
 
 #include &lt;asm/io.h&gt;
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/uaccess.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -3344,6 +3345,9 @@</span> <span class="p_context"> static int __handle_mm_fault(struct mm_s</span>
 	pmd_t *pmd;
 	pte_t *pte;
 
<span class="p_add">+	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE))</span>
<span class="p_add">+		return VM_FAULT_SIGSEGV;</span>
<span class="p_add">+</span>
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return hugetlb_fault(mm, vma, address, flags);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



