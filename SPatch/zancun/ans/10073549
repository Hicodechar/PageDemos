
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,05/19] x86/kasan/64: Teach KASAN about the cpu_entry_area - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,05/19] x86/kasan/64: Teach KASAN about the cpu_entry_area</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2017, 4:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;8407adf9126440d6467dade88fdb3e3b75fc1019.1511497875.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10073549/mbox/"
   >mbox</a>
|
   <a href="/patch/10073549/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10073549/">/patch/10073549/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0BDC56037F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 04:36:30 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 135092A24F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 04:36:30 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 078172A256; Fri, 24 Nov 2017 04:36:30 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 430BF2A24F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 04:36:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753720AbdKXEgZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Nov 2017 23:36:25 -0500
Received: from mail.kernel.org ([198.145.29.99]:43770 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753371AbdKXEdP (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Nov 2017 23:33:15 -0500
Received: from localhost (c-67-166-60-92.hsd1.co.comcast.net [67.166.60.92])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id B1A25219A2;
	Fri, 24 Nov 2017 04:33:14 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org B1A25219A2
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: Borislav Petkov &lt;bpetkov@suse.de&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, kasan-dev@googlegroups.com
Subject: [PATCH v3 05/19] x86/kasan/64: Teach KASAN about the cpu_entry_area
Date: Thu, 23 Nov 2017 20:32:51 -0800
Message-Id: &lt;8407adf9126440d6467dade88fdb3e3b75fc1019.1511497875.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;cover.1511497874.git.luto@kernel.org&gt;
References: &lt;cover.1511497874.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1511497874.git.luto@kernel.org&gt;
References: &lt;cover.1511497874.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 24, 2017, 4:32 a.m.</div>
<pre class="content">
The cpu_entry_area will contain stacks.  Make sure that KASAN has
appropriate shadow mappings for them.

Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Cc: Alexander Potapenko &lt;glider@google.com&gt;
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;
Cc: kasan-dev@googlegroups.com
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/mm/kasan_init_64.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - Nov. 24, 2017, 1:16 p.m.</div>
<pre class="content">
On 11/24/2017 07:32 AM, Andy Lutomirski wrote:
<span class="quote">&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/mm/kasan_init_64.c | 13 ++++++++++++-</span>
<span class="quote">&gt;  1 file changed, 12 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; index 99dfed6dfef8..54561dce742e 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; @@ -277,6 +277,7 @@ void __init kasan_early_init(void)</span>
<span class="quote">&gt;  void __init kasan_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int i;</span>
<span class="quote">&gt; +	void *cpu_entry_area_begin, *cpu_entry_area_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_KASAN_INLINE</span>
<span class="quote">&gt;  	register_die_notifier(&amp;kasan_die_notifier);</span>
<span class="quote">&gt; @@ -329,8 +330,18 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;  			      (unsigned long)kasan_mem_to_shadow(_end),</span>
<span class="quote">&gt;  			      early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	cpu_entry_area_begin = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM));</span>
<span class="quote">&gt; +	cpu_entry_area_end = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt; -			(void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt; +				   kasan_mem_to_shadow(cpu_entry_area_begin));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_shadow((unsigned long)kasan_mem_to_shadow(cpu_entry_area_begin),</span>
<span class="quote">&gt; +			      (unsigned long)kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="quote">&gt; +		0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_zero_shadow(kasan_mem_to_shadow(cpu_entry_area_end),</span>

Seems we need to round_up kasan_mem_to_shadow(cpu_entry_area_end) to the next page
(or alternatively - round_up(cpu_entry_area_end, KASAN_SHADOW_SCALE_SIZE*PAGE_SIZE)).
Otherwise, kasan_populate_zero_shadow() will overpopulate the last shadow page of cpu_entry area with kasan_zero_page.

We don&#39;t necessarily need to round_down(kasan_mem_to_shadow(cpu_entry_area_begin), PAGE_SIZE) because
kasan_populate_zero_shadow() will not populate the last &#39;incomplete&#39; page and kasan_populate_shadow()
does round_down() internally, which is exactly what we want here. But it might be better to round_down()
explicitly anyway, to avoid relying on such subtle implementation details.
<span class="quote">
&gt; +				   (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	load_cr3(init_top_pgt);</span>
<span class="quote">&gt;  	__flush_tlb_all();</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 24, 2017, 4:27 p.m.</div>
<pre class="content">
On Fri, Nov 24, 2017 at 5:16 AM, Andrey Ryabinin
&lt;aryabinin@virtuozzo.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 11/24/2017 07:32 AM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt;&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt;&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt;&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/mm/kasan_init_64.c | 13 ++++++++++++-</span>
<span class="quote">&gt;&gt;  1 file changed, 12 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; index 99dfed6dfef8..54561dce742e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; @@ -277,6 +277,7 @@ void __init kasan_early_init(void)</span>
<span class="quote">&gt;&gt;  void __init kasan_init(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;       int i;</span>
<span class="quote">&gt;&gt; +     void *cpu_entry_area_begin, *cpu_entry_area_end;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_KASAN_INLINE</span>
<span class="quote">&gt;&gt;       register_die_notifier(&amp;kasan_die_notifier);</span>
<span class="quote">&gt;&gt; @@ -329,8 +330,18 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;&gt;                             (unsigned long)kasan_mem_to_shadow(_end),</span>
<span class="quote">&gt;&gt;                             early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +     cpu_entry_area_begin = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM));</span>
<span class="quote">&gt;&gt; +     cpu_entry_area_end = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;       kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;&gt; -                     (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt; +                                kasan_mem_to_shadow(cpu_entry_area_begin));</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     kasan_populate_shadow((unsigned long)kasan_mem_to_shadow(cpu_entry_area_begin),</span>
<span class="quote">&gt;&gt; +                           (unsigned long)kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="quote">&gt;&gt; +             0);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     kasan_populate_zero_shadow(kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Seems we need to round_up kasan_mem_to_shadow(cpu_entry_area_end) to the next page</span>
<span class="quote">&gt; (or alternatively - round_up(cpu_entry_area_end, KASAN_SHADOW_SCALE_SIZE*PAGE_SIZE)).</span>
<span class="quote">&gt; Otherwise, kasan_populate_zero_shadow() will overpopulate the last shadow page of cpu_entry area with kasan_zero_page.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We don&#39;t necessarily need to round_down(kasan_mem_to_shadow(cpu_entry_area_begin), PAGE_SIZE) because</span>
<span class="quote">&gt; kasan_populate_zero_shadow() will not populate the last &#39;incomplete&#39; page and kasan_populate_shadow()</span>
<span class="quote">&gt; does round_down() internally, which is exactly what we want here. But it might be better to round_down()</span>
<span class="quote">&gt; explicitly anyway, to avoid relying on such subtle implementation details.</span>

Any chance you could send a fixup patch or a replacement patch?  You
obviously understand this code *way* better than I do.

Or you could do my table-based approach and fix it permanently... :)
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +                                (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       load_cr3(init_top_pgt);</span>
<span class="quote">&gt;&gt;       __flush_tlb_all();</span>
<span class="quote">&gt;&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - Nov. 24, 2017, 5:26 p.m.</div>
<pre class="content">
On 11/24/2017 07:27 PM, Andy Lutomirski wrote:
<span class="quote">
&gt;&gt;&gt; +     cpu_entry_area_begin = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM));</span>
<span class="quote">&gt;&gt;&gt; +     cpu_entry_area_end = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;       kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;&gt;&gt; -                     (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt;&gt; +                                kasan_mem_to_shadow(cpu_entry_area_begin));</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +     kasan_populate_shadow((unsigned long)kasan_mem_to_shadow(cpu_entry_area_begin),</span>
<span class="quote">&gt;&gt;&gt; +                           (unsigned long)kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="quote">&gt;&gt;&gt; +             0);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +     kasan_populate_zero_shadow(kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Seems we need to round_up kasan_mem_to_shadow(cpu_entry_area_end) to the next page</span>
<span class="quote">&gt;&gt; (or alternatively - round_up(cpu_entry_area_end, KASAN_SHADOW_SCALE_SIZE*PAGE_SIZE)).</span>
<span class="quote">&gt;&gt; Otherwise, kasan_populate_zero_shadow() will overpopulate the last shadow page of cpu_entry area with kasan_zero_page.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; We don&#39;t necessarily need to round_down(kasan_mem_to_shadow(cpu_entry_area_begin), PAGE_SIZE) because</span>
<span class="quote">&gt;&gt; kasan_populate_zero_shadow() will not populate the last &#39;incomplete&#39; page and kasan_populate_shadow()</span>
<span class="quote">&gt;&gt; does round_down() internally, which is exactly what we want here. But it might be better to round_down()</span>
<span class="quote">&gt;&gt; explicitly anyway, to avoid relying on such subtle implementation details.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Any chance you could send a fixup patch or a replacement patch?  You</span>
<span class="quote">&gt; obviously understand this code *way* better than I do.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Or you could do my table-based approach and fix it permanently... :)</span>
<span class="quote">&gt; </span>

Perhaps I&#39;ll look at table-based approach later. I&#39;ve send you a fixed patch for now, to not slow you down.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 99dfed6dfef8..54561dce742e 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -277,6 +277,7 @@</span> <span class="p_context"> void __init kasan_early_init(void)</span>
 void __init kasan_init(void)
 {
 	int i;
<span class="p_add">+	void *cpu_entry_area_begin, *cpu_entry_area_end;</span>
 
 #ifdef CONFIG_KASAN_INLINE
 	register_die_notifier(&amp;kasan_die_notifier);
<span class="p_chunk">@@ -329,8 +330,18 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 			      (unsigned long)kasan_mem_to_shadow(_end),
 			      early_pfn_to_nid(__pa(_stext)));
 
<span class="p_add">+	cpu_entry_area_begin = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM));</span>
<span class="p_add">+	cpu_entry_area_end = (void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE);</span>
<span class="p_add">+</span>
 	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),
<span class="p_del">-			(void *)KASAN_SHADOW_END);</span>
<span class="p_add">+				   kasan_mem_to_shadow(cpu_entry_area_begin));</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow((unsigned long)kasan_mem_to_shadow(cpu_entry_area_begin),</span>
<span class="p_add">+			      (unsigned long)kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="p_add">+		0);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_zero_shadow(kasan_mem_to_shadow(cpu_entry_area_end),</span>
<span class="p_add">+				   (void *)KASAN_SHADOW_END);</span>
 
 	load_cr3(init_top_pgt);
 	__flush_tlb_all();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



