
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/2] mm: Introduce wrapper to access mm-&gt;nr_ptes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/2] mm: Introduce wrapper to access mm-&gt;nr_ptes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 4, 2017, 4:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171004163648.11234-1-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9985193/mbox/"
   >mbox</a>
|
   <a href="/patch/9985193/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9985193/">/patch/9985193/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8B78660586 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7CE5A28B77
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 71B6828B7B; Wed,  4 Oct 2017 16:37:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 907E828B77
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 16:37:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751424AbdJDQhb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 4 Oct 2017 12:37:31 -0400
Received: from mga07.intel.com ([134.134.136.100]:31041 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750966AbdJDQh3 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 4 Oct 2017 12:37:29 -0400
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by orsmga105.jf.intel.com with ESMTP; 04 Oct 2017 09:37:28 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.42,477,1500966000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1227019271&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga002.fm.intel.com with ESMTP; 04 Oct 2017 09:37:26 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id EFF9B1DF; Wed,  4 Oct 2017 19:36:55 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org, Michal Hocko &lt;mhocko@kernel.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH 1/2] mm: Introduce wrapper to access mm-&gt;nr_ptes
Date: Wed,  4 Oct 2017 19:36:47 +0300
Message-Id: &lt;20171004163648.11234-1-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.14.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Oct. 4, 2017, 4:36 p.m.</div>
<pre class="content">
Let&#39;s add wrappers for -&gt;nr_ptes with the same interface as for nr_pmd
and nr_pud.

It&#39;s preparation for consolidation of page-table counters in mm_struct.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 arch/arm/mm/pgd.c           |  2 +-
 arch/sparc/mm/hugetlbpage.c |  2 +-
 arch/unicore32/mm/pgd.c     |  2 +-
 fs/proc/task_mmu.c          |  2 +-
 include/linux/mm.h          | 32 ++++++++++++++++++++++++++++++++
 include/linux/mm_types.h    |  2 ++
 kernel/fork.c               |  6 +++---
 mm/debug.c                  |  2 +-
 mm/huge_memory.c            | 10 +++++-----
 mm/khugepaged.c             |  2 +-
 mm/memory.c                 |  8 ++++----
 mm/oom_kill.c               |  5 ++---
 12 files changed, 54 insertions(+), 21 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Oct. 4, 2017, 6:35 p.m.</div>
<pre class="content">
On 10/04/2017 09:36 AM, Kirill A. Shutemov wrote:
<span class="quote">&gt; Let&#39;s add wrappers for -&gt;nr_ptes with the same interface as for nr_pmd</span>
<span class="quote">&gt; and nr_pud.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s preparation for consolidation of page-table counters in mm_struct.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/mm/pgd.c           |  2 +-</span>
<span class="quote">&gt;  arch/sparc/mm/hugetlbpage.c |  2 +-</span>
<span class="quote">&gt;  arch/unicore32/mm/pgd.c     |  2 +-</span>
<span class="quote">&gt;  fs/proc/task_mmu.c          |  2 +-</span>
<span class="quote">&gt;  include/linux/mm.h          | 32 ++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  include/linux/mm_types.h    |  2 ++</span>
<span class="quote">&gt;  kernel/fork.c               |  6 +++---</span>
<span class="quote">&gt;  mm/debug.c                  |  2 +-</span>
<span class="quote">&gt;  mm/huge_memory.c            | 10 +++++-----</span>
<span class="quote">&gt;  mm/khugepaged.c             |  2 +-</span>
<span class="quote">&gt;  mm/memory.c                 |  8 ++++----</span>
<span class="quote">&gt;  mm/oom_kill.c               |  5 ++---</span>
<span class="quote">&gt;  12 files changed, 54 insertions(+), 21 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/mm/pgd.c b/arch/arm/mm/pgd.c</span>
<span class="quote">&gt; index c1c1a5c67da1..61e281cb29fb 100644</span>
<span class="quote">&gt; --- a/arch/arm/mm/pgd.c</span>
<span class="quote">&gt; +++ b/arch/arm/mm/pgd.c</span>
<span class="quote">&gt; @@ -141,7 +141,7 @@ void pgd_free(struct mm_struct *mm, pgd_t *pgd_base)</span>
<span class="quote">&gt;  	pte = pmd_pgtable(*pmd);</span>
<span class="quote">&gt;  	pmd_clear(pmd);</span>
<span class="quote">&gt;  	pte_free(mm, pte);</span>
<span class="quote">&gt; -	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +	mm_dec_nr_ptes(mm);</span>
<span class="quote">&gt;  no_pmd:</span>
<span class="quote">&gt;  	pud_clear(pud);</span>
<span class="quote">&gt;  	pmd_free(mm, pmd);</span>
<span class="quote">&gt; diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index fd0d85808828..29fa5967b7d2 100644</span>
<span class="quote">&gt; --- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -396,7 +396,7 @@ static void hugetlb_free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pmd_clear(pmd);</span>
<span class="quote">&gt;  	pte_free_tlb(tlb, token, addr);</span>
<span class="quote">&gt; -	atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +	mm_dec_nr_ptes(tlb-&gt;mm);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,</span>
<span class="quote">&gt; diff --git a/arch/unicore32/mm/pgd.c b/arch/unicore32/mm/pgd.c</span>
<span class="quote">&gt; index c572a28c76c9..a830a300aaa1 100644</span>
<span class="quote">&gt; --- a/arch/unicore32/mm/pgd.c</span>
<span class="quote">&gt; +++ b/arch/unicore32/mm/pgd.c</span>
<span class="quote">&gt; @@ -97,7 +97,7 @@ void free_pgd_slow(struct mm_struct *mm, pgd_t *pgd)</span>
<span class="quote">&gt;  	pte = pmd_pgtable(*pmd);</span>
<span class="quote">&gt;  	pmd_clear(pmd);</span>
<span class="quote">&gt;  	pte_free(mm, pte);</span>
<span class="quote">&gt; -	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +	mm_dec_nr_ptes(mm);</span>
<span class="quote">&gt;  	pmd_free(mm, pmd);</span>
<span class="quote">&gt;  	mm_dec_nr_pmds(mm);</span>
<span class="quote">&gt;  free:</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 627de66204bd..84c262d5197a 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -49,7 +49,7 @@ void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
<span class="quote">&gt;  	text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK)) &gt;&gt; 10;</span>
<span class="quote">&gt;  	lib = (mm-&gt;exec_vm &lt;&lt; (PAGE_SHIFT-10)) - text;</span>
<span class="quote">&gt;  	swap = get_mm_counter(mm, MM_SWAPENTS);</span>
<span class="quote">&gt; -	ptes = PTRS_PER_PTE * sizeof(pte_t) * atomic_long_read(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +	ptes = PTRS_PER_PTE * sizeof(pte_t) * mm_nr_ptes(mm);</span>
<span class="quote">&gt;  	pmds = PTRS_PER_PMD * sizeof(pmd_t) * mm_nr_pmds(mm);</span>
<span class="quote">&gt;  	puds = PTRS_PER_PUD * sizeof(pud_t) * mm_nr_puds(mm);</span>
<span class="quote">&gt;  	seq_printf(m,</span>
<span class="quote">&gt; diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="quote">&gt; index 5125c51c9c35..e185dcdc5183 100644</span>
<span class="quote">&gt; --- a/include/linux/mm.h</span>
<span class="quote">&gt; +++ b/include/linux/mm.h</span>
<span class="quote">&gt; @@ -1679,6 +1679,38 @@ static inline void mm_dec_nr_pmds(struct mm_struct *mm)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_MMU</span>
<span class="quote">&gt; +static inline void mm_nr_ptes_init(struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return atomic_long_read(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void mm_inc_nr_ptes(struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void mm_dec_nr_ptes(struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void mm_nr_ptes_init(struct mm_struct *mm) {}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void mm_inc_nr_ptes(struct mm_struct *mm) {}</span>
<span class="quote">&gt; +static inline void mm_dec_nr_ptes(struct mm_struct *mm) {}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address);</span>
<span class="quote">&gt;  int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index 6c8c2bb9e5a1..95d0eefe1f4a 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -398,7 +398,9 @@ struct mm_struct {</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	atomic_t mm_count;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_MMU</span>
<span class="quote">&gt;  	atomic_long_t nr_ptes;			/* PTE page table pages */</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="quote">&gt;  	atomic_long_t nr_pmds;			/* PMD page table pages */</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="quote">&gt; index 5624918154db..1c08f0136667 100644</span>
<span class="quote">&gt; --- a/kernel/fork.c</span>
<span class="quote">&gt; +++ b/kernel/fork.c</span>
<span class="quote">&gt; @@ -813,7 +813,7 @@ static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p,</span>
<span class="quote">&gt;  	init_rwsem(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  	INIT_LIST_HEAD(&amp;mm-&gt;mmlist);</span>
<span class="quote">&gt;  	mm-&gt;core_state = NULL;</span>
<span class="quote">&gt; -	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="quote">&gt; +	mm_nr_ptes_init(mm);</span>
<span class="quote">&gt;  	mm_nr_pmds_init(mm);</span>
<span class="quote">&gt;  	mm_nr_puds_init(mm);</span>
<span class="quote">&gt;  	mm-&gt;map_count = 0;</span>
<span class="quote">&gt; @@ -869,9 +869,9 @@ static void check_mm(struct mm_struct *mm)</span>
<span class="quote">&gt;  					  &quot;mm:%p idx:%d val:%ld\n&quot;, mm, i, x);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (atomic_long_read(&amp;mm-&gt;nr_ptes))</span>
<span class="quote">&gt; +	if (mm_nr_pmds(mm))</span>

Should that be?

	if (mm_nr_ptes(mm))
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Oct. 5, 2017, 10:10 a.m.</div>
<pre class="content">
On Wed, Oct 04, 2017 at 11:35:47AM -0700, Mike Kravetz wrote:
<span class="quote">&gt; On 10/04/2017 09:36 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; @@ -813,7 +813,7 @@ static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p,</span>
<span class="quote">&gt; &gt;  	init_rwsem(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; &gt;  	INIT_LIST_HEAD(&amp;mm-&gt;mmlist);</span>
<span class="quote">&gt; &gt;  	mm-&gt;core_state = NULL;</span>
<span class="quote">&gt; &gt; -	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="quote">&gt; &gt; +	mm_nr_ptes_init(mm);</span>
<span class="quote">&gt; &gt;  	mm_nr_pmds_init(mm);</span>
<span class="quote">&gt; &gt;  	mm_nr_puds_init(mm);</span>
<span class="quote">&gt; &gt;  	mm-&gt;map_count = 0;</span>
<span class="quote">&gt; &gt; @@ -869,9 +869,9 @@ static void check_mm(struct mm_struct *mm)</span>
<span class="quote">&gt; &gt;  					  &quot;mm:%p idx:%d val:%ld\n&quot;, mm, i, x);</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	if (atomic_long_read(&amp;mm-&gt;nr_ptes))</span>
<span class="quote">&gt; &gt; +	if (mm_nr_pmds(mm))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Should that be?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (mm_nr_ptes(mm))</span>

Thanks, for catching this.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/mm/pgd.c b/arch/arm/mm/pgd.c</span>
<span class="p_header">index c1c1a5c67da1..61e281cb29fb 100644</span>
<span class="p_header">--- a/arch/arm/mm/pgd.c</span>
<span class="p_header">+++ b/arch/arm/mm/pgd.c</span>
<span class="p_chunk">@@ -141,7 +141,7 @@</span> <span class="p_context"> void pgd_free(struct mm_struct *mm, pgd_t *pgd_base)</span>
 	pte = pmd_pgtable(*pmd);
 	pmd_clear(pmd);
 	pte_free(mm, pte);
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_dec_nr_ptes(mm);</span>
 no_pmd:
 	pud_clear(pud);
 	pmd_free(mm, pmd);
<span class="p_header">diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">index fd0d85808828..29fa5967b7d2 100644</span>
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -396,7 +396,7 @@</span> <span class="p_context"> static void hugetlb_free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,</span>
 
 	pmd_clear(pmd);
 	pte_free_tlb(tlb, token, addr);
<span class="p_del">-	atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_dec_nr_ptes(tlb-&gt;mm);</span>
 }
 
 static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,
<span class="p_header">diff --git a/arch/unicore32/mm/pgd.c b/arch/unicore32/mm/pgd.c</span>
<span class="p_header">index c572a28c76c9..a830a300aaa1 100644</span>
<span class="p_header">--- a/arch/unicore32/mm/pgd.c</span>
<span class="p_header">+++ b/arch/unicore32/mm/pgd.c</span>
<span class="p_chunk">@@ -97,7 +97,7 @@</span> <span class="p_context"> void free_pgd_slow(struct mm_struct *mm, pgd_t *pgd)</span>
 	pte = pmd_pgtable(*pmd);
 	pmd_clear(pmd);
 	pte_free(mm, pte);
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_dec_nr_ptes(mm);</span>
 	pmd_free(mm, pmd);
 	mm_dec_nr_pmds(mm);
 free:
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 627de66204bd..84c262d5197a 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -49,7 +49,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 	text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK)) &gt;&gt; 10;
 	lib = (mm-&gt;exec_vm &lt;&lt; (PAGE_SHIFT-10)) - text;
 	swap = get_mm_counter(mm, MM_SWAPENTS);
<span class="p_del">-	ptes = PTRS_PER_PTE * sizeof(pte_t) * atomic_long_read(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	ptes = PTRS_PER_PTE * sizeof(pte_t) * mm_nr_ptes(mm);</span>
 	pmds = PTRS_PER_PMD * sizeof(pmd_t) * mm_nr_pmds(mm);
 	puds = PTRS_PER_PUD * sizeof(pud_t) * mm_nr_puds(mm);
 	seq_printf(m,
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 5125c51c9c35..e185dcdc5183 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1679,6 +1679,38 @@</span> <span class="p_context"> static inline void mm_dec_nr_pmds(struct mm_struct *mm)</span>
 }
 #endif
 
<span class="p_add">+#ifdef CONFIG_MMU</span>
<span class="p_add">+static inline void mm_nr_ptes_init(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return atomic_long_read(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void mm_inc_nr_ptes(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void mm_dec_nr_ptes(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void mm_nr_ptes_init(struct mm_struct *mm) {}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long mm_nr_ptes(const struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void mm_inc_nr_ptes(struct mm_struct *mm) {}</span>
<span class="p_add">+static inline void mm_dec_nr_ptes(struct mm_struct *mm) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address);
 int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);
 
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 6c8c2bb9e5a1..95d0eefe1f4a 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -398,7 +398,9 @@</span> <span class="p_context"> struct mm_struct {</span>
 	 */
 	atomic_t mm_count;
 
<span class="p_add">+#ifdef CONFIG_MMU</span>
 	atomic_long_t nr_ptes;			/* PTE page table pages */
<span class="p_add">+#endif</span>
 #if CONFIG_PGTABLE_LEVELS &gt; 2
 	atomic_long_t nr_pmds;			/* PMD page table pages */
 #endif
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 5624918154db..1c08f0136667 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -813,7 +813,7 @@</span> <span class="p_context"> static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p,</span>
 	init_rwsem(&amp;mm-&gt;mmap_sem);
 	INIT_LIST_HEAD(&amp;mm-&gt;mmlist);
 	mm-&gt;core_state = NULL;
<span class="p_del">-	atomic_long_set(&amp;mm-&gt;nr_ptes, 0);</span>
<span class="p_add">+	mm_nr_ptes_init(mm);</span>
 	mm_nr_pmds_init(mm);
 	mm_nr_puds_init(mm);
 	mm-&gt;map_count = 0;
<span class="p_chunk">@@ -869,9 +869,9 @@</span> <span class="p_context"> static void check_mm(struct mm_struct *mm)</span>
 					  &quot;mm:%p idx:%d val:%ld\n&quot;, mm, i, x);
 	}
 
<span class="p_del">-	if (atomic_long_read(&amp;mm-&gt;nr_ptes))</span>
<span class="p_add">+	if (mm_nr_pmds(mm))</span>
 		pr_alert(&quot;BUG: non-zero nr_ptes on freeing mm: %ld\n&quot;,
<span class="p_del">-				atomic_long_read(&amp;mm-&gt;nr_ptes));</span>
<span class="p_add">+				mm_nr_ptes(mm));</span>
 	if (mm_nr_pmds(mm))
 		pr_alert(&quot;BUG: non-zero nr_pmds on freeing mm: %ld\n&quot;,
 				mm_nr_pmds(mm));
<span class="p_header">diff --git a/mm/debug.c b/mm/debug.c</span>
<span class="p_header">index afccb2565269..177326818d24 100644</span>
<span class="p_header">--- a/mm/debug.c</span>
<span class="p_header">+++ b/mm/debug.c</span>
<span class="p_chunk">@@ -135,7 +135,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		mm-&gt;mmap_base, mm-&gt;mmap_legacy_base, mm-&gt;highest_vm_end,
 		mm-&gt;pgd, atomic_read(&amp;mm-&gt;mm_users),
 		atomic_read(&amp;mm-&gt;mm_count),
<span class="p_del">-		atomic_long_read((atomic_long_t *)&amp;mm-&gt;nr_ptes),</span>
<span class="p_add">+		mm_nr_ptes(mm),</span>
 		mm_nr_pmds(mm),
 		mm_nr_puds(mm),
 		mm-&gt;map_count,
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 269b5df58543..c037d3d34950 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -606,7 +606,7 @@</span> <span class="p_context"> static int __do_huge_pmd_anonymous_page(struct vm_fault *vmf, struct page *page,</span>
 		pgtable_trans_huge_deposit(vma-&gt;vm_mm, vmf-&gt;pmd, pgtable);
 		set_pmd_at(vma-&gt;vm_mm, haddr, vmf-&gt;pmd, entry);
 		add_mm_counter(vma-&gt;vm_mm, MM_ANONPAGES, HPAGE_PMD_NR);
<span class="p_del">-		atomic_long_inc(&amp;vma-&gt;vm_mm-&gt;nr_ptes);</span>
<span class="p_add">+		mm_inc_nr_ptes(vma-&gt;vm_mm);</span>
 		spin_unlock(vmf-&gt;ptl);
 		count_vm_event(THP_FAULT_ALLOC);
 	}
<span class="p_chunk">@@ -662,7 +662,7 @@</span> <span class="p_context"> static bool set_huge_zero_page(pgtable_t pgtable, struct mm_struct *mm,</span>
 	if (pgtable)
 		pgtable_trans_huge_deposit(mm, pmd, pgtable);
 	set_pmd_at(mm, haddr, pmd, entry);
<span class="p_del">-	atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_inc_nr_ptes(mm);</span>
 	return true;
 }
 
<span class="p_chunk">@@ -747,7 +747,7 @@</span> <span class="p_context"> static void insert_pfn_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
 
 	if (pgtable) {
 		pgtable_trans_huge_deposit(mm, pmd, pgtable);
<span class="p_del">-		atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+		mm_inc_nr_ptes(mm);</span>
 	}
 
 	set_pmd_at(mm, addr, pmd, entry);
<span class="p_chunk">@@ -975,7 +975,7 @@</span> <span class="p_context"> int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	get_page(src_page);
 	page_dup_rmap(src_page, true);
 	add_mm_counter(dst_mm, MM_ANONPAGES, HPAGE_PMD_NR);
<span class="p_del">-	atomic_long_inc(&amp;dst_mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_inc_nr_ptes(dst_mm);</span>
 	pgtable_trans_huge_deposit(dst_mm, dst_pmd, pgtable);
 
 	pmdp_set_wrprotect(src_mm, addr, src_pmd);
<span class="p_chunk">@@ -1675,7 +1675,7 @@</span> <span class="p_context"> static inline void zap_deposited_table(struct mm_struct *mm, pmd_t *pmd)</span>
 
 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
 	pte_free(mm, pgtable);
<span class="p_del">-	atomic_long_dec(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_dec_nr_ptes(mm);</span>
 }
 
 int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
<span class="p_header">diff --git a/mm/khugepaged.c b/mm/khugepaged.c</span>
<span class="p_header">index c01f177a1120..9e36fe8857d9 100644</span>
<span class="p_header">--- a/mm/khugepaged.c</span>
<span class="p_header">+++ b/mm/khugepaged.c</span>
<span class="p_chunk">@@ -1269,7 +1269,7 @@</span> <span class="p_context"> static void retract_page_tables(struct address_space *mapping, pgoff_t pgoff)</span>
 			_pmd = pmdp_collapse_flush(vma, addr, pmd);
 			spin_unlock(ptl);
 			up_write(&amp;vma-&gt;vm_mm-&gt;mmap_sem);
<span class="p_del">-			atomic_long_dec(&amp;vma-&gt;vm_mm-&gt;nr_ptes);</span>
<span class="p_add">+			mm_dec_nr_ptes(vma-&gt;vm_mm);</span>
 			pte_free(vma-&gt;vm_mm, pmd_pgtable(_pmd));
 		}
 	}
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 291d4984b417..c443456dbd02 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -438,7 +438,7 @@</span> <span class="p_context"> static void free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,</span>
 	pgtable_t token = pmd_pgtable(*pmd);
 	pmd_clear(pmd);
 	pte_free_tlb(tlb, token, addr);
<span class="p_del">-	atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_dec_nr_ptes(tlb-&gt;mm);</span>
 }
 
 static inline void free_pmd_range(struct mmu_gather *tlb, pud_t *pud,
<span class="p_chunk">@@ -666,7 +666,7 @@</span> <span class="p_context"> int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address)</span>
 
 	ptl = pmd_lock(mm, pmd);
 	if (likely(pmd_none(*pmd))) {	/* Has another populated it ? */
<span class="p_del">-		atomic_long_inc(&amp;mm-&gt;nr_ptes);</span>
<span class="p_add">+		mm_inc_nr_ptes(mm);</span>
 		pmd_populate(mm, pmd, new);
 		new = NULL;
 	}
<span class="p_chunk">@@ -3213,7 +3213,7 @@</span> <span class="p_context"> static int pte_alloc_one_map(struct vm_fault *vmf)</span>
 			goto map_pte;
 		}
 
<span class="p_del">-		atomic_long_inc(&amp;vma-&gt;vm_mm-&gt;nr_ptes);</span>
<span class="p_add">+		mm_inc_nr_ptes(vma-&gt;vm_mm);</span>
 		pmd_populate(vma-&gt;vm_mm, vmf-&gt;pmd, vmf-&gt;prealloc_pte);
 		spin_unlock(vmf-&gt;ptl);
 		vmf-&gt;prealloc_pte = NULL;
<span class="p_chunk">@@ -3272,7 +3272,7 @@</span> <span class="p_context"> static void deposit_prealloc_pte(struct vm_fault *vmf)</span>
 	 * We are going to consume the prealloc table,
 	 * count that as nr_ptes.
 	 */
<span class="p_del">-	atomic_long_inc(&amp;vma-&gt;vm_mm-&gt;nr_ptes);</span>
<span class="p_add">+	mm_inc_nr_ptes(vma-&gt;vm_mm);</span>
 	vmf-&gt;prealloc_pte = NULL;
 }
 
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 4bee6968885d..851a0eec2624 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -200,8 +200,7 @@</span> <span class="p_context"> unsigned long oom_badness(struct task_struct *p, struct mem_cgroup *memcg,</span>
 	 * task&#39;s rss, pagetable and swap space use.
 	 */
 	points = get_mm_rss(p-&gt;mm) + get_mm_counter(p-&gt;mm, MM_SWAPENTS) +
<span class="p_del">-		atomic_long_read(&amp;p-&gt;mm-&gt;nr_ptes) + mm_nr_pmds(p-&gt;mm) +</span>
<span class="p_del">-		mm_nr_puds(p-&gt;mm);</span>
<span class="p_add">+		mm_nr_ptes(p-&gt;mm) + mm_nr_pmds(p-&gt;mm) + mm_nr_puds(p-&gt;mm);</span>
 	task_unlock(p);
 
 	/*
<span class="p_chunk">@@ -396,7 +395,7 @@</span> <span class="p_context"> static void dump_tasks(struct mem_cgroup *memcg, const nodemask_t *nodemask)</span>
 		pr_info(&quot;[%5d] %5d %5d %8lu %8lu %7ld %7ld %7ld %8lu         %5hd %s\n&quot;,
 			task-&gt;pid, from_kuid(&amp;init_user_ns, task_uid(task)),
 			task-&gt;tgid, task-&gt;mm-&gt;total_vm, get_mm_rss(task-&gt;mm),
<span class="p_del">-			atomic_long_read(&amp;task-&gt;mm-&gt;nr_ptes),</span>
<span class="p_add">+			mm_nr_ptes(task-&gt;mm),</span>
 			mm_nr_pmds(task-&gt;mm),
 			mm_nr_puds(task-&gt;mm),
 			get_mm_counter(task-&gt;mm, MM_SWAPENTS),

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



