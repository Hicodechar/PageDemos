
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v11,3/3] mm, x86: display pkey in smaps only if arch supports pkeys - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v11,3/3] mm, x86: display pkey in smaps only if arch supports pkeys</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2448">Ram Pai</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 30, 2018, 7:44 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1517341452-11924-4-git-send-email-linuxram@us.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10192367/mbox/"
   >mbox</a>
|
   <a href="/patch/10192367/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10192367/">/patch/10192367/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A2BEE601A0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 19:45:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9281222362
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 19:45:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 86F8E26CFC; Tue, 30 Jan 2018 19:45:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0FCA722362
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 19:45:17 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752724AbeA3TpN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 30 Jan 2018 14:45:13 -0500
Received: from mail-qk0-f193.google.com ([209.85.220.193]:44765 &quot;EHLO
	mail-qk0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751677AbeA3TpK (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 30 Jan 2018 14:45:10 -0500
Received: by mail-qk0-f193.google.com with SMTP id n188so314477qkn.11;
	Tue, 30 Jan 2018 11:45:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=yC4W8pVJaPdMIzDLe/1IfIVd5JH8jLKrZu/Z0EijR+s=;
	b=D6o6TE2FNbuo0tQmf9vo6qXHQuiD01iBgWQ6tWgv9h4XmFWNeq0GAl9DzdB5wf3JEi
	UDPPDxXJrwgPPCh+sstAMYVb3QD7eDuRII6YOvd5WAdHleLCneLiZeCIxN2HRX9llB9I
	TQMqxCWcxWmrp0fn0/eBCHv0t/PoqD36wKD9e9Tddb+3jC6YTZAizOHSsZYSj5tDeZ7K
	vew4PyJbwaZkjAjai6mvP3UoDxDaodP4R7NLy3Tg1fxZwutOIbhNjcFUNVt6L3mqDO5i
	/J20rPwlxLou9mFf0rV8KBpMJRNyyehKREPnDpJU+xIKnJDYttIPLP4BQAFzYOE+NxbM
	zmtA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=yC4W8pVJaPdMIzDLe/1IfIVd5JH8jLKrZu/Z0EijR+s=;
	b=FdmcSkjTHOkr4WWhNakT2y2m/VJfN8j60TF3TuPcbgd9Pc7NUzlBJyVb+HWLQSIsZL
	ZmUwX0uJG8tfjnCmDyLuX85Ft+8PVm3l4Mz9oc1Y+ejSLun0U0V4pIDCFm5BQnA9U/9J
	5mE62xFXafkYU7FScW36p87TP6vekaK69Ghwo4lyVPIbVsc+cTt/xqavXc04GmHJpfYg
	4kZeeLxxGnS1pKbv1s2kSCNjSTyDsK4WTbdZs8ouiJ0sjxxx0jlbTiEknwfTzbbzxw7j
	LzRiZhVJfoAuEwY3Glpi3Ml9fu5LHx50TEnWfhKqGKAFR9e0W3ECVxgcKFKyzwgXX2rr
	cNgg==
X-Gm-Message-State: AKwxytcEeFEL6ESSqxA55rHY2snLckARox8EC+xmUf8KByl7L6IvoWE+
	FTX/1XMvhGizn+o02ODvBwY=
X-Google-Smtp-Source: AH8x225//qHH9jKOCHlEC+STZaXLjL7EpAIrP8VSNrih+srZ6n6uiusNbhZ3kdqfCmZ6U/fjowl7Ew==
X-Received: by 10.55.183.1 with SMTP id h1mr43472735qkf.119.1517341509684;
	Tue, 30 Jan 2018 11:45:09 -0800 (PST)
Received: from localhost.localdomain (50-39-100-161.bvtn.or.frontiernet.net.
	[50.39.100.161]) by smtp.gmail.com with ESMTPSA id
	i39sm12117017qte.19.2018.01.30.11.45.06
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 30 Jan 2018 11:45:09 -0800 (PST)
From: Ram Pai &lt;linuxram@us.ibm.com&gt;
To: mpe@ellerman.id.au, mingo@redhat.com, akpm@linux-foundation.org
Cc: linuxppc-dev@lists.ozlabs.org, linux-mm@kvack.org, x86@kernel.org,
	linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org,
	dave.hansen@intel.com, benh@kernel.crashing.org, paulus@samba.org,
	khandual@linux.vnet.ibm.com, aneesh.kumar@linux.vnet.ibm.com,
	bsingharora@gmail.com, hbabu@us.ibm.com, mhocko@kernel.org,
	bauerman@linux.vnet.ibm.com, ebiederm@xmission.com,
	linuxram@us.ibm.com, corbet@lwn.net, arnd@arndb.de,
	fweimer@redhat.com, msuchanek@suse.com
Subject: [PATCH v11 3/3] mm,
	x86: display pkey in smaps only if arch supports pkeys
Date: Tue, 30 Jan 2018 11:44:12 -0800
Message-Id: &lt;1517341452-11924-4-git-send-email-linuxram@us.ibm.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1517341452-11924-1-git-send-email-linuxram@us.ibm.com&gt;
References: &lt;1517341452-11924-1-git-send-email-linuxram@us.ibm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - Jan. 30, 2018, 7:44 p.m.</div>
<pre class="content">
Currently the  architecture  specific code is expected to
display  the  protection  keys  in  smap  for a given vma.
This can lead to redundant code and possibly to divergent
formats in which the key gets displayed.

This  patch  changes  the implementation. It displays the
pkey only if the architecture support pkeys, i.e
arch_pkeys_enabled() returns true.  This patch
provides x86 implementation for arch_pkeys_enabled().

x86 arch_show_smap() function is not needed anymore.
Deleting it.
<span class="signed-off-by">
Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
---
 arch/x86/include/asm/pkeys.h |    1 +
 arch/x86/kernel/fpu/xstate.c |    5 +++++
 arch/x86/kernel/setup.c      |    8 --------
 fs/proc/task_mmu.c           |    9 ++++-----
 include/linux/pkeys.h        |    6 ++++++
 5 files changed, 16 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 31, 2018, 1:34 p.m.</div>
<pre class="content">
On Tue 30-01-18 11:44:12, Ram Pai wrote:
<span class="quote">&gt; Currently the  architecture  specific code is expected to</span>
<span class="quote">&gt; display  the  protection  keys  in  smap  for a given vma.</span>
<span class="quote">&gt; This can lead to redundant code and possibly to divergent</span>
<span class="quote">&gt; formats in which the key gets displayed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This  patch  changes  the implementation. It displays the</span>
<span class="quote">&gt; pkey only if the architecture support pkeys, i.e</span>
<span class="quote">&gt; arch_pkeys_enabled() returns true.  This patch</span>
<span class="quote">&gt; provides x86 implementation for arch_pkeys_enabled().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; x86 arch_show_smap() function is not needed anymore.</span>
<span class="quote">&gt; Deleting it.</span>

Thanks for reworking this patch. Looks good to me.
<span class="quote">
&gt; Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/pkeys.h |    1 +</span>
<span class="quote">&gt;  arch/x86/kernel/fpu/xstate.c |    5 +++++</span>
<span class="quote">&gt;  arch/x86/kernel/setup.c      |    8 --------</span>
<span class="quote">&gt;  fs/proc/task_mmu.c           |    9 ++++-----</span>
<span class="quote">&gt;  include/linux/pkeys.h        |    6 ++++++</span>
<span class="quote">&gt;  5 files changed, 16 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/pkeys.h b/arch/x86/include/asm/pkeys.h</span>
<span class="quote">&gt; index a0ba1ff..f6c287b 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/pkeys.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/pkeys.h</span>
<span class="quote">&gt; @@ -6,6 +6,7 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
<span class="quote">&gt;  		unsigned long init_val);</span>
<span class="quote">&gt; +extern bool arch_pkeys_enabled(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Try to dedicate one of the protection keys to be used as an</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/fpu/xstate.c b/arch/x86/kernel/fpu/xstate.c</span>
<span class="quote">&gt; index 87a57b7..4f566e9 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/fpu/xstate.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/fpu/xstate.c</span>
<span class="quote">&gt; @@ -945,6 +945,11 @@ int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +bool arch_pkeys_enabled(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return boot_cpu_has(X86_FEATURE_OSPKE);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif /* ! CONFIG_ARCH_HAS_PKEYS */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; index 8af2e8d..ddf945a 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; @@ -1326,11 +1326,3 @@ static int __init register_kernel_offset_dumper(void)</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  __initcall(register_kernel_offset_dumper);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="quote">&gt; -		return;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 0edd4da..6f9fbde 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -18,6 +18,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/page_idle.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/shmem_fs.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/uaccess.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/pkeys.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/elf.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt; @@ -728,10 +729,6 @@ static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt; @@ -851,9 +848,11 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt;  		show_smap_vma_flags(m, vma);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	m_cache_vma(m, vma);</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/include/linux/pkeys.h b/include/linux/pkeys.h</span>
<span class="quote">&gt; index 0794ca7..dfdc609 100644</span>
<span class="quote">&gt; --- a/include/linux/pkeys.h</span>
<span class="quote">&gt; +++ b/include/linux/pkeys.h</span>
<span class="quote">&gt; @@ -13,6 +13,7 @@</span>
<span class="quote">&gt;  #define arch_override_mprotect_pkey(vma, prot, pkey) (0)</span>
<span class="quote">&gt;  #define PKEY_DEDICATED_EXECUTE_ONLY 0</span>
<span class="quote">&gt;  #define ARCH_VM_PKEY_FLAGS 0</span>
<span class="quote">&gt; +#define vma_pkey(vma) 0</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline bool mm_pkey_is_allocated(struct mm_struct *mm, int pkey)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -35,6 +36,11 @@ static inline int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline bool arch_pkeys_enabled(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return false;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static inline void copy_init_pkru_to_fpregs(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.7.1</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Feb. 2, 2018, 4:27 a.m.</div>
<pre class="content">
Hi Ram,

Thank you for the patch! Yet something to improve:

[auto build test ERROR on linus/master]
[also build test ERROR on v4.15 next-20180201]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Ram-Pai/mm-x86-powerpc-Enhancements-to-Memory-Protection-Keys/20180202-120004
config: x86_64-randconfig-x005-201804 (attached as .config)
compiler: gcc-7 (Debian 7.2.0-12) 7.2.1 20171025
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All error/warnings (new ones prefixed by &gt;&gt;):

   In file included from arch/x86/include/asm/mmu_context.h:8:0,
                    from arch/x86/events/core.c:36:
<span class="quote">&gt;&gt; include/linux/pkeys.h:16:23: error: expected identifier or &#39;(&#39; before numeric constant</span>
    #define vma_pkey(vma) 0
                          ^
<span class="quote">&gt;&gt; arch/x86/include/asm/mmu_context.h:298:19: note: in expansion of macro &#39;vma_pkey&#39;</span>
    static inline int vma_pkey(struct vm_area_struct *vma)
                      ^~~~~~~~

vim +16 include/linux/pkeys.h

     7	
     8	#ifdef CONFIG_ARCH_HAS_PKEYS
     9	#include &lt;asm/pkeys.h&gt;
    10	#else /* ! CONFIG_ARCH_HAS_PKEYS */
    11	#define arch_max_pkey() (1)
    12	#define execute_only_pkey(mm) (0)
    13	#define arch_override_mprotect_pkey(vma, prot, pkey) (0)
    14	#define PKEY_DEDICATED_EXECUTE_ONLY 0
    15	#define ARCH_VM_PKEY_FLAGS 0
<span class="quote">  &gt; 16	#define vma_pkey(vma) 0</span>
    17	

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pkeys.h b/arch/x86/include/asm/pkeys.h</span>
<span class="p_header">index a0ba1ff..f6c287b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pkeys.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pkeys.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 
 extern int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
 		unsigned long init_val);
<span class="p_add">+extern bool arch_pkeys_enabled(void);</span>
 
 /*
  * Try to dedicate one of the protection keys to be used as an
<span class="p_header">diff --git a/arch/x86/kernel/fpu/xstate.c b/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_header">index 87a57b7..4f566e9 100644</span>
<span class="p_header">--- a/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_header">+++ b/arch/x86/kernel/fpu/xstate.c</span>
<span class="p_chunk">@@ -945,6 +945,11 @@</span> <span class="p_context"> int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
 
 	return 0;
 }
<span class="p_add">+</span>
<span class="p_add">+bool arch_pkeys_enabled(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return boot_cpu_has(X86_FEATURE_OSPKE);</span>
<span class="p_add">+}</span>
 #endif /* ! CONFIG_ARCH_HAS_PKEYS */
 
 /*
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 8af2e8d..ddf945a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -1326,11 +1326,3 @@</span> <span class="p_context"> static int __init register_kernel_offset_dumper(void)</span>
 	return 0;
 }
 __initcall(register_kernel_offset_dumper);
<span class="p_del">-</span>
<span class="p_del">-void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="p_del">-}</span>
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 0edd4da..6f9fbde 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/page_idle.h&gt;
 #include &lt;linux/shmem_fs.h&gt;
 #include &lt;linux/uaccess.h&gt;
<span class="p_add">+#include &lt;linux/pkeys.h&gt;</span>
 
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -728,10 +729,6 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
 }
 #endif /* HUGETLB_PAGE */
 
<span class="p_del">-void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct proc_maps_private *priv = m-&gt;private;
<span class="p_chunk">@@ -851,9 +848,11 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));
 
 	if (!rollup_mode) {
<span class="p_del">-		arch_show_smap(m, vma);</span>
<span class="p_add">+		if (arch_pkeys_enabled())</span>
<span class="p_add">+			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
 		show_smap_vma_flags(m, vma);
 	}
<span class="p_add">+</span>
 	m_cache_vma(m, vma);
 	return ret;
 }
<span class="p_header">diff --git a/include/linux/pkeys.h b/include/linux/pkeys.h</span>
<span class="p_header">index 0794ca7..dfdc609 100644</span>
<span class="p_header">--- a/include/linux/pkeys.h</span>
<span class="p_header">+++ b/include/linux/pkeys.h</span>
<span class="p_chunk">@@ -13,6 +13,7 @@</span> <span class="p_context"></span>
 #define arch_override_mprotect_pkey(vma, prot, pkey) (0)
 #define PKEY_DEDICATED_EXECUTE_ONLY 0
 #define ARCH_VM_PKEY_FLAGS 0
<span class="p_add">+#define vma_pkey(vma) 0</span>
 
 static inline bool mm_pkey_is_allocated(struct mm_struct *mm, int pkey)
 {
<span class="p_chunk">@@ -35,6 +36,11 @@</span> <span class="p_context"> static inline int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,</span>
 	return 0;
 }
 
<span class="p_add">+static inline bool arch_pkeys_enabled(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void copy_init_pkru_to_fpregs(void)
 {
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



