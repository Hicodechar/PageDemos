
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[06/22] openrisc: add l.lwa/l.swa emulation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [06/22] openrisc: add l.lwa/l.swa emulation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153221">Stafford Horne</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 14, 2017, 11:08 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;74ab1bd2f3e234ea1644ad2da057d266d82d5013.1484432596.git.shorne@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9517167/mbox/"
   >mbox</a>
|
   <a href="/patch/9517167/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9517167/">/patch/9517167/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	890BC606B3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 14 Jan 2017 23:09:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7A22926224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 14 Jan 2017 23:09:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6EC242846F; Sat, 14 Jan 2017 23:09:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3C0DF26224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 14 Jan 2017 23:09:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751035AbdANXJa (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 14 Jan 2017 18:09:30 -0500
Received: from mail-pg0-f66.google.com ([74.125.83.66]:34094 &quot;EHLO
	mail-pg0-f66.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751005AbdANXJ1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 14 Jan 2017 18:09:27 -0500
Received: by mail-pg0-f66.google.com with SMTP id b1so1825909pgc.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sat, 14 Jan 2017 15:09:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references
	:in-reply-to:references;
	bh=LorVrFDoXB8nnNSHpp4Y+OL3zntqkq8Cs6xPHG7PiDA=;
	b=Hgkw9O0h67Cc/w/s8UZNkcApsNMm3Yxd5NQPYjUzZxPtTn1KJ39i6VFZjC5FLbAwO1
	5nRmQ3fSKQO479WUALpJ4FIpOaO01tvc+j6jNajiRBOYGFLSN2t7vP1BtQCgAf/F00W7
	Ew6k6VwuJ4bxK3fb2tfi6DUgWWgVYC9GO646OwEShGARkcus236NnPD3/7rob8b8M5uK
	Y80BY0ytCmv7xBWwnBELbrGCCNYQCO4GjTSynwTRrbR3zKISaNHq7Apvj7pHneBXSk29
	f4JbQ0flk/Ftasz3xPH2BuQ8pTEG0ez3N4smy/i6qo4Q0hkT+0T2ZKNt2zfCRRZ18F6q
	hueQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references:in-reply-to:references;
	bh=LorVrFDoXB8nnNSHpp4Y+OL3zntqkq8Cs6xPHG7PiDA=;
	b=OJPOh1hY4lbNldusbg2p+ZPSWNal4fv6SxIZp7UuanXkyfUacxltN0ZPnSAh93jouA
	ANjR3ipkRbTX+ZMkAefnW4C4kLmgnAZzCJoTgM7CBIfEHQ49mSjPoSq3lRpTRg1bIzS6
	+USL1OlXvYfX09s1X5HZQFs8E/fOmmrrTwT20bQzpvvDg5+aItKs/LEDhR2mNfeUs7Kw
	RJYqrJ+33dxBxOmnyMcPR44+T7HXy7uc7RctBo35hhIJS3m9ydNI4AleFt94lwDbrcyk
	6LPc6ikxhDYKljCG59b2qHwYs+QJs4GcnEYNT5H61nU5W6oxkYBlZA4k4o9/FEWULEv/
	Hx0g==
X-Gm-Message-State: AIkVDXLaMCYo2mylUD1sgZNQALKnUbBAjVzNlWh8N9Kcy23bpFL+yeIR8u/N0k/Q6EvjAQ==
X-Received: by 10.98.204.216 with SMTP id j85mr22071325pfk.130.1484435356221;
	Sat, 14 Jan 2017 15:09:16 -0800 (PST)
Received: from localhost (z192.220-213-15.ppp.wakwak.ne.jp. [220.213.15.192])
	by smtp.gmail.com with ESMTPSA id
	g87sm16339044pfj.20.2017.01.14.15.09.15
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Sat, 14 Jan 2017 15:09:15 -0800 (PST)
From: Stafford Horne &lt;shorne@gmail.com&gt;
To: Jonas Bonn &lt;jonas@southpole.se&gt;,
	Stefan Kristiansson &lt;stefan.kristiansson@saunalahti.fi&gt;
Cc: linux@roeck-us.net, openrisc@lists.librecores.org,
	linux-kernel@vger.kernel.org, Stafford Horne &lt;shorne@gmail.com&gt;
Subject: [PATCH 06/22] openrisc: add l.lwa/l.swa emulation
Date: Sun, 15 Jan 2017 08:08:03 +0900
Message-Id: &lt;74ab1bd2f3e234ea1644ad2da057d266d82d5013.1484432596.git.shorne@gmail.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;cover.1484432596.git.shorne@gmail.com&gt;
References: &lt;cover.1484432596.git.shorne@gmail.com&gt;
In-Reply-To: &lt;cover.1484432596.git.shorne@gmail.com&gt;
References: &lt;cover.1484432596.git.shorne@gmail.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153221">Stafford Horne</a> - Jan. 14, 2017, 11:08 p.m.</div>
<pre class="content">
<span class="from">From: Stefan Kristiansson &lt;stefan.kristiansson@saunalahti.fi&gt;</span>

This adds an emulation layer for implementations
that lack the l.lwa and l.swa instructions.
It handles these instructions both in kernel space and
user space.
<span class="signed-off-by">
Signed-off-by: Stefan Kristiansson &lt;stefan.kristiansson@saunalahti.fi&gt;</span>
[shorne@gmail.com: Added delay slot pc adjust logic]
<span class="signed-off-by">Signed-off-by: Stafford Horne &lt;shorne@gmail.com&gt;</span>
---
 arch/openrisc/kernel/entry.S   |  22 ++++-
 arch/openrisc/kernel/process.c |   3 +
 arch/openrisc/kernel/traps.c   | 183 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 206 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/openrisc/kernel/entry.S b/arch/openrisc/kernel/entry.S</span>
<span class="p_header">index aac0bde..ba1a361 100644</span>
<span class="p_header">--- a/arch/openrisc/kernel/entry.S</span>
<span class="p_header">+++ b/arch/openrisc/kernel/entry.S</span>
<span class="p_chunk">@@ -173,6 +173,11 @@</span> <span class="p_context"> handler:							;\</span>
 	l.j	_ret_from_exception				;\
 	 l.nop
 
<span class="p_add">+/* clobbers &#39;reg&#39; */</span>
<span class="p_add">+#define CLEAR_LWA_FLAG(reg)		\</span>
<span class="p_add">+	l.movhi	reg,hi(lwa_flag)	;\</span>
<span class="p_add">+	l.ori	reg,reg,lo(lwa_flag)	;\</span>
<span class="p_add">+	l.sw	0(reg),r0</span>
 /*
  * NOTE: one should never assume that SPR_EPC, SPR_ESR, SPR_EEAR
  *       contain the same values as when exception we&#39;re handling
<span class="p_chunk">@@ -193,6 +198,7 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_tng_kernel_start)</span>
 /* ---[ 0x200: BUS exception ]------------------------------------------- */
 
 EXCEPTION_ENTRY(_bus_fault_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	/* r4: EA of fault (set by EXCEPTION_HANDLE) */
 	l.jal   do_bus_fault
 	 l.addi  r3,r1,0 /* pt_regs */
<span class="p_chunk">@@ -202,11 +208,13 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_bus_fault_handler)</span>
 
 /* ---[ 0x300: Data Page Fault exception ]------------------------------- */
 EXCEPTION_ENTRY(_dtlb_miss_page_fault_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	l.and	r5,r5,r0
 	l.j	1f
 	 l.nop
 
 EXCEPTION_ENTRY(_data_page_fault_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	/* set up parameters for do_page_fault */
 	l.ori	r5,r0,0x300		   // exception vector
 1:
<span class="p_chunk">@@ -282,11 +290,13 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_data_page_fault_handler)</span>
 
 /* ---[ 0x400: Insn Page Fault exception ]------------------------------- */
 EXCEPTION_ENTRY(_itlb_miss_page_fault_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	l.and	r5,r5,r0
 	l.j	1f
 	 l.nop
 
 EXCEPTION_ENTRY(_insn_page_fault_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	/* set up parameters for do_page_fault */
 	l.ori	r5,r0,0x400		   // exception vector
 1:
<span class="p_chunk">@@ -304,6 +314,7 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_insn_page_fault_handler)</span>
 /* ---[ 0x500: Timer exception ]----------------------------------------- */
 
 EXCEPTION_ENTRY(_timer_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	l.jal	timer_interrupt
 	 l.addi r3,r1,0 /* pt_regs */
 
<span class="p_chunk">@@ -313,6 +324,7 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_timer_handler)</span>
 /* ---[ 0x600: Aligment exception ]-------------------------------------- */
 
 EXCEPTION_ENTRY(_alignment_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	/* r4: EA of fault (set by EXCEPTION_HANDLE) */
 	l.jal   do_unaligned_access
 	 l.addi  r3,r1,0 /* pt_regs */
<span class="p_chunk">@@ -509,6 +521,7 @@</span> <span class="p_context"> EXCEPTION_ENTRY(_external_irq_handler)</span>
 //	l.sw	PT_SR(r1),r4
 1:
 #endif
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	l.addi	r3,r1,0
 	l.movhi	r8,hi(do_IRQ)
 	l.ori	r8,r8,lo(do_IRQ)
<span class="p_chunk">@@ -556,8 +569,12 @@</span> <span class="p_context"> ENTRY(_sys_call_handler)</span>
 	 * they should be clobbered, otherwise
 	 */
 	l.sw    PT_GPR3(r1),r3
<span class="p_del">-	/* r4 already saved */</span>
<span class="p_del">-	/* r4 holds the EEAR address of the fault, load the original r4 */</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * r4 already saved</span>
<span class="p_add">+	 * r4 holds the EEAR address of the fault, use it as screatch reg and</span>
<span class="p_add">+	 * then load the original r4</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	CLEAR_LWA_FLAG(r4)</span>
 	l.lwz	r4,PT_GPR4(r1)
 	l.sw    PT_GPR5(r1),r5
 	l.sw    PT_GPR6(r1),r6
<span class="p_chunk">@@ -776,6 +793,7 @@</span> <span class="p_context"> UNHANDLED_EXCEPTION(_vector_0xd00,0xd00)</span>
 /* ---[ 0xe00: Trap exception ]------------------------------------------ */
 
 EXCEPTION_ENTRY(_trap_handler)
<span class="p_add">+	CLEAR_LWA_FLAG(r3)</span>
 	/* r4: EA of fault (set by EXCEPTION_HANDLE) */
 	l.jal   do_trap
 	 l.addi  r3,r1,0 /* pt_regs */
<span class="p_header">diff --git a/arch/openrisc/kernel/process.c b/arch/openrisc/kernel/process.c</span>
<span class="p_header">index d7990df..c49350b 100644</span>
<span class="p_header">--- a/arch/openrisc/kernel/process.c</span>
<span class="p_header">+++ b/arch/openrisc/kernel/process.c</span>
<span class="p_chunk">@@ -226,6 +226,7 @@</span> <span class="p_context"> int dump_fpu(struct pt_regs *regs, elf_fpregset_t * fpu)</span>
 
 extern struct thread_info *_switch(struct thread_info *old_ti,
 				   struct thread_info *new_ti);
<span class="p_add">+extern int lwa_flag;</span>
 
 struct task_struct *__switch_to(struct task_struct *old,
 				struct task_struct *new)
<span class="p_chunk">@@ -243,6 +244,8 @@</span> <span class="p_context"> struct task_struct *__switch_to(struct task_struct *old,</span>
 	new_ti = new-&gt;stack;
 	old_ti = old-&gt;stack;
 
<span class="p_add">+	lwa_flag = 0;</span>
<span class="p_add">+</span>
 	current_thread_info_set[smp_processor_id()] = new_ti;
 	last = (_switch(old_ti, new_ti))-&gt;task;
 
<span class="p_header">diff --git a/arch/openrisc/kernel/traps.c b/arch/openrisc/kernel/traps.c</span>
<span class="p_header">index a4574cb..7907b6c 100644</span>
<span class="p_header">--- a/arch/openrisc/kernel/traps.c</span>
<span class="p_header">+++ b/arch/openrisc/kernel/traps.c</span>
<span class="p_chunk">@@ -40,6 +40,8 @@</span> <span class="p_context"></span>
 extern char _etext, _stext;
 
 int kstack_depth_to_print = 0x180;
<span class="p_add">+int lwa_flag;</span>
<span class="p_add">+unsigned long __user *lwa_addr;</span>
 
 static inline int valid_stack_ptr(struct thread_info *tinfo, void *p)
 {
<span class="p_chunk">@@ -334,10 +336,191 @@</span> <span class="p_context"> asmlinkage void do_bus_fault(struct pt_regs *regs, unsigned long address)</span>
 	}
 }
 
<span class="p_add">+static inline int in_delay_slot(struct pt_regs *regs)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_OPENRISC_NO_SPR_SR_DSX</span>
<span class="p_add">+	/* No delay slot flag, do the old way */</span>
<span class="p_add">+	unsigned int op, insn;</span>
<span class="p_add">+</span>
<span class="p_add">+	insn = *((unsigned int *)regs-&gt;pc);</span>
<span class="p_add">+	op = insn &gt;&gt; 26;</span>
<span class="p_add">+	switch (op) {</span>
<span class="p_add">+	case 0x00: /* l.j */</span>
<span class="p_add">+	case 0x01: /* l.jal */</span>
<span class="p_add">+	case 0x03: /* l.bnf */</span>
<span class="p_add">+	case 0x04: /* l.bf */</span>
<span class="p_add">+	case 0x11: /* l.jr */</span>
<span class="p_add">+	case 0x12: /* l.jalr */</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return regs-&gt;sr &amp; SPR_SR_DSX;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void adjust_pc(struct pt_regs *regs, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int displacement;</span>
<span class="p_add">+	unsigned int rb, op, jmp;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(in_delay_slot(regs))) {</span>
<span class="p_add">+		/* In delay slot, instruction at pc is a branch, simulate it */</span>
<span class="p_add">+		jmp = *((unsigned int *)regs-&gt;pc);</span>
<span class="p_add">+</span>
<span class="p_add">+		displacement = sign_extend32(((jmp) &amp; 0x3ffffff) &lt;&lt; 2, 27);</span>
<span class="p_add">+		rb = (jmp &amp; 0x0000ffff) &gt;&gt; 11;</span>
<span class="p_add">+		op = jmp &gt;&gt; 26;</span>
<span class="p_add">+</span>
<span class="p_add">+		switch (op) {</span>
<span class="p_add">+		case 0x00: /* l.j */</span>
<span class="p_add">+			regs-&gt;pc += displacement;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		case 0x01: /* l.jal */</span>
<span class="p_add">+			regs-&gt;pc += displacement;</span>
<span class="p_add">+			regs-&gt;gpr[9] = regs-&gt;pc + 8;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		case 0x03: /* l.bnf */</span>
<span class="p_add">+			if (regs-&gt;sr &amp; SPR_SR_F)</span>
<span class="p_add">+				regs-&gt;pc += 8;</span>
<span class="p_add">+			else</span>
<span class="p_add">+				regs-&gt;pc += displacement;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		case 0x04: /* l.bf */</span>
<span class="p_add">+			if (regs-&gt;sr &amp; SPR_SR_F)</span>
<span class="p_add">+				regs-&gt;pc += displacement;</span>
<span class="p_add">+			else</span>
<span class="p_add">+				regs-&gt;pc += 8;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		case 0x11: /* l.jr */</span>
<span class="p_add">+			regs-&gt;pc = regs-&gt;gpr[rb];</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		case 0x12: /* l.jalr */</span>
<span class="p_add">+			regs-&gt;pc = regs-&gt;gpr[rb];</span>
<span class="p_add">+			regs-&gt;gpr[9] = regs-&gt;pc + 8;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		default:</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		regs-&gt;pc += 4;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void simulate_lwa(struct pt_regs *regs, unsigned long address,</span>
<span class="p_add">+				unsigned int insn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int ra, rd;</span>
<span class="p_add">+	unsigned long value;</span>
<span class="p_add">+	unsigned long orig_pc;</span>
<span class="p_add">+	long imm;</span>
<span class="p_add">+</span>
<span class="p_add">+	const struct exception_table_entry *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	orig_pc = regs-&gt;pc;</span>
<span class="p_add">+	adjust_pc(regs, address);</span>
<span class="p_add">+</span>
<span class="p_add">+	ra = (insn &gt;&gt; 16) &amp; 0x1f;</span>
<span class="p_add">+	rd = (insn &gt;&gt; 21) &amp; 0x1f;</span>
<span class="p_add">+	imm = (short)insn;</span>
<span class="p_add">+	lwa_addr = (unsigned long __user *)(regs-&gt;gpr[ra] + imm);</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)lwa_addr &amp; 0x3) {</span>
<span class="p_add">+		do_unaligned_access(regs, address);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (get_user(value, lwa_addr)) {</span>
<span class="p_add">+		if (user_mode(regs)) {</span>
<span class="p_add">+			force_sig(SIGSEGV, current);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((entry = search_exception_tables(orig_pc))) {</span>
<span class="p_add">+			regs-&gt;pc = entry-&gt;fixup;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* kernel access in kernel space, load it directly */</span>
<span class="p_add">+		value = *((unsigned long *)lwa_addr);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	lwa_flag = 1;</span>
<span class="p_add">+	regs-&gt;gpr[rd] = value;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void simulate_swa(struct pt_regs *regs, unsigned long address,</span>
<span class="p_add">+				unsigned int insn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long __user *vaddr;</span>
<span class="p_add">+	unsigned long orig_pc;</span>
<span class="p_add">+	unsigned int ra, rb;</span>
<span class="p_add">+	long imm;</span>
<span class="p_add">+</span>
<span class="p_add">+	const struct exception_table_entry *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	orig_pc = regs-&gt;pc;</span>
<span class="p_add">+	adjust_pc(regs, address);</span>
<span class="p_add">+</span>
<span class="p_add">+	ra = (insn &gt;&gt; 16) &amp; 0x1f;</span>
<span class="p_add">+	rb = (insn &gt;&gt; 11) &amp; 0x1f;</span>
<span class="p_add">+	imm = (short)(((insn &amp; 0x2200000) &gt;&gt; 10) | (insn &amp; 0x7ff));</span>
<span class="p_add">+	vaddr = (unsigned long __user *)(regs-&gt;gpr[ra] + imm);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!lwa_flag || vaddr != lwa_addr) {</span>
<span class="p_add">+		regs-&gt;sr &amp;= ~SPR_SR_F;</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((unsigned long)vaddr &amp; 0x3) {</span>
<span class="p_add">+		do_unaligned_access(regs, address);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (put_user(regs-&gt;gpr[rb], vaddr)) {</span>
<span class="p_add">+		if (user_mode(regs)) {</span>
<span class="p_add">+			force_sig(SIGSEGV, current);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if ((entry = search_exception_tables(orig_pc))) {</span>
<span class="p_add">+			regs-&gt;pc = entry-&gt;fixup;</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/* kernel access in kernel space, store it directly */</span>
<span class="p_add">+		*((unsigned long *)vaddr) = regs-&gt;gpr[rb];</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	lwa_flag = 0;</span>
<span class="p_add">+	regs-&gt;sr |= SPR_SR_F;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#define INSN_LWA	0x1b</span>
<span class="p_add">+#define INSN_SWA	0x33</span>
<span class="p_add">+</span>
 asmlinkage void do_illegal_instruction(struct pt_regs *regs,
 				       unsigned long address)
 {
 	siginfo_t info;
<span class="p_add">+	unsigned int op;</span>
<span class="p_add">+	unsigned int insn = *((unsigned int *)address);</span>
<span class="p_add">+</span>
<span class="p_add">+	op = insn &gt;&gt; 26;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (op) {</span>
<span class="p_add">+	case INSN_LWA:</span>
<span class="p_add">+		simulate_lwa(regs, address, insn);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	case INSN_SWA:</span>
<span class="p_add">+		simulate_swa(regs, address, insn);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
 
 	if (user_mode(regs)) {
 		/* Send a SIGILL */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



