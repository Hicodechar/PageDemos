
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[55/60] x86/mm: Use INVPCID for __native_flush_tlb_single() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [55/60] x86/mm: Use INVPCID for __native_flush_tlb_single()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 4, 2017, 2:08 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171204150609.338279526@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10091073/mbox/"
   >mbox</a>
|
   <a href="/patch/10091073/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10091073/">/patch/10091073/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1A9DB6056E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 16:57:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 07DA528D4A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 16:57:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F069328E2F; Mon,  4 Dec 2017 16:57:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6B6D028D4A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 16:57:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753347AbdLDQ55 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Dec 2017 11:57:57 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:60631 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752025AbdLDQv4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Dec 2017 11:51:56 -0500
Received: from localhost ([127.0.0.1] helo=[127.0.1.1])
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1eLtwy-0007fg-96; Mon, 04 Dec 2017 17:50:36 +0100
Message-Id: &lt;20171204150609.338279526@linutronix.de&gt;
User-Agent: quilt/0.63-1
Date: Mon, 04 Dec 2017 15:08:01 +0100
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: x86@kernel.org, Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, daniel.gruss@iaik.tugraz.at,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Subject: [patch 55/60] x86/mm: Use INVPCID for __native_flush_tlb_single()
References: &lt;20171204140706.296109558@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=x86-mm--Use-INVPCID-for__native_flush_tlb_single.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Dec. 4, 2017, 2:08 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

This uses INVPCID to shoot down individual lines of the user mapping
instead of marking the entire user map as invalid. This
could/might/possibly be faster.

This for sure needs tlb_single_page_flush_ceiling to be redetermined;
esp. since INVPCID is _slow_.

[ Peterz: Split out from big combo patch ]
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 arch/x86/include/asm/cpufeatures.h |    1 
 arch/x86/include/asm/tlbflush.h    |   23 ++++++++++++-
 arch/x86/mm/init.c                 |   64 +++++++++++++++++++++----------------
 3 files changed, 60 insertions(+), 28 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Dec. 4, 2017, 10:25 p.m.</div>
<pre class="content">
On Mon, Dec 4, 2017 at 6:08 AM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:
<span class="quote">&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This uses INVPCID to shoot down individual lines of the user mapping</span>
<span class="quote">&gt; instead of marking the entire user map as invalid. This</span>
<span class="quote">&gt; could/might/possibly be faster.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This for sure needs tlb_single_page_flush_ceiling to be redetermined;</span>
<span class="quote">&gt; esp. since INVPCID is _slow_.</span>

I&#39;m wondering if INVPCID is *so* slow that this patch is entirely
counterproductive.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Dec. 4, 2017, 10:51 p.m.</div>
<pre class="content">
On Mon, Dec 04, 2017 at 02:25:43PM -0800, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Dec 4, 2017 at 6:08 AM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; &gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This uses INVPCID to shoot down individual lines of the user mapping</span>
<span class="quote">&gt; &gt; instead of marking the entire user map as invalid. This</span>
<span class="quote">&gt; &gt; could/might/possibly be faster.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This for sure needs tlb_single_page_flush_ceiling to be redetermined;</span>
<span class="quote">&gt; &gt; esp. since INVPCID is _slow_.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m wondering if INVPCID is *so* slow that this patch is entirely</span>
<span class="quote">&gt; counterproductive.</span>

We should find some of the benchmarks that were used to determine
tlb_single_page_flush_ceiling and measure. I&#39;ve not gotten around to
doing either.

Someone called Dave Hansen did that patch and might still have something
lying around to help with that:

  a5102476a24b (&quot;x86/mm: Set TLB flush tunable to sane value (33)&quot;)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Dec. 5, 2017, 1:51 p.m.</div>
<pre class="content">
On 12/04/2017 02:51 PM, Peter Zijlstra wrote:
<span class="quote">&gt; We should find some of the benchmarks that were used to determine</span>
<span class="quote">&gt; tlb_single_page_flush_ceiling and measure. I&#39;ve not gotten around to</span>
<span class="quote">&gt; doing either.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Someone called Dave Hansen did that patch and might still have something</span>
<span class="quote">&gt; lying around to help with that:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   a5102476a24b (&quot;x86/mm: Set TLB flush tunable to sane value (33)&quot;)</span>

I hate git. :)

But, yeah, we have certainly changed enough variables to necessitate
measuring it again.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Dec. 5, 2017, 2:08 p.m.</div>
<pre class="content">
On Tue, Dec 05, 2017 at 05:51:28AM -0800, Dave Hansen wrote:
<span class="quote">&gt; On 12/04/2017 02:51 PM, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; We should find some of the benchmarks that were used to determine</span>
<span class="quote">&gt; &gt; tlb_single_page_flush_ceiling and measure. I&#39;ve not gotten around to</span>
<span class="quote">&gt; &gt; doing either.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Someone called Dave Hansen did that patch and might still have something</span>
<span class="quote">&gt; &gt; lying around to help with that:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   a5102476a24b (&quot;x86/mm: Set TLB flush tunable to sane value (33)&quot;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I hate git. :)</span>

:-)
<span class="quote">
&gt; But, yeah, we have certainly changed enough variables to necessitate</span>
<span class="quote">&gt; measuring it again.</span>

Its more than that, I think much of that could show if it makes sense to
use invpcid_flush_one() at all.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -197,6 +197,7 @@</span> <span class="p_context"></span>
 #define X86_FEATURE_CAT_L3		( 7*32+ 4) /* Cache Allocation Technology L3 */
 #define X86_FEATURE_CAT_L2		( 7*32+ 5) /* Cache Allocation Technology L2 */
 #define X86_FEATURE_CDP_L3		( 7*32+ 6) /* Code and Data Prioritization L3 */
<span class="p_add">+#define X86_FEATURE_INVPCID_SINGLE	( 7*32+ 7) /* Effectively INVPCID &amp;&amp; CR4.PCIDE=1 */</span>
 
 #define X86_FEATURE_HW_PSTATE		( 7*32+ 8) /* AMD HW-PState */
 #define X86_FEATURE_PROC_FEEDBACK	( 7*32+ 9) /* AMD ProcFeedbackInterface */
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -138,6 +138,18 @@</span> <span class="p_context"> static inline u16 kern_pcid(u16 asid)</span>
 	return asid + 1;
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The user PCID is just the kernel one, plus the &quot;switch bit&quot;.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline u16 user_pcid(u16 asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u16 ret = kern_pcid(asid);</span>
<span class="p_add">+#ifdef CONFIG_KERNEL_PAGE_TABLE_ISOLATION</span>
<span class="p_add">+	ret |= 1 &lt;&lt; X86_CR3_KPTI_SWITCH_BIT;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 struct pgd_t;
 static inline unsigned long build_cr3(pgd_t *pgd, u16 asid)
 {
<span class="p_chunk">@@ -401,6 +413,8 @@</span> <span class="p_context"> static inline void __native_flush_tlb_gl</span>
 		/*
 		 * Using INVPCID is considerably faster than a pair of writes
 		 * to CR4 sandwiched inside an IRQ flag save/restore.
<span class="p_add">+		 *</span>
<span class="p_add">+		 * Note, this works with CR4.PCIDE=0 or 1.</span>
 		 */
 		invpcid_flush_all();
 		return;
<span class="p_chunk">@@ -427,7 +441,14 @@</span> <span class="p_context"> static inline void __native_flush_tlb_si</span>
 	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))
 		return;
 
<span class="p_del">-	invalidate_user_asid(loaded_mm_asid);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Some platforms #GP if we call invpcid(type=1/2) before CR4.PCIDE=1.</span>
<span class="p_add">+	 * Just use invalidate_user_asid() in case we are called early.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!this_cpu_has(X86_FEATURE_INVPCID_SINGLE))</span>
<span class="p_add">+		invalidate_user_asid(loaded_mm_asid);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		invpcid_flush_one(user_pcid(loaded_mm_asid), addr);</span>
 }
 
 static inline void __flush_tlb_all(void)
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -203,34 +203,44 @@</span> <span class="p_context"> static void __init probe_page_size_mask(</span>
 
 static void setup_pcid(void)
 {
<span class="p_del">-#ifdef CONFIG_X86_64</span>
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_del">-		if (boot_cpu_has(X86_FEATURE_PGE)) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * This can&#39;t be cr4_set_bits_and_update_boot() --</span>
<span class="p_del">-			 * the trampoline code can&#39;t handle CR4.PCIDE and</span>
<span class="p_del">-			 * it wouldn&#39;t do any good anyway.  Despite the name,</span>
<span class="p_del">-			 * cr4_set_bits_and_update_boot() doesn&#39;t actually</span>
<span class="p_del">-			 * cause the bits in question to remain set all the</span>
<span class="p_del">-			 * way through the secondary boot asm.</span>
<span class="p_del">-			 *</span>
<span class="p_del">-			 * Instead, we brute-force it and set CR4.PCIDE</span>
<span class="p_del">-			 * manually in start_secondary().</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * flush_tlb_all(), as currently implemented, won&#39;t</span>
<span class="p_del">-			 * work if PCID is on but PGE is not.  Since that</span>
<span class="p_del">-			 * combination doesn&#39;t exist on real hardware, there&#39;s</span>
<span class="p_del">-			 * no reason to try to fully support it, but it&#39;s</span>
<span class="p_del">-			 * polite to avoid corrupting data if we&#39;re on</span>
<span class="p_del">-			 * an improperly configured VM.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_X86_64))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!boot_cpu_has(X86_FEATURE_PCID))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (boot_cpu_has(X86_FEATURE_PGE)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * This can&#39;t be cr4_set_bits_and_update_boot() -- the</span>
<span class="p_add">+		 * trampoline code can&#39;t handle CR4.PCIDE and it wouldn&#39;t</span>
<span class="p_add">+		 * do any good anyway.  Despite the name,</span>
<span class="p_add">+		 * cr4_set_bits_and_update_boot() doesn&#39;t actually cause</span>
<span class="p_add">+		 * the bits in question to remain set all the way through</span>
<span class="p_add">+		 * the secondary boot asm.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * Instead, we brute-force it and set CR4.PCIDE manually in</span>
<span class="p_add">+		 * start_secondary().</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		cr4_set_bits(X86_CR4_PCIDE);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * INVPCID&#39;s single-context modes (2/3) only work if we set</span>
<span class="p_add">+		 * X86_CR4_PCIDE, *and* we INVPCID support.  It&#39;s unusable</span>
<span class="p_add">+		 * on systems that have X86_CR4_PCIDE clear, or that have</span>
<span class="p_add">+		 * no INVPCID support at all.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (boot_cpu_has(X86_FEATURE_INVPCID))</span>
<span class="p_add">+			setup_force_cpu_cap(X86_FEATURE_INVPCID_SINGLE);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * flush_tlb_all(), as currently implemented, won&#39;t work if</span>
<span class="p_add">+		 * PCID is on but PGE is not.  Since that combination</span>
<span class="p_add">+		 * doesn&#39;t exist on real hardware, there&#39;s no reason to try</span>
<span class="p_add">+		 * to fully support it, but it&#39;s polite to avoid corrupting</span>
<span class="p_add">+		 * data if we&#39;re on an improperly configured VM.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		setup_clear_cpu_cap(X86_FEATURE_PCID);</span>
 	}
<span class="p_del">-#endif</span>
 }
 
 #ifdef CONFIG_X86_32

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



