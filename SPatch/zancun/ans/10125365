
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,0/5] mm, hugetlb: allocation API and migration improvements - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,0/5] mm, hugetlb: allocation API and migration improvements</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 20, 2017, 9:53 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171220095328.GG4831@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10125365/mbox/"
   >mbox</a>
|
   <a href="/patch/10125365/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10125365/">/patch/10125365/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D79F16019C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Dec 2017 09:53:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6BA529671
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Dec 2017 09:53:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D993A296E7; Wed, 20 Dec 2017 09:53:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6BA8229671
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Dec 2017 09:53:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754834AbdLTJxe (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 20 Dec 2017 04:53:34 -0500
Received: from mx2.suse.de ([195.135.220.15]:37466 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754104AbdLTJxa (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 20 Dec 2017 04:53:30 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 4DF6CADCE;
	Wed, 20 Dec 2017 09:53:29 +0000 (UTC)
Date: Wed, 20 Dec 2017 10:53:28 +0100
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [RFC PATCH 0/5] mm, hugetlb: allocation API and migration
	improvements
Message-ID: &lt;20171220095328.GG4831@dhcp22.suse.cz&gt;
References: &lt;20171204140117.7191-1-mhocko@kernel.org&gt;
	&lt;20171215093309.GU16951@dhcp22.suse.cz&gt;
	&lt;95ba8db3-f8aa-528a-db4b-80f9d2ba9d2b@ah.jp.nec.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;95ba8db3-f8aa-528a-db4b-80f9d2ba9d2b@ah.jp.nec.com&gt;
User-Agent: Mutt/1.9.1 (2017-09-22)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 20, 2017, 9:53 a.m.</div>
<pre class="content">
On Wed 20-12-17 05:33:36, Naoya Horiguchi wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; On 12/15/2017 06:33 PM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; Naoya,</span>
<span class="quote">&gt; &gt; this has passed Mike&#39;s review (thanks for that!), you have mentioned</span>
<span class="quote">&gt; &gt; that you can pass this through your testing machinery earlier. While</span>
<span class="quote">&gt; &gt; I&#39;ve done some testing already I would really appreciate if you could</span>
<span class="quote">&gt; &gt; do that as well. Review would be highly appreciated as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry for my slow response. I reviewed/tested this patchset and looks</span>
<span class="quote">&gt; good to me overall.</span>

No need to feel sorry. This doesn&#39;t have an urgent priority. Thanks for
the review and testing. Can I assume your {Reviewed,Acked}-by or
Tested-by?
<span class="quote">
&gt; I have one comment on the code path from mbind(2).</span>
<span class="quote">&gt; The callback passed to migrate_pages() in do_mbind() (i.e. new_page())</span>
<span class="quote">&gt; calls alloc_huge_page_noerr() which currently doesn&#39;t call SetPageHugeTemporary(),</span>
<span class="quote">&gt; so hugetlb migration fails when h-&gt;surplus_huge_page &gt;= h-&gt;nr_overcommit_huge_pages.</span>

Yes, I am aware of that. I should have been more explicit in the
changelog. Sorry about that and thanks for pointing it out explicitly.
To be honest I wasn&#39;t really sure what to do about this. The code path
is really complex and it made my head spin. I fail to see why we have to
call alloc_huge_page and mess with reservations at all.
<span class="quote">
&gt; I don&#39;t think this is a bug, but it would be better if mbind(2) works</span>
<span class="quote">&gt; more similarly with other migration callers like move_pages(2)/migrate_pages(2).</span>

If the fix is as easy as the following I will add it to the pile.
Otherwise I would prefer to do this separately after I find some more
time to understand the callpath.
---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 20, 2017, 10:43 p.m.</div>
<pre class="content">
On 12/20/2017 01:53 AM, Michal Hocko wrote:
<span class="quote">&gt; On Wed 20-12-17 05:33:36, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt; I have one comment on the code path from mbind(2).</span>
<span class="quote">&gt;&gt; The callback passed to migrate_pages() in do_mbind() (i.e. new_page())</span>
<span class="quote">&gt;&gt; calls alloc_huge_page_noerr() which currently doesn&#39;t call SetPageHugeTemporary(),</span>
<span class="quote">&gt;&gt; so hugetlb migration fails when h-&gt;surplus_huge_page &gt;= h-&gt;nr_overcommit_huge_pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, I am aware of that. I should have been more explicit in the</span>
<span class="quote">&gt; changelog. Sorry about that and thanks for pointing it out explicitly.</span>
<span class="quote">&gt; To be honest I wasn&#39;t really sure what to do about this. The code path</span>
<span class="quote">&gt; is really complex and it made my head spin. I fail to see why we have to</span>
<span class="quote">&gt; call alloc_huge_page and mess with reservations at all.</span>

Oops!  I missed that in my review.

Since alloc_huge_page was called with avoid_reserve == 1, it should not
do anything with reserve counts.  One potential issue with the existing
code is cgroup accounting done by alloc_huge_page.  When the new target
page is allocated, it is charged against the cgroup even though the original
page is still accounted for.  If we are &#39;at the cgroup limit&#39;, the migration
may fail because of this.

I like your new code below as it explicitly takes reserve and cgroup
accounting out of the picture for migration.  Let me think about it
for another day before providing a Reviewed-by.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 21, 2017, 7:28 a.m.</div>
<pre class="content">
On Wed 20-12-17 14:43:03, Mike Kravetz wrote:
<span class="quote">&gt; On 12/20/2017 01:53 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Wed 20-12-17 05:33:36, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt;&gt; I have one comment on the code path from mbind(2).</span>
<span class="quote">&gt; &gt;&gt; The callback passed to migrate_pages() in do_mbind() (i.e. new_page())</span>
<span class="quote">&gt; &gt;&gt; calls alloc_huge_page_noerr() which currently doesn&#39;t call SetPageHugeTemporary(),</span>
<span class="quote">&gt; &gt;&gt; so hugetlb migration fails when h-&gt;surplus_huge_page &gt;= h-&gt;nr_overcommit_huge_pages.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Yes, I am aware of that. I should have been more explicit in the</span>
<span class="quote">&gt; &gt; changelog. Sorry about that and thanks for pointing it out explicitly.</span>
<span class="quote">&gt; &gt; To be honest I wasn&#39;t really sure what to do about this. The code path</span>
<span class="quote">&gt; &gt; is really complex and it made my head spin. I fail to see why we have to</span>
<span class="quote">&gt; &gt; call alloc_huge_page and mess with reservations at all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Oops!  I missed that in my review.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since alloc_huge_page was called with avoid_reserve == 1, it should not</span>
<span class="quote">&gt; do anything with reserve counts.  One potential issue with the existing</span>
<span class="quote">&gt; code is cgroup accounting done by alloc_huge_page.  When the new target</span>
<span class="quote">&gt; page is allocated, it is charged against the cgroup even though the original</span>
<span class="quote">&gt; page is still accounted for.  If we are &#39;at the cgroup limit&#39;, the migration</span>
<span class="quote">&gt; may fail because of this.</span>

Yeah, the existing code seems just broken. I strongly suspect that the
allocation API for hugetlb was so complicated that this was just a
natural result of a confusion with some follow up changes on top.
<span class="quote">
&gt; I like your new code below as it explicitly takes reserve and cgroup</span>
<span class="quote">&gt; accounting out of the picture for migration.  Let me think about it</span>
<span class="quote">&gt; for another day before providing a Reviewed-by.</span>

Thanks a lot!
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 21, 2017, 11:35 p.m.</div>
<pre class="content">
On 12/20/2017 11:28 PM, Michal Hocko wrote:
<span class="quote">&gt; On Wed 20-12-17 14:43:03, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; On 12/20/2017 01:53 AM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt; On Wed 20-12-17 05:33:36, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; I have one comment on the code path from mbind(2).</span>
<span class="quote">&gt;&gt;&gt;&gt; The callback passed to migrate_pages() in do_mbind() (i.e. new_page())</span>
<span class="quote">&gt;&gt;&gt;&gt; calls alloc_huge_page_noerr() which currently doesn&#39;t call SetPageHugeTemporary(),</span>
<span class="quote">&gt;&gt;&gt;&gt; so hugetlb migration fails when h-&gt;surplus_huge_page &gt;= h-&gt;nr_overcommit_huge_pages.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Yes, I am aware of that. I should have been more explicit in the</span>
<span class="quote">&gt;&gt;&gt; changelog. Sorry about that and thanks for pointing it out explicitly.</span>
<span class="quote">&gt;&gt;&gt; To be honest I wasn&#39;t really sure what to do about this. The code path</span>
<span class="quote">&gt;&gt;&gt; is really complex and it made my head spin. I fail to see why we have to</span>
<span class="quote">&gt;&gt;&gt; call alloc_huge_page and mess with reservations at all.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Oops!  I missed that in my review.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Since alloc_huge_page was called with avoid_reserve == 1, it should not</span>
<span class="quote">&gt;&gt; do anything with reserve counts.  One potential issue with the existing</span>
<span class="quote">&gt;&gt; code is cgroup accounting done by alloc_huge_page.  When the new target</span>
<span class="quote">&gt;&gt; page is allocated, it is charged against the cgroup even though the original</span>
<span class="quote">&gt;&gt; page is still accounted for.  If we are &#39;at the cgroup limit&#39;, the migration</span>
<span class="quote">&gt;&gt; may fail because of this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah, the existing code seems just broken. I strongly suspect that the</span>
<span class="quote">&gt; allocation API for hugetlb was so complicated that this was just a</span>
<span class="quote">&gt; natural result of a confusion with some follow up changes on top.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; I like your new code below as it explicitly takes reserve and cgroup</span>
<span class="quote">&gt;&gt; accounting out of the picture for migration.  Let me think about it</span>
<span class="quote">&gt;&gt; for another day before providing a Reviewed-by.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks a lot!</span>

You can add,
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

I had some concerns about transferring huge page state during migration
not specific to this patch, so I did a bunch of testing.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Dec. 22, 2017, 8:58 a.m.</div>
<pre class="content">
On 12/20/2017 06:53 PM, Michal Hocko wrote:
<span class="quote">&gt; On Wed 20-12-17 05:33:36, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 12/15/2017 06:33 PM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt; Naoya,</span>
<span class="quote">&gt;&gt;&gt; this has passed Mike&#39;s review (thanks for that!), you have mentioned</span>
<span class="quote">&gt;&gt;&gt; that you can pass this through your testing machinery earlier. While</span>
<span class="quote">&gt;&gt;&gt; I&#39;ve done some testing already I would really appreciate if you could</span>
<span class="quote">&gt;&gt;&gt; do that as well. Review would be highly appreciated as well.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Sorry for my slow response. I reviewed/tested this patchset and looks</span>
<span class="quote">&gt;&gt; good to me overall.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; No need to feel sorry. This doesn&#39;t have an urgent priority. Thanks for</span>
<span class="quote">&gt; the review and testing. Can I assume your {Reviewed,Acked}-by or</span>
<span class="quote">&gt; Tested-by?</span>
<span class="quote">&gt; </span>

Yes, I tested again with additional changes below, and hugetlb migration
works fine from mbind(2). Thank you very much for your work.
<span class="reviewed-by">
Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

for the series.

Thanks,
Naoya Horiguchi
<span class="quote">
&gt;&gt; I have one comment on the code path from mbind(2).</span>
<span class="quote">&gt;&gt; The callback passed to migrate_pages() in do_mbind() (i.e. new_page())</span>
<span class="quote">&gt;&gt; calls alloc_huge_page_noerr() which currently doesn&#39;t call SetPageHugeTemporary(),</span>
<span class="quote">&gt;&gt; so hugetlb migration fails when h-&gt;surplus_huge_page &gt;= h-&gt;nr_overcommit_huge_pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, I am aware of that. I should have been more explicit in the</span>
<span class="quote">&gt; changelog. Sorry about that and thanks for pointing it out explicitly.</span>
<span class="quote">&gt; To be honest I wasn&#39;t really sure what to do about this. The code path</span>
<span class="quote">&gt; is really complex and it made my head spin. I fail to see why we have to</span>
<span class="quote">&gt; call alloc_huge_page and mess with reservations at all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; I don&#39;t think this is a bug, but it would be better if mbind(2) works</span>
<span class="quote">&gt;&gt; more similarly with other migration callers like move_pages(2)/migrate_pages(2).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If the fix is as easy as the following I will add it to the pile.</span>
<span class="quote">&gt; Otherwise I would prefer to do this separately after I find some more</span>
<span class="quote">&gt; time to understand the callpath.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="quote">&gt; index e035002d3fb6..08a4af411e25 100644</span>
<span class="quote">&gt; --- a/include/linux/hugetlb.h</span>
<span class="quote">&gt; +++ b/include/linux/hugetlb.h</span>
<span class="quote">&gt; @@ -345,10 +345,9 @@ struct huge_bootmem_page {</span>
<span class="quote">&gt;  struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  				unsigned long addr, int avoid_reserve);</span>
<span class="quote">&gt;  struct page *alloc_huge_page_node(struct hstate *h, int nid);</span>
<span class="quote">&gt; -struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="quote">&gt; -				unsigned long addr, int avoid_reserve);</span>
<span class="quote">&gt;  struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
<span class="quote">&gt;  				nodemask_t *nmask);</span>
<span class="quote">&gt; +struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address);</span>
<span class="quote">&gt;  int huge_add_to_page_cache(struct page *page, struct address_space *mapping,</span>
<span class="quote">&gt;  			pgoff_t idx);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -526,7 +525,7 @@ struct hstate {};</span>
<span class="quote">&gt;  #define alloc_huge_page(v, a, r) NULL</span>
<span class="quote">&gt;  #define alloc_huge_page_node(h, nid) NULL</span>
<span class="quote">&gt;  #define alloc_huge_page_nodemask(h, preferred_nid, nmask) NULL</span>
<span class="quote">&gt; -#define alloc_huge_page_noerr(v, a, r) NULL</span>
<span class="quote">&gt; +#define alloc_huge_page_vma(vma, address) NULL</span>
<span class="quote">&gt;  #define alloc_bootmem_huge_page(h) NULL</span>
<span class="quote">&gt;  #define hstate_file(f) NULL</span>
<span class="quote">&gt;  #define hstate_sizelog(s) NULL</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 4426c5b23a20..e00deabe6d17 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -1672,6 +1672,25 @@ struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
<span class="quote">&gt;  	return alloc_migrate_huge_page(h, gfp_mask, preferred_nid, nmask);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/* mempolicy aware migration callback */</span>
<span class="quote">&gt; +struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mempolicy *mpol;</span>
<span class="quote">&gt; +	nodemask_t *nodemask;</span>
<span class="quote">&gt; +	struct page *page;</span>
<span class="quote">&gt; +	struct hstate *h;</span>
<span class="quote">&gt; +	gfp_t gfp_mask;</span>
<span class="quote">&gt; +	int node;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	h = hstate_vma(vma);</span>
<span class="quote">&gt; +	gfp_mask = htlb_alloc_mask(h);</span>
<span class="quote">&gt; +	node = huge_node(vma, address, gfp_mask, &amp;mpol, &amp;nodemask);</span>
<span class="quote">&gt; +	page = alloc_huge_page_nodemask(h, node, nodemask);</span>
<span class="quote">&gt; +	mpol_cond_put(mpol);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return page;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Increase the hugetlb pool such that it can accommodate a reservation</span>
<span class="quote">&gt;   * of size &#39;delta&#39;.</span>
<span class="quote">&gt; @@ -2077,20 +2096,6 @@ struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	return ERR_PTR(-ENOSPC);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -/*</span>
<span class="quote">&gt; - * alloc_huge_page()&#39;s wrapper which simply returns the page if allocation</span>
<span class="quote">&gt; - * succeeds, otherwise NULL. This function is called from new_vma_page(),</span>
<span class="quote">&gt; - * where no ERR_VALUE is expected to be returned.</span>
<span class="quote">&gt; - */</span>
<span class="quote">&gt; -struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="quote">&gt; -				unsigned long addr, int avoid_reserve)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	struct page *page = alloc_huge_page(vma, addr, avoid_reserve);</span>
<span class="quote">&gt; -	if (IS_ERR(page))</span>
<span class="quote">&gt; -		page = NULL;</span>
<span class="quote">&gt; -	return page;</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  int alloc_bootmem_huge_page(struct hstate *h)</span>
<span class="quote">&gt;  	__attribute__ ((weak, alias(&quot;__alloc_bootmem_huge_page&quot;)));</span>
<span class="quote">&gt;  int __alloc_bootmem_huge_page(struct hstate *h)</span>
<span class="quote">&gt; diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="quote">&gt; index f604b22ebb65..96823fa07f38 100644</span>
<span class="quote">&gt; --- a/mm/mempolicy.c</span>
<span class="quote">&gt; +++ b/mm/mempolicy.c</span>
<span class="quote">&gt; @@ -1121,8 +1121,7 @@ static struct page *new_page(struct page *page, unsigned long start, int **x)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (PageHuge(page)) {</span>
<span class="quote">&gt; -		BUG_ON(!vma);</span>
<span class="quote">&gt; -		return alloc_huge_page_noerr(vma, address, 1);</span>
<span class="quote">&gt; +		return alloc_huge_page_vma(vma, address);</span>
<span class="quote">&gt;  	} else if (thp_migration_supported() &amp;&amp; PageTransHuge(page)) {</span>
<span class="quote">&gt;  		struct page *thp;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index e035002d3fb6..08a4af411e25 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -345,10 +345,9 @@</span> <span class="p_context"> struct huge_bootmem_page {</span>
 struct page *alloc_huge_page(struct vm_area_struct *vma,
 				unsigned long addr, int avoid_reserve);
 struct page *alloc_huge_page_node(struct hstate *h, int nid);
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve);</span>
 struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,
 				nodemask_t *nmask);
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address);</span>
 int huge_add_to_page_cache(struct page *page, struct address_space *mapping,
 			pgoff_t idx);
 
<span class="p_chunk">@@ -526,7 +525,7 @@</span> <span class="p_context"> struct hstate {};</span>
 #define alloc_huge_page(v, a, r) NULL
 #define alloc_huge_page_node(h, nid) NULL
 #define alloc_huge_page_nodemask(h, preferred_nid, nmask) NULL
<span class="p_del">-#define alloc_huge_page_noerr(v, a, r) NULL</span>
<span class="p_add">+#define alloc_huge_page_vma(vma, address) NULL</span>
 #define alloc_bootmem_huge_page(h) NULL
 #define hstate_file(f) NULL
 #define hstate_sizelog(s) NULL
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 4426c5b23a20..e00deabe6d17 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1672,6 +1672,25 @@</span> <span class="p_context"> struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
 	return alloc_migrate_huge_page(h, gfp_mask, preferred_nid, nmask);
 }
 
<span class="p_add">+/* mempolicy aware migration callback */</span>
<span class="p_add">+struct page *alloc_huge_page_vma(struct vm_area_struct *vma, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mempolicy *mpol;</span>
<span class="p_add">+	nodemask_t *nodemask;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	struct hstate *h;</span>
<span class="p_add">+	gfp_t gfp_mask;</span>
<span class="p_add">+	int node;</span>
<span class="p_add">+</span>
<span class="p_add">+	h = hstate_vma(vma);</span>
<span class="p_add">+	gfp_mask = htlb_alloc_mask(h);</span>
<span class="p_add">+	node = huge_node(vma, address, gfp_mask, &amp;mpol, &amp;nodemask);</span>
<span class="p_add">+	page = alloc_huge_page_nodemask(h, node, nodemask);</span>
<span class="p_add">+	mpol_cond_put(mpol);</span>
<span class="p_add">+</span>
<span class="p_add">+	return page;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Increase the hugetlb pool such that it can accommodate a reservation
  * of size &#39;delta&#39;.
<span class="p_chunk">@@ -2077,20 +2096,6 @@</span> <span class="p_context"> struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 	return ERR_PTR(-ENOSPC);
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * alloc_huge_page()&#39;s wrapper which simply returns the page if allocation</span>
<span class="p_del">- * succeeds, otherwise NULL. This function is called from new_vma_page(),</span>
<span class="p_del">- * where no ERR_VALUE is expected to be returned.</span>
<span class="p_del">- */</span>
<span class="p_del">-struct page *alloc_huge_page_noerr(struct vm_area_struct *vma,</span>
<span class="p_del">-				unsigned long addr, int avoid_reserve)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct page *page = alloc_huge_page(vma, addr, avoid_reserve);</span>
<span class="p_del">-	if (IS_ERR(page))</span>
<span class="p_del">-		page = NULL;</span>
<span class="p_del">-	return page;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 int alloc_bootmem_huge_page(struct hstate *h)
 	__attribute__ ((weak, alias(&quot;__alloc_bootmem_huge_page&quot;)));
 int __alloc_bootmem_huge_page(struct hstate *h)
<span class="p_header">diff --git a/mm/mempolicy.c b/mm/mempolicy.c</span>
<span class="p_header">index f604b22ebb65..96823fa07f38 100644</span>
<span class="p_header">--- a/mm/mempolicy.c</span>
<span class="p_header">+++ b/mm/mempolicy.c</span>
<span class="p_chunk">@@ -1121,8 +1121,7 @@</span> <span class="p_context"> static struct page *new_page(struct page *page, unsigned long start, int **x)</span>
 	}
 
 	if (PageHuge(page)) {
<span class="p_del">-		BUG_ON(!vma);</span>
<span class="p_del">-		return alloc_huge_page_noerr(vma, address, 1);</span>
<span class="p_add">+		return alloc_huge_page_vma(vma, address);</span>
 	} else if (thp_migration_supported() &amp;&amp; PageTransHuge(page)) {
 		struct page *thp;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



