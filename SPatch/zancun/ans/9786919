
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,2/4] hugetlb: add support for preferred node to alloc_huge_page_nodemask - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,2/4] hugetlb: add support for preferred node to alloc_huge_page_nodemask</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 14, 2017, 4:41 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170614164151.GA11240@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9786919/mbox/"
   >mbox</a>
|
   <a href="/patch/9786919/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9786919/">/patch/9786919/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	415C1602D9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 16:42:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 31D5C285E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 16:42:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 258652860B; Wed, 14 Jun 2017 16:42:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 72D45285E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 16:41:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752322AbdFNQl5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Jun 2017 12:41:57 -0400
Received: from mx2.suse.de ([195.135.220.15]:56048 &quot;EHLO mx1.suse.de&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750768AbdFNQl4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Jun 2017 12:41:56 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx1.suse.de (Postfix) with ESMTP id 97BB7ACCE;
	Wed, 14 Jun 2017 16:41:54 +0000 (UTC)
Date: Wed, 14 Jun 2017 18:41:51 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: linux-mm@kvack.org, Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: [RFC PATCH 2/4] hugetlb: add support for preferred node to
	alloc_huge_page_nodemask
Message-ID: &lt;20170614164151.GA11240@dhcp22.suse.cz&gt;
References: &lt;20170613090039.14393-1-mhocko@kernel.org&gt;
	&lt;20170613090039.14393-3-mhocko@kernel.org&gt;
	&lt;1b208520-8d4b-9a58-7384-1a031b610e15@suse.cz&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;1b208520-8d4b-9a58-7384-1a031b610e15@suse.cz&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 14, 2017, 4:41 p.m.</div>
<pre class="content">
On Wed 14-06-17 18:17:18, Vlastimil Babka wrote:
<span class="quote">&gt; On 06/13/2017 11:00 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; alloc_huge_page_nodemask tries to allocate from any numa node in the</span>
<span class="quote">&gt; &gt; allowed node mask starting from lower numa nodes. This might lead to</span>
<span class="quote">&gt; &gt; filling up those low NUMA nodes while others are not used. We can reduce</span>
<span class="quote">&gt; &gt; this risk by introducing a concept of the preferred node similar to what</span>
<span class="quote">&gt; &gt; we have in the regular page allocator. We will start allocating from the</span>
<span class="quote">&gt; &gt; preferred nid and then iterate over all allowed nodes in the zonelist</span>
<span class="quote">&gt; &gt; order until we try them all.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This is mimicking the page allocator logic except it operates on</span>
<span class="quote">&gt; &gt; per-node mempools. dequeue_huge_page_vma already does this so distill</span>
<span class="quote">&gt; &gt; the zonelist logic into a more generic dequeue_huge_page_nodemask</span>
<span class="quote">&gt; &gt; and use it in alloc_huge_page_nodemask.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve reviewed the current version in git, where patch 3/4 is folded.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Noticed some things below, but after fixing:</span>
<span class="quote">&gt; Acked-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>

Thanks!

[...]
<span class="quote">&gt; &gt; +retry_cpuset:</span>
<span class="quote">&gt; &gt; +	cpuset_mems_cookie = read_mems_allowed_begin();</span>
<span class="quote">&gt; &gt; +	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), nmask) {</span>
<span class="quote">&gt; &gt; +		if (!cpuset_zone_allowed(zone, gfp_mask))</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +		/*</span>
<span class="quote">&gt; &gt; +		 * no need to ask again on the same node. Pool is node rather than</span>
<span class="quote">&gt; &gt; +		 * zone aware</span>
<span class="quote">&gt; &gt; +		 */</span>
<span class="quote">&gt; &gt; +		if (zone_to_nid(zone) == node)</span>
<span class="quote">&gt; &gt; +			continue;</span>
<span class="quote">&gt; &gt; +		node = zone_to_nid(zone);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	for_each_online_node(node) {</span>
<span class="quote">&gt; &gt;  		page = dequeue_huge_page_node_exact(h, node);</span>
<span class="quote">&gt; &gt;  		if (page)</span>
<span class="quote">&gt; &gt; -			return page;</span>
<span class="quote">&gt; &gt; +			break;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Either keep return page here...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt; +	if (unlikely(!page &amp;&amp; read_mems_allowed_retry(cpuset_mems_cookie)))</span>
<span class="quote">&gt; &gt; +		goto retry_cpuset;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  	return NULL;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... or return page here.</span>

ups I went with the former.

[...]
<span class="quote">
&gt; &gt; -struct page *alloc_huge_page_nodemask(struct hstate *h, nodemask_t *nmask)</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
<span class="quote">&gt; &gt; +		nodemask_t *nmask)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	struct page *page = NULL;</span>
<span class="quote">&gt; &gt; -	int node;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt; &gt;  	if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages &gt; 0) {</span>
<span class="quote">&gt; &gt; -		for_each_node_mask(node, *nmask) {</span>
<span class="quote">&gt; &gt; -			page = dequeue_huge_page_node_exact(h, node);</span>
<span class="quote">&gt; &gt; -			if (page)</span>
<span class="quote">&gt; &gt; -				break;</span>
<span class="quote">&gt; &gt; -		}</span>
<span class="quote">&gt; &gt; +		page = dequeue_huge_page_nodemask(h, preferred_nid, nmask);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +		if (page)</span>
<span class="quote">&gt; &gt; +			goto unlock;</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt; +unlock:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This doesn&#39;t seem needed?</span>

This on top?
---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - June 14, 2017, 4:57 p.m.</div>
<pre class="content">
On 06/14/2017 06:41 PM, Michal Hocko wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; This on top?</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 9ac0ae725c5e..f9868e095afa 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -902,7 +902,6 @@ static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned int cpuset_mems_cookie;</span>
<span class="quote">&gt;  	struct zonelist *zonelist;</span>
<span class="quote">&gt; -	struct page *page = NULL;</span>
<span class="quote">&gt;  	struct zone *zone;</span>
<span class="quote">&gt;  	struct zoneref *z;</span>
<span class="quote">&gt;  	int node = -1;</span>
<span class="quote">&gt; @@ -912,6 +911,8 @@ static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
<span class="quote">&gt;  retry_cpuset:</span>
<span class="quote">&gt;  	cpuset_mems_cookie = read_mems_allowed_begin();</span>
<span class="quote">&gt;  	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), nmask) {</span>
<span class="quote">&gt; +		struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		if (!cpuset_zone_allowed(zone, gfp_mask))</span>
<span class="quote">&gt;  			continue;</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -924,9 +925,9 @@ static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		page = dequeue_huge_page_node_exact(h, node);</span>
<span class="quote">&gt;  		if (page)</span>
<span class="quote">&gt; -			break;</span>
<span class="quote">&gt; +			return page;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; -	if (unlikely(!page &amp;&amp; read_mems_allowed_retry(cpuset_mems_cookie)))</span>
<span class="quote">&gt; +	if (unlikely(read_mems_allowed_retry(cpuset_mems_cookie)))</span>
<span class="quote">&gt;  		goto retry_cpuset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return NULL;</span>

OK
<span class="quote">
&gt; @@ -1655,18 +1656,18 @@ struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
<span class="quote">&gt;  		nodemask_t *nmask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	gfp_t gfp_mask = htlb_alloc_mask(h);</span>
<span class="quote">&gt; -	struct page *page = NULL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;  	if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages &gt; 0) {</span>
<span class="quote">&gt; +		struct page *page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		page = dequeue_huge_page_nodemask(h, gfp_mask, preferred_nid, nmask);</span>
<span class="quote">&gt; -		if (page)</span>
<span class="quote">&gt; -			goto unlock;</span>
<span class="quote">&gt; +		if (page) {</span>
<span class="quote">&gt; +			spin_unlock(&amp;hugetlb_lock);</span>
<span class="quote">&gt; +			return page;</span>
<span class="quote">&gt; +		}</span>

I thought you would just continue after the if (this is not a for-loop
after all), but this works too.
<span class="quote">
&gt;  	}</span>
<span class="quote">&gt; -unlock:</span>
<span class="quote">&gt;  	spin_unlock(&amp;hugetlb_lock);</span>
<span class="quote">&gt; -	if (page)</span>
<span class="quote">&gt; -		return page;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* No reservations, try to overcommit */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 9ac0ae725c5e..f9868e095afa 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -902,7 +902,6 @@</span> <span class="p_context"> static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
 {
 	unsigned int cpuset_mems_cookie;
 	struct zonelist *zonelist;
<span class="p_del">-	struct page *page = NULL;</span>
 	struct zone *zone;
 	struct zoneref *z;
 	int node = -1;
<span class="p_chunk">@@ -912,6 +911,8 @@</span> <span class="p_context"> static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
 retry_cpuset:
 	cpuset_mems_cookie = read_mems_allowed_begin();
 	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), nmask) {
<span class="p_add">+		struct page *page;</span>
<span class="p_add">+</span>
 		if (!cpuset_zone_allowed(zone, gfp_mask))
 			continue;
 		/*
<span class="p_chunk">@@ -924,9 +925,9 @@</span> <span class="p_context"> static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask,</span>
 
 		page = dequeue_huge_page_node_exact(h, node);
 		if (page)
<span class="p_del">-			break;</span>
<span class="p_add">+			return page;</span>
 	}
<span class="p_del">-	if (unlikely(!page &amp;&amp; read_mems_allowed_retry(cpuset_mems_cookie)))</span>
<span class="p_add">+	if (unlikely(read_mems_allowed_retry(cpuset_mems_cookie)))</span>
 		goto retry_cpuset;
 
 	return NULL;
<span class="p_chunk">@@ -1655,18 +1656,18 @@</span> <span class="p_context"> struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,</span>
 		nodemask_t *nmask)
 {
 	gfp_t gfp_mask = htlb_alloc_mask(h);
<span class="p_del">-	struct page *page = NULL;</span>
 
 	spin_lock(&amp;hugetlb_lock);
 	if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages &gt; 0) {
<span class="p_add">+		struct page *page;</span>
<span class="p_add">+</span>
 		page = dequeue_huge_page_nodemask(h, gfp_mask, preferred_nid, nmask);
<span class="p_del">-		if (page)</span>
<span class="p_del">-			goto unlock;</span>
<span class="p_add">+		if (page) {</span>
<span class="p_add">+			spin_unlock(&amp;hugetlb_lock);</span>
<span class="p_add">+			return page;</span>
<span class="p_add">+		}</span>
 	}
<span class="p_del">-unlock:</span>
 	spin_unlock(&amp;hugetlb_lock);
<span class="p_del">-	if (page)</span>
<span class="p_del">-		return page;</span>
 
 	/* No reservations, try to overcommit */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



