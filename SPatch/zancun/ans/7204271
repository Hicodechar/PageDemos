
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,4/6] arm64: add KASAN support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,4/6] arm64: add KASAN support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=100571">Andrey Ryabinin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 17, 2015, 9:38 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1442482692-6416-5-git-send-email-ryabinin.a.a@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7204271/mbox/"
   >mbox</a>
|
   <a href="/patch/7204271/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7204271/">/patch/7204271/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 4631BBEEC1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:38:58 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B1F8A2081A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:38:56 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B99FD20823
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:38:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754687AbbIQJie (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 17 Sep 2015 05:38:34 -0400
Received: from mail-la0-f53.google.com ([209.85.215.53]:35274 &quot;EHLO
	mail-la0-f53.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754622AbbIQJi1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 17 Sep 2015 05:38:27 -0400
Received: by lagj9 with SMTP id j9so7614024lag.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 17 Sep 2015 02:38:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=Dp43KgFw7Br3Q3EMy28QxmJ5adNJD02L8KSusB05ctg=;
	b=ULFl/yOpL3friok/FyyT4dHj1qzjt0mmgPzfINqLHV8wi+tUGadNCnF5uRZPlQMyZL
	630Vihl1KtV/SYAgOz65eamuCKJg9MNOTYYYWQFcW/WfQUkoNoy2mwLJZ2e23eLIwtHj
	40e+lsu1A0aFzwVhfAOrtE3cW7qVJtu42i5ZpR0KgddXQDlW1FZLkTeaXJgoUgHmh+yt
	EdtgSqISMquGTKavVkLpDCsxlGG9VI2hqyBPJxBvS8ODzaNwDAduiUd4NqbN2gHYkEX3
	JdtXAnVmgukFZH2qud/d/tqo0nS6xGjg7ylqJ6XWBh8PtbqVM1aWNSOHTiXc1JRm3V6y
	gJjw==
X-Received: by 10.112.55.40 with SMTP id o8mr17947048lbp.6.1442482705359;
	Thu, 17 Sep 2015 02:38:25 -0700 (PDT)
Received: from localhost.sw.ru (swsoft-msk-nat.sw.ru. [195.214.232.10])
	by smtp.gmail.com with ESMTPSA id
	b10sm410402laf.16.2015.09.17.02.38.24
	(version=TLSv1.2 cipher=RC4-SHA bits=128/128);
	Thu, 17 Sep 2015 02:38:24 -0700 (PDT)
From: Andrey Ryabinin &lt;ryabinin.a.a@gmail.com&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	linux-arm-kernel@lists.infradead.org
Cc: Andrey Ryabinin &lt;ryabinin.a.a@gmail.com&gt;,
	Linus Walleij &lt;linus.walleij@linaro.org&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, linux-kernel@vger.kernel.org,
	David Keitel &lt;dkeitel@codeaurora.org&gt;, linux-mm@kvack.org,
	Alexey Klimov &lt;klimov.linux@gmail.com&gt;, Yury &lt;yury.norov@gmail.com&gt;,
	Andrey Konovalov &lt;andreyknvl@google.com&gt;
Subject: [PATCH v6 4/6] arm64: add KASAN support
Date: Thu, 17 Sep 2015 12:38:10 +0300
Message-Id: &lt;1442482692-6416-5-git-send-email-ryabinin.a.a@gmail.com&gt;
X-Mailer: git-send-email 2.4.6
In-Reply-To: &lt;1442482692-6416-1-git-send-email-ryabinin.a.a@gmail.com&gt;
References: &lt;1442482692-6416-1-git-send-email-ryabinin.a.a@gmail.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI, T_DKIM_INVALID,
	T_RP_MATCHES_RCVD, 
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100571">Andrey Ryabinin</a> - Sept. 17, 2015, 9:38 a.m.</div>
<pre class="content">
This patch adds arch specific code for kernel address sanitizer
(see Documentation/kasan.txt).

1/8 of kernel addresses reserved for shadow memory. There was no
big enough hole for this, so virtual addresses for shadow were
stolen from vmalloc area.

At early boot stage the whole shadow region populated with just
one physical page (kasan_zero_page). Later, this page reused
as readonly zero shadow for some memory that KASan currently
don&#39;t track (vmalloc).
After mapping the physical memory, pages for shadow memory are
allocated and mapped.

Functions like memset/memmove/memcpy do a lot of memory accesses.
If bad pointer passed to one of these function it is important
to catch this. Compiler&#39;s instrumentation cannot do this since
these functions are written in assembly.
KASan replaces memory functions with manually instrumented variants.
Original functions declared as weak symbols so strong definitions
in mm/kasan/kasan.c could replace them. Original functions have aliases
with &#39;__&#39; prefix in name, so we could call non-instrumented variant
if needed.
Some files built without kasan instrumentation (e.g. mm/slub.c).
Original mem* function replaced (via #define) with prefixed variants
to disable memory access checks for such files.
<span class="signed-off-by">
Signed-off-by: Andrey Ryabinin &lt;ryabinin.a.a@gmail.com&gt;</span>
<span class="tested-by">Tested-by: Linus Walleij &lt;linus.walleij@linaro.org&gt;</span>
<span class="reviewed-by">Reviewed-by: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
---
 arch/arm64/Kconfig               |   1 +
 arch/arm64/Makefile              |   7 ++
 arch/arm64/include/asm/kasan.h   |  36 +++++++++
 arch/arm64/include/asm/pgtable.h |   7 ++
 arch/arm64/include/asm/string.h  |  16 ++++
 arch/arm64/kernel/Makefile       |   2 +
 arch/arm64/kernel/arm64ksyms.c   |   3 +
 arch/arm64/kernel/head.S         |   3 +
 arch/arm64/kernel/module.c       |  16 +++-
 arch/arm64/kernel/setup.c        |   4 +
 arch/arm64/lib/memcpy.S          |   3 +
 arch/arm64/lib/memmove.S         |   7 +-
 arch/arm64/lib/memset.S          |   3 +
 arch/arm64/mm/Makefile           |   3 +
 arch/arm64/mm/kasan_init.c       | 165 +++++++++++++++++++++++++++++++++++++++
 drivers/firmware/efi/Makefile    |   8 ++
 lib/Makefile                     |   3 +-
 scripts/Makefile.kasan           |   4 +-
 18 files changed, 284 insertions(+), 7 deletions(-)
 create mode 100644 arch/arm64/include/asm/kasan.h
 create mode 100644 arch/arm64/mm/kasan_init.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 7d95663..87202a1 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -47,6 +47,7 @@</span> <span class="p_context"> config ARM64</span>
 	select HAVE_ARCH_AUDITSYSCALL
 	select HAVE_ARCH_BITREVERSE
 	select HAVE_ARCH_JUMP_LABEL
<span class="p_add">+	select HAVE_ARCH_KASAN if SPARSEMEM_VMEMMAP</span>
 	select HAVE_ARCH_KGDB
 	select HAVE_ARCH_SECCOMP_FILTER
 	select HAVE_ARCH_TRACEHOOK
<span class="p_header">diff --git a/arch/arm64/Makefile b/arch/arm64/Makefile</span>
<span class="p_header">index 15ff5b4..6e957b8 100644</span>
<span class="p_header">--- a/arch/arm64/Makefile</span>
<span class="p_header">+++ b/arch/arm64/Makefile</span>
<span class="p_chunk">@@ -51,6 +51,13 @@</span> <span class="p_context"> else</span>
 TEXT_OFFSET := 0x00080000
 endif
 
<span class="p_add">+# KASAN_SHADOW_OFFSET = VA_START + (1 &lt;&lt; (VA_BITS - 3)) - (1 &lt;&lt; 61)</span>
<span class="p_add">+# in 32-bit arithmetic</span>
<span class="p_add">+KASAN_SHADOW_OFFSET := $(shell printf &quot;0x%08x00000000\n&quot; $$(( \</span>
<span class="p_add">+			(0xffffffff &amp; (-1 &lt;&lt; ($(CONFIG_ARM64_VA_BITS) - 32))) \</span>
<span class="p_add">+			+ (1 &lt;&lt; ($(CONFIG_ARM64_VA_BITS) - 32 - 3)) \</span>
<span class="p_add">+			- (1 &lt;&lt; (64 - 32 - 3)) )) )</span>
<span class="p_add">+</span>
 export	TEXT_OFFSET GZFLAGS
 
 core-y		+= arch/arm64/kernel/ arch/arm64/mm/
<span class="p_header">diff --git a/arch/arm64/include/asm/kasan.h b/arch/arm64/include/asm/kasan.h</span>
new file mode 100644
<span class="p_header">index 0000000..71dfe14</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kasan.h</span>
<span class="p_chunk">@@ -0,0 +1,36 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef __ASM_KASAN_H</span>
<span class="p_add">+#define __ASM_KASAN_H</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __ASSEMBLY__</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_KASAN</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/memory.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * KASAN_SHADOW_START: beginning of the kernel virtual addresses.</span>
<span class="p_add">+ * KASAN_SHADOW_END: KASAN_SHADOW_START + 1/8 of kernel virtual addresses.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define KASAN_SHADOW_START      (VA_START)</span>
<span class="p_add">+#define KASAN_SHADOW_END        (KASAN_SHADOW_START + (1UL &lt;&lt; (VA_BITS - 3)))</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This value is used to map an address to the corresponding shadow</span>
<span class="p_add">+ * address by the following formula:</span>
<span class="p_add">+ *     shadow_addr = (address &gt;&gt; 3) + KASAN_SHADOW_OFFSET;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * (1 &lt;&lt; 61) shadow addresses - [KASAN_SHADOW_OFFSET,KASAN_SHADOW_END]</span>
<span class="p_add">+ * cover all 64-bits of virtual addresses. So KASAN_SHADOW_OFFSET</span>
<span class="p_add">+ * should satisfy the following equation:</span>
<span class="p_add">+ *      KASAN_SHADOW_OFFSET = KASAN_SHADOW_END - (1ULL &lt;&lt; 61)</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define KASAN_SHADOW_OFFSET     (KASAN_SHADOW_END - (1ULL &lt;&lt; (64 - 3)))</span>
<span class="p_add">+</span>
<span class="p_add">+void kasan_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void kasan_init(void) { }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">index a53a126..860c37a 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -45,7 +45,14 @@</span> <span class="p_context"></span>
  *	fixed mappings and modules
  */
 #define VMEMMAP_SIZE		ALIGN((1UL &lt;&lt; (VA_BITS - PAGE_SHIFT)) * sizeof(struct page), PUD_SIZE)
<span class="p_add">+</span>
<span class="p_add">+#ifndef CONFIG_KASAN</span>
 #define VMALLOC_START		(VA_START)
<span class="p_add">+#else</span>
<span class="p_add">+#include &lt;asm/kasan.h&gt;</span>
<span class="p_add">+#define VMALLOC_START		(KASAN_SHADOW_END + SZ_64K)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #define VMALLOC_END		(PAGE_OFFSET - PUD_SIZE - VMEMMAP_SIZE - SZ_64K)
 
 #define vmemmap			((struct page *)(VMALLOC_END + SZ_64K))
<span class="p_header">diff --git a/arch/arm64/include/asm/string.h b/arch/arm64/include/asm/string.h</span>
<span class="p_header">index 64d2d48..2eb714c 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/string.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/string.h</span>
<span class="p_chunk">@@ -36,17 +36,33 @@</span> <span class="p_context"> extern __kernel_size_t strnlen(const char *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCPY
 extern void *memcpy(void *, const void *, __kernel_size_t);
<span class="p_add">+extern void *__memcpy(void *, const void *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMMOVE
 extern void *memmove(void *, const void *, __kernel_size_t);
<span class="p_add">+extern void *__memmove(void *, const void *, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCHR
 extern void *memchr(const void *, int, __kernel_size_t);
 
 #define __HAVE_ARCH_MEMSET
 extern void *memset(void *, int, __kernel_size_t);
<span class="p_add">+extern void *__memset(void *, int, __kernel_size_t);</span>
 
 #define __HAVE_ARCH_MEMCMP
 extern int memcmp(const void *, const void *, size_t);
 
<span class="p_add">+</span>
<span class="p_add">+#if defined(CONFIG_KASAN) &amp;&amp; !defined(__SANITIZE_ADDRESS__)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * For files that are not instrumented (e.g. mm/slub.c) we</span>
<span class="p_add">+ * should use not instrumented version of mem* functions.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define memcpy(dst, src, len) __memcpy(dst, src, len)</span>
<span class="p_add">+#define memmove(dst, src, len) __memmove(dst, src, len)</span>
<span class="p_add">+#define memset(s, c, n) __memset(s, c, n)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif
<span class="p_header">diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile</span>
<span class="p_header">index 22dc9bc..a0519a3 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/Makefile</span>
<span class="p_header">+++ b/arch/arm64/kernel/Makefile</span>
<span class="p_chunk">@@ -7,6 +7,8 @@</span> <span class="p_context"> AFLAGS_head.o		:= -DTEXT_OFFSET=$(TEXT_OFFSET)</span>
 CFLAGS_efi-stub.o 	:= -DTEXT_OFFSET=$(TEXT_OFFSET)
 CFLAGS_armv8_deprecated.o := -I$(src)
 
<span class="p_add">+KASAN_SANITIZE_efi-stub.o	:= n</span>
<span class="p_add">+</span>
 CFLAGS_REMOVE_ftrace.o = -pg
 CFLAGS_REMOVE_insn.o = -pg
 CFLAGS_REMOVE_return_address.o = -pg
<span class="p_header">diff --git a/arch/arm64/kernel/arm64ksyms.c b/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_header">index a85843d..3b6d8cc 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/arm64ksyms.c</span>
<span class="p_chunk">@@ -51,6 +51,9 @@</span> <span class="p_context"> EXPORT_SYMBOL(strnlen);</span>
 EXPORT_SYMBOL(memset);
 EXPORT_SYMBOL(memcpy);
 EXPORT_SYMBOL(memmove);
<span class="p_add">+EXPORT_SYMBOL(__memset);</span>
<span class="p_add">+EXPORT_SYMBOL(__memcpy);</span>
<span class="p_add">+EXPORT_SYMBOL(__memmove);</span>
 EXPORT_SYMBOL(memchr);
 EXPORT_SYMBOL(memcmp);
 
<span class="p_header">diff --git a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S</span>
<span class="p_header">index a055be6..5085108 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/head.S</span>
<span class="p_header">+++ b/arch/arm64/kernel/head.S</span>
<span class="p_chunk">@@ -444,6 +444,9 @@</span> <span class="p_context"> __mmap_switched:</span>
 	str_l	x21, __fdt_pointer, x5		// Save FDT pointer
 	str_l	x24, memstart_addr, x6		// Save PHYS_OFFSET
 	mov	x29, #0
<span class="p_add">+#ifdef CONFIG_KASAN</span>
<span class="p_add">+	bl	kasan_early_init</span>
<span class="p_add">+#endif</span>
 	b	start_kernel
 ENDPROC(__mmap_switched)
 
<span class="p_header">diff --git a/arch/arm64/kernel/module.c b/arch/arm64/kernel/module.c</span>
<span class="p_header">index 67bf410..7d90c0f 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/module.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/module.c</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/gfp.h&gt;
<span class="p_add">+#include &lt;linux/kasan.h&gt;</span>
 #include &lt;linux/kernel.h&gt;
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/moduleloader.h&gt;
<span class="p_chunk">@@ -34,9 +35,18 @@</span> <span class="p_context"></span>
 
 void *module_alloc(unsigned long size)
 {
<span class="p_del">-	return __vmalloc_node_range(size, 1, MODULES_VADDR, MODULES_END,</span>
<span class="p_del">-				    GFP_KERNEL, PAGE_KERNEL_EXEC, 0,</span>
<span class="p_del">-				    NUMA_NO_NODE, __builtin_return_address(0));</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+</span>
<span class="p_add">+	p = __vmalloc_node_range(size, MODULE_ALIGN, MODULES_VADDR, MODULES_END,</span>
<span class="p_add">+				GFP_KERNEL, PAGE_KERNEL_EXEC, 0,</span>
<span class="p_add">+				NUMA_NO_NODE, __builtin_return_address(0));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (p &amp;&amp; (kasan_module_alloc(p, size) &lt; 0)) {</span>
<span class="p_add">+		vfree(p);</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return p;</span>
 }
 
 enum aarch64_reloc_op {
<span class="p_header">diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c</span>
<span class="p_header">index 6bab21f..79df79a 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/setup.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/setup.c</span>
<span class="p_chunk">@@ -54,6 +54,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/cpufeature.h&gt;
 #include &lt;asm/cpu_ops.h&gt;
<span class="p_add">+#include &lt;asm/kasan.h&gt;</span>
 #include &lt;asm/sections.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/smp_plat.h&gt;
<span class="p_chunk">@@ -434,6 +435,9 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 
 	paging_init();
 	relocate_initrd();
<span class="p_add">+</span>
<span class="p_add">+	kasan_init();</span>
<span class="p_add">+</span>
 	request_standard_resources();
 
 	early_ioremap_reset();
<span class="p_header">diff --git a/arch/arm64/lib/memcpy.S b/arch/arm64/lib/memcpy.S</span>
<span class="p_header">index 8a9a96d..42cc4b7 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memcpy.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memcpy.S</span>
<span class="p_chunk">@@ -56,6 +56,8 @@</span> <span class="p_context"> C_h	.req	x12</span>
 D_l	.req	x13
 D_h	.req	x14
 
<span class="p_add">+	.weak memcpy</span>
<span class="p_add">+ENTRY(__memcpy)</span>
 ENTRY(memcpy)
 	mov	dst, dstin
 	cmp	count, #16
<span class="p_chunk">@@ -199,3 +201,4 @@</span> <span class="p_context"> ENTRY(memcpy)</span>
 	b.ne	.Ltail63
 	ret
 ENDPROC(memcpy)
<span class="p_add">+ENDPROC(__memcpy)</span>
<span class="p_header">diff --git a/arch/arm64/lib/memmove.S b/arch/arm64/lib/memmove.S</span>
<span class="p_header">index 57b19ea..8819433 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memmove.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memmove.S</span>
<span class="p_chunk">@@ -57,12 +57,14 @@</span> <span class="p_context"> C_h	.req	x12</span>
 D_l	.req	x13
 D_h	.req	x14
 
<span class="p_add">+	.weak memmove</span>
<span class="p_add">+ENTRY(__memmove)</span>
 ENTRY(memmove)
 	cmp	dstin, src
<span class="p_del">-	b.lo	memcpy</span>
<span class="p_add">+	b.lo	__memcpy</span>
 	add	tmp1, src, count
 	cmp	dstin, tmp1
<span class="p_del">-	b.hs	memcpy		/* No overlap.  */</span>
<span class="p_add">+	b.hs	__memcpy		/* No overlap.  */</span>
 
 	add	dst, dstin, count
 	add	src, src, count
<span class="p_chunk">@@ -195,3 +197,4 @@</span> <span class="p_context"> ENTRY(memmove)</span>
 	b.ne	.Ltail63
 	ret
 ENDPROC(memmove)
<span class="p_add">+ENDPROC(__memmove)</span>
<span class="p_header">diff --git a/arch/arm64/lib/memset.S b/arch/arm64/lib/memset.S</span>
<span class="p_header">index 7c72dfd..edc0e7d 100644</span>
<span class="p_header">--- a/arch/arm64/lib/memset.S</span>
<span class="p_header">+++ b/arch/arm64/lib/memset.S</span>
<span class="p_chunk">@@ -54,6 +54,8 @@</span> <span class="p_context"> dst		.req	x8</span>
 tmp3w		.req	w9
 tmp3		.req	x9
 
<span class="p_add">+	.weak memset</span>
<span class="p_add">+ENTRY(__memset)</span>
 ENTRY(memset)
 	mov	dst, dstin	/* Preserve return value.  */
 	and	A_lw, val, #255
<span class="p_chunk">@@ -214,3 +216,4 @@</span> <span class="p_context"> ENTRY(memset)</span>
 	b.ne	.Ltail_maybe_long
 	ret
 ENDPROC(memset)
<span class="p_add">+ENDPROC(__memset)</span>
<span class="p_header">diff --git a/arch/arm64/mm/Makefile b/arch/arm64/mm/Makefile</span>
<span class="p_header">index 773d37a..57f57fd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/Makefile</span>
<span class="p_header">+++ b/arch/arm64/mm/Makefile</span>
<span class="p_chunk">@@ -4,3 +4,6 @@</span> <span class="p_context"> obj-y				:= dma-mapping.o extable.o fault.o init.o \</span>
 				   context.o proc.o pageattr.o
 obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o
 obj-$(CONFIG_ARM64_PTDUMP)	+= dump.o
<span class="p_add">+</span>
<span class="p_add">+obj-$(CONFIG_KASAN)		+= kasan_init.o</span>
<span class="p_add">+KASAN_SANITIZE_kasan_init.o	:= n</span>
<span class="p_header">diff --git a/arch/arm64/mm/kasan_init.c b/arch/arm64/mm/kasan_init.c</span>
new file mode 100644
<span class="p_header">index 0000000..b6a92f5</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arm64/mm/kasan_init.c</span>
<span class="p_chunk">@@ -0,0 +1,165 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This file contains kasan initialization code for ARM64.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (c) 2015 Samsung Electronics Co., Ltd.</span>
<span class="p_add">+ * Author: Andrey Ryabinin &lt;ryabinin.a.a@gmail.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#define pr_fmt(fmt) &quot;kasan: &quot; fmt</span>
<span class="p_add">+#include &lt;linux/kasan.h&gt;</span>
<span class="p_add">+#include &lt;linux/kernel.h&gt;</span>
<span class="p_add">+#include &lt;linux/memblock.h&gt;</span>
<span class="p_add">+#include &lt;linux/start_kernel.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/page.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgalloc.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+static pgd_t tmp_pg_dir[PTRS_PER_PGD] __initdata __aligned(PGD_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pte_populate(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		pmd_populate_kernel(&amp;init_mm, pmd, kasan_zero_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = addr + PAGE_SIZE;</span>
<span class="p_add">+		set_pte(pte, pfn_pte(virt_to_pfn(kasan_zero_page),</span>
<span class="p_add">+					PAGE_KERNEL));</span>
<span class="p_add">+	} while (pte++, addr = next, addr != end &amp;&amp; pte_none(*pte));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pmd_populate(pud_t *pud,</span>
<span class="p_add">+					unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		pud_populate(&amp;init_mm, pud, kasan_zero_pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pmd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pte_populate(pmd, addr, next);</span>
<span class="p_add">+	} while (pmd++, addr = next, addr != end &amp;&amp; pmd_none(*pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_pud_populate(pgd_t *pgd,</span>
<span class="p_add">+					unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		pgd_populate(&amp;init_mm, pgd, kasan_zero_pud);</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pud_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pmd_populate(pud, addr, next);</span>
<span class="p_add">+	} while (pud++, addr = next, addr != end &amp;&amp; pud_none(*pud));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_map_early_shadow(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long addr = KASAN_SHADOW_START;</span>
<span class="p_add">+	unsigned long end = KASAN_SHADOW_END;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset_k(addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_pud_populate(pgd, addr, next);</span>
<span class="p_add">+	} while (pgd++, addr = next, addr != end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __init kasan_early_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUILD_BUG_ON(KASAN_SHADOW_OFFSET != KASAN_SHADOW_END - (1UL &lt;&lt; 61));</span>
<span class="p_add">+	BUILD_BUG_ON(!IS_ALIGNED(KASAN_SHADOW_START, PGDIR_SIZE));</span>
<span class="p_add">+	BUILD_BUG_ON(!IS_ALIGNED(KASAN_SHADOW_END, PGDIR_SIZE));</span>
<span class="p_add">+	kasan_map_early_shadow();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init clear_pgds(unsigned long start,</span>
<span class="p_add">+			unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Remove references to kasan page tables from</span>
<span class="p_add">+	 * swapper_pg_dir. pgd_clear() can&#39;t be used</span>
<span class="p_add">+	 * here because it&#39;s nop on 2,3-level pagetable setups</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for (; start &lt; end; start += PGDIR_SIZE)</span>
<span class="p_add">+		set_pgd(pgd_offset_k(start), __pgd(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init cpu_set_ttbr1(unsigned long ttbr1)</span>
<span class="p_add">+{</span>
<span class="p_add">+	asm(</span>
<span class="p_add">+	&quot;	msr	ttbr1_el1, %0\n&quot;</span>
<span class="p_add">+	&quot;	isb&quot;</span>
<span class="p_add">+	:</span>
<span class="p_add">+	: &quot;r&quot; (ttbr1));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __init kasan_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct memblock_region *reg;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We are going to perform proper setup of shadow memory.</span>
<span class="p_add">+	 * At first we should unmap early shadow (clear_pgds() call bellow).</span>
<span class="p_add">+	 * However, instrumented code couldn&#39;t execute without shadow memory.</span>
<span class="p_add">+	 * tmp_pg_dir used to keep early shadow mapped until full shadow</span>
<span class="p_add">+	 * setup will be finished.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	memcpy(tmp_pg_dir, swapper_pg_dir, sizeof(tmp_pg_dir));</span>
<span class="p_add">+	cpu_set_ttbr1(__pa(tmp_pg_dir));</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_zero_shadow((void *)KASAN_SHADOW_START,</span>
<span class="p_add">+			kasan_mem_to_shadow((void *)MODULES_VADDR));</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_memblock(memory, reg) {</span>
<span class="p_add">+		void *start = (void *)__phys_to_virt(reg-&gt;base);</span>
<span class="p_add">+		void *end = (void *)__phys_to_virt(reg-&gt;base + reg-&gt;size);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (start &gt;= end)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * end + 1 here is intentional. We check several shadow bytes in</span>
<span class="p_add">+		 * advance to slightly speed up fastpath. In some rare cases</span>
<span class="p_add">+		 * we could cross boundary of mapped shadow, so we just map</span>
<span class="p_add">+		 * some more here.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		vmemmap_populate((unsigned long)kasan_mem_to_shadow(start),</span>
<span class="p_add">+				(unsigned long)kasan_mem_to_shadow(end) + 1,</span>
<span class="p_add">+				pfn_to_nid(virt_to_pfn(start)));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(kasan_zero_page, 0, PAGE_SIZE);</span>
<span class="p_add">+	cpu_set_ttbr1(__pa(swapper_pg_dir));</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* At this point kasan is fully initialized. Enable error messages */</span>
<span class="p_add">+	init_task.kasan_depth = 0;</span>
<span class="p_add">+	pr_info(&quot;KernelAddressSanitizer initialized\n&quot;);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/drivers/firmware/efi/Makefile b/drivers/firmware/efi/Makefile</span>
<span class="p_header">index 6fd3da9..413fcf2 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/Makefile</span>
<span class="p_header">+++ b/drivers/firmware/efi/Makefile</span>
<span class="p_chunk">@@ -1,6 +1,14 @@</span> <span class="p_context"></span>
 #
 # Makefile for linux kernel
 #
<span class="p_add">+</span>
<span class="p_add">+#</span>
<span class="p_add">+# ARM64 maps efi runtime services in userspace addresses</span>
<span class="p_add">+# which don&#39;t have KASAN shadow. So dereference of these addresses</span>
<span class="p_add">+# in efi_call_virt() will cause crash if this code instrumented.</span>
<span class="p_add">+#</span>
<span class="p_add">+KASAN_SANITIZE_runtime-wrappers.o	:= n</span>
<span class="p_add">+</span>
 obj-$(CONFIG_EFI)			+= efi.o vars.o reboot.o
 obj-$(CONFIG_EFI_VARS)			+= efivars.o
 obj-$(CONFIG_EFI_ESRT)			+= esrt.o
<span class="p_header">diff --git a/lib/Makefile b/lib/Makefile</span>
<span class="p_header">index 13a7c6a..1874547 100644</span>
<span class="p_header">--- a/lib/Makefile</span>
<span class="p_header">+++ b/lib/Makefile</span>
<span class="p_chunk">@@ -166,7 +166,8 @@</span> <span class="p_context"> obj-$(CONFIG_STMP_DEVICE) += stmp_device.o</span>
 libfdt_files = fdt.o fdt_ro.o fdt_wip.o fdt_rw.o fdt_sw.o fdt_strerror.o \
 	       fdt_empty_tree.o
 $(foreach file, $(libfdt_files), \
<span class="p_del">-	$(eval CFLAGS_$(file) = -I$(src)/../scripts/dtc/libfdt))</span>
<span class="p_add">+	$(eval CFLAGS_$(file) = -I$(src)/../scripts/dtc/libfdt) \</span>
<span class="p_add">+	$(eval KASAN_SANITIZE_$(file) := n))</span>
 lib-$(CONFIG_LIBFDT) += $(libfdt_files)
 
 obj-$(CONFIG_RBTREE_TEST) += rbtree_test.o
<span class="p_header">diff --git a/scripts/Makefile.kasan b/scripts/Makefile.kasan</span>
<span class="p_header">index 3f874d2..37323b0 100644</span>
<span class="p_header">--- a/scripts/Makefile.kasan</span>
<span class="p_header">+++ b/scripts/Makefile.kasan</span>
<span class="p_chunk">@@ -5,10 +5,12 @@</span> <span class="p_context"> else</span>
 	call_threshold := 0
 endif
 
<span class="p_add">+KASAN_SHADOW_OFFSET ?= $(CONFIG_KASAN_SHADOW_OFFSET)</span>
<span class="p_add">+</span>
 CFLAGS_KASAN_MINIMAL := -fsanitize=kernel-address
 
 CFLAGS_KASAN := $(call cc-option, -fsanitize=kernel-address \
<span class="p_del">-		-fasan-shadow-offset=$(CONFIG_KASAN_SHADOW_OFFSET) \</span>
<span class="p_add">+		-fasan-shadow-offset=$(KASAN_SHADOW_OFFSET) \</span>
 		--param asan-stack=1 --param asan-globals=1 \
 		--param asan-instrumentation-with-call-threshold=$(call_threshold))
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



