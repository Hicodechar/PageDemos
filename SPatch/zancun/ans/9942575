
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,04/11] swiotlb: Map the buffer if it was unmapped by XPFO - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,04/11] swiotlb: Map the buffer if it was unmapped by XPFO</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 7, 2017, 5:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170907173609.22696-5-tycho@docker.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9942575/mbox/"
   >mbox</a>
|
   <a href="/patch/9942575/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9942575/">/patch/9942575/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	154F2600CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:38:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 063D0285B7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:38:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id EEF73285B5; Thu,  7 Sep 2017 17:37:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 704D2285B5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  7 Sep 2017 17:37:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755632AbdIGRhN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 7 Sep 2017 13:37:13 -0400
Received: from mail-io0-f173.google.com ([209.85.223.173]:38845 &quot;EHLO
	mail-io0-f173.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755540AbdIGRhI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 7 Sep 2017 13:37:08 -0400
Received: by mail-io0-f173.google.com with SMTP id m98so16141ioo.5
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 07 Sep 2017 10:37:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=docker.com; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=qifN1icbhvivbJBqhyv8qr4JwV4y53R9jBsqaL/8Tpw=;
	b=MRVkw5eGwWoYqIgOezCCoa7umSG7400jjrOX4spwmeZor11wAzRj8VaBIfON9+f8+K
	2+XDPctp54fX8elod42P23PNAx9S97stM+XjmsOS51kn6oX5PKp+lQrYEOa/3EklyDTJ
	2kmOBMTW6+sSaF4TvZZfEqWcBQd1VBuVEyflo=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=qifN1icbhvivbJBqhyv8qr4JwV4y53R9jBsqaL/8Tpw=;
	b=T6uNcXetcbFn4hbXV+eW4EJqYFbes9UbwmjAAXaswm06TSQ98PfRaS9uK7axLi2A+3
	x475gIQ+wwDiwOBUUq68pL+nO3q24sMBQzJBl37rqpqxUj3OgO/uLi/xMje1z53uQbol
	n+lUJLWIF+lFs6/N/WVbuj1SMbhqMtLo+ohaFDwp+rEEjZ5miukeKCDibT1Yaw92AM7s
	ymh3HWT0CnvYiQaCd2Ib5ZNA4tr8LhXYoammiDamI3TxO7piUa39YFdqUI5K/5u8hAkW
	fqScRrlF8ajO6dybxdm6wno1QJkka6QnL5YMDWw9UjvIigOYr+f2ful+w4LiTMDhjaYH
	wcag==
X-Gm-Message-State: AHPjjUgwOMQnafkOk43Fdhg0RfbVGcouJmO469IbAskdVM4gPR1W6UCF
	mQLD1UBcraydigeo0dRz+g==
X-Google-Smtp-Source: AOwi7QC4ew5XI0bdyhxNewtgvQt3hNVrHFiTcuJZ1UIqQpJr/6NxOIoDAe+LTo2d4BSWdP/4GZ956w==
X-Received: by 10.107.187.135 with SMTP id l129mr111921iof.284.1504805827564;
	Thu, 07 Sep 2017 10:37:07 -0700 (PDT)
Received: from localhost.localdomain ([8.24.24.129])
	by smtp.gmail.com with ESMTPSA id
	t127sm94404iod.26.2017.09.07.10.37.06
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 07 Sep 2017 10:37:06 -0700 (PDT)
From: Tycho Andersen &lt;tycho@docker.com&gt;
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, kernel-hardening@lists.openwall.com,
	Marco Benatto &lt;marco.antonio.780@gmail.com&gt;,
	Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Tycho Andersen &lt;tycho@docker.com&gt;
Subject: [PATCH v6 04/11] swiotlb: Map the buffer if it was unmapped by XPFO
Date: Thu,  7 Sep 2017 11:36:02 -0600
Message-Id: &lt;20170907173609.22696-5-tycho@docker.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170907173609.22696-1-tycho@docker.com&gt;
References: &lt;20170907173609.22696-1-tycho@docker.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Sept. 7, 2017, 5:36 p.m.</div>
<pre class="content">
<span class="from">From: Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;</span>

v6: * guard against lookup_xpfo() returning NULL

CC: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
<span class="signed-off-by">Signed-off-by: Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
---
 include/linux/xpfo.h |  4 ++++
 lib/swiotlb.c        |  3 ++-
 mm/xpfo.c            | 15 +++++++++++++++
 3 files changed, 21 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - Sept. 7, 2017, 6:10 p.m.</div>
<pre class="content">
<span class="quote">&gt; -	if (PageHighMem(pfn_to_page(pfn))) {</span>
<span class="quote">&gt; +	if (PageHighMem(page) || xpfo_page_is_unmapped(page)) {</span>

Please don&#39;t sprinkle xpfo details over various bits of code.

Just add a helper with a descriptive name, e.g.

page_is_unmapped()

that also includes the highmem case, as that will easily document
what this check is doing.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Sept. 7, 2017, 6:44 p.m.</div>
<pre class="content">
On Thu, Sep 07, 2017 at 11:10:15AM -0700, Christoph Hellwig wrote:
<span class="quote">&gt; &gt; -	if (PageHighMem(pfn_to_page(pfn))) {</span>
<span class="quote">&gt; &gt; +	if (PageHighMem(page) || xpfo_page_is_unmapped(page)) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please don&#39;t sprinkle xpfo details over various bits of code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just add a helper with a descriptive name, e.g.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; page_is_unmapped()</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; that also includes the highmem case, as that will easily document</span>
<span class="quote">&gt; what this check is doing.</span>

Will do, thanks.

Patch 7 has a similar feel to this one, I can add a wrapper around
__clean_dcache_area_pou() if that makes sense?

Tycho
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=101">Christoph Hellwig</a> - Sept. 8, 2017, 7:13 a.m.</div>
<pre class="content">
On Thu, Sep 07, 2017 at 12:44:14PM -0600, Tycho Andersen wrote:
<span class="quote">&gt; On Thu, Sep 07, 2017 at 11:10:15AM -0700, Christoph Hellwig wrote:</span>
<span class="quote">&gt; &gt; &gt; -	if (PageHighMem(pfn_to_page(pfn))) {</span>
<span class="quote">&gt; &gt; &gt; +	if (PageHighMem(page) || xpfo_page_is_unmapped(page)) {</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please don&#39;t sprinkle xpfo details over various bits of code.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Just add a helper with a descriptive name, e.g.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; page_is_unmapped()</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; that also includes the highmem case, as that will easily document</span>
<span class="quote">&gt; &gt; what this check is doing.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Will do, thanks.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Patch 7 has a similar feel to this one, I can add a wrapper around</span>
<span class="quote">&gt; __clean_dcache_area_pou() if that makes sense?</span>

That one is in low-level ARM code so I&#39;m not that worried.
But in general it seems like we should simply have one interface
to check if a page has a kernel mapping or not, nad map/unmap it
if not instead of distinguishing between highmem and xpfo.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/xpfo.h b/include/linux/xpfo.h</span>
<span class="p_header">index 442c58ee930e..04590d1dcefa 100644</span>
<span class="p_header">--- a/include/linux/xpfo.h</span>
<span class="p_header">+++ b/include/linux/xpfo.h</span>
<span class="p_chunk">@@ -30,6 +30,8 @@</span> <span class="p_context"> void xpfo_kunmap(void *kaddr, struct page *page);</span>
 void xpfo_alloc_pages(struct page *page, int order, gfp_t gfp);
 void xpfo_free_pages(struct page *page, int order);
 
<span class="p_add">+bool xpfo_page_is_unmapped(struct page *page);</span>
<span class="p_add">+</span>
 #else /* !CONFIG_XPFO */
 
 static inline void xpfo_kmap(void *kaddr, struct page *page) { }
<span class="p_chunk">@@ -37,6 +39,8 @@</span> <span class="p_context"> static inline void xpfo_kunmap(void *kaddr, struct page *page) { }</span>
 static inline void xpfo_alloc_pages(struct page *page, int order, gfp_t gfp) { }
 static inline void xpfo_free_pages(struct page *page, int order) { }
 
<span class="p_add">+static inline bool xpfo_page_is_unmapped(struct page *page) { return false; }</span>
<span class="p_add">+</span>
 #endif /* CONFIG_XPFO */
 
 #endif /* _LINUX_XPFO_H */
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index a8d74a733a38..d4fee5ca2d9e 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -420,8 +420,9 @@</span> <span class="p_context"> static void swiotlb_bounce(phys_addr_t orig_addr, phys_addr_t tlb_addr,</span>
 {
 	unsigned long pfn = PFN_DOWN(orig_addr);
 	unsigned char *vaddr = phys_to_virt(tlb_addr);
<span class="p_add">+	struct page *page = pfn_to_page(pfn);</span>
 
<span class="p_del">-	if (PageHighMem(pfn_to_page(pfn))) {</span>
<span class="p_add">+	if (PageHighMem(page) || xpfo_page_is_unmapped(page)) {</span>
 		/* The buffer does not have a mapping.  Map it in and copy */
 		unsigned int offset = orig_addr &amp; ~PAGE_MASK;
 		char *buffer;
<span class="p_header">diff --git a/mm/xpfo.c b/mm/xpfo.c</span>
<span class="p_header">index bff24afcaa2e..cdbcbac582d5 100644</span>
<span class="p_header">--- a/mm/xpfo.c</span>
<span class="p_header">+++ b/mm/xpfo.c</span>
<span class="p_chunk">@@ -220,3 +220,18 @@</span> <span class="p_context"> void xpfo_kunmap(void *kaddr, struct page *page)</span>
 	spin_unlock(&amp;xpfo-&gt;maplock);
 }
 EXPORT_SYMBOL(xpfo_kunmap);
<span class="p_add">+</span>
<span class="p_add">+bool xpfo_page_is_unmapped(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct xpfo *xpfo;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!static_branch_unlikely(&amp;xpfo_inited))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	xpfo = lookup_xpfo(page);</span>
<span class="p_add">+	if (unlikely(!xpfo) &amp;&amp; !xpfo-&gt;inited)</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	return test_bit(XPFO_PAGE_UNMAPPED, &amp;xpfo-&gt;flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(xpfo_page_is_unmapped);</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



