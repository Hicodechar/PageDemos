
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/4,RFC!] mm: &#39;struct mm_struct&#39; reference counting debugging - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/4,RFC!] mm: &#39;struct mm_struct&#39; reference counting debugging</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2016, 9:43 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;d944e3ca-07d4-c7d6-5025-dc101406b3a7@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9477653/mbox/"
   >mbox</a>
|
   <a href="/patch/9477653/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9477653/">/patch/9477653/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B793C607EE for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 09:44:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B89D0209CF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 09:44:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AD54A287A8; Fri, 16 Dec 2016 09:44:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BE660209CF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 09:44:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1760320AbcLPJok (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Dec 2016 04:44:40 -0500
Received: from aserp1040.oracle.com ([141.146.126.69]:19599 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751425AbcLPJoa (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Dec 2016 04:44:30 -0500
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id uBG9huLD031716
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 16 Dec 2016 09:43:57 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id uBG9huak010359
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Fri, 16 Dec 2016 09:43:56 GMT
Received: from abhmp0012.oracle.com (abhmp0012.oracle.com [141.146.116.18])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	uBG9ht6H028250; Fri, 16 Dec 2016 09:43:55 GMT
Received: from [10.175.224.163] (/10.175.224.163)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Fri, 16 Dec 2016 01:43:55 -0800
Subject: Re: [PATCH 4/4] [RFC!] mm: &#39;struct mm_struct&#39; reference counting
	debugging
To: Michal Hocko &lt;mhocko@kernel.org&gt;
References: &lt;20161216082202.21044-1-vegard.nossum@oracle.com&gt;
	&lt;20161216082202.21044-4-vegard.nossum@oracle.com&gt;
	&lt;20161216090157.GA13940@dhcp22.suse.cz&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	Rik van Riel &lt;riel@redhat.com&gt;, Matthew Wilcox &lt;mawilcox@microsoft.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Al Viro &lt;viro@zeniv.linux.org.uk&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
From: Vegard Nossum &lt;vegard.nossum@oracle.com&gt;
Message-ID: &lt;d944e3ca-07d4-c7d6-5025-dc101406b3a7@oracle.com&gt;
Date: Fri, 16 Dec 2016 10:43:52 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
	Thunderbird/45.5.1
MIME-Version: 1.0
In-Reply-To: &lt;20161216090157.GA13940@dhcp22.suse.cz&gt;
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Transfer-Encoding: 7bit
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a> - Dec. 16, 2016, 9:43 a.m.</div>
<pre class="content">
On 12/16/2016 10:01 AM, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 09:22:02, Vegard Nossum wrote:</span>
<span class="quote">&gt;&gt; Reference counting bugs are hard to debug by their nature since the actual</span>
<span class="quote">&gt;&gt; manifestation of one can occur very far from where the error is introduced</span>
<span class="quote">&gt;&gt; (e.g. a missing get() only manifest as a use-after-free when the reference</span>
<span class="quote">&gt;&gt; count prematurely drops to 0, which could be arbitrarily long after where</span>
<span class="quote">&gt;&gt; the get() should have happened if there are other users). I wrote this patch</span>
<span class="quote">&gt;&gt; to try to track down a suspected &#39;mm_struct&#39; reference counting bug.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I definitely agree that hunting these bugs is a royal PITA, no question</span>
<span class="quote">&gt; about that. I am just wondering whether this has been motivated by any</span>
<span class="quote">&gt; particular bug recently. I do not seem to remember any such an issue for</span>
<span class="quote">&gt; quite some time.</span>

Yes, I&#39;ve been hitting a use-after-free with trinity that happens when
the OOM killer reaps a task. I can reproduce it reliably within a few
seconds, but with the amount of refs and syscalls going on I haven&#39;t
been able to figure out what&#39;s actually going wrong (to put things into
perspective the refcounts goes into the thousands before eventually
dropping down to 0 and trying to trace_printk() each get/put results in
several hundred megabytes of log files).

The UAF itself (sometimes a NULL pointer deref) is on a struct file
(sometimes in the page fault path, sometimes in clone(), sometimes in
execve()), and my initial debugging lead me to believe it was actually a
problem with mm_struct getting freed prematurely (hence this patch). But
disappointingly this patch didn&#39;t turn up anything so I must reevaluate
my suspicion of an mm_struct leak.

I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the
following two patches will fix the problem (without my understand how or
why):

  		if (is_vm_hugetlb_page(vma))
@@ -535,6 +536,7 @@ static bool __oom_reap_task_mm(struct task_struct 
*tsk, struct mm_struct *mm)
  					 &amp;details);
  	}
  	tlb_finish_mmu(&amp;tlb, 0, -1);
+#endif
  	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, 
file-rss:%lukB, shmem-rss:%lukB\n&quot;,
  			task_pid_nr(tsk), tsk-&gt;comm,
  			K(get_mm_counter(mm, MM_ANONPAGES)),

Maybe it&#39;s just the fact that we&#39;re not releasing the memory and so some
other bit of code is not able to make enough progress to trigger the
bug, although curiously, if I just move the #if 0..#endif inside
tlb_gather_mmu()..tlb_finish_mmu() itself (so just calling tlb_*()
without doing the for-loop), it still reproduces the crash.

Another clue, although it might just be a coincidence, is that it seems
the VMA/file in question is always a mapping for the exe file itself
(the reason I think this might be a coincidence is that the exe file
mapping is the first one and we usually traverse VMAs starting with this
one, that doesn&#39;t mean the other VMAs aren&#39;t affected by the same
problem, just that we never hit them).

I really wanted to figure out and fix the bug myself, it&#39;s a great way
to learn, after all, instead of just sending crash logs and letting
somebody else figure it out. But maybe I have to admit defeat on this one.
<span class="quote">
&gt;&gt; The basic idea is to keep track of all references, not just with a reference</span>
<span class="quote">&gt;&gt; counter, but with an actual reference _list_. Whenever you get() or put() a</span>
<span class="quote">&gt;&gt; reference, you also add or remove yourself, respectively, from the reference</span>
<span class="quote">&gt;&gt; list. This really helps debugging because (for example) you always put a</span>
<span class="quote">&gt;&gt; specific reference, meaning that if that reference was not yours to put, you</span>
<span class="quote">&gt;&gt; will notice it immediately (rather than when the reference counter goes to 0</span>
<span class="quote">&gt;&gt; and you still have an active reference).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But who is the owner of the reference? A function/task? It is not all</span>
<span class="quote">&gt; that uncommon to take an mm reference from one context and release it</span>
<span class="quote">&gt; from a different one. But I might be missing your point here.</span>

An owner is somebody who knows the pointer and increments the reference
counter for it.

You&#39;ll notice a bunch of functions just take a temporary on-stack
reference (e.g. struct mm_struct *mm = get_task_mm(tsk); ...
mmput(&amp;mm)), in which case it&#39;s the function that owns the reference
until the mmput.

Some functions take a reference and stash it in some heap object, an
example from the patch could be &#39;struct vhost_dev&#39; (which has a -&gt;mm
field), and it does get_task_mm() in an init function and mmput() in a
cleanup function. In this case, it&#39;s the struct which is the owner of
the reference, for as long as -&gt;mm points to something non-NULL. This
would be an example of taking the reference in one context and releasing
it in a different one. I guess the point is that we must always release
a _specific_ reference when we decrement a reference count. Yes, it&#39;s a
number, but that number does refer to a specific reference that was
taken at some point in the past (and we should know
which reference this is, otherwise we don&#39;t actually &quot;have it&quot;).

We may not be used to thinking of reference counts as actual places of
reference, but that&#39;s what it is, fundamentally. This patch just makes
it very explicit what the owners are and where ownership transfers take
place.
<span class="quote">
&gt;&gt; The main interface is in &lt;linux/mm_ref_types.h&gt; and &lt;linux/mm_ref.h&gt;, while</span>
<span class="quote">&gt;&gt; the implementation lives in mm/mm_ref.c. Since &#39;struct mm_struct&#39; has both</span>
<span class="quote">&gt;&gt; -&gt;mm_users and -&gt;mm_count, we introduce helpers for both of them, but use</span>
<span class="quote">&gt;&gt; the same data structure for each (struct mm_ref). The low-level rules (i.e.</span>
<span class="quote">&gt;&gt; the ones we have to follow, but which nobody else should really have to</span>
<span class="quote">&gt;&gt; care about since they use the higher-level interface) are:</span>
[...]
<span class="quote">&gt;</span>
<span class="quote">&gt; This all sounds way too intrusive to me so I am not really sure this is</span>
<span class="quote">&gt; something we really want. A nice thing for debugging for sure but I am</span>
<span class="quote">&gt; somehow skeptical whether it is really worth it considering how many</span>
<span class="quote">&gt; those ref. count bugs we&#39;ve had.</span>

Yeah, I agree it&#39;s intrusive. And it did start out as just a debugging
patch, but I figured after having done all the work I might as well
slap on a changelog and submit it to see what people think.

However, it may have some value as documentation of who is the owner of
each reference and where/when those owners change. Maybe I should just
extract that knowledge and add it in as comments instead.

Thanks for your comments!


Vegard
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 16, 2016, 10:11 a.m.</div>
<pre class="content">
On Fri 16-12-16 10:43:52, Vegard Nossum wrote:
[...]
<span class="quote">&gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt; why):</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; index ec9f11d4f094..37b14b2e2af4 100644</span>
<span class="quote">&gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; @@ -485,7 +485,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; struct mm_struct *mm)</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	mutex_lock(&amp;oom_lock);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; +	if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>

__oom_reap_task_mm is basically the same thing as MADV_DONTNEED and that
doesn&#39;t require the exlusive mmap_sem. So this looks correct to me.
[...]
<span class="quote">
&gt; --OR--</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; index ec9f11d4f094..559aec0acd21 100644</span>
<span class="quote">&gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; @@ -508,6 +508,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; struct mm_struct *mm)</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	set_bit(MMF_UNSTABLE, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#if 0</span>
<span class="quote">&gt;  	tlb_gather_mmu(&amp;tlb, mm, 0, -1);</span>
<span class="quote">&gt;  	for (vma = mm-&gt;mmap ; vma; vma = vma-&gt;vm_next) {</span>
<span class="quote">&gt;  		if (is_vm_hugetlb_page(vma))</span>
<span class="quote">&gt; @@ -535,6 +536,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; struct mm_struct *mm)</span>
<span class="quote">&gt;  					 &amp;details);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt; +#endif</span>

same here, nothing different from the madvise... Well, except for the
MMF_UNSTABLE part which will force any page fault on this mm to SEGV.
<span class="quote">
&gt;  	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB,</span>
<span class="quote">&gt; file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
<span class="quote">&gt;  			task_pid_nr(tsk), tsk-&gt;comm,</span>
<span class="quote">&gt;  			K(get_mm_counter(mm, MM_ANONPAGES)),</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe it&#39;s just the fact that we&#39;re not releasing the memory and so some</span>
<span class="quote">&gt; other bit of code is not able to make enough progress to trigger the</span>
<span class="quote">&gt; bug, although curiously, if I just move the #if 0..#endif inside</span>
<span class="quote">&gt; tlb_gather_mmu()..tlb_finish_mmu() itself (so just calling tlb_*()</span>
<span class="quote">&gt; without doing the for-loop), it still reproduces the crash.</span>

What is the atual crash?
<span class="quote">
&gt; Another clue, although it might just be a coincidence, is that it seems</span>
<span class="quote">&gt; the VMA/file in question is always a mapping for the exe file itself</span>
<span class="quote">&gt; (the reason I think this might be a coincidence is that the exe file</span>
<span class="quote">&gt; mapping is the first one and we usually traverse VMAs starting with this</span>
<span class="quote">&gt; one, that doesn&#39;t mean the other VMAs aren&#39;t affected by the same</span>
<span class="quote">&gt; problem, just that we never hit them).</span>

You can experiment a bit and exclude PROT_EXEC vmas...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Dec. 16, 2016, 10:44 a.m.</div>
<pre class="content">
On Fri, Dec 16, 2016 at 11:11:13AM +0100, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 10:43:52, Vegard Nossum wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt; &gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt; &gt; why):</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; index ec9f11d4f094..37b14b2e2af4 100644</span>
<span class="quote">&gt; &gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; @@ -485,7 +485,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; &gt; struct mm_struct *mm)</span>
<span class="quote">&gt; &gt;  	 */</span>
<span class="quote">&gt; &gt;  	mutex_lock(&amp;oom_lock);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; -	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; &gt; +	if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; __oom_reap_task_mm is basically the same thing as MADV_DONTNEED and that</span>
<span class="quote">&gt; doesn&#39;t require the exlusive mmap_sem. So this looks correct to me.</span>

BTW, shouldn&#39;t we filter out all VM_SPECIAL VMAs there? Or VM_PFNMAP at
least.

MADV_DONTNEED doesn&#39;t touch VM_PFNMAP, but I don&#39;t see anything matching
on __oom_reap_task_mm() side.

Other difference is that you use unmap_page_range() witch doesn&#39;t touch
mmu_notifiers. MADV_DONTNEED goes via zap_page_range(), which invalidates
the range. Not sure if it can make any difference here.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 16, 2016, 11:42 a.m.</div>
<pre class="content">
On Fri 16-12-16 13:44:38, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Fri, Dec 16, 2016 at 11:11:13AM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Fri 16-12-16 10:43:52, Vegard Nossum wrote:</span>
<span class="quote">&gt; &gt; [...]</span>
<span class="quote">&gt; &gt; &gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt; &gt; &gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt; &gt; &gt; why):</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; index ec9f11d4f094..37b14b2e2af4 100644</span>
<span class="quote">&gt; &gt; &gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; @@ -485,7 +485,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; &gt; &gt; struct mm_struct *mm)</span>
<span class="quote">&gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt;  	mutex_lock(&amp;oom_lock);</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; -	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; &gt; &gt; +	if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; __oom_reap_task_mm is basically the same thing as MADV_DONTNEED and that</span>
<span class="quote">&gt; &gt; doesn&#39;t require the exlusive mmap_sem. So this looks correct to me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; BTW, shouldn&#39;t we filter out all VM_SPECIAL VMAs there? Or VM_PFNMAP at</span>
<span class="quote">&gt; least.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MADV_DONTNEED doesn&#39;t touch VM_PFNMAP, but I don&#39;t see anything matching</span>
<span class="quote">&gt; on __oom_reap_task_mm() side.</span>

I guess you are right and we should match the MADV_DONTNEED behavior
here. Care to send a patch?
<span class="quote">
&gt; Other difference is that you use unmap_page_range() witch doesn&#39;t touch</span>
<span class="quote">&gt; mmu_notifiers. MADV_DONTNEED goes via zap_page_range(), which invalidates</span>
<span class="quote">&gt; the range. Not sure if it can make any difference here.</span>

Which mmu notifier would care about this? I am not really familiar with
those users so I might miss something easily.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 16, 2016, 12:12 p.m.</div>
<pre class="content">
On Fri 16-12-16 12:42:43, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 13:44:38, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Fri, Dec 16, 2016 at 11:11:13AM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Fri 16-12-16 10:43:52, Vegard Nossum wrote:</span>
<span class="quote">&gt; &gt; &gt; [...]</span>
<span class="quote">&gt; &gt; &gt; &gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt; &gt; &gt; &gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt; &gt; &gt; &gt; why):</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; &gt; index ec9f11d4f094..37b14b2e2af4 100644</span>
<span class="quote">&gt; &gt; &gt; &gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; &gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; &gt; &gt; &gt; @@ -485,7 +485,7 @@ static bool __oom_reap_task_mm(struct task_struct *tsk,</span>
<span class="quote">&gt; &gt; &gt; &gt; struct mm_struct *mm)</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt;  	mutex_lock(&amp;oom_lock);</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; -	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; &gt; &gt; &gt; +	if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; __oom_reap_task_mm is basically the same thing as MADV_DONTNEED and that</span>
<span class="quote">&gt; &gt; &gt; doesn&#39;t require the exlusive mmap_sem. So this looks correct to me.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; BTW, shouldn&#39;t we filter out all VM_SPECIAL VMAs there? Or VM_PFNMAP at</span>
<span class="quote">&gt; &gt; least.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; MADV_DONTNEED doesn&#39;t touch VM_PFNMAP, but I don&#39;t see anything matching</span>
<span class="quote">&gt; &gt; on __oom_reap_task_mm() side.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I guess you are right and we should match the MADV_DONTNEED behavior</span>
<span class="quote">&gt; here. Care to send a patch?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Other difference is that you use unmap_page_range() witch doesn&#39;t touch</span>
<span class="quote">&gt; &gt; mmu_notifiers. MADV_DONTNEED goes via zap_page_range(), which invalidates</span>
<span class="quote">&gt; &gt; the range. Not sure if it can make any difference here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Which mmu notifier would care about this? I am not really familiar with</span>
<span class="quote">&gt; those users so I might miss something easily.</span>

Just forgot to add. Unlike the MADV_DONTNEED, there is nobody who should
observe the address space of the oom killed (and reaped) task so why
should notifiers matter in the first place?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a> - Dec. 16, 2016, 1:14 p.m.</div>
<pre class="content">
On 12/16/2016 11:11 AM, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 10:43:52, Vegard Nossum wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt;&gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt;&gt; why):</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; What is the atual crash?</span>

Annoyingly it doesn&#39;t seem to reproduce with the very latest
linus/master, so maybe it&#39;s been fixed recently after all and I missed it.

I&#39;ve started a bisect to see what fixed it. Just in case, I added 4
different crashes I saw with various kernels. I think there may have
been a few others too (I remember seeing one in a page fault path), but
these were the most frequent ones.


Vegard

--

Manifestation 1:

Out of memory: Kill process 1650 (trinity-main) score 90 or sacrifice child
Killed process 1724 (trinity-c14) total-vm:37280kB, anon-rss:236kB, 
file-rss:112kB, shmem-rss:112kB
BUG: unable to handle kernel NULL pointer dereference at 00000000000001e8
IP: [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580
PGD c001067 PUD c000067
PMD 0
Oops: 0002 [#1] PREEMPT SMP KASAN
Dumping ftrace buffer:
    (ftrace buffer empty)
CPU: 28 PID: 1650 Comm: trinity-main Not tainted 4.9.0-rc6+ #317
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 
Ubuntu-1.8.2-1ubuntu1 04/01/2014
task: ffff88000f9bc440 task.stack: ffff88000c778000
RIP: 0010:[&lt;ffffffff8126b1c0&gt;]  [&lt;ffffffff8126b1c0&gt;] 
copy_process.part.41+0x2150/0x5580
RSP: 0018:ffff88000c77fc18  EFLAGS: 00010297
RAX: 0000000000000000 RBX: ffff88000fa11c00 RCX: 0000000000000000
RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffff88000f2a33b0
RBP: ffff88000c77fdb0 R08: ffff88000c77f900 R09: 0000000000000002
R10: 00000000cb9401ca R11: 00000000c6eda739 R12: ffff88000f894d00
R13: ffff88000c7c4700 R14: ffff88000fa11c50 R15: ffff88000f2a3200
FS:  00007fb7d2a24700(0000) GS:ffff880011b00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00000000000001e8 CR3: 000000001010d000 CR4: 00000000000406e0
Stack:
  0000000000000046 0000000001200011 ffffed0001f129ac ffff88000f894d60
  0000000000000000 0000000000000000 ffff88000f894d08 ffff88000f894da0
  ffff88000c7a8620 ffff88000f020318 ffff88000fa11c18 ffff88000f894e40
Call Trace:
  [&lt;ffffffff81269070&gt;] ? __cleanup_sighand+0x50/0x50
  [&lt;ffffffff81fd552e&gt;] ? memzero_explicit+0xe/0x10
  [&lt;ffffffff822cb592&gt;] ? urandom_read+0x232/0x4d0
  [&lt;ffffffff8126e974&gt;] _do_fork+0x1a4/0xa40
  [&lt;ffffffff8126e7d0&gt;] ? fork_idle+0x180/0x180
  [&lt;ffffffff81002dba&gt;] ? syscall_trace_enter+0x3aa/0xd40
  [&lt;ffffffff815179ea&gt;] ? __context_tracking_exit.part.4+0x9a/0x1e0
  [&lt;ffffffff81002a10&gt;] ? exit_to_usermode_loop+0x150/0x150
  [&lt;ffffffff8201df57&gt;] ? check_preemption_disabled+0x37/0x1e0
  [&lt;ffffffff8126f2e7&gt;] SyS_clone+0x37/0x50
  [&lt;ffffffff83caea50&gt;] ? ptregs_sys_rt_sigreturn+0x10/0x10
  [&lt;ffffffff8100524f&gt;] do_syscall_64+0x1af/0x4d0
  [&lt;ffffffff83cae974&gt;] entry_SYSCALL64_slow_path+0x25/0x25
Code: be 00 00 00 00 00 fc ff df 48 c1 e8 03 80 3c 30 00 74 08 4c 89 f7 
e8 d0 7d 3c 00 f6 43 51 08 74 11 e8 45 fa 1d 00 48 8b 44 24 20 &lt;f0&gt; ff 
88 e8 01 00 00 e8 34 fa 1d 00 48 8b 44 24 70 48 83 c0 60
RIP  [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580
  RSP &lt;ffff88000c77fc18&gt;
CR2: 00000000000001e8
---[ end trace b8f81ad60c106e75 ]---

Manifestation 2:

Killed process 1775 (trinity-c21) total-vm:37404kB, anon-rss:232kB, 
file-rss:420kB, shmem-rss:116kB
oom_reaper: reaped process 1775 (trinity-c21), now anon-rss:0kB, 
file-rss:0kB, shmem-rss:116kB
==================================================================
BUG: KASAN: use-after-free in p9_client_read+0x8f0/0x960 at addr 
ffff880010284d00
Read of size 8 by task trinity-main/1649
CPU: 3 PID: 1649 Comm: trinity-main Not tainted 4.9.0+ #318
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 
Ubuntu-1.8.2-1ubuntu1 04/01/2014
  ffff8800068a7770 ffffffff82012301 ffff88001100f600 ffff880010284d00
  ffff880010284d60 ffff880010284d00 ffff8800068a7798 ffffffff8165872c
  ffff8800068a7828 ffff880010284d00 ffff88001100f600 ffff8800068a7818
Call Trace:
  [&lt;ffffffff82012301&gt;] dump_stack+0x83/0xb2
  [&lt;ffffffff8165872c&gt;] kasan_object_err+0x1c/0x70
  [&lt;ffffffff816589c5&gt;] kasan_report_error+0x1f5/0x4e0
  [&lt;ffffffff81657d92&gt;] ? kasan_slab_alloc+0x12/0x20
  [&lt;ffffffff82079357&gt;] ? check_preemption_disabled+0x37/0x1e0
  [&lt;ffffffff81658e4e&gt;] __asan_report_load8_noabort+0x3e/0x40
  [&lt;ffffffff82079300&gt;] ? assoc_array_gc+0x1310/0x1330
  [&lt;ffffffff83b84c30&gt;] ? p9_client_read+0x8f0/0x960
  [&lt;ffffffff83b84c30&gt;] p9_client_read+0x8f0/0x960
  [&lt;ffffffff8207953c&gt;] ? __this_cpu_preempt_check+0x1c/0x20
  [&lt;ffffffff81685388&gt;] ? memcg_check_events+0x28/0x460
  [&lt;ffffffff83b84340&gt;] ? p9_client_unlinkat+0x100/0x100
  [&lt;ffffffff8168f147&gt;] ? mem_cgroup_commit_charge+0xb7/0x11b0
  [&lt;ffffffff815357f4&gt;] ? __add_to_page_cache_locked+0x3a4/0x520
  [&lt;ffffffff815a6bdb&gt;] ? __inc_node_state+0x6b/0xe0
  [&lt;ffffffff813727c7&gt;] ? do_raw_spin_unlock+0x137/0x210
  [&lt;ffffffff820587d0&gt;] ? iov_iter_bvec+0x30/0x120
  [&lt;ffffffff81b7d6ac&gt;] v9fs_fid_readpage+0x15c/0x390
  [&lt;ffffffff81b7d550&gt;] ? v9fs_write_end+0x410/0x410
  [&lt;ffffffff81571205&gt;] ? __lru_cache_add+0x145/0x1f0
  [&lt;ffffffff815713d5&gt;] ? lru_cache_add+0x15/0x20
  [&lt;ffffffff8153761b&gt;] ? add_to_page_cache_lru+0x13b/0x280
  [&lt;ffffffff815374e0&gt;] ? add_to_page_cache_locked+0x40/0x40
  [&lt;ffffffff8153786d&gt;] ? __page_cache_alloc+0x10d/0x290
  [&lt;ffffffff81b7d91f&gt;] v9fs_vfs_readpage+0x3f/0x50
  [&lt;ffffffff8153b188&gt;] filemap_fault+0xbe8/0x1140
  [&lt;ffffffff8153af1d&gt;] ? filemap_fault+0x97d/0x1140
  [&lt;ffffffff815d2eb6&gt;] __do_fault+0x206/0x410
  [&lt;ffffffff815d2cb0&gt;] ? do_page_mkwrite+0x320/0x320
  [&lt;ffffffff815ddc4c&gt;] ? handle_mm_fault+0x1cc/0x2a60
  [&lt;ffffffff815df76f&gt;] handle_mm_fault+0x1cef/0x2a60
  [&lt;ffffffff815ddbb2&gt;] ? handle_mm_fault+0x132/0x2a60
  [&lt;ffffffff815dda80&gt;] ? __pmd_alloc+0x370/0x370
  [&lt;ffffffff81302550&gt;] ? dl_bw_of+0x80/0x80
  [&lt;ffffffff8123b5f0&gt;] ? __do_page_fault+0x220/0x9f0
  [&lt;ffffffff815f1820&gt;] ? find_vma+0x30/0x150
  [&lt;ffffffff8123b822&gt;] __do_page_fault+0x452/0x9f0
  [&lt;ffffffff8123c075&gt;] trace_do_page_fault+0x1e5/0x3a0
  [&lt;ffffffff8122e497&gt;] do_async_page_fault+0x27/0xa0
  [&lt;ffffffff83d86c58&gt;] async_page_fault+0x28/0x30
Object at ffff880010284d00, in cache kmalloc-96 size: 96
Allocated:
PID = 1649
  [&lt;ffffffff811db686&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff81657566&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff81657d4d&gt;] kasan_kmalloc+0xad/0xe0
  [&lt;ffffffff81653532&gt;] kmem_cache_alloc_trace+0x152/0x2c0
  [&lt;ffffffff83b7cc58&gt;] p9_fid_create+0x58/0x3a0
  [&lt;ffffffff83b83a3d&gt;] p9_client_walk+0xbd/0x7a0
  [&lt;ffffffff81b7df1c&gt;] v9fs_file_open+0x38c/0x740
  [&lt;ffffffff816ab927&gt;] do_dentry_open+0x5c7/0xc50
  [&lt;ffffffff816af4c5&gt;] vfs_open+0x105/0x220
  [&lt;ffffffff816e07a0&gt;] path_openat+0x8f0/0x2920
  [&lt;ffffffff816e539e&gt;] do_filp_open+0x18e/0x250
  [&lt;ffffffff816c4403&gt;] do_open_execat+0xe3/0x4c0
  [&lt;ffffffff816cad41&gt;] do_execveat_common.isra.36+0x671/0x1d00
  [&lt;ffffffff816cce52&gt;] SyS_execve+0x42/0x50
  [&lt;ffffffff8100524f&gt;] do_syscall_64+0x1af/0x4d0
  [&lt;ffffffff83d85b74&gt;] return_from_SYSCALL_64+0x0/0x6a
Freed:
PID = 1280
  [&lt;ffffffff811db686&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff81657566&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff81657c61&gt;] kasan_slab_free+0x71/0xb0
  [&lt;ffffffff8165506c&gt;] kfree+0xfc/0x230
  [&lt;ffffffff83b7cb42&gt;] p9_fid_destroy+0x1c2/0x280
  [&lt;ffffffff83b838bd&gt;] p9_client_clunk+0xdd/0x1a0
  [&lt;ffffffff81b80694&gt;] v9fs_dir_release+0x44/0x60
  [&lt;ffffffff816b9d67&gt;] __fput+0x287/0x710
  [&lt;ffffffff816ba239&gt;] delayed_fput+0x49/0x70
  [&lt;ffffffff812c6600&gt;] process_one_work+0x8b0/0x14c0
  [&lt;ffffffff812c72fb&gt;] worker_thread+0xeb/0x1210
  [&lt;ffffffff812da5a4&gt;] kthread+0x244/0x2d0
  [&lt;ffffffff83d85d25&gt;] ret_from_fork+0x25/0x30
Memory state around the buggy address:
  ffff880010284c00: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
  ffff880010284c80: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
<span class="quote"> &gt;ffff880010284d00: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc</span>
                    ^
  ffff880010284d80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  ffff880010284e00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================
Disabling lock debugging due to kernel taint
==================================================================

Manifestation 3:

Out of memory: Kill process 1650 (trinity-main) score 91 or sacrifice child
Killed process 1731 (trinity-main) total-vm:37140kB, anon-rss:192kB, 
file-rss:0kB, shmem-rss:0kB
==================================================================
BUG: KASAN: use-after-free in unlink_file_vma+0xa5/0xb0 at addr 
ffff880006689db0
Read of size 8 by task trinity-main/1731
CPU: 5 PID: 1731 Comm: trinity-main Not tainted 4.9.0 #314
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 
Ubuntu-1.8.2-1ubuntu1 04/01/2014
  ffff880000aaf7f8 ffffffff81fb1ab1 ffff8800110ed500 ffff880006689c00
  ffff880006689db8 ffff880000aaf998 ffff880000aaf820 ffffffff8162c5ac
  ffff880000aaf8b0 ffff880006689c00Out of memory: Kill process 1650 
(trinity-main) score 91 or sacrifice child
Killed process 1650 (trinity-main) total-vm:37140kB, anon-rss:192kB, 
file-rss:140kB, shmem-rss:18632kB
oom_reaper: reaped process 1650 (trinity-main), now anon-rss:0kB, 
file-rss:0kB, shmem-rss:18632kB
  ffff8800110ed500 ffff880000aaf8a0
Call Trace:
  [&lt;ffffffff81fb1ab1&gt;] dump_stack+0x83/0xb2
  [&lt;ffffffff8162c5ac&gt;] kasan_object_err+0x1c/0x70
  [&lt;ffffffff8162c845&gt;] kasan_report_error+0x1f5/0x4e0
  [&lt;ffffffff815afd80&gt;] ? vm_normal_page_pmd+0x240/0x240
  [&lt;ffffffff8162ccce&gt;] __asan_report_load8_noabort+0x3e/0x40
  [&lt;ffffffff815c4305&gt;] ? unlink_file_vma+0xa5/0xb0
  [&lt;ffffffff815c4305&gt;] unlink_file_vma+0xa5/0xb0
  [&lt;ffffffff815ad610&gt;] free_pgtables+0x80/0x350
  [&lt;ffffffff815ca662&gt;] exit_mmap+0x212/0x3d0
  [&lt;ffffffff815ca450&gt;] ? SyS_munmap+0xa0/0xa0
  [&lt;ffffffff8130b2a5&gt;] ? __might_sleep+0x95/0x1a0
  [&lt;ffffffff812684a0&gt;] mmput+0x90/0x1c0
  [&lt;ffffffff8127e3dd&gt;] do_exit+0x71d/0x2930
  [&lt;ffffffff815adeb0&gt;] ? vm_normal_page+0x200/0x200
  [&lt;ffffffff8127dcc0&gt;] ? mm_update_next_owner+0x710/0x710
  [&lt;ffffffff815b614f&gt;] ? handle_mm_fault+0xcbf/0x2a60
  [&lt;ffffffff81298403&gt;] ? __dequeue_signal+0x133/0x470
  [&lt;ffffffff81280768&gt;] do_group_exit+0x108/0x330
  [&lt;ffffffff812a1d83&gt;] get_signal+0x613/0x1390
  [&lt;ffffffff8135e912&gt;] ? __lock_acquire.isra.32+0xc2/0x1a30
  [&lt;ffffffff811b1b9f&gt;] do_signal+0x7f/0x18f0
  [&lt;ffffffff81237354&gt;] ? __do_page_fault+0x474/0x9f0
  [&lt;ffffffff811b1b20&gt;] ? setup_sigcontext+0x7d0/0x7d0
  [&lt;ffffffff8123719c&gt;] ? __do_page_fault+0x2bc/0x9f0
  [&lt;ffffffff82017d27&gt;] ? check_preemption_disabled+0x37/0x1e0
  [&lt;ffffffff81004ee8&gt;] ? prepare_exit_to_usermode+0xb8/0xd0
  [&lt;ffffffff81237b94&gt;] ? trace_do_page_fault+0x1f4/0x3a0
  [&lt;ffffffff81004ee8&gt;] ? prepare_exit_to_usermode+0xb8/0xd0
  [&lt;ffffffff81229fa7&gt;] ? do_async_page_fault+0x27/0xa0
  [&lt;ffffffff83c993d8&gt;] ? async_page_fault+0x28/0x30
  [&lt;ffffffff81004ee8&gt;] ? prepare_exit_to_usermode+0xb8/0xd0
  [&lt;ffffffff81002975&gt;] exit_to_usermode_loop+0xb5/0x150
  [&lt;ffffffff81004ee8&gt;] ? prepare_exit_to_usermode+0xb8/0xd0
  [&lt;ffffffff8100506e&gt;] syscall_return_slowpath+0x16e/0x1a0
  [&lt;ffffffff83c98495&gt;] ret_from_fork+0x15/0x30
Object at ffff880006689c00, in cache filp size: 440
Allocated:
PID = 1650
  [&lt;ffffffff811d77d6&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff8162b3e6&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff8162bbcd&gt;] kasan_kmalloc+0xad/0xe0
  [&lt;ffffffff8162bc12&gt;] kasan_slab_alloc+0x12/0x20
  [&lt;ffffffff81627195&gt;] kmem_cache_alloc+0xf5/0x2c0
  [&lt;ffffffff8168aaa1&gt;] get_empty_filp+0x91/0x3e0
  [&lt;ffffffff816affd2&gt;] path_openat+0xb2/0x2920
  [&lt;ffffffff816b540e&gt;] do_filp_open+0x18e/0x250
  [&lt;ffffffff816946f3&gt;] do_open_execat+0xe3/0x4c0
  [&lt;ffffffff8169adb1&gt;] do_execveat_common.isra.36+0x671/0x1d00
  [&lt;ffffffff8169cec2&gt;] SyS_execve+0x42/0x50
  [&lt;ffffffff8100524f&gt;] do_syscall_64+0x1af/0x4d0
  [&lt;ffffffff83c982f4&gt;] return_from_SYSCALL_64+0x0/0x6a
Freed:
PID = 2
  [&lt;ffffffff811d77d6&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff8162b3e6&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff8162bae1&gt;] kasan_slab_free+0x71/0xb0
  [&lt;ffffffff81627ddf&gt;] kmem_cache_free+0xaf/0x2a0
  [&lt;ffffffff8168a1b5&gt;] file_free_rcu+0x65/0xa0
  [&lt;ffffffff8139bd87&gt;] rcu_process_callbacks+0x9b7/0x10e0
  [&lt;ffffffff83c9ae01&gt;] __do_softirq+0x1c1/0x5ba
Memory state around the buggy address:
  ffff880006689c80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
  ffff880006689d00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
<span class="quote"> &gt;ffff880006689d80: fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc</span>
                                      ^
  ffff880006689e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb

Manifestation 4:

Killed process 1650 (trinity-main) total-vm:37140kB, anon-rss:192kB, 
file-rss:144kB, shmem-rss:18632kB
oom_reaper: reaped process 1650 (trinity-main), now anon-rss:0kB, 
file-rss:0kB, shmem-rss:18632kB
==================================================================
BUG: KASAN: use-after-free in unlink_file_vma+0xa5/0xb0 at addr 
ffff880006b523b0
Read of size 8 by task kworker/3:1/1344
CPU: 3 PID: 1344 Comm: kworker/3:1 Not tainted 4.9.0 #314
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 
Ubuntu-1.8.2-1ubuntu1 04/01/2014
Workqueue: events mmput_async_fn
  ffff88000d3bf978 ffffffff81fb1ab1 ffff8800110ed500 ffff880006b52200
  ffff880006b523b8 ffff88000d3bfb18 ffff88000d3bf9a0/home/vegard/lin 
ffffffff8162c5acux/init-trinity.
sh: line 127:  1 ffff88000d3bfa30650 Killed       ffff880006b52200 
      /sbi ffff8800110ed500n/capsh --user=n ffff88000d3bfa20obody --caps= --
  -c &#39;/home/vegarCall Trace:
d/trinity/trinit [&lt;ffffffff81fb1ab1&gt;] dump_stack+0x83/0xb2
y -qq -C32 --ena [&lt;ffffffff8162c5ac&gt;] kasan_object_err+0x1c/0x70
ble-fds=pseudo - [&lt;ffffffff8162c845&gt;] kasan_report_error+0x1f5/0x4e0
cexecve,64 -V /p [&lt;ffffffff815afd80&gt;] ? vm_normal_page_pmd+0x240/0x240
roc/self/mem&#39;
  [&lt;ffffffff8162ccce&gt;] __asan_report_load8_noabort+0x3e/0x40
  [&lt;ffffffff815c4305&gt;] ? unlink_file_vma+0xa5/0xb0
  [&lt;ffffffff815c4305&gt;] unlink_file_vma+0xa5/0xb0
  [&lt;ffffffff815ad610&gt;] free_pgtables+0x80/0x350
  [&lt;ffffffff815ca662&gt;] exit_mmap+0x212/0x3d0
  [&lt;ffffffff815ca450&gt;] ? SyS_munmap+0xa0/0xa0
  [&lt;ffffffff812bf478&gt;] ? process_one_work+0x6e8/0x13a0
+ true [&lt;ffffffff812682d1&gt;] mmput_async_fn+0x61/0x1a0
  [&lt;ffffffff812bf54f&gt;] process_one_work+0x7bf/0x13a0
  [&lt;ffffffff812bf478&gt;] ? process_one_work+0x6e8/0x13a0
  [&lt;ffffffff812ebf84&gt;] ? finish_task_switch+0x184/0x660
  [&lt;ffffffff812bed90&gt;] ? __cancel_work+0x220/0x220
  [&lt;ffffffff812c021b&gt;] worker_thread+0xeb/0x1150
  [&lt;ffffffff83c88471&gt;] ? __schedule+0x461/0x17c0
  [&lt;ffffffff812d29f4&gt;] kthread+0x244/0x2d0
  [&lt;ffffffff812c0130&gt;] ? process_one_work+0x13a0/0x13a0

+ true
  [&lt;ffffffff812d27b0&gt;] ? __kthread_create_on_node+0x380/0x380
  [&lt;ffffffff812d27b0&gt;] ? __kthread_create_on_node+0x380/0x380
  [&lt;ffffffff812d27b0&gt;] ? __kthread_create_on_node+0x380/0x380
  [&lt;ffffffff83c984a5&gt;] ret_from_fork+0x25/0x30
Object at ffff880006b52200, in cache filp size: 440
Allocated:
PID = 1650
  [&lt;ffffffff811d77d6&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff8162b3e6&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff8162bbcd&gt;] kasan_kmalloc+0xad/0xe0
  [&lt;ffffffff8162bc12&gt;] kasan_slab_alloc+0x12/0x20
  [&lt;ffffffff81627195&gt;] kmem_cache_alloc+0xf5/0x2c0
  [&lt;ffffffff8168aaa1&gt;] get_empty_filp+0x91/0x3e0
  [&lt;ffffffff816affd2&gt;] path_openat+0xb2/0x2920
  [&lt;ffffffff816b540e&gt;] do_filp_open+0x18e/0x250
  [&lt;ffffffff816946f3&gt;] do_open_execat+0xe3/0x4c0
  [&lt;ffffffff8169adb1&gt;] do_execveat_common.isra.36+0x671/0x1d00
  [&lt;ffffffff8169cec2&gt;] SyS_execve+0x42/0x50
  [&lt;ffffffff8100524f&gt;] do_syscall_64+0x1af/0x4d0
  [&lt;ffffffff83c982f4&gt;] return_from_SYSCALL_64+0x0/0x6a
Freed:
PID = 0
  [&lt;ffffffff811d77d6&gt;] save_stack_trace+0x16/0x20
  [&lt;ffffffff8162b3e6&gt;] save_stack+0x46/0xd0
  [&lt;ffffffff8162bae1&gt;] kasan_slab_free+0x71/0xb0
  [&lt;ffffffff81627ddf&gt;] kmem_cache_free+0xaf/0x2a0
  [&lt;ffffffff8168a1b5&gt;] file_free_rcu+0x65/0xa0
  [&lt;ffffffff8139bd87&gt;] rcu_process_callbacks+0x9b7/0x10e0
  [&lt;ffffffff83c9ae01&gt;] __do_softirq+0x1c1/0x5ba
Memory state around the buggy address:
  ffff880006b52280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
  ffff880006b52300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
<span class="quote"> &gt;ffff880006b52380: fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc</span>
                                      ^
  ffff880006b52400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  ffff880006b52480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 16, 2016, 2 p.m.</div>
<pre class="content">
On Fri 16-12-16 14:14:17, Vegard Nossum wrote:
[...]
<span class="quote">&gt; Out of memory: Kill process 1650 (trinity-main) score 90 or sacrifice child</span>
<span class="quote">&gt; Killed process 1724 (trinity-c14) total-vm:37280kB, anon-rss:236kB,</span>
<span class="quote">&gt; file-rss:112kB, shmem-rss:112kB</span>
<span class="quote">&gt; BUG: unable to handle kernel NULL pointer dereference at 00000000000001e8</span>
<span class="quote">&gt; IP: [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt; PGD c001067 PUD c000067</span>
<span class="quote">&gt; PMD 0</span>
<span class="quote">&gt; Oops: 0002 [#1] PREEMPT SMP KASAN</span>
<span class="quote">&gt; Dumping ftrace buffer:</span>
<span class="quote">&gt;    (ftrace buffer empty)</span>
<span class="quote">&gt; CPU: 28 PID: 1650 Comm: trinity-main Not tainted 4.9.0-rc6+ #317</span>

Hmm, so this was the oom victim initially but we have decided to kill
its child 1724 instead.
<span class="quote">
&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt; task: ffff88000f9bc440 task.stack: ffff88000c778000</span>
<span class="quote">&gt; RIP: 0010:[&lt;ffffffff8126b1c0&gt;]  [&lt;ffffffff8126b1c0&gt;]</span>
<span class="quote">&gt; copy_process.part.41+0x2150/0x5580</span>

Could you match this to the kernel source please?
<span class="quote">
&gt; RSP: 0018:ffff88000c77fc18  EFLAGS: 00010297</span>
<span class="quote">&gt; RAX: 0000000000000000 RBX: ffff88000fa11c00 RCX: 0000000000000000</span>
<span class="quote">&gt; RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffff88000f2a33b0</span>
<span class="quote">&gt; RBP: ffff88000c77fdb0 R08: ffff88000c77f900 R09: 0000000000000002</span>
<span class="quote">&gt; R10: 00000000cb9401ca R11: 00000000c6eda739 R12: ffff88000f894d00</span>
<span class="quote">&gt; R13: ffff88000c7c4700 R14: ffff88000fa11c50 R15: ffff88000f2a3200</span>
<span class="quote">&gt; FS:  00007fb7d2a24700(0000) GS:ffff880011b00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; CR2: 00000000000001e8 CR3: 000000001010d000 CR4: 00000000000406e0</span>
<span class="quote">&gt; Stack:</span>
<span class="quote">&gt;  0000000000000046 0000000001200011 ffffed0001f129ac ffff88000f894d60</span>
<span class="quote">&gt;  0000000000000000 0000000000000000 ffff88000f894d08 ffff88000f894da0</span>
<span class="quote">&gt;  ffff88000c7a8620 ffff88000f020318 ffff88000fa11c18 ffff88000f894e40</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;ffffffff81269070&gt;] ? __cleanup_sighand+0x50/0x50</span>
<span class="quote">&gt;  [&lt;ffffffff81fd552e&gt;] ? memzero_explicit+0xe/0x10</span>
<span class="quote">&gt;  [&lt;ffffffff822cb592&gt;] ? urandom_read+0x232/0x4d0</span>
<span class="quote">&gt;  [&lt;ffffffff8126e974&gt;] _do_fork+0x1a4/0xa40</span>

and here we are copying the pid 1650 to its child. I am wondering
whether that might be the killed child. But the child is visible only
very late during the fork to the oom killer.
<span class="quote">
&gt;  [&lt;ffffffff8126e7d0&gt;] ? fork_idle+0x180/0x180</span>
<span class="quote">&gt;  [&lt;ffffffff81002dba&gt;] ? syscall_trace_enter+0x3aa/0xd40</span>
<span class="quote">&gt;  [&lt;ffffffff815179ea&gt;] ? __context_tracking_exit.part.4+0x9a/0x1e0</span>
<span class="quote">&gt;  [&lt;ffffffff81002a10&gt;] ? exit_to_usermode_loop+0x150/0x150</span>
<span class="quote">&gt;  [&lt;ffffffff8201df57&gt;] ? check_preemption_disabled+0x37/0x1e0</span>
<span class="quote">&gt;  [&lt;ffffffff8126f2e7&gt;] SyS_clone+0x37/0x50</span>
<span class="quote">&gt;  [&lt;ffffffff83caea50&gt;] ? ptregs_sys_rt_sigreturn+0x10/0x10</span>
<span class="quote">&gt;  [&lt;ffffffff8100524f&gt;] do_syscall_64+0x1af/0x4d0</span>
<span class="quote">&gt;  [&lt;ffffffff83cae974&gt;] entry_SYSCALL64_slow_path+0x25/0x25</span>
<span class="quote">&gt; Code: be 00 00 00 00 00 fc ff df 48 c1 e8 03 80 3c 30 00 74 08 4c 89 f7 e8</span>
<span class="quote">&gt; d0 7d 3c 00 f6 43 51 08 74 11 e8 45 fa 1d 00 48 8b 44 24 20 &lt;f0&gt; ff 88 e8 01</span>
<span class="quote">&gt; 00 00 e8 34 fa 1d 00 48 8b 44 24 70 48 83 c0 60</span>
<span class="quote">&gt; RIP  [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt;  RSP &lt;ffff88000c77fc18&gt;</span>
<span class="quote">&gt; CR2: 00000000000001e8</span>
<span class="quote">&gt; ---[ end trace b8f81ad60c106e75 ]---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Manifestation 2:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Killed process 1775 (trinity-c21) total-vm:37404kB, anon-rss:232kB,</span>
<span class="quote">&gt; file-rss:420kB, shmem-rss:116kB</span>
<span class="quote">&gt; oom_reaper: reaped process 1775 (trinity-c21), now anon-rss:0kB,</span>
<span class="quote">&gt; file-rss:0kB, shmem-rss:116kB</span>
<span class="quote">&gt; ==================================================================</span>
<span class="quote">&gt; BUG: KASAN: use-after-free in p9_client_read+0x8f0/0x960 at addr</span>
<span class="quote">&gt; ffff880010284d00</span>
<span class="quote">&gt; Read of size 8 by task trinity-main/1649</span>
<span class="quote">&gt; CPU: 3 PID: 1649 Comm: trinity-main Not tainted 4.9.0+ #318</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt;  ffff8800068a7770 ffffffff82012301 ffff88001100f600 ffff880010284d00</span>
<span class="quote">&gt;  ffff880010284d60 ffff880010284d00 ffff8800068a7798 ffffffff8165872c</span>
<span class="quote">&gt;  ffff8800068a7828 ffff880010284d00 ffff88001100f600 ffff8800068a7818</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;ffffffff82012301&gt;] dump_stack+0x83/0xb2</span>
<span class="quote">&gt;  [&lt;ffffffff8165872c&gt;] kasan_object_err+0x1c/0x70</span>
<span class="quote">&gt;  [&lt;ffffffff816589c5&gt;] kasan_report_error+0x1f5/0x4e0</span>
<span class="quote">&gt;  [&lt;ffffffff81657d92&gt;] ? kasan_slab_alloc+0x12/0x20</span>
<span class="quote">&gt;  [&lt;ffffffff82079357&gt;] ? check_preemption_disabled+0x37/0x1e0</span>
<span class="quote">&gt;  [&lt;ffffffff81658e4e&gt;] __asan_report_load8_noabort+0x3e/0x40</span>
<span class="quote">&gt;  [&lt;ffffffff82079300&gt;] ? assoc_array_gc+0x1310/0x1330</span>
<span class="quote">&gt;  [&lt;ffffffff83b84c30&gt;] ? p9_client_read+0x8f0/0x960</span>
<span class="quote">&gt;  [&lt;ffffffff83b84c30&gt;] p9_client_read+0x8f0/0x960</span>

no idea how we would end up with use after here. Even if I unmapped the
page then the read code should be able to cope with that. This smells
like a p9 issue to me.

[...]
<span class="quote">&gt; Manifestation 3:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Out of memory: Kill process 1650 (trinity-main) score 91 or sacrifice child</span>
<span class="quote">&gt; Killed process 1731 (trinity-main) total-vm:37140kB, anon-rss:192kB,</span>
<span class="quote">&gt; file-rss:0kB, shmem-rss:0kB</span>
<span class="quote">&gt; ==================================================================</span>
<span class="quote">&gt; BUG: KASAN: use-after-free in unlink_file_vma+0xa5/0xb0 at addr</span>
<span class="quote">&gt; ffff880006689db0</span>
<span class="quote">&gt; Read of size 8 by task trinity-main/1731</span>
<span class="quote">&gt; CPU: 5 PID: 1731 Comm: trinity-main Not tainted 4.9.0 #314</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt;  ffff880000aaf7f8 ffffffff81fb1ab1 ffff8800110ed500 ffff880006689c00</span>
<span class="quote">&gt;  ffff880006689db8 ffff880000aaf998 ffff880000aaf820 ffffffff8162c5ac</span>
<span class="quote">&gt;  ffff880000aaf8b0 ffff880006689c00Out of memory: Kill process 1650</span>
<span class="quote">&gt; (trinity-main) score 91 or sacrifice child</span>
<span class="quote">&gt; Killed process 1650 (trinity-main) total-vm:37140kB, anon-rss:192kB,</span>
<span class="quote">&gt; file-rss:140kB, shmem-rss:18632kB</span>
<span class="quote">&gt; oom_reaper: reaped process 1650 (trinity-main), now anon-rss:0kB,</span>
<span class="quote">&gt; file-rss:0kB, shmem-rss:18632kB</span>
<span class="quote">&gt;  ffff8800110ed500 ffff880000aaf8a0</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;ffffffff81fb1ab1&gt;] dump_stack+0x83/0xb2</span>
<span class="quote">&gt;  [&lt;ffffffff8162c5ac&gt;] kasan_object_err+0x1c/0x70</span>
<span class="quote">&gt;  [&lt;ffffffff8162c845&gt;] kasan_report_error+0x1f5/0x4e0</span>
<span class="quote">&gt;  [&lt;ffffffff815afd80&gt;] ? vm_normal_page_pmd+0x240/0x240</span>
<span class="quote">&gt;  [&lt;ffffffff8162ccce&gt;] __asan_report_load8_noabort+0x3e/0x40</span>
<span class="quote">&gt;  [&lt;ffffffff815c4305&gt;] ? unlink_file_vma+0xa5/0xb0</span>
<span class="quote">&gt;  [&lt;ffffffff815c4305&gt;] unlink_file_vma+0xa5/0xb0</span>

Hmm, the oom repaper doesn&#39;t touch vma-&gt;vm_file so I do not see how it
could be related to the activity of the reaper. I will have a look
closer.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a> - Dec. 16, 2016, 2:04 p.m.</div>
<pre class="content">
On 12/16/2016 02:14 PM, Vegard Nossum wrote:
<span class="quote">&gt; On 12/16/2016 11:11 AM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt; On Fri 16-12-16 10:43:52, Vegard Nossum wrote:</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; I don&#39;t think it&#39;s a bug in the OOM reaper itself, but either of the</span>
<span class="quote">&gt;&gt;&gt; following two patches will fix the problem (without my understand how or</span>
<span class="quote">&gt;&gt;&gt; why):</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; What is the atual crash?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Annoyingly it doesn&#39;t seem to reproduce with the very latest</span>
<span class="quote">&gt; linus/master, so maybe it&#39;s been fixed recently after all and I missed it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;ve started a bisect to see what fixed it. Just in case, I added 4</span>
<span class="quote">&gt; different crashes I saw with various kernels. I think there may have</span>
<span class="quote">&gt; been a few others too (I remember seeing one in a page fault path), but</span>
<span class="quote">&gt; these were the most frequent ones.</span>

The bisect points to:

commit 6b94780e45c17b83e3e75f8aaca5a328db583c74
Author: Vincent Guittot &lt;vincent.guittot@linaro.org&gt;
Date:   Thu Dec 8 17:56:54 2016 +0100

     sched/core: Use load_avg for selecting idlest group

as fixing the crash, which seems odd to me. The only bit that sticks out
from the changelog to me:

&quot;&quot;&quot;
For use case like hackbench, this enable the scheduler to select
different CPUs during the fork sequence and to spread tasks across the
system.
&quot;&quot;&quot;

Reverting it from linus/master doesn&#39;t reintroduce the crash, but the
commit just before (6b94780e4^) does crash, so I&#39;m not sure what&#39;s going
on. Maybe the crash is just really sensitive to scheduling decisions or
something.


Vegard
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a> - Dec. 16, 2016, 2:25 p.m.</div>
<pre class="content">
On 12/16/2016 03:00 PM, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 14:14:17, Vegard Nossum wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; Out of memory: Kill process 1650 (trinity-main) score 90 or sacrifice child</span>
<span class="quote">&gt;&gt; Killed process 1724 (trinity-c14) total-vm:37280kB, anon-rss:236kB,</span>
<span class="quote">&gt;&gt; file-rss:112kB, shmem-rss:112kB</span>
<span class="quote">&gt;&gt; BUG: unable to handle kernel NULL pointer dereference at 00000000000001e8</span>
<span class="quote">&gt;&gt; IP: [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt;&gt; PGD c001067 PUD c000067</span>
<span class="quote">&gt;&gt; PMD 0</span>
<span class="quote">&gt;&gt; Oops: 0002 [#1] PREEMPT SMP KASAN</span>
<span class="quote">&gt;&gt; Dumping ftrace buffer:</span>
<span class="quote">&gt;&gt;    (ftrace buffer empty)</span>
<span class="quote">&gt;&gt; CPU: 28 PID: 1650 Comm: trinity-main Not tainted 4.9.0-rc6+ #317</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hmm, so this was the oom victim initially but we have decided to kill</span>
<span class="quote">&gt; its child 1724 instead.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt;&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt;&gt; task: ffff88000f9bc440 task.stack: ffff88000c778000</span>
<span class="quote">&gt;&gt; RIP: 0010:[&lt;ffffffff8126b1c0&gt;]  [&lt;ffffffff8126b1c0&gt;]</span>
<span class="quote">&gt;&gt; copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Could you match this to the kernel source please?</span>

kernel/fork.c:629 dup_mmap()

it&#39;s atomic_dec(&amp;inode-&gt;i_writecount), it matches up with
file_inode(file) == NULL:

(gdb) p &amp;((struct inode *)0)-&gt;i_writecount
$1 = (atomic_t *) 0x1e8 &lt;irq_stack_union+488&gt;
<span class="quote">
&gt;&gt; Killed process 1775 (trinity-c21) total-vm:37404kB, anon-rss:232kB,</span>
<span class="quote">&gt;&gt; file-rss:420kB, shmem-rss:116kB</span>
<span class="quote">&gt;&gt; oom_reaper: reaped process 1775 (trinity-c21), now anon-rss:0kB,</span>
<span class="quote">&gt;&gt; file-rss:0kB, shmem-rss:116kB</span>
<span class="quote">&gt;&gt; ==================================================================</span>
<span class="quote">&gt;&gt; BUG: KASAN: use-after-free in p9_client_read+0x8f0/0x960 at addr</span>
<span class="quote">&gt;&gt; ffff880010284d00</span>
<span class="quote">&gt;&gt; Read of size 8 by task trinity-main/1649</span>
<span class="quote">&gt;&gt; CPU: 3 PID: 1649 Comm: trinity-main Not tainted 4.9.0+ #318</span>
<span class="quote">&gt;&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt;&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt;&gt;  ffff8800068a7770 ffffffff82012301 ffff88001100f600 ffff880010284d00</span>
<span class="quote">&gt;&gt;  ffff880010284d60 ffff880010284d00 ffff8800068a7798 ffffffff8165872c</span>
<span class="quote">&gt;&gt;  ffff8800068a7828 ffff880010284d00 ffff88001100f600 ffff8800068a7818</span>
<span class="quote">&gt;&gt; Call Trace:</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff82012301&gt;] dump_stack+0x83/0xb2</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff8165872c&gt;] kasan_object_err+0x1c/0x70</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff816589c5&gt;] kasan_report_error+0x1f5/0x4e0</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff81657d92&gt;] ? kasan_slab_alloc+0x12/0x20</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff82079357&gt;] ? check_preemption_disabled+0x37/0x1e0</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff81658e4e&gt;] __asan_report_load8_noabort+0x3e/0x40</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff82079300&gt;] ? assoc_array_gc+0x1310/0x1330</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff83b84c30&gt;] ? p9_client_read+0x8f0/0x960</span>
<span class="quote">&gt;&gt;  [&lt;ffffffff83b84c30&gt;] p9_client_read+0x8f0/0x960</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; no idea how we would end up with use after here. Even if I unmapped the</span>
<span class="quote">&gt; page then the read code should be able to cope with that. This smells</span>
<span class="quote">&gt; like a p9 issue to me.</span>

This is fid-&gt;clnt dereference at the top of p9_client_read().

Ah, yes, this is the one coming from a page fault:

p9_client_read
v9fs_fid_readpage
v9fs_vfs_readpage
handle_mm_fault
__do_page_fault

the bad fid pointer is filp-&gt;private_data.

Hm, so I guess the file itself was NOT freed prematurely (as otherwise
we&#39;d probably have seen a KASAN report for the filp-&gt;private_data
dereference), but the -&gt;private_data itself was.

Maybe the whole thing is fundamentally a 9p bug and the OOM killer just
happens to trigger it.


Vegard
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 16, 2016, 2:32 p.m.</div>
<pre class="content">
On Fri 16-12-16 15:25:27, Vegard Nossum wrote:
<span class="quote">&gt; On 12/16/2016 03:00 PM, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Fri 16-12-16 14:14:17, Vegard Nossum wrote:</span>
<span class="quote">&gt; &gt; [...]</span>
<span class="quote">&gt; &gt; &gt; Out of memory: Kill process 1650 (trinity-main) score 90 or sacrifice child</span>
<span class="quote">&gt; &gt; &gt; Killed process 1724 (trinity-c14) total-vm:37280kB, anon-rss:236kB,</span>
<span class="quote">&gt; &gt; &gt; file-rss:112kB, shmem-rss:112kB</span>
<span class="quote">&gt; &gt; &gt; BUG: unable to handle kernel NULL pointer dereference at 00000000000001e8</span>
<span class="quote">&gt; &gt; &gt; IP: [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt; &gt; &gt; PGD c001067 PUD c000067</span>
<span class="quote">&gt; &gt; &gt; PMD 0</span>
<span class="quote">&gt; &gt; &gt; Oops: 0002 [#1] PREEMPT SMP KASAN</span>
<span class="quote">&gt; &gt; &gt; Dumping ftrace buffer:</span>
<span class="quote">&gt; &gt; &gt;    (ftrace buffer empty)</span>
<span class="quote">&gt; &gt; &gt; CPU: 28 PID: 1650 Comm: trinity-main Not tainted 4.9.0-rc6+ #317</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hmm, so this was the oom victim initially but we have decided to kill</span>
<span class="quote">&gt; &gt; its child 1724 instead.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; &gt; &gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt; &gt; &gt; task: ffff88000f9bc440 task.stack: ffff88000c778000</span>
<span class="quote">&gt; &gt; &gt; RIP: 0010:[&lt;ffffffff8126b1c0&gt;]  [&lt;ffffffff8126b1c0&gt;]</span>
<span class="quote">&gt; &gt; &gt; copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Could you match this to the kernel source please?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; kernel/fork.c:629 dup_mmap()</span>

Ok, so this is before the child is made visible so the oom reaper
couldn&#39;t have seen it.
<span class="quote">
&gt; it&#39;s atomic_dec(&amp;inode-&gt;i_writecount), it matches up with</span>
<span class="quote">&gt; file_inode(file) == NULL:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; (gdb) p &amp;((struct inode *)0)-&gt;i_writecount</span>
<span class="quote">&gt; $1 = (atomic_t *) 0x1e8 &lt;irq_stack_union+488&gt;</span>

is this a p9 inode?
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; &gt; Killed process 1775 (trinity-c21) total-vm:37404kB, anon-rss:232kB,</span>
<span class="quote">&gt; &gt; &gt; file-rss:420kB, shmem-rss:116kB</span>
<span class="quote">&gt; &gt; &gt; oom_reaper: reaped process 1775 (trinity-c21), now anon-rss:0kB,</span>
<span class="quote">&gt; &gt; &gt; file-rss:0kB, shmem-rss:116kB</span>
<span class="quote">&gt; &gt; &gt; ==================================================================</span>
<span class="quote">&gt; &gt; &gt; BUG: KASAN: use-after-free in p9_client_read+0x8f0/0x960 at addr</span>
<span class="quote">&gt; &gt; &gt; ffff880010284d00</span>
<span class="quote">&gt; &gt; &gt; Read of size 8 by task trinity-main/1649</span>
<span class="quote">&gt; &gt; &gt; CPU: 3 PID: 1649 Comm: trinity-main Not tainted 4.9.0+ #318</span>
<span class="quote">&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; &gt; &gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt; &gt; &gt;  ffff8800068a7770 ffffffff82012301 ffff88001100f600 ffff880010284d00</span>
<span class="quote">&gt; &gt; &gt;  ffff880010284d60 ffff880010284d00 ffff8800068a7798 ffffffff8165872c</span>
<span class="quote">&gt; &gt; &gt;  ffff8800068a7828 ffff880010284d00 ffff88001100f600 ffff8800068a7818</span>
<span class="quote">&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff82012301&gt;] dump_stack+0x83/0xb2</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8165872c&gt;] kasan_object_err+0x1c/0x70</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff816589c5&gt;] kasan_report_error+0x1f5/0x4e0</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81657d92&gt;] ? kasan_slab_alloc+0x12/0x20</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff82079357&gt;] ? check_preemption_disabled+0x37/0x1e0</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81658e4e&gt;] __asan_report_load8_noabort+0x3e/0x40</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff82079300&gt;] ? assoc_array_gc+0x1310/0x1330</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff83b84c30&gt;] ? p9_client_read+0x8f0/0x960</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff83b84c30&gt;] p9_client_read+0x8f0/0x960</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; no idea how we would end up with use after here. Even if I unmapped the</span>
<span class="quote">&gt; &gt; page then the read code should be able to cope with that. This smells</span>
<span class="quote">&gt; &gt; like a p9 issue to me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is fid-&gt;clnt dereference at the top of p9_client_read().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ah, yes, this is the one coming from a page fault:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; p9_client_read</span>
<span class="quote">&gt; v9fs_fid_readpage</span>
<span class="quote">&gt; v9fs_vfs_readpage</span>
<span class="quote">&gt; handle_mm_fault</span>
<span class="quote">&gt; __do_page_fault</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; the bad fid pointer is filp-&gt;private_data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hm, so I guess the file itself was NOT freed prematurely (as otherwise</span>
<span class="quote">&gt; we&#39;d probably have seen a KASAN report for the filp-&gt;private_data</span>
<span class="quote">&gt; dereference), but the -&gt;private_data itself was.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe the whole thing is fundamentally a 9p bug and the OOM killer just</span>
<span class="quote">&gt; happens to trigger it.</span>

It smells like that.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83701">vegard.nossum@oracle.com</a> - Dec. 16, 2016, 2:53 p.m.</div>
<pre class="content">
On 12/16/2016 03:32 PM, Michal Hocko wrote:
<span class="quote">&gt; On Fri 16-12-16 15:25:27, Vegard Nossum wrote:</span>
<span class="quote">&gt;&gt; On 12/16/2016 03:00 PM, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt;&gt; On Fri 16-12-16 14:14:17, Vegard Nossum wrote:</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; Out of memory: Kill process 1650 (trinity-main) score 90 or sacrifice child</span>
<span class="quote">&gt;&gt;&gt;&gt; Killed process 1724 (trinity-c14) total-vm:37280kB, anon-rss:236kB,</span>
<span class="quote">&gt;&gt;&gt;&gt; file-rss:112kB, shmem-rss:112kB</span>
<span class="quote">&gt;&gt;&gt;&gt; BUG: unable to handle kernel NULL pointer dereference at 00000000000001e8</span>
<span class="quote">&gt;&gt;&gt;&gt; IP: [&lt;ffffffff8126b1c0&gt;] copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt;&gt;&gt;&gt; PGD c001067 PUD c000067</span>
<span class="quote">&gt;&gt;&gt;&gt; PMD 0</span>
<span class="quote">&gt;&gt;&gt;&gt; Oops: 0002 [#1] PREEMPT SMP KASAN</span>
<span class="quote">&gt;&gt;&gt;&gt; Dumping ftrace buffer:</span>
<span class="quote">&gt;&gt;&gt;&gt;    (ftrace buffer empty)</span>
<span class="quote">&gt;&gt;&gt;&gt; CPU: 28 PID: 1650 Comm: trinity-main Not tainted 4.9.0-rc6+ #317</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Hmm, so this was the oom victim initially but we have decided to kill</span>
<span class="quote">&gt;&gt;&gt; its child 1724 instead.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt;&gt;&gt;&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt;&gt;&gt;&gt; task: ffff88000f9bc440 task.stack: ffff88000c778000</span>
<span class="quote">&gt;&gt;&gt;&gt; RIP: 0010:[&lt;ffffffff8126b1c0&gt;]  [&lt;ffffffff8126b1c0&gt;]</span>
<span class="quote">&gt;&gt;&gt;&gt; copy_process.part.41+0x2150/0x5580</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Could you match this to the kernel source please?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; kernel/fork.c:629 dup_mmap()</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ok, so this is before the child is made visible so the oom reaper</span>
<span class="quote">&gt; couldn&#39;t have seen it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; it&#39;s atomic_dec(&amp;inode-&gt;i_writecount), it matches up with</span>
<span class="quote">&gt;&gt; file_inode(file) == NULL:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; (gdb) p &amp;((struct inode *)0)-&gt;i_writecount</span>
<span class="quote">&gt;&gt; $1 = (atomic_t *) 0x1e8 &lt;irq_stack_union+488&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; is this a p9 inode?</span>

When I looked at this before it always crashed in this spot for the very
first VMA in the mm (which happens to be the exe, which is on a 9p root fs).

I added a trace_printk() to dup_mmap() to print inode-&gt;i_sb-&gt;s_type and
the last thing I see for a new crash in the same place is:

trinity--9280   28.... 136345090us : copy_process.part.41: ffffffff8485ec40
---------------------------------
CPU: 0 PID: 9302 Comm: trinity-c0 Not tainted 4.9.0-rc8+ #332
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 
Ubuntu-1.8.2-1ubuntu1 04/01/2014
task: ffff880000070000 task.stack: ffff8800099e0000
RIP: 0010:[&lt;ffffffff8126c7c9&gt;]  [&lt;ffffffff8126c7c9&gt;] 
copy_process.part.41+0x22c9/0x55b0

As you can see, the addresses match:

(gdb) p &amp;v9fs_fs_type
$1 = (struct file_system_type *) 0xffffffff8485ec40 &lt;v9fs_fs_type&gt;

So I think we can safely say that yes, it&#39;s a p9 inode.


Vegard
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index ec9f11d4f094..37b14b2e2af4 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -485,7 +485,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct </span>
*tsk, struct mm_struct *mm)
  	 */
  	mutex_lock(&amp;oom_lock);

<span class="p_del">-	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+	if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
  		ret = false;
  		goto unlock_oom;
  	}
<span class="p_chunk">@@ -496,7 +496,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct </span>
*tsk, struct mm_struct *mm)
  	 * and delayed __mmput doesn&#39;t matter that much
  	 */
  	if (!mmget_not_zero(mm)) {
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		up_write(&amp;mm-&gt;mmap_sem);</span>
  		goto unlock_oom;
  	}

<span class="p_chunk">@@ -540,7 +540,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct </span>
*tsk, struct mm_struct *mm)
  			K(get_mm_counter(mm, MM_ANONPAGES)),
  			K(get_mm_counter(mm, MM_FILEPAGES)),
  			K(get_mm_counter(mm, MM_SHMEMPAGES)));
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	up_write(&amp;mm-&gt;mmap_sem);</span>

  	/*
  	 * Drop our reference but make sure the mmput slow path is called from a

<span class="p_del">--OR--</span>

<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index ec9f11d4f094..559aec0acd21 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -508,6 +508,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct </span>
*tsk, struct mm_struct *mm)
  	 */
  	set_bit(MMF_UNSTABLE, &amp;mm-&gt;flags);

<span class="p_add">+#if 0</span>
  	tlb_gather_mmu(&amp;tlb, mm, 0, -1);
  	for (vma = mm-&gt;mmap ; vma; vma = vma-&gt;vm_next) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



