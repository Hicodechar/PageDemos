
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.9,22/39] kaiser: PCID 0 for kernel and 128 for user - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.9,22/39] kaiser: PCID 0 for kernel and 128 for user</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 8:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103195105.014459305@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10143219/mbox/"
   >mbox</a>
|
   <a href="/patch/10143219/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10143219/">/patch/10143219/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4A9BC6034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:20:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3D7F928969
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:20:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3239C29250; Wed,  3 Jan 2018 20:20:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A44A128969
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:20:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751646AbeACUOY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 15:14:24 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:34394 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752403AbeACUOU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 15:14:20 -0500
Received: from localhost (LFbn-1-12258-90.w90-92.abo.wanadoo.fr
	[90.92.71.90])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id C953A89F;
	Wed,  3 Jan 2018 20:14:19 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Hugh Dickins &lt;hughd@google.com&gt;
Subject: [PATCH 4.9 22/39] kaiser: PCID 0 for kernel and 128 for user
Date: Wed,  3 Jan 2018 21:11:36 +0100
Message-Id: &lt;20180103195105.014459305@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103195104.066528044@linuxfoundation.org&gt;
References: &lt;20180103195104.066528044@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 3, 2018, 8:11 p.m.</div>
<pre class="content">
4.9-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Hugh Dickins &lt;hughd@google.com&gt;</span>


Why was 4 chosen for kernel PCID and 6 for user PCID?
No good reason in a backport where PCIDs are only used for Kaiser.

If we continue with those, then we shall need to add Andy Lutomirski&#39;s
4.13 commit 6c690ee1039b (&quot;x86/mm: Split read_cr3() into read_cr3_pa()
and __read_cr3()&quot;), which deals with the problem of read_cr3() callers
finding stray bits in the cr3 that they expected to be page-aligned;
and for hibernation, his 4.14 commit f34902c5c6c0 (&quot;x86/hibernate/64:
Mask off CR3&#39;s PCID bits in the saved CR3&quot;).

But if 0 is used for kernel PCID, then there&#39;s no need to add in those
commits - whenever the kernel looks, it sees 0 in the lower bits; and
0 for kernel seems an obvious choice.

And I naughtily propose 128 for user PCID.  Because there&#39;s a place
in _SWITCH_TO_USER_CR3 where it takes note of the need for TLB FLUSH,
but needs to reset that to NOFLUSH for the next occasion.  Currently
it does so with a &quot;movb $(0x80)&quot; into the high byte of the per-cpu
quadword, but that will cause a machine without PCID support to crash.
Now, if %al just happened to have 0x80 in it at that point, on a
machine with PCID support, but 0 on a machine without PCID support...

(That will go badly wrong once the pgd can be at a physical address
above 2^56, but even with 5-level paging, physical goes up to 2^52.)
<span class="signed-off-by">
Signed-off-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 arch/x86/include/asm/kaiser.h        |   19 ++++++++++++-------
 arch/x86/include/asm/pgtable_types.h |    7 ++++---
 arch/x86/mm/tlb.c                    |    3 +++
 3 files changed, 19 insertions(+), 10 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/include/asm/kaiser.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kaiser.h</span>
<span class="p_chunk">@@ -29,14 +29,19 @@</span> <span class="p_context"> orq  X86_CR3_PCID_KERN_VAR, \reg</span>
 movq \reg, %cr3
 .endm
 
<span class="p_del">-.macro _SWITCH_TO_USER_CR3 reg</span>
<span class="p_add">+.macro _SWITCH_TO_USER_CR3 reg regb</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * regb must be the low byte portion of reg: because we have arranged</span>
<span class="p_add">+ * for the low byte of the user PCID to serve as the high byte of NOFLUSH</span>
<span class="p_add">+ * (0x80 for each when PCID is enabled, or 0x00 when PCID and NOFLUSH are</span>
<span class="p_add">+ * not enabled): so that the one register can update both memory and cr3.</span>
<span class="p_add">+ */</span>
 movq %cr3, \reg
 andq $(~(X86_CR3_PCID_ASID_MASK | KAISER_SHADOW_PGD_OFFSET)), \reg
 orq  PER_CPU_VAR(X86_CR3_PCID_USER_VAR), \reg
 js   9f
<span class="p_del">-// FLUSH this time, reset to NOFLUSH for next time</span>
<span class="p_del">-// But if nopcid?  Consider using 0x80 for user pcid?</span>
<span class="p_del">-movb $(0x80), PER_CPU_VAR(X86_CR3_PCID_USER_VAR+7)</span>
<span class="p_add">+/* FLUSH this time, reset to NOFLUSH for next time (if PCID enabled) */</span>
<span class="p_add">+movb \regb, PER_CPU_VAR(X86_CR3_PCID_USER_VAR+7)</span>
 9:
 movq \reg, %cr3
 .endm
<span class="p_chunk">@@ -49,7 +54,7 @@</span> <span class="p_context"> popq %rax</span>
 
 .macro SWITCH_USER_CR3
 pushq %rax
<span class="p_del">-_SWITCH_TO_USER_CR3 %rax</span>
<span class="p_add">+_SWITCH_TO_USER_CR3 %rax %al</span>
 popq %rax
 .endm
 
<span class="p_chunk">@@ -61,7 +66,7 @@</span> <span class="p_context"> movq PER_CPU_VAR(unsafe_stack_register_b</span>
 
 .macro SWITCH_USER_CR3_NO_STACK
 movq %rax, PER_CPU_VAR(unsafe_stack_register_backup)
<span class="p_del">-_SWITCH_TO_USER_CR3 %rax</span>
<span class="p_add">+_SWITCH_TO_USER_CR3 %rax %al</span>
 movq PER_CPU_VAR(unsafe_stack_register_backup), %rax
 .endm
 
<span class="p_chunk">@@ -69,7 +74,7 @@</span> <span class="p_context"> movq PER_CPU_VAR(unsafe_stack_register_b</span>
 
 .macro SWITCH_KERNEL_CR3 reg
 .endm
<span class="p_del">-.macro SWITCH_USER_CR3 reg</span>
<span class="p_add">+.macro SWITCH_USER_CR3 reg regb</span>
 .endm
 .macro SWITCH_USER_CR3_NO_STACK
 .endm
<span class="p_header">--- a/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_chunk">@@ -146,16 +146,17 @@</span> <span class="p_context"></span>
 
 /* Mask for all the PCID-related bits in CR3: */
 #define X86_CR3_PCID_MASK       (X86_CR3_PCID_NOFLUSH | X86_CR3_PCID_ASID_MASK)
<span class="p_add">+#define X86_CR3_PCID_ASID_KERN  (_AC(0x0,UL))</span>
<span class="p_add">+</span>
 #if defined(CONFIG_KAISER) &amp;&amp; defined(CONFIG_X86_64)
<span class="p_del">-#define X86_CR3_PCID_ASID_KERN  (_AC(0x4,UL))</span>
<span class="p_del">-#define X86_CR3_PCID_ASID_USER  (_AC(0x6,UL))</span>
<span class="p_add">+/* Let X86_CR3_PCID_ASID_USER be usable for the X86_CR3_PCID_NOFLUSH bit */</span>
<span class="p_add">+#define X86_CR3_PCID_ASID_USER	(_AC(0x80,UL))</span>
 
 #define X86_CR3_PCID_KERN_FLUSH		(X86_CR3_PCID_ASID_KERN)
 #define X86_CR3_PCID_USER_FLUSH		(X86_CR3_PCID_ASID_USER)
 #define X86_CR3_PCID_KERN_NOFLUSH	(X86_CR3_PCID_NOFLUSH | X86_CR3_PCID_ASID_KERN)
 #define X86_CR3_PCID_USER_NOFLUSH	(X86_CR3_PCID_NOFLUSH | X86_CR3_PCID_ASID_USER)
 #else
<span class="p_del">-#define X86_CR3_PCID_ASID_KERN  (_AC(0x0,UL))</span>
 #define X86_CR3_PCID_ASID_USER  (_AC(0x0,UL))
 /*
  * PCIDs are unsupported on 32-bit and none of these bits can be
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -50,6 +50,9 @@</span> <span class="p_context"> static void load_new_mm_cr3(pgd_t *pgdir</span>
 		 * invpcid_flush_single_context(X86_CR3_PCID_ASID_USER) could
 		 * do it here, but can only be used if X86_FEATURE_INVPCID is
 		 * available - and many machines support pcid without invpcid.
<span class="p_add">+		 *</span>
<span class="p_add">+		 * The line below is a no-op: X86_CR3_PCID_KERN_FLUSH is now 0;</span>
<span class="p_add">+		 * but keep that line in there in case something changes.</span>
 		 */
 		new_mm_cr3 |= X86_CR3_PCID_KERN_FLUSH;
 		kaiser_flush_tlb_on_return_to_user();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



