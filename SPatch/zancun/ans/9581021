
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv3,33/33] mm, x86: introduce PR_SET_MAX_VADDR and PR_GET_MAX_VADDR - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv3,33/33] mm, x86: introduce PR_SET_MAX_VADDR and PR_GET_MAX_VADDR</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 18, 2017, 9:21 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170218092133.GA17471@node.shutemov.name&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9581021/mbox/"
   >mbox</a>
|
   <a href="/patch/9581021/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9581021/">/patch/9581021/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	46047600F6 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 18 Feb 2017 09:21:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 25AA328705
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 18 Feb 2017 09:21:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 073AA28785; Sat, 18 Feb 2017 09:21:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2A5BA28705
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 18 Feb 2017 09:21:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752824AbdBRJVl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 18 Feb 2017 04:21:41 -0500
Received: from mail-wm0-f66.google.com ([74.125.82.66]:34347 &quot;EHLO
	mail-wm0-f66.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750825AbdBRJVh (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 18 Feb 2017 04:21:37 -0500
Received: by mail-wm0-f66.google.com with SMTP id c85so6138641wmi.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sat, 18 Feb 2017 01:21:36 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=shutemov-name.20150623.gappssmtp.com; s=20150623;
	h=date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=W9E0T7EFBTB87481rfrBsN1WsO0HCg6O02xzDNl8t44=;
	b=U45m1c56qquE0tjfTWf2/tvIeV3AUKR0QelQgMozCDTNOtmI/aYaEOnf0HvqmcY0ce
	8dvabalI6c35537Ke/BwHuS/NjAs+yceFUtf5+a1B3ksTvNvVfE3CXBh1bOLQgozzBP1
	NIFSsXBvxWlUa0EqSqZPsRz5zOUTOpqr1/SimmWOo2plQtl5V2858CriXg6D0EpFwLGh
	Gq8HqhnLi1DVdRfukOAtqDo3nuPGsSEbNdHc/7mXVrW+4R7Pclc+kVVxSzP1Ev2Lbkoh
	plQcsvpl4NxCLfy/izFmqzKhadkO4XniAu6opAg6VAym5J2yxHxIkri245/z3rcLGIEs
	by6g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=W9E0T7EFBTB87481rfrBsN1WsO0HCg6O02xzDNl8t44=;
	b=C5F4vtZEq57WovPUhmqNC13v9jyVmuYBhf6TdbSQ4tNEyM3k4ZAx5aFpVKbQkk1Ah7
	l9G/P4kr257mi2BmYxO+Bf0ABE+cVKXyZR3FBOXdCHA11zqJFTf/nB/OC1K1xeMFOAVP
	ByPVeigz7gmTwwvoT7uH1p3K3wi4SUOhhUkKGxnRrAE8L95shguPc1/UpBSnFS/rI4ta
	5jtk/djrzy2o3DVP5QEVbwCji5dNFqQ8TO2swq422+NtDcud+WCfV5jt7j4Hhw21zdwA
	JYsj2p2uHNPK0dPXq/LST5BOaRUvUFO7jPBFo98xXZNPCAQzA98jYlPf83NJwGT7q+do
	PVDg==
X-Gm-Message-State: AMke39ly1bNQWX4peNkpMhofAIUSUPkwizoQunJgOe77SyULq8UGZh5mZt3hT8JRfufiNg==
X-Received: by 10.28.19.78 with SMTP id 75mr8689130wmt.108.1487409695331;
	Sat, 18 Feb 2017 01:21:35 -0800 (PST)
Received: from node.shutemov.name ([178.121.234.173])
	by smtp.gmail.com with ESMTPSA id
	d42sm16215048wrd.7.2017.02.18.01.21.34
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Sat, 18 Feb 2017 01:21:34 -0800 (PST)
Received: by node.shutemov.name (Postfix, from userid 1000)
	id 32AC5640B705; Sat, 18 Feb 2017 12:21:33 +0300 (+03)
Date: Sat, 18 Feb 2017 12:21:33 +0300
From: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	the arch/x86 maintainers &lt;x86@kernel.org&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, linux-mm &lt;linux-mm@kvack.org&gt;,
	Linux Kernel Mailing List &lt;linux-kernel@vger.kernel.org&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Linux API &lt;linux-api@vger.kernel.org&gt;
Subject: Re: [PATCHv3 33/33] mm, x86: introduce PR_SET_MAX_VADDR and
	PR_GET_MAX_VADDR
Message-ID: &lt;20170218092133.GA17471@node.shutemov.name&gt;
References: &lt;20170217141328.164563-1-kirill.shutemov@linux.intel.com&gt;
	&lt;20170217141328.164563-34-kirill.shutemov@linux.intel.com&gt;
	&lt;CA+55aFwgbHxV-Ha2n1H=Z7P6bgcQ3D8aW=fr8ZrQ5OnvZ1vOYg@mail.gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;CA+55aFwgbHxV-Ha2n1H=Z7P6bgcQ3D8aW=fr8ZrQ5OnvZ1vOYg@mail.gmail.com&gt;
User-Agent: Mutt/1.5.23.1 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 18, 2017, 9:21 a.m.</div>
<pre class="content">
On Fri, Feb 17, 2017 at 12:02:13PM -0800, Linus Torvalds wrote:
<span class="quote">&gt; I also get he feeling that the whole thing is unnecessary. I&#39;m</span>
<span class="quote">&gt; wondering if we should just instead say that the whole 47 vs 56-bit</span>
<span class="quote">&gt; virtual address is _purely_ about &quot;get_unmapped_area()&quot;, and nothing</span>
<span class="quote">&gt; else.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; IOW, I&#39;m wondering if we can&#39;t just say that</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  - if the processor and kernel support 56-bit user address space, then</span>
<span class="quote">&gt; you can *always* use the whole space</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  - but by default, get_unmapped_area() will only return mappings that</span>
<span class="quote">&gt; fit in the 47 bit address space.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So if you use MAP_FIXED and give an address in the high range, it will</span>
<span class="quote">&gt; just always work, and the MM will always consider the task size to be</span>
<span class="quote">&gt; the full address space.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But for the common case where a process does no use MAP_FIXED, the</span>
<span class="quote">&gt; kernel will never give a high address by default, and you have to do</span>
<span class="quote">&gt; the process control thing to say &quot;I want those high addresses&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hmm?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In other words, I&#39;d like to at least start out trying to keep the</span>
<span class="quote">&gt; differences between the 47-bit and 56-bit models as simple and minimal</span>
<span class="quote">&gt; as possible. Not make such a big deal out of it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We already have &quot;arch_get_unmapped_area()&quot; that controls the whole</span>
<span class="quote">&gt; &quot;what will non-MAP_FIXED mmap allocations return&quot;, so I&#39;d hope that</span>
<span class="quote">&gt; the above kind of semantics could be done without *any* actual</span>
<span class="quote">&gt; TASK_SIZE changes _anywhere_ in the VM code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Comments?</span>

Okay, below is my try on implementing this.

I&#39;ve chosen to respect hint address even without MAP_FIXED, but only if
it doesn&#39;t collide with other mappings. Otherwise, fallback to look for
unmapped area within 47-bit window.

Interaction with MPX would requires more work. I&#39;m not yet sure what is the
right way to address it.

Also Dave noticed that some test-cases from ltp would break with the
approach. See for instance hugemmap03. I don&#39;t think it matter much as it
tests for negative outcome and I don&#39;t expect real world application to do
anything like this.

Test-case that I used to test the patch:

	#include &lt;stdio.h&gt;
	#include &lt;sys/mman.h&gt;

	#define SIZE (2UL &lt;&lt; 20)
	#define LOW_ADDR ((void *) (1UL &lt;&lt; 30))
	#define HIGH_ADDR ((void *) (1UL &lt;&lt; 50))

	int main(int argc, char **argv)
	{
		void *p;

		p = mmap(NULL, SIZE, PROT_READ | PROT_WRITE,
				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		printf(&quot;mmap(NULL): %p\n&quot;, p);

		p = mmap(LOW_ADDR, SIZE, PROT_READ | PROT_WRITE,
				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		printf(&quot;mmap(%p): %p\n&quot;, LOW_ADDR, p);

		p = mmap(HIGH_ADDR, SIZE, PROT_READ | PROT_WRITE,
				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		printf(&quot;mmap(%p): %p\n&quot;, HIGH_ADDR, p);

		p = mmap(HIGH_ADDR, SIZE, PROT_READ | PROT_WRITE,
				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		printf(&quot;mmap(%p) again: %p\n&quot;, HIGH_ADDR, p);

		p = mmap(HIGH_ADDR, SIZE, PROT_READ | PROT_WRITE,
				MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
		printf(&quot;mmap(%p, MAP_FIXED): %p\n&quot;, HIGH_ADDR, p);

		return 0;
	}

------------------------8&lt;---------------------------
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="p_header">index e7f155c3045e..9c6315d9aa34 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/elf.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/elf.h</span>
<span class="p_chunk">@@ -250,7 +250,7 @@</span> <span class="p_context"> extern int force_personality32;</span>
    the loader.  We need to make sure that it is out of the way of the program
    that it will &quot;exec&quot;, and that there is sufficient room for the brk.  */
 
<span class="p_del">-#define ELF_ET_DYN_BASE		(TASK_SIZE / 3 * 2)</span>
<span class="p_add">+#define ELF_ET_DYN_BASE		(DEFAULT_MAP_WINDOW / 3 * 2)</span>
 
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports.  This could be done in user space,
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index e6cfe7ba2d65..492548c87cb1 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -789,6 +789,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  */
 #define TASK_SIZE		PAGE_OFFSET
 #define TASK_SIZE_MAX		TASK_SIZE
<span class="p_add">+#define DEFAULT_MAP_WINDOW	TASK_SIZE</span>
 #define STACK_TOP		TASK_SIZE
 #define STACK_TOP_MAX		STACK_TOP
 
<span class="p_chunk">@@ -828,7 +829,9 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  * particular problem by preventing anything from being mapped
  * at the maximum canonical address.
  */
<span class="p_del">-#define TASK_SIZE_MAX	((1UL &lt;&lt; 47) - PAGE_SIZE)</span>
<span class="p_add">+#define TASK_SIZE_MAX	((1UL &lt;&lt; __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DEFAULT_MAP_WINDOW	((1UL &lt;&lt; 47) - PAGE_SIZE)</span>
 
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
<span class="p_chunk">@@ -841,7 +844,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
 #define TASK_SIZE_OF(child)	((test_tsk_thread_flag(child, TIF_ADDR32)) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
 
<span class="p_del">-#define STACK_TOP		TASK_SIZE</span>
<span class="p_add">+#define STACK_TOP		DEFAULT_MAP_WINDOW</span>
 #define STACK_TOP_MAX		TASK_SIZE_MAX
 
 #define INIT_THREAD  {						\
<span class="p_chunk">@@ -863,7 +866,7 @@</span> <span class="p_context"> extern void start_thread(struct pt_regs *regs, unsigned long new_ip,</span>
  * This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
  */
<span class="p_del">-#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 3))</span>
<span class="p_add">+#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(DEFAULT_MAP_WINDOW / 3))</span>
 
 #define KSTK_EIP(task)		(task_pt_regs(task)-&gt;ip)
 
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index a55ed63b9f91..7f2e26dca1f2 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -147,7 +147,7 @@</span> <span class="p_context"> arch_get_unmapped_area(struct file *filp, unsigned long addr,</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = begin;
<span class="p_del">-	info.high_limit = end;</span>
<span class="p_add">+	info.high_limit = min(end, DEFAULT_MAP_WINDOW);</span>
 	info.align_mask = 0;
 	info.align_offset = pgoff &lt;&lt; PAGE_SHIFT;
 	if (filp) {
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 2ae8584b44c7..e1c2ee098be0 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -82,7 +82,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *file,</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = current-&gt;mm-&gt;mmap_legacy_base;
<span class="p_del">-	info.high_limit = TASK_SIZE;</span>
<span class="p_add">+	info.high_limit = DEFAULT_MAP_WINDOW;</span>
 	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);
 	info.align_offset = 0;
 	return vm_unmapped_area(&amp;info);
<span class="p_chunk">@@ -114,7 +114,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,</span>
 		VM_BUG_ON(addr != -ENOMEM);
 		info.flags = 0;
 		info.low_limit = TASK_UNMAPPED_BASE;
<span class="p_del">-		info.high_limit = TASK_SIZE;</span>
<span class="p_add">+		info.high_limit = DEFAULT_MAP_WINDOW;</span>
 		addr = vm_unmapped_area(&amp;info);
 	}
 
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index d2dc0438d654..a29a830ad341 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -52,7 +52,7 @@</span> <span class="p_context"> static unsigned long stack_maxrandom_size(void)</span>
  * Leave an at least ~128 MB hole with possible stack randomization.
  */
 #define MIN_GAP (128*1024*1024UL + stack_maxrandom_size())
<span class="p_del">-#define MAX_GAP (TASK_SIZE/6*5)</span>
<span class="p_add">+#define MAX_GAP (DEFAULT_MAP_WINDOW/6*5)</span>
 
 static int mmap_is_legacy(void)
 {
<span class="p_chunk">@@ -90,7 +90,7 @@</span> <span class="p_context"> static unsigned long mmap_base(unsigned long rnd)</span>
 	else if (gap &gt; MAX_GAP)
 		gap = MAX_GAP;
 
<span class="p_del">-	return PAGE_ALIGN(TASK_SIZE - gap - rnd);</span>
<span class="p_add">+	return PAGE_ALIGN(DEFAULT_MAP_WINDOW - gap - rnd);</span>
 }
 
 /*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



