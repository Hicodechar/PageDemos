
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[05/10] arch/x86/platform/uv: BAU use generic function pointers - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [05/10] arch/x86/platform/uv: BAU use generic function pointers</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=148501">Andrew Banman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 20, 2016, 10:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1474410076-178329-6-git-send-email-abanman@sgi.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9342579/mbox/"
   >mbox</a>
|
   <a href="/patch/9342579/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9342579/">/patch/9342579/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AAF9560B16 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Sep 2016 22:22:03 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 98C2A29431
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Sep 2016 22:22:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8D66B29A56; Tue, 20 Sep 2016 22:22:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EEE8D299A2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Sep 2016 22:22:02 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755103AbcITWV7 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Sep 2016 18:21:59 -0400
Received: from relay1.sgi.com ([192.48.180.66]:42020 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754230AbcITWVZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Sep 2016 18:21:25 -0400
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay1.corp.sgi.com (Postfix) with ESMTP id ADD3B8F8049;
	Tue, 20 Sep 2016 15:21:22 -0700 (PDT)
Received: by stormcage.americas.sgi.com (Postfix, from userid 200151)
	id 988E6205772A1; Tue, 20 Sep 2016 17:21:21 -0500 (CDT)
From: Andrew Banman &lt;abanman@sgi.com&gt;
To: mingo@redhat.com, akpm@linux-foundation.org
Cc: tglx@linutronix.de, hpa@zytor.com, travis@sgi.com, rja@sgi.com,
	sivanich@sgi.com, x86@kernel.org, linux-kernel@vger.kernel.org,
	abanman@sgi.com
Subject: [PATCH 05/10] arch/x86/platform/uv: BAU use generic function
	pointers
Date: Tue, 20 Sep 2016 17:21:11 -0500
Message-Id: &lt;1474410076-178329-6-git-send-email-abanman@sgi.com&gt;
X-Mailer: git-send-email 1.8.5.6
In-Reply-To: &lt;1474410076-178329-1-git-send-email-abanman@sgi.com&gt;
References: &lt;1474410076-178329-1-git-send-email-abanman@sgi.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=148501">Andrew Banman</a> - Sept. 20, 2016, 10:21 p.m.</div>
<pre class="content">
Convert the use of UV version-specific functions to their abstracted
counterparts.
<span class="signed-off-by">
Signed-off-by: Andrew Banman &lt;abanman@sgi.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;travis@sgi.com&gt;</span>
<span class="acked-by">Acked-by: Dimitri Sivanich &lt;sivanich@sgi.com&gt;</span>
---
 arch/x86/platform/uv/tlb_uv.c | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/uv/tlb_uv.c b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">index 045da97..bfeb382 100644</span>
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -228,7 +228,7 @@</span> <span class="p_context"> static void reply_to_message(struct msg_desc *mdp, struct bau_control *bcp,</span>
 	msg = mdp-&gt;msg;
 	if (!msg-&gt;canceled &amp;&amp; do_acknowledge) {
 		dw = (msg-&gt;swack_vec &lt;&lt; UV_SW_ACK_NPENDING) | msg-&gt;swack_vec;
<span class="p_del">-		write_mmr_sw_ack(dw);</span>
<span class="p_add">+		ops.write_l_sw_ack(dw);</span>
 	}
 	msg-&gt;replied_to = 1;
 	msg-&gt;swack_vec = 0;
<span class="p_chunk">@@ -264,7 +264,7 @@</span> <span class="p_context"> static void bau_process_retry_msg(struct msg_desc *mdp,</span>
 			msg-&gt;swack_vec) == 0) &amp;&amp;
 		    (msg2-&gt;sending_cpu == msg-&gt;sending_cpu) &amp;&amp;
 		    (msg2-&gt;msg_type != MSG_NOOP)) {
<span class="p_del">-			mmr = read_mmr_sw_ack();</span>
<span class="p_add">+			mmr = ops.read_l_sw_ack();</span>
 			msg_res = msg2-&gt;swack_vec;
 			/*
 			 * This is a message retry; clear the resources held
<span class="p_chunk">@@ -282,7 +282,7 @@</span> <span class="p_context"> static void bau_process_retry_msg(struct msg_desc *mdp,</span>
 				stat-&gt;d_canceled++;
 				cancel_count++;
 				mr = (msg_res &lt;&lt; UV_SW_ACK_NPENDING) | msg_res;
<span class="p_del">-				write_mmr_sw_ack(mr);</span>
<span class="p_add">+				ops.write_l_sw_ack(mr);</span>
 			}
 		}
 	}
<span class="p_chunk">@@ -415,12 +415,12 @@</span> <span class="p_context"> static void do_reset(void *ptr)</span>
 			/*
 			 * only reset the resource if it is still pending
 			 */
<span class="p_del">-			mmr = read_mmr_sw_ack();</span>
<span class="p_add">+			mmr = ops.read_l_sw_ack();</span>
 			msg_res = msg-&gt;swack_vec;
 			mr = (msg_res &lt;&lt; UV_SW_ACK_NPENDING) | msg_res;
 			if (mmr &amp; msg_res) {
 				stat-&gt;d_rcanceled++;
<span class="p_del">-				write_mmr_sw_ack(mr);</span>
<span class="p_add">+				ops.write_l_sw_ack(mr);</span>
 			}
 		}
 	}
<span class="p_chunk">@@ -1214,7 +1214,7 @@</span> <span class="p_context"> void process_uv2_message(struct msg_desc *mdp, struct bau_control *bcp)</span>
 	struct bau_pq_entry *msg = mdp-&gt;msg;
 	struct bau_pq_entry *other_msg;
 
<span class="p_del">-	mmr_image = read_mmr_sw_ack();</span>
<span class="p_add">+	mmr_image = ops.read_l_sw_ack();</span>
 	swack_vec = msg-&gt;swack_vec;
 
 	if ((swack_vec &amp; mmr_image) == 0) {
<span class="p_chunk">@@ -1443,7 +1443,7 @@</span> <span class="p_context"> static int ptc_seq_show(struct seq_file *file, void *data)</span>
 		/* destination side statistics */
 		seq_printf(file,
 			&quot;%lx %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\n&quot;,
<span class="p_del">-			   read_gmmr_sw_ack(uv_cpu_to_pnode(cpu)),</span>
<span class="p_add">+			   ops.read_g_sw_ack(uv_cpu_to_pnode(cpu)),</span>
 			   stat-&gt;d_requestee, cycles_2_us(stat-&gt;d_time),
 			   stat-&gt;d_alltlb, stat-&gt;d_onetlb, stat-&gt;d_multmsg,
 			   stat-&gt;d_nomsg, stat-&gt;d_retries, stat-&gt;d_canceled,
<span class="p_chunk">@@ -1737,7 +1737,7 @@</span> <span class="p_context"> static void activation_descriptor_init(int node, int pnode, int base_pnode)</span>
 
 	gpa = uv_gpa(bau_desc);
 	n = uv_gpa_to_gnode(gpa);
<span class="p_del">-	m = uv_gpa_to_offset(gpa);</span>
<span class="p_add">+	m = ops.bau_gpa_to_offset(gpa);</span>
 	if (is_uv1_hub())
 		uv1 = 1;
 
<span class="p_chunk">@@ -1824,16 +1824,16 @@</span> <span class="p_context"> static void pq_init(int node, int pnode)</span>
 		bcp-&gt;queue_last		= pqp + (DEST_Q_SIZE - 1);
 	}
 
<span class="p_del">-	first = uv_gpa_to_offset(uv_gpa(pqp));</span>
<span class="p_del">-	last = uv_gpa_to_offset(uv_gpa(pqp + (DEST_Q_SIZE - 1)));</span>
<span class="p_add">+	first = ops.bau_gpa_to_offset(uv_gpa(pqp));</span>
<span class="p_add">+	last = ops.bau_gpa_to_offset(uv_gpa(pqp + (DEST_Q_SIZE - 1)));</span>
 	tail = first;
 	gnode = uv_gpa_to_gnode(uv_gpa(pqp));
 	first = (gnode &lt;&lt; UV_PAYLOADQ_GNODE_SHIFT) | tail;
 
<span class="p_del">-	write_mmr_payload_first(pnode, first);</span>
<span class="p_del">-	write_mmr_payload_last(pnode, last);</span>
 	write_mmr_payload_tail(pnode, tail);
<span class="p_del">-	write_gmmr_sw_ack(pnode, 0xffffUL);</span>
<span class="p_add">+	ops.write_payload_first(pnode, first);</span>
<span class="p_add">+	ops.write_payload_last(pnode, last);</span>
<span class="p_add">+	ops.write_g_sw_ack(pnode, 0xffffUL);</span>
 
 	/* in effect, all msg_type&#39;s are set to MSG_NOOP */
 	memset(pqp, 0, sizeof(struct bau_pq_entry) * DEST_Q_SIZE);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



