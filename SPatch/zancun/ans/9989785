
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[13/14] hugetlbfs: Convert to fs_context [ver #6] - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [13/14] hugetlbfs: Convert to fs_context [ver #6]</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=50">David Howells</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 6, 2017, 3:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;150730505065.6182.4712100306323295989.stgit@warthog.procyon.org.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9989785/mbox/"
   >mbox</a>
|
   <a href="/patch/9989785/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9989785/">/patch/9989785/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	89F4A6020F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Oct 2017 15:51:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7507928DFE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Oct 2017 15:51:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 69B3928E08; Fri,  6 Oct 2017 15:51:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8B46D28E04
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Oct 2017 15:50:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752832AbdJFPu5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 6 Oct 2017 11:50:57 -0400
Received: from mx1.redhat.com ([209.132.183.28]:35356 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751487AbdJFPux (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 6 Oct 2017 11:50:53 -0400
Received: from smtp.corp.redhat.com
	(int-mx06.intmail.prod.int.phx2.redhat.com [10.5.11.16])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id E549B8210E;
	Fri,  6 Oct 2017 15:50:52 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com E549B8210E
Authentication-Results: ext-mx02.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx02.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=dhowells@redhat.com
Received: from warthog.procyon.org.uk (ovpn-120-81.rdu2.redhat.com
	[10.10.120.81])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 624336684A;
	Fri,  6 Oct 2017 15:50:51 +0000 (UTC)
Organization: Red Hat UK Ltd. Registered Address: Red Hat UK Ltd, Amberley
	Place, 107-111 Peascod Street, Windsor, Berkshire, SI4 1TE, United
	Kingdom.
	Registered in England and Wales under Company Registration No.
	3798903
Subject: [PATCH 13/14] hugetlbfs: Convert to fs_context [ver #6]
From: David Howells &lt;dhowells@redhat.com&gt;
To: viro@ZenIV.linux.org.uk
Cc: linux-fsdevel@vger.kernel.org, mszeredi@redhat.com,
	linux-nfs@vger.kernel.org, linux-kernel@vger.kernel.org,
	jlayton@redhat.com
Date: Fri, 06 Oct 2017 16:50:50 +0100
Message-ID: &lt;150730505065.6182.4712100306323295989.stgit@warthog.procyon.org.uk&gt;
In-Reply-To: &lt;150730494491.6182.5139368907374172391.stgit@warthog.procyon.org.uk&gt;
References: &lt;150730494491.6182.5139368907374172391.stgit@warthog.procyon.org.uk&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.16
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.26]);
	Fri, 06 Oct 2017 15:50:53 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=50">David Howells</a> - Oct. 6, 2017, 3:50 p.m.</div>
<pre class="content">
Convert the hugetlbfs to use the fs_context during mount.
<span class="signed-off-by">
Signed-off-by: David Howells &lt;dhowells@redhat.com&gt;</span>
---

 fs/hugetlbfs/inode.c |  327 ++++++++++++++++++++++++++++----------------------
 1 file changed, 184 insertions(+), 143 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 59073e9f01a4..56bb851f0641 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -45,11 +45,18 @@</span> <span class="p_context"> const struct file_operations hugetlbfs_file_operations;</span>
 static const struct inode_operations hugetlbfs_dir_inode_operations;
 static const struct inode_operations hugetlbfs_inode_operations;
 
<span class="p_del">-struct hugetlbfs_config {</span>
<span class="p_add">+enum hugetlbfs_size_type { NO_SIZE, SIZE_STD, SIZE_PERCENT };</span>
<span class="p_add">+</span>
<span class="p_add">+struct hugetlbfs_fs_context {</span>
<span class="p_add">+	struct fs_context	fc;</span>
 	struct hstate		*hstate;
<span class="p_add">+	unsigned long long	max_size_opt;</span>
<span class="p_add">+	unsigned long long	min_size_opt;</span>
 	long			max_hpages;
 	long			nr_inodes;
 	long			min_hpages;
<span class="p_add">+	enum hugetlbfs_size_type max_val_type;</span>
<span class="p_add">+	enum hugetlbfs_size_type min_val_type;</span>
 	kuid_t			uid;
 	kgid_t			gid;
 	umode_t			mode;
<span class="p_chunk">@@ -682,16 +689,16 @@</span> <span class="p_context"> static int hugetlbfs_setattr(struct dentry *dentry, struct iattr *attr)</span>
 }
 
 static struct inode *hugetlbfs_get_root(struct super_block *sb,
<span class="p_del">-					struct hugetlbfs_config *config)</span>
<span class="p_add">+					struct hugetlbfs_fs_context *ctx)</span>
 {
 	struct inode *inode;
 
 	inode = new_inode(sb);
 	if (inode) {
 		inode-&gt;i_ino = get_next_ino();
<span class="p_del">-		inode-&gt;i_mode = S_IFDIR | config-&gt;mode;</span>
<span class="p_del">-		inode-&gt;i_uid = config-&gt;uid;</span>
<span class="p_del">-		inode-&gt;i_gid = config-&gt;gid;</span>
<span class="p_add">+		inode-&gt;i_mode = S_IFDIR | ctx-&gt;mode;</span>
<span class="p_add">+		inode-&gt;i_uid = ctx-&gt;uid;</span>
<span class="p_add">+		inode-&gt;i_gid = ctx-&gt;gid;</span>
 		inode-&gt;i_atime = inode-&gt;i_mtime = inode-&gt;i_ctime = current_time(inode);
 		inode-&gt;i_op = &amp;hugetlbfs_dir_inode_operations;
 		inode-&gt;i_fop = &amp;simple_dir_operations;
<span class="p_chunk">@@ -1049,8 +1056,6 @@</span> <span class="p_context"> static const struct super_operations hugetlbfs_ops = {</span>
 	.show_options	= hugetlbfs_show_options,
 };
 
<span class="p_del">-enum hugetlbfs_size_type { NO_SIZE, SIZE_STD, SIZE_PERCENT };</span>
<span class="p_del">-</span>
 /*
  * Convert size option passed from command line to number of huge pages
  * in the pool specified by hstate.  Size option could be in bytes
<span class="p_chunk">@@ -1073,170 +1078,156 @@</span> <span class="p_context"> hugetlbfs_size_to_hpages(struct hstate *h, unsigned long long size_opt,</span>
 	return size_opt;
 }
 
<span class="p_del">-static int</span>
<span class="p_del">-hugetlbfs_parse_options(char *options, struct hugetlbfs_config *pconfig)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Parse one mount option.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int hugetlbfs_parse_option(struct fs_context *fc, char *p)</span>
 {
<span class="p_del">-	char *p, *rest;</span>
<span class="p_add">+	struct hugetlbfs_fs_context *ctx = container_of(fc, struct hugetlbfs_fs_context, fc);</span>
<span class="p_add">+	char *rest;</span>
<span class="p_add">+	unsigned long ps;</span>
 	substring_t args[MAX_OPT_ARGS];
<span class="p_del">-	int option;</span>
<span class="p_del">-	unsigned long long max_size_opt = 0, min_size_opt = 0;</span>
<span class="p_del">-	enum hugetlbfs_size_type max_val_type = NO_SIZE, min_val_type = NO_SIZE;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!options)</span>
<span class="p_add">+	int token, option;</span>
<span class="p_add">+</span>
<span class="p_add">+	token = match_token(p, tokens, args);</span>
<span class="p_add">+	switch (token) {</span>
<span class="p_add">+	case Opt_uid:</span>
<span class="p_add">+		if (match_int(&amp;args[0], &amp;option))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;uid = make_kuid(current_user_ns(), option);</span>
<span class="p_add">+		if (!uid_valid(ctx-&gt;uid))</span>
<span class="p_add">+			goto bad_val;</span>
 		return 0;
 
<span class="p_del">-	while ((p = strsep(&amp;options, &quot;,&quot;)) != NULL) {</span>
<span class="p_del">-		int token;</span>
<span class="p_del">-		if (!*p)</span>
<span class="p_del">-			continue;</span>
<span class="p_add">+	case Opt_gid:</span>
<span class="p_add">+		if (match_int(&amp;args[0], &amp;option))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;gid = make_kgid(current_user_ns(), option);</span>
<span class="p_add">+		if (!gid_valid(ctx-&gt;gid))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		token = match_token(p, tokens, args);</span>
<span class="p_del">-		switch (token) {</span>
<span class="p_del">-		case Opt_uid:</span>
<span class="p_del">-			if (match_int(&amp;args[0], &amp;option))</span>
<span class="p_del">- 				goto bad_val;</span>
<span class="p_del">-			pconfig-&gt;uid = make_kuid(current_user_ns(), option);</span>
<span class="p_del">-			if (!uid_valid(pconfig-&gt;uid))</span>
<span class="p_del">-				goto bad_val;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	case Opt_mode:</span>
<span class="p_add">+		if (match_octal(&amp;args[0], &amp;option))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;mode = option &amp; 01777U;</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		case Opt_gid:</span>
<span class="p_del">-			if (match_int(&amp;args[0], &amp;option))</span>
<span class="p_del">- 				goto bad_val;</span>
<span class="p_del">-			pconfig-&gt;gid = make_kgid(current_user_ns(), option);</span>
<span class="p_del">-			if (!gid_valid(pconfig-&gt;gid))</span>
<span class="p_del">-				goto bad_val;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	case Opt_size:</span>
<span class="p_add">+		/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_add">+		if (!isdigit(*args[0].from))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;max_size_opt = memparse(args[0].from, &amp;rest);</span>
<span class="p_add">+		ctx-&gt;max_val_type = SIZE_STD;</span>
<span class="p_add">+		if (*rest == &#39;%&#39;)</span>
<span class="p_add">+			ctx-&gt;max_val_type = SIZE_PERCENT;</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		case Opt_mode:</span>
<span class="p_del">-			if (match_octal(&amp;args[0], &amp;option))</span>
<span class="p_del">- 				goto bad_val;</span>
<span class="p_del">-			pconfig-&gt;mode = option &amp; 01777U;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	case Opt_nr_inodes:</span>
<span class="p_add">+		/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_add">+		if (!isdigit(*args[0].from))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;nr_inodes = memparse(args[0].from, &amp;rest);</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		case Opt_size: {</span>
<span class="p_del">-			/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_del">-			if (!isdigit(*args[0].from))</span>
<span class="p_del">-				goto bad_val;</span>
<span class="p_del">-			max_size_opt = memparse(args[0].from, &amp;rest);</span>
<span class="p_del">-			max_val_type = SIZE_STD;</span>
<span class="p_del">-			if (*rest == &#39;%&#39;)</span>
<span class="p_del">-				max_val_type = SIZE_PERCENT;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	case Opt_pagesize:</span>
<span class="p_add">+		ps = memparse(args[0].from, &amp;rest);</span>
<span class="p_add">+		ctx-&gt;hstate = size_to_hstate(ps);</span>
<span class="p_add">+		if (!ctx-&gt;hstate) {</span>
<span class="p_add">+			pr_err(&quot;Unsupported page size %lu MB\n&quot;, ps &gt;&gt; 20);</span>
<span class="p_add">+			return -EINVAL;</span>
 		}
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		case Opt_nr_inodes:</span>
<span class="p_del">-			/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_del">-			if (!isdigit(*args[0].from))</span>
<span class="p_del">-				goto bad_val;</span>
<span class="p_del">-			pconfig-&gt;nr_inodes = memparse(args[0].from, &amp;rest);</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	case Opt_min_size:</span>
<span class="p_add">+		/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_add">+		if (!isdigit(*args[0].from))</span>
<span class="p_add">+			goto bad_val;</span>
<span class="p_add">+		ctx-&gt;min_size_opt = memparse(args[0].from, &amp;rest);</span>
<span class="p_add">+		ctx-&gt;min_val_type = SIZE_STD;</span>
<span class="p_add">+		if (*rest == &#39;%&#39;)</span>
<span class="p_add">+			ctx-&gt;min_val_type = SIZE_PERCENT;</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-		case Opt_pagesize: {</span>
<span class="p_del">-			unsigned long ps;</span>
<span class="p_del">-			ps = memparse(args[0].from, &amp;rest);</span>
<span class="p_del">-			pconfig-&gt;hstate = size_to_hstate(ps);</span>
<span class="p_del">-			if (!pconfig-&gt;hstate) {</span>
<span class="p_del">-				pr_err(&quot;Unsupported page size %lu MB\n&quot;,</span>
<span class="p_del">-					ps &gt;&gt; 20);</span>
<span class="p_del">-				return -EINVAL;</span>
<span class="p_del">-			}</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		}</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		pr_err(&quot;Bad mount option: \&quot;%s\&quot;\n&quot;, p);</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-		case Opt_min_size: {</span>
<span class="p_del">-			/* memparse() will accept a K/M/G without a digit */</span>
<span class="p_del">-			if (!isdigit(*args[0].from))</span>
<span class="p_del">-				goto bad_val;</span>
<span class="p_del">-			min_size_opt = memparse(args[0].from, &amp;rest);</span>
<span class="p_del">-			min_val_type = SIZE_STD;</span>
<span class="p_del">-			if (*rest == &#39;%&#39;)</span>
<span class="p_del">-				min_val_type = SIZE_PERCENT;</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		}</span>
<span class="p_add">+bad_val:</span>
<span class="p_add">+	pr_err(&quot;Bad value &#39;%s&#39; for mount option &#39;%s&#39;\n&quot;, args[0].from, p);</span>
<span class="p_add">+	return -EINVAL;</span>
<span class="p_add">+}</span>
 
<span class="p_del">-		default:</span>
<span class="p_del">-			pr_err(&quot;Bad mount option: \&quot;%s\&quot;\n&quot;, p);</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Validate the parsed options.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int hugetlbfs_validate(struct fs_context *fc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hugetlbfs_fs_context *ctx = container_of(fc, struct hugetlbfs_fs_context, fc);</span>
 
 	/*
 	 * Use huge page pool size (in hstate) to convert the size
 	 * options to number of huge pages.  If NO_SIZE, -1 is returned.
 	 */
<span class="p_del">-	pconfig-&gt;max_hpages = hugetlbfs_size_to_hpages(pconfig-&gt;hstate,</span>
<span class="p_del">-						max_size_opt, max_val_type);</span>
<span class="p_del">-	pconfig-&gt;min_hpages = hugetlbfs_size_to_hpages(pconfig-&gt;hstate,</span>
<span class="p_del">-						min_size_opt, min_val_type);</span>
<span class="p_add">+	ctx-&gt;max_hpages = hugetlbfs_size_to_hpages(ctx-&gt;hstate,</span>
<span class="p_add">+						   ctx-&gt;max_size_opt,</span>
<span class="p_add">+						   ctx-&gt;max_val_type);</span>
<span class="p_add">+	ctx-&gt;min_hpages = hugetlbfs_size_to_hpages(ctx-&gt;hstate,</span>
<span class="p_add">+						   ctx-&gt;min_size_opt,</span>
<span class="p_add">+						   ctx-&gt;min_val_type);</span>
 
 	/*
 	 * If max_size was specified, then min_size must be smaller
 	 */
<span class="p_del">-	if (max_val_type &gt; NO_SIZE &amp;&amp;</span>
<span class="p_del">-	    pconfig-&gt;min_hpages &gt; pconfig-&gt;max_hpages) {</span>
<span class="p_del">-		pr_err(&quot;minimum size can not be greater than maximum size\n&quot;);</span>
<span class="p_add">+	if (ctx-&gt;max_val_type &gt; NO_SIZE &amp;&amp;</span>
<span class="p_add">+	    ctx-&gt;min_hpages &gt; ctx-&gt;max_hpages) {</span>
<span class="p_add">+		pr_err(&quot;Minimum size can not be greater than maximum size\n&quot;);</span>
 		return -EINVAL;
 	}
 
 	return 0;
<span class="p_del">-</span>
<span class="p_del">-bad_val:</span>
<span class="p_del">-	pr_err(&quot;Bad value &#39;%s&#39; for mount option &#39;%s&#39;\n&quot;, args[0].from, p);</span>
<span class="p_del">- 	return -EINVAL;</span>
 }
 
 static int
<span class="p_del">-hugetlbfs_fill_super(struct super_block *sb, void *data, int silent)</span>
<span class="p_add">+hugetlbfs_fill_super(struct super_block *sb, struct fs_context *fc)</span>
 {
<span class="p_del">-	int ret;</span>
<span class="p_del">-	struct hugetlbfs_config config;</span>
<span class="p_add">+	struct hugetlbfs_fs_context *ctx =</span>
<span class="p_add">+		container_of(fc, struct hugetlbfs_fs_context, fc);</span>
 	struct hugetlbfs_sb_info *sbinfo;
 
<span class="p_del">-	config.max_hpages = -1; /* No limit on size by default */</span>
<span class="p_del">-	config.nr_inodes = -1; /* No limit on number of inodes by default */</span>
<span class="p_del">-	config.uid = current_fsuid();</span>
<span class="p_del">-	config.gid = current_fsgid();</span>
<span class="p_del">-	config.mode = 0755;</span>
<span class="p_del">-	config.hstate = &amp;default_hstate;</span>
<span class="p_del">-	config.min_hpages = -1; /* No default minimum size */</span>
<span class="p_del">-	ret = hugetlbfs_parse_options(data, &amp;config);</span>
<span class="p_del">-	if (ret)</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-</span>
 	sbinfo = kmalloc(sizeof(struct hugetlbfs_sb_info), GFP_KERNEL);
 	if (!sbinfo)
 		return -ENOMEM;
 	sb-&gt;s_fs_info = sbinfo;
<span class="p_del">-	sbinfo-&gt;hstate = config.hstate;</span>
 	spin_lock_init(&amp;sbinfo-&gt;stat_lock);
<span class="p_del">-	sbinfo-&gt;max_inodes = config.nr_inodes;</span>
<span class="p_del">-	sbinfo-&gt;free_inodes = config.nr_inodes;</span>
<span class="p_del">-	sbinfo-&gt;spool = NULL;</span>
<span class="p_del">-	sbinfo-&gt;uid = config.uid;</span>
<span class="p_del">-	sbinfo-&gt;gid = config.gid;</span>
<span class="p_del">-	sbinfo-&gt;mode = config.mode;</span>
<span class="p_add">+	sbinfo-&gt;hstate		= ctx-&gt;hstate;</span>
<span class="p_add">+	sbinfo-&gt;max_inodes	= ctx-&gt;nr_inodes;</span>
<span class="p_add">+	sbinfo-&gt;free_inodes	= ctx-&gt;nr_inodes;</span>
<span class="p_add">+	sbinfo-&gt;spool		= NULL;</span>
<span class="p_add">+	sbinfo-&gt;uid		= ctx-&gt;uid;</span>
<span class="p_add">+	sbinfo-&gt;gid		= ctx-&gt;gid;</span>
<span class="p_add">+	sbinfo-&gt;mode		= ctx-&gt;mode;</span>
 
 	/*
 	 * Allocate and initialize subpool if maximum or minimum size is
 	 * specified.  Any needed reservations (for minimim size) are taken
 	 * taken when the subpool is created.
 	 */
<span class="p_del">-	if (config.max_hpages != -1 || config.min_hpages != -1) {</span>
<span class="p_del">-		sbinfo-&gt;spool = hugepage_new_subpool(config.hstate,</span>
<span class="p_del">-							config.max_hpages,</span>
<span class="p_del">-							config.min_hpages);</span>
<span class="p_add">+	if (ctx-&gt;max_hpages != -1 || ctx-&gt;min_hpages != -1) {</span>
<span class="p_add">+		sbinfo-&gt;spool = hugepage_new_subpool(ctx-&gt;hstate,</span>
<span class="p_add">+						     ctx-&gt;max_hpages,</span>
<span class="p_add">+						     ctx-&gt;min_hpages);</span>
 		if (!sbinfo-&gt;spool)
 			goto out_free;
 	}
 	sb-&gt;s_maxbytes = MAX_LFS_FILESIZE;
<span class="p_del">-	sb-&gt;s_blocksize = huge_page_size(config.hstate);</span>
<span class="p_del">-	sb-&gt;s_blocksize_bits = huge_page_shift(config.hstate);</span>
<span class="p_add">+	sb-&gt;s_blocksize = huge_page_size(ctx-&gt;hstate);</span>
<span class="p_add">+	sb-&gt;s_blocksize_bits = huge_page_shift(ctx-&gt;hstate);</span>
 	sb-&gt;s_magic = HUGETLBFS_MAGIC;
 	sb-&gt;s_op = &amp;hugetlbfs_ops;
 	sb-&gt;s_time_gran = 1;
<span class="p_del">-	sb-&gt;s_root = d_make_root(hugetlbfs_get_root(sb, &amp;config));</span>
<span class="p_add">+	sb-&gt;s_root = d_make_root(hugetlbfs_get_root(sb, ctx));</span>
 	if (!sb-&gt;s_root)
 		goto out_free;
 	return 0;
<span class="p_chunk">@@ -1246,16 +1237,39 @@</span> <span class="p_context"> hugetlbfs_fill_super(struct super_block *sb, void *data, int silent)</span>
 	return -ENOMEM;
 }
 
<span class="p_del">-static struct dentry *hugetlbfs_mount(struct file_system_type *fs_type,</span>
<span class="p_del">-	int flags, const char *dev_name, void *data)</span>
<span class="p_add">+static int hugetlbfs_get_tree(struct fs_context *fc)</span>
 {
<span class="p_del">-	return mount_nodev(fs_type, flags, data, hugetlbfs_fill_super);</span>
<span class="p_add">+	return vfs_get_super(fc, vfs_get_independent_super, hugetlbfs_fill_super);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct fs_context_operations hugetlbfs_fs_context_ops = {</span>
<span class="p_add">+	.parse_option	= hugetlbfs_parse_option,</span>
<span class="p_add">+	.validate	= hugetlbfs_validate,</span>
<span class="p_add">+	.get_tree	= hugetlbfs_get_tree,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int hugetlbfs_init_fs_context(struct fs_context *fc, struct super_block *src_sb)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hugetlbfs_fs_context *ctx = container_of(fc, struct hugetlbfs_fs_context, fc);</span>
<span class="p_add">+</span>
<span class="p_add">+	ctx-&gt;max_hpages	= -1; /* No limit on size by default */</span>
<span class="p_add">+	ctx-&gt;nr_inodes	= -1; /* No limit on number of inodes by default */</span>
<span class="p_add">+	ctx-&gt;uid	= current_fsuid();</span>
<span class="p_add">+	ctx-&gt;gid	= current_fsgid();</span>
<span class="p_add">+	ctx-&gt;mode	= 0755;</span>
<span class="p_add">+	ctx-&gt;hstate	= &amp;default_hstate;</span>
<span class="p_add">+	ctx-&gt;min_hpages	= -1; /* No default minimum size */</span>
<span class="p_add">+	ctx-&gt;max_val_type = NO_SIZE;</span>
<span class="p_add">+	ctx-&gt;min_val_type = NO_SIZE;</span>
<span class="p_add">+	ctx-&gt;fc.ops	= &amp;hugetlbfs_fs_context_ops;</span>
<span class="p_add">+	return 0;</span>
 }
 
 static struct file_system_type hugetlbfs_fs_type = {
<span class="p_del">-	.name		= &quot;hugetlbfs&quot;,</span>
<span class="p_del">-	.mount		= hugetlbfs_mount,</span>
<span class="p_del">-	.kill_sb	= kill_litter_super,</span>
<span class="p_add">+	.name			= &quot;hugetlbfs&quot;,</span>
<span class="p_add">+	.fs_context_size	= sizeof(struct hugetlbfs_fs_context),</span>
<span class="p_add">+	.init_fs_context	= hugetlbfs_init_fs_context,</span>
<span class="p_add">+	.kill_sb		= kill_litter_super,</span>
 };
 
 static struct vfsmount *hugetlbfs_vfsmount[HUGE_MAX_HSTATE];
<span class="p_chunk">@@ -1362,8 +1376,47 @@</span> <span class="p_context"> struct file *hugetlb_file_setup(const char *name, size_t size,</span>
 	return file;
 }
 
<span class="p_add">+static struct vfsmount *__init mount_one_hugetlbfs(struct hstate *h)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hugetlbfs_fs_context *ctx;</span>
<span class="p_add">+	struct fs_context *fc;</span>
<span class="p_add">+	struct vfsmount *mnt;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	fc = vfs_new_fs_context(&amp;hugetlbfs_fs_type, NULL, 0,</span>
<span class="p_add">+				FS_CONTEXT_FOR_KERNEL_MOUNT);</span>
<span class="p_add">+	if (IS_ERR(fc)) {</span>
<span class="p_add">+		ret = PTR_ERR(fc);</span>
<span class="p_add">+		goto err;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ctx = container_of(fc, struct hugetlbfs_fs_context, fc);</span>
<span class="p_add">+	ctx-&gt;hstate = h;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = vfs_get_tree(fc);</span>
<span class="p_add">+	if (ret &lt; 0)</span>
<span class="p_add">+		goto err_fc;</span>
<span class="p_add">+</span>
<span class="p_add">+	mnt = vfs_create_mount(fc);</span>
<span class="p_add">+	if (IS_ERR(mnt)) {</span>
<span class="p_add">+		ret = PTR_ERR(mnt);</span>
<span class="p_add">+		goto err_fc;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	put_fs_context(fc);</span>
<span class="p_add">+	return mnt;</span>
<span class="p_add">+</span>
<span class="p_add">+err_fc:</span>
<span class="p_add">+	put_fs_context(fc);</span>
<span class="p_add">+err:</span>
<span class="p_add">+	pr_err(&quot;Cannot mount internal hugetlbfs for page size %uK&quot;,</span>
<span class="p_add">+	       1U &lt;&lt; (h-&gt;order + PAGE_SHIFT - 10));</span>
<span class="p_add">+	return ERR_PTR(ret);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int __init init_hugetlbfs_fs(void)
 {
<span class="p_add">+	struct vfsmount *mnt;</span>
 	struct hstate *h;
 	int error;
 	int i;
<span class="p_chunk">@@ -1386,24 +1439,12 @@</span> <span class="p_context"> static int __init init_hugetlbfs_fs(void)</span>
 
 	i = 0;
 	for_each_hstate(h) {
<span class="p_del">-		char buf[50];</span>
<span class="p_del">-		unsigned ps_kb = 1U &lt;&lt; (h-&gt;order + PAGE_SHIFT - 10);</span>
<span class="p_del">-</span>
<span class="p_del">-		snprintf(buf, sizeof(buf), &quot;pagesize=%uK&quot;, ps_kb);</span>
<span class="p_del">-		hugetlbfs_vfsmount[i] = kern_mount_data(&amp;hugetlbfs_fs_type,</span>
<span class="p_del">-							buf);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (IS_ERR(hugetlbfs_vfsmount[i])) {</span>
<span class="p_del">-			pr_err(&quot;Cannot mount internal hugetlbfs for &quot;</span>
<span class="p_del">-				&quot;page size %uK&quot;, ps_kb);</span>
<span class="p_del">-			error = PTR_ERR(hugetlbfs_vfsmount[i]);</span>
<span class="p_del">-			hugetlbfs_vfsmount[i] = NULL;</span>
<span class="p_del">-		}</span>
<span class="p_add">+		mnt = mount_one_hugetlbfs(h);</span>
<span class="p_add">+		if (IS_ERR(mnt) &amp;&amp; i == 0)</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		hugetlbfs_vfsmount[i] = mnt;</span>
 		i++;
 	}
<span class="p_del">-	/* Non default hstates are optional */</span>
<span class="p_del">-	if (!IS_ERR_OR_NULL(hugetlbfs_vfsmount[default_hstate_idx]))</span>
<span class="p_del">-		return 0;</span>
 
  out:
 	kmem_cache_destroy(hugetlbfs_inode_cachep);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



