
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,15/20] iommu/amd: AMD IOMMU support for memory encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,15/20] iommu/amd: AMD IOMMU support for memory encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 22, 2016, 10:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160822223820.29880.17752.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9294533/mbox/"
   >mbox</a>
|
   <a href="/patch/9294533/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9294533/">/patch/9294533/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8F366608A7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:55:08 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7DBDE286DA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:55:08 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 718E328715; Mon, 22 Aug 2016 22:55:08 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7C7BF286DA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:55:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932864AbcHVWy0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 Aug 2016 18:54:26 -0400
Received: from mail-by2nam03on0056.outbound.protection.outlook.com
	([104.47.42.56]:45305
	&quot;EHLO NAM03-BY2-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S932828AbcHVWyV (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 Aug 2016 18:54:21 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=0E+5b32aRf+3b6hdl894j7LGtPEnKzw0lDcXRczpZSc=;
	b=mNZGtWC72QGzSBNyt2k6DRFcgXND7Hhsr6UFiTmVQ3rHDDbk/oH94KeoXQLrzXy4rO4xIYG2qnJ8EUd1Soq+tfkX+GDkYXDx4Z45S5ADGKxB08UUu+1FDqDVe6Uf+NVwokQsUlLFIeGB9EJJIgsB5m4e4RtWrwu10nO6bhLuhqY=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Thomas.Lendacky@amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	BN6PR12MB1138.namprd12.prod.outlook.com (10.168.226.140) with
	Microsoft SMTP Server (version=TLS1_0,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384) id
	15.1.557.21; Mon, 22 Aug 2016 22:38:22 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [RFC PATCH v2 15/20] iommu/amd: AMD IOMMU support for memory
	encryption
To: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;kvm@vger.kernel.org&gt;, &lt;linux-doc@vger.kernel.org&gt;,
	&lt;x86@kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;kasan-dev@googlegroups.com&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;iommu@lists.linux-foundation.org&gt;
CC: Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Konrad Rzeszutek Wilk&quot; &lt;konrad.wilk@oracle.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	&quot;Andy Lutomirski&quot; &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	&quot;Paolo Bonzini&quot; &lt;pbonzini@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Mon, 22 Aug 2016 17:38:20 -0500
Message-ID: &lt;20160822223820.29880.17752.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20160822223529.29880.50884.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20160822223529.29880.50884.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BLUPR05CA0048.namprd05.prod.outlook.com (10.141.20.18) To
	BN6PR12MB1138.namprd12.prod.outlook.com (10.168.226.140)
X-MS-Office365-Filtering-Correlation-Id: 813d5c8e-5754-429d-d50d-08d3cadd066b
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1138;
	2:KyaIDqO66DFpeTS3Bq4it/OjNaDFssmhaDX1NAh9KE1LSeyk6OqPM9Prjeicx5XFhZbIUlfTvplyrKI83mJ3Au1Z+dzt+8c7CYuvDofkzSKaiJ4j+FLKKG98y9mZmZSYOAyBtx/jkS5GHGA/Sg6Pm/N4WxptAsvUWKGdYW8L1FKvPzdpH40toZfjcpG3CaiP;
	3:sKA/6JIwCHecwgARrOlVobR86qs+MWe5ncP28EMNNhKzSbb6yvU9zMLJGuOtOYRTleYjalgjGG/aX67hnapImEfkb/Ar9WpMeY1qyJhYtiza6uNNJb52fcHOjj5FB0qi;
	25:nEMjchBdGuvCp9o5rCSnxZ3jyk+/by8elBtXx+Gxs5QxrSTuWPMjI90DcNblvd81tZccO4b5/sJ84nZZRFp0or9/4oFX32w4FoLA8Nwh+5v0IvnCxz+ISRvhjyhq1TYYXW4SYvAbsJOKwyeifQaGoWrXAXFuEXOTPxS1yLSMNnQeiT9xqOO6O/lCdHgNG8ZkGZnwcxxIdAG3uihQ2kl5Gq10609e/xOGqhOpzhPf6P16gSMmAGRv+ymJz0JaCdmYd4G03XBvCykwPAu63CbgijxDHYjJG2lLjpomaPgb21tHI1kVfa5fPhaYR0Zv2oDQ/RGRgszOsM9E1rD3joBFuOOnYlLTcPyfj9/U83JeJQ+gbsCtiMqtVrhz+4TUmgTlagWM7AMAQs4vhGzzmfc8yHwx0FvBJsnu7V4tR+CgiuA=
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:BN6PR12MB1138;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1138;
	31:bn0nJkYKDFvdocYsyDU87wK0OKZI6kF795yaPh57ust5frmv/XhwEEd84yNdnNJwcR5SnD/1TJ0zf5GWlUZ9uaX618W2aMW15txIVyzBBtS2jwOjFmxHpreagsdWxDBZXjQx0vyf5AUhCA38SVq1/MBwyfppEasMHaKerzWE034YCOWEPl0dBO6xiq5XutLyKb9Svkb0NSf5G56D0pL4ovpMb1o5tloWkL14Ek1IpYY=;
	20:lUkbMq4qMEp4bqrdYkqfUG7Ap1UPsTfGh0nqLLwtbFegxwPH77zqpXUs5PvREsrPidrTahVSy4QOBYnoxwbxNAlHKc/WlhfrHwCG1uMvS64hxGrCi80MHaJ7E9yR0eXAT7xt/f8xS4UbMiJf80AEQLPd5tOw6fSCJyimZTDsqAyaP4xMccGmL7UOPaoX7k+hj2qMKAXhikj4Q2/dCibslfUHLTbhYE5UXh6qpvkmvepbHbBsou/DSI9uVBDA1MP5T8QiQsLvT8Un96N+/j79vvfp8ekV9dyC5vmKwtwC7uROqOeTJLIMY767JzfMnRmhAgpcRJ7mZUsa0ja2C581GHsBI2KKmjesV5mS4yGZazK9AVxTs3J6Zc77w8pNnRUZqPXiwCaMjKMtLj6V+Nb/ea9oOeYtF+uplM1lkry0nm2CIs4+cfkOm5XtKgjCJkK6HSmknwebipfV3BGYdzjPDjfrwTwwSxJ7WGlgOy7lgFNiTqP0QgfKbXUXY5Rqcs35
X-Microsoft-Antispam-PRVS: &lt;BN6PR12MB113807FB86DA5E575E3D2206ECE80@BN6PR12MB1138.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040176)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(6055026);
	SRVR:BN6PR12MB1138; BCL:0; PCL:0; RULEID:; SRVR:BN6PR12MB1138;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1138;
	4:3BIB+ONzysfnIZtVcyEyQH0NdyN/vBogPVZO/QKVR2gkluqKe/ciQ2mz4zE1L/4UqFYFT0gF45+JjP2XVfdBjlsIvNzwtKwiJHWvJl1UORH/6QfM7qHNtgte2d7avrfJbyjHCefI5Qmn2IYHWldubPUMJe9043Hff0YPHsUs7bvzQtPHVu52y7YrO8dss5ufGZeA8LolMlZS9slDlWl+EkRhsG1Ypah3LU2IamE9qQpP8dX7ODgMpKeDkI4jd8WGHiYk65oEhlurHd0xUXAgBEF3q921TbM+aE3rqSY6+EnoNt8kma+2Z+4hWnoOGb39g6QPsXd62jjdJ+BCdUy6Ai2/fwnCoQu7vti87jzNZP/+vgNEhEtw6EkZl2UKSmE4T4ubtrNgwn0yGUKbSFV5xctWatKUBCNzioZIV6SQMbx/gdA1Pc4sQ07iRFvc2GfX
X-Forefront-PRVS: 00429279BA
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(7916002)(199003)(189002)(47776003)(9686002)(68736007)(7846002)(86362001)(19580395003)(7736002)(66066001)(230700001)(6116002)(42186005)(189998001)(103116003)(4326007)(69596002)(2906002)(19580405001)(1076002)(50466002)(305945005)(33646002)(83506001)(5660300001)(229853001)(105586002)(7416002)(54356999)(76176999)(50986999)(97746001)(2201001)(92566002)(8676002)(23676002)(77096005)(81156014)(586003)(3846002)(5001770100001)(4001350100001)(101416001)(53416004)(106356001)(2950100001)(81166006)(97736004)(71626007)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BN6PR12MB1138;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; PTR:InfoNoRecords;
	A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtCTjZQUjEyTUIxMTM4OzIzOm53TzROamtVaG93MENZWG1oVlFQdWRPLzlZ?=
	=?utf-8?B?T1NsbmpiMjZ1YWp5STBqdlpIMzhManRvOWh5ZWRKdmhrb2VNV2ZGTWdzeDBw?=
	=?utf-8?B?M2pheWZ5dU4zRUNnNVlnVkowaDd6VjFOYVN6NGd6MWY0WUJuelVRN3VEb1Fr?=
	=?utf-8?B?bUlidCt5dEVZMGNqL0M1TWhZRDNkN1plYk83cUNUa25DZ28xeDBqdFNCakdR?=
	=?utf-8?B?d2sxTTNKMjVVRk5lQW5Fa3daVTdLb2YwQiszV1BQRHlqMUNENmo0TTJJRXpu?=
	=?utf-8?B?T1hETDdaK3BYSlVWMmxnZlhHS3lWTlJwbkYzOHlSclVJNUs2WEtOTVpCRFF5?=
	=?utf-8?B?NUY3ODErcHdJMlNZZXFkRU5yRHBndnkyU3UwR2VqdzlJSHZ3ajNvUzVVUU8r?=
	=?utf-8?B?cUVBc0VkM0YxeE13Q2lTdWF6R1ZKY21aakdjckUyZ3FZOS9MNFFsYnZkRGVQ?=
	=?utf-8?B?eEtrc1Rta1VYZ2xwaEhxOWU3L1NtRVJ5ajlnejBEYkdlMTN5SDBXVUxZOGRm?=
	=?utf-8?B?Zzgvc0tFaE9uNUh1UmZrL0VKK2hkTDMxSCs5UFlpVjlmRFNMUGdTZTkreDNM?=
	=?utf-8?B?SGhFS2JlUUZzcStXNGwya0I0eUQ1T2M0em5Jd3F3alRhQW4wUkVuMlpNZW9G?=
	=?utf-8?B?dFh6UTFwaFIvQ2N6bnJ3MlRGOC8xMUpweVBMRHhUcTREeXh4cTVtUlRrVUVF?=
	=?utf-8?B?WkVhRkNKWDZESmtwNnRtV2FubldSOW1kVDAyYlRBeHc2NzVlTklmSjNmd3Zk?=
	=?utf-8?B?ZWt4dUtUL0dndHdpb3pMV0ZrOEZ4UHFLVGJOV01FM3NkcldaL1M4ak9CY1Nn?=
	=?utf-8?B?ZlNCblFraGF1K0JoYnlRNmFNWTNXK1NIUHhqNnRIVHlCT1lnTGk5aWw1THIv?=
	=?utf-8?B?ak40RU9wdmdtVXZaVzRNajJJZzZYVXV3WTdlcjhXcFhoYWVZeCtYUnJEYy9M?=
	=?utf-8?B?RFIwWDJWYk1VbHg3ZThLODNHZkNxWXB5TnJtWWlBUHFxeURwTzNpbEU0ZUhl?=
	=?utf-8?B?akl6TFRITU5xNHlrR25vZEl1TUJ1L3NZT09VSlpWMmdaQ2tPM2FVUkx2MnIy?=
	=?utf-8?B?Ti85c3pXSGpzTkxOOGlVZjEvSDlkc0VDcHRYeThXd3NVeGdxa1lXQUhYamFR?=
	=?utf-8?B?WUhTMng2Y09SUkZnc01YSDRva05uMWZrWEZiQkFxMmhTYXZBcUxuZFdPVmFM?=
	=?utf-8?B?bkRlRnYyZGI5T0dRNnU0cnluaWxnajF5eG1YQTNwTDk0SHYxZEZSeUdzdFY3?=
	=?utf-8?B?d01RaEFEYWxrTzk5ek82blFpVmUvVWk5OEprTitOcjdyU0N6a1d6bFEyai9s?=
	=?utf-8?B?VkUzRWU2Y2tCQTQxazdJaGd3QkVHNUNwN1BqeFNQbzNVa3RMK1NWN01EU3Rp?=
	=?utf-8?B?UGE1MWRkQ0RlVWVQV3E0RkE1WC9odlBIaDRkTVJSa2kvTzI2TENrSGYwZWtH?=
	=?utf-8?B?RHE0RFdXZGxKNGdSbGZrM0l0ZDNEUTFaZmxFYVYxMEVmRlZEQVpmTkNSWm0w?=
	=?utf-8?B?SmRsUjhUOXEvclVTcHZXUUhyVmlUeW5yVkhGUE0rNnlvbGxLR1BCTnNUYW5Q?=
	=?utf-8?B?c3R4TWQ4dWNqZURiN0I0YUxDdXdWQUpLNlFEZTVrSFB4aWJCWVFpMVp1QjMr?=
	=?utf-8?B?MDBSSThUc2RRZ1UwWXN2b3RXM29ycWlCbGR0enAvTlhxUHBxSW9ZbmN3N0xC?=
	=?utf-8?B?NWI4ZzBLcHk4ZnYrc1pjSHhZWUpFcmVtbk5rVGZPQi93NVRWMjNwOFBrTVlJ?=
	=?utf-8?Q?yo7rzaveX9nXZtsZBhhcT2NeKHAacA7B6H1fg=3D?=
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1138;
	6:pQ6aj+NlYkqEEgUwj10VYYlvSzy0np5jmdJI/ychtMMBqY9vByyBM7XssPhO4wMFbizM0j9y3vdFWkIjc2C1fCTuZh36ZzVr3dZDS/YBBJ5fnM6aLyV8VLFaDBCVcjnbIMcsH1YJiRPt7tHlVXfq+nEl4W20UonC+PJlqdEySctvnhp2Q0DQmZx1JHITZyLAl6bw2FbP9Uyv/J8TSGBfjNYxq1MOA6kMf4A+WfULUfyAK6FerNjHg4HKk77HfnbgSm+PpJJL5tfD6nm6DnIVuYd0PUkpxXnMLqvYox8Wa6xkp7mpWsHtJN2lCTngZ73hjztx9Ucg99DiWbrwAtgTTQ==;
	5:99blBh5cMWLE2h4EWWjsC99PSMCJAyaJ2CKOKVu38gXrZw3l3kc8n5/YXHHSAzPUwdZbbYNHRiKLEH++ZMrZ+bj7rki0GAC/H+NCYiUGbAdo9Qd1P8gqbQJUy0g5ZKn662AemRCEwPRMCb0Re9HszA==;
	24:zZgARBBorQG+9XuwYfjzjh5PfYwtul9aOCn9rrLseBdQjHi6J9s2C2pnx+bLseIZ5lEX36gJXYFyB5ejoOExEovQWFn/nfUX2EFs5aZE+cg=;
	7:bUZcfZmIg8zJlGPhG/OOZM0TIF9b4uqsdyQTJiOFwYLpKroVXFg+tfgyh98t4o9cWePQVGTWAVOLQ9GTyCktt3uwbuPRmCFXnrSMJfpp5EJsbYM0Yz1KUr7SZ1u6PNiFd8AEQFcatT+iw5zCWWQK1riOal5pcbslz8fR7LaIBFBPMSrCZ0vUKlP5bQhWLsDiS8JPmetAeZt6b0NRgc5K17Tk415S5HKRCeBCLdQu1tJ78VD50cj8AE5O+pZ+TWcI
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1138;
	20:Y5ZzRLN2U3lBXg/UdEfwRPrGolBLZeK4+5O95EB7orKcjWG5+2Lf2FamPaEDjSzoj8RA0ay7MxZHjin4O22jbktB8/p2JmQDpxpzFLyOj6r+sciGoK/9rzxJOge5b/8gwIkV2IXVL0jnzE4peDhQhvmAJlGHU3/sGh1L+D1CCi9rz8+L2dhcOqN4YKa34yzOR1i0QHIlMxqlrucza8v1coaTKq3cQFCHYlORWQm3Lk2/IA+RaA8ebMD+ed0w402q
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 22 Aug 2016 22:38:22.0624
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR12MB1138
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Aug. 22, 2016, 10:38 p.m.</div>
<pre class="content">
Add support to the AMD IOMMU driver to set the memory encryption mask if
memory encryption is enabled.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |    2 ++
 arch/x86/mm/mem_encrypt.c          |    5 +++++
 drivers/iommu/amd_iommu.c          |   10 ++++++++++
 3 files changed, 17 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Sept. 12, 2016, 11:45 a.m.</div>
<pre class="content">
On Mon, Aug 22, 2016 at 05:38:20PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Add support to the AMD IOMMU driver to set the memory encryption mask if</span>
<span class="quote">&gt; memory encryption is enabled.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |    2 ++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          |    5 +++++</span>
<span class="quote">&gt;  drivers/iommu/amd_iommu.c          |   10 ++++++++++</span>
<span class="quote">&gt;  3 files changed, 17 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 384fdfb..e395729 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -36,6 +36,8 @@ void __init sme_early_init(void);</span>
<span class="quote">&gt;  /* Architecture __weak replacement functions */</span>
<span class="quote">&gt;  void __init mem_encrypt_init(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +unsigned long amd_iommu_get_me_mask(void);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  unsigned long swiotlb_get_me_mask(void);</span>
<span class="quote">&gt;  void swiotlb_set_mem_dec(void *vaddr, unsigned long size);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; index 6b2e8bf..2f28d87 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; @@ -185,6 +185,11 @@ void __init mem_encrypt_init(void)</span>
<span class="quote">&gt;  	swiotlb_clear_encryption();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +unsigned long amd_iommu_get_me_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return sme_me_mask;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  unsigned long swiotlb_get_me_mask(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return sme_me_mask;</span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; index 96de97a..63995e3 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; @@ -166,6 +166,15 @@ struct dma_ops_domain {</span>
<span class="quote">&gt;  static struct iova_domain reserved_iova_ranges;</span>
<span class="quote">&gt;  static struct lock_class_key reserved_rbtree_key;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Support for memory encryption. If memory encryption is supported, then an</span>
<span class="quote">&gt; + * override to this function will be provided.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +unsigned long __weak amd_iommu_get_me_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>

So instead of adding a function each time which returns sme_me_mask
for each user it has, why don&#39;t you add a single function which
returns sme_me_mask in mem_encrypt.c and add an inline in the header
mem_encrypt.h which returns 0 for the !CONFIG_AMD_MEM_ENCRYPT case.

This all is still funny because we access sme_me_mask directly for the
different KERNEL_* masks but then you&#39;re adding an accessor function.

So what you should do instead, IMHO, is either hide sme_me_mask
altogether and use the accessor functions only (not sure if that would
work in all cases) or expose sme_me_mask unconditionally and have it be
0 if CONFIG_AMD_MEM_ENCRYPT is not enabled so that it just works.

Or is there a third, more graceful variant?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Sept. 14, 2016, 1:45 p.m.</div>
<pre class="content">
On 09/12/2016 06:45 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Mon, Aug 22, 2016 at 05:38:20PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add support to the AMD IOMMU driver to set the memory encryption mask if</span>
<span class="quote">&gt;&gt; memory encryption is enabled.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/mem_encrypt.h |    2 ++</span>
<span class="quote">&gt;&gt;  arch/x86/mm/mem_encrypt.c          |    5 +++++</span>
<span class="quote">&gt;&gt;  drivers/iommu/amd_iommu.c          |   10 ++++++++++</span>
<span class="quote">&gt;&gt;  3 files changed, 17 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index 384fdfb..e395729 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -36,6 +36,8 @@ void __init sme_early_init(void);</span>
<span class="quote">&gt;&gt;  /* Architecture __weak replacement functions */</span>
<span class="quote">&gt;&gt;  void __init mem_encrypt_init(void);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +unsigned long amd_iommu_get_me_mask(void);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  unsigned long swiotlb_get_me_mask(void);</span>
<span class="quote">&gt;&gt;  void swiotlb_set_mem_dec(void *vaddr, unsigned long size);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; index 6b2e8bf..2f28d87 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; @@ -185,6 +185,11 @@ void __init mem_encrypt_init(void)</span>
<span class="quote">&gt;&gt;  	swiotlb_clear_encryption();</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +unsigned long amd_iommu_get_me_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return sme_me_mask;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  unsigned long swiotlb_get_me_mask(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	return sme_me_mask;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt;&gt; index 96de97a..63995e3 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt;&gt; @@ -166,6 +166,15 @@ struct dma_ops_domain {</span>
<span class="quote">&gt;&gt;  static struct iova_domain reserved_iova_ranges;</span>
<span class="quote">&gt;&gt;  static struct lock_class_key reserved_rbtree_key;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * Support for memory encryption. If memory encryption is supported, then an</span>
<span class="quote">&gt;&gt; + * override to this function will be provided.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +unsigned long __weak amd_iommu_get_me_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So instead of adding a function each time which returns sme_me_mask</span>
<span class="quote">&gt; for each user it has, why don&#39;t you add a single function which</span>
<span class="quote">&gt; returns sme_me_mask in mem_encrypt.c and add an inline in the header</span>
<span class="quote">&gt; mem_encrypt.h which returns 0 for the !CONFIG_AMD_MEM_ENCRYPT case.</span>

Currently, mem_encrypt.h only lives in the arch/x86 directory so it
wouldn&#39;t be able to be included here without breaking other archs.
<span class="quote">
&gt; </span>
<span class="quote">&gt; This all is still funny because we access sme_me_mask directly for the</span>
<span class="quote">&gt; different KERNEL_* masks but then you&#39;re adding an accessor function.</span>

Because this lives outside of the arch/x86 I need to use the weak
function.
<span class="quote">
&gt; </span>
<span class="quote">&gt; So what you should do instead, IMHO, is either hide sme_me_mask</span>
<span class="quote">&gt; altogether and use the accessor functions only (not sure if that would</span>
<span class="quote">&gt; work in all cases) or expose sme_me_mask unconditionally and have it be</span>
<span class="quote">&gt; 0 if CONFIG_AMD_MEM_ENCRYPT is not enabled so that it just works.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Or is there a third, more graceful variant?</span>

Is there a better way to do this given the support is only in x86?

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Sept. 14, 2016, 2:41 p.m.</div>
<pre class="content">
On Wed, Sep 14, 2016 at 08:45:44AM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Currently, mem_encrypt.h only lives in the arch/x86 directory so it</span>
<span class="quote">&gt; wouldn&#39;t be able to be included here without breaking other archs.</span>

I&#39;m wondering if it would be simpler to move only sme_me_mask to an
arch-agnostic header just so that we save us all the code duplication.

Hmmm.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Sept. 15, 2016, 4:57 p.m.</div>
<pre class="content">
On 09/14/2016 09:41 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Sep 14, 2016 at 08:45:44AM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Currently, mem_encrypt.h only lives in the arch/x86 directory so it</span>
<span class="quote">&gt;&gt; wouldn&#39;t be able to be included here without breaking other archs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m wondering if it would be simpler to move only sme_me_mask to an</span>
<span class="quote">&gt; arch-agnostic header just so that we save us all the code duplication.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hmmm.</span>

If I do that, then I could put an #ifdef in the header to include the
asm/mem_encrypt.h if the memory encryption is configured, else set the
value to zero.  I&#39;ll look into this.  One immediate question becomes do
we keep the name very specific vs. making it more generic, sme_me_mask
vs me_mask, etc.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Sept. 16, 2016, 7:08 a.m.</div>
<pre class="content">
On Thu, Sep 15, 2016 at 11:57:41AM -0500, Tom Lendacky wrote:
<span class="quote">&gt; If I do that, then I could put an #ifdef in the header to include the</span>
<span class="quote">&gt; asm/mem_encrypt.h if the memory encryption is configured, else set the</span>
<span class="quote">&gt; value to zero.</span>

Yeah, something along those lines...
<span class="quote">
&gt; I&#39;ll look into this. One immediate question becomes do we keep the</span>
<span class="quote">&gt; name very specific vs. making it more generic, sme_me_mask vs me_mask,</span>
<span class="quote">&gt; etc.</span>

No strong opinion either way from me. My angle is that whatever it is,
we can always rename it later if we decide to.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 384fdfb..e395729 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -36,6 +36,8 @@</span> <span class="p_context"> void __init sme_early_init(void);</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
 
<span class="p_add">+unsigned long amd_iommu_get_me_mask(void);</span>
<span class="p_add">+</span>
 unsigned long swiotlb_get_me_mask(void);
 void swiotlb_set_mem_dec(void *vaddr, unsigned long size);
 
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 6b2e8bf..2f28d87 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -185,6 +185,11 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 	swiotlb_clear_encryption();
 }
 
<span class="p_add">+unsigned long amd_iommu_get_me_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 unsigned long swiotlb_get_me_mask(void)
 {
 	return sme_me_mask;
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 96de97a..63995e3 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -166,6 +166,15 @@</span> <span class="p_context"> struct dma_ops_domain {</span>
 static struct iova_domain reserved_iova_ranges;
 static struct lock_class_key reserved_rbtree_key;
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Support for memory encryption. If memory encryption is supported, then an</span>
<span class="p_add">+ * override to this function will be provided.</span>
<span class="p_add">+ */</span>
<span class="p_add">+unsigned long __weak amd_iommu_get_me_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /****************************************************************************
  *
  * Helper functions
<span class="p_chunk">@@ -2302,6 +2311,7 @@</span> <span class="p_context"> static dma_addr_t __map_single(struct device *dev,</span>
 
 	prot = dir2prot(direction);
 
<span class="p_add">+	paddr |= amd_iommu_get_me_mask();</span>
 	start = address;
 	for (i = 0; i &lt; pages; ++i) {
 		ret = iommu_map_page(&amp;dma_dom-&gt;domain, start, paddr,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



