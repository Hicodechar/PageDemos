
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] parisc huge page support for v4.4 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] parisc huge page support for v4.4</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=102">Helge Deller</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2015, 5 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20151124170020.GA13198@p100.box&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7692211/mbox/"
   >mbox</a>
|
   <a href="/patch/7692211/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7692211/">/patch/7692211/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 27B129F1D3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 17:00:46 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 43EAD20453
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 17:00:45 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 50178207DD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 17:00:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754249AbbKXRAk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 Nov 2015 12:00:40 -0500
Received: from mout.gmx.net ([212.227.15.15]:56652 &quot;EHLO mout.gmx.net&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753695AbbKXRAh (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 Nov 2015 12:00:37 -0500
Received: from p100.box ([92.203.1.112]) by mail.gmx.com (mrgmx002) with
	ESMTPSA (Nemesis) id 0MSv6D-1ZrkJI2OP7-00RtpD;
	Tue, 24 Nov 2015 18:00:25 +0100
Date: Tue, 24 Nov 2015 18:00:20 +0100
From: Helge Deller &lt;deller@gmx.de&gt;
To: Mikulas Patocka &lt;mpatocka@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	linux-kernel@vger.kernel.org, linux-parisc@vger.kernel.org,
	James Bottomley &lt;James.Bottomley@HansenPartnership.com&gt;,
	John David Anglin &lt;dave.anglin@bell.net&gt;
Subject: Re: [GIT PULL] parisc huge page support for v4.4
Message-ID: &lt;20151124170020.GA13198@p100.box&gt;
References: &lt;20151122115153.GA28471@p100.box&gt;
	&lt;alpine.LRH.2.02.1511241014280.9586@file01.intranet.prod.int.rdu2.redhat.com&gt;
	&lt;5654892D.1030707@gmx.de&gt;
	&lt;alpine.LRH.2.02.1511241136440.14442@file01.intranet.prod.int.rdu2.redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;alpine.LRH.2.02.1511241136440.14442@file01.intranet.prod.int.rdu2.redhat.com&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
X-Provags-ID: V03:K0:9qn/BaXuIsN4it4mo/lq+oP+JOabxdCQa6R2qyZRsDUurZH7+hF
	c6nB+aEmOPCeNvuPKvraiyy3wPdP4as1Vpj7Tjqnv2kaQbUI7XOS40+SPQHPzk+R2oT/Dlq
	BHUG3eDerG6BEm8vxsFUq2A6kL9h4d1hKZjCRO1ErnTYqSTQEkapFbwLnk0e52Z/pf7zzap
	sHSeIgfL0dgxqbqkXYJTw==
X-UI-Out-Filterresults: notjunk:1; V01:K0:4zoQbb//K0s=:nPEk0J9Ov9y9XBltgUtcA3
	yHMH3YS2L5ejL9QU+oYAFzkNj+lD+VNHQguXz+woiCxkUdBbWZbR8jhTGxumgyW3bgBZjUBO8
	tw4W9Cpa5Z6K4G2wfCnN43gXZzyUMKCS6P2EMb/qk+jJbwYLNk6trDd3YgQvEjQx0AFypDpgJ
	2qA8/TYuB/RvIdiM8dZ6QpN5ONPl2nvcZGEipdSPjOw41AIAEIZIvRkIPL5RkpRpZMRInC+f/
	e7AYOUwIR7tteNY6LFMEYfHyN6u94wSW7sMkmrfQqlETgFmva4ViV7eDZBstZ0xAxgzl99HEm
	hXID6DxZL2E+yI2Fs65K1PAJL88RvMd5R/AqGt3ipbAIITIUXqvWnwPwknbqhLLbV1CHklduQ
	C6jH4Un3k4RbKZ3gq0V1DqUNaUZ8Xn3Bqqji2ZwVvS4tSzz99Rmw+w5SRk5i+AZCJKw7ZVi4d
	ToztxMa6SxRmrcGMtijUbOHuppuXERyl3PApPMlpDrrIjrUwxaPtTA8UaF1YcLanok6j3Nzu+
	c0kyMOF7WlkJWYJzFdabORknah00P6VSQYkhpB6TRFIGu0+p+jJ6XLi8HH7ygOFetDIeTTqkj
	pJKjMo4cTskSWVIPEh/59cJtc/e7tEOcXSzT5sR8KJh7ycoBFPeXW8dE6wQ9itnjRLfMT/2qN
	3sVEnqDyeO3NOiFGdYFqPtauUpFMHjk9hna7PfW2egJ1qdp71dki1Zb2vUB4d8aEqOpvR6DEJ
	3UfgZQHxNDmLdaxP+1D5l8oa4t3L7R6esiHscP2fYAXsFMibC0rBWbIj7FU=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00,FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=102">Helge Deller</a> - Nov. 24, 2015, 5 p.m.</div>
<pre class="content">
* Mikulas Patocka &lt;mpatocka@redhat.com&gt;:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt; Hi</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Since the kernel 4.4-rc2 I&#39;m getting frequent boot failures on PA-RISC. </span>
<span class="quote">&gt; &gt; &gt; When I revert this patchset, the crashes are gone.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; [    3.296666] CPU(s): 4 out of 4 PA8900 (Shortfin) at 1000.000000 MHz online</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hi Mikulas,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Yes, I&#39;ve seen this as well.</span>
<span class="quote">&gt; &gt; It affects only the PA8900 CPUs, while all PA8500-PA8700 machines seem to work fine.</span>
<span class="quote">&gt; &gt; I do have a temporary 3-line patch to avoid the crashes which I&#39;ll push to my tree shortly.</span>
<span class="quote">&gt; &gt; I&#39;m still investigating why it only affects the PA8900 CPUs, but I assume</span>
<span class="quote">&gt; &gt; it&#39;s related to the cache aliasing of those CPUs.</span>
<span class="quote">&gt; &gt; I&#39;ll keep you updated.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Helge</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The PA-RISC specification doesn&#39;t allow aliasing on non-equaivalent </span>
<span class="quote">&gt; addresses. Can the kernel map a piece of kernel data to other virtual </span>
<span class="quote">&gt; address? If yes, we can&#39;t use big pages to map kernel data.</span>

Can you please try the two patches below?
The first one disables mapping kernel text/data on huge pages on
PA8800/PA8900 CPUs. Patch works for me on my Mako PA8800.

Independend of my huge page patch the second patch disables the tlb
flush optimization we added earlier. It seems calling flush_tlb_all()
doesn&#39;t reliably flushes tlbs on all CPUs so it&#39;s better to fall back to
the loop implementation.

Helge


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=553">Mikulas Patocka</a> - Nov. 24, 2015, 6:43 p.m.</div>
<pre class="content">
On Tue, 24 Nov 2015, Helge Deller wrote:
<span class="quote">
&gt; * Mikulas Patocka &lt;mpatocka@redhat.com&gt;:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Hi</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Since the kernel 4.4-rc2 I&#39;m getting frequent boot failures on PA-RISC. </span>
<span class="quote">&gt; &gt; &gt; &gt; When I revert this patchset, the crashes are gone.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; [    3.296666] CPU(s): 4 out of 4 PA8900 (Shortfin) at 1000.000000 MHz online</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Hi Mikulas,</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Yes, I&#39;ve seen this as well.</span>
<span class="quote">&gt; &gt; &gt; It affects only the PA8900 CPUs, while all PA8500-PA8700 machines seem to work fine.</span>
<span class="quote">&gt; &gt; &gt; I do have a temporary 3-line patch to avoid the crashes which I&#39;ll push to my tree shortly.</span>
<span class="quote">&gt; &gt; &gt; I&#39;m still investigating why it only affects the PA8900 CPUs, but I assume</span>
<span class="quote">&gt; &gt; &gt; it&#39;s related to the cache aliasing of those CPUs.</span>
<span class="quote">&gt; &gt; &gt; I&#39;ll keep you updated.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Helge</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The PA-RISC specification doesn&#39;t allow aliasing on non-equaivalent </span>
<span class="quote">&gt; &gt; addresses. Can the kernel map a piece of kernel data to other virtual </span>
<span class="quote">&gt; &gt; address? If yes, we can&#39;t use big pages to map kernel data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you please try the two patches below?</span>
<span class="quote">&gt; The first one disables mapping kernel text/data on huge pages on</span>
<span class="quote">&gt; PA8800/PA8900 CPUs. Patch works for me on my Mako PA8800.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Independend of my huge page patch the second patch disables the tlb</span>
<span class="quote">&gt; flush optimization we added earlier. It seems calling flush_tlb_all()</span>
<span class="quote">&gt; doesn&#39;t reliably flushes tlbs on all CPUs so it&#39;s better to fall back to</span>
<span class="quote">&gt; the loop implementation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Helge</span>

The kernel with these patches works fine so far.

Mikulas
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=553">Mikulas Patocka</a> - Dec. 26, 2015, 12:09 p.m.</div>
<pre class="content">
On Tue, 24 Nov 2015, Mikulas Patocka wrote:
<span class="quote">
&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; * Mikulas Patocka &lt;mpatocka@redhat.com&gt;:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Hi</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Since the kernel 4.4-rc2 I&#39;m getting frequent boot failures on PA-RISC. </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; When I revert this patchset, the crashes are gone.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; [    3.296666] CPU(s): 4 out of 4 PA8900 (Shortfin) at 1000.000000 MHz online</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Hi Mikulas,</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Yes, I&#39;ve seen this as well.</span>
<span class="quote">&gt; &gt; &gt; &gt; It affects only the PA8900 CPUs, while all PA8500-PA8700 machines seem to work fine.</span>
<span class="quote">&gt; &gt; &gt; &gt; I do have a temporary 3-line patch to avoid the crashes which I&#39;ll push to my tree shortly.</span>
<span class="quote">&gt; &gt; &gt; &gt; I&#39;m still investigating why it only affects the PA8900 CPUs, but I assume</span>
<span class="quote">&gt; &gt; &gt; &gt; it&#39;s related to the cache aliasing of those CPUs.</span>
<span class="quote">&gt; &gt; &gt; &gt; I&#39;ll keep you updated.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Helge</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The PA-RISC specification doesn&#39;t allow aliasing on non-equaivalent </span>
<span class="quote">&gt; &gt; &gt; addresses. Can the kernel map a piece of kernel data to other virtual </span>
<span class="quote">&gt; &gt; &gt; address? If yes, we can&#39;t use big pages to map kernel data.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Can you please try the two patches below?</span>
<span class="quote">&gt; &gt; The first one disables mapping kernel text/data on huge pages on</span>
<span class="quote">&gt; &gt; PA8800/PA8900 CPUs. Patch works for me on my Mako PA8800.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Independend of my huge page patch the second patch disables the tlb</span>
<span class="quote">&gt; &gt; flush optimization we added earlier. It seems calling flush_tlb_all()</span>
<span class="quote">&gt; &gt; doesn&#39;t reliably flushes tlbs on all CPUs so it&#39;s better to fall back to</span>
<span class="quote">&gt; &gt; the loop implementation.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Helge</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The kernel with these patches works fine so far.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Mikulas</span>

BTW. I looked at this in arch/parisc/mm/hugetlbpage.c:set_huge_pte_at 
&quot;*ptep = entry;&quot; and it seems like a bad bug. PA-RISC doesn&#39;t have atomic 
instructions to modify page table entries, so it takes spinlock in the TLB 
handler and modifies the page table entry non-atomically. If you modify 
the page table entry without the spinlock, you may race with TLB handler 
on another CPU and your modification may be lost.

The comment says something about double locking on pa_tlb_lock, but 
pa_tlb_lock isn&#39;t held when that function is called.

Mikulas
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=102">Helge Deller</a> - Dec. 26, 2015, 12:31 p.m.</div>
<pre class="content">
On 26.12.2015 13:09, Mikulas Patocka wrote:
<span class="quote">&gt;&gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt;&gt;&gt; * Mikulas Patocka &lt;mpatocka@redhat.com&gt;:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Tue, 24 Nov 2015, Helge Deller wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Hi</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Since the kernel 4.4-rc2 I&#39;m getting frequent boot failures on PA-RISC. </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; When I revert this patchset, the crashes are gone.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; [    3.296666] CPU(s): 4 out of 4 PA8900 (Shortfin) at 1000.000000 MHz online</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Hi Mikulas,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Yes, I&#39;ve seen this as well.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; It affects only the PA8900 CPUs, while all PA8500-PA8700 machines seem to work fine.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I do have a temporary 3-line patch to avoid the crashes which I&#39;ll push to my tree shortly.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I&#39;m still investigating why it only affects the PA8900 CPUs, but I assume</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; it&#39;s related to the cache aliasing of those CPUs.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I&#39;ll keep you updated.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Helge</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; The PA-RISC specification doesn&#39;t allow aliasing on non-equaivalent </span>
<span class="quote">&gt;&gt;&gt;&gt; addresses. Can the kernel map a piece of kernel data to other virtual </span>
<span class="quote">&gt;&gt;&gt;&gt; address? If yes, we can&#39;t use big pages to map kernel data.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Can you please try the two patches below?</span>
<span class="quote">&gt;&gt;&gt; The first one disables mapping kernel text/data on huge pages on</span>
<span class="quote">&gt;&gt;&gt; PA8800/PA8900 CPUs. Patch works for me on my Mako PA8800.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Independend of my huge page patch the second patch disables the tlb</span>
<span class="quote">&gt;&gt;&gt; flush optimization we added earlier. It seems calling flush_tlb_all()</span>
<span class="quote">&gt;&gt;&gt; doesn&#39;t reliably flushes tlbs on all CPUs so it&#39;s better to fall back to</span>
<span class="quote">&gt;&gt;&gt; the loop implementation.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Helge</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The kernel with these patches works fine so far.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Mikulas</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; BTW. I looked at this in arch/parisc/mm/hugetlbpage.c:set_huge_pte_at </span>
<span class="quote">&gt; &quot;*ptep = entry;&quot; and it seems like a bad bug. PA-RISC doesn&#39;t have atomic </span>
<span class="quote">&gt; instructions to modify page table entries, so it takes spinlock in the TLB </span>
<span class="quote">&gt; handler and modifies the page table entry non-atomically. If you modify </span>
<span class="quote">&gt; the page table entry without the spinlock, you may race with TLB handler </span>
<span class="quote">&gt; on another CPU and your modification may be lost.</span>

Right.
<span class="quote">
&gt; The comment says something about double locking on pa_tlb_lock, but </span>
<span class="quote">&gt; pa_tlb_lock isn&#39;t held when that function is called.</span>

I have a work-in-progress patch for that in one of my trees, e.g.:
http://git.kernel.org/cgit/linux/kernel/git/deller/parisc-linux.git/commit/?h=parisc-next&amp;id=5c76b525cbdb097401f46522b27b1eb6244f34f9
It&#39;s lightly tested though.

Helge

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=553">Mikulas Patocka</a> - Jan. 4, 2016, 9:24 p.m.</div>
<pre class="content">
On Sat, 26 Dec 2015, Helge Deller wrote:
<span class="quote">
&gt; On 26.12.2015 13:09, Mikulas Patocka wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; BTW. I looked at this in arch/parisc/mm/hugetlbpage.c:set_huge_pte_at </span>
<span class="quote">&gt; &gt; &quot;*ptep = entry;&quot; and it seems like a bad bug. PA-RISC doesn&#39;t have atomic </span>
<span class="quote">&gt; &gt; instructions to modify page table entries, so it takes spinlock in the TLB </span>
<span class="quote">&gt; &gt; handler and modifies the page table entry non-atomically. If you modify </span>
<span class="quote">&gt; &gt; the page table entry without the spinlock, you may race with TLB handler </span>
<span class="quote">&gt; &gt; on another CPU and your modification may be lost.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; The comment says something about double locking on pa_tlb_lock, but </span>
<span class="quote">&gt; &gt; pa_tlb_lock isn&#39;t held when that function is called.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I have a work-in-progress patch for that in one of my trees, e.g.:</span>
<span class="quote">&gt; http://git.kernel.org/cgit/linux/kernel/git/deller/parisc-linux.git/commit/?h=parisc-next&amp;id=5c76b525cbdb097401f46522b27b1eb6244f34f9</span>
<span class="quote">&gt; It&#39;s lightly tested though.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Helge</span>

I tested the patch and it works OK for me so far.

BTW. what happens if some kernel code takes the TLB spinlock and then TLB 
miss in kernel space happens? (it would attempt to lock the spinlock 
recursively) Is it assumed that the TLB is big enough that this can&#39;t 
happen?

Mikulas
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=32832">John David Anglin</a> - Jan. 4, 2016, 9:48 p.m.</div>
<pre class="content">
On 2016-01-04 4:24 PM, Mikulas Patocka wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; On Sat, 26 Dec 2015, Helge Deller wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On 26.12.2015 13:09, Mikulas Patocka wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; BTW. I looked at this in arch/parisc/mm/hugetlbpage.c:set_huge_pte_at</span>
<span class="quote">&gt;&gt;&gt; &quot;*ptep = entry;&quot; and it seems like a bad bug. PA-RISC doesn&#39;t have atomic</span>
<span class="quote">&gt;&gt;&gt; instructions to modify page table entries, so it takes spinlock in the TLB</span>
<span class="quote">&gt;&gt;&gt; handler and modifies the page table entry non-atomically. If you modify</span>
<span class="quote">&gt;&gt;&gt; the page table entry without the spinlock, you may race with TLB handler</span>
<span class="quote">&gt;&gt;&gt; on another CPU and your modification may be lost.</span>
<span class="quote">&gt;&gt; Right.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The comment says something about double locking on pa_tlb_lock, but</span>
<span class="quote">&gt;&gt;&gt; pa_tlb_lock isn&#39;t held when that function is called.</span>
<span class="quote">&gt;&gt; I have a work-in-progress patch for that in one of my trees, e.g.:</span>
<span class="quote">&gt;&gt; http://git.kernel.org/cgit/linux/kernel/git/deller/parisc-linux.git/commit/?h=parisc-next&amp;id=5c76b525cbdb097401f46522b27b1eb6244f34f9</span>
<span class="quote">&gt;&gt; It&#39;s lightly tested though.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Helge</span>
<span class="quote">&gt; I tested the patch and it works OK for me so far.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; BTW. what happens if some kernel code takes the TLB spinlock and then TLB</span>
<span class="quote">&gt; miss in kernel space happens? (it would attempt to lock the spinlock</span>
<span class="quote">&gt; recursively) Is it assumed that the TLB is big enough that this can&#39;t</span>
<span class="quote">&gt; happen?</span>
No.  If you look at the TLB handler, you will see that locking is not 
done for misses in
kernel space.  So, this deadlock doesn&#39;t occur.

Dave
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/parisc/mm/init.c b/arch/parisc/mm/init.c</span>
<span class="p_header">index 1b366c4..958b7f36 100644</span>
<span class="p_header">--- a/arch/parisc/mm/init.c</span>
<span class="p_header">+++ b/arch/parisc/mm/init.c</span>
<span class="p_chunk">@@ -475,19 +475,22 @@</span> <span class="p_context"> static void __init map_pages(unsigned long start_vaddr,</span>
 					pte =  __mk_pte(address, pgprot);
 				else if (parisc_text_address(vaddr)) {
 					pte = __mk_pte(address, PAGE_KERNEL_EXEC);
<span class="p_del">-					if (address &gt;= ro_start &amp;&amp; address &lt; kernel_end)</span>
<span class="p_add">+					if (address &gt;= ro_start &amp;&amp; address &lt; kernel_end</span>
<span class="p_add">+					    &amp;&amp; !parisc_requires_coherency())</span>
 						pte = pte_mkhuge(pte);
 				}
 				else
 #if defined(CONFIG_PARISC_PAGE_SIZE_4KB)
 				if (address &gt;= ro_start &amp;&amp; address &lt; ro_end) {
 					pte = __mk_pte(address, PAGE_KERNEL_EXEC);
<span class="p_del">-					pte = pte_mkhuge(pte);</span>
<span class="p_add">+					if (!parisc_requires_coherency())</span>
<span class="p_add">+						pte = pte_mkhuge(pte);</span>
 				} else
 #endif
 				{
 					pte = __mk_pte(address, pgprot);
<span class="p_del">-					if (address &gt;= ro_start &amp;&amp; address &lt; kernel_end)</span>
<span class="p_add">+					if (address &gt;= ro_start &amp;&amp; address &lt; kernel_end</span>
<span class="p_add">+					    &amp;&amp; !parisc_requires_coherency())</span>
 						pte = pte_mkhuge(pte);
 				}
 
<span class="p_header">diff --git a/arch/parisc/kernel/cache.c b/arch/parisc/kernel/cache.c</span>
<span class="p_header">index cda6dbb..80ced95 100644</span>
<span class="p_header">--- a/arch/parisc/kernel/cache.c</span>
<span class="p_header">+++ b/arch/parisc/kernel/cache.c</span>
<span class="p_chunk">@@ -445,7 +445,7 @@</span> <span class="p_context"> int __flush_tlb_range(unsigned long sid, unsigned long start,</span>
 	unsigned long flags, size;
 
 	size = (end - start);
<span class="p_del">-	if (size &gt;= parisc_tlb_flush_threshold) {</span>
<span class="p_add">+	if (0 &amp;&amp; size &gt;= parisc_tlb_flush_threshold) {</span>
 		flush_tlb_all();
 		return 1;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



