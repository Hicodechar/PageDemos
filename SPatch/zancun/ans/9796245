
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.11,64/78] userfaultfd: shmem: handle coredumping in handle_userfault() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.11,64/78] userfaultfd: shmem: handle coredumping in handle_userfault()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 19, 2017, 3:16 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170619151031.823591575@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9796245/mbox/"
   >mbox</a>
|
   <a href="/patch/9796245/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9796245/">/patch/9796245/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B0B2E600C5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 15:21:46 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 937AF27968
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 15:21:46 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 883C427A98; Mon, 19 Jun 2017 15:21:46 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0996523D5E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 15:21:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753177AbdFSPVg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 19 Jun 2017 11:21:36 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:42246 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752056AbdFSPVe (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 19 Jun 2017 11:21:34 -0400
Received: from localhost (unknown [106.120.91.188])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 2B9C8B50;
	Mon, 19 Jun 2017 15:21:27 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	&quot;Dr. David Alan Gilbert&quot; &lt;dgilbert@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 4.11 64/78] userfaultfd: shmem: handle coredumping in
	handle_userfault()
Date: Mon, 19 Jun 2017 23:16:04 +0800
Message-Id: &lt;20170619151031.823591575@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.13.1
In-Reply-To: &lt;20170619151029.408399976@linuxfoundation.org&gt;
References: &lt;20170619151029.408399976@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - June 19, 2017, 3:16 p.m.</div>
<pre class="content">
4.11-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>

commit 64c2b20301f62c697352c8028c569b1b2bdd8e82 upstream.

Anon and hugetlbfs handle FOLL_DUMP set by get_dump_page() internally to
__get_user_pages().

shmem as opposed has no special FOLL_DUMP handling there so
handle_mm_fault() is invoked without mmap_sem and ends up calling
handle_userfault() that isn&#39;t expecting to be invoked without mmap_sem
held.

This makes handle_userfault() fail immediately if invoked through
shmem_vm_ops-&gt;fault during coredumping and solves the problem.

The side effect is a BUG_ON with no lock held triggered by the
coredumping process which exits.  Only 4.11 is affected, pre-4.11 anon
memory holes are skipped in __get_user_pages by checking FOLL_DUMP
explicitly against empty pagetables (mm/gup.c:no_page_table()).

It&#39;s zero cost as we already had a check for current-&gt;flags to prevent
futex to trigger userfaults during exit (PF_EXITING).

Link: http://lkml.kernel.org/r/20170615214838.27429-1-aarcange@redhat.com
<span class="signed-off-by">Signed-off-by: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>
Reported-by: &quot;Dr. David Alan Gilbert&quot; &lt;dgilbert@redhat.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 fs/userfaultfd.c |   29 +++++++++++++++++++++--------
 1 file changed, 21 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/fs/userfaultfd.c</span>
<span class="p_header">+++ b/fs/userfaultfd.c</span>
<span class="p_chunk">@@ -340,9 +340,28 @@</span> <span class="p_context"> int handle_userfault(struct vm_fault *vm</span>
 	bool must_wait, return_to_userland;
 	long blocking_state;
 
<span class="p_del">-	BUG_ON(!rwsem_is_locked(&amp;mm-&gt;mmap_sem));</span>
<span class="p_del">-</span>
 	ret = VM_FAULT_SIGBUS;
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We don&#39;t do userfault handling for the final child pid update.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * We also don&#39;t do userfault handling during</span>
<span class="p_add">+	 * coredumping. hugetlbfs has the special</span>
<span class="p_add">+	 * follow_hugetlb_page() to skip missing pages in the</span>
<span class="p_add">+	 * FOLL_DUMP case, anon memory also checks for FOLL_DUMP with</span>
<span class="p_add">+	 * the no_page_table() helper in follow_page_mask(), but the</span>
<span class="p_add">+	 * shmem_vm_ops-&gt;fault method is invoked even during</span>
<span class="p_add">+	 * coredumping without mmap_sem and it ends up here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (current-&gt;flags &amp; (PF_EXITING|PF_DUMPCORE))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Coredumping runs without mmap_sem so we can only check that</span>
<span class="p_add">+	 * the mmap_sem is held, if PF_DUMPCORE was not set.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON_ONCE(!rwsem_is_locked(&amp;mm-&gt;mmap_sem));</span>
<span class="p_add">+</span>
 	ctx = vmf-&gt;vma-&gt;vm_userfaultfd_ctx.ctx;
 	if (!ctx)
 		goto out;
<span class="p_chunk">@@ -361,12 +380,6 @@</span> <span class="p_context"> int handle_userfault(struct vm_fault *vm</span>
 		goto out;
 
 	/*
<span class="p_del">-	 * We don&#39;t do userfault handling for the final child pid update.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (current-&gt;flags &amp; PF_EXITING)</span>
<span class="p_del">-		goto out;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
 	 * Check that we can return VM_FAULT_RETRY.
 	 *
 	 * NOTE: it should become possible to return VM_FAULT_RETRY

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



