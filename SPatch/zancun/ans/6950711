
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[22/26] iommu/vt-d: Get rid of domain-&gt;iommu_lock - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [22/26] iommu/vt-d: Get rid of domain-&gt;iommu_lock</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 5, 2015, 3:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1438787937-7340-23-git-send-email-joro@8bytes.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6950711/mbox/"
   >mbox</a>
|
   <a href="/patch/6950711/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6950711/">/patch/6950711/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id CD7B19F358
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  5 Aug 2015 15:23:16 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0EA90203C3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  5 Aug 2015 15:23:11 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2F648204E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  5 Aug 2015 15:23:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753800AbbHEPWz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 5 Aug 2015 11:22:55 -0400
Received: from 8bytes.org ([81.169.241.247]:43106 &quot;EHLO theia.8bytes.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753375AbbHEPTZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 5 Aug 2015 11:19:25 -0400
Received: by theia.8bytes.org (Postfix, from userid 1000)
	id 3D8A9588; Wed,  5 Aug 2015 17:19:20 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=8bytes.org; s=mail-1; 
	t=1438787961; bh=S6vXu+dRLKCuTm1qZKt2SwqSuhuTMCseb6vypNvZPs4=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=c2ibB6/2CLtj/28ie43BtE7HVfezWUcXtIxRLgeVSryfjUHdedD2L/7up0gp/n45o
	z40qAjAP08CZL90V1x9QB2DLrK9rix80aue4YuN+20khLddZex9JvTMir5FmAsAKtK
	uAmuDyptX7Pi41zA22ZtVxoLqrGbV1LyzCELy8r6uSnuq55uwVFbCqQ2QJGDaIKsjx
	ZWGp0yGGgLG76ssMaa8mIbLT7rHzPyM7OX6lcWjbwO5BYuaXNtFbN6S/f8lMetHFYJ
	d2JZWhO/uUatbHVYHBclgbimqXbsRPvZ6MFiVYR1uu5TnovNhBlYF6xVkJTTs3hRBL
	oZ2sSUqjoN+dA==
From: Joerg Roedel &lt;joro@8bytes.org&gt;
To: iommu@lists.linux-foundation.org
Cc: David Woodhouse &lt;dwmw2@infradead.org&gt;,
	Alex Williamson &lt;alex.williamson@redhat.com&gt;,
	linux-kernel@vger.kernel.org, Joerg Roedel &lt;joro@8bytes.org&gt;,
	jroedel@suse.de
Subject: [PATCH 22/26] iommu/vt-d: Get rid of domain-&gt;iommu_lock
Date: Wed,  5 Aug 2015 17:18:53 +0200
Message-Id: &lt;1438787937-7340-23-git-send-email-joro@8bytes.org&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1438787937-7340-1-git-send-email-joro@8bytes.org&gt;
References: &lt;1438787937-7340-1-git-send-email-joro@8bytes.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a> - Aug. 5, 2015, 3:18 p.m.</div>
<pre class="content">
<span class="from">From: Joerg Roedel &lt;jroedel@suse.de&gt;</span>

When this lock is held the device_domain_lock is also
required to make sure the device_domain_info does not vanish
while in use. So this lock can be removed as it gives no
additional protection.
<span class="signed-off-by">
Signed-off-by: Joerg Roedel &lt;jroedel@suse.de&gt;</span>
---
 drivers/iommu/intel-iommu.c | 87 +++++++++++++++++++++++++--------------------
 1 file changed, 49 insertions(+), 38 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="p_header">index eb2a99a..1a9ecfe 100644</span>
<span class="p_header">--- a/drivers/iommu/intel-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/intel-iommu.c</span>
<span class="p_chunk">@@ -404,7 +404,6 @@</span> <span class="p_context"> struct dmar_domain {</span>
 	int		iommu_superpage;/* Level of superpages supported:
 					   0 == 4KiB (no superpages), 1 == 2MiB,
 					   2 == 1GiB, 3 == 512GiB, 4 == 1TiB */
<span class="p_del">-	spinlock_t	iommu_lock;	/* protect iommu set in domain */</span>
 	u64		max_addr;	/* maximum mapped address */
 
 	struct iommu_domain domain;	/* generic domain data structure for
<span class="p_chunk">@@ -474,6 +473,8 @@</span> <span class="p_context"> static void dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
 				     struct device *dev);
 static void domain_context_clear(struct intel_iommu *iommu,
 				 struct device *dev);
<span class="p_add">+static void __dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
<span class="p_add">+				       struct device *dev);</span>
 static int domain_detach_iommu(struct dmar_domain *domain,
 			       struct intel_iommu *iommu);
 
<span class="p_chunk">@@ -1402,24 +1403,23 @@</span> <span class="p_context"> iommu_support_dev_iotlb (struct dmar_domain *domain, struct intel_iommu *iommu,</span>
 			 u8 bus, u8 devfn)
 {
 	bool found = false;
<span class="p_del">-	unsigned long flags;</span>
 	struct device_domain_info *info;
 	struct pci_dev *pdev;
 
<span class="p_add">+	assert_spin_locked(&amp;device_domain_lock);</span>
<span class="p_add">+</span>
 	if (!ecap_dev_iotlb_support(iommu-&gt;ecap))
 		return NULL;
 
 	if (!iommu-&gt;qi)
 		return NULL;
 
<span class="p_del">-	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
 	list_for_each_entry(info, &amp;domain-&gt;devices, link)
 		if (info-&gt;iommu == iommu &amp;&amp; info-&gt;bus == bus &amp;&amp;
 		    info-&gt;devfn == devfn) {
 			found = true;
 			break;
 		}
<span class="p_del">-	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
 
 	if (!found || !info-&gt;dev || !dev_is_pci(info-&gt;dev))
 		return NULL;
<span class="p_chunk">@@ -1614,10 +1614,12 @@</span> <span class="p_context"> static int iommu_init_domains(struct intel_iommu *iommu)</span>
 static void disable_dmar_iommu(struct intel_iommu *iommu)
 {
 	struct device_domain_info *info, *tmp;
<span class="p_add">+	unsigned long flags;</span>
 
 	if (!iommu-&gt;domains || !iommu-&gt;domain_ids)
 		return;
 
<span class="p_add">+	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
 	list_for_each_entry_safe(info, tmp, &amp;device_domain_list, global) {
 		struct dmar_domain *domain;
 
<span class="p_chunk">@@ -1634,6 +1636,7 @@</span> <span class="p_context"> static void disable_dmar_iommu(struct intel_iommu *iommu)</span>
 		if (!domain_type_is_vm_or_si(domain))
 			domain_exit(domain);
 	}
<span class="p_add">+	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
 
 	if (iommu-&gt;gcmd &amp; DMA_GCMD_TE)
 		iommu_disable_translation(iommu);
<span class="p_chunk">@@ -1670,7 +1673,6 @@</span> <span class="p_context"> static struct dmar_domain *alloc_domain(int flags)</span>
 	memset(domain, 0, sizeof(*domain));
 	domain-&gt;nid = -1;
 	domain-&gt;flags = flags;
<span class="p_del">-	spin_lock_init(&amp;domain-&gt;iommu_lock);</span>
 	INIT_LIST_HEAD(&amp;domain-&gt;devices);
 
 	return domain;
<span class="p_chunk">@@ -1681,13 +1683,11 @@</span> <span class="p_context"> static int domain_attach_iommu(struct dmar_domain *domain,</span>
 			       struct intel_iommu *iommu)
 {
 	unsigned long ndomains;
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-	int ret, num;</span>
<span class="p_add">+	int num;</span>
 
<span class="p_add">+	assert_spin_locked(&amp;device_domain_lock);</span>
 	assert_spin_locked(&amp;iommu-&gt;lock);
 
<span class="p_del">-	spin_lock_irqsave(&amp;domain-&gt;iommu_lock, flags);</span>
<span class="p_del">-</span>
 	domain-&gt;iommu_refcnt[iommu-&gt;seq_id] += 1;
 	domain-&gt;iommu_count += 1;
 	if (domain-&gt;iommu_refcnt[iommu-&gt;seq_id] == 1) {
<span class="p_chunk">@@ -1698,8 +1698,7 @@</span> <span class="p_context"> static int domain_attach_iommu(struct dmar_domain *domain,</span>
 			pr_err(&quot;%s: No free domain ids\n&quot;, iommu-&gt;name);
 			domain-&gt;iommu_refcnt[iommu-&gt;seq_id] -= 1;
 			domain-&gt;iommu_count -= 1;
<span class="p_del">-			ret = -ENOSPC;</span>
<span class="p_del">-			goto out_unlock;</span>
<span class="p_add">+			return -ENOSPC;</span>
 		}
 
 		set_bit(num, iommu-&gt;domain_ids);
<span class="p_chunk">@@ -1711,22 +1710,17 @@</span> <span class="p_context"> static int domain_attach_iommu(struct dmar_domain *domain,</span>
 		domain_update_iommu_cap(domain);
 	}
 
<span class="p_del">-	ret = 0;</span>
<span class="p_del">-out_unlock:</span>
<span class="p_del">-	spin_unlock_irqrestore(&amp;domain-&gt;iommu_lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_add">+	return 0;</span>
 }
 
 static int domain_detach_iommu(struct dmar_domain *domain,
 			       struct intel_iommu *iommu)
 {
 	int num, count = INT_MAX;
<span class="p_del">-	unsigned long flags;</span>
 
<span class="p_add">+	assert_spin_locked(&amp;device_domain_lock);</span>
 	assert_spin_locked(&amp;iommu-&gt;lock);
 
<span class="p_del">-	spin_lock_irqsave(&amp;domain-&gt;iommu_lock, flags);</span>
 	domain-&gt;iommu_refcnt[iommu-&gt;seq_id] -= 1;
 	count = --domain-&gt;iommu_count;
 	if (domain-&gt;iommu_refcnt[iommu-&gt;seq_id] == 0) {
<span class="p_chunk">@@ -1737,7 +1731,6 @@</span> <span class="p_context"> static int domain_detach_iommu(struct dmar_domain *domain,</span>
 		domain_update_iommu_cap(domain);
 		domain-&gt;iommu_did[iommu-&gt;seq_id] = 0;
 	}
<span class="p_del">-	spin_unlock_irqrestore(&amp;domain-&gt;iommu_lock, flags);</span>
 
 	return count;
 }
<span class="p_chunk">@@ -1892,7 +1885,7 @@</span> <span class="p_context"> static int domain_context_mapping_one(struct dmar_domain *domain,</span>
 	struct context_entry *context;
 	unsigned long flags;
 	struct dma_pte *pgd;
<span class="p_del">-	int agaw;</span>
<span class="p_add">+	int ret, agaw;</span>
 
 	WARN_ON(did == 0);
 
<span class="p_chunk">@@ -1905,16 +1898,17 @@</span> <span class="p_context"> static int domain_context_mapping_one(struct dmar_domain *domain,</span>
 
 	BUG_ON(!domain-&gt;pgd);
 
<span class="p_del">-	spin_lock_irqsave(&amp;iommu-&gt;lock, flags);</span>
<span class="p_add">+	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
<span class="p_add">+	spin_lock(&amp;iommu-&gt;lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = -ENOMEM;</span>
 	context = iommu_context_addr(iommu, bus, devfn, 1);
<span class="p_del">-	spin_unlock_irqrestore(&amp;iommu-&gt;lock, flags);</span>
 	if (!context)
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-	spin_lock_irqsave(&amp;iommu-&gt;lock, flags);</span>
<span class="p_del">-	if (context_present(context)) {</span>
<span class="p_del">-		spin_unlock_irqrestore(&amp;iommu-&gt;lock, flags);</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-	}</span>
<span class="p_add">+		goto out_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = 0;</span>
<span class="p_add">+	if (context_present(context))</span>
<span class="p_add">+		goto out_unlock;</span>
 
 	pgd = domain-&gt;pgd;
 
<span class="p_chunk">@@ -1927,11 +1921,10 @@</span> <span class="p_context"> static int domain_context_mapping_one(struct dmar_domain *domain,</span>
 	 */
 	if (translation != CONTEXT_TT_PASS_THROUGH) {
 		for (agaw = domain-&gt;agaw; agaw != iommu-&gt;agaw; agaw--) {
<span class="p_add">+			ret = -ENOMEM;</span>
 			pgd = phys_to_virt(dma_pte_addr(pgd));
<span class="p_del">-			if (!dma_pte_present(pgd)) {</span>
<span class="p_del">-				spin_unlock_irqrestore(&amp;iommu-&gt;lock, flags);</span>
<span class="p_del">-				return -ENOMEM;</span>
<span class="p_del">-			}</span>
<span class="p_add">+			if (!dma_pte_present(pgd))</span>
<span class="p_add">+				goto out_unlock;</span>
 		}
 
 		info = iommu_support_dev_iotlb(domain, iommu, bus, devfn);
<span class="p_chunk">@@ -1970,7 +1963,12 @@</span> <span class="p_context"> static int domain_context_mapping_one(struct dmar_domain *domain,</span>
 		iommu_flush_write_buffer(iommu);
 	}
 	iommu_enable_dev_iotlb(info);
<span class="p_del">-	spin_unlock_irqrestore(&amp;iommu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+out_unlock:</span>
<span class="p_add">+	spin_unlock(&amp;iommu-&gt;lock);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -2213,9 +2211,12 @@</span> <span class="p_context"> static inline void unlink_domain_info(struct device_domain_info *info)</span>
 static void domain_remove_dev_info(struct dmar_domain *domain)
 {
 	struct device_domain_info *info, *tmp;
<span class="p_add">+	unsigned long flags;</span>
 
<span class="p_add">+	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
 	list_for_each_entry_safe(info, tmp, &amp;domain-&gt;devices, link)
<span class="p_del">-		dmar_remove_one_dev_info(domain, info-&gt;dev);</span>
<span class="p_add">+		__dmar_remove_one_dev_info(domain, info-&gt;dev);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
 }
 
 /*
<span class="p_chunk">@@ -4517,14 +4518,16 @@</span> <span class="p_context"> static void domain_context_clear(struct intel_iommu *iommu, struct device *dev)</span>
 	pci_for_each_dma_alias(to_pci_dev(dev), &amp;domain_context_clear_one_cb, iommu);
 }
 
<span class="p_del">-static void dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
<span class="p_del">-				     struct device *dev)</span>
<span class="p_add">+static void __dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
<span class="p_add">+				       struct device *dev)</span>
 {
 	struct device_domain_info *info;
 	struct intel_iommu *iommu;
 	unsigned long flags;
 	u8 bus, devfn;
 
<span class="p_add">+	assert_spin_locked(&amp;device_domain_lock);</span>
<span class="p_add">+</span>
 	iommu = device_to_iommu(dev, &amp;bus, &amp;devfn);
 	if (!iommu)
 		return;
<span class="p_chunk">@@ -4534,9 +4537,7 @@</span> <span class="p_context"> static void dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
 	if (WARN_ON(!info))
 		return;
 
<span class="p_del">-	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
 	unlink_domain_info(info);
<span class="p_del">-	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
 
 	iommu_disable_dev_iotlb(info);
 	domain_context_clear(iommu, dev);
<span class="p_chunk">@@ -4547,6 +4548,16 @@</span> <span class="p_context"> static void dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
 	spin_unlock_irqrestore(&amp;iommu-&gt;lock, flags);
 }
 
<span class="p_add">+static void dmar_remove_one_dev_info(struct dmar_domain *domain,</span>
<span class="p_add">+				     struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;device_domain_lock, flags);</span>
<span class="p_add">+	__dmar_remove_one_dev_info(domain, dev);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;device_domain_lock, flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int md_domain_init(struct dmar_domain *domain, int guest_width)
 {
 	int adjust_width;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



