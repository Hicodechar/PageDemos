
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,2/2] iommu/amd: Add support for fast IOTLB flushing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,2/2] iommu/amd: Add support for fast IOTLB flushing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 27, 2017, 9:20 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1514366435-12723-3-git-send-email-suravee.suthikulpanit@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10133537/mbox/"
   >mbox</a>
|
   <a href="/patch/10133537/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10133537/">/patch/10133537/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	415716037D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Dec 2017 09:21:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 498752DB4E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Dec 2017 09:21:12 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3C7972DB71; Wed, 27 Dec 2017 09:21:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7E4E72DB4E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 27 Dec 2017 09:21:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751950AbdL0JVI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 27 Dec 2017 04:21:08 -0500
Received: from mail-sn1nam02on0046.outbound.protection.outlook.com
	([104.47.36.46]:43692
	&quot;EHLO NAM02-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751145AbdL0JVC (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 27 Dec 2017 04:21:02 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=2YuyGYsikhac0N0E6bbvvitLJuoTM81IkVl4yoFdW6Q=;
	b=i3yEgmFOMJM/dB+jKq/qv3DjDhorrOmwrsBsidEQYrhN7FVxtDbzsaKQA8/psXTvQwZzsQRzaRs6Y/Vio99BMFEQCwgSzYh3sep6HxFTlOm65akGSNCBZ3K12yFjK/Va/nvQDOdh/jdtIDznccMi6uGs5gSbK36aCEdyxmoLgx8=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Suravee.Suthikulpanit@amd.com; 
Received: from ssuthiku-rhel74.localdomain (114.109.128.54) by
	MWHPR12MB1742.namprd12.prod.outlook.com (10.175.55.13) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.366.8; Wed, 27 Dec 2017 09:20:58 +0000
From: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
To: linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org
Cc: joro@8bytes.org, jroedel@suse.de, alex.williamson@redhat.com,
	Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;
Subject: [RFC PATCH v2 2/2] iommu/amd: Add support for fast IOTLB flushing
Date: Wed, 27 Dec 2017 04:20:35 -0500
Message-Id: &lt;1514366435-12723-3-git-send-email-suravee.suthikulpanit@amd.com&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1514366435-12723-1-git-send-email-suravee.suthikulpanit@amd.com&gt;
References: &lt;1514366435-12723-1-git-send-email-suravee.suthikulpanit@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [114.109.128.54]
X-ClientProxiedBy: HK2PR02CA0155.apcprd02.prod.outlook.com (10.171.30.15) To
	MWHPR12MB1742.namprd12.prod.outlook.com (10.175.55.13)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 11d7473f-755f-4d03-23e7-08d54d0b254b
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(4534020)(4602075)(4627115)(201703031133081)(201702281549075)(5600026)(4604075)(48565401081)(2017052603307)(7153060);
	SRVR:MWHPR12MB1742; 
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	3:heP+UGlRkctk/MlkUR07+F3iVenKbJUSSkGRQg30I8N6SHrKs7quLEpoHpQcDvcFscCq29OyuPpVXgJ28OplqZ7A4rBRghkFNdAmuJ1ks6KMPgRF4DPZ8ZUkOD68son4nWWRpxGrccx5j6y7z46F6Ali4razL+I3uFJVtoobr5whWxA1DcHP8SRefFdMxrLbFkOB8CF5pODmKytgFTsZNt+44JAn6L7p7PCXrX1s5L/6sWegd5d5L8F9bj1MiMkw;
	25:fUTcLWMYbIRnf+/wt9I/fg27FXWbkyjSmzWg+iL7LR+7CjcjrJOPm0MUNFr+62hTeJ2II3+oAIQAyjS7gxAxBg3jmGpLXlRgMafvK0lxzRk+KAMs2/ukao7yPYeYlEkSGuTXmk3P5hpn6RRkXEvxLIV5RkS2/YvUD95TeamdqsxQ+seB7sh+zYMFwSQ2Hhnu9GGJBuibx8JgpYhZ7XDnHaHomgwfrNRTjGpaok4TFss2oufF/jLTzUqbZftTiY8oNn44jAWdzStO1n+ivGV5krIyC3N/AeAcIsE3vs2Qc5x8Gw+Nne43Wz/nEn5z67qs4ghuT3o1jWmI0V2CGSGXSQ==;
	31:uXGw9Fi50hU7nwsoGyxpQRf0sGq2oZkYUgGQvxFMc2Suq2bJhFo9zpNGhY3egMnYoL8O5JZycsBnTlYXwg680Z4fzt8JoijmGVnSEVToGvFdI6qJSlEOnPTDx044c3ul6q04arwF55V/g3vI9h9v2PgVoTYUYTvE37Sn/3giaJhRvOJlvrsIpfy/MZLQy43zT35K64Ii00HtDa9uGE/3bROQo+L9dO55OB/zqLPOROE=
X-MS-TrafficTypeDiagnostic: MWHPR12MB1742:
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	20:AakeINgcWk48A7i7s44J1T2YX9E+O1PVKFcPU+MRh7tf7Jd4/tWyrDGDdL7BHpVTYBa//pUnFCVUkzNbd32IHiz5I6AXt7bma0l6C/09/Cdmm5fUuLOz6oEXhYp2I1PPbIFstPTGxxFbkkGoepxCtVOrx3JLpXGGfgTjYda25OHAenVddDmvjfyrn7N2lFTGgWglL17kuVwW/4YXEGOAAlUYsDZ8SD7ZgFFNThnu6r/A2lE/GEvRyDMT+S1k8peZs0S12C/fxB8LumINfrtEso3Ywo5P/SVVbPji1YKUZqbuYVTHnd+omhQb+CZvh78gGvQ1LCPnQErJL/aKkLX9XRVKnJ9ow/nhvM4c6BS0Jb0qccyPyBHGbN9J3LJJzILp8jejBz9xiQQ78oYAwVpgY01b0Zyxus1ttrM/TR0/rofC68ydWWPJRJJrcFC977FCqtV4ofCQVUk01riZpxi4OpgU1d5QpJ2HhfK5kd9Yf6zwpg8oCvA/dbWCIVck4jPi;
	4:/TjKEZqeLs9MI/9vavsx5tmEtXiZdlObGgiUcKYGaHgcewXPolxCBK8EPHPxLu5OHGEmV+zG6iqZ/2ytedtM2BZTUJmJjmPqARKFO+IxS1rqo3KsdZW49eAcqEY9qeMthw7CkF/qoXNcNJrkUkxLOQ0B+uxuPLxmTN4w6lJZv63Cwxagk5333oMp3RV0o6rB2rl5uVZ0qTVeYfL3pC7rIyuQ0NqFfzVhf8r0fqHGFULeg1hp6AAyHPnUtdybqXIyGrnP0/fErtF8Ltyd2DhEHWVCcUohOlXaoBbsVt1eNWm7RiYZ+DQfaf9cdiqYYzAz
X-Microsoft-Antispam-PRVS: &lt;MWHPR12MB174220F57FFA8BB6ACBAB46FF3070@MWHPR12MB1742.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040470)(2401047)(5005006)(8121501046)(3231023)(944501075)(93006095)(93001095)(10201501046)(3002001)(6055026)(6041268)(20161123564045)(20161123562045)(201703131423095)(201702281528075)(20161123555045)(201703061421075)(201703061406153)(20161123560045)(20161123558120)(6072148)(201708071742011);
	SRVR:MWHPR12MB1742; BCL:0; PCL:0;
	RULEID:(100000803101)(100110400095); SRVR:MWHPR12MB1742; 
X-Forefront-PRVS: 0534947130
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(396003)(376002)(39380400002)(366004)(346002)(39860400002)(199004)(189003)(68736007)(25786009)(106356001)(105586002)(6486002)(8936002)(97736004)(66066001)(86362001)(47776003)(3846002)(6116002)(4720700003)(5660300001)(7736002)(305945005)(6666003)(2950100002)(8676002)(81166006)(81156014)(50226002)(72206003)(478600001)(316002)(16526018)(16586007)(2906002)(4326008)(59450400001)(53936002)(51416003)(50466002)(48376002)(6512007)(36756003)(5890100001)(52116002)(386003)(6506007)(76176011)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:MWHPR12MB1742;
	H:ssuthiku-rhel74.localdomain; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; MWHPR12MB1742;
	23:zEsyplSHqKD8hwerHmdzTa/L/M7qhMVpqBRNfkFnp?=
	=?us-ascii?Q?GOXnRwvL3qHb1iws0jrVgGZnZvpKwdIpGiVYkoF3fuPuaJibtMuLEdwvShhg?=
	=?us-ascii?Q?Hz2EJNui1Bo5/jEsQQWQ0dsTpFlZsgCQ9/MpidzyaqVSE71JNzhPN7d16mGn?=
	=?us-ascii?Q?ZSPZmAaz0B65slba6K330ENB3ZmU1rPwha9owZB609pfeTHxtiebtsMBxk+L?=
	=?us-ascii?Q?zaBC/sTKJmFxRKjgjwUFTfV8/tPQoTFY3udZmQzt6/uRVb/tLDNWoPioXMo8?=
	=?us-ascii?Q?8NX503h+BoI6mo9CW3ZWPjGayUlR6MnyKXdRX04OK5FgYLYKNxFxbHY60b24?=
	=?us-ascii?Q?QQ/ye/4ATWXjvOFcQhokiUHqdUjhg9cU88Zl+SAL7KvswRp3p5EuF61Q5y9N?=
	=?us-ascii?Q?NKqrQu4H7qr/vsuuyujLPFYCQbVga/IxmFWtPzvo/zHcS5BZ0HGWpv79o5ci?=
	=?us-ascii?Q?M1Ur89ZAnaBJv9wEJ17D0eeMQHEMr1NBM0IXiekjZpMgz5MOyJnPG17gqj+B?=
	=?us-ascii?Q?58j7WwXyQaSEKf/FciIhYx+RJ/jiwdcBy1mVU8tqzDIcjj8x1mWaYLU1yxx/?=
	=?us-ascii?Q?f6rt9zXwnZ3zwzIR6d/RVrIidwV6IRF4EHeWNRZVDVlTjyCNldT5xC28lvjf?=
	=?us-ascii?Q?1CwYqbxkBUMeV+5B5Z3zxa+MXKq/wWHQdrbgh35CS/iYLCYQrK3GMtIfgXLZ?=
	=?us-ascii?Q?YO8VxbFrnc8/zdT9dU+mXYhkU0p+Tr05gFVSNho/yZjEIU5htuaendZOlI22?=
	=?us-ascii?Q?1RwfuE8WJj22A9CSqy27nHl4/yaROm1PFwGAJ9OqI76abaruTDXaILo0eVy1?=
	=?us-ascii?Q?y0iW3n9XYftPW/KsrcNUClRm0CMUCAKtDNusCSmu9X4WuV9ShvmO1n16DpdR?=
	=?us-ascii?Q?oTk9aHasi8ugYxnBsvSMv7gsKSrxZ18aLWlvtNoVgeS8zWa6wiilHAUPImvw?=
	=?us-ascii?Q?UbGAkLd85rdA1FQjmiCSAHJKoc5Zi0A3o8LrnEWXMo2CFJwdPEgmOmYmczbY?=
	=?us-ascii?Q?Ny8Aaa0AtS527IVWjRT2jmou2EEJ/ji/yf/kzC6+3oH3vz7y/7Jbfxf1cEut?=
	=?us-ascii?Q?chYDLjKzD2lKl1MBhxE6NlywBfK6BEhixyOayjhensmk25yNqRnrFgrw0OmT?=
	=?us-ascii?Q?9aolx5Ln5ALJyiPOHCWGc71riDWpCjkKsHUfXb5JQrubJclOD2SeZLUdxOG2?=
	=?us-ascii?Q?585on3GmEhqBow=3D?=
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	6:e4V0kB+2BNzHQ9NIUa+YU7juQqNK4yNck4Jadfmqfza/LL4Q3nuLvS/WieCBjQm6Xej9mj9cfma4fwI4tRZ8KuEN1nQ2bKYuM/8FREpCLEZPCPzCcFz6VcbpIL9IzGhTZaAuLVCGIfmN6e2cy1UrzS2Z9hYMXb11pkO3SKT+ZA8d19fy0aK+yONuC2fV06zh5Js3WmjLG1uOEE65XjXE7OootwKyjarNk9osVYxhSyg/0w+MDWH2a3L5jv46WAMVyV06e0k1jjYNyYLPde7kG2TwmkUaAfTa95M8QjEKyEPNCmo8QESZw1G9oxSmY+WHVydagZkRMsV5sKPZm+wOqfQTZDSHzzQU3/Vmy87AzO8=;
	5:9i/4r9doXwaQwfyqMSsZvas1E7gGcekpyawtFqxQu8TUXU62NTwBTm0HJY2NXbDcEJDWRn4goxT+qIAFM6nMOGLKr+6lN7sjiDsc3O/NTFtTNW9PJ86qBoBpoaSKJCOHbkDugeSZsWCO0QIxo/I6BBeH5HIfh7hbpsr5gTec8o4=;
	24:yInDlxU5WPTAFOedhikknxDr5c3Ib0ShGrNhXJrU0wg+QJEpZxsdo6MUQAShXL0SQYlk+Lu3RWvG8dEO8QteXycpWFGaQeGzsGHLoq1bQfg=;
	7:r6ch5Edzd91C52i5L1hiREEZvZX7BXDQe74Kqk6IAp2pB2ACFVssyFzXt5AB6nr3kMwoRl3nZtzIERUmv9LQG+apDCE+pAKlH/8STumkVM8UOWn+QUkSZNEv4FyBRB5/VDhi7DU8I23HD7UifGYryhLFMz4+ZcvPl5bkj2nCAAn3RBeHtkM7UvtNJVz1YzJkbwDDVJ5IvHmvkUXbLJFFVJP8gTl7BqNayBqUpUySE4fBS+MaYKbUw8/doVortn4e
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; MWHPR12MB1742;
	20:MNxA+GZtVB0w59F1lwtjpoNHwK+nMuTFEczSW8mG2pZiXiwa9XGWkZDsNE2N8dxQnAZak5NvZNMdHxdb+ndCx6wypuabfyghfCUC775l1x3gRHwDLhB8g/+PS/tJmTAWOpJzX1cNx1DoxW+OW+QtxYhYiarZeUimT7CSvMgt/WtB7mcyiZumiFogfc3KFNKB255pLDJwZIVTOeqMtCTOCX7xKzpzFIB/Q0KAjTXKIGxSqSjz9Ohe9mDCKXOWo9nB
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 27 Dec 2017 09:20:58.8141
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 11d7473f-755f-4d03-23e7-08d54d0b254b
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MWHPR12MB1742
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Dec. 27, 2017, 9:20 a.m.</div>
<pre class="content">
Implement the newly added IOTLB flushing interface for AMD IOMMU.
<span class="signed-off-by">
Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
---
 drivers/iommu/amd_iommu.c       | 73 ++++++++++++++++++++++++++++++++++++++++-
 drivers/iommu/amd_iommu_init.c  |  7 ++++
 drivers/iommu/amd_iommu_types.h |  7 ++++
 3 files changed, 86 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Jan. 22, 2018, 3:41 a.m.</div>
<pre class="content">
Hi Joerg,

Do you have any feedback regarding this patch for AMD IOMMU? I&#39;m re-sending the patch 1/2
separately per Alex&#39;s suggestion.

Thanks,
Suravee

On 12/27/17 4:20 PM, Suravee Suthikulpanit wrote:
<span class="quote">&gt; Implement the newly added IOTLB flushing interface for AMD IOMMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu.c       | 73 ++++++++++++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu_init.c  |  7 ++++</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu_types.h |  7 ++++</span>
<span class="quote">&gt;   3 files changed, 86 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; index 7d5eb00..42fe365 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; @@ -129,6 +129,12 @@ struct dma_ops_domain {</span>
<span class="quote">&gt;   static struct iova_domain reserved_iova_ranges;</span>
<span class="quote">&gt;   static struct lock_class_key reserved_rbtree_key;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +struct amd_iommu_flush_entries {</span>
<span class="quote">&gt; +	struct list_head list;</span>
<span class="quote">&gt; +	unsigned long iova;</span>
<span class="quote">&gt; +	size_t size;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   /****************************************************************************</span>
<span class="quote">&gt;    *</span>
<span class="quote">&gt;    * Helper functions</span>
<span class="quote">&gt; @@ -3043,7 +3049,6 @@ static size_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
<span class="quote">&gt;   	unmap_size = iommu_unmap_page(domain, iova, page_size);</span>
<span class="quote">&gt;   	mutex_unlock(&amp;domain-&gt;api_lock);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -	domain_flush_tlb_pde(domain);</span>
<span class="quote">&gt;   	domain_flush_complete(domain);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	return unmap_size;</span>
<span class="quote">&gt; @@ -3163,6 +3168,69 @@ static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
<span class="quote">&gt;   	return dev_data-&gt;defer_attach;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +static void amd_iommu_flush_iotlb_all(struct iommu_domain *domain)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct protection_domain *dom = to_pdomain(domain);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	domain_flush_tlb_pde(dom);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void amd_iommu_iotlb_range_add(struct iommu_domain *domain,</span>
<span class="quote">&gt; +				      unsigned long iova, size_t size)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct amd_iommu_flush_entries *entry, *p;</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +	bool found = false;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +	list_for_each_entry(p, &amp;amd_iommu_flush_list, list) {</span>
<span class="quote">&gt; +		if (iova != p-&gt;iova)</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (size &gt; p-&gt;size) {</span>
<span class="quote">&gt; +			p-&gt;size = size;</span>
<span class="quote">&gt; +			pr_debug(&quot;%s: update range: iova=%#lx, size = %#lx\n&quot;,</span>
<span class="quote">&gt; +				 __func__, p-&gt;iova, p-&gt;size);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		found = true;</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!found) {</span>
<span class="quote">&gt; +		entry = kzalloc(sizeof(struct amd_iommu_flush_entries),</span>
<span class="quote">&gt; +				GFP_KERNEL);</span>
<span class="quote">&gt; +		if (entry) {</span>
<span class="quote">&gt; +			pr_debug(&quot;%s: new range: iova=%lx, size=%#lx\n&quot;,</span>
<span class="quote">&gt; +				 __func__, iova, size);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			entry-&gt;iova = iova;</span>
<span class="quote">&gt; +			entry-&gt;size = size;</span>
<span class="quote">&gt; +			list_add(&amp;entry-&gt;list, &amp;amd_iommu_flush_list);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void amd_iommu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct protection_domain *pdom = to_pdomain(domain);</span>
<span class="quote">&gt; +	struct amd_iommu_flush_entries *entry, *next;</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Note:</span>
<span class="quote">&gt; +	 * Currently, IOMMU driver just flushes the whole IO/TLB for</span>
<span class="quote">&gt; +	 * a given domain. So, just remove entries from the list here.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +	list_for_each_entry_safe(entry, next, &amp;amd_iommu_flush_list, list) {</span>
<span class="quote">&gt; +		list_del(&amp;entry-&gt;list);</span>
<span class="quote">&gt; +		kfree(entry);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	domain_flush_tlb_pde(pdom);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   const struct iommu_ops amd_iommu_ops = {</span>
<span class="quote">&gt;   	.capable = amd_iommu_capable,</span>
<span class="quote">&gt;   	.domain_alloc = amd_iommu_domain_alloc,</span>
<span class="quote">&gt; @@ -3181,6 +3249,9 @@ static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
<span class="quote">&gt;   	.apply_resv_region = amd_iommu_apply_resv_region,</span>
<span class="quote">&gt;   	.is_attach_deferred = amd_iommu_is_attach_deferred,</span>
<span class="quote">&gt;   	.pgsize_bitmap	= AMD_IOMMU_PGSIZES,</span>
<span class="quote">&gt; +	.flush_iotlb_all = amd_iommu_flush_iotlb_all,</span>
<span class="quote">&gt; +	.iotlb_range_add = amd_iommu_iotlb_range_add,</span>
<span class="quote">&gt; +	.iotlb_sync = amd_iommu_iotlb_sync,</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   /*****************************************************************************</span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c</span>
<span class="quote">&gt; index 6fe2d03..e8f8cee 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu_init.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu_init.c</span>
<span class="quote">&gt; @@ -185,6 +185,12 @@ struct ivmd_header {</span>
<span class="quote">&gt;   bool amd_iommu_force_isolation __read_mostly;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt; + * IOTLB flush list</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +LIST_HEAD(amd_iommu_flush_list);</span>
<span class="quote">&gt; +spinlock_t amd_iommu_flush_list_lock;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt;    * List of protection domains - used during resume</span>
<span class="quote">&gt;    */</span>
<span class="quote">&gt;   LIST_HEAD(amd_iommu_pd_list);</span>
<span class="quote">&gt; @@ -2490,6 +2496,7 @@ static int __init early_amd_iommu_init(void)</span>
<span class="quote">&gt;   	__set_bit(0, amd_iommu_pd_alloc_bitmap);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	spin_lock_init(&amp;amd_iommu_pd_lock);</span>
<span class="quote">&gt; +	spin_lock_init(&amp;amd_iommu_flush_list_lock);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	/*</span>
<span class="quote">&gt;   	 * now the data structures are allocated and basically initialized</span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h</span>
<span class="quote">&gt; index f6b24c7..c3f4a7e 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu_types.h</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu_types.h</span>
<span class="quote">&gt; @@ -668,6 +668,13 @@ struct iommu_dev_data {</span>
<span class="quote">&gt;   extern struct list_head amd_iommu_pd_list;</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt; + * Declarations for the global flush list to support</span>
<span class="quote">&gt; + * iotlb_range_add() and iotlb_sync.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +extern spinlock_t amd_iommu_flush_list_lock;</span>
<span class="quote">&gt; +extern struct list_head amd_iommu_flush_list;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt;    * Structure defining one entry in the device table</span>
<span class="quote">&gt;    */</span>
<span class="quote">&gt;   struct dev_table_entry {</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2908">Suthikulpanit, Suravee</a> - Jan. 24, 2018, 11:43 a.m.</div>
<pre class="content">
Hi Joerg,

On 12/27/17 4:20 PM, Suravee Suthikulpanit wrote:
<span class="quote">&gt; Implement the newly added IOTLB flushing interface for AMD IOMMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Suravee Suthikulpanit &lt;suravee.suthikulpanit@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu.c       | 73 ++++++++++++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu_init.c  |  7 ++++</span>
<span class="quote">&gt;   drivers/iommu/amd_iommu_types.h |  7 ++++</span>
<span class="quote">&gt;   3 files changed, 86 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; index 7d5eb00..42fe365 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/amd_iommu.c</span>
<span class="quote">&gt;  ...</span>
<span class="quote">&gt; @@ -3163,6 +3168,69 @@ static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
<span class="quote">&gt;   	return dev_data-&gt;defer_attach;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +static void amd_iommu_flush_iotlb_all(struct iommu_domain *domain)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct protection_domain *dom = to_pdomain(domain);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	domain_flush_tlb_pde(dom);</span>
<span class="quote">&gt; +}</span>

I made a mistake here ...
<span class="quote">
&gt; ...</span>
<span class="quote">&gt; +static void amd_iommu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct protection_domain *pdom = to_pdomain(domain);</span>
<span class="quote">&gt; +	struct amd_iommu_flush_entries *entry, *next;</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Note:</span>
<span class="quote">&gt; +	 * Currently, IOMMU driver just flushes the whole IO/TLB for</span>
<span class="quote">&gt; +	 * a given domain. So, just remove entries from the list here.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +	list_for_each_entry_safe(entry, next, &amp;amd_iommu_flush_list, list) {</span>
<span class="quote">&gt; +		list_del(&amp;entry-&gt;list);</span>
<span class="quote">&gt; +		kfree(entry);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	domain_flush_tlb_pde(pdom);</span>
<span class="quote">&gt; +}</span>

... and here where I should also call domain_flush_complete() after
domain_flush_tlb_pde(). I&#39;ll send out a new version (v3) as a separate patch
from the series.

Thanks,
Suravee
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 7d5eb00..42fe365 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -129,6 +129,12 @@</span> <span class="p_context"> struct dma_ops_domain {</span>
 static struct iova_domain reserved_iova_ranges;
 static struct lock_class_key reserved_rbtree_key;
 
<span class="p_add">+struct amd_iommu_flush_entries {</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+	unsigned long iova;</span>
<span class="p_add">+	size_t size;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /****************************************************************************
  *
  * Helper functions
<span class="p_chunk">@@ -3043,7 +3049,6 @@</span> <span class="p_context"> static size_t amd_iommu_unmap(struct iommu_domain *dom, unsigned long iova,</span>
 	unmap_size = iommu_unmap_page(domain, iova, page_size);
 	mutex_unlock(&amp;domain-&gt;api_lock);
 
<span class="p_del">-	domain_flush_tlb_pde(domain);</span>
 	domain_flush_complete(domain);
 
 	return unmap_size;
<span class="p_chunk">@@ -3163,6 +3168,69 @@</span> <span class="p_context"> static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
 	return dev_data-&gt;defer_attach;
 }
 
<span class="p_add">+static void amd_iommu_flush_iotlb_all(struct iommu_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct protection_domain *dom = to_pdomain(domain);</span>
<span class="p_add">+</span>
<span class="p_add">+	domain_flush_tlb_pde(dom);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void amd_iommu_iotlb_range_add(struct iommu_domain *domain,</span>
<span class="p_add">+				      unsigned long iova, size_t size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct amd_iommu_flush_entries *entry, *p;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	bool found = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+	list_for_each_entry(p, &amp;amd_iommu_flush_list, list) {</span>
<span class="p_add">+		if (iova != p-&gt;iova)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (size &gt; p-&gt;size) {</span>
<span class="p_add">+			p-&gt;size = size;</span>
<span class="p_add">+			pr_debug(&quot;%s: update range: iova=%#lx, size = %#lx\n&quot;,</span>
<span class="p_add">+				 __func__, p-&gt;iova, p-&gt;size);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		found = true;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!found) {</span>
<span class="p_add">+		entry = kzalloc(sizeof(struct amd_iommu_flush_entries),</span>
<span class="p_add">+				GFP_KERNEL);</span>
<span class="p_add">+		if (entry) {</span>
<span class="p_add">+			pr_debug(&quot;%s: new range: iova=%lx, size=%#lx\n&quot;,</span>
<span class="p_add">+				 __func__, iova, size);</span>
<span class="p_add">+</span>
<span class="p_add">+			entry-&gt;iova = iova;</span>
<span class="p_add">+			entry-&gt;size = size;</span>
<span class="p_add">+			list_add(&amp;entry-&gt;list, &amp;amd_iommu_flush_list);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void amd_iommu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct protection_domain *pdom = to_pdomain(domain);</span>
<span class="p_add">+	struct amd_iommu_flush_entries *entry, *next;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Note:</span>
<span class="p_add">+	 * Currently, IOMMU driver just flushes the whole IO/TLB for</span>
<span class="p_add">+	 * a given domain. So, just remove entries from the list here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	spin_lock_irqsave(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+	list_for_each_entry_safe(entry, next, &amp;amd_iommu_flush_list, list) {</span>
<span class="p_add">+		list_del(&amp;entry-&gt;list);</span>
<span class="p_add">+		kfree(entry);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;amd_iommu_flush_list_lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	domain_flush_tlb_pde(pdom);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 const struct iommu_ops amd_iommu_ops = {
 	.capable = amd_iommu_capable,
 	.domain_alloc = amd_iommu_domain_alloc,
<span class="p_chunk">@@ -3181,6 +3249,9 @@</span> <span class="p_context"> static bool amd_iommu_is_attach_deferred(struct iommu_domain *domain,</span>
 	.apply_resv_region = amd_iommu_apply_resv_region,
 	.is_attach_deferred = amd_iommu_is_attach_deferred,
 	.pgsize_bitmap	= AMD_IOMMU_PGSIZES,
<span class="p_add">+	.flush_iotlb_all = amd_iommu_flush_iotlb_all,</span>
<span class="p_add">+	.iotlb_range_add = amd_iommu_iotlb_range_add,</span>
<span class="p_add">+	.iotlb_sync = amd_iommu_iotlb_sync,</span>
 };
 
 /*****************************************************************************
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">index 6fe2d03..e8f8cee 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_chunk">@@ -185,6 +185,12 @@</span> <span class="p_context"> struct ivmd_header {</span>
 bool amd_iommu_force_isolation __read_mostly;
 
 /*
<span class="p_add">+ * IOTLB flush list</span>
<span class="p_add">+ */</span>
<span class="p_add">+LIST_HEAD(amd_iommu_flush_list);</span>
<span class="p_add">+spinlock_t amd_iommu_flush_list_lock;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * List of protection domains - used during resume
  */
 LIST_HEAD(amd_iommu_pd_list);
<span class="p_chunk">@@ -2490,6 +2496,7 @@</span> <span class="p_context"> static int __init early_amd_iommu_init(void)</span>
 	__set_bit(0, amd_iommu_pd_alloc_bitmap);
 
 	spin_lock_init(&amp;amd_iommu_pd_lock);
<span class="p_add">+	spin_lock_init(&amp;amd_iommu_flush_list_lock);</span>
 
 	/*
 	 * now the data structures are allocated and basically initialized
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">index f6b24c7..c3f4a7e 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_chunk">@@ -668,6 +668,13 @@</span> <span class="p_context"> struct iommu_dev_data {</span>
 extern struct list_head amd_iommu_pd_list;
 
 /*
<span class="p_add">+ * Declarations for the global flush list to support</span>
<span class="p_add">+ * iotlb_range_add() and iotlb_sync.</span>
<span class="p_add">+ */</span>
<span class="p_add">+extern spinlock_t amd_iommu_flush_list_lock;</span>
<span class="p_add">+extern struct list_head amd_iommu_flush_list;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * Structure defining one entry in the device table
  */
 struct dev_table_entry {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



