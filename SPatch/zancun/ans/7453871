
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/4] mm/hugetlb: page faults check for fallocate hole punch in progress and wait - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/4] mm/hugetlb: page faults check for fallocate hole punch in progress and wait</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 20, 2015, 11:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1445385142-29936-4-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7453871/mbox/"
   >mbox</a>
|
   <a href="/patch/7453871/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7453871/">/patch/7453871/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 5C2C7BEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:54:00 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 6E8832089C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:59 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 7B70320898
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753123AbbJTXxs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:48 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:49929 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752829AbbJTXx0 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:26 -0400
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t9KNqxtb022036
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 20 Oct 2015 23:53:00 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0021.oracle.com (8.13.8/8.13.8) with ESMTP id t9KNqwAD010109
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 20 Oct 2015 23:52:59 GMT
Received: from abhmp0001.oracle.com (abhmp0001.oracle.com [141.146.116.7])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id t9KNqwGm005025; 
	Tue, 20 Oct 2015 23:52:58 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 20 Oct 2015 16:52:58 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v2 3/4] mm/hugetlb: page faults check for fallocate hole
	punch in progress and wait
Date: Tue, 20 Oct 2015 16:52:21 -0700
Message-Id: &lt;1445385142-29936-4-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Oct. 20, 2015, 11:52 p.m.</div>
<pre class="content">
At page fault time, check i_private which indicates a fallocate hole punch
is in progress.  If the fault falls within the hole, wait for the hole
punch operation to complete before proceeding with the fault.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - Oct. 28, 2015, 3:37 a.m.</div>
<pre class="content">
On Tue, 20 Oct 2015, Mike Kravetz wrote:
<span class="quote">
&gt; At page fault time, check i_private which indicates a fallocate hole punch</span>
<span class="quote">&gt; is in progress.  If the fault falls within the hole, wait for the hole</span>
<span class="quote">&gt; punch operation to complete before proceeding with the fault.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 39 +++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 39 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 3c7db92..2a5e9b4 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -3580,6 +3580,7 @@ int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	struct page *pagecache_page = NULL;</span>
<span class="quote">&gt;  	struct hstate *h = hstate_vma(vma);</span>
<span class="quote">&gt;  	struct address_space *mapping;</span>
<span class="quote">&gt; +	struct inode *inode = file_inode(vma-&gt;vm_file);</span>
<span class="quote">&gt;  	int need_wait_lock = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	address &amp;= huge_page_mask(h);</span>
<span class="quote">&gt; @@ -3603,6 +3604,44 @@ int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; +	 * page faults could race with fallocate hole punch.  If a page</span>
<span class="quote">&gt; +	 * is faulted between unmap and deallocation, it will still remain</span>
<span class="quote">&gt; +	 * in the punched hole.  During hole punch operations, a hugetlb_falloc</span>
<span class="quote">&gt; +	 * structure will be pointed to by i_private.  If this fault is for</span>
<span class="quote">&gt; +	 * a page in a hole being punched, wait for the operation to finish</span>
<span class="quote">&gt; +	 * before proceeding.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * Even with this strategy, it is still possible for a page fault to</span>
<span class="quote">&gt; +	 * race with hole punch.  In this case, remove_inode_hugepages() will</span>
<span class="quote">&gt; +	 * unmap the page and then remove.  Checking i_private as below should</span>
<span class="quote">&gt; +	 * catch most of these races as we want to minimize unmapping a page</span>
<span class="quote">&gt; +	 * multiple times.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (unlikely(inode-&gt;i_private)) {</span>
<span class="quote">&gt; +		struct hugetlb_falloc *hugetlb_falloc;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; +		hugetlb_falloc = inode-&gt;i_private;</span>
<span class="quote">&gt; +		if (hugetlb_falloc &amp;&amp; hugetlb_falloc-&gt;waitq &amp;&amp;</span>

Not important, but that &quot;&amp;&amp; hugetlb_falloc-&gt;waitq &quot; is redundant.
<span class="quote">
&gt; +		    idx &gt;= hugetlb_falloc-&gt;start &amp;&amp;</span>
<span class="quote">&gt; +		    idx &lt;= hugetlb_falloc-&gt;end) {</span>

Not important, but &quot;idx &lt; hugetlb_falloc-&gt;end&quot; would be better.
<span class="quote">
&gt; +			wait_queue_head_t *hugetlb_falloc_waitq;</span>
<span class="quote">&gt; +			DEFINE_WAIT(hugetlb_fault_wait);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			hugetlb_falloc_waitq = hugetlb_falloc-&gt;waitq;</span>
<span class="quote">&gt; +			prepare_to_wait(hugetlb_falloc_waitq,</span>
<span class="quote">&gt; +					&amp;hugetlb_fault_wait,</span>
<span class="quote">&gt; +					TASK_UNINTERRUPTIBLE);</span>
<span class="quote">&gt; +			spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; +			schedule();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; +			finish_wait(hugetlb_falloc_waitq, &amp;hugetlb_fault_wait);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt;  	 * Serialize hugepage allocation and instantiation, so that we don&#39;t</span>
<span class="quote">&gt;  	 * get spurious allocation failures if two CPUs race to instantiate</span>
<span class="quote">&gt;  	 * the same page in the page cache.</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.4.3</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 3c7db92..2a5e9b4 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3580,6 +3580,7 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	struct page *pagecache_page = NULL;
 	struct hstate *h = hstate_vma(vma);
 	struct address_space *mapping;
<span class="p_add">+	struct inode *inode = file_inode(vma-&gt;vm_file);</span>
 	int need_wait_lock = 0;
 
 	address &amp;= huge_page_mask(h);
<span class="p_chunk">@@ -3603,6 +3604,44 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	idx = vma_hugecache_offset(h, vma, address);
 
 	/*
<span class="p_add">+	 * page faults could race with fallocate hole punch.  If a page</span>
<span class="p_add">+	 * is faulted between unmap and deallocation, it will still remain</span>
<span class="p_add">+	 * in the punched hole.  During hole punch operations, a hugetlb_falloc</span>
<span class="p_add">+	 * structure will be pointed to by i_private.  If this fault is for</span>
<span class="p_add">+	 * a page in a hole being punched, wait for the operation to finish</span>
<span class="p_add">+	 * before proceeding.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Even with this strategy, it is still possible for a page fault to</span>
<span class="p_add">+	 * race with hole punch.  In this case, remove_inode_hugepages() will</span>
<span class="p_add">+	 * unmap the page and then remove.  Checking i_private as below should</span>
<span class="p_add">+	 * catch most of these races as we want to minimize unmapping a page</span>
<span class="p_add">+	 * multiple times.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (unlikely(inode-&gt;i_private)) {</span>
<span class="p_add">+		struct hugetlb_falloc *hugetlb_falloc;</span>
<span class="p_add">+</span>
<span class="p_add">+		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+		hugetlb_falloc = inode-&gt;i_private;</span>
<span class="p_add">+		if (hugetlb_falloc &amp;&amp; hugetlb_falloc-&gt;waitq &amp;&amp;</span>
<span class="p_add">+		    idx &gt;= hugetlb_falloc-&gt;start &amp;&amp;</span>
<span class="p_add">+		    idx &lt;= hugetlb_falloc-&gt;end) {</span>
<span class="p_add">+			wait_queue_head_t *hugetlb_falloc_waitq;</span>
<span class="p_add">+			DEFINE_WAIT(hugetlb_fault_wait);</span>
<span class="p_add">+</span>
<span class="p_add">+			hugetlb_falloc_waitq = hugetlb_falloc-&gt;waitq;</span>
<span class="p_add">+			prepare_to_wait(hugetlb_falloc_waitq,</span>
<span class="p_add">+					&amp;hugetlb_fault_wait,</span>
<span class="p_add">+					TASK_UNINTERRUPTIBLE);</span>
<span class="p_add">+			spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+			schedule();</span>
<span class="p_add">+</span>
<span class="p_add">+			spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+			finish_wait(hugetlb_falloc_waitq, &amp;hugetlb_fault_wait);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
 	 * Serialize hugepage allocation and instantiation, so that we don&#39;t
 	 * get spurious allocation failures if two CPUs race to instantiate
 	 * the same page in the page cache.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



