
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] iommu/dma/pci: account pci host bridge dma_mask for IOVA allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] iommu/dma/pci: account pci host bridge dma_mask for IOVA allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 20, 2017, 5:49 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;a1d5216c6ed5b071848d696a1681021f@mail.gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9635179/mbox/"
   >mbox</a>
|
   <a href="/patch/9635179/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9635179/">/patch/9635179/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	25F8160132 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 18:41:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1B81B25D99
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 18:41:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0FF7926530; Mon, 20 Mar 2017 18:41:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D833225D99
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Mar 2017 18:41:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932737AbdCTSla (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Mar 2017 14:41:30 -0400
Received: from mail-pg0-f48.google.com ([74.125.83.48]:34057 &quot;EHLO
	mail-pg0-f48.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755760AbdCTRui (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Mar 2017 13:50:38 -0400
Received: by mail-pg0-f48.google.com with SMTP id 21so47653902pgg.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 20 Mar 2017 10:49:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=broadcom.com; s=google;
	h=from:references:in-reply-to:mime-version:thread-index:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=0r4ZhnTTioTvNxXayu/JDXcL5n5mpTf+AQgP04WAdfE=;
	b=hKQMsEoFgxg8gEWoTkKVy8V0O1Xis4537XoAywPV+8N/YB5BrV3DqZmh/z8Yh3BZEy
	1abp6blDU8P3LA9jNUrOf7Q/avGzeJLpXGIWj3BDHgibELK7UfQ0yj9s/dHyWtGSRpk+
	IUbPmxzmf6rdexlVCgX6TI6QElgVOrvPAVhlQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:references:in-reply-to:mime-version
	:thread-index:date:message-id:subject:to:cc
	:content-transfer-encoding;
	bh=0r4ZhnTTioTvNxXayu/JDXcL5n5mpTf+AQgP04WAdfE=;
	b=cOSWYR/1VrIAfxa4zdvSckI0PQZqU8wwejQvPjiMjwibod07KlJ5HN3uyyGxKxk3E2
	jV6U5+Iw4dxZdccdcLi8vTOwDa8JLpHsIQMaUxCYCj7yLyIQW/RAUPSbgfU77xaAB7b1
	9hm43mkg6OowtklC/6YkNYMts252ulG6y+OH2NTg4+37mN3+6ytYx3rqPKTENd6Kw3pu
	Jw/tkuU8c/RCXPZTZ/3WYJXrd0H5hL52C6F3p1WkQup9JKh8Iiinow3QmWfc0InZzvFj
	+OQoC6Zh8ODlxyCb+hVlNNhuMElezDU76G7bbPA6PJ61UU/WOO52pJcRQu6hSjGj6dIF
	YmJw==
X-Gm-Message-State: AFeK/H3QEAEywyNdzHDM0qdVYxoLN0CQiff8t0Rv5f6150j2XYsw6ud+6Po/jAjk88K+xnckzAnXqlUfLt5m+o6O
X-Received: by 10.84.129.67 with SMTP id 61mr41862102plb.16.1490032196993;
	Mon, 20 Mar 2017 10:49:56 -0700 (PDT)
From: Oza Oza &lt;oza.oza@broadcom.com&gt;
References: &lt;6c34297b77de0fc7fc4b44b17749cfd2@mail.gmail.com&gt;
	&lt;bddd4c81-7d71-4207-4c5f-b632403daec9@arm.com&gt;
In-Reply-To: &lt;bddd4c81-7d71-4207-4c5f-b632403daec9@arm.com&gt;
MIME-Version: 1.0
X-Mailer: Microsoft Outlook 14.0
Thread-Index: AQHKJ5jbg21ylysFb0JJ8/d79geAWwJNQXBuoZx9OEA=
Date: Mon, 20 Mar 2017 23:19:52 +0530
Message-ID: &lt;a1d5216c6ed5b071848d696a1681021f@mail.gmail.com&gt;
Subject: RE: [RFC PATCH] iommu/dma/pci: account pci host bridge dma_mask for
	IOVA allocation
To: Robin Murphy &lt;robin.murphy@arm.com&gt;
Cc: Joerg Roedel &lt;joro@8bytes.org&gt;, linux-pci@vger.kernel.org,
	iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, devicetree@vger.kernel.org,
	bcm-kernel-feedback-list@broadcom.com
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a> - March 20, 2017, 5:49 p.m.</div>
<pre class="content">
Hi Robin,

Please find my comments inline.

Regards,
Oza.

-----Original Message-----
<span class="from">From: Robin Murphy [mailto:robin.murphy@arm.com]</span>
Sent: Monday, March 20, 2017 9:14 PM
To: Oza Oza
Cc: Joerg Roedel; linux-pci@vger.kernel.org;
iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;
linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;
bcm-kernel-feedback-list@broadcom.com
Subject: Re: [RFC PATCH] iommu/dma/pci: account pci host bridge dma_mask for
IOVA allocation

On 20/03/17 08:57, Oza Oza wrote:
<span class="quote">&gt; +  linux-pci</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Oza.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: Oza Pawandeep [mailto:oza.oza@broadcom.com]</span>
<span class="quote">&gt; Sent: Friday, March 17, 2017 11:41 AM</span>
<span class="quote">&gt; To: Joerg Roedel; Robin Murphy</span>
<span class="quote">&gt; Cc: iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;</span>
<span class="quote">&gt; bcm-kernel-feedback-list@broadcom.com; Oza Pawandeep</span>
<span class="quote">&gt; Subject: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for</span>
<span class="quote">&gt; IOVA allocation</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It is possible that PCI device supports 64-bit DMA addressing, and</span>
<span class="quote">&gt; thus it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however</span>
<span class="quote">&gt; PCI host bridge may have limitations on the inbound transaction</span>
<span class="quote">&gt; addressing. As an example, consider NVME SSD device connected to</span>
<span class="quote">&gt; iproc-PCIe controller.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Currently, the IOMMU DMA ops only considers PCI device dma_mask when</span>
<span class="quote">&gt; allocating an IOVA. This is particularly problematic on</span>
<span class="quote">&gt; ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to PA for</span>
<span class="quote">&gt; in-bound transactions only after PCI Host has forwarded these</span>
<span class="quote">&gt; transactions on SOC IO bus. This means on such ARM/ARM64 SOCs the IOVA</span>
<span class="quote">&gt; of in-bound transactions has to honor the addressing restrictions of the</span>
<span class="quote">&gt; PCI Host.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; this patch is inspired by</span>
<span class="quote">&gt; http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.ht</span>
<span class="quote">&gt; ml http://www.spinics.net/lists/arm-kernel/msg566947.html</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; but above inspiraiton solves the half of the problem.</span>
<span class="quote">&gt; the rest of the problem is descrbied below, what we face on iproc</span>
<span class="quote">&gt; based SOCs.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; current pcie frmework and of framework integration assumes dma-ranges</span>
<span class="quote">&gt; in a way where memory-mapped devices define their dma-ranges.</span>
<span class="quote">&gt; dma-ranges: (child-bus-address, parent-bus-address, length).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; of_dma_configure is specifically witten to take care of memory mapped</span>
<span class="quote">&gt; devices.</span>
<span class="quote">&gt; but no implementation exists for pci to take care of pcie based memory</span>
<span class="quote">&gt; ranges.</span>
<span class="quote">&gt; in fact pci world doesnt seem to define standard dma-ranges since</span>
<span class="quote">&gt; there is an absense of the same, the dma_mask used to remain 32bit</span>
<span class="quote">&gt; because of</span>
<span class="quote">&gt; 0 size return (parsed by of_dma_configure())</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; this patch also implements of_pci_get_dma_ranges to cater to pci world</span>
<span class="quote">&gt; dma-ranges.</span>
<span class="quote">&gt; so then the returned size get best possible (largest) dma_mask.</span>
<span class="quote">&gt; for e.g.</span>
<span class="quote">&gt; dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;; we should get</span>
<span class="quote">&gt; dev-&gt;coherent_dma_mask=0x7fffffffff.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; conclusion: there are following problems</span>
<span class="quote">&gt; 1) linux pci and iommu framework integration has glitches with respect</span>
<span class="quote">&gt; to dma-ranges</span>
<span class="quote">&gt; 2) pci linux framework look very uncertain about dma-ranges, rather</span>
<span class="quote">&gt; binding is not defined</span>
<span class="quote">&gt;    the way it is defined for memory mapped devices.</span>
<span class="quote">&gt;    rcar and iproc based SOCs use their custom one dma-ranges</span>
<span class="quote">&gt;    (rather can be standard)</span>
<span class="quote">&gt; 3) even if in case of default parser of_dma_get_ranges,:</span>
<span class="quote">&gt;    it throws and erro&quot;</span>
<span class="quote">&gt;    &quot;no dma-ranges found for node&quot;</span>
<span class="quote">&gt;    because of the bug which exists.</span>
<span class="quote">&gt;    following lines should be moved to the end of while(1)</span>
<span class="quote">&gt; 	839                 node = of_get_next_parent(node);</span>
<span class="quote">&gt; 	840                 if (!node)</span>
<span class="quote">&gt; 	841                         break;</span>

Right, having made sense of this and looked into things myself I think I
understand now; what this boils down to is that the existing implementation
of of_dma_get_range() expects always to be given a leaf device_node, and
doesn&#39;t cope with being given a device_node for the given device&#39;s parent
bus directly. That&#39;s really all there is; it&#39;s not specific to PCI (there
are other probeable and DMA-capable buses whose children aren&#39;t described in
DT, like the fsl-mc thing), and it definitely doesn&#39;t have anything to do
with IOMMUs.
<span class="quote">
&gt;Oza: I think it’s the other way around, or rather it is given leaf device</span>
<span class="quote">&gt;node correctly. At-least in this case.</span>
<span class="quote">&gt;The problem is of_dma_get_range jumps to parent node  &lt;node =</span>
<span class="quote">&gt;of_get_next_parent(node);&gt; without examining child.</span>
<span class="quote">&gt;Although I tried to fix it, but in that case, the dma-ranges parse code</span>
<span class="quote">&gt;doesn’t really parse pci ranges. And size returned is 0.</span>
<span class="quote">&gt;Rather it parses memory mapped devices dma-ranges. And that format is</span>
<span class="quote">&gt;different.</span>

Now, that&#39;s certainly something to fix, but AFAICS this patch doesn&#39;t do
that, only adds some PCI-specific code which is never called.
<span class="quote">
&gt;Oza: it defines of_pci_dma_get_ranges, which does get called (ahhh......its</span>
<span class="quote">&gt;my bad that, I don’t have that call in this patch-set, probably missed that</span>
<span class="quote">&gt;file, sorry about that.)</span>
<span class="quote">&gt;I have just pasted the patch at the end, check drivers/of/device.c</span>
<span class="quote">&gt;Again, this code is specific to dma-ranges defined by pci host, which</span>
<span class="quote">&gt;differs from the way memory-mapped device define their ranges.</span>
<span class="quote">&gt;At-least that is the way binding document suggests, and current dma-range</span>
<span class="quote">&gt;doesn’t parse pci dma-ranges correctly.</span>
<span class="quote">
&gt;So this patch fixes that.</span>
<span class="quote">&gt;of_dma_configure , when it calls of_dma_get_range or in this case</span>
<span class="quote">&gt;of_pci_dma_get_ranges, both should be retuning size correctly back.</span>
<span class="quote">&gt;Because all the later statements make use of size to derive dma_mask.</span>
<span class="quote">&gt;And from there, especially for pci, it derives root bridge mask, which</span>
<span class="quote">&gt;suggests limitation of pci host bridges.</span>
<span class="quote">&gt;Now the strange thing is that this limitation does not exist for us when</span>
<span class="quote">&gt;IOMMU is disabled, which is expected because our inbound memory window just</span>
<span class="quote">&gt;programed fine to address all the available memory in the system,</span>
need not be physically contiguous.
<span class="quote">&gt;But when IOMMU is enabled, IOVA address size becomes limitation, and our</span>
<span class="quote">&gt;max window can-not go beyond 512GB which is just 39bits.</span>
<span class="quote">&gt; having said that, at-least parsing of dma-ranges is broken, and this patch</span>
<span class="quote">&gt; is the an attempt to fix that.</span>
<span class="quote">&gt; ideally I should be making pci dma-ranges patch and device patch to make</span>
<span class="quote">&gt; it look like a proper patch. Do you think this is the only and right way</span>
<span class="quote">&gt; to fix it,</span>
Or you have any other opinions ?

DMA mask inheritance for arm64 is another issue, which again is general, but
does tend to be more visible in the IOMMU case. That still needs some work
on the APCI side - all the DT-centric approaches so far either regress or at
best do nothing for ACPI. I&#39;ve made a note to try to look into that soon,
but from what I recall I fear there is still an open question about what to
do for a default in the absence of IORT or _DMA (once the current assumption
that drivers can override our arbitrary default at will is closed down).

In the meantime, have you tried 4.11-rc1 or later on the affected system?
One of the ulterior motives behind 122fac030e91 was that in many cases it
also happens to paper over most versions of this problem for PCI devices,
and makes the IOMMU at least useable (on systems which don&#39;t need to
dma_map_*() vast amounts of RAM all at once) while we fix the underlying
things properly.

Robin.

 		size = dev-&gt;coherent_dma_mask + 1;
@@ -134,10 +139,8 @@ void of_dma_configure(struct device *dev, struct
device_node *np)
 	 * Limit coherent and dma mask based on size and default mask
 	 * set by the driver.
 	 */
-	dev-&gt;coherent_dma_mask = min(dev-&gt;coherent_dma_mask,
-				     DMA_BIT_MASK(ilog2(dma_addr + size)));
-	*dev-&gt;dma_mask = min((*dev-&gt;dma_mask),
-			     DMA_BIT_MASK(ilog2(dma_addr + size)));
+	dev-&gt;coherent_dma_mask = DMA_BIT_MASK(ilog2(dma_addr + size));
+	*dev-&gt;dma_mask = dev-&gt;coherent_dma_mask;

 	coherent = of_dma_is_coherent(np);
 	dev_dbg(dev, &quot;device is%sdma coherent\n&quot;, @@ -225,30 +228,6 @@ ssize_t
of_device_get_modalias(struct device *dev, char *str, ssize_t len)

 	return tsize;
 }
--
1.9.1
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/of/of_pci.c b/drivers/of/of_pci.c index</span>
0ee42c3..5804717 100644
<span class="p_header">--- a/drivers/of/of_pci.c</span>
<span class="p_header">+++ b/drivers/of/of_pci.c</span>
<span class="p_chunk">@@ -283,6 +283,51 @@</span> <span class="p_context"> int of_pci_get_host_bridge_resources(struct device_node</span>
*dev,
 	return err;
 }
 EXPORT_SYMBOL_GPL(of_pci_get_host_bridge_resources);
<span class="p_add">+</span>
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size) {</span>
<span class="p_add">+	struct device_node *node = of_node_get(np);</span>
<span class="p_add">+	int rlen, naddr, nsize, pna;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	const int na = 3, ns = 2;</span>
<span class="p_add">+	struct of_pci_range_parser parser;</span>
<span class="p_add">+	struct of_pci_range range;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!node)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.node = node;</span>
<span class="p_add">+	parser.pna = of_n_addr_cells(node);</span>
<span class="p_add">+	parser.np = parser.pna + na + ns;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.range = of_get_property(node, &quot;dma-ranges&quot;, &amp;rlen);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!parser.range) {</span>
<span class="p_add">+		pr_debug(&quot;pcie device has no dma-ranges defined for node(%s)\n&quot;,</span>
np-&gt;full_name);
<span class="p_add">+		ret = -ENODEV;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.end = parser.range + rlen / sizeof(__be32);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* how do we take care of multiple dma windows ?. */</span>
<span class="p_add">+	for_each_of_pci_range(&amp;parser, &amp;range) {</span>
<span class="p_add">+		*dma_addr = range.pci_addr;</span>
<span class="p_add">+		*size = range.size;</span>
<span class="p_add">+		*paddr = range.cpu_addr;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_debug(&quot;dma_addr(%llx) cpu_addr(%llx) size(%llx)\n&quot;,</span>
<span class="p_add">+		 *dma_addr, *paddr, *size);</span>
<span class="p_add">+		 *dma_addr = range.pci_addr;</span>
<span class="p_add">+		 *size = range.size;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	of_node_put(node);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(of_pci_get_dma_ranges);</span>
 #endif /* CONFIG_OF_ADDRESS */

 #ifdef CONFIG_PCI_MSI
<span class="p_header">diff --git a/include/linux/of_pci.h b/include/linux/of_pci.h index</span>
0e0974e..907ace0 100644
<span class="p_header">--- a/include/linux/of_pci.h</span>
<span class="p_header">+++ b/include/linux/of_pci.h</span>
<span class="p_chunk">@@ -76,6 +76,7 @@</span> <span class="p_context"> static inline void of_pci_check_probe_only(void) { }  int</span>
of_pci_get_host_bridge_resources(struct device_node *dev,
 			unsigned char busno, unsigned char bus_max,
 			struct list_head *resources, resource_size_t *io_base);
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size);</span>
 #else
 static inline int of_pci_get_host_bridge_resources(struct device_node *dev,
 			unsigned char busno, unsigned char bus_max, @@ -83,6 +84,11 @@ static
inline int of_pci_get_host_bridge_resources(struct device_node *dev,  {
 	return -EINVAL;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline int of_pci_get_dma_ranges(struct device_node *np, u64</span>
<span class="p_add">+*dma_addr, u64 *paddr, u64 *size) {</span>
<span class="p_add">+	return -EINVAL;</span>
<span class="p_add">+}</span>
 #endif

 #if defined(CONFIG_OF) &amp;&amp; defined(CONFIG_PCI_MSI)
<span class="p_del">--</span>
1.9.1

<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig index 8c7c244..20cfff7</span>
100644
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -217,6 +217,9 @@</span> <span class="p_context"> config NEED_DMA_MAP_STATE  config NEED_SG_DMA_LENGTH</span>
 	def_bool y

<span class="p_add">+config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config SMP
 	def_bool y

<span class="p_header">diff --git a/arch/arm64/include/asm/device.h</span>
b/arch/arm64/include/asm/device.h index 73d5bab..64b4dc3 100644
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -20,6 +20,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 #ifdef CONFIG_IOMMU_API
 	void *iommu;			/* private IOMMU data */
 #endif
<span class="p_add">+	u64 parent_dma_mask;</span>
 	bool dma_coherent;
 };

<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c index</span>
81cdb2e..5845ecd 100644
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -564,6 +564,7 @@</span> <span class="p_context"> static void flush_page(struct device *dev, const void</span>
*virt, phys_addr_t phys)
 	__dma_flush_area(virt, PAGE_SIZE);
 }

<span class="p_add">+</span>
 static void *__iommu_alloc_attrs(struct device *dev, size_t size,
 				 dma_addr_t *handle, gfp_t gfp,
 				 unsigned long attrs)
<span class="p_chunk">@@ -795,6 +796,20 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device *dev,</span>
 	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);  }

<span class="p_add">+static int __iommu_set_dma_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct dma_map_ops iommu_dma_ops = {
 	.alloc = __iommu_alloc_attrs,
 	.free = __iommu_free_attrs,
<span class="p_chunk">@@ -811,8 +826,21 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device *dev,</span>
 	.map_resource = iommu_dma_map_resource,
 	.unmap_resource = iommu_dma_unmap_resource,
 	.mapping_error = iommu_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __iommu_set_dma_mask,</span>
 };

<span class="p_add">+int dma_set_coherent_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="p_add">+	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = mask;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /*
  * TODO: Right now __iommu_setup_dma_ops() gets called too early to do
  * everything it needs to - the device is only partially created and the
<span class="p_chunk">@@ -975,6 +1003,8 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64</span>
dma_base, u64 size,
 	if (!dev-&gt;dma_ops)
 		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;

<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);  }

<span class="p_header">diff --git a/drivers/of/device.c b/drivers/of/device.c index</span>
b1e6beb..10ada4a 100644
<span class="p_header">--- a/drivers/of/device.c</span>
<span class="p_header">+++ b/drivers/of/device.c</span>
<span class="p_chunk">@@ -9,6 +9,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/module.h&gt;
 #include &lt;linux/mod_devicetable.h&gt;
 #include &lt;linux/slab.h&gt;
<span class="p_add">+#include &lt;linux/of_pci.h&gt;</span>

 #include &lt;asm/errno.h&gt;
 #include &quot;of_private.h&quot;
<span class="p_chunk">@@ -104,7 +105,11 @@</span> <span class="p_context"> void of_dma_configure(struct device *dev, struct</span>
device_node *np)
 	if (!dev-&gt;dma_mask)
 		dev-&gt;dma_mask = &amp;dev-&gt;coherent_dma_mask;

<span class="p_del">-	ret = of_dma_get_range(np, &amp;dma_addr, &amp;paddr, &amp;size);</span>
<span class="p_add">+	if (dev_is_pci(dev))</span>
<span class="p_add">+		ret = of_pci_get_dma_ranges(np, &amp;dma_addr, &amp;paddr, &amp;size);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		ret = of_dma_get_range(np, &amp;dma_addr, &amp;paddr, &amp;size);</span>
<span class="p_add">+</span>
 	if (ret &lt; 0) {
 		dma_addr = offset = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



