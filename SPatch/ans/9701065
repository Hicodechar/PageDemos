
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/2] x86/efi: Correct ident mapping of efi old_map when kalsr enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/2] x86/efi: Correct ident mapping of efi old_map when kalsr enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=73061">Baoquan He</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 26, 2017, 10:39 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1493203160-20148-2-git-send-email-bhe@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9701065/mbox/"
   >mbox</a>
|
   <a href="/patch/9701065/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9701065/">/patch/9701065/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0BDED603F6 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Apr 2017 10:39:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6A1A28459
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Apr 2017 10:39:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DB59B285EF; Wed, 26 Apr 2017 10:39:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 21DE328459
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 26 Apr 2017 10:39:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S2998441AbdDZKjt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 26 Apr 2017 06:39:49 -0400
Received: from mx1.redhat.com ([209.132.183.28]:42538 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S2998423AbdDZKjg (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 26 Apr 2017 06:39:36 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 5705080083;
	Wed, 26 Apr 2017 10:39:36 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 5705080083
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	spf=pass smtp.mailfrom=bhe@redhat.com
DKIM-Filter: OpenDKIM Filter v2.11.0 mx1.redhat.com 5705080083
Received: from x1.redhat.com (ovpn-8-26.pek2.redhat.com [10.72.8.26])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 4ABAB85792;
	Wed, 26 Apr 2017 10:39:30 +0000 (UTC)
From: Baoquan He &lt;bhe@redhat.com&gt;
To: linux-kernel@vger.kernel.org
Cc: mingo@redhat.com, keescook@chromium.org, thgarnie@google.com,
	dyoung@redhat.com, xlpang@redhat.com, Baoquan He &lt;bhe@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, x86@kernel.org,
	linux-efi@vger.kernel.org
Subject: [PATCH 1/2] x86/efi: Correct ident mapping of efi old_map when
	kalsr enabled
Date: Wed, 26 Apr 2017 18:39:19 +0800
Message-Id: &lt;1493203160-20148-2-git-send-email-bhe@redhat.com&gt;
In-Reply-To: &lt;1493203160-20148-1-git-send-email-bhe@redhat.com&gt;
References: &lt;1493203160-20148-1-git-send-email-bhe@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Wed, 26 Apr 2017 10:39:36 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73061">Baoquan He</a> - April 26, 2017, 10:39 a.m.</div>
<pre class="content">
For EFI with old_map enabled, Kernel will panic when kaslr is enabled.

The root cause is the ident mapping is not built correctly in this case.

For nokaslr kernel, PAGE_OFFSET is 0xffff880000000000 which is PGDIR_SIZE
aligned. We can borrow the pud table from direct mapping safely. Given a
physical address X, we have pud_index(X) == pud_index(__va(X)). However,
for kaslr kernel, PAGE_OFFSET is PUD_SIZE aligned. For a given physical
address X, pud_index(X) != pud_index(__va(X)). We can&#39;t only copy pgd entry
from direct mapping to build ident mapping, instead need copy pud entry
one by one from direct mapping.

So fix it in this patch.

The panic message is like below, an emty PUD or a wrong PUD.

[    0.233007] BUG: unable to handle kernel paging request at 000000007febd57e
[    0.233899] IP: 0x7febd57e
[    0.234000] PGD 1025a067
[    0.234000] PUD 0
[    0.234000]
[    0.234000] Oops: 0010 [#1] SMP
[    0.234000] Modules linked in:
[    0.234000] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.11.0-rc8+ #125
[    0.234000] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015
[    0.234000] task: ffffffffafe104c0 task.stack: ffffffffafe00000
[    0.234000] RIP: 0010:0x7febd57e
[    0.234000] RSP: 0000:ffffffffafe03d98 EFLAGS: 00010086
[    0.234000] RAX: ffff8c9e3fff9540 RBX: 000000007c4b6000 RCX: 0000000000000480
[    0.234000] RDX: 0000000000000030 RSI: 0000000000000480 RDI: 000000007febd57e
[    0.234000] RBP: ffffffffafe03e40 R08: 0000000000000001 R09: 000000007c4b6000
[    0.234000] R10: ffffffffafa71a40 R11: 20786c6c2478303d R12: 0000000000000030
[    0.234000] R13: 0000000000000246 R14: ffff8c9e3c4198d8 R15: 0000000000000480
[    0.234000] FS:  0000000000000000(0000) GS:ffff8c9e3fa00000(0000) knlGS:0000000000000000
[    0.234000] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[    0.234000] CR2: 000000007febd57e CR3: 000000000fe09000 CR4: 00000000000406b0
[    0.234000] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[    0.234000] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
[    0.234000] Call Trace:
[    0.234000]  ? efi_call+0x58/0x90
[    0.234000]  ? printk+0x58/0x6f
[    0.234000]  efi_enter_virtual_mode+0x3c5/0x50d
[    0.234000]  start_kernel+0x40f/0x4b8
[    0.234000]  ? set_init_arg+0x55/0x55
[    0.234000]  ? early_idt_handler_array+0x120/0x120
[    0.234000]  x86_64_start_reservations+0x24/0x26
[    0.234000]  x86_64_start_kernel+0x14c/0x16f
[    0.234000]  start_cpu+0x14/0x14
[    0.234000] Code:  Bad RIP value.
[    0.234000] RIP: 0x7febd57e RSP: ffffffffafe03d98
[    0.234000] CR2: 000000007febd57e
[    0.234000] ---[ end trace d4ded46ab8ab8ba9 ]---
[    0.234000] Kernel panic - not syncing: Attempted to kill the idle task!
[    0.234000] ---[ end Kernel panic - not syncing: Attempted to kill the idle task!
<span class="signed-off-by">
Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Dave Young &lt;dyoung@redhat.com&gt;</span>
Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: x86@kernel.org
Cc: linux-efi@vger.kernel.org
---
 arch/x86/platform/efi/efi_64.c | 35 +++++++++++++++++++++++++++--------
 1 file changed, 27 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73061">Baoquan He</a> - April 26, 2017, 10:43 a.m.</div>
<pre class="content">
This bug will cause SGI uv 100 boot failure since SGI uv 100 can only
use efi old_map because of hardware. On rhel it failed all SGI uv series
since we haven&#39;t back ported fix for SGI uv 200/300.

On 04/26/17 at 06:39pm, Baoquan He wrote:
<span class="quote">&gt; For EFI with old_map enabled, Kernel will panic when kaslr is enabled.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The root cause is the ident mapping is not built correctly in this case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For nokaslr kernel, PAGE_OFFSET is 0xffff880000000000 which is PGDIR_SIZE</span>
<span class="quote">&gt; aligned. We can borrow the pud table from direct mapping safely. Given a</span>
<span class="quote">&gt; physical address X, we have pud_index(X) == pud_index(__va(X)). However,</span>
<span class="quote">&gt; for kaslr kernel, PAGE_OFFSET is PUD_SIZE aligned. For a given physical</span>
<span class="quote">&gt; address X, pud_index(X) != pud_index(__va(X)). We can&#39;t only copy pgd entry</span>
<span class="quote">&gt; from direct mapping to build ident mapping, instead need copy pud entry</span>
<span class="quote">&gt; one by one from direct mapping.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So fix it in this patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The panic message is like below, an emty PUD or a wrong PUD.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [    0.233007] BUG: unable to handle kernel paging request at 000000007febd57e</span>
<span class="quote">&gt; [    0.233899] IP: 0x7febd57e</span>
<span class="quote">&gt; [    0.234000] PGD 1025a067</span>
<span class="quote">&gt; [    0.234000] PUD 0</span>
<span class="quote">&gt; [    0.234000]</span>
<span class="quote">&gt; [    0.234000] Oops: 0010 [#1] SMP</span>
<span class="quote">&gt; [    0.234000] Modules linked in:</span>
<span class="quote">&gt; [    0.234000] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.11.0-rc8+ #125</span>
<span class="quote">&gt; [    0.234000] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015</span>
<span class="quote">&gt; [    0.234000] task: ffffffffafe104c0 task.stack: ffffffffafe00000</span>
<span class="quote">&gt; [    0.234000] RIP: 0010:0x7febd57e</span>
<span class="quote">&gt; [    0.234000] RSP: 0000:ffffffffafe03d98 EFLAGS: 00010086</span>
<span class="quote">&gt; [    0.234000] RAX: ffff8c9e3fff9540 RBX: 000000007c4b6000 RCX: 0000000000000480</span>
<span class="quote">&gt; [    0.234000] RDX: 0000000000000030 RSI: 0000000000000480 RDI: 000000007febd57e</span>
<span class="quote">&gt; [    0.234000] RBP: ffffffffafe03e40 R08: 0000000000000001 R09: 000000007c4b6000</span>
<span class="quote">&gt; [    0.234000] R10: ffffffffafa71a40 R11: 20786c6c2478303d R12: 0000000000000030</span>
<span class="quote">&gt; [    0.234000] R13: 0000000000000246 R14: ffff8c9e3c4198d8 R15: 0000000000000480</span>
<span class="quote">&gt; [    0.234000] FS:  0000000000000000(0000) GS:ffff8c9e3fa00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; [    0.234000] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; [    0.234000] CR2: 000000007febd57e CR3: 000000000fe09000 CR4: 00000000000406b0</span>
<span class="quote">&gt; [    0.234000] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000</span>
<span class="quote">&gt; [    0.234000] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400</span>
<span class="quote">&gt; [    0.234000] Call Trace:</span>
<span class="quote">&gt; [    0.234000]  ? efi_call+0x58/0x90</span>
<span class="quote">&gt; [    0.234000]  ? printk+0x58/0x6f</span>
<span class="quote">&gt; [    0.234000]  efi_enter_virtual_mode+0x3c5/0x50d</span>
<span class="quote">&gt; [    0.234000]  start_kernel+0x40f/0x4b8</span>
<span class="quote">&gt; [    0.234000]  ? set_init_arg+0x55/0x55</span>
<span class="quote">&gt; [    0.234000]  ? early_idt_handler_array+0x120/0x120</span>
<span class="quote">&gt; [    0.234000]  x86_64_start_reservations+0x24/0x26</span>
<span class="quote">&gt; [    0.234000]  x86_64_start_kernel+0x14c/0x16f</span>
<span class="quote">&gt; [    0.234000]  start_cpu+0x14/0x14</span>
<span class="quote">&gt; [    0.234000] Code:  Bad RIP value.</span>
<span class="quote">&gt; [    0.234000] RIP: 0x7febd57e RSP: ffffffffafe03d98</span>
<span class="quote">&gt; [    0.234000] CR2: 000000007febd57e</span>
<span class="quote">&gt; [    0.234000] ---[ end trace d4ded46ab8ab8ba9 ]---</span>
<span class="quote">&gt; [    0.234000] Kernel panic - not syncing: Attempted to kill the idle task!</span>
<span class="quote">&gt; [    0.234000] ---[ end Kernel panic - not syncing: Attempted to kill the idle task!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Dave Young &lt;dyoung@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
<span class="quote">&gt; Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: linux-efi@vger.kernel.org</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/platform/efi/efi_64.c | 35 +++++++++++++++++++++++++++--------</span>
<span class="quote">&gt;  1 file changed, 27 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; index 2ee7694..2e7baff 100644</span>
<span class="quote">&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; @@ -71,11 +71,12 @@ static void __init early_code_mapping_set_exec(int executable)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long vaddress;</span>
<span class="quote">&gt; +	unsigned long vaddr, left_vaddr;</span>
<span class="quote">&gt; +	unsigned int num_entries;</span>
<span class="quote">&gt;  	pgd_t *save_pgd;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	int pgd;</span>
<span class="quote">&gt; +	pud_t *pud, *pud_k;</span>
<span class="quote">&gt;  	int n_pgds;</span>
<span class="quote">&gt; +	int i;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="quote">&gt;  		save_pgd = (pgd_t *)read_cr3();</span>
<span class="quote">&gt; @@ -88,10 +89,22 @@ pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="quote">&gt;  	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);</span>
<span class="quote">&gt;  	save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	for (pgd = 0; pgd &lt; n_pgds; pgd++) {</span>
<span class="quote">&gt; -		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; -		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; -		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; +	for (i = 0; i &lt; n_pgds; i++) {</span>
<span class="quote">&gt; +		save_pgd[i] = *pgd_offset_k(i * PGDIR_SIZE);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		vaddr = (unsigned long)__va(i * PGDIR_SIZE);</span>
<span class="quote">&gt; +		pud = pud_alloc_one(NULL, 0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		num_entries = PTRS_PER_PUD - pud_index(vaddr);</span>
<span class="quote">&gt; +		pud_k = pud_offset(pgd_offset_k(vaddr), vaddr);</span>
<span class="quote">&gt; +		memcpy(pud, pud_k, num_entries);</span>
<span class="quote">&gt; +		if (pud_index(vaddr) &gt; 0) {</span>
<span class="quote">&gt; +			left_vaddr = vaddr + (num_entries * PUD_SIZE);</span>
<span class="quote">&gt; +			pud_k = pud_offset(pgd_offset_k(left_vaddr),</span>
<span class="quote">&gt; +					   left_vaddr);</span>
<span class="quote">&gt; +			memcpy(pud + num_entries, pud_k, pud_index(vaddr));</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		pgd_populate(NULL, pgd_offset_k(i * PGDIR_SIZE), pud);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt;  	__flush_tlb_all();</span>
<span class="quote">&gt; @@ -106,6 +119,8 @@ void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	int pgd_idx;</span>
<span class="quote">&gt;  	int nr_pgds;</span>
<span class="quote">&gt; +	pud_t *pud;</span>
<span class="quote">&gt; +	pgd_t *pgd;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="quote">&gt;  		write_cr3((unsigned long)save_pgd);</span>
<span class="quote">&gt; @@ -115,8 +130,12 @@ void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)</span>
<span class="quote">&gt; +	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++) {</span>
<span class="quote">&gt; +		pgd = pgd_offset_k(pgd_idx * PGDIR_SIZE);</span>
<span class="quote">&gt; +		pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="quote">&gt; +		pud_free(NULL, pud);</span>
<span class="quote">&gt;  		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kfree(save_pgd);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.5.5</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=160651">Thomas Garnier</a> - April 26, 2017, 2:49 p.m.</div>
<pre class="content">
On Wed, Apr 26, 2017 at 3:43 AM, Baoquan He &lt;bhe@redhat.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; This bug will cause SGI uv 100 boot failure since SGI uv 100 can only</span>
<span class="quote">&gt; use efi old_map because of hardware. On rhel it failed all SGI uv series</span>
<span class="quote">&gt; since we haven&#39;t back ported fix for SGI uv 200/300.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 04/26/17 at 06:39pm, Baoquan He wrote:</span>
<span class="quote">&gt; &gt; For EFI with old_map enabled, Kernel will panic when kaslr is enabled.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; The root cause is the ident mapping is not built correctly in this case.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; For nokaslr kernel, PAGE_OFFSET is 0xffff880000000000 which is PGDIR_SIZE</span>
<span class="quote">&gt; &gt; aligned. We can borrow the pud table from direct mapping safely. Given a</span>
<span class="quote">&gt; &gt; physical address X, we have pud_index(X) == pud_index(__va(X)). However,</span>
<span class="quote">&gt; &gt; for kaslr kernel, PAGE_OFFSET is PUD_SIZE aligned. For a given physical</span>
<span class="quote">&gt; &gt; address X, pud_index(X) != pud_index(__va(X)). We can&#39;t only copy pgd entry</span>
<span class="quote">&gt; &gt; from direct mapping to build ident mapping, instead need copy pud entry</span>
<span class="quote">&gt; &gt; one by one from direct mapping.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; So fix it in this patch.</span>

Thanks for looking into this!
<span class="quote">
&gt; &gt;</span>
<span class="quote">&gt; &gt; The panic message is like below, an emty PUD or a wrong PUD.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; [    0.233007] BUG: unable to handle kernel paging request at 000000007febd57e</span>
<span class="quote">&gt; &gt; [    0.233899] IP: 0x7febd57e</span>
<span class="quote">&gt; &gt; [    0.234000] PGD 1025a067</span>
<span class="quote">&gt; &gt; [    0.234000] PUD 0</span>
<span class="quote">&gt; &gt; [    0.234000]</span>
<span class="quote">&gt; &gt; [    0.234000] Oops: 0010 [#1] SMP</span>
<span class="quote">&gt; &gt; [    0.234000] Modules linked in:</span>
<span class="quote">&gt; &gt; [    0.234000] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.11.0-rc8+ #125</span>
<span class="quote">&gt; &gt; [    0.234000] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015</span>
<span class="quote">&gt; &gt; [    0.234000] task: ffffffffafe104c0 task.stack: ffffffffafe00000</span>
<span class="quote">&gt; &gt; [    0.234000] RIP: 0010:0x7febd57e</span>
<span class="quote">&gt; &gt; [    0.234000] RSP: 0000:ffffffffafe03d98 EFLAGS: 00010086</span>
<span class="quote">&gt; &gt; [    0.234000] RAX: ffff8c9e3fff9540 RBX: 000000007c4b6000 RCX: 0000000000000480</span>
<span class="quote">&gt; &gt; [    0.234000] RDX: 0000000000000030 RSI: 0000000000000480 RDI: 000000007febd57e</span>
<span class="quote">&gt; &gt; [    0.234000] RBP: ffffffffafe03e40 R08: 0000000000000001 R09: 000000007c4b6000</span>
<span class="quote">&gt; &gt; [    0.234000] R10: ffffffffafa71a40 R11: 20786c6c2478303d R12: 0000000000000030</span>
<span class="quote">&gt; &gt; [    0.234000] R13: 0000000000000246 R14: ffff8c9e3c4198d8 R15: 0000000000000480</span>
<span class="quote">&gt; &gt; [    0.234000] FS:  0000000000000000(0000) GS:ffff8c9e3fa00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; &gt; [    0.234000] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; &gt; [    0.234000] CR2: 000000007febd57e CR3: 000000000fe09000 CR4: 00000000000406b0</span>
<span class="quote">&gt; &gt; [    0.234000] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000</span>
<span class="quote">&gt; &gt; [    0.234000] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400</span>
<span class="quote">&gt; &gt; [    0.234000] Call Trace:</span>
<span class="quote">&gt; &gt; [    0.234000]  ? efi_call+0x58/0x90</span>
<span class="quote">&gt; &gt; [    0.234000]  ? printk+0x58/0x6f</span>
<span class="quote">&gt; &gt; [    0.234000]  efi_enter_virtual_mode+0x3c5/0x50d</span>
<span class="quote">&gt; &gt; [    0.234000]  start_kernel+0x40f/0x4b8</span>
<span class="quote">&gt; &gt; [    0.234000]  ? set_init_arg+0x55/0x55</span>
<span class="quote">&gt; &gt; [    0.234000]  ? early_idt_handler_array+0x120/0x120</span>
<span class="quote">&gt; &gt; [    0.234000]  x86_64_start_reservations+0x24/0x26</span>
<span class="quote">&gt; &gt; [    0.234000]  x86_64_start_kernel+0x14c/0x16f</span>
<span class="quote">&gt; &gt; [    0.234000]  start_cpu+0x14/0x14</span>
<span class="quote">&gt; &gt; [    0.234000] Code:  Bad RIP value.</span>
<span class="quote">&gt; &gt; [    0.234000] RIP: 0x7febd57e RSP: ffffffffafe03d98</span>
<span class="quote">&gt; &gt; [    0.234000] CR2: 000000007febd57e</span>
<span class="quote">&gt; &gt; [    0.234000] ---[ end trace d4ded46ab8ab8ba9 ]---</span>
<span class="quote">&gt; &gt; [    0.234000] Kernel panic - not syncing: Attempted to kill the idle task!</span>
<span class="quote">&gt; &gt; [    0.234000] ---[ end Kernel panic - not syncing: Attempted to kill the idle task!</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Dave Young &lt;dyoung@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
<span class="quote">&gt; &gt; Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; &gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; &gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; &gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; &gt; Cc: linux-efi@vger.kernel.org</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/platform/efi/efi_64.c | 35 +++++++++++++++++++++++++++--------</span>
<span class="quote">&gt; &gt;  1 file changed, 27 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt; index 2ee7694..2e7baff 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; &gt; @@ -71,11 +71,12 @@ static void __init early_code_mapping_set_exec(int executable)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; -     unsigned long vaddress;</span>
<span class="quote">&gt; &gt; +     unsigned long vaddr, left_vaddr;</span>
<span class="quote">&gt; &gt; +     unsigned int num_entries;</span>
<span class="quote">&gt; &gt;       pgd_t *save_pgd;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -     int pgd;</span>
<span class="quote">&gt; &gt; +     pud_t *pud, *pud_k;</span>
<span class="quote">&gt; &gt;       int n_pgds;</span>
<span class="quote">&gt; &gt; +     int i;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;       if (!efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="quote">&gt; &gt;               save_pgd = (pgd_t *)read_cr3();</span>
<span class="quote">&gt; &gt; @@ -88,10 +89,22 @@ pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="quote">&gt; &gt;       n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;       save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; -     for (pgd = 0; pgd &lt; n_pgds; pgd++) {</span>
<span class="quote">&gt; &gt; -             save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt; -             vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt; -             set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="quote">&gt; &gt; +     for (i = 0; i &lt; n_pgds; i++) {</span>
<span class="quote">&gt; &gt; +             save_pgd[i] = *pgd_offset_k(i * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +             vaddr = (unsigned long)__va(i * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt; +             pud = pud_alloc_one(NULL, 0);</span>

Please check if pud is NULL.
<span class="quote">
&gt; &gt; +</span>
<span class="quote">&gt; &gt; +             num_entries = PTRS_PER_PUD - pud_index(vaddr);</span>
<span class="quote">&gt; &gt; +             pud_k = pud_offset(pgd_offset_k(vaddr), vaddr);</span>
<span class="quote">&gt; &gt; +             memcpy(pud, pud_k, num_entries);</span>
<span class="quote">&gt; &gt; +             if (pud_index(vaddr) &gt; 0) {</span>

You are using pud_index(vaddr) 3 times, might be worth using a local variable.
<span class="quote">
&gt; &gt; +                     left_vaddr = vaddr + (num_entries * PUD_SIZE);</span>
<span class="quote">&gt; &gt; +                     pud_k = pud_offset(pgd_offset_k(left_vaddr),</span>
<span class="quote">&gt; &gt; +                                        left_vaddr);</span>
<span class="quote">&gt; &gt; +                     memcpy(pud + num_entries, pud_k, pud_index(vaddr));</span>

I think this section (or the overall for loop) would benefit with a
comment explaining explaining why you are shifting the new PUD like
this.
<span class="quote">
&gt; &gt; +             }</span>
<span class="quote">&gt; &gt; +             pgd_populate(NULL, pgd_offset_k(i * PGDIR_SIZE), pud);</span>
<span class="quote">&gt; &gt;       }</span>
<span class="quote">&gt; &gt;  out:</span>
<span class="quote">&gt; &gt;       __flush_tlb_all();</span>
<span class="quote">&gt; &gt; @@ -106,6 +119,8 @@ void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="quote">&gt; &gt;        */</span>
<span class="quote">&gt; &gt;       int pgd_idx;</span>
<span class="quote">&gt; &gt;       int nr_pgds;</span>
<span class="quote">&gt; &gt; +     pud_t *pud;</span>
<span class="quote">&gt; &gt; +     pgd_t *pgd;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;       if (!efi_enabled(EFI_OLD_MEMMAP)) {</span>
<span class="quote">&gt; &gt;               write_cr3((unsigned long)save_pgd);</span>
<span class="quote">&gt; &gt; @@ -115,8 +130,12 @@ void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;       nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; -     for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)</span>
<span class="quote">&gt; &gt; +     for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++) {</span>
<span class="quote">&gt; &gt; +             pgd = pgd_offset_k(pgd_idx * PGDIR_SIZE);</span>
<span class="quote">&gt; &gt; +             pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="quote">&gt; &gt; +             pud_free(NULL, pud);</span>
<span class="quote">&gt; &gt;               set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);</span>
<span class="quote">&gt; &gt; +     }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;       kfree(save_pgd);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; --</span>
<span class="quote">&gt; &gt; 2.5.5</span>
<span class="quote">&gt; &gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index 2ee7694..2e7baff 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -71,11 +71,12 @@</span> <span class="p_context"> static void __init early_code_mapping_set_exec(int executable)</span>
 
 pgd_t * __init efi_call_phys_prolog(void)
 {
<span class="p_del">-	unsigned long vaddress;</span>
<span class="p_add">+	unsigned long vaddr, left_vaddr;</span>
<span class="p_add">+	unsigned int num_entries;</span>
 	pgd_t *save_pgd;
<span class="p_del">-</span>
<span class="p_del">-	int pgd;</span>
<span class="p_add">+	pud_t *pud, *pud_k;</span>
 	int n_pgds;
<span class="p_add">+	int i;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		save_pgd = (pgd_t *)read_cr3();
<span class="p_chunk">@@ -88,10 +89,22 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);
 	save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);
 
<span class="p_del">-	for (pgd = 0; pgd &lt; n_pgds; pgd++) {</span>
<span class="p_del">-		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="p_add">+	for (i = 0; i &lt; n_pgds; i++) {</span>
<span class="p_add">+		save_pgd[i] = *pgd_offset_k(i * PGDIR_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+		vaddr = (unsigned long)__va(i * PGDIR_SIZE);</span>
<span class="p_add">+		pud = pud_alloc_one(NULL, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		num_entries = PTRS_PER_PUD - pud_index(vaddr);</span>
<span class="p_add">+		pud_k = pud_offset(pgd_offset_k(vaddr), vaddr);</span>
<span class="p_add">+		memcpy(pud, pud_k, num_entries);</span>
<span class="p_add">+		if (pud_index(vaddr) &gt; 0) {</span>
<span class="p_add">+			left_vaddr = vaddr + (num_entries * PUD_SIZE);</span>
<span class="p_add">+			pud_k = pud_offset(pgd_offset_k(left_vaddr),</span>
<span class="p_add">+					   left_vaddr);</span>
<span class="p_add">+			memcpy(pud + num_entries, pud_k, pud_index(vaddr));</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pgd_populate(NULL, pgd_offset_k(i * PGDIR_SIZE), pud);</span>
 	}
 out:
 	__flush_tlb_all();
<span class="p_chunk">@@ -106,6 +119,8 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	 */
 	int pgd_idx;
 	int nr_pgds;
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pgd_t *pgd;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		write_cr3((unsigned long)save_pgd);
<span class="p_chunk">@@ -115,8 +130,12 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 
 	nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);
 
<span class="p_del">-	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)</span>
<span class="p_add">+	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++) {</span>
<span class="p_add">+		pgd = pgd_offset_k(pgd_idx * PGDIR_SIZE);</span>
<span class="p_add">+		pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		pud_free(NULL, pud);</span>
 		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);
<span class="p_add">+	}</span>
 
 	kfree(save_pgd);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



