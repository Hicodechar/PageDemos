
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[22/23] x86, kaiser: allow KAISER to be enabled/disabled at runtime - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [22/23] x86, kaiser: allow KAISER to be enabled/disabled at runtime</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2017, 12:35 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171123003523.28FFBAB6@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10072107/mbox/"
   >mbox</a>
|
   <a href="/patch/10072107/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10072107/">/patch/10072107/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5302960595 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 00:36:57 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4468329737
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 00:36:57 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 38CC829E9D; Thu, 23 Nov 2017 00:36:57 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AE6AF29737
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 00:36:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752759AbdKWAgz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 22 Nov 2017 19:36:55 -0500
Received: from mga06.intel.com ([134.134.136.31]:18030 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752676AbdKWAg3 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 22 Nov 2017 19:36:29 -0500
Received: from orsmga004.jf.intel.com ([10.7.209.38])
	by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	22 Nov 2017 16:36:28 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,438,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;152286068&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.119])
	by orsmga004.jf.intel.com with ESMTP; 22 Nov 2017 16:36:29 -0800
Subject: [PATCH 22/23] x86,
	kaiser: allow KAISER to be enabled/disabled at runtime
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, dave.hansen@linux.intel.com,
	moritz.lipp@iaik.tugraz.at, daniel.gruss@iaik.tugraz.at,
	michael.schwarz@iaik.tugraz.at, richard.fellner@student.tugraz.at,
	luto@kernel.org, torvalds@linux-foundation.org,
	keescook@google.com, hughd@google.com, x86@kernel.org
From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Date: Wed, 22 Nov 2017 16:35:23 -0800
References: &lt;20171123003438.48A0EEDE@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20171123003438.48A0EEDE@viggo.jf.intel.com&gt;
Message-Id: &lt;20171123003523.28FFBAB6@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Nov. 23, 2017, 12:35 a.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

The KAISER CR3 switches are expensive for many reasons.  Not all systems
benefit from the protection provided by KAISER.  Some of them can not
pay the high performance cost.

This patch adds a debugfs file.  To disable KAISER, you do:

	echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled

and to re-enable it, you can:

	echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled

This is a *minimal* implementation.  There are certainly plenty of
optimizations that can be done on top of this by using ALTERNATIVES
among other things.

This does, however, completely remove all the KAISER-based CR3 writes.
This permits a paravirtualized system that can not tolerate CR3
writes to theoretically survive with CONFIG_KAISER=y, albeit with
/sys/kernel/debug/x86/kaiser-enabled=0.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
Cc: Moritz Lipp &lt;moritz.lipp@iaik.tugraz.at&gt;
Cc: Daniel Gruss &lt;daniel.gruss@iaik.tugraz.at&gt;
Cc: Michael Schwarz &lt;michael.schwarz@iaik.tugraz.at&gt;
Cc: Richard Fellner &lt;richard.fellner@student.tugraz.at&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Kees Cook &lt;keescook@google.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: x86@kernel.org
---

 b/arch/x86/entry/calling.h |   12 +++++++
 b/arch/x86/mm/kaiser.c     |   70 ++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 78 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/x86/entry/calling.h~kaiser-dynamic-asm arch/x86/entry/calling.h</span>
<span class="p_header">--- a/arch/x86/entry/calling.h~kaiser-dynamic-asm	2017-11-22 15:45:56.402619721 -0800</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h	2017-11-22 15:45:56.407619721 -0800</span>
<span class="p_chunk">@@ -209,19 +209,29 @@</span> <span class="p_context"> For 32-bit we have the following convent</span>
 	orq     $(KAISER_SWITCH_MASK), \reg
 .endm
 
<span class="p_add">+.macro JUMP_IF_KAISER_OFF	label</span>
<span class="p_add">+	testq   $1, kaiser_asm_do_switch</span>
<span class="p_add">+	jz      \label</span>
<span class="p_add">+.endm</span>
<span class="p_add">+</span>
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_KERNEL_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SWITCH_TO_USER_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_USER_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg:req save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	movq	%cr3, %r\scratch_reg
 	movq	%r\scratch_reg, \save_reg
 	/*
<span class="p_chunk">@@ -244,11 +254,13 @@</span> <span class="p_context"> For 32-bit we have the following convent</span>
 .endm
 
 .macro RESTORE_CR3 save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	/*
 	 * The CR3 write could be avoided when not changing its value,
 	 * but would require a CR3 read *and* a scratch register.
 	 */
 	movq	\save_reg, %cr3
<span class="p_add">+.Ldone_\@:</span>
 .endm
 
 #else /* CONFIG_KAISER=n: */
<span class="p_header">diff -puN arch/x86/mm/kaiser.c~kaiser-dynamic-asm arch/x86/mm/kaiser.c</span>
<span class="p_header">--- a/arch/x86/mm/kaiser.c~kaiser-dynamic-asm	2017-11-22 15:45:56.404619721 -0800</span>
<span class="p_header">+++ b/arch/x86/mm/kaiser.c	2017-11-22 15:45:56.408619721 -0800</span>
<span class="p_chunk">@@ -43,6 +43,9 @@</span> <span class="p_context"></span>
 
 #define KAISER_WALK_ATOMIC  0x1
 
<span class="p_add">+__aligned(PAGE_SIZE)</span>
<span class="p_add">+unsigned long kaiser_asm_do_switch[PAGE_SIZE/sizeof(unsigned long)] = { 1 };</span>
<span class="p_add">+</span>
 /*
  * At runtime, the only things we map are some things for CPU
  * hotplug, and stacks for new processes.  No two CPUs will ever
<span class="p_chunk">@@ -395,6 +398,9 @@</span> <span class="p_context"> void __init kaiser_init(void)</span>
 
 	kaiser_init_all_pgds();
 
<span class="p_add">+	kaiser_add_user_map_early(&amp;kaiser_asm_do_switch, PAGE_SIZE,</span>
<span class="p_add">+				  __PAGE_KERNEL | _PAGE_GLOBAL);</span>
<span class="p_add">+</span>
 	for_each_possible_cpu(cpu) {
 		void *percpu_vaddr = __per_cpu_user_mapped_start +
 				     per_cpu_offset(cpu);
<span class="p_chunk">@@ -483,6 +489,56 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_read_file(</span>
 	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
 }
 
<span class="p_add">+enum poison {</span>
<span class="p_add">+	KAISER_POISON,</span>
<span class="p_add">+	KAISER_UNPOISON</span>
<span class="p_add">+};</span>
<span class="p_add">+void kaiser_poison_pgds(enum poison do_poison);</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_disable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Make sure the kernel PGDs are usable by userspace: */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_UNPOISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure all the CPUs have the poison clear in their TLBs.</span>
<span class="p_add">+	 * This also functions as a barrier to ensure that everyone</span>
<span class="p_add">+	 * sees the unpoisoned PGDs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Tell the assembly code to stop switching CR3. */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure everybody does an interrupt.  This means that</span>
<span class="p_add">+	 * they have gone through a SWITCH_TO_KERNEL_CR3 amd are no</span>
<span class="p_add">+	 * longer running on the userspace CR3.  If we did not do</span>
<span class="p_add">+	 * this, we might have CPUs running on the shadow page tables</span>
<span class="p_add">+	 * that then enter the kernel and think they do *not* need to</span>
<span class="p_add">+	 * switch.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_enable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Tell the assembly code to start switching CR3: */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure everyone can see the kaiser_asm_do_switch update: */</span>
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Now that userspace is no longer using the kernel copy of</span>
<span class="p_add">+	 * the page tables, we can poison it:</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_POISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure all the CPUs see the poison: */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static ssize_t kaiser_enabled_write_file(struct file *file,
 		 const char __user *user_buf, size_t count, loff_t *ppos)
 {
<span class="p_chunk">@@ -504,7 +560,17 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_write_file</span>
 	if (kaiser_enabled == enable)
 		return count;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This tells the page table code to stop poisoning PGDs</span>
<span class="p_add">+	 */</span>
 	WRITE_ONCE(kaiser_enabled, enable);
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (enable)</span>
<span class="p_add">+		kaiser_do_enable();</span>
<span class="p_add">+	else</span>
<span class="p_add">+		kaiser_do_disable();</span>
<span class="p_add">+</span>
 	return count;
 }
 
<span class="p_chunk">@@ -522,10 +588,6 @@</span> <span class="p_context"> static int __init create_kaiser_enabled(</span>
 }
 late_initcall(create_kaiser_enabled);
 
<span class="p_del">-enum poison {</span>
<span class="p_del">-	KAISER_POISON,</span>
<span class="p_del">-	KAISER_UNPOISON</span>
<span class="p_del">-};</span>
 void kaiser_poison_pgd_page(pgd_t *pgd_page, enum poison do_poison)
 {
 	int i = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



