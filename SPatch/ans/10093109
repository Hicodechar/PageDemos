
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arch, mm: introduce arch_tlb_gather_mmu_exit - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arch, mm: introduce arch_tlb_gather_mmu_exit</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 5, 2017, 2:58 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171205145853.26614-1-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10093109/mbox/"
   >mbox</a>
|
   <a href="/patch/10093109/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10093109/">/patch/10093109/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C73F360329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 15:03:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B62952949F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 15:03:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AA0A6295D6; Tue,  5 Dec 2017 15:03:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C94692948D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 15:03:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752743AbdLEPDb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 5 Dec 2017 10:03:31 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:35847 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750740AbdLEPDY (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 5 Dec 2017 10:03:24 -0500
Received: by mail-wm0-f68.google.com with SMTP id b76so1855418wmg.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 05 Dec 2017 07:03:24 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=CALOENh0BcIFNtANbuVZp9DoLomVZWiqep0tIcQh5xA=;
	b=Z+YIsaQWo68dZ5sqfRsYY7z2mE7/YJTnZXQILr63ZnRKnwpmSbpPvTPEdYp2eXWQP6
	NYx8262KClczxFO0BevmwXJDoyCGVpDfVYiOaTbut5lJfCXfPLgmg4gm7GI6EB6YIkC4
	Y6BM5ZKmco02cRPin/UcMWPst1FYIDxi68x9yRC6jMcGzomqz3oRU7wtwAc/n4/Dny0J
	/G9JXh0Kq6ln7ZW+44rjQbfB2a/mB3FSBrIN1UGC7luqtD0TNw9gaTodti1BzZHpMeQc
	fJ7XYRgIC3+YhrzsspZVJfMvl4RLvLgCZWWvWsbAnipaxYTIJEkwq9y5XW6HSoYWmT87
	nuAA==
X-Gm-Message-State: AJaThX7KWjfNCwDg393PbOgtY3AA94NE5QtZExtYMFnNYuR51fJwRFIQ
	GARokSITVYjcOHlDQdvm++o=
X-Google-Smtp-Source: AGs4zMZ1007MOVaBR2UGLnB2g3KXvopAsfBtSKp9Vc75MfUZd+LD6094CA/TCEfDONiknl09EJRAbw==
X-Received: by 10.80.177.72 with SMTP id l8mr35814112edd.175.1512486203229; 
	Tue, 05 Dec 2017 07:03:23 -0800 (PST)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	c30sm306111edf.1.2017.12.05.07.03.21
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 05 Dec 2017 07:03:21 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Will Deacon &lt;will.deacon@arm.com&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Andrea Argangeli &lt;andrea@kernel.org&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH] arch, mm: introduce arch_tlb_gather_mmu_exit
Date: Tue,  5 Dec 2017 15:58:53 +0100
Message-Id: &lt;20171205145853.26614-1-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.15.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 5, 2017, 2:58 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

5a7862e83000 (&quot;arm64: tlbflush: avoid flushing when fullmm == 1&quot;) has
introduced an optimization to not flush tlb when we are tearing the
whole address space down. Will goes on to explain

: Basically, we tag each address space with an ASID (PCID on x86) which
: is resident in the TLB. This means we can elide TLB invalidation when
: pulling down a full mm because we won&#39;t ever assign that ASID to
: another mm without doing TLB invalidation elsewhere (which actually
: just nukes the whole TLB).

This all is nice but tlb_gather users are not aware of that and this can
actually cause some real problems. E.g. the oom_reaper tries to reap the
whole address space but it might race with threads accessing the memory [1].
It is possible that soft-dirty handling might suffer from the same
problem [2] as soon as it starts supporting the feature.

Introduce an explicit exit variant tlb_gather_mmu_exit which allows the
behavior arm64 implements for the fullmm case and replace it by an
explicit exit flag in the mmu_gather structure. exit_mmap path is then
turned into the explicit exit variant. Other architectures simply ignore
the flag.

Changes since RFC
- remove address range from tlb_gather_mmu_exit as it will always
  operate on the full range - as per Will

[1] http://lkml.kernel.org/r/20171106033651.172368-1-wangnan0@huawei.com
[2] http://lkml.kernel.org/r/20171110001933.GA12421@bbox
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---

Hi,
I have posted this as an RFC [1]. There was minor suggestion about the
API by Will which is integrated into this patch. No other fundamental
objections so I am asking for inclusion. I suspect that routing this via
Andrew&#39;s tree is the easiest.

[1] http://lkml.kernel.org/r/20171123090236.18574-1-mhocko@kernel.org

 arch/arm/include/asm/tlb.h   |  3 ++-
 arch/arm64/include/asm/tlb.h |  2 +-
 arch/ia64/include/asm/tlb.h  |  3 ++-
 arch/s390/include/asm/tlb.h  |  3 ++-
 arch/sh/include/asm/tlb.h    |  2 +-
 arch/um/include/asm/tlb.h    |  2 +-
 include/asm-generic/tlb.h    |  6 ++++--
 include/linux/mm_types.h     |  1 +
 mm/memory.c                  | 16 ++++++++++++++--
 mm/mmap.c                    |  2 +-
 10 files changed, 29 insertions(+), 11 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Dec. 5, 2017, 6:31 p.m.</div>
<pre class="content">
On Tue, Dec 5, 2017 at 6:58 AM, Michal Hocko &lt;mhocko@kernel.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; This all is nice but tlb_gather users are not aware of that and this can</span>
<span class="quote">&gt; actually cause some real problems. E.g. the oom_reaper tries to reap the</span>
<span class="quote">&gt; whole address space but it might race with threads accessing the memory [1].</span>
<span class="quote">&gt; It is possible that soft-dirty handling might suffer from the same</span>
<span class="quote">&gt; problem [2] as soon as it starts supporting the feature.</span>

So we fixed the oom reaper to just do proper TLB invalidates in commit
687cb0884a71 (&quot;mm, oom_reaper: gather each vma to prevent leaking TLB
entry&quot;).

So now &quot;fullmm&quot; should be the expected &quot;exit&quot; case, and it all should
be unambiguous.

Do we really have any reason to apply this patch any more?

                Linus
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 5, 2017, 7:14 p.m.</div>
<pre class="content">
On Tue 05-12-17 10:31:12, Linus Torvalds wrote:
<span class="quote">&gt; On Tue, Dec 5, 2017 at 6:58 AM, Michal Hocko &lt;mhocko@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This all is nice but tlb_gather users are not aware of that and this can</span>
<span class="quote">&gt; &gt; actually cause some real problems. E.g. the oom_reaper tries to reap the</span>
<span class="quote">&gt; &gt; whole address space but it might race with threads accessing the memory [1].</span>
<span class="quote">&gt; &gt; It is possible that soft-dirty handling might suffer from the same</span>
<span class="quote">&gt; &gt; problem [2] as soon as it starts supporting the feature.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So we fixed the oom reaper to just do proper TLB invalidates in commit</span>
<span class="quote">&gt; 687cb0884a71 (&quot;mm, oom_reaper: gather each vma to prevent leaking TLB</span>
<span class="quote">&gt; entry&quot;).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So now &quot;fullmm&quot; should be the expected &quot;exit&quot; case, and it all should</span>
<span class="quote">&gt; be unambiguous.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Do we really have any reason to apply this patch any more?</span>

Well, the point was the clarity. The bad behavior came as a surprise for
the oom reaper and as Minchan mentioned we would see a similar problem
with soft-dirty bits as soon as they are supported on arm64 or
potentially other architectures which might do special handling for exit
case.

So strictly speaking, this doesn&#39;t fix any known bug to me. But I would
find it more robust if the very special handling was explicit.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 14, 2017, 2:05 p.m.</div>
<pre class="content">
On Tue 05-12-17 20:14:37, Michal Hocko wrote:
<span class="quote">&gt; On Tue 05-12-17 10:31:12, Linus Torvalds wrote:</span>
<span class="quote">&gt; &gt; On Tue, Dec 5, 2017 at 6:58 AM, Michal Hocko &lt;mhocko@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt; This all is nice but tlb_gather users are not aware of that and this can</span>
<span class="quote">&gt; &gt; &gt; actually cause some real problems. E.g. the oom_reaper tries to reap the</span>
<span class="quote">&gt; &gt; &gt; whole address space but it might race with threads accessing the memory [1].</span>
<span class="quote">&gt; &gt; &gt; It is possible that soft-dirty handling might suffer from the same</span>
<span class="quote">&gt; &gt; &gt; problem [2] as soon as it starts supporting the feature.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So we fixed the oom reaper to just do proper TLB invalidates in commit</span>
<span class="quote">&gt; &gt; 687cb0884a71 (&quot;mm, oom_reaper: gather each vma to prevent leaking TLB</span>
<span class="quote">&gt; &gt; entry&quot;).</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So now &quot;fullmm&quot; should be the expected &quot;exit&quot; case, and it all should</span>
<span class="quote">&gt; &gt; be unambiguous.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Do we really have any reason to apply this patch any more?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Well, the point was the clarity. The bad behavior came as a surprise for</span>
<span class="quote">&gt; the oom reaper and as Minchan mentioned we would see a similar problem</span>
<span class="quote">&gt; with soft-dirty bits as soon as they are supported on arm64 or</span>
<span class="quote">&gt; potentially other architectures which might do special handling for exit</span>
<span class="quote">&gt; case.</span>

I am not going to push this patch if it is considered pointless but I
haven&#39;t heard back anything to the above argument.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/tlb.h b/arch/arm/include/asm/tlb.h</span>
<span class="p_header">index d5562f9ce600..f2696f831cae 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/tlb.h</span>
<span class="p_chunk">@@ -149,7 +149,8 @@</span> <span class="p_context"> static inline void tlb_flush_mmu(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;fullmm = !(start | (end+1));
<span class="p_header">diff --git a/arch/arm64/include/asm/tlb.h b/arch/arm64/include/asm/tlb.h</span>
<span class="p_header">index ffdaea7954bb..812c12f5e634 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -43,7 +43,7 @@</span> <span class="p_context"> static inline void tlb_flush(struct mmu_gather *tlb)</span>
 	 * The ASID allocator will either invalidate the ASID or mark
 	 * it as used.
 	 */
<span class="p_del">-	if (tlb-&gt;fullmm)</span>
<span class="p_add">+	if (tlb-&gt;fullmm &amp;&amp; tlb-&gt;exit)</span>
 		return;
 
 	/*
<span class="p_header">diff --git a/arch/ia64/include/asm/tlb.h b/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">index 44f0ac0df308..f3639447e26d 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/tlb.h</span>
<span class="p_chunk">@@ -170,7 +170,8 @@</span> <span class="p_context"> static inline void __tlb_alloc_page(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;max = ARRAY_SIZE(tlb-&gt;local);
<span class="p_header">diff --git a/arch/s390/include/asm/tlb.h b/arch/s390/include/asm/tlb.h</span>
<span class="p_header">index 457b7ba0fbb6..c02207eb4278 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/tlb.h</span>
<span class="p_chunk">@@ -50,7 +50,8 @@</span> <span class="p_context"> extern void tlb_remove_table(struct mmu_gather *tlb, void *table);</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+			unsigned long start, unsigned long end,</span>
<span class="p_add">+			bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/arch/sh/include/asm/tlb.h b/arch/sh/include/asm/tlb.h</span>
<span class="p_header">index 77abe192fb43..c4248c8b1e6b 100644</span>
<span class="p_header">--- a/arch/sh/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/sh/include/asm/tlb.h</span>
<span class="p_chunk">@@ -38,7 +38,7 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-		unsigned long start, unsigned long end)</span>
<span class="p_add">+		unsigned long start, unsigned long end, bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/arch/um/include/asm/tlb.h b/arch/um/include/asm/tlb.h</span>
<span class="p_header">index dce6db147f24..057d5c6adfe0 100644</span>
<span class="p_header">--- a/arch/um/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/um/include/asm/tlb.h</span>
<span class="p_chunk">@@ -47,7 +47,7 @@</span> <span class="p_context"> static inline void init_tlb_gather(struct mmu_gather *tlb)</span>
 
 static inline void
 arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-		unsigned long start, unsigned long end)</span>
<span class="p_add">+		unsigned long start, unsigned long end, bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 	tlb-&gt;start = start;
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index faddde44de8c..2b29d77d201e 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -101,7 +101,8 @@</span> <span class="p_context"> struct mmu_gather {</span>
 	unsigned int		fullmm : 1,
 	/* we have performed an operation which
 	 * requires a complete flush of the tlb */
<span class="p_del">-				need_flush_all : 1;</span>
<span class="p_add">+				need_flush_all : 1,</span>
<span class="p_add">+				exit : 1;</span>
 
 	struct mmu_gather_batch *active;
 	struct mmu_gather_batch	local;
<span class="p_chunk">@@ -113,7 +114,8 @@</span> <span class="p_context"> struct mmu_gather {</span>
 #define HAVE_GENERIC_MMU_GATHER
 
 void arch_tlb_gather_mmu(struct mmu_gather *tlb,
<span class="p_del">-	struct mm_struct *mm, unsigned long start, unsigned long end);</span>
<span class="p_add">+	struct mm_struct *mm, unsigned long start, unsigned long end,</span>
<span class="p_add">+	bool exit);</span>
 void tlb_flush_mmu(struct mmu_gather *tlb);
 void arch_tlb_finish_mmu(struct mmu_gather *tlb,
 			 unsigned long start, unsigned long end, bool force);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index cfd0ac4e5e0e..a115d26c6d51 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -527,6 +527,7 @@</span> <span class="p_context"> static inline cpumask_t *mm_cpumask(struct mm_struct *mm)</span>
 struct mmu_gather;
 extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 				unsigned long start, unsigned long end);
<span class="p_add">+extern void tlb_gather_mmu_exit(struct mmu_gather *tlb, struct mm_struct *mm);</span>
 extern void tlb_finish_mmu(struct mmu_gather *tlb,
 				unsigned long start, unsigned long end);
 
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 4617c4e3738e..9b0fd86176b0 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -218,13 +218,15 @@</span> <span class="p_context"> static bool tlb_next_batch(struct mmu_gather *tlb)</span>
 }
 
 void arch_tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
<span class="p_del">-				unsigned long start, unsigned long end)</span>
<span class="p_add">+				unsigned long start, unsigned long end,</span>
<span class="p_add">+				bool exit)</span>
 {
 	tlb-&gt;mm = mm;
 
 	/* Is it from 0 to ~0? */
 	tlb-&gt;fullmm     = !(start | (end+1));
 	tlb-&gt;need_flush_all = 0;
<span class="p_add">+	tlb-&gt;exit	= exit;</span>
 	tlb-&gt;local.next = NULL;
 	tlb-&gt;local.nr   = 0;
 	tlb-&gt;local.max  = ARRAY_SIZE(tlb-&gt;__pages);
<span class="p_chunk">@@ -408,7 +410,17 @@</span> <span class="p_context"> void tlb_remove_table(struct mmu_gather *tlb, void *table)</span>
 void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 			unsigned long start, unsigned long end)
 {
<span class="p_del">-	arch_tlb_gather_mmu(tlb, mm, start, end);</span>
<span class="p_add">+	arch_tlb_gather_mmu(tlb, mm, start, end, false);</span>
<span class="p_add">+	inc_tlb_flush_pending(tlb-&gt;mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* tlb_gather_mmu_exit</span>
<span class="p_add">+ * 	Basically same as tlb_gather_mmu except it allows architectures to</span>
<span class="p_add">+ * 	skip tlb flushing if they can ensure that nobody will reuse tlb entries</span>
<span class="p_add">+ */</span>
<span class="p_add">+void tlb_gather_mmu_exit(struct mmu_gather *tlb, struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	arch_tlb_gather_mmu(tlb, mm, 0, -1, true);</span>
 	inc_tlb_flush_pending(tlb-&gt;mm);
 }
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 476e810cf100..27dad246f52e 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2999,7 +2999,7 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 
 	lru_add_drain();
 	flush_cache_mm(mm);
<span class="p_del">-	tlb_gather_mmu(&amp;tlb, mm, 0, -1);</span>
<span class="p_add">+	tlb_gather_mmu_exit(&amp;tlb, mm);</span>
 	/* update_hiwater_rss(mm) here? but nobody should be looking */
 	/* Use -1 here to ensure all VMAs in the mm are unmapped */
 	unmap_vmas(&amp;tlb, vma, 0, -1);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



