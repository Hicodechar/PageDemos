
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.9,62/77] s390/mm: fix local TLB flushing vs. detach of an mm address space - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.9,62/77] s390/mm: fix local TLB flushing vs. detach of an mm address space</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 24, 2017, 8:32 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170924203245.280534713@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9968673/mbox/"
   >mbox</a>
|
   <a href="/patch/9968673/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9968673/">/patch/9968673/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CF846602B9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 24 Sep 2017 21:05:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C2B2228A03
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 24 Sep 2017 21:05:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B7A0E28C0F; Sun, 24 Sep 2017 21:05:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 287D128A03
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 24 Sep 2017 21:05:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932972AbdIXVFt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 24 Sep 2017 17:05:49 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:60158 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932552AbdIXUjw (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 24 Sep 2017 16:39:52 -0400
Received: from localhost (LFbn-1-12253-150.w90-92.abo.wanadoo.fr
	[90.92.67.150])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 0C943360;
	Sun, 24 Sep 2017 20:39:51 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;
Subject: [PATCH 4.9 62/77] s390/mm: fix local TLB flushing vs. detach of an
	mm address space
Date: Sun, 24 Sep 2017 22:32:47 +0200
Message-Id: &lt;20170924203245.280534713@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20170924203242.904856530@linuxfoundation.org&gt;
References: &lt;20170924203242.904856530@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Sept. 24, 2017, 8:32 p.m.</div>
<pre class="content">
4.9-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>

commit b3e5dc45fd1ec2aa1de6b80008f9295eb17e0659 upstream.

The local TLB flushing code keeps an additional mask in the mm.context,
the cpu_attach_mask. At the time a global flush of an address space is
done the cpu_attach_mask is copied to the mm_cpumask in order to avoid
future global flushes in case the mm is used by a single CPU only after
the flush.

Trouble is that the reset of the mm_cpumask is racy against the detach
of an mm address space by switch_mm. The current order is first the
global TLB flush and then the copy of the cpu_attach_mask to the
mm_cpumask. The order needs to be the other way around.
<span class="reviewed-by">
Reviewed-by: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/s390/include/asm/mmu_context.h |    4 ++--
 arch/s390/include/asm/tlbflush.h    |   26 +++++---------------------
 2 files changed, 7 insertions(+), 23 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -93,7 +93,6 @@</span> <span class="p_context"> static inline void switch_mm(struct mm_s</span>
 	if (prev == next)
 		return;
 	cpumask_set_cpu(cpu, &amp;next-&gt;context.cpu_attach_mask);
<span class="p_del">-	cpumask_set_cpu(cpu, mm_cpumask(next));</span>
 	/* Clear old ASCE by loading the kernel ASCE. */
 	__ctl_load(S390_lowcore.kernel_asce, 1, 1);
 	__ctl_load(S390_lowcore.kernel_asce, 7, 7);
<span class="p_chunk">@@ -111,7 +110,7 @@</span> <span class="p_context"> static inline void finish_arch_post_lock</span>
 		preempt_disable();
 		while (atomic_read(&amp;mm-&gt;context.flush_count))
 			cpu_relax();
<span class="p_del">-</span>
<span class="p_add">+		cpumask_set_cpu(smp_processor_id(), mm_cpumask(mm));</span>
 		if (mm-&gt;context.flush_mm)
 			__tlb_flush_mm(mm);
 		preempt_enable();
<span class="p_chunk">@@ -126,6 +125,7 @@</span> <span class="p_context"> static inline void activate_mm(struct mm</span>
                                struct mm_struct *next)
 {
 	switch_mm(prev, next, current);
<span class="p_add">+	cpumask_set_cpu(smp_processor_id(), mm_cpumask(next));</span>
 	set_user_asce(next);
 }
 
<span class="p_header">--- a/arch/s390/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -43,23 +43,6 @@</span> <span class="p_context"> static inline void __tlb_flush_global(vo</span>
  * Flush TLB entries for a specific mm on all CPUs (in case gmap is used
  * this implicates multiple ASCEs!).
  */
<span class="p_del">-static inline void __tlb_flush_full(struct mm_struct *mm)</span>
<span class="p_del">-{</span>
<span class="p_del">-	preempt_disable();</span>
<span class="p_del">-	atomic_inc(&amp;mm-&gt;context.flush_count);</span>
<span class="p_del">-	if (cpumask_equal(mm_cpumask(mm), cpumask_of(smp_processor_id()))) {</span>
<span class="p_del">-		/* Local TLB flush */</span>
<span class="p_del">-		__tlb_flush_local();</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		/* Global TLB flush */</span>
<span class="p_del">-		__tlb_flush_global();</span>
<span class="p_del">-		/* Reset TLB flush mask */</span>
<span class="p_del">-		cpumask_copy(mm_cpumask(mm), &amp;mm-&gt;context.cpu_attach_mask);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	atomic_dec(&amp;mm-&gt;context.flush_count);</span>
<span class="p_del">-	preempt_enable();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static inline void __tlb_flush_mm(struct mm_struct *mm)
 {
 	unsigned long gmap_asce;
<span class="p_chunk">@@ -71,16 +54,18 @@</span> <span class="p_context"> static inline void __tlb_flush_mm(struct</span>
 	 */
 	preempt_disable();
 	atomic_inc(&amp;mm-&gt;context.flush_count);
<span class="p_add">+	/* Reset TLB flush mask */</span>
<span class="p_add">+	cpumask_copy(mm_cpumask(mm), &amp;mm-&gt;context.cpu_attach_mask);</span>
<span class="p_add">+	barrier();</span>
 	gmap_asce = READ_ONCE(mm-&gt;context.gmap_asce);
 	if (MACHINE_HAS_IDTE &amp;&amp; gmap_asce != -1UL) {
 		if (gmap_asce)
 			__tlb_flush_idte(gmap_asce);
 		__tlb_flush_idte(mm-&gt;context.asce);
 	} else {
<span class="p_del">-		__tlb_flush_full(mm);</span>
<span class="p_add">+		/* Global TLB flush */</span>
<span class="p_add">+		__tlb_flush_global();</span>
 	}
<span class="p_del">-	/* Reset TLB flush mask */</span>
<span class="p_del">-	cpumask_copy(mm_cpumask(mm), &amp;mm-&gt;context.cpu_attach_mask);</span>
 	atomic_dec(&amp;mm-&gt;context.flush_count);
 	preempt_enable();
 }
<span class="p_chunk">@@ -94,7 +79,6 @@</span> <span class="p_context"> static inline void __tlb_flush_kernel(vo</span>
 }
 #else
 #define __tlb_flush_global()	__tlb_flush_local()
<span class="p_del">-#define __tlb_flush_full(mm)	__tlb_flush_local()</span>
 
 /*
  * Flush TLB entries for a specific ASCE on all CPUs.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



