
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RT,06/10] sched/migrate disable: handle updated task-mask mg-dis section - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RT,06/10] sched/migrate disable: handle updated task-mask mg-dis section</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2017, 5:33 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171123053434.029425273@goodmis.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10072367/mbox/"
   >mbox</a>
|
   <a href="/patch/10072367/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10072367/">/patch/10072367/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C80E260353 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 05:36:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B99A829C37
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 05:36:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AD66729C74; Thu, 23 Nov 2017 05:36:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7E7D129C37
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 05:36:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752871AbdKWFgE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Nov 2017 00:36:04 -0500
Received: from mail.kernel.org ([198.145.29.99]:50684 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751430AbdKWFef (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Nov 2017 00:34:35 -0500
Received: from gandalf.local.home (cpe-172-100-180-131.stny.res.rr.com
	[172.100.180.131])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 0AEFA219A0;
	Thu, 23 Nov 2017 05:34:35 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org 0AEFA219A0
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=goodmis.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=rostedt@goodmis.org
Received: from rostedt by gandalf.local.home with local (Exim 4.89)
	(envelope-from &lt;rostedt@goodmis.org&gt;)
	id 1eHk9i-0001Ww-4C; Thu, 23 Nov 2017 00:34:34 -0500
Message-Id: &lt;20171123053434.029425273@goodmis.org&gt;
User-Agent: quilt/0.63-1
Date: Thu, 23 Nov 2017 00:33:47 -0500
From: Steven Rostedt &lt;rostedt@goodmis.org&gt;
To: linux-kernel@vger.kernel.org,
	linux-rt-users &lt;linux-rt-users@vger.kernel.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Carsten Emde &lt;C.Emde@osadl.org&gt;,
	Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;,
	John Kacur &lt;jkacur@redhat.com&gt;,
	Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;,
	Julia Cartwright &lt;julia@ni.com&gt;,
	Daniel Wagner &lt;daniel.wagner@siemens.com&gt;,
	tom.zanussi@linux.intel.com, Alex Shi &lt;alex.shi@linaro.org&gt;,
	stable-rt@vger.kernel.org
Subject: [PATCH RT 06/10] sched/migrate disable: handle updated task-mask
	mg-dis section
References: &lt;20171123053341.174002403@goodmis.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline;
	filename=0006-sched-migrate-disable-handle-updated-task-mask-mg-di.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - Nov. 23, 2017, 5:33 a.m.</div>
<pre class="content">
4.4.97-rt111-rc2 stable review patch.
If anyone has any objections, please let me know.

------------------
<span class="from">
From: Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;</span>

If task&#39;s cpumask changes while in the task is in a migrate_disable()
section then we don&#39;t react on it after a migrate_enable(). It matters
however if current CPU is no longer part of the cpumask. We also miss
the -&gt;set_cpus_allowed() callback.
This patch fixes it by setting task-&gt;migrate_disable_update once we this
&quot;delayed&quot; hook.
This bug was introduced while fixing unrelated issue in
migrate_disable() in v4.4-rt3 (update_migrate_disable() got removed
during that).

Cc: stable-rt@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;</span>
<span class="signed-off-by">Signed-off-by: Steven Rostedt (VMware) &lt;rostedt@goodmis.org&gt;</span>
---
 include/linux/sched.h |  1 +
 kernel/sched/core.c   | 59 +++++++++++++++++++++++++++++++++++++++++++++------
 2 files changed, 54 insertions(+), 6 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index 56ccd0a3dd49..331cdbfc6431 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -1438,6 +1438,7 @@</span> <span class="p_context"> struct task_struct {</span>
 	unsigned int policy;
 #ifdef CONFIG_PREEMPT_RT_FULL
 	int migrate_disable;
<span class="p_add">+	int migrate_disable_update;</span>
 # ifdef CONFIG_SCHED_DEBUG
 	int migrate_disable_atomic;
 # endif
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">index 970b893a1d15..bea476417297 100644</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -1212,18 +1212,14 @@</span> <span class="p_context"> void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_ma</span>
 	p-&gt;nr_cpus_allowed = cpumask_weight(new_mask);
 }
 
<span class="p_del">-void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+static void __do_set_cpus_allowed_tail(struct task_struct *p,</span>
<span class="p_add">+				       const struct cpumask *new_mask)</span>
 {
 	struct rq *rq = task_rq(p);
 	bool queued, running;
 
 	lockdep_assert_held(&amp;p-&gt;pi_lock);
 
<span class="p_del">-	if (__migrate_disabled(p)) {</span>
<span class="p_del">-		cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_del">-		return;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	queued = task_on_rq_queued(p);
 	running = task_current(rq, p);
 
<span class="p_chunk">@@ -1246,6 +1242,20 @@</span> <span class="p_context"> void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
 		enqueue_task(rq, p, ENQUEUE_RESTORE);
 }
 
<span class="p_add">+void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (__migrate_disabled(p)) {</span>
<span class="p_add">+		lockdep_assert_held(&amp;p-&gt;pi_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+		cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_add">+#if defined(CONFIG_PREEMPT_RT_FULL) &amp;&amp; defined(CONFIG_SMP)</span>
<span class="p_add">+		p-&gt;migrate_disable_update = 1;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	__do_set_cpus_allowed_tail(p, new_mask);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static DEFINE_PER_CPU(struct cpumask, sched_cpumasks);
 static DEFINE_MUTEX(sched_down_mutex);
 static cpumask_t sched_down_cpumask;
<span class="p_chunk">@@ -3231,6 +3241,43 @@</span> <span class="p_context"> void migrate_enable(void)</span>
 	 */
 	p-&gt;migrate_disable = 0;
 
<span class="p_add">+	if (p-&gt;migrate_disable_update) {</span>
<span class="p_add">+		unsigned long flags;</span>
<span class="p_add">+		struct rq *rq;</span>
<span class="p_add">+</span>
<span class="p_add">+		rq = task_rq_lock(p, &amp;flags);</span>
<span class="p_add">+		update_rq_clock(rq);</span>
<span class="p_add">+</span>
<span class="p_add">+		__do_set_cpus_allowed_tail(p, &amp;p-&gt;cpus_allowed);</span>
<span class="p_add">+		task_rq_unlock(rq, p, &amp;flags);</span>
<span class="p_add">+</span>
<span class="p_add">+		p-&gt;migrate_disable_update = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		WARN_ON(smp_processor_id() != task_cpu(p));</span>
<span class="p_add">+		if (!cpumask_test_cpu(task_cpu(p), &amp;p-&gt;cpus_allowed)) {</span>
<span class="p_add">+			const struct cpumask *cpu_valid_mask = cpu_active_mask;</span>
<span class="p_add">+			struct migration_arg arg;</span>
<span class="p_add">+			unsigned int dest_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (p-&gt;flags &amp; PF_KTHREAD) {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * Kernel threads are allowed on online &amp;&amp; !active CPUs</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				cpu_valid_mask = cpu_online_mask;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			dest_cpu = cpumask_any_and(cpu_valid_mask, &amp;p-&gt;cpus_allowed);</span>
<span class="p_add">+			arg.task = p;</span>
<span class="p_add">+			arg.dest_cpu = dest_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+			unpin_current_cpu();</span>
<span class="p_add">+			preempt_lazy_enable();</span>
<span class="p_add">+			preempt_enable();</span>
<span class="p_add">+			stop_one_cpu(task_cpu(p), migration_cpu_stop, &amp;arg);</span>
<span class="p_add">+			tlb_migrate_finish(p-&gt;mm);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	unpin_current_cpu();
 	preempt_enable();
 	preempt_lazy_enable();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



