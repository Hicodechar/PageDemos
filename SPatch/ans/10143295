
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,21/37] kaiser: x86_cr3_pcid_noflush and x86_cr3_pcid_user - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,21/37] kaiser: x86_cr3_pcid_noflush and x86_cr3_pcid_user</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 8:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103195057.933822166@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10143295/mbox/"
   >mbox</a>
|
   <a href="/patch/10143295/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10143295/">/patch/10143295/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	146096034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:31:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 099732930B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:31:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F2AFE2930E; Wed,  3 Jan 2018 20:31:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4B0BF2930B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:31:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752019AbeACUbN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 15:31:13 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:60980 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751358AbeACUM1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 15:12:27 -0500
Received: from localhost (LFbn-1-12258-90.w90-92.abo.wanadoo.fr
	[90.92.71.90])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id CCD0EACC;
	Wed,  3 Jan 2018 20:12:26 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Hugh Dickins &lt;hughd@google.com&gt;,
	Jiri Kosina &lt;jkosina@suse.cz&gt;
Subject: [PATCH 4.4 21/37] kaiser: x86_cr3_pcid_noflush and x86_cr3_pcid_user
Date: Wed,  3 Jan 2018 21:11:27 +0100
Message-Id: &lt;20180103195057.933822166@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103195056.837404126@linuxfoundation.org&gt;
References: &lt;20180103195056.837404126@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 3, 2018, 8:11 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Hugh Dickins &lt;hughd@google.com&gt;</span>


Mostly this commit is just unshouting X86_CR3_PCID_KERN_VAR and
X86_CR3_PCID_USER_VAR: we usually name variables in lower-case.

But why does x86_cr3_pcid_noflush need to be __aligned(PAGE_SIZE)?
Ah, it&#39;s a leftover from when kaiser_add_user_map() once complained
about mapping the same page twice.  Make it __read_mostly instead.
(I&#39;m a little uneasy about all the unrelated data which shares its
page getting user-mapped too, but that was so before, and not a big
deal: though we call it user-mapped, it&#39;s not mapped with _PAGE_USER.)

And there is a little change around the two calls to do_nmi().
Previously they set the NOFLUSH bit (if PCID supported) when
forcing to kernel context before do_nmi(); now they also have the
NOFLUSH bit set (if PCID supported) when restoring context after:
nothing done in do_nmi() should require a TLB to be flushed here.
<span class="signed-off-by">
Signed-off-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="acked-by">Acked-by: Jiri Kosina &lt;jkosina@suse.cz&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 arch/x86/entry/entry_64.S     |    8 ++++----
 arch/x86/include/asm/kaiser.h |   11 +++++------
 arch/x86/mm/kaiser.c          |   13 +++++++------
 3 files changed, 16 insertions(+), 16 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/entry/entry_64.S</span>
<span class="p_header">+++ b/arch/x86/entry/entry_64.S</span>
<span class="p_chunk">@@ -1290,11 +1290,11 @@</span> <span class="p_context"> ENTRY(nmi)</span>
 	/* Unconditionally use kernel CR3 for do_nmi() */
 	/* %rax is saved above, so OK to clobber here */
 	movq	%cr3, %rax
<span class="p_add">+	/* If PCID enabled, NOFLUSH now and NOFLUSH on return */</span>
<span class="p_add">+	orq	x86_cr3_pcid_noflush, %rax</span>
 	pushq	%rax
 	/* mask off &quot;user&quot; bit of pgd address and 12 PCID bits: */
 	andq	$(~(X86_CR3_PCID_ASID_MASK | KAISER_SHADOW_PGD_OFFSET)), %rax
<span class="p_del">-	/* Add back kernel PCID and &quot;no flush&quot; bit */</span>
<span class="p_del">-	orq	X86_CR3_PCID_KERN_VAR, %rax</span>
 	movq	%rax, %cr3
 #endif
 	call	do_nmi
<span class="p_chunk">@@ -1534,11 +1534,11 @@</span> <span class="p_context"> end_repeat_nmi:</span>
 	/* Unconditionally use kernel CR3 for do_nmi() */
 	/* %rax is saved above, so OK to clobber here */
 	movq	%cr3, %rax
<span class="p_add">+	/* If PCID enabled, NOFLUSH now and NOFLUSH on return */</span>
<span class="p_add">+	orq	x86_cr3_pcid_noflush, %rax</span>
 	pushq	%rax
 	/* mask off &quot;user&quot; bit of pgd address and 12 PCID bits: */
 	andq	$(~(X86_CR3_PCID_ASID_MASK | KAISER_SHADOW_PGD_OFFSET)), %rax
<span class="p_del">-	/* Add back kernel PCID and &quot;no flush&quot; bit */</span>
<span class="p_del">-	orq	X86_CR3_PCID_KERN_VAR, %rax</span>
 	movq	%rax, %cr3
 #endif
 
<span class="p_header">--- a/arch/x86/include/asm/kaiser.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kaiser.h</span>
<span class="p_chunk">@@ -25,7 +25,7 @@</span> <span class="p_context"></span>
 .macro _SWITCH_TO_KERNEL_CR3 reg
 movq %cr3, \reg
 andq $(~(X86_CR3_PCID_ASID_MASK | KAISER_SHADOW_PGD_OFFSET)), \reg
<span class="p_del">-orq  X86_CR3_PCID_KERN_VAR, \reg</span>
<span class="p_add">+orq  x86_cr3_pcid_noflush, \reg</span>
 movq \reg, %cr3
 .endm
 
<span class="p_chunk">@@ -37,11 +37,10 @@</span> <span class="p_context"> movq \reg, %cr3</span>
  * not enabled): so that the one register can update both memory and cr3.
  */
 movq %cr3, \reg
<span class="p_del">-andq $(~(X86_CR3_PCID_ASID_MASK | KAISER_SHADOW_PGD_OFFSET)), \reg</span>
<span class="p_del">-orq  PER_CPU_VAR(X86_CR3_PCID_USER_VAR), \reg</span>
<span class="p_add">+orq  PER_CPU_VAR(x86_cr3_pcid_user), \reg</span>
 js   9f
 /* FLUSH this time, reset to NOFLUSH for next time (if PCID enabled) */
<span class="p_del">-movb \regb, PER_CPU_VAR(X86_CR3_PCID_USER_VAR+7)</span>
<span class="p_add">+movb \regb, PER_CPU_VAR(x86_cr3_pcid_user+7)</span>
 9:
 movq \reg, %cr3
 .endm
<span class="p_chunk">@@ -94,8 +93,8 @@</span> <span class="p_context"> movq PER_CPU_VAR(unsafe_stack_register_b</span>
 */
 DECLARE_PER_CPU_USER_MAPPED(unsigned long, unsafe_stack_register_backup);
 
<span class="p_del">-extern unsigned long X86_CR3_PCID_KERN_VAR;</span>
<span class="p_del">-DECLARE_PER_CPU(unsigned long, X86_CR3_PCID_USER_VAR);</span>
<span class="p_add">+extern unsigned long x86_cr3_pcid_noflush;</span>
<span class="p_add">+DECLARE_PER_CPU(unsigned long, x86_cr3_pcid_user);</span>
 
 extern char __per_cpu_user_mapped_start[], __per_cpu_user_mapped_end[];
 
<span class="p_header">--- a/arch/x86/mm/kaiser.c</span>
<span class="p_header">+++ b/arch/x86/mm/kaiser.c</span>
<span class="p_chunk">@@ -29,8 +29,8 @@</span> <span class="p_context"> DEFINE_PER_CPU_USER_MAPPED(unsigned long</span>
  * This is also handy because systems that do not support PCIDs
  * just end up or&#39;ing a 0 into their CR3, which does no harm.
  */
<span class="p_del">-__aligned(PAGE_SIZE) unsigned long X86_CR3_PCID_KERN_VAR;</span>
<span class="p_del">-DEFINE_PER_CPU(unsigned long, X86_CR3_PCID_USER_VAR);</span>
<span class="p_add">+unsigned long x86_cr3_pcid_noflush __read_mostly;</span>
<span class="p_add">+DEFINE_PER_CPU(unsigned long, x86_cr3_pcid_user);</span>
 
 /*
  * At runtime, the only things we map are some things for CPU
<span class="p_chunk">@@ -304,7 +304,8 @@</span> <span class="p_context"> void __init kaiser_init(void)</span>
 				  sizeof(gate_desc) * NR_VECTORS,
 				  __PAGE_KERNEL);
 
<span class="p_del">-	kaiser_add_user_map_early(&amp;X86_CR3_PCID_KERN_VAR, PAGE_SIZE,</span>
<span class="p_add">+	kaiser_add_user_map_early(&amp;x86_cr3_pcid_noflush,</span>
<span class="p_add">+				  sizeof(x86_cr3_pcid_noflush),</span>
 				  __PAGE_KERNEL);
 }
 
<span class="p_chunk">@@ -384,8 +385,8 @@</span> <span class="p_context"> void kaiser_setup_pcid(void)</span>
 	 * These variables are used by the entry/exit
 	 * code to change PCID and pgd and TLB flushing.
 	 */
<span class="p_del">-	X86_CR3_PCID_KERN_VAR = kern_cr3;</span>
<span class="p_del">-	this_cpu_write(X86_CR3_PCID_USER_VAR, user_cr3);</span>
<span class="p_add">+	x86_cr3_pcid_noflush = kern_cr3;</span>
<span class="p_add">+	this_cpu_write(x86_cr3_pcid_user, user_cr3);</span>
 }
 
 /*
<span class="p_chunk">@@ -395,7 +396,7 @@</span> <span class="p_context"> void kaiser_setup_pcid(void)</span>
  */
 void kaiser_flush_tlb_on_return_to_user(void)
 {
<span class="p_del">-	this_cpu_write(X86_CR3_PCID_USER_VAR,</span>
<span class="p_add">+	this_cpu_write(x86_cr3_pcid_user,</span>
 			X86_CR3_PCID_USER_FLUSH | KAISER_SHADOW_PGD_OFFSET);
 }
 EXPORT_SYMBOL(kaiser_flush_tlb_on_return_to_user);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



