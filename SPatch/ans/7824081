
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/6] mm: Add a vm_special_mapping .fault method - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/6] mm: Add a vm_special_mapping .fault method</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 11, 2015, 3:21 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;4e911d2752d3b9e52d7496e46b389fc630cdc3a8.1449803537.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7824081/mbox/"
   >mbox</a>
|
   <a href="/patch/7824081/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7824081/">/patch/7824081/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 9709B9F349
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Dec 2015 03:22:00 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C836E205B3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Dec 2015 03:21:59 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CF15120588
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Dec 2015 03:21:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754153AbbLKDVz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 10 Dec 2015 22:21:55 -0500
Received: from mail.kernel.org ([198.145.29.136]:41022 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753948AbbLKDVw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 10 Dec 2015 22:21:52 -0500
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 11B9E204E0;
	Fri, 11 Dec 2015 03:21:52 +0000 (UTC)
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 4F53C20524;
	Fri, 11 Dec 2015 03:21:51 +0000 (UTC)
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [PATCH 1/6] mm: Add a vm_special_mapping .fault method
Date: Thu, 10 Dec 2015 19:21:42 -0800
Message-Id: &lt;4e911d2752d3b9e52d7496e46b389fc630cdc3a8.1449803537.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;cover.1449803537.git.luto@kernel.org&gt;
References: &lt;cover.1449803537.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1449803537.git.luto@kernel.org&gt;
References: &lt;cover.1449803537.git.luto@kernel.org&gt;
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Dec. 11, 2015, 3:21 a.m.</div>
<pre class="content">
<span class="from">From: Andy Lutomirski &lt;luto@amacapital.net&gt;</span>

Requiring special mappings to give a list of struct pages is
inflexible: it prevents sane use of IO memory in a special mapping,
it&#39;s inefficient (it requires arch code to initialize a list of
struct pages, and it requires the mm core to walk the entire list
just to figure out how long it is), and it prevents arch code from
doing anything fancy when a special mapping fault occurs.

Add a .fault method as an alternative to filling in a .pages array.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 include/linux/mm_types.h | 19 ++++++++++++++++++-
 mm/mmap.c                | 13 +++++++++----
 2 files changed, 27 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Dec. 11, 2015, 10:28 p.m.</div>
<pre class="content">
On Thu, 10 Dec 2015 19:21:42 -0800 Andy Lutomirski &lt;luto@kernel.org&gt; wrote:
<span class="quote">
&gt; From: Andy Lutomirski &lt;luto@amacapital.net&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Requiring special mappings to give a list of struct pages is</span>
<span class="quote">&gt; inflexible: it prevents sane use of IO memory in a special mapping,</span>
<span class="quote">&gt; it&#39;s inefficient (it requires arch code to initialize a list of</span>
<span class="quote">&gt; struct pages, and it requires the mm core to walk the entire list</span>
<span class="quote">&gt; just to figure out how long it is), and it prevents arch code from</span>
<span class="quote">&gt; doing anything fancy when a special mapping fault occurs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add a .fault method as an alternative to filling in a .pages array.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -568,10 +568,27 @@ static inline void clear_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +struct vm_fault;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  struct vm_special_mapping</span>
<span class="quote">&gt;  {</span>

We may as well fix the code layout while we&#39;re in there.
<span class="quote">
&gt; -	const char *name;</span>
<span class="quote">&gt; +	const char *name;	/* The name, e.g. &quot;[vdso]&quot;. */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * If .fault is not provided, this is points to a</span>

s/is//
<span class="quote">
&gt; +	 * NULL-terminated array of pages that back the special mapping.</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * This must not be NULL unless .fault is provided.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt;  	struct page **pages;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * If non-NULL, then this is called to resolve page faults</span>
<span class="quote">&gt; +	 * on the special mapping.  If used, .pages is not checked.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	int (*fault)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +		     struct vm_area_struct *vma,</span>
<span class="quote">&gt; +		     struct vm_fault *vmf);</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  enum tlb_flush_reason {</span>
<span class="quote">&gt; diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="quote">&gt; index 2ce04a649f6b..f717453b1a57 100644</span>
<span class="quote">&gt; --- a/mm/mmap.c</span>
<span class="quote">&gt; +++ b/mm/mmap.c</span>
<span class="quote">&gt; @@ -3030,11 +3030,16 @@ static int special_mapping_fault(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	pgoff_t pgoff;</span>
<span class="quote">&gt;  	struct page **pages;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (vma-&gt;vm_ops == &amp;legacy_special_mapping_vmops)</span>
<span class="quote">&gt; +	if (vma-&gt;vm_ops == &amp;legacy_special_mapping_vmops) {</span>
<span class="quote">&gt;  		pages = vma-&gt;vm_private_data;</span>
<span class="quote">&gt; -	else</span>
<span class="quote">&gt; -		pages = ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;</span>
<span class="quote">&gt; -			pages;</span>
<span class="quote">&gt; +	} else {</span>
<span class="quote">&gt; +		struct vm_special_mapping *sm = vma-&gt;vm_private_data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (sm-&gt;fault)</span>
<span class="quote">&gt; +			return sm-&gt;fault(sm, vma, vmf);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		pages = sm-&gt;pages;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (pgoff = vmf-&gt;pgoff; pgoff &amp;&amp; *pages; ++pages)</span>
<span class="quote">&gt;  		pgoff--;</span>

Otherwise looks OK.  I&#39;ll assume this will be merged via an x86 tree.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Dec. 14, 2015, 9:17 a.m.</div>
<pre class="content">
* Andrew Morton &lt;akpm@linux-foundation.org&gt; wrote:
<span class="quote">
&gt; &gt; +	} else {</span>
<span class="quote">&gt; &gt; +		struct vm_special_mapping *sm = vma-&gt;vm_private_data;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (sm-&gt;fault)</span>
<span class="quote">&gt; &gt; +			return sm-&gt;fault(sm, vma, vmf);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		pages = sm-&gt;pages;</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	for (pgoff = vmf-&gt;pgoff; pgoff &amp;&amp; *pages; ++pages)</span>
<span class="quote">&gt; &gt;  		pgoff--;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Otherwise looks OK.  I&#39;ll assume this will be merged via an x86 tree.</span>

Yeah, was hoping to be able to do that with your Acked-by.

Thanks,

	Ingo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index f8d1492a114f..3d315d373daf 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -568,10 +568,27 @@</span> <span class="p_context"> static inline void clear_tlb_flush_pending(struct mm_struct *mm)</span>
 }
 #endif
 
<span class="p_add">+struct vm_fault;</span>
<span class="p_add">+</span>
 struct vm_special_mapping
 {
<span class="p_del">-	const char *name;</span>
<span class="p_add">+	const char *name;	/* The name, e.g. &quot;[vdso]&quot;. */</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If .fault is not provided, this is points to a</span>
<span class="p_add">+	 * NULL-terminated array of pages that back the special mapping.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * This must not be NULL unless .fault is provided.</span>
<span class="p_add">+	 */</span>
 	struct page **pages;
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If non-NULL, then this is called to resolve page faults</span>
<span class="p_add">+	 * on the special mapping.  If used, .pages is not checked.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	int (*fault)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *vma,</span>
<span class="p_add">+		     struct vm_fault *vmf);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 2ce04a649f6b..f717453b1a57 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -3030,11 +3030,16 @@</span> <span class="p_context"> static int special_mapping_fault(struct vm_area_struct *vma,</span>
 	pgoff_t pgoff;
 	struct page **pages;
 
<span class="p_del">-	if (vma-&gt;vm_ops == &amp;legacy_special_mapping_vmops)</span>
<span class="p_add">+	if (vma-&gt;vm_ops == &amp;legacy_special_mapping_vmops) {</span>
 		pages = vma-&gt;vm_private_data;
<span class="p_del">-	else</span>
<span class="p_del">-		pages = ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;</span>
<span class="p_del">-			pages;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		struct vm_special_mapping *sm = vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (sm-&gt;fault)</span>
<span class="p_add">+			return sm-&gt;fault(sm, vma, vmf);</span>
<span class="p_add">+</span>
<span class="p_add">+		pages = sm-&gt;pages;</span>
<span class="p_add">+	}</span>
 
 	for (pgoff = vmf-&gt;pgoff; pgoff &amp;&amp; *pages; ++pages)
 		pgoff--;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



