
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/4] perf stat: Add computation of TopDown formulas - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/4] perf stat: Add computation of TopDown formulas</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 24, 2016, 7:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1464119559-17203-2-git-send-email-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9134213/mbox/"
   >mbox</a>
|
   <a href="/patch/9134213/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9134213/">/patch/9134213/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EC378607D7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 May 2016 19:53:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E0892281E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 May 2016 19:53:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D52B72829E; Tue, 24 May 2016 19:53:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0C48F281E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 May 2016 19:53:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932509AbcEXTwr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 May 2016 15:52:47 -0400
Received: from mga01.intel.com ([192.55.52.88]:32658 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932250AbcEXTwp (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 May 2016 15:52:45 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga101.fm.intel.com with ESMTP; 24 May 2016 12:52:46 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.26,360,1459839600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;973731717&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.35])
	by fmsmga001.fm.intel.com with ESMTP; 24 May 2016 12:52:44 -0700
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 51A81303970; Tue, 24 May 2016 12:52:44 -0700 (PDT)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@Kernel.org
Cc: jolsa@kernel.org, linux-kernel@vger.kernel.org,
	Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 2/4] perf stat: Add computation of TopDown formulas
Date: Tue, 24 May 2016 12:52:37 -0700
Message-Id: &lt;1464119559-17203-2-git-send-email-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.5.5
In-Reply-To: &lt;1464119559-17203-1-git-send-email-andi@firstfloor.org&gt;
References: &lt;1464119559-17203-1-git-send-email-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - May 24, 2016, 7:52 p.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Implement the TopDown formulas in perf stat. The topdown basic metrics
reported by the kernel are collected, and the formulas are computed
and output as normal metrics.

See the kernel commit exporting the events for details on the used
metrics.

v2: Always print all metrics, only use thresholds for coloring.
v3: Mark retiring over threshold green, not red.
v4:
Only print one decimal digit
Fix color printing of one metric
v5: Avoid printing -0.0
v6: Remove extra frontend event lookup
<span class="acked-by">Acked-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/util/stat-shadow.c | 162 ++++++++++++++++++++++++++++++++++++++++++
 tools/perf/util/stat.c        |   5 ++
 tools/perf/util/stat.h        |   5 ++
 3 files changed, 172 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168071">Nilay Vaish</a> - June 1, 2016, 2:50 p.m.</div>
<pre class="content">
On 24 May 2016 at 14:52, Andi Kleen &lt;andi@firstfloor.org&gt; wrote:
<span class="quote">&gt; +static double td_be_bound(int ctx, int cpu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="quote">&gt; +                     td_bad_spec(ctx, cpu) +</span>
<span class="quote">&gt; +                     td_retiring(ctx, cpu));</span>
<span class="quote">&gt; +       if (sum == 0)</span>
<span class="quote">&gt; +               return 0;</span>
<span class="quote">&gt; +       return sanitize_val(1.0 - sum);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>

Can you explain why we need the check on sum?

--
Nilay
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123">Andi Kleen</a> - June 1, 2016, 2:56 p.m.</div>
<pre class="content">
On Wed, Jun 01, 2016 at 09:50:07AM -0500, Nilay Vaish wrote:
<span class="quote">&gt; On 24 May 2016 at 14:52, Andi Kleen &lt;andi@firstfloor.org&gt; wrote:</span>
<span class="quote">&gt; &gt; +static double td_be_bound(int ctx, int cpu)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +       double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="quote">&gt; &gt; +                     td_bad_spec(ctx, cpu) +</span>
<span class="quote">&gt; &gt; +                     td_retiring(ctx, cpu));</span>
<span class="quote">&gt; &gt; +       if (sum == 0)</span>
<span class="quote">&gt; &gt; +               return 0;</span>
<span class="quote">&gt; &gt; +       return sanitize_val(1.0 - sum);</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you explain why we need the check on sum?</span>

You mean the if statement?

Otherwise if nothing was measured it would always report everything backend bound,
which wouldn&#39;t be correct.

-Andi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168071">Nilay Vaish</a> - June 2, 2016, 11:56 a.m.</div>
<pre class="content">
Andi,  I am talking about the if statement.  I don&#39;t know why it would
happen that nothing got measured.  I am guessing you saw it happen.
May be we can add a comment in the patch that it is possible that all
counter values are zero and therefore we need that if statement.

--
Nilay

On 1 June 2016 at 09:56, Andi Kleen &lt;ak@linux.intel.com&gt; wrote:
<span class="quote">&gt; On Wed, Jun 01, 2016 at 09:50:07AM -0500, Nilay Vaish wrote:</span>
<span class="quote">&gt;&gt; On 24 May 2016 at 14:52, Andi Kleen &lt;andi@firstfloor.org&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; +static double td_be_bound(int ctx, int cpu)</span>
<span class="quote">&gt;&gt; &gt; +{</span>
<span class="quote">&gt;&gt; &gt; +       double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="quote">&gt;&gt; &gt; +                     td_bad_spec(ctx, cpu) +</span>
<span class="quote">&gt;&gt; &gt; +                     td_retiring(ctx, cpu));</span>
<span class="quote">&gt;&gt; &gt; +       if (sum == 0)</span>
<span class="quote">&gt;&gt; &gt; +               return 0;</span>
<span class="quote">&gt;&gt; &gt; +       return sanitize_val(1.0 - sum);</span>
<span class="quote">&gt;&gt; &gt; +}</span>
<span class="quote">&gt;&gt; &gt; +</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Can you explain why we need the check on sum?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You mean the if statement?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Otherwise if nothing was measured it would always report everything backend bound,</span>
<span class="quote">&gt; which wouldn&#39;t be correct.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -Andi</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; ak@linux.intel.com -- Speaking for myself only</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - June 2, 2016, 2:26 p.m.</div>
<pre class="content">
On Thu, Jun 02, 2016 at 06:56:51AM -0500, Nilay Vaish wrote:
<span class="quote">&gt; Andi,  I am talking about the if statement.  I don&#39;t know why it would</span>
<span class="quote">&gt; happen that nothing got measured.  I am guessing you saw it happen.</span>
<span class="quote">&gt; May be we can add a comment in the patch that it is possible that all</span>
<span class="quote">&gt; counter values are zero and therefore we need that if statement.</span>

Sure it can happen that nothing got measured, for example if the program
didn&#39;t run, or the group didn&#39;t get scheduled.

-Andi
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index fdb71961143e..509ed62a064e 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -36,6 +36,11 @@</span> <span class="p_context"> static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
 static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];
<span class="p_add">+static struct stats runtime_topdown_total_slots[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
 static bool have_frontend_stalled;
 
 struct stats walltime_nsecs_stats;
<span class="p_chunk">@@ -82,6 +87,11 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 		sizeof(runtime_transaction_stats));
 	memset(runtime_elision_stats, 0, sizeof(runtime_elision_stats));
 	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));
<span class="p_add">+	memset(runtime_topdown_total_slots, 0, sizeof(runtime_topdown_total_slots));</span>
<span class="p_add">+	memset(runtime_topdown_slots_retired, 0, sizeof(runtime_topdown_slots_retired));</span>
<span class="p_add">+	memset(runtime_topdown_slots_issued, 0, sizeof(runtime_topdown_slots_issued));</span>
<span class="p_add">+	memset(runtime_topdown_fetch_bubbles, 0, sizeof(runtime_topdown_fetch_bubbles));</span>
<span class="p_add">+	memset(runtime_topdown_recovery_bubbles, 0, sizeof(runtime_topdown_recovery_bubbles));</span>
 }
 
 /*
<span class="p_chunk">@@ -104,6 +114,16 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
 		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);
 	else if (perf_stat_evsel__is(counter, ELISION_START))
 		update_stats(&amp;runtime_elision_stats[ctx][cpu], count[0]);
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_TOTAL_SLOTS))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_ISSUED))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_RETIRED))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_FETCH_BUBBLES))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu],count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_RECOVERY_BUBBLES))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count[0]);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))
 		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count[0]);
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))
<span class="p_chunk">@@ -301,6 +321,107 @@</span> <span class="p_context"> static void print_ll_cache_misses(int cpu,</span>
 	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * High level &quot;TopDown&quot; CPU core pipe line bottleneck break down.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Basic concept following</span>
<span class="p_add">+ * Yasin, A Top Down Method for Performance analysis and Counter architecture</span>
<span class="p_add">+ * ISPASS14</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The CPU pipeline is divided into 4 areas that can be bottlenecks:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Frontend -&gt; Backend -&gt; Retiring</span>
<span class="p_add">+ * BadSpeculation in addition means out of order execution that is thrown away</span>
<span class="p_add">+ * (for example branch mispredictions)</span>
<span class="p_add">+ * Frontend is instruction decoding.</span>
<span class="p_add">+ * Backend is execution, like computation and accessing data in memory</span>
<span class="p_add">+ * Retiring is good execution that is not directly bottlenecked</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The formulas are computed in slots.</span>
<span class="p_add">+ * A slot is an entry in the pipeline each for the pipeline width</span>
<span class="p_add">+ * (for example a 4-wide pipeline has 4 slots for each cycle)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Formulas:</span>
<span class="p_add">+ * BadSpeculation = ((SlotsIssued - SlotsRetired) + RecoveryBubbles) /</span>
<span class="p_add">+ *			TotalSlots</span>
<span class="p_add">+ * Retiring = SlotsRetired / TotalSlots</span>
<span class="p_add">+ * FrontendBound = FetchBubbles / TotalSlots</span>
<span class="p_add">+ * BackendBound = 1.0 - BadSpeculation - Retiring - FrontendBound</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The kernel provides the mapping to the low level CPU events and any scaling</span>
<span class="p_add">+ * needed for the CPU pipeline width, for example:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * TotalSlots = Cycles * 4</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The scaling factor is communicated in the sysfs unit.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * In some cases the CPU may not be able to measure all the formulas due to</span>
<span class="p_add">+ * missing events. In this case multiple formulas are combined, as possible.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Full TopDown supports more levels to sub-divide each area: for example</span>
<span class="p_add">+ * BackendBound into computing bound and memory bound. For now we only</span>
<span class="p_add">+ * support Level 1 TopDown.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static double sanitize_val(double x)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (x &lt; 0 &amp;&amp; x &gt;= -0.02)</span>
<span class="p_add">+		return 0.0;</span>
<span class="p_add">+	return x;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_total_slots(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return avg_stats(&amp;runtime_topdown_total_slots[ctx][cpu]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_bad_spec(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double bad_spec = 0;</span>
<span class="p_add">+	double total_slots;</span>
<span class="p_add">+	double total;</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_topdown_slots_issued[ctx][cpu]) -</span>
<span class="p_add">+		avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]) +</span>
<span class="p_add">+		avg_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu]);</span>
<span class="p_add">+	total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		bad_spec = total / total_slots;</span>
<span class="p_add">+	return sanitize_val(bad_spec);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_retiring(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double retiring = 0;</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	double ret_slots = avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		retiring = ret_slots / total_slots;</span>
<span class="p_add">+	return retiring;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_fe_bound(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double fe_bound = 0;</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	double fetch_bub = avg_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		fe_bound = fetch_bub / total_slots;</span>
<span class="p_add">+	return fe_bound;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_be_bound(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="p_add">+		      td_bad_spec(ctx, cpu) +</span>
<span class="p_add">+		      td_retiring(ctx, cpu));</span>
<span class="p_add">+	if (sum == 0)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	return sanitize_val(1.0 - sum);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
 				   struct perf_stat_output_ctx *out)
<span class="p_chunk">@@ -308,6 +429,7 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 	void *ctxp = out-&gt;ctx;
 	print_metric_t print_metric = out-&gt;print_metric;
 	double total, ratio = 0.0, total2;
<span class="p_add">+	const char *color = NULL;</span>
 	int ctx = evsel_context(evsel);
 
 	if (perf_evsel__match(evsel, HARDWARE, HW_INSTRUCTIONS)) {
<span class="p_chunk">@@ -450,6 +572,46 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 				     avg / ratio);
 		else
 			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_FETCH_BUBBLES)) {</span>
<span class="p_add">+		double fe_bound = td_fe_bound(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (fe_bound &gt; 0.2)</span>
<span class="p_add">+			color = PERF_COLOR_RED;</span>
<span class="p_add">+		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;frontend bound&quot;,</span>
<span class="p_add">+				fe_bound * 100.);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_RETIRED)) {</span>
<span class="p_add">+		double retiring = td_retiring(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (retiring &gt; 0.7)</span>
<span class="p_add">+			color = PERF_COLOR_GREEN;</span>
<span class="p_add">+		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;retiring&quot;,</span>
<span class="p_add">+				retiring * 100.);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_RECOVERY_BUBBLES)) {</span>
<span class="p_add">+		double bad_spec = td_bad_spec(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (bad_spec &gt; 0.1)</span>
<span class="p_add">+			color = PERF_COLOR_RED;</span>
<span class="p_add">+		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;bad speculation&quot;,</span>
<span class="p_add">+				bad_spec * 100.);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_ISSUED)) {</span>
<span class="p_add">+		double be_bound = td_be_bound(ctx, cpu);</span>
<span class="p_add">+		const char *name = &quot;backend bound&quot;;</span>
<span class="p_add">+		static int have_recovery_bubbles = -1;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* In case the CPU does not support topdown-recovery-bubbles */</span>
<span class="p_add">+		if (have_recovery_bubbles &lt; 0)</span>
<span class="p_add">+			have_recovery_bubbles = pmu_have_event(&quot;cpu&quot;,</span>
<span class="p_add">+					&quot;topdown-recovery-bubbles&quot;);</span>
<span class="p_add">+		if (!have_recovery_bubbles)</span>
<span class="p_add">+			name = &quot;backend bound/bad spec&quot;;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (be_bound &gt; 0.2)</span>
<span class="p_add">+			color = PERF_COLOR_RED;</span>
<span class="p_add">+		if (td_total_slots(ctx, cpu) &gt; 0)</span>
<span class="p_add">+			print_metric(ctxp, color, &quot;%8.1f%%&quot;, name,</span>
<span class="p_add">+					be_bound * 100.);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, name, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
 		char unit_buf[10];
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index ffa1d0653861..c1ba255f2abe 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -79,6 +79,11 @@</span> <span class="p_context"> static const char *id_str[PERF_STAT_EVSEL_ID__MAX] = {</span>
 	ID(TRANSACTION_START,	cpu/tx-start/),
 	ID(ELISION_START,	cpu/el-start/),
 	ID(CYCLES_IN_TX_CP,	cpu/cycles-ct/),
<span class="p_add">+	ID(TOPDOWN_TOTAL_SLOTS, topdown-total-slots),</span>
<span class="p_add">+	ID(TOPDOWN_SLOTS_ISSUED, topdown-slots-issued),</span>
<span class="p_add">+	ID(TOPDOWN_SLOTS_RETIRED, topdown-slots-retired),</span>
<span class="p_add">+	ID(TOPDOWN_FETCH_BUBBLES, topdown-fetch-bubbles),</span>
<span class="p_add">+	ID(TOPDOWN_RECOVERY_BUBBLES, topdown-recovery-bubbles),</span>
 };
 #undef ID
 
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 0150e786ccc7..c29bb94c48a4 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -17,6 +17,11 @@</span> <span class="p_context"> enum perf_stat_evsel_id {</span>
 	PERF_STAT_EVSEL_ID__TRANSACTION_START,
 	PERF_STAT_EVSEL_ID__ELISION_START,
 	PERF_STAT_EVSEL_ID__CYCLES_IN_TX_CP,
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_TOTAL_SLOTS,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_ISSUED,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_RETIRED,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_FETCH_BUBBLES,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_RECOVERY_BUBBLES,</span>
 	PERF_STAT_EVSEL_ID__MAX,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



