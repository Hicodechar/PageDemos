
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv8,resend,1/2] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv8,resend,1/2] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 10, 2016, 1:29 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1462886951-23376-1-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9057641/mbox/"
   >mbox</a>
|
   <a href="/patch/9057641/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9057641/">/patch/9057641/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 640C19F1C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 May 2016 13:45:31 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 94EBD200E8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 May 2016 13:45:30 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 7F04D20142
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 May 2016 13:45:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752242AbcEJNp0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 10 May 2016 09:45:26 -0400
Received: from mail-am1on0119.outbound.protection.outlook.com
	([157.56.112.119]:22213
	&quot;EHLO emea01-am1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751537AbcEJNpY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 10 May 2016 09:45:24 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=AaK1OJIXorwdwBSTKQFGFkgHiXhoLc5iaKO2rmqZm6E=;
	b=MaDr+Pcx9DdquXn12rBLqqBGoQh7AP2R+HnUWLXJLFDhU0XC99NgD3KUYWAo1JMSw/xjiylbVc5XY1wk2D1l7AUZxD1yk93rR0u2Vho2oVuxnWD7c4ZdZCgYCxYH6WLXhUKM0w9VbZf9ao0SDM3xiC+24CMVJ6nsenmzahWgICU=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	HE1PR0801MB1305.eurprd08.prod.outlook.com (10.167.247.147) with
	Microsoft
	SMTP Server (TLS) id 15.1.492.11; Tue, 10 May 2016 13:30:32 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;, &lt;mingo@redhat.com&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;hpa@zytor.com&gt;,
	&lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv8 resend 1/2] x86/vdso: add mremap hook to vm_special_mapping
Date: Tue, 10 May 2016 16:29:10 +0300
Message-ID: &lt;1462886951-23376-1-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: HE1PR03CA0031.eurprd03.prod.outlook.com (10.163.170.169)
	To
	HE1PR0801MB1305.eurprd08.prod.outlook.com (10.167.247.147)
X-MS-Office365-Filtering-Correlation-Id: c1374e6e-13e7-4308-7050-08d378d743b8
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	2:tyuYh3FWo6MviMK0tns7WpcrkaWkVpiC881eBLrfbeDpLSkHGWZyfLeb0RQDKcSbuGkbcBYjKKGAZf3NoLnt+cHb2uv5yRvPR80RLecD+e7kVccBa6VD7wzObXINyvt/BweeV5S2ghsywAv2iEcmaWdnVnOSY7aT7+lKckCD9nHw0/Ni3tnv8Cv8tqBX23qF;
	3:gmOBJ1x8b1Yl5iO9nqOHHjMOy81XV3ljmcIeLouj4IPjJt7bhKX3V2BcPwjSimeCN7dJ+iViq9vsURorcVrCMcGSV42SUSELVrQzuJLq4TqU19NDK1GSXCyCqOt79RgH;
	25:v1rGQiWyIvUdfDGoro4dtNRTp6pNeOh3GPOP0RRD+Gxh52IQOvzhstx2xhvXQCp9jTJO7MIVh+45RwQ6IeHl0L2vqbmGCRxpP/em+u/HfGoiid7yGeZ2/TWPdDAypyzBuRZkvbt1PLYbaobCxcgvY3bzChDL43k7eRJzWLtZkaeg/agMCryQBgu6fKFc76ZO/PsQCHBv27m8411V7c0nQhuLHPudE5TVqH2qXbxQvdqUng3XFre3P+0Bo/DuvvfXQ2Jprmgc3czzKhSb5Z8dewEqTqWx5BgXvUhWry1fmmHQ4MU2cJfJ4SdvpOJVKQQUwjL7VdAZ9ajGM9w1g2eOGx6Y5q//B7HwmPAADfC4Vnk3yh6+RBAgvLsaDbl5fMJINZaBqZZF6LHRmXrwXHeJ14xSdITyp3rOxTe2eOMBk3dudskaOTzirBYMluaKaO0M
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:HE1PR0801MB1305;
X-Microsoft-Antispam-PRVS: &lt;HE1PR0801MB130531FB808244DC25B9C9CBD1710@HE1PR0801MB1305.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040130)(601004)(2401047)(5005006)(8121501046)(3002001)(10201501046)(6041072)(6043046);
	SRVR:HE1PR0801MB1305; BCL:0; PCL:0; RULEID:;
	SRVR:HE1PR0801MB1305; 
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	4:1zpfP/oKYqrginf17fZDMN67Dkja3Gub9uxh8oLdfVMSF/SMIVGb5cWt+IKMk2LKLVbBWcy5kCWi6Zy49MuvivVydwS3e42f0Mtm/pbw8VGUotQgh97u7FN42pAkBKcrGGttSPjcFxVYeE0dDwzWDzY8rvzM7NWLgG/XjGRVYkb5Ootb0NFNKN18OjeMEAntpfZnKdDRVLPHaZpi+DwqjOIhaQt2V20bU8nUnVr4f/EDUZfMbzN5xD5r9iyblshu2/fJJc5Dnytps8j8aM9Ds5yCViYTTdLD6h+a4salJ0u0KPyUAaYwfiH9GnWD/WsMPv0L8RVeeDcHAFJ6LWw5ZWGNADEHyD9vauGdSkJX1O6JLH7MSCH7WJ0vj9/Bxf22KqkkSBjdqakP3cIpaqL1AcdSwe2Ki6y7PO34CcIIQTQ=
X-Forefront-PRVS: 0938781D02
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(229853001)(50986999)(66066001)(5003940100001)(86362001)(47776003)(92566002)(19580395003)(19580405001)(77096005)(36756003)(5008740100001)(4001430100002)(33646002)(5001770100001)(50226002)(5004730100002)(42186005)(53416004)(2906002)(50466002)(6116002)(586003)(81166005)(107886002)(48376002)(189998001)(3846002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:HE1PR0801MB1305;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	23:+9WO8XzyunmRlBq+w7lEPVkTR+xHT4Fhsvv85Um4kOFgRZrAU+WzrgaTnAyP8c+yv0GYFUyKVVkVpUXUUnlVl5bUk3pqeS9s8ZvFuvssTdl6PVE0JSpVhajxdd13KhO0gx6bCvoSUr+zD2/3CuI+5dgZ4oM4KK07EjLw79rO2v/Y1MpYiav0idB0j2wrkqkX75d9AJkB7m3PgcfuGGnpEZiLiNzDeO76zrxYKy/Voz91EbjJ9Hsq31/Pu4VJiHGcy7QgS/7JgR+9UpqzkLhPOSHv8EjZEntOROVFXO8lGBHIpNBoEewT08/FXByIxDqYzFW53TU4co4RJ8lHTTyb45BbH0ymCZv0nKurKjUKixnWIpDcg+GpYl9EHxT5aV1vvyBuAmfZW6KSfxfuP1PMM8avl8X9U9E3uMz8Ak8+NmeYzvpalm6KjRCHG9A0Iy1pBEBtwXDLJzSwGMShUWXTRzttbdzZLm3DBLNmK5EZ+dfRB3/xJqPZ8rOZueM+5xrNeNhMKqpp8kDpCU7xo/zRx/so8D5nevN+MCnHu/G1xW2kKo58U8hn9HZG32643KjFivXRfIJ/VAT3ZQPRc3SCHKDy7WsyqvLloyS75ZT1FF9WLkNDf9y/+ttyn8zcEwC2bm71XDR65B8Ik2eP5tz+wYDmWvQPI/+vb09ozKvawd/sysqRce6bYVC8pqjDhoZ4sAOrcJv5eKLpbt3woIzqZ30TGghynHPRFMSvLbmiBUlcIDSI4z2FKeQIaJLEpcABNlC65P+kbcFmyoiUyTS1SG3u0+FL3fakwA/reP+0AMBv26d1+i+vCvMVbGI5BpMirhmpAjf+YWtCSj/EM31B8R2VBt+i4Chz7p2WBkb2EukBOxcBgo0Ml9HTtKx+tenl
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	5:cMqmmh26/w5nMcJepVFcspDJV/BylosINOTWIFBuLjHnlpnl57pZHNJvPORyP/wIdYKffR6HajS5KhRkhNc1dWP97zrrL6rcCCADVdu/ipy2Oc3gvpI0B9c/kUMlcnZ6drKKPtJdyzZH8CqCIufQkQ==;
	24:Xc7vUka4eAve1Wngya/kVCMPPo9fFjgIyeYCoPas9QcAl0ZH1BwPeS3VrzeU9+XPi2M1OIKz0OiW/dBgWY1e+OVkrQ40lqYQlm3o5p9aT5s=;
	7:5eAJw4Sgu2G7u3k2kW3n5KjUXKUU8Ajlz5bZFTbE6riOsncA4zhSdXBKjDJl+YOYbpZCsESIGB9Q/3mYfLvR0SApBxCgBI21AspuTVa9FXfXFgmqMM4QF/ZqBEVMcxCqnUKMgiwscQJ/61Q8bH0pfr6K5XBXDmV4Zs5keDOosV2LU12LIRB1uTa/flywu/jB;
	20:TnrrwjD05Jo+dCExxuvfHvuOdmdrdUBBANDm0kC8kGAuylfQTpV+8YrD7iPrTw4fLGsJZ85fNGZBumx0LK3LhPYN9OMfcPXHMRg913W0Ik7KmtF5LTQiKtJdr7wntqvYLOSmGsGnudbha1KTVJPlmN+eFkGwtMfLykRSYcBjYEs=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 10 May 2016 13:30:32.6021
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: HE1PR0801MB1305
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-9.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - May 10, 2016, 1:29 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="acked-by">Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
v8: add WARN_ON_ONCE on current-&gt;mm != new_vma-&gt;vm_mm
v7: build fix
v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function
    with ifdefs around
v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are
    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32
v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32
v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;
    used is_ia32_task instead of ifdefs 
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 47 ++++++++++++++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 55 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - May 16, 2016, 9:38 a.m.</div>
<pre class="content">
On 05/10/2016 04:29 PM, Dmitry Safonov wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;   Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;   #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;   #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v8: add WARN_ON_ONCE on current-&gt;mm != new_vma-&gt;vm_mm</span>
<span class="quote">&gt; v7: build fix</span>
<span class="quote">&gt; v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt;     with ifdefs around</span>
<span class="quote">&gt; v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt;     the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;     used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>

Ping?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - May 16, 2016, 10:54 a.m.</div>
<pre class="content">
* Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">
&gt; On 05/10/2016 04:29 PM, Dmitry Safonov wrote:</span>
<span class="quote">&gt; &gt;Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; &gt;vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; &gt;mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; &gt;address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; &gt;Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; &gt;This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; &gt;affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; &gt;map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; &gt;vvar_mapping variable.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; &gt;linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; &gt;you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; &gt;through glibc may fail:</span>
<span class="quote">&gt; &gt;  Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt; &gt;  #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt; &gt;  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; &gt;Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; &gt;---</span>
<span class="quote">&gt; &gt;v8: add WARN_ON_ONCE on current-&gt;mm != new_vma-&gt;vm_mm</span>
<span class="quote">&gt; &gt;v7: build fix</span>
<span class="quote">&gt; &gt;v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt; &gt;    with ifdefs around</span>
<span class="quote">&gt; &gt;v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt; &gt;    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt; &gt;v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; &gt;v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt; &gt;    used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; &gt;v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ping?</span>

There&#39;s no 0/2 boilerplate explaining the background of the changes - why do you 
want to mremap() the vDSO?

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - May 16, 2016, 11:14 a.m.</div>
<pre class="content">
On 05/16/2016 01:54 PM, Ingo Molnar wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; * Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On 05/10/2016 04:29 PM, Dmitry Safonov wrote:</span>
<span class="quote">&gt;&gt;&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt;&gt;&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt;&gt;&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt;&gt;&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt;&gt;&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt;&gt;&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt;&gt;&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt;&gt;&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt;&gt;&gt; vvar_mapping variable.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt;&gt;&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt;&gt;&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt;&gt;&gt; through glibc may fail:</span>
<span class="quote">&gt;&gt;&gt;  Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;&gt;&gt;  #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;&gt;&gt;  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt; v8: add WARN_ON_ONCE on current-&gt;mm != new_vma-&gt;vm_mm</span>
<span class="quote">&gt;&gt;&gt; v7: build fix</span>
<span class="quote">&gt;&gt;&gt; v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt;&gt;&gt;    with ifdefs around</span>
<span class="quote">&gt;&gt;&gt; v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt;&gt;&gt;    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt;&gt;&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt;&gt;&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;&gt;&gt;    used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt;&gt;&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Ping?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There&#39;s no 0/2 boilerplate explaining the background of the changes - why do you</span>
<span class="quote">&gt; want to mremap() the vDSO?</span>

Thanks for the answer.

Well, one could move vdso vma before this patch, but doing fast
syscalls through it will not work because of code relying on
mm-&gt;context.vdso pointer.
So all this code is just fixup for that pointer on moving.
(Also adds preventing for splitting vdso vma).
As Andy notted, vDSO mremap for !i386 tasks also worked only by a chance
before this patch.

I need to move vdso vma in CRIU - on restore we need to choose it&#39;s
position:
- if vDSO blob of restoring application is the same as the kernel has,
we need to move it on the same place;
- if it differs, we need to choose place that wasn&#39;t tooken by other
vma of restoring application and add jump trampolines to it from the
place of vDSO in restoring application.
And CRIU code now relies on possibility on x86_64 to mremap vDSO.
Without this patch that may be broken in future.
And as I work on C/R of compatible 32-bit applications on x86_64,
I need this to work also for 32-bit vDSO. Which does not work,
because of pointer mentioned above.

Thanks,
Dmitry Safonov
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - May 16, 2016, 1:55 p.m.</div>
<pre class="content">
* Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">
&gt; On 05/16/2016 01:54 PM, Ingo Molnar wrote:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;* Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;On 05/10/2016 04:29 PM, Dmitry Safonov wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; &gt;&gt;&gt;vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; &gt;&gt;&gt;mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; &gt;&gt;&gt;address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; &gt;&gt;&gt;Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; &gt;&gt;&gt;This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; &gt;&gt;&gt;affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; &gt;&gt;&gt;map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; &gt;&gt;&gt;vvar_mapping variable.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; &gt;&gt;&gt;linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; &gt;&gt;&gt;you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; &gt;&gt;&gt;through glibc may fail:</span>
<span class="quote">&gt; &gt;&gt;&gt; Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt; &gt;&gt;&gt; #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt; &gt;&gt;&gt; #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;---</span>
<span class="quote">&gt; &gt;&gt;&gt;v8: add WARN_ON_ONCE on current-&gt;mm != new_vma-&gt;vm_mm</span>
<span class="quote">&gt; &gt;&gt;&gt;v7: build fix</span>
<span class="quote">&gt; &gt;&gt;&gt;v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt; &gt;&gt;&gt;   with ifdefs around</span>
<span class="quote">&gt; &gt;&gt;&gt;v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt; &gt;&gt;&gt;   the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt; &gt;&gt;&gt;v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; &gt;&gt;&gt;v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt; &gt;&gt;&gt;   used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; &gt;&gt;&gt;v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;Ping?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;There&#39;s no 0/2 boilerplate explaining the background of the changes - why do you</span>
<span class="quote">&gt; &gt;want to mremap() the vDSO?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for the answer.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Well, one could move vdso vma before this patch, but doing fast</span>
<span class="quote">&gt; syscalls through it will not work because of code relying on</span>
<span class="quote">&gt; mm-&gt;context.vdso pointer.</span>
<span class="quote">&gt; So all this code is just fixup for that pointer on moving.</span>
<span class="quote">&gt; (Also adds preventing for splitting vdso vma).</span>
<span class="quote">&gt; As Andy notted, vDSO mremap for !i386 tasks also worked only by a chance</span>
<span class="quote">&gt; before this patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I need to move vdso vma in CRIU - on restore we need to choose it&#39;s</span>
<span class="quote">&gt; position:</span>
<span class="quote">&gt; - if vDSO blob of restoring application is the same as the kernel has,</span>
<span class="quote">&gt; we need to move it on the same place;</span>
<span class="quote">&gt; - if it differs, we need to choose place that wasn&#39;t tooken by other</span>
<span class="quote">&gt; vma of restoring application and add jump trampolines to it from the</span>
<span class="quote">&gt; place of vDSO in restoring application.</span>
<span class="quote">&gt; And CRIU code now relies on possibility on x86_64 to mremap vDSO.</span>
<span class="quote">&gt; Without this patch that may be broken in future.</span>
<span class="quote">&gt; And as I work on C/R of compatible 32-bit applications on x86_64,</span>
<span class="quote">&gt; I need this to work also for 32-bit vDSO. Which does not work,</span>
<span class="quote">&gt; because of pointer mentioned above.</span>

Ok, this looks useful - please add this information to the changelog (with typos 
fixed).

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - May 16, 2016, 4:23 p.m.</div>
<pre class="content">
On 05/16/2016 04:55 PM, Ingo Molnar wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ok, this looks useful - please add this information to the changelog (with typos</span>
<span class="quote">&gt; fixed).</span>

Thanks will add to v9.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..0625b66e5648 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,40 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined CONFIG_X86_32 || defined CONFIG_IA32_EMULATION</span>
<span class="p_add">+	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (WARN_ON_ONCE(current-&gt;mm != new_vma-&gt;vm_mm))</span>
<span class="p_add">+		return -EFAULT;</span>
<span class="p_add">+</span>
<span class="p_add">+	vdso_fix_landing(image, new_vma);</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +193,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +232,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



