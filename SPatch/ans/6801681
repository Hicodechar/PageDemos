
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.19.y-ckt,206/251] mm/hugetlb: introduce minimum hugepage order - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.19.y-ckt,206/251] mm/hugetlb: introduce minimum hugepage order</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 16, 2015, 1:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437008972-9140-207-git-send-email-kamal@canonical.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6801681/mbox/"
   >mbox</a>
|
   <a href="/patch/6801681/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6801681/">/patch/6801681/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 09F069F380
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Jul 2015 01:25:54 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 2136820673
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Jul 2015 01:25:53 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 85A482065A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Jul 2015 01:25:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755324AbbGPBZ2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 15 Jul 2015 21:25:28 -0400
Received: from youngberry.canonical.com ([91.189.89.112]:56197 &quot;EHLO
	youngberry.canonical.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932144AbbGPBLl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 15 Jul 2015 21:11:41 -0400
Received: from 1.general.kamal.us.vpn ([10.172.68.52] helo=fourier)
	by youngberry.canonical.com with esmtpsa
	(TLS1.0:DHE_RSA_AES_128_CBC_SHA1:16) (Exim 4.76)
	(envelope-from &lt;kamal@canonical.com&gt;)
	id 1ZFXi7-0007eV-I5; Thu, 16 Jul 2015 01:11:39 +0000
Received: from kamal by fourier with local (Exim 4.82)
	(envelope-from &lt;kamal@whence.com&gt;)
	id 1ZFXi5-0002jv-BM; Wed, 15 Jul 2015 18:11:37 -0700
From: Kamal Mostafa &lt;kamal@canonical.com&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org,
	kernel-team@lists.ubuntu.com
Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Kamal Mostafa &lt;kamal@canonical.com&gt;
Subject: [PATCH 3.19.y-ckt 206/251] mm/hugetlb: introduce minimum hugepage
	order
Date: Wed, 15 Jul 2015 18:08:47 -0700
Message-Id: &lt;1437008972-9140-207-git-send-email-kamal@canonical.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1437008972-9140-1-git-send-email-kamal@canonical.com&gt;
References: &lt;1437008972-9140-1-git-send-email-kamal@canonical.com&gt;
X-Extended-Stable: 3.19
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a> - July 16, 2015, 1:08 a.m.</div>
<pre class="content">
3.19.8-ckt4 -stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

commit 641844f5616d7c6597309f560838f996466d7aac upstream.

Currently the initial value of order in dissolve_free_huge_page is 64 or
32, which leads to the following warning in static checker:

  mm/hugetlb.c:1203 dissolve_free_huge_pages()
  warn: potential right shift more than type allows &#39;9,18,64&#39;

This is a potential risk of infinite loop, because 1 &lt;&lt; order (== 0) is used
in for-loop like this:

  for (pfn =3D start_pfn; pfn &lt; end_pfn; pfn +=3D 1 &lt;&lt; order)
      ...

So this patch fixes it by using global minimum_order calculated at boot time.

    text    data     bss     dec     hex filename
   28313     469   84236  113018   1b97a mm/hugetlb.o
   28256     473   84236  112965   1b945 mm/hugetlb.o (patched)

Fixes: c8721bbbdd36 (&quot;mm: memory-hotplug: enable memory hotplug to handle hugepage&quot;)
Reported-by: Dan Carpenter &lt;dan.carpenter@oracle.com&gt;
<span class="signed-off-by">Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Kamal Mostafa &lt;kamal@canonical.com&gt;</span>
---
 mm/hugetlb.c | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index a2bfd02..2870d90 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -40,6 +40,11 @@</span> <span class="p_context"> unsigned long hugepages_treat_as_movable;</span>
 int hugetlb_max_hstate __read_mostly;
 unsigned int default_hstate_idx;
 struct hstate hstates[HUGE_MAX_HSTATE];
<span class="p_add">+/*</span>
<span class="p_add">+ * Minimum page order among possible hugepage sizes, set to a proper value</span>
<span class="p_add">+ * at boot time.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static unsigned int minimum_order __read_mostly = UINT_MAX;</span>
 
 __initdata LIST_HEAD(huge_boot_pages);
 
<span class="p_chunk">@@ -1084,19 +1089,13 @@</span> <span class="p_context"> static void dissolve_free_huge_page(struct page *page)</span>
  */
 void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)
 {
<span class="p_del">-	unsigned int order = 8 * sizeof(void *);</span>
 	unsigned long pfn;
<span class="p_del">-	struct hstate *h;</span>
 
 	if (!hugepages_supported())
 		return;
 
<span class="p_del">-	/* Set scan step to minimum hugepage size */</span>
<span class="p_del">-	for_each_hstate(h)</span>
<span class="p_del">-		if (order &gt; huge_page_order(h))</span>
<span class="p_del">-			order = huge_page_order(h);</span>
<span class="p_del">-	VM_BUG_ON(!IS_ALIGNED(start_pfn, 1 &lt;&lt; order));</span>
<span class="p_del">-	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; order)</span>
<span class="p_add">+	VM_BUG_ON(!IS_ALIGNED(start_pfn, 1 &lt;&lt; minimum_order));</span>
<span class="p_add">+	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; minimum_order)</span>
 		dissolve_free_huge_page(pfn_to_page(pfn));
 }
 
<span class="p_chunk">@@ -1523,10 +1522,14 @@</span> <span class="p_context"> static void __init hugetlb_init_hstates(void)</span>
 	struct hstate *h;
 
 	for_each_hstate(h) {
<span class="p_add">+		if (minimum_order &gt; huge_page_order(h))</span>
<span class="p_add">+			minimum_order = huge_page_order(h);</span>
<span class="p_add">+</span>
 		/* oversize hugepages were init&#39;ed in early boot */
 		if (!hstate_is_gigantic(h))
 			hugetlb_hstate_alloc_pages(h);
 	}
<span class="p_add">+	VM_BUG_ON(minimum_order == UINT_MAX);</span>
 }
 
 static char * __init memfmt(char *buf, unsigned long n)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



