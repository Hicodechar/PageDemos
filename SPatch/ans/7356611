
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v7,02/60] sparc/PCI: Use correct bus address to resource offset - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v7,02/60] sparc/PCI: Use correct bus address to resource offset</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 8, 2015, 9:38 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1444340359-8011-3-git-send-email-yinghai@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7356611/mbox/"
   >mbox</a>
|
   <a href="/patch/7356611/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7356611/">/patch/7356611/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 5CD4D9F32B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Oct 2015 21:57:23 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 4287C2078C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Oct 2015 21:57:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 13C8620790
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Oct 2015 21:57:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758858AbbJHV46 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Oct 2015 17:56:58 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:23340 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754412AbbJHVjz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Oct 2015 17:39:55 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t98LdcBG001223
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 8 Oct 2015 21:39:39 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id t98LdbAh000958
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 8 Oct 2015 21:39:37 GMT
Received: from abhmp0009.oracle.com (abhmp0009.oracle.com [141.146.116.15])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	t98LdaHZ020785; Thu, 8 Oct 2015 21:39:36 GMT
Received: from linux-siqj.site (/10.132.127.48)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 08 Oct 2015 14:39:36 -0700
From: Yinghai Lu &lt;yinghai@kernel.org&gt;
To: Bjorn Helgaas &lt;bhelgaas@google.com&gt;, David Miller &lt;davem@davemloft.net&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Wei Yang &lt;weiyang@linux.vnet.ibm.com&gt;, TJ &lt;linux@iam.tj&gt;,
	Yijing Wang &lt;wangyijing@huawei.com&gt;, Khalid Aziz &lt;khalid.aziz@oracle.com&gt;
Cc: linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
	Yinghai Lu &lt;yinghai@kernel.org&gt;
Subject: [PATCH v7 02/60] sparc/PCI: Use correct bus address to resource
	offset
Date: Thu,  8 Oct 2015 14:38:21 -0700
Message-Id: &lt;1444340359-8011-3-git-send-email-yinghai@kernel.org&gt;
X-Mailer: git-send-email 1.8.4.5
In-Reply-To: &lt;1444340359-8011-1-git-send-email-yinghai@kernel.org&gt;
References: &lt;1444340359-8011-1-git-send-email-yinghai@kernel.org&gt;
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a> - Oct. 8, 2015, 9:38 p.m.</div>
<pre class="content">
After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;
warning on anther new model that support 64bit resource.

It turns out that we can not use mem_space.start as 64bit mem space
offset, aka mem_space.start != offset.

Use child_phys_addr to calculate exact offset and recorder offset in
pbm.  Still assume all mem have same offset, otherwise panic early.

After patch we get correct offset.

/pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000
/pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000
/pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000
...
pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])
pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])
pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])


-v2: to make is simple, do not add mem64_offset, and assume
     mem64_offset == mem_offset, otherwise would make
     pci_mmap_resource() path too complicated.
<span class="signed-off-by">
Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
---
 arch/sparc/kernel/pci.c        | 14 +++++++-------
 arch/sparc/kernel/pci_common.c | 36 +++++++++++++++++++++++++++---------
 arch/sparc/kernel/pci_impl.h   |  3 +++
 3 files changed, 37 insertions(+), 16 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Oct. 9, 2015, 4:16 p.m.</div>
<pre class="content">
On Thu, 2015-10-08 at 14:38 -0700, Yinghai Lu wrote:
<span class="quote">&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt; offset, aka mem_space.start != offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use child_phys_addr to calculate exact offset and recorder offset in</span>
<span class="quote">&gt; pbm.  Still assume all mem have same offset, otherwise panic early.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; After patch we get correct offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -v2: to make is simple, do not add mem64_offset, and assume</span>
<span class="quote">&gt;      mem64_offset == mem_offset, otherwise would make</span>
<span class="quote">&gt;      pci_mmap_resource() path too complicated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>

Tested on sparc platforms
<span class="tested-by">
Tested-by: Khalid Aziz &lt;khalid.aziz@oracle.com&gt; </span>



--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=142961">Bjorn Helgaas</a> - Oct. 20, 2015, 4:45 p.m.</div>
<pre class="content">
On Thu, Oct 08, 2015 at 02:38:21PM -0700, Yinghai Lu wrote:
<span class="quote">&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt; offset, aka mem_space.start != offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use child_phys_addr to calculate exact offset and recorder offset in</span>
<span class="quote">&gt; pbm.  Still assume all mem have same offset, otherwise panic early.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; After patch we get correct offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -v2: to make is simple, do not add mem64_offset, and assume</span>
<span class="quote">&gt;      mem64_offset == mem_offset, otherwise would make</span>
<span class="quote">&gt;      pci_mmap_resource() path too complicated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/sparc/kernel/pci.c        | 14 +++++++-------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_common.c | 36 +++++++++++++++++++++++++++---------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_impl.h   |  3 +++</span>
<span class="quote">&gt;  3 files changed, 37 insertions(+), 16 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; index badf095..451792e 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; @@ -654,12 +654,12 @@ struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
<span class="quote">&gt;  	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,</span>
<span class="quote">&gt; -				pbm-&gt;io_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;io_offset);</span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,</span>
<span class="quote">&gt; -				pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;mem_offset);</span>
<span class="quote">&gt;  	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt;  		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,</span>
<span class="quote">&gt; -					pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +					pbm-&gt;mem_offset);</span>
<span class="quote">&gt;  	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.flags	= IORESOURCE_BUS;</span>
<span class="quote">&gt; @@ -751,10 +751,10 @@ static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struc</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (mmap_state == pci_mmap_io) {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="quote">&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;io_offset +</span>
<span class="quote">&gt;  				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="quote">&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;mem_offset +</span>
<span class="quote">&gt;  				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -981,9 +981,9 @@ void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
<span class="quote">&gt;  	unsigned long offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (rp-&gt;flags &amp; IORESOURCE_IO)</span>
<span class="quote">&gt; -		offset = pbm-&gt;io_space.start;</span>
<span class="quote">&gt; +		offset = pbm-&gt;io_offset;</span>
<span class="quote">&gt;  	else</span>
<span class="quote">&gt; -		offset = pbm-&gt;mem_space.start;</span>
<span class="quote">&gt; +		offset = pbm-&gt;mem_offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	*start = rp-&gt;start - offset;</span>
<span class="quote">&gt;  	*end = rp-&gt;end - offset;</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; index 33524c1..28e976a 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; @@ -393,6 +393,7 @@ static void pci_register_iommu_region(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	const struct linux_prom_pci_ranges *pbm_ranges;</span>
<span class="quote">&gt; +	resource_size_t mem64_offset = 0;</span>
<span class="quote">&gt;  	int i, saw_mem, saw_io;</span>
<span class="quote">&gt;  	int num_pbm_ranges;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -410,13 +411,16 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (i = 0; i &lt; num_pbm_ranges; i++) {</span>
<span class="quote">&gt;  		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];</span>
<span class="quote">&gt; -		unsigned long a, size;</span>
<span class="quote">&gt; +		unsigned long a, size, region_a;</span>
<span class="quote">&gt;  		u32 parent_phys_hi, parent_phys_lo;</span>
<span class="quote">&gt; +		u32 child_phys_mid, child_phys_lo;</span>
<span class="quote">&gt;  		u32 size_hi, size_lo;</span>
<span class="quote">&gt;  		int type;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		parent_phys_hi = pr-&gt;parent_phys_hi;</span>
<span class="quote">&gt;  		parent_phys_lo = pr-&gt;parent_phys_lo;</span>
<span class="quote">&gt; +		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="quote">&gt; +		child_phys_lo = pr-&gt;child_phys_lo;</span>
<span class="quote">&gt;  		if (tlb_type == hypervisor)</span>
<span class="quote">&gt;  			parent_phys_hi &amp;= 0x0fffffff;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -426,6 +430,8 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;</span>
<span class="quote">&gt;  		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt; +		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="quote">&gt; +		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  		size = (((unsigned long)size_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  			((unsigned long)size_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -440,6 +446,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;io_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.flags = IORESOURCE_IO;</span>
<span class="quote">&gt; +			pbm-&gt;io_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_io = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -448,6 +455,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			pbm-&gt;mem_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -456,6 +464,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			mem64_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -471,14 +480,23 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		prom_halt();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="quote">&gt; -	       pbm-&gt;name,</span>
<span class="quote">&gt; -	       pbm-&gt;io_space.start,</span>
<span class="quote">&gt; -	       pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; -	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt; -		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="quote">&gt; -		       pbm-&gt;mem64_space.start);</span>
<span class="quote">&gt; -	printk(&quot;\n&quot;);</span>
<span class="quote">&gt; +	if (pbm-&gt;io_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem64_space.flags) {</span>
<span class="quote">&gt; +		if (pbm-&gt;mem_space.flags) {</span>
<span class="quote">&gt; +			if (mem64_offset != pbm-&gt;mem_offset)</span>
<span class="quote">&gt; +				panic(&quot;mem offset %llx != mem64 offset %llx\n&quot;,</span>
<span class="quote">&gt; +					pbm-&gt;mem_offset, mem64_offset);</span>

Why do you panic rather than just handling the mem64 offset?  As far
as I know, there&#39;s no PCI reason why the mem64 offset has to be the
same as the mem one.
<span class="quote">
&gt; +		} else</span>
<span class="quote">&gt; +			pbm-&gt;mem_offset = mem64_offset;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;</span>
<span class="quote">&gt;  	pbm-&gt;mem64_space.name = pbm-&gt;name;</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; index 37222ca..08b74af 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; @@ -99,6 +99,9 @@ struct pci_pbm_info {</span>
<span class="quote">&gt;  	struct resource			mem_space;</span>
<span class="quote">&gt;  	struct resource			mem64_space;</span>
<span class="quote">&gt;  	struct resource			busn;</span>
<span class="quote">&gt; +	/* offset */</span>
<span class="quote">&gt; +	resource_size_t			io_offset;</span>
<span class="quote">&gt; +	resource_size_t			mem_offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Base of PCI Config space, can be per-PBM or shared. */</span>
<span class="quote">&gt;  	unsigned long			config_space;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.8.4.5</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe from this list: send the line &quot;unsubscribe linux-pci&quot; in</span>
<span class="quote">&gt; the body of a message to majordomo@vger.kernel.org</span>
<span class="quote">&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=142961">Bjorn Helgaas</a> - Oct. 20, 2015, 7:54 p.m.</div>
<pre class="content">
On Thu, Oct 08, 2015 at 02:38:21PM -0700, Yinghai Lu wrote:
<span class="quote">&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt; offset, aka mem_space.start != offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Use child_phys_addr to calculate exact offset and recorder offset in</span>
<span class="quote">&gt; pbm.  Still assume all mem have same offset, otherwise panic early.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; After patch we get correct offset.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt; pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>

I think this changelog is incorrect.  It suggests that this fixes a
problem with 64-bit apertures, but in this example, *both* mem
apertures are different from what they would have been before this
patch.

Before this patch, we used the mem32 aperture base (0x2000000100000)
as the translation offset for both the mem32 and mem64 apertures, so I
think we would have had this:

  pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00000000-0x7eefffff])
  pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0xfff00000-0xdffefffff])

After this patch, you compute the real mem32 offset (0x2000000000000)
and use it for both mem32 and mem64:

  pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])
  pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])
<span class="quote">
&gt; -v2: to make is simple, do not add mem64_offset, and assume</span>
<span class="quote">&gt;      mem64_offset == mem_offset, otherwise would make</span>
<span class="quote">&gt;      pci_mmap_resource() path too complicated.</span>

I missed this comment before, and I suppose it has something to do
with why you decided to panic if the mem64 offset is different from
the mem32 offset.  But I don&#39;t understand the reasoning.  Other
architectures handle pci_mmap_resource() just fine, ...  oh, I see,
this is related to the pci_resource_to_user() messiness.

I don&#39;t want to argue about pci_resource_to_user() right now, so I
guess you can just panic if the mem64 offset is different from the
mem32 offset.  But you should at least add a comment about why you&#39;re
doing that.  Otherwise it looks like you were just lazy.
<span class="quote">
&gt; Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/sparc/kernel/pci.c        | 14 +++++++-------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_common.c | 36 +++++++++++++++++++++++++++---------</span>
<span class="quote">&gt;  arch/sparc/kernel/pci_impl.h   |  3 +++</span>
<span class="quote">&gt;  3 files changed, 37 insertions(+), 16 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; index badf095..451792e 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt; @@ -654,12 +654,12 @@ struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
<span class="quote">&gt;  	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,</span>
<span class="quote">&gt; -				pbm-&gt;io_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;io_offset);</span>
<span class="quote">&gt;  	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,</span>
<span class="quote">&gt; -				pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +				pbm-&gt;mem_offset);</span>
<span class="quote">&gt;  	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt;  		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,</span>
<span class="quote">&gt; -					pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; +					pbm-&gt;mem_offset);</span>
<span class="quote">&gt;  	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;</span>
<span class="quote">&gt;  	pbm-&gt;busn.flags	= IORESOURCE_BUS;</span>
<span class="quote">&gt; @@ -751,10 +751,10 @@ static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struc</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (mmap_state == pci_mmap_io) {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="quote">&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;io_offset +</span>
<span class="quote">&gt;  				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="quote">&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;mem_offset +</span>
<span class="quote">&gt;  				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -981,9 +981,9 @@ void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
<span class="quote">&gt;  	unsigned long offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (rp-&gt;flags &amp; IORESOURCE_IO)</span>
<span class="quote">&gt; -		offset = pbm-&gt;io_space.start;</span>
<span class="quote">&gt; +		offset = pbm-&gt;io_offset;</span>
<span class="quote">&gt;  	else</span>
<span class="quote">&gt; -		offset = pbm-&gt;mem_space.start;</span>
<span class="quote">&gt; +		offset = pbm-&gt;mem_offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	*start = rp-&gt;start - offset;</span>
<span class="quote">&gt;  	*end = rp-&gt;end - offset;</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; index 33524c1..28e976a 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt; @@ -393,6 +393,7 @@ static void pci_register_iommu_region(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	const struct linux_prom_pci_ranges *pbm_ranges;</span>
<span class="quote">&gt; +	resource_size_t mem64_offset = 0;</span>
<span class="quote">&gt;  	int i, saw_mem, saw_io;</span>
<span class="quote">&gt;  	int num_pbm_ranges;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -410,13 +411,16 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (i = 0; i &lt; num_pbm_ranges; i++) {</span>
<span class="quote">&gt;  		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];</span>
<span class="quote">&gt; -		unsigned long a, size;</span>
<span class="quote">&gt; +		unsigned long a, size, region_a;</span>
<span class="quote">&gt;  		u32 parent_phys_hi, parent_phys_lo;</span>
<span class="quote">&gt; +		u32 child_phys_mid, child_phys_lo;</span>
<span class="quote">&gt;  		u32 size_hi, size_lo;</span>
<span class="quote">&gt;  		int type;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		parent_phys_hi = pr-&gt;parent_phys_hi;</span>
<span class="quote">&gt;  		parent_phys_lo = pr-&gt;parent_phys_lo;</span>
<span class="quote">&gt; +		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="quote">&gt; +		child_phys_lo = pr-&gt;child_phys_lo;</span>
<span class="quote">&gt;  		if (tlb_type == hypervisor)</span>
<span class="quote">&gt;  			parent_phys_hi &amp;= 0x0fffffff;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -426,6 +430,8 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;</span>
<span class="quote">&gt;  		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt; +		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="quote">&gt; +		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  		size = (((unsigned long)size_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;  			((unsigned long)size_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -440,6 +446,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;io_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;io_space.flags = IORESOURCE_IO;</span>
<span class="quote">&gt; +			pbm-&gt;io_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_io = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -448,6 +455,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			pbm-&gt;mem_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -456,6 +464,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.start = a;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.end = a + size - 1UL;</span>
<span class="quote">&gt;  			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt; +			mem64_offset = a - region_a;</span>
<span class="quote">&gt;  			saw_mem = 1;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -471,14 +480,23 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;  		prom_halt();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="quote">&gt; -	       pbm-&gt;name,</span>
<span class="quote">&gt; -	       pbm-&gt;io_space.start,</span>
<span class="quote">&gt; -	       pbm-&gt;mem_space.start);</span>
<span class="quote">&gt; -	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt; -		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="quote">&gt; -		       pbm-&gt;mem64_space.start);</span>
<span class="quote">&gt; -	printk(&quot;\n&quot;);</span>
<span class="quote">&gt; +	if (pbm-&gt;io_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem_space.flags)</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt; +	if (pbm-&gt;mem64_space.flags) {</span>
<span class="quote">&gt; +		if (pbm-&gt;mem_space.flags) {</span>
<span class="quote">&gt; +			if (mem64_offset != pbm-&gt;mem_offset)</span>
<span class="quote">&gt; +				panic(&quot;mem offset %llx != mem64 offset %llx\n&quot;,</span>
<span class="quote">&gt; +					pbm-&gt;mem_offset, mem64_offset);</span>
<span class="quote">&gt; +		} else</span>
<span class="quote">&gt; +			pbm-&gt;mem_offset = mem64_offset;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="quote">&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;</span>
<span class="quote">&gt;  	pbm-&gt;mem64_space.name = pbm-&gt;name;</span>
<span class="quote">&gt; diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; index 37222ca..08b74af 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt; @@ -99,6 +99,9 @@ struct pci_pbm_info {</span>
<span class="quote">&gt;  	struct resource			mem_space;</span>
<span class="quote">&gt;  	struct resource			mem64_space;</span>
<span class="quote">&gt;  	struct resource			busn;</span>
<span class="quote">&gt; +	/* offset */</span>
<span class="quote">&gt; +	resource_size_t			io_offset;</span>
<span class="quote">&gt; +	resource_size_t			mem_offset;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Base of PCI Config space, can be per-PBM or shared. */</span>
<span class="quote">&gt;  	unsigned long			config_space;</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.8.4.5</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe from this list: send the line &quot;unsubscribe linux-pci&quot; in</span>
<span class="quote">&gt; the body of a message to majordomo@vger.kernel.org</span>
<span class="quote">&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Oct. 20, 2015, 8:07 p.m.</div>
<pre class="content">
On 10/20/2015 01:54 PM, Bjorn Helgaas wrote:
<span class="quote">&gt; On Thu, Oct 08, 2015 at 02:38:21PM -0700, Yinghai Lu wrote:</span>
<span class="quote">&gt;&gt; After we add 64bit mmio parsing, we got some &quot;no compatible bridge window&quot;</span>
<span class="quote">&gt;&gt; warning on anther new model that support 64bit resource.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It turns out that we can not use mem_space.start as 64bit mem space</span>
<span class="quote">&gt;&gt; offset, aka mem_space.start != offset.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Use child_phys_addr to calculate exact offset and recorder offset in</span>
<span class="quote">&gt;&gt; pbm.  Still assume all mem have same offset, otherwise panic early.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; After patch we get correct offset.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; /pci@305: PCI IO [io  0x2007e00000000-0x2007e0fffffff] offset 2007e00000000</span>
<span class="quote">&gt;&gt; /pci@305: PCI MEM [mem 0x2000000100000-0x200007effffff] offset 2000000000000</span>
<span class="quote">&gt;&gt; /pci@305: PCI MEM64 [mem 0x2000100000000-0x2000dffffffff] offset 2000000000000</span>
<span class="quote">&gt;&gt; ...</span>
<span class="quote">&gt;&gt; pci_sun4v f02ae7f8: PCI host bridge to bus 0000:00</span>
<span class="quote">&gt;&gt; pci_bus 0000:00: root bus resource [io  0x2007e00000000-0x2007e0fffffff] (bus address [0x0000-0xfffffff])</span>
<span class="quote">&gt;&gt; pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt;&gt; pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think this changelog is incorrect.  It suggests that this fixes a</span>
<span class="quote">&gt; problem with 64-bit apertures, but in this example, *both* mem</span>
<span class="quote">&gt; apertures are different from what they would have been before this</span>
<span class="quote">&gt; patch.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Before this patch, we used the mem32 aperture base (0x2000000100000)</span>
<span class="quote">&gt; as the translation offset for both the mem32 and mem64 apertures, so I</span>
<span class="quote">&gt; think we would have had this:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00000000-0x7eefffff])</span>
<span class="quote">&gt;    pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0xfff00000-0xdffefffff])</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; After this patch, you compute the real mem32 offset (0x2000000000000)</span>
<span class="quote">&gt; and use it for both mem32 and mem64:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    pci_bus 0000:00: root bus resource [mem 0x2000000100000-0x200007effffff] (bus address [0x00100000-0x7effffff])</span>
<span class="quote">&gt;    pci_bus 0000:00: root bus resource [mem 0x2000100000000-0x2000dffffffff] (bus address [0x100000000-0xdffffffff])</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; -v2: to make is simple, do not add mem64_offset, and assume</span>
<span class="quote">&gt;&gt;       mem64_offset == mem_offset, otherwise would make</span>
<span class="quote">&gt;&gt;       pci_mmap_resource() path too complicated.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I missed this comment before, and I suppose it has something to do</span>
<span class="quote">&gt; with why you decided to panic if the mem64 offset is different from</span>
<span class="quote">&gt; the mem32 offset.  But I don&#39;t understand the reasoning.  Other</span>
<span class="quote">&gt; architectures handle pci_mmap_resource() just fine, ...  oh, I see,</span>
<span class="quote">&gt; this is related to the pci_resource_to_user() messiness.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I don&#39;t want to argue about pci_resource_to_user() right now, so I</span>
<span class="quote">&gt; guess you can just panic if the mem64 offset is different from the</span>
<span class="quote">&gt; mem32 offset.  But you should at least add a comment about why you&#39;re</span>
<span class="quote">&gt; doing that.  Otherwise it looks like you were just lazy.</span>

I just hit this condition on a sparc platform where mem32 offset != 
mem64 offset. We need to handle this case, and not just call panic. I 
had not seen this on 5 platforms and another 3 ldoms I had tested this 
on when I tested this code earlier. I have sent panic log to Yinghai 
separately.

--
Khalid
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Yinghai Lu &lt;yinghai@kernel.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/sparc/kernel/pci.c        | 14 +++++++-------</span>
<span class="quote">&gt;&gt;   arch/sparc/kernel/pci_common.c | 36 +++++++++++++++++++++++++++---------</span>
<span class="quote">&gt;&gt;   arch/sparc/kernel/pci_impl.h   |  3 +++</span>
<span class="quote">&gt;&gt;   3 files changed, 37 insertions(+), 16 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt;&gt; index badf095..451792e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt;&gt; +++ b/arch/sparc/kernel/pci.c</span>
<span class="quote">&gt;&gt; @@ -654,12 +654,12 @@ struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
<span class="quote">&gt;&gt;   	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,</span>
<span class="quote">&gt;&gt; -				pbm-&gt;io_space.start);</span>
<span class="quote">&gt;&gt; +				pbm-&gt;io_offset);</span>
<span class="quote">&gt;&gt;   	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,</span>
<span class="quote">&gt;&gt; -				pbm-&gt;mem_space.start);</span>
<span class="quote">&gt;&gt; +				pbm-&gt;mem_offset);</span>
<span class="quote">&gt;&gt;   	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt;&gt;   		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,</span>
<span class="quote">&gt;&gt; -					pbm-&gt;mem_space.start);</span>
<span class="quote">&gt;&gt; +					pbm-&gt;mem_offset);</span>
<span class="quote">&gt;&gt;   	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;</span>
<span class="quote">&gt;&gt;   	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;</span>
<span class="quote">&gt;&gt;   	pbm-&gt;busn.flags	= IORESOURCE_BUS;</span>
<span class="quote">&gt;&gt; @@ -751,10 +751,10 @@ static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struc</span>
<span class="quote">&gt;&gt;   		return -EINVAL;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	if (mmap_state == pci_mmap_io) {</span>
<span class="quote">&gt;&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="quote">&gt;&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;io_offset +</span>
<span class="quote">&gt;&gt;   				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt;   	} else {</span>
<span class="quote">&gt;&gt; -		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="quote">&gt;&gt; +		vma-&gt;vm_pgoff = (pbm-&gt;mem_offset +</span>
<span class="quote">&gt;&gt;   				 user_offset) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -981,9 +981,9 @@ void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
<span class="quote">&gt;&gt;   	unsigned long offset;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	if (rp-&gt;flags &amp; IORESOURCE_IO)</span>
<span class="quote">&gt;&gt; -		offset = pbm-&gt;io_space.start;</span>
<span class="quote">&gt;&gt; +		offset = pbm-&gt;io_offset;</span>
<span class="quote">&gt;&gt;   	else</span>
<span class="quote">&gt;&gt; -		offset = pbm-&gt;mem_space.start;</span>
<span class="quote">&gt;&gt; +		offset = pbm-&gt;mem_offset;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	*start = rp-&gt;start - offset;</span>
<span class="quote">&gt;&gt;   	*end = rp-&gt;end - offset;</span>
<span class="quote">&gt;&gt; diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt;&gt; index 33524c1..28e976a 100644</span>
<span class="quote">&gt;&gt; --- a/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt;&gt; +++ b/arch/sparc/kernel/pci_common.c</span>
<span class="quote">&gt;&gt; @@ -393,6 +393,7 @@ static void pci_register_iommu_region(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt;   	const struct linux_prom_pci_ranges *pbm_ranges;</span>
<span class="quote">&gt;&gt; +	resource_size_t mem64_offset = 0;</span>
<span class="quote">&gt;&gt;   	int i, saw_mem, saw_io;</span>
<span class="quote">&gt;&gt;   	int num_pbm_ranges;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -410,13 +411,16 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	for (i = 0; i &lt; num_pbm_ranges; i++) {</span>
<span class="quote">&gt;&gt;   		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];</span>
<span class="quote">&gt;&gt; -		unsigned long a, size;</span>
<span class="quote">&gt;&gt; +		unsigned long a, size, region_a;</span>
<span class="quote">&gt;&gt;   		u32 parent_phys_hi, parent_phys_lo;</span>
<span class="quote">&gt;&gt; +		u32 child_phys_mid, child_phys_lo;</span>
<span class="quote">&gt;&gt;   		u32 size_hi, size_lo;</span>
<span class="quote">&gt;&gt;   		int type;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   		parent_phys_hi = pr-&gt;parent_phys_hi;</span>
<span class="quote">&gt;&gt;   		parent_phys_lo = pr-&gt;parent_phys_lo;</span>
<span class="quote">&gt;&gt; +		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="quote">&gt;&gt; +		child_phys_lo = pr-&gt;child_phys_lo;</span>
<span class="quote">&gt;&gt;   		if (tlb_type == hypervisor)</span>
<span class="quote">&gt;&gt;   			parent_phys_hi &amp;= 0x0fffffff;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -426,6 +430,8 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;</span>
<span class="quote">&gt;&gt;   		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;&gt;   		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;&gt; +		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="quote">&gt;&gt; +		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;&gt;   		size = (((unsigned long)size_hi &lt;&lt; 32UL) |</span>
<span class="quote">&gt;&gt;   			((unsigned long)size_lo  &lt;&lt;  0UL));</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -440,6 +446,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   			pbm-&gt;io_space.start = a;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;io_space.end = a + size - 1UL;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;io_space.flags = IORESOURCE_IO;</span>
<span class="quote">&gt;&gt; +			pbm-&gt;io_offset = a - region_a;</span>
<span class="quote">&gt;&gt;   			saw_io = 1;</span>
<span class="quote">&gt;&gt;   			break;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -448,6 +455,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem_space.start = a;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem_space.end = a + size - 1UL;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt;&gt; +			pbm-&gt;mem_offset = a - region_a;</span>
<span class="quote">&gt;&gt;   			saw_mem = 1;</span>
<span class="quote">&gt;&gt;   			break;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -456,6 +464,7 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem64_space.start = a;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem64_space.end = a + size - 1UL;</span>
<span class="quote">&gt;&gt;   			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;</span>
<span class="quote">&gt;&gt; +			mem64_offset = a - region_a;</span>
<span class="quote">&gt;&gt;   			saw_mem = 1;</span>
<span class="quote">&gt;&gt;   			break;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -471,14 +480,23 @@ void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
<span class="quote">&gt;&gt;   		prom_halt();</span>
<span class="quote">&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="quote">&gt;&gt; -	       pbm-&gt;name,</span>
<span class="quote">&gt;&gt; -	       pbm-&gt;io_space.start,</span>
<span class="quote">&gt;&gt; -	       pbm-&gt;mem_space.start);</span>
<span class="quote">&gt;&gt; -	if (pbm-&gt;mem64_space.flags)</span>
<span class="quote">&gt;&gt; -		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="quote">&gt;&gt; -		       pbm-&gt;mem64_space.start);</span>
<span class="quote">&gt;&gt; -	printk(&quot;\n&quot;);</span>
<span class="quote">&gt;&gt; +	if (pbm-&gt;io_space.flags)</span>
<span class="quote">&gt;&gt; +		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="quote">&gt;&gt; +		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="quote">&gt;&gt; +	if (pbm-&gt;mem_space.flags)</span>
<span class="quote">&gt;&gt; +		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="quote">&gt;&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt;&gt; +	if (pbm-&gt;mem64_space.flags) {</span>
<span class="quote">&gt;&gt; +		if (pbm-&gt;mem_space.flags) {</span>
<span class="quote">&gt;&gt; +			if (mem64_offset != pbm-&gt;mem_offset)</span>
<span class="quote">&gt;&gt; +				panic(&quot;mem offset %llx != mem64 offset %llx\n&quot;,</span>
<span class="quote">&gt;&gt; +					pbm-&gt;mem_offset, mem64_offset);</span>
<span class="quote">&gt;&gt; +		} else</span>
<span class="quote">&gt;&gt; +			pbm-&gt;mem_offset = mem64_offset;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="quote">&gt;&gt; +		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem_offset);</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;</span>
<span class="quote">&gt;&gt;   	pbm-&gt;mem64_space.name = pbm-&gt;name;</span>
<span class="quote">&gt;&gt; diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt;&gt; index 37222ca..08b74af 100644</span>
<span class="quote">&gt;&gt; --- a/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt;&gt; +++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="quote">&gt;&gt; @@ -99,6 +99,9 @@ struct pci_pbm_info {</span>
<span class="quote">&gt;&gt;   	struct resource			mem_space;</span>
<span class="quote">&gt;&gt;   	struct resource			mem64_space;</span>
<span class="quote">&gt;&gt;   	struct resource			busn;</span>
<span class="quote">&gt;&gt; +	/* offset */</span>
<span class="quote">&gt;&gt; +	resource_size_t			io_offset;</span>
<span class="quote">&gt;&gt; +	resource_size_t			mem_offset;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   	/* Base of PCI Config space, can be per-PBM or shared. */</span>
<span class="quote">&gt;&gt;   	unsigned long			config_space;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; 1.8.4.5</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; To unsubscribe from this list: send the line &quot;unsubscribe linux-pci&quot; in</span>
<span class="quote">&gt;&gt; the body of a message to majordomo@vger.kernel.org</span>
<span class="quote">&gt;&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a> - Oct. 20, 2015, 8:34 p.m.</div>
<pre class="content">
On Tue, Oct 20, 2015 at 1:07 PM, Khalid Aziz &lt;khalid.aziz@oracle.com&gt; wrote:
<span class="quote">&gt;&gt; I don&#39;t want to argue about pci_resource_to_user() right now, so I</span>
<span class="quote">&gt;&gt; guess you can just panic if the mem64 offset is different from the</span>
<span class="quote">&gt;&gt; mem32 offset.  But you should at least add a comment about why you&#39;re</span>
<span class="quote">&gt;&gt; doing that.  Otherwise it looks like you were just lazy.</span>

I had one version for that, but it has big change to __pci_mmap_make_offset_bus
for making pci_mmap_resource() working.
And took it for granted that MEM/MEM64 should have same offet.
<span class="quote">
&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I just hit this condition on a sparc platform where mem32 offset != mem64</span>
<span class="quote">&gt; offset. We need to handle this case, and not just call panic. I had not seen</span>
<span class="quote">&gt; this on 5 platforms and another 3 ldoms I had tested this on when I tested</span>
<span class="quote">&gt; this code earlier. I have sent panic log to Yinghai separately.</span>

Did you get test result with updated patch2 and patch3?

Thanks

Yinghai
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Oct. 20, 2015, 8:49 p.m.</div>
<pre class="content">
On 10/20/2015 02:34 PM, Yinghai Lu wrote:
<span class="quote">&gt; On Tue, Oct 20, 2015 at 1:07 PM, Khalid Aziz &lt;khalid.aziz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; I don&#39;t want to argue about pci_resource_to_user() right now, so I</span>
<span class="quote">&gt;&gt;&gt; guess you can just panic if the mem64 offset is different from the</span>
<span class="quote">&gt;&gt;&gt; mem32 offset.  But you should at least add a comment about why you&#39;re</span>
<span class="quote">&gt;&gt;&gt; doing that.  Otherwise it looks like you were just lazy.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I had one version for that, but it has big change to __pci_mmap_make_offset_bus</span>
<span class="quote">&gt; for making pci_mmap_resource() working.</span>
<span class="quote">&gt; And took it for granted that MEM/MEM64 should have same offet.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I just hit this condition on a sparc platform where mem32 offset != mem64</span>
<span class="quote">&gt;&gt; offset. We need to handle this case, and not just call panic. I had not seen</span>
<span class="quote">&gt;&gt; this on 5 platforms and another 3 ldoms I had tested this on when I tested</span>
<span class="quote">&gt;&gt; this code earlier. I have sent panic log to Yinghai separately.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Did you get test result with updated patch2 and patch3?</span>

I should have it by the end of day today.

--
Khalid

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63231">Khalid Aziz</a> - Oct. 20, 2015, 11:51 p.m.</div>
<pre class="content">
On 10/20/2015 02:34 PM, Yinghai Lu wrote:
<span class="quote">&gt; On Tue, Oct 20, 2015 at 1:07 PM, Khalid Aziz &lt;khalid.aziz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; I don&#39;t want to argue about pci_resource_to_user() right now, so I</span>
<span class="quote">&gt;&gt;&gt; guess you can just panic if the mem64 offset is different from the</span>
<span class="quote">&gt;&gt;&gt; mem32 offset.  But you should at least add a comment about why you&#39;re</span>
<span class="quote">&gt;&gt;&gt; doing that.  Otherwise it looks like you were just lazy.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I had one version for that, but it has big change to __pci_mmap_make_offset_bus</span>
<span class="quote">&gt; for making pci_mmap_resource() working.</span>
<span class="quote">&gt; And took it for granted that MEM/MEM64 should have same offet.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I just hit this condition on a sparc platform where mem32 offset != mem64</span>
<span class="quote">&gt;&gt; offset. We need to handle this case, and not just call panic. I had not seen</span>
<span class="quote">&gt;&gt; this on 5 platforms and another 3 ldoms I had tested this on when I tested</span>
<span class="quote">&gt;&gt; this code earlier. I have sent panic log to Yinghai separately.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Did you get test result with updated patch2 and patch3?</span>
<span class="quote">&gt;</span>

Hi Yinghai,

The failing T4 booted up with updated patches.

Thanks,
Khalid

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=16">Yinghai Lu</a> - Oct. 21, 2015, 12:03 a.m.</div>
<pre class="content">
On Tue, Oct 20, 2015 at 4:51 PM, Khalid Aziz &lt;khalid.aziz@oracle.com&gt; wrote:
<span class="quote">&gt; On 10/20/2015 02:34 PM, Yinghai Lu wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Tue, Oct 20, 2015 at 1:07 PM, Khalid Aziz &lt;khalid.aziz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I don&#39;t want to argue about pci_resource_to_user() right now, so I</span>
<span class="quote">&gt;&gt;&gt;&gt; guess you can just panic if the mem64 offset is different from the</span>
<span class="quote">&gt;&gt;&gt;&gt; mem32 offset.  But you should at least add a comment about why you&#39;re</span>
<span class="quote">&gt;&gt;&gt;&gt; doing that.  Otherwise it looks like you were just lazy.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I had one version for that, but it has big change to</span>
<span class="quote">&gt;&gt; __pci_mmap_make_offset_bus</span>
<span class="quote">&gt;&gt; for making pci_mmap_resource() working.</span>
<span class="quote">&gt;&gt; And took it for granted that MEM/MEM64 should have same offet.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I just hit this condition on a sparc platform where mem32 offset != mem64</span>
<span class="quote">&gt;&gt;&gt; offset. We need to handle this case, and not just call panic. I had not</span>
<span class="quote">&gt;&gt;&gt; seen</span>
<span class="quote">&gt;&gt;&gt; this on 5 platforms and another 3 ldoms I had tested this on when I</span>
<span class="quote">&gt;&gt;&gt; tested</span>
<span class="quote">&gt;&gt;&gt; this code earlier. I have sent panic log to Yinghai separately.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Did you get test result with updated patch2 and patch3?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Hi Yinghai,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The failing T4 booted up with updated patches.</span>
<span class="quote">&gt;</span>

Thanks, will post updated patch2 and patches3 and patch 4 with
pcibios_bus_to_resource as Bjorn requested.

Yinghai
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/kernel/pci.c b/arch/sparc/kernel/pci.c</span>
<span class="p_header">index badf095..451792e 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci.c</span>
<span class="p_chunk">@@ -654,12 +654,12 @@</span> <span class="p_context"> struct pci_bus *pci_scan_one_pbm(struct pci_pbm_info *pbm,</span>
 	printk(&quot;PCI: Scanning PBM %s\n&quot;, node-&gt;full_name);
 
 	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;io_space,
<span class="p_del">-				pbm-&gt;io_space.start);</span>
<span class="p_add">+				pbm-&gt;io_offset);</span>
 	pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem_space,
<span class="p_del">-				pbm-&gt;mem_space.start);</span>
<span class="p_add">+				pbm-&gt;mem_offset);</span>
 	if (pbm-&gt;mem64_space.flags)
 		pci_add_resource_offset(&amp;resources, &amp;pbm-&gt;mem64_space,
<span class="p_del">-					pbm-&gt;mem_space.start);</span>
<span class="p_add">+					pbm-&gt;mem_offset);</span>
 	pbm-&gt;busn.start = pbm-&gt;pci_first_busno;
 	pbm-&gt;busn.end	= pbm-&gt;pci_last_busno;
 	pbm-&gt;busn.flags	= IORESOURCE_BUS;
<span class="p_chunk">@@ -751,10 +751,10 @@</span> <span class="p_context"> static int __pci_mmap_make_offset_bus(struct pci_dev *pdev, struct vm_area_struc</span>
 		return -EINVAL;
 
 	if (mmap_state == pci_mmap_io) {
<span class="p_del">-		vma-&gt;vm_pgoff = (pbm-&gt;io_space.start +</span>
<span class="p_add">+		vma-&gt;vm_pgoff = (pbm-&gt;io_offset +</span>
 				 user_offset) &gt;&gt; PAGE_SHIFT;
 	} else {
<span class="p_del">-		vma-&gt;vm_pgoff = (pbm-&gt;mem_space.start +</span>
<span class="p_add">+		vma-&gt;vm_pgoff = (pbm-&gt;mem_offset +</span>
 				 user_offset) &gt;&gt; PAGE_SHIFT;
 	}
 
<span class="p_chunk">@@ -981,9 +981,9 @@</span> <span class="p_context"> void pci_resource_to_user(const struct pci_dev *pdev, int bar,</span>
 	unsigned long offset;
 
 	if (rp-&gt;flags &amp; IORESOURCE_IO)
<span class="p_del">-		offset = pbm-&gt;io_space.start;</span>
<span class="p_add">+		offset = pbm-&gt;io_offset;</span>
 	else
<span class="p_del">-		offset = pbm-&gt;mem_space.start;</span>
<span class="p_add">+		offset = pbm-&gt;mem_offset;</span>
 
 	*start = rp-&gt;start - offset;
 	*end = rp-&gt;end - offset;
<span class="p_header">diff --git a/arch/sparc/kernel/pci_common.c b/arch/sparc/kernel/pci_common.c</span>
<span class="p_header">index 33524c1..28e976a 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci_common.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci_common.c</span>
<span class="p_chunk">@@ -393,6 +393,7 @@</span> <span class="p_context"> static void pci_register_iommu_region(struct pci_pbm_info *pbm)</span>
 void pci_determine_mem_io_space(struct pci_pbm_info *pbm)
 {
 	const struct linux_prom_pci_ranges *pbm_ranges;
<span class="p_add">+	resource_size_t mem64_offset = 0;</span>
 	int i, saw_mem, saw_io;
 	int num_pbm_ranges;
 
<span class="p_chunk">@@ -410,13 +411,16 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 
 	for (i = 0; i &lt; num_pbm_ranges; i++) {
 		const struct linux_prom_pci_ranges *pr = &amp;pbm_ranges[i];
<span class="p_del">-		unsigned long a, size;</span>
<span class="p_add">+		unsigned long a, size, region_a;</span>
 		u32 parent_phys_hi, parent_phys_lo;
<span class="p_add">+		u32 child_phys_mid, child_phys_lo;</span>
 		u32 size_hi, size_lo;
 		int type;
 
 		parent_phys_hi = pr-&gt;parent_phys_hi;
 		parent_phys_lo = pr-&gt;parent_phys_lo;
<span class="p_add">+		child_phys_mid = pr-&gt;child_phys_mid;</span>
<span class="p_add">+		child_phys_lo = pr-&gt;child_phys_lo;</span>
 		if (tlb_type == hypervisor)
 			parent_phys_hi &amp;= 0x0fffffff;
 
<span class="p_chunk">@@ -426,6 +430,8 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 		type = (pr-&gt;child_phys_hi &gt;&gt; 24) &amp; 0x3;
 		a = (((unsigned long)parent_phys_hi &lt;&lt; 32UL) |
 		     ((unsigned long)parent_phys_lo  &lt;&lt;  0UL));
<span class="p_add">+		region_a = (((unsigned long)child_phys_mid &lt;&lt; 32UL) |</span>
<span class="p_add">+		     ((unsigned long)child_phys_lo  &lt;&lt;  0UL));</span>
 		size = (((unsigned long)size_hi &lt;&lt; 32UL) |
 			((unsigned long)size_lo  &lt;&lt;  0UL));
 
<span class="p_chunk">@@ -440,6 +446,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;io_space.start = a;
 			pbm-&gt;io_space.end = a + size - 1UL;
 			pbm-&gt;io_space.flags = IORESOURCE_IO;
<span class="p_add">+			pbm-&gt;io_offset = a - region_a;</span>
 			saw_io = 1;
 			break;
 
<span class="p_chunk">@@ -448,6 +455,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;mem_space.start = a;
 			pbm-&gt;mem_space.end = a + size - 1UL;
 			pbm-&gt;mem_space.flags = IORESOURCE_MEM;
<span class="p_add">+			pbm-&gt;mem_offset = a - region_a;</span>
 			saw_mem = 1;
 			break;
 
<span class="p_chunk">@@ -456,6 +464,7 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 			pbm-&gt;mem64_space.start = a;
 			pbm-&gt;mem64_space.end = a + size - 1UL;
 			pbm-&gt;mem64_space.flags = IORESOURCE_MEM;
<span class="p_add">+			mem64_offset = a - region_a;</span>
 			saw_mem = 1;
 			break;
 
<span class="p_chunk">@@ -471,14 +480,23 @@</span> <span class="p_context"> void pci_determine_mem_io_space(struct pci_pbm_info *pbm)</span>
 		prom_halt();
 	}
 
<span class="p_del">-	printk(&quot;%s: PCI IO[%llx] MEM[%llx]&quot;,</span>
<span class="p_del">-	       pbm-&gt;name,</span>
<span class="p_del">-	       pbm-&gt;io_space.start,</span>
<span class="p_del">-	       pbm-&gt;mem_space.start);</span>
<span class="p_del">-	if (pbm-&gt;mem64_space.flags)</span>
<span class="p_del">-		printk(&quot; MEM64[%llx]&quot;,</span>
<span class="p_del">-		       pbm-&gt;mem64_space.start);</span>
<span class="p_del">-	printk(&quot;\n&quot;);</span>
<span class="p_add">+	if (pbm-&gt;io_space.flags)</span>
<span class="p_add">+		printk(&quot;%s: PCI IO %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;io_space, pbm-&gt;io_offset);</span>
<span class="p_add">+	if (pbm-&gt;mem_space.flags)</span>
<span class="p_add">+		printk(&quot;%s: PCI MEM %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;mem_space, pbm-&gt;mem_offset);</span>
<span class="p_add">+	if (pbm-&gt;mem64_space.flags) {</span>
<span class="p_add">+		if (pbm-&gt;mem_space.flags) {</span>
<span class="p_add">+			if (mem64_offset != pbm-&gt;mem_offset)</span>
<span class="p_add">+				panic(&quot;mem offset %llx != mem64 offset %llx\n&quot;,</span>
<span class="p_add">+					pbm-&gt;mem_offset, mem64_offset);</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			pbm-&gt;mem_offset = mem64_offset;</span>
<span class="p_add">+</span>
<span class="p_add">+		printk(&quot;%s: PCI MEM64 %pR offset %llx\n&quot;,</span>
<span class="p_add">+		       pbm-&gt;name, &amp;pbm-&gt;mem64_space, pbm-&gt;mem_offset);</span>
<span class="p_add">+	}</span>
 
 	pbm-&gt;io_space.name = pbm-&gt;mem_space.name = pbm-&gt;name;
 	pbm-&gt;mem64_space.name = pbm-&gt;name;
<span class="p_header">diff --git a/arch/sparc/kernel/pci_impl.h b/arch/sparc/kernel/pci_impl.h</span>
<span class="p_header">index 37222ca..08b74af 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/pci_impl.h</span>
<span class="p_header">+++ b/arch/sparc/kernel/pci_impl.h</span>
<span class="p_chunk">@@ -99,6 +99,9 @@</span> <span class="p_context"> struct pci_pbm_info {</span>
 	struct resource			mem_space;
 	struct resource			mem64_space;
 	struct resource			busn;
<span class="p_add">+	/* offset */</span>
<span class="p_add">+	resource_size_t			io_offset;</span>
<span class="p_add">+	resource_size_t			mem_offset;</span>
 
 	/* Base of PCI Config space, can be per-PBM or shared. */
 	unsigned long			config_space;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



