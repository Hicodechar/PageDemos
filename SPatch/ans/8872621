
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv7,2/3] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv7,2/3] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 18, 2016, 2:23 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460989402-5468-1-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8872621/mbox/"
   >mbox</a>
|
   <a href="/patch/8872621/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8872621/">/patch/8872621/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 6AE5B9F1C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:24:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 973B520268
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:24:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0AAB720260
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 18 Apr 2016 14:24:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752005AbcDROYf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 18 Apr 2016 10:24:35 -0400
Received: from mail-am1on0114.outbound.protection.outlook.com
	([157.56.112.114]:12278
	&quot;EHLO emea01-am1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751918AbcDROYd (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 18 Apr 2016 10:24:33 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=If1VnQlvi3NF0JQ+ZGRYG9pKHvtkQjkxdbKHD7bwMCs=;
	b=R12zfdpIH4xACb2pCC9Fz5h88y17l047zo0G4ZUPfmrkeR9aBekXorTJZvRojEELzOUDgD1iqbocg7CSUOfqg7eYaeNI4+EVAixKOXlXea45H64zJm/4O6akZZCuSkXB4WgOiPHXG7KRcanc+2cTyfTsBs8/lr60IoMeXoZr70g=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	AM5PR0801MB1298.eurprd08.prod.outlook.com (10.167.216.149) with
	Microsoft
	SMTP Server (TLS) id 15.1.466.19; Mon, 18 Apr 2016 14:24:28 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;mingo@redhat.com&gt;,
	&lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv7 2/3] x86/vdso: add mremap hook to vm_special_mapping
Date: Mon, 18 Apr 2016 17:23:22 +0300
Message-ID: &lt;1460989402-5468-1-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;
References: &lt;1460987025-30360-2-git-send-email-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: VI1PR02CA0020.eurprd02.prod.outlook.com (10.162.7.158) To
	AM5PR0801MB1298.eurprd08.prod.outlook.com (10.167.216.149)
X-MS-Office365-Filtering-Correlation-Id: ae1f8bd7-1f59-4fd2-51c7-08d367952753
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	2:UPDXtw+jf3JEcRTLQ7Kwq8wkyKERdlqUaT+tMDXSgbSHXc3jezCrqAv6yVME7G+AqCWXdWbol9wUgYs3N7Tocgv+MHpM+f/3/igVf7Opb3Hzo+FIE2onhbt2oUxK4kMdoScNGE33bUBCHRo0Nhzx4yYrX1tokQQUs7hIOLvLiLozEenuwwCk1ScrIyqry3EN;
	3:JxIVHL5t68llHz7i0GPEXgBsq/CVYmFuWId0zxU8SJ6C0y5fr0OCdzrljOOvniIG9lab8N/WtFU5v/T5uHKRFI0eN0ubD7exEA14/OBTXXfzSiC+6BOcqqXmI6cpE7v6;
	25:TXkPCQjKgYlWn8ThYdPwa9yzb2EuFk4GMExZtlkIRU6rr5R1v3uT1PVEj81y7fdFOqh0chTUKbku2YZNchrpZj3OSji0Vb7lRjFEpn/RZG5i5/7ji/NBiiHGhelqmpMXHfqQGcar84uNvwftfEYTjXkUb/4ZPdND+U0wY1hD+x7pnmSmHc/U0MXLzxGNY9XEI/UrFLEKsdOX5dKfWsBCZ++Mqbr4DEBuCkpSX1vwu8qg4Yqjna4lnLztVJqrwn8hKyYeks1/5Lrs79CJNyXQyb7oyZY6IH+ivt+pidpmEfTszeScmjba+nWAPjqMz8IO/s0GMx2GTCtWBOv/If1wDA==
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:AM5PR0801MB1298;
X-Microsoft-Antispam-PRVS: &lt;AM5PR0801MB1298E8715956BC8F540C2004D16B0@AM5PR0801MB1298.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(9101521026)(6040130)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(6041046)(6043046);
	SRVR:AM5PR0801MB1298; BCL:0; PCL:0; RULEID:;
	SRVR:AM5PR0801MB1298; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	4:Gi3nxeYYb86O4777A6YcGLBwWZMPJy4yHW2HbTeFry+InhXyuro/SN/yqoI/HZ9SbyZzejdl0XUW37YGQ7+RqJVY+GlUY3v0Ub9OWEC+CQ2CD9OHDsEGy9Jb1bBjEs06m8b4aweyHoBT+Fmolxaeo/IH7X8rpnF+ERqsGv9QexwHh3zHaOqZG4C+IZDuwSJGaoMgImfY7/J8+tuCQNTQQVDQ5IIP2eke0Kqd4cWl620o+TY/fFzLavs9+O1mqx4QSqcoakcS5xWhmja1X9PUVzdc+QGjWzVWlw1YryZD7k2Et9UHMvRpdsOslSJJ5eZHazNtXB2mlW22be5hSNPK9NL6STkfEA0i9StNzfaT79n4MkAlk5i7MEoQGDXW3bTdQ3fh8Z2ZONEUzB0jnYYEMwkEjhyY/9WDnOsob+MDMiHB1HApuYAtL/VGy/SsZKcY
X-Forefront-PRVS: 0916FC3A18
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(2906002)(189998001)(36756003)(110136002)(107886002)(66066001)(76176999)(1096002)(6116002)(3846002)(586003)(50986999)(33646002)(48376002)(2950100001)(50466002)(77096005)(47776003)(229853001)(2351001)(81166005)(4001430100002)(53416004)(19580405001)(42186005)(4326007)(92566002)(5008740100001)(50226001)(86362001)(19580395003);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM5PR0801MB1298;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	23:iiv6wgCuzXomVap6yqXhbNWTuGqM09ozMdC9oVXshc0WsITeDKGcjo+4437R64KqUF/E0ywgMYruMtlCyWc1eXvlg5xhCxF5ua8Mkfl/epFxO6yJYSeKiTgf1pEC6WjaV2QauuIwxKnnvJUs0K/x0pomduONQcD1Zboyg0AaHw1Qglj2atb8WqTAla+AvAKLno6AtFlX5LU5MGerNBizQ1d6sfu/cAb0/2N55X2QDT7jH2m8/c82oG0QvPOHQ2ARXK3TA8gPO5K782RxdqjeH/G+FC18rN3V+xVNAuIBmT9aug0kf7XrYMxmU8Ro/QrKHUIykBxYj5/6R8sHmsx21qkosh5K6yM6TVjbSyP0Sl7uDWXaJ2JayPS/xzJpUuosikcfcUYejq1o7MOcdTm7GhR9g34bauv9aSEHSXuf6hTp+nTAk6x8Jelun94ClvszRuWUOP2u/zjcpaBX5zlTuH5PhM61Zdn19XR5+pBgLoQx4o0xb9Crl9hKkIFIrQgiwnptw5hdNun9bASSfSlVeDe94oS8kmXW2tL3m811za4XFMPP33YyXUd0HpcHt/MLBY4GIf7p2G8Gn01dOLJrdqbYEjTegJIFxZKwL80cA6SKcsPvFuBvHOD7KY0cc6vS9c3dja5erpvbNbXSn/HeYSbgM0CtGyjbZ0G2V1DytLWIQhrcMrpW3He5IAzYVMGwXwSZOX5AU2EBkQXphc8kSbhdJi6XDGwR8LIDY8d/ZBgMjA5IKGL+PLur826lE/DEaSaW3/m1+ZuPuTPDScLhtIG3Fo8FaDbfGokw8DcP6VxYxM+uWXpacNVL4TlmHpcClTU9Bu0yzoC8m+N/UrjvLFhlWC3Z8jVsrbdiAI14OW5z1njrpYSk9FSRwqRR/rkR6zTkYhDAP3Rcgcc7jOqrVA==
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1298;
	5:C2dnSPSFobe8suEHfTwSxaeSdz7VxdiHuN7wf2t3U4SuUcHGo4lSAgFsSPX3NuIOkuoU+yjho83XZVcGcSs9b7beJipcpiNOXRYvg447XB/Zhotb0+I7vvX5DZm0I38sGV6NWMrIT/L5/+k4HNMeQx/ms11q2tEW3TV91wq4WvOE+Yko+fL29GWwfBNum7jb;
	24:Z3WN+n7tkthPLyi/bIFgXKHekNCd9TkGrJVuk6XjcEaozYSvU1UtN5NP7Hbw75s5CiO56docUKYs2NMhQAWuIGgWZGidOUSPdTV4qIP2G/o=;
	7:a0ZIDebW9vE05ySnhPTZY5G1xxgPS2uRAkKUh9RINcvSs1S+MVOQYkDyE8/mNtllI+PJxS8IVwc1rOh/DQqJR8UZzO59vP63nqhu5xgGOoorx43Qq1h6Pe+WR73sUBVHpuOGogRVgK2Hf46KOOpNGPb09lEQwSipgiYXb+VweqYiy4gOfB0lEvFfMRIG3bX4ByZHXnXEE9cyTl2goNNhrJRcgPpp3seRMTgeQSaJev0=;
	20:/m/5zzVdJyO0215LxrYa8n0TaiB3WNgJ9ZcN/cLUrolZiR4ZgKyD4NPMEzE+Xnri7wcVlyRCZTM8HPqwI7L0Iwq987X08j8dFJH++qR3RQfWxcNEmA0Rs9pWggLtsEiQ3l7C2vl5obFXeF9q9OzXOA0K7Wf04Oe+JAR01HqSgxg=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Apr 2016 14:24:28.5368
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM5PR0801MB1298
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 18, 2016, 2:23 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

As suggested by Andy, return EINVAL for mremap that splits vdso image.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
v7: that&#39;s just not my day: add new_vma parameter to vdso_fix_landing
    sorry for the noise
v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function
    with ifdefs around
v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are
    the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32
v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32
v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;
    used is_ia32_task instead of ifdefs 
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 50 ++++++++++++++++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 58 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 20, 2016, 4:22 p.m.</div>
<pre class="content">
On 04/18/2016 05:23 PM, Dmitry Safonov wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;    Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;    #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;    #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>

Andy, can I have an ack from you for this version?
If it looks fine for you, of course.
And for v5 test (3/3 patch)? (I did not resed it, as it hasn&#39;t changed)
<span class="quote">
&gt; ---</span>
<span class="quote">&gt; v7: that&#39;s just not my day: add new_vma parameter to vdso_fix_landing</span>
<span class="quote">&gt;      sorry for the noise</span>
<span class="quote">&gt; v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt;      with ifdefs around</span>
<span class="quote">&gt; v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt;      the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;      used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   arch/x86/entry/vdso/vma.c | 50 ++++++++++++++++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;   include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;   mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;   3 files changed, 58 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; index 10f704584922..d94291a19b6e 100644</span>
<span class="quote">&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;   #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;   #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;   #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;   #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;   #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;   #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt; @@ -98,10 +99,43 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;   	return 0;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt; -	.name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; -	.fault = vdso_fault,</span>
<span class="quote">&gt; -};</span>
<span class="quote">&gt; +#if defined CONFIG_X86_32 || defined CONFIG_COMPAT</span>
<span class="quote">&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt; +		struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="quote">&gt; +		struct pt_regs *regs = current_pt_regs();</span>
<span class="quote">&gt; +		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="quote">&gt; +		unsigned long old_land_addr = vdso_land +</span>
<span class="quote">&gt; +			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt; +		if (regs-&gt;ip == old_land_addr)</span>
<span class="quote">&gt; +			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt; +		struct vm_area_struct *new_vma) {}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +		struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="quote">&gt; +	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (image-&gt;size != new_size)</span>
<span class="quote">&gt; +		return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="quote">&gt; +		return -EFAULT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	vdso_fix_landing(image, new_vma);</span>
<span class="quote">&gt; +	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   static int vvar_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;   		      struct vm_area_struct *vma, struct vm_fault *vmf)</span>
<span class="quote">&gt; @@ -162,6 +196,12 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;   	struct vm_area_struct *vma;</span>
<span class="quote">&gt;   	unsigned long addr, text_start;</span>
<span class="quote">&gt;   	int ret = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="quote">&gt; +		.name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; +		.fault = vdso_fault,</span>
<span class="quote">&gt; +		.mremap = vdso_mremap,</span>
<span class="quote">&gt; +	};</span>
<span class="quote">&gt;   	static const struct vm_special_mapping vvar_mapping = {</span>
<span class="quote">&gt;   		.name = &quot;[vvar]&quot;,</span>
<span class="quote">&gt;   		.fault = vvar_fault,</span>
<span class="quote">&gt; @@ -195,7 +235,7 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;   				       image-&gt;size,</span>
<span class="quote">&gt;   				       VM_READ|VM_EXEC|</span>
<span class="quote">&gt;   				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,</span>
<span class="quote">&gt; -				       &amp;text_mapping);</span>
<span class="quote">&gt; +				       &amp;vdso_mapping);</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   	if (IS_ERR(vma)) {</span>
<span class="quote">&gt;   		ret = PTR_ERR(vma);</span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -586,6 +586,9 @@ struct vm_special_mapping {</span>
<span class="quote">&gt;   	int (*fault)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;   		     struct vm_area_struct *vma,</span>
<span class="quote">&gt;   		     struct vm_fault *vmf);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +		     struct vm_area_struct *new_vma);</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt;   enum tlb_flush_reason {</span>
<span class="quote">&gt; diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="quote">&gt; index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="quote">&gt; --- a/mm/mmap.c</span>
<span class="quote">&gt; +++ b/mm/mmap.c</span>
<span class="quote">&gt; @@ -2930,9 +2930,19 @@ static const char *special_mapping_name(struct vm_area_struct *vma)</span>
<span class="quote">&gt;   	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sm-&gt;mremap)</span>
<span class="quote">&gt; +		return sm-&gt;mremap(sm, new_vma);</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   static const struct vm_operations_struct special_mapping_vmops = {</span>
<span class="quote">&gt;   	.close = special_mapping_close,</span>
<span class="quote">&gt;   	.fault = special_mapping_fault,</span>
<span class="quote">&gt; +	.mremap = special_mapping_mremap,</span>
<span class="quote">&gt;   	.name = special_mapping_name,</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - April 21, 2016, 7:52 p.m.</div>
<pre class="content">
On Mon, Apr 18, 2016 at 7:23 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;   Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;   #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;   #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v7: that&#39;s just not my day: add new_vma parameter to vdso_fix_landing</span>
<span class="quote">&gt;     sorry for the noise</span>
<span class="quote">&gt; v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt;     with ifdefs around</span>
<span class="quote">&gt; v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt;     the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;     used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/x86/entry/vdso/vma.c | 50 ++++++++++++++++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;  include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;  mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;  3 files changed, 58 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; index 10f704584922..d94291a19b6e 100644</span>
<span class="quote">&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt; @@ -98,10 +99,43 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;         return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt; -       .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; -       .fault = vdso_fault,</span>
<span class="quote">&gt; -};</span>
<span class="quote">&gt; +#if defined CONFIG_X86_32 || defined CONFIG_COMPAT</span>

I think you mean defined(CONFIG_IA32_EMULATION).  IIRC CONFIG_COMPAT
is set for X32, !IA32 kernels, too.
<span class="quote">
&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt; +               struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="quote">&gt; +               struct pt_regs *regs = current_pt_regs();</span>
<span class="quote">&gt; +               unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="quote">&gt; +               unsigned long old_land_addr = vdso_land +</span>
<span class="quote">&gt; +                       (unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +               /* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt; +               if (regs-&gt;ip == old_land_addr)</span>
<span class="quote">&gt; +                       regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="quote">&gt; +       }</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt; +               struct vm_area_struct *new_vma) {}</span>
<span class="quote">&gt; +#endif</span>

You could also define the function regardless and simply ifdef out the
body, thus saving a few lines of code.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +               struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="quote">&gt; +       const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (image-&gt;size != new_size)</span>
<span class="quote">&gt; +               return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="quote">&gt; +               return -EFAULT;</span>

Can you make that if (WARN_ON_ONCE(current-&gt;mm != new_vma-&gt;vm_mm))?
It should be impossible.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +       vdso_fix_landing(image, new_vma);</span>
<span class="quote">&gt; +       current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  static int vvar_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;                       struct vm_area_struct *vma, struct vm_fault *vmf)</span>
<span class="quote">&gt; @@ -162,6 +196,12 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;         struct vm_area_struct *vma;</span>
<span class="quote">&gt;         unsigned long addr, text_start;</span>
<span class="quote">&gt;         int ret = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       static const struct vm_special_mapping vdso_mapping = {</span>
<span class="quote">&gt; +               .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; +               .fault = vdso_fault,</span>
<span class="quote">&gt; +               .mremap = vdso_mremap,</span>
<span class="quote">&gt; +       };</span>
<span class="quote">&gt;         static const struct vm_special_mapping vvar_mapping = {</span>
<span class="quote">&gt;                 .name = &quot;[vvar]&quot;,</span>
<span class="quote">&gt;                 .fault = vvar_fault,</span>
<span class="quote">&gt; @@ -195,7 +235,7 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;                                        image-&gt;size,</span>
<span class="quote">&gt;                                        VM_READ|VM_EXEC|</span>
<span class="quote">&gt;                                        VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,</span>
<span class="quote">&gt; -                                      &amp;text_mapping);</span>
<span class="quote">&gt; +                                      &amp;vdso_mapping);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (IS_ERR(vma)) {</span>
<span class="quote">&gt;                 ret = PTR_ERR(vma);</span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -586,6 +586,9 @@ struct vm_special_mapping {</span>
<span class="quote">&gt;         int (*fault)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;                      struct vm_area_struct *vma,</span>
<span class="quote">&gt;                      struct vm_fault *vmf);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +                    struct vm_area_struct *new_vma);</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  enum tlb_flush_reason {</span>
<span class="quote">&gt; diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="quote">&gt; index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="quote">&gt; --- a/mm/mmap.c</span>
<span class="quote">&gt; +++ b/mm/mmap.c</span>
<span class="quote">&gt; @@ -2930,9 +2930,19 @@ static const char *special_mapping_name(struct vm_area_struct *vma)</span>
<span class="quote">&gt;         return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (sm-&gt;mremap)</span>
<span class="quote">&gt; +               return sm-&gt;mremap(sm, new_vma);</span>
<span class="quote">&gt; +       return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static const struct vm_operations_struct special_mapping_vmops = {</span>
<span class="quote">&gt;         .close = special_mapping_close,</span>
<span class="quote">&gt;         .fault = special_mapping_fault,</span>
<span class="quote">&gt; +       .mremap = special_mapping_mremap,</span>
<span class="quote">&gt;         .name = special_mapping_name,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.8.0</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 22, 2016, 10:45 a.m.</div>
<pre class="content">
On 04/21/2016 10:52 PM, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Apr 18, 2016 at 7:23 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt;&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt;&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt;&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt;&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt;&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt;&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; As suggested by Andy, return EINVAL for mremap that splits vdso image.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt;&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt;&gt; vvar_mapping variable.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; There is still problem for remapping vdso in glibc applications:</span>
<span class="quote">&gt;&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt;&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt;&gt; through glibc may fail:</span>
<span class="quote">&gt;&gt;    Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;&gt;    #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;&gt;    #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; v7: that&#39;s just not my day: add new_vma parameter to vdso_fix_landing</span>
<span class="quote">&gt;&gt;      sorry for the noise</span>
<span class="quote">&gt;&gt; v6: moved vdso_image_32 check and fixup code into vdso_fix_landing function</span>
<span class="quote">&gt;&gt;      with ifdefs around</span>
<span class="quote">&gt;&gt; v5: as Andy suggested, add a check that new_vma-&gt;vm_mm and current-&gt;mm are</span>
<span class="quote">&gt;&gt;      the same, also check not only in_ia32_syscall() but image == &amp;vdso_image_32</span>
<span class="quote">&gt;&gt; v4: drop __maybe_unused &amp; use image from mm-&gt;context instead vdso_image_32</span>
<span class="quote">&gt;&gt; v3: as Andy suggested, return EINVAL in case of splitting vdso blob on mremap;</span>
<span class="quote">&gt;&gt;      used is_ia32_task instead of ifdefs</span>
<span class="quote">&gt;&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   arch/x86/entry/vdso/vma.c | 50 ++++++++++++++++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;&gt;   include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;&gt;   mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;&gt;   3 files changed, 58 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; index 10f704584922..d94291a19b6e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt;&gt; @@ -98,10 +99,43 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt;          return 0;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt;&gt; -       .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt;&gt; -       .fault = vdso_fault,</span>
<span class="quote">&gt;&gt; -};</span>
<span class="quote">&gt;&gt; +#if defined CONFIG_X86_32 || defined CONFIG_COMPAT</span>
<span class="quote">&gt; I think you mean defined(CONFIG_IA32_EMULATION).  IIRC CONFIG_COMPAT</span>
<span class="quote">&gt; is set for X32, !IA32 kernels, too.</span>

Sure, I just copied it from vdso_image_32 declaration.
Should it be there CONFIG_IA32_EMULATION there instead of
CONFIG_COMPAT? Or I miss something?
<span class="quote">
&gt;&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt;&gt; +               struct vm_area_struct *new_vma)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="quote">&gt;&gt; +               struct pt_regs *regs = current_pt_regs();</span>
<span class="quote">&gt;&gt; +               unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="quote">&gt;&gt; +               unsigned long old_land_addr = vdso_land +</span>
<span class="quote">&gt;&gt; +                       (unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +               /* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt;&gt; +               if (regs-&gt;ip == old_land_addr)</span>
<span class="quote">&gt;&gt; +                       regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="quote">&gt;&gt; +       }</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +#else</span>
<span class="quote">&gt;&gt; +static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="quote">&gt;&gt; +               struct vm_area_struct *new_vma) {}</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt; You could also define the function regardless and simply ifdef out the</span>
<span class="quote">&gt; body, thus saving a few lines of code.</span>

Yep, will do.
<span class="quote">
&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt; +               struct vm_area_struct *new_vma)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="quote">&gt;&gt; +       const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       if (image-&gt;size != new_size)</span>
<span class="quote">&gt;&gt; +               return -EINVAL;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="quote">&gt;&gt; +               return -EFAULT;</span>
<span class="quote">&gt; Can you make that if (WARN_ON_ONCE(current-&gt;mm != new_vma-&gt;vm_mm))?</span>
<span class="quote">&gt; It should be impossible.</span>

Sure.
<span class="quote">
&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       vdso_fix_landing(image, new_vma);</span>
<span class="quote">&gt;&gt; +       current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   static int vvar_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt;                        struct vm_area_struct *vma, struct vm_fault *vmf)</span>
<span class="quote">&gt;&gt; @@ -162,6 +196,12 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;&gt;          struct vm_area_struct *vma;</span>
<span class="quote">&gt;&gt;          unsigned long addr, text_start;</span>
<span class="quote">&gt;&gt;          int ret = 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       static const struct vm_special_mapping vdso_mapping = {</span>
<span class="quote">&gt;&gt; +               .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt;&gt; +               .fault = vdso_fault,</span>
<span class="quote">&gt;&gt; +               .mremap = vdso_mremap,</span>
<span class="quote">&gt;&gt; +       };</span>
<span class="quote">&gt;&gt;          static const struct vm_special_mapping vvar_mapping = {</span>
<span class="quote">&gt;&gt;                  .name = &quot;[vvar]&quot;,</span>
<span class="quote">&gt;&gt;                  .fault = vvar_fault,</span>
<span class="quote">&gt;&gt; @@ -195,7 +235,7 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;&gt;                                         image-&gt;size,</span>
<span class="quote">&gt;&gt;                                         VM_READ|VM_EXEC|</span>
<span class="quote">&gt;&gt;                                         VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,</span>
<span class="quote">&gt;&gt; -                                      &amp;text_mapping);</span>
<span class="quote">&gt;&gt; +                                      &amp;vdso_mapping);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;          if (IS_ERR(vma)) {</span>
<span class="quote">&gt;&gt;                  ret = PTR_ERR(vma);</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt;&gt; index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt;&gt; @@ -586,6 +586,9 @@ struct vm_special_mapping {</span>
<span class="quote">&gt;&gt;          int (*fault)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt;                       struct vm_area_struct *vma,</span>
<span class="quote">&gt;&gt;                       struct vm_fault *vmf);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt; +                    struct vm_area_struct *new_vma);</span>
<span class="quote">&gt;&gt;   };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   enum tlb_flush_reason {</span>
<span class="quote">&gt;&gt; diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="quote">&gt;&gt; index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="quote">&gt;&gt; --- a/mm/mmap.c</span>
<span class="quote">&gt;&gt; +++ b/mm/mmap.c</span>
<span class="quote">&gt;&gt; @@ -2930,9 +2930,19 @@ static const char *special_mapping_name(struct vm_area_struct *vma)</span>
<span class="quote">&gt;&gt;          return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       if (sm-&gt;mremap)</span>
<span class="quote">&gt;&gt; +               return sm-&gt;mremap(sm, new_vma);</span>
<span class="quote">&gt;&gt; +       return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;   static const struct vm_operations_struct special_mapping_vmops = {</span>
<span class="quote">&gt;&gt;          .close = special_mapping_close,</span>
<span class="quote">&gt;&gt;          .fault = special_mapping_fault,</span>
<span class="quote">&gt;&gt; +       .mremap = special_mapping_mremap,</span>
<span class="quote">&gt;&gt;          .name = special_mapping_name,</span>
<span class="quote">&gt;&gt;   };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; 2.8.0</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..d94291a19b6e 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,43 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+#if defined CONFIG_X86_32 || defined CONFIG_COMPAT</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (in_ia32_syscall() &amp;&amp; image == &amp;vdso_image_32) {</span>
<span class="p_add">+		struct pt_regs *regs = current_pt_regs();</span>
<span class="p_add">+		unsigned long vdso_land = image-&gt;sym_int80_landing_pad;</span>
<span class="p_add">+		unsigned long old_land_addr = vdso_land +</span>
<span class="p_add">+			(unsigned long)current-&gt;mm-&gt;context.vdso;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+		if (regs-&gt;ip == old_land_addr)</span>
<span class="p_add">+			regs-&gt;ip = new_vma-&gt;vm_start + vdso_land;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static void vdso_fix_landing(const struct vdso_image *image,</span>
<span class="p_add">+		struct vm_area_struct *new_vma) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long new_size = new_vma-&gt;vm_end - new_vma-&gt;vm_start;</span>
<span class="p_add">+	const struct vdso_image *image = current-&gt;mm-&gt;context.vdso_image;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (image-&gt;size != new_size)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (current-&gt;mm != new_vma-&gt;vm_mm)</span>
<span class="p_add">+		return -EFAULT;</span>
<span class="p_add">+</span>
<span class="p_add">+	vdso_fix_landing(image, new_vma);</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +196,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +235,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



