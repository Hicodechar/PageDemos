
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,06/11] mm: add pgoff_mkclean() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,06/11] mm: add pgoff_mkclean()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=83981">Ross Zwisler</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 29, 2015, 8:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1446149535-16200-7-git-send-email-ross.zwisler@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7520831/mbox/"
   >mbox</a>
|
   <a href="/patch/7520831/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7520831/">/patch/7520831/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 0111DBEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Oct 2015 20:16:02 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 2E7B52052F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Oct 2015 20:16:01 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2DD3C2054D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Oct 2015 20:16:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757847AbbJ2UPw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 29 Oct 2015 16:15:52 -0400
Received: from mga01.intel.com ([192.55.52.88]:56848 &quot;EHLO mga01.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1750967AbbJ2UMf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 29 Oct 2015 16:12:35 -0400
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga101.fm.intel.com with ESMTP; 29 Oct 2015 13:12:34 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,215,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;838730634&quot;
Received: from theros.lm.intel.com ([10.232.112.192])
	by fmsmga002.fm.intel.com with ESMTP; 29 Oct 2015 13:12:32 -0700
From: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;
To: linux-kernel@vger.kernel.org
Cc: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	&quot;J. Bruce Fields&quot; &lt;bfields@fieldses.org&gt;,
	&quot;Theodore Ts&#39;o&quot; &lt;tytso@mit.edu&gt;,
	Alexander Viro &lt;viro@zeniv.linux.org.uk&gt;,
	Andreas Dilger &lt;adilger.kernel@dilger.ca&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	Dave Chinner &lt;david@fromorbit.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Jan Kara &lt;jack@suse.com&gt;,
	Jeff Layton &lt;jlayton@poochiereds.net&gt;,
	Matthew Wilcox &lt;willy@linux.intel.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	linux-ext4@vger.kernel.org, linux-fsdevel@vger.kernel.org,
	linux-mm@kvack.org, linux-nvdimm@lists.01.org, x86@kernel.org,
	xfs@oss.sgi.com, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Matthew Wilcox &lt;matthew.r.wilcox@intel.com&gt;
Subject: [RFC 06/11] mm: add pgoff_mkclean()
Date: Thu, 29 Oct 2015 14:12:10 -0600
Message-Id: &lt;1446149535-16200-7-git-send-email-ross.zwisler@linux.intel.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1446149535-16200-1-git-send-email-ross.zwisler@linux.intel.com&gt;
References: &lt;1446149535-16200-1-git-send-email-ross.zwisler@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=83981">Ross Zwisler</a> - Oct. 29, 2015, 8:12 p.m.</div>
<pre class="content">
Introduce pgoff_mkclean() which conceptually is similar to page_mkclean()
except it works in the absence of struct page and it can also be used to
clean PMDs.  This is needed for DAX&#39;s dirty page handling.
<span class="signed-off-by">
Signed-off-by: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;</span>
---
 include/linux/rmap.h |  5 +++++
 mm/rmap.c            | 53 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 58 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/rmap.h b/include/linux/rmap.h</span>
<span class="p_header">index 29446ae..627875f9 100644</span>
<span class="p_header">--- a/include/linux/rmap.h</span>
<span class="p_header">+++ b/include/linux/rmap.h</span>
<span class="p_chunk">@@ -223,6 +223,11 @@</span> <span class="p_context"> unsigned long page_address_in_vma(struct page *, struct vm_area_struct *);</span>
 int page_mkclean(struct page *);
 
 /*
<span class="p_add">+ * Cleans and write protects the PTEs of shared mappings.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int pgoff_mkclean(pgoff_t, struct address_space *);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
  * called in munlock()/munmap() path to check for other vmas holding
  * the page mlocked.
  */
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index f5b5c1f..0ce16ab 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -586,6 +586,16 @@</span> <span class="p_context"> vma_address(struct page *page, struct vm_area_struct *vma)</span>
 	return address;
 }
 
<span class="p_add">+static inline unsigned long</span>
<span class="p_add">+pgoff_address(pgoff_t pgoff, struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long address;</span>
<span class="p_add">+</span>
<span class="p_add">+	address = vma-&gt;vm_start + ((pgoff - vma-&gt;vm_pgoff) &lt;&lt; PAGE_SHIFT);</span>
<span class="p_add">+	VM_BUG_ON_VMA(address &lt; vma-&gt;vm_start || address &gt;= vma-&gt;vm_end, vma);</span>
<span class="p_add">+	return address;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH
 static void percpu_flush_tlb_batch_pages(void *data)
 {
<span class="p_chunk">@@ -1040,6 +1050,49 @@</span> <span class="p_context"> int page_mkclean(struct page *page)</span>
 }
 EXPORT_SYMBOL_GPL(page_mkclean);
 
<span class="p_add">+int pgoff_mkclean(pgoff_t pgoff, struct address_space *mapping)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	i_mmap_lock_read(mapping);</span>
<span class="p_add">+	vma_interval_tree_foreach(vma, &amp;mapping-&gt;i_mmap, pgoff, pgoff) {</span>
<span class="p_add">+		struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+		pmd_t pmd, *pmdp = NULL;</span>
<span class="p_add">+		pte_t pte, *ptep = NULL;</span>
<span class="p_add">+		unsigned long address;</span>
<span class="p_add">+		spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+		address = pgoff_address(pgoff, vma);</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = follow_pte_pmd(mm, address, &amp;ptep, &amp;pmdp, &amp;ptl);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmdp) {</span>
<span class="p_add">+			flush_cache_page(vma, address, pmd_pfn(*pmdp));</span>
<span class="p_add">+			pmd = pmdp_huge_clear_flush(vma, address, pmdp);</span>
<span class="p_add">+			pmd = pmd_wrprotect(pmd);</span>
<span class="p_add">+			pmd = pmd_mkclean(pmd);</span>
<span class="p_add">+			set_pmd_at(mm, address, pmdp, pmd);</span>
<span class="p_add">+			spin_unlock(ptl);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			BUG_ON(!ptep);</span>
<span class="p_add">+			flush_cache_page(vma, address, pte_pfn(*ptep));</span>
<span class="p_add">+			pte = ptep_clear_flush(vma, address, ptep);</span>
<span class="p_add">+			pte = pte_wrprotect(pte);</span>
<span class="p_add">+			pte = pte_mkclean(pte);</span>
<span class="p_add">+			set_pte_at(mm, address, ptep, pte);</span>
<span class="p_add">+			pte_unmap_unlock(ptep, ptl);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+ out:</span>
<span class="p_add">+	i_mmap_unlock_read(mapping);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(pgoff_mkclean);</span>
<span class="p_add">+</span>
 /**
  * page_move_anon_rmap - move a page to our anon_vma
  * @page:	the page to move to our anon_vma

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



