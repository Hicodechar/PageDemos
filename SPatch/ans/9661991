
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[01/12] x86/efi: Clean up efi CR3 save/restore - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [01/12] x86/efi: Clean up efi CR3 save/restore</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 4, 2017, 4:02 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170404160245.27812-3-ard.biesheuvel@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9661991/mbox/"
   >mbox</a>
|
   <a href="/patch/9661991/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9661991/">/patch/9661991/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D86C2602B5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 16:03:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C7A5A201BD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 16:03:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BC73327D0E; Tue,  4 Apr 2017 16:03:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1074D201BD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Apr 2017 16:03:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754868AbdDDQDR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 4 Apr 2017 12:03:17 -0400
Received: from mail-wm0-f54.google.com ([74.125.82.54]:37217 &quot;EHLO
	mail-wm0-f54.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754800AbdDDQDN (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 4 Apr 2017 12:03:13 -0400
Received: by mail-wm0-f54.google.com with SMTP id x124so32343197wmf.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 04 Apr 2017 09:03:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=U+WcXNNxOdeqTQzwVPkjnWf2u5+ZA2LVDyTUb4kg0H0=;
	b=BdyYFI2uYpmc5atnR3ADJ6vsL3kpqNCrlX81P/f0IA4QvZQSqomvaYrPpuXogCC+kh
	dk9q3fuhfrm1Pskpd0rGL36kiZQ0UTX1oIZspos2o/WkvCzI9OD85voNSZQ7i5P4NM+G
	+f/fErblg+MVwCjddJpNuWW6JwbVTRKCZ1eU8=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=U+WcXNNxOdeqTQzwVPkjnWf2u5+ZA2LVDyTUb4kg0H0=;
	b=KBj0nEDdV9z2HUf2CL7ElD87wn7J3+TfqdnM8lyO0ndQW1Jkw4uRxysUCAt79MtPUl
	l70biaQvliV8SCiwgB+v7ygI1VeatqUl43gijzcZGP1QU1GLPCFLl++A8HnO49Gc9qUl
	ldsmFw/RrAW3YwU5jLRRKOmdUxNGeMmetnrY+7n4/f4qr9nnI3rB9SRzReoXPfirfL6d
	HYderdxWFj8XreaybGVxYNgEQIBah0BcjTJKUKy0/+QfRd2/1wB6sdMGSM7yuE0br6Qh
	pJ1FdfP0wxK4LlHdt138Zt+zdCVI2VBUR5VawjK/FUX8izVVam1p7wsX20QaJP5+wzU7
	h2nQ==
X-Gm-Message-State: AFeK/H3kg+tfvrJx8XkRWqJNYk1sATvWbIxq8zVUAZ0JolPenmKl98bu2kf9ZmisgZn12qv7
X-Received: by 10.28.157.150 with SMTP id g144mr15612454wme.89.1491321791652;
	Tue, 04 Apr 2017 09:03:11 -0700 (PDT)
Received: from localhost.localdomain ([160.163.145.113])
	by smtp.gmail.com with ESMTPSA id
	z88sm19686465wrb.1.2017.04.04.09.03.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 04 Apr 2017 09:03:10 -0700 (PDT)
From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
To: linux-efi@vger.kernel.org, Ingo Molnar &lt;mingo@kernel.org&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;, linux-kernel@vger.kernel.org
Subject: [PATCH 01/12] x86/efi: Clean up efi CR3 save/restore
Date: Tue,  4 Apr 2017 17:02:36 +0100
Message-Id: &lt;20170404160245.27812-3-ard.biesheuvel@linaro.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20170404160245.27812-1-ard.biesheuvel@linaro.org&gt;
References: &lt;20170404160245.27812-1-ard.biesheuvel@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - April 4, 2017, 4:02 p.m.</div>
<pre class="content">
<span class="from">From: Andy Lutomirski &lt;luto@kernel.org&gt;</span>

efi_call_phys_prolog() used to return a &quot;pgd_t *&quot; that meant one of
three different things depending on kernel and system configuration.
Clean it up so it uses a union and is more explicit about what&#39;s
going on.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Ingo Molnar &lt;mingo@kernel.org&gt;
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
<span class="signed-off-by">Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
---
 arch/x86/include/asm/efi.h     | 17 +++++++++++++++--
 arch/x86/platform/efi/efi.c    |  6 +++---
 arch/x86/platform/efi/efi_32.c | 12 ++++++------
 arch/x86/platform/efi/efi_64.c | 22 ++++++++++++----------
 4 files changed, 36 insertions(+), 21 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 2f77bcefe6b4..6d74cc3802e6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -111,11 +111,24 @@</span> <span class="p_context"> extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,</span>
 
 #endif /* CONFIG_X86_32 */
 
<span class="p_add">+union efi_saved_pgd {</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If !EFI_OLD_MEMMAP or we&#39;re 32-bit, this is a verbatim saved CR3</span>
<span class="p_add">+	 * value.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	unsigned long cr3;</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_X86_64</span>
<span class="p_add">+	/* If EFI_OLD_MEMMAP, this is a kmalloced copy of the pgd. */</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 extern struct efi_scratch efi_scratch;
 extern void __init efi_set_executable(efi_memory_desc_t *md, bool executable);
 extern int __init efi_memblock_x86_reserve_range(void);
<span class="p_del">-extern pgd_t * __init efi_call_phys_prolog(void);</span>
<span class="p_del">-extern void __init efi_call_phys_epilog(pgd_t *save_pgd);</span>
<span class="p_add">+extern union efi_saved_pgd __init efi_call_phys_prolog(void);</span>
<span class="p_add">+extern void __init efi_call_phys_epilog(union efi_saved_pgd saved_pgd);</span>
 extern void __init efi_print_memmap(void);
 extern void __init efi_memory_uc(u64 addr, unsigned long size);
 extern void __init efi_map_region(efi_memory_desc_t *md);
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index 565dff3c9a12..217dc166c649 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -81,9 +81,9 @@</span> <span class="p_context"> static efi_status_t __init phys_efi_set_virtual_address_map(</span>
 {
 	efi_status_t status;
 	unsigned long flags;
<span class="p_del">-	pgd_t *save_pgd;</span>
<span class="p_add">+	union efi_saved_pgd saved_pgd;</span>
 
<span class="p_del">-	save_pgd = efi_call_phys_prolog();</span>
<span class="p_add">+	saved_pgd = efi_call_phys_prolog();</span>
 
 	/* Disable interrupts around EFI calls: */
 	local_irq_save(flags);
<span class="p_chunk">@@ -92,7 +92,7 @@</span> <span class="p_context"> static efi_status_t __init phys_efi_set_virtual_address_map(</span>
 			       descriptor_version, virtual_map);
 	local_irq_restore(flags);
 
<span class="p_del">-	efi_call_phys_epilog(save_pgd);</span>
<span class="p_add">+	efi_call_phys_epilog(saved_pgd);</span>
 
 	return status;
 }
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_32.c b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">index cef39b097649..9b1abcf6e7bb 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_32.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_32.c</span>
<span class="p_chunk">@@ -58,13 +58,13 @@</span> <span class="p_context"> void __init efi_map_region(efi_memory_desc_t *md)</span>
 void __init efi_map_region_fixed(efi_memory_desc_t *md) {}
 void __init parse_efi_setup(u64 phys_addr, u32 data_len) {}
 
<span class="p_del">-pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="p_add">+union efi_saved_pgd __init efi_call_phys_prolog(void)</span>
 {
 	struct desc_ptr gdt_descr;
<span class="p_del">-	pgd_t *save_pgd;</span>
<span class="p_add">+	union efi_saved_pgd saved_pgd;</span>
 
 	/* Current pgd is swapper_pg_dir, we&#39;ll restore it later: */
<span class="p_del">-	save_pgd = swapper_pg_dir;</span>
<span class="p_add">+	saved_pgd.cr3 = __pa(swapper_pg_dir);</span>
 	load_cr3(initial_page_table);
 	__flush_tlb_all();
 
<span class="p_chunk">@@ -72,10 +72,10 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_del">-	return save_pgd;</span>
<span class="p_add">+	return saved_pgd;</span>
 }
 
<span class="p_del">-void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="p_add">+void __init efi_call_phys_epilog(union efi_saved_pgd saved_pgd)</span>
 {
 	struct desc_ptr gdt_descr;
 
<span class="p_chunk">@@ -83,7 +83,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&amp;gdt_descr);
 
<span class="p_del">-	load_cr3(save_pgd);</span>
<span class="p_add">+	write_cr3(saved_pgd.cr3);</span>
 	__flush_tlb_all();
 }
 
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index a4695da42d77..d56dd864fb1c 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -69,16 +69,16 @@</span> <span class="p_context"> static void __init early_code_mapping_set_exec(int executable)</span>
 	}
 }
 
<span class="p_del">-pgd_t * __init efi_call_phys_prolog(void)</span>
<span class="p_add">+union efi_saved_pgd __init efi_call_phys_prolog(void)</span>
 {
 	unsigned long vaddress;
<span class="p_del">-	pgd_t *save_pgd;</span>
<span class="p_add">+	union efi_saved_pgd saved_pgd;</span>
 
 	int pgd;
 	int n_pgds;
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
<span class="p_del">-		save_pgd = (pgd_t *)read_cr3();</span>
<span class="p_add">+		saved_pgd.cr3 = read_cr3();</span>
 		write_cr3((unsigned long)efi_scratch.efi_pgt);
 		goto out;
 	}
<span class="p_chunk">@@ -86,20 +86,21 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	early_code_mapping_set_exec(1);
 
 	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);
<span class="p_del">-	save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);</span>
<span class="p_add">+	saved_pgd.pgd = kmalloc_array(n_pgds, sizeof(*saved_pgd.pgd),</span>
<span class="p_add">+				      GFP_KERNEL);</span>
 
 	for (pgd = 0; pgd &lt; n_pgds; pgd++) {
<span class="p_del">-		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="p_add">+		saved_pgd.pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
 		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);
 		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));
 	}
 out:
 	__flush_tlb_all();
 
<span class="p_del">-	return save_pgd;</span>
<span class="p_add">+	return saved_pgd;</span>
 }
 
<span class="p_del">-void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
<span class="p_add">+void __init efi_call_phys_epilog(union efi_saved_pgd saved_pgd)</span>
 {
 	/*
 	 * After the lock is released, the original page table is restored.
<span class="p_chunk">@@ -108,7 +109,7 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	int nr_pgds;
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
<span class="p_del">-		write_cr3((unsigned long)save_pgd);</span>
<span class="p_add">+		write_cr3(saved_pgd.cr3);</span>
 		__flush_tlb_all();
 		return;
 	}
<span class="p_chunk">@@ -116,9 +117,10 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);
 
 	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)
<span class="p_del">-		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);</span>
<span class="p_add">+		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE),</span>
<span class="p_add">+			saved_pgd.pgd[pgd_idx]);</span>
 
<span class="p_del">-	kfree(save_pgd);</span>
<span class="p_add">+	kfree(saved_pgd.pgd);</span>
 
 	__flush_tlb_all();
 	early_code_mapping_set_exec(0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



