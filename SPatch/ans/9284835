
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PACTH,v4,1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PACTH,v4,1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 16, 2016, 10:33 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1471386804-7236-2-git-send-email-robert.foss@collabora.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9284835/mbox/"
   >mbox</a>
|
   <a href="/patch/9284835/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9284835/">/patch/9284835/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	033F0608A1 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 22:33:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E569728786
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 22:33:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D9E9A28793; Tue, 16 Aug 2016 22:33:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 243BE2879E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Aug 2016 22:33:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753763AbcHPWdn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 16 Aug 2016 18:33:43 -0400
Received: from bhuna.collabora.co.uk ([46.235.227.227]:53338 &quot;EHLO
	bhuna.collabora.co.uk&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753651AbcHPWdl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 16 Aug 2016 18:33:41 -0400
Received: from [127.0.0.1] (localhost [127.0.0.1])
	(Authenticated sender: robertfoss) with ESMTPSA id 64D5F266821
From: robert.foss@collabora.com
To: corbet@lwn.net, akpm@linux-foundation.org, vbabka@suse.cz,
	mhocko@suse.com, koct9i@gmail.com, hughd@google.com,
	robert.foss@collabora.com, n-horiguchi@ah.jp.nec.com,
	minchan@kernel.org, john.stultz@linaro.org,
	ross.zwisler@linux.intel.com, jmarchan@redhat.com,
	hannes@cmpxchg.org, mingo@kernel.org, keescook@chromium.org,
	viro@zeniv.linux.org.uk, gorcunov@openvz.org, mnfhuang@gmail.com,
	adobriyan@gmail.com, calvinowens@fb.com, jdanis@google.com,
	jann@thejh.net, sonnyrao@chromium.org,
	kirill.shutemov@linux.intel.com, ldufour@linux.vnet.ibm.com,
	linux-doc@vger.kernel.org, linux-kernel@vger.kernel.org,
	Ben Zhang &lt;benzh@chromium.org&gt;, Bryan Freed &lt;bfreed@chromium.org&gt;,
	Filipe Brandenburger &lt;filbranden@chromium.org&gt;,
	Mateusz Guzik &lt;mguzik@redhat.com&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, linux-api@vger.kernel.org
Subject: [PACTH v4 1/3] mm, proc: Implement /proc/&lt;pid&gt;/totmaps
Date: Tue, 16 Aug 2016 18:33:22 -0400
Message-Id: &lt;1471386804-7236-2-git-send-email-robert.foss@collabora.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1471386804-7236-1-git-send-email-robert.foss@collabora.com&gt;
References: &lt;1471386804-7236-1-git-send-email-robert.foss@collabora.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a> - Aug. 16, 2016, 10:33 p.m.</div>
<pre class="content">
<span class="from">From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>

This is based on earlier work by Thiago Goncales. It implements a new
per process proc file which summarizes the contents of the smaps file
but doesn&#39;t display any addresses.  It gives more detailed information
than statm like the PSS (proprotional set size).  It differs from the
original implementation in that it doesn&#39;t use the full blown set of
seq operations, uses a different termination condition, and doesn&#39;t
displayed &quot;Locked&quot; as that was broken on the original implemenation.

This new proc file provides information faster than parsing the potentially
huge smaps file.
<span class="tested-by">
Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="signed-off-by">
Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
---
 fs/proc/base.c     |   1 +
 fs/proc/internal.h |   2 +
 fs/proc/task_mmu.c | 141 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 144 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=73411">Jacek Anaszewski</a> - Aug. 31, 2016, 9:45 a.m.</div>
<pre class="content">
Hi Robert,

On 08/17/2016 12:33 AM, robert.foss@collabora.com wrote:
<span class="quote">&gt; From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This is based on earlier work by Thiago Goncales. It implements a new</span>
<span class="quote">&gt; per process proc file which summarizes the contents of the smaps file</span>
<span class="quote">&gt; but doesn&#39;t display any addresses.  It gives more detailed information</span>
<span class="quote">&gt; than statm like the PSS (proprotional set size).  It differs from the</span>
<span class="quote">&gt; original implementation in that it doesn&#39;t use the full blown set of</span>
<span class="quote">&gt; seq operations, uses a different termination condition, and doesn&#39;t</span>
<span class="quote">&gt; displayed &quot;Locked&quot; as that was broken on the original implemenation.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This new proc file provides information faster than parsing the potentially</span>
<span class="quote">&gt; huge smaps file.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/proc/base.c     |   1 +</span>
<span class="quote">&gt;  fs/proc/internal.h |   2 +</span>
<span class="quote">&gt;  fs/proc/task_mmu.c | 141 +++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  3 files changed, 144 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="quote">&gt; index a11eb71..de3acdf 100644</span>
<span class="quote">&gt; --- a/fs/proc/base.c</span>
<span class="quote">&gt; +++ b/fs/proc/base.c</span>
<span class="quote">&gt; @@ -2855,6 +2855,7 @@ static const struct pid_entry tgid_base_stuff[] = {</span>
<span class="quote">&gt;  	REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),</span>
<span class="quote">&gt;  	REG(&quot;smaps&quot;,      S_IRUGO, proc_pid_smaps_operations),</span>
<span class="quote">&gt;  	REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),</span>
<span class="quote">&gt; +	REG(&quot;totmaps&quot;,    S_IRUGO, proc_totmaps_operations),</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  #ifdef CONFIG_SECURITY</span>
<span class="quote">&gt;  	DIR(&quot;attr&quot;,       S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),</span>
<span class="quote">&gt; diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="quote">&gt; index aa27810..99f97d7 100644</span>
<span class="quote">&gt; --- a/fs/proc/internal.h</span>
<span class="quote">&gt; +++ b/fs/proc/internal.h</span>
<span class="quote">&gt; @@ -297,6 +297,8 @@ extern const struct file_operations proc_pid_smaps_operations;</span>
<span class="quote">&gt;  extern const struct file_operations proc_tid_smaps_operations;</span>
<span class="quote">&gt;  extern const struct file_operations proc_clear_refs_operations;</span>
<span class="quote">&gt;  extern const struct file_operations proc_pagemap_operations;</span>
<span class="quote">&gt; +extern const struct file_operations proc_totmaps_operations;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  extern unsigned long task_vsize(struct mm_struct *);</span>
<span class="quote">&gt;  extern unsigned long task_statm(struct mm_struct *,</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 4648c7f..fd8fd7f 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -802,6 +802,75 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static void add_smaps_sum(struct mem_size_stats *mss,</span>
<span class="quote">&gt; +		struct mem_size_stats *mss_sum)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	mss_sum-&gt;resident += mss-&gt;resident;</span>
<span class="quote">&gt; +	mss_sum-&gt;pss += mss-&gt;pss;</span>
<span class="quote">&gt; +	mss_sum-&gt;shared_clean += mss-&gt;shared_clean;</span>
<span class="quote">&gt; +	mss_sum-&gt;shared_dirty += mss-&gt;shared_dirty;</span>
<span class="quote">&gt; +	mss_sum-&gt;private_clean += mss-&gt;private_clean;</span>
<span class="quote">&gt; +	mss_sum-&gt;private_dirty += mss-&gt;private_dirty;</span>
<span class="quote">&gt; +	mss_sum-&gt;referenced += mss-&gt;referenced;</span>
<span class="quote">&gt; +	mss_sum-&gt;anonymous += mss-&gt;anonymous;</span>
<span class="quote">&gt; +	mss_sum-&gt;anonymous_thp += mss-&gt;anonymous_thp;</span>
<span class="quote">&gt; +	mss_sum-&gt;swap += mss-&gt;swap;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int totmaps_proc_show(struct seq_file *m, void *data)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt; +	struct mm_struct *mm = priv-&gt;mm;</span>
<span class="quote">&gt; +	struct vm_area_struct *vma;</span>
<span class="quote">&gt; +	struct mem_size_stats mss_sum;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	memset(&amp;mss_sum, 0, sizeof(mss_sum));</span>
<span class="quote">&gt; +	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; +	hold_task_mempolicy(priv);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (vma = mm-&gt;mmap; vma != priv-&gt;tail_vma; vma = vma-&gt;vm_next) {</span>
<span class="quote">&gt; +		struct mem_size_stats mss;</span>
<span class="quote">&gt; +		struct mm_walk smaps_walk = {</span>
<span class="quote">&gt; +			.pmd_entry = smaps_pte_range,</span>
<span class="quote">&gt; +			.mm = vma-&gt;vm_mm,</span>
<span class="quote">&gt; +			.private = &amp;mss,</span>
<span class="quote">&gt; +		};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (vma-&gt;vm_mm &amp;&amp; !is_vm_hugetlb_page(vma)) {</span>
<span class="quote">&gt; +			memset(&amp;mss, 0, sizeof(mss));</span>
<span class="quote">&gt; +			walk_page_vma(vma, &amp;smaps_walk);</span>
<span class="quote">&gt; +			add_smaps_sum(&amp;mss, &amp;mss_sum);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	release_task_mempolicy(priv);</span>
<span class="quote">&gt; +	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	seq_printf(m,</span>
<span class="quote">&gt; +		   &quot;Rss:            %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Pss:            %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;Swap:           %8lu kB\n&quot;,</span>
<span class="quote">&gt; +		   mss_sum.resident &gt;&gt; 10,</span>
<span class="quote">&gt; +		   (unsigned long)(mss_sum.pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="quote">&gt; +		   mss_sum.shared_clean  &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.shared_dirty  &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.private_clean &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.private_dirty &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.referenced &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.anonymous &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.anonymous_thp &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss_sum.swap &gt;&gt; 10);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int show_pid_smap(struct seq_file *m, void *v)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return show_smap(m, v, 1);</span>
<span class="quote">&gt; @@ -812,6 +881,28 @@ static int show_tid_smap(struct seq_file *m, void *v)</span>
<span class="quote">&gt;  	return show_smap(m, v, 0);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return NULL + (*pos == 0);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	++*pos;</span>
<span class="quote">&gt; +	return NULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void m_totmaps_stop(struct seq_file *p, void *v)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static const struct seq_operations proc_totmaps_op = {</span>
<span class="quote">&gt; +	.start	= m_totmaps_start,</span>
<span class="quote">&gt; +	.next	= m_totmaps_next,</span>
<span class="quote">&gt; +	.stop	= m_totmaps_stop,</span>
<span class="quote">&gt; +	.show	= totmaps_proc_show</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static const struct seq_operations proc_pid_smaps_op = {</span>
<span class="quote">&gt;  	.start	= m_start,</span>
<span class="quote">&gt;  	.next	= m_next,</span>
<span class="quote">&gt; @@ -836,6 +927,49 @@ static int tid_smaps_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt;  	return do_maps_open(inode, file, &amp;proc_tid_smaps_op);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct proc_maps_private *priv = NULL;</span>
<span class="quote">&gt; +	struct seq_file *seq;</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="quote">&gt; +	if (ret)</span>
<span class="quote">&gt; +		goto error;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * We need to grab references to the task_struct</span>
<span class="quote">&gt; +	 * at open time, because there&#39;s a potential information</span>
<span class="quote">&gt; +	 * leak where the totmaps file is opened and held open</span>
<span class="quote">&gt; +	 * while the underlying pid to task mapping changes</span>
<span class="quote">&gt; +	 * underneath it</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	seq = file-&gt;private_data;</span>
<span class="quote">&gt; +	priv = seq-&gt;private;</span>
<span class="quote">&gt; +	priv-&gt;task = get_proc_task(inode);</span>
<span class="quote">&gt; +	if (!priv-&gt;task) {</span>
<span class="quote">&gt; +		ret = -ESRCH;</span>
<span class="quote">&gt; +		goto error_free;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +error_free:</span>
<span class="quote">&gt; +	proc_map_release(inode, file);</span>
<span class="quote">&gt; +error:</span>
<span class="quote">&gt; +	return ret;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int totmaps_release(struct inode *inode, struct file *file)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct seq_file *seq = file-&gt;private_data;</span>
<span class="quote">&gt; +	struct proc_maps_private *priv = seq-&gt;private;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	put_task_struct(priv-&gt;task);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return proc_map_release(inode, file);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  const struct file_operations proc_pid_smaps_operations = {</span>
<span class="quote">&gt;  	.open		= pid_smaps_open,</span>
<span class="quote">&gt;  	.read		= seq_read,</span>
<span class="quote">&gt; @@ -850,6 +984,13 @@ const struct file_operations proc_tid_smaps_operations = {</span>
<span class="quote">&gt;  	.release	= proc_map_release,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +const struct file_operations proc_totmaps_operations = {</span>
<span class="quote">&gt; +	.open		= totmaps_open,</span>
<span class="quote">&gt; +	.read		= seq_read,</span>
<span class="quote">&gt; +	.llseek		= seq_lseek,</span>
<span class="quote">&gt; +	.release	= totmaps_release,</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  enum clear_refs_types {</span>
<span class="quote">&gt;  	CLEAR_REFS_ALL = 1,</span>
<span class="quote">&gt;  	CLEAR_REFS_ANON,</span>
<span class="quote">&gt;</span>

When reading totmaps of kernel processes the following NULL pointer
dereference occurs:

Unable to handle kernel NULL pointer dereference at virtual address 00000044
pgd = ee6e0000
[00000044] *pgd=7b83a831
Internal error: Oops: 17 [#6] PREEMPT SMP ARM
Modules linked in:
CPU: 2 PID: 1495 Comm: cat Tainted: G      D W 
4.8.0-rc2-00010-g22fe2db-dirty #159
Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
task: ee596e00 task.stack: ee470000
PC is at down_read+0xc/0x48
LR is at totmaps_proc_show+0x2c/0x1e8
pc : [&lt;c06c01f4&gt;]    lr : [&lt;c022a154&gt;]    psr: 40000013
sp : ee471db8  ip : 00000000  fp : 00000000
r10: edfe1080  r9 : 00000001  r8 : 00000044
r7 : ee4abd00  r6 : edfe1080  r5 : edde0b80  r4 : 00000044
r3 : 00000000  r2 : 00000000  r1 : ffffffc8  r0 : 00000044
Flags: nZcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
Control: 10c5387d  Table: 6e6e004a  DAC: 00000051
Process cat (pid: 1495, stack limit = 0xee470210)
Stack: (0xee471db8 to 0xee472000)
1da0:                                                       00000000 
c022a154
1dc0: ee596e00 024200ca 00000000 024200ca 00000000 00000081 c0b02594 
024200ca
1de0: 00000055 ee5b7e44 00000800 c019cad0 00000000 c06c1af0 00000001 
c032aa90
1e00: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
00000000
1e20: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
00000000
1e40: 00000000 00000000 c0a69764 c0a69758 0000000b c01afd60 eff4d000 
eff4d000
1e60: edc55f20 00000000 edfe10b0 0001c000 20000013 c06bfc9c 7ab80c7f 
c01bc060
1e80: 00000002 ef001b80 c0a695d0 024000c0 00008000 ee471ec0 00008000 
edfe1080
1ea0: ee4abd00 00000001 00000001 ee471f80 00000000 c01fe564 0001c000 
edfe10b0
1ec0: 00000000 00000000 00024e84 ee5b7e00 ee5b7e44 c0705348 0001c000 
ee4abd00
1ee0: ee471f80 00008000 ee470000 0001c000 00000000 c01dc850 c0b06aac 
ee471fb0
1f00: b6fbf220 b6fbf7c4 000001ff c0101308 386d6a0e 32e4d737 386d6a0e 
32e4d737
1f20: 00002838 00000000 ee4abd00 bec0eba0 00000000 bec0ed84 ee596e00 
00000000
1f40: ee4abd00 00008000 0001c000 00000000 ee471f80 c01ddca0 00000004 
ee478124
1f60: 00000001 00000000 00000000 ee4abd00 ee4abd00 00008000 0001c000 
c01ddd64
1f80: 00000000 00000000 00000000 00008000 0001c000 00000003 00000003 
c0107ac4
1fa0: 00000000 c0107900 00008000 0001c000 00000003 0001c000 00008000 
0001c000
1fc0: 00008000 0001c000 00000003 00000003 00008000 00000000 0000005e 
00000000
1fe0: 00000000 bec0eb0c 0000c694 b6f4248c 60000010 00000003 fdfffffb 
ffffffff
[&lt;c06c01f4&gt;] (down_read) from [&lt;c022a154&gt;] (totmaps_proc_show+0x2c/0x1e8)
[&lt;c022a154&gt;] (totmaps_proc_show) from [&lt;c01fe564&gt;] (seq_read+0x1c8/0x4b8)
[&lt;c01fe564&gt;] (seq_read) from [&lt;c01dc850&gt;] (__vfs_read+0x2c/0x110)
[&lt;c01dc850&gt;] (__vfs_read) from [&lt;c01ddca0&gt;] (vfs_read+0x8c/0x110)
[&lt;c01ddca0&gt;] (vfs_read) from [&lt;c01ddd64&gt;] (SyS_read+0x40/0x8c)
[&lt;c01ddd64&gt;] (SyS_read) from [&lt;c0107900&gt;] (ret_fast_syscall+0x0/0x3c)

It seems that some protection is needed for such processes, so that
totmaps would return empty string then, like in case of smaps.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a> - Aug. 31, 2016, 4:36 p.m.</div>
<pre class="content">
On 2016-08-31 05:45 AM, Jacek Anaszewski wrote:
<span class="quote">&gt; Hi Robert,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 08/17/2016 12:33 AM, robert.foss@collabora.com wrote:</span>
<span class="quote">&gt;&gt; From: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is based on earlier work by Thiago Goncales. It implements a new</span>
<span class="quote">&gt;&gt; per process proc file which summarizes the contents of the smaps file</span>
<span class="quote">&gt;&gt; but doesn&#39;t display any addresses.  It gives more detailed information</span>
<span class="quote">&gt;&gt; than statm like the PSS (proprotional set size).  It differs from the</span>
<span class="quote">&gt;&gt; original implementation in that it doesn&#39;t use the full blown set of</span>
<span class="quote">&gt;&gt; seq operations, uses a different termination condition, and doesn&#39;t</span>
<span class="quote">&gt;&gt; displayed &quot;Locked&quot; as that was broken on the original implemenation.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This new proc file provides information faster than parsing the</span>
<span class="quote">&gt;&gt; potentially</span>
<span class="quote">&gt;&gt; huge smaps file.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Robert Foss &lt;robert.foss@collabora.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Sonny Rao &lt;sonnyrao@chromium.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  fs/proc/base.c     |   1 +</span>
<span class="quote">&gt;&gt;  fs/proc/internal.h |   2 +</span>
<span class="quote">&gt;&gt;  fs/proc/task_mmu.c | 141</span>
<span class="quote">&gt;&gt; +++++++++++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;  3 files changed, 144 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="quote">&gt;&gt; index a11eb71..de3acdf 100644</span>
<span class="quote">&gt;&gt; --- a/fs/proc/base.c</span>
<span class="quote">&gt;&gt; +++ b/fs/proc/base.c</span>
<span class="quote">&gt;&gt; @@ -2855,6 +2855,7 @@ static const struct pid_entry tgid_base_stuff[] = {</span>
<span class="quote">&gt;&gt;      REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),</span>
<span class="quote">&gt;&gt;      REG(&quot;smaps&quot;,      S_IRUGO, proc_pid_smaps_operations),</span>
<span class="quote">&gt;&gt;      REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),</span>
<span class="quote">&gt;&gt; +    REG(&quot;totmaps&quot;,    S_IRUGO, proc_totmaps_operations),</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_SECURITY</span>
<span class="quote">&gt;&gt;      DIR(&quot;attr&quot;,       S_IRUGO|S_IXUGO,</span>
<span class="quote">&gt;&gt; proc_attr_dir_inode_operations, proc_attr_dir_operations),</span>
<span class="quote">&gt;&gt; diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="quote">&gt;&gt; index aa27810..99f97d7 100644</span>
<span class="quote">&gt;&gt; --- a/fs/proc/internal.h</span>
<span class="quote">&gt;&gt; +++ b/fs/proc/internal.h</span>
<span class="quote">&gt;&gt; @@ -297,6 +297,8 @@ extern const struct file_operations</span>
<span class="quote">&gt;&gt; proc_pid_smaps_operations;</span>
<span class="quote">&gt;&gt;  extern const struct file_operations proc_tid_smaps_operations;</span>
<span class="quote">&gt;&gt;  extern const struct file_operations proc_clear_refs_operations;</span>
<span class="quote">&gt;&gt;  extern const struct file_operations proc_pagemap_operations;</span>
<span class="quote">&gt;&gt; +extern const struct file_operations proc_totmaps_operations;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  extern unsigned long task_vsize(struct mm_struct *);</span>
<span class="quote">&gt;&gt;  extern unsigned long task_statm(struct mm_struct *,</span>
<span class="quote">&gt;&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; index 4648c7f..fd8fd7f 100644</span>
<span class="quote">&gt;&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; @@ -802,6 +802,75 @@ static int show_smap(struct seq_file *m, void *v,</span>
<span class="quote">&gt;&gt; int is_pid)</span>
<span class="quote">&gt;&gt;      return 0;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static void add_smaps_sum(struct mem_size_stats *mss,</span>
<span class="quote">&gt;&gt; +        struct mem_size_stats *mss_sum)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;resident += mss-&gt;resident;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;pss += mss-&gt;pss;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;shared_clean += mss-&gt;shared_clean;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;shared_dirty += mss-&gt;shared_dirty;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;private_clean += mss-&gt;private_clean;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;private_dirty += mss-&gt;private_dirty;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;referenced += mss-&gt;referenced;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;anonymous += mss-&gt;anonymous;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;anonymous_thp += mss-&gt;anonymous_thp;</span>
<span class="quote">&gt;&gt; +    mss_sum-&gt;swap += mss-&gt;swap;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static int totmaps_proc_show(struct seq_file *m, void *data)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt;&gt; +    struct mm_struct *mm = priv-&gt;mm;</span>
<span class="quote">&gt;&gt; +    struct vm_area_struct *vma;</span>
<span class="quote">&gt;&gt; +    struct mem_size_stats mss_sum;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    memset(&amp;mss_sum, 0, sizeof(mss_sum));</span>
<span class="quote">&gt;&gt; +    down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;&gt; +    hold_task_mempolicy(priv);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    for (vma = mm-&gt;mmap; vma != priv-&gt;tail_vma; vma = vma-&gt;vm_next) {</span>
<span class="quote">&gt;&gt; +        struct mem_size_stats mss;</span>
<span class="quote">&gt;&gt; +        struct mm_walk smaps_walk = {</span>
<span class="quote">&gt;&gt; +            .pmd_entry = smaps_pte_range,</span>
<span class="quote">&gt;&gt; +            .mm = vma-&gt;vm_mm,</span>
<span class="quote">&gt;&gt; +            .private = &amp;mss,</span>
<span class="quote">&gt;&gt; +        };</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +        if (vma-&gt;vm_mm &amp;&amp; !is_vm_hugetlb_page(vma)) {</span>
<span class="quote">&gt;&gt; +            memset(&amp;mss, 0, sizeof(mss));</span>
<span class="quote">&gt;&gt; +            walk_page_vma(vma, &amp;smaps_walk);</span>
<span class="quote">&gt;&gt; +            add_smaps_sum(&amp;mss, &amp;mss_sum);</span>
<span class="quote">&gt;&gt; +        }</span>
<span class="quote">&gt;&gt; +    }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    release_task_mempolicy(priv);</span>
<span class="quote">&gt;&gt; +    up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    seq_printf(m,</span>
<span class="quote">&gt;&gt; +           &quot;Rss:            %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Pss:            %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="quote">&gt;&gt; +           &quot;Swap:           %8lu kB\n&quot;,</span>
<span class="quote">&gt;&gt; +           mss_sum.resident &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           (unsigned long)(mss_sum.pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="quote">&gt;&gt; +           mss_sum.shared_clean  &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.shared_dirty  &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.private_clean &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.private_dirty &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.referenced &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.anonymous &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.anonymous_thp &gt;&gt; 10,</span>
<span class="quote">&gt;&gt; +           mss_sum.swap &gt;&gt; 10);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  static int show_pid_smap(struct seq_file *m, void *v)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;      return show_smap(m, v, 1);</span>
<span class="quote">&gt;&gt; @@ -812,6 +881,28 @@ static int show_tid_smap(struct seq_file *m, void</span>
<span class="quote">&gt;&gt; *v)</span>
<span class="quote">&gt;&gt;      return show_smap(m, v, 0);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    return NULL + (*pos == 0);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    ++*pos;</span>
<span class="quote">&gt;&gt; +    return NULL;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static void m_totmaps_stop(struct seq_file *p, void *v)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static const struct seq_operations proc_totmaps_op = {</span>
<span class="quote">&gt;&gt; +    .start    = m_totmaps_start,</span>
<span class="quote">&gt;&gt; +    .next    = m_totmaps_next,</span>
<span class="quote">&gt;&gt; +    .stop    = m_totmaps_stop,</span>
<span class="quote">&gt;&gt; +    .show    = totmaps_proc_show</span>
<span class="quote">&gt;&gt; +};</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  static const struct seq_operations proc_pid_smaps_op = {</span>
<span class="quote">&gt;&gt;      .start    = m_start,</span>
<span class="quote">&gt;&gt;      .next    = m_next,</span>
<span class="quote">&gt;&gt; @@ -836,6 +927,49 @@ static int tid_smaps_open(struct inode *inode,</span>
<span class="quote">&gt;&gt; struct file *file)</span>
<span class="quote">&gt;&gt;      return do_maps_open(inode, file, &amp;proc_tid_smaps_op);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    struct proc_maps_private *priv = NULL;</span>
<span class="quote">&gt;&gt; +    struct seq_file *seq;</span>
<span class="quote">&gt;&gt; +    int ret;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="quote">&gt;&gt; +    if (ret)</span>
<span class="quote">&gt;&gt; +        goto error;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    /*</span>
<span class="quote">&gt;&gt; +     * We need to grab references to the task_struct</span>
<span class="quote">&gt;&gt; +     * at open time, because there&#39;s a potential information</span>
<span class="quote">&gt;&gt; +     * leak where the totmaps file is opened and held open</span>
<span class="quote">&gt;&gt; +     * while the underlying pid to task mapping changes</span>
<span class="quote">&gt;&gt; +     * underneath it</span>
<span class="quote">&gt;&gt; +     */</span>
<span class="quote">&gt;&gt; +    seq = file-&gt;private_data;</span>
<span class="quote">&gt;&gt; +    priv = seq-&gt;private;</span>
<span class="quote">&gt;&gt; +    priv-&gt;task = get_proc_task(inode);</span>
<span class="quote">&gt;&gt; +    if (!priv-&gt;task) {</span>
<span class="quote">&gt;&gt; +        ret = -ESRCH;</span>
<span class="quote">&gt;&gt; +        goto error_free;</span>
<span class="quote">&gt;&gt; +    }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    return 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +error_free:</span>
<span class="quote">&gt;&gt; +    proc_map_release(inode, file);</span>
<span class="quote">&gt;&gt; +error:</span>
<span class="quote">&gt;&gt; +    return ret;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static int totmaps_release(struct inode *inode, struct file *file)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +    struct seq_file *seq = file-&gt;private_data;</span>
<span class="quote">&gt;&gt; +    struct proc_maps_private *priv = seq-&gt;private;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    put_task_struct(priv-&gt;task);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +    return proc_map_release(inode, file);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  const struct file_operations proc_pid_smaps_operations = {</span>
<span class="quote">&gt;&gt;      .open        = pid_smaps_open,</span>
<span class="quote">&gt;&gt;      .read        = seq_read,</span>
<span class="quote">&gt;&gt; @@ -850,6 +984,13 @@ const struct file_operations</span>
<span class="quote">&gt;&gt; proc_tid_smaps_operations = {</span>
<span class="quote">&gt;&gt;      .release    = proc_map_release,</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +const struct file_operations proc_totmaps_operations = {</span>
<span class="quote">&gt;&gt; +    .open        = totmaps_open,</span>
<span class="quote">&gt;&gt; +    .read        = seq_read,</span>
<span class="quote">&gt;&gt; +    .llseek        = seq_lseek,</span>
<span class="quote">&gt;&gt; +    .release    = totmaps_release,</span>
<span class="quote">&gt;&gt; +};</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  enum clear_refs_types {</span>
<span class="quote">&gt;&gt;      CLEAR_REFS_ALL = 1,</span>
<span class="quote">&gt;&gt;      CLEAR_REFS_ANON,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; When reading totmaps of kernel processes the following NULL pointer</span>
<span class="quote">&gt; dereference occurs:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Unable to handle kernel NULL pointer dereference at virtual address</span>
<span class="quote">&gt; 00000044</span>
<span class="quote">&gt; pgd = ee6e0000</span>
<span class="quote">&gt; [00000044] *pgd=7b83a831</span>
<span class="quote">&gt; Internal error: Oops: 17 [#6] PREEMPT SMP ARM</span>
<span class="quote">&gt; Modules linked in:</span>
<span class="quote">&gt; CPU: 2 PID: 1495 Comm: cat Tainted: G      D W</span>
<span class="quote">&gt; 4.8.0-rc2-00010-g22fe2db-dirty #159</span>
<span class="quote">&gt; Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)</span>
<span class="quote">&gt; task: ee596e00 task.stack: ee470000</span>
<span class="quote">&gt; PC is at down_read+0xc/0x48</span>
<span class="quote">&gt; LR is at totmaps_proc_show+0x2c/0x1e8</span>
<span class="quote">&gt; pc : [&lt;c06c01f4&gt;]    lr : [&lt;c022a154&gt;]    psr: 40000013</span>
<span class="quote">&gt; sp : ee471db8  ip : 00000000  fp : 00000000</span>
<span class="quote">&gt; r10: edfe1080  r9 : 00000001  r8 : 00000044</span>
<span class="quote">&gt; r7 : ee4abd00  r6 : edfe1080  r5 : edde0b80  r4 : 00000044</span>
<span class="quote">&gt; r3 : 00000000  r2 : 00000000  r1 : ffffffc8  r0 : 00000044</span>
<span class="quote">&gt; Flags: nZcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none</span>
<span class="quote">&gt; Control: 10c5387d  Table: 6e6e004a  DAC: 00000051</span>
<span class="quote">&gt; Process cat (pid: 1495, stack limit = 0xee470210)</span>
<span class="quote">&gt; Stack: (0xee471db8 to 0xee472000)</span>
<span class="quote">&gt; 1da0:                                                       00000000</span>
<span class="quote">&gt; c022a154</span>
<span class="quote">&gt; 1dc0: ee596e00 024200ca 00000000 024200ca 00000000 00000081 c0b02594</span>
<span class="quote">&gt; 024200ca</span>
<span class="quote">&gt; 1de0: 00000055 ee5b7e44 00000800 c019cad0 00000000 c06c1af0 00000001</span>
<span class="quote">&gt; c032aa90</span>
<span class="quote">&gt; 1e00: 00000000 00000000 00000000 00000000 00000000 00000000 00000000</span>
<span class="quote">&gt; 00000000</span>
<span class="quote">&gt; 1e20: 00000000 00000000 00000000 00000000 00000000 00000000 00000000</span>
<span class="quote">&gt; 00000000</span>
<span class="quote">&gt; 1e40: 00000000 00000000 c0a69764 c0a69758 0000000b c01afd60 eff4d000</span>
<span class="quote">&gt; eff4d000</span>
<span class="quote">&gt; 1e60: edc55f20 00000000 edfe10b0 0001c000 20000013 c06bfc9c 7ab80c7f</span>
<span class="quote">&gt; c01bc060</span>
<span class="quote">&gt; 1e80: 00000002 ef001b80 c0a695d0 024000c0 00008000 ee471ec0 00008000</span>
<span class="quote">&gt; edfe1080</span>
<span class="quote">&gt; 1ea0: ee4abd00 00000001 00000001 ee471f80 00000000 c01fe564 0001c000</span>
<span class="quote">&gt; edfe10b0</span>
<span class="quote">&gt; 1ec0: 00000000 00000000 00024e84 ee5b7e00 ee5b7e44 c0705348 0001c000</span>
<span class="quote">&gt; ee4abd00</span>
<span class="quote">&gt; 1ee0: ee471f80 00008000 ee470000 0001c000 00000000 c01dc850 c0b06aac</span>
<span class="quote">&gt; ee471fb0</span>
<span class="quote">&gt; 1f00: b6fbf220 b6fbf7c4 000001ff c0101308 386d6a0e 32e4d737 386d6a0e</span>
<span class="quote">&gt; 32e4d737</span>
<span class="quote">&gt; 1f20: 00002838 00000000 ee4abd00 bec0eba0 00000000 bec0ed84 ee596e00</span>
<span class="quote">&gt; 00000000</span>
<span class="quote">&gt; 1f40: ee4abd00 00008000 0001c000 00000000 ee471f80 c01ddca0 00000004</span>
<span class="quote">&gt; ee478124</span>
<span class="quote">&gt; 1f60: 00000001 00000000 00000000 ee4abd00 ee4abd00 00008000 0001c000</span>
<span class="quote">&gt; c01ddd64</span>
<span class="quote">&gt; 1f80: 00000000 00000000 00000000 00008000 0001c000 00000003 00000003</span>
<span class="quote">&gt; c0107ac4</span>
<span class="quote">&gt; 1fa0: 00000000 c0107900 00008000 0001c000 00000003 0001c000 00008000</span>
<span class="quote">&gt; 0001c000</span>
<span class="quote">&gt; 1fc0: 00008000 0001c000 00000003 00000003 00008000 00000000 0000005e</span>
<span class="quote">&gt; 00000000</span>
<span class="quote">&gt; 1fe0: 00000000 bec0eb0c 0000c694 b6f4248c 60000010 00000003 fdfffffb</span>
<span class="quote">&gt; ffffffff</span>
<span class="quote">&gt; [&lt;c06c01f4&gt;] (down_read) from [&lt;c022a154&gt;] (totmaps_proc_show+0x2c/0x1e8)</span>
<span class="quote">&gt; [&lt;c022a154&gt;] (totmaps_proc_show) from [&lt;c01fe564&gt;] (seq_read+0x1c8/0x4b8)</span>
<span class="quote">&gt; [&lt;c01fe564&gt;] (seq_read) from [&lt;c01dc850&gt;] (__vfs_read+0x2c/0x110)</span>
<span class="quote">&gt; [&lt;c01dc850&gt;] (__vfs_read) from [&lt;c01ddca0&gt;] (vfs_read+0x8c/0x110)</span>
<span class="quote">&gt; [&lt;c01ddca0&gt;] (vfs_read) from [&lt;c01ddd64&gt;] (SyS_read+0x40/0x8c)</span>
<span class="quote">&gt; [&lt;c01ddd64&gt;] (SyS_read) from [&lt;c0107900&gt;] (ret_fast_syscall+0x0/0x3c)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It seems that some protection is needed for such processes, so that</span>
<span class="quote">&gt; totmaps would return empty string then, like in case of smaps.</span>
<span class="quote">&gt;</span>

Thanks for the testing Jacek!

I had a look around the corresponding smaps code, but I&#39;m not seeing any 
checks, do you know where that check actually is made?


Rob.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=61421">Mateusz Guzik</a> - Aug. 31, 2016, 5:04 p.m.</div>
<pre class="content">
On Wed, Aug 31, 2016 at 12:36:26PM -0400, Robert Foss wrote:
<span class="quote">&gt; On 2016-08-31 05:45 AM, Jacek Anaszewski wrote:</span>
<span class="quote">&gt; &gt; &gt; +static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +    return NULL + (*pos == 0);</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +    ++*pos;</span>
<span class="quote">&gt; &gt; &gt; +    return NULL;</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; When reading totmaps of kernel processes the following NULL pointer</span>
<span class="quote">&gt; &gt; dereference occurs:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Unable to handle kernel NULL pointer dereference at virtual address</span>
<span class="quote">&gt; &gt; 00000044</span>
<span class="quote">&gt; &gt; [&lt;c06c01f4&gt;] (down_read) from [&lt;c022a154&gt;] (totmaps_proc_show+0x2c/0x1e8)</span>
<span class="quote">&gt; &gt; [&lt;c022a154&gt;] (totmaps_proc_show) from [&lt;c01fe564&gt;] (seq_read+0x1c8/0x4b8)</span>
<span class="quote">&gt; &gt; [&lt;c01fe564&gt;] (seq_read) from [&lt;c01dc850&gt;] (__vfs_read+0x2c/0x110)</span>
<span class="quote">&gt; &gt; [&lt;c01dc850&gt;] (__vfs_read) from [&lt;c01ddca0&gt;] (vfs_read+0x8c/0x110)</span>
<span class="quote">&gt; &gt; [&lt;c01ddca0&gt;] (vfs_read) from [&lt;c01ddd64&gt;] (SyS_read+0x40/0x8c)</span>
<span class="quote">&gt; &gt; [&lt;c01ddd64&gt;] (SyS_read) from [&lt;c0107900&gt;] (ret_fast_syscall+0x0/0x3c)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; It seems that some protection is needed for such processes, so that</span>
<span class="quote">&gt; &gt; totmaps would return empty string then, like in case of smaps.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for the testing Jacek!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I had a look around the corresponding smaps code, but I&#39;m not seeing any</span>
<span class="quote">&gt; checks, do you know where that check actually is made?</span>
<span class="quote">&gt; </span>

See m_start in f/sproc/task_mmu.c. It not only check for non-null mm,
but also tries to bump -&gt;mm_users and only then proceeds to walk the mm.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161351">robert.foss@collabora.com</a> - Sept. 1, 2016, 11:42 p.m.</div>
<pre class="content">
On 2016-08-31 01:04 PM, Mateusz Guzik wrote:
<span class="quote">&gt; On Wed, Aug 31, 2016 at 12:36:26PM -0400, Robert Foss wrote:</span>
<span class="quote">&gt;&gt; On 2016-08-31 05:45 AM, Jacek Anaszewski wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; +static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="quote">&gt;&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt;&gt; +    return NULL + (*pos == 0);</span>
<span class="quote">&gt;&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="quote">&gt;&gt;&gt;&gt; +{</span>
<span class="quote">&gt;&gt;&gt;&gt; +    ++*pos;</span>
<span class="quote">&gt;&gt;&gt;&gt; +    return NULL;</span>
<span class="quote">&gt;&gt;&gt;&gt; +}</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; When reading totmaps of kernel processes the following NULL pointer</span>
<span class="quote">&gt;&gt;&gt; dereference occurs:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Unable to handle kernel NULL pointer dereference at virtual address</span>
<span class="quote">&gt;&gt;&gt; 00000044</span>
<span class="quote">&gt;&gt;&gt; [&lt;c06c01f4&gt;] (down_read) from [&lt;c022a154&gt;] (totmaps_proc_show+0x2c/0x1e8)</span>
<span class="quote">&gt;&gt;&gt; [&lt;c022a154&gt;] (totmaps_proc_show) from [&lt;c01fe564&gt;] (seq_read+0x1c8/0x4b8)</span>
<span class="quote">&gt;&gt;&gt; [&lt;c01fe564&gt;] (seq_read) from [&lt;c01dc850&gt;] (__vfs_read+0x2c/0x110)</span>
<span class="quote">&gt;&gt;&gt; [&lt;c01dc850&gt;] (__vfs_read) from [&lt;c01ddca0&gt;] (vfs_read+0x8c/0x110)</span>
<span class="quote">&gt;&gt;&gt; [&lt;c01ddca0&gt;] (vfs_read) from [&lt;c01ddd64&gt;] (SyS_read+0x40/0x8c)</span>
<span class="quote">&gt;&gt;&gt; [&lt;c01ddd64&gt;] (SyS_read) from [&lt;c0107900&gt;] (ret_fast_syscall+0x0/0x3c)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; It seems that some protection is needed for such processes, so that</span>
<span class="quote">&gt;&gt;&gt; totmaps would return empty string then, like in case of smaps.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks for the testing Jacek!</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I had a look around the corresponding smaps code, but I&#39;m not seeing any</span>
<span class="quote">&gt;&gt; checks, do you know where that check actually is made?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; See m_start in f/sproc/task_mmu.c. It not only check for non-null mm,</span>
<span class="quote">&gt; but also tries to bump -&gt;mm_users and only then proceeds to walk the mm.</span>

So a m_totmaps_start that looks something like the below would be 
enough? And if so, would mm-&gt;mm_users need to be decrement inside of
m_totmaps_start?

static void *m_totmaps_start(struct seq_file *p, loff_t *pos)
{
	struct proc_maps_private *priv = m-&gt;private;
	struct mm_struct *mm;

	mm = priv-&gt;mm;
	if (!mm || !atomic_inc_not_zero(&amp;mm-&gt;mm_users))
		return NULL;

	return NULL + (*pos == 0);
}
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="p_header">index a11eb71..de3acdf 100644</span>
<span class="p_header">--- a/fs/proc/base.c</span>
<span class="p_header">+++ b/fs/proc/base.c</span>
<span class="p_chunk">@@ -2855,6 +2855,7 @@</span> <span class="p_context"> static const struct pid_entry tgid_base_stuff[] = {</span>
 	REG(&quot;clear_refs&quot;, S_IWUSR, proc_clear_refs_operations),
 	REG(&quot;smaps&quot;,      S_IRUGO, proc_pid_smaps_operations),
 	REG(&quot;pagemap&quot;,    S_IRUSR, proc_pagemap_operations),
<span class="p_add">+	REG(&quot;totmaps&quot;,    S_IRUGO, proc_totmaps_operations),</span>
 #endif
 #ifdef CONFIG_SECURITY
 	DIR(&quot;attr&quot;,       S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
<span class="p_header">diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="p_header">index aa27810..99f97d7 100644</span>
<span class="p_header">--- a/fs/proc/internal.h</span>
<span class="p_header">+++ b/fs/proc/internal.h</span>
<span class="p_chunk">@@ -297,6 +297,8 @@</span> <span class="p_context"> extern const struct file_operations proc_pid_smaps_operations;</span>
 extern const struct file_operations proc_tid_smaps_operations;
 extern const struct file_operations proc_clear_refs_operations;
 extern const struct file_operations proc_pagemap_operations;
<span class="p_add">+extern const struct file_operations proc_totmaps_operations;</span>
<span class="p_add">+</span>
 
 extern unsigned long task_vsize(struct mm_struct *);
 extern unsigned long task_statm(struct mm_struct *,
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 4648c7f..fd8fd7f 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -802,6 +802,75 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 	return 0;
 }
 
<span class="p_add">+static void add_smaps_sum(struct mem_size_stats *mss,</span>
<span class="p_add">+		struct mem_size_stats *mss_sum)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mss_sum-&gt;resident += mss-&gt;resident;</span>
<span class="p_add">+	mss_sum-&gt;pss += mss-&gt;pss;</span>
<span class="p_add">+	mss_sum-&gt;shared_clean += mss-&gt;shared_clean;</span>
<span class="p_add">+	mss_sum-&gt;shared_dirty += mss-&gt;shared_dirty;</span>
<span class="p_add">+	mss_sum-&gt;private_clean += mss-&gt;private_clean;</span>
<span class="p_add">+	mss_sum-&gt;private_dirty += mss-&gt;private_dirty;</span>
<span class="p_add">+	mss_sum-&gt;referenced += mss-&gt;referenced;</span>
<span class="p_add">+	mss_sum-&gt;anonymous += mss-&gt;anonymous;</span>
<span class="p_add">+	mss_sum-&gt;anonymous_thp += mss-&gt;anonymous_thp;</span>
<span class="p_add">+	mss_sum-&gt;swap += mss-&gt;swap;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int totmaps_proc_show(struct seq_file *m, void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="p_add">+	struct mm_struct *mm = priv-&gt;mm;</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+	struct mem_size_stats mss_sum;</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(&amp;mss_sum, 0, sizeof(mss_sum));</span>
<span class="p_add">+	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	hold_task_mempolicy(priv);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (vma = mm-&gt;mmap; vma != priv-&gt;tail_vma; vma = vma-&gt;vm_next) {</span>
<span class="p_add">+		struct mem_size_stats mss;</span>
<span class="p_add">+		struct mm_walk smaps_walk = {</span>
<span class="p_add">+			.pmd_entry = smaps_pte_range,</span>
<span class="p_add">+			.mm = vma-&gt;vm_mm,</span>
<span class="p_add">+			.private = &amp;mss,</span>
<span class="p_add">+		};</span>
<span class="p_add">+</span>
<span class="p_add">+		if (vma-&gt;vm_mm &amp;&amp; !is_vm_hugetlb_page(vma)) {</span>
<span class="p_add">+			memset(&amp;mss, 0, sizeof(mss));</span>
<span class="p_add">+			walk_page_vma(vma, &amp;smaps_walk);</span>
<span class="p_add">+			add_smaps_sum(&amp;mss, &amp;mss_sum);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	release_task_mempolicy(priv);</span>
<span class="p_add">+	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m,</span>
<span class="p_add">+		   &quot;Rss:            %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Pss:            %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Shared_Clean:   %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Shared_Dirty:   %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Private_Clean:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Private_Dirty:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="p_add">+		   &quot;Swap:           %8lu kB\n&quot;,</span>
<span class="p_add">+		   mss_sum.resident &gt;&gt; 10,</span>
<span class="p_add">+		   (unsigned long)(mss_sum.pss &gt;&gt; (10 + PSS_SHIFT)),</span>
<span class="p_add">+		   mss_sum.shared_clean  &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.shared_dirty  &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.private_clean &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.private_dirty &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.referenced &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.anonymous &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.anonymous_thp &gt;&gt; 10,</span>
<span class="p_add">+		   mss_sum.swap &gt;&gt; 10);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int show_pid_smap(struct seq_file *m, void *v)
 {
 	return show_smap(m, v, 1);
<span class="p_chunk">@@ -812,6 +881,28 @@</span> <span class="p_context"> static int show_tid_smap(struct seq_file *m, void *v)</span>
 	return show_smap(m, v, 0);
 }
 
<span class="p_add">+static void *m_totmaps_start(struct seq_file *p, loff_t *pos)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return NULL + (*pos == 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void *m_totmaps_next(struct seq_file *p, void *v, loff_t *pos)</span>
<span class="p_add">+{</span>
<span class="p_add">+	++*pos;</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void m_totmaps_stop(struct seq_file *p, void *v)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct seq_operations proc_totmaps_op = {</span>
<span class="p_add">+	.start	= m_totmaps_start,</span>
<span class="p_add">+	.next	= m_totmaps_next,</span>
<span class="p_add">+	.stop	= m_totmaps_stop,</span>
<span class="p_add">+	.show	= totmaps_proc_show</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static const struct seq_operations proc_pid_smaps_op = {
 	.start	= m_start,
 	.next	= m_next,
<span class="p_chunk">@@ -836,6 +927,49 @@</span> <span class="p_context"> static int tid_smaps_open(struct inode *inode, struct file *file)</span>
 	return do_maps_open(inode, file, &amp;proc_tid_smaps_op);
 }
 
<span class="p_add">+static int totmaps_open(struct inode *inode, struct file *file)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct proc_maps_private *priv = NULL;</span>
<span class="p_add">+	struct seq_file *seq;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = do_maps_open(inode, file, &amp;proc_totmaps_op);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		goto error;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We need to grab references to the task_struct</span>
<span class="p_add">+	 * at open time, because there&#39;s a potential information</span>
<span class="p_add">+	 * leak where the totmaps file is opened and held open</span>
<span class="p_add">+	 * while the underlying pid to task mapping changes</span>
<span class="p_add">+	 * underneath it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	seq = file-&gt;private_data;</span>
<span class="p_add">+	priv = seq-&gt;private;</span>
<span class="p_add">+	priv-&gt;task = get_proc_task(inode);</span>
<span class="p_add">+	if (!priv-&gt;task) {</span>
<span class="p_add">+		ret = -ESRCH;</span>
<span class="p_add">+		goto error_free;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+error_free:</span>
<span class="p_add">+	proc_map_release(inode, file);</span>
<span class="p_add">+error:</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int totmaps_release(struct inode *inode, struct file *file)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct seq_file *seq = file-&gt;private_data;</span>
<span class="p_add">+	struct proc_maps_private *priv = seq-&gt;private;</span>
<span class="p_add">+</span>
<span class="p_add">+	put_task_struct(priv-&gt;task);</span>
<span class="p_add">+</span>
<span class="p_add">+	return proc_map_release(inode, file);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 const struct file_operations proc_pid_smaps_operations = {
 	.open		= pid_smaps_open,
 	.read		= seq_read,
<span class="p_chunk">@@ -850,6 +984,13 @@</span> <span class="p_context"> const struct file_operations proc_tid_smaps_operations = {</span>
 	.release	= proc_map_release,
 };
 
<span class="p_add">+const struct file_operations proc_totmaps_operations = {</span>
<span class="p_add">+	.open		= totmaps_open,</span>
<span class="p_add">+	.read		= seq_read,</span>
<span class="p_add">+	.llseek		= seq_lseek,</span>
<span class="p_add">+	.release	= totmaps_release,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 enum clear_refs_types {
 	CLEAR_REFS_ALL = 1,
 	CLEAR_REFS_ANON,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



