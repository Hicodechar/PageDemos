
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.13,19/36] userfaultfd: hugetlbfs: prevent UFFDIO_COPY to fill beyond the end of i_size - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.13,19/36] userfaultfd: hugetlbfs: prevent UFFDIO_COPY to fill beyond the end of i_size</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 6, 2017, 9:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171106085047.888331493@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10042875/mbox/"
   >mbox</a>
|
   <a href="/patch/10042875/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10042875/">/patch/10042875/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3877560247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Nov 2017 09:14:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2B40A29B4A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Nov 2017 09:14:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1D3D029B4C; Mon,  6 Nov 2017 09:14:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6A75B29B49
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Nov 2017 09:14:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752569AbdKFJOU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Nov 2017 04:14:20 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:56334 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752177AbdKFJOM (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Nov 2017 04:14:12 -0500
Received: from localhost (LFbn-1-12253-150.w90-92.abo.wanadoo.fr
	[90.92.67.150])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 9B02FA7F;
	Mon,  6 Nov 2017 09:14:11 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Mike Rapoport &lt;rppt@linux.vnet.ibm.com&gt;,
	&quot;Dr. David Alan Gilbert&quot; &lt;dgilbert@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 4.13 19/36] userfaultfd: hugetlbfs: prevent UFFDIO_COPY to
	fill beyond the end of i_size
Date: Mon,  6 Nov 2017 10:12:32 +0100
Message-Id: &lt;20171106085047.888331493@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.0
In-Reply-To: &lt;20171106085047.005824077@linuxfoundation.org&gt;
References: &lt;20171106085047.005824077@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Nov. 6, 2017, 9:12 a.m.</div>
<pre class="content">
4.13-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>

commit 1e3921471354244f70fe268586ff94a97a6dd4df upstream.

This oops:

  kernel BUG at fs/hugetlbfs/inode.c:484!
  RIP: remove_inode_hugepages+0x3d0/0x410
  Call Trace:
    hugetlbfs_setattr+0xd9/0x130
    notify_change+0x292/0x410
    do_truncate+0x65/0xa0
    do_sys_ftruncate.constprop.3+0x11a/0x180
    SyS_ftruncate+0xe/0x10
    tracesys+0xd9/0xde

was caused by the lack of i_size check in hugetlb_mcopy_atomic_pte.

mmap() can still succeed beyond the end of the i_size after vmtruncate
zapped vmas in those ranges, but the faults must not succeed, and that
includes UFFDIO_COPY.

We could differentiate the retval to userland to represent a SIGBUS like
a page fault would do (vs SIGSEGV), but it doesn&#39;t seem very useful and
we&#39;d need to pick a random retval as there&#39;s no meaningful syscall
retval that would differentiate from SIGSEGV and SIGBUS, there&#39;s just
-EFAULT.

Link: http://lkml.kernel.org/r/20171016223914.2421-2-aarcange@redhat.com
<span class="signed-off-by">Signed-off-by: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
Cc: Mike Rapoport &lt;rppt@linux.vnet.ibm.com&gt;
Cc: &quot;Dr. David Alan Gilbert&quot; &lt;dgilbert@redhat.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 mm/hugetlb.c |   32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3977,6 +3977,9 @@</span> <span class="p_context"> int hugetlb_mcopy_atomic_pte(struct mm_s</span>
 			    unsigned long src_addr,
 			    struct page **pagep)
 {
<span class="p_add">+	struct address_space *mapping;</span>
<span class="p_add">+	pgoff_t idx;</span>
<span class="p_add">+	unsigned long size;</span>
 	int vm_shared = dst_vma-&gt;vm_flags &amp; VM_SHARED;
 	struct hstate *h = hstate_vma(dst_vma);
 	pte_t _dst_pte;
<span class="p_chunk">@@ -4014,13 +4017,24 @@</span> <span class="p_context"> int hugetlb_mcopy_atomic_pte(struct mm_s</span>
 	__SetPageUptodate(page);
 	set_page_huge_active(page);
 
<span class="p_add">+	mapping = dst_vma-&gt;vm_file-&gt;f_mapping;</span>
<span class="p_add">+	idx = vma_hugecache_offset(h, dst_vma, dst_addr);</span>
<span class="p_add">+</span>
 	/*
 	 * If shared, add to page cache
 	 */
 	if (vm_shared) {
<span class="p_del">-		struct address_space *mapping = dst_vma-&gt;vm_file-&gt;f_mapping;</span>
<span class="p_del">-		pgoff_t idx = vma_hugecache_offset(h, dst_vma, dst_addr);</span>
<span class="p_add">+		size = i_size_read(mapping-&gt;host) &gt;&gt; huge_page_shift(h);</span>
<span class="p_add">+		ret = -EFAULT;</span>
<span class="p_add">+		if (idx &gt;= size)</span>
<span class="p_add">+			goto out_release_nounlock;</span>
 
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Serialization between remove_inode_hugepages() and</span>
<span class="p_add">+		 * huge_add_to_page_cache() below happens through the</span>
<span class="p_add">+		 * hugetlb_fault_mutex_table that here must be hold by</span>
<span class="p_add">+		 * the caller.</span>
<span class="p_add">+		 */</span>
 		ret = huge_add_to_page_cache(page, mapping, idx);
 		if (ret)
 			goto out_release_nounlock;
<span class="p_chunk">@@ -4029,6 +4043,20 @@</span> <span class="p_context"> int hugetlb_mcopy_atomic_pte(struct mm_s</span>
 	ptl = huge_pte_lockptr(h, dst_mm, dst_pte);
 	spin_lock(ptl);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Recheck the i_size after holding PT lock to make sure not</span>
<span class="p_add">+	 * to leave any page mapped (as page_mapped()) beyond the end</span>
<span class="p_add">+	 * of the i_size (remove_inode_hugepages() is strict about</span>
<span class="p_add">+	 * enforcing that). If we bail out here, we&#39;ll also leave a</span>
<span class="p_add">+	 * page in the radix tree in the vm_shared case beyond the end</span>
<span class="p_add">+	 * of the i_size, but remove_inode_hugepages() will take care</span>
<span class="p_add">+	 * of it as soon as we drop the hugetlb_fault_mutex_table.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	size = i_size_read(mapping-&gt;host) &gt;&gt; huge_page_shift(h);</span>
<span class="p_add">+	ret = -EFAULT;</span>
<span class="p_add">+	if (idx &gt;= size)</span>
<span class="p_add">+		goto out_release_unlock;</span>
<span class="p_add">+</span>
 	ret = -EEXIST;
 	if (!huge_pte_none(huge_ptep_get(dst_pte)))
 		goto out_release_unlock;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



