
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[28/64] arch/x86: use mm locking wrappers - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [28/64] arch/x86: use mm locking wrappers</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2018, 1:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180205012754.23615-29-dbueso@wotan.suse.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10199755/mbox/"
   >mbox</a>
|
   <a href="/patch/10199755/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10199755/">/patch/10199755/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EBD4560247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:38:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DBD8B283ED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:38:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D0A10285C4; Mon,  5 Feb 2018 01:38:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 453A5283ED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:38:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753003AbeBEBiV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Feb 2018 20:38:21 -0500
Received: from mx2.suse.de ([195.135.220.15]:44145 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752640AbeBEB2c (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Feb 2018 20:28:32 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id B1D85ADFE;
	Mon,  5 Feb 2018 01:28:00 +0000 (UTC)
From: Davidlohr Bueso &lt;dbueso@suse.de&gt;
To: akpm@linux-foundation.org, mingo@kernel.org
Cc: peterz@infradead.org, ldufour@linux.vnet.ibm.com, jack@suse.cz,
	mhocko@kernel.org, kirill.shutemov@linux.intel.com,
	mawilcox@microsoft.com, mgorman@techsingularity.net,
	dave@stgolabs.net, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Davidlohr Bueso &lt;dbueso@suse.de&gt;
Subject: [PATCH 28/64] arch/x86: use mm locking wrappers
Date: Mon,  5 Feb 2018 02:27:18 +0100
Message-Id: &lt;20180205012754.23615-29-dbueso@wotan.suse.de&gt;
X-Mailer: git-send-email 2.12.3
In-Reply-To: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
References: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a> - Feb. 5, 2018, 1:27 a.m.</div>
<pre class="content">
<span class="from">From: Davidlohr Bueso &lt;dave@stgolabs.net&gt;</span>

This becomes quite straightforward with the mmrange in place.
<span class="signed-off-by">
Signed-off-by: Davidlohr Bueso &lt;dbueso@suse.de&gt;</span>
---
 arch/x86/entry/vdso/vma.c      | 11 ++++++-----
 arch/x86/kernel/vm86_32.c      |  5 +++--
 arch/x86/mm/debug_pagetables.c | 13 +++++++++----
 arch/x86/mm/mpx.c              | 14 ++++++++------
 arch/x86/um/vdso/vma.c         |  5 +++--
 5 files changed, 29 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 2e0bdf6a3aaf..5993caa12cc3 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -157,7 +157,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, unsigned long addr)</span>
 	int ret = 0;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	if (down_write_killable(&amp;mm-&gt;mmap_sem))</span>
<span class="p_add">+	if (mm_write_lock_killable(mm, &amp;mmrange))</span>
 		return -EINTR;
 
 	addr = get_unmapped_area(NULL, addr,
<span class="p_chunk">@@ -200,7 +200,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, unsigned long addr)</span>
 	}
 
 up_fail:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	return ret;
 }
 
<span class="p_chunk">@@ -261,8 +261,9 @@</span> <span class="p_context"> int map_vdso_once(const struct vdso_image *image, unsigned long addr)</span>
 {
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *vma;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	/*
 	 * Check if we have already mapped vdso blob - fail to prevent
 	 * abusing from userspace install_speciall_mapping, which may
<span class="p_chunk">@@ -273,11 +274,11 @@</span> <span class="p_context"> int map_vdso_once(const struct vdso_image *image, unsigned long addr)</span>
 	for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
 		if (vma_is_special_mapping(vma, &amp;vdso_mapping) ||
 				vma_is_special_mapping(vma, &amp;vvar_mapping)) {
<span class="p_del">-			up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+			mm_write_unlock(mm, &amp;mmrange);</span>
 			return -EEXIST;
 		}
 	}
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 
 	return map_vdso(image, addr);
 }
<span class="p_header">diff --git a/arch/x86/kernel/vm86_32.c b/arch/x86/kernel/vm86_32.c</span>
<span class="p_header">index 5edb27f1a2c4..524817b365f6 100644</span>
<span class="p_header">--- a/arch/x86/kernel/vm86_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/vm86_32.c</span>
<span class="p_chunk">@@ -171,8 +171,9 @@</span> <span class="p_context"> static void mark_screen_rdonly(struct mm_struct *mm)</span>
 	pmd_t *pmd;
 	pte_t *pte;
 	int i;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	pgd = pgd_offset(mm, 0xA0000);
 	if (pgd_none_or_clear_bad(pgd))
 		goto out;
<span class="p_chunk">@@ -198,7 +199,7 @@</span> <span class="p_context"> static void mark_screen_rdonly(struct mm_struct *mm)</span>
 	}
 	pte_unmap_unlock(pte, ptl);
 out:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	flush_tlb_mm_range(mm, 0xA0000, 0xA0000 + 32*PAGE_SIZE, 0UL);
 }
 
<span class="p_header">diff --git a/arch/x86/mm/debug_pagetables.c b/arch/x86/mm/debug_pagetables.c</span>
<span class="p_header">index 421f2664ffa0..b044a0680923 100644</span>
<span class="p_header">--- a/arch/x86/mm/debug_pagetables.c</span>
<span class="p_header">+++ b/arch/x86/mm/debug_pagetables.c</span>
<span class="p_chunk">@@ -1,6 +1,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/debugfs.h&gt;
 #include &lt;linux/module.h&gt;
 #include &lt;linux/seq_file.h&gt;
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 
 static int ptdump_show(struct seq_file *m, void *v)
<span class="p_chunk">@@ -25,9 +26,11 @@</span> <span class="p_context"> static const struct file_operations ptdump_fops = {</span>
 static int ptdump_show_curknl(struct seq_file *m, void *v)
 {
 	if (current-&gt;mm-&gt;pgd) {
<span class="p_del">-		down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
<span class="p_add">+		mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 		ptdump_walk_pgd_level_debugfs(m, current-&gt;mm-&gt;pgd, false);
<span class="p_del">-		up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 	}
 	return 0;
 }
<span class="p_chunk">@@ -51,9 +54,11 @@</span> <span class="p_context"> static struct dentry *pe_curusr;</span>
 static int ptdump_show_curusr(struct seq_file *m, void *v)
 {
 	if (current-&gt;mm-&gt;pgd) {
<span class="p_del">-		down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
<span class="p_add">+		mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 		ptdump_walk_pgd_level_debugfs(m, current-&gt;mm-&gt;pgd, true);
<span class="p_del">-		up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 	}
 	return 0;
 }
<span class="p_header">diff --git a/arch/x86/mm/mpx.c b/arch/x86/mm/mpx.c</span>
<span class="p_header">index 51c3e1f7e6be..e9c8d75e1d68 100644</span>
<span class="p_header">--- a/arch/x86/mm/mpx.c</span>
<span class="p_header">+++ b/arch/x86/mm/mpx.c</span>
<span class="p_chunk">@@ -53,11 +53,11 @@</span> <span class="p_context"> static unsigned long mpx_mmap(unsigned long len)</span>
 	if (len != mpx_bt_size_bytes(mm))
 		return -EINVAL;
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	addr = do_mmap(NULL, 0, len, PROT_READ | PROT_WRITE,
 		       MAP_ANONYMOUS | MAP_PRIVATE, VM_MPX, 0, &amp;populate, NULL,
 		       &amp;mmrange);
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	if (populate)
 		mm_populate(addr, populate);
 
<span class="p_chunk">@@ -228,6 +228,7 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	void __user *bd_base = MPX_INVALID_BOUNDS_DIR;
 	struct mm_struct *mm = current-&gt;mm;
 	int ret = 0;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	/*
 	 * runtime in the userspace will be responsible for allocation of
<span class="p_chunk">@@ -241,7 +242,7 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	 * unmap path; we can just use mm-&gt;context.bd_addr instead.
 	 */
 	bd_base = mpx_get_bounds_dir();
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 
 	/* MPX doesn&#39;t support addresses above 47 bits yet. */
 	if (find_vma(mm, DEFAULT_MAP_WINDOW)) {
<span class="p_chunk">@@ -255,20 +256,21 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	if (mm-&gt;context.bd_addr == MPX_INVALID_BOUNDS_DIR)
 		ret = -ENXIO;
 out:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	return ret;
 }
 
 int mpx_disable_management(void)
 {
 	struct mm_struct *mm = current-&gt;mm;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (!cpu_feature_enabled(X86_FEATURE_MPX))
 		return -ENXIO;
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	mm-&gt;context.bd_addr = MPX_INVALID_BOUNDS_DIR;
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	return 0;
 }
 
<span class="p_header">diff --git a/arch/x86/um/vdso/vma.c b/arch/x86/um/vdso/vma.c</span>
<span class="p_header">index 6be22f991b59..f129e97eb307 100644</span>
<span class="p_header">--- a/arch/x86/um/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/um/vdso/vma.c</span>
<span class="p_chunk">@@ -57,11 +57,12 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 {
 	int err;
 	struct mm_struct *mm = current-&gt;mm;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (!vdso_enabled)
 		return 0;
 
<span class="p_del">-	if (down_write_killable(&amp;mm-&gt;mmap_sem))</span>
<span class="p_add">+	if (mm_write_lock_killable(mm, &amp;mmrange))</span>
 		return -EINTR;
 
 	err = install_special_mapping(mm, um_vdso_addr, PAGE_SIZE,
<span class="p_chunk">@@ -69,7 +70,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 		VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
 		vdsop);
 
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 
 	return err;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



