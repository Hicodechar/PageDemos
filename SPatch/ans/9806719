
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[ANNOUNCE] v4.9.33-rt23 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [ANNOUNCE] v4.9.33-rt23</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=481">Sebastian Andrzej Siewior</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 23, 2017, 2:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170623143143.ohtw67i5y5cnp436@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9806719/mbox/"
   >mbox</a>
|
   <a href="/patch/9806719/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9806719/">/patch/9806719/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	03BCA60329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 14:32:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E800A2876F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 14:32:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DC5D72877B; Fri, 23 Jun 2017 14:32:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4D01A2876F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 14:32:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753936AbdFWObr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 23 Jun 2017 10:31:47 -0400
Received: from Galois.linutronix.de ([146.0.238.70]:32838 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751488AbdFWObp (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 23 Jun 2017 10:31:45 -0400
Received: from bigeasy by Galois.linutronix.de with local (Exim 4.80)
	(envelope-from &lt;bigeasy@linutronix.de&gt;)
	id 1dOPbl-0004da-Et; Fri, 23 Jun 2017 16:30:49 +0200
Date: Fri, 23 Jun 2017 16:31:43 +0200
From: Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: LKML &lt;linux-kernel@vger.kernel.org&gt;,
	linux-rt-users &lt;linux-rt-users@vger.kernel.org&gt;,
	Steven Rostedt &lt;rostedt@goodmis.org&gt;
Subject: [ANNOUNCE] v4.9.33-rt23
Message-ID: &lt;20170623143143.ohtw67i5y5cnp436@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
User-Agent: NeoMutt/20170306 (1.8.0)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=481">Sebastian Andrzej Siewior</a> - June 23, 2017, 2:31 p.m.</div>
<pre class="content">
Dear RT folks!

I&#39;m pleased to announce the v4.9.33-rt23 patch set. 

Changes since v4.9.33-rt22:

  - A changed CPU mask while a task was in a migrate_disable() section
    did not run all its scheduler hooks after a migrate_enable(). Also
    it did not immediatelly switch the CPU if its CPU mask was did not
    contain the current CPU mask. Noticed while re-doing the migrate
    disable code for v4.11 and also reported by Daniel Bristot.

  - The removal of TASK_ALL in the last release uncovered a bug where we
    mixed normal wake ups and wake ups made for waiters of sleeping
    spinlock. Reported by Mike Galbraith.

Known issues
	- CPU hotplug got a little better but can deadlock.

The delta patch against v4.9.33-rt22 is appended below and can be found here:
 
     https://cdn.kernel.org/pub/linux/kernel/projects/rt/4.9/incr/patch-4.9.33-rt22-rt23.patch.xz

You can get this release via the git tree at:

    git://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git v4.9.33-rt23

The RT patch against v4.9.33 can be found here:

    https://cdn.kernel.org/pub/linux/kernel/projects/rt/4.9/older/patch-4.9.33-rt23.patch.xz

The split quilt queue is available at:

    https://cdn.kernel.org/pub/linux/kernel/projects/rt/4.9/older/patches-4.9.33-rt23.tar.xz

Sebastian
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -1014,8 +1014,20 @@</span> <span class="p_context"> struct wake_q_head {</span>
 #define WAKE_Q(name)					\
 	struct wake_q_head name = { WAKE_Q_TAIL, &amp;name.first }
 
<span class="p_del">-extern void wake_q_add(struct wake_q_head *head,</span>
<span class="p_del">-			      struct task_struct *task);</span>
<span class="p_add">+extern void __wake_q_add(struct wake_q_head *head,</span>
<span class="p_add">+			 struct task_struct *task, bool sleeper);</span>
<span class="p_add">+static inline void wake_q_add(struct wake_q_head *head,</span>
<span class="p_add">+			      struct task_struct *task)</span>
<span class="p_add">+{</span>
<span class="p_add">+	__wake_q_add(head, task, false);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void wake_q_add_sleeper(struct wake_q_head *head,</span>
<span class="p_add">+				      struct task_struct *task)</span>
<span class="p_add">+{</span>
<span class="p_add">+	__wake_q_add(head, task, true);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 extern void __wake_up_q(struct wake_q_head *head, bool sleeper);
 
 static inline void wake_up_q(struct wake_q_head *head)
<span class="p_chunk">@@ -1535,6 +1547,7 @@</span> <span class="p_context"> struct task_struct {</span>
 	unsigned int policy;
 #ifdef CONFIG_PREEMPT_RT_FULL
 	int migrate_disable;
<span class="p_add">+	int migrate_disable_update;</span>
 # ifdef CONFIG_SCHED_DEBUG
 	int migrate_disable_atomic;
 # endif
<span class="p_chunk">@@ -1745,6 +1758,7 @@</span> <span class="p_context"> struct task_struct {</span>
 	raw_spinlock_t pi_lock;
 
 	struct wake_q_node wake_q;
<span class="p_add">+	struct wake_q_node wake_q_sleeper;</span>
 
 #ifdef CONFIG_RT_MUTEXES
 	/* PI waiters blocked on a rt_mutex held by this task */
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -558,6 +558,7 @@</span> <span class="p_context"> static struct task_struct *dup_task_struct(struct task_struct *orig, int node)</span>
 	tsk-&gt;splice_pipe = NULL;
 	tsk-&gt;task_frag.page = NULL;
 	tsk-&gt;wake_q.next = NULL;
<span class="p_add">+	tsk-&gt;wake_q_sleeper.next = NULL;</span>
 
 	account_kernel_stack(tsk, 1);
 
<span class="p_header">diff --git a/kernel/locking/rtmutex.c b/kernel/locking/rtmutex.c</span>
<span class="p_header">--- a/kernel/locking/rtmutex.c</span>
<span class="p_header">+++ b/kernel/locking/rtmutex.c</span>
<span class="p_chunk">@@ -1506,7 +1506,7 @@</span> <span class="p_context"> static void mark_wakeup_next_waiter(struct wake_q_head *wake_q,</span>
 	 */
 	preempt_disable();
 	if (waiter-&gt;savestate)
<span class="p_del">-		wake_q_add(wake_sleeper_q, waiter-&gt;task);</span>
<span class="p_add">+		wake_q_add_sleeper(wake_sleeper_q, waiter-&gt;task);</span>
 	else
 		wake_q_add(wake_q, waiter-&gt;task);
 	raw_spin_unlock(&amp;current-&gt;pi_lock);
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -430,9 +430,15 @@</span> <span class="p_context"> static bool set_nr_if_polling(struct task_struct *p)</span>
 #endif
 #endif
 
<span class="p_del">-void wake_q_add(struct wake_q_head *head, struct task_struct *task)</span>
<span class="p_add">+void __wake_q_add(struct wake_q_head *head, struct task_struct *task,</span>
<span class="p_add">+		  bool sleeper)</span>
 {
<span class="p_del">-	struct wake_q_node *node = &amp;task-&gt;wake_q;</span>
<span class="p_add">+	struct wake_q_node *node;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sleeper)</span>
<span class="p_add">+		node = &amp;task-&gt;wake_q_sleeper;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		node = &amp;task-&gt;wake_q;</span>
 
 	/*
 	 * Atomically grab the task, if -&gt;wake_q is !nil already it means
<span class="p_chunk">@@ -461,11 +467,17 @@</span> <span class="p_context"> void __wake_up_q(struct wake_q_head *head, bool sleeper)</span>
 	while (node != WAKE_Q_TAIL) {
 		struct task_struct *task;
 
<span class="p_del">-		task = container_of(node, struct task_struct, wake_q);</span>
<span class="p_add">+		if (sleeper)</span>
<span class="p_add">+			task = container_of(node, struct task_struct, wake_q_sleeper);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			task = container_of(node, struct task_struct, wake_q);</span>
 		BUG_ON(!task);
 		/* task can safely be re-inserted now */
 		node = node-&gt;next;
<span class="p_del">-		task-&gt;wake_q.next = NULL;</span>
<span class="p_add">+		if (sleeper)</span>
<span class="p_add">+			task-&gt;wake_q_sleeper.next = NULL;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			task-&gt;wake_q.next = NULL;</span>
 
 		/*
 		 * wake_up_process() implies a wmb() to pair with the queueing
<span class="p_chunk">@@ -1138,18 +1150,14 @@</span> <span class="p_context"> void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_ma</span>
 	p-&gt;nr_cpus_allowed = cpumask_weight(new_mask);
 }
 
<span class="p_del">-void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+static void __do_set_cpus_allowed_tail(struct task_struct *p,</span>
<span class="p_add">+				       const struct cpumask *new_mask)</span>
 {
 	struct rq *rq = task_rq(p);
 	bool queued, running;
 
 	lockdep_assert_held(&amp;p-&gt;pi_lock);
 
<span class="p_del">-	if (__migrate_disabled(p)) {</span>
<span class="p_del">-		cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_del">-		return;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	queued = task_on_rq_queued(p);
 	running = task_current(rq, p);
 
<span class="p_chunk">@@ -1172,6 +1180,20 @@</span> <span class="p_context"> void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
 		set_curr_task(rq, p);
 }
 
<span class="p_add">+void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (__migrate_disabled(p)) {</span>
<span class="p_add">+		lockdep_assert_held(&amp;p-&gt;pi_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+		cpumask_copy(&amp;p-&gt;cpus_allowed, new_mask);</span>
<span class="p_add">+#if defined(CONFIG_PREEMPT_RT_FULL) &amp;&amp; defined(CONFIG_SMP)</span>
<span class="p_add">+		p-&gt;migrate_disable_update = 1;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	__do_set_cpus_allowed_tail(p, new_mask);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static DEFINE_PER_CPU(struct cpumask, sched_cpumasks);
 static DEFINE_MUTEX(sched_down_mutex);
 static cpumask_t sched_down_cpumask;
<span class="p_chunk">@@ -3435,6 +3457,43 @@</span> <span class="p_context"> void migrate_enable(void)</span>
 	 */
 	p-&gt;migrate_disable = 0;
 
<span class="p_add">+	if (p-&gt;migrate_disable_update) {</span>
<span class="p_add">+		struct rq *rq;</span>
<span class="p_add">+		struct rq_flags rf;</span>
<span class="p_add">+</span>
<span class="p_add">+		rq = task_rq_lock(p, &amp;rf);</span>
<span class="p_add">+		update_rq_clock(rq);</span>
<span class="p_add">+</span>
<span class="p_add">+		__do_set_cpus_allowed_tail(p, &amp;p-&gt;cpus_allowed);</span>
<span class="p_add">+		task_rq_unlock(rq, p, &amp;rf);</span>
<span class="p_add">+</span>
<span class="p_add">+		p-&gt;migrate_disable_update = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		WARN_ON(smp_processor_id() != task_cpu(p));</span>
<span class="p_add">+		if (!cpumask_test_cpu(task_cpu(p), &amp;p-&gt;cpus_allowed)) {</span>
<span class="p_add">+			const struct cpumask *cpu_valid_mask = cpu_active_mask;</span>
<span class="p_add">+			struct migration_arg arg;</span>
<span class="p_add">+			unsigned int dest_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (p-&gt;flags &amp; PF_KTHREAD) {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * Kernel threads are allowed on online &amp;&amp; !active CPUs</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				cpu_valid_mask = cpu_online_mask;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			dest_cpu = cpumask_any_and(cpu_valid_mask, &amp;p-&gt;cpus_allowed);</span>
<span class="p_add">+			arg.task = p;</span>
<span class="p_add">+			arg.dest_cpu = dest_cpu;</span>
<span class="p_add">+</span>
<span class="p_add">+			unpin_current_cpu();</span>
<span class="p_add">+			preempt_lazy_enable();</span>
<span class="p_add">+			preempt_enable();</span>
<span class="p_add">+			stop_one_cpu(task_cpu(p), migration_cpu_stop, &amp;arg);</span>
<span class="p_add">+			tlb_migrate_finish(p-&gt;mm);</span>
<span class="p_add">+			return;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	unpin_current_cpu();
 	preempt_enable();
 	preempt_lazy_enable();
<span class="p_header">diff --git a/localversion-rt b/localversion-rt</span>
<span class="p_header">--- a/localversion-rt</span>
<span class="p_header">+++ b/localversion-rt</span>
<span class="p_chunk">@@ -1 +1 @@</span> <span class="p_context"></span>
<span class="p_del">--rt22</span>
<span class="p_add">+-rt23</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



