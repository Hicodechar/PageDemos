
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>thp: fix leak due split_huge_page() vs. exit race - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    thp: fix leak due split_huge_page() vs. exit race</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 11, 2015, 10:09 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1447236567-68751-1-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7594741/mbox/"
   >mbox</a>
|
   <a href="/patch/7594741/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7594741/">/patch/7594741/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 66B339F2F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Nov 2015 10:09:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 870E3206FA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Nov 2015 10:09:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 7EEAB2070D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 11 Nov 2015 10:09:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752251AbbKKKJe (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 11 Nov 2015 05:09:34 -0500
Received: from mga03.intel.com ([134.134.136.65]:52492 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751253AbbKKKJc (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 11 Nov 2015 05:09:32 -0500
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by orsmga103.jf.intel.com with ESMTP; 11 Nov 2015 02:09:33 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,275,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;834053966&quot;
Received: from black.fi.intel.com ([10.237.72.93])
	by fmsmga001.fm.intel.com with ESMTP; 11 Nov 2015 02:09:31 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 2CE7A163; Wed, 11 Nov 2015 12:09:30 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCH] thp: fix leak due split_huge_page() vs. exit race
Date: Wed, 11 Nov 2015 12:09:27 +0200
Message-Id: &lt;1447236567-68751-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.6.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.2 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Nov. 11, 2015, 10:09 a.m.</div>
<pre class="content">
Consider following race:

		CPU0				CPU1
shrink_page_list()
  add_to_swap()
    split_huge_page_to_list()
      __split_huge_pmd_locked()
        pmdp_huge_clear_flush_notify()
	// pmd_none() == true
					exit_mmap()
					  unmap_vmas()
					    zap_pmd_range()
					      // no action on pmd since pmd_none() == true
	pmd_populate()

As result the THP will not be freed. The leak is detected by check_mm():

	BUG: Bad rss-counter state mm:ffff880058d2e580 idx:1 val:512

The patch restore the logic original split_huge_page() had before
refcounting rework: never have intermediate pmd_none() == true.

There are few other places where we do have pmd_none() == true for some
time, but they are safe:

 - __split_huge_zero_page_pmd() is not reachable during exit, since huge
   zero page is not on LRU.

 - do_huge_pmd_wp_page() and do_huge_pmd_wp_page_fallback() are also not
   reachable during exit: exit_mmap() and handling page fault for the mm
   are mutual exclusive.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 mm/huge_memory.c | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 6834b39a7114..91e2f4b7ca39 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -2809,9 +2809,6 @@</span> <span class="p_context"> static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
 	write = pmd_write(*pmd);
 	young = pmd_young(*pmd);
 
<span class="p_del">-	/* leave pmd empty until pte is filled */</span>
<span class="p_del">-	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
<span class="p_del">-</span>
 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
 	pmd_populate(mm, &amp;_pmd, pgtable);
 
<span class="p_chunk">@@ -2861,6 +2858,28 @@</span> <span class="p_context"> static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,</span>
 	}
 
 	smp_wmb(); /* make pte visible before pmd */
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Up to this point the pmd is present and huge and userland has the</span>
<span class="p_add">+	 * whole access to the hugepage during the split (which happens in</span>
<span class="p_add">+	 * place). If we overwrite the pmd with the not-huge version pointing</span>
<span class="p_add">+	 * to the pte here (which of course we could if all CPUs were bug</span>
<span class="p_add">+	 * free), userland could trigger a small page size TLB miss on the</span>
<span class="p_add">+	 * small sized TLB while the hugepage TLB entry is still established in</span>
<span class="p_add">+	 * the huge TLB. Some CPU doesn&#39;t like that.</span>
<span class="p_add">+	 * See http://support.amd.com/us/Processor_TechDocs/41322.pdf, Erratum</span>
<span class="p_add">+	 * 383 on page 93. Intel should be safe but is also warns that it&#39;s</span>
<span class="p_add">+	 * only safe if the permission and cache attributes of the two entries</span>
<span class="p_add">+	 * loaded in the two TLB is identical (which should be the case here).</span>
<span class="p_add">+	 * But it is generally safer to never allow small and huge TLB entries</span>
<span class="p_add">+	 * for the same virtual address to be loaded simultaneously. So instead</span>
<span class="p_add">+	 * of doing &quot;pmd_populate(); flush_pmd_tlb_range();&quot; we first mark the</span>
<span class="p_add">+	 * current pmd notpresent (atomically because here the pmd_trans_huge</span>
<span class="p_add">+	 * and pmd_trans_splitting must remain set at all times on the pmd</span>
<span class="p_add">+	 * until the split is complete for this pmd), then we flush the SMP TLB</span>
<span class="p_add">+	 * and finally we write the non-huge version of the pmd entry with</span>
<span class="p_add">+	 * pmd_populate.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	pmdp_invalidate(vma, haddr, pmd);</span>
 	pmd_populate(mm, pmd, pgtable);
 
 	if (freeze) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



