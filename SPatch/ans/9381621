
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[bug/regression] libhugetlbfs testsuite failures and OOMs eventually kill my system - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [bug/regression] libhugetlbfs testsuite failures and OOMs eventually kill my system</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 18, 2016, 8:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;87funurrb8.fsf@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9381621/mbox/"
   >mbox</a>
|
   <a href="/patch/9381621/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9381621/">/patch/9381621/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	147A260839 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 08:32:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 049232902C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 08:32:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id ECCBA29130; Tue, 18 Oct 2016 08:32:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CF9172902C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 08:32:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758382AbcJRIcg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Oct 2016 04:32:36 -0400
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:57990 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1759272AbcJRIcG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Oct 2016 04:32:06 -0400
Received: from pps.filterd (m0098410.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.17/8.16.0.17) with SMTP id
	u9I8T4Tj005264
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 18 Oct 2016 04:32:05 -0400
Received: from e34.co.us.ibm.com (e34.co.us.ibm.com [32.97.110.152])
	by mx0a-001b2d01.pphosted.com with ESMTP id 265cuv9dga-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 18 Oct 2016 04:32:05 -0400
Received: from localhost
	by e34.co.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from
	&lt;aneesh.kumar@linux.vnet.ibm.com&gt;; Tue, 18 Oct 2016 02:32:04 -0600
Received: from d03dlp01.boulder.ibm.com (9.17.202.177)
	by e34.co.us.ibm.com (192.168.1.134) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Tue, 18 Oct 2016 02:32:01 -0600
Received: from b03cxnp08028.gho.boulder.ibm.com
	(b03cxnp08028.gho.boulder.ibm.com [9.17.130.20])
	by d03dlp01.boulder.ibm.com (Postfix) with ESMTP id CF3AA1FF001F;
	Tue, 18 Oct 2016 02:31:40 -0600 (MDT)
Received: from b03ledav001.gho.boulder.ibm.com
	(b03ledav001.gho.boulder.ibm.com [9.17.130.232])
	by b03cxnp08028.gho.boulder.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id u9I8W0Yo4325738; Tue, 18 Oct 2016 01:32:00 -0700
Received: from b03ledav001.gho.boulder.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 3F9B36E035;
	Tue, 18 Oct 2016 02:32:00 -0600 (MDT)
Received: from skywalker.in.ibm.com (unknown [9.124.35.126])
	by b03ledav001.gho.boulder.ibm.com (Postfix) with SMTP id 673EA6E03A; 
	Tue, 18 Oct 2016 02:31:57 -0600 (MDT)
Received: (nullmailer pid 14474 invoked by uid 1000);
	Tue, 18 Oct 2016 08:31:55 -0000
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
To: Jan Stancek &lt;jstancek@redhat.com&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	hillf zj &lt;hillf.zj@alibaba-inc.com&gt;,
	dave hansen &lt;dave.hansen@linux.intel.com&gt;,
	kirill shutemov &lt;kirill.shutemov@linux.intel.com&gt;,
	mhocko@suse.cz, n-horiguchi@ah.jp.nec.com,
	iamjoonsoo kim &lt;iamjoonsoo.kim@lge.com&gt;
Subject: Re: [bug/regression] libhugetlbfs testsuite failures and OOMs
	eventually kill my system
In-Reply-To: &lt;472921348.43188.1476715444366.JavaMail.zimbra@redhat.com&gt;
References: &lt;57FF7BB4.1070202@redhat.com&gt;
	&lt;277142fc-330d-76c7-1f03-a1c8ac0cf336@oracle.com&gt;
	&lt;efa8b5c9-0138-69f9-0399-5580a086729d@oracle.com&gt;
	&lt;58009BE2.5010805@redhat.com&gt;
	&lt;0c9e132e-694c-17cd-1890-66fcfd2e8a0d@oracle.com&gt;
	&lt;472921348.43188.1476715444366.JavaMail.zimbra@redhat.com&gt;
Date: Tue, 18 Oct 2016 14:01:55 +0530
MIME-Version: 1.0
Content-Type: text/plain
X-TM-AS-GCONF: 00
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 16101808-0016-0000-0000-000004F1AF90
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00005933; HX=3.00000240; KW=3.00000007;
	PH=3.00000004; SC=3.00000187; SDB=6.00769701; UDB=6.00368798;
	IPR=6.00546123; 
	BA=6.00004814; NDR=6.00000001; ZLA=6.00000005; ZF=6.00000009;
	ZB=6.00000000; 
	ZP=6.00000000; ZH=6.00000000; ZU=6.00000002; MB=3.00013028;
	XFM=3.00000011; UTC=2016-10-18 08:32:03
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 16101808-0017-0000-0000-000033E0119A
Message-Id: &lt;87funurrb8.fsf@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2016-10-18_05:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=5
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1609300000
	definitions=main-1610180143
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Oct. 18, 2016, 8:31 a.m.</div>
<pre class="content">
Jan Stancek &lt;jstancek@redhat.com&gt; writes:
<span class="quote">&gt; Hi Mike,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Revert of 67961f9db8c4 helps, I let whole suite run for 100 iterations,</span>
<span class="quote">&gt; there were no issues.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I cut down reproducer and removed last mmap/write/munmap as that is enough</span>
<span class="quote">&gt; to reproduce the problem. Then I started introducing some traces into kernel</span>
<span class="quote">&gt; and noticed that on ppc I get 3 faults, while on x86 I get only 2.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Interesting is the 2nd fault, that is first write after mapping as PRIVATE.</span>
<span class="quote">&gt; Following condition fails on ppc first time:</span>
<span class="quote">&gt;     if (likely(ptep &amp;&amp; pte_same(huge_ptep_get(ptep), pte))) {</span>
<span class="quote">&gt; but it&#39;s immediately followed by fault that looks identical</span>
<span class="quote">&gt; and in that one it evaluates as true.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Same with alloc_huge_page(), on x86_64 it&#39;s called twice, on ppc three times.</span>
<span class="quote">&gt; In 2nd call vma_needs_reservation() returns 0, in 3rd it returns 1.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ---- ppc -&gt; 2nd and 3rd fault ---</span>
<span class="quote">&gt; mmap(MAP_PRIVATE)</span>
<span class="quote">&gt; hugetlb_fault address: 3effff000000, flags: 55</span>
<span class="quote">&gt; hugetlb_cow old_page: f0000000010fc000</span>
<span class="quote">&gt; alloc_huge_page ret: f000000001100000</span>
<span class="quote">&gt; hugetlb_cow ptep: c000000455b27cf8, pte_same: 0</span>
<span class="quote">&gt; free_huge_page page: f000000001100000, restore_reserve: 1</span>
<span class="quote">&gt; hugetlb_fault address: 3effff000000, flags: 55</span>
<span class="quote">&gt; hugetlb_cow old_page: f0000000010fc000</span>
<span class="quote">&gt; alloc_huge_page ret: f000000001100000</span>
<span class="quote">&gt; hugetlb_cow ptep: c000000455b27cf8, pte_same: 1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --- x86_64 -&gt; 2nd fault ---</span>
<span class="quote">&gt; mmap(MAP_PRIVATE)</span>
<span class="quote">&gt; hugetlb_fault address: 7f71a4200000, flags: 55</span>
<span class="quote">&gt; hugetlb_cow address 0x7f71a4200000, old_page: ffffea0008d20000</span>
<span class="quote">&gt; alloc_huge_page ret: ffffea0008d38000</span>
<span class="quote">&gt; hugetlb_cow ptep: ffff8802314c7908, pte_same: 1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Jan</span>
<span class="quote">&gt;</span>

Can you check with the below patch. I ran the corrupt-by-cow-opt test with this patch
and resv count got correctly updated.

commit fb2e0c081d2922c8aaa49bbe166472aac68ef5e1
Author: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Date:   Tue Oct 18 11:23:11 2016 +0530

    mm/hugetlb: Use the right pte val for compare in hugetlb_cow
    
    We cannot use the pte value used in set_pte_at for pte_same comparison,
    because archs like ppc64, filter/add new pte flag in set_pte_at. Instead
    fetch the pte value inside hugetlb_cow. We are comparing pte value to
    make sure the pte didn&#39;t change since we dropped the page table lock.
    hugetlb_cow get called with page table lock held, and we can take a copy
    of the pte value before we drop the page table lock.
<span class="signed-off-by">    
    Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66841">Jan Stancek</a> - Oct. 18, 2016, 11:28 a.m.</div>
<pre class="content">
----- Original Message -----
<span class="quote">&gt; Jan Stancek &lt;jstancek@redhat.com&gt; writes:</span>
<span class="quote">&gt; &gt; Hi Mike,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Revert of 67961f9db8c4 helps, I let whole suite run for 100 iterations,</span>
<span class="quote">&gt; &gt; there were no issues.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I cut down reproducer and removed last mmap/write/munmap as that is enough</span>
<span class="quote">&gt; &gt; to reproduce the problem. Then I started introducing some traces into</span>
<span class="quote">&gt; &gt; kernel</span>
<span class="quote">&gt; &gt; and noticed that on ppc I get 3 faults, while on x86 I get only 2.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Interesting is the 2nd fault, that is first write after mapping as PRIVATE.</span>
<span class="quote">&gt; &gt; Following condition fails on ppc first time:</span>
<span class="quote">&gt; &gt;     if (likely(ptep &amp;&amp; pte_same(huge_ptep_get(ptep), pte))) {</span>
<span class="quote">&gt; &gt; but it&#39;s immediately followed by fault that looks identical</span>
<span class="quote">&gt; &gt; and in that one it evaluates as true.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Same with alloc_huge_page(), on x86_64 it&#39;s called twice, on ppc three</span>
<span class="quote">&gt; &gt; times.</span>
<span class="quote">&gt; &gt; In 2nd call vma_needs_reservation() returns 0, in 3rd it returns 1.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; ---- ppc -&gt; 2nd and 3rd fault ---</span>
<span class="quote">&gt; &gt; mmap(MAP_PRIVATE)</span>
<span class="quote">&gt; &gt; hugetlb_fault address: 3effff000000, flags: 55</span>
<span class="quote">&gt; &gt; hugetlb_cow old_page: f0000000010fc000</span>
<span class="quote">&gt; &gt; alloc_huge_page ret: f000000001100000</span>
<span class="quote">&gt; &gt; hugetlb_cow ptep: c000000455b27cf8, pte_same: 0</span>
<span class="quote">&gt; &gt; free_huge_page page: f000000001100000, restore_reserve: 1</span>
<span class="quote">&gt; &gt; hugetlb_fault address: 3effff000000, flags: 55</span>
<span class="quote">&gt; &gt; hugetlb_cow old_page: f0000000010fc000</span>
<span class="quote">&gt; &gt; alloc_huge_page ret: f000000001100000</span>
<span class="quote">&gt; &gt; hugetlb_cow ptep: c000000455b27cf8, pte_same: 1</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; --- x86_64 -&gt; 2nd fault ---</span>
<span class="quote">&gt; &gt; mmap(MAP_PRIVATE)</span>
<span class="quote">&gt; &gt; hugetlb_fault address: 7f71a4200000, flags: 55</span>
<span class="quote">&gt; &gt; hugetlb_cow address 0x7f71a4200000, old_page: ffffea0008d20000</span>
<span class="quote">&gt; &gt; alloc_huge_page ret: ffffea0008d38000</span>
<span class="quote">&gt; &gt; hugetlb_cow ptep: ffff8802314c7908, pte_same: 1</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Regards,</span>
<span class="quote">&gt; &gt; Jan</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you check with the below patch. I ran the corrupt-by-cow-opt test with</span>
<span class="quote">&gt; this patch</span>
<span class="quote">&gt; and resv count got correctly updated.</span>

I am running libhugetlbfs suite with patch below in loop for
~2 hours now and I don&#39;t see any problems/ENOMEMs/OOMs or
leaked resv pages:

0       hugepages-16384kB/free_hugepages
0       hugepages-16384kB/nr_hugepages
0       hugepages-16384kB/nr_hugepages_mempolicy
0       hugepages-16384kB/nr_overcommit_hugepages
0       hugepages-16384kB/resv_hugepages
0       hugepages-16384kB/surplus_hugepages
0       hugepages-16777216kB/free_hugepages
0       hugepages-16777216kB/nr_hugepages
0       hugepages-16777216kB/nr_hugepages_mempolicy
0       hugepages-16777216kB/nr_overcommit_hugepages
0       hugepages-16777216kB/resv_hugepages
0       hugepages-16777216kB/surplus_hugepages

Regards,
Jan
<span class="quote">
&gt; </span>
<span class="quote">&gt; commit fb2e0c081d2922c8aaa49bbe166472aac68ef5e1</span>
<span class="quote">&gt; Author: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; Date:   Tue Oct 18 11:23:11 2016 +0530</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     mm/hugetlb: Use the right pte val for compare in hugetlb_cow</span>
<span class="quote">&gt;     </span>
<span class="quote">&gt;     We cannot use the pte value used in set_pte_at for pte_same comparison,</span>
<span class="quote">&gt;     because archs like ppc64, filter/add new pte flag in set_pte_at. Instead</span>
<span class="quote">&gt;     fetch the pte value inside hugetlb_cow. We are comparing pte value to</span>
<span class="quote">&gt;     make sure the pte didn&#39;t change since we dropped the page table lock.</span>
<span class="quote">&gt;     hugetlb_cow get called with page table lock held, and we can take a copy</span>
<span class="quote">&gt;     of the pte value before we drop the page table lock.</span>
<span class="quote">&gt;     </span>
<span class="quote">&gt;     Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index ec49d9ef1eef..da8fbd02b92e 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -3386,15 +3386,17 @@ static void unmap_ref_private(struct mm_struct *mm,</span>
<span class="quote">&gt; struct vm_area_struct *vma,</span>
<span class="quote">&gt;   * Keep the pte_same checks anyway to make transition from the mutex easier.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static int hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt; -			unsigned long address, pte_t *ptep, pte_t pte,</span>
<span class="quote">&gt; -			struct page *pagecache_page, spinlock_t *ptl)</span>
<span class="quote">&gt; +		       unsigned long address, pte_t *ptep,</span>
<span class="quote">&gt; +		       struct page *pagecache_page, spinlock_t *ptl)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	pte_t pte;</span>
<span class="quote">&gt;  	struct hstate *h = hstate_vma(vma);</span>
<span class="quote">&gt;  	struct page *old_page, *new_page;</span>
<span class="quote">&gt;  	int ret = 0, outside_reserve = 0;</span>
<span class="quote">&gt;  	unsigned long mmun_start;	/* For mmu_notifiers */</span>
<span class="quote">&gt;  	unsigned long mmun_end;		/* For mmu_notifiers */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	pte = huge_ptep_get(ptep);</span>
<span class="quote">&gt;  	old_page = pte_page(pte);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  retry_avoidcopy:</span>
<span class="quote">&gt; @@ -3668,7 +3670,7 @@ static int hugetlb_no_page(struct mm_struct *mm, struct</span>
<span class="quote">&gt; vm_area_struct *vma,</span>
<span class="quote">&gt;  	hugetlb_count_add(pages_per_huge_page(h), mm);</span>
<span class="quote">&gt;  	if ((flags &amp; FAULT_FLAG_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_SHARED)) {</span>
<span class="quote">&gt;  		/* Optimization, do the COW without a second fault */</span>
<span class="quote">&gt; -		ret = hugetlb_cow(mm, vma, address, ptep, new_pte, page, ptl);</span>
<span class="quote">&gt; +		ret = hugetlb_cow(mm, vma, address, ptep, page, ptl);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_unlock(ptl);</span>
<span class="quote">&gt; @@ -3822,8 +3824,8 @@ int hugetlb_fault(struct mm_struct *mm, struct</span>
<span class="quote">&gt; vm_area_struct *vma,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (flags &amp; FAULT_FLAG_WRITE) {</span>
<span class="quote">&gt;  		if (!huge_pte_write(entry)) {</span>
<span class="quote">&gt; -			ret = hugetlb_cow(mm, vma, address, ptep, entry,</span>
<span class="quote">&gt; -					pagecache_page, ptl);</span>
<span class="quote">&gt; +			ret = hugetlb_cow(mm, vma, address, ptep,</span>
<span class="quote">&gt; +					  pagecache_page, ptl);</span>
<span class="quote">&gt;  			goto out_put_page;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		entry = huge_pte_mkdirty(entry);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index ec49d9ef1eef..da8fbd02b92e 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3386,15 +3386,17 @@</span> <span class="p_context"> static void unmap_ref_private(struct mm_struct *mm, struct vm_area_struct *vma,</span>
  * Keep the pte_same checks anyway to make transition from the mutex easier.
  */
 static int hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma,
<span class="p_del">-			unsigned long address, pte_t *ptep, pte_t pte,</span>
<span class="p_del">-			struct page *pagecache_page, spinlock_t *ptl)</span>
<span class="p_add">+		       unsigned long address, pte_t *ptep,</span>
<span class="p_add">+		       struct page *pagecache_page, spinlock_t *ptl)</span>
 {
<span class="p_add">+	pte_t pte;</span>
 	struct hstate *h = hstate_vma(vma);
 	struct page *old_page, *new_page;
 	int ret = 0, outside_reserve = 0;
 	unsigned long mmun_start;	/* For mmu_notifiers */
 	unsigned long mmun_end;		/* For mmu_notifiers */
 
<span class="p_add">+	pte = huge_ptep_get(ptep);</span>
 	old_page = pte_page(pte);
 
 retry_avoidcopy:
<span class="p_chunk">@@ -3668,7 +3670,7 @@</span> <span class="p_context"> static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	hugetlb_count_add(pages_per_huge_page(h), mm);
 	if ((flags &amp; FAULT_FLAG_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_SHARED)) {
 		/* Optimization, do the COW without a second fault */
<span class="p_del">-		ret = hugetlb_cow(mm, vma, address, ptep, new_pte, page, ptl);</span>
<span class="p_add">+		ret = hugetlb_cow(mm, vma, address, ptep, page, ptl);</span>
 	}
 
 	spin_unlock(ptl);
<span class="p_chunk">@@ -3822,8 +3824,8 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 
 	if (flags &amp; FAULT_FLAG_WRITE) {
 		if (!huge_pte_write(entry)) {
<span class="p_del">-			ret = hugetlb_cow(mm, vma, address, ptep, entry,</span>
<span class="p_del">-					pagecache_page, ptl);</span>
<span class="p_add">+			ret = hugetlb_cow(mm, vma, address, ptep,</span>
<span class="p_add">+					  pagecache_page, ptl);</span>
 			goto out_put_page;
 		}
 		entry = huge_pte_mkdirty(entry);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



