
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,1/7] mm: migrate: prevent racy access to tlb_flush_pending - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,1/7] mm: migrate: prevent racy access to tlb_flush_pending</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 2, 2017, 12:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170802000818.4760-2-namit@vmware.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9876107/mbox/"
   >mbox</a>
|
   <a href="/patch/9876107/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9876107/">/patch/9876107/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3967160390 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2C100286BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 211DE2875B; Wed,  2 Aug 2017 07:34:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.4 required=2.0 tests=BAYES_00, DATE_IN_PAST_06_12,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6C327286BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752099AbdHBHeN (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 2 Aug 2017 03:34:13 -0400
Received: from ex13-edg-ou-002.vmware.com ([208.91.0.190]:32797 &quot;EHLO
	EX13-EDG-OU-002.vmware.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751971AbdHBHdt (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 2 Aug 2017 03:33:49 -0400
Received: from sc9-mailhost3.vmware.com (10.113.161.73) by
	EX13-EDG-OU-002.vmware.com (10.113.208.156) with Microsoft SMTP
	Server id 15.0.1156.6; Wed, 2 Aug 2017 00:18:11 -0700
Received: from sc2-haas01-esx0118.eng.vmware.com
	(sc2-haas01-esx0118.eng.vmware.com [10.172.44.118])
	by sc9-mailhost3.vmware.com (Postfix) with ESMTP id 82947405E8;
	Wed,  2 Aug 2017 00:18:42 -0700 (PDT)
From: Nadav Amit &lt;namit@vmware.com&gt;
To: &lt;linux-mm@kvack.org&gt;
CC: &lt;nadav.amit@gmail.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;akpm@linux-foundation.org&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Nadav Amit &lt;namit@vmware.com&gt;
Subject: [PATCH v6 1/7] mm: migrate: prevent racy access to tlb_flush_pending
Date: Tue, 1 Aug 2017 17:08:12 -0700
Message-ID: &lt;20170802000818.4760-2-namit@vmware.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170802000818.4760-1-namit@vmware.com&gt;
References: &lt;20170802000818.4760-1-namit@vmware.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (EX13-EDG-OU-002.vmware.com: namit@vmware.com does not
	designate permitted sender hosts)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a> - Aug. 2, 2017, 12:08 a.m.</div>
<pre class="content">
<span class="from">From: Nadav Amit &lt;nadav.amit@gmail.com&gt;</span>

Setting and clearing mm-&gt;tlb_flush_pending can be performed by multiple
threads, since mmap_sem may only be acquired for read in
task_numa_work(). If this happens, tlb_flush_pending might be cleared
while one of the threads still changes PTEs and batches TLB flushes.

This can lead to the same race between migration and
change_protection_range() that led to the introduction of
tlb_flush_pending. The result of this race was data corruption, which
means that this patch also addresses a theoretically possible data
corruption.

An actual data corruption was not observed, yet the race was
was confirmed by adding assertion to check tlb_flush_pending is not set
by two threads, adding artificial latency in change_protection_range()
and using sysctl to reduce kernel.numa_balancing_scan_delay_ms.

Fixes: 20841405940e (&quot;mm: fix TLB flush race between migration, and
change_protection_range&quot;)

Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
<span class="signed-off-by">
Signed-off-by: Nadav Amit &lt;namit@vmware.com&gt;</span>
<span class="acked-by">Acked-by: Mel Gorman &lt;mgorman@suse.de&gt;</span>
<span class="acked-by">Acked-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="acked-by">Acked-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
---
 include/linux/mm_types.h | 31 ++++++++++++++++++++++---------
 kernel/fork.c            |  2 +-
 mm/debug.c               |  2 +-
 mm/mprotect.c            |  4 ++--
 4 files changed, 26 insertions(+), 13 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 45cdb27791a3..f5263dd0f1bc 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -493,7 +493,7 @@</span> <span class="p_context"> struct mm_struct {</span>
 	 * can move process memory needs to flush the TLB when moving a
 	 * PROT_NONE or PROT_NUMA mapped page.
 	 */
<span class="p_del">-	bool tlb_flush_pending;</span>
<span class="p_add">+	atomic_t tlb_flush_pending;</span>
 #endif
 	struct uprobes_state uprobes_state;
 #ifdef CONFIG_HUGETLB_PAGE
<span class="p_chunk">@@ -528,33 +528,46 @@</span> <span class="p_context"> static inline cpumask_t *mm_cpumask(struct mm_struct *mm)</span>
 static inline bool mm_tlb_flush_pending(struct mm_struct *mm)
 {
 	barrier();
<span class="p_del">-	return mm-&gt;tlb_flush_pending;</span>
<span class="p_add">+	return atomic_read(&amp;mm-&gt;tlb_flush_pending) &gt; 0;</span>
 }
<span class="p_del">-static inline void set_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void init_tlb_flush_pending(struct mm_struct *mm)</span>
 {
<span class="p_del">-	mm-&gt;tlb_flush_pending = true;</span>
<span class="p_add">+	atomic_set(&amp;mm-&gt;tlb_flush_pending, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void inc_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_inc(&amp;mm-&gt;tlb_flush_pending);</span>
 
 	/*
<span class="p_del">-	 * Guarantee that the tlb_flush_pending store does not leak into the</span>
<span class="p_add">+	 * Guarantee that the tlb_flush_pending increase does not leak into the</span>
 	 * critical section updating the page tables
 	 */
 	smp_mb__before_spinlock();
 }
<span class="p_add">+</span>
 /* Clearing is done after a TLB flush, which also provides a barrier. */
<span class="p_del">-static inline void clear_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+static inline void dec_tlb_flush_pending(struct mm_struct *mm)</span>
 {
 	barrier();
<span class="p_del">-	mm-&gt;tlb_flush_pending = false;</span>
<span class="p_add">+	atomic_dec(&amp;mm-&gt;tlb_flush_pending);</span>
 }
 #else
 static inline bool mm_tlb_flush_pending(struct mm_struct *mm)
 {
 	return false;
 }
<span class="p_del">-static inline void set_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void init_tlb_flush_pending(struct mm_struct *mm)</span>
 {
 }
<span class="p_del">-static inline void clear_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void inc_tlb_flush_pending(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void dec_tlb_flush_pending(struct mm_struct *mm)</span>
 {
 }
 #endif
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index e53770d2bf95..840e7a7132e1 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -809,7 +809,7 @@</span> <span class="p_context"> static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p,</span>
 	mm_init_aio(mm);
 	mm_init_owner(mm, p);
 	mmu_notifier_mm_init(mm);
<span class="p_del">-	clear_tlb_flush_pending(mm);</span>
<span class="p_add">+	init_tlb_flush_pending(mm);</span>
 #if defined(CONFIG_TRANSPARENT_HUGEPAGE) &amp;&amp; !USE_SPLIT_PMD_PTLOCKS
 	mm-&gt;pmd_huge_pte = NULL;
 #endif
<span class="p_header">diff --git a/mm/debug.c b/mm/debug.c</span>
<span class="p_header">index db1cd26d8752..d70103bb4731 100644</span>
<span class="p_header">--- a/mm/debug.c</span>
<span class="p_header">+++ b/mm/debug.c</span>
<span class="p_chunk">@@ -159,7 +159,7 @@</span> <span class="p_context"> void dump_mm(const struct mm_struct *mm)</span>
 		mm-&gt;numa_next_scan, mm-&gt;numa_scan_offset, mm-&gt;numa_scan_seq,
 #endif
 #if defined(CONFIG_NUMA_BALANCING) || defined(CONFIG_COMPACTION)
<span class="p_del">-		mm-&gt;tlb_flush_pending,</span>
<span class="p_add">+		atomic_read(&amp;mm-&gt;tlb_flush_pending),</span>
 #endif
 		mm-&gt;def_flags, &amp;mm-&gt;def_flags
 	);
<span class="p_header">diff --git a/mm/mprotect.c b/mm/mprotect.c</span>
<span class="p_header">index 8edd0d576254..0c413774c1e3 100644</span>
<span class="p_header">--- a/mm/mprotect.c</span>
<span class="p_header">+++ b/mm/mprotect.c</span>
<span class="p_chunk">@@ -245,7 +245,7 @@</span> <span class="p_context"> static unsigned long change_protection_range(struct vm_area_struct *vma,</span>
 	BUG_ON(addr &gt;= end);
 	pgd = pgd_offset(mm, addr);
 	flush_cache_range(vma, addr, end);
<span class="p_del">-	set_tlb_flush_pending(mm);</span>
<span class="p_add">+	inc_tlb_flush_pending(mm);</span>
 	do {
 		next = pgd_addr_end(addr, end);
 		if (pgd_none_or_clear_bad(pgd))
<span class="p_chunk">@@ -257,7 +257,7 @@</span> <span class="p_context"> static unsigned long change_protection_range(struct vm_area_struct *vma,</span>
 	/* Only flush the TLB if we actually modified any entries: */
 	if (pages)
 		flush_tlb_range(vma, start, end);
<span class="p_del">-	clear_tlb_flush_pending(mm);</span>
<span class="p_add">+	dec_tlb_flush_pending(mm);</span>
 
 	return pages;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



