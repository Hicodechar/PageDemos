
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/4] ARM64: dma: Add support for NO_KERNEL_MAPPING attribute - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/4] ARM64: dma: Add support for NO_KERNEL_MAPPING attribute</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=157651">Stephen Boyd</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 8, 2016, 9:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1457428939-26659-2-git-send-email-stephen.boyd@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8530921/mbox/"
   >mbox</a>
|
   <a href="/patch/8530921/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8530921/">/patch/8530921/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id AE9409F7CA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:55 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E7C53201BC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:54 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 892D42017E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932719AbcCHJWi (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 8 Mar 2016 04:22:38 -0500
Received: from mail-pa0-f48.google.com ([209.85.220.48]:33888 &quot;EHLO
	mail-pa0-f48.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932656AbcCHJWa (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 8 Mar 2016 04:22:30 -0500
Received: by mail-pa0-f48.google.com with SMTP id fy10so8734612pac.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 08 Mar 2016 01:22:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=7jlqgOSi7NVsv2LfAv5sWeRBrOaqzAKqqCLFqrmKS7U=;
	b=WSzqjCd6dtE7v/a/gTyClq9bXqkhdZ87g+JHWtVNn3L2TA/ihmTgv6fWhOl5lFPYnn
	lwF3unk5VPnv91evF2Ukvl2YbIGTyrjlpCeU+U0qnR+Izinj06Co1B/uG+krqU36wgI4
	BEMrUfxTLCUEaC/ES+mNRHfHMT0GB4KqJyzmM=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=7jlqgOSi7NVsv2LfAv5sWeRBrOaqzAKqqCLFqrmKS7U=;
	b=c5gAsCbL5exliwJ8xEqTK/AZMhjIY1H5KB0/wyCv3pCL7iqX6JMu9ulICi18wiHL1v
	5jq8j+6hhTFiC5guA/ATQSlexiFPq2zCgq9K0QRAnnLttVvr8RddLhcGlaCymNBIIQKF
	rOE7Jw4vlAz2uY3Uif/fxUMrGx4X+/Eb9QEwjRGhaEAhGXQasHJwZeAUGT2Nwga8I3OW
	lETj0xdm7VdK7Sw2EfVCg2K9o55lJ0GUkiTXUyTWV16ks5yMajDqqOFIR1vFhEg3Hzys
	aNdvbmy8InN4b0EsVbnd9G0OcvdnHM9KCTUNzPeTUIzhsEwwNPQAcsa+A9QVdxWIuIMo
	UO3A==
X-Gm-Message-State: AD7BkJLfIum36ur3EXRlgx91HKUnVXQgrob5AaTIPijl/y9DpFobNm9tgDK7IdIFTRMN0/jb
X-Received: by 10.66.234.104 with SMTP id ud8mr40361648pac.143.1457428949180;
	Tue, 08 Mar 2016 01:22:29 -0800 (PST)
Received: from localhost.localdomain (110-170-137-3.static.asianet.co.th.
	[110.170.137.3]) by smtp.gmail.com with ESMTPSA id
	i11sm3330224pfi.55.2016.03.08.01.22.25
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 08 Mar 2016 01:22:28 -0800 (PST)
From: Stephen Boyd &lt;stephen.boyd@linaro.org&gt;
To: linux-kernel@vger.kernel.org
Cc: linux-arm@lists.infradead.org,
	Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	Mimi Zohar &lt;zohar@linux.vnet.ibm.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mark Brown &lt;broonie@kernel.org&gt;, Laura Abbott &lt;labbott@redhat.com&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;,
	Laura Abbott &lt;lauraa@codeaurora.org&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;
Subject: [PATCH 1/4] ARM64: dma: Add support for NO_KERNEL_MAPPING attribute
Date: Tue,  8 Mar 2016 16:22:16 +0700
Message-Id: &lt;1457428939-26659-2-git-send-email-stephen.boyd@linaro.org&gt;
X-Mailer: git-send-email 2.7.0.25.gfc10eb5
In-Reply-To: &lt;1457428939-26659-1-git-send-email-stephen.boyd@linaro.org&gt;
References: &lt;1457428939-26659-1-git-send-email-stephen.boyd@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=157651">Stephen Boyd</a> - March 8, 2016, 9:22 a.m.</div>
<pre class="content">
Both the IOMMU and non-IOMMU allocations don&#39;t respect the
NO_KERNEL_MAPPING attribute, therefore drivers can&#39;t save virtual
address space and time spent mapping large buffers that are
intended only for userspace. Plumb this attribute into the code
for both types of DMA ops.

Cc: Robin Murphy &lt;robin.murphy@arm.com&gt;
Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;
Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;
Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
<span class="signed-off-by">Signed-off-by: Stephen Boyd &lt;stephen.boyd@linaro.org&gt;</span>
---
 arch/arm64/mm/dma-mapping.c | 39 ++++++++++++++++++++++++++++++---------
 1 file changed, 30 insertions(+), 9 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - March 8, 2016, 1:58 p.m.</div>
<pre class="content">
On 08/03/16 09:22, Stephen Boyd wrote:
<span class="quote">&gt; Both the IOMMU and non-IOMMU allocations don&#39;t respect the</span>
<span class="quote">&gt; NO_KERNEL_MAPPING attribute, therefore drivers can&#39;t save virtual</span>
<span class="quote">&gt; address space and time spent mapping large buffers that are</span>
<span class="quote">&gt; intended only for userspace. Plumb this attribute into the code</span>
<span class="quote">&gt; for both types of DMA ops.</span>

I have to say I&#39;m a little dubious about how much time we save by not 
creating one mapping once, and instead going on to repeatedly create and 
tear down lots of mappings - my initial hunch would place that number 
somewhere below 0. Similarly for the degree of pressure on our hundreds 
of gigabytes of vmalloc space, especially on &quot;memory constrained&quot; systems.

Some real data would be a lot more convincing ;)

Robin.
<span class="quote">
&gt; Cc: Robin Murphy &lt;robin.murphy@arm.com&gt;</span>
<span class="quote">&gt; Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>
<span class="quote">&gt; Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
<span class="quote">&gt; Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;</span>
<span class="quote">&gt; Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="quote">&gt; Cc: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Stephen Boyd &lt;stephen.boyd@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   arch/arm64/mm/dma-mapping.c | 39 ++++++++++++++++++++++++++++++---------</span>
<span class="quote">&gt;   1 file changed, 30 insertions(+), 9 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 331c4ca6205c..06a593653f23 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -169,6 +169,9 @@ static void *__dma_alloc(struct device *dev, size_t size,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   	/* create a coherent mapping */</span>
<span class="quote">&gt;   	page = virt_to_page(ptr);</span>
<span class="quote">&gt; +	if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="quote">&gt; +		return page;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   	coherent_ptr = dma_common_contiguous_remap(page, size, VM_USERMAP,</span>
<span class="quote">&gt;   						   prot, NULL);</span>
<span class="quote">&gt;   	if (!coherent_ptr)</span>
<span class="quote">&gt; @@ -194,7 +197,8 @@ static void __dma_free(struct device *dev, size_t size,</span>
<span class="quote">&gt;   	if (!is_device_dma_coherent(dev)) {</span>
<span class="quote">&gt;   		if (__free_from_pool(vaddr, size))</span>
<span class="quote">&gt;   			return;</span>
<span class="quote">&gt; -		vunmap(vaddr);</span>
<span class="quote">&gt; +		if (!dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="quote">&gt; +			vunmap(vaddr);</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt;   	__dma_free_coherent(dev, size, swiotlb_addr, dma_handle, attrs);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt; @@ -567,6 +571,9 @@ static void *__iommu_alloc_attrs(struct device *dev, size_t size,</span>
<span class="quote">&gt;   		if (!pages)</span>
<span class="quote">&gt;   			return NULL;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +		if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="quote">&gt; +			return pages;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   		addr = dma_common_pages_remap(pages, size, VM_USERMAP, prot,</span>
<span class="quote">&gt;   					      __builtin_return_address(0));</span>
<span class="quote">&gt;   		if (!addr)</span>
<span class="quote">&gt; @@ -624,18 +631,32 @@ static void __iommu_free_attrs(struct device *dev, size_t size, void *cpu_addr,</span>
<span class="quote">&gt;   		if (WARN_ON(!area || !area-&gt;pages))</span>
<span class="quote">&gt;   			return;</span>
<span class="quote">&gt;   		iommu_dma_free(dev, area-&gt;pages, iosize, &amp;handle);</span>
<span class="quote">&gt; -		dma_common_free_remap(cpu_addr, size, VM_USERMAP);</span>
<span class="quote">&gt; +		if (!dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="quote">&gt; +			dma_common_free_remap(cpu_addr, size, VM_USERMAP);</span>
<span class="quote">&gt;   	} else {</span>
<span class="quote">&gt;   		iommu_dma_unmap_page(dev, handle, iosize, 0, NULL);</span>
<span class="quote">&gt;   		__free_pages(virt_to_page(cpu_addr), get_order(size));</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static struct page **__iommu_get_pages(void *cpu_addr, struct dma_attrs *attrs)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct vm_struct *area;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="quote">&gt; +		return cpu_addr;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	area = find_vm_area(cpu_addr);</span>
<span class="quote">&gt; +	if (area)</span>
<span class="quote">&gt; +		return area-&gt;pages;</span>
<span class="quote">&gt; +	return NULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,</span>
<span class="quote">&gt;   			      void *cpu_addr, dma_addr_t dma_addr, size_t size,</span>
<span class="quote">&gt;   			      struct dma_attrs *attrs)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	struct vm_struct *area;</span>
<span class="quote">&gt; +	struct page **pages;</span>
<span class="quote">&gt;   	int ret;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   	vma-&gt;vm_page_prot = __get_dma_pgprot(attrs, vma-&gt;vm_page_prot,</span>
<span class="quote">&gt; @@ -644,11 +665,11 @@ static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,</span>
<span class="quote">&gt;   	if (dma_mmap_from_coherent(dev, vma, cpu_addr, size, &amp;ret))</span>
<span class="quote">&gt;   		return ret;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	area = find_vm_area(cpu_addr);</span>
<span class="quote">&gt; -	if (WARN_ON(!area || !area-&gt;pages))</span>
<span class="quote">&gt; +	pages = __iommu_get_pages(cpu_addr, attrs);</span>
<span class="quote">&gt; +	if (WARN_ON(!pages))</span>
<span class="quote">&gt;   		return -ENXIO;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	return iommu_dma_mmap(area-&gt;pages, size, vma);</span>
<span class="quote">&gt; +	return iommu_dma_mmap(pages, size, vma);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   static int __iommu_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt; @@ -656,12 +677,12 @@ static int __iommu_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;   			       size_t size, struct dma_attrs *attrs)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; -	struct vm_struct *area = find_vm_area(cpu_addr);</span>
<span class="quote">&gt; +	struct page **pages = __iommu_get_pages(cpu_addr, attrs);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	if (WARN_ON(!area || !area-&gt;pages))</span>
<span class="quote">&gt; +	if (WARN_ON(!pages))</span>
<span class="quote">&gt;   		return -ENXIO;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	return sg_alloc_table_from_pages(sgt, area-&gt;pages, count, 0, size,</span>
<span class="quote">&gt; +	return sg_alloc_table_from_pages(sgt, pages, count, 0, size,</span>
<span class="quote">&gt;   					 GFP_KERNEL);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 331c4ca6205c..06a593653f23 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -169,6 +169,9 @@</span> <span class="p_context"> static void *__dma_alloc(struct device *dev, size_t size,</span>
 
 	/* create a coherent mapping */
 	page = virt_to_page(ptr);
<span class="p_add">+	if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+		return page;</span>
<span class="p_add">+</span>
 	coherent_ptr = dma_common_contiguous_remap(page, size, VM_USERMAP,
 						   prot, NULL);
 	if (!coherent_ptr)
<span class="p_chunk">@@ -194,7 +197,8 @@</span> <span class="p_context"> static void __dma_free(struct device *dev, size_t size,</span>
 	if (!is_device_dma_coherent(dev)) {
 		if (__free_from_pool(vaddr, size))
 			return;
<span class="p_del">-		vunmap(vaddr);</span>
<span class="p_add">+		if (!dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+			vunmap(vaddr);</span>
 	}
 	__dma_free_coherent(dev, size, swiotlb_addr, dma_handle, attrs);
 }
<span class="p_chunk">@@ -567,6 +571,9 @@</span> <span class="p_context"> static void *__iommu_alloc_attrs(struct device *dev, size_t size,</span>
 		if (!pages)
 			return NULL;
 
<span class="p_add">+		if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+			return pages;</span>
<span class="p_add">+</span>
 		addr = dma_common_pages_remap(pages, size, VM_USERMAP, prot,
 					      __builtin_return_address(0));
 		if (!addr)
<span class="p_chunk">@@ -624,18 +631,32 @@</span> <span class="p_context"> static void __iommu_free_attrs(struct device *dev, size_t size, void *cpu_addr,</span>
 		if (WARN_ON(!area || !area-&gt;pages))
 			return;
 		iommu_dma_free(dev, area-&gt;pages, iosize, &amp;handle);
<span class="p_del">-		dma_common_free_remap(cpu_addr, size, VM_USERMAP);</span>
<span class="p_add">+		if (!dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+			dma_common_free_remap(cpu_addr, size, VM_USERMAP);</span>
 	} else {
 		iommu_dma_unmap_page(dev, handle, iosize, 0, NULL);
 		__free_pages(virt_to_page(cpu_addr), get_order(size));
 	}
 }
 
<span class="p_add">+static struct page **__iommu_get_pages(void *cpu_addr, struct dma_attrs *attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_struct *area;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+		return cpu_addr;</span>
<span class="p_add">+</span>
<span class="p_add">+	area = find_vm_area(cpu_addr);</span>
<span class="p_add">+	if (area)</span>
<span class="p_add">+		return area-&gt;pages;</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,
 			      void *cpu_addr, dma_addr_t dma_addr, size_t size,
 			      struct dma_attrs *attrs)
 {
<span class="p_del">-	struct vm_struct *area;</span>
<span class="p_add">+	struct page **pages;</span>
 	int ret;
 
 	vma-&gt;vm_page_prot = __get_dma_pgprot(attrs, vma-&gt;vm_page_prot,
<span class="p_chunk">@@ -644,11 +665,11 @@</span> <span class="p_context"> static int __iommu_mmap_attrs(struct device *dev, struct vm_area_struct *vma,</span>
 	if (dma_mmap_from_coherent(dev, vma, cpu_addr, size, &amp;ret))
 		return ret;
 
<span class="p_del">-	area = find_vm_area(cpu_addr);</span>
<span class="p_del">-	if (WARN_ON(!area || !area-&gt;pages))</span>
<span class="p_add">+	pages = __iommu_get_pages(cpu_addr, attrs);</span>
<span class="p_add">+	if (WARN_ON(!pages))</span>
 		return -ENXIO;
 
<span class="p_del">-	return iommu_dma_mmap(area-&gt;pages, size, vma);</span>
<span class="p_add">+	return iommu_dma_mmap(pages, size, vma);</span>
 }
 
 static int __iommu_get_sgtable(struct device *dev, struct sg_table *sgt,
<span class="p_chunk">@@ -656,12 +677,12 @@</span> <span class="p_context"> static int __iommu_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
 			       size_t size, struct dma_attrs *attrs)
 {
 	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;
<span class="p_del">-	struct vm_struct *area = find_vm_area(cpu_addr);</span>
<span class="p_add">+	struct page **pages = __iommu_get_pages(cpu_addr, attrs);</span>
 
<span class="p_del">-	if (WARN_ON(!area || !area-&gt;pages))</span>
<span class="p_add">+	if (WARN_ON(!pages))</span>
 		return -ENXIO;
 
<span class="p_del">-	return sg_alloc_table_from_pages(sgt, area-&gt;pages, count, 0, size,</span>
<span class="p_add">+	return sg_alloc_table_from_pages(sgt, pages, count, 0, size,</span>
 					 GFP_KERNEL);
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



