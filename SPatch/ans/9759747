
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>KASAN vs. boot-time switching between 4- and 5-level paging - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    KASAN vs. boot-time switching between 4- and 5-level paging</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 1, 2017, 2:56 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;bc95be68-8c68-2a45-c530-acbc6c90a231@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9759747/mbox/"
   >mbox</a>
|
   <a href="/patch/9759747/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9759747/">/patch/9759747/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A0092602BC for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Jun 2017 14:54:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8E31D20855
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Jun 2017 14:54:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 818F3284ED; Thu,  1 Jun 2017 14:54:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 53A2220855
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  1 Jun 2017 14:54:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751212AbdFAOyr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 1 Jun 2017 10:54:47 -0400
Received: from mail-eopbgr40129.outbound.protection.outlook.com
	([40.107.4.129]:62000
	&quot;EHLO EUR03-DB5-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751078AbdFAOyn (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 1 Jun 2017 10:54:43 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1; h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=AG+6FWirhiXN0V7joCZtR+FiUZDe3LAEkY0XgeHt2Gw=;
	b=J8WbSI5AKPagkiR8m/D546Az39sl51Cgj8uY1wtB4Q62/wAtLLGiwf3fO4hUc+VVnYtk+ZxW6w2CemrzlDSYzLp40SaTuAc9nngLq+xalRJ9S8xcryX3fHh7bDxO0ArIFMhVBs2Xb/9rm5l3gPa3oN5VRrxBY+xnIFFjCOkuSdI=
Authentication-Results: googlegroups.com; dkim=none (message not signed)
	header.d=none;googlegroups.com; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from [172.16.25.12] (195.214.232.6) by
	VI1PR0801MB2735.eurprd08.prod.outlook.com (2a01:111:e400:7b7c::28)
	with Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id 15.1.1143.10;
	Thu, 1 Jun 2017 14:54:35 +0000
Subject: Re: KASAN vs. boot-time switching between 4- and 5-level paging
To: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
References: &lt;20170525203334.867-1-kirill.shutemov@linux.intel.com&gt;
	&lt;20170525203334.867-8-kirill.shutemov@linux.intel.com&gt;
	&lt;20170526221059.o4kyt3ijdweurz6j@node.shutemov.name&gt;
	&lt;CACT4Y+YyFWg3fbj4ta3tSKoeBaw7hbL2YoBatAFiFB1_cMg9=Q@mail.gmail.com&gt;
	&lt;71e11033-f95c-887f-4e4e-351bcc3df71e@virtuozzo.com&gt;
	&lt;CACT4Y+bSTOeJtDDZVmkff=qqJFesA_b6uTG__EAn4AvDLw0jzQ@mail.gmail.com&gt;
	&lt;c4f11000-6138-c6ab-d075-2c4bd6a14943@virtuozzo.com&gt;
	&lt;75acbed7-6a08-692f-61b5-2b44f66ec0d8@virtuozzo.com&gt;
CC: Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;x86@kernel.org&quot; &lt;x86@kernel.org&gt;, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;, &lt;linux-arch@vger.kernel.org&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;,
	kasan-dev &lt;kasan-dev@googlegroups.com&gt;
From: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Message-ID: &lt;bc95be68-8c68-2a45-c530-acbc6c90a231@virtuozzo.com&gt;
Date: Thu, 1 Jun 2017 17:56:30 +0300
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101
	Thunderbird/45.8.0
MIME-Version: 1.0
In-Reply-To: &lt;75acbed7-6a08-692f-61b5-2b44f66ec0d8@virtuozzo.com&gt;
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [195.214.232.6]
X-ClientProxiedBy: AM5PR0502CA0020.eurprd05.prod.outlook.com
	(2603:10a6:203:91::30) To VI1PR0801MB2735.eurprd08.prod.outlook.com
	(2a01:111:e400:7b7c::28)
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: VI1PR0801MB2735:
X-MS-Office365-Filtering-Correlation-Id: e9f6d5e6-a717-498f-80b9-08d4a8fe1faa
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(201703131423075)(201703031133081);
	SRVR:VI1PR0801MB2735; 
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB2735;
	3:VypRIxJicnqgM3MTFq6vGJ6b3hDtg0Hs4FYehzXCNCGh/WaSmQiSrGIOJvxNzcro8Fp6aIv1i9PChvz59r2QrRyotTU0PzOjvUymDke1pxaKwFay/pVpwd22VdaLq9DmWanohu1B+5/RZ3YShmSfb5HuCeKZqodkkBoioAvf9b2dfGnOTsoOEkMLu9C5eWk2F3SFGDJVj9mx4sajX6inAqD9QKIug9hT3kjjTuyfsVg7/vH1WhQEZOpHT06cx+jtaUMS8u5RF6/Iaea8X+Kyz9Gfm4X2gG6PaGHAp35pfwxSYm+0a8urt2U7mBykYxSN/micp0mwpBySbNdgs7f/mg==;
	25:4XSUPXX2BzR3Z7SVigHp0+HQjs2WGg30bt8H/c7qyqgsolDC2uEA2yCj+GrL97NkPZuMV+HdkDm0ZzPL8taK0hLIRaPPedr9QqtS/aSXoGtarupDGXXZPRL9TEbmV07ezOD8Fs6axKFWM8DVQfYE8UnVcY7ffKWMtpfRSbSajSXzg1u7GXP8EHLt79gNCDFvHM2pJNPBu/Nn8eXFZyog1DR+tGdejxAarPbUrxSBB9Vs1ser/f2573NJpzrIOI3eowpkbFsecU0iT87nvjP9L6CDKGIo/nQgEEdnSRnvhHiXBpB6Px9HUvZXYAeEJu5dJqb1ptMoIA8U2IMIp1j0W4cHl0rHL8HoF/TcNLTYBGT4gd/c0srJ9SQx7IVio+Ug9LsQLQC8G+tYz3tUXnqfitoCAs/6qf9s4tnFFRNQhOVo6H9YJ1FzVTq1YgERQAegd/zBtpiX5CcHUM+DYNU7vJC+FK0/rfFcmQqyi21oGaU=
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB2735;
	31:6T+u27hvcQeIs2HKepV8t5eYMnrqZxWA6X+kW3FKDk9fk1mKlfqNRSc2TFhE0g0QXu1JtCXjbDttGYOvwPnmXeXlGiC5NhdCSJ431ap6VQiV6rJ/sQRtQR06caSWMQCAuNG38tWLXNeYksFgY3bwcURBOEIbi0CuOFq52ye+CLdFerwJYr3f9HOFgxw15+nNCxUTlCULtj4lZrfD2CDiEfNjwy1m04BVXItfHxZD+NTaH1VZiF9luVSI+j0zxSqG;
	20:jHxV7E+DGznvn+BMDGY09HnRXQz3T3AOj4eaDuhTeYyGKZUEW0V5OVOAND+2SOEHgbDO8Akr/8GVek9f48aggQTdmKASWfHhiEySuLU8jzPgnC8jUA7rMqaAKPuMOooWZeua42NHrDMcFg9Unyt+qZLuy2yl6mmU6LKV8wQV11dBWG0W+3SEXLrxF7FfQNmObSq7dG21YqVBhOaJAW1Zm+DZmDJ8BAu1PZ4x6pwsbd0rDcHmVbTmgoySLzyrphUiXuN7HOtlRkXWx4PFBeZ9x+FFPR0n+EzHKAC0Uxzl64Ad+dcq0Gl1Q59pWwmynCCWwiDzfAPORJCnee0k0kPg7HJFlpQzmiuxnqsLfosnxfM8OS+L2n2C4XkDGZC6t2RJt04yBxmxRaewsczV8zZoRsh8p1ZMsTQ7GzRunxFQeHU=
X-Microsoft-Antispam-PRVS: &lt;VI1PR0801MB2735538D1CF924E1B7C09932B0F60@VI1PR0801MB2735.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(84791874153150);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700100)(100105000095)(100000701100)(100105300095)(100000702100)(100105100095)(6040450)(601004)(2401047)(5005006)(8121501046)(100000703100)(100105400095)(3002001)(93006095)(93001095)(10201501046)(6041248)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123562025)(20161123555025)(20161123558100)(20161123564025)(20161123560025)(6072148)(100000704100)(100105200095)(100000705100)(100105500095);
	SRVR:VI1PR0801MB2735; BCL:0; PCL:0;
	RULEID:(100000800100)(100110000095)(100000801100)(100110300095)(100000802100)(100110100095)(100000803100)(100110400095)(100000804100)(100110200095)(100000805100)(100110500095);
	SRVR:VI1PR0801MB2735; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtWSTFQUjA4MDFNQjI3MzU7NDoxajV2THViSlpBRDZSSkZtNjY3ckNneHVM?=
	=?utf-8?B?R0Qza3VLMmJGZnI4aVZ5R1Y2M3dGVFZSYzJGeVJRWUwvOUxuSG9VaWxoSitN?=
	=?utf-8?B?L3o2dCs3SzQzK3dKYmlHb2tZdHZzMGlwTzZnc1lGakV6YWdBWjEwS1VuMHJR?=
	=?utf-8?B?bWJFbW9kdXJiNkN0NHNiVEdzdjdPd0JORnBrbllIaWU5S3g4bExDZGdOVGoz?=
	=?utf-8?B?S3NUV0pwUVR0T29pN2VMbVdLbzNUS2x2WFFxWHZVNGJqR3pFd2tzb2xqSUhN?=
	=?utf-8?B?SXhwNktIOU5TVkZZeEN6YzVJR0hpMFEwNFhxR3cwWTZib2QzdHM4UGZDQTB2?=
	=?utf-8?B?WXU0a1pFZk5DQy9pN0hWZ2h3UWdxQUNYMDk2QlAwL1l5OFdlbVczUkhBd2R3?=
	=?utf-8?B?RzZOY2J2V0ZHakhVOTJFYVgwUzBJSkpDL0Y1OW5TZnhpTFlBZ3ZQSDJtY1hs?=
	=?utf-8?B?aCtYMVIyeGRtTFhkSkExUkc1Y3IySFVXNnQzcEVVcGdNYlVXVXFRYXVGMHJT?=
	=?utf-8?B?cGpxMXMxbFlxTUNZSVVvei91UnFVcm1JZW1pL2JJSmNQTC9zTHRyOFl2SFRz?=
	=?utf-8?B?UU5QQWpRRldDbzNDNzFNWEMyaGlHYzBnbGEyTGM4SVBIWXR3SlFjdURidHVM?=
	=?utf-8?B?QU1hc1A5Z25lYm5DSWtRZXFrWUVIeEpabzhsT1JTcGR2ZEN1LzVKbWFaRi9V?=
	=?utf-8?B?c0V6aUg1ZXFUWkpHMEVBUE5SMXcybmdpVjluZU1DMlRqbFhzODByenJrYjkx?=
	=?utf-8?B?QncrUDhOZ0JuTmVpU1ZuNFJlUWMrdi96bFg5VVdDb0ZTVTREVlNsTWtVQWp3?=
	=?utf-8?B?RmI5ZGxmT2k5aUNqdEFwT0JlVmoxa1JiMkR1czJQOThDREgvY3hWL2REbHZ2?=
	=?utf-8?B?YlYxcVJVZEFaKzNpMDZlMlg1N1UrVWs0M28xeGE4bC9mekNkYWM4NWo2M2Iy?=
	=?utf-8?B?YUh4TlhtbkI4K1RDTDlETHJqbEdVR1pXUEtTaEE0UGpIWlREanI4Y24vRzl4?=
	=?utf-8?B?RHEwT1NsS04yejRocnUrMXpJNi9vR0FMK0ppU0NFVXg4Sk9TK3paWHRPY2Vq?=
	=?utf-8?B?K1lhejd1UjFIMlJOVEZiRlVIRTUrUlJUTmx6SFY5aFNXS3VpYkp0MmxDSTVT?=
	=?utf-8?B?MCtIN1FMdlJUbHpoTmRHRFJ2alY2NkltMFU4VFByVDZPOEU2Z2ljdmhJL1JF?=
	=?utf-8?B?aVVYVXBpRld3cUZ2d2JYc0JjZ2pmN3dHS1ZnZmhkYUU5VDRMRzNpMUROVlNj?=
	=?utf-8?B?TjR2V3owa0w1ZkZIMmdNZFIrZG9YeDV3MDdydEdzMjYwU1MvcEppQ3NtbENv?=
	=?utf-8?B?TXppaVg0NVl1Q1UvdjVWblJkc2wxYmlWeUtYanAxUDlCeXQrRDFKVjIzSkFi?=
	=?utf-8?B?VXpKWEpUT3l5MDJCbzZNUFdFbDdoSFhPdHpKNWprQkh0NEs0M3R3WTEvZUJp?=
	=?utf-8?B?M1ZuSmlDS0tidWVPQ0E2TnhuUUhKTFlkbnNkTklIVDJ2THh1cDhQMEVoZzB5?=
	=?utf-8?B?Z2NpdG0xWEU1K0RBWlloVklqT290dEZEaDdyaGo3U0tGdmkzRU55d3lMTE84?=
	=?utf-8?B?dGEyNWZZUWVwTXVhcEl5VzVvbE1wZmdBM3pZcnllU201ZjRZNythWHNMWWYw?=
	=?utf-8?Q?=3D?=
X-Forefront-PRVS: 0325F6C77B
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(6049001)(39450400003)(39830400002)(39400400002)(54094003)(377454003)(24454002)(305945005)(7736002)(54906002)(42186005)(31686004)(229853002)(6916009)(2950100002)(6666003)(33646002)(23676002)(110136004)(6486002)(77096006)(66066001)(53936002)(8676002)(38730400002)(47776003)(65806001)(6246003)(65956001)(189998001)(7416002)(25786009)(53546009)(65826007)(5660300001)(36756003)(6116002)(81166006)(83506001)(50466002)(4001350100001)(4326008)(3846002)(478600001)(76176999)(31696002)(93886004)(230700001)(86362001)(2906002)(50986999)(561944003)(54356999);
	DIR:OUT; SFP:1102; SCL:1; SRVR:VI1PR0801MB2735;
	H:[172.16.25.12]; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtWSTFQUjA4MDFNQjI3MzU7MjM6ejBqR0pad25ORVpHS2lYWmlNL2ptU2cy?=
	=?utf-8?B?cG52Nm4vZ2taUjJXNVphcTdwclp1SWQvTTVJL0xvbTBqdGhYUW9yR0lVK2Zr?=
	=?utf-8?B?MTdvZE4rRkM4UWNzNE1qcEx4RWdXS1dMLy9qOUc4SGNNQmZOV0pNaFlvN2pS?=
	=?utf-8?B?NzhBU0p3d1NJQVgvODg4ZmJUUHJUQXczQm90cVlDQkhsREREWlFZMG5sWTNI?=
	=?utf-8?B?WUpXOFFWdDFyNWlxUmU5dkxmTlVmalRJWG5vWTZ2VXBHWUE3Vk5UeSttK2dt?=
	=?utf-8?B?V0NiWlkyYUFoSHdQZnFkaHJWYndQWVJncmRjVnRZUDBYd1lqVURtYnZ0S1Jl?=
	=?utf-8?B?MERlZE9zQmNWSWFmaklDemhibmFpclc0VjY4Ny9vUEdsaXdQTWFwWFpxV0Nm?=
	=?utf-8?B?TmJLVjhCWlNzMGhESUZ4eitTY0FLT3FjYVpvMmNESXcraEtkcjFKVXlHWndB?=
	=?utf-8?B?S25BWnZKaHJJTDYzaHlub0VqS3drUi8rMmEyM0ZBandqTmU5N2JwL3JMejFl?=
	=?utf-8?B?RWFIMDlZajlZRVpmK0hmK29HZnlEeUpuL2dNTFNpUFZxcjRsa3dvejVHMG9U?=
	=?utf-8?B?MXQ0Zzg1Y2ttRStYaGhTaElpaE1hakprKzVrY3IvU1BUVExQWUFLQUVKa1lU?=
	=?utf-8?B?eWtvZE1Ldm1zYmdLeER6eTVOQXd2VllXR2xDNU1aTXNXdjZsTXU1b3lBaGFG?=
	=?utf-8?B?TGlWWHdmLzNhR2UxSXhhTE5mS2JTYlhGRm9uQVBvbytzd29JeUJoYlZ4Nzg0?=
	=?utf-8?B?MGQ3SHpia0Jsd0FIc2dTemF1bXduMEhNdGY0WkpPWEp4S1BpLzJ1cGtUY2g0?=
	=?utf-8?B?SGpJazV5U3JEQUF1WEs1dzZZamxzbmgyeHRySGQxYVNrUmhXWkFPRlB4SEQ4?=
	=?utf-8?B?MXhNdzBTZ0FrZmIzNHV0OUc3bGNmY1VrY0NLL3hIcGgvb3RGYm9YbEFGMUVY?=
	=?utf-8?B?SUd3UStWMER5WlkrOVZoSlNIdkI3bkVBNkNZODhaMW5heDI3VUNNN0tGZTl6?=
	=?utf-8?B?SkZIaXBIcXMwa28zeHVOb0hVOG5OaURBYmszRG9SUjQrMEFlYjhZSHROaDlH?=
	=?utf-8?B?TXhQcGp5eGFMbHo0ZEJUR3lpaXZhWlI2V1FlMnhyY1I3bTFPZ2lxd3Q0c1Nm?=
	=?utf-8?B?dlA5d2dKQ1lQbWNXK255b0xiM0NMaTZZZlBTaElRV3BKMlRtOGU3YWE1ZTU4?=
	=?utf-8?B?WkQ3d240R0orYVBJeWxoVU9BODB3TURGbHlpNHN3NmdEUm8yb2xMZ2pOT0N5?=
	=?utf-8?B?WnZXZzlpbVVBVXVaOGRld0N4Zk5kd2E1MFQxNkFiU2M2VXoydHgvYkVVWXBm?=
	=?utf-8?B?YTg2UlZEdDNxT29Zb0dVMWdGTVFmOTNEaTRhdWYzaVJPWmRiWVd3NjlMUWhJ?=
	=?utf-8?B?N0YvbStxVkdlR0hrUkNRbHl3dFV5NURDNEUzL1ZLZUZsRzROYUFrTXZJM1BS?=
	=?utf-8?B?eElXM2FDYXkxZkJPL3RHVlJqWGt0N1oyNnBSVjBGQXpJbVdKSjh1RFc2ekRC?=
	=?utf-8?B?VEoyN1ZudUkzL3IyN2hQQXZhYUpsQkZnZmltUVBaeHdERGZ1VkIzMlhERCs2?=
	=?utf-8?B?OXpOTE1GbDdXUkFHdzZUN3lFUUg2ZzdnMUV0a3JqZllRQ3pkSnFXUU1RWEhz?=
	=?utf-8?B?VWdlZWNyTjdpdWNHSTdKeUFORG5mYzgzUUsxU0tqeHpGdHYzaVVKY0p4WTEv?=
	=?utf-8?B?blV6RjF1S04vNzEwYTdjOGszQnNNblQxRlM0VUJmb0ZmNFd3blA4QUJOYlZS?=
	=?utf-8?B?NFZVN2UwakNaQjZZNnYweE5OQ1pBNkVLNFBZbDcrTUp5V0h6ZVkvS09rb1FV?=
	=?utf-8?Q?8aBvSoufaV5eqKE?=
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB2735;
	6:R2xu/Q7qfMjEar8UCsaku2twgXnNGHvoN4Amb5gNlFPA4ew6QL9sEPjMfVkOiF3T5oZSBAHYcGJyuZPB6EgZWY7XSVMv6LO2g33RI3J1sTn9GsbNiZmZY0IjAb3J+jJ2ZC+52Mlh3+e8EN36QdgiUm6gVLllem82DkNj/31OXEljVYkeCQpSdDOHnEIwM3gZdY/qIG6gUawypgy0Uuj41vonAAGfzJXU4T8rFb5/9xNGs+W/C9wKuqWMYAPdQ94EFMVHyf5r3nxxu6ZTowHWZgCrV6LYHF9DuPQTa0HFjldJ3GFwB/QovlfQlHWqrs4eR7TOiD7Vpl0d26DC0q98/1NAUuNVzuvkmYzcmDpT4QqajsIAIMiKScxY1xAjVDSdkAG9K9yKYjdo6qiaK45lXbn/iIcNpFSC4UHq0XOsvt/Unc/1xCs15ODbdcjiLSaeJFMsahuai2e9XEaRz1CV6UP7O6AOAK8BrKTqBMjT07nZKWrdw8JGko/4Ztjb7GN/gFeHMb/xpH9vNipZhItrmQ==
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB2735;
	5:f4msUhq8VsTEJTszDipNe9IpE5pgmMUfeviFEe3bSBGA99OCB0URBGJ610VdrXe9fKFREiTFvDqRC3/hIk/zT4F4sb/JSpnFHp6rRrPfnymRbSNieJ2ooLmppg2OfqU/434e/wz2Z7Awvi25+n4dRzpPG/9nFV1rjk9j9HKLcxb5tMuMhqFMiQFMVzMsop+9D4N9TQgVBW8Bra37VzBNGHYkTFEbmSAEcyq4zhUosgyLs5xVZ7j1BzEqcdn1Om9/Y1EQ+lag2jOlERecu12yrHa2/lkYIUVMudI6j10qdA9/Slw4J7obGBuVpfwmaVxPSEeXrGUFhBNiHpnAFcvMpcFecshcc9CMwwZsivJcQtpc64rzDKHJrDOTIoPQBwuKm5UGjPgigTi+SdlyqqKbxMe+wkRizBPPoReK4T5FcR4dNceaewh2mggbapT5p8RFHiusJpjHpW7U/HsqswaUMfM8IZJHT7oWz8pcRUhWBFkQpiM4idF3jpgOiB+4gKEr;
	24:pziHLoyW6zcPGQbEJlGReex0fd+EuKM/ArRCGsi/gnq6xZPigSc7yEqIIgf35zS0xwvzHNyHRveqdFQoeYiWHW7ZarCRDTZlaIWjjR2NlJs=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; VI1PR0801MB2735;
	7:MvKQK8haB/3HQ6DLrbRXvNKYAwfVT6AqGcxqX0K0ZWunPLCcK4EW5QVXBCIUQ5bWmycztpM95T6CddiTR6NHTFYpeUGw2H+i9BbFlHA4ZL3PkLpDtQfNEuEsLL3nqvmGXR3n1UPHeLnrweXKf0Cuuu6HX9iCdt33YHvDrPheTPoSg5N2Nen5lkzia49UffufsrKdy9ypZfcu4TlBIb6m8F0ruSFzEdNr3tQUk8Tr3tDdHw1yNg82omjRu0WTsU8WX0y02Mz/BNxY3IVh8m7+N/HgB5D/0Cozyq+8QuNug0qvdUz0+Xr3ZP865JD5bT5Qsj1DVJaftJdNP9eso8iU6g==;
	20:wOUCFCLONRca9tc7on7XSMDgPk7JGDFqMgi5PIP0a460nOsmOiom/vJoTYpgwCdAyFdsxYYJO5/UxYFX10AsczF6FIzLrBZiVxhcslEvZfV8rz5i7mSBRwRc4NK126YtdBR54zMoqcAi2UkW56kMiDJrQUmRzUVP3Y40OKklcrU=
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 01 Jun 2017 14:54:35.7978
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: VI1PR0801MB2735
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - June 1, 2017, 2:56 p.m.</div>
<pre class="content">
On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:
<span class="quote">&gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt;&gt;&gt; compiler.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt; is mapped.</span>
<span class="quote">&gt; </span>


Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.
And it&#39;s only build-tested.

Based on top of: git://git.kernel.org/pub/scm/linux/kernel/git/kas/linux.git la57/integration


---
 arch/x86/Kconfig            |  1 -
 arch/x86/mm/kasan_init_64.c | 74 ++++++++++++++++++++++++++++++++-------------
 2 files changed, 53 insertions(+), 22 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 10, 2017, 12:33 p.m.</div>
<pre class="content">
On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:
<span class="quote">&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt; &gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt; &gt;&gt;&gt; compiler.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt; &gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt; &gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt; &gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt; &gt; is mapped.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt; And it&#39;s only build-tested.</span>

[Sorry for loong delay.]

The patch works for me for legacy boot. But it breaks EFI boot with
5-level paging. And I struggle to understand why.

What I see is many page faults at mm/kasan/kasan.c:758 --
&quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at
arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple
fault.

Any ideas?

If you want to play with this by yourself, qemu supports la57 -- use
-cpu &quot;qemu64,+la57&quot;.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72902">Dmitry Vyukov</a> - July 10, 2017, 12:43 p.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 2:33 PM, Kirill A. Shutemov
&lt;kirill@shutemov.name&gt; wrote:
<span class="quote">&gt; On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; &gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; compiler.</span>
<span class="quote">&gt;&gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt;&gt; &gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt;&gt; &gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt;&gt; &gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt;&gt; &gt; is mapped.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt;&gt; And it&#39;s only build-tested.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [Sorry for loong delay.]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt; fault.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Any ideas?</span>


Just playing the role of the rubber duck:
 - what is the fault address?
 - is it within the shadow range?
 - was the shadow mapped already?
<span class="quote">

&gt; If you want to play with this by yourself, qemu supports la57 -- use</span>
<span class="quote">&gt; -cpu &quot;qemu64,+la57&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt;  Kirill A. Shutemov</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 10, 2017, 2:17 p.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 02:43:17PM +0200, Dmitry Vyukov wrote:
<span class="quote">&gt; On Mon, Jul 10, 2017 at 2:33 PM, Kirill A. Shutemov</span>
<span class="quote">&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt; &gt; On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; compiler.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt; &gt;&gt; &gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt; &gt;&gt; &gt; is mapped.</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt; &gt;&gt; And it&#39;s only build-tested.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; [Sorry for loong delay.]</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt; &gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt; &gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt; &gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt; &gt; fault.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Any ideas?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just playing the role of the rubber duck:</span>
<span class="quote">&gt;  - what is the fault address?</span>
<span class="quote">&gt;  - is it within the shadow range?</span>
<span class="quote">&gt;  - was the shadow mapped already?</span>

I misread trace. The initial fault is at arch/x86/kernel/head_64.S:270,
which is &quot;.endr&quot; in definition of early_idt_handler_array.

The fault address for all three faults is 0xffffffff7ffffff8, which is
outside shadow range. It&#39;s just before kernel text mapping.

Codewise, it happens in load_ucode_bsp() -- after kasan_early_init(), but
before kasan_init().
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - July 10, 2017, 3:56 p.m.</div>
<pre class="content">
<span class="quote">&gt; On Jul 10, 2017, at 7:17 AM, Kirill A. Shutemov &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On Mon, Jul 10, 2017 at 02:43:17PM +0200, Dmitry Vyukov wrote:</span>
<span class="quote">&gt;&gt; On Mon, Jul 10, 2017 at 2:33 PM, Kirill A. Shutemov</span>
<span class="quote">&gt;&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; compiler.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; is mapped.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt;&gt;&gt;&gt; And it&#39;s only build-tested.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; [Sorry for loong delay.]</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt;&gt;&gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt;&gt;&gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt;&gt;&gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt;&gt;&gt; fault.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; Any ideas?</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Just playing the role of the rubber duck:</span>
<span class="quote">&gt;&gt; - what is the fault address?</span>
<span class="quote">&gt;&gt; - is it within the shadow range?</span>
<span class="quote">&gt;&gt; - was the shadow mapped already?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I misread trace. The initial fault is at arch/x86/kernel/head_64.S:270,</span>
<span class="quote">&gt; which is &quot;.endr&quot; in definition of early_idt_handler_array.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The fault address for all three faults is 0xffffffff7ffffff8, which is</span>
<span class="quote">&gt; outside shadow range. It&#39;s just before kernel text mapping.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Codewise, it happens in load_ucode_bsp() -- after kasan_early_init(), but</span>
<span class="quote">&gt; before kasan_init().</span>

My theory is that, in 5 level mode, the early IDT code isn&#39;t all mapped in the page tables.  This could sometimes be papered over by lazy page table setup, but lazy setup can&#39;t handle faults in the page fault code or data structures.

EFI sometimes uses separate page tables, which could contribute.
<span class="quote">
&gt; </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; Kirill A. Shutemov</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - July 10, 2017, 4:57 p.m.</div>
<pre class="content">
On 07/10/2017 03:33 PM, Kirill A. Shutemov wrote:
<span class="quote">
&gt; </span>
<span class="quote">&gt; [Sorry for loong delay.]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt; fault.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Any ideas?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If you want to play with this by yourself, qemu supports la57 -- use</span>
<span class="quote">&gt; -cpu &quot;qemu64,+la57&quot;.</span>
<span class="quote">&gt; </span>

I&#39;ll have a look.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 10, 2017, 6:47 p.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 08:56:37AM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Jul 10, 2017, at 7:17 AM, Kirill A. Shutemov &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; On Mon, Jul 10, 2017 at 02:43:17PM +0200, Dmitry Vyukov wrote:</span>
<span class="quote">&gt; &gt;&gt; On Mon, Jul 10, 2017 at 2:33 PM, Kirill A. Shutemov</span>
<span class="quote">&gt; &gt;&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; compiler.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; is mapped.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; And it&#39;s only build-tested.</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; [Sorry for loong delay.]</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt; &gt;&gt;&gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt; &gt;&gt;&gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt; &gt;&gt;&gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt; &gt;&gt;&gt; fault.</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; Any ideas?</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Just playing the role of the rubber duck:</span>
<span class="quote">&gt; &gt;&gt; - what is the fault address?</span>
<span class="quote">&gt; &gt;&gt; - is it within the shadow range?</span>
<span class="quote">&gt; &gt;&gt; - was the shadow mapped already?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I misread trace. The initial fault is at arch/x86/kernel/head_64.S:270,</span>
<span class="quote">&gt; &gt; which is &quot;.endr&quot; in definition of early_idt_handler_array.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The fault address for all three faults is 0xffffffff7ffffff8, which is</span>
<span class="quote">&gt; &gt; outside shadow range. It&#39;s just before kernel text mapping.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Codewise, it happens in load_ucode_bsp() -- after kasan_early_init(), but</span>
<span class="quote">&gt; &gt; before kasan_init().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; My theory is that, in 5 level mode, the early IDT code isn&#39;t all mapped</span>
<span class="quote">&gt; in the page tables.  This could sometimes be papered over by lazy page</span>
<span class="quote">&gt; table setup, but lazy setup can&#39;t handle faults in the page fault code</span>
<span class="quote">&gt; or data structures.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; EFI sometimes uses separate page tables, which could contribute.</span>

As far as I can see all involved code is within the same page:

(gdb) p/x &amp;x86_64_start_kernel
$1 = 0xffffffff84bad2ae
(gdb) p/x &amp;early_idt_handler_array
$2 = 0xffffffff84bad000
(gdb) p/x &amp;early_idt_handler_common
$3 = 0xffffffff84bad120
(gdb) p/x &amp;early_make_pgtable
$4 = 0xffffffff84bad3b4
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - July 10, 2017, 8:07 p.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 11:47 AM, Kirill A. Shutemov
&lt;kirill@shutemov.name&gt; wrote:
<span class="quote">&gt; On Mon, Jul 10, 2017 at 08:56:37AM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt; On Jul 10, 2017, at 7:17 AM, Kirill A. Shutemov &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; On Mon, Jul 10, 2017 at 02:43:17PM +0200, Dmitry Vyukov wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt; On Mon, Jul 10, 2017 at 2:33 PM, Kirill A. Shutemov</span>
<span class="quote">&gt;&gt; &gt;&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; On Thu, Jun 01, 2017 at 05:56:30PM +0300, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; On 05/29/2017 03:46 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; On 05/29/2017 02:45 PM, Andrey Ryabinin wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Looks like KASAN will be a problem for boot-time paging mode switching.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It wants to know CONFIG_KASAN_SHADOW_OFFSET at compile-time to pass to</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; gcc -fasan-shadow-offset=. But this value varies between paging modes...</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see how to solve it. Folks, any ideas?</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +kasan-dev</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wonder if we can use the same offset for both modes. If we use</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0xFFDFFC0000000000 as start of shadow for 5 levels, then the same</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset that we use for 4 levels (0xdffffc0000000000) will also work</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for 5 levels. Namely, ending of 5 level shadow will overlap with 4</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; level mapping (both end at 0xfffffbffffffffff), but 5 level mapping</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; extends towards lower addresses. The current 5 level start of shadow</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is actually close -- 0xffd8000000000000 and it seems that the required</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; space after it is unused at the moment (at least looking at mm.txt).</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; So just try to move it to 0xFFDFFC0000000000?</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yeah, this should work, but note that 0xFFDFFC0000000000 is not PGDIR aligned address. Our init code</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; assumes that kasan shadow stars and ends on the PGDIR aligned address.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fortunately this is fixable, we&#39;d need two more pages for page tables to map unaligned start/end</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the shadow.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can extend the shadow backwards (to the current address),</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; provided that it does not affect shadow offset that we pass to</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; compiler.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I thought about this. We can round down shadow start to 0xffdf000000000000, but we can&#39;t</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; round up shadow end, because in that case shadow would end at 0xffffffffffffffff.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; So we still need at least one more page to cover unaligned end.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; Actually, I&#39;m wrong here. I assumed that we would need an additional page to store p4d entries,</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; but in fact we don&#39;t need it, as such page should already exist. It&#39;s the same last pgd where kernel image</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt; is mapped.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; Something like bellow might work. It&#39;s just a proposal to demonstrate the idea, so some code might look ugly.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;&gt; And it&#39;s only build-tested.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; [Sorry for loong delay.]</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; The patch works for me for legacy boot. But it breaks EFI boot with</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 5-level paging. And I struggle to understand why.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; What I see is many page faults at mm/kasan/kasan.c:758 --</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; &quot;DEFINE_ASAN_LOAD_STORE(4)&quot;. Handling one of them I get double-fault at</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; arch/x86/kernel/head_64.S:298 -- &quot;pushq %r14&quot;, which ends up with triple</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; fault.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; Any ideas?</span>
<span class="quote">&gt;&gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; Just playing the role of the rubber duck:</span>
<span class="quote">&gt;&gt; &gt;&gt; - what is the fault address?</span>
<span class="quote">&gt;&gt; &gt;&gt; - is it within the shadow range?</span>
<span class="quote">&gt;&gt; &gt;&gt; - was the shadow mapped already?</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I misread trace. The initial fault is at arch/x86/kernel/head_64.S:270,</span>
<span class="quote">&gt;&gt; &gt; which is &quot;.endr&quot; in definition of early_idt_handler_array.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; The fault address for all three faults is 0xffffffff7ffffff8, which is</span>
<span class="quote">&gt;&gt; &gt; outside shadow range. It&#39;s just before kernel text mapping.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Codewise, it happens in load_ucode_bsp() -- after kasan_early_init(), but</span>
<span class="quote">&gt;&gt; &gt; before kasan_init().</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; My theory is that, in 5 level mode, the early IDT code isn&#39;t all mapped</span>
<span class="quote">&gt;&gt; in the page tables.  This could sometimes be papered over by lazy page</span>
<span class="quote">&gt;&gt; table setup, but lazy setup can&#39;t handle faults in the page fault code</span>
<span class="quote">&gt;&gt; or data structures.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; EFI sometimes uses separate page tables, which could contribute.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As far as I can see all involved code is within the same page:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; (gdb) p/x &amp;x86_64_start_kernel</span>
<span class="quote">&gt; $1 = 0xffffffff84bad2ae</span>
<span class="quote">&gt; (gdb) p/x &amp;early_idt_handler_array</span>
<span class="quote">&gt; $2 = 0xffffffff84bad000</span>
<span class="quote">&gt; (gdb) p/x &amp;early_idt_handler_common</span>
<span class="quote">&gt; $3 = 0xffffffff84bad120</span>
<span class="quote">&gt; (gdb) p/x &amp;early_make_pgtable</span>
<span class="quote">&gt; $4 = 0xffffffff84bad3b4</span>
<span class="quote">&gt;</span>

Can you give the disassembly of the backtrace lines?  Blaming the
.endr doesn&#39;t make much sense to me.

Or maybe Andrey will figure it out quickly.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 10, 2017, 9:24 p.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 01:07:13PM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; Can you give the disassembly of the backtrace lines?  Blaming the</span>
<span class="quote">&gt; .endr doesn&#39;t make much sense to me.</span>

I don&#39;t have backtrace. It&#39;s before printk() is functional. I only see
triple fault and reboot.

I had to rely on qemu tracing and gdb.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - July 11, 2017, 12:30 a.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 2:24 PM, Kirill A. Shutemov
&lt;kirill@shutemov.name&gt; wrote:
<span class="quote">&gt; On Mon, Jul 10, 2017 at 01:07:13PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; Can you give the disassembly of the backtrace lines?  Blaming the</span>
<span class="quote">&gt;&gt; .endr doesn&#39;t make much sense to me.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I don&#39;t have backtrace. It&#39;s before printk() is functional. I only see</span>
<span class="quote">&gt; triple fault and reboot.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I had to rely on qemu tracing and gdb.</span>

Can you ask GDB or objtool to disassemble around those addresses?  Can
you also attach the big dump that QEMU throws out that shows register
state?  In particular, CR2, CR3, and CR4 could be useful.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - July 11, 2017, 10:35 a.m.</div>
<pre class="content">
On Mon, Jul 10, 2017 at 05:30:38PM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Jul 10, 2017 at 2:24 PM, Kirill A. Shutemov</span>
<span class="quote">&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt; &gt; On Mon, Jul 10, 2017 at 01:07:13PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt;&gt; Can you give the disassembly of the backtrace lines?  Blaming the</span>
<span class="quote">&gt; &gt;&gt; .endr doesn&#39;t make much sense to me.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I don&#39;t have backtrace. It&#39;s before printk() is functional. I only see</span>
<span class="quote">&gt; &gt; triple fault and reboot.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I had to rely on qemu tracing and gdb.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you ask GDB or objtool to disassemble around those addresses?  Can</span>
<span class="quote">&gt; you also attach the big dump that QEMU throws out that shows register</span>
<span class="quote">&gt; state?  In particular, CR2, CR3, and CR4 could be useful.</span>

The last three execptions:

check_exception old: 0xffffffff new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3036
RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000
RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000
R8 =6d756e2032616476 R9 =2f7665642f3d746f R10=6f72203053797474 R11=3d656c6f736e6f63
R12=0000000000000006 R13=000000003fffb000 R14=ffffffff82a07ed8 R15=000000000140008e
RIP=ffffffff84bb3036 RFL=00000006 [-----P-] CPL=0 II=0 A20=1 SMM=0 HLT=0
ES =0000 0000000000000000 00000000 00000000
CS =0010 0000000000000000 ffffffff 00af9b00 DPL=0 CS64 [-RA]
SS =0000 0000000000000000 ffffffff 00c09300 DPL=0 DS   [-WA]
DS =0000 0000000000000000 00000000 00000000
FS =0000 0000000000000000 00000000 00000000
GS =0000 ffffffff84b8f000 00000000 00000000
LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT
TR =0000 0000000000000000 0000ffff 00008b00 DPL=0 TSS64-busy
GDT=     ffffffff84ba1000 0000007f
IDT=     ffffffff84d92000 00000fff
CR0=80050033 CR2=ffffffff7ffffff8 CR3=0000000009c58000 CR4=000010a0
DR0=0000000000000000 DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000
DR6=00000000ffff0ff0 DR7=0000000000000400
EFER=0000000000000d01

check_exception old: 0xe new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3141
RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000
RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000
R8 =6d756e2032616476 R9 =2f7665642f3d746f R10=6f72203053797474 R11=3d656c6f736e6f63
R12=0000000000000006 R13=000000003fffb000 R14=ffffffff82a07ed8 R15=000000000140008e
RIP=ffffffff84bb3141 RFL=00000006 [-----P-] CPL=0 II=0 A20=1 SMM=0 HLT=0
ES =0000 0000000000000000 00000000 00000000
CS =0010 0000000000000000 ffffffff 00af9b00 DPL=0 CS64 [-RA]
SS =0000 0000000000000000 ffffffff 00c09300 DPL=0 DS   [-WA]
DS =0000 0000000000000000 00000000 00000000
FS =0000 0000000000000000 00000000 00000000
GS =0000 ffffffff84b8f000 00000000 00000000
LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT
TR =0000 0000000000000000 0000ffff 00008b00 DPL=0 TSS64-busy
GDT=     ffffffff84ba1000 0000007f
IDT=     ffffffff84d92000 00000fff
CR0=80050033 CR2=ffffffff7ffffff8 CR3=0000000009c58000 CR4=000010a0
DR0=0000000000000000 DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000
DR6=00000000ffff0ff0 DR7=0000000000000400
EFER=0000000000000d01

check_exception old: 0x8 new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3141
RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000
RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000
R8 =6d756e2032616476 R9 =2f7665642f3d746f R10=6f72203053797474 R11=3d656c6f736e6f63
R12=0000000000000006 R13=000000003fffb000 R14=ffffffff82a07ed8 R15=000000000140008e
RIP=ffffffff84bb3141 RFL=00000006 [-----P-] CPL=0 II=0 A20=1 SMM=0 HLT=0
ES =0000 0000000000000000 00000000 00000000
CS =0010 0000000000000000 ffffffff 00af9b00 DPL=0 CS64 [-RA]
SS =0000 0000000000000000 ffffffff 00c09300 DPL=0 DS   [-WA]
DS =0000 0000000000000000 00000000 00000000
FS =0000 0000000000000000 00000000 00000000
GS =0000 ffffffff84b8f000 00000000 00000000
LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT
TR =0000 0000000000000000 0000ffff 00008b00 DPL=0 TSS64-busy
GDT=     ffffffff84ba1000 0000007f
IDT=     ffffffff84d92000 00000fff
CR0=80050033 CR2=ffffffff7ffffff8 CR3=0000000009c58000 CR4=000010a0
DR0=0000000000000000 DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000
DR6=00000000ffff0ff0 DR7=0000000000000400
EFER=0000000000000d01
Triple fault

Dump of assembler code for function early_idt_handler_array:
   0xffffffff84bb3000 &lt;+0&gt;:     pushq  $0x0
   0xffffffff84bb3002 &lt;+2&gt;:     pushq  $0x0
   0xffffffff84bb3004 &lt;+4&gt;:     jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb3009 &lt;+9&gt;:     pushq  $0x0
   0xffffffff84bb300b &lt;+11&gt;:    pushq  $0x1
   0xffffffff84bb300d &lt;+13&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb3012 &lt;+18&gt;:    pushq  $0x0
   0xffffffff84bb3014 &lt;+20&gt;:    pushq  $0x2
   0xffffffff84bb3016 &lt;+22&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb301b &lt;+27&gt;:    pushq  $0x0
   0xffffffff84bb301d &lt;+29&gt;:    pushq  $0x3
   0xffffffff84bb301f &lt;+31&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb3024 &lt;+36&gt;:    pushq  $0x0
   0xffffffff84bb3026 &lt;+38&gt;:    pushq  $0x4
   0xffffffff84bb3028 &lt;+40&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb302d &lt;+45&gt;:    pushq  $0x0
   0xffffffff84bb302f &lt;+47&gt;:    pushq  $0x5
   0xffffffff84bb3031 &lt;+49&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
=&gt; 0xffffffff84bb3036 &lt;+54&gt;:    pushq  $0x0
   0xffffffff84bb3038 &lt;+56&gt;:    pushq  $0x6
   0xffffffff84bb303a &lt;+58&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb303f &lt;+63&gt;:    pushq  $0x0
   0xffffffff84bb3041 &lt;+65&gt;:    pushq  $0x7
   0xffffffff84bb3043 &lt;+67&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb3048 &lt;+72&gt;:    pushq  $0x8
   0xffffffff84bb304a &lt;+74&gt;:    jmpq   0xffffffff84bb3120 &lt;early_idt_handler_common&gt;
   0xffffffff84bb304f &lt;+79&gt;:    int3
   0xffffffff84bb3050 &lt;+80&gt;:    int3
...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - July 11, 2017, 3:06 p.m.</div>
<pre class="content">
On Tue, Jul 11, 2017 at 3:35 AM, Kirill A. Shutemov
&lt;kirill@shutemov.name&gt; wrote:
<span class="quote">&gt; On Mon, Jul 10, 2017 at 05:30:38PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; On Mon, Jul 10, 2017 at 2:24 PM, Kirill A. Shutemov</span>
<span class="quote">&gt;&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; On Mon, Jul 10, 2017 at 01:07:13PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt; Can you give the disassembly of the backtrace lines?  Blaming the</span>
<span class="quote">&gt;&gt; &gt;&gt; .endr doesn&#39;t make much sense to me.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I don&#39;t have backtrace. It&#39;s before printk() is functional. I only see</span>
<span class="quote">&gt;&gt; &gt; triple fault and reboot.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I had to rely on qemu tracing and gdb.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Can you ask GDB or objtool to disassemble around those addresses?  Can</span>
<span class="quote">&gt;&gt; you also attach the big dump that QEMU throws out that shows register</span>
<span class="quote">&gt;&gt; state?  In particular, CR2, CR3, and CR4 could be useful.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The last three execptions:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; check_exception old: 0xffffffff new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3036</span>
<span class="quote">&gt; RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000</span>
<span class="quote">&gt; RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000</span>

So RSP was 0xffffffff80000000, a push happened, and we tried to write
to 0xffffffff7ffffff8, which failed.
<span class="quote">
&gt; check_exception old: 0xe new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3141</span>
<span class="quote">&gt; RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000</span>
<span class="quote">&gt; RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000</span>

And #PF doesn&#39;t use IST, so it double-faulted.

Either the stack isn&#39;t mapped in the page tables, RSP is corrupt, or
there&#39;s a genuine stack overflow here.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - July 11, 2017, 3:15 p.m.</div>
<pre class="content">
On 07/11/2017 06:06 PM, Andy Lutomirski wrote:
<span class="quote">&gt; On Tue, Jul 11, 2017 at 3:35 AM, Kirill A. Shutemov</span>
<span class="quote">&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt; On Mon, Jul 10, 2017 at 05:30:38PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt; On Mon, Jul 10, 2017 at 2:24 PM, Kirill A. Shutemov</span>
<span class="quote">&gt;&gt;&gt; &lt;kirill@shutemov.name&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Mon, Jul 10, 2017 at 01:07:13PM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Can you give the disassembly of the backtrace lines?  Blaming the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; .endr doesn&#39;t make much sense to me.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I don&#39;t have backtrace. It&#39;s before printk() is functional. I only see</span>
<span class="quote">&gt;&gt;&gt;&gt; triple fault and reboot.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I had to rely on qemu tracing and gdb.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Can you ask GDB or objtool to disassemble around those addresses?  Can</span>
<span class="quote">&gt;&gt;&gt; you also attach the big dump that QEMU throws out that shows register</span>
<span class="quote">&gt;&gt;&gt; state?  In particular, CR2, CR3, and CR4 could be useful.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The last three execptions:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; check_exception old: 0xffffffff new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3036</span>
<span class="quote">&gt;&gt; RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000</span>
<span class="quote">&gt;&gt; RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So RSP was 0xffffffff80000000, a push happened, and we tried to write</span>
<span class="quote">&gt; to 0xffffffff7ffffff8, which failed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; check_exception old: 0xe new 0xe, cr2: 0xffffffff7ffffff8, rip: 0xffffffff84bb3141</span>
<span class="quote">&gt;&gt; RAX=00000000ffffffff RBX=ffffffff800000d8 RCX=ffffffff84be4021 RDX=dffffc0000000000</span>
<span class="quote">&gt;&gt; RSI=0000000000000006 RDI=ffffffff84c57000 RBP=ffffffff800000c8 RSP=ffffffff80000000</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And #PF doesn&#39;t use IST, so it double-faulted.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Either the stack isn&#39;t mapped in the page tables, RSP is corrupt, or</span>
<span class="quote">&gt; there&#39;s a genuine stack overflow here.</span>
<span class="quote">&gt; </span>

I reproduced this, and this is kasan bug:

   │0xffffffff84864897 &lt;x86_early_init_platform_quirks+5&gt;   mov    $0xffffffff83f1d0b8,%rdi 
   │0xffffffff8486489e &lt;x86_early_init_platform_quirks+12&gt;  movabs $0xdffffc0000000000,%rax 
   │0xffffffff848648a8 &lt;x86_early_init_platform_quirks+22&gt;  push   %rbp
   │0xffffffff848648a9 &lt;x86_early_init_platform_quirks+23&gt;  mov    %rdi,%rdx  
   │0xffffffff848648ac &lt;x86_early_init_platform_quirks+26&gt;  shr    $0x3,%rdx
   │0xffffffff848648b0 &lt;x86_early_init_platform_quirks+30&gt;  mov    %rsp,%rbp
<span class="quote">  &gt;│0xffffffff848648b3 &lt;x86_early_init_platform_quirks+33&gt;  mov    (%rdx,%rax,1),%al</span>

we crash on the last move which is a read from shadow

(gdb) p/x $rdx 
$1 = 0x1ffffffff07e3a17
(gdb) p/x $rax
$2 = 0xdffffc0000000000

(gdb) p/x 0xdffffc0000000000 + 0x1ffffffff07e3a17
$4 = 0xfffffbfff07e3a17
(gdb) p/x *0xfffffbfff07e3a17
Cannot access memory at address 0xfffffbfff07e3a17
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 11bd0498f64c..3456f2fdda52 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -291,7 +291,6 @@</span> <span class="p_context"> config ARCH_SUPPORTS_DEBUG_PAGEALLOC</span>
 config KASAN_SHADOW_OFFSET
 	hex
 	depends on KASAN
<span class="p_del">-	default 0xdff8000000000000 if X86_5LEVEL</span>
 	default 0xdffffc0000000000
 
 config HAVE_INTEL_TXT
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 88215ac16b24..d79a7ea83d05 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -15,6 +15,10 @@</span> <span class="p_context"></span>
 extern pgd_t early_top_pgt[PTRS_PER_PGD];
 extern struct range pfn_mapped[E820_MAX_ENTRIES];
 
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS == 5</span>
<span class="p_add">+p4d_t tmp_p4d_table[PTRS_PER_P4D] __initdata __aligned(PAGE_SIZE);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 static int __init map_range(struct range *range)
 {
 	unsigned long start;
<span class="p_chunk">@@ -35,8 +39,9 @@</span> <span class="p_context"> static void __init clear_pgds(unsigned long start,</span>
 			unsigned long end)
 {
 	pgd_t *pgd;
<span class="p_add">+	unsigned long pgd_end = end &amp; PGDIR_MASK;</span>
 
<span class="p_del">-	for (; start &lt; end; start += PGDIR_SIZE) {</span>
<span class="p_add">+	for (; start &lt; pgd_end; start += PGDIR_SIZE) {</span>
 		pgd = pgd_offset_k(start);
 		/*
 		 * With folded p4d, pgd_clear() is nop, use p4d_clear()
<span class="p_chunk">@@ -47,29 +52,50 @@</span> <span class="p_context"> static void __init clear_pgds(unsigned long start,</span>
 		else
 			pgd_clear(pgd);
 	}
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset_k(start);</span>
<span class="p_add">+	for (; start &lt; end; start += P4D_SIZE)</span>
<span class="p_add">+		p4d_clear(p4d_offset(pgd, start));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void __init kasan_early_p4d_populate(pgd_t *pgd,</span>
<span class="p_add">+					unsigned long addr,</span>
<span class="p_add">+					unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	unsigned long next;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		set_pgd(pgd, __pgd(_KERNPG_TABLE | __pa_nodebug(kasan_zero_p4d)));</span>
<span class="p_add">+</span>
<span class="p_add">+	/* early p4d_offset()</span>
<span class="p_add">+	 * TODO: we need helpers for this shit</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (CONFIG_PGTABLE_LEVELS == 5)</span>
<span class="p_add">+		p4d = ((p4d_t*)((__pa_nodebug(pgd-&gt;pgd) &amp; PTE_PFN_MASK) + __START_KERNEL_map))</span>
<span class="p_add">+			+ p4d_index(addr);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		p4d = (p4d_t*)pgd;</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = p4d_addr_end(addr, end);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (p4d_none(*p4d))</span>
<span class="p_add">+			set_p4d(p4d, __p4d(_KERNPG_TABLE |</span>
<span class="p_add">+					__pa_nodebug(kasan_zero_pud)));</span>
<span class="p_add">+	} while (p4d++, addr = next, addr != end &amp;&amp; p4d_none(*p4d));</span>
 }
 
 static void __init kasan_map_early_shadow(pgd_t *pgd)
 {
<span class="p_del">-	int i;</span>
<span class="p_del">-	unsigned long start = KASAN_SHADOW_START;</span>
<span class="p_add">+	unsigned long addr = KASAN_SHADOW_START &amp; PGDIR_MASK;</span>
 	unsigned long end = KASAN_SHADOW_END;
<span class="p_add">+	unsigned long next;</span>
 
<span class="p_del">-	for (i = pgd_index(start); start &lt; end; i++) {</span>
<span class="p_del">-		switch (CONFIG_PGTABLE_LEVELS) {</span>
<span class="p_del">-		case 4:</span>
<span class="p_del">-			pgd[i] = __pgd(__pa_nodebug(kasan_zero_pud) |</span>
<span class="p_del">-					_KERNPG_TABLE);</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		case 5:</span>
<span class="p_del">-			pgd[i] = __pgd(__pa_nodebug(kasan_zero_p4d) |</span>
<span class="p_del">-					_KERNPG_TABLE);</span>
<span class="p_del">-			break;</span>
<span class="p_del">-		default:</span>
<span class="p_del">-			BUILD_BUG();</span>
<span class="p_del">-		}</span>
<span class="p_del">-		start += PGDIR_SIZE;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	pgd = pgd + pgd_index(addr);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		next = pgd_addr_end(addr, end);</span>
<span class="p_add">+		kasan_early_p4d_populate(pgd, addr, next);</span>
<span class="p_add">+	} while (pgd++, addr = next, addr != end);</span>
 }
 
 #ifdef CONFIG_KASAN_INLINE
<span class="p_chunk">@@ -120,14 +146,20 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 #ifdef CONFIG_KASAN_INLINE
 	register_die_notifier(&amp;kasan_die_notifier);
 #endif
<span class="p_del">-</span>
 	memcpy(early_top_pgt, init_top_pgt, sizeof(early_top_pgt));
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS == 5</span>
<span class="p_add">+	memcpy(tmp_p4d_table, (void*)pgd_page_vaddr(*pgd_offset_k(KASAN_SHADOW_END)),</span>
<span class="p_add">+		sizeof(tmp_p4d_table));</span>
<span class="p_add">+	set_pgd(&amp;early_top_pgt[pgd_index(KASAN_SHADOW_END)],</span>
<span class="p_add">+		__pgd(__pa(tmp_p4d_table) | _KERNPG_TABLE));</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	load_cr3(early_top_pgt);
 	__flush_tlb_all();
 
<span class="p_del">-	clear_pgds(KASAN_SHADOW_START, KASAN_SHADOW_END);</span>
<span class="p_add">+	clear_pgds(KASAN_SHADOW_START &amp; PGDIR_MASK, KASAN_SHADOW_END);</span>
 
<span class="p_del">-	kasan_populate_zero_shadow((void *)KASAN_SHADOW_START,</span>
<span class="p_add">+	kasan_populate_zero_shadow((void *)(KASAN_SHADOW_START &amp; PGDIR_MASK),</span>
 			kasan_mem_to_shadow((void *)PAGE_OFFSET));
 
 	for (i = 0; i &lt; E820_MAX_ENTRIES; i++) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



