
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,05/13] arm64: kvm: deal with kernel symbols outside of linear mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,05/13] arm64: kvm: deal with kernel symbols outside of linear mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 30, 2015, 3:26 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1451489172-17420-6-git-send-email-ard.biesheuvel@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7933841/mbox/"
   >mbox</a>
|
   <a href="/patch/7933841/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7933841/">/patch/7933841/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id E11FF9F387
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 30 Dec 2015 15:26:54 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B75DB202E9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 30 Dec 2015 15:26:53 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 250F7202FF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 30 Dec 2015 15:26:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754771AbbL3P0l (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 30 Dec 2015 10:26:41 -0500
Received: from mail-wm0-f48.google.com ([74.125.82.48]:37029 &quot;EHLO
	mail-wm0-f48.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754355AbbL3P0b (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 30 Dec 2015 10:26:31 -0500
Received: by mail-wm0-f48.google.com with SMTP id f206so81610334wmf.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 30 Dec 2015 07:26:30 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=rP5wRwWfrtfCost+sG2bbv8wAg4BgFINaN01wEOAkh8=;
	b=VnJolO6Cwd+RgXjc3nBLWEJHwJlYOKRT6BuEOjpiaBqVse1j6RhVTFBbzarH5TBjyZ
	o+LX49DzXCrQXjbNJmt6T4dFMJIDBsFGuG3fse8XNib0oibqxXt7+sJ5URHLvWsSCrOK
	b1h+XJ45u9BQJguRvm8pZdwhxc5gjr6e7YUOA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=rP5wRwWfrtfCost+sG2bbv8wAg4BgFINaN01wEOAkh8=;
	b=CeOlfTMsCNzZ/bjSa4pk07MBM8TiPPIX33MkOHyZqnsvOWjtNEeW3z6pAlTkEqvKJa
	7uSeRmXIBZJsthyUd5JwPDicWdCnptK/W4YjrwAGFkGrqAzQ/Q1IJLozAhhVSWalreX8
	lNOFVG78XgJ3Srr42rVAbL7lEj1inFjkz8W59KpoukVWSo3YZ4ClPOTb5xSaYbwgbqOT
	pyy1dkRsS3tX1kL7NgmojxEgXP/KO8qt5AORrHOudbTtBkI58XO8nFS71MPdJUMigHjr
	0GBPsINYXC2e6K30/xj5nv3xKfFcqP7Qm+0vg2DHLe7wCmVNSavvF17MaKUIh8AstTyK
	YEgA==
X-Gm-Message-State: ALoCoQkOtKEgWuK3o1Uek228jDaKBgwr0My609/JImUkIwBoY5ub3GZvLpvvnbpV3IFE2sLwU4APsdFBG3AtkjYczlASOQcrZQ==
X-Received: by 10.194.120.134 with SMTP id
	lc6mr81151621wjb.130.1451489189867; 
	Wed, 30 Dec 2015 07:26:29 -0800 (PST)
Received: from localhost.localdomain (cag06-7-83-153-85-71.fbx.proxad.net.
	[83.153.85.71]) by smtp.gmail.com with ESMTPSA id
	z137sm31510865wmc.8.2015.12.30.07.26.27
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Wed, 30 Dec 2015 07:26:29 -0800 (PST)
From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
To: linux-arm-kernel@lists.infradead.org,
	kernel-hardening@lists.openwall.com, will.deacon@arm.com,
	catalin.marinas@arm.com, mark.rutland@arm.com,
	leif.lindholm@linaro.org, keescook@chromium.org,
	linux-kernel@vger.kernel.org
Cc: stuart.yoder@freescale.com, bhupesh.sharma@freescale.com,
	arnd@arndb.de, marc.zyngier@arm.com, christoffer.dall@linaro.org,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Subject: [PATCH v2 05/13] arm64: kvm: deal with kernel symbols outside of
	linear mapping
Date: Wed, 30 Dec 2015 16:26:04 +0100
Message-Id: &lt;1451489172-17420-6-git-send-email-ard.biesheuvel@linaro.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;1451489172-17420-1-git-send-email-ard.biesheuvel@linaro.org&gt;
References: &lt;1451489172-17420-1-git-send-email-ard.biesheuvel@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - Dec. 30, 2015, 3:26 p.m.</div>
<pre class="content">
KVM on arm64 uses a fixed offset between the linear mapping at EL1 and
the HYP mapping at EL2. Before we can move the kernel virtual mapping
out of the linear mapping, we have to make sure that references to kernel
symbols that are accessed via the HYP mapping are translated to their
linear equivalent.

To prevent inadvertent direct references from sneaking in later, change
the type of all extern declarations to HYP kernel symbols to the opaque
&#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays
and function references. This is not bullet proof, but at least forces the
user to take the address explicitly rather than referencing it directly.
<span class="signed-off-by">
Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
---
 arch/arm/include/asm/kvm_asm.h   |  2 ++
 arch/arm/include/asm/kvm_mmu.h   |  2 ++
 arch/arm/kvm/arm.c               |  9 +++++----
 arch/arm/kvm/mmu.c               | 12 +++++------
 arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------
 arch/arm64/include/asm/kvm_mmu.h |  2 ++
 arch/arm64/include/asm/virt.h    |  4 ----
 arch/arm64/kernel/vmlinux.lds.S  |  4 ++--
 arch/arm64/kvm/debug.c           |  4 +++-
 virt/kvm/arm/vgic-v3.c           |  2 +-
 10 files changed, 34 insertions(+), 28 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - Jan. 4, 2016, 10:08 a.m.</div>
<pre class="content">
Hi Ard,

On 30/12/15 15:26, Ard Biesheuvel wrote:
<span class="quote">&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt; linear equivalent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>

This looks good to me, a few comments below.
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt;  #define HYP_PAGE_OFFSET		PAGE_OFFSET</span>
<span class="quote">&gt;  #define KERN_TO_HYP(kva)	(kva)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define kvm_ksym_ref(kva)	(kva)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; @@ -427,7 +427,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt;  		 * shareable domain to make sure all data structures are</span>
<span class="quote">&gt;  		 * clean.</span>
<span class="quote">&gt;  		 */</span>
<span class="quote">&gt; -		kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt; +		kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt;  		__kvm_guest_enter();</span>
<span class="quote">&gt;  		vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt; +		ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt;  	pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt;  	stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt;  	hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt; -	vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt; +	vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	__cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt; +	err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt; +				  kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt;  	if (err) {</span>
<span class="quote">&gt;  		kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt;  		goto out_free_mappings;</span>
<span class="quote">&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt; +	kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>

Any chance we could bury kvm_ksym_ref in kvm_call_hyp? It may make the
change more readable, but I have the feeling it would require an
intermediate #define...
<span class="quote">
&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt; @@ -75,7 +73,7 @@ static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;  	 * anything there.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	if (kvm)</span>
<span class="quote">&gt; -		kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="quote">&gt; +		kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -1647,9 +1645,9 @@ int kvm_mmu_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int err;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="quote">&gt; -	hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="quote">&gt; -	hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="quote">&gt; +	hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="quote">&gt; +	hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="quote">&gt; +	hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>

Why don&#39;t you need to use kvm_ksym_ref here? Is the idmap treated
differently?
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * We rely on the linker script to ensure at build time that the HYP</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; index 5e377101f919..830402f847e0 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; @@ -105,24 +105,27 @@</span>
<span class="quote">&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;  struct kvm;</span>
<span class="quote">&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt; +struct kvm_ksym;</span>

And that&#39;s it? Never actually defined? That&#39;s cunning! ;-)
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  extern char __kvm_hyp_init[];</span>
<span class="quote">&gt;  extern char __kvm_hyp_init_end[];</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern char __kvm_hyp_vector[];</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_vector;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -#define	__kvm_hyp_code_start	__hyp_text_start</span>
<span class="quote">&gt; -#define	__kvm_hyp_code_end	__hyp_text_end</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_code_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern void __kvm_flush_vm_context(void);</span>
<span class="quote">&gt; -extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt; -extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_vcpu_run;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="quote">&gt; +extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="quote">&gt; +extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; index 61505676d085..0899026a2821 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; @@ -73,6 +73,8 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define KERN_TO_HYP(kva)	((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define kvm_ksym_ref(sym)	((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * We currently only support a 40bit IPA.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; @@ -50,10 +50,6 @@ static inline bool is_hyp_mode_mismatched(void)</span>
<span class="quote">&gt;  	return __boot_cpu_mode[0] != __boot_cpu_mode[1];</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -/* The section containing the hypervisor text */</span>
<span class="quote">&gt; -extern char __hyp_text_start[];</span>
<span class="quote">&gt; -extern char __hyp_text_end[];</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif /* ! __ASM__VIRT_H */</span>
<span class="quote">&gt; diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; index 363c2f529951..f935f082188d 100644</span>
<span class="quote">&gt; --- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; +++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; @@ -35,9 +35,9 @@ jiffies = jiffies_64;</span>
<span class="quote">&gt;  	VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;	\</span>
<span class="quote">&gt;  	*(.hyp.idmap.text)				\</span>
<span class="quote">&gt;  	VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;	\</span>
<span class="quote">&gt; -	VMLINUX_SYMBOL(__hyp_text_start) = .;		\</span>
<span class="quote">&gt; +	VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;	\</span>
<span class="quote">&gt;  	*(.hyp.text)					\</span>
<span class="quote">&gt; -	VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="quote">&gt; +	VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>

I have a couple of patches going in the exact opposite direction (making
arm more similar to arm64):

http://git.kernel.org/cgit/linux/kernel/git/maz/arm-platforms.git/commit/?h=kvm-arm/wsinc&amp;id=94a3d4d4ff1d8ad59f9150dfa9fdd1685ab03950
http://git.kernel.org/cgit/linux/kernel/git/maz/arm-platforms.git/commit/?h=kvm-arm/wsinc&amp;id=44aec57b62dca67cf91f425e3707f257b9bbeb18

As at least the first patch is required to convert the 32bit HYP code to
C, I&#39;d rather not change this in the 64bit code.
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  #define IDMAP_TEXT					\</span>
<span class="quote">&gt;  	. = ALIGN(SZ_4K);				\</span>
<span class="quote">&gt; diff --git a/arch/arm64/kvm/debug.c b/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt; index 47e5f0feaee8..99e5a403af4e 100644</span>
<span class="quote">&gt; --- a/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt; +++ b/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt; @@ -24,6 +24,7 @@</span>
<span class="quote">&gt;  #include &lt;asm/kvm_asm.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/kvm_arm.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/kvm_emulate.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/kvm_mmu.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -72,7 +73,8 @@ static void restore_guest_debug_regs(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void kvm_arm_init_debug(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	__this_cpu_write(mdcr_el2, kvm_call_hyp(__kvm_get_mdcr_el2));</span>
<span class="quote">&gt; +	__this_cpu_write(mdcr_el2,</span>
<span class="quote">&gt; +			 kvm_call_hyp(kvm_ksym_ref(__kvm_get_mdcr_el2)));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt; diff --git a/virt/kvm/arm/vgic-v3.c b/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt; index 487d6357b7e7..58f5a6521307 100644</span>
<span class="quote">&gt; --- a/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt; +++ b/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt; @@ -247,7 +247,7 @@ int vgic_v3_probe(struct device_node *vgic_node,</span>
<span class="quote">&gt;  		goto out;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	ich_vtr_el2 = kvm_call_hyp(__vgic_v3_get_ich_vtr_el2);</span>
<span class="quote">&gt; +	ich_vtr_el2 = kvm_call_hyp(kvm_ksym_ref(__vgic_v3_get_ich_vtr_el2));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * The ListRegs field is 5 bits, but there is a architectural</span>
<span class="quote">&gt; </span>

Thanks,

	M.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - Jan. 4, 2016, 10:31 a.m.</div>
<pre class="content">
On 4 January 2016 at 11:08, Marc Zyngier &lt;marc.zyngier@arm.com&gt; wrote:
<span class="quote">&gt; Hi Ard,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 30/12/15 15:26, Ard Biesheuvel wrote:</span>
<span class="quote">&gt;&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt;&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt;&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt;&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt;&gt; linear equivalent.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt;&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt;&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt;&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt;&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This looks good to me, a few comments below.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt;&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt;&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt;&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt;&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt;&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt;&gt;  #define HYP_PAGE_OFFSET              PAGE_OFFSET</span>
<span class="quote">&gt;&gt;  #define KERN_TO_HYP(kva)     (kva)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#define kvm_ksym_ref(kva)    (kva)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt;&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; @@ -427,7 +42You can use it, but you don&#39;t have to, since yo7,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;                * shareable domain to make sure all data structures are</span>
<span class="quote">&gt;&gt;                * clean.</span>
<span class="quote">&gt;&gt;                */</span>
<span class="quote">&gt;&gt; -             kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt;&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt;&gt;               __kvm_guest_enter();</span>
<span class="quote">&gt;&gt;               vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -             ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt;&gt; +             ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;               vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt;&gt;               /*</span>
<span class="quote">&gt;&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt;&gt;       pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt;&gt;       stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt;&gt;       hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt;&gt; -     vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt;&gt; +     vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       __cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt; -     err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt;&gt; +     err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt;&gt; +                               kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt;&gt;       if (err) {</span>
<span class="quote">&gt;&gt;               kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt;&gt;               goto out_free_mappings;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt;&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt;&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt;&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt;&gt; +     kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Any chance we could bury kvm_ksym_ref in kvm_call_hyp? It may make the</span>
<span class="quote">&gt; change more readable, but I have the feeling it would require an</span>
<span class="quote">&gt; intermediate #define...</span>
<span class="quote">&gt;</span>

Yes, we&#39;d have to rename the actual kvm_call_hyp definition so we can
wrap it in a macro

And the call in __cpu_init_hyp_mode() would need to omit the macro,
since it passes a pointer into the linear mapping, not a kernel
symbol.
So if you think that&#39;s ok, I&#39;m happy to change that.
<span class="quote">
&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;&gt; @@ -75,7 +73,7 @@ static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;&gt;        * anything there.</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt;       if (kvm)</span>
<span class="quote">&gt;&gt; -             kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="quote">&gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt; @@ -1647,9 +1645,9 @@ int kvm_mmu_init(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;       int err;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="quote">&gt;&gt; -     hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="quote">&gt;&gt; -     hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Why don&#39;t you need to use kvm_ksym_ref here? Is the idmap treated</span>
<span class="quote">&gt; differently?</span>
<span class="quote">&gt;</span>

No, but we are taking the physical address, which ultimately produces
the same value whether we use kvm_ksym_ref() or not.
<span class="quote">
&gt;&gt;</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * We rely on the linker script to ensure at build time that the HYP</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; index 5e377101f919..830402f847e0 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; @@ -105,24 +105,27 @@</span>
<span class="quote">&gt;&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;&gt;  struct kvm;</span>
<span class="quote">&gt;&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt;&gt; +struct kvm_ksym;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And that&#39;s it? Never actually defined? That&#39;s cunning! ;-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  extern char __kvm_hyp_init[];</span>
<span class="quote">&gt;&gt;  extern char __kvm_hyp_init_end[];</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern char __kvm_hyp_vector[];</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_vector;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -#define      __kvm_hyp_code_start    __hyp_text_start</span>
<span class="quote">&gt;&gt; -#define      __kvm_hyp_code_end      __hyp_text_end</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_end;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern void __kvm_flush_vm_context(void);</span>
<span class="quote">&gt;&gt; -extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;&gt; -extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_vcpu_run;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; index 61505676d085..0899026a2821 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; @@ -73,6 +73,8 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define KERN_TO_HYP(kva)     ((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#define kvm_ksym_ref(sym)    ((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * We currently only support a 40bit IPA.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; @@ -50,10 +50,6 @@ static inline bool is_hyp_mode_mismatched(void)</span>
<span class="quote">&gt;&gt;       return __boot_cpu_mode[0] != __boot_cpu_mode[1];</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -/* The section containing the hypervisor text */</span>
<span class="quote">&gt;&gt; -extern char __hyp_text_start[];</span>
<span class="quote">&gt;&gt; -extern char __hyp_text_end[];</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif /* ! __ASM__VIRT_H */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; index 363c2f529951..f935f082188d 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; @@ -35,9 +35,9 @@ jiffies = jiffies_64;</span>
<span class="quote">&gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;     \</span>
<span class="quote">&gt;&gt;       *(.hyp.idmap.text)                              \</span>
<span class="quote">&gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;       \</span>
<span class="quote">&gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_start) = .;           \</span>
<span class="quote">&gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;       \</span>
<span class="quote">&gt;&gt;       *(.hyp.text)                                    \</span>
<span class="quote">&gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="quote">&gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I have a couple of patches going in the exact opposite direction (making</span>
<span class="quote">&gt; arm more similar to arm64):</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; http://git.kernel.org/cgit/linux/kernel/git/maz/arm-platforms.git/commit/?h=kvm-arm/wsinc&amp;id=94a3d4d4ff1d8ad59f9150dfa9fdd1685ab03950</span>
<span class="quote">&gt; http://git.kernel.org/cgit/linux/kernel/git/maz/arm-platforms.git/commit/?h=kvm-arm/wsinc&amp;id=44aec57b62dca67cf91f425e3707f257b9bbeb18</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As at least the first patch is required to convert the 32bit HYP code to</span>
<span class="quote">&gt; C, I&#39;d rather not change this in the 64bit code.</span>
<span class="quote">&gt;</span>

OK, I will align with those changes instead.
<span class="quote">

&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define IDMAP_TEXT                                   \</span>
<span class="quote">&gt;&gt;       . = ALIGN(SZ_4K);                               \</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/kvm/debug.c b/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt;&gt; index 47e5f0feaee8..99e5a403af4e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/kvm/debug.c</span>
<span class="quote">&gt;&gt; @@ -24,6 +24,7 @@</span>
<span class="quote">&gt;&gt;  #include &lt;asm/kvm_asm.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/kvm_arm.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/kvm_emulate.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/kvm_mmu.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -72,7 +73,8 @@ static void restore_guest_debug_regs(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  void kvm_arm_init_debug(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     __this_cpu_write(mdcr_el2, kvm_call_hyp(__kvm_get_mdcr_el2));</span>
<span class="quote">&gt;&gt; +     __this_cpu_write(mdcr_el2,</span>
<span class="quote">&gt;&gt; +                      kvm_call_hyp(kvm_ksym_ref(__kvm_get_mdcr_el2)));</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /**</span>
<span class="quote">&gt;&gt; diff --git a/virt/kvm/arm/vgic-v3.c b/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt;&gt; index 487d6357b7e7..58f5a6521307 100644</span>
<span class="quote">&gt;&gt; --- a/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt;&gt; +++ b/virt/kvm/arm/vgic-v3.c</span>
<span class="quote">&gt;&gt; @@ -247,7 +247,7 @@ int vgic_v3_probe(struct device_node *vgic_node,</span>
<span class="quote">&gt;&gt;               goto out;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     ich_vtr_el2 = kvm_call_hyp(__vgic_v3_get_ich_vtr_el2);</span>
<span class="quote">&gt;&gt; +     ich_vtr_el2 = kvm_call_hyp(kvm_ksym_ref(__vgic_v3_get_ich_vtr_el2));</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * The ListRegs field is 5 bits, but there is a architectural</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         M.</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Jazz is not dead. It just smells funny...</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28962">Marc Zyngier</a> - Jan. 4, 2016, 11:02 a.m.</div>
<pre class="content">
On 04/01/16 10:31, Ard Biesheuvel wrote:
<span class="quote">&gt; On 4 January 2016 at 11:08, Marc Zyngier &lt;marc.zyngier@arm.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Hi Ard,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 30/12/15 15:26, Ard Biesheuvel wrote:</span>
<span class="quote">&gt;&gt;&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt;&gt;&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt;&gt;&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt;&gt;&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt;&gt;&gt; linear equivalent.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt;&gt;&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt;&gt;&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt;&gt;&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt;&gt;&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This looks good to me, a few comments below.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt;&gt;&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt;&gt;&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt;&gt;&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt;&gt;&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt;&gt;&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt;&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt;&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;&gt;&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt;&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt;&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt;&gt;&gt;  #define HYP_PAGE_OFFSET              PAGE_OFFSET</span>
<span class="quote">&gt;&gt;&gt;  #define KERN_TO_HYP(kva)     (kva)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; +#define kvm_ksym_ref(kva)    (kva)</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt;&gt;&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt;&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt;&gt; @@ -427,7 +42You can use it, but you don&#39;t have to, since yo7,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;&gt;                * shareable domain to make sure all data structures are</span>
<span class="quote">&gt;&gt;&gt;                * clean.</span>
<span class="quote">&gt;&gt;&gt;                */</span>
<span class="quote">&gt;&gt;&gt; -             kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt;&gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;       kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt;&gt;&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt;&gt;&gt;               __kvm_guest_enter();</span>
<span class="quote">&gt;&gt;&gt;               vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; -             ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt;&gt;&gt; +             ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;               vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt;&gt;&gt;               /*</span>
<span class="quote">&gt;&gt;&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt;&gt;&gt;       pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt;&gt;&gt;       stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt;&gt;&gt;       hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt;&gt;&gt; -     vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt;&gt;&gt; +     vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;       __cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt;&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;&gt;        * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt;&gt;&gt;        */</span>
<span class="quote">&gt;&gt;&gt; -     err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt;&gt;&gt; +     err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt;&gt;&gt; +                               kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt;&gt;&gt;       if (err) {</span>
<span class="quote">&gt;&gt;&gt;               kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt;&gt;&gt;               goto out_free_mappings;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt;&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt;&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt;&gt; -</span>
<span class="quote">&gt;&gt;&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt;&gt;&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt;&gt;&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt;&gt;&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt;&gt;&gt;   */</span>
<span class="quote">&gt;&gt;&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt; -     kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt;&gt;&gt; +     kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Any chance we could bury kvm_ksym_ref in kvm_call_hyp? It may make the</span>
<span class="quote">&gt;&gt; change more readable, but I have the feeling it would require an</span>
<span class="quote">&gt;&gt; intermediate #define...</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, we&#39;d have to rename the actual kvm_call_hyp definition so we can</span>
<span class="quote">&gt; wrap it in a macro</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And the call in __cpu_init_hyp_mode() would need to omit the macro,</span>
<span class="quote">&gt; since it passes a pointer into the linear mapping, not a kernel</span>
<span class="quote">&gt; symbol.</span>
<span class="quote">&gt; So if you think that&#39;s ok, I&#39;m happy to change that.</span>

That&#39;d be great, thanks.

	M.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68151">Christoffer Dall</a> - Jan. 5, 2016, 2:41 p.m.</div>
<pre class="content">
On Wed, Dec 30, 2015 at 04:26:04PM +0100, Ard Biesheuvel wrote:
<span class="quote">&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt; linear equivalent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt;  #define HYP_PAGE_OFFSET		PAGE_OFFSET</span>
<span class="quote">&gt;  #define KERN_TO_HYP(kva)	(kva)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define kvm_ksym_ref(kva)	(kva)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; @@ -427,7 +427,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt;  		 * shareable domain to make sure all data structures are</span>
<span class="quote">&gt;  		 * clean.</span>
<span class="quote">&gt;  		 */</span>
<span class="quote">&gt; -		kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt; +		kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt;  		__kvm_guest_enter();</span>
<span class="quote">&gt;  		vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt; +		ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt;  	pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt;  	stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt;  	hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt; -	vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt; +	vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	__cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt; +	err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt; +				  kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt;  	if (err) {</span>
<span class="quote">&gt;  		kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt;  		goto out_free_mappings;</span>
<span class="quote">&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt; +	kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt; @@ -75,7 +73,7 @@ static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;  	 * anything there.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	if (kvm)</span>
<span class="quote">&gt; -		kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="quote">&gt; +		kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -1647,9 +1645,9 @@ int kvm_mmu_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int err;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="quote">&gt; -	hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="quote">&gt; -	hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="quote">&gt; +	hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="quote">&gt; +	hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="quote">&gt; +	hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * We rely on the linker script to ensure at build time that the HYP</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; index 5e377101f919..830402f847e0 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; @@ -105,24 +105,27 @@</span>
<span class="quote">&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;  struct kvm;</span>
<span class="quote">&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt; +struct kvm_ksym;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern char __kvm_hyp_init[];</span>
<span class="quote">&gt;  extern char __kvm_hyp_init_end[];</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern char __kvm_hyp_vector[];</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_vector;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -#define	__kvm_hyp_code_start	__hyp_text_start</span>
<span class="quote">&gt; -#define	__kvm_hyp_code_end	__hyp_text_end</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_hyp_code_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern void __kvm_flush_vm_context(void);</span>
<span class="quote">&gt; -extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt; -extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_vcpu_run;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="quote">&gt; +extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="quote">&gt; +extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; index 61505676d085..0899026a2821 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; @@ -73,6 +73,8 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define KERN_TO_HYP(kva)	((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define kvm_ksym_ref(sym)	((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * We currently only support a 40bit IPA.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; @@ -50,10 +50,6 @@ static inline bool is_hyp_mode_mismatched(void)</span>
<span class="quote">&gt;  	return __boot_cpu_mode[0] != __boot_cpu_mode[1];</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -/* The section containing the hypervisor text */</span>
<span class="quote">&gt; -extern char __hyp_text_start[];</span>
<span class="quote">&gt; -extern char __hyp_text_end[];</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif /* ! __ASM__VIRT_H */</span>
<span class="quote">&gt; diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; index 363c2f529951..f935f082188d 100644</span>
<span class="quote">&gt; --- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; +++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; @@ -35,9 +35,9 @@ jiffies = jiffies_64;</span>
<span class="quote">&gt;  	VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;	\</span>
<span class="quote">&gt;  	*(.hyp.idmap.text)				\</span>
<span class="quote">&gt;  	VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;	\</span>
<span class="quote">&gt; -	VMLINUX_SYMBOL(__hyp_text_start) = .;		\</span>
<span class="quote">&gt; +	VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;	\</span>
<span class="quote">&gt;  	*(.hyp.text)					\</span>
<span class="quote">&gt; -	VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="quote">&gt; +	VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>

why this rename?

-Christoffer
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - Jan. 5, 2016, 2:51 p.m.</div>
<pre class="content">
On 5 January 2016 at 15:41, Christoffer Dall
&lt;christoffer.dall@linaro.org&gt; wrote:
<span class="quote">&gt; On Wed, Dec 30, 2015 at 04:26:04PM +0100, Ard Biesheuvel wrote:</span>
<span class="quote">&gt;&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt;&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt;&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt;&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt;&gt; linear equivalent.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt;&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt;&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt;&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt;&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt;&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt;&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt;&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt;&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt;&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt;&gt;  #define HYP_PAGE_OFFSET              PAGE_OFFSET</span>
<span class="quote">&gt;&gt;  #define KERN_TO_HYP(kva)     (kva)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#define kvm_ksym_ref(kva)    (kva)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt;&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt;&gt; @@ -427,7 +427,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;                * shareable domain to make sure all data structures are</span>
<span class="quote">&gt;&gt;                * clean.</span>
<span class="quote">&gt;&gt;                */</span>
<span class="quote">&gt;&gt; -             kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt;&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt;&gt;               __kvm_guest_enter();</span>
<span class="quote">&gt;&gt;               vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -             ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt;&gt; +             ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;               vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt;&gt;               /*</span>
<span class="quote">&gt;&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt;&gt;       pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt;&gt;       stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt;&gt;       hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt;&gt; -     vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt;&gt; +     vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       __cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt; -     err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt;&gt; +     err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt;&gt; +                               kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt;&gt;       if (err) {</span>
<span class="quote">&gt;&gt;               kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt;&gt;               goto out_free_mappings;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt;&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt;&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt;&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt;&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt;&gt; +     kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;&gt; @@ -75,7 +73,7 @@ static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt;&gt;        * anything there.</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt;       if (kvm)</span>
<span class="quote">&gt;&gt; -             kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="quote">&gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt; @@ -1647,9 +1645,9 @@ int kvm_mmu_init(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;       int err;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="quote">&gt;&gt; -     hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="quote">&gt;&gt; -     hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="quote">&gt;&gt; +     hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * We rely on the linker script to ensure at build time that the HYP</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; index 5e377101f919..830402f847e0 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; @@ -105,24 +105,27 @@</span>
<span class="quote">&gt;&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;&gt;  struct kvm;</span>
<span class="quote">&gt;&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt;&gt; +struct kvm_ksym;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  extern char __kvm_hyp_init[];</span>
<span class="quote">&gt;&gt;  extern char __kvm_hyp_init_end[];</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern char __kvm_hyp_vector[];</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_vector;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -#define      __kvm_hyp_code_start    __hyp_text_start</span>
<span class="quote">&gt;&gt; -#define      __kvm_hyp_code_end      __hyp_text_end</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_end;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern void __kvm_flush_vm_context(void);</span>
<span class="quote">&gt;&gt; -extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt;&gt; -extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_vcpu_run;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; index 61505676d085..0899026a2821 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt;&gt; @@ -73,6 +73,8 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #define KERN_TO_HYP(kva)     ((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#define kvm_ksym_ref(sym)    ((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  /*</span>
<span class="quote">&gt;&gt;   * We currently only support a 40bit IPA.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt;&gt; @@ -50,10 +50,6 @@ static inline bool is_hyp_mode_mismatched(void)</span>
<span class="quote">&gt;&gt;       return __boot_cpu_mode[0] != __boot_cpu_mode[1];</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -/* The section containing the hypervisor text */</span>
<span class="quote">&gt;&gt; -extern char __hyp_text_start[];</span>
<span class="quote">&gt;&gt; -extern char __hyp_text_end[];</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif /* ! __ASM__VIRT_H */</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; index 363c2f529951..f935f082188d 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt;&gt; @@ -35,9 +35,9 @@ jiffies = jiffies_64;</span>
<span class="quote">&gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;     \</span>
<span class="quote">&gt;&gt;       *(.hyp.idmap.text)                              \</span>
<span class="quote">&gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;       \</span>
<span class="quote">&gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_start) = .;           \</span>
<span class="quote">&gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;       \</span>
<span class="quote">&gt;&gt;       *(.hyp.text)                                    \</span>
<span class="quote">&gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="quote">&gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; why this rename?</span>
<span class="quote">&gt;</span>

I already got rid of it based on Marc&#39;s feedback. The only reason was
to align between ARM and arm64, but he is already doing the same in
the opposite direction
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=68151">Christoffer Dall</a> - Jan. 5, 2016, 2:56 p.m.</div>
<pre class="content">
On Tue, Jan 05, 2016 at 03:51:58PM +0100, Ard Biesheuvel wrote:
<span class="quote">&gt; On 5 January 2016 at 15:41, Christoffer Dall</span>
<span class="quote">&gt; &lt;christoffer.dall@linaro.org&gt; wrote:</span>
<span class="quote">&gt; &gt; On Wed, Dec 30, 2015 at 04:26:04PM +0100, Ard Biesheuvel wrote:</span>
<span class="quote">&gt; &gt;&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt; &gt;&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt; &gt;&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt; &gt;&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt; &gt;&gt; linear equivalent.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt; &gt;&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt; &gt;&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt; &gt;&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt; &gt;&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt;  arch/arm/include/asm/kvm_asm.h   |  2 ++</span>
<span class="quote">&gt; &gt;&gt;  arch/arm/include/asm/kvm_mmu.h   |  2 ++</span>
<span class="quote">&gt; &gt;&gt;  arch/arm/kvm/arm.c               |  9 +++++----</span>
<span class="quote">&gt; &gt;&gt;  arch/arm/kvm/mmu.c               | 12 +++++------</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/include/asm/kvm_asm.h | 21 +++++++++++---------</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/include/asm/kvm_mmu.h |  2 ++</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/include/asm/virt.h    |  4 ----</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/kernel/vmlinux.lds.S  |  4 ++--</span>
<span class="quote">&gt; &gt;&gt;  arch/arm64/kvm/debug.c           |  4 +++-</span>
<span class="quote">&gt; &gt;&gt;  virt/kvm/arm/vgic-v3.c           |  2 +-</span>
<span class="quote">&gt; &gt;&gt;  10 files changed, 34 insertions(+), 28 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; @@ -99,6 +99,8 @@ extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt; &gt;&gt;  extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt; &gt;&gt;  #endif</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  #endif /* __ARM_KVM_ASM_H__ */</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; index 405aa1883307..412b363f79e9 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; @@ -30,6 +30,8 @@</span>
<span class="quote">&gt; &gt;&gt;  #define HYP_PAGE_OFFSET              PAGE_OFFSET</span>
<span class="quote">&gt; &gt;&gt;  #define KERN_TO_HYP(kva)     (kva)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; +#define kvm_ksym_ref(kva)    (kva)</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;  /*</span>
<span class="quote">&gt; &gt;&gt;   * Our virtual mapping for the boot-time MMU-enable code. Must be</span>
<span class="quote">&gt; &gt;&gt;   * shared across all the page-tables. Conveniently, we use the vectors</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; &gt;&gt; index e06fd299de08..014b542ea658 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm/kvm/arm.c</span>
<span class="quote">&gt; &gt;&gt; @@ -427,7 +427,7 @@ static void update_vttbr(struct kvm *kvm)</span>
<span class="quote">&gt; &gt;&gt;                * shareable domain to make sure all data structures are</span>
<span class="quote">&gt; &gt;&gt;                * clean.</span>
<span class="quote">&gt; &gt;&gt;                */</span>
<span class="quote">&gt; &gt;&gt; -             kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="quote">&gt; &gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
<span class="quote">&gt; &gt;&gt;       }</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;       kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);</span>
<span class="quote">&gt; &gt;&gt; @@ -600,7 +600,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
<span class="quote">&gt; &gt;&gt;               __kvm_guest_enter();</span>
<span class="quote">&gt; &gt;&gt;               vcpu-&gt;mode = IN_GUEST_MODE;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -             ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="quote">&gt; &gt;&gt; +             ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;               vcpu-&gt;mode = OUTSIDE_GUEST_MODE;</span>
<span class="quote">&gt; &gt;&gt;               /*</span>
<span class="quote">&gt; &gt;&gt; @@ -969,7 +969,7 @@ static void cpu_init_hyp_mode(void *dummy)</span>
<span class="quote">&gt; &gt;&gt;       pgd_ptr = kvm_mmu_get_httbr();</span>
<span class="quote">&gt; &gt;&gt;       stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);</span>
<span class="quote">&gt; &gt;&gt;       hyp_stack_ptr = stack_page + PAGE_SIZE;</span>
<span class="quote">&gt; &gt;&gt; -     vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="quote">&gt; &gt;&gt; +     vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;       __cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; @@ -1061,7 +1061,8 @@ static int init_hyp_mode(void)</span>
<span class="quote">&gt; &gt;&gt;       /*</span>
<span class="quote">&gt; &gt;&gt;        * Map the Hyp-code called directly from the host</span>
<span class="quote">&gt; &gt;&gt;        */</span>
<span class="quote">&gt; &gt;&gt; -     err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="quote">&gt; &gt;&gt; +     err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="quote">&gt; &gt;&gt; +                               kvm_ksym_ref(__kvm_hyp_code_end));</span>
<span class="quote">&gt; &gt;&gt;       if (err) {</span>
<span class="quote">&gt; &gt;&gt;               kvm_err(&quot;Cannot map world-switch code\n&quot;);</span>
<span class="quote">&gt; &gt;&gt;               goto out_free_mappings;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; &gt;&gt; index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm/kvm/mmu.c</span>
<span class="quote">&gt; &gt;&gt; @@ -31,8 +31,6 @@</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  #include &quot;trace.h&quot;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;  static pgd_t *boot_hyp_pgd;</span>
<span class="quote">&gt; &gt;&gt;  static pgd_t *hyp_pgd;</span>
<span class="quote">&gt; &gt;&gt;  static pgd_t *merged_hyp_pgd;</span>
<span class="quote">&gt; &gt;&gt; @@ -63,7 +61,7 @@ static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
<span class="quote">&gt; &gt;&gt;   */</span>
<span class="quote">&gt; &gt;&gt;  void kvm_flush_remote_tlbs(struct kvm *kvm)</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt; -     kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="quote">&gt; &gt;&gt; +     kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt; &gt;&gt; @@ -75,7 +73,7 @@ static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
<span class="quote">&gt; &gt;&gt;        * anything there.</span>
<span class="quote">&gt; &gt;&gt;        */</span>
<span class="quote">&gt; &gt;&gt;       if (kvm)</span>
<span class="quote">&gt; &gt;&gt; -             kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="quote">&gt; &gt;&gt; +             kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  /*</span>
<span class="quote">&gt; &gt;&gt; @@ -1647,9 +1645,9 @@ int kvm_mmu_init(void)</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt;       int err;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -     hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="quote">&gt; &gt;&gt; -     hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="quote">&gt; &gt;&gt; -     hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="quote">&gt; &gt;&gt; +     hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="quote">&gt; &gt;&gt; +     hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="quote">&gt; &gt;&gt; +     hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;       /*</span>
<span class="quote">&gt; &gt;&gt;        * We rely on the linker script to ensure at build time that the HYP</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; index 5e377101f919..830402f847e0 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; &gt;&gt; @@ -105,24 +105,27 @@</span>
<span class="quote">&gt; &gt;&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt; &gt;&gt;  struct kvm;</span>
<span class="quote">&gt; &gt;&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt; &gt;&gt; +struct kvm_ksym;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  extern char __kvm_hyp_init[];</span>
<span class="quote">&gt; &gt;&gt;  extern char __kvm_hyp_init_end[];</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern char __kvm_hyp_vector[];</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_hyp_vector;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -#define      __kvm_hyp_code_start    __hyp_text_start</span>
<span class="quote">&gt; &gt;&gt; -#define      __kvm_hyp_code_end      __hyp_text_end</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_hyp_code_end;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern void __kvm_flush_vm_context(void);</span>
<span class="quote">&gt; &gt;&gt; -extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="quote">&gt; &gt;&gt; -extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_vcpu_run;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  #endif</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; index 61505676d085..0899026a2821 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="quote">&gt; &gt;&gt; @@ -73,6 +73,8 @@</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  #define KERN_TO_HYP(kva)     ((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; +#define kvm_ksym_ref(sym)    ((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;  /*</span>
<span class="quote">&gt; &gt;&gt;   * We currently only support a 40bit IPA.</span>
<span class="quote">&gt; &gt;&gt;   */</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; &gt;&gt; index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/include/asm/virt.h</span>
<span class="quote">&gt; &gt;&gt; @@ -50,10 +50,6 @@ static inline bool is_hyp_mode_mismatched(void)</span>
<span class="quote">&gt; &gt;&gt;       return __boot_cpu_mode[0] != __boot_cpu_mode[1];</span>
<span class="quote">&gt; &gt;&gt;  }</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; -/* The section containing the hypervisor text */</span>
<span class="quote">&gt; &gt;&gt; -extern char __hyp_text_start[];</span>
<span class="quote">&gt; &gt;&gt; -extern char __hyp_text_end[];</span>
<span class="quote">&gt; &gt;&gt; -</span>
<span class="quote">&gt; &gt;&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  #endif /* ! __ASM__VIRT_H */</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; &gt;&gt; index 363c2f529951..f935f082188d 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="quote">&gt; &gt;&gt; @@ -35,9 +35,9 @@ jiffies = jiffies_64;</span>
<span class="quote">&gt; &gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;     \</span>
<span class="quote">&gt; &gt;&gt;       *(.hyp.idmap.text)                              \</span>
<span class="quote">&gt; &gt;&gt;       VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;       \</span>
<span class="quote">&gt; &gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_start) = .;           \</span>
<span class="quote">&gt; &gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;       \</span>
<span class="quote">&gt; &gt;&gt;       *(.hyp.text)                                    \</span>
<span class="quote">&gt; &gt;&gt; -     VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="quote">&gt; &gt;&gt; +     VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; why this rename?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I already got rid of it based on Marc&#39;s feedback. The only reason was</span>
<span class="quote">&gt; to align between ARM and arm64, but he is already doing the same in</span>
<span class="quote">&gt; the opposite direction</span>

ah, now I understand what Marc was referring to in his comment, thanks.

-Christoffer
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -99,6 +99,8 @@</span> <span class="p_context"> extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
 extern void __kvm_tlb_flush_vmid(struct kvm *kvm);
 
 extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);
<span class="p_add">+</span>
<span class="p_add">+extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
 #endif
 
 #endif /* __ARM_KVM_ASM_H__ */
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">index 405aa1883307..412b363f79e9 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -30,6 +30,8 @@</span> <span class="p_context"></span>
 #define HYP_PAGE_OFFSET		PAGE_OFFSET
 #define KERN_TO_HYP(kva)	(kva)
 
<span class="p_add">+#define kvm_ksym_ref(kva)	(kva)</span>
<span class="p_add">+</span>
 /*
  * Our virtual mapping for the boot-time MMU-enable code. Must be
  * shared across all the page-tables. Conveniently, we use the vectors
<span class="p_header">diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="p_header">index e06fd299de08..014b542ea658 100644</span>
<span class="p_header">--- a/arch/arm/kvm/arm.c</span>
<span class="p_header">+++ b/arch/arm/kvm/arm.c</span>
<span class="p_chunk">@@ -427,7 +427,7 @@</span> <span class="p_context"> static void update_vttbr(struct kvm *kvm)</span>
 		 * shareable domain to make sure all data structures are
 		 * clean.
 		 */
<span class="p_del">-		kvm_call_hyp(__kvm_flush_vm_context);</span>
<span class="p_add">+		kvm_call_hyp(kvm_ksym_ref(__kvm_flush_vm_context));</span>
 	}
 
 	kvm-&gt;arch.vmid_gen = atomic64_read(&amp;kvm_vmid_gen);
<span class="p_chunk">@@ -600,7 +600,7 @@</span> <span class="p_context"> int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)</span>
 		__kvm_guest_enter();
 		vcpu-&gt;mode = IN_GUEST_MODE;
 
<span class="p_del">-		ret = kvm_call_hyp(__kvm_vcpu_run, vcpu);</span>
<span class="p_add">+		ret = kvm_call_hyp(kvm_ksym_ref(__kvm_vcpu_run), vcpu);</span>
 
 		vcpu-&gt;mode = OUTSIDE_GUEST_MODE;
 		/*
<span class="p_chunk">@@ -969,7 +969,7 @@</span> <span class="p_context"> static void cpu_init_hyp_mode(void *dummy)</span>
 	pgd_ptr = kvm_mmu_get_httbr();
 	stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);
 	hyp_stack_ptr = stack_page + PAGE_SIZE;
<span class="p_del">-	vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="p_add">+	vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
 
 	__cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);
 
<span class="p_chunk">@@ -1061,7 +1061,8 @@</span> <span class="p_context"> static int init_hyp_mode(void)</span>
 	/*
 	 * Map the Hyp-code called directly from the host
 	 */
<span class="p_del">-	err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="p_add">+	err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="p_add">+				  kvm_ksym_ref(__kvm_hyp_code_end));</span>
 	if (err) {
 		kvm_err(&quot;Cannot map world-switch code\n&quot;);
 		goto out_free_mappings;
<span class="p_header">diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="p_header">index 7dace909d5cf..7c448b943e3a 100644</span>
<span class="p_header">--- a/arch/arm/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/kvm/mmu.c</span>
<span class="p_chunk">@@ -31,8 +31,6 @@</span> <span class="p_context"></span>
 
 #include &quot;trace.h&quot;
 
<span class="p_del">-extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="p_del">-</span>
 static pgd_t *boot_hyp_pgd;
 static pgd_t *hyp_pgd;
 static pgd_t *merged_hyp_pgd;
<span class="p_chunk">@@ -63,7 +61,7 @@</span> <span class="p_context"> static bool memslot_is_logging(struct kvm_memory_slot *memslot)</span>
  */
 void kvm_flush_remote_tlbs(struct kvm *kvm)
 {
<span class="p_del">-	kvm_call_hyp(__kvm_tlb_flush_vmid, kvm);</span>
<span class="p_add">+	kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid), kvm);</span>
 }
 
 static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)
<span class="p_chunk">@@ -75,7 +73,7 @@</span> <span class="p_context"> static void kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa)</span>
 	 * anything there.
 	 */
 	if (kvm)
<span class="p_del">-		kvm_call_hyp(__kvm_tlb_flush_vmid_ipa, kvm, ipa);</span>
<span class="p_add">+		kvm_call_hyp(kvm_ksym_ref(__kvm_tlb_flush_vmid_ipa), kvm, ipa);</span>
 }
 
 /*
<span class="p_chunk">@@ -1647,9 +1645,9 @@</span> <span class="p_context"> int kvm_mmu_init(void)</span>
 {
 	int err;
 
<span class="p_del">-	hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="p_del">-	hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="p_del">-	hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="p_add">+	hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="p_add">+	hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="p_add">+	hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
 
 	/*
 	 * We rely on the linker script to ensure at build time that the HYP
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">index 5e377101f919..830402f847e0 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -105,24 +105,27 @@</span> <span class="p_context"></span>
 #ifndef __ASSEMBLY__
 struct kvm;
 struct kvm_vcpu;
<span class="p_add">+struct kvm_ksym;</span>
 
 extern char __kvm_hyp_init[];
 extern char __kvm_hyp_init_end[];
 
<span class="p_del">-extern char __kvm_hyp_vector[];</span>
<span class="p_add">+extern struct kvm_ksym __kvm_hyp_vector;</span>
 
<span class="p_del">-#define	__kvm_hyp_code_start	__hyp_text_start</span>
<span class="p_del">-#define	__kvm_hyp_code_end	__hyp_text_end</span>
<span class="p_add">+extern struct kvm_ksym __kvm_hyp_code_start;</span>
<span class="p_add">+extern struct kvm_ksym __kvm_hyp_code_end;</span>
 
<span class="p_del">-extern void __kvm_flush_vm_context(void);</span>
<span class="p_del">-extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="p_del">-extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="p_add">+extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="p_add">+extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="p_add">+extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
 
<span class="p_del">-extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="p_add">+extern struct kvm_ksym __kvm_vcpu_run;</span>
 
<span class="p_del">-extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="p_add">+extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
 
<span class="p_del">-extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="p_add">+extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="p_add">+</span>
<span class="p_add">+extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
 
 #endif
 
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">index 61505676d085..0899026a2821 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -73,6 +73,8 @@</span> <span class="p_context"></span>
 
 #define KERN_TO_HYP(kva)	((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)
 
<span class="p_add">+#define kvm_ksym_ref(sym)	((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="p_add">+</span>
 /*
  * We currently only support a 40bit IPA.
  */
<span class="p_header">diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="p_header">index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/virt.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/virt.h</span>
<span class="p_chunk">@@ -50,10 +50,6 @@</span> <span class="p_context"> static inline bool is_hyp_mode_mismatched(void)</span>
 	return __boot_cpu_mode[0] != __boot_cpu_mode[1];
 }
 
<span class="p_del">-/* The section containing the hypervisor text */</span>
<span class="p_del">-extern char __hyp_text_start[];</span>
<span class="p_del">-extern char __hyp_text_end[];</span>
<span class="p_del">-</span>
 #endif /* __ASSEMBLY__ */
 
 #endif /* ! __ASM__VIRT_H */
<span class="p_header">diff --git a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="p_header">index 363c2f529951..f935f082188d 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/arm64/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -35,9 +35,9 @@</span> <span class="p_context"> jiffies = jiffies_64;</span>
 	VMLINUX_SYMBOL(__hyp_idmap_text_start) = .;	\
 	*(.hyp.idmap.text)				\
 	VMLINUX_SYMBOL(__hyp_idmap_text_end) = .;	\
<span class="p_del">-	VMLINUX_SYMBOL(__hyp_text_start) = .;		\</span>
<span class="p_add">+	VMLINUX_SYMBOL(__kvm_hyp_code_start) = .;	\</span>
 	*(.hyp.text)					\
<span class="p_del">-	VMLINUX_SYMBOL(__hyp_text_end) = .;</span>
<span class="p_add">+	VMLINUX_SYMBOL(__kvm_hyp_code_end) = .;</span>
 
 #define IDMAP_TEXT					\
 	. = ALIGN(SZ_4K);				\
<span class="p_header">diff --git a/arch/arm64/kvm/debug.c b/arch/arm64/kvm/debug.c</span>
<span class="p_header">index 47e5f0feaee8..99e5a403af4e 100644</span>
<span class="p_header">--- a/arch/arm64/kvm/debug.c</span>
<span class="p_header">+++ b/arch/arm64/kvm/debug.c</span>
<span class="p_chunk">@@ -24,6 +24,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/kvm_asm.h&gt;
 #include &lt;asm/kvm_arm.h&gt;
 #include &lt;asm/kvm_emulate.h&gt;
<span class="p_add">+#include &lt;asm/kvm_mmu.h&gt;</span>
 
 #include &quot;trace.h&quot;
 
<span class="p_chunk">@@ -72,7 +73,8 @@</span> <span class="p_context"> static void restore_guest_debug_regs(struct kvm_vcpu *vcpu)</span>
 
 void kvm_arm_init_debug(void)
 {
<span class="p_del">-	__this_cpu_write(mdcr_el2, kvm_call_hyp(__kvm_get_mdcr_el2));</span>
<span class="p_add">+	__this_cpu_write(mdcr_el2,</span>
<span class="p_add">+			 kvm_call_hyp(kvm_ksym_ref(__kvm_get_mdcr_el2)));</span>
 }
 
 /**
<span class="p_header">diff --git a/virt/kvm/arm/vgic-v3.c b/virt/kvm/arm/vgic-v3.c</span>
<span class="p_header">index 487d6357b7e7..58f5a6521307 100644</span>
<span class="p_header">--- a/virt/kvm/arm/vgic-v3.c</span>
<span class="p_header">+++ b/virt/kvm/arm/vgic-v3.c</span>
<span class="p_chunk">@@ -247,7 +247,7 @@</span> <span class="p_context"> int vgic_v3_probe(struct device_node *vgic_node,</span>
 		goto out;
 	}
 
<span class="p_del">-	ich_vtr_el2 = kvm_call_hyp(__vgic_v3_get_ich_vtr_el2);</span>
<span class="p_add">+	ich_vtr_el2 = kvm_call_hyp(kvm_ksym_ref(__vgic_v3_get_ich_vtr_el2));</span>
 
 	/*
 	 * The ListRegs field is 5 bits, but there is a architectural

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



