
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mempolicy: do not try to queue pages from !vma_migratable() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mempolicy: do not try to queue pages from !vma_migratable()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=41">Andrew Morton</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 1, 2016, 10:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160201142835.d70538761c6d74bd989b6f8b@linux-foundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8184191/mbox/"
   >mbox</a>
|
   <a href="/patch/8184191/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8184191/">/patch/8184191/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 85810BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Feb 2016 22:28:47 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B65F420395
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Feb 2016 22:28:46 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id D184620397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Feb 2016 22:28:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754087AbcBAW2j (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 1 Feb 2016 17:28:39 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:46363 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753839AbcBAW2g (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 1 Feb 2016 17:28:36 -0500
Received: from akpm3.mtv.corp.google.com (unknown [216.239.45.65])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id E337ED97;
	Mon,  1 Feb 2016 22:28:35 +0000 (UTC)
Date: Mon, 1 Feb 2016 14:28:35 -0800
From: Andrew Morton &lt;akpm@linux-foundation.org&gt;
To: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: Re: [PATCH 2/2] mempolicy: do not try to queue pages from
	!vma_migratable()
Message-Id: &lt;20160201142835.d70538761c6d74bd989b6f8b@linux-foundation.org&gt;
In-Reply-To: &lt;1454333169-121369-3-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1454333169-121369-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
	&lt;1454333169-121369-3-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: Sylpheed 3.4.1 (GTK+ 2.24.23; x86_64-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.4 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Feb. 1, 2016, 10:28 p.m.</div>
<pre class="content">
On Mon,  1 Feb 2016 16:26:09 +0300 &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; wrote:
<span class="quote">
&gt; Maybe I miss some point, but I don&#39;t see a reason why we try to queue</span>
<span class="quote">&gt; pages from non migratable VMAs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The only case when we can queue pages from such VMA is MPOL_MF_STRICT</span>
<span class="quote">&gt; plus MPOL_MF_MOVE or MPOL_MF_MOVE_ALL for VMA which has pages on LRU,</span>
<span class="quote">&gt; but gfp mask is not sutable for migaration (see mapping_gfp_mask() check</span>
<span class="quote">&gt; in vma_migratable()). That&#39;s looks like a bug to me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Let&#39;s filter out non-migratable vma at start of queue_pages_test_walk()</span>
<span class="quote">&gt; and go to queue_pages_pte_range() only if MPOL_MF_MOVE or</span>
<span class="quote">&gt; MPOL_MF_MOVE_ALL flag is set.</span>

Conflicts with
http://ozlabs.org/~akpm/mmots/broken-out/mm-mempolicy-skip-vm_hugetlb-and-vm_mixedmap-vma-for-lazy-mbind.patch.
I resolved it thusly, please review:
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/mm/mempolicy.c~mempolicy-do-not-try-to-queue-pages-from-vma_migratable</span>
<span class="p_header">+++ a/mm/mempolicy.c</span>
<span class="p_chunk">@@ -548,8 +548,7 @@</span> <span class="p_context"> retry:</span>
 			goto retry;
 		}
 
<span class="p_del">-		if (flags &amp; (MPOL_MF_MOVE | MPOL_MF_MOVE_ALL))</span>
<span class="p_del">-			migrate_page_add(page, qp-&gt;pagelist, flags);</span>
<span class="p_add">+		migrate_page_add(page, qp-&gt;pagelist, flags);</span>
 	}
 	pte_unmap_unlock(pte - 1, ptl);
 	cond_resched();
<span class="p_chunk">@@ -625,7 +624,7 @@</span> <span class="p_context"> static int queue_pages_test_walk(unsigne</span>
 	unsigned long endvma = vma-&gt;vm_end;
 	unsigned long flags = qp-&gt;flags;
 
<span class="p_del">-	if (vma-&gt;vm_flags &amp; VM_PFNMAP)</span>
<span class="p_add">+	if (!vma_migratable(vma))</span>
 		return 1;
 
 	if (endvma &gt; end)
<span class="p_chunk">@@ -644,17 +643,15 @@</span> <span class="p_context"> static int queue_pages_test_walk(unsigne</span>
 
 	if (flags &amp; MPOL_MF_LAZY) {
 		/* Similar to task_numa_work, skip inaccessible VMAs */
<span class="p_del">-		if (vma_migratable(vma) &amp;&amp; !is_vm_hugetlb_page(vma) &amp;&amp;</span>
<span class="p_add">+		if (!is_vm_hugetlb_page(vma) &amp;&amp;</span>
 			(vma-&gt;vm_flags &amp; (VM_READ | VM_EXEC | VM_WRITE)) &amp;&amp;
 			!(vma-&gt;vm_flags &amp; VM_MIXEDMAP))
 			change_prot_numa(vma, start, endvma);
 		return 1;
 	}
 
<span class="p_del">-	if ((flags &amp; MPOL_MF_STRICT) ||</span>
<span class="p_del">-	    ((flags &amp; (MPOL_MF_MOVE | MPOL_MF_MOVE_ALL)) &amp;&amp;</span>
<span class="p_del">-	     vma_migratable(vma)))</span>
<span class="p_del">-		/* queue pages from current vma */</span>
<span class="p_add">+	/* queue pages from current vma */</span>
<span class="p_add">+	if (flags &amp; (MPOL_MF_MOVE | MPOL_MF_MOVE_ALL))</span>
 		return 0;
 	return 1;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



