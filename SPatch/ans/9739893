
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>vhost: Coalesce vq_err formats, pr_fmt misuse, add missing newlines - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    vhost: Coalesce vq_err formats, pr_fmt misuse, add missing newlines</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=325">Joe Perches</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 22, 2017, 10:33 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;0e8f84aec009831d34ccb2b4ed27364e78b07e02.1495449147.git.joe@perches.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9739893/mbox/"
   >mbox</a>
|
   <a href="/patch/9739893/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9739893/">/patch/9739893/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A84936034C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 10:33:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 995E8286DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 10:33:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8B80E286EF; Mon, 22 May 2017 10:33:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 75593286DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 10:33:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758677AbdEVKdw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 May 2017 06:33:52 -0400
Received: from smtprelay0063.hostedemail.com ([216.40.44.63]:41380 &quot;EHLO
	smtprelay.hostedemail.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1752735AbdEVKdt (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 May 2017 06:33:49 -0400
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net
	[216.40.38.60])
	by smtprelay01.hostedemail.com (Postfix) with ESMTP id 7009C23412;
	Mon, 22 May 2017 10:33:47 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-HE-Tag: force66_20e614ad16b0c
X-Filterd-Recvd-Size: 15290
Received: from joe-laptop.perches.com (unknown [47.151.132.55])
	(Authenticated sender: joe@perches.com)
	by omf05.hostedemail.com (Postfix) with ESMTPA;
	Mon, 22 May 2017 10:33:45 +0000 (UTC)
From: Joe Perches &lt;joe@perches.com&gt;
To: &quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Jason Wang &lt;jasowang@redhat.com&gt;
Cc: kvm@vger.kernel.org, virtualization@lists.linux-foundation.org,
	netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH] vhost: Coalesce vq_err formats, pr_fmt misuse,
	add missing newlines
Date: Mon, 22 May 2017 03:33:43 -0700
Message-Id: &lt;0e8f84aec009831d34ccb2b4ed27364e78b07e02.1495449147.git.joe@perches.com&gt;
X-Mailer: git-send-email 2.10.0.rc2.1.g053435c
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - May 22, 2017, 10:33 a.m.</div>
<pre class="content">
vhost logging uses of vq_err has a few defects and style inconsistencies.

o pr_debug already uses pr_fmt so its use in vq_err is defective
  however no #defines of pr_fmt exist in this code so no actual
  defects exist
o vq_err uses need terminating newlines so add the missing ones
o Coalesce formats and realign arguments
<span class="signed-off-by">
Signed-off-by: Joe Perches &lt;joe@perches.com&gt;</span>
---
 drivers/vhost/net.c   | 17 ++++++-------
 drivers/vhost/scsi.c  | 17 ++++++-------
 drivers/vhost/test.c  |  4 +--
 drivers/vhost/vhost.c | 70 +++++++++++++++++++++++----------------------------
 drivers/vhost/vhost.h | 11 ++++----
 5 files changed, 54 insertions(+), 65 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3135">Stefan Hajnoczi</a> - May 22, 2017, 2:16 p.m.</div>
<pre class="content">
On Mon, May 22, 2017 at 03:33:43AM -0700, Joe Perches wrote:
<span class="quote">&gt; vhost logging uses of vq_err has a few defects and style inconsistencies.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; o pr_debug already uses pr_fmt so its use in vq_err is defective</span>
<span class="quote">&gt;   however no #defines of pr_fmt exist in this code so no actual</span>
<span class="quote">&gt;   defects exist</span>
<span class="quote">&gt; o vq_err uses need terminating newlines so add the missing ones</span>
<span class="quote">&gt; o Coalesce formats and realign arguments</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Joe Perches &lt;joe@perches.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/vhost/net.c   | 17 ++++++-------</span>
<span class="quote">&gt;  drivers/vhost/scsi.c  | 17 ++++++-------</span>
<span class="quote">&gt;  drivers/vhost/test.c  |  4 +--</span>
<span class="quote">&gt;  drivers/vhost/vhost.c | 70 +++++++++++++++++++++++----------------------------</span>
<span class="quote">&gt;  drivers/vhost/vhost.h | 11 ++++----</span>
<span class="quote">&gt;  5 files changed, 54 insertions(+), 65 deletions(-)</span>
<span class="reviewed-by">
Reviewed-by: Stefan Hajnoczi &lt;stefanha@redhat.com&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c</span>
<span class="p_header">index e3d7ea1288c6..7c8c013381e1 100644</span>
<span class="p_header">--- a/drivers/vhost/net.c</span>
<span class="p_header">+++ b/drivers/vhost/net.c</span>
<span class="p_chunk">@@ -501,8 +501,8 @@</span> <span class="p_context"> static void handle_tx(struct vhost_net *net)</span>
 			break;
 		}
 		if (in) {
<span class="p_del">-			vq_err(vq, &quot;Unexpected descriptor format for TX: &quot;</span>
<span class="p_del">-			       &quot;out %d, int %d\n&quot;, out, in);</span>
<span class="p_add">+			vq_err(vq, &quot;Unexpected descriptor format for TX: out %d, int %d\n&quot;,</span>
<span class="p_add">+			       out, in);</span>
 			break;
 		}
 		/* Skip header. TODO: support TSO. */
<span class="p_chunk">@@ -511,8 +511,7 @@</span> <span class="p_context"> static void handle_tx(struct vhost_net *net)</span>
 		iov_iter_advance(&amp;msg.msg_iter, hdr_size);
 		/* Sanity check */
 		if (!msg_data_left(&amp;msg)) {
<span class="p_del">-			vq_err(vq, &quot;Unexpected header len for TX: &quot;</span>
<span class="p_del">-			       &quot;%zd expected %zd\n&quot;,</span>
<span class="p_add">+			vq_err(vq, &quot;Unexpected header len for TX: %zd expected %zd\n&quot;,</span>
 			       len, hdr_size);
 			break;
 		}
<span class="p_chunk">@@ -689,8 +688,8 @@</span> <span class="p_context"> static int get_rx_bufs(struct vhost_virtqueue *vq,</span>
 			goto err;
 		}
 		if (unlikely(out || in &lt;= 0)) {
<span class="p_del">-			vq_err(vq, &quot;unexpected descriptor format for RX: &quot;</span>
<span class="p_del">-				&quot;out %d, in %d\n&quot;, out, in);</span>
<span class="p_add">+			vq_err(vq, &quot;unexpected descriptor format for RX: out %d, in %d\n&quot;,</span>
<span class="p_add">+			       out, in);</span>
 			r = -EINVAL;
 			goto err;
 		}
<span class="p_chunk">@@ -822,8 +821,8 @@</span> <span class="p_context"> static void handle_rx(struct vhost_net *net)</span>
 		if (unlikely(vhost_hlen)) {
 			if (copy_to_iter(&amp;hdr, sizeof(hdr),
 					 &amp;fixup) != sizeof(hdr)) {
<span class="p_del">-				vq_err(vq, &quot;Unable to write vnet_hdr &quot;</span>
<span class="p_del">-				       &quot;at addr %p\n&quot;, vq-&gt;iov-&gt;iov_base);</span>
<span class="p_add">+				vq_err(vq, &quot;Unable to write vnet_hdr at addr %p\n&quot;,</span>
<span class="p_add">+				       vq-&gt;iov-&gt;iov_base);</span>
 				goto out;
 			}
 		} else {
<span class="p_chunk">@@ -838,7 +837,7 @@</span> <span class="p_context"> static void handle_rx(struct vhost_net *net)</span>
 		if (likely(mergeable) &amp;&amp;
 		    copy_to_iter(&amp;num_buffers, sizeof num_buffers,
 				 &amp;fixup) != sizeof num_buffers) {
<span class="p_del">-			vq_err(vq, &quot;Failed num_buffers write&quot;);</span>
<span class="p_add">+			vq_err(vq, &quot;Failed num_buffers write\n&quot;);</span>
 			vhost_discard_vq_desc(vq, headcount);
 			goto out;
 		}
<span class="p_header">diff --git a/drivers/vhost/scsi.c b/drivers/vhost/scsi.c</span>
<span class="p_header">index fd6c8b66f06f..c0d3746d5ff3 100644</span>
<span class="p_header">--- a/drivers/vhost/scsi.c</span>
<span class="p_header">+++ b/drivers/vhost/scsi.c</span>
<span class="p_chunk">@@ -473,7 +473,7 @@</span> <span class="p_context"> vhost_scsi_do_evt_work(struct vhost_scsi *vs, struct vhost_scsi_evt *evt)</span>
 
 	if ((vq-&gt;iov[out].iov_len != sizeof(struct virtio_scsi_event))) {
 		vq_err(vq, &quot;Expecting virtio_scsi_event, got %zu bytes\n&quot;,
<span class="p_del">-				vq-&gt;iov[out].iov_len);</span>
<span class="p_add">+		       vq-&gt;iov[out].iov_len);</span>
 		vs-&gt;vs_events_missed = true;
 		return;
 	}
<span class="p_chunk">@@ -885,8 +885,8 @@</span> <span class="p_context"> vhost_scsi_handle_vq(struct vhost_scsi *vs, struct vhost_virtqueue *vq)</span>
 		 * errors back to the guest.
 		 */
 		if (unlikely(vq-&gt;iov[out].iov_len &lt; rsp_size)) {
<span class="p_del">-			vq_err(vq, &quot;Expecting at least virtio_scsi_cmd_resp&quot;</span>
<span class="p_del">-				&quot; size, got %zu bytes\n&quot;, vq-&gt;iov[out].iov_len);</span>
<span class="p_add">+			vq_err(vq, &quot;Expecting at least virtio_scsi_cmd_resp size, got %zu bytes\n&quot;,</span>
<span class="p_add">+			       vq-&gt;iov[out].iov_len);</span>
 			break;
 		}
 		/*
<span class="p_chunk">@@ -981,16 +981,14 @@</span> <span class="p_context"> vhost_scsi_handle_vq(struct vhost_scsi *vs, struct vhost_virtqueue *vq)</span>
 		if (t10_pi) {
 			if (v_req_pi.pi_bytesout) {
 				if (data_direction != DMA_TO_DEVICE) {
<span class="p_del">-					vq_err(vq, &quot;Received non zero pi_bytesout,&quot;</span>
<span class="p_del">-						&quot; but wrong data_direction\n&quot;);</span>
<span class="p_add">+					vq_err(vq, &quot;Received non zero pi_bytesout, but wrong data_direction\n&quot;);</span>
 					vhost_scsi_send_bad_target(vs, vq, head, out);
 					continue;
 				}
 				prot_bytes = vhost32_to_cpu(vq, v_req_pi.pi_bytesout);
 			} else if (v_req_pi.pi_bytesin) {
 				if (data_direction != DMA_FROM_DEVICE) {
<span class="p_del">-					vq_err(vq, &quot;Received non zero pi_bytesin,&quot;</span>
<span class="p_del">-						&quot; but wrong data_direction\n&quot;);</span>
<span class="p_add">+					vq_err(vq, &quot;Received non zero pi_bytesin, but wrong data_direction\n&quot;);</span>
 					vhost_scsi_send_bad_target(vs, vq, head, out);
 					continue;
 				}
<span class="p_chunk">@@ -1026,9 +1024,8 @@</span> <span class="p_context"> vhost_scsi_handle_vq(struct vhost_scsi *vs, struct vhost_virtqueue *vq)</span>
 		 * TODO what if cdb was too small for varlen cdb header?
 		 */
 		if (unlikely(scsi_command_size(cdb) &gt; VHOST_SCSI_MAX_CDB_SIZE)) {
<span class="p_del">-			vq_err(vq, &quot;Received SCSI CDB with command_size: %d that&quot;</span>
<span class="p_del">-				&quot; exceeds SCSI_MAX_VARLEN_CDB_SIZE: %d\n&quot;,</span>
<span class="p_del">-				scsi_command_size(cdb), VHOST_SCSI_MAX_CDB_SIZE);</span>
<span class="p_add">+			vq_err(vq, &quot;Received SCSI CDB with command_size: %d that exceeds SCSI_MAX_VARLEN_CDB_SIZE: %d\n&quot;,</span>
<span class="p_add">+			       scsi_command_size(cdb), VHOST_SCSI_MAX_CDB_SIZE);</span>
 			vhost_scsi_send_bad_target(vs, vq, head, out);
 			continue;
 		}
<span class="p_header">diff --git a/drivers/vhost/test.c b/drivers/vhost/test.c</span>
<span class="p_header">index 3cc98c07dcd3..a48e9747505d 100644</span>
<span class="p_header">--- a/drivers/vhost/test.c</span>
<span class="p_header">+++ b/drivers/vhost/test.c</span>
<span class="p_chunk">@@ -69,8 +69,8 @@</span> <span class="p_context"> static void handle_vq(struct vhost_test *n)</span>
 			break;
 		}
 		if (in) {
<span class="p_del">-			vq_err(vq, &quot;Unexpected descriptor format for TX: &quot;</span>
<span class="p_del">-			       &quot;out %d, int %d\n&quot;, out, in);</span>
<span class="p_add">+			vq_err(vq, &quot;Unexpected descriptor format for TX: out %d, int %d\n&quot;,</span>
<span class="p_add">+			       out, in);</span>
 			break;
 		}
 		len = iov_length(vq-&gt;iov, out);
<span class="p_header">diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c</span>
<span class="p_header">index 042030e5a035..6730735d31c7 100644</span>
<span class="p_header">--- a/drivers/vhost/vhost.c</span>
<span class="p_header">+++ b/drivers/vhost/vhost.c</span>
<span class="p_chunk">@@ -802,9 +802,8 @@</span> <span class="p_context"> static int vhost_copy_from_user(struct vhost_virtqueue *vq, void *to,</span>
 				     ARRAY_SIZE(vq-&gt;iotlb_iov),
 				     VHOST_ACCESS_RO);
 		if (ret &lt; 0) {
<span class="p_del">-			vq_err(vq, &quot;IOTLB translation failure: uaddr &quot;</span>
<span class="p_del">-			       &quot;%p size 0x%llx\n&quot;, from,</span>
<span class="p_del">-			       (unsigned long long) size);</span>
<span class="p_add">+			vq_err(vq, &quot;IOTLB translation failure: uaddr %p size 0x%llx\n&quot;,</span>
<span class="p_add">+			       from, (unsigned long long)size);</span>
 			goto out;
 		}
 		iov_iter_init(&amp;f, READ, vq-&gt;iotlb_iov, ret, size);
<span class="p_chunk">@@ -827,16 +826,14 @@</span> <span class="p_context"> static void __user *__vhost_get_user_slow(struct vhost_virtqueue *vq,</span>
 			     ARRAY_SIZE(vq-&gt;iotlb_iov),
 			     VHOST_ACCESS_RO);
 	if (ret &lt; 0) {
<span class="p_del">-		vq_err(vq, &quot;IOTLB translation failure: uaddr &quot;</span>
<span class="p_del">-			&quot;%p size 0x%llx\n&quot;, addr,</span>
<span class="p_del">-			(unsigned long long) size);</span>
<span class="p_add">+		vq_err(vq, &quot;IOTLB translation failure: uaddr %p size 0x%llx\n&quot;,</span>
<span class="p_add">+		       addr, (unsigned long long)size);</span>
 		return NULL;
 	}
 
 	if (ret != 1 || vq-&gt;iotlb_iov[0].iov_len != size) {
<span class="p_del">-		vq_err(vq, &quot;Non atomic userspace memory access: uaddr &quot;</span>
<span class="p_del">-			&quot;%p size 0x%llx\n&quot;, addr,</span>
<span class="p_del">-			(unsigned long long) size);</span>
<span class="p_add">+		vq_err(vq, &quot;Non atomic userspace memory access: uaddr %p size 0x%llx\n&quot;,</span>
<span class="p_add">+		       addr, (unsigned long long)size);</span>
 		return NULL;
 	}
 
<span class="p_chunk">@@ -1807,8 +1804,7 @@</span> <span class="p_context"> int vhost_vq_init_access(struct vhost_virtqueue *vq)</span>
 	}
 	r = vhost_get_used(vq, last_used_idx, &amp;vq-&gt;used-&gt;idx);
 	if (r) {
<span class="p_del">-		vq_err(vq, &quot;Can&#39;t access used idx at %p\n&quot;,</span>
<span class="p_del">-		       &amp;vq-&gt;used-&gt;idx);</span>
<span class="p_add">+		vq_err(vq, &quot;Can&#39;t access used idx at %p\n&quot;, &amp;vq-&gt;used-&gt;idx);</span>
 		goto err;
 	}
 	vq-&gt;last_used_idx = vhost16_to_cpu(vq, last_used_idx);
<span class="p_chunk">@@ -1901,10 +1897,8 @@</span> <span class="p_context"> static int get_indirect(struct vhost_virtqueue *vq,</span>
 
 	/* Sanity check */
 	if (unlikely(len % sizeof desc)) {
<span class="p_del">-		vq_err(vq, &quot;Invalid length in indirect descriptor: &quot;</span>
<span class="p_del">-		       &quot;len 0x%llx not multiple of 0x%zx\n&quot;,</span>
<span class="p_del">-		       (unsigned long long)len,</span>
<span class="p_del">-		       sizeof desc);</span>
<span class="p_add">+		vq_err(vq, &quot;Invalid length in indirect descriptor: len 0x%llx not multiple of 0x%zx\n&quot;,</span>
<span class="p_add">+		       (unsigned long long)len, sizeof(desc));</span>
 		return -EINVAL;
 	}
 
<span class="p_chunk">@@ -1912,7 +1906,7 @@</span> <span class="p_context"> static int get_indirect(struct vhost_virtqueue *vq,</span>
 			     UIO_MAXIOV, VHOST_ACCESS_RO);
 	if (unlikely(ret &lt; 0)) {
 		if (ret != -EAGAIN)
<span class="p_del">-			vq_err(vq, &quot;Translation failure %d in indirect.\n&quot;, ret);</span>
<span class="p_add">+			vq_err(vq, &quot;Translation failure %d in indirect\n&quot;, ret);</span>
 		return ret;
 	}
 	iov_iter_init(&amp;from, READ, vq-&gt;indirect, ret, len);
<span class="p_chunk">@@ -1933,8 +1927,7 @@</span> <span class="p_context"> static int get_indirect(struct vhost_virtqueue *vq,</span>
 	do {
 		unsigned iov_count = *in_num + *out_num;
 		if (unlikely(++found &gt; count)) {
<span class="p_del">-			vq_err(vq, &quot;Loop detected: last one at %u &quot;</span>
<span class="p_del">-			       &quot;indirect size %u\n&quot;,</span>
<span class="p_add">+			vq_err(vq, &quot;Loop detected: last one at %u indirect size %u\n&quot;,</span>
 			       i, count);
 			return -EINVAL;
 		}
<span class="p_chunk">@@ -1960,7 +1953,7 @@</span> <span class="p_context"> static int get_indirect(struct vhost_virtqueue *vq,</span>
 		if (unlikely(ret &lt; 0)) {
 			if (ret != -EAGAIN)
 				vq_err(vq, &quot;Translation failure %d indirect idx %d\n&quot;,
<span class="p_del">-					ret, i);</span>
<span class="p_add">+				       ret, i);</span>
 			return ret;
 		}
 		/* If this is an input descriptor, increment that count. */
<span class="p_chunk">@@ -1975,8 +1968,8 @@</span> <span class="p_context"> static int get_indirect(struct vhost_virtqueue *vq,</span>
 			/* If it&#39;s an output descriptor, they&#39;re all supposed
 			 * to come before any input descriptors. */
 			if (unlikely(*in_num)) {
<span class="p_del">-				vq_err(vq, &quot;Indirect descriptor &quot;</span>
<span class="p_del">-				       &quot;has out after in: idx %d\n&quot;, i);</span>
<span class="p_add">+				vq_err(vq, &quot;Indirect descriptor has out after in: idx %d\n&quot;,</span>
<span class="p_add">+				       i);</span>
 				return -EINVAL;
 			}
 			*out_num += ret;
<span class="p_chunk">@@ -2011,14 +2004,14 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 	if (vq-&gt;avail_idx == vq-&gt;last_avail_idx) {
 		if (unlikely(vhost_get_avail(vq, avail_idx, &amp;vq-&gt;avail-&gt;idx))) {
 			vq_err(vq, &quot;Failed to access avail idx at %p\n&quot;,
<span class="p_del">-				&amp;vq-&gt;avail-&gt;idx);</span>
<span class="p_add">+			       &amp;vq-&gt;avail-&gt;idx);</span>
 			return -EFAULT;
 		}
 		vq-&gt;avail_idx = vhost16_to_cpu(vq, avail_idx);
 
 		if (unlikely((u16)(vq-&gt;avail_idx - last_avail_idx) &gt; vq-&gt;num)) {
<span class="p_del">-			vq_err(vq, &quot;Guest moved used index from %u to %u&quot;,</span>
<span class="p_del">-				last_avail_idx, vq-&gt;avail_idx);</span>
<span class="p_add">+			vq_err(vq, &quot;Guest moved used index from %u to %u\n&quot;,</span>
<span class="p_add">+			       last_avail_idx, vq-&gt;avail_idx);</span>
 			return -EFAULT;
 		}
 
<span class="p_chunk">@@ -2048,7 +2041,7 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 
 	/* If their number is silly, that&#39;s an error. */
 	if (unlikely(head &gt;= vq-&gt;num)) {
<span class="p_del">-		vq_err(vq, &quot;Guest says index %u &gt; %u is available&quot;,</span>
<span class="p_add">+		vq_err(vq, &quot;Guest says index %u &gt; %u is available\n&quot;,</span>
 		       head, vq-&gt;num);
 		return -EINVAL;
 	}
<span class="p_chunk">@@ -2062,13 +2055,12 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 	do {
 		unsigned iov_count = *in_num + *out_num;
 		if (unlikely(i &gt;= vq-&gt;num)) {
<span class="p_del">-			vq_err(vq, &quot;Desc index is %u &gt; %u, head = %u&quot;,</span>
<span class="p_add">+			vq_err(vq, &quot;Desc index is %u &gt; %u, head = %u\n&quot;,</span>
 			       i, vq-&gt;num, head);
 			return -EINVAL;
 		}
 		if (unlikely(++found &gt; vq-&gt;num)) {
<span class="p_del">-			vq_err(vq, &quot;Loop detected: last one at %u &quot;</span>
<span class="p_del">-			       &quot;vq size %u head %u\n&quot;,</span>
<span class="p_add">+			vq_err(vq, &quot;Loop detected: last one at %u vq size %u head %u\n&quot;,</span>
 			       i, vq-&gt;num, head);
 			return -EINVAL;
 		}
<span class="p_chunk">@@ -2085,8 +2077,8 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 					   log, log_num, &amp;desc);
 			if (unlikely(ret &lt; 0)) {
 				if (ret != -EAGAIN)
<span class="p_del">-					vq_err(vq, &quot;Failure detected &quot;</span>
<span class="p_del">-						&quot;in indirect descriptor at idx %d\n&quot;, i);</span>
<span class="p_add">+					vq_err(vq, &quot;Failure detected in indirect descriptor at idx %d\n&quot;,</span>
<span class="p_add">+					       i);</span>
 				return ret;
 			}
 			continue;
<span class="p_chunk">@@ -2102,7 +2094,7 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 		if (unlikely(ret &lt; 0)) {
 			if (ret != -EAGAIN)
 				vq_err(vq, &quot;Translation failure %d descriptor idx %d\n&quot;,
<span class="p_del">-					ret, i);</span>
<span class="p_add">+				       ret, i);</span>
 			return ret;
 		}
 		if (access == VHOST_ACCESS_WO) {
<span class="p_chunk">@@ -2118,8 +2110,8 @@</span> <span class="p_context"> int vhost_get_vq_desc(struct vhost_virtqueue *vq,</span>
 			/* If it&#39;s an output descriptor, they&#39;re all supposed
 			 * to come before any input descriptors. */
 			if (unlikely(*in_num)) {
<span class="p_del">-				vq_err(vq, &quot;Descriptor has out after in: &quot;</span>
<span class="p_del">-				       &quot;idx %d\n&quot;, i);</span>
<span class="p_add">+				vq_err(vq, &quot;Descriptor has out after in: idx %d\n&quot;,</span>
<span class="p_add">+				       i);</span>
 				return -EINVAL;
 			}
 			*out_num += ret;
<span class="p_chunk">@@ -2168,15 +2160,15 @@</span> <span class="p_context"> static int __vhost_add_used_n(struct vhost_virtqueue *vq,</span>
 	used = vq-&gt;used-&gt;ring + start;
 	if (count == 1) {
 		if (vhost_put_user(vq, heads[0].id, &amp;used-&gt;id)) {
<span class="p_del">-			vq_err(vq, &quot;Failed to write used id&quot;);</span>
<span class="p_add">+			vq_err(vq, &quot;Failed to write used id\n&quot;);</span>
 			return -EFAULT;
 		}
 		if (vhost_put_user(vq, heads[0].len, &amp;used-&gt;len)) {
<span class="p_del">-			vq_err(vq, &quot;Failed to write used len&quot;);</span>
<span class="p_add">+			vq_err(vq, &quot;Failed to write used len\n&quot;);</span>
 			return -EFAULT;
 		}
 	} else if (vhost_copy_to_user(vq, used, heads, count * sizeof *used)) {
<span class="p_del">-		vq_err(vq, &quot;Failed to write used&quot;);</span>
<span class="p_add">+		vq_err(vq, &quot;Failed to write used\n&quot;);</span>
 		return -EFAULT;
 	}
 	if (unlikely(vq-&gt;log_used)) {
<span class="p_chunk">@@ -2221,7 +2213,7 @@</span> <span class="p_context"> int vhost_add_used_n(struct vhost_virtqueue *vq, struct vring_used_elem *heads,</span>
 	smp_wmb();
 	if (vhost_put_user(vq, cpu_to_vhost16(vq, vq-&gt;last_used_idx),
 			   &amp;vq-&gt;used-&gt;idx)) {
<span class="p_del">-		vq_err(vq, &quot;Failed to increment used idx&quot;);</span>
<span class="p_add">+		vq_err(vq, &quot;Failed to increment used idx\n&quot;);</span>
 		return -EFAULT;
 	}
 	if (unlikely(vq-&gt;log_used)) {
<span class="p_chunk">@@ -2253,7 +2245,7 @@</span> <span class="p_context"> static bool vhost_notify(struct vhost_dev *dev, struct vhost_virtqueue *vq)</span>
 		 * interrupts. */
 		smp_mb();
 		if (vhost_get_avail(vq, flags, &amp;vq-&gt;avail-&gt;flags)) {
<span class="p_del">-			vq_err(vq, &quot;Failed to get flags&quot;);</span>
<span class="p_add">+			vq_err(vq, &quot;Failed to get flags\n&quot;);</span>
 			return true;
 		}
 		return !(flags &amp; cpu_to_vhost16(vq, VRING_AVAIL_F_NO_INTERRUPT));
<span class="p_chunk">@@ -2280,7 +2272,7 @@</span> <span class="p_context"> static bool vhost_notify(struct vhost_dev *dev, struct vhost_virtqueue *vq)</span>
 	smp_mb();
 
 	if (vhost_get_avail(vq, event, vhost_used_event(vq))) {
<span class="p_del">-		vq_err(vq, &quot;Failed to get used event idx&quot;);</span>
<span class="p_add">+		vq_err(vq, &quot;Failed to get used event idx\n&quot;);</span>
 		return true;
 	}
 	vq-&gt;last_used_event = vhost16_to_cpu(vq, event);
<span class="p_header">diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h</span>
<span class="p_header">index f55671d53f28..18bcfc70459a 100644</span>
<span class="p_header">--- a/drivers/vhost/vhost.h</span>
<span class="p_header">+++ b/drivers/vhost/vhost.h</span>
<span class="p_chunk">@@ -227,11 +227,12 @@</span> <span class="p_context"> ssize_t vhost_chr_write_iter(struct vhost_dev *dev,</span>
 			     struct iov_iter *from);
 int vhost_init_device_iotlb(struct vhost_dev *d, bool enabled);
 
<span class="p_del">-#define vq_err(vq, fmt, ...) do {                                  \</span>
<span class="p_del">-		pr_debug(pr_fmt(fmt), ##__VA_ARGS__);       \</span>
<span class="p_del">-		if ((vq)-&gt;error_ctx)                               \</span>
<span class="p_del">-				eventfd_signal((vq)-&gt;error_ctx, 1);\</span>
<span class="p_del">-	} while (0)</span>
<span class="p_add">+#define vq_err(vq, fmt, ...)						\</span>
<span class="p_add">+do {									\</span>
<span class="p_add">+	pr_debug(fmt, ##__VA_ARGS__);					\</span>
<span class="p_add">+	if ((vq)-&gt;error_ctx)						\</span>
<span class="p_add">+		eventfd_signal((vq)-&gt;error_ctx, 1);			\</span>
<span class="p_add">+} while (0)</span>
 
 enum {
 	VHOST_FEATURES = (1ULL &lt;&lt; VIRTIO_F_NOTIFY_ON_EMPTY) |

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



