
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/3] Update efi_thunk to use efi_call_virt_generic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/3] Update efi_thunk to use efi_call_virt_generic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=66171">athorlton@sgi.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 18, 2016, 7:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1463598701-178201-4-git-send-email-athorlton@sgi.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9121941/mbox/"
   >mbox</a>
|
   <a href="/patch/9121941/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9121941/">/patch/9121941/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id A2744BF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 May 2016 19:12:17 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id CBEC720373
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 May 2016 19:12:16 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A4ABA20361
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 18 May 2016 19:12:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932153AbcERTLw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 18 May 2016 15:11:52 -0400
Received: from relay1.sgi.com ([192.48.180.66]:59140 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754081AbcERTLt (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 18 May 2016 15:11:49 -0400
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay1.corp.sgi.com (Postfix) with ESMTP id 4214D8F804B;
	Wed, 18 May 2016 12:11:41 -0700 (PDT)
Received: by stormcage.americas.sgi.com (Postfix, from userid 48426)
	id 178E12025E06A; Wed, 18 May 2016 14:11:41 -0500 (CDT)
From: Alex Thorlton &lt;athorlton@sgi.com&gt;
To: linux-kernel@vger.kernel.org
Cc: Alex Thorlton &lt;athorlton@sgi.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Mike Travis &lt;travis@sgi.com&gt;,
	Russ Anderson &lt;rja@sgi.com&gt;,
	Dimitri Sivanich &lt;sivanich@sgi.com&gt;, x86@kernel.org,
	linux-efi@vger.kernel.org
Subject: [PATCH 3/3] Update efi_thunk to use efi_call_virt_generic
Date: Wed, 18 May 2016 14:11:41 -0500
Message-Id: &lt;1463598701-178201-4-git-send-email-athorlton@sgi.com&gt;
X-Mailer: git-send-email 1.8.5.6
In-Reply-To: &lt;1463598701-178201-1-git-send-email-athorlton@sgi.com&gt;
References: &lt;1463598701-178201-1-git-send-email-athorlton@sgi.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66171">athorlton@sgi.com</a> - May 18, 2016, 7:11 p.m.</div>
<pre class="content">
Now that we have efi_call_virt_generic, we no longer need to have an
entirely separate efi_thunk macro to handle the CONFIG_EFI_MIXED
scenario, where the function pointers cannot be read directly out of
efi.systab-&gt;runtime.

This commit creates a new set of arch_efi_call_virt* macros to mimic the
behavior of the old efi_thunk macro.  In the end, the code should be the
same, functionally, but we&#39;ll have eliminated a good chunk of code
duplication by splitting the efi_thunk macro up into the appropriate
arch_efi_call_virt bits and then just calling efi_call_virt_generic,
instead of efi_thunk.  I do go ahead and create a new efi_thunk macro in
arch/x86/platform/efi/efi_64.c, but this is mainly to keep the existing
code clean.

One thing to note here, is that this is not and absolutely *perfect* use
of the efi_call_virt_generic macro, in that it still has the
efi.systab-&gt;runtime pointer hard-coded into runtime_service32.  For now,
I think this should be fine, as the only users of the function already
assumed that this was where their function pointer would come from.  If
another CONFIG_EFI_MIXED user comes along and needs to use
efi_call_virt_generic, then we will need to re-think things a bit.
<span class="signed-off-by">
Signed-off-by: Alex Thorlton &lt;athorlton@sgi.com&gt;</span>
Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Mike Travis &lt;travis@sgi.com&gt;
Cc: Russ Anderson &lt;rja@sgi.com&gt;
Cc: Dimitri Sivanich &lt;sivanich@sgi.com&gt;
Cc: x86@kernel.org
Cc: linux-efi@vger.kernel.org
---
 arch/x86/include/asm/efi.h     | 47 ++++++++++++++++++++++++++++++++++++++++
 arch/x86/platform/efi/efi_64.c | 49 ++++++++++--------------------------------
 2 files changed, 58 insertions(+), 38 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index f310f0b..6643f9b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -68,6 +68,52 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	u64	phys_stack;
 } __packed;
 
<span class="p_add">+#ifdef CONFIG_EFI_MIXED</span>
<span class="p_add">+extern efi_status_t efi64_thunk(u32, ...);</span>
<span class="p_add">+</span>
<span class="p_add">+#define runtime_service32(func)						 \</span>
<span class="p_add">+({									 \</span>
<span class="p_add">+	u32 table = (u32)(unsigned long)efi.systab;			 \</span>
<span class="p_add">+	u32 *rt, *___f;							 \</span>
<span class="p_add">+									 \</span>
<span class="p_add">+	rt = (u32 *)(table + offsetof(efi_system_table_32_t, runtime));	 \</span>
<span class="p_add">+	___f = (u32 *)(*rt + offsetof(efi_runtime_services_32_t, func)); \</span>
<span class="p_add">+	*___f;								 \</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Switch to the EFI page tables early so that we can access the 1:1</span>
<span class="p_add">+ * runtime services mappings which are not mapped in any other page</span>
<span class="p_add">+ * tables. This function must be called before runtime_service32().</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Also, disable interrupts because the IDT points to 64-bit handlers,</span>
<span class="p_add">+ * which aren&#39;t going to function correctly when we switch to 32-bit.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define arch_efi_call_virt_setup()					\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	efi_sync_low_kernel_mappings();					\</span>
<span class="p_add">+	local_irq_save(flags);						\</span>
<span class="p_add">+									\</span>
<span class="p_add">+	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="p_add">+	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="p_add">+	__flush_tlb_all();						\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+#define arch_efi_call_virt(p, f, ...)					\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	u32 func = runtime_service32(f);				\</span>
<span class="p_add">+	efi64_thunk(func, __VA_ARGS__);					\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+#define arch_efi_call_virt_teardown()					\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	write_cr3(efi_scratch.prev_cr3);				\</span>
<span class="p_add">+	__flush_tlb_all();						\</span>
<span class="p_add">+	local_irq_restore(flags);					\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+#else /* !CONFIG_EFI_MIXED */</span>
<span class="p_add">+</span>
 #define arch_efi_call_virt_setup()					\
 ({									\
 	efi_sync_low_kernel_mappings();					\
<span class="p_chunk">@@ -94,6 +140,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	__kernel_fpu_end();						\
 	preempt_enable();						\
 })
<span class="p_add">+#endif</span>
 
 extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,
 					u32 type, u64 attribute);
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index 6e7242b..747bbc3 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -443,48 +443,21 @@</span> <span class="p_context"> void __init efi_dump_pagetable(void)</span>
 }
 
 #ifdef CONFIG_EFI_MIXED
<span class="p_del">-extern efi_status_t efi64_thunk(u32, ...);</span>
<span class="p_del">-</span>
<span class="p_del">-#define runtime_service32(func)						 \</span>
<span class="p_del">-({									 \</span>
<span class="p_del">-	u32 table = (u32)(unsigned long)efi.systab;			 \</span>
<span class="p_del">-	u32 *rt, *___f;							 \</span>
<span class="p_del">-									 \</span>
<span class="p_del">-	rt = (u32 *)(table + offsetof(efi_system_table_32_t, runtime));	 \</span>
<span class="p_del">-	___f = (u32 *)(*rt + offsetof(efi_runtime_services_32_t, func)); \</span>
<span class="p_del">-	*___f;								 \</span>
<span class="p_del">-})</span>
 
 /*
<span class="p_del">- * Switch to the EFI page tables early so that we can access the 1:1</span>
<span class="p_del">- * runtime services mappings which are not mapped in any other page</span>
<span class="p_del">- * tables. This function must be called before runtime_service32().</span>
<span class="p_add">+ * Note that we pass in NULL here instead of the systab/function name combo</span>
<span class="p_add">+ * that usually gets us what we need.  This is because the EFI_MIXED code</span>
<span class="p_add">+ * still assumes that all EFI callback function pointers will be in</span>
<span class="p_add">+ * efi.systab-&gt;runtime.  Currently there are no users in the EFI_MIXED code</span>
<span class="p_add">+ * that require efi_thunk to behave otherwise.</span>
  *
<span class="p_del">- * Also, disable interrupts because the IDT points to 64-bit handlers,</span>
<span class="p_del">- * which aren&#39;t going to function correctly when we switch to 32-bit.</span>
<span class="p_add">+ * If EFI_MIXED users want to call runtime functions that *don&#39;t* live in</span>
<span class="p_add">+ * efi.systab-&gt;runtime, runtime_service32 and some of the related macros</span>
<span class="p_add">+ * will need to be updated to handle this.  Not a major headache, but</span>
<span class="p_add">+ * something to keep in mind.</span>
  */
<span class="p_del">-#define efi_thunk(f, ...)						\</span>
<span class="p_del">-({									\</span>
<span class="p_del">-	efi_status_t __s;						\</span>
<span class="p_del">-	unsigned long flags;						\</span>
<span class="p_del">-	u32 func;							\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	efi_sync_low_kernel_mappings();					\</span>
<span class="p_del">-	local_irq_save(flags);						\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="p_del">-	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	func = runtime_service32(f);					\</span>
<span class="p_del">-	__s = efi64_thunk(func, __VA_ARGS__);			\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	write_cr3(efi_scratch.prev_cr3);				\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_del">-	local_irq_restore(flags);					\</span>
<span class="p_del">-									\</span>
<span class="p_del">-	__s;								\</span>
<span class="p_del">-})</span>
<span class="p_add">+#define efi_thunk(f, args...)   \</span>
<span class="p_add">+	efi_call_virt_generic(NULL, f, args)</span>
 
 efi_status_t efi_thunk_set_virtual_address_map(
 	void *phys_set_virtual_address_map,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



