
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/asm] x86/paravirt: Remove the unused irq_enable_sysexit pv op - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/asm] x86/paravirt: Remove the unused irq_enable_sysexit pv op</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2015, 4:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-88c15ec90ff16880efab92b519436ee17b198477@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7684241/mbox/"
   >mbox</a>
|
   <a href="/patch/7684241/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7684241/">/patch/7684241/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id C296DBF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 16:30:16 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 88AD72060A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 16:30:15 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 1284F20755
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 16:30:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754761AbbKWQaI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 23 Nov 2015 11:30:08 -0500
Received: from terminus.zytor.com ([198.137.202.10]:44787 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754281AbbKWQaC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 23 Nov 2015 11:30:02 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.14.8/8.14.7) with ESMTP id tANGSu3p031890;
	Mon, 23 Nov 2015 08:29:01 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.14.8/8.14.7/Submit) id tANGSts1031887;
	Mon, 23 Nov 2015 08:28:55 -0800
Date: Mon, 23 Nov 2015 08:28:55 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Boris Ostrovsky &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-88c15ec90ff16880efab92b519436ee17b198477@git.kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, boris.ostrovsky@oracle.com,
	tglx@linutronix.de, akpm@linux-foundation.org,
	peterz@infradead.org, hpa@zytor.com, mingo@kernel.org,
	luto@amacapital.net, bp@alien8.de, dvlasenk@redhat.com,
	torvalds@linux-foundation.org, bp@suse.de, brgerst@gmail.com,
	luto@kernel.org
Reply-To: boris.ostrovsky@oracle.com, linux-kernel@vger.kernel.org,
	akpm@linux-foundation.org, peterz@infradead.org,
	tglx@linutronix.de, dvlasenk@redhat.com,
	torvalds@linux-foundation.org, brgerst@gmail.com,
	luto@kernel.org, bp@suse.de, mingo@kernel.org, hpa@zytor.com,
	bp@alien8.de, luto@amacapital.net
In-Reply-To: &lt;1447970147-1733-3-git-send-email-boris.ostrovsky@oracle.com&gt;
References: &lt;1447970147-1733-3-git-send-email-boris.ostrovsky@oracle.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/asm] x86/paravirt:
	Remove the unused irq_enable_sysexit pv op
Git-Commit-ID: 88c15ec90ff16880efab92b519436ee17b198477
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt;
	to get blacklisted from these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Nov. 23, 2015, 4:28 p.m.</div>
<pre class="content">
Commit-ID:  88c15ec90ff16880efab92b519436ee17b198477
Gitweb:     http://git.kernel.org/tip/88c15ec90ff16880efab92b519436ee17b198477
Author:     Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
AuthorDate: Thu, 19 Nov 2015 16:55:46 -0500
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Mon, 23 Nov 2015 10:48:16 +0100

x86/paravirt: Remove the unused irq_enable_sysexit pv op

As result of commit &quot;x86/xen: Avoid fast syscall path for Xen PV
guests&quot;, the irq_enable_sysexit pv op is not called by Xen PV guests
anymore and since they were the only ones who used it we can
safely remove it.
<span class="signed-off-by">
Signed-off-by: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="acked-by">Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: david.vrabel@citrix.com
Cc: konrad.wilk@oracle.com
Cc: virtualization@lists.linux-foundation.org
Cc: xen-devel@lists.xenproject.org
Link: http://lkml.kernel.org/r/1447970147-1733-3-git-send-email-boris.ostrovsky@oracle.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/entry/entry_32.S             |  8 ++------
 arch/x86/include/asm/paravirt.h       |  7 -------
 arch/x86/include/asm/paravirt_types.h |  9 ---------
 arch/x86/kernel/asm-offsets.c         |  3 ---
 arch/x86/kernel/paravirt.c            |  7 -------
 arch/x86/kernel/paravirt_patch_32.c   |  2 --
 arch/x86/kernel/paravirt_patch_64.c   |  1 -
 arch/x86/xen/enlighten.c              |  3 ---
 arch/x86/xen/xen-asm_32.S             | 14 --------------
 arch/x86/xen/xen-ops.h                |  3 ---
 10 files changed, 2 insertions(+), 55 deletions(-)

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/entry_32.S b/arch/x86/entry/entry_32.S</span>
<span class="p_header">index 0870825..9870c97 100644</span>
<span class="p_header">--- a/arch/x86/entry/entry_32.S</span>
<span class="p_header">+++ b/arch/x86/entry/entry_32.S</span>
<span class="p_chunk">@@ -329,7 +329,8 @@</span> <span class="p_context"> sysenter_past_esp:</span>
 	 * Return back to the vDSO, which will pop ecx and edx.
 	 * Don&#39;t bother with DS and ES (they already contain __USER_DS).
 	 */
<span class="p_del">-	ENABLE_INTERRUPTS_SYSEXIT</span>
<span class="p_add">+	sti</span>
<span class="p_add">+	sysexit</span>
 
 .pushsection .fixup, &quot;ax&quot;
 2:	movl	$0, PT_FS(%esp)
<span class="p_chunk">@@ -552,11 +553,6 @@</span> <span class="p_context"> ENTRY(native_iret)</span>
 	iret
 	_ASM_EXTABLE(native_iret, iret_exc)
 END(native_iret)
<span class="p_del">-</span>
<span class="p_del">-ENTRY(native_irq_enable_sysexit)</span>
<span class="p_del">-	sti</span>
<span class="p_del">-	sysexit</span>
<span class="p_del">-END(native_irq_enable_sysexit)</span>
 #endif
 
 ENTRY(overflow)
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">index 10d0596..c28518e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt.h</span>
<span class="p_chunk">@@ -932,13 +932,6 @@</span> <span class="p_context"> extern void default_banner(void);</span>
 	push %ecx; push %edx;				\
 	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_read_cr0);	\
 	pop %edx; pop %ecx
<span class="p_del">-</span>
<span class="p_del">-#define ENABLE_INTERRUPTS_SYSEXIT					\</span>
<span class="p_del">-	PARA_SITE(PARA_PATCH(pv_cpu_ops, PV_CPU_irq_enable_sysexit),	\</span>
<span class="p_del">-		  CLBR_NONE,						\</span>
<span class="p_del">-		  jmp PARA_INDIRECT(pv_cpu_ops+PV_CPU_irq_enable_sysexit))</span>
<span class="p_del">-</span>
<span class="p_del">-</span>
 #else	/* !CONFIG_X86_32 */
 
 /*
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">index 31247b5..608bbf3 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_chunk">@@ -157,15 +157,6 @@</span> <span class="p_context"> struct pv_cpu_ops {</span>
 
 	u64 (*read_pmc)(int counter);
 
<span class="p_del">-#ifdef CONFIG_X86_32</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Atomically enable interrupts and return to userspace.  This</span>
<span class="p_del">-	 * is only used in 32-bit kernels.  64-bit kernels use</span>
<span class="p_del">-	 * usergs_sysret32 instead.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	void (*irq_enable_sysexit)(void);</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 	/*
 	 * Switch to usermode gs and return to 64-bit usermode using
 	 * sysret.  Only used in 64-bit kernels to return to 64-bit
<span class="p_header">diff --git a/arch/x86/kernel/asm-offsets.c b/arch/x86/kernel/asm-offsets.c</span>
<span class="p_header">index 439df97..84a7524 100644</span>
<span class="p_header">--- a/arch/x86/kernel/asm-offsets.c</span>
<span class="p_header">+++ b/arch/x86/kernel/asm-offsets.c</span>
<span class="p_chunk">@@ -65,9 +65,6 @@</span> <span class="p_context"> void common(void) {</span>
 	OFFSET(PV_IRQ_irq_disable, pv_irq_ops, irq_disable);
 	OFFSET(PV_IRQ_irq_enable, pv_irq_ops, irq_enable);
 	OFFSET(PV_CPU_iret, pv_cpu_ops, iret);
<span class="p_del">-#ifdef CONFIG_X86_32</span>
<span class="p_del">-	OFFSET(PV_CPU_irq_enable_sysexit, pv_cpu_ops, irq_enable_sysexit);</span>
<span class="p_del">-#endif</span>
 	OFFSET(PV_CPU_read_cr0, pv_cpu_ops, read_cr0);
 	OFFSET(PV_MMU_read_cr2, pv_mmu_ops, read_cr2);
 #endif
<span class="p_header">diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c</span>
<span class="p_header">index c2130ae..c55f437 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt.c</span>
<span class="p_chunk">@@ -162,9 +162,6 @@</span> <span class="p_context"> unsigned paravirt_patch_default(u8 type, u16 clobbers, void *insnbuf,</span>
 		ret = paravirt_patch_ident_64(insnbuf, len);
 
 	else if (type == PARAVIRT_PATCH(pv_cpu_ops.iret) ||
<span class="p_del">-#ifdef CONFIG_X86_32</span>
<span class="p_del">-		 type == PARAVIRT_PATCH(pv_cpu_ops.irq_enable_sysexit) ||</span>
<span class="p_del">-#endif</span>
 		 type == PARAVIRT_PATCH(pv_cpu_ops.usergs_sysret32) ||
 		 type == PARAVIRT_PATCH(pv_cpu_ops.usergs_sysret64))
 		/* If operation requires a jmp, then jmp */
<span class="p_chunk">@@ -220,7 +217,6 @@</span> <span class="p_context"> static u64 native_steal_clock(int cpu)</span>
 
 /* These are in entry.S */
 extern void native_iret(void);
<span class="p_del">-extern void native_irq_enable_sysexit(void);</span>
 extern void native_usergs_sysret32(void);
 extern void native_usergs_sysret64(void);
 
<span class="p_chunk">@@ -379,9 +375,6 @@</span> <span class="p_context"> __visible struct pv_cpu_ops pv_cpu_ops = {</span>
 
 	.load_sp0 = native_load_sp0,
 
<span class="p_del">-#if defined(CONFIG_X86_32)</span>
<span class="p_del">-	.irq_enable_sysexit = native_irq_enable_sysexit,</span>
<span class="p_del">-#endif</span>
 #ifdef CONFIG_X86_64
 #ifdef CONFIG_IA32_EMULATION
 	.usergs_sysret32 = native_usergs_sysret32,
<span class="p_header">diff --git a/arch/x86/kernel/paravirt_patch_32.c b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_header">index c89f50a..158dc06 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt_patch_32.c</span>
<span class="p_chunk">@@ -5,7 +5,6 @@</span> <span class="p_context"> DEF_NATIVE(pv_irq_ops, irq_enable, &quot;sti&quot;);</span>
 DEF_NATIVE(pv_irq_ops, restore_fl, &quot;push %eax; popf&quot;);
 DEF_NATIVE(pv_irq_ops, save_fl, &quot;pushf; pop %eax&quot;);
 DEF_NATIVE(pv_cpu_ops, iret, &quot;iret&quot;);
<span class="p_del">-DEF_NATIVE(pv_cpu_ops, irq_enable_sysexit, &quot;sti; sysexit&quot;);</span>
 DEF_NATIVE(pv_mmu_ops, read_cr2, &quot;mov %cr2, %eax&quot;);
 DEF_NATIVE(pv_mmu_ops, write_cr3, &quot;mov %eax, %cr3&quot;);
 DEF_NATIVE(pv_mmu_ops, read_cr3, &quot;mov %cr3, %eax&quot;);
<span class="p_chunk">@@ -46,7 +45,6 @@</span> <span class="p_context"> unsigned native_patch(u8 type, u16 clobbers, void *ibuf,</span>
 		PATCH_SITE(pv_irq_ops, restore_fl);
 		PATCH_SITE(pv_irq_ops, save_fl);
 		PATCH_SITE(pv_cpu_ops, iret);
<span class="p_del">-		PATCH_SITE(pv_cpu_ops, irq_enable_sysexit);</span>
 		PATCH_SITE(pv_mmu_ops, read_cr2);
 		PATCH_SITE(pv_mmu_ops, read_cr3);
 		PATCH_SITE(pv_mmu_ops, write_cr3);
<span class="p_header">diff --git a/arch/x86/kernel/paravirt_patch_64.c b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_header">index 8aa0558..17c00f8 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt_patch_64.c</span>
<span class="p_chunk">@@ -13,7 +13,6 @@</span> <span class="p_context"> DEF_NATIVE(pv_mmu_ops, flush_tlb_single, &quot;invlpg (%rdi)&quot;);</span>
 DEF_NATIVE(pv_cpu_ops, clts, &quot;clts&quot;);
 DEF_NATIVE(pv_cpu_ops, wbinvd, &quot;wbinvd&quot;);
 
<span class="p_del">-DEF_NATIVE(pv_cpu_ops, irq_enable_sysexit, &quot;swapgs; sti; sysexit&quot;);</span>
 DEF_NATIVE(pv_cpu_ops, usergs_sysret64, &quot;swapgs; sysretq&quot;);
 DEF_NATIVE(pv_cpu_ops, usergs_sysret32, &quot;swapgs; sysretl&quot;);
 DEF_NATIVE(pv_cpu_ops, swapgs, &quot;swapgs&quot;);
<span class="p_header">diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c</span>
<span class="p_header">index d315151..a068e36 100644</span>
<span class="p_header">--- a/arch/x86/xen/enlighten.c</span>
<span class="p_header">+++ b/arch/x86/xen/enlighten.c</span>
<span class="p_chunk">@@ -1229,10 +1229,7 @@</span> <span class="p_context"> static const struct pv_cpu_ops xen_cpu_ops __initconst = {</span>
 
 	.iret = xen_iret,
 #ifdef CONFIG_X86_64
<span class="p_del">-	.usergs_sysret32 = xen_sysret32,</span>
 	.usergs_sysret64 = xen_sysret64,
<span class="p_del">-#else</span>
<span class="p_del">-	.irq_enable_sysexit = xen_sysexit,</span>
 #endif
 
 	.load_tr_desc = paravirt_nop,
<span class="p_header">diff --git a/arch/x86/xen/xen-asm_32.S b/arch/x86/xen/xen-asm_32.S</span>
<span class="p_header">index fd92a64..feb6d40 100644</span>
<span class="p_header">--- a/arch/x86/xen/xen-asm_32.S</span>
<span class="p_header">+++ b/arch/x86/xen/xen-asm_32.S</span>
<span class="p_chunk">@@ -35,20 +35,6 @@</span> <span class="p_context"> check_events:</span>
 	ret
 
 /*
<span class="p_del">- * We can&#39;t use sysexit directly, because we&#39;re not running in ring0.</span>
<span class="p_del">- * But we can easily fake it up using iret.  Assuming xen_sysexit is</span>
<span class="p_del">- * jumped to with a standard stack frame, we can just strip it back to</span>
<span class="p_del">- * a standard iret frame and use iret.</span>
<span class="p_del">- */</span>
<span class="p_del">-ENTRY(xen_sysexit)</span>
<span class="p_del">-	movl PT_EAX(%esp), %eax			/* Shouldn&#39;t be necessary? */</span>
<span class="p_del">-	orl $X86_EFLAGS_IF, PT_EFLAGS(%esp)</span>
<span class="p_del">-	lea PT_EIP(%esp), %esp</span>
<span class="p_del">-</span>
<span class="p_del">-	jmp xen_iret</span>
<span class="p_del">-ENDPROC(xen_sysexit)</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
  * This is run where a normal iret would be run, with the same stack setup:
  *	8: eflags
  *	4: cs
<span class="p_header">diff --git a/arch/x86/xen/xen-ops.h b/arch/x86/xen/xen-ops.h</span>
<span class="p_header">index 1399423..4140b07 100644</span>
<span class="p_header">--- a/arch/x86/xen/xen-ops.h</span>
<span class="p_header">+++ b/arch/x86/xen/xen-ops.h</span>
<span class="p_chunk">@@ -139,9 +139,6 @@</span> <span class="p_context"> DECL_ASM(void, xen_restore_fl_direct, unsigned long);</span>
 
 /* These are not functions, and cannot be called normally */
 __visible void xen_iret(void);
<span class="p_del">-#ifdef CONFIG_X86_32</span>
<span class="p_del">-__visible void xen_sysexit(void);</span>
<span class="p_del">-#endif</span>
 __visible void xen_sysret32(void);
 __visible void xen_sysret64(void);
 __visible void xen_adjust_exception_frame(void);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



