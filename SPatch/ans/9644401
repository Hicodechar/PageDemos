
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,2/3] iommu/dma: account pci host bridge dma_mask for IOVA allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,2/3] iommu/dma: account pci host bridge dma_mask for IOVA allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 25, 2017, 5:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1490419893-5073-2-git-send-email-oza.oza@broadcom.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9644401/mbox/"
   >mbox</a>
|
   <a href="/patch/9644401/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9644401/">/patch/9644401/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C01D26020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 25 Mar 2017 05:32:28 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B26AD205AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 25 Mar 2017 05:32:28 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A76BB205F6; Sat, 25 Mar 2017 05:32:28 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_HI,RCVD_IN_SORBS_SPAM
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 42D4525223
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 25 Mar 2017 05:32:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S967002AbdCYFcG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 25 Mar 2017 01:32:06 -0400
Received: from mail-wm0-f46.google.com ([74.125.82.46]:35224 &quot;EHLO
	mail-wm0-f46.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S966966AbdCYFby (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 25 Mar 2017 01:31:54 -0400
Received: by mail-wm0-f46.google.com with SMTP id u132so26470247wmg.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 24 Mar 2017 22:31:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=broadcom.com; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=+1XXPr1ai1AFdZaL6cFthOCyQGCD6YnzhI4zFdyahm8=;
	b=IdtGcp1z2Gjpd3kVGkljtS/V0MwtCREpjCsltXg3IX1UsVVkmHdpCbF9boglDRTetW
	a5lzq5Ofi2X/OUri7xIf2Lyczcujoc7XAKHY9h4eobkERXrtw/x4RRelZjtA7ilecHAz
	3KZpFow3rJrMRjmaRz/LyL4RNYz9ettegiDeY=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=+1XXPr1ai1AFdZaL6cFthOCyQGCD6YnzhI4zFdyahm8=;
	b=Jn2tLgl1oM7PpveFIgMr/Uk5grpVsFf2Ni/v8vxv0k8HxQNCebWTDMVDyuZfAEij8u
	8ki4fb+LIz/5ZsC1ZxON2+ewUtE9OSJviX1blCNP7ckw61G3T9B/Q9riNe+r9RYE92wY
	AGvNe2ibDryG+sXasOd32xyGbBBDrViZZeyriiPuas3iP9U/ltM/32XI/GTv2CNJ/0iF
	hCriQAO5yqW8hGiwJaC54G88J+gUuFZ/IlssW9qKpZXCcStCoO1hTSajhuw1HorUbdeA
	G5IdBNUozUX7EcYyjqrrhUiidnVZFIVRf9Hr9066TU1KbCtN3iRcH4CTFRBDGDjhiWcq
	dycQ==
X-Gm-Message-State: AFeK/H2PknINooos3tXbvJB2SvCBqKFP4Ycrqdabbuo2XQZAuLQfN0CgFuiSvnrQGufmUGqX
X-Received: by 10.28.135.149 with SMTP id j143mr627352wmd.19.1490419912250; 
	Fri, 24 Mar 2017 22:31:52 -0700 (PDT)
Received: from anjanavk-OptiPlex-7010.dhcp.avagotech.net ([192.19.237.250])
	by smtp.gmail.com with ESMTPSA id
	x1sm5479205wrd.63.2017.03.24.22.31.47
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Fri, 24 Mar 2017 22:31:51 -0700 (PDT)
From: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;
To: Joerg Roedel &lt;joro@8bytes.org&gt;, Robin Murphy &lt;robin.murphy@arm.com&gt;
Cc: iommu@lists.linux-foundation.org, linux-pci@vger.kernel.org,
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	devicetree@vger.kernel.org, bcm-kernel-feedback-list@broadcom.com,
	Oza Pawandeep &lt;oza.oza@broadcom.com&gt;
Subject: [RFC PATCH 2/3] iommu/dma: account pci host bridge dma_mask for
	IOVA allocation
Date: Sat, 25 Mar 2017 11:01:32 +0530
Message-Id: &lt;1490419893-5073-2-git-send-email-oza.oza@broadcom.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1490419893-5073-1-git-send-email-oza.oza@broadcom.com&gt;
References: &lt;1490419893-5073-1-git-send-email-oza.oza@broadcom.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a> - March 25, 2017, 5:31 a.m.</div>
<pre class="content">
it is possible that PCI device supports 64-bit DMA addressing,
and thus it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64),
however PCI host bridge may have limitations on the inbound
transaction addressing. As an example, consider NVME SSD device
connected to iproc-PCIe controller.

Currently, the IOMMU DMA ops only considers PCI device dma_mask
when allocating an IOVA. This is particularly problematic on
ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to
PA for in-bound transactions only after PCI Host has forwarded
these transactions on SOC IO bus. This means on such ARM/ARM64
SOCs the IOVA of in-bound transactions has to honor the addressing
restrictions of the PCI Host.

this patch is inspired by
http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.html
http://www.spinics.net/lists/arm-kernel/msg566947.html

but above inspiraiton solves the half of the problem.
the rest of the problem is descrbied below, what we face on iproc based
SOCs.

current pcie frmework and of framework integration assumes dma-ranges
in a way where memory-mapped devices define their dma-ranges.
dma-ranges: (child-bus-address, parent-bus-address, length).

but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;

of_dma_configure is specifically witten to take care of memory mapped devices.
but no implementation exists for pci to take care of pcie based memory ranges.
in fact pci world doesnt seem to define standard dma-ranges

this patch implements of_pci_get_dma_ranges to cater to pci world dma-ranges.
so then the returned size get best possible (largest) dma_mask.
for e.g.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;
we should get dev-&gt;coherent_dma_mask=0x7fffffffff.
<span class="reviewed-by">
Reviewed-by: Anup Patel &lt;anup.patel@broadcom.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Scott Branden &lt;scott.branden@broadcom.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 8c7c244..20cfff7 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -217,6 +217,9 @@</span> <span class="p_context"> config NEED_DMA_MAP_STATE</span>
 config NEED_SG_DMA_LENGTH
 	def_bool y
 
<span class="p_add">+config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config SMP
 	def_bool y
 
<span class="p_header">diff --git a/arch/arm64/include/asm/device.h b/arch/arm64/include/asm/device.h</span>
<span class="p_header">index 73d5bab..64b4dc3 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -20,6 +20,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 #ifdef CONFIG_IOMMU_API
 	void *iommu;			/* private IOMMU data */
 #endif
<span class="p_add">+	u64 parent_dma_mask;</span>
 	bool dma_coherent;
 };
 
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 81cdb2e..5845ecd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -564,6 +564,7 @@</span> <span class="p_context"> static void flush_page(struct device *dev, const void *virt, phys_addr_t phys)</span>
 	__dma_flush_area(virt, PAGE_SIZE);
 }
 
<span class="p_add">+</span>
 static void *__iommu_alloc_attrs(struct device *dev, size_t size,
 				 dma_addr_t *handle, gfp_t gfp,
 				 unsigned long attrs)
<span class="p_chunk">@@ -795,6 +796,20 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device *dev,</span>
 	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);
 }
 
<span class="p_add">+static int __iommu_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct dma_map_ops iommu_dma_ops = {
 	.alloc = __iommu_alloc_attrs,
 	.free = __iommu_free_attrs,
<span class="p_chunk">@@ -811,8 +826,21 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device *dev,</span>
 	.map_resource = iommu_dma_map_resource,
 	.unmap_resource = iommu_dma_unmap_resource,
 	.mapping_error = iommu_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __iommu_set_dma_mask,</span>
 };
 
<span class="p_add">+int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="p_add">+	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = mask;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /*
  * TODO: Right now __iommu_setup_dma_ops() gets called too early to do
  * everything it needs to - the device is only partially created and the
<span class="p_chunk">@@ -975,6 +1003,8 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 	if (!dev-&gt;dma_ops)
 		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;
 
<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 }
<span class="p_header">diff --git a/drivers/of/device.c b/drivers/of/device.c</span>
<span class="p_header">index d362a98..471dcdf 100644</span>
<span class="p_header">--- a/drivers/of/device.c</span>
<span class="p_header">+++ b/drivers/of/device.c</span>
<span class="p_chunk">@@ -139,10 +139,8 @@</span> <span class="p_context"> void of_dma_configure(struct device *dev, struct device_node *np)</span>
 	 * Limit coherent and dma mask based on size and default mask
 	 * set by the driver.
 	 */
<span class="p_del">-	dev-&gt;coherent_dma_mask = min(dev-&gt;coherent_dma_mask,</span>
<span class="p_del">-				     DMA_BIT_MASK(ilog2(dma_addr + size)));</span>
<span class="p_del">-	*dev-&gt;dma_mask = min((*dev-&gt;dma_mask),</span>
<span class="p_del">-			     DMA_BIT_MASK(ilog2(dma_addr + size)));</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = DMA_BIT_MASK(ilog2(dma_addr + size));</span>
<span class="p_add">+	*dev-&gt;dma_mask = dev-&gt;coherent_dma_mask;</span>
 
 	coherent = of_dma_is_coherent(np);
 	dev_dbg(dev, &quot;device is%sdma coherent\n&quot;,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



