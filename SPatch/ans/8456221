
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[ANNOUNCE] 3.10.97-rt106 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [ANNOUNCE] 3.10.97-rt106</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 29, 2016, 5:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160229120638.10e39e5a@gandalf.local.home&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8456221/mbox/"
   >mbox</a>
|
   <a href="/patch/8456221/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8456221/">/patch/8456221/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id CB52A9F2F0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Feb 2016 17:06:52 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 75E01201FA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Feb 2016 17:06:50 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id EDA762021A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 29 Feb 2016 17:06:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752546AbcB2RGp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 29 Feb 2016 12:06:45 -0500
Received: from smtprelay0012.hostedemail.com ([216.40.44.12]:53852 &quot;EHLO
	smtprelay.hostedemail.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1751194AbcB2RGm (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 29 Feb 2016 12:06:42 -0500
Received: from filter.hostedemail.com (unknown [216.40.38.60])
	by smtprelay08.hostedemail.com (Postfix) with ESMTP id 0FA2729DDE4;
	Mon, 29 Feb 2016 17:06:41 +0000 (UTC)
X-Session-Marker: 726F737465647440676F6F646D69732E6F7267
X-Spam-Summary: 50, 0, 0, , d41d8cd98f00b204, rostedt@goodmis.org,
	:::::::::::,
	RULES_HIT:1:41:69:355:379:541:800:966:967:968:969:973:988:989:1260:1263:1277:1311:1313:1314:1345:1437:1515:1516:1518:1593:1594:1605:1730:1747:1777:1792:1801:2194:2196:2199:2200:2393:2525:2566:2638:2682:2685:2687:2859:2933:2937:2939:2942:2945:2947:2951:2954:3022:3138:3139:3140:3141:3142:3165:3770:3834:3865:3866:3867:3871:3872:3873:3934:3936:3938:3941:3944:3947:3950:3953:3956:3959:4321:4385:4560:4605:5007:6119:6261:6299:6684:7266:7875:7903:8509:8531:8599:8660:8784:8985:9025:9038:9072:9388:9592:10004:10049:10848:11026:11232:11473:11657:11658:11914:12043:12291:12294:12296:12438:12517:12519:12555:12663:12679:12683:13019:13148:13230:13439:14096:14097:14394:14659:21080:21365:30045:30054:30056:30070,
	0, RBL:none, CacheIP:none, Bayesian:0.5, 0.5, 0.5,
	Netcheck:none, DomainCache:0, MSF:not bulk, SPF:fn, MSBL:0,
	DNSBL:none, Custom_rules:0:0:0, LFtime:7, LUA_SUMMARY:none
X-HE-Tag: skin97_5740264b60f5f
X-Filterd-Recvd-Size: 12916
Received: from gandalf.local.home (cpe-67-246-153-56.stny.res.rr.com
	[67.246.153.56]) (Authenticated sender: rostedt@goodmis.org)
	by omf09.hostedemail.com (Postfix) with ESMTPA;
	Mon, 29 Feb 2016 17:06:39 +0000 (UTC)
Date: Mon, 29 Feb 2016 12:06:38 -0500
From: Steven Rostedt &lt;rostedt@goodmis.org&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;,
	linux-rt-users &lt;linux-rt-users@vger.kernel.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Carsten Emde &lt;C.Emde@osadl.org&gt;,
	John Kacur &lt;jkacur@redhat.com&gt;,
	Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;
Subject: [ANNOUNCE] 3.10.97-rt106
Message-ID: &lt;20160229120638.10e39e5a@gandalf.local.home&gt;
X-Mailer: Claws Mail 3.13.2 (GTK+ 2.24.29; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - Feb. 29, 2016, 5:06 p.m.</div>
<pre class="content">
Dear RT Folks,

I&#39;m pleased to announce the 3.10.97-rt106 stable release.


You can get this release via the git tree at:

  git://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-stable-rt.git

  branch: v3.10-rt
  Head SHA1: 141a4ed5a87365316b29491b6b982d102d79d754


Or to build 3.10.97-rt106 directly, the following patches should be applied:

  http://www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.tar.xz

  http://www.kernel.org/pub/linux/kernel/v3.x/patch-3.10.97.xz

  http://www.kernel.org/pub/linux/kernel/projects/rt/3.10/patch-3.10.97-rt106.patch.xz



You can also build from 3.10.97-rt105 by applying the incremental patch:

  http://www.kernel.org/pub/linux/kernel/projects/rt/3.10/incr/patch-3.10.97-rt105-rt106.patch.xz



Enjoy,

-- Steve


Changes from v3.10.97-rt105:

---

Grygorii Strashko (2):
      ARM: smp: Move clear_tasks_mm_cpumask() call to __cpu_die()
      net/core/cpuhotplug: Drain input_pkt_queue lockless

Josh Cartwright (1):
      net: Make synchronize_rcu_expedited() conditional on !RT_FULL

Peter Zijlstra (1):
      sched: Introduce the trace_sched_waking tracepoint

Sebastian Andrzej Siewior (1):
      dump stack: don&#39;t disable preemption during trace

Steven Rostedt (Red Hat) (2):
      rtmutex: Have slowfn of rt_mutex_timed_fastlock() use enum
      Linux 3.10.97-rt106

Thomas Gleixner (2):
      rtmutex: Handle non enqueued waiters gracefully
      irqwork: Move irq safe work to irq context

bmouring@ni.com (1):
      rtmutex: Use chainwalking control enum

----
 arch/arm/kernel/smp.c             |  5 +++--
 arch/x86/kernel/dumpstack_64.c    |  8 ++++----
 include/linux/irq_work.h          |  6 ++++++
 include/trace/events/sched.h      | 30 +++++++++++++++++++++---------
 kernel/irq_work.c                 |  9 +++++++++
 kernel/rtmutex.c                  |  6 +++---
 kernel/sched/core.c               |  8 +++++---
 kernel/timer.c                    |  6 ++----
 kernel/trace/trace_sched_switch.c |  2 +-
 kernel/trace/trace_sched_wakeup.c |  2 +-
 localversion-rt                   |  2 +-
 net/core/dev.c                    |  4 ++--
 12 files changed, 58 insertions(+), 30 deletions(-)
---------------------------
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c</span>
<span class="p_header">index 5919eb451bb9..7ad24aa57040 100644</span>
<span class="p_header">--- a/arch/arm/kernel/smp.c</span>
<span class="p_header">+++ b/arch/arm/kernel/smp.c</span>
<span class="p_chunk">@@ -192,8 +192,6 @@</span> <span class="p_context"> int __cpuinit __cpu_disable(void)</span>
 	flush_cache_louis();
 	local_flush_tlb_all();
 
<span class="p_del">-	clear_tasks_mm_cpumask(cpu);</span>
<span class="p_del">-</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -209,6 +207,9 @@</span> <span class="p_context"> void __cpuinit __cpu_die(unsigned int cpu)</span>
 		pr_err(&quot;CPU%u: cpu didn&#39;t die\n&quot;, cpu);
 		return;
 	}
<span class="p_add">+</span>
<span class="p_add">+	clear_tasks_mm_cpumask(cpu);</span>
<span class="p_add">+</span>
 	printk(KERN_NOTICE &quot;CPU%u: shutdown\n&quot;, cpu);
 
 	/*
<span class="p_header">diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c</span>
<span class="p_header">index 66e274a3d968..37aee503a7ba 100644</span>
<span class="p_header">--- a/arch/x86/kernel/dumpstack_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/dumpstack_64.c</span>
<span class="p_chunk">@@ -114,7 +114,7 @@</span> <span class="p_context"> void dump_trace(struct task_struct *task, struct pt_regs *regs,</span>
 		unsigned long *stack, unsigned long bp,
 		const struct stacktrace_ops *ops, void *data)
 {
<span class="p_del">-	const unsigned cpu = get_cpu();</span>
<span class="p_add">+	const unsigned cpu = get_cpu_light();</span>
 	unsigned long *irq_stack_end =
 		(unsigned long *)per_cpu(irq_stack_ptr, cpu);
 	unsigned used = 0;
<span class="p_chunk">@@ -191,7 +191,7 @@</span> <span class="p_context"> void dump_trace(struct task_struct *task, struct pt_regs *regs,</span>
 	 * This handles the process stack:
 	 */
 	bp = ops-&gt;walk_stack(tinfo, stack, bp, ops, data, NULL, &amp;graph);
<span class="p_del">-	put_cpu();</span>
<span class="p_add">+	put_cpu_light();</span>
 }
 EXPORT_SYMBOL(dump_trace);
 
<span class="p_chunk">@@ -205,7 +205,7 @@</span> <span class="p_context"> show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,</span>
 	int cpu;
 	int i;
 
<span class="p_del">-	preempt_disable();</span>
<span class="p_add">+	migrate_disable();</span>
 	cpu = smp_processor_id();
 
 	irq_stack_end	= (unsigned long *)(per_cpu(irq_stack_ptr, cpu));
<span class="p_chunk">@@ -238,7 +238,7 @@</span> <span class="p_context"> show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,</span>
 		pr_cont(&quot; %016lx&quot;, *stack++);
 		touch_nmi_watchdog();
 	}
<span class="p_del">-	preempt_enable();</span>
<span class="p_add">+	migrate_enable();</span>
 
 	pr_cont(&quot;\n&quot;);
 	show_trace_log_lvl(task, regs, sp, bp, log_lvl);
<span class="p_header">diff --git a/include/linux/irq_work.h b/include/linux/irq_work.h</span>
<span class="p_header">index 4a8c7a2df480..ccd736ebee9e 100644</span>
<span class="p_header">--- a/include/linux/irq_work.h</span>
<span class="p_header">+++ b/include/linux/irq_work.h</span>
<span class="p_chunk">@@ -44,4 +44,10 @@</span> <span class="p_context"> bool irq_work_needs_cpu(void);</span>
 static inline bool irq_work_needs_cpu(void) { return false; }
 #endif
 
<span class="p_add">+#if defined(CONFIG_IRQ_WORK) &amp;&amp; defined(CONFIG_PREEMPT_RT_FULL)</span>
<span class="p_add">+void irq_work_tick_soft(void);</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void irq_work_tick_soft(void) { }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif /* _LINUX_IRQ_WORK_H */
<span class="p_header">diff --git a/include/trace/events/sched.h b/include/trace/events/sched.h</span>
<span class="p_header">index e5586caff67a..1ff7042e572d 100644</span>
<span class="p_header">--- a/include/trace/events/sched.h</span>
<span class="p_header">+++ b/include/trace/events/sched.h</span>
<span class="p_chunk">@@ -55,9 +55,9 @@</span> <span class="p_context"> TRACE_EVENT(sched_kthread_stop_ret,</span>
  */
 DECLARE_EVENT_CLASS(sched_wakeup_template,
 
<span class="p_del">-	TP_PROTO(struct task_struct *p, int success),</span>
<span class="p_add">+	TP_PROTO(struct task_struct *p),</span>
 
<span class="p_del">-	TP_ARGS(p, success),</span>
<span class="p_add">+	TP_ARGS(p),</span>
 
 	TP_STRUCT__entry(
 		__array(	char,	comm,	TASK_COMM_LEN	)
<span class="p_chunk">@@ -71,28 +71,40 @@</span> <span class="p_context"> DECLARE_EVENT_CLASS(sched_wakeup_template,</span>
 		memcpy(__entry-&gt;comm, p-&gt;comm, TASK_COMM_LEN);
 		__entry-&gt;pid		= p-&gt;pid;
 		__entry-&gt;prio		= p-&gt;prio;
<span class="p_del">-		__entry-&gt;success	= success;</span>
<span class="p_add">+		__entry-&gt;success	= 1; /* rudiment, kill when possible */</span>
 		__entry-&gt;target_cpu	= task_cpu(p);
 	)
 	TP_perf_assign(
 		__perf_task(p);
 	),
 
<span class="p_del">-	TP_printk(&quot;comm=%s pid=%d prio=%d success=%d target_cpu=%03d&quot;,</span>
<span class="p_add">+	TP_printk(&quot;comm=%s pid=%d prio=%d target_cpu=%03d&quot;,</span>
 		  __entry-&gt;comm, __entry-&gt;pid, __entry-&gt;prio,
<span class="p_del">-		  __entry-&gt;success, __entry-&gt;target_cpu)</span>
<span class="p_add">+		  __entry-&gt;target_cpu)</span>
 );
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Tracepoint called when waking a task; this tracepoint is guaranteed to be</span>
<span class="p_add">+ * called from the waking context.</span>
<span class="p_add">+ */</span>
<span class="p_add">+DEFINE_EVENT(sched_wakeup_template, sched_waking,</span>
<span class="p_add">+	     TP_PROTO(struct task_struct *p),</span>
<span class="p_add">+	     TP_ARGS(p));</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Tracepoint called when the task is actually woken; p-&gt;state == TASK_RUNNNG.</span>
<span class="p_add">+ * It it not always called from the waking context.</span>
<span class="p_add">+ */</span>
 DEFINE_EVENT(sched_wakeup_template, sched_wakeup,
<span class="p_del">-	     TP_PROTO(struct task_struct *p, int success),</span>
<span class="p_del">-	     TP_ARGS(p, success));</span>
<span class="p_add">+	     TP_PROTO(struct task_struct *p),</span>
<span class="p_add">+	     TP_ARGS(p));</span>
 
 /*
  * Tracepoint for waking up a new task:
  */
 DEFINE_EVENT(sched_wakeup_template, sched_wakeup_new,
<span class="p_del">-	     TP_PROTO(struct task_struct *p, int success),</span>
<span class="p_del">-	     TP_ARGS(p, success));</span>
<span class="p_add">+	     TP_PROTO(struct task_struct *p),</span>
<span class="p_add">+	     TP_ARGS(p));</span>
 
 #ifdef CREATE_TRACE_POINTS
 static inline long __trace_sched_switch_state(struct task_struct *p)
<span class="p_header">diff --git a/kernel/irq_work.c b/kernel/irq_work.c</span>
<span class="p_header">index af8ceafc94e4..883bb73698b9 100644</span>
<span class="p_header">--- a/kernel/irq_work.c</span>
<span class="p_header">+++ b/kernel/irq_work.c</span>
<span class="p_chunk">@@ -163,8 +163,17 @@</span> <span class="p_context"> void irq_work_tick(void)</span>
 
 	if (!llist_empty(raised) &amp;&amp; !arch_irq_work_has_interrupt())
 		irq_work_run_list(raised);
<span class="p_add">+</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_PREEMPT_RT_FULL))</span>
<span class="p_add">+		irq_work_run_list(this_cpu_ptr(&amp;lazy_list));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#if defined(CONFIG_IRQ_WORK) &amp;&amp; defined(CONFIG_PREEMPT_RT_FULL)</span>
<span class="p_add">+void irq_work_tick_soft(void)</span>
<span class="p_add">+{</span>
 	irq_work_run_list(this_cpu_ptr(&amp;lazy_list));
 }
<span class="p_add">+#endif</span>
 
 /*
  * Synchronize against the irq_work @entry, ensures the entry is not
<span class="p_header">diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c</span>
<span class="p_header">index 5388ba98acaf..a809539f443c 100644</span>
<span class="p_header">--- a/kernel/rtmutex.c</span>
<span class="p_header">+++ b/kernel/rtmutex.c</span>
<span class="p_chunk">@@ -1166,7 +1166,7 @@</span> <span class="p_context"> static void  noinline __sched rt_spin_lock_slowlock(struct rt_mutex *lock)</span>
 	__set_current_state(TASK_UNINTERRUPTIBLE);
 	pi_unlock(&amp;self-&gt;pi_lock);
 
<span class="p_del">-	ret = task_blocks_on_rt_mutex(lock, &amp;waiter, self, 0);</span>
<span class="p_add">+	ret = task_blocks_on_rt_mutex(lock, &amp;waiter, self, RT_MUTEX_MIN_CHAINWALK);</span>
 	BUG_ON(ret);
 
 	for (;;) {
<span class="p_chunk">@@ -1636,7 +1636,7 @@</span> <span class="p_context"> rt_mutex_timed_fastlock(struct rt_mutex *lock, int state,</span>
 			enum rtmutex_chainwalk chwalk,
 			int (*slowfn)(struct rt_mutex *lock, int state,
 				      struct hrtimer_sleeper *timeout,
<span class="p_del">-				      int detect_deadlock))</span>
<span class="p_add">+				      enum rtmutex_chainwalk chwalk))</span>
 {
 	if (chwalk == RT_MUTEX_MIN_CHAINWALK &amp;&amp;
 	    likely(rt_mutex_cmpxchg(lock, NULL, current))) {
<span class="p_chunk">@@ -1914,7 +1914,7 @@</span> <span class="p_context"> int rt_mutex_start_proxy_lock(struct rt_mutex *lock,</span>
 		ret = 0;
 	}
 
<span class="p_del">-	if (unlikely(ret))</span>
<span class="p_add">+	if (ret &amp;&amp; rt_mutex_has_waiters(lock))</span>
 		remove_waiter(lock, waiter);
 
 	raw_spin_unlock(&amp;lock-&gt;wait_lock);
<span class="p_header">diff --git a/kernel/sched/core.c b/kernel/sched/core.c</span>
<span class="p_header">index 23e289ae4270..6c21a28689b9 100644</span>
<span class="p_header">--- a/kernel/sched/core.c</span>
<span class="p_header">+++ b/kernel/sched/core.c</span>
<span class="p_chunk">@@ -1394,9 +1394,9 @@</span> <span class="p_context"> static void</span>
 ttwu_do_wakeup(struct rq *rq, struct task_struct *p, int wake_flags)
 {
 	check_preempt_curr(rq, p, wake_flags);
<span class="p_del">-	trace_sched_wakeup(p, true);</span>
<span class="p_del">-</span>
 	p-&gt;state = TASK_RUNNING;
<span class="p_add">+	trace_sched_wakeup(p);</span>
<span class="p_add">+</span>
 #ifdef CONFIG_SMP
 	if (p-&gt;sched_class-&gt;task_woken)
 		p-&gt;sched_class-&gt;task_woken(rq, p);
<span class="p_chunk">@@ -1579,6 +1579,8 @@</span> <span class="p_context"> try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)</span>
 	if (!(wake_flags &amp; WF_LOCK_SLEEPER))
 		p-&gt;saved_state = TASK_RUNNING;
 
<span class="p_add">+	trace_sched_waking(p);</span>
<span class="p_add">+</span>
 	success = 1; /* we&#39;re going to change -&gt;state */
 	cpu = task_cpu(p);
 
<span class="p_chunk">@@ -1830,7 +1832,7 @@</span> <span class="p_context"> void wake_up_new_task(struct task_struct *p)</span>
 	rq = __task_rq_lock(p);
 	activate_task(rq, p, 0);
 	p-&gt;on_rq = 1;
<span class="p_del">-	trace_sched_wakeup_new(p, true);</span>
<span class="p_add">+	trace_sched_wakeup_new(p);</span>
 	check_preempt_curr(rq, p, WF_FORK);
 #ifdef CONFIG_SMP
 	if (p-&gt;sched_class-&gt;task_woken)
<span class="p_header">diff --git a/kernel/timer.c b/kernel/timer.c</span>
<span class="p_header">index ff272e20ee0c..2fd6ea5c6519 100644</span>
<span class="p_header">--- a/kernel/timer.c</span>
<span class="p_header">+++ b/kernel/timer.c</span>
<span class="p_chunk">@@ -1450,7 +1450,7 @@</span> <span class="p_context"> void update_process_times(int user_tick)</span>
 	scheduler_tick();
 	run_local_timers();
 	rcu_check_callbacks(cpu, user_tick);
<span class="p_del">-#if defined(CONFIG_IRQ_WORK) &amp;&amp; !defined(CONFIG_PREEMPT_RT_FULL)</span>
<span class="p_add">+#if defined(CONFIG_IRQ_WORK)</span>
 	if (in_irq())
 		irq_work_run();
 #endif
<span class="p_chunk">@@ -1466,9 +1466,7 @@</span> <span class="p_context"> static void run_timer_softirq(struct softirq_action *h)</span>
 
 	hrtimer_run_pending();
 
<span class="p_del">-#if defined(CONFIG_IRQ_WORK) &amp;&amp; defined(CONFIG_PREEMPT_RT_FULL)</span>
<span class="p_del">-	irq_work_tick();</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	irq_work_tick_soft();</span>
 
 	if (time_after_eq(jiffies, base-&gt;timer_jiffies))
 		__run_timers(base);
<span class="p_header">diff --git a/kernel/trace/trace_sched_switch.c b/kernel/trace/trace_sched_switch.c</span>
<span class="p_header">index 4e98e3b257a3..82fe794af532 100644</span>
<span class="p_header">--- a/kernel/trace/trace_sched_switch.c</span>
<span class="p_header">+++ b/kernel/trace/trace_sched_switch.c</span>
<span class="p_chunk">@@ -106,7 +106,7 @@</span> <span class="p_context"> tracing_sched_wakeup_trace(struct trace_array *tr,</span>
 }
 
 static void
<span class="p_del">-probe_sched_wakeup(void *ignore, struct task_struct *wakee, int success)</span>
<span class="p_add">+probe_sched_wakeup(void *ignore, struct task_struct *wakee)</span>
 {
 	struct trace_array_cpu *data;
 	unsigned long flags;
<span class="p_header">diff --git a/kernel/trace/trace_sched_wakeup.c b/kernel/trace/trace_sched_wakeup.c</span>
<span class="p_header">index fee77e15d815..8e967ca56006 100644</span>
<span class="p_header">--- a/kernel/trace/trace_sched_wakeup.c</span>
<span class="p_header">+++ b/kernel/trace/trace_sched_wakeup.c</span>
<span class="p_chunk">@@ -458,7 +458,7 @@</span> <span class="p_context"> static void wakeup_reset(struct trace_array *tr)</span>
 }
 
 static void
<span class="p_del">-probe_wakeup(void *ignore, struct task_struct *p, int success)</span>
<span class="p_add">+probe_wakeup(void *ignore, struct task_struct *p)</span>
 {
 	struct trace_array_cpu *data;
 	int cpu = smp_processor_id();
<span class="p_header">diff --git a/localversion-rt b/localversion-rt</span>
<span class="p_header">index b4e5b00e24e1..8111d0b4d38d 100644</span>
<span class="p_header">--- a/localversion-rt</span>
<span class="p_header">+++ b/localversion-rt</span>
<span class="p_chunk">@@ -1 +1 @@</span> <span class="p_context"></span>
<span class="p_del">--rt105</span>
<span class="p_add">+-rt106</span>
<span class="p_header">diff --git a/net/core/dev.c b/net/core/dev.c</span>
<span class="p_header">index a478f77e4322..864f7ae42c08 100644</span>
<span class="p_header">--- a/net/core/dev.c</span>
<span class="p_header">+++ b/net/core/dev.c</span>
<span class="p_chunk">@@ -5838,7 +5838,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(free_netdev);</span>
 void synchronize_net(void)
 {
 	might_sleep();
<span class="p_del">-	if (rtnl_is_locked())</span>
<span class="p_add">+	if (rtnl_is_locked() &amp;&amp; !IS_ENABLED(CONFIG_PREEMPT_RT_FULL))</span>
 		synchronize_rcu_expedited();
 	else
 		synchronize_rcu();
<span class="p_chunk">@@ -6088,7 +6088,7 @@</span> <span class="p_context"> static int dev_cpu_callback(struct notifier_block *nfb,</span>
 		netif_rx(skb);
 		input_queue_head_incr(oldsd);
 	}
<span class="p_del">-	while ((skb = skb_dequeue(&amp;oldsd-&gt;input_pkt_queue))) {</span>
<span class="p_add">+	while ((skb = __skb_dequeue(&amp;oldsd-&gt;input_pkt_queue))) {</span>
 		netif_rx(skb);
 		input_queue_head_incr(oldsd);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



