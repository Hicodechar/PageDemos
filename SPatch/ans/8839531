
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2] x86/vdso: add mremap hook to vm_special_mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2] x86/vdso: add mremap hook to vm_special_mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 14, 2016, 4:32 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1460651571-10545-1-git-send-email-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8839531/mbox/"
   >mbox</a>
|
   <a href="/patch/8839531/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8839531/">/patch/8839531/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id A5B409F54F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 16:34:31 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E30DB20272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 16:34:30 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0657F20204
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 Apr 2016 16:34:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932183AbcDNQeO (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 14 Apr 2016 12:34:14 -0400
Received: from mail-db3on0138.outbound.protection.outlook.com
	([157.55.234.138]:54922
	&quot;EHLO emea01-db3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1756433AbcDNQeK (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 14 Apr 2016 12:34:10 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1;
	h=From:To:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=qmRI+g3a6ohVx9Pt9+UTTlxWL2cCIqQ3D5aEvAtkQ0Q=;
	b=RYXllyMMto0bA509X354efte0Ugy9WeoXob7RgPRyf9+jDvcHXbcYY2fmwKht0kdRiOM7IL6n4dBVoKtNsqduphPDokZyOzSddaSNh8cbplG6alk8OoMa22zWH/qVHxCils88PWJeCaBMqLaKTZBb8TFXgxei4OeCxJMW/7tud0=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none;vger.kernel.org; dmarc=none action=none
	header.from=virtuozzo.com;
Received: from dsafonov.sw.ru (195.214.232.10) by
	HE1PR0801MB1305.eurprd08.prod.outlook.com (10.167.247.147) with
	Microsoft
	SMTP Server (TLS) id 15.1.447.15; Thu, 14 Apr 2016 16:34:03 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;luto@amacapital.net&gt;, &lt;tglx@linutronix.de&gt;, &lt;mingo@redhat.com&gt;,
	&lt;hpa@zytor.com&gt;, &lt;x86@kernel.org&gt;, &lt;akpm@linux-foundation.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;0x7f454c46@gmail.com&gt;,
	Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
Subject: [PATCHv2] x86/vdso: add mremap hook to vm_special_mapping
Date: Thu, 14 Apr 2016 19:32:51 +0300
Message-ID: &lt;1460651571-10545-1-git-send-email-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.8.0
In-Reply-To: &lt;1460388169-13340-1-git-send-email-dsafonov@virtuozzo.com&gt;
References: &lt;1460388169-13340-1-git-send-email-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.10]
X-ClientProxiedBy: AM3PR07CA0020.eurprd07.prod.outlook.com (10.141.45.148) To
	HE1PR0801MB1305.eurprd08.prod.outlook.com (10.167.247.147)
X-MS-Office365-Filtering-Correlation-Id: 4dbbc96d-260e-41d5-640f-08d3648297de
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	2:Ra/IYvVrWpk0OMyhUv/c8oTsqXBMS4pRU0TwaFJNKh/fsef3/y44wUI7qVTklOy/Fmegiqqezwx0eVBLQzrn1hGx6hPGpDWsJiSOBcHjSlOH6NktHbXXs9RXXMZbgYGk4Lgl0QAiR94y/lSutwM0Eu83vTEQuCZrxYBqt05CbPKCLaMgvYtulazocAirlvbJ;
	3:3vHq9YefLkp+3GSnWFukNavVODPKGh6s0Wmds5od/DN4G7rlWsmBHpv7m5ecnsJ4LxjqVJvJjGfegHTHNFSU+/vT96R8nsjITl2mwkCcBlD9AISpOMg3DNIKXRo+JdvM;
	25:wTZxxisPtytokFyhN6iH+ogHkjPi69V7Da889Si8wTOrD1sAfYDA2eppNiZ7nPEO+fMj9BA5oOvxMQO1SfVZRgFDAfQB59K/avvEi3XGhueLBEOHEup7rOqXq6qRXRMejY7CYpkHHviqvNhT4tl7e2j9YU5DmCL61An+RrTwACg4a1dt4qyebdkt+tu36ecTCuYxPBb8DErriEb009RjkEnPxAUbc865/SfUHDc1qrTP2AlODnOTUiqIof4aaI+oTgMrtKAOi6wvdBM7RFoc2gr2Oi2Dgd9waw+LgIzS71nQtLSKGaLNkKmeMDcjqXgtWx3+tLwDI7NMIo4BRFnnvfDMGeDFgbWuIH59KHRwvERxzDg0Lc4yAWYEL3KSBVE7fY2p46OEFkyoSzVYIabcUOItoigMkqLZJwmmjyWfJWZ88t/DRnSrBklquUKvxXk7tVnXTwAUZoV2KgEm/QYYWTL5VBlpHXWXA46/sKTmtRRUusWzEDnRCrpLkEg5inoaQarjZqw2zxUSZnSkpG3uapCQ94Z7QxiL1omP+CDaPtBUwpZnQJeLqZHSq95kBZyhXja4tVIE58912k2tg9vG7PmLLsEqi+aIm
	Yptf/adjMwzRJmZqo/7wVrWsH/fEJfs
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:HE1PR0801MB1305;
X-Microsoft-Antispam-PRVS: &lt;HE1PR0801MB1305C3DDBB52796B56954239D1970@HE1PR0801MB1305.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040102)(601004)(2401047)(5005006)(8121501046)(10201501046)(3002001)(6041046)(6043046);
	SRVR:HE1PR0801MB1305; BCL:0; PCL:0; RULEID:;
	SRVR:HE1PR0801MB1305; 
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	4:/3ITNA5I85VVRSFVbwxTgU/EK0OgQFfYQNmFNflg7TB9BxM3BhDMK/RbHnpL7Zgi3J14dx7D1JcZg+LA/8HC0hBIqpjj0S2hcGYth512oSo3twA8PXfvpydR+cMPKnAeDeh4Ysk1k4IR/EqjPjLK1gA79SRnRRDW0O9owq1/tkBTzZHVG3AAB9Fz4kcdb43ulqS0HbS85df+f+9kd5+xKYufbBkcAEOfiCx/rxAw7u4voGoEgMO01omwsRevat1xGgT+vAZJgEZAeIKl6g/pdDvjHOUm12yNhrWYzVLdb5GP5K41afyVB5denBMIumI6Sv9LCaN0OzrOGr+B3VZafqF1G5XeUXzjmTPj+wHakThozj+lxp4id4DTlWV+JFV02amZqpR2Dys0hOvPnLAq/M2Vzr1/RWq1br64e/4nAsQ=
X-Forefront-PRVS: 0912297777
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(42186005)(47776003)(53416004)(19580395003)(66066001)(86362001)(5003940100001)(1096002)(586003)(2950100001)(4326007)(81166005)(48376002)(3846002)(6116002)(19580405001)(50466002)(2906002)(77096005)(92566002)(110136002)(4001430100002)(229853001)(33646002)(5004730100002)(189998001)(2351001)(5008740100001)(50986999)(76176999)(36756003)(50226001)(107886002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:HE1PR0801MB1305;
	H:dsafonov.sw.ru; FPR:; SPF:None; MLV:sfv; LANG:en; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; HE1PR0801MB1305;
	23:01pRSpJM+JzR83S8V6CTijbgQbkNUVLWQ74hz9t?=
	=?us-ascii?Q?E2UB5+zMD1jwtlDLUGUi1IruXqZpQyxWkk+//rhtLxBugO9w1P7KNqjjvX8M?=
	=?us-ascii?Q?GwdO7aWX/vAoC9XB2P08YewWnkfXLecnoZBuZ9MR2hMzuupLDyjsQl/usjUr?=
	=?us-ascii?Q?WzxEHPc82kTtp4zp7SuIG5Bau7j1BSaajNf47fxoWHv8YuotfCc48f8hetqJ?=
	=?us-ascii?Q?ctvr+gJrR89ATSCa0ek6pPzbt/FwDSvmwUrfaf3QHUuSID51VDS0s4GhNMoO?=
	=?us-ascii?Q?C+Jj4NCO4I9xf4Z1kPz7zyWHpS1PsQUUSkAESlZM761ulr+5ijKIiyYThvir?=
	=?us-ascii?Q?3nxp8hakFaI0Xn+6Y1O4Oc+hkWSvYLD/kaPdjJ1eknPEN5xAARs9cdFkAN7a?=
	=?us-ascii?Q?ZYYCqhNydXCkP4a873hJGtTJ0HCseJayvGNPAAahyN24NWjnNjVO0CoKKlZu?=
	=?us-ascii?Q?ubRiddaqiO0ojMGMYQAz+YxkMRTDEJC1kQta1nOa0uN3HzBAMX8JApq1X4ig?=
	=?us-ascii?Q?3dQoDAo9HxsRtYAhoMEA+2Q2PUYjnUI9w7kgaO6Ur24WdqIinApnwek3bwsG?=
	=?us-ascii?Q?4l7y+CeIio75KOW2tfOaxi5sA5j6xeHlfJSv8pYvZjk7sSLjzthvCYRO8K5X?=
	=?us-ascii?Q?uV9hrfqo1//ovcbdL1W2xzBOVnqGt18xDaYxF9KpFZ1FiL+HNKTjmTxQNYqs?=
	=?us-ascii?Q?zHhlOF6HTFMn8YNdeV6rZQlNAIp2AyS8tiRw2/TyIezrdX9DEsjgDQRiTP/3?=
	=?us-ascii?Q?Qoph3B+k+422xxxlmiRGQf73NdQ4pWT5A1r25wZh/i9a9fh0DIz+jLTlrej9?=
	=?us-ascii?Q?Ra2KmgUWgY4lvtRxOyT4fHSx12d67XS/MNfze7thuAt3TQ0UTHdmavb9gLow?=
	=?us-ascii?Q?7L+oClrz7e/4trMu0O9KRniOa239ANoyP9vBOqwKhvlKabGCpSVTRyhCvjcw?=
	=?us-ascii?Q?Pr8r41NfZs8JbOPWUexJBKulKnEgUzTBWRkp1OZMwXQ=3D=3D?=
X-Microsoft-Exchange-Diagnostics: 1; HE1PR0801MB1305;
	5:+zrNbIqOBbhnxEsnBSDABQ1tfE2yAKsZexFQZrrrYhvDVH7zPZe5EVhugDmtQduQvlWI0jkaKM8ASwSi3hSpBiLAqZ9YMtwS07Ex3qXT3EgpG7z0TTmfKaNh+1qMg+wV51rUwkN0kweX5GSF1mN3zg==;
	24:cYg+7uGsNDJ9zwCYj0YnrjJJWax6J+BAQgCTPWjK1phhDK+hKazup8djvheH9wKJJZb67fHpF2IxDs83uxjHYfhtKH9OriBBzpWBYNO4gis=;
	20:r5Tai5OZuqyLZLiiV/A5AdRcv1rYisiiriska+Hgx+zGbfR3IM+cZer1jhkb2tY2AtexvDcirg2uyPKA/FjjQ5P28sSTrd1BNMAluxxOPVif60ChwKMohLlCfCpEHcjm3Y19k5sEKB0Qb3OkDJAKYSmr9JHcdBMo8Qp9D8kmlWc=
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Apr 2016 16:34:03.6769
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: HE1PR0801MB1305
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 14, 2016, 4:32 p.m.</div>
<pre class="content">
Add possibility for userspace 32-bit applications to move
vdso mapping. Previously, when userspace app called
mremap for vdso, in return path it would land on previous
address of vdso page, resulting in segmentation violation.
Now it lands fine and returns to userspace with remapped vdso.
This will also fix context.vdso pointer for 64-bit, which does not
affect the user of vdso after mremap by now, but this may change.

Renamed and moved text_mapping structure declaration inside
map_vdso, as it used only there and now it complement
vvar_mapping variable.

There is still problem for remapping vdso in 32-bit glibc applications:
linker relocates addresses for syscalls on vdso page, so
you need to relink with the new addresses. Or the next syscall
through glibc may fail:
  Program received signal SIGSEGV, Segmentation fault.
  #0  0xf7fd9b80 in __kernel_vsyscall ()
  #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
v2: added __maybe_unused for pt_regs in vdso_mremap

 arch/x86/entry/vdso/vma.c | 33 ++++++++++++++++++++++++++++-----
 include/linux/mm_types.h  |  3 +++
 mm/mmap.c                 | 10 ++++++++++
 3 files changed, 41 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - April 14, 2016, 10:58 p.m.</div>
<pre class="content">
On Thu, Apr 14, 2016 at 9:32 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt; vvar_mapping variable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; There is still problem for remapping vdso in 32-bit glibc applications:</span>
<span class="quote">&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt; through glibc may fail:</span>
<span class="quote">&gt;   Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;   #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;   #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/x86/entry/vdso/vma.c | 33 ++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;  include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;  mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;  3 files changed, 41 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; index 10f704584922..7e261e2554c8 100644</span>
<span class="quote">&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt; @@ -98,10 +99,26 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;         return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt; -       .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; -       .fault = vdso_fault,</span>
<span class="quote">&gt; -};</span>
<span class="quote">&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt; +                     struct vm_area_struct *new_vma)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       struct pt_regs __maybe_unused *regs = current_pt_regs();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#if defined(CONFIG_X86_32) || defined(CONFIG_IA32_EMULATION)</span>
<span class="quote">&gt; +       /* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt; +       if (regs-&gt;ip == (unsigned long)current-&gt;mm-&gt;context.vdso +</span>
<span class="quote">&gt; +                       vdso_image_32.sym_int80_landing_pad</span>
<span class="quote">&gt; +#ifdef CONFIG_IA32_EMULATION</span>
<span class="quote">&gt; +               &amp;&amp; current_thread_info()-&gt;status &amp; TS_COMPAT</span>
<span class="quote">&gt; +#endif</span>

Instead of ifdef, use the (grossly misnamed) is_ia32_task() helper for
this, please.
<span class="quote">
&gt; +          )</span>
<span class="quote">&gt; +               regs-&gt;ip = new_vma-&gt;vm_start +</span>
<span class="quote">&gt; +                       vdso_image_32.sym_int80_landing_pad;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +       new_vma-&gt;vm_mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>

Can you arrange for the mremap call to fail if the old mapping gets
split?  This might be as simple as confirming that the new mapping&#39;s
length is what we expect it to be and, if it isn&#39;t, returning -EINVAL.

If anyone things that might break some existing application (which is
quite unlikely), then we could allow mremap to succeed but skip the
part where we change context.vdso and rip.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +       return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  static int vvar_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;                       struct vm_area_struct *vma, struct vm_fault *vmf)</span>
<span class="quote">&gt; @@ -162,6 +179,12 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;         struct vm_area_struct *vma;</span>
<span class="quote">&gt;         unsigned long addr, text_start;</span>
<span class="quote">&gt;         int ret = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       static const struct vm_special_mapping vdso_mapping = {</span>
<span class="quote">&gt; +               .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt; +               .fault = vdso_fault,</span>
<span class="quote">&gt; +               .mremap = vdso_mremap,</span>
<span class="quote">&gt; +       };</span>

Why did you add this instead of modifying text_mapping?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 15, 2016, 8:46 a.m.</div>
<pre class="content">
On 04/15/2016 01:58 AM, Andy Lutomirski wrote:
<span class="quote">&gt; On Thu, Apr 14, 2016 at 9:32 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Add possibility for userspace 32-bit applications to move</span>
<span class="quote">&gt;&gt; vdso mapping. Previously, when userspace app called</span>
<span class="quote">&gt;&gt; mremap for vdso, in return path it would land on previous</span>
<span class="quote">&gt;&gt; address of vdso page, resulting in segmentation violation.</span>
<span class="quote">&gt;&gt; Now it lands fine and returns to userspace with remapped vdso.</span>
<span class="quote">&gt;&gt; This will also fix context.vdso pointer for 64-bit, which does not</span>
<span class="quote">&gt;&gt; affect the user of vdso after mremap by now, but this may change.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Renamed and moved text_mapping structure declaration inside</span>
<span class="quote">&gt;&gt; map_vdso, as it used only there and now it complement</span>
<span class="quote">&gt;&gt; vvar_mapping variable.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; There is still problem for remapping vdso in 32-bit glibc applications:</span>
<span class="quote">&gt;&gt; linker relocates addresses for syscalls on vdso page, so</span>
<span class="quote">&gt;&gt; you need to relink with the new addresses. Or the next syscall</span>
<span class="quote">&gt;&gt; through glibc may fail:</span>
<span class="quote">&gt;&gt;    Program received signal SIGSEGV, Segmentation fault.</span>
<span class="quote">&gt;&gt;    #0  0xf7fd9b80 in __kernel_vsyscall ()</span>
<span class="quote">&gt;&gt;    #1  0xf7ec8238 in _exit () from /usr/lib32/libc.so.6</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; v2: added __maybe_unused for pt_regs in vdso_mremap</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   arch/x86/entry/vdso/vma.c | 33 ++++++++++++++++++++++++++++-----</span>
<span class="quote">&gt;&gt;   include/linux/mm_types.h  |  3 +++</span>
<span class="quote">&gt;&gt;   mm/mmap.c                 | 10 ++++++++++</span>
<span class="quote">&gt;&gt;   3 files changed, 41 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; index 10f704584922..7e261e2554c8 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/entry/vdso/vma.c</span>
<span class="quote">&gt;&gt; @@ -12,6 +12,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/random.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/elf.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/cpu.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/ptrace.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/pvclock.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/vgtod.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/proto.h&gt;</span>
<span class="quote">&gt;&gt; @@ -98,10 +99,26 @@ static int vdso_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt;          return 0;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -static const struct vm_special_mapping text_mapping = {</span>
<span class="quote">&gt;&gt; -       .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt;&gt; -       .fault = vdso_fault,</span>
<span class="quote">&gt;&gt; -};</span>
<span class="quote">&gt;&gt; +static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt; +                     struct vm_area_struct *new_vma)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       struct pt_regs __maybe_unused *regs = current_pt_regs();</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +#if defined(CONFIG_X86_32) || defined(CONFIG_IA32_EMULATION)</span>
<span class="quote">&gt;&gt; +       /* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="quote">&gt;&gt; +       if (regs-&gt;ip == (unsigned long)current-&gt;mm-&gt;context.vdso +</span>
<span class="quote">&gt;&gt; +                       vdso_image_32.sym_int80_landing_pad</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_IA32_EMULATION</span>
<span class="quote">&gt;&gt; +               &amp;&amp; current_thread_info()-&gt;status &amp; TS_COMPAT</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt; Instead of ifdef, use the (grossly misnamed) is_ia32_task() helper for</span>
<span class="quote">&gt; this, please.</span>
Thanks, will do
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +          )</span>
<span class="quote">&gt;&gt; +               regs-&gt;ip = new_vma-&gt;vm_start +</span>
<span class="quote">&gt;&gt; +                       vdso_image_32.sym_int80_landing_pad;</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt; +       new_vma-&gt;vm_mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="quote">&gt; Can you arrange for the mremap call to fail if the old mapping gets</span>
<span class="quote">&gt; split?  This might be as simple as confirming that the new mapping&#39;s</span>
<span class="quote">&gt; length is what we expect it to be and, if it isn&#39;t, returning -EINVAL.</span>
Sure.
<span class="quote">&gt;</span>
<span class="quote">&gt; If anyone things that might break some existing application (which is</span>
<span class="quote">&gt; quite unlikely), then we could allow mremap to succeed but skip the</span>
<span class="quote">&gt; part where we change context.vdso and rip.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   static int vvar_fault(const struct vm_special_mapping *sm,</span>
<span class="quote">&gt;&gt;                        struct vm_area_struct *vma, struct vm_fault *vmf)</span>
<span class="quote">&gt;&gt; @@ -162,6 +179,12 @@ static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
<span class="quote">&gt;&gt;          struct vm_area_struct *vma;</span>
<span class="quote">&gt;&gt;          unsigned long addr, text_start;</span>
<span class="quote">&gt;&gt;          int ret = 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       static const struct vm_special_mapping vdso_mapping = {</span>
<span class="quote">&gt;&gt; +               .name = &quot;[vdso]&quot;,</span>
<span class="quote">&gt;&gt; +               .fault = vdso_fault,</span>
<span class="quote">&gt;&gt; +               .mremap = vdso_mremap,</span>
<span class="quote">&gt;&gt; +       };</span>
<span class="quote">&gt; Why did you add this instead of modifying text_mapping?</span>
I moved text_mapping inside map_vdso function, as it&#39;s used
only there. Then I thought that vdso_mapping is better
naming for it as it complement vvar_mapping (goes right after).
If it&#39;s necessary, I will preserve naming.
<span class="quote">&gt;</span>
<span class="quote">&gt; --Andy</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - April 15, 2016, 9:18 a.m.</div>
<pre class="content">
* Andy Lutomirski &lt;luto@amacapital.net&gt; wrote:
<span class="quote">
&gt; &gt; +       if (regs-&gt;ip == (unsigned long)current-&gt;mm-&gt;context.vdso +</span>
<span class="quote">&gt; &gt; +                       vdso_image_32.sym_int80_landing_pad</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_IA32_EMULATION</span>
<span class="quote">&gt; &gt; +               &amp;&amp; current_thread_info()-&gt;status &amp; TS_COMPAT</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Instead of ifdef, use the (grossly misnamed) is_ia32_task() helper for</span>
<span class="quote">&gt; this, please.</span>

Please also let&#39;s do the rename.

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 15, 2016, 9:51 a.m.</div>
<pre class="content">
On 04/15/2016 12:18 PM, Ingo Molnar wrote:
<span class="quote">&gt; * Andy Lutomirski &lt;luto@amacapital.net&gt; wrote:</span>
<span class="quote">&gt;&gt; Instead of ifdef, use the (grossly misnamed) is_ia32_task() helper for</span>
<span class="quote">&gt;&gt; this, please.</span>
<span class="quote">&gt; Please also let&#39;s do the rename.</span>
Does `is_32bit_syscall` sounds right, or shall it be `is_32bit_task`?
I think, `is_compat_task` will be bad-named for X86_32 host.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - April 15, 2016, 12:08 p.m.</div>
<pre class="content">
On 04/15/2016 12:51 PM, Dmitry Safonov wrote:
<span class="quote">&gt; On 04/15/2016 12:18 PM, Ingo Molnar wrote:</span>
<span class="quote">&gt;&gt; * Andy Lutomirski &lt;luto@amacapital.net&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; Instead of ifdef, use the (grossly misnamed) is_ia32_task() helper for</span>
<span class="quote">&gt;&gt;&gt; this, please.</span>
<span class="quote">&gt;&gt; Please also let&#39;s do the rename.</span>
<span class="quote">&gt; Does `is_32bit_syscall` sounds right, or shall it be `is_32bit_task`?</span>
<span class="quote">&gt; I think, `is_compat_task` will be bad-named for X86_32 host.</span>
<span class="quote">&gt;</span>
Or maybe, better:
is_x32_task =&gt; in_x32_syscall
is_ia32_task =&gt; in_ia32_syscall
as existing in_compat_syscall().

Looks good?
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/vdso/vma.c b/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">index 10f704584922..7e261e2554c8 100644</span>
<span class="p_header">--- a/arch/x86/entry/vdso/vma.c</span>
<span class="p_header">+++ b/arch/x86/entry/vdso/vma.c</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/random.h&gt;
 #include &lt;linux/elf.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/ptrace.h&gt;</span>
 #include &lt;asm/pvclock.h&gt;
 #include &lt;asm/vgtod.h&gt;
 #include &lt;asm/proto.h&gt;
<span class="p_chunk">@@ -98,10 +99,26 @@</span> <span class="p_context"> static int vdso_fault(const struct vm_special_mapping *sm,</span>
 	return 0;
 }
 
<span class="p_del">-static const struct vm_special_mapping text_mapping = {</span>
<span class="p_del">-	.name = &quot;[vdso]&quot;,</span>
<span class="p_del">-	.fault = vdso_fault,</span>
<span class="p_del">-};</span>
<span class="p_add">+static int vdso_mremap(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		      struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct pt_regs __maybe_unused *regs = current_pt_regs();</span>
<span class="p_add">+</span>
<span class="p_add">+#if defined(CONFIG_X86_32) || defined(CONFIG_IA32_EMULATION)</span>
<span class="p_add">+	/* Fixing userspace landing - look at do_fast_syscall_32 */</span>
<span class="p_add">+	if (regs-&gt;ip == (unsigned long)current-&gt;mm-&gt;context.vdso +</span>
<span class="p_add">+			vdso_image_32.sym_int80_landing_pad</span>
<span class="p_add">+#ifdef CONFIG_IA32_EMULATION</span>
<span class="p_add">+		&amp;&amp; current_thread_info()-&gt;status &amp; TS_COMPAT</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	   )</span>
<span class="p_add">+		regs-&gt;ip = new_vma-&gt;vm_start +</span>
<span class="p_add">+			vdso_image_32.sym_int80_landing_pad;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	new_vma-&gt;vm_mm-&gt;context.vdso = (void __user *)new_vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static int vvar_fault(const struct vm_special_mapping *sm,
 		      struct vm_area_struct *vma, struct vm_fault *vmf)
<span class="p_chunk">@@ -162,6 +179,12 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 	struct vm_area_struct *vma;
 	unsigned long addr, text_start;
 	int ret = 0;
<span class="p_add">+</span>
<span class="p_add">+	static const struct vm_special_mapping vdso_mapping = {</span>
<span class="p_add">+		.name = &quot;[vdso]&quot;,</span>
<span class="p_add">+		.fault = vdso_fault,</span>
<span class="p_add">+		.mremap = vdso_mremap,</span>
<span class="p_add">+	};</span>
 	static const struct vm_special_mapping vvar_mapping = {
 		.name = &quot;[vvar]&quot;,
 		.fault = vvar_fault,
<span class="p_chunk">@@ -195,7 +218,7 @@</span> <span class="p_context"> static int map_vdso(const struct vdso_image *image, bool calculate_addr)</span>
 				       image-&gt;size,
 				       VM_READ|VM_EXEC|
 				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
<span class="p_del">-				       &amp;text_mapping);</span>
<span class="p_add">+				       &amp;vdso_mapping);</span>
 
 	if (IS_ERR(vma)) {
 		ret = PTR_ERR(vma);
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index c2d75b4fa86c..4d16ab9287af 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -586,6 +586,9 @@</span> <span class="p_context"> struct vm_special_mapping {</span>
 	int (*fault)(const struct vm_special_mapping *sm,
 		     struct vm_area_struct *vma,
 		     struct vm_fault *vmf);
<span class="p_add">+</span>
<span class="p_add">+	int (*mremap)(const struct vm_special_mapping *sm,</span>
<span class="p_add">+		     struct vm_area_struct *new_vma);</span>
 };
 
 enum tlb_flush_reason {
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index bd2e1a533bc1..ba71658dd1a1 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2930,9 +2930,19 @@</span> <span class="p_context"> static const char *special_mapping_name(struct vm_area_struct *vma)</span>
 	return ((struct vm_special_mapping *)vma-&gt;vm_private_data)-&gt;name;
 }
 
<span class="p_add">+static int special_mapping_mremap(struct vm_area_struct *new_vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_special_mapping *sm = new_vma-&gt;vm_private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sm-&gt;mremap)</span>
<span class="p_add">+		return sm-&gt;mremap(sm, new_vma);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct vm_operations_struct special_mapping_vmops = {
 	.close = special_mapping_close,
 	.fault = special_mapping_fault,
<span class="p_add">+	.mremap = special_mapping_mremap,</span>
 	.name = special_mapping_name,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



