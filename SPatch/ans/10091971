
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/entry: remove SYSENTER_stack naming - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/entry: remove SYSENTER_stack naming</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 5, 2017, 1:25 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171205012507.3F55C4DD@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10091971/mbox/"
   >mbox</a>
|
   <a href="/patch/10091971/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10091971/">/patch/10091971/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D25EB60329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:27:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C5167288D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:27:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B9F6E294D9; Tue,  5 Dec 2017 01:27:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BF9EB288D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 01:27:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752217AbdLEB1C (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Dec 2017 20:27:02 -0500
Received: from mga14.intel.com ([192.55.52.115]:6637 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751754AbdLEB1B (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Dec 2017 20:27:01 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga103.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	04 Dec 2017 17:27:01 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.45,362,1508828400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1251924327&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.119])
	by fmsmga002.fm.intel.com with ESMTP; 04 Dec 2017 17:27:00 -0800
Subject: [PATCH] x86/entry: remove SYSENTER_stack naming
To: linux-kernel@vger.kernel.org
Cc: x86@kernel.org, Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	tglx@linutronix.de, luto@kernel.org, jpoimboe@redhat.com,
	bp@suse.de, peterz@infradead.org
From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Date: Mon, 04 Dec 2017 17:25:07 -0800
Message-Id: &lt;20171205012507.3F55C4DD@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Dec. 5, 2017, 1:25 a.m.</div>
<pre class="content">
This is on top of c7ddf30cab55 which is WIP.x86/mm as of now.

---
<span class="from">
From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

If the kernel oopses while on the trampoline stack, it will say
&quot;&lt;SYSENTER&gt;&quot; even if SYSENTER is not involved.  That is rather
confusing.

The &quot;SYSENTER&quot; stack is used for a lot more than SYSENTER now.
Give it a better string to display in stack dumps, and rename
the kernel code to match.

We also move the 32-bit code over to the new naming even though
it still uses the entry stack only for SYSENTER.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: x86@kernel.org
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
---

 b/arch/x86/entry/entry_32.S         |   12 ++++++------
 b/arch/x86/entry/entry_64.S         |    4 ++--
 b/arch/x86/include/asm/fixmap.h     |    8 ++++----
 b/arch/x86/include/asm/processor.h  |    6 +++---
 b/arch/x86/include/asm/stacktrace.h |    4 ++--
 b/arch/x86/kernel/asm-offsets.c     |    4 ++--
 b/arch/x86/kernel/asm-offsets_32.c  |    2 +-
 b/arch/x86/kernel/cpu/common.c      |   14 +++++++-------
 b/arch/x86/kernel/dumpstack.c       |   10 +++++-----
 b/arch/x86/kernel/dumpstack_32.c    |    6 +++---
 b/arch/x86/kernel/dumpstack_64.c    |   12 +++++++++---
 11 files changed, 44 insertions(+), 38 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/x86/kernel/dumpstack_64.c~SYSENTER-rename arch/x86/kernel/dumpstack_64.c</span>
<span class="p_header">--- a/arch/x86/kernel/dumpstack_64.c~SYSENTER-rename	2017-12-04 12:21:09.149064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/dumpstack_64.c	2017-12-04 12:21:09.177064609 -0800</span>
<span class="p_chunk">@@ -37,8 +37,14 @@</span> <span class="p_context"> const char *stack_type_name(enum stack_t</span>
 	if (type == STACK_TYPE_IRQ)
 		return &quot;IRQ&quot;;
 
<span class="p_del">-	if (type == STACK_TYPE_SYSENTER)</span>
<span class="p_del">-		return &quot;SYSENTER&quot;;</span>
<span class="p_add">+	if (type == STACK_TYPE_ENTRY) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * On 64-bit, we have a generic entry stack that we</span>
<span class="p_add">+		 * use for all the kernel entry points, including</span>
<span class="p_add">+		 * SYSENTER.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		return &quot;ENTRY_TRAMPOLINE&quot;;</span>
<span class="p_add">+	}</span>
 
 	if (type &gt;= STACK_TYPE_EXCEPTION &amp;&amp; type &lt;= STACK_TYPE_EXCEPTION_LAST)
 		return exception_stack_names[type - STACK_TYPE_EXCEPTION];
<span class="p_chunk">@@ -118,7 +124,7 @@</span> <span class="p_context"> int get_stack_info(unsigned long *stack,</span>
 	if (in_irq_stack(stack, info))
 		goto recursion_check;
 
<span class="p_del">-	if (in_sysenter_stack(stack, info))</span>
<span class="p_add">+	if (in_entry_stack(stack, info))</span>
 		goto recursion_check;
 
 	goto unknown;
<span class="p_header">diff -puN arch/x86/include/asm/fixmap.h~SYSENTER-rename arch/x86/include/asm/fixmap.h</span>
<span class="p_header">--- a/arch/x86/include/asm/fixmap.h~SYSENTER-rename	2017-12-04 12:21:09.151064609 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/fixmap.h	2017-12-04 12:21:09.177064609 -0800</span>
<span class="p_chunk">@@ -58,10 +58,10 @@</span> <span class="p_context"> struct cpu_entry_area {</span>
 	char gdt[PAGE_SIZE];
 
 	/*
<span class="p_del">-	 * The GDT is just below SYSENTER_stack and thus serves (on x86_64) as</span>
<span class="p_add">+	 * The GDT is just below entry_stack and thus serves (on x86_64) as</span>
 	 * a a read-only guard page.
 	 */
<span class="p_del">-	struct SYSENTER_stack_page SYSENTER_stack_page;</span>
<span class="p_add">+	struct entry_stack_page entry_stack_page;</span>
 
 	/*
 	 * On x86_64, the TSS is mapped RO.  On x86_32, it&#39;s mapped RW because
<span class="p_chunk">@@ -266,9 +266,9 @@</span> <span class="p_context"> static inline struct cpu_entry_area *get</span>
 	return (struct cpu_entry_area *)__fix_to_virt(__get_cpu_entry_area_page_index(cpu, 0));
 }
 
<span class="p_del">-static inline struct SYSENTER_stack *cpu_SYSENTER_stack(int cpu)</span>
<span class="p_add">+static inline struct entry_stack *cpu_entry_stack(int cpu)</span>
 {
<span class="p_del">-	return &amp;get_cpu_entry_area(cpu)-&gt;SYSENTER_stack_page.stack;</span>
<span class="p_add">+	return &amp;get_cpu_entry_area(cpu)-&gt;entry_stack_page.stack;</span>
 }
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff -puN arch/x86/include/asm/processor.h~SYSENTER-rename arch/x86/include/asm/processor.h</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h~SYSENTER-rename	2017-12-04 12:21:09.153064609 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h	2017-12-04 12:21:09.178064609 -0800</span>
<span class="p_chunk">@@ -337,12 +337,12 @@</span> <span class="p_context"> struct x86_hw_tss {</span>
 #define IO_BITMAP_OFFSET		(offsetof(struct tss_struct, io_bitmap) - offsetof(struct tss_struct, x86_tss))
 #define INVALID_IO_BITMAP_OFFSET	0x8000
 
<span class="p_del">-struct SYSENTER_stack {</span>
<span class="p_add">+struct entry_stack {</span>
 	unsigned long		words[64];
 };
 
<span class="p_del">-struct SYSENTER_stack_page {</span>
<span class="p_del">-	struct SYSENTER_stack stack;</span>
<span class="p_add">+struct entry_stack_page {</span>
<span class="p_add">+	struct entry_stack stack;</span>
 } __aligned(PAGE_SIZE);
 
 struct tss_struct {
<span class="p_header">diff -puN arch/x86/include/asm/stacktrace.h~SYSENTER-rename arch/x86/include/asm/stacktrace.h</span>
<span class="p_header">--- a/arch/x86/include/asm/stacktrace.h~SYSENTER-rename	2017-12-04 12:21:09.155064609 -0800</span>
<span class="p_header">+++ b/arch/x86/include/asm/stacktrace.h	2017-12-04 12:21:09.178064609 -0800</span>
<span class="p_chunk">@@ -16,7 +16,7 @@</span> <span class="p_context"> enum stack_type {</span>
 	STACK_TYPE_TASK,
 	STACK_TYPE_IRQ,
 	STACK_TYPE_SOFTIRQ,
<span class="p_del">-	STACK_TYPE_SYSENTER,</span>
<span class="p_add">+	STACK_TYPE_ENTRY,</span>
 	STACK_TYPE_EXCEPTION,
 	STACK_TYPE_EXCEPTION_LAST = STACK_TYPE_EXCEPTION + N_EXCEPTION_STACKS-1,
 };
<span class="p_chunk">@@ -29,7 +29,7 @@</span> <span class="p_context"> struct stack_info {</span>
 bool in_task_stack(unsigned long *stack, struct task_struct *task,
 		   struct stack_info *info);
 
<span class="p_del">-bool in_sysenter_stack(unsigned long *stack, struct stack_info *info);</span>
<span class="p_add">+bool in_entry_stack(unsigned long *stack, struct stack_info *info);</span>
 
 int get_stack_info(unsigned long *stack, struct task_struct *task,
 		   struct stack_info *info, unsigned long *visit_mask);
<span class="p_header">diff -puN arch/x86/kernel/cpu/common.c~SYSENTER-rename arch/x86/kernel/cpu/common.c</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c~SYSENTER-rename	2017-12-04 12:21:09.157064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c	2017-12-04 12:21:09.179064609 -0800</span>
<span class="p_chunk">@@ -512,8 +512,8 @@</span> <span class="p_context"> static DEFINE_PER_CPU_PAGE_ALIGNED(char,</span>
 	[(N_EXCEPTION_STACKS - 1) * EXCEPTION_STKSZ + DEBUG_STKSZ]);
 #endif
 
<span class="p_del">-static DEFINE_PER_CPU_PAGE_ALIGNED(struct SYSENTER_stack_page,</span>
<span class="p_del">-				   SYSENTER_stack_storage);</span>
<span class="p_add">+static DEFINE_PER_CPU_PAGE_ALIGNED(struct entry_stack_page,</span>
<span class="p_add">+				   entry_stack_storage);</span>
 
 /*
  * Force the population of PMDs for not yet allocated per cpu
<span class="p_chunk">@@ -558,8 +558,8 @@</span> <span class="p_context"> static void __init setup_cpu_entry_area(</span>
 #endif
 
 	__set_fixmap(get_cpu_entry_area_index(cpu, gdt), get_cpu_gdt_paddr(cpu), gdt_prot);
<span class="p_del">-	set_percpu_fixmap_pages(get_cpu_entry_area_index(cpu, SYSENTER_stack_page),</span>
<span class="p_del">-				per_cpu_ptr(&amp;SYSENTER_stack_storage, cpu), 1,</span>
<span class="p_add">+	set_percpu_fixmap_pages(get_cpu_entry_area_index(cpu, entry_stack_page),</span>
<span class="p_add">+				per_cpu_ptr(&amp;entry_stack_storage, cpu), 1,</span>
 				PAGE_KERNEL);
 
 	/*
<span class="p_chunk">@@ -1375,7 +1375,7 @@</span> <span class="p_context"> void enable_sep_cpu(void)</span>
 
 	tss-&gt;x86_tss.ss1 = __KERNEL_CS;
 	wrmsr(MSR_IA32_SYSENTER_CS, tss-&gt;x86_tss.ss1, 0);
<span class="p_del">-	wrmsr(MSR_IA32_SYSENTER_ESP, (unsigned long)(cpu_SYSENTER_stack(cpu) + 1), 0);</span>
<span class="p_add">+	wrmsr(MSR_IA32_SYSENTER_ESP, (unsigned long)(cpu_entry_stack(cpu) + 1), 0);</span>
 	wrmsr(MSR_IA32_SYSENTER_EIP, (unsigned long)entry_SYSENTER_32, 0);
 
 	put_cpu();
<span class="p_chunk">@@ -1495,7 +1495,7 @@</span> <span class="p_context"> void syscall_init(void)</span>
 	 * AMD doesn&#39;t allow SYSENTER in long mode (either 32- or 64-bit).
 	 */
 	wrmsrl_safe(MSR_IA32_SYSENTER_CS, (u64)__KERNEL_CS);
<span class="p_del">-	wrmsrl_safe(MSR_IA32_SYSENTER_ESP, (unsigned long)(cpu_SYSENTER_stack(cpu) + 1));</span>
<span class="p_add">+	wrmsrl_safe(MSR_IA32_SYSENTER_ESP, (unsigned long)(cpu_entry_stack(cpu) + 1));</span>
 	wrmsrl_safe(MSR_IA32_SYSENTER_EIP, (u64)entry_SYSENTER_compat);
 #else
 	wrmsrl(MSR_CSTAR, (unsigned long)ignore_sysret);
<span class="p_chunk">@@ -1710,7 +1710,7 @@</span> <span class="p_context"> void cpu_init(void)</span>
 	 */
 	set_tss_desc(cpu, &amp;get_cpu_entry_area(cpu)-&gt;tss.x86_tss);
 	load_TR_desc();
<span class="p_del">-	load_sp0((unsigned long)(cpu_SYSENTER_stack(cpu) + 1));</span>
<span class="p_add">+	load_sp0((unsigned long)(cpu_entry_stack(cpu) + 1));</span>
 
 	load_mm_ldt(&amp;init_mm);
 
<span class="p_header">diff -puN arch/x86/entry/entry_32.S~SYSENTER-rename arch/x86/entry/entry_32.S</span>
<span class="p_header">--- a/arch/x86/entry/entry_32.S~SYSENTER-rename	2017-12-04 12:21:09.159064609 -0800</span>
<span class="p_header">+++ b/arch/x86/entry/entry_32.S	2017-12-04 12:21:09.179064609 -0800</span>
<span class="p_chunk">@@ -942,9 +942,9 @@</span> <span class="p_context"> ENTRY(debug)</span>
 
 	/* Are we currently on the SYSENTER stack? */
 	movl	PER_CPU_VAR(cpu_entry_area), %ecx
<span class="p_del">-	addl	$CPU_ENTRY_AREA_SYSENTER_stack + SIZEOF_SYSENTER_stack, %ecx</span>
<span class="p_del">-	subl	%eax, %ecx	/* ecx = (end of SYSENTER_stack) - esp */</span>
<span class="p_del">-	cmpl	$SIZEOF_SYSENTER_stack, %ecx</span>
<span class="p_add">+	addl	$CPU_ENTRY_AREA_entry_stack + SIZEOF_entry_stack, %ecx</span>
<span class="p_add">+	subl	%eax, %ecx	/* ecx = (end of entry_stack) - esp */</span>
<span class="p_add">+	cmpl	$SIZEOF_entry_stack, %ecx</span>
 	jb	.Ldebug_from_sysenter_stack
 
 	TRACE_IRQS_OFF
<span class="p_chunk">@@ -986,9 +986,9 @@</span> <span class="p_context"> ENTRY(nmi)</span>
 
 	/* Are we currently on the SYSENTER stack? */
 	movl	PER_CPU_VAR(cpu_entry_area), %ecx
<span class="p_del">-	addl	$CPU_ENTRY_AREA_SYSENTER_stack + SIZEOF_SYSENTER_stack, %ecx</span>
<span class="p_del">-	subl	%eax, %ecx	/* ecx = (end of SYSENTER_stack) - esp */</span>
<span class="p_del">-	cmpl	$SIZEOF_SYSENTER_stack, %ecx</span>
<span class="p_add">+	addl	$CPU_ENTRY_AREA_entry_stack + SIZEOF_entry_stack, %ecx</span>
<span class="p_add">+	subl	%eax, %ecx	/* ecx = (end of entry_stack) - esp */</span>
<span class="p_add">+	cmpl	$SIZEOF_entry_stack, %ecx</span>
 	jb	.Lnmi_from_sysenter_stack
 
 	/* Not on SYSENTER stack. */
<span class="p_header">diff -puN arch/x86/kernel/asm-offsets.c~SYSENTER-rename arch/x86/kernel/asm-offsets.c</span>
<span class="p_header">--- a/arch/x86/kernel/asm-offsets.c~SYSENTER-rename	2017-12-04 12:21:09.161064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/asm-offsets.c	2017-12-04 12:21:09.180064609 -0800</span>
<span class="p_chunk">@@ -99,6 +99,6 @@</span> <span class="p_context"> void common(void) {</span>
 	OFFSET(CPU_ENTRY_AREA_tss, cpu_entry_area, tss);
 	OFFSET(CPU_ENTRY_AREA_entry_trampoline, cpu_entry_area, entry_trampoline);
 	OFFSET(TLB_STATE_user_pcid_flush_mask, tlb_state, user_pcid_flush_mask);
<span class="p_del">-	OFFSET(CPU_ENTRY_AREA_SYSENTER_stack, cpu_entry_area, SYSENTER_stack_page);</span>
<span class="p_del">-	DEFINE(SIZEOF_SYSENTER_stack, sizeof(struct SYSENTER_stack));</span>
<span class="p_add">+	OFFSET(CPU_ENTRY_AREA_entry_stack, cpu_entry_area, entry_stack_page);</span>
<span class="p_add">+	DEFINE(SIZEOF_entry_stack, sizeof(struct entry_stack));</span>
 }
<span class="p_header">diff -puN arch/x86/kernel/asm-offsets_32.c~SYSENTER-rename arch/x86/kernel/asm-offsets_32.c</span>
<span class="p_header">--- a/arch/x86/kernel/asm-offsets_32.c~SYSENTER-rename	2017-12-04 12:21:09.162064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/asm-offsets_32.c	2017-12-04 12:21:09.180064609 -0800</span>
<span class="p_chunk">@@ -48,7 +48,7 @@</span> <span class="p_context"> void foo(void)</span>
 
 	/* Offset from the sysenter stack to tss.sp0 */
 	DEFINE(TSS_sysenter_sp0, offsetof(struct cpu_entry_area, tss.x86_tss.sp0) -
<span class="p_del">-	       offsetofend(struct cpu_entry_area, SYSENTER_stack_page.stack));</span>
<span class="p_add">+	       offsetofend(struct cpu_entry_area, entry_stack_page.stack));</span>
 
 #ifdef CONFIG_CC_STACKPROTECTOR
 	BLANK();
<span class="p_header">diff -puN arch/x86/kernel/dumpstack.c~SYSENTER-rename arch/x86/kernel/dumpstack.c</span>
<span class="p_header">--- a/arch/x86/kernel/dumpstack.c~SYSENTER-rename	2017-12-04 12:21:09.164064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/dumpstack.c	2017-12-04 12:21:09.180064609 -0800</span>
<span class="p_chunk">@@ -43,9 +43,9 @@</span> <span class="p_context"> bool in_task_stack(unsigned long *stack,</span>
 	return true;
 }
 
<span class="p_del">-bool in_sysenter_stack(unsigned long *stack, struct stack_info *info)</span>
<span class="p_add">+bool in_entry_stack(unsigned long *stack, struct stack_info *info)</span>
 {
<span class="p_del">-	struct SYSENTER_stack *ss = cpu_SYSENTER_stack(smp_processor_id());</span>
<span class="p_add">+	struct entry_stack *ss = cpu_entry_stack(smp_processor_id());</span>
 
 	void *begin = ss;
 	void *end = ss + 1;
<span class="p_chunk">@@ -53,7 +53,7 @@</span> <span class="p_context"> bool in_sysenter_stack(unsigned long *st</span>
 	if ((void *)stack &lt; begin || (void *)stack &gt;= end)
 		return false;
 
<span class="p_del">-	info-&gt;type	= STACK_TYPE_SYSENTER;</span>
<span class="p_add">+	info-&gt;type	= STACK_TYPE_ENTRY;</span>
 	info-&gt;begin	= begin;
 	info-&gt;end	= end;
 	info-&gt;next_sp	= NULL;
<span class="p_chunk">@@ -111,13 +111,13 @@</span> <span class="p_context"> void show_trace_log_lvl(struct task_stru</span>
 	 * - task stack
 	 * - interrupt stack
 	 * - HW exception stacks (double fault, nmi, debug, mce)
<span class="p_del">-	 * - SYSENTER stack</span>
<span class="p_add">+	 * - entry stack</span>
 	 *
 	 * x86-32 can have up to four stacks:
 	 * - task stack
 	 * - softirq stack
 	 * - hardirq stack
<span class="p_del">-	 * - SYSENTER stack</span>
<span class="p_add">+	 * - entry stack</span>
 	 */
 	for (regs = NULL; stack; stack = PTR_ALIGN(stack_info.next_sp, sizeof(long))) {
 		const char *stack_name;
<span class="p_header">diff -puN arch/x86/kernel/dumpstack_32.c~SYSENTER-rename arch/x86/kernel/dumpstack_32.c</span>
<span class="p_header">--- a/arch/x86/kernel/dumpstack_32.c~SYSENTER-rename	2017-12-04 12:21:09.166064609 -0800</span>
<span class="p_header">+++ b/arch/x86/kernel/dumpstack_32.c	2017-12-04 12:21:09.180064609 -0800</span>
<span class="p_chunk">@@ -26,8 +26,8 @@</span> <span class="p_context"> const char *stack_type_name(enum stack_t</span>
 	if (type == STACK_TYPE_SOFTIRQ)
 		return &quot;SOFTIRQ&quot;;
 
<span class="p_del">-	if (type == STACK_TYPE_SYSENTER)</span>
<span class="p_del">-		return &quot;SYSENTER&quot;;</span>
<span class="p_add">+	if (type == STACK_TYPE_ENTRY)</span>
<span class="p_add">+		return &quot;ENTRY_TRAMPOLINE&quot;;</span>
 
 	return NULL;
 }
<span class="p_chunk">@@ -96,7 +96,7 @@</span> <span class="p_context"> int get_stack_info(unsigned long *stack,</span>
 	if (task != current)
 		goto unknown;
 
<span class="p_del">-	if (in_sysenter_stack(stack, info))</span>
<span class="p_add">+	if (in_entry_stack(stack, info))</span>
 		goto recursion_check;
 
 	if (in_hardirq_stack(stack, info))
<span class="p_header">diff -puN arch/x86/entry/entry_64.S~SYSENTER-rename arch/x86/entry/entry_64.S</span>
<span class="p_header">--- a/arch/x86/entry/entry_64.S~SYSENTER-rename	2017-12-04 12:21:09.170064609 -0800</span>
<span class="p_header">+++ b/arch/x86/entry/entry_64.S	2017-12-04 12:21:09.181064609 -0800</span>
<span class="p_chunk">@@ -159,8 +159,8 @@</span> <span class="p_context"> END(native_usergs_sysret64)</span>
 	_entry_trampoline - CPU_ENTRY_AREA_entry_trampoline(%rip)
 
 /* The top word of the SYSENTER stack is hot and is usable as scratch space. */
<span class="p_del">-#define RSP_SCRATCH	CPU_ENTRY_AREA_SYSENTER_stack + \</span>
<span class="p_del">-			SIZEOF_SYSENTER_stack - 8 + CPU_ENTRY_AREA</span>
<span class="p_add">+#define RSP_SCRATCH	CPU_ENTRY_AREA_entry_stack + \</span>
<span class="p_add">+			SIZEOF_entry_stack - 8 + CPU_ENTRY_AREA</span>
 
 ENTRY(entry_SYSCALL_64_trampoline)
 	UNWIND_HINT_EMPTY

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



