
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,1/4] pagemap: check permissions and capabilities at open time - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,1/4] pagemap: check permissions and capabilities at open time</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80221">Konstantin Khlebnikov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 9, 2015, 8 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150609200015.21971.25692.stgit@zurg&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6575021/mbox/"
   >mbox</a>
|
   <a href="/patch/6575021/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6575021/">/patch/6575021/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 19238C0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jun 2015 20:00:43 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 304BB204A2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jun 2015 20:00:42 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 1F75420547
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jun 2015 20:00:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933172AbbFIUAb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 9 Jun 2015 16:00:31 -0400
Received: from mail-la0-f68.google.com ([209.85.215.68]:34233 &quot;EHLO
	mail-la0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753792AbbFIUAU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 9 Jun 2015 16:00:20 -0400
Received: by labgd6 with SMTP id gd6so3358001lab.1;
	Tue, 09 Jun 2015 13:00:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=subject:from:to:cc:date:message-id:in-reply-to:references
	:user-agent:mime-version:content-type:content-transfer-encoding;
	bh=lCV6c8P3re5bK4nnAgp8m5HTtStPsgB5QEdhbs9hgRI=;
	b=OTREfdxfDKFl4ZDmZzr1O0Swy23sjn9yO9nspFkIf/F3cV8lSSr9WoRp4muUlOYPbb
	+NYwWx3RHBZsxrNdVPmIjZQ0YaLxqCApToGYcaF649e/NZ4+bokQBh6gC/j5RSpuaG3C
	oFEsTYnv5a0XwZ77vH9onWBtUWM/IOauOovN/8OVot86ul9jW/Ujk5lBM3wpytVxFY9F
	1wm5UZM37n5dKv0pwFOQWkE6adqeduIoKRSkQHecfcU7456FokcyyZprbriCD0eDGPy/
	kEVDfG6ebqP/5u1KvxMg5v/9lCuqVup5jgjgIIeCwbmHwHQ/A9D+G6EO5OdoDtkzjMR2
	T1kw==
X-Received: by 10.152.120.135 with SMTP id
	lc7mr23747982lab.107.1433880018428; 
	Tue, 09 Jun 2015 13:00:18 -0700 (PDT)
Received: from localhost (37-145-42-244.broadband.corbina.ru.
	[37.145.42.244]) by mx.google.com with ESMTPSA id
	ci10sm1637616lad.35.2015.06.09.13.00.17
	(version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 09 Jun 2015 13:00:17 -0700 (PDT)
Subject: [PATCH v3 1/4] pagemap: check permissions and capabilities at open
	time
From: Konstantin Khlebnikov &lt;koct9i@gmail.com&gt;
To: linux-mm@kvack.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: linux-api@vger.kernel.org,
	Mark Williamson &lt;mwilliamson@undo-software.com&gt;,
	linux-kernel@vger.kernel.org, &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
Date: Tue, 09 Jun 2015 23:00:15 +0300
Message-ID: &lt;20150609200015.21971.25692.stgit@zurg&gt;
In-Reply-To: &lt;20150609195333.21971.58194.stgit@zurg&gt;
References: &lt;20150609195333.21971.58194.stgit@zurg&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.8 required=5.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI, T_DKIM_INVALID,
	T_RP_MATCHES_RCVD, 
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80221">Konstantin Khlebnikov</a> - June 9, 2015, 8 p.m.</div>
<pre class="content">
<span class="from">From: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>

This patch moves permission checks from pagemap_read() into pagemap_open().

Pointer to mm is saved in file-&gt;private_data. This reference pins only
mm_struct itself. /proc/*/mem, maps, smaps already work in the same way.
<span class="signed-off-by">
Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
Link: http://lkml.kernel.org/r/CA+55aFyKpWrt_Ajzh1rzp_GcwZ4=6Y=kOv8hBz172CFJp6L8Tg@mail.gmail.com
---
 fs/proc/task_mmu.c |   48 ++++++++++++++++++++++++++++--------------------
 1 file changed, 28 insertions(+), 20 deletions(-)


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131641">Mark Williamson</a> - June 12, 2015, 6:44 p.m.</div>
<pre class="content">
This looks good from our side - thanks!
<span class="reviewed-by">
Reviewed-by: mwilliamson@undo-software.com</span>
<span class="tested-by">Tested-by: mwilliamson@undo-software.com</span>

On Tue, Jun 9, 2015 at 9:00 PM, Konstantin Khlebnikov &lt;koct9i@gmail.com&gt; wrote:
<span class="quote">&gt; From: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch moves permission checks from pagemap_read() into pagemap_open().</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Pointer to mm is saved in file-&gt;private_data. This reference pins only</span>
<span class="quote">&gt; mm_struct itself. /proc/*/mem, maps, smaps already work in the same way.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Link: http://lkml.kernel.org/r/CA+55aFyKpWrt_Ajzh1rzp_GcwZ4=6Y=kOv8hBz172CFJp6L8Tg@mail.gmail.com</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/proc/task_mmu.c |   48 ++++++++++++++++++++++++++++--------------------</span>
<span class="quote">&gt;  1 file changed, 28 insertions(+), 20 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 6dee68d..21bc251 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -1227,40 +1227,33 @@ static int pagemap_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt;  static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
<span class="quote">&gt;                             size_t count, loff_t *ppos)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -       struct task_struct *task = get_proc_task(file_inode(file));</span>
<span class="quote">&gt; -       struct mm_struct *mm;</span>
<span class="quote">&gt; +       struct mm_struct *mm = file-&gt;private_data;</span>
<span class="quote">&gt;         struct pagemapread pm;</span>
<span class="quote">&gt; -       int ret = -ESRCH;</span>
<span class="quote">&gt;         struct mm_walk pagemap_walk = {};</span>
<span class="quote">&gt;         unsigned long src;</span>
<span class="quote">&gt;         unsigned long svpfn;</span>
<span class="quote">&gt;         unsigned long start_vaddr;</span>
<span class="quote">&gt;         unsigned long end_vaddr;</span>
<span class="quote">&gt; -       int copied = 0;</span>
<span class="quote">&gt; +       int ret = 0, copied = 0;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -       if (!task)</span>
<span class="quote">&gt; +       if (!mm || !atomic_inc_not_zero(&amp;mm-&gt;mm_users))</span>
<span class="quote">&gt;                 goto out;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         ret = -EINVAL;</span>
<span class="quote">&gt;         /* file position must be aligned */</span>
<span class="quote">&gt;         if ((*ppos % PM_ENTRY_BYTES) || (count % PM_ENTRY_BYTES))</span>
<span class="quote">&gt; -               goto out_task;</span>
<span class="quote">&gt; +               goto out_mm;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         ret = 0;</span>
<span class="quote">&gt;         if (!count)</span>
<span class="quote">&gt; -               goto out_task;</span>
<span class="quote">&gt; +               goto out_mm;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         pm.v2 = soft_dirty_cleared;</span>
<span class="quote">&gt;         pm.len = (PAGEMAP_WALK_SIZE &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;         pm.buffer = kmalloc(pm.len * PM_ENTRY_BYTES, GFP_TEMPORARY);</span>
<span class="quote">&gt;         ret = -ENOMEM;</span>
<span class="quote">&gt;         if (!pm.buffer)</span>
<span class="quote">&gt; -               goto out_task;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -       mm = mm_access(task, PTRACE_MODE_READ);</span>
<span class="quote">&gt; -       ret = PTR_ERR(mm);</span>
<span class="quote">&gt; -       if (!mm || IS_ERR(mm))</span>
<span class="quote">&gt; -               goto out_free;</span>
<span class="quote">&gt; +               goto out_mm;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         pagemap_walk.pmd_entry = pagemap_pte_range;</span>
<span class="quote">&gt;         pagemap_walk.pte_hole = pagemap_pte_hole;</span>
<span class="quote">&gt; @@ -1273,10 +1266,10 @@ static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
<span class="quote">&gt;         src = *ppos;</span>
<span class="quote">&gt;         svpfn = src / PM_ENTRY_BYTES;</span>
<span class="quote">&gt;         start_vaddr = svpfn &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt; -       end_vaddr = TASK_SIZE_OF(task);</span>
<span class="quote">&gt; +       end_vaddr = mm-&gt;task_size;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         /* watch out for wraparound */</span>
<span class="quote">&gt; -       if (svpfn &gt; TASK_SIZE_OF(task) &gt;&gt; PAGE_SHIFT)</span>
<span class="quote">&gt; +       if (svpfn &gt; mm-&gt;task_size &gt;&gt; PAGE_SHIFT)</span>
<span class="quote">&gt;                 start_vaddr = end_vaddr;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         /*</span>
<span class="quote">&gt; @@ -1303,7 +1296,7 @@ static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
<span class="quote">&gt;                 len = min(count, PM_ENTRY_BYTES * pm.pos);</span>
<span class="quote">&gt;                 if (copy_to_user(buf, pm.buffer, len)) {</span>
<span class="quote">&gt;                         ret = -EFAULT;</span>
<span class="quote">&gt; -                       goto out_mm;</span>
<span class="quote">&gt; +                       goto out_free;</span>
<span class="quote">&gt;                 }</span>
<span class="quote">&gt;                 copied += len;</span>
<span class="quote">&gt;                 buf += len;</span>
<span class="quote">&gt; @@ -1313,24 +1306,38 @@ static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
<span class="quote">&gt;         if (!ret || ret == PM_END_OF_BUFFER)</span>
<span class="quote">&gt;                 ret = copied;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -out_mm:</span>
<span class="quote">&gt; -       mmput(mm);</span>
<span class="quote">&gt;  out_free:</span>
<span class="quote">&gt;         kfree(pm.buffer);</span>
<span class="quote">&gt; -out_task:</span>
<span class="quote">&gt; -       put_task_struct(task);</span>
<span class="quote">&gt; +out_mm:</span>
<span class="quote">&gt; +       mmput(mm);</span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt;         return ret;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  static int pagemap_open(struct inode *inode, struct file *file)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +       struct mm_struct *mm;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;         /* do not disclose physical addresses: attack vector */</span>
<span class="quote">&gt;         if (!capable(CAP_SYS_ADMIN))</span>
<span class="quote">&gt;                 return -EPERM;</span>
<span class="quote">&gt;         pr_warn_once(&quot;Bits 55-60 of /proc/PID/pagemap entries are about &quot;</span>
<span class="quote">&gt;                         &quot;to stop being page-shift some time soon. See the &quot;</span>
<span class="quote">&gt;                         &quot;linux/Documentation/vm/pagemap.txt for details.\n&quot;);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       mm = proc_mem_open(inode, PTRACE_MODE_READ);</span>
<span class="quote">&gt; +       if (IS_ERR(mm))</span>
<span class="quote">&gt; +               return PTR_ERR(mm);</span>
<span class="quote">&gt; +       file-&gt;private_data = mm;</span>
<span class="quote">&gt; +       return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int pagemap_release(struct inode *inode, struct file *file)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       struct mm_struct *mm = file-&gt;private_data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (mm)</span>
<span class="quote">&gt; +               mmdrop(mm);</span>
<span class="quote">&gt;         return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -1338,6 +1345,7 @@ const struct file_operations proc_pagemap_operations = {</span>
<span class="quote">&gt;         .llseek         = mem_lseek, /* borrow this */</span>
<span class="quote">&gt;         .read           = pagemap_read,</span>
<span class="quote">&gt;         .open           = pagemap_open,</span>
<span class="quote">&gt; +       .release        = pagemap_release,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  #endif /* CONFIG_PROC_PAGE_MONITOR */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - June 17, 2015, 7:58 a.m.</div>
<pre class="content">
On Tue, Jun 09, 2015 at 11:00:15PM +0300, Konstantin Khlebnikov wrote:
<span class="quote">&gt; From: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch moves permission checks from pagemap_read() into pagemap_open().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Pointer to mm is saved in file-&gt;private_data. This reference pins only</span>
<span class="quote">&gt; mm_struct itself. /proc/*/mem, maps, smaps already work in the same way.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Konstantin Khlebnikov &lt;khlebnikov@yandex-team.ru&gt;</span>
<span class="quote">&gt; Link: http://lkml.kernel.org/r/CA+55aFyKpWrt_Ajzh1rzp_GcwZ4=6Y=kOv8hBz172CFJp6L8Tg@mail.gmail.com</span>
<span class="reviewed-by">                                                           
Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;   --</span>
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 6dee68d..21bc251 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -1227,40 +1227,33 @@</span> <span class="p_context"> static int pagemap_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
 static ssize_t pagemap_read(struct file *file, char __user *buf,
 			    size_t count, loff_t *ppos)
 {
<span class="p_del">-	struct task_struct *task = get_proc_task(file_inode(file));</span>
<span class="p_del">-	struct mm_struct *mm;</span>
<span class="p_add">+	struct mm_struct *mm = file-&gt;private_data;</span>
 	struct pagemapread pm;
<span class="p_del">-	int ret = -ESRCH;</span>
 	struct mm_walk pagemap_walk = {};
 	unsigned long src;
 	unsigned long svpfn;
 	unsigned long start_vaddr;
 	unsigned long end_vaddr;
<span class="p_del">-	int copied = 0;</span>
<span class="p_add">+	int ret = 0, copied = 0;</span>
 
<span class="p_del">-	if (!task)</span>
<span class="p_add">+	if (!mm || !atomic_inc_not_zero(&amp;mm-&gt;mm_users))</span>
 		goto out;
 
 	ret = -EINVAL;
 	/* file position must be aligned */
 	if ((*ppos % PM_ENTRY_BYTES) || (count % PM_ENTRY_BYTES))
<span class="p_del">-		goto out_task;</span>
<span class="p_add">+		goto out_mm;</span>
 
 	ret = 0;
 	if (!count)
<span class="p_del">-		goto out_task;</span>
<span class="p_add">+		goto out_mm;</span>
 
 	pm.v2 = soft_dirty_cleared;
 	pm.len = (PAGEMAP_WALK_SIZE &gt;&gt; PAGE_SHIFT);
 	pm.buffer = kmalloc(pm.len * PM_ENTRY_BYTES, GFP_TEMPORARY);
 	ret = -ENOMEM;
 	if (!pm.buffer)
<span class="p_del">-		goto out_task;</span>
<span class="p_del">-</span>
<span class="p_del">-	mm = mm_access(task, PTRACE_MODE_READ);</span>
<span class="p_del">-	ret = PTR_ERR(mm);</span>
<span class="p_del">-	if (!mm || IS_ERR(mm))</span>
<span class="p_del">-		goto out_free;</span>
<span class="p_add">+		goto out_mm;</span>
 
 	pagemap_walk.pmd_entry = pagemap_pte_range;
 	pagemap_walk.pte_hole = pagemap_pte_hole;
<span class="p_chunk">@@ -1273,10 +1266,10 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 	src = *ppos;
 	svpfn = src / PM_ENTRY_BYTES;
 	start_vaddr = svpfn &lt;&lt; PAGE_SHIFT;
<span class="p_del">-	end_vaddr = TASK_SIZE_OF(task);</span>
<span class="p_add">+	end_vaddr = mm-&gt;task_size;</span>
 
 	/* watch out for wraparound */
<span class="p_del">-	if (svpfn &gt; TASK_SIZE_OF(task) &gt;&gt; PAGE_SHIFT)</span>
<span class="p_add">+	if (svpfn &gt; mm-&gt;task_size &gt;&gt; PAGE_SHIFT)</span>
 		start_vaddr = end_vaddr;
 
 	/*
<span class="p_chunk">@@ -1303,7 +1296,7 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 		len = min(count, PM_ENTRY_BYTES * pm.pos);
 		if (copy_to_user(buf, pm.buffer, len)) {
 			ret = -EFAULT;
<span class="p_del">-			goto out_mm;</span>
<span class="p_add">+			goto out_free;</span>
 		}
 		copied += len;
 		buf += len;
<span class="p_chunk">@@ -1313,24 +1306,38 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 	if (!ret || ret == PM_END_OF_BUFFER)
 		ret = copied;
 
<span class="p_del">-out_mm:</span>
<span class="p_del">-	mmput(mm);</span>
 out_free:
 	kfree(pm.buffer);
<span class="p_del">-out_task:</span>
<span class="p_del">-	put_task_struct(task);</span>
<span class="p_add">+out_mm:</span>
<span class="p_add">+	mmput(mm);</span>
 out:
 	return ret;
 }
 
 static int pagemap_open(struct inode *inode, struct file *file)
 {
<span class="p_add">+	struct mm_struct *mm;</span>
<span class="p_add">+</span>
 	/* do not disclose physical addresses: attack vector */
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	pr_warn_once(&quot;Bits 55-60 of /proc/PID/pagemap entries are about &quot;
 			&quot;to stop being page-shift some time soon. See the &quot;
 			&quot;linux/Documentation/vm/pagemap.txt for details.\n&quot;);
<span class="p_add">+</span>
<span class="p_add">+	mm = proc_mem_open(inode, PTRACE_MODE_READ);</span>
<span class="p_add">+	if (IS_ERR(mm))</span>
<span class="p_add">+		return PTR_ERR(mm);</span>
<span class="p_add">+	file-&gt;private_data = mm;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int pagemap_release(struct inode *inode, struct file *file)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = file-&gt;private_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mm)</span>
<span class="p_add">+		mmdrop(mm);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -1338,6 +1345,7 @@</span> <span class="p_context"> const struct file_operations proc_pagemap_operations = {</span>
 	.llseek		= mem_lseek, /* borrow this */
 	.read		= pagemap_read,
 	.open		= pagemap_open,
<span class="p_add">+	.release	= pagemap_release,</span>
 };
 #endif /* CONFIG_PROC_PAGE_MONITOR */
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



