
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,Part1,v3,03/17] x86/mm: Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,Part1,v3,03/17] x86/mm: Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 24, 2017, 7:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170724190757.11278-4-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9860107/mbox/"
   >mbox</a>
|
   <a href="/patch/9860107/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9860107/">/patch/9860107/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	04AFF60385 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:09:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EC3432852B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:09:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E0C9928562; Mon, 24 Jul 2017 19:09:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 70FDC2852B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 24 Jul 2017 19:09:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756153AbdGXTJH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 24 Jul 2017 15:09:07 -0400
Received: from mail-bn3nam01on0045.outbound.protection.outlook.com
	([104.47.33.45]:41632
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1756081AbdGXTIe (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 24 Jul 2017 15:08:34 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=u6RG3saCvb3/XgaXbVf8cR/Twj5rPAdqVRZccPpu/PI=;
	b=OEXjfN/CDci3C0JKH2jzFPtnxrCBjMjyZYwm7UIxt58CEA/fqgX8V5ETIhMKWhSKFr4f1rYBlbAz8cyP2Lo25Sqslxf1kaq0utMSIpjhGSPqLMqXCiM2mJQaSYOVA+oTztVx/+sZj+CAys2L2pzE/TWytpQMfH3D9FiuSDPwER8=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	CY1PR12MB0150.namprd12.prod.outlook.com (10.161.173.20) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1282.10; Mon, 24 Jul 2017 19:08:19 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: linux-kernel@vger.kernel.org, x86@kernel.org,
	linux-efi@vger.kernel.org, linuxppc-dev@lists.ozlabs.org,
	kvm@vger.kernel.org
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Tony Luck &lt;tony.luck@intel.com&gt;,
	Piotr Luc &lt;piotr.luc@intel.com&gt;, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Fenghua Yu &lt;fenghua.yu@intel.com&gt;, Lu Baolu &lt;baolu.lu@linux.intel.com&gt;,
	Reza Arbab &lt;arbab@linux.vnet.ibm.com&gt;,
	David Howells &lt;dhowells@redhat.com&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Laura Abbott &lt;labbott@redhat.com&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Eric Biederman &lt;ebiederm@xmission.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;, Dave Airlie &lt;airlied@redhat.com&gt;,
	Kees Cook &lt;keescook@chromium.org&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Tejun Heo &lt;tj@kernel.org&gt;,
	Christoph Lameter &lt;cl@linux.com&gt;, Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [RFC Part1 PATCH v3 03/17] x86/mm: Secure Encrypted Virtualization
	(SEV) support
Date: Mon, 24 Jul 2017 14:07:43 -0500
Message-Id: &lt;20170724190757.11278-4-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;20170724190757.11278-1-brijesh.singh@amd.com&gt;
References: &lt;20170724190757.11278-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: CY4PR04CA0049.namprd04.prod.outlook.com (10.171.243.142)
	To CY1PR12MB0150.namprd12.prod.outlook.com (10.161.173.20)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 02a131e8-7fa6-465d-94d2-08d4d2c7597f
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(48565401081)(300000503095)(300135400095)(201703131423075)(201703031133081)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:CY1PR12MB0150; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	3:MxvuZlfjzWVQI6le1AZfm9EkzZyoqyNjGr8tYq7OfdQ9EnD0veae9XlGn104OJXwJLHAbzvMdrzTRqw6tWebfwANLTlawNk2/H51mmv//XD6dE5pZJ1pZJkKm0OFAREiYr9khw7tBfRmRJ7NzT3BrRwX6Z8zRB02fBYf14oCAo8ekEnk8fpClbWOIHVVRO92ixq+stv8xAXHM0hHxj0KkvN0FIilzphTL4BrrlbfjoLl06gUindq8AIwqx7SQ2U/kpwmbKIFMTF5gNE/t0Q4jYOm0ySKAe5fYgnPnBkzKjAJWiIBJsS1PWJLU4S017b7AHrFdnIfZwva+Z2qrxBrYgZ5WYdvdO9erJucGEln8h3BMs9AWh+b5cOi5bj5O8/mJujIjL6KIECpHK9skNEasDKtQBgr9Sm+VE6wd1uSaklHXL+xVYPgFRHnDj6YIlbP4EThGZzBXkZ5l9Qx3ohiw/T/L48YAXX3CPcFYabkayOWb7I4+Gnn1g6ilH0x41ll9FFOGUL8UKxZJSiAyLw62fuEuSogVtf06704ax4wXHzcWAloT/rdnI32iKp3IPgQ2ofDncFS7j7xSUwc6Kwp+FCurjqRKh2Uw34AaAHCiuYYzgKnWQr6pschGrMu5yqq3XzT6/hwzbb4EhdAaoefPYkT0AWnd9qI3k4LmiJLpbEh2Z8WHZ9+u0Y3lXXC59foWheea31XMnWwp9BrD+HalwEnGQtITys4OWvdYIPeSJYjDzFlNqb0SiSBC44he7mlwD573kZq0jV1xgqstu25AQ==
X-MS-TrafficTypeDiagnostic: CY1PR12MB0150:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	25:9V03uSo2+2YA4yeNJmGTvIBnbSB8lr0d52CbIFwcagde9AC2F0Fjfck0qVlDu+NTZASKksUQbqiVXzSSHbtFt2F4/P7M05ykRmr0o5Oxin+mOSk7Toz3Awos/lcBz1EKG0qWlgfiarSoJNapUPujxqN15UntRd9iRXcIoQNz1jmSCz+Z65LCQ7mH6E2dow7dKu+sYl9QTpBJLeMFXDQQFzxZ/v2yG52d8TA1geV7wfR4pYpMZu12CjLJBEqZGRQM3oD8XI/2yx3a24AJcdhwt6mwt5Kvmtlrn7dkluMuwdcvxZM9eG2a4lt8Pi/enbENOz1Kb67w+Rb+xAGE29RkZ3kBWjRgkH6XOJ7F0Nw0RR+yrUMVSlQsnOEe21/o/NKoHd5GCOehgKoxTPcLgv/L5TiDCW970Eau+jncOSF4of46PlW0YgyKcripNYR4ZbWev0AwEqhPJlnqgIiUS0yC6S/G9iTX+VPaZEGLRcBxzZuxrpRFz7rhWboV9WliJSnG2He2q4riO/kPym3IqLlsF3cybyQFlElkTPox0TC5zxlbgcx3wehdU+6e8ClqPU7oJ8+4KGTwFWTa8UYDkHCUDTQ9ZzvNIPv82D+lkRjdzo2BSvqi3zOwBUGIJIMpw7muQ/mbBWEUMe69YZf70gsrtLsIIAGlOMIVA3CCEgZdfnculyVofK+F6qe5cTmd9EbeyBCtEhsSSuy99WRDjGv74RA7qNOxUXSk/Ckmz1mYpVLSIUh3944u2vppzCiG2A2/C8/Of92IYkBrESIJouvZHrhcENOahq/KJLymwxFkb16EdcFgYCXFHAVMbs2vSIWChHb8W3h5uo8CCk2ai2T9BoERZ+xPV0snthCJcKcOCKFhgiHoVUoMZHbmoNy7pDX1OCng26hW7cz2DynjCXuR8Yi65jPnbp1PCB3nKI3R5
	Lg=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	31:hEB9ceeOkwQIptJAN4geiEC+jHATkjFXOUGF7BUfGpJL7lqoI4qXR1MbS6G1pqUhjMrasvFulnBzwbGWO9Gu5XyJmq9ozGdfIsJmqK1sez/k3NHuHgeJw0EuQCQbBl+t+0bIArH5H8Ulz0WAxQdkvAaqUTaZQWlsGtLIOJzYUSpnXCWOGGDb89fsYvsLbn1Hw4aAymPFUGYbA5dFz1QSXlfQaFFONRQ/9+AwimJC6NnxFPUe9gWbNzPOnKqJRnAz5E+OwvWBq9qaeggfKVt/k0taopczf92ClIdOFgrPc6gqC0ibFVTHq+f+xML9in4XpsxcPCJHGts6pqRbNDzIDiwGzXGpDy3ds6VMD22qaxmh0ZDpvrYgRhSB7fbx//bbZy/RKF5n6C3/pY+AZfgaMNJw9Mem1GE7ALiUTJDmO9TPhwOExCeTjbgRbFJQuZkJ3EoiAW9FWSu4Vew92p59za3sdT0BMRYeEmUhT8CZyJ4EbOyWf2BDaAwCEKqMTndD09q4FONoGTRuAzHbw932plR4Uc8HBMDZyoIJBd8WTiSztGpyF/995WedVaxKd5XnXZniw76sn5vsqT3zWhMqqvVe1S6kxTs91l/2TuadVmieiNMC1aFwMqw9g9D5qQWaj3wUmthLR8Lh0fBwJYCAGMIjOFQry0s3ULi7SKt7MRg=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	20:/JMRSS6pvlIU2NVsdVU79CaoT83MKfpwNqnNK73ZgqOspJx6mORe7morn8NLzeFfPJKoRYPWQYJ8p3W/t1DBRwczafgQM5GUdi4rZd+ClTqqAeWyS+KrQrltyRcuSzOfk8zDYXF3z3x83RxJJD7zDDcyON4TXOyNaJSTSPEz1faPKjVkM49B+YzfQLKBFHjvtb3QEbX4LgL/NXX0c23wFrivys+LiN+WY+0zgSaXFFOQ5pddIR+M4iVBckUEfDlkT/k19z8KrKz7b+AWm0W13qygDeVnG5QE4qra3NOEptfYazg7q3rk66b+Hr5BMyVVS8ebeDgKhaZ7o+1vRVRT9UFxHdmMyYemTcOAXWsn2RH4bdHoy1LFhtQ9nGACWIZbUtsyZ1MxdXt+8QJYiNRPZJTBYOTP7bmR0K842yUUIhSsE0IhnV8JoGUTHE7PuAi38qJaDeLXiBfpwdSQmLW/t8YcjqlhbXi5kKvnfiovvMtXZD8X6Ehi43S/Ejz7aVL+
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB01507A5F6DF794E1FF0C58F0E5BB0@CY1PR12MB0150.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(601004)(2401047)(8121501046)(5005006)(93006095)(93001095)(10201501046)(100000703101)(100105400095)(3002001)(6055026)(6041248)(20161123564025)(20161123555025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123558100)(20161123562025)(6072148)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY1PR12MB0150; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY1PR12MB0150; 
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	4:OYitBSEZD7+n1XXI3XeAlYzCI52+BlJf0YEAqtk04N?=
	=?us-ascii?Q?drcqc2wfD07oHQ/rqPEYcaKBfqSnQ27kl4fidmQQVTGzH3JHwLGA+7rONtX3?=
	=?us-ascii?Q?gpvzJ4TqH+X2oOCQnbBpl62dKgO9dIN+DtPIqICMLS71fswyB57y+o8HTTvo?=
	=?us-ascii?Q?uOlKonAxfQKdaW2ZU4IOvu3t17eDsig2UUAKQHcFgvwq4nQ+g22oQ5Hj6VXh?=
	=?us-ascii?Q?QUuMs4fuhzbFHF87hLnKz18NoPp/2SF0CU5kidWhnkNoVnMkJzgfWH65/b15?=
	=?us-ascii?Q?w8Ug/Hh1COMR1j1L6zJTN1hWc0duPYpr5CXLgXZCKKFynfk10QhdW5bd9HTv?=
	=?us-ascii?Q?C4pT1df6W/3ToGBIT7rnm+2QVtd3avaLrBBDM2gxIvoCEYjpOqF5PEIkkcjb?=
	=?us-ascii?Q?3oEpWwjNZ9PpJrBB6lElu7muIgbRi4Q4XMFpWhoNLu7sn81r0pQ52HfAwM3b?=
	=?us-ascii?Q?7subExW9XmtG9RQMIYLjK1vsgMOdMFBgMWqwLbgfOj+a8eYsdQ1Qoi8DOHVb?=
	=?us-ascii?Q?m3IzT30c1ncg5XtVSmIXTvAD0ncJCSLVdvPM7gt4iO+D480uTqiqN0kgN8vl?=
	=?us-ascii?Q?YTUQs0fTRIS4A02+dLRjw0EPYlD2Ihwgnun/1ib87omygPmBndixBzObDDlV?=
	=?us-ascii?Q?KTqL3YK974JltZwztFd8KyiOVdjNE+8fEwoxBKOmfzosH1MmKxjgay4wNBoK?=
	=?us-ascii?Q?qoTLxpZW38mLkf23/qWtHLWBpdRUzlFdRVvaVli2bBZL9AJkfbDabB8SNco+?=
	=?us-ascii?Q?ivVngioLEq73ajAC5W1NiSs4Jsx4F+CvN3e9+fmRnKExoxZaIQbiEJToAZZD?=
	=?us-ascii?Q?j5yebfSVye4B1PrDU6Bhl3fzN5E8bXtMAmeqIp39e9Up4it/chN3ePJR/HNi?=
	=?us-ascii?Q?i+dP9R9wgZZPlcIJaz2SdSb1xF6DVzTntBoUWFeThFTHK7EngwKndt9E/61J?=
	=?us-ascii?Q?5Pwdlu1V6QZCJ1BuqrVSc36LbdSitd8SZ8tf6bexbTlXsRYE+Wx/ceb5a36M?=
	=?us-ascii?Q?7UIFHnx9Az2uBYu18uNF/hV1eX58DAKQBkW60qE1yrCk59t6OL4ybuVHf9dr?=
	=?us-ascii?Q?+v6+M6XyBYvdPPUPCX595/Z+S6t2cap6Io1d3Pk5RUT0KTSLxcx8XVJg+Jm8?=
	=?us-ascii?Q?zQU5hsaQ2ygdZyAGr1XbuTtVA3EqtZGlOJL5mlPmPxSVm85sIbXs5RkUgiYE?=
	=?us-ascii?Q?2SUW5pPyEo0iXmhnez0qDIozNgcCLZKAs9?=
X-Forefront-PRVS: 0378F1E47A
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(7370300001)(6009001)(39840400002)(39850400002)(39450400003)(39400400002)(39410400002)(39860400002)(199003)(189002)(4326008)(81156014)(7350300001)(81166006)(50226002)(50466002)(68736007)(36756003)(38730400002)(1076002)(110136004)(53936002)(6116002)(25786009)(48376002)(8676002)(86362001)(305945005)(54906002)(7736002)(2950100002)(6666003)(50986999)(101416001)(47776003)(105586002)(5660300001)(5003940100001)(7416002)(33646002)(106356001)(66066001)(6486002)(7406005)(97736004)(189998001)(3846002)(76176999)(2906002)(53416004)(42186005)(478600001)(309714004);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0150;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	23:9FQ5XqmWWIyCL6m+Ohs089Tf3ykxwJ3ki3BH+rWxS?=
	=?us-ascii?Q?lPPvu389Tk0lnQZEGbXqM2YXWPOOt5lUlEzfIfRd/Rs5coLTCRr5Oh3OCETy?=
	=?us-ascii?Q?glQ/UAGLaG5GYb5KIOi6sJq7M0vZ2ODyVRym54G7SoMrBG2XxSNdIqnGlY7D?=
	=?us-ascii?Q?PnlK9onNQ2ke6DU4IVtinDb/1KWR1y+hn2tq707UiIoAnxBLJI2EwzlLQoWI?=
	=?us-ascii?Q?JNfqWbO0GevW9+c78iorL80vOaj65UEhzsPMLgyevX16OBe5rw4wt4urKgBp?=
	=?us-ascii?Q?pcFDSzQwkaSeOKqoc9txk7nB0T8ywU4rl0uXIO7xMiGCmJ+bxe2RnU2qelbp?=
	=?us-ascii?Q?axICB11/IrF4wjBUv7K/s5wKNPxsXsfcJFH1fJmf19bOA6cX19FRh+QInOHd?=
	=?us-ascii?Q?c2iUIZ1dUmKP0dRvwK61Vjv/dtAHAs4o1aYiHnGRxkbBaJTaxC9jUYKLOD7U?=
	=?us-ascii?Q?PY4Cwy9E/LdQMTA2oU1nN50JfwNVXaXQF042RogbDclChiCo4FAKLcBevDG+?=
	=?us-ascii?Q?5Zx/icROxOavvOyOeMd2STEkj1iYjjMHEaCfxdU9eDYzsPIf0p1d/TBYocir?=
	=?us-ascii?Q?qMvhma2OQ0gv8XFFhw/OIc/TIqJJpQlbMVyZ0RqMNC5oxOpGZgLOLL/Q0Gxn?=
	=?us-ascii?Q?R2Ls32yQ/L6KMpoT15kK5MtXK1HpFnNTXPqwYFUoroHU/XsHA4PwL1kmp39a?=
	=?us-ascii?Q?acejZQP3XqEx4IRyuCWXgmaugGzC53kROFOU/Fk+Qd5SsULmy2f6xvICFvMF?=
	=?us-ascii?Q?lIy/7wS4T5dzxaO2VlQM3rdZ6tV7o/8v64AwksaiZU0Ep15rV0ic+QQWnVHd?=
	=?us-ascii?Q?CEf9t8SX6ob02R4TKVfrEtnOGqUUUY7eUt/GM2w3CXJJF0K40xD7oPZJtwce?=
	=?us-ascii?Q?7Cy0YA+2GP+zEyjXwqPK3DP1wkhmQCWfxlTUX7EQRgjNtBddAz9yGhFHiBzg?=
	=?us-ascii?Q?CT5liJ+geELdNSjyDecevYQ9emdYrGRgweOFODyXWSO921hUZqcUYscWhj1Q?=
	=?us-ascii?Q?Ni/wEFg+ByptAg/8QVx8u454E3BPgmiqZIvpOukW/DhE8trbAeE2uHmaOaF1?=
	=?us-ascii?Q?feZ5XAkBDfFYskLG+o2EvO/5rPHLK2A8Q6kUV37B3yfGeQ7XLwO5v7rXVYJD?=
	=?us-ascii?Q?G8bi3naUdNAs0osIaDiYFHjxqKDLBrKR8isMB2D533fzOVuvkRr8k7aPejpm?=
	=?us-ascii?Q?CK9bhZLz3as6cepKz3OZ90022QVO2R+NGkBnaUxEW6KSKqR9Ef7EI4uk/5/U?=
	=?us-ascii?Q?eiu4lDTB8tiLjsXAWFRaytRzeK0oI2OuMjIkIiFsOWZDCzgJEXndD8VEIk0m?=
	=?us-ascii?Q?+L1o6J1WhgRCOrOiZX+CzrcjBBi9vPBMdx2zaKTYhN/?=
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; CY1PR12MB0150;
	6:g+BPN/fXjkPY70TzgFGX74m7CZhrfyhnk5M3qky1g7?=
	=?us-ascii?Q?mgDZud8TCu+mMjjJivkljupFPnb/Q1iRO0xcPVXl4mc/6tBp/QBgDHTxcAm5?=
	=?us-ascii?Q?YbYHKGQb3PoyVOQV5jX8ME/dvI4D+ZhVnEMXaZ1JPQmY6KRZMrIGttbd+x4s?=
	=?us-ascii?Q?hxNo391GAy8A5R6Akc/oLEHa5Y6JJINorTu3zum2aAgOGLYn0Y7Oo+CRECAw?=
	=?us-ascii?Q?qTGPfiZV25sodx7sgmv9zjMd7w8+8ofivvMYVm95LnYFno/s+XAtSGCmKU2P?=
	=?us-ascii?Q?Kfz22n4oCzWOOlt95cON3QgcevMJeM+6YGnZ72/ZiqDAwCtPAtC9Tu+gqq/k?=
	=?us-ascii?Q?cIRzmup7o79UOsnXDKaa/YStU0Ja9DUYZi+xM92ywTcbUIdtKJX3Gbp1yh8F?=
	=?us-ascii?Q?ETvfMNJxYtJdMjrdGDILZzXwMQ1RBQBZ9Cl2ZeqUdYSyMuFvsapp5ujPZZTK?=
	=?us-ascii?Q?9AmfvsEA+25hgs5X00TzXc7jd/shG2EqbJSMkd74pQrX9s5Sm67SVKU6Jj6S?=
	=?us-ascii?Q?spbZYLY08xITm2hJ1mK+T/db8tO5ljuFJy+sa3QWTpLyr8dJRu+DYtSwqhQx?=
	=?us-ascii?Q?dOIRG7bOxwNHhw/Lojd/dpXDYsFoyZdS+1ABfZIfKxqDKVVCWDvs5Bqn9SAC?=
	=?us-ascii?Q?M3zn0QJ2XP4Ln5qsp2aOseokQr3ThZzU3iTTdT99eEvG2J4lxBbtX4IMVtVk?=
	=?us-ascii?Q?4yRcDmiA1scR/UysnvlKkDY8yXJuV9te89d9+xNg3kK1WXlVf2WQWtKheIR3?=
	=?us-ascii?Q?Ml0Y5+JR8RgHD8e2ZQKmunflvRS/QnvKyYQA4C7+EH5GrIjtQy3HouDhCzoU?=
	=?us-ascii?Q?qK6tUoSLbA0yVFj44K8Qljfy/n7tt8d2Vim4REBWWtW76fdrxKydaab0PjyO?=
	=?us-ascii?Q?7ECnzJ5+rbcbtYcPAmESH/hL+VL/WSSHYpRJhQ78wkG8sHVMex4a3TTcQ//k?=
	=?us-ascii?Q?hImzLVoXDg7RXjo/RAj4AneVYcc6xaWFv4EvPTy5usm8ubJFFxeNfhXt/Kqj?=
	=?us-ascii?Q?cS4bqRL3XpE2eIJ4XMGLWT?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	5:fXUMneuP3wXdvrnfGMvI1IjP9y5rInK/WNcL2pdXiwMH4ed1aEzPMC4VQjrHYBzqlPBfYe62QW2UOkASbWIWEMRGH1cRPQi6qN+ikhW/lojtTBWTSzux4WBmlChCS/Uybq7PyiztXajI/g7oX9jsL1BeyAI4Ekgrp9PJz+cPPn45ClPfk41yWoEEc2uHIg2lJh+eXl2Pa84NcJOUI/JmcZPS5ErIUB1+0lm9+AGcr96FjRPV1e8YGnMEToNldYuPVDWjVhTTmr0TePniHMwMJz2NzsH2pdGKGXLMksGl4RDNSjdiIPeZCpndxVjCn3OFoU9rgn0/M+x+ejafSknABw5zQeFNOa6eeyDi+9HdYM+Ee8ncIKbWjQm4qDWywds0RHFmetsiLw/gppcGfN06iR4cqsaNn5p7GkwRc9O71p+zIOLqAvynKOq40GOImiC6MTZzxIs27zSS3RrO+tt2ARWAI3BbZkV4UHPNb72RUjPgsbO1Xq+dLjvwJUlNbxz/;
	24:i1FjIVMaten2XJlmKrhNbgGbGcu9XoJHsABjqtF/P+q/P8qMsr4s7OUU7JapOijFTiQoryHfRH6jlmOEiVMM5TnWbT9gL1HB9gDdVbEeKCQ=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	7:KVpVxiqg1SxRhCowaeT5v5PrP5emQ5Eq1Mwt0yK650G4CS4FehqdGkiL39BkZDF2HES4/6KQCIi9UuDG4Ltpi94zXQiz+PhQCziWj11O7qvRqlrvbzWj1dhUsT49IUPFyY/9MX8bB7d/Aengcq5mUoMWWngowu99Z6MAK2C+cZxAC0OVnDAlKSXUMhKD8j6/d71Dt1lY3Q7eBRvCl/J/mMA256+2zu4+Lv6Es6r3vtFeZRzlqdWT7z6EGfqDDYlXoedU2jw56AKMdqMQG2+R63LUT57OMEZaC1Ylr74JvgodjuV4kHzJZaSEOyY3RV5jv2UKHkMkzV8m+7jn4b6UPaIsSFbDm7JqpuyjhzqpedS3VDYAQUR+ZYJKrQDSKKdY2nVVNZu6wMBmQDVXuTsOysVRn9YzR9EFaaf3yrawedhGjIMausL10VWay0pd3fwCpXD1ppIPr2lFTUN3Nuf8o9EMunMttwmjGyC+Ux13PbSJp8uUFav1eJbIRq7XI0cipeFvIFb/htS/KoMnB6pKXUb/F3BmD1UIAVmgZp6BN18l57BKaeP0njuJ6/G3TpnLxUQCAlQg5InxBjbfWnPiPNB4O4p8M2Q/0sH6WEOkagKsceXOs/eDI1fIDlF4fk+xjBxfrwabahkOI+O3iteyBPFLpD8YNYAg6IuCHUpmLybJqK6lmaVX4ldywCLNnJW6MTssGVkRQbOPj9RoUFnV3USLaHZQY3LsVRShEE/MDY734B52awaSygiwXvw+iSl5Aljm512SC6YwYs3BY7bLBDcMmn2MVYK9akQ/ndUZMkU=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0150;
	20:s0ima6U/aK3+l92jxubkQpZVByYwx44TBoAAV5PtNcBZUl0Tvdi0dCODjP+gNexFdmNPpgVWvAW5easBJubAr6vo0gCF1zaWnoCzemuoAfc3BcbEPl9TIPrddaF++vHDZB0a7w5WPCeZLlr8Gq6uq4QLspFJz76cYO90Mh8y4aelXLevPjm+I5/YJNBTI7GQnHULuEm0wgB6XvIvsPy4Yg6SX6X9XDVG2WND4nYF76bzax0xXDxsnVI2X6c9L2QH
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 24 Jul 2017 19:08:19.3253
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0150
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - July 24, 2017, 7:07 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Provide support for Secure Encyrpted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h | 2 ++
 arch/x86/mm/mem_encrypt.c          | 3 +++
 include/linux/mem_encrypt.h        | 8 +++++++-
 3 files changed, 12 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - July 26, 2017, 4:28 a.m.</div>
<pre class="content">
On Mon, Jul 24, 2017 at 02:07:43PM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Provide support for Secure Encyrpted Virtualization (SEV). This initial</span>

Your subject misses a verb and patch subjects should have an active verb
denoting what the patch does. The sentence above is a good example.
<span class="quote">
&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt; running with SEV active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h | 2 ++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          | 3 +++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        | 8 +++++++-</span>
<span class="quote">&gt;  3 files changed, 12 insertions(+), 1 deletion(-)</span>

...
<span class="quote">
&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; index 0fbd092..1e4643e 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; @@ -40,6 +40,9 @@ static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
<span class="quote">&gt;  unsigned long sme_me_mask __section(.data) = 0;</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(sme_me_mask);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +unsigned int sev_enabled __section(.data) = 0;</span>
<span class="quote">&gt; +EXPORT_SYMBOL_GPL(sev_enabled);</span>

So sev_enabled is a pure bool used only in bool context, not like
sme_me_mask whose value is read too. Which means, you can make the
former static and query it only through accessor functions.
<span class="quote">
&gt;  /* Buffer used for early in-place encryption by BSP, no locking needed */</span>
<span class="quote">&gt;  static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; index 1255f09..ea0831a 100644</span>
<span class="quote">&gt; --- a/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; @@ -22,12 +22,18 @@</span>
<span class="quote">&gt;  #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define sme_me_mask	0UL</span>
<span class="quote">&gt; +#define sev_enabled	0</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline bool sme_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return !!sme_me_mask;</span>
<span class="quote">&gt; +	return (sme_me_mask &amp;&amp; !sev_enabled);</span>

You don&#39;t need the brackets. Below too.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline bool sev_active(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return (sme_me_mask &amp;&amp; sev_enabled);</span>
<span class="quote">&gt;  }</span>

So this is confusing, TBH. SME and SEV are not mutually exclusive and
yet the logic here says so. Why?

I mean, in the hypervisor context, sme_active() is still true.

/me is confused.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - July 26, 2017, 4:47 p.m.</div>
<pre class="content">
On 7/25/2017 11:28 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Mon, Jul 24, 2017 at 02:07:43PM -0500, Brijesh Singh wrote:</span>
<span class="quote">&gt;&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Provide support for Secure Encyrpted Virtualization (SEV). This initial</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Your subject misses a verb and patch subjects should have an active verb</span>
<span class="quote">&gt; denoting what the patch does. The sentence above is a good example.</span>

Yup, will update.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; support defines a flag that is used by the kernel to determine if it is</span>
<span class="quote">&gt;&gt; running with SEV active.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   arch/x86/include/asm/mem_encrypt.h | 2 ++</span>
<span class="quote">&gt;&gt;   arch/x86/mm/mem_encrypt.c          | 3 +++</span>
<span class="quote">&gt;&gt;   include/linux/mem_encrypt.h        | 8 +++++++-</span>
<span class="quote">&gt;&gt;   3 files changed, 12 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; index 0fbd092..1e4643e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; @@ -40,6 +40,9 @@ static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
<span class="quote">&gt;&gt;   unsigned long sme_me_mask __section(.data) = 0;</span>
<span class="quote">&gt;&gt;   EXPORT_SYMBOL_GPL(sme_me_mask);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +unsigned int sev_enabled __section(.data) = 0;</span>
<span class="quote">&gt;&gt; +EXPORT_SYMBOL_GPL(sev_enabled);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So sev_enabled is a pure bool used only in bool context, not like</span>
<span class="quote">&gt; sme_me_mask whose value is read too. Which means, you can make the</span>
<span class="quote">&gt; former static and query it only through accessor functions.</span>

If it&#39;s made static then the sme_active()/sev_active() inline functions
would need to be turned into functions within the mem_encrypt.c file. So
there&#39;s a trade-off to do that, which is the better one?
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt;   /* Buffer used for early in-place encryption by BSP, no locking needed */</span>
<span class="quote">&gt;&gt;   static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index 1255f09..ea0831a 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -22,12 +22,18 @@</span>
<span class="quote">&gt;&gt;   #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   #define sme_me_mask	0UL</span>
<span class="quote">&gt;&gt; +#define sev_enabled	0</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt;   static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt; -	return !!sme_me_mask;</span>
<span class="quote">&gt;&gt; +	return (sme_me_mask &amp;&amp; !sev_enabled);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You don&#39;t need the brackets. Below too.</span>

Ok.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline bool sev_active(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return (sme_me_mask &amp;&amp; sev_enabled);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So this is confusing, TBH. SME and SEV are not mutually exclusive and</span>
<span class="quote">&gt; yet the logic here says so. Why?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I mean, in the hypervisor context, sme_active() is still true.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /me is confused.</span>

The kernel needs to distinguish between running under SME and running
under SEV. SME and SEV are similar but not the same. The trampoline code
is a good example.  Before paging is activated, SME will access all
memory as decrypted, but SEV will access all memory as encrypted.  So
when APs are being brought up under SME the trampoline area cannot be
encrypted, whereas under SEV the trampoline area must be encrypted.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - July 27, 2017, 1:39 p.m.</div>
<pre class="content">
On Wed, Jul 26, 2017 at 11:47:32AM -0500, Tom Lendacky wrote:
<span class="quote">&gt; If it&#39;s made static then the sme_active()/sev_active() inline functions</span>
<span class="quote">&gt; would need to be turned into functions within the mem_encrypt.c file. So</span>
<span class="quote">&gt; there&#39;s a trade-off to do that, which is the better one?</span>

Simple: why do we have functions if the variables are exported?

The reasoning for sme_me_mask is more or less obvious but for sev_enabled...

IOW, either make the bool static and unlinine the function - this way
you&#39;re free to change how you determine whether SEV is enabled later as
callers will be using the function.

Or, if it doesn&#39;t really matter because you can always change callers
later, simply drop sev_active() the function and use a bool sev_active
everywhere.
<span class="quote">
&gt; The kernel needs to distinguish between running under SME and running</span>
<span class="quote">&gt; under SEV. SME and SEV are similar but not the same. The trampoline code</span>
<span class="quote">&gt; is a good example.  Before paging is activated, SME will access all</span>
<span class="quote">&gt; memory as decrypted, but SEV will access all memory as encrypted.  So</span>
<span class="quote">&gt; when APs are being brought up under SME the trampoline area cannot be</span>
<span class="quote">&gt; encrypted, whereas under SEV the trampoline area must be encrypted.</span>

I guess you&#39;re sensing by now that we need this clarification in a
comment above it...

:-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 8e618fc..9274ec7 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 extern unsigned long sme_me_mask;
<span class="p_add">+extern unsigned int sev_enabled;</span>
 
 void sme_encrypt_execute(unsigned long encrypted_kernel_vaddr,
 			 unsigned long decrypted_kernel_vaddr,
<span class="p_chunk">@@ -50,6 +51,7 @@</span> <span class="p_context"> void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0UL
<span class="p_add">+#define sev_enabled	0</span>
 
 static inline void __init sme_early_encrypt(resource_size_t paddr,
 					    unsigned long size) { }
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 0fbd092..1e4643e 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -40,6 +40,9 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 unsigned long sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+unsigned int sev_enabled __section(.data) = 0;</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_enabled);</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 1255f09..ea0831a 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -22,12 +22,18 @@</span> <span class="p_context"></span>
 #else	/* !CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
 #define sme_me_mask	0UL
<span class="p_add">+#define sev_enabled	0</span>
 
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
 static inline bool sme_active(void)
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return (sme_me_mask &amp;&amp; !sev_enabled);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (sme_me_mask &amp;&amp; sev_enabled);</span>
 }
 
 static inline unsigned long sme_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



