
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/9] perf, tools, stat: Abstract stat metrics printing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/9] perf, tools, stat: Abstract stat metrics printing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 20, 2016, 2:26 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1453256812-24006-2-git-send-email-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8068061/mbox/"
   >mbox</a>
|
   <a href="/patch/8068061/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8068061/">/patch/8068061/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 3156CBEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 02:32:30 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id CC5C620547
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 02:32:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 40A9320555
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 02:32:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934971AbcATCcY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 19 Jan 2016 21:32:24 -0500
Received: from mga04.intel.com ([192.55.52.120]:5209 &quot;EHLO mga04.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933830AbcATC05 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 19 Jan 2016 21:26:57 -0500
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
	by fmsmga104.fm.intel.com with ESMTP; 19 Jan 2016 18:26:55 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.22,319,1449561600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;32675196&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.156])
	by fmsmga004.fm.intel.com with ESMTP; 19 Jan 2016 18:26:56 -0800
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 2381930293A; Tue, 19 Jan 2016 18:26:55 -0800 (PST)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@kernel.org
Cc: jolsa@kernel.org, mingo@kernel.org, linux-kernel@vger.kernel.org,
	eranian@google.com, Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 1/9] perf, tools, stat: Abstract stat metrics printing
Date: Tue, 19 Jan 2016 18:26:44 -0800
Message-Id: &lt;1453256812-24006-2-git-send-email-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1453256812-24006-1-git-send-email-andi@firstfloor.org&gt;
References: &lt;1453256812-24006-1-git-send-email-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - Jan. 20, 2016, 2:26 a.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Abstract the printing of shadow metrics. Instead of every
metric calling fprintf directly and taking care of indentation,
use two call backs: one to print metrics and another to
start a new line.

This will allow adding metrics to CSV mode and also
using them for other purposes.

The computation of padding is now done in the central
callback, instead of every metric doing it manually.
This makes it easier to add new metrics.

v2: Refactor functions, printout now does more. Move
shadow printing. Improve fallback callbacks. Don&#39;t
use void * callback data.
v3: Remove unnecessary hunk. Add typedef for new_line
v4: Remove unnecessary hunk. Don&#39;t print metrics for CSV/interval
mode yet.  Move printout change to separate patch.
v5: Fix bisect bugs. Avoid bogus frontend cycles printing.
Fix indentation in different aggregation modes.
v6: Delay newline handling
<span class="signed-off-by">Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/builtin-stat.c     |  71 ++++++++++++--
 tools/perf/util/stat-shadow.c | 211 +++++++++++++++++++++++-------------------
 tools/perf/util/stat.h        |  15 ++-
 3 files changed, 194 insertions(+), 103 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Jan. 22, 2016, 9:41 a.m.</div>
<pre class="content">
On Tue, Jan 19, 2016 at 06:26:44PM -0800, Andi Kleen wrote:
<span class="quote">&gt; From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Abstract the printing of shadow metrics. Instead of every</span>
<span class="quote">&gt; metric calling fprintf directly and taking care of indentation,</span>
<span class="quote">&gt; use two call backs: one to print metrics and another to</span>
<span class="quote">&gt; start a new line.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This will allow adding metrics to CSV mode and also</span>
<span class="quote">&gt; using them for other purposes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The computation of padding is now done in the central</span>
<span class="quote">&gt; callback, instead of every metric doing it manually.</span>
<span class="quote">&gt; This makes it easier to add new metrics.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v2: Refactor functions, printout now does more. Move</span>
<span class="quote">&gt; shadow printing. Improve fallback callbacks. Don&#39;t</span>
<span class="quote">&gt; use void * callback data.</span>
<span class="quote">&gt; v3: Remove unnecessary hunk. Add typedef for new_line</span>
<span class="quote">&gt; v4: Remove unnecessary hunk. Don&#39;t print metrics for CSV/interval</span>
<span class="quote">&gt; mode yet.  Move printout change to separate patch.</span>
<span class="quote">&gt; v5: Fix bisect bugs. Avoid bogus frontend cycles printing.</span>
<span class="quote">&gt; Fix indentation in different aggregation modes.</span>
<span class="quote">&gt; v6: Delay newline handling</span>
<span class="quote">&gt; Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
<span class="acked-by">
Acked-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>

thanks,
jirka
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Jan. 22, 2016, 10:05 a.m.</div>
<pre class="content">
On Tue, Jan 19, 2016 at 06:26:44PM -0800, Andi Kleen wrote:

SNIP
<span class="quote">
&gt;  </span>
<span class="quote">&gt; -void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt; -				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="quote">&gt; +void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="quote">&gt; +				   double avg, int cpu,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	void *ctxp = out-&gt;ctx;</span>
<span class="quote">&gt; +	print_metric_t print_metric = out-&gt;print_metric;</span>
<span class="quote">&gt;  	double total, ratio = 0.0, total2;</span>
<span class="quote">&gt;  	int ctx = evsel_context(evsel);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -307,119 +302,145 @@ void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		if (total) {</span>
<span class="quote">&gt;  			ratio = avg / total;</span>
<span class="quote">&gt; -			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="quote">&gt; +					&quot;insn per cycle&quot;, ratio);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +		out-&gt;new_line(ctxp);</span>
<span class="quote">&gt;  		if (total &amp;&amp; avg) {</span>
<span class="quote">&gt;  			ratio = total / avg;</span>
<span class="quote">&gt; -			fprintf(out, &quot;\n&quot;);</span>
<span class="quote">&gt; -			if (aggr == AGGR_NONE)</span>
<span class="quote">&gt; -				fprintf(out, &quot;        &quot;);</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="quote">&gt; +					&quot;stalled cycles per insn&quot;,</span>
<span class="quote">&gt; +					ratio);</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL,</span>
<span class="quote">&gt; +				     &quot;stalled cycles per insn&quot;, 0);</span>
<span class="quote">&gt;  		}</span>


hum the CSV output showing extra line with empty metrics,
and looks like t&#39;s because of the above hunk..

[jolsa@krava perf]$ sudo ./perf stat -e cycles,instructions -a -x, 
^C160517940,,cycles,2357448795,100.00,,Ghz,2357448795,100.00
84822675,,instructions,2357537479,100.00,0.53,insn per cycle
,,,2357537479,100.00,,stalled cycles per insn,2357537479,100.00

[jolsa@krava perf]$ sudo ./perf stat -e cycles,instructions -a 
^C
 Performance counter stats for &#39;system wide&#39;:

       114,951,298      cycles                                                      
        24,554,494      instructions              #    0.21  insn per cycle                                            

       0.663756378 seconds time elapsed


thanks,
jirka
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 7f56824..b675b5e 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -735,6 +735,58 @@</span> <span class="p_context"> static void aggr_printout(struct perf_evsel *evsel, int id, int nr)</span>
 	}
 }
 
<span class="p_add">+struct outstate {</span>
<span class="p_add">+	FILE *fh;</span>
<span class="p_add">+	bool newline;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define METRIC_LEN  35</span>
<span class="p_add">+</span>
<span class="p_add">+static void new_line_std(void *ctx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+</span>
<span class="p_add">+	os-&gt;newline = true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void do_new_line_std(struct outstate *os)</span>
<span class="p_add">+{</span>
<span class="p_add">+	fputc(&#39;\n&#39;, os-&gt;fh);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_NONE)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;        &quot;);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_CORE)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;                  &quot;);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_SOCKET)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;            &quot;);</span>
<span class="p_add">+	fprintf(os-&gt;fh, &quot;                                                 &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_metric_std(void *ctx, const char *color, const char *fmt,</span>
<span class="p_add">+			     const char *unit, double val)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+	FILE *out = os-&gt;fh;</span>
<span class="p_add">+	int n;</span>
<span class="p_add">+	bool newline = os-&gt;newline;</span>
<span class="p_add">+</span>
<span class="p_add">+	os-&gt;newline = false;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unit == NULL || fmt == NULL) {</span>
<span class="p_add">+		fprintf(out, &quot;%-*s&quot;, METRIC_LEN, &quot;&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (newline)</span>
<span class="p_add">+		do_new_line_std(os);</span>
<span class="p_add">+</span>
<span class="p_add">+	n = fprintf(out, &quot; # &quot;);</span>
<span class="p_add">+	if (color)</span>
<span class="p_add">+		n += color_fprintf(out, color, fmt, val);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		n += fprintf(out, fmt, val);</span>
<span class="p_add">+	fprintf(out, &quot; %-*s&quot;, METRIC_LEN - n - 1, unit);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void nsec_printout(int id, int nr, struct perf_evsel *evsel, double avg)
 {
 	FILE *output = stat_config.output;
<span class="p_chunk">@@ -795,20 +847,27 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 
 static void printout(int id, int nr, struct perf_evsel *counter, double uval)
 {
<span class="p_del">-	int cpu = cpu_map__id_to_cpu(id);</span>
<span class="p_add">+	struct outstate os = { .fh = stat_config.output };</span>
<span class="p_add">+	struct perf_stat_output_ctx out;</span>
<span class="p_add">+	print_metric_t pm = print_metric_std;</span>
<span class="p_add">+	void (*nl)(void *);</span>
 
<span class="p_del">-	if (stat_config.aggr_mode == AGGR_GLOBAL)</span>
<span class="p_del">-		cpu = 0;</span>
<span class="p_add">+	nl = new_line_std;</span>
 
 	if (nsec_counter(counter))
 		nsec_printout(id, nr, counter, uval);
 	else
 		abs_printout(id, nr, counter, uval);
 
<span class="p_add">+	out.print_metric = pm;</span>
<span class="p_add">+	out.new_line = nl;</span>
<span class="p_add">+	out.ctx = &amp;os;</span>
<span class="p_add">+</span>
 	if (!csv_output &amp;&amp; !stat_config.interval)
<span class="p_del">-		perf_stat__print_shadow_stats(stat_config.output, counter,</span>
<span class="p_del">-					      uval, cpu,</span>
<span class="p_del">-					      stat_config.aggr_mode);</span>
<span class="p_add">+		perf_stat__print_shadow_stats(counter, uval,</span>
<span class="p_add">+				stat_config.aggr_mode == AGGR_GLOBAL ? 0 :</span>
<span class="p_add">+				cpu_map__id_to_cpu(id),</span>
<span class="p_add">+				&amp;out);</span>
 }
 
 static void print_aggr(char *prefix)
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 6ac0314..4d8f185 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -137,9 +137,10 @@</span> <span class="p_context"> static const char *get_ratio_color(enum grc_type type, double ratio)</span>
 	return color;
 }
 
<span class="p_del">-static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_frontend(int cpu,</span>
 					  struct perf_evsel *evsel
<span class="p_del">-					  __maybe_unused, double avg)</span>
<span class="p_add">+					  __maybe_unused, double avg,</span>
<span class="p_add">+					  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -152,14 +153,17 @@</span> <span class="p_context"> static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="p_add">+	if (ratio)</span>
<span class="p_add">+		out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;frontend cycles idle&quot;,</span>
<span class="p_add">+				  ratio);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		out-&gt;print_metric(out-&gt;ctx, NULL, NULL, &quot;frontend cycles idle&quot;, 0);</span>
 }
 
<span class="p_del">-static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_backend(int cpu,</span>
 					 struct perf_evsel *evsel
<span class="p_del">-					 __maybe_unused, double avg)</span>
<span class="p_add">+					 __maybe_unused, double avg,</span>
<span class="p_add">+					 struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -172,14 +176,13 @@</span> <span class="p_context"> static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%6.2f%%&quot;, &quot;backend cycles idle&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_branch_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_branch_misses(int cpu,</span>
 				struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				double avg)</span>
<span class="p_add">+				double avg,</span>
<span class="p_add">+				struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -192,14 +195,13 @@</span> <span class="p_context"> static void print_branch_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all branches&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_dcache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -212,14 +214,13 @@</span> <span class="p_context"> static void print_l1_dcache_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-dcache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_icache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -231,15 +232,13 @@</span> <span class="p_context"> static void print_l1_icache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-icache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_dtlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -251,15 +250,13 @@</span> <span class="p_context"> static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all dTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_itlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -271,15 +268,13 @@</span> <span class="p_context"> static void print_itlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all iTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_ll_cache_misses(int cpu,</span>
 				  struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				  double avg)</span>
<span class="p_add">+				  double avg,</span>
<span class="p_add">+				  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -291,15 +286,15 @@</span> <span class="p_context"> static void print_ll_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
<span class="p_add">+	void *ctxp = out-&gt;ctx;</span>
<span class="p_add">+	print_metric_t print_metric = out-&gt;print_metric;</span>
 	double total, ratio = 0.0, total2;
 	int ctx = evsel_context(evsel);
 
<span class="p_chunk">@@ -307,119 +302,145 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;insn per cycle&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
 		}
 		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);
 		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));
 
<span class="p_add">+		out-&gt;new_line(ctxp);</span>
 		if (total &amp;&amp; avg) {
 			ratio = total / avg;
<span class="p_del">-			fprintf(out, &quot;\n&quot;);</span>
<span class="p_del">-			if (aggr == AGGR_NONE)</span>
<span class="p_del">-				fprintf(out, &quot;        &quot;);</span>
<span class="p_del">-			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;stalled cycles per insn&quot;,</span>
<span class="p_add">+					ratio);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL,</span>
<span class="p_add">+				     &quot;stalled cycles per insn&quot;, 0);</span>
 		}
<span class="p_del">-</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES)) {</span>
<span class="p_add">+		if (runtime_branches_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_branch_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all branches&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_dcache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_dcache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-dcache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_icache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_icache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-icache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_dtlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_dtlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all dTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_itlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_itlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all iTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_ll_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_ll_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all LL-cache hits&quot;, 0);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES)) {</span>
 		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);
 
 		if (total)
 			ratio = avg * 100 / total;
 
<span class="p_del">-		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_del">-</span>
<span class="p_add">+		if (runtime_cacherefs_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f %%&quot;,</span>
<span class="p_add">+				     &quot;of all cache refs&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all cache refs&quot;, 0);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {
<span class="p_del">-		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_frontend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {
<span class="p_del">-		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_backend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;GHz&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;Ghz&quot;, 0);</span>
 		}
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="p_del">-				100.0 * (avg / total));</span>
<span class="p_add">+			print_metric(ctxp, NULL,</span>
<span class="p_add">+					&quot;%7.2f%%&quot;, &quot;transactional cycles&quot;,</span>
<span class="p_add">+					100.0 * (avg / total));</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;transactional cycles&quot;,</span>
<span class="p_add">+				     0);</span>
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 		if (total2 &lt; avg)
 			total2 = avg;
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f%%&quot;, &quot;aborted cycles&quot;,</span>
 				100.0 * ((total2-avg) / total));
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;aborted cycles&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		if (runtime_cycles_in_tx_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.0f&quot;,</span>
<span class="p_add">+				     &quot;cycles / transaction&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;cycles / transaction&quot;,</span>
<span class="p_add">+				     0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, ELISION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.0f&quot;, &quot;cycles / elision&quot;, ratio);</span>
 	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK)) {
 		if ((ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0)
<span class="p_del">-			fprintf(out, &quot; # %8.3f CPUs utilized          &quot;, avg / ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;CPUs utilized&quot;,</span>
<span class="p_add">+				     avg / ratio);</span>
 		else
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
<span class="p_add">+		char unit_buf[10];</span>
 
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
<span class="p_chunk">@@ -429,9 +450,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 			ratio *= 1000;
 			unit = &#39;K&#39;;
 		}
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_add">+		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);</span>
 	} else {
<span class="p_del">-		fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+		print_metric(ctxp, NULL, NULL, NULL, 0);</span>
 	}
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 086f4e1..f14c0f4 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -68,11 +68,22 @@</span> <span class="p_context"> void perf_stat_evsel_id_init(struct perf_evsel *evsel);</span>
 
 extern struct stats walltime_nsecs_stats;
 
<span class="p_add">+typedef void (*print_metric_t)(void *ctx, const char *color, const char *unit,</span>
<span class="p_add">+			       const char *fmt, double val);</span>
<span class="p_add">+typedef void (*new_line_t )(void *ctx);</span>
<span class="p_add">+</span>
 void perf_stat__reset_shadow_stats(void);
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,
 				    int cpu);
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr);</span>
<span class="p_add">+struct perf_stat_output_ctx {</span>
<span class="p_add">+	void *ctx;</span>
<span class="p_add">+	print_metric_t print_metric;</span>
<span class="p_add">+	new_line_t new_line;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out);</span>
 
 void perf_evsel__reset_stat_priv(struct perf_evsel *evsel);
 int perf_evsel__alloc_stat_priv(struct perf_evsel *evsel);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



