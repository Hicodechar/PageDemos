
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[31/34] x86/ldt: Split out sanity check in map_ldt_struct() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [31/34] x86/ldt: Split out sanity check in map_ldt_struct()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 5, 2018, 10:26 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1520245563-8444-32-git-send-email-joro@8bytes.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10258603/mbox/"
   >mbox</a>
|
   <a href="/patch/10258603/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10258603/">/patch/10258603/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9BB8860365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 10:27:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8A2A0289DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 10:27:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7E45F289E3; Mon,  5 Mar 2018 10:27:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DA5C3289DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Mar 2018 10:27:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933929AbeCEK1L (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 5 Mar 2018 05:27:11 -0500
Received: from 8bytes.org ([81.169.241.247]:54502 &quot;EHLO theia.8bytes.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933851AbeCEK00 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 5 Mar 2018 05:26:26 -0500
Received: by theia.8bytes.org (Postfix, from userid 1000)
	id 71BED4255; Mon,  5 Mar 2018 11:26:09 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=8bytes.org; s=mail-1; 
	t=1520245571; bh=PcrGto/IpJfqEyqwqIoGCxBXn1ZO4uVqmRmVmUz5A5c=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=WOD7gNaz1QWOJjhLHE0eLwtGU+bzNN71ygz9fTnzqVs79RprSinRVjVkgGjdY0XFK
	bhq+R0mao6FoBwKp5Lp59vq0zynzCKvzWCrcwUY66C7tmdB8d4J9jLfvOOZYFQlpRM
	SFFVleVmeWhx5A38LE2Vr5FJvYPbA8t4IqeQGA8Rdk3Sa+FZqhyl88GlNScRhKoWUN
	jzOP9CfbWE5MnDv+CeT2QWu7vLtGshJlwiTgnz9vnmUcNIzS8b5Umq4hE+DXzphcdi
	QSXwbB/n38cIIOdzkw9Q3LyQ+xMZcyPLdyoucoZ5QlfH5iPUeMBs3JyPITs1lJed/3
	znnJsyfUpXRwQ==
From: Joerg Roedel &lt;joro@8bytes.org&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: x86@kernel.org, linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;, Juergen Gross &lt;jgross@suse.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;, Jiri Kosina &lt;jkosina@suse.cz&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, aliguori@amazon.com,
	daniel.gruss@iaik.tugraz.at, hughd@google.com, keescook@google.com,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Waiman Long &lt;llong@redhat.com&gt;, Pavel Machek &lt;pavel@ucw.cz&gt;,
	jroedel@suse.de, joro@8bytes.org
Subject: [PATCH 31/34] x86/ldt: Split out sanity check in map_ldt_struct()
Date: Mon,  5 Mar 2018 11:26:00 +0100
Message-Id: &lt;1520245563-8444-32-git-send-email-joro@8bytes.org&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1520245563-8444-1-git-send-email-joro@8bytes.org&gt;
References: &lt;1520245563-8444-1-git-send-email-joro@8bytes.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=317">Joerg Roedel</a> - March 5, 2018, 10:26 a.m.</div>
<pre class="content">
<span class="from">From: Joerg Roedel &lt;jroedel@suse.de&gt;</span>

This splits out the mapping sanity check and the actual
mapping of the LDT to user-space from the map_ldt_struct()
function in a way so that it is re-usable for PAE paging.
<span class="signed-off-by">
Signed-off-by: Joerg Roedel &lt;jroedel@suse.de&gt;</span>
---
 arch/x86/kernel/ldt.c | 82 ++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 58 insertions(+), 24 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/ldt.c b/arch/x86/kernel/ldt.c</span>
<span class="p_header">index f3c2fbf..8ab7df9 100644</span>
<span class="p_header">--- a/arch/x86/kernel/ldt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/ldt.c</span>
<span class="p_chunk">@@ -100,6 +100,49 @@</span> <span class="p_context"> static struct ldt_struct *alloc_ldt_struct(unsigned int num_entries)</span>
 	return new_ldt;
 }
 
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
<span class="p_add">+</span>
<span class="p_add">+static void do_sanity_check(struct mm_struct *mm,</span>
<span class="p_add">+			    bool had_kernel_mapping,</span>
<span class="p_add">+			    bool had_user_mapping)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (mm-&gt;context.ldt) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We already had an LDT.  The top-level entry should already</span>
<span class="p_add">+		 * have been allocated and synchronized with the usermode</span>
<span class="p_add">+		 * tables.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		WARN_ON(!had_kernel_mapping);</span>
<span class="p_add">+		if (static_cpu_has(X86_FEATURE_PTI))</span>
<span class="p_add">+			WARN_ON(!had_user_mapping);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * This is the first time we&#39;re mapping an LDT for this process.</span>
<span class="p_add">+		 * Sync the pgd to the usermode tables.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		WARN_ON(had_kernel_mapping);</span>
<span class="p_add">+		if (static_cpu_has(X86_FEATURE_PTI))</span>
<span class="p_add">+			WARN_ON(had_user_mapping);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void map_ldt_struct_to_user(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd = pgd_offset(mm, LDT_BASE_ADDR);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_PTI) &amp;&amp; !mm-&gt;context.ldt)</span>
<span class="p_add">+		set_pgd(kernel_to_user_pgdp(pgd), *pgd);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void sanity_check_ldt_mapping(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd = pgd_offset(mm, LDT_BASE_ADDR);</span>
<span class="p_add">+	bool had_kernel = (pgd-&gt;pgd != 0);</span>
<span class="p_add">+	bool had_user   = (kernel_to_user_pgdp(pgd)-&gt;pgd != 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	do_sanity_check(mm, had_kernel, had_user);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * If PTI is enabled, this maps the LDT into the kernelmode and
  * usermode tables for the given mm.
<span class="p_chunk">@@ -115,9 +158,8 @@</span> <span class="p_context"> static struct ldt_struct *alloc_ldt_struct(unsigned int num_entries)</span>
 static int
 map_ldt_struct(struct mm_struct *mm, struct ldt_struct *ldt, int slot)
 {
<span class="p_del">-#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
<span class="p_del">-	bool is_vmalloc, had_top_level_entry;</span>
 	unsigned long va;
<span class="p_add">+	bool is_vmalloc;</span>
 	spinlock_t *ptl;
 	pgd_t *pgd;
 	int i;
<span class="p_chunk">@@ -131,13 +173,15 @@</span> <span class="p_context"> map_ldt_struct(struct mm_struct *mm, struct ldt_struct *ldt, int slot)</span>
 	 */
 	WARN_ON(ldt-&gt;slot != -1);
 
<span class="p_add">+	/* Check if the current mappings are sane */</span>
<span class="p_add">+	sanity_check_ldt_mapping(mm);</span>
<span class="p_add">+</span>
 	/*
 	 * Did we already have the top level entry allocated?  We can&#39;t
 	 * use pgd_none() for this because it doens&#39;t do anything on
 	 * 4-level page table kernels.
 	 */
 	pgd = pgd_offset(mm, LDT_BASE_ADDR);
<span class="p_del">-	had_top_level_entry = (pgd-&gt;pgd != 0);</span>
 
 	is_vmalloc = is_vmalloc_addr(ldt-&gt;entries);
 
<span class="p_chunk">@@ -168,35 +212,25 @@</span> <span class="p_context"> map_ldt_struct(struct mm_struct *mm, struct ldt_struct *ldt, int slot)</span>
 		pte_unmap_unlock(ptep, ptl);
 	}
 
<span class="p_del">-	if (mm-&gt;context.ldt) {</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * We already had an LDT.  The top-level entry should already</span>
<span class="p_del">-		 * have been allocated and synchronized with the usermode</span>
<span class="p_del">-		 * tables.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		WARN_ON(!had_top_level_entry);</span>
<span class="p_del">-		if (static_cpu_has(X86_FEATURE_PTI))</span>
<span class="p_del">-			WARN_ON(!kernel_to_user_pgdp(pgd)-&gt;pgd);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * This is the first time we&#39;re mapping an LDT for this process.</span>
<span class="p_del">-		 * Sync the pgd to the usermode tables.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		WARN_ON(had_top_level_entry);</span>
<span class="p_del">-		if (static_cpu_has(X86_FEATURE_PTI)) {</span>
<span class="p_del">-			WARN_ON(kernel_to_user_pgdp(pgd)-&gt;pgd);</span>
<span class="p_del">-			set_pgd(kernel_to_user_pgdp(pgd), *pgd);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/* Propagate LDT mapping to the user page-table */</span>
<span class="p_add">+	map_ldt_struct_to_user(mm);</span>
 
 	va = (unsigned long)ldt_slot_va(slot);
 	flush_tlb_mm_range(mm, va, va + LDT_SLOT_STRIDE, 0);
 
 	ldt-&gt;slot = slot;
<span class="p_del">-#endif</span>
 	return 0;
 }
 
<span class="p_add">+#else /* !CONFIG_PAGE_TABLE_ISOLATION */</span>
<span class="p_add">+</span>
<span class="p_add">+static int</span>
<span class="p_add">+map_ldt_struct(struct mm_struct *mm, struct ldt_struct *ldt, int slot)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_PAGE_TABLE_ISOLATION */</span>
<span class="p_add">+</span>
 static void free_ldt_pgtables(struct mm_struct *mm)
 {
 #ifdef CONFIG_PAGE_TABLE_ISOLATION

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



