
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/idt: load idt early in start_secondary - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/idt: load idt early in start_secondary</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150051">Chunyu Hu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 27, 2017, 2:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1511792499-4073-1-git-send-email-chuhu@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10076963/mbox/"
   >mbox</a>
|
   <a href="/patch/10076963/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10076963/">/patch/10076963/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D8DB56028E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 27 Nov 2017 14:21:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C9D1428EAB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 27 Nov 2017 14:21:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BC86128EAC; Mon, 27 Nov 2017 14:21:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6C4C828EAA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 27 Nov 2017 14:21:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752589AbdK0OVs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 27 Nov 2017 09:21:48 -0500
Received: from mx1.redhat.com ([209.132.183.28]:38512 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751311AbdK0OVp (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 27 Nov 2017 09:21:45 -0500
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 6C6D38123D;
	Mon, 27 Nov 2017 14:21:45 +0000 (UTC)
Received: from dhcp-12-107.nay.redhat.com (dhcp-12-107.nay.redhat.com
	[10.66.12.107])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id C37A6600D5;
	Mon, 27 Nov 2017 14:21:42 +0000 (UTC)
From: Chunyu Hu &lt;chuhu@redhat.com&gt;
To: tglx@linutronix.de
Cc: mingo@kernel.org, hpa@zytor.com, peterz@infradead.org,
	luto@kernel.org, bp@alien8.de, rostedt@goodmis.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH] x86/idt: load idt early in start_secondary
Date: Mon, 27 Nov 2017 22:21:39 +0800
Message-Id: &lt;1511792499-4073-1-git-send-email-chuhu@redhat.com&gt;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.25]);
	Mon, 27 Nov 2017 14:21:45 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150051">Chunyu Hu</a> - Nov. 27, 2017, 2:21 p.m.</div>
<pre class="content">
For ap, idt is first loaded in cpu_init() with load_current_idt(),
that is to say, no exception can be handled before there. And then
the idt_table has been completed by the bp.

While there are some WARNs which needs the UD exception handling
in the early boot code might be triggered when something uexpected
happens during boot. In that case, cpu would fail to boot as the
exception can&#39;t be handled. A WARNing during boot is not usually
meaning the system could not boot.

One use case is when ftrace=function is setup in kernel cmdline, the
ftrace callback function will be called for every traced function.
And in my case, the first traced function is load_ucode_ap. And there
are WARN()s in function trace callback handling, it failed to reboot
as one of the WARN()s is triggered before load_current_idt() executed.

To make WARN()s can work earlier to ap, we load the idt_table early
in start_secondary, and keep the second time idt load in cpu_init,
as there is a load_ucode_ap() there.
<span class="signed-off-by">
Signed-off-by: Chunyu Hu &lt;chuhu@redhat.com&gt;</span>
---
 arch/x86/kernel/smpboot.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 28, 2017, 3:41 a.m.</div>
<pre class="content">
On Mon, Nov 27, 2017 at 6:21 AM, Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:
<span class="quote">&gt; For ap, idt is first loaded in cpu_init() with load_current_idt(),</span>
<span class="quote">&gt; that is to say, no exception can be handled before there. And then</span>
<span class="quote">&gt; the idt_table has been completed by the bp.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; While there are some WARNs which needs the UD exception handling</span>
<span class="quote">&gt; in the early boot code might be triggered when something uexpected</span>
<span class="quote">&gt; happens during boot. In that case, cpu would fail to boot as the</span>
<span class="quote">&gt; exception can&#39;t be handled. A WARNing during boot is not usually</span>
<span class="quote">&gt; meaning the system could not boot.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; One use case is when ftrace=function is setup in kernel cmdline, the</span>
<span class="quote">&gt; ftrace callback function will be called for every traced function.</span>
<span class="quote">&gt; And in my case, the first traced function is load_ucode_ap. And there</span>
<span class="quote">&gt; are WARN()s in function trace callback handling, it failed to reboot</span>
<span class="quote">&gt; as one of the WARN()s is triggered before load_current_idt() executed.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; To make WARN()s can work earlier to ap, we load the idt_table early</span>
<span class="quote">&gt; in start_secondary, and keep the second time idt load in cpu_init,</span>
<span class="quote">&gt; as there is a load_ucode_ap() there.</span>
<span class="reviewed-by">
Reviewed-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>

Except that this is presumably missing a Cc: stable.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150051">Chunyu Hu</a> - Nov. 28, 2017, 4:57 a.m.</div>
<pre class="content">
----- Original Message -----
<span class="quote">&gt; From: &quot;Andy Lutomirski&quot; &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; To: &quot;Chunyu Hu&quot; &lt;chuhu@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Thomas Gleixner&quot; &lt;tglx@linutronix.de&gt;, &quot;Ingo Molnar&quot; &lt;mingo@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,</span>
<span class="quote">&gt; &quot;Peter Zijlstra&quot; &lt;peterz@infradead.org&gt;, &quot;Andrew Lutomirski&quot; &lt;luto@kernel.org&gt;, &quot;Borislav Petkov&quot; &lt;bp@alien8.de&gt;,</span>
<span class="quote">&gt; &quot;Steven Rostedt&quot; &lt;rostedt@goodmis.org&gt;, linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Sent: Tuesday, November 28, 2017 11:41:20 AM</span>
<span class="quote">&gt; Subject: Re: [PATCH] x86/idt: load idt early in start_secondary</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Mon, Nov 27, 2017 at 6:21 AM, Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:</span>
<span class="quote">&gt; &gt; For ap, idt is first loaded in cpu_init() with load_current_idt(),</span>
<span class="quote">&gt; &gt; that is to say, no exception can be handled before there. And then</span>
<span class="quote">&gt; &gt; the idt_table has been completed by the bp.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; While there are some WARNs which needs the UD exception handling</span>
<span class="quote">&gt; &gt; in the early boot code might be triggered when something uexpected</span>
<span class="quote">&gt; &gt; happens during boot. In that case, cpu would fail to boot as the</span>
<span class="quote">&gt; &gt; exception can&#39;t be handled. A WARNing during boot is not usually</span>
<span class="quote">&gt; &gt; meaning the system could not boot.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; One use case is when ftrace=function is setup in kernel cmdline, the</span>
<span class="quote">&gt; &gt; ftrace callback function will be called for every traced function.</span>
<span class="quote">&gt; &gt; And in my case, the first traced function is load_ucode_ap. And there</span>
<span class="quote">&gt; &gt; are WARN()s in function trace callback handling, it failed to reboot</span>
<span class="quote">&gt; &gt; as one of the WARN()s is triggered before load_current_idt() executed.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; To make WARN()s can work earlier to ap, we load the idt_table early</span>
<span class="quote">&gt; &gt; in start_secondary, and keep the second time idt load in cpu_init,</span>
<span class="quote">&gt; &gt; as there is a load_ucode_ap() there.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Except that this is presumably missing a Cc: stable.</span>

Do I need to resend this origin version and Cc stable?
<span class="quote">
&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 28, 2017, 5:28 a.m.</div>
<pre class="content">
On Mon, Nov 27, 2017 at 8:57 PM, Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ----- Original Message -----</span>
<span class="quote">&gt;&gt; From: &quot;Andy Lutomirski&quot; &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt; To: &quot;Chunyu Hu&quot; &lt;chuhu@redhat.com&gt;</span>
<span class="quote">&gt;&gt; Cc: &quot;Thomas Gleixner&quot; &lt;tglx@linutronix.de&gt;, &quot;Ingo Molnar&quot; &lt;mingo@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,</span>
<span class="quote">&gt;&gt; &quot;Peter Zijlstra&quot; &lt;peterz@infradead.org&gt;, &quot;Andrew Lutomirski&quot; &lt;luto@kernel.org&gt;, &quot;Borislav Petkov&quot; &lt;bp@alien8.de&gt;,</span>
<span class="quote">&gt;&gt; &quot;Steven Rostedt&quot; &lt;rostedt@goodmis.org&gt;, linux-kernel@vger.kernel.org</span>
<span class="quote">&gt;&gt; Sent: Tuesday, November 28, 2017 11:41:20 AM</span>
<span class="quote">&gt;&gt; Subject: Re: [PATCH] x86/idt: load idt early in start_secondary</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Mon, Nov 27, 2017 at 6:21 AM, Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; For ap, idt is first loaded in cpu_init() with load_current_idt(),</span>
<span class="quote">&gt;&gt; &gt; that is to say, no exception can be handled before there. And then</span>
<span class="quote">&gt;&gt; &gt; the idt_table has been completed by the bp.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; While there are some WARNs which needs the UD exception handling</span>
<span class="quote">&gt;&gt; &gt; in the early boot code might be triggered when something uexpected</span>
<span class="quote">&gt;&gt; &gt; happens during boot. In that case, cpu would fail to boot as the</span>
<span class="quote">&gt;&gt; &gt; exception can&#39;t be handled. A WARNing during boot is not usually</span>
<span class="quote">&gt;&gt; &gt; meaning the system could not boot.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; One use case is when ftrace=function is setup in kernel cmdline, the</span>
<span class="quote">&gt;&gt; &gt; ftrace callback function will be called for every traced function.</span>
<span class="quote">&gt;&gt; &gt; And in my case, the first traced function is load_ucode_ap. And there</span>
<span class="quote">&gt;&gt; &gt; are WARN()s in function trace callback handling, it failed to reboot</span>
<span class="quote">&gt;&gt; &gt; as one of the WARN()s is triggered before load_current_idt() executed.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; To make WARN()s can work earlier to ap, we load the idt_table early</span>
<span class="quote">&gt;&gt; &gt; in start_secondary, and keep the second time idt load in cpu_init,</span>
<span class="quote">&gt;&gt; &gt; as there is a load_ucode_ap() there.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Reviewed-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Except that this is presumably missing a Cc: stable.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Do I need to resend this origin version and Cc stable?</span>

I imagine that Ingo can add it.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Chunyu Hu</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 28, 2017, 7:17 a.m.</div>
<pre class="content">
On Mon, 27 Nov 2017, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Nov 27, 2017 at 8:57 PM, Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; To make WARN()s can work earlier to ap, we load the idt_table early</span>
<span class="quote">&gt; &gt;&gt; &gt; in start_secondary, and keep the second time idt load in cpu_init,</span>
<span class="quote">&gt; &gt;&gt; &gt; as there is a load_ucode_ap() there.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Reviewed-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Except that this is presumably missing a Cc: stable.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Do I need to resend this origin version and Cc stable?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I imagine that Ingo can add it.</span>

Done.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - Nov. 28, 2017, 2:56 p.m.</div>
<pre class="content">
On Mon, 27 Nov 2017 23:57:36 -0500 (EST)
Chunyu Hu &lt;chuhu@redhat.com&gt; wrote:
<span class="quote">
&gt; &gt; Except that this is presumably missing a Cc: stable.  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Do I need to resend this origin version and Cc stable?</span>

No. Adding a &quot;Cc: stable@vger.kernel.org&quot; to the patch (and really to
the change log of the commit) will flag the stable maintainers to
backport the patch to the stable trees when it gets accepted by Linus.

-- Steve
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c</span>
<span class="p_header">index 3d01df7..05a97d5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -237,7 +237,7 @@</span> <span class="p_context"> static void notrace start_secondary(void *unused)</span>
 	load_cr3(swapper_pg_dir);
 	__flush_tlb_all();
 #endif
<span class="p_del">-</span>
<span class="p_add">+	load_current_idt();</span>
 	cpu_init();
 	x86_cpuinit.early_percpu_clock_init();
 	preempt_disable();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



