
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,10/10] iommu/exynos: Add proper runtime pm support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,10/10] iommu/exynos: Add proper runtime pm support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2061">Marek Szyprowski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 17, 2016, 6:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1466144820-6286-11-git-send-email-m.szyprowski@samsung.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9182585/mbox/"
   >mbox</a>
|
   <a href="/patch/9182585/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9182585/">/patch/9182585/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	ECA216075F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Jun 2016 06:27:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DB25D27EED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Jun 2016 06:27:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CFCFA2839C; Fri, 17 Jun 2016 06:27:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B252127EED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Jun 2016 06:27:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932893AbcFQG11 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 17 Jun 2016 02:27:27 -0400
Received: from mailout3.w1.samsung.com ([210.118.77.13]:57146 &quot;EHLO
	mailout3.w1.samsung.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755169AbcFQG1X (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 17 Jun 2016 02:27:23 -0400
Received: from eucpsbgm2.samsung.com (unknown [203.254.199.245])
	by mailout3.w1.samsung.com
	(Oracle Communications Messaging Server 7.0.5.31.0 64bit (built May 5
	2014))
	with ESMTP id &lt;0O8W00JQYKLG0390@mailout3.w1.samsung.com&gt;; Fri,
	17 Jun 2016 07:27:17 +0100 (BST)
X-AuditID: cbfec7f5-f792a6d000001302-34-57639844cf26
Received: from eusync4.samsung.com ( [203.254.199.214])
	by eucpsbgm2.samsung.com (EUCPMTA) with SMTP id 43.6F.04866.44893675;
	Fri, 17 Jun 2016 07:27:16 +0100 (BST)
Received: from AMDC2765.digital.local ([106.116.147.25])
	by eusync4.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit (built May  5 2014))
	with ESMTPA id &lt;0O8W00HUZKL21910@eusync4.samsung.com&gt;; Fri,
	17 Jun 2016 07:27:16 +0100 (BST)
From: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;
To: linux-pm@vger.kernel.org, linux-kernel@vger.kernel.org,
	iommu@lists.linux-foundation.org, linux-samsung-soc@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org
Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;,
	Inki Dae &lt;inki.dae@samsung.com&gt;, Kukjin Kim &lt;kgene@kernel.org&gt;,
	Krzysztof Kozlowski &lt;k.kozlowski@samsung.com&gt;,
	Bartlomiej Zolnierkiewicz &lt;b.zolnierkie@samsung.com&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rjw@rjwysocki.net&gt;,
	Ulf Hansson &lt;ulf.hansson@linaro.org&gt;, Mark Brown &lt;broonie@kernel.org&gt;,
	Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
Subject: [PATCH v2 10/10] iommu/exynos: Add proper runtime pm support
Date: Fri, 17 Jun 2016 08:27:00 +0200
Message-id: &lt;1466144820-6286-11-git-send-email-m.szyprowski@samsung.com&gt;
X-Mailer: git-send-email 1.9.1
In-reply-to: &lt;1466144820-6286-1-git-send-email-m.szyprowski@samsung.com&gt;
References: &lt;1466144820-6286-1-git-send-email-m.szyprowski@samsung.com&gt;
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFjrNLMWRmVeSWpSXmKPExsVy+t/xa7ouM5LDDR4fM7bYOGM9q8XUh0/Y
	LJoXr2ezmHR/AovFgv3WFp2zN7BbvH5haNH/+DWzxabH11gtLu+aw2bxufcIo8WM8/uYLNYe
	uctuceb0JVaL42vDHfg9nhycx+SxaVUnm8eda3vYPPbPXcPusXlJvcfkG8sZPbZcbWfx6Nuy
	itHj8ya5AM4oLpuU1JzMstQifbsEroyPO+6wFlyMqJjYrdbA+MOji5GTQ0LAROLF5c/MELaY
	xIV769m6GLk4hASWMkos7d3GCJIQEmhikji+LBfEZhMwlOh62wVWJCKwklFi2559zCAOs8BC
	ZonmNc0sXYwcHMICrhIfHviDNLAIqEp0PFnCDmLzCnhInDp4nRFim5zEyWOTWUFsTqD4i1s/
	WCCWuUvsOnyKeQIj7wJGhlWMoqmlyQXFSem5RnrFibnFpXnpesn5uZsYIUH8dQfj0mNWhxgF
	OBiVeHhXiCaHC7EmlhVX5h5ilOBgVhLhLZkEFOJNSaysSi3Kjy8qzUktPsQozcGiJM47c9f7
	ECGB9MSS1OzU1ILUIpgsEwenVAOjuf+U0g/XWc4dzk9cNGPS/fa595Q3T9iz5/m3DPdyv17T
	XeaJSVfePXjmHbvj45oUkRi/T32CHpKn097vXNtRyhD0xeD/31DecCcjo9DXc5QtyuYqvBNN
	bP1QFn9Zc7eDpOdBya+ZrwPrM5iZOB0c72T9E1l9/AqbQ9H7Xf5XuqVOLi+XcYhWYinOSDTU
	Yi4qTgQAxrex5l4CAAA=
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2061">Marek Szyprowski</a> - June 17, 2016, 6:27 a.m.</div>
<pre class="content">
This patch uses recently introduced device links to track the runtime pm
state of the master&#39;s device. This way each SYSMMU controller is runtime
active its master&#39;s device is active and can save/restore its state
instead of being enabled all the time. This way SYSMMU controllers no
longer prevents respective power domains to be turned off when master&#39;s
device is not used.
<span class="signed-off-by">
Signed-off-by: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;</span>
---
 drivers/iommu/exynos-iommu.c | 218 ++++++++++++++++++++-----------------------
 1 file changed, 99 insertions(+), 119 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/exynos-iommu.c b/drivers/iommu/exynos-iommu.c</span>
<span class="p_header">index 9d1a14f88891..80b7f1e7268c 100644</span>
<span class="p_header">--- a/drivers/iommu/exynos-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/exynos-iommu.c</span>
<span class="p_chunk">@@ -233,8 +233,8 @@</span> <span class="p_context"> struct sysmmu_drvdata {</span>
 	struct clk *aclk;		/* SYSMMU&#39;s aclk clock */
 	struct clk *pclk;		/* SYSMMU&#39;s pclk clock */
 	struct clk *clk_master;		/* master&#39;s device clock */
<span class="p_del">-	int activations;		/* number of calls to sysmmu_enable */</span>
 	spinlock_t lock;		/* lock for modyfying state */
<span class="p_add">+	int active;			/* current status */</span>
 	struct exynos_iommu_domain *domain; /* domain we belong to */
 	struct list_head domain_node;	/* node for domain clients list */
 	struct list_head owner_node;	/* node for owner controllers list */
<span class="p_chunk">@@ -247,25 +247,6 @@</span> <span class="p_context"> static struct exynos_iommu_domain *to_exynos_domain(struct iommu_domain *dom)</span>
 	return container_of(dom, struct exynos_iommu_domain, domain);
 }
 
<span class="p_del">-static bool set_sysmmu_active(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* return true if the System MMU was not active previously</span>
<span class="p_del">-	   and it needs to be initialized */</span>
<span class="p_del">-	return ++data-&gt;activations == 1;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool set_sysmmu_inactive(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* return true if the System MMU is needed to be disabled */</span>
<span class="p_del">-	BUG_ON(data-&gt;activations &lt; 1);</span>
<span class="p_del">-	return --data-&gt;activations == 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool is_sysmmu_active(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return data-&gt;activations &gt; 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void sysmmu_unblock(struct sysmmu_drvdata *data)
 {
 	writel(CTRL_ENABLE, data-&gt;sfrbase + REG_MMU_CTRL);
<span class="p_chunk">@@ -384,7 +365,7 @@</span> <span class="p_context"> static irqreturn_t exynos_sysmmu_irq(int irq, void *dev_id)</span>
 	unsigned short reg_status, reg_clear;
 	int ret = -ENOSYS;
 
<span class="p_del">-	WARN_ON(!is_sysmmu_active(data));</span>
<span class="p_add">+	WARN_ON(!data-&gt;active);</span>
 
 	if (MMU_MAJ_VER(data-&gt;version) &lt; 5) {
 		reg_status = REG_INT_STATUS;
<span class="p_chunk">@@ -430,7 +411,7 @@</span> <span class="p_context"> static irqreturn_t exynos_sysmmu_irq(int irq, void *dev_id)</span>
 	return IRQ_HANDLED;
 }
 
<span class="p_del">-static void __sysmmu_disable_nocount(struct sysmmu_drvdata *data)</span>
<span class="p_add">+static void __sysmmu_disable(struct sysmmu_drvdata *data)</span>
 {
 	clk_enable(data-&gt;clk_master);
 
<span class="p_chunk">@@ -440,32 +421,6 @@</span> <span class="p_context"> static void __sysmmu_disable_nocount(struct sysmmu_drvdata *data)</span>
 	__sysmmu_disable_clocks(data);
 }
 
<span class="p_del">-static bool __sysmmu_disable(struct sysmmu_drvdata *data)</span>
<span class="p_del">-{</span>
<span class="p_del">-	bool disabled;</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	disabled = set_sysmmu_inactive(data);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (disabled) {</span>
<span class="p_del">-		data-&gt;pgtable = 0;</span>
<span class="p_del">-		data-&gt;domain = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-		__sysmmu_disable_nocount(data);</span>
<span class="p_del">-</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;Disabled\n&quot;);</span>
<span class="p_del">-	} else  {</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;%d times left to disable\n&quot;,</span>
<span class="p_del">-					data-&gt;activations);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	return disabled;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void __sysmmu_init_config(struct sysmmu_drvdata *data)
 {
 	unsigned int cfg;
<span class="p_chunk">@@ -480,7 +435,7 @@</span> <span class="p_context"> static void __sysmmu_init_config(struct sysmmu_drvdata *data)</span>
 	writel(cfg, data-&gt;sfrbase + REG_MMU_CFG);
 }
 
<span class="p_del">-static void __sysmmu_enable_nocount(struct sysmmu_drvdata *data)</span>
<span class="p_add">+static void __sysmmu_enable(struct sysmmu_drvdata *data)</span>
 {
 	__sysmmu_enable_clocks(data);
 
<span class="p_chunk">@@ -501,34 +456,6 @@</span> <span class="p_context"> static void __sysmmu_enable_nocount(struct sysmmu_drvdata *data)</span>
 	clk_disable(data-&gt;clk_master);
 }
 
<span class="p_del">-static int __sysmmu_enable(struct sysmmu_drvdata *data, phys_addr_t pgtable,</span>
<span class="p_del">-			   struct exynos_iommu_domain *domain)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int ret = 0;</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-	if (set_sysmmu_active(data)) {</span>
<span class="p_del">-		data-&gt;pgtable = pgtable;</span>
<span class="p_del">-		data-&gt;domain = domain;</span>
<span class="p_del">-</span>
<span class="p_del">-		__sysmmu_enable_nocount(data);</span>
<span class="p_del">-</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;Enabled\n&quot;);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		ret = (pgtable == data-&gt;pgtable) ? 1 : -EBUSY;</span>
<span class="p_del">-</span>
<span class="p_del">-		dev_dbg(data-&gt;sysmmu, &quot;already enabled\n&quot;);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (WARN_ON(ret &lt; 0))</span>
<span class="p_del">-		set_sysmmu_inactive(data); /* decrement count */</span>
<span class="p_del">-</span>
<span class="p_del">-	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_del">-</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void sysmmu_tlb_invalidate_flpdcache(struct sysmmu_drvdata *data,
 					    sysmmu_iova_t iova)
 {
<span class="p_chunk">@@ -536,7 +463,7 @@</span> <span class="p_context"> static void sysmmu_tlb_invalidate_flpdcache(struct sysmmu_drvdata *data,</span>
 
 
 	spin_lock_irqsave(&amp;data-&gt;lock, flags);
<span class="p_del">-	if (is_sysmmu_active(data) &amp;&amp; data-&gt;version &gt;= MAKE_MMU_VER(3, 3)) {</span>
<span class="p_add">+	if (data-&gt;active &amp;&amp; data-&gt;version &gt;= MAKE_MMU_VER(3, 3)) {</span>
 		clk_enable(data-&gt;clk_master);
 		__sysmmu_tlb_invalidate_entry(data, iova, 1);
 		clk_disable(data-&gt;clk_master);
<span class="p_chunk">@@ -551,7 +478,7 @@</span> <span class="p_context"> static void sysmmu_tlb_invalidate_entry(struct sysmmu_drvdata *data,</span>
 	unsigned long flags;
 
 	spin_lock_irqsave(&amp;data-&gt;lock, flags);
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_add">+	if (data-&gt;active) {</span>
 		unsigned int num_inv = 1;
 
 		clk_enable(data-&gt;clk_master);
<span class="p_chunk">@@ -652,40 +579,78 @@</span> <span class="p_context"> static int __init exynos_sysmmu_probe(struct platform_device *pdev)</span>
 	}
 
 	pm_runtime_enable(dev);
<span class="p_del">-</span>
 	of_iommu_set_ops(dev-&gt;of_node, &amp;exynos_iommu_ops);
 
 	return 0;
 }
 
<span class="p_del">-#ifdef CONFIG_PM_SLEEP</span>
<span class="p_add">+static int exynos_sysmmu_runtime_suspend(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct sysmmu_drvdata *data = dev_get_drvdata(dev);</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+	if (data-&gt;master) {</span>
<span class="p_add">+		dev_dbg(data-&gt;sysmmu, &quot;runtime pm: saving state\n&quot;);</span>
<span class="p_add">+		__sysmmu_disable(data);</span>
<span class="p_add">+		data-&gt;active = false;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int exynos_sysmmu_runtime_resume(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct sysmmu_drvdata *data = dev_get_drvdata(dev);</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+	if (data-&gt;master) {</span>
<span class="p_add">+		dev_dbg(data-&gt;sysmmu, &quot;runtime pm: restoring state\n&quot;);</span>
<span class="p_add">+		__sysmmu_enable(data);</span>
<span class="p_add">+		data-&gt;active = true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int exynos_sysmmu_suspend(struct device *dev)
 {
 	struct sysmmu_drvdata *data = dev_get_drvdata(dev);
<span class="p_add">+	unsigned long flags;</span>
 
<span class="p_del">-	dev_dbg(dev, &quot;suspend\n&quot;);</span>
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_del">-		__sysmmu_disable_nocount(data);</span>
<span class="p_del">-		pm_runtime_put(dev);</span>
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+	if (data-&gt;active) {</span>
<span class="p_add">+		dev_dbg(data-&gt;sysmmu, &quot;saving state\n&quot;);</span>
<span class="p_add">+		__sysmmu_disable(data);</span>
 	}
<span class="p_add">+	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+</span>
 	return 0;
 }
 
 static int exynos_sysmmu_resume(struct device *dev)
 {
 	struct sysmmu_drvdata *data = dev_get_drvdata(dev);
<span class="p_add">+	unsigned long flags;</span>
 
<span class="p_del">-	dev_dbg(dev, &quot;resume\n&quot;);</span>
<span class="p_del">-	if (is_sysmmu_active(data)) {</span>
<span class="p_del">-		pm_runtime_get_sync(dev);</span>
<span class="p_del">-		__sysmmu_enable_nocount(data);</span>
<span class="p_add">+	spin_lock_irqsave(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+	if (data-&gt;active) {</span>
<span class="p_add">+		dev_dbg(data-&gt;sysmmu, &quot;restoring state\n&quot;);</span>
<span class="p_add">+		__sysmmu_enable(data);</span>
 	}
<span class="p_add">+	spin_unlock_irqrestore(&amp;data-&gt;lock, flags);</span>
<span class="p_add">+</span>
 	return 0;
 }
<span class="p_del">-#endif</span>
 
 static const struct dev_pm_ops sysmmu_pm_ops = {
<span class="p_del">-	SET_LATE_SYSTEM_SLEEP_PM_OPS(exynos_sysmmu_suspend, exynos_sysmmu_resume)</span>
<span class="p_add">+	SET_RUNTIME_PM_OPS(exynos_sysmmu_runtime_suspend,</span>
<span class="p_add">+			   exynos_sysmmu_runtime_resume, NULL)</span>
<span class="p_add">+	SET_LATE_SYSTEM_SLEEP_PM_OPS(exynos_sysmmu_suspend,</span>
<span class="p_add">+				     exynos_sysmmu_resume)</span>
 };
 
 static const struct of_device_id sysmmu_of_match[] __initconst = {
<span class="p_chunk">@@ -789,9 +754,16 @@</span> <span class="p_context"> static void exynos_iommu_domain_free(struct iommu_domain *iommu_domain)</span>
 	spin_lock_irqsave(&amp;domain-&gt;lock, flags);
 
 	list_for_each_entry_safe(data, next, &amp;domain-&gt;clients, domain_node) {
<span class="p_del">-		if (__sysmmu_disable(data))</span>
<span class="p_del">-			data-&gt;master = NULL;</span>
<span class="p_add">+		spin_lock(&amp;data-&gt;lock);</span>
<span class="p_add">+		if (WARN_ON(data-&gt;active)) {</span>
<span class="p_add">+			__sysmmu_disable(data);</span>
<span class="p_add">+			data-&gt;active = false;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		data-&gt;master = NULL;</span>
<span class="p_add">+		data-&gt;pgtable = 0;</span>
<span class="p_add">+		data-&gt;domain = NULL;</span>
 		list_del_init(&amp;data-&gt;domain_node);
<span class="p_add">+		spin_unlock(&amp;data-&gt;lock);</span>
 	}
 
 	spin_unlock_irqrestore(&amp;domain-&gt;lock, flags);
<span class="p_chunk">@@ -832,18 +804,22 @@</span> <span class="p_context"> static void exynos_iommu_detach_device(struct iommu_domain *iommu_domain,</span>
 
 	spin_lock_irqsave(&amp;domain-&gt;lock, flags);
 	list_for_each_entry_safe(data, next, &amp;domain-&gt;clients, domain_node) {
<span class="p_add">+		spin_lock(&amp;data-&gt;lock);</span>
 		if (data-&gt;master == dev) {
<span class="p_del">-			if (__sysmmu_disable(data)) {</span>
<span class="p_del">-				data-&gt;master = NULL;</span>
<span class="p_del">-				list_del_init(&amp;data-&gt;domain_node);</span>
<span class="p_del">-			}</span>
<span class="p_del">-			pm_runtime_put(data-&gt;sysmmu);</span>
 			found = true;
<span class="p_add">+			if (data-&gt;active) {</span>
<span class="p_add">+				__sysmmu_disable(data);</span>
<span class="p_add">+				data-&gt;active = false;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			data-&gt;master = NULL;</span>
<span class="p_add">+			data-&gt;pgtable = 0;</span>
<span class="p_add">+			data-&gt;domain = NULL;</span>
<span class="p_add">+			list_del_init(&amp;data-&gt;domain_node);</span>
 		}
<span class="p_add">+		spin_unlock(&amp;data-&gt;lock);</span>
 	}
<span class="p_del">-	spin_unlock_irqrestore(&amp;domain-&gt;lock, flags);</span>
<span class="p_del">-</span>
 	owner-&gt;domain = NULL;
<span class="p_add">+	spin_unlock_irqrestore(&amp;domain-&gt;lock, flags);</span>
 
 	if (found)
 		dev_dbg(dev, &quot;%s: Detached IOMMU with pgtable %pa\n&quot;,
<span class="p_chunk">@@ -860,7 +836,6 @@</span> <span class="p_context"> static int exynos_iommu_attach_device(struct iommu_domain *iommu_domain,</span>
 	struct sysmmu_drvdata *data;
 	phys_addr_t pagetable = virt_to_phys(domain-&gt;pgtable);
 	unsigned long flags;
<span class="p_del">-	int ret = -ENODEV;</span>
 
 	if (!has_sysmmu(dev))
 		return -ENODEV;
<span class="p_chunk">@@ -868,29 +843,26 @@</span> <span class="p_context"> static int exynos_iommu_attach_device(struct iommu_domain *iommu_domain,</span>
 	if (owner-&gt;domain)
 		exynos_iommu_detach_device(owner-&gt;domain, dev);
 
<span class="p_add">+	spin_lock_irqsave(&amp;domain-&gt;lock, flags);</span>
 	list_for_each_entry(data, &amp;owner-&gt;controllers, owner_node) {
<span class="p_del">-		pm_runtime_get_sync(data-&gt;sysmmu);</span>
<span class="p_del">-		ret = __sysmmu_enable(data, pagetable, domain);</span>
<span class="p_del">-		if (ret &gt;= 0) {</span>
<span class="p_del">-			data-&gt;master = dev;</span>
<span class="p_del">-</span>
<span class="p_del">-			spin_lock_irqsave(&amp;domain-&gt;lock, flags);</span>
<span class="p_del">-			list_add_tail(&amp;data-&gt;domain_node, &amp;domain-&gt;clients);</span>
<span class="p_del">-			spin_unlock_irqrestore(&amp;domain-&gt;lock, flags);</span>
<span class="p_add">+		spin_lock(&amp;data-&gt;lock);</span>
<span class="p_add">+		data-&gt;master = dev;</span>
<span class="p_add">+		data-&gt;pgtable = pagetable;</span>
<span class="p_add">+		data-&gt;domain = domain;</span>
<span class="p_add">+		list_add_tail(&amp;data-&gt;domain_node, &amp;domain-&gt;clients);</span>
<span class="p_add">+		if (pm_runtime_active(data-&gt;sysmmu)) {</span>
<span class="p_add">+			__sysmmu_enable(data);</span>
<span class="p_add">+			data-&gt;active = true;</span>
 		}
<span class="p_add">+		spin_unlock(&amp;data-&gt;lock);</span>
 	}
<span class="p_del">-</span>
<span class="p_del">-	if (ret &lt; 0) {</span>
<span class="p_del">-		dev_err(dev, &quot;%s: Failed to attach IOMMU with pgtable %pa\n&quot;,</span>
<span class="p_del">-					__func__, &amp;pagetable);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	owner-&gt;domain = iommu_domain;
<span class="p_del">-	dev_dbg(dev, &quot;%s: Attached IOMMU with pgtable %pa %s\n&quot;,</span>
<span class="p_del">-		__func__, &amp;pagetable, (ret == 0) ? &quot;&quot; : &quot;, again&quot;);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;domain-&gt;lock, flags);</span>
 
<span class="p_del">-	return ret;</span>
<span class="p_add">+	dev_dbg(dev, &quot;%s: Attached IOMMU with pgtable %pa\n&quot;,</span>
<span class="p_add">+		__func__, &amp;pagetable);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
 }
 
 static sysmmu_pte_t *alloc_lv2entry(struct exynos_iommu_domain *domain,
<span class="p_chunk">@@ -1265,6 +1237,14 @@</span> <span class="p_context"> static int exynos_iommu_of_xlate(struct device *dev,</span>
 	}
 
 	list_add_tail(&amp;data-&gt;owner_node, &amp;owner-&gt;controllers);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * SYSMMU will be runtime enabled via device link (dependency) to its</span>
<span class="p_add">+	 * master device, so there are no direct calls to pm_runtime_get/put</span>
<span class="p_add">+	 * in this driver</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	device_link_add(dev, &amp;sysmmu-&gt;dev, DEVICE_LINK_PERSISTENT |</span>
<span class="p_add">+					   DEVICE_LINK_PM_RUNTIME);</span>
 	return 0;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



