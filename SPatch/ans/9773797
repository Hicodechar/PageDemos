
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[-mm] mm, hugetlb: schedule when potentially allocating many hugepages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [-mm] mm, hugetlb: schedule when potentially allocating many hugepages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=579">David Rientjes</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 8, 2017, 4:03 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.10.1706072102560.29060@chino.kir.corp.google.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9773797/mbox/"
   >mbox</a>
|
   <a href="/patch/9773797/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9773797/">/patch/9773797/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	070E0601C3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 04:03:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D9E55206AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 04:03:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CE75C22376; Thu,  8 Jun 2017 04:03:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 995EC206AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Jun 2017 04:03:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751092AbdFHEDl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Jun 2017 00:03:41 -0400
Received: from mail-pg0-f53.google.com ([74.125.83.53]:34670 &quot;EHLO
	mail-pg0-f53.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750716AbdFHEDj (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Jun 2017 00:03:39 -0400
Received: by mail-pg0-f53.google.com with SMTP id v18so11749974pgb.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 07 Jun 2017 21:03:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20161025;
	h=date:from:to:cc:subject:message-id:user-agent:mime-version;
	bh=F4R4qUu3BGR3dOIAJFkvpwxcNnocMLAeB4meFMkbYzw=;
	b=sA7hs6rH6dzEJcVYL89A+8VGAaY0Wy5wbBAo6xxaajXjOsmmTm/Xe/Z/vaCZk35KKY
	thSH1HgF9Cp5QcKfmgptmWjkhn8oaYyiVxyX9iq55bUzdLj/LUQyz0KO+tHrSWLMnoDL
	kifX9WBAZJA18TtIRTckExI5CkUeJiwsfInfYPP7AgHIPEr1+8hFfVPnG0X2kzlTrVxa
	HgyGiKVv2eY8lJsfEyTI2SjBsPC3l16uHy5cP7gm7w+OehHiEW/JkbVEH4Gnz+O5aUF9
	jRw9/tFqz0jSIZa5fJ69CfMlCFUlxm7rL9mz53u2VTCa29VQreK4vo/zTxeqCDEgawlB
	dcwA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:user-agent
	:mime-version;
	bh=F4R4qUu3BGR3dOIAJFkvpwxcNnocMLAeB4meFMkbYzw=;
	b=fjWgpUSALUfnBmhnQOyZltcZZPD39d86MsMt1a5K4sCy+2Of/m9yrq7OjsqZ+YftHR
	NGPhHJDRLYc0/HfRlX8xCHrfRdpQ8XxbfSBiWlFzR+ObpenyBecTGcfslZwmT/LIJrwi
	HLpXEb7j+HtKHF4riSFnWhMAs03oscNeGw+Uo1GAe2qGCDgfvUjY89ZMQVOU5JPwrwNh
	u204TdT+xt1sEwFm0uRQPoelAqHLu2s80sE12gVkF8ZIj9t7RhzGvC6XvHFJSt4jhVH3
	W11KLhsQmHp+1Vv8mLHQysp1H9REwPLhwrmPkSEp3WGfh2hFyOEMkKR4TfR/dMXLuhke
	UX6Q==
X-Gm-Message-State: AODbwcAaQ/Mk3Th23F3PALjXGQZ3s3yuGuc96U+naUFlnGppt7z7Xo0K
	+6mkXsL4pzLA4aYe
X-Received: by 10.84.210.194 with SMTP id a60mr22457697pli.17.1496894618654; 
	Wed, 07 Jun 2017 21:03:38 -0700 (PDT)
Received: from [2620:15c:17:3:a058:1fcb:f9a6:191e]
	([2620:15c:17:3:a058:1fcb:f9a6:191e])
	by smtp.gmail.com with ESMTPSA id
	i190sm5453679pfc.69.2017.06.07.21.03.37
	(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Wed, 07 Jun 2017 21:03:38 -0700 (PDT)
Date: Wed, 7 Jun 2017 21:03:37 -0700 (PDT)
From: David Rientjes &lt;rientjes@google.com&gt;
X-X-Sender: rientjes@chino.kir.corp.google.com
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org
Subject: [patch -mm] mm, hugetlb: schedule when potentially allocating many
	hugepages
Message-ID: &lt;alpine.DEB.2.10.1706072102560.29060@chino.kir.corp.google.com&gt;
User-Agent: Alpine 2.10 (DEB 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - June 8, 2017, 4:03 a.m.</div>
<pre class="content">
A few hugetlb allocators loop while calling the page allocator and can
potentially prevent rescheduling if the page allocator slowpath is not
utilized.

Conditionally schedule when large numbers of hugepages can be allocated.
<span class="signed-off-by">
Signed-off-by: David Rientjes &lt;rientjes@google.com&gt;</span>
---
 Based on -mm only to prevent merge conflicts with
 &quot;mm/hugetlb.c: warn the user when issues arise on boot due to hugepages&quot;

 mm/hugetlb.c | 3 +++
 1 file changed, 3 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 8, 2017, 4:31 a.m.</div>
<pre class="content">
On 06/07/2017 09:03 PM, David Rientjes wrote:
<span class="quote">&gt; A few hugetlb allocators loop while calling the page allocator and can</span>
<span class="quote">&gt; potentially prevent rescheduling if the page allocator slowpath is not</span>
<span class="quote">&gt; utilized.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Conditionally schedule when large numbers of hugepages can be allocated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  Based on -mm only to prevent merge conflicts with</span>
<span class="quote">&gt;  &quot;mm/hugetlb.c: warn the user when issues arise on boot due to hugepages&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  mm/hugetlb.c | 3 +++</span>
<span class="quote">&gt;  1 file changed, 3 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -1754,6 +1754,7 @@ static int gather_surplus_pages(struct hstate *h, int delta)</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		list_add(&amp;page-&gt;lru, &amp;surplus_list);</span>
<span class="quote">&gt; +		cond_resched();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	allocated += i;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -2222,6 +2223,7 @@ static void __init hugetlb_hstate_alloc_pages(struct hstate *h)</span>
<span class="quote">&gt;  		} else if (!alloc_fresh_huge_page(h,</span>
<span class="quote">&gt;  					 &amp;node_states[N_MEMORY]))</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt; +		cond_resched();</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	if (i &lt; h-&gt;max_huge_pages) {</span>
<span class="quote">&gt;  		char buf[32];</span>
<span class="quote">&gt; @@ -2364,6 +2366,7 @@ static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,</span>
<span class="quote">&gt;  			ret = alloc_fresh_gigantic_page(h, nodes_allowed);</span>
<span class="quote">&gt;  		else</span>
<span class="quote">&gt;  			ret = alloc_fresh_huge_page(h, nodes_allowed);</span>
<span class="quote">&gt; +		cond_resched();</span>

Are not the following lines immediately before the above huge page allocation
in set_max_huge_pages, or am I looking at an incorrect version of the file?

		/* yield cpu to avoid soft lockup */
		cond_resched();
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - June 9, 2017, 10:35 p.m.</div>
<pre class="content">
On Wed, 7 Jun 2017, Mike Kravetz wrote:
<span class="quote">
&gt; &gt; @@ -2364,6 +2366,7 @@ static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,</span>
<span class="quote">&gt; &gt;  			ret = alloc_fresh_gigantic_page(h, nodes_allowed);</span>
<span class="quote">&gt; &gt;  		else</span>
<span class="quote">&gt; &gt;  			ret = alloc_fresh_huge_page(h, nodes_allowed);</span>
<span class="quote">&gt; &gt; +		cond_resched();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Are not the following lines immediately before the above huge page allocation</span>
<span class="quote">&gt; in set_max_huge_pages, or am I looking at an incorrect version of the file?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 		/* yield cpu to avoid soft lockup */</span>
<span class="quote">&gt; 		cond_resched();</span>

Ahh, we don&#39;t have this in our tree, thanks for catching it.  The other 
two cond_resched()&#39;s are needed because we have reproduced them, so I&#39;ll 
send a v2.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1754,6 +1754,7 @@</span> <span class="p_context"> static int gather_surplus_pages(struct hstate *h, int delta)</span>
 			break;
 		}
 		list_add(&amp;page-&gt;lru, &amp;surplus_list);
<span class="p_add">+		cond_resched();</span>
 	}
 	allocated += i;
 
<span class="p_chunk">@@ -2222,6 +2223,7 @@</span> <span class="p_context"> static void __init hugetlb_hstate_alloc_pages(struct hstate *h)</span>
 		} else if (!alloc_fresh_huge_page(h,
 					 &amp;node_states[N_MEMORY]))
 			break;
<span class="p_add">+		cond_resched();</span>
 	}
 	if (i &lt; h-&gt;max_huge_pages) {
 		char buf[32];
<span class="p_chunk">@@ -2364,6 +2366,7 @@</span> <span class="p_context"> static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,</span>
 			ret = alloc_fresh_gigantic_page(h, nodes_allowed);
 		else
 			ret = alloc_fresh_huge_page(h, nodes_allowed);
<span class="p_add">+		cond_resched();</span>
 		spin_lock(&amp;hugetlb_lock);
 		if (!ret)
 			goto out;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



