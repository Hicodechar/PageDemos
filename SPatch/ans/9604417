
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>MIPS: reset all task&#39;s asid to 0 after asid_cache(cpu) overflows - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    MIPS: reset all task&#39;s asid to 0 after asid_cache(cpu) overflows</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173087">Jiwei Sun</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 5, 2017, 3:24 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1488684260-18867-1-git-send-email-jiwei.sun@windriver.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9604417/mbox/"
   >mbox</a>
|
   <a href="/patch/9604417/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9604417/">/patch/9604417/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	98016601D2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Mar 2017 03:24:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7391E28304
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Mar 2017 03:24:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 65BE128354; Sun,  5 Mar 2017 03:24:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D884328304
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Mar 2017 03:24:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752603AbdCEDXv (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 4 Mar 2017 22:23:51 -0500
Received: from mail5.windriver.com ([192.103.53.11]:34566 &quot;EHLO
	mail5.wrs.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752457AbdCEDXu (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 4 Mar 2017 22:23:50 -0500
Received: from ALA-HCA.corp.ad.wrs.com (ala-hca.corp.ad.wrs.com
	[147.11.189.40])
	by mail5.wrs.com (8.15.2/8.15.2) with ESMTPS id v253NXng019871
	(version=TLSv1 cipher=AES128-SHA bits=128 verify=OK);
	Sat, 4 Mar 2017 19:23:34 -0800
Received: from pek-jsun4-d1.corp.ad.wrs.com (128.224.155.85) by
	ALA-HCA.corp.ad.wrs.com (147.11.189.50) with Microsoft SMTP Server id
	14.3.294.0; Sat, 4 Mar 2017 19:23:33 -0800
From: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;
To: &lt;ralf@linux-mips.org&gt;, &lt;paul.burton@imgtec.com&gt;, &lt;james.hogan@imgtec.com&gt;
CC: &lt;linux-mips@linux-mips.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;jiwei.sun.bj@qq.com&gt;
Subject: [PATCH] MIPS: reset all task&#39;s asid to 0 after asid_cache(cpu)
	overflows
Date: Sun, 5 Mar 2017 11:24:20 +0800
Message-ID: &lt;1488684260-18867-1-git-send-email-jiwei.sun@windriver.com&gt;
X-Mailer: git-send-email 1.9.1
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173087">Jiwei Sun</a> - March 5, 2017, 3:24 a.m.</div>
<pre class="content">
If asid_cache(cpu) overflows, there may be two tasks with the same
asid. It is a risk that the two different tasks may have the same
address space.

A process will update its asid to newer version only when switch_mm()
is called and matches the following condition:
    if ((cpu_context(cpu, next) ^ asid_cache(cpu))
                    &amp; asid_version_mask(cpu))
            get_new_mmu_context(next, cpu);
If asid_cache(cpu) overflows, cpu_context(cpu,next) and asid_cache(cpu)
will be reset to asid_first_version(cpu), and start a new cycle. It
can result in two tasks that have the same ASID in the process list.

For example, in CONFIG_CPU_MIPS32_R2, task named A&#39;s asid on CPU1 is
0x100, and has been sleeping and been not scheduled. After a long period
of time, another running task named B&#39;s asid on CPU1 is 0xffffffff, and
asid cached in the CPU1 is 0xffffffff too, next task named C is forked,
when schedule from B to C on CPU1, asid_cache(cpu) will overflow, so C&#39;s
asid on CPU1 will be 0x100 according to get_new_mmu_context(). A&#39;s asid
is the same as C, if now A is rescheduled on CPU1, A&#39;s asid is not able
to renew according to &#39;if&#39; clause, and the local TLB entry can&#39;t be
flushed too, A&#39;s address space will be the same as C.

If asid_cache(cpu) overflows, all of user space task&#39;s asid on this CPU
are able to set a invalid value (such as 0), it will avoid the risk.
<span class="signed-off-by">
Signed-off-by: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;</span>
---
 arch/mips/include/asm/mmu_context.h | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59911">Sergei Shtylyov</a> - March 5, 2017, 9:38 a.m.</div>
<pre class="content">
Hello!

On 3/5/2017 6:24 AM, Jiwei Sun wrote:
<span class="quote">
&gt; If asid_cache(cpu) overflows, there may be two tasks with the same</span>
<span class="quote">&gt; asid. It is a risk that the two different tasks may have the same</span>
<span class="quote">&gt; address space.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; A process will update its asid to newer version only when switch_mm()</span>
<span class="quote">&gt; is called and matches the following condition:</span>
<span class="quote">&gt;     if ((cpu_context(cpu, next) ^ asid_cache(cpu))</span>
<span class="quote">&gt;                     &amp; asid_version_mask(cpu))</span>
<span class="quote">&gt;             get_new_mmu_context(next, cpu);</span>
<span class="quote">&gt; If asid_cache(cpu) overflows, cpu_context(cpu,next) and asid_cache(cpu)</span>
<span class="quote">&gt; will be reset to asid_first_version(cpu), and start a new cycle. It</span>
<span class="quote">&gt; can result in two tasks that have the same ASID in the process list.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; For example, in CONFIG_CPU_MIPS32_R2, task named A&#39;s asid on CPU1 is</span>
<span class="quote">&gt; 0x100, and has been sleeping and been not scheduled. After a long period</span>
<span class="quote">&gt; of time, another running task named B&#39;s asid on CPU1 is 0xffffffff, and</span>
<span class="quote">&gt; asid cached in the CPU1 is 0xffffffff too, next task named C is forked,</span>
<span class="quote">&gt; when schedule from B to C on CPU1, asid_cache(cpu) will overflow, so C&#39;s</span>
<span class="quote">&gt; asid on CPU1 will be 0x100 according to get_new_mmu_context(). A&#39;s asid</span>
<span class="quote">&gt; is the same as C, if now A is rescheduled on CPU1, A&#39;s asid is not able</span>
<span class="quote">&gt; to renew according to &#39;if&#39; clause, and the local TLB entry can&#39;t be</span>
<span class="quote">&gt; flushed too, A&#39;s address space will be the same as C.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; If asid_cache(cpu) overflows, all of user space task&#39;s asid on this CPU</span>
<span class="quote">&gt; are able to set a invalid value (such as 0), it will avoid the risk.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/mips/include/asm/mmu_context.h | 9 ++++++++-</span>
<span class="quote">&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt; index ddd57ad..1f60efc 100644</span>
<span class="quote">&gt; --- a/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt; +++ b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt; @@ -108,8 +108,15 @@ static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  		local_flush_tlb_all();	/* start new asid cycle */</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; -		if (!asid)		/* fix version if needed */</span>
<span class="quote">&gt; +		if (!asid) {		/* fix version if needed */</span>
<span class="quote">&gt; +			struct task_struct *p;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			for_each_process(p) {</span>
<span class="quote">&gt; +				if ((p-&gt;mm))</span>

    Why double parens?
<span class="quote">
&gt; +					cpu_context(cpu, p-&gt;mm) = 0;</span>
<span class="quote">&gt; +			}</span>
<span class="quote">&gt;  			asid = asid_first_version(cpu);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	cpu_context(cpu, mm) = asid_cache(cpu) = asid;</span>

MBR, Sergei
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173087">Jiwei Sun</a> - March 6, 2017, 7:21 a.m.</div>
<pre class="content">
Hello Sergei,

Thanks for your reply.

On 03/05/2017 05:38 PM, Sergei Shtylyov wrote:
<span class="quote">&gt; Hello!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 3/5/2017 6:24 AM, Jiwei Sun wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; If asid_cache(cpu) overflows, there may be two tasks with the same</span>
<span class="quote">&gt;&gt; asid. It is a risk that the two different tasks may have the same</span>
<span class="quote">&gt;&gt; address space.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; A process will update its asid to newer version only when switch_mm()</span>
<span class="quote">&gt;&gt; is called and matches the following condition:</span>
<span class="quote">&gt;&gt;     if ((cpu_context(cpu, next) ^ asid_cache(cpu))</span>
<span class="quote">&gt;&gt;                     &amp; asid_version_mask(cpu))</span>
<span class="quote">&gt;&gt;             get_new_mmu_context(next, cpu);</span>
<span class="quote">&gt;&gt; If asid_cache(cpu) overflows, cpu_context(cpu,next) and asid_cache(cpu)</span>
<span class="quote">&gt;&gt; will be reset to asid_first_version(cpu), and start a new cycle. It</span>
<span class="quote">&gt;&gt; can result in two tasks that have the same ASID in the process list.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; For example, in CONFIG_CPU_MIPS32_R2, task named A&#39;s asid on CPU1 is</span>
<span class="quote">&gt;&gt; 0x100, and has been sleeping and been not scheduled. After a long period</span>
<span class="quote">&gt;&gt; of time, another running task named B&#39;s asid on CPU1 is 0xffffffff, and</span>
<span class="quote">&gt;&gt; asid cached in the CPU1 is 0xffffffff too, next task named C is forked,</span>
<span class="quote">&gt;&gt; when schedule from B to C on CPU1, asid_cache(cpu) will overflow, so C&#39;s</span>
<span class="quote">&gt;&gt; asid on CPU1 will be 0x100 according to get_new_mmu_context(). A&#39;s asid</span>
<span class="quote">&gt;&gt; is the same as C, if now A is rescheduled on CPU1, A&#39;s asid is not able</span>
<span class="quote">&gt;&gt; to renew according to &#39;if&#39; clause, and the local TLB entry can&#39;t be</span>
<span class="quote">&gt;&gt; flushed too, A&#39;s address space will be the same as C.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; If asid_cache(cpu) overflows, all of user space task&#39;s asid on this CPU</span>
<span class="quote">&gt;&gt; are able to set a invalid value (such as 0), it will avoid the risk.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/mips/include/asm/mmu_context.h | 9 ++++++++-</span>
<span class="quote">&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt; index ddd57ad..1f60efc 100644</span>
<span class="quote">&gt;&gt; --- a/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt; +++ b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt; @@ -108,8 +108,15 @@ static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
<span class="quote">&gt;&gt;  #else</span>
<span class="quote">&gt;&gt;          local_flush_tlb_all();    /* start new asid cycle */</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt; -        if (!asid)        /* fix version if needed */</span>
<span class="quote">&gt;&gt; +        if (!asid) {        /* fix version if needed */</span>
<span class="quote">&gt;&gt; +            struct task_struct *p;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +            for_each_process(p) {</span>
<span class="quote">&gt;&gt; +                if ((p-&gt;mm))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    Why double parens?</span>

At the beginning, the code was written as following
	if ((p-&gt;mm) &amp;&amp; (p-&gt;mm != mm))
		cpu_context(cpu, p-&gt;mm) = 0;

Because cpu_context(cpu,mm) will be changed to asid_first_version(cpu) after &#39;for&#39; loop,
and in order to improve the efficiency of the loop, I deleted &quot;&amp;&amp; (p-&gt;mm != mm)&quot;,
but I forgot to delete the redundant parentheses.

Thanks,
Best regards,
Jiwei
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; +                    cpu_context(cpu, p-&gt;mm) = 0;</span>
<span class="quote">&gt;&gt; +            }</span>
<span class="quote">&gt;&gt;              asid = asid_first_version(cpu);</span>
<span class="quote">&gt;&gt; +        }</span>
<span class="quote">&gt;&gt;      }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;      cpu_context(cpu, mm) = asid_cache(cpu) = asid;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MBR, Sergei</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59911">Sergei Shtylyov</a> - March 6, 2017, 8:34 a.m.</div>
<pre class="content">
On 3/6/2017 10:21 AM, jsun4 wrote:
<span class="quote">
&gt;&gt;&gt; If asid_cache(cpu) overflows, there may be two tasks with the same</span>
<span class="quote">&gt;&gt;&gt; asid. It is a risk that the two different tasks may have the same</span>
<span class="quote">&gt;&gt;&gt; address space.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; A process will update its asid to newer version only when switch_mm()</span>
<span class="quote">&gt;&gt;&gt; is called and matches the following condition:</span>
<span class="quote">&gt;&gt;&gt;     if ((cpu_context(cpu, next) ^ asid_cache(cpu))</span>
<span class="quote">&gt;&gt;&gt;                     &amp; asid_version_mask(cpu))</span>
<span class="quote">&gt;&gt;&gt;             get_new_mmu_context(next, cpu);</span>
<span class="quote">&gt;&gt;&gt; If asid_cache(cpu) overflows, cpu_context(cpu,next) and asid_cache(cpu)</span>
<span class="quote">&gt;&gt;&gt; will be reset to asid_first_version(cpu), and start a new cycle. It</span>
<span class="quote">&gt;&gt;&gt; can result in two tasks that have the same ASID in the process list.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; For example, in CONFIG_CPU_MIPS32_R2, task named A&#39;s asid on CPU1 is</span>
<span class="quote">&gt;&gt;&gt; 0x100, and has been sleeping and been not scheduled. After a long period</span>
<span class="quote">&gt;&gt;&gt; of time, another running task named B&#39;s asid on CPU1 is 0xffffffff, and</span>
<span class="quote">&gt;&gt;&gt; asid cached in the CPU1 is 0xffffffff too, next task named C is forked,</span>
<span class="quote">&gt;&gt;&gt; when schedule from B to C on CPU1, asid_cache(cpu) will overflow, so C&#39;s</span>
<span class="quote">&gt;&gt;&gt; asid on CPU1 will be 0x100 according to get_new_mmu_context(). A&#39;s asid</span>
<span class="quote">&gt;&gt;&gt; is the same as C, if now A is rescheduled on CPU1, A&#39;s asid is not able</span>
<span class="quote">&gt;&gt;&gt; to renew according to &#39;if&#39; clause, and the local TLB entry can&#39;t be</span>
<span class="quote">&gt;&gt;&gt; flushed too, A&#39;s address space will be the same as C.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; If asid_cache(cpu) overflows, all of user space task&#39;s asid on this CPU</span>
<span class="quote">&gt;&gt;&gt; are able to set a invalid value (such as 0), it will avoid the risk.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  arch/mips/include/asm/mmu_context.h | 9 ++++++++-</span>
<span class="quote">&gt;&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt; index ddd57ad..1f60efc 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt; @@ -108,8 +108,15 @@ static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
<span class="quote">&gt;&gt;&gt;  #else</span>
<span class="quote">&gt;&gt;&gt;          local_flush_tlb_all();    /* start new asid cycle */</span>
<span class="quote">&gt;&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;&gt; -        if (!asid)        /* fix version if needed */</span>
<span class="quote">&gt;&gt;&gt; +        if (!asid) {        /* fix version if needed */</span>
<span class="quote">&gt;&gt;&gt; +            struct task_struct *p;</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +            for_each_process(p) {</span>
<span class="quote">&gt;&gt;&gt; +                if ((p-&gt;mm))</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;    Why double parens?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; At the beginning, the code was written as following</span>
<span class="quote">&gt; 	if ((p-&gt;mm) &amp;&amp; (p-&gt;mm != mm))</span>
<span class="quote">&gt; 		cpu_context(cpu, p-&gt;mm) = 0;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Because cpu_context(cpu,mm) will be changed to asid_first_version(cpu) after &#39;for&#39; loop,</span>
<span class="quote">&gt; and in order to improve the efficiency of the loop, I deleted &quot;&amp;&amp; (p-&gt;mm != mm)&quot;,</span>
<span class="quote">&gt; but I forgot to delete the redundant parentheses.</span>

    Note that parens around &#39;p-&gt;mm&#39; were never needed. And neither around the 
right operand of &amp;&amp;.
<span class="quote">
&gt; Thanks,</span>
<span class="quote">&gt; Best regards,</span>
<span class="quote">&gt; Jiwei</span>

MBR, Sergei
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173087">Jiwei Sun</a> - March 7, 2017, 12:06 p.m.</div>
<pre class="content">
On 03/06/2017 04:34 PM, Sergei Shtylyov wrote:
<span class="quote">&gt; On 3/6/2017 10:21 AM, jsun4 wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; If asid_cache(cpu) overflows, there may be two tasks with the same</span>
<span class="quote">&gt;&gt;&gt;&gt; asid. It is a risk that the two different tasks may have the same</span>
<span class="quote">&gt;&gt;&gt;&gt; address space.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; A process will update its asid to newer version only when switch_mm()</span>
<span class="quote">&gt;&gt;&gt;&gt; is called and matches the following condition:</span>
<span class="quote">&gt;&gt;&gt;&gt;     if ((cpu_context(cpu, next) ^ asid_cache(cpu))</span>
<span class="quote">&gt;&gt;&gt;&gt;                     &amp; asid_version_mask(cpu))</span>
<span class="quote">&gt;&gt;&gt;&gt;             get_new_mmu_context(next, cpu);</span>
<span class="quote">&gt;&gt;&gt;&gt; If asid_cache(cpu) overflows, cpu_context(cpu,next) and asid_cache(cpu)</span>
<span class="quote">&gt;&gt;&gt;&gt; will be reset to asid_first_version(cpu), and start a new cycle. It</span>
<span class="quote">&gt;&gt;&gt;&gt; can result in two tasks that have the same ASID in the process list.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; For example, in CONFIG_CPU_MIPS32_R2, task named A&#39;s asid on CPU1 is</span>
<span class="quote">&gt;&gt;&gt;&gt; 0x100, and has been sleeping and been not scheduled. After a long period</span>
<span class="quote">&gt;&gt;&gt;&gt; of time, another running task named B&#39;s asid on CPU1 is 0xffffffff, and</span>
<span class="quote">&gt;&gt;&gt;&gt; asid cached in the CPU1 is 0xffffffff too, next task named C is forked,</span>
<span class="quote">&gt;&gt;&gt;&gt; when schedule from B to C on CPU1, asid_cache(cpu) will overflow, so C&#39;s</span>
<span class="quote">&gt;&gt;&gt;&gt; asid on CPU1 will be 0x100 according to get_new_mmu_context(). A&#39;s asid</span>
<span class="quote">&gt;&gt;&gt;&gt; is the same as C, if now A is rescheduled on CPU1, A&#39;s asid is not able</span>
<span class="quote">&gt;&gt;&gt;&gt; to renew according to &#39;if&#39; clause, and the local TLB entry can&#39;t be</span>
<span class="quote">&gt;&gt;&gt;&gt; flushed too, A&#39;s address space will be the same as C.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; If asid_cache(cpu) overflows, all of user space task&#39;s asid on this CPU</span>
<span class="quote">&gt;&gt;&gt;&gt; are able to set a invalid value (such as 0), it will avoid the risk.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Jiwei Sun &lt;jiwei.sun@windriver.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/mips/include/asm/mmu_context.h | 9 ++++++++-</span>
<span class="quote">&gt;&gt;&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt;&gt; index ddd57ad..1f60efc 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/mips/include/asm/mmu_context.h</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -108,8 +108,15 @@ static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
<span class="quote">&gt;&gt;&gt;&gt;  #else</span>
<span class="quote">&gt;&gt;&gt;&gt;          local_flush_tlb_all();    /* start new asid cycle */</span>
<span class="quote">&gt;&gt;&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;&gt;&gt; -        if (!asid)        /* fix version if needed */</span>
<span class="quote">&gt;&gt;&gt;&gt; +        if (!asid) {        /* fix version if needed */</span>
<span class="quote">&gt;&gt;&gt;&gt; +            struct task_struct *p;</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +            for_each_process(p) {</span>
<span class="quote">&gt;&gt;&gt;&gt; +                if ((p-&gt;mm))</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;    Why double parens?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; At the beginning, the code was written as following</span>
<span class="quote">&gt;&gt;     if ((p-&gt;mm) &amp;&amp; (p-&gt;mm != mm))</span>
<span class="quote">&gt;&gt;         cpu_context(cpu, p-&gt;mm) = 0;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Because cpu_context(cpu,mm) will be changed to asid_first_version(cpu) after &#39;for&#39; loop,</span>
<span class="quote">&gt;&gt; and in order to improve the efficiency of the loop, I deleted &quot;&amp;&amp; (p-&gt;mm != mm)&quot;,</span>
<span class="quote">&gt;&gt; but I forgot to delete the redundant parentheses.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    Note that parens around &#39;p-&gt;mm&#39; were never needed. And neither around the right operand of &amp;&amp;.</span>

You are right, I will pay attention to similar problems next time.
Thanks for your reminder.

Best regards,
Jiwei
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt; Best regards,</span>
<span class="quote">&gt;&gt; Jiwei</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MBR, Sergei</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h</span>
<span class="p_header">index ddd57ad..1f60efc 100644</span>
<span class="p_header">--- a/arch/mips/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/mips/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -108,8 +108,15 @@</span> <span class="p_context"> static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
 #else
 		local_flush_tlb_all();	/* start new asid cycle */
 #endif
<span class="p_del">-		if (!asid)		/* fix version if needed */</span>
<span class="p_add">+		if (!asid) {		/* fix version if needed */</span>
<span class="p_add">+			struct task_struct *p;</span>
<span class="p_add">+</span>
<span class="p_add">+			for_each_process(p) {</span>
<span class="p_add">+				if ((p-&gt;mm))</span>
<span class="p_add">+					cpu_context(cpu, p-&gt;mm) = 0;</span>
<span class="p_add">+			}</span>
 			asid = asid_first_version(cpu);
<span class="p_add">+		}</span>
 	}
 
 	cpu_context(cpu, mm) = asid_cache(cpu) = asid;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



