
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arm64: do not set dma masks that device connection can&#39;t handle - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arm64: do not set dma masks that device connection can&#39;t handle</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 6, 2017, 2:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1483713911-2079-1-git-send-email-nikita.yoush@cogentembedded.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9501249/mbox/"
   >mbox</a>
|
   <a href="/patch/9501249/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9501249/">/patch/9501249/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9A844606B4 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Jan 2017 14:52:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6CC74284D0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Jan 2017 14:52:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 60F75284D4; Fri,  6 Jan 2017 14:52:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D4690284D0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  6 Jan 2017 14:51:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754986AbdAFOuV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 6 Jan 2017 09:50:21 -0500
Received: from mail-lf0-f49.google.com ([209.85.215.49]:33417 &quot;EHLO
	mail-lf0-f49.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754502AbdAFOt2 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 6 Jan 2017 09:49:28 -0500
Received: by mail-lf0-f49.google.com with SMTP id k86so55452765lfi.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 06 Jan 2017 06:48:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=cogentembedded-com.20150623.gappssmtp.com; s=20150623;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=hC2RDHHogpmCJnj7FtsdeaDHG5TRD6g4NpKK/TE0ihM=;
	b=znKJFBga4wXCv7HOuEu9ehnOvSW15hYz2PEFH3QPvZM2oWLvspt93qvirwj0kPnVSX
	0glf8x+O6r4HVZEKzFSITpMW0nutNqBPssVBuU8rUAE9S+/T+7PC/Q81gZRZ+IeP4XI7
	+cEx2FHFkiYSdZ3uDIFLrxCYeclfftpW/XG3W8S0a/Yqi0EmzYYf5aWX07FKjA3amsPW
	4R2rPpHWPxa+sc0O9YRpBVlO90PHnLm0RtFYVUjwJsj1FdmgRdcnXXpUEZFtVI1kHpRA
	pvjMUrZsfMbyEEhaMt6alsqxrpAfPg3UGb8FZHpgKx0ngDguFNVGYaHHFQaucGxyTGLn
	VY1g==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=hC2RDHHogpmCJnj7FtsdeaDHG5TRD6g4NpKK/TE0ihM=;
	b=YH6LYZXzqUC/LDcbvh58+zMvAHO8/HJpFmc7a52ppxIMF/7d49bMX+bDLOOi9tsCcJ
	2oThEOSXvDfqvzmcginYKhk8GLi6jF70MJKcTre2W3V7jjLjhUeqDdt9WKRdoVBvUECA
	QOj9q9QkBOCcO1hLmTCdHiRuCFVnhp+Y5mDRN7IAIs3JPSQ9gKKdjoxnt04MuS9jlJNc
	OHB1mAn8d0U0nu8GoRYtqtVndW3AmxizidQA763xaF9dl51KqzsZ4CcPOx18fQkmLoNj
	7EoCIRupgDzGbE45nwMrYdshPxbltE6Cki5xlu75EXk0Jv0a5+UPi6is4hqUUE4RbquU
	dN3w==
X-Gm-Message-State: AIkVDXJl/3Ml69ky42Roee9dEp5DX0fP/qUdlS4EBCOSBnK1K+r7ozis4V2TpdWobkrm1Q==
X-Received: by 10.46.71.204 with SMTP id u195mr3458724lja.71.1483714091247; 
	Fri, 06 Jan 2017 06:48:11 -0800 (PST)
Received: from hugenb.home (nikaet.starlink.ru. [94.141.168.29])
	by smtp.gmail.com with ESMTPSA id
	n124sm17168332lfn.5.2017.01.06.06.48.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Fri, 06 Jan 2017 06:48:10 -0800 (PST)
From: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;
To: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: linux-arm-kernel@lists.infradead.org, Will Deacon &lt;will.deacon@arm.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	linux-kernel@vger.kernel.org, linux-renesas-soc@vger.kernel.org,
	Simon Horman &lt;horms@verge.net.au&gt;, Bjorn Helgaas &lt;bhelgaas@google.com&gt;,
	artemi.ivanov@cogentembedded.com,
	Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;
Subject: [PATCH] arm64: do not set dma masks that device connection can&#39;t
	handle
Date: Fri,  6 Jan 2017 17:45:11 +0300
Message-Id: &lt;1483713911-2079-1-git-send-email-nikita.yoush@cogentembedded.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;9a03c05d-ad4c-0547-d1fe-01edb8b082d6@cogentembedded.com&gt;
References: &lt;9a03c05d-ad4c-0547-d1fe-01edb8b082d6@cogentembedded.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Jan. 6, 2017, 2:45 p.m.</div>
<pre class="content">
It is possible that device is capable of 64-bit DMA addresses, and
device driver tries to set wide DMA mask, but bridge or bus used to
connect device to the system can&#39;t handle wide addresses.

With swiotlb, memory above 4G still can be used by drivers for streaming
DMA, but *dev-&gt;mask and dev-&gt;dma_coherent_mask must still keep values
that hardware handles physically.

This patch enforces that. Based on original version by
Arnd Bergmann &lt;arnd@arndb.de&gt;, extended with coherent mask hadnling.
<span class="signed-off-by">
Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
CC: Arnd Bergmann &lt;arnd@arndb.de&gt;
---

... now with initially missed change in arch_setup_dma_ops() ...

 arch/arm64/Kconfig              |  3 +++
 arch/arm64/include/asm/device.h |  1 +
 arch/arm64/mm/dma-mapping.c     | 52 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 56 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59911">Sergei Shtylyov</a> - Jan. 8, 2017, 7:09 a.m.</div>
<pre class="content">
Hello!

On 1/6/2017 5:45 PM, Nikita Yushchenko wrote:
<span class="quote">
&gt; It is possible that device is capable of 64-bit DMA addresses, and</span>
<span class="quote">&gt; device driver tries to set wide DMA mask, but bridge or bus used to</span>
<span class="quote">&gt; connect device to the system can&#39;t handle wide addresses.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; With swiotlb, memory above 4G still can be used by drivers for streaming</span>
<span class="quote">&gt; DMA, but *dev-&gt;mask and dev-&gt;dma_coherent_mask must still keep values</span>
<span class="quote">&gt; that hardware handles physically.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch enforces that. Based on original version by</span>
<span class="quote">&gt; Arnd Bergmann &lt;arnd@arndb.de&gt;, extended with coherent mask hadnling.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
<span class="quote">&gt; CC: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
[...]
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 290a84f..09c7900 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -352,6 +352,31 @@ static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;  	return 1;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	/* device is not DMA capable */</span>
<span class="quote">&gt; +	if (!dev-&gt;dma_mask)</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="quote">&gt; +	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="quote">&gt; +		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * because of the swiotlb, we can return success for</span>
<span class="quote">&gt; +	 * larger masks, but need to ensure that bounce buffers</span>
<span class="quote">&gt; +	 * are used above parent_dma_mask, so set that as</span>
<span class="quote">&gt; +	 * the effective mask.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt; +		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>

    One empty line is enough...
<span class="quote">
&gt; +	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static struct dma_map_ops swiotlb_dma_ops = {</span>
<span class="quote">&gt;  	.alloc = __dma_alloc,</span>
<span class="quote">&gt;  	.free = __dma_free,</span>
[...]
<span class="quote">&gt; @@ -957,6 +997,18 @@ void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
<span class="quote">&gt;  	if (!dev-&gt;archdata.dma_ops)</span>
<span class="quote">&gt;  		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * we don&#39;t yet support buses that have a non-zero mapping.</span>
<span class="quote">&gt; +	 *  Let&#39;s hope we won&#39;t need it</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	WARN_ON(dma_base != 0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Whatever the parent bus can set. A device must not set</span>
<span class="quote">&gt; +	 * a DMA mask larger than this.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	dev-&gt;archdata.parent_dma_mask = size;</span>

    Not &#39;size - 1&#39;?
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  	dev-&gt;archdata.dma_coherent = coherent;</span>
<span class="quote">&gt;  	__iommu_setup_dma_ops(dev, dma_base, size, iommu);</span>
<span class="quote">&gt;  }</span>

MBR, Sergei
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Jan. 9, 2017, 6:56 a.m.</div>
<pre class="content">
<span class="quote">&gt;&gt; +    if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="quote">&gt;&gt; +        mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    One empty line is enough...</span>

Ok
<span class="quote">
&gt;&gt; +    /*</span>
<span class="quote">&gt;&gt; +     * Whatever the parent bus can set. A device must not set</span>
<span class="quote">&gt;&gt; +     * a DMA mask larger than this.</span>
<span class="quote">&gt;&gt; +     */</span>
<span class="quote">&gt;&gt; +    dev-&gt;archdata.parent_dma_mask = size;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;    Not &#39;size - 1&#39;?</span>

Good question.

Indeed of_dma_configure() calls arch_setup_dma_ops() with size, not
mask. Which implies &#39;-1&#39; is needed here. Although better fix may be to
change caller side - to make DMA_BIT_MASK(64) case cleaner.

Will repost path.

Nikita
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 1117421..afb2c08 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -216,6 +216,9 @@</span> <span class="p_context"> config NEED_DMA_MAP_STATE</span>
 config NEED_SG_DMA_LENGTH
 	def_bool y
 
<span class="p_add">+config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config SMP
 	def_bool y
 
<span class="p_header">diff --git a/arch/arm64/include/asm/device.h b/arch/arm64/include/asm/device.h</span>
<span class="p_header">index 243ef25..a57e7bb 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 	void *iommu;			/* private IOMMU data */
 #endif
 	bool dma_coherent;
<span class="p_add">+	u64 parent_dma_mask;</span>
 };
 
 struct pdev_archdata {
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 290a84f..09c7900 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -352,6 +352,31 @@</span> <span class="p_context"> static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
 	return 1;
 }
 
<span class="p_add">+static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="p_add">+	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * because of the swiotlb, we can return success for</span>
<span class="p_add">+	 * larger masks, but need to ensure that bounce buffers</span>
<span class="p_add">+	 * are used above parent_dma_mask, so set that as</span>
<span class="p_add">+	 * the effective mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct dma_map_ops swiotlb_dma_ops = {
 	.alloc = __dma_alloc,
 	.free = __dma_free,
<span class="p_chunk">@@ -367,8 +392,23 @@</span> <span class="p_context"> static struct dma_map_ops swiotlb_dma_ops = {</span>
 	.sync_sg_for_device = __swiotlb_sync_sg_for_device,
 	.dma_supported = __swiotlb_dma_supported,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __swiotlb_set_dma_mask,</span>
 };
 
<span class="p_add">+int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!dma_supported(dev, mask))</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (get_dma_ops(dev) == &amp;swiotlb_dma_ops &amp;&amp;</span>
<span class="p_add">+	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = mask;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="p_add">+</span>
 static int __init atomic_pool_init(void)
 {
 	pgprot_t prot = __pgprot(PROT_NORMAL_NC);
<span class="p_chunk">@@ -957,6 +997,18 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 	if (!dev-&gt;archdata.dma_ops)
 		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * we don&#39;t yet support buses that have a non-zero mapping.</span>
<span class="p_add">+	 *  Let&#39;s hope we won&#39;t need it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON(dma_base != 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Whatever the parent bus can set. A device must not set</span>
<span class="p_add">+	 * a DMA mask larger than this.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



