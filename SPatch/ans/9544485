
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,4/6] mm: move MADV_FREE pages into LRU_LAZYFREE list - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,4/6] mm: move MADV_FREE pages into LRU_LAZYFREE list</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 30, 2017, 5:51 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;5d54eafab07025a126914c48aa2166cde4afa71e.1485748619.git.shli@fb.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9544485/mbox/"
   >mbox</a>
|
   <a href="/patch/9544485/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9544485/">/patch/9544485/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6195D60415 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Jan 2017 05:52:06 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 546B026E8A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Jan 2017 05:52:06 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4906627AB2; Mon, 30 Jan 2017 05:52:06 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7928727813
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 Jan 2017 05:52:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752167AbdA3Fvw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 30 Jan 2017 00:51:52 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:57710 &quot;EHLO
	mx0a-00082601.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1751523AbdA3Fvb (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 30 Jan 2017 00:51:31 -0500
Received: from pps.filterd (m0001255.ppops.net [127.0.0.1])
	by mx0b-00082601.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v0U5kQ8W030758
	for &lt;linux-kernel@vger.kernel.org&gt;; Sun, 29 Jan 2017 21:51:26 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com;
	h=from : to : cc : subject
	: date : message-id : in-reply-to : references : mime-version :
	content-type; s=facebook;
	bh=S+sBVOt9Huzfd05QBvWuX9Dtr4re0KHL/LaxFGLqM6I=; 
	b=DImkNnmJdH9YKXEcSUiNS9bjGmBp7cMdgLOwm5KqzfOFHZF7GI47x4PmKDClQKRIoC9f
	hDqWNK8QAbPL4bNq8qXkkHlFbqw/BbQWzQF9e/VR7pziWM4fAjhTQpz0fpQlG0kKydLb
	lNOpZP6Mgv8xh4Exch9MnZ1//fm8Mnug7Y4= 
Received: from mail.thefacebook.com ([199.201.64.23])
	by mx0b-00082601.pphosted.com with ESMTP id 288r09d6by-6
	(version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Sun, 29 Jan 2017 21:51:26 -0800
Received: from mx-out.facebook.com (192.168.52.123) by
	PRN-CHUB06.TheFacebook.com (192.168.16.16) with Microsoft SMTP Server
	(TLS) id 14.3.294.0; Sun, 29 Jan 2017 21:51:23 -0800
Received: from facebook.com (2401:db00:21:603d:face:0:19:0)     by
	mx-out.facebook.com (10.102.107.99) with ESMTP id
	21b9c0e4e6b011e6ac470002c99293a0-721f6a50 for
	&lt;linux-kernel@vger.kernel.org&gt;; Sun, 29 Jan 2017 21:51:23 -0800
Received: by devbig638.prn2.facebook.com (Postfix, from userid 11222)   id
	6D6B542C1864; Sun, 29 Jan 2017 21:51:23 -0800 (PST)
Smtp-Origin-Hostprefix: devbig
From: Shaohua Li &lt;shli@fb.com&gt;
Smtp-Origin-Hostname: devbig638.prn2.facebook.com
To: &lt;linux-mm@kvack.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;Kernel-team@fb.com&gt;, &lt;mhocko@suse.com&gt;, &lt;minchan@kernel.org&gt;,
	&lt;hughd@google.com&gt;, &lt;hannes@cmpxchg.org&gt;, &lt;riel@redhat.com&gt;,
	&lt;mgorman@techsingularity.net&gt;
Smtp-Origin-Cluster: prn2c22
Subject: [RFC 4/6] mm: move MADV_FREE pages into LRU_LAZYFREE list
Date: Sun, 29 Jan 2017 21:51:21 -0800
Message-ID: &lt;5d54eafab07025a126914c48aa2166cde4afa71e.1485748619.git.shli@fb.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;cover.1485748619.git.shli@fb.com&gt;
References: &lt;cover.1485748619.git.shli@fb.com&gt;
X-FB-Internal: Safe
MIME-Version: 1.0
Content-Type: text/plain
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-01-30_04:, , signatures=0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Jan. 30, 2017, 5:51 a.m.</div>
<pre class="content">
Move the MADV_FREE pages into LRU_LAZYFREE list. The reason why we need
to do this is described in last patch. Next patch will reclaim the
pages.

The patch is based on Minchan&#39;s previous patch.

Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
<span class="signed-off-by">Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
---
 include/linux/swap.h |  2 +-
 mm/huge_memory.c     |  5 ++---
 mm/madvise.c         |  3 +--
 mm/swap.c            | 51 +++++++++++++++++++++++++++++----------------------
 4 files changed, 33 insertions(+), 28 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/swap.h b/include/linux/swap.h</span>
<span class="p_header">index 45e91dd..e35bef5 100644</span>
<span class="p_header">--- a/include/linux/swap.h</span>
<span class="p_header">+++ b/include/linux/swap.h</span>
<span class="p_chunk">@@ -279,7 +279,7 @@</span> <span class="p_context"> extern void lru_add_drain_cpu(int cpu);</span>
 extern void lru_add_drain_all(void);
 extern void rotate_reclaimable_page(struct page *page);
 extern void deactivate_file_page(struct page *page);
<span class="p_del">-extern void deactivate_page(struct page *page);</span>
<span class="p_add">+extern void move_page_to_lazyfree_list(struct page *page);</span>
 extern void swap_setup(void);
 
 extern void add_page_to_unevictable_list(struct page *page);
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index ffa7ed5..57daef7 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1391,9 +1391,6 @@</span> <span class="p_context"> bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		ClearPageDirty(page);
 	unlock_page(page);
 
<span class="p_del">-	if (PageActive(page))</span>
<span class="p_del">-		deactivate_page(page);</span>
<span class="p_del">-</span>
 	if (pmd_young(orig_pmd) || pmd_dirty(orig_pmd)) {
 		orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,
 			tlb-&gt;fullmm);
<span class="p_chunk">@@ -1404,6 +1401,8 @@</span> <span class="p_context"> bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		set_pmd_at(mm, addr, pmd, orig_pmd);
 		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);
 	}
<span class="p_add">+</span>
<span class="p_add">+	move_page_to_lazyfree_list(page);</span>
 	ret = true;
 out:
 	spin_unlock(ptl);
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index c867d88..78b4b02 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -378,10 +378,9 @@</span> <span class="p_context"> static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
 			ptent = pte_mkclean(ptent);
 			ptent = pte_wrprotect(ptent);
 			set_pte_at(mm, addr, pte, ptent);
<span class="p_del">-			if (PageActive(page))</span>
<span class="p_del">-				deactivate_page(page);</span>
 			tlb_remove_tlb_entry(tlb, pte, addr);
 		}
<span class="p_add">+		move_page_to_lazyfree_list(page);</span>
 	}
 out:
 	if (nr_swap) {
<span class="p_header">diff --git a/mm/swap.c b/mm/swap.c</span>
<span class="p_header">index c4910f1..f9e70e8 100644</span>
<span class="p_header">--- a/mm/swap.c</span>
<span class="p_header">+++ b/mm/swap.c</span>
<span class="p_chunk">@@ -46,7 +46,7 @@</span> <span class="p_context"> int page_cluster;</span>
 static DEFINE_PER_CPU(struct pagevec, lru_add_pvec);
 static DEFINE_PER_CPU(struct pagevec, lru_rotate_pvecs);
 static DEFINE_PER_CPU(struct pagevec, lru_deactivate_file_pvecs);
<span class="p_del">-static DEFINE_PER_CPU(struct pagevec, lru_deactivate_pvecs);</span>
<span class="p_add">+static DEFINE_PER_CPU(struct pagevec, lru_lazyfree_pvecs);</span>
 #ifdef CONFIG_SMP
 static DEFINE_PER_CPU(struct pagevec, activate_page_pvecs);
 #endif
<span class="p_chunk">@@ -268,6 +268,10 @@</span> <span class="p_context"> static void __activate_page(struct page *page, struct lruvec *lruvec,</span>
 		int lru = page_lru_base_type(page);
 
 		del_page_from_lru_list(page, lruvec, lru);
<span class="p_add">+		if (lru == LRU_LAZYFREE) {</span>
<span class="p_add">+			ClearPageLazyFree(page);</span>
<span class="p_add">+			lru = LRU_INACTIVE_ANON;</span>
<span class="p_add">+		}</span>
 		SetPageActive(page);
 		lru += LRU_ACTIVE;
 		add_page_to_lru_list(page, lruvec, lru);
<span class="p_chunk">@@ -455,6 +459,8 @@</span> <span class="p_context"> void add_page_to_unevictable_list(struct page *page)</span>
 	ClearPageActive(page);
 	SetPageUnevictable(page);
 	SetPageLRU(page);
<span class="p_add">+	if (page_is_lazyfree(page))</span>
<span class="p_add">+		ClearPageLazyFree(page);</span>
 	add_page_to_lru_list(page, lruvec, LRU_UNEVICTABLE);
 	spin_unlock_irq(&amp;pgdat-&gt;lru_lock);
 }
<span class="p_chunk">@@ -561,20 +567,21 @@</span> <span class="p_context"> static void lru_deactivate_file_fn(struct page *page, struct lruvec *lruvec,</span>
 }
 
 
<span class="p_del">-static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec,</span>
<span class="p_add">+static void lru_lazyfree_fn(struct page *page, struct lruvec *lruvec,</span>
 			    void *arg)
 {
<span class="p_del">-	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="p_del">-		int file = page_is_file_cache(page);</span>
<span class="p_del">-		int lru = page_lru_base_type(page);</span>
<span class="p_add">+	if (PageLRU(page) &amp;&amp; PageSwapBacked(page) &amp;&amp; !PageLazyFree(page) &amp;&amp;</span>
<span class="p_add">+	    !PageUnevictable(page)) {</span>
<span class="p_add">+		unsigned int nr_pages = PageTransHuge(page) ? HPAGE_PMD_NR : 1;</span>
<span class="p_add">+		bool active = PageActive(page);</span>
 
<span class="p_del">-		del_page_from_lru_list(page, lruvec, lru + LRU_ACTIVE);</span>
<span class="p_add">+		del_page_from_lru_list(page, lruvec, LRU_INACTIVE_ANON + active);</span>
 		ClearPageActive(page);
 		ClearPageReferenced(page);
<span class="p_del">-		add_page_to_lru_list(page, lruvec, lru);</span>
<span class="p_add">+		SetPageLazyFree(page);</span>
<span class="p_add">+		add_page_to_lru_list(page, lruvec, LRU_LAZYFREE);</span>
 
<span class="p_del">-		__count_vm_event(PGDEACTIVATE);</span>
<span class="p_del">-		update_page_reclaim_stat(lruvec, file, 0);</span>
<span class="p_add">+		count_vm_events(PGLAZYFREE, nr_pages);</span>
 	}
 }
 
<span class="p_chunk">@@ -604,9 +611,9 @@</span> <span class="p_context"> void lru_add_drain_cpu(int cpu)</span>
 	if (pagevec_count(pvec))
 		pagevec_lru_move_fn(pvec, lru_deactivate_file_fn, NULL);
 
<span class="p_del">-	pvec = &amp;per_cpu(lru_deactivate_pvecs, cpu);</span>
<span class="p_add">+	pvec = &amp;per_cpu(lru_lazyfree_pvecs, cpu);</span>
 	if (pagevec_count(pvec))
<span class="p_del">-		pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="p_add">+		pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
 
 	activate_page_drain(cpu);
 }
<span class="p_chunk">@@ -638,22 +645,22 @@</span> <span class="p_context"> void deactivate_file_page(struct page *page)</span>
 }
 
 /**
<span class="p_del">- * deactivate_page - deactivate a page</span>
<span class="p_del">- * @page: page to deactivate</span>
<span class="p_add">+ * move_page_to_lazyfree_list - move anon page to lazyfree list</span>
<span class="p_add">+ * @page: page to move</span>
  *
<span class="p_del">- * deactivate_page() moves @page to the inactive list if @page was on the active</span>
<span class="p_del">- * list and was not an unevictable page.  This is done to accelerate the reclaim</span>
<span class="p_del">- * of @page.</span>
<span class="p_add">+ * This function moves @page to the lazyfree list after the page is the target</span>
<span class="p_add">+ * of a MADV_FREE syscall. This is to accelerate the reclaim of the @page</span>
  */
<span class="p_del">-void deactivate_page(struct page *page)</span>
<span class="p_add">+void move_page_to_lazyfree_list(struct page *page)</span>
 {
<span class="p_del">-	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="p_del">-		struct pagevec *pvec = &amp;get_cpu_var(lru_deactivate_pvecs);</span>
<span class="p_add">+	if (PageLRU(page) &amp;&amp; PageSwapBacked(page) &amp;&amp; !PageLazyFree(page) &amp;&amp;</span>
<span class="p_add">+	    !PageUnevictable(page)) {</span>
<span class="p_add">+		struct pagevec *pvec = &amp;get_cpu_var(lru_lazyfree_pvecs);</span>
 
 		get_page(page);
 		if (!pagevec_add(pvec, page) || PageCompound(page))
<span class="p_del">-			pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="p_del">-		put_cpu_var(lru_deactivate_pvecs);</span>
<span class="p_add">+			pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
<span class="p_add">+		put_cpu_var(lru_lazyfree_pvecs);</span>
 	}
 }
 
<span class="p_chunk">@@ -704,7 +711,7 @@</span> <span class="p_context"> void lru_add_drain_all(void)</span>
 		if (pagevec_count(&amp;per_cpu(lru_add_pvec, cpu)) ||
 		    pagevec_count(&amp;per_cpu(lru_rotate_pvecs, cpu)) ||
 		    pagevec_count(&amp;per_cpu(lru_deactivate_file_pvecs, cpu)) ||
<span class="p_del">-		    pagevec_count(&amp;per_cpu(lru_deactivate_pvecs, cpu)) ||</span>
<span class="p_add">+		    pagevec_count(&amp;per_cpu(lru_lazyfree_pvecs, cpu)) ||</span>
 		    need_activate_page_drain(cpu)) {
 			INIT_WORK(work, lru_add_drain_per_cpu);
 			queue_work_on(cpu, lru_add_drain_wq, work);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



