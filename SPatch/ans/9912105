
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/8] iommu/mediatek: Add mt2712 IOMMU support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/8] iommu/mediatek: Add mt2712 IOMMU support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=123111">Yong Wu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 21, 2017, 11 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1503313221-26453-4-git-send-email-yong.wu@mediatek.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9912105/mbox/"
   >mbox</a>
|
   <a href="/patch/9912105/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9912105/">/patch/9912105/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B0CFC602D8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 21 Aug 2017 11:01:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A0C312876C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 21 Aug 2017 11:01:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 956AE2876F; Mon, 21 Aug 2017 11:01:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8042C2876C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 21 Aug 2017 11:01:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753470AbdHULBL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 21 Aug 2017 07:01:11 -0400
Received: from mailgw02.mediatek.com ([210.61.82.184]:5007 &quot;EHLO
	mailgw02.mediatek.com&quot; rhost-flags-OK-FAIL-OK-FAIL) by
	vger.kernel.org with ESMTP id S1752778AbdHULBJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 21 Aug 2017 07:01:09 -0400
Received: from mtkexhb01.mediatek.inc [(172.21.101.102)] by
	mailgw02.mediatek.com (envelope-from &lt;yong.wu@mediatek.com&gt;)
	(mhqrelay.mediatek.com ESMTP with TLS)
	with ESMTP id 268534005; Mon, 21 Aug 2017 19:01:05 +0800
Received: from MTKCAS06.mediatek.inc (172.21.101.30) by
	mtkmbs03n1.mediatek.inc (172.21.101.181) with Microsoft SMTP Server
	(TLS) id 15.0.1210.3; Mon, 21 Aug 2017 19:01:03 +0800
Received: from localhost.localdomain (10.17.3.153) by MTKCAS06.mediatek.inc
	(172.21.101.73) with Microsoft SMTP Server id 15.0.1210.3 via
	Frontend Transport; Mon, 21 Aug 2017 19:01:03 +0800
From: Yong Wu &lt;yong.wu@mediatek.com&gt;
To: Joerg Roedel &lt;joro@8bytes.org&gt;, Rob Herring &lt;robh+dt@kernel.org&gt;,
	Matthias Brugger &lt;matthias.bgg@gmail.com&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;
CC: Will Deacon &lt;will.deacon@arm.com&gt;, Daniel Kurtz &lt;djkurtz@google.com&gt;,
	Tomasz Figa &lt;tfiga@google.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	&lt;linux-mediatek@lists.infradead.org&gt;,
	&lt;srv_heupstream@mediatek.com&gt;, &lt;devicetree@vger.kernel.org&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, &lt;linux-arm-kernel@lists.infradead.org&gt;,
	&lt;iommu@lists.linux-foundation.org&gt;, &lt;arnd@arndb.de&gt;,
	&lt;honghui.zhang@mediatek.com&gt;, &lt;k.zhang@mediatek.com&gt;,
	&lt;cloud.zhou@mediatek.com&gt;, &lt;yong.wu@mediatek.com&gt;
Subject: [PATCH v2 3/8] iommu/mediatek: Add mt2712 IOMMU support
Date: Mon, 21 Aug 2017 19:00:16 +0800
Message-ID: &lt;1503313221-26453-4-git-send-email-yong.wu@mediatek.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1503313221-26453-1-git-send-email-yong.wu@mediatek.com&gt;
References: &lt;1503313221-26453-1-git-send-email-yong.wu@mediatek.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-MTK: N
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123111">Yong Wu</a> - Aug. 21, 2017, 11 a.m.</div>
<pre class="content">
The M4U IP blocks in mt2712 is MTK&#39;s generation2 M4U which use the
ARM Short-descriptor like mt8173, and most of the HW registers are
the same.

The difference is that there are 2 M4U HWs in mt2712 while there&#39;s
only one in mt8173. The purpose of 2 M4U HWs is for balance the
bandwidth.

Normally if there are 2 M4U HWs, there should be 2 iommu domains,
each M4U has a iommu domain.
<span class="signed-off-by">
Signed-off-by: Yong Wu &lt;yong.wu@mediatek.com&gt;</span>
---
 drivers/iommu/mtk_iommu.c  | 71 ++++++++++++++++++++++------------------------
 drivers/iommu/mtk_iommu.h  |  7 +++++
 drivers/memory/mtk-smi.c   | 54 +++++++++++++++++++++++++++++++++--
 include/soc/mediatek/smi.h |  2 +-
 4 files changed, 93 insertions(+), 41 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/mtk_iommu.c b/drivers/iommu/mtk_iommu.c</span>
<span class="p_header">index 4db6c8f..df23e02 100644</span>
<span class="p_header">--- a/drivers/iommu/mtk_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/mtk_iommu.c</span>
<span class="p_chunk">@@ -53,7 +53,11 @@</span> <span class="p_context"></span>
 
 #define REG_MMU_CTRL_REG			0x110
 #define F_MMU_PREFETCH_RT_REPLACE_MOD		BIT(4)
<span class="p_del">-#define F_MMU_TF_PROTECT_SEL(prot)		(((prot) &amp; 0x3) &lt;&lt; 5)</span>
<span class="p_add">+#define F_MMU_TF_PROTECT_SEL_SHIFT(data) \</span>
<span class="p_add">+	((data)-&gt;m4u_plat == M4U_MT2712 ? 4 : 5)</span>
<span class="p_add">+/* It&#39;s named by F_MMU_TF_PROT_SEL in mt2712. */</span>
<span class="p_add">+#define F_MMU_TF_PROTECT_SEL(prot, data) \</span>
<span class="p_add">+	(((prot) &amp; 0x3) &lt;&lt; F_MMU_TF_PROTECT_SEL_SHIFT(data))</span>
 
 #define REG_MMU_IVRP_PADDR			0x114
 #define F_MMU_IVRP_PA_SET(pa, ext)		(((pa) &gt;&gt; 1) | ((!!(ext)) &lt;&lt; 31))
<span class="p_chunk">@@ -96,7 +100,7 @@</span> <span class="p_context"></span>
  * Get the local arbiter ID and the portid within the larb arbiter
  * from mtk_m4u_id which is defined by MTK_M4U_ID.
  */
<span class="p_del">-#define MTK_M4U_TO_LARB(id)		(((id) &gt;&gt; 5) &amp; 0x7)</span>
<span class="p_add">+#define MTK_M4U_TO_LARB(id)		(((id) &gt;&gt; 5) &amp; 0xf)</span>
 #define MTK_M4U_TO_PORT(id)		((id) &amp; 0x1f)
 
 struct mtk_iommu_domain {
<span class="p_chunk">@@ -307,10 +311,6 @@</span> <span class="p_context"> static int mtk_iommu_attach_device(struct iommu_domain *domain,</span>
 			data-&gt;m4u_dom = NULL;
 			return ret;
 		}
<span class="p_del">-	} else if (data-&gt;m4u_dom != dom) {</span>
<span class="p_del">-		/* All the client devices should be in the same m4u domain */</span>
<span class="p_del">-		dev_err(dev, &quot;try to attach into the error iommu domain\n&quot;);</span>
<span class="p_del">-		return -EPERM;</span>
 	}
 
 	mtk_iommu_config(data, dev, true);
<span class="p_chunk">@@ -470,8 +470,9 @@</span> <span class="p_context"> static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)</span>
 		return ret;
 	}
 
<span class="p_del">-	regval = F_MMU_PREFETCH_RT_REPLACE_MOD |</span>
<span class="p_del">-		F_MMU_TF_PROTECT_SEL(2);</span>
<span class="p_add">+	regval = F_MMU_TF_PROTECT_SEL(2, data);</span>
<span class="p_add">+	if (data-&gt;m4u_plat == M4U_MT8173)</span>
<span class="p_add">+		regval |= F_MMU_PREFETCH_RT_REPLACE_MOD;</span>
 	writel_relaxed(regval, data-&gt;base + REG_MMU_CTRL_REG);
 
 	regval = F_L2_MULIT_HIT_EN |
<span class="p_chunk">@@ -493,9 +494,11 @@</span> <span class="p_context"> static int mtk_iommu_hw_init(const struct mtk_iommu_data *data)</span>
 
 	writel_relaxed(F_MMU_IVRP_PA_SET(data-&gt;protect_base, data-&gt;enable_4GB),
 		       data-&gt;base + REG_MMU_IVRP_PADDR);
<span class="p_del">-</span>
 	writel_relaxed(0, data-&gt;base + REG_MMU_DCM_DIS);
<span class="p_del">-	writel_relaxed(0, data-&gt;base + REG_MMU_STANDARD_AXI_MODE);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* It&#39;s MISC control register whose default value is ok except mt8173.*/</span>
<span class="p_add">+	if (data-&gt;m4u_plat == M4U_MT8173)</span>
<span class="p_add">+		writel_relaxed(0, data-&gt;base + REG_MMU_STANDARD_AXI_MODE);</span>
 
 	if (devm_request_irq(data-&gt;dev, data-&gt;irq, mtk_iommu_isr, 0,
 			     dev_name(data-&gt;dev), (void *)data)) {
<span class="p_chunk">@@ -527,6 +530,7 @@</span> <span class="p_context"> static int mtk_iommu_probe(struct platform_device *pdev)</span>
 	if (!data)
 		return -ENOMEM;
 	data-&gt;dev = dev;
<span class="p_add">+	data-&gt;m4u_plat = (enum mtk_iommu_plat)of_device_get_match_data(dev);</span>
 
 	/* Protect memory. HW will access here while translation fault.*/
 	protect = devm_kzalloc(dev, MTK_PROTECT_PA_ALIGN * 2, GFP_KERNEL);
<span class="p_chunk">@@ -560,6 +564,7 @@</span> <span class="p_context"> static int mtk_iommu_probe(struct platform_device *pdev)</span>
 	for (i = 0; i &lt; larb_nr; i++) {
 		struct device_node *larbnode;
 		struct platform_device *plarbdev;
<span class="p_add">+		u32 id;</span>
 
 		larbnode = of_parse_phandle(dev-&gt;of_node, &quot;mediatek,larbs&quot;, i);
 		if (!larbnode)
<span class="p_chunk">@@ -568,17 +573,14 @@</span> <span class="p_context"> static int mtk_iommu_probe(struct platform_device *pdev)</span>
 		if (!of_device_is_available(larbnode))
 			continue;
 
<span class="p_add">+		ret = of_property_read_u32(larbnode, &quot;mediatek,larb-id&quot;, &amp;id);</span>
<span class="p_add">+		if (ret)/* The id is consecutive if there is no this property */</span>
<span class="p_add">+			id = i;</span>
<span class="p_add">+</span>
 		plarbdev = of_find_device_by_node(larbnode);
<span class="p_del">-		if (!plarbdev) {</span>
<span class="p_del">-			plarbdev = of_platform_device_create(</span>
<span class="p_del">-						larbnode, NULL,</span>
<span class="p_del">-						platform_bus_type.dev_root);</span>
<span class="p_del">-			if (!plarbdev) {</span>
<span class="p_del">-				of_node_put(larbnode);</span>
<span class="p_del">-				return -EPROBE_DEFER;</span>
<span class="p_del">-			}</span>
<span class="p_del">-		}</span>
<span class="p_del">-		data-&gt;smi_imu.larb_imu[i].dev = &amp;plarbdev-&gt;dev;</span>
<span class="p_add">+		if (!plarbdev)</span>
<span class="p_add">+			return -EPROBE_DEFER;</span>
<span class="p_add">+		data-&gt;smi_imu.larb_imu[id].dev = &amp;plarbdev-&gt;dev;</span>
 
 		component_match_add_release(dev, &amp;match, release_of,
 					    compare_of, larbnode);
<span class="p_chunk">@@ -646,8 +648,6 @@</span> <span class="p_context"> static int __maybe_unused mtk_iommu_resume(struct device *dev)</span>
 	struct mtk_iommu_suspend_reg *reg = &amp;data-&gt;reg;
 	void __iomem *base = data-&gt;base;
 
<span class="p_del">-	writel_relaxed(data-&gt;m4u_dom-&gt;cfg.arm_v7s_cfg.ttbr[0],</span>
<span class="p_del">-		       base + REG_MMU_PT_BASE_ADDR);</span>
 	writel_relaxed(reg-&gt;standard_axi_mode,
 		       base + REG_MMU_STANDARD_AXI_MODE);
 	writel_relaxed(reg-&gt;dcm_dis, base + REG_MMU_DCM_DIS);
<span class="p_chunk">@@ -656,15 +656,19 @@</span> <span class="p_context"> static int __maybe_unused mtk_iommu_resume(struct device *dev)</span>
 	writel_relaxed(reg-&gt;int_main_control, base + REG_MMU_INT_MAIN_CONTROL);
 	writel_relaxed(F_MMU_IVRP_PA_SET(data-&gt;protect_base, data-&gt;enable_4GB),
 		       base + REG_MMU_IVRP_PADDR);
<span class="p_add">+	if (data-&gt;m4u_dom)</span>
<span class="p_add">+		writel(data-&gt;m4u_dom-&gt;cfg.arm_v7s_cfg.ttbr[0],</span>
<span class="p_add">+		       base + REG_MMU_PT_BASE_ADDR);</span>
 	return 0;
 }
 
<span class="p_del">-const struct dev_pm_ops mtk_iommu_pm_ops = {</span>
<span class="p_add">+static const struct dev_pm_ops mtk_iommu_pm_ops = {</span>
 	SET_SYSTEM_SLEEP_PM_OPS(mtk_iommu_suspend, mtk_iommu_resume)
 };
 
 static const struct of_device_id mtk_iommu_of_ids[] = {
<span class="p_del">-	{ .compatible = &quot;mediatek,mt8173-m4u&quot;, },</span>
<span class="p_add">+	{ .compatible = &quot;mediatek,mt2712-m4u&quot;, .data = (void *)M4U_MT2712},</span>
<span class="p_add">+	{ .compatible = &quot;mediatek,mt8173-m4u&quot;, .data = (void *)M4U_MT8173},</span>
 	{}
 };
 
<span class="p_chunk">@@ -673,27 +677,20 @@</span> <span class="p_context"> static int __maybe_unused mtk_iommu_resume(struct device *dev)</span>
 	.remove	= mtk_iommu_remove,
 	.driver	= {
 		.name = &quot;mtk-iommu&quot;,
<span class="p_del">-		.of_match_table = mtk_iommu_of_ids,</span>
<span class="p_add">+		.of_match_table = of_match_ptr(mtk_iommu_of_ids),</span>
 		.pm = &amp;mtk_iommu_pm_ops,
 	}
 };
 
<span class="p_del">-static int mtk_iommu_init_fn(struct device_node *np)</span>
<span class="p_add">+static int __init mtk_iommu_init(void)</span>
 {
 	int ret;
<span class="p_del">-	struct platform_device *pdev;</span>
<span class="p_del">-</span>
<span class="p_del">-	pdev = of_platform_device_create(np, NULL, platform_bus_type.dev_root);</span>
<span class="p_del">-	if (!pdev)</span>
<span class="p_del">-		return -ENOMEM;</span>
 
 	ret = platform_driver_register(&amp;mtk_iommu_driver);
<span class="p_del">-	if (ret) {</span>
<span class="p_del">-		pr_err(&quot;%s: Failed to register driver\n&quot;, __func__);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if (ret != 0)</span>
<span class="p_add">+		pr_err(&quot;Failed to register MTK IOMMU driver\n&quot;);</span>
 
<span class="p_del">-	return 0;</span>
<span class="p_add">+	return ret;</span>
 }
 
<span class="p_del">-IOMMU_OF_DECLARE(mtkm4u, &quot;mediatek,mt8173-m4u&quot;, mtk_iommu_init_fn);</span>
<span class="p_add">+subsys_initcall(mtk_iommu_init)</span>
<span class="p_header">diff --git a/drivers/iommu/mtk_iommu.h b/drivers/iommu/mtk_iommu.h</span>
<span class="p_header">index c06cc91..462e593 100644</span>
<span class="p_header">--- a/drivers/iommu/mtk_iommu.h</span>
<span class="p_header">+++ b/drivers/iommu/mtk_iommu.h</span>
<span class="p_chunk">@@ -34,6 +34,12 @@</span> <span class="p_context"> struct mtk_iommu_suspend_reg {</span>
 	u32				int_main_control;
 };
 
<span class="p_add">+enum mtk_iommu_plat {</span>
<span class="p_add">+	M4U_MT2701,</span>
<span class="p_add">+	M4U_MT2712,</span>
<span class="p_add">+	M4U_MT8173,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct mtk_iommu_domain;
 
 struct mtk_iommu_data {
<span class="p_chunk">@@ -50,6 +56,7 @@</span> <span class="p_context"> struct mtk_iommu_data {</span>
 	bool				tlb_flush_active;
 
 	struct iommu_device		iommu;
<span class="p_add">+	enum mtk_iommu_plat		m4u_plat;</span>
 };
 
 static inline int compare_of(struct device *dev, void *data)
<span class="p_header">diff --git a/drivers/memory/mtk-smi.c b/drivers/memory/mtk-smi.c</span>
<span class="p_header">index 13f8c45..8ffe321 100644</span>
<span class="p_header">--- a/drivers/memory/mtk-smi.c</span>
<span class="p_header">+++ b/drivers/memory/mtk-smi.c</span>
<span class="p_chunk">@@ -23,7 +23,10 @@</span> <span class="p_context"></span>
 #include &lt;soc/mediatek/smi.h&gt;
 #include &lt;dt-bindings/memory/mt2701-larb-port.h&gt;
 
<span class="p_add">+/* mt8173 */</span>
 #define SMI_LARB_MMU_EN		0xf00
<span class="p_add">+</span>
<span class="p_add">+/* mt2701 */</span>
 #define REG_SMI_SECUR_CON_BASE		0x5c0
 
 /* every register control 8 port, register offset 0x4 */
<span class="p_chunk">@@ -41,6 +44,10 @@</span> <span class="p_context"></span>
 /* mt2701 domain should be set to 3 */
 #define SMI_SECUR_CON_VAL_DOMAIN(id)	(0x3 &lt;&lt; ((((id) &amp; 0x7) &lt;&lt; 2) + 1))
 
<span class="p_add">+/* mt2712 */</span>
<span class="p_add">+#define SMI_LARB_NONSEC_CON(id)	(0x380 + ((id) * 4))</span>
<span class="p_add">+#define F_MMU_EN		BIT(0)</span>
<span class="p_add">+</span>
 struct mtk_smi_larb_gen {
 	bool need_larbid;
 	int port_in_larb[MTK_LARB_NR_MAX + 1];
<span class="p_chunk">@@ -149,6 +156,15 @@</span> <span class="p_context"> void mtk_smi_larb_put(struct device *larbdev)</span>
 	struct mtk_smi_iommu *smi_iommu = data;
 	unsigned int         i;
 
<span class="p_add">+	if (larb-&gt;larb_gen-&gt;need_larbid) {</span>
<span class="p_add">+		larb-&gt;mmu = &amp;smi_iommu-&gt;larb_imu[larb-&gt;larbid].mmu;</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If there is no larbid property, Loop to find the corresponding</span>
<span class="p_add">+	 * iommu information.</span>
<span class="p_add">+	 */</span>
 	for (i = 0; i &lt; smi_iommu-&gt;larb_nr; i++) {
 		if (dev == smi_iommu-&gt;larb_imu[i].dev) {
 			/* The &#39;mmu&#39; may be updated in iommu-attach/detach. */
<span class="p_chunk">@@ -159,13 +175,32 @@</span> <span class="p_context"> void mtk_smi_larb_put(struct device *larbdev)</span>
 	return -ENODEV;
 }
 
<span class="p_del">-static void mtk_smi_larb_config_port(struct device *dev)</span>
<span class="p_add">+static void mtk_smi_larb_config_port_mt2712(struct device *dev)</span>
 {
 	struct mtk_smi_larb *larb = dev_get_drvdata(dev);
<span class="p_add">+	u32 reg;</span>
<span class="p_add">+	int i;</span>
 
<span class="p_del">-	writel(*larb-&gt;mmu, larb-&gt;base + SMI_LARB_MMU_EN);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * larb 8/9 is the bdpsys larb, the iommu_en is enabled defaultly.</span>
<span class="p_add">+	 * Don&#39;t need to set it again.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (larb-&gt;larbid == 8 || larb-&gt;larbid == 9)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_set_bit(i, (unsigned long *)larb-&gt;mmu, 32) {</span>
<span class="p_add">+		reg = readl_relaxed(larb-&gt;base + SMI_LARB_NONSEC_CON(i));</span>
<span class="p_add">+		reg |= F_MMU_EN;</span>
<span class="p_add">+		writel(reg, larb-&gt;base + SMI_LARB_NONSEC_CON(i));</span>
<span class="p_add">+	}</span>
 }
 
<span class="p_add">+static void mtk_smi_larb_config_port_mt8173(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mtk_smi_larb *larb = dev_get_drvdata(dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	writel(*larb-&gt;mmu, larb-&gt;base + SMI_LARB_MMU_EN);</span>
<span class="p_add">+}</span>
 
 static void mtk_smi_larb_config_port_gen1(struct device *dev)
 {
<span class="p_chunk">@@ -211,7 +246,7 @@</span> <span class="p_context"> static void mtk_smi_larb_config_port_gen1(struct device *dev)</span>
 
 static const struct mtk_smi_larb_gen mtk_smi_larb_mt8173 = {
 	/* mt8173 do not need the port in larb */
<span class="p_del">-	.config_port = mtk_smi_larb_config_port,</span>
<span class="p_add">+	.config_port = mtk_smi_larb_config_port_mt8173,</span>
 };
 
 static const struct mtk_smi_larb_gen mtk_smi_larb_mt2701 = {
<span class="p_chunk">@@ -223,6 +258,11 @@</span> <span class="p_context"> static void mtk_smi_larb_config_port_gen1(struct device *dev)</span>
 	.config_port = mtk_smi_larb_config_port_gen1,
 };
 
<span class="p_add">+static const struct mtk_smi_larb_gen mtk_smi_larb_mt2712 = {</span>
<span class="p_add">+	.need_larbid = true,</span>
<span class="p_add">+	.config_port = mtk_smi_larb_config_port_mt2712,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static const struct of_device_id mtk_smi_larb_of_ids[] = {
 	{
 		.compatible = &quot;mediatek,mt8173-smi-larb&quot;,
<span class="p_chunk">@@ -232,6 +272,10 @@</span> <span class="p_context"> static void mtk_smi_larb_config_port_gen1(struct device *dev)</span>
 		.compatible = &quot;mediatek,mt2701-smi-larb&quot;,
 		.data = &amp;mtk_smi_larb_mt2701
 	},
<span class="p_add">+	{</span>
<span class="p_add">+		.compatible = &quot;mediatek,mt2712-smi-larb&quot;,</span>
<span class="p_add">+		.data = &amp;mtk_smi_larb_mt2712</span>
<span class="p_add">+	},</span>
 	{}
 };
 
<span class="p_chunk">@@ -318,6 +362,10 @@</span> <span class="p_context"> static int mtk_smi_larb_remove(struct platform_device *pdev)</span>
 		.compatible = &quot;mediatek,mt2701-smi-common&quot;,
 		.data = (void *)MTK_SMI_GEN1
 	},
<span class="p_add">+	{</span>
<span class="p_add">+		.compatible = &quot;mediatek,mt2712-smi-common&quot;,</span>
<span class="p_add">+		.data = (void *)MTK_SMI_GEN2</span>
<span class="p_add">+	},</span>
 	{}
 };
 
<span class="p_header">diff --git a/include/soc/mediatek/smi.h b/include/soc/mediatek/smi.h</span>
<span class="p_header">index 8893c5e..5201e90 100644</span>
<span class="p_header">--- a/include/soc/mediatek/smi.h</span>
<span class="p_header">+++ b/include/soc/mediatek/smi.h</span>
<span class="p_chunk">@@ -19,7 +19,7 @@</span> <span class="p_context"></span>
 
 #ifdef CONFIG_MTK_SMI
 
<span class="p_del">-#define MTK_LARB_NR_MAX		8</span>
<span class="p_add">+#define MTK_LARB_NR_MAX		16</span>
 
 #define MTK_SMI_MMU_EN(port)	BIT(port)
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



