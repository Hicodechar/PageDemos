
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[15/25] x86, pkeys: check VMAs and PTEs for protection keys - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [15/25] x86, pkeys: check VMAs and PTEs for protection keys</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 28, 2015, 7:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150928191823.CAE64CF3@viggo.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7279441/mbox/"
   >mbox</a>
|
   <a href="/patch/7279441/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7279441/">/patch/7279441/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 782879F32B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Sep 2015 19:20:30 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3CBF32067A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Sep 2015 19:20:29 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 985F920741
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 28 Sep 2015 19:20:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752078AbbI1TS1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 28 Sep 2015 15:18:27 -0400
Received: from mga14.intel.com ([192.55.52.115]:6479 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751710AbbI1TSY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 28 Sep 2015 15:18:24 -0400
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by fmsmga103.fm.intel.com with ESMTP; 28 Sep 2015 12:18:23 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.17,604,1437462000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;570003089&quot;
Received: from viggo.jf.intel.com (HELO localhost.localdomain)
	([10.54.39.19])
	by FMSMGA003.fm.intel.com with ESMTP; 28 Sep 2015 12:18:23 -0700
Subject: [PATCH 15/25] x86, pkeys: check VMAs and PTEs for protection keys
To: dave@sr71.net
Cc: borntraeger@de.ibm.com, x86@kernel.org,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	dave.hansen@linux.intel.com
From: Dave Hansen &lt;dave@sr71.net&gt;
Date: Mon, 28 Sep 2015 12:18:23 -0700
References: &lt;20150928191817.035A64E2@viggo.jf.intel.com&gt;
In-Reply-To: &lt;20150928191817.035A64E2@viggo.jf.intel.com&gt;
Message-Id: &lt;20150928191823.CAE64CF3@viggo.jf.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Sept. 28, 2015, 7:18 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

Today, for normal faults and page table walks, we check the VMA
and/or PTE to ensure that it is compatible with the action.  For
instance, if we get a write fault on a non-writeable VMA, we
SIGSEGV.

We try to do the same thing for protection keys.  Basically, we
try to make sure that if a user does this:

	mprotect(ptr, size, PROT_NONE);
	*ptr = foo;

they see the same effects with protection keys when they do this:

	mprotect(ptr, size, PROT_READ|PROT_WRITE);
	set_pkey(ptr, size, 4);
	wrpkru(0xffffff3f); // access disable pkey 4
	*ptr = foo;

The state to do that checking is in the VMA, but we also
sometimes have to do it on the page tables only, like when doing
a get_user_pages_fast() where we have no VMA.

We add two functions and expose them to generic code:

	arch_pte_access_permitted(pte, write)
	arch_vma_access_permitted(vma, write)

These are, of course, backed up in x86 arch code with checks
against the PTE or VMA&#39;s protection key.

But, there are also cases where we do not want to respect
protection keys.  When we ptrace(), for instance, we do not want
to apply the tracer&#39;s PKRU permissions to the PTEs from the
process being traced.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
---

 b/arch/powerpc/include/asm/mmu_context.h   |   11 ++++++
 b/arch/s390/include/asm/mmu_context.h      |   11 ++++++
 b/arch/unicore32/include/asm/mmu_context.h |   11 ++++++
 b/arch/x86/include/asm/mmu_context.h       |   51 ++++++++++++++++++++++++++++-
 b/arch/x86/include/asm/pgtable.h           |   29 ++++++++++++++++
 b/arch/x86/mm/fault.c                      |   21 +++++++++++
 b/arch/x86/mm/gup.c                        |    3 +
 b/include/asm-generic/mm_hooks.h           |   11 ++++++
 b/mm/gup.c                                 |   17 ++++++++-
 b/mm/memory.c                              |    4 ++
 10 files changed, 165 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11822">Jerome Glisse</a> - Oct. 22, 2015, 8:57 p.m.</div>
<pre class="content">
On Mon, Sep 28, 2015 at 12:18:23PM -0700, Dave Hansen wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Today, for normal faults and page table walks, we check the VMA</span>
<span class="quote">&gt; and/or PTE to ensure that it is compatible with the action.  For</span>
<span class="quote">&gt; instance, if we get a write fault on a non-writeable VMA, we</span>
<span class="quote">&gt; SIGSEGV.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We try to do the same thing for protection keys.  Basically, we</span>
<span class="quote">&gt; try to make sure that if a user does this:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	mprotect(ptr, size, PROT_NONE);</span>
<span class="quote">&gt; 	*ptr = foo;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; they see the same effects with protection keys when they do this:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	mprotect(ptr, size, PROT_READ|PROT_WRITE);</span>
<span class="quote">&gt; 	set_pkey(ptr, size, 4);</span>
<span class="quote">&gt; 	wrpkru(0xffffff3f); // access disable pkey 4</span>
<span class="quote">&gt; 	*ptr = foo;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The state to do that checking is in the VMA, but we also</span>
<span class="quote">&gt; sometimes have to do it on the page tables only, like when doing</span>
<span class="quote">&gt; a get_user_pages_fast() where we have no VMA.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We add two functions and expose them to generic code:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	arch_pte_access_permitted(pte, write)</span>
<span class="quote">&gt; 	arch_vma_access_permitted(vma, write)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; These are, of course, backed up in x86 arch code with checks</span>
<span class="quote">&gt; against the PTE or VMA&#39;s protection key.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But, there are also cases where we do not want to respect</span>
<span class="quote">&gt; protection keys.  When we ptrace(), for instance, we do not want</span>
<span class="quote">&gt; to apply the tracer&#39;s PKRU permissions to the PTEs from the</span>
<span class="quote">&gt; process being traced.</span>


Well i am bit puzzle here because this will not provide consistant
protection as far as GUP (get_user_pages) is concern, assuming i
understand the pkru thing properly. Those are register local to CPU
and they are writeable by userspace thread so thread can temporarily
revoke access to range while executing untrusted subfunctions.

I have not read all the patches, but here i assume that for GUP you do
not first call arch_vma_access_permitted(). So issue i see is that GUP
for a process might happen inside another process and that process might
have different pkru protection keys, effectively randomly allowing or
forbidding a device driver to perform a GUP from say some workqueue that
just happen to be schedule against a different processor/thread than the
one against which it is doing the GUP for.

Second and more fundamental thing i have issue with is that this whole
pkru keys are centric to CPU POV ie this is a CPU feature. So i do not
believe that device driver should be forbidden to do GUP base on pkru
keys.

Tying this to the pkru reg value of whatever processor happens to be
running some device driver kernel function that try to do a GUP seems
broken to me.

Sadly setting properties like pkru keys per device is not something that
is easy to do. I would do it on a per device file basis and allow user
space program to change them against the device file, then device driver
doing GUP would use that to check against the pte key and allow forbid
GUP.

Also doing it on per device file makes it harder for program to leverage
this feature as now they have to think about all device file they have
open. Maybe we need to keep a list of device that are use by a process
in the task struct and allow to set pkey globaly for all devices, while
allowing overriding this common default on per device basis.

So as first i would just allow GUP to always work and then come up with
syscall to allow to set pkey on device file. This obviously is a lot more
work as you need to go over all device driver using GUP.

This are my thoughts so far.

Cheers,
Jérôme
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2302">Dave Hansen</a> - Oct. 22, 2015, 9:23 p.m.</div>
<pre class="content">
On 10/22/2015 01:57 PM, Jerome Glisse wrote:
<span class="quote">&gt; I have not read all the patches, but here i assume that for GUP you do</span>
<span class="quote">&gt; not first call arch_vma_access_permitted(). So issue i see is that GUP</span>
<span class="quote">&gt; for a process might happen inside another process and that process might</span>
<span class="quote">&gt; have different pkru protection keys, effectively randomly allowing or</span>
<span class="quote">&gt; forbidding a device driver to perform a GUP from say some workqueue that</span>
<span class="quote">&gt; just happen to be schedule against a different processor/thread than the</span>
<span class="quote">&gt; one against which it is doing the GUP for.</span>

There are some places where there is no real context from which we can
determine access rights.  ptrace is a good example.  We don&#39;t enforce
PKEYs when walking _another_ process&#39;s page tables.

Can you give an example of where a process might be doing a gup and it
is completely separate from the CPU context that it&#39;s being executed under?
<span class="quote">
&gt; Second and more fundamental thing i have issue with is that this whole</span>
<span class="quote">&gt; pkru keys are centric to CPU POV ie this is a CPU feature. So i do not</span>
<span class="quote">&gt; believe that device driver should be forbidden to do GUP base on pkru</span>
<span class="quote">&gt; keys.</span>

I don&#39;t think of it as something necessarily central to the CPU, but
something central to things that walk page tables.  We mark page tables
with PKEYs and things that walk them will have certain rights.
<span class="quote">
&gt; Tying this to the pkru reg value of whatever processor happens to be</span>
<span class="quote">&gt; running some device driver kernel function that try to do a GUP seems</span>
<span class="quote">&gt; broken to me.</span>

That&#39;s one way to look at it.  Another way is that PKRU is specifying
some real _intent_ about whether we want access to be allowed to some
memory.
<span class="quote">
&gt; So as first i would just allow GUP to always work and then come up with</span>
<span class="quote">&gt; syscall to allow to set pkey on device file. This obviously is a lot more</span>
<span class="quote">&gt; work as you need to go over all device driver using GUP.</span>

I wouldn&#39;t be opposed to adding some context to the thread (like
pagefault_disable()) that indicates whether we should enforce protection
keys.  If we are in some asynchronous context, disassociated from the
running CPU&#39;s protection keys, we could set a flag.

I&#39;d really appreciate if you could point to some concrete examples here
which could actually cause a problem, like workqueues doing gups.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11822">Jerome Glisse</a> - Oct. 22, 2015, 10:25 p.m.</div>
<pre class="content">
On Thu, Oct 22, 2015 at 02:23:08PM -0700, Dave Hansen wrote:
<span class="quote">&gt; On 10/22/2015 01:57 PM, Jerome Glisse wrote:</span>
<span class="quote">&gt; &gt; I have not read all the patches, but here i assume that for GUP you do</span>
<span class="quote">&gt; &gt; not first call arch_vma_access_permitted(). So issue i see is that GUP</span>
<span class="quote">&gt; &gt; for a process might happen inside another process and that process might</span>
<span class="quote">&gt; &gt; have different pkru protection keys, effectively randomly allowing or</span>
<span class="quote">&gt; &gt; forbidding a device driver to perform a GUP from say some workqueue that</span>
<span class="quote">&gt; &gt; just happen to be schedule against a different processor/thread than the</span>
<span class="quote">&gt; &gt; one against which it is doing the GUP for.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There are some places where there is no real context from which we can</span>
<span class="quote">&gt; determine access rights.  ptrace is a good example.  We don&#39;t enforce</span>
<span class="quote">&gt; PKEYs when walking _another_ process&#39;s page tables.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you give an example of where a process might be doing a gup and it</span>
<span class="quote">&gt; is completely separate from the CPU context that it&#39;s being executed under?</span>

In drivers/iommu/amd_iommu_v2.c thought this is on AMD platform. I also
believe that in infiniband one can have GUP call from workqueue that can
run at any time. In GPU driver we also use GUP thought at this point we
do not allow another process from accessing a buffer that is populated
by GUP from another process.

I am also here mainly talking about what future GPU will do where you will
have the CPU service page fault from GPU inside a workqueue that can run
at any point in time.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; Second and more fundamental thing i have issue with is that this whole</span>
<span class="quote">&gt; &gt; pkru keys are centric to CPU POV ie this is a CPU feature. So i do not</span>
<span class="quote">&gt; &gt; believe that device driver should be forbidden to do GUP base on pkru</span>
<span class="quote">&gt; &gt; keys.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t think of it as something necessarily central to the CPU, but</span>
<span class="quote">&gt; something central to things that walk page tables.  We mark page tables</span>
<span class="quote">&gt; with PKEYs and things that walk them will have certain rights.</span>

My point is that we are seing devices that want to walk the page table and
they do it from a work queue inside the kernel which can run against another
process than the one they are doing the walk from.

I am sure there is already upstream device driver that does so, i have not
check all of them to confirm thought.
<span class="quote">

&gt; &gt; Tying this to the pkru reg value of whatever processor happens to be</span>
<span class="quote">&gt; &gt; running some device driver kernel function that try to do a GUP seems</span>
<span class="quote">&gt; &gt; broken to me.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s one way to look at it.  Another way is that PKRU is specifying</span>
<span class="quote">&gt; some real _intent_ about whether we want access to be allowed to some</span>
<span class="quote">&gt; memory.</span>

I think i misexpress myself here, yes PKRU is about specifying intent but
specifying it for CPU thread not for device thread. GPU for instance have
threads that run on behalf of a given process and i would rather see some
kind of coherent way to specify that for each devices like you allow it
to specify it on per CPU thread basis.
<span class="quote">

&gt; &gt; So as first i would just allow GUP to always work and then come up with</span>
<span class="quote">&gt; &gt; syscall to allow to set pkey on device file. This obviously is a lot more</span>
<span class="quote">&gt; &gt; work as you need to go over all device driver using GUP.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I wouldn&#39;t be opposed to adding some context to the thread (like</span>
<span class="quote">&gt; pagefault_disable()) that indicates whether we should enforce protection</span>
<span class="quote">&gt; keys.  If we are in some asynchronous context, disassociated from the</span>
<span class="quote">&gt; running CPU&#39;s protection keys, we could set a flag.</span>

I was simply thinking of having a global set of pkeys against the process
mm struct which would be the default global setting for all device GUP
access. This global set could be override by userspace on a per device
basis allowing some device to have more access than others.
<span class="quote">

&gt; I&#39;d really appreciate if you could point to some concrete examples here</span>
<span class="quote">&gt; which could actually cause a problem, like workqueues doing gups.</span>

Well i could grep for all current user of GUP, but i can tell you that this
is gonna be the model for GPU thread ie a kernel workqueue gonna handle
page fault on behalf of GPU and will perform equivalent of GUP. Also apply
for infiniband ODP thing which is upstream.

Cheers,
Jérôme
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff -puN arch/powerpc/include/asm/mmu_context.h~pkeys-11-pte-fault arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h~pkeys-11-pte-fault	2015-09-28 11:39:47.619258875 -0700</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h	2015-09-28 11:39:47.637259694 -0700</span>
<span class="p_chunk">@@ -148,5 +148,16 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __KERNEL__ */
 #endif /* __ASM_POWERPC_MMU_CONTEXT_H */
<span class="p_header">diff -puN arch/s390/include/asm/mmu_context.h~pkeys-11-pte-fault arch/s390/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/s390/include/asm/mmu_context.h~pkeys-11-pte-fault	2015-09-28 11:39:47.621258967 -0700</span>
<span class="p_header">+++ b/arch/s390/include/asm/mmu_context.h	2015-09-28 11:39:47.638259740 -0700</span>
<span class="p_chunk">@@ -130,4 +130,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif /* __S390_MMU_CONTEXT_H */
<span class="p_header">diff -puN arch/unicore32/include/asm/mmu_context.h~pkeys-11-pte-fault arch/unicore32/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/unicore32/include/asm/mmu_context.h~pkeys-11-pte-fault	2015-09-28 11:39:47.622259012 -0700</span>
<span class="p_header">+++ b/arch/unicore32/include/asm/mmu_context.h	2015-09-28 11:39:47.638259740 -0700</span>
<span class="p_chunk">@@ -97,4 +97,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif
<span class="p_header">diff -puN arch/x86/include/asm/mmu_context.h~pkeys-11-pte-fault arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h~pkeys-11-pte-fault	2015-09-28 11:39:47.624259103 -0700</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h	2015-09-28 11:39:47.638259740 -0700</span>
<span class="p_chunk">@@ -263,4 +263,53 @@</span> <span class="p_context"> static inline u16 vma_pkey(struct vm_are</span>
 	return pkey;
 }
 
<span class="p_del">-#endif /* _ASM_X86_MMU_CONTEXT_H */</span>
<span class="p_add">+static inline bool __pkru_allows_pkey(u16 pkey, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 pkru = read_pkru();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!__pkru_allows_read(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (write &amp;&amp; !__pkru_allows_write(pkru, pkey))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * We only want to enforce protection keys on the current process</span>
<span class="p_add">+ * because we effectively have no access to PKRU for other</span>
<span class="p_add">+ * processes or any way to tell *which * PKRU in a threaded</span>
<span class="p_add">+ * process we could use.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * So do not enforce things if the VMA is not from the current</span>
<span class="p_add">+ * mm, or if we are in a kernel thread.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool vma_is_foreign(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!current-&gt;mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Should PKRU be enforced on the access to this VMA?  If</span>
<span class="p_add">+	 * the VMA is from another process, then PKRU has no</span>
<span class="p_add">+	 * relevance and should not be enforced.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (current-&gt;mm != vma-&gt;vm_mm)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* allow access if the VMA is not one from this process */</span>
<span class="p_add">+	if (vma_is_foreign(vma))</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return __pkru_allows_pkey(vma_pkey(vma), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __pkru_allows_pkey(pte_pkey(pte), write);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif /* _ASM_X86_MMUeCONTEXT_H */</span>
<span class="p_header">diff -puN arch/x86/include/asm/pgtable.h~pkeys-11-pte-fault arch/x86/include/asm/pgtable.h</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h~pkeys-11-pte-fault	2015-09-28 11:39:47.626259194 -0700</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h	2015-09-28 11:39:47.639259785 -0700</span>
<span class="p_chunk">@@ -889,6 +889,35 @@</span> <span class="p_context"> static inline pte_t pte_swp_clear_soft_d</span>
 }
 #endif
 
<span class="p_add">+#define PKRU_AD_BIT 0x1</span>
<span class="p_add">+#define PKRU_WD_BIT 0x2</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_read(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	return !(pkru &amp; (PKRU_AD_BIT &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool __pkru_allows_write(u32 pkru, u16 pkey)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pkru_pkey_bits = pkey * 2;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access-disable disables writes too so we need to check</span>
<span class="p_add">+	 * both bits here.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return !(pkru &amp; ((PKRU_AD_BIT|PKRU_WD_BIT) &lt;&lt; pkru_pkey_bits));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u16 pte_pkey(pte_t pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="p_add">+	/* ifdef to avoid doing 59-bit shift on 32-bit values */</span>
<span class="p_add">+	return (pte_flags(pte) &amp; _PAGE_PKEY_MASK) &gt;&gt; _PAGE_BIT_PKEY_BIT0;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #include &lt;asm-generic/pgtable.h&gt;
 #endif	/* __ASSEMBLY__ */
 
<span class="p_header">diff -puN arch/x86/mm/fault.c~pkeys-11-pte-fault arch/x86/mm/fault.c</span>
<span class="p_header">--- a/arch/x86/mm/fault.c~pkeys-11-pte-fault	2015-09-28 11:39:47.627259240 -0700</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c	2015-09-28 11:39:47.639259785 -0700</span>
<span class="p_chunk">@@ -897,11 +897,21 @@</span> <span class="p_context"> bad_area(struct pt_regs *regs, unsigned</span>
 	__bad_area(regs, error_code, address, NULL, SEGV_MAPERR);
 }
 
<span class="p_add">+static inline bool bad_area_access_from_pkeys(unsigned long error_code,</span>
<span class="p_add">+		struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static noinline void
 bad_area_access_error(struct pt_regs *regs, unsigned long error_code,
 		      unsigned long address, struct vm_area_struct *vma)
 {
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_OSPKE) &amp;&amp; (error_code &amp; PF_PK))</span>
<span class="p_add">+	if (bad_area_access_from_pkeys(error_code, vma))</span>
 		__bad_area(regs, error_code, address, vma, SEGV_PKUERR);
 	else
 		__bad_area(regs, error_code, address, vma, SEGV_ACCERR);
<span class="p_chunk">@@ -1073,6 +1083,15 @@</span> <span class="p_context"> int show_unhandled_signals = 1;</span>
 static inline int
 access_error(unsigned long error_code, struct vm_area_struct *vma)
 {
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Access or read was blocked by protection keys. We do</span>
<span class="p_add">+	 * this check before any others because we do not want</span>
<span class="p_add">+	 * to, for instance, confuse a protection-key-denied</span>
<span class="p_add">+	 * write with one for which we should do a COW.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (error_code &amp; PF_PK)</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+</span>
 	if (error_code &amp; PF_WRITE) {
 		/* write, present and write, not present: */
 		if (unlikely(!(vma-&gt;vm_flags &amp; VM_WRITE)))
<span class="p_header">diff -puN arch/x86/mm/gup.c~pkeys-11-pte-fault arch/x86/mm/gup.c</span>
<span class="p_header">--- a/arch/x86/mm/gup.c~pkeys-11-pte-fault	2015-09-28 11:39:47.629259330 -0700</span>
<span class="p_header">+++ b/arch/x86/mm/gup.c	2015-09-28 11:39:47.640259831 -0700</span>
<span class="p_chunk">@@ -10,6 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/swap.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 
 static inline pte_t gup_get_pte(pte_t *ptep)
<span class="p_chunk">@@ -73,6 +74,8 @@</span> <span class="p_context"> static inline int pte_allows_gup(pte_t p</span>
 		return 0;
 	if (write &amp;&amp; !pte_write(pte))
 		return 0;
<span class="p_add">+	if (!arch_pte_access_permitted(pte, write))</span>
<span class="p_add">+		return 0;</span>
 	return 1;
 }
 
<span class="p_header">diff -puN include/asm-generic/mm_hooks.h~pkeys-11-pte-fault include/asm-generic/mm_hooks.h</span>
<span class="p_header">--- a/include/asm-generic/mm_hooks.h~pkeys-11-pte-fault	2015-09-28 11:39:47.631259421 -0700</span>
<span class="p_header">+++ b/include/asm-generic/mm_hooks.h	2015-09-28 11:39:47.640259831 -0700</span>
<span class="p_chunk">@@ -26,4 +26,15 @@</span> <span class="p_context"> static inline void arch_bprm_mm_init(str</span>
 {
 }
 
<span class="p_add">+static inline bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool arch_pte_access_permitted(pte_t pte, bool write)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* by default, allow everything */</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
 #endif	/* _ASM_GENERIC_MM_HOOKS_H */
<span class="p_header">diff -puN mm/gup.c~pkeys-11-pte-fault mm/gup.c</span>
<span class="p_header">--- a/mm/gup.c~pkeys-11-pte-fault	2015-09-28 11:39:47.632259467 -0700</span>
<span class="p_header">+++ b/mm/gup.c	2015-09-28 11:39:47.641259876 -0700</span>
<span class="p_chunk">@@ -13,6 +13,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/rwsem.h&gt;
 #include &lt;linux/hugetlb.h&gt;
 
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 
<span class="p_chunk">@@ -388,6 +389,8 @@</span> <span class="p_context"> static int check_vma_flags(struct vm_are</span>
 		if (!(vm_flags &amp; VM_MAYREAD))
 			return -EFAULT;
 	}
<span class="p_add">+	if (!arch_vma_access_permitted(vma, (gup_flags &amp; FOLL_WRITE)))</span>
<span class="p_add">+		return -EFAULT;</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -556,12 +559,19 @@</span> <span class="p_context"> EXPORT_SYMBOL(__get_user_pages);</span>
 
 bool vma_permits_fault(struct vm_area_struct *vma, unsigned int fault_flags)
 {
<span class="p_del">-        vm_flags_t vm_flags =</span>
<span class="p_del">-		(fault_flags &amp; FAULT_FLAG_WRITE) ? VM_WRITE : VM_READ;</span>
<span class="p_add">+	int write = (fault_flags &amp; FAULT_FLAG_WRITE);</span>
<span class="p_add">+	vm_flags_t vm_flags = write ? VM_WRITE : VM_READ;</span>
 
 	if (!(vm_flags &amp; vma-&gt;vm_flags))
 		return false;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The architecture might have a hardware protection</span>
<span class="p_add">+	 * mechanism other than read/write that can deny access</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!arch_vma_access_permitted(vma, write))</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
 	return true;
 }
 
<span class="p_chunk">@@ -1079,6 +1089,9 @@</span> <span class="p_context"> static int gup_pte_range(pmd_t pmd, unsi</span>
 			pte_protnone(pte) || (write &amp;&amp; !pte_write(pte)))
 			goto pte_unmap;
 
<span class="p_add">+		if (!arch_pte_access_permitted(pte, write))</span>
<span class="p_add">+			goto pte_unmap;</span>
<span class="p_add">+</span>
 		VM_BUG_ON(!pfn_valid(pte_pfn(pte)));
 		page = pte_page(pte);
 
<span class="p_header">diff -puN mm/memory.c~pkeys-11-pte-fault mm/memory.c</span>
<span class="p_header">--- a/mm/memory.c~pkeys-11-pte-fault	2015-09-28 11:39:47.634259558 -0700</span>
<span class="p_header">+++ b/mm/memory.c	2015-09-28 11:39:47.642259922 -0700</span>
<span class="p_chunk">@@ -64,6 +64,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/userfaultfd_k.h&gt;
 
 #include &lt;asm/io.h&gt;
<span class="p_add">+#include &lt;asm/mmu_context.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/uaccess.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -3342,6 +3343,9 @@</span> <span class="p_context"> static int __handle_mm_fault(struct mm_s</span>
 	pmd_t *pmd;
 	pte_t *pte;
 
<span class="p_add">+	if (!arch_vma_access_permitted(vma, flags &amp; FAULT_FLAG_WRITE))</span>
<span class="p_add">+		return VM_FAULT_SIGSEGV;</span>
<span class="p_add">+</span>
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return hugetlb_fault(mm, vma, address, flags);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



