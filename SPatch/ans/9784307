
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>Add printk for bonding module packets_per_slave parameter - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    Add printk for bonding module packets_per_slave parameter</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=325">Joe Perches</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 13, 2017, 4:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497370863.18751.15.camel@perches.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9784307/mbox/"
   >mbox</a>
|
   <a href="/patch/9784307/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9784307/">/patch/9784307/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BF02260212 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 16:21:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A454127F60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 16:21:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 98F7828537; Tue, 13 Jun 2017 16:21:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5D7B827F60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 16:21:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753524AbdFMQVK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 13 Jun 2017 12:21:10 -0400
Received: from smtprelay0162.hostedemail.com ([216.40.44.162]:34620 &quot;EHLO
	smtprelay.hostedemail.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1752520AbdFMQVI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 13 Jun 2017 12:21:08 -0400
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net
	[216.40.38.60])
	by smtprelay01.hostedemail.com (Postfix) with ESMTP id BED3A100E86CB; 
	Tue, 13 Jun 2017 16:21:06 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-HE-Tag: mist18_7dcf71be66a44
X-Filterd-Recvd-Size: 17544
Received: from XPS-9350 (unknown [47.151.132.55])
	(Authenticated sender: joe@perches.com)
	by omf04.hostedemail.com (Postfix) with ESMTPA;
	Tue, 13 Jun 2017 16:21:04 +0000 (UTC)
Message-ID: &lt;1497370863.18751.15.camel@perches.com&gt;
Subject: Re: [PATCH] Add printk for bonding module packets_per_slave
	parameter
From: Joe Perches &lt;joe@perches.com&gt;
To: David Miller &lt;davem@davemloft.net&gt;, michael.j.dilmore@gmail.com
Cc: j.vosburgh@gmail.com, vfalico@gmail.com, andy@greyhouse.net,
	netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Date: Tue, 13 Jun 2017 09:21:03 -0700
In-Reply-To: &lt;20170613.113411.506760268959654820.davem@davemloft.net&gt;
References: &lt;20170613134246.6407-1-michael.j.dilmore@gmail.com&gt;
	&lt;20170613.113411.506760268959654820.davem@davemloft.net&gt;
Content-Type: text/plain; charset=&quot;ISO-8859-1&quot;
X-Mailer: Evolution 3.22.6-1ubuntu1 
Mime-Version: 1.0
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - June 13, 2017, 4:21 p.m.</div>
<pre class="content">
On Tue, 2017-06-13 at 11:34 -0400, David Miller wrote:
<span class="quote">&gt; From: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt; Date: Tue, 13 Jun 2017 14:42:46 +0100</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; The packets per slave parameter used by round robin mode does not have a printk debug</span>
<span class="quote">&gt; &gt; message in its set function in bond_options.c. Adding such a function would aid debugging</span>
<span class="quote">&gt; &gt; of round-robin mode and allow the user to more easily verify that the parameter has been</span>
<span class="quote">&gt; &gt; set correctly. I should add that I&#39;m motivated by my own experience here - it&#39;s not</span>
<span class="quote">&gt; &gt; obvious from output of tools such as wireshark and ifstat that the parameter is working</span>
<span class="quote">&gt; &gt; correctly, and with the differences in bonding configuration across different distributions,</span>
<span class="quote">&gt; &gt; it would have been comforting to see this output.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; cc: Veaceslav Falico &lt;vfalico@gmail.com&gt;,Andy Gospodarek &lt;andy@greyhouse.net&gt;,netdev@vger.kernel.org,linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You can verify things by simplying reading the value back.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If every parameter emitted a kernel log message, it would be</span>
<span class="quote">&gt; unreadable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m not applying this, sorry.</span>

I agree.  Noisy logging output is not good.

Perhaps a general conversion of the dozens
of existing netdev_info uses in this file to
netdev_dbg and adding this at netdev_dbg is
appropriate.

Something like:
---
 drivers/net/bonding/bond_options.c | 119 +++++++++++++++++++------------------
 1 file changed, 60 insertions(+), 59 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=171055">Jonathan Toppins</a> - June 13, 2017, 4:42 p.m.</div>
<pre class="content">
On 06/13/2017 12:21 PM, Joe Perches wrote:
<span class="quote">&gt; On Tue, 2017-06-13 at 11:34 -0400, David Miller wrote:</span>
<span class="quote">&gt;&gt; From: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt;&gt; Date: Tue, 13 Jun 2017 14:42:46 +0100</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; The packets per slave parameter used by round robin mode does not have a printk debug</span>
<span class="quote">&gt;&gt;&gt; message in its set function in bond_options.c. Adding such a function would aid debugging</span>
<span class="quote">&gt;&gt;&gt; of round-robin mode and allow the user to more easily verify that the parameter has been</span>
<span class="quote">&gt;&gt;&gt; set correctly. I should add that I&#39;m motivated by my own experience here - it&#39;s not</span>
<span class="quote">&gt;&gt;&gt; obvious from output of tools such as wireshark and ifstat that the parameter is working</span>
<span class="quote">&gt;&gt;&gt; correctly, and with the differences in bonding configuration across different distributions,</span>
<span class="quote">&gt;&gt;&gt; it would have been comforting to see this output.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; cc: Veaceslav Falico &lt;vfalico@gmail.com&gt;,Andy Gospodarek &lt;andy@greyhouse.net&gt;,netdev@vger.kernel.org,linux-kernel@vger.kernel.org</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; You can verify things by simplying reading the value back.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; If every parameter emitted a kernel log message, it would be</span>
<span class="quote">&gt;&gt; unreadable.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;m not applying this, sorry.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I agree.  Noisy logging output is not good.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Perhaps a general conversion of the dozens</span>
<span class="quote">&gt; of existing netdev_info uses in this file to</span>
<span class="quote">&gt; netdev_dbg and adding this at netdev_dbg is</span>
<span class="quote">&gt; appropriate.</span>

In general I agree. The few times I have debugged bonds, I always ended
up enabling debug prinks anyway. I don&#39;t see a problem moving these to
debug as well.

Adding nik whom converted a lot of this code to common paths for input.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Something like:</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/net/bonding/bond_options.c | 119 +++++++++++++++++++------------------</span>
<span class="quote">&gt;  1 file changed, 60 insertions(+), 59 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; index 8ca683396fcc..9dec49b1b8ae 100644</span>
<span class="quote">&gt; --- a/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; +++ b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; @@ -750,8 +750,8 @@ static int bond_option_mode_set(struct bonding *bond,</span>
<span class="quote">&gt;  		bond-&gt;params.arp_interval = 0;</span>
<span class="quote">&gt;  		/* set miimon to default value */</span>
<span class="quote">&gt;  		bond-&gt;params.miimon = BOND_DEFAULT_MIIMON;</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt; -			    bond-&gt;params.miimon);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt; +			   bond-&gt;params.miimon);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* don&#39;t cache arp_validate between modes */</span>
<span class="quote">&gt; @@ -794,7 +794,7 @@ static int bond_option_active_slave_set(struct bonding *bond,</span>
<span class="quote">&gt;  	block_netpoll_tx();</span>
<span class="quote">&gt;  	/* check to see if we are clearing active */</span>
<span class="quote">&gt;  	if (!slave_dev) {</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
<span class="quote">&gt;  		RCU_INIT_POINTER(bond-&gt;curr_active_slave, NULL);</span>
<span class="quote">&gt;  		bond_select_active_slave(bond);</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; @@ -805,13 +805,13 @@ static int bond_option_active_slave_set(struct bonding *bond,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (new_active == old_active) {</span>
<span class="quote">&gt;  			/* do nothing */</span>
<span class="quote">&gt; -			netdev_info(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
<span class="quote">&gt; -				    new_active-&gt;dev-&gt;name);</span>
<span class="quote">&gt; +			netdev_dbg(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
<span class="quote">&gt; +				   new_active-&gt;dev-&gt;name);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt;  			if (old_active &amp;&amp; (new_active-&gt;link == BOND_LINK_UP) &amp;&amp;</span>
<span class="quote">&gt;  			    bond_slave_is_up(new_active)) {</span>
<span class="quote">&gt; -				netdev_info(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
<span class="quote">&gt; -					    new_active-&gt;dev-&gt;name);</span>
<span class="quote">&gt; +				netdev_dbg(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
<span class="quote">&gt; +					   new_active-&gt;dev-&gt;name);</span>
<span class="quote">&gt;  				bond_change_active_slave(bond, new_active);</span>
<span class="quote">&gt;  			} else {</span>
<span class="quote">&gt;  				netdev_err(bond-&gt;dev, &quot;Could not set %s as active slave; either %s is down or the link is down\n&quot;,</span>
<span class="quote">&gt; @@ -833,17 +833,17 @@ static int bond_option_active_slave_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_miimon_set(struct bonding *bond,</span>
<span class="quote">&gt;  				  const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.miimon = newval-&gt;value;</span>
<span class="quote">&gt;  	if (bond-&gt;params.updelay)</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="quote">&gt; -			bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="quote">&gt; +			   bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt;  	if (bond-&gt;params.downdelay)</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="quote">&gt; -			    bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="quote">&gt; +			   bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt;  	if (newval-&gt;value &amp;&amp; bond-&gt;params.arp_interval) {</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
<span class="quote">&gt;  		bond-&gt;params.arp_interval = 0;</span>
<span class="quote">&gt;  		if (bond-&gt;params.arp_validate)</span>
<span class="quote">&gt;  			bond-&gt;params.arp_validate = BOND_ARP_VALIDATE_NONE;</span>
<span class="quote">&gt; @@ -885,8 +885,8 @@ static int bond_option_updelay_set(struct bonding *bond,</span>
<span class="quote">&gt;  			    bond-&gt;params.miimon);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	bond-&gt;params.updelay = value / bond-&gt;params.miimon;</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
<span class="quote">&gt; -		    bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
<span class="quote">&gt; +		   bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -907,8 +907,8 @@ static int bond_option_downdelay_set(struct bonding *bond,</span>
<span class="quote">&gt;  			    bond-&gt;params.miimon);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	bond-&gt;params.downdelay = value / bond-&gt;params.miimon;</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
<span class="quote">&gt; -		    bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
<span class="quote">&gt; +		   bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -916,8 +916,7 @@ static int bond_option_downdelay_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_use_carrier_set(struct bonding *bond,</span>
<span class="quote">&gt;  				       const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.use_carrier = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -930,16 +929,16 @@ static int bond_option_use_carrier_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_arp_interval_set(struct bonding *bond,</span>
<span class="quote">&gt;  					const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.arp_interval = newval-&gt;value;</span>
<span class="quote">&gt;  	if (newval-&gt;value) {</span>
<span class="quote">&gt;  		if (bond-&gt;params.miimon) {</span>
<span class="quote">&gt; -			netdev_info(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
<span class="quote">&gt; +			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
<span class="quote">&gt;  			bond-&gt;params.miimon = 0;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		if (!bond-&gt;params.arp_targets[0])</span>
<span class="quote">&gt; -			netdev_info(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
<span class="quote">&gt; +			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {</span>
<span class="quote">&gt;  		/* If the interface is up, we may need to fire off</span>
<span class="quote">&gt; @@ -1000,7 +999,7 @@ static int _bond_option_arp_ip_target_add(struct bonding *bond, __be32 target)</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	_bond_options_arp_ip_target_set(bond, ind, target, jiffies);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1036,7 +1035,7 @@ static int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target)</span>
<span class="quote">&gt;  	if (ind == 0 &amp;&amp; !targets[1] &amp;&amp; bond-&gt;params.arp_interval)</span>
<span class="quote">&gt;  		netdev_warn(bond-&gt;dev, &quot;Removing last arp target with arp_interval on\n&quot;);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	bond_for_each_slave(bond, slave, iter) {</span>
<span class="quote">&gt;  		targets_rx = slave-&gt;target_last_arp_rx;</span>
<span class="quote">&gt; @@ -1088,8 +1087,8 @@ static int bond_option_arp_ip_targets_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_arp_validate_set(struct bonding *bond,</span>
<span class="quote">&gt;  					const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {</span>
<span class="quote">&gt;  		if (!newval-&gt;value)</span>
<span class="quote">&gt; @@ -1105,8 +1104,8 @@ static int bond_option_arp_validate_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_arp_all_targets_set(struct bonding *bond,</span>
<span class="quote">&gt;  					   const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.arp_all_targets = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1126,7 +1125,7 @@ static int bond_option_primary_set(struct bonding *bond,</span>
<span class="quote">&gt;  		*p = &#39;\0&#39;;</span>
<span class="quote">&gt;  	/* check to see if we are clearing primary */</span>
<span class="quote">&gt;  	if (!strlen(primary)) {</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="quote">&gt;  		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);</span>
<span class="quote">&gt;  		memset(bond-&gt;params.primary, 0, sizeof(bond-&gt;params.primary));</span>
<span class="quote">&gt;  		bond_select_active_slave(bond);</span>
<span class="quote">&gt; @@ -1135,8 +1134,8 @@ static int bond_option_primary_set(struct bonding *bond,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	bond_for_each_slave(bond, slave, iter) {</span>
<span class="quote">&gt;  		if (strncmp(slave-&gt;dev-&gt;name, primary, IFNAMSIZ) == 0) {</span>
<span class="quote">&gt; -			netdev_info(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
<span class="quote">&gt; -				    slave-&gt;dev-&gt;name);</span>
<span class="quote">&gt; +			netdev_dbg(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
<span class="quote">&gt; +				   slave-&gt;dev-&gt;name);</span>
<span class="quote">&gt;  			rcu_assign_pointer(bond-&gt;primary_slave, slave);</span>
<span class="quote">&gt;  			strcpy(bond-&gt;params.primary, slave-&gt;dev-&gt;name);</span>
<span class="quote">&gt;  			bond_select_active_slave(bond);</span>
<span class="quote">&gt; @@ -1145,15 +1144,15 @@ static int bond_option_primary_set(struct bonding *bond,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (rtnl_dereference(bond-&gt;primary_slave)) {</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="quote">&gt;  		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);</span>
<span class="quote">&gt;  		bond_select_active_slave(bond);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	strncpy(bond-&gt;params.primary, primary, IFNAMSIZ);</span>
<span class="quote">&gt;  	bond-&gt;params.primary[IFNAMSIZ - 1] = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
<span class="quote">&gt; -		    primary, bond-&gt;dev-&gt;name);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
<span class="quote">&gt; +		   primary, bond-&gt;dev-&gt;name);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt;  	unblock_netpoll_tx();</span>
<span class="quote">&gt; @@ -1164,8 +1163,8 @@ static int bond_option_primary_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_primary_reselect_set(struct bonding *bond,</span>
<span class="quote">&gt;  					    const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.primary_reselect = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	block_netpoll_tx();</span>
<span class="quote">&gt; @@ -1178,8 +1177,8 @@ static int bond_option_primary_reselect_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_fail_over_mac_set(struct bonding *bond,</span>
<span class="quote">&gt;  					 const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.fail_over_mac = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1188,8 +1187,8 @@ static int bond_option_fail_over_mac_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_xmit_hash_policy_set(struct bonding *bond,</span>
<span class="quote">&gt;  					    const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.xmit_policy = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1198,8 +1197,8 @@ static int bond_option_xmit_hash_policy_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_resend_igmp_set(struct bonding *bond,</span>
<span class="quote">&gt;  				       const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.resend_igmp = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1237,8 +1236,8 @@ static int bond_option_all_slaves_active_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_min_links_set(struct bonding *bond,</span>
<span class="quote">&gt;  				     const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.min_links = newval-&gt;value;</span>
<span class="quote">&gt;  	bond_set_carrier(bond);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1256,6 +1255,8 @@ static int bond_option_lp_interval_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_pps_set(struct bonding *bond,</span>
<span class="quote">&gt;  			       const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting packets per slave to %d\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.packets_per_slave = newval-&gt;value;</span>
<span class="quote">&gt;  	if (newval-&gt;value &gt; 0) {</span>
<span class="quote">&gt;  		bond-&gt;params.reciprocal_packets_per_slave =</span>
<span class="quote">&gt; @@ -1274,8 +1275,8 @@ static int bond_option_pps_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_lacp_rate_set(struct bonding *bond,</span>
<span class="quote">&gt;  				     const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.lacp_fast = newval-&gt;value;</span>
<span class="quote">&gt;  	bond_3ad_update_lacp_rate(bond);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1285,8 +1286,8 @@ static int bond_option_lacp_rate_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_ad_select_set(struct bonding *bond,</span>
<span class="quote">&gt;  				     const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.ad_select = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1377,12 +1378,12 @@ static int bond_option_slaves_set(struct bonding *bond,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	switch (command[0]) {</span>
<span class="quote">&gt;  	case &#39;+&#39;:</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
<span class="quote">&gt;  		ret = bond_enslave(bond-&gt;dev, dev);</span>
<span class="quote">&gt;  		break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	case &#39;-&#39;:</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
<span class="quote">&gt;  		ret = bond_release(bond-&gt;dev, dev);</span>
<span class="quote">&gt;  		break;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1402,8 +1403,8 @@ static int bond_option_slaves_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,</span>
<span class="quote">&gt;  					  const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;string, newval-&gt;value);</span>
<span class="quote">&gt;  	bond-&gt;params.tlb_dynamic_lb = newval-&gt;value;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; @@ -1412,8 +1413,8 @@ static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_ad_actor_sys_prio_set(struct bonding *bond,</span>
<span class="quote">&gt;  					     const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	bond-&gt;params.ad_actor_sys_prio = newval-&gt;value;</span>
<span class="quote">&gt;  	bond_3ad_update_ad_actor_settings(bond);</span>
<span class="quote">&gt; @@ -1442,7 +1443,7 @@ static int bond_option_ad_actor_system_set(struct bonding *bond,</span>
<span class="quote">&gt;  	if (!is_valid_ether_addr(mac))</span>
<span class="quote">&gt;  		goto err;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
<span class="quote">&gt;  	ether_addr_copy(bond-&gt;params.ad_actor_system, mac);</span>
<span class="quote">&gt;  	bond_3ad_update_ad_actor_settings(bond);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1456,8 +1457,8 @@ static int bond_option_ad_actor_system_set(struct bonding *bond,</span>
<span class="quote">&gt;  static int bond_option_ad_user_port_key_set(struct bonding *bond,</span>
<span class="quote">&gt;  					    const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	netdev_info(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
<span class="quote">&gt; -		    newval-&gt;value);</span>
<span class="quote">&gt; +	netdev_dbg(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
<span class="quote">&gt; +		   newval-&gt;value);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	bond-&gt;params.ad_user_port_key = newval-&gt;value;</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - June 13, 2017, 4:46 p.m.</div>
<pre class="content">
<span class="from">From: Joe Perches &lt;joe@perches.com&gt;</span>
Date: Tue, 13 Jun 2017 09:21:03 -0700
<span class="quote">
&gt; On Tue, 2017-06-13 at 11:34 -0400, David Miller wrote:</span>
<span class="quote">&gt;&gt; From: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt;&gt; Date: Tue, 13 Jun 2017 14:42:46 +0100</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; The packets per slave parameter used by round robin mode does not have a printk debug</span>
<span class="quote">&gt;&gt; &gt; message in its set function in bond_options.c. Adding such a function would aid debugging</span>
<span class="quote">&gt;&gt; &gt; of round-robin mode and allow the user to more easily verify that the parameter has been</span>
<span class="quote">&gt;&gt; &gt; set correctly. I should add that I&#39;m motivated by my own experience here - it&#39;s not</span>
<span class="quote">&gt;&gt; &gt; obvious from output of tools such as wireshark and ifstat that the parameter is working</span>
<span class="quote">&gt;&gt; &gt; correctly, and with the differences in bonding configuration across different distributions,</span>
<span class="quote">&gt;&gt; &gt; it would have been comforting to see this output.</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; Signed-off-by: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; cc: Veaceslav Falico &lt;vfalico@gmail.com&gt;,Andy Gospodarek &lt;andy@greyhouse.net&gt;,netdev@vger.kernel.org,linux-kernel@vger.kernel.org</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; You can verify things by simplying reading the value back.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; If every parameter emitted a kernel log message, it would be</span>
<span class="quote">&gt;&gt; unreadable.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; I&#39;m not applying this, sorry.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I agree.  Noisy logging output is not good.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Perhaps a general conversion of the dozens</span>
<span class="quote">&gt; of existing netdev_info uses in this file to</span>
<span class="quote">&gt; netdev_dbg and adding this at netdev_dbg is</span>
<span class="quote">&gt; appropriate.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Something like:</span>

Agreed, please submit this formally.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - June 13, 2017, 5 p.m.</div>
<pre class="content">
On Tue, 2017-06-13 at 12:42 -0400, Jonathan Toppins wrote:
<span class="quote">&gt; On 06/13/2017 12:21 PM, Joe Perches wrote:</span>
<span class="quote">&gt; &gt; On Tue, 2017-06-13 at 11:34 -0400, David Miller wrote:</span>
<span class="quote">&gt; &gt; &gt; From: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Date: Tue, 13 Jun 2017 14:42:46 +0100</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; The packets per slave parameter used by round robin mode does not have a printk debug</span>
<span class="quote">&gt; &gt; &gt; &gt; message in its set function in bond_options.c. Adding such a function would aid debugging</span>
<span class="quote">&gt; &gt; &gt; &gt; of round-robin mode and allow the user to more easily verify that the parameter has been</span>
<span class="quote">&gt; &gt; &gt; &gt; set correctly. I should add that I&#39;m motivated by my own experience here - it&#39;s not</span>
<span class="quote">&gt; &gt; &gt; &gt; obvious from output of tools such as wireshark and ifstat that the parameter is working</span>
<span class="quote">&gt; &gt; &gt; &gt; correctly, and with the differences in bonding configuration across different distributions,</span>
<span class="quote">&gt; &gt; &gt; &gt; it would have been comforting to see this output.</span>
[]
<span class="quote">&gt; &gt; &gt; You can verify things by simplying reading the value back.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; If every parameter emitted a kernel log message, it would be</span>
<span class="quote">&gt; &gt; &gt; unreadable.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I&#39;m not applying this, sorry.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I agree.  Noisy logging output is not good.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Perhaps a general conversion of the dozens</span>
<span class="quote">&gt; &gt; of existing netdev_info uses in this file to</span>
<span class="quote">&gt; &gt; netdev_dbg and adding this at netdev_dbg is</span>
<span class="quote">&gt; &gt; appropriate.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In general I agree. The few times I have debugged bonds, I always ended</span>
<span class="quote">&gt; up enabling debug prinks anyway. I don&#39;t see a problem moving these to</span>
<span class="quote">&gt; debug as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Adding nik whom converted a lot of this code to common paths for input.</span>

If Nikolay agrees with the conversion, it&#39;s trivial.
Please submit it.  I did it just for reference.

Stylistic nits about the existing file:

There are some inconsistencies in pr_info/pr_err uses
with invalid inputs.

It would also be nicer if the forward static declarations
were removed and the static definitions reordered.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a> - June 13, 2017, 5:53 p.m.</div>
<pre class="content">
On 13/06/17 20:00, Joe Perches wrote:
<span class="quote">&gt; On Tue, 2017-06-13 at 12:42 -0400, Jonathan Toppins wrote:</span>
<span class="quote">&gt;&gt; On 06/13/2017 12:21 PM, Joe Perches wrote:</span>
<span class="quote">&gt;&gt;&gt; On Tue, 2017-06-13 at 11:34 -0400, David Miller wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; From: Michael Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Date: Tue, 13 Jun 2017 14:42:46 +0100</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; The packets per slave parameter used by round robin mode does not have a printk debug</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; message in its set function in bond_options.c. Adding such a function would aid debugging</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; of round-robin mode and allow the user to more easily verify that the parameter has been</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; set correctly. I should add that I&#39;m motivated by my own experience here - it&#39;s not</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; obvious from output of tools such as wireshark and ifstat that the parameter is working</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; correctly, and with the differences in bonding configuration across different distributions,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; it would have been comforting to see this output.</span>
<span class="quote">&gt; []</span>
<span class="quote">&gt;&gt;&gt;&gt; You can verify things by simplying reading the value back.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; If every parameter emitted a kernel log message, it would be</span>
<span class="quote">&gt;&gt;&gt;&gt; unreadable.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I&#39;m not applying this, sorry.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I agree.  Noisy logging output is not good.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Perhaps a general conversion of the dozens</span>
<span class="quote">&gt;&gt;&gt; of existing netdev_info uses in this file to</span>
<span class="quote">&gt;&gt;&gt; netdev_dbg and adding this at netdev_dbg is</span>
<span class="quote">&gt;&gt;&gt; appropriate.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; In general I agree. The few times I have debugged bonds, I always ended</span>
<span class="quote">&gt;&gt; up enabling debug prinks anyway. I don&#39;t see a problem moving these to</span>
<span class="quote">&gt;&gt; debug as well.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Adding nik whom converted a lot of this code to common paths for input.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If Nikolay agrees with the conversion, it&#39;s trivial.</span>
<span class="quote">&gt; Please submit it.  I did it just for reference.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Stylistic nits about the existing file:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There are some inconsistencies in pr_info/pr_err uses</span>
<span class="quote">&gt; with invalid inputs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It would also be nicer if the forward static declarations</span>
<span class="quote">&gt; were removed and the static definitions reordered.</span>
<span class="quote">&gt; </span>

Agreed, there are many ways to extract the values.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
<span class="p_header">index 8ca683396fcc..9dec49b1b8ae 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_options.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_options.c</span>
<span class="p_chunk">@@ -750,8 +750,8 @@</span> <span class="p_context"> static int bond_option_mode_set(struct bonding *bond,</span>
 		bond-&gt;params.arp_interval = 0;
 		/* set miimon to default value */
 		bond-&gt;params.miimon = BOND_DEFAULT_MIIMON;
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="p_del">-			    bond-&gt;params.miimon);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="p_add">+			   bond-&gt;params.miimon);</span>
 	}
 
 	/* don&#39;t cache arp_validate between modes */
<span class="p_chunk">@@ -794,7 +794,7 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 	block_netpoll_tx();
 	/* check to see if we are clearing active */
 	if (!slave_dev) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;curr_active_slave, NULL);
 		bond_select_active_slave(bond);
 	} else {
<span class="p_chunk">@@ -805,13 +805,13 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 
 		if (new_active == old_active) {
 			/* do nothing */
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
<span class="p_del">-				    new_active-&gt;dev-&gt;name);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
<span class="p_add">+				   new_active-&gt;dev-&gt;name);</span>
 		} else {
 			if (old_active &amp;&amp; (new_active-&gt;link == BOND_LINK_UP) &amp;&amp;
 			    bond_slave_is_up(new_active)) {
<span class="p_del">-				netdev_info(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
<span class="p_del">-					    new_active-&gt;dev-&gt;name);</span>
<span class="p_add">+				netdev_dbg(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
<span class="p_add">+					   new_active-&gt;dev-&gt;name);</span>
 				bond_change_active_slave(bond, new_active);
 			} else {
 				netdev_err(bond-&gt;dev, &quot;Could not set %s as active slave; either %s is down or the link is down\n&quot;,
<span class="p_chunk">@@ -833,17 +833,17 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 static int bond_option_miimon_set(struct bonding *bond,
 				  const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 	bond-&gt;params.miimon = newval-&gt;value;
 	if (bond-&gt;params.updelay)
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_del">-			bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_add">+			   bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
 	if (bond-&gt;params.downdelay)
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_del">-			    bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_add">+			   bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
 	if (newval-&gt;value &amp;&amp; bond-&gt;params.arp_interval) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
 		bond-&gt;params.arp_interval = 0;
 		if (bond-&gt;params.arp_validate)
 			bond-&gt;params.arp_validate = BOND_ARP_VALIDATE_NONE;
<span class="p_chunk">@@ -885,8 +885,8 @@</span> <span class="p_context"> static int bond_option_updelay_set(struct bonding *bond,</span>
 			    bond-&gt;params.miimon);
 	}
 	bond-&gt;params.updelay = value / bond-&gt;params.miimon;
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
<span class="p_del">-		    bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
<span class="p_add">+		   bond-&gt;params.updelay * bond-&gt;params.miimon);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -907,8 +907,8 @@</span> <span class="p_context"> static int bond_option_downdelay_set(struct bonding *bond,</span>
 			    bond-&gt;params.miimon);
 	}
 	bond-&gt;params.downdelay = value / bond-&gt;params.miimon;
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
<span class="p_del">-		    bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
<span class="p_add">+		   bond-&gt;params.downdelay * bond-&gt;params.miimon);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -916,8 +916,7 @@</span> <span class="p_context"> static int bond_option_downdelay_set(struct bonding *bond,</span>
 static int bond_option_use_carrier_set(struct bonding *bond,
 				       const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;, newval-&gt;value);</span>
 	bond-&gt;params.use_carrier = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -930,16 +929,16 @@</span> <span class="p_context"> static int bond_option_use_carrier_set(struct bonding *bond,</span>
 static int bond_option_arp_interval_set(struct bonding *bond,
 					const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 	bond-&gt;params.arp_interval = newval-&gt;value;
 	if (newval-&gt;value) {
 		if (bond-&gt;params.miimon) {
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
 			bond-&gt;params.miimon = 0;
 		}
 		if (!bond-&gt;params.arp_targets[0])
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
 	}
 	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {
 		/* If the interface is up, we may need to fire off
<span class="p_chunk">@@ -1000,7 +999,7 @@</span> <span class="p_context"> static int _bond_option_arp_ip_target_add(struct bonding *bond, __be32 target)</span>
 		return -EINVAL;
 	}
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
 
 	_bond_options_arp_ip_target_set(bond, ind, target, jiffies);
 
<span class="p_chunk">@@ -1036,7 +1035,7 @@</span> <span class="p_context"> static int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target)</span>
 	if (ind == 0 &amp;&amp; !targets[1] &amp;&amp; bond-&gt;params.arp_interval)
 		netdev_warn(bond-&gt;dev, &quot;Removing last arp target with arp_interval on\n&quot;);
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
 
 	bond_for_each_slave(bond, slave, iter) {
 		targets_rx = slave-&gt;target_last_arp_rx;
<span class="p_chunk">@@ -1088,8 +1087,8 @@</span> <span class="p_context"> static int bond_option_arp_ip_targets_set(struct bonding *bond,</span>
 static int bond_option_arp_validate_set(struct bonding *bond,
 					const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 
 	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {
 		if (!newval-&gt;value)
<span class="p_chunk">@@ -1105,8 +1104,8 @@</span> <span class="p_context"> static int bond_option_arp_validate_set(struct bonding *bond,</span>
 static int bond_option_arp_all_targets_set(struct bonding *bond,
 					   const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.arp_all_targets = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1126,7 +1125,7 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 		*p = &#39;\0&#39;;
 	/* check to see if we are clearing primary */
 	if (!strlen(primary)) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);
 		memset(bond-&gt;params.primary, 0, sizeof(bond-&gt;params.primary));
 		bond_select_active_slave(bond);
<span class="p_chunk">@@ -1135,8 +1134,8 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 
 	bond_for_each_slave(bond, slave, iter) {
 		if (strncmp(slave-&gt;dev-&gt;name, primary, IFNAMSIZ) == 0) {
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
<span class="p_del">-				    slave-&gt;dev-&gt;name);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
<span class="p_add">+				   slave-&gt;dev-&gt;name);</span>
 			rcu_assign_pointer(bond-&gt;primary_slave, slave);
 			strcpy(bond-&gt;params.primary, slave-&gt;dev-&gt;name);
 			bond_select_active_slave(bond);
<span class="p_chunk">@@ -1145,15 +1144,15 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 	}
 
 	if (rtnl_dereference(bond-&gt;primary_slave)) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);
 		bond_select_active_slave(bond);
 	}
 	strncpy(bond-&gt;params.primary, primary, IFNAMSIZ);
 	bond-&gt;params.primary[IFNAMSIZ - 1] = 0;
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
<span class="p_del">-		    primary, bond-&gt;dev-&gt;name);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
<span class="p_add">+		   primary, bond-&gt;dev-&gt;name);</span>
 
 out:
 	unblock_netpoll_tx();
<span class="p_chunk">@@ -1164,8 +1163,8 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 static int bond_option_primary_reselect_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.primary_reselect = newval-&gt;value;
 
 	block_netpoll_tx();
<span class="p_chunk">@@ -1178,8 +1177,8 @@</span> <span class="p_context"> static int bond_option_primary_reselect_set(struct bonding *bond,</span>
 static int bond_option_fail_over_mac_set(struct bonding *bond,
 					 const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.fail_over_mac = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1188,8 +1187,8 @@</span> <span class="p_context"> static int bond_option_fail_over_mac_set(struct bonding *bond,</span>
 static int bond_option_xmit_hash_policy_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.xmit_policy = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1198,8 +1197,8 @@</span> <span class="p_context"> static int bond_option_xmit_hash_policy_set(struct bonding *bond,</span>
 static int bond_option_resend_igmp_set(struct bonding *bond,
 				       const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 	bond-&gt;params.resend_igmp = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1237,8 +1236,8 @@</span> <span class="p_context"> static int bond_option_all_slaves_active_set(struct bonding *bond,</span>
 static int bond_option_min_links_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 	bond-&gt;params.min_links = newval-&gt;value;
 	bond_set_carrier(bond);
 
<span class="p_chunk">@@ -1256,6 +1255,8 @@</span> <span class="p_context"> static int bond_option_lp_interval_set(struct bonding *bond,</span>
 static int bond_option_pps_set(struct bonding *bond,
 			       const struct bond_opt_value *newval)
 {
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting packets per slave to %d\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 	bond-&gt;params.packets_per_slave = newval-&gt;value;
 	if (newval-&gt;value &gt; 0) {
 		bond-&gt;params.reciprocal_packets_per_slave =
<span class="p_chunk">@@ -1274,8 +1275,8 @@</span> <span class="p_context"> static int bond_option_pps_set(struct bonding *bond,</span>
 static int bond_option_lacp_rate_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.lacp_fast = newval-&gt;value;
 	bond_3ad_update_lacp_rate(bond);
 
<span class="p_chunk">@@ -1285,8 +1286,8 @@</span> <span class="p_context"> static int bond_option_lacp_rate_set(struct bonding *bond,</span>
 static int bond_option_ad_select_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.ad_select = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1377,12 +1378,12 @@</span> <span class="p_context"> static int bond_option_slaves_set(struct bonding *bond,</span>
 
 	switch (command[0]) {
 	case &#39;+&#39;:
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
 		ret = bond_enslave(bond-&gt;dev, dev);
 		break;
 
 	case &#39;-&#39;:
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
 		ret = bond_release(bond-&gt;dev, dev);
 		break;
 
<span class="p_chunk">@@ -1402,8 +1403,8 @@</span> <span class="p_context"> static int bond_option_slaves_set(struct bonding *bond,</span>
 static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,
 					  const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
<span class="p_del">-		    newval-&gt;string, newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
<span class="p_add">+		   newval-&gt;string, newval-&gt;value);</span>
 	bond-&gt;params.tlb_dynamic_lb = newval-&gt;value;
 
 	return 0;
<span class="p_chunk">@@ -1412,8 +1413,8 @@</span> <span class="p_context"> static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,</span>
 static int bond_option_ad_actor_sys_prio_set(struct bonding *bond,
 					     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 
 	bond-&gt;params.ad_actor_sys_prio = newval-&gt;value;
 	bond_3ad_update_ad_actor_settings(bond);
<span class="p_chunk">@@ -1442,7 +1443,7 @@</span> <span class="p_context"> static int bond_option_ad_actor_system_set(struct bonding *bond,</span>
 	if (!is_valid_ether_addr(mac))
 		goto err;
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
 	ether_addr_copy(bond-&gt;params.ad_actor_system, mac);
 	bond_3ad_update_ad_actor_settings(bond);
 
<span class="p_chunk">@@ -1456,8 +1457,8 @@</span> <span class="p_context"> static int bond_option_ad_actor_system_set(struct bonding *bond,</span>
 static int bond_option_ad_user_port_key_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
<span class="p_del">-		    newval-&gt;value);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
<span class="p_add">+		   newval-&gt;value);</span>
 
 	bond-&gt;params.ad_user_port_key = newval-&gt;value;
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



