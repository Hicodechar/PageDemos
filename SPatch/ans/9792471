
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v5,04/11] mm: VMA sequence count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v5,04/11] mm: VMA sequence count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 16, 2017, 5:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497635555-25679-5-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9792471/mbox/"
   >mbox</a>
|
   <a href="/patch/9792471/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9792471/">/patch/9792471/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	181B760325 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0B05B2841D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id F2A0A2862B; Fri, 16 Jun 2017 17:54:54 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6A54D2841D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Jun 2017 17:54:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752809AbdFPRyl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Jun 2017 13:54:41 -0400
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:51121 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1752670AbdFPRwx (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Jun 2017 13:52:53 -0400
Received: from pps.filterd (m0098413.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v5GHnCFZ119185
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Jun 2017 13:52:53 -0400
Received: from e06smtp14.uk.ibm.com (e06smtp14.uk.ibm.com [195.75.94.110])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2b4g5nsu6k-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Jun 2017 13:52:53 -0400
Received: from localhost
	by e06smtp14.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Fri, 16 Jun 2017 18:52:51 +0100
Received: from b06cxnps4074.portsmouth.uk.ibm.com (9.149.109.196)
	by e06smtp14.uk.ibm.com (192.168.101.144) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Fri, 16 Jun 2017 18:52:46 +0100
Received: from d06av22.portsmouth.uk.ibm.com (d06av22.portsmouth.uk.ibm.com
	[9.149.105.58])
	by b06cxnps4074.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v5GHqkYu33554550; Fri, 16 Jun 2017 17:52:46 GMT
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 108DE4C04A;
	Fri, 16 Jun 2017 18:50:56 +0100 (BST)
Received: from d06av22.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id F3D1C4C040;
	Fri, 16 Jun 2017 18:50:54 +0100 (BST)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.146.24])
	by d06av22.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Fri, 16 Jun 2017 18:50:54 +0100 (BST)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: paulmck@linux.vnet.ibm.com, peterz@infradead.org,
	akpm@linux-foundation.org, kirill@shutemov.name,
	ak@linux.intel.com, mhocko@kernel.org, dave@stgolabs.net,
	jack@suse.cz, Matthew Wilcox &lt;willy@infradead.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	haren@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	npiggin@gmail.com, bsingharora@gmail.com,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
Subject: [RFC v5 04/11] mm: VMA sequence count
Date: Fri, 16 Jun 2017 19:52:28 +0200
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1497635555-25679-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1497635555-25679-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 17061617-0016-0000-0000-000004BF60F9
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17061617-0017-0000-0000-000027F0DCA6
Message-Id: &lt;1497635555-25679-5-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-06-16_10:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1703280000
	definitions=main-1706160296
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - June 16, 2017, 5:52 p.m.</div>
<pre class="content">
<span class="from">From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>

Wrap the VMA modifications (vma_adjust/unmap_page_range) with sequence
counts such that we can easily test if a VMA is changed.

The unmap_page_range() one allows us to make assumptions about
page-tables; when we find the seqcount hasn&#39;t changed we can assume
page-tables are still valid.

The flip side is that we cannot distinguish between a vma_adjust() and
the unmap_page_range() -- where with the former we could have
re-checked the vma bounds against the address.
<span class="signed-off-by">
Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>

[port to 4.12 kernel]
<span class="signed-off-by">Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 include/linux/mm_types.h |  1 +
 mm/memory.c              |  2 ++
 mm/mmap.c                | 13 +++++++++++++
 3 files changed, 16 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Aug. 8, 2017, 10:59 a.m.</div>
<pre class="content">
On 06/16/2017 11:22 PM, Laurent Dufour wrote:
<span class="quote">&gt; From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; </span>

First of all, please do mention that its adding a new element into the
vm_area_struct which will act as a sequential lock element and help
in navigating page fault without mmap_sem lock.
<span class="quote">
&gt; Wrap the VMA modifications (vma_adjust/unmap_page_range) with sequence</span>
<span class="quote">&gt; counts such that we can easily test if a VMA is changed</span>

Yeah true.
<span class="quote">
&gt; </span>
<span class="quote">&gt; The unmap_page_range() one allows us to make assumptions about</span>
<span class="quote">&gt; page-tables; when we find the seqcount hasn&#39;t changed we can assume</span>
<span class="quote">&gt; page-tables are still valid.</span>

Because unmap_page_range() is the only function which can tear it down ?
Or is there any other reason for this assumption ?
<span class="quote">
&gt; </span>
<span class="quote">&gt; The flip side is that we cannot distinguish between a vma_adjust() and</span>
<span class="quote">&gt; the unmap_page_range() -- where with the former we could have</span>
<span class="quote">&gt; re-checked the vma bounds against the address.</span>

Distinguished for what purpose ?
<span class="quote">
&gt; </span>
<span class="quote">&gt; Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [port to 4.12 kernel]</span>
<span class="quote">&gt; Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/mm_types.h |  1 +</span>
<span class="quote">&gt;  mm/memory.c              |  2 ++</span>
<span class="quote">&gt;  mm/mmap.c                | 13 +++++++++++++</span>
<span class="quote">&gt;  3 files changed, 16 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index 45cdb27791a3..8945743e4609 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -342,6 +342,7 @@ struct vm_area_struct {</span>
<span class="quote">&gt;  	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;</span>
<span class="quote">&gt; +	seqcount_t vm_sequence;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  struct core_thread {</span>
<span class="quote">&gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt; index f1132f7931ef..5d259cd67a83 100644</span>
<span class="quote">&gt; --- a/mm/memory.c</span>
<span class="quote">&gt; +++ b/mm/memory.c</span>
<span class="quote">&gt; @@ -1379,6 +1379,7 @@ void unmap_page_range(struct mmu_gather *tlb,</span>
<span class="quote">&gt;  	unsigned long next;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	BUG_ON(addr &gt;= end);</span>
<span class="quote">&gt; +	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt;  	tlb_start_vma(tlb, vma);</span>
<span class="quote">&gt;  	pgd = pgd_offset(vma-&gt;vm_mm, addr);</span>
<span class="quote">&gt;  	do {</span>
<span class="quote">&gt; @@ -1388,6 +1389,7 @@ void unmap_page_range(struct mmu_gather *tlb,</span>
<span class="quote">&gt;  		next = zap_p4d_range(tlb, vma, pgd, addr, next, details);</span>
<span class="quote">&gt;  	} while (pgd++, addr = next, addr != end);</span>
<span class="quote">&gt;  	tlb_end_vma(tlb, vma);</span>
<span class="quote">&gt; +	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="quote">&gt; index f82741e199c0..9f86356d0012 100644</span>
<span class="quote">&gt; --- a/mm/mmap.c</span>
<span class="quote">&gt; +++ b/mm/mmap.c</span>
<span class="quote">&gt; @@ -543,6 +543,8 @@ void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	else</span>
<span class="quote">&gt;  		mm-&gt;highest_vm_end = vma-&gt;vm_end;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	seqcount_init(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * vma-&gt;vm_prev wasn&#39;t known when we followed the rbtree to find the</span>
<span class="quote">&gt;  	 * correct insertion point for that vma. As a result, we could not</span>
<span class="quote">&gt; @@ -677,6 +679,10 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  	long adjust_next = 0;</span>
<span class="quote">&gt;  	int remove_next = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="quote">&gt; +	if (next)</span>
<span class="quote">&gt; +		write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	if (next &amp;&amp; !insert) {</span>
<span class="quote">&gt;  		struct vm_area_struct *exporter = NULL, *importer = NULL;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -888,6 +894,7 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  		mm-&gt;map_count--;</span>
<span class="quote">&gt;  		mpol_put(vma_policy(next));</span>
<span class="quote">&gt;  		kmem_cache_free(vm_area_cachep, next);</span>
<span class="quote">&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt;  		 * In mprotect&#39;s case 6 (see comments on vma_merge),</span>
<span class="quote">&gt;  		 * we must remove another next too. It would clutter</span>
<span class="quote">&gt; @@ -901,6 +908,8 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  			 * &quot;vma-&gt;vm_next&quot; gap must be updated.</span>
<span class="quote">&gt;  			 */</span>
<span class="quote">&gt;  			next = vma-&gt;vm_next;</span>
<span class="quote">&gt; +			if (next)</span>
<span class="quote">&gt; +				write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt;  			/*</span>
<span class="quote">&gt;  			 * For the scope of the comment &quot;next&quot; and</span>
<span class="quote">&gt; @@ -947,6 +956,10 @@ int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
<span class="quote">&gt;  	if (insert &amp;&amp; file)</span>
<span class="quote">&gt;  		uprobe_mmap(insert);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (next)</span>
<span class="quote">&gt; +		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="quote">&gt; +	write_seqcount_end(&amp;vma-&gt;vm_sequence)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	validate_mm(mm);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>

Why we are changing the sequence for &#39;next&#39; element here as well ?
Is this because next VMA may be modified during the __vma_adjust()
process ? Just out of curiosity.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Aug. 8, 2017, 11:04 a.m.</div>
<pre class="content">
On Tue, Aug 08, 2017 at 04:29:32PM +0530, Anshuman Khandual wrote:
<span class="quote">&gt; On 06/16/2017 11:22 PM, Laurent Dufour wrote:</span>
<span class="quote">&gt; &gt; From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; First of all, please do mention that its adding a new element into the</span>
<span class="quote">&gt; vm_area_struct which will act as a sequential lock element and help</span>
<span class="quote">&gt; in navigating page fault without mmap_sem lock.</span>

You&#39;re not making sense, there is no lock, and the lines below clearly
state we&#39;re adding a sequence count.
<span class="quote">
&gt; </span>
<span class="quote">&gt; &gt; Wrap the VMA modifications (vma_adjust/unmap_page_range) with sequence</span>
<span class="quote">&gt; &gt; counts such that we can easily test if a VMA is changed</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah true.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The unmap_page_range() one allows us to make assumptions about</span>
<span class="quote">&gt; &gt; page-tables; when we find the seqcount hasn&#39;t changed we can assume</span>
<span class="quote">&gt; &gt; page-tables are still valid.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Because unmap_page_range() is the only function which can tear it down ?</span>
<span class="quote">&gt; Or is there any other reason for this assumption ?</span>

Yep.
<span class="quote">
&gt; &gt; </span>
<span class="quote">&gt; &gt; The flip side is that we cannot distinguish between a vma_adjust() and</span>
<span class="quote">&gt; &gt; the unmap_page_range() -- where with the former we could have</span>
<span class="quote">&gt; &gt; re-checked the vma bounds against the address.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Distinguished for what purpose ?</span>

It states. If you know its a vma_adjust we could just check if we&#39;re
inside the new boundaries and continue. But since we cannot, we have to
assume the worst and bail.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 45cdb27791a3..8945743e4609 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -342,6 +342,7 @@</span> <span class="p_context"> struct vm_area_struct {</span>
 	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
 #endif
 	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
<span class="p_add">+	seqcount_t vm_sequence;</span>
 };
 
 struct core_thread {
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index f1132f7931ef..5d259cd67a83 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1379,6 +1379,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 	unsigned long next;
 
 	BUG_ON(addr &gt;= end);
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
 	tlb_start_vma(tlb, vma);
 	pgd = pgd_offset(vma-&gt;vm_mm, addr);
 	do {
<span class="p_chunk">@@ -1388,6 +1389,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 		next = zap_p4d_range(tlb, vma, pgd, addr, next, details);
 	} while (pgd++, addr = next, addr != end);
 	tlb_end_vma(tlb, vma);
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
 }
 
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index f82741e199c0..9f86356d0012 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -543,6 +543,8 @@</span> <span class="p_context"> void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	else
 		mm-&gt;highest_vm_end = vma-&gt;vm_end;
 
<span class="p_add">+	seqcount_init(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+</span>
 	/*
 	 * vma-&gt;vm_prev wasn&#39;t known when we followed the rbtree to find the
 	 * correct insertion point for that vma. As a result, we could not
<span class="p_chunk">@@ -677,6 +679,10 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 	long adjust_next = 0;
 	int remove_next = 0;
 
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+	if (next)</span>
<span class="p_add">+		write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
<span class="p_add">+</span>
 	if (next &amp;&amp; !insert) {
 		struct vm_area_struct *exporter = NULL, *importer = NULL;
 
<span class="p_chunk">@@ -888,6 +894,7 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 		mm-&gt;map_count--;
 		mpol_put(vma_policy(next));
 		kmem_cache_free(vm_area_cachep, next);
<span class="p_add">+		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
 		/*
 		 * In mprotect&#39;s case 6 (see comments on vma_merge),
 		 * we must remove another next too. It would clutter
<span class="p_chunk">@@ -901,6 +908,8 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 			 * &quot;vma-&gt;vm_next&quot; gap must be updated.
 			 */
 			next = vma-&gt;vm_next;
<span class="p_add">+			if (next)</span>
<span class="p_add">+				write_seqcount_begin_nested(&amp;next-&gt;vm_sequence, SINGLE_DEPTH_NESTING);</span>
 		} else {
 			/*
 			 * For the scope of the comment &quot;next&quot; and
<span class="p_chunk">@@ -947,6 +956,10 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 	if (insert &amp;&amp; file)
 		uprobe_mmap(insert);
 
<span class="p_add">+	if (next)</span>
<span class="p_add">+		write_seqcount_end(&amp;next-&gt;vm_sequence);</span>
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+</span>
 	validate_mm(mm);
 
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



