
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.6,64/81] sparc64: Reduce TLB flushes during hugepte changes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.6,64/81] sparc64: Reduce TLB flushes during hugepte changes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 22, 2016, 10:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160622223746.532355618@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9193989/mbox/"
   >mbox</a>
|
   <a href="/patch/9193989/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9193989/">/patch/9193989/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AA6FF601C0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 22:52:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9F8B428333
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 22:52:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 93D1D28420; Wed, 22 Jun 2016 22:52:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 98BF928333
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 22:52:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753096AbcFVWwP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 22 Jun 2016 18:52:15 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:47294 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752458AbcFVWsL (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 22 Jun 2016 18:48:11 -0400
Received: from localhost (unknown [216.239.55.136])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 7DF52956;
	Wed, 22 Jun 2016 22:48:11 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Subject: [PATCH 4.6 64/81] sparc64: Reduce TLB flushes during hugepte changes
Date: Wed, 22 Jun 2016 15:46:27 -0700
Message-Id: &lt;20160622223746.532355618@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.9.0
In-Reply-To: &lt;20160622223743.240652686@linuxfoundation.org&gt;
References: &lt;20160622223743.240652686@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - June 22, 2016, 10:46 p.m.</div>
<pre class="content">
4.6-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>

[ Upstream commit 24e49ee3d76b70853a96520e46b8837e5eae65b2 ]

During hugepage map/unmap, TSB and TLB flushes are currently
issued at every PAGE_SIZE&#39;d boundary which is unnecessary.
We now issue the flush at REAL_HPAGE_SIZE boundaries only.

Without this patch workloads which unmap a large hugepage
backed VMA region get CPU lockups due to excessive TLB
flush calls.

Orabug: 22365539, 22643230, 22995196
<span class="signed-off-by">
Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
<span class="signed-off-by">Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 arch/sparc/include/asm/pgtable_64.h  |   43 ++++++++++++++++++++++++++---------
 arch/sparc/include/asm/tlbflush_64.h |    3 +-
 arch/sparc/mm/hugetlbpage.c          |   33 ++++++++++++++++++++++----
 arch/sparc/mm/init_64.c              |   12 ---------
 arch/sparc/mm/tlb.c                  |   25 ++++++++++++++------
 arch/sparc/mm/tsb.c                  |   32 +++++++++++++-------------
 6 files changed, 97 insertions(+), 51 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -375,7 +375,7 @@</span> <span class="p_context"> static inline pgprot_t pgprot_noncached(</span>
 #define pgprot_noncached pgprot_noncached
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-static inline pte_t pte_mkhuge(pte_t pte)</span>
<span class="p_add">+static inline unsigned long __pte_huge_mask(void)</span>
 {
 	unsigned long mask;
 
<span class="p_chunk">@@ -390,8 +390,19 @@</span> <span class="p_context"> static inline pte_t pte_mkhuge(pte_t pte</span>
 	: &quot;=r&quot; (mask)
 	: &quot;i&quot; (_PAGE_SZHUGE_4U), &quot;i&quot; (_PAGE_SZHUGE_4V));
 
<span class="p_del">-	return __pte(pte_val(pte) | mask);</span>
<span class="p_add">+	return mask;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pte_t pte_mkhuge(pte_t pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __pte(pte_val(pte) | __pte_huge_mask());</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool is_hugetlb_pte(pte_t pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !!(pte_val(pte) &amp; __pte_huge_mask());</span>
 }
<span class="p_add">+</span>
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 static inline pmd_t pmd_mkhuge(pmd_t pmd)
 {
<span class="p_chunk">@@ -403,6 +414,11 @@</span> <span class="p_context"> static inline pmd_t pmd_mkhuge(pmd_t pmd</span>
 	return __pmd(pte_val(pte));
 }
 #endif
<span class="p_add">+#else</span>
<span class="p_add">+static inline bool is_hugetlb_pte(pte_t pte)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
 #endif
 
 static inline pte_t pte_mkdirty(pte_t pte)
<span class="p_chunk">@@ -858,6 +874,19 @@</span> <span class="p_context"> static inline unsigned long pud_pfn(pud_</span>
 void tlb_batch_add(struct mm_struct *mm, unsigned long vaddr,
 		   pte_t *ptep, pte_t orig, int fullmm);
 
<span class="p_add">+static void maybe_tlb_batch_add(struct mm_struct *mm, unsigned long vaddr,</span>
<span class="p_add">+				pte_t *ptep, pte_t orig, int fullmm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* It is more efficient to let flush_tlb_kernel_range()</span>
<span class="p_add">+	 * handle init_mm tlb flushes.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * SUN4V NOTE: _PAGE_VALID is the same value in both the SUN4U</span>
<span class="p_add">+	 *             and SUN4V pte layout, so this inline test is fine.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (likely(mm != &amp;init_mm) &amp;&amp; pte_accessible(mm, orig))</span>
<span class="p_add">+		tlb_batch_add(mm, vaddr, ptep, orig, fullmm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR
 static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,
 					    unsigned long addr,
<span class="p_chunk">@@ -874,15 +903,7 @@</span> <span class="p_context"> static inline void __set_pte_at(struct m</span>
 	pte_t orig = *ptep;
 
 	*ptep = pte;
<span class="p_del">-</span>
<span class="p_del">-	/* It is more efficient to let flush_tlb_kernel_range()</span>
<span class="p_del">-	 * handle init_mm tlb flushes.</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * SUN4V NOTE: _PAGE_VALID is the same value in both the SUN4U</span>
<span class="p_del">-	 *             and SUN4V pte layout, so this inline test is fine.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (likely(mm != &amp;init_mm) &amp;&amp; pte_accessible(mm, orig))</span>
<span class="p_del">-		tlb_batch_add(mm, addr, ptep, orig, fullmm);</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, orig, fullmm);</span>
 }
 
 #define set_pte_at(mm,addr,ptep,pte)	\
<span class="p_header">--- a/arch/sparc/include/asm/tlbflush_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/tlbflush_64.h</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"></span>
 #define TLB_BATCH_NR	192
 
 struct tlb_batch {
<span class="p_add">+	bool huge;</span>
 	struct mm_struct *mm;
 	unsigned long tlb_nr;
 	unsigned long active;
<span class="p_chunk">@@ -16,7 +17,7 @@</span> <span class="p_context"> struct tlb_batch {</span>
 
 void flush_tsb_kernel_range(unsigned long start, unsigned long end);
 void flush_tsb_user(struct tlb_batch *tb);
<span class="p_del">-void flush_tsb_user_page(struct mm_struct *mm, unsigned long vaddr);</span>
<span class="p_add">+void flush_tsb_user_page(struct mm_struct *mm, unsigned long vaddr, bool huge);</span>
 
 /* TLB flush operations. */
 
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -176,17 +176,31 @@</span> <span class="p_context"> void set_huge_pte_at(struct mm_struct *m</span>
 		     pte_t *ptep, pte_t entry)
 {
 	int i;
<span class="p_add">+	pte_t orig[2];</span>
<span class="p_add">+	unsigned long nptes;</span>
 
 	if (!pte_present(*ptep) &amp;&amp; pte_present(entry))
 		mm-&gt;context.huge_pte_count++;
 
 	addr &amp;= HPAGE_MASK;
<span class="p_del">-	for (i = 0; i &lt; (1 &lt;&lt; HUGETLB_PAGE_ORDER); i++) {</span>
<span class="p_del">-		set_pte_at(mm, addr, ptep, entry);</span>
<span class="p_add">+</span>
<span class="p_add">+	nptes = 1 &lt;&lt; HUGETLB_PAGE_ORDER;</span>
<span class="p_add">+	orig[0] = *ptep;</span>
<span class="p_add">+	orig[1] = *(ptep + nptes / 2);</span>
<span class="p_add">+	for (i = 0; i &lt; nptes; i++) {</span>
<span class="p_add">+		*ptep = entry;</span>
 		ptep++;
 		addr += PAGE_SIZE;
 		pte_val(entry) += PAGE_SIZE;
 	}
<span class="p_add">+</span>
<span class="p_add">+	/* Issue TLB flush at REAL_HPAGE_SIZE boundaries */</span>
<span class="p_add">+	addr -= REAL_HPAGE_SIZE;</span>
<span class="p_add">+	ptep -= nptes / 2;</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, orig[1], 0);</span>
<span class="p_add">+	addr -= REAL_HPAGE_SIZE;</span>
<span class="p_add">+	ptep -= nptes / 2;</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, orig[0], 0);</span>
 }
 
 pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
<span class="p_chunk">@@ -194,19 +208,28 @@</span> <span class="p_context"> pte_t huge_ptep_get_and_clear(struct mm_</span>
 {
 	pte_t entry;
 	int i;
<span class="p_add">+	unsigned long nptes;</span>
 
 	entry = *ptep;
 	if (pte_present(entry))
 		mm-&gt;context.huge_pte_count--;
 
 	addr &amp;= HPAGE_MASK;
<span class="p_del">-</span>
<span class="p_del">-	for (i = 0; i &lt; (1 &lt;&lt; HUGETLB_PAGE_ORDER); i++) {</span>
<span class="p_del">-		pte_clear(mm, addr, ptep);</span>
<span class="p_add">+	nptes = 1 &lt;&lt; HUGETLB_PAGE_ORDER;</span>
<span class="p_add">+	for (i = 0; i &lt; nptes; i++) {</span>
<span class="p_add">+		*ptep = __pte(0UL);</span>
 		addr += PAGE_SIZE;
 		ptep++;
 	}
 
<span class="p_add">+	/* Issue TLB flush at REAL_HPAGE_SIZE boundaries */</span>
<span class="p_add">+	addr -= REAL_HPAGE_SIZE;</span>
<span class="p_add">+	ptep -= nptes / 2;</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, entry, 0);</span>
<span class="p_add">+	addr -= REAL_HPAGE_SIZE;</span>
<span class="p_add">+	ptep -= nptes / 2;</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, entry, 0);</span>
<span class="p_add">+</span>
 	return entry;
 }
 
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -324,18 +324,6 @@</span> <span class="p_context"> static void __update_mmu_tsb_insert(stru</span>
 	tsb_insert(tsb, tag, tte);
 }
 
<span class="p_del">-#if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="p_del">-static inline bool is_hugetlb_pte(pte_t pte)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if ((tlb_type == hypervisor &amp;&amp;</span>
<span class="p_del">-	     (pte_val(pte) &amp; _PAGE_SZALL_4V) == _PAGE_SZHUGE_4V) ||</span>
<span class="p_del">-	    (tlb_type != hypervisor &amp;&amp;</span>
<span class="p_del">-	     (pte_val(pte) &amp; _PAGE_SZALL_4U) == _PAGE_SZHUGE_4U))</span>
<span class="p_del">-		return true;</span>
<span class="p_del">-	return false;</span>
<span class="p_del">-}</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *ptep)
 {
 	struct mm_struct *mm;
<span class="p_header">--- a/arch/sparc/mm/tlb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tlb.c</span>
<span class="p_chunk">@@ -67,7 +67,7 @@</span> <span class="p_context"> void arch_leave_lazy_mmu_mode(void)</span>
 }
 
 static void tlb_batch_add_one(struct mm_struct *mm, unsigned long vaddr,
<span class="p_del">-			      bool exec)</span>
<span class="p_add">+			      bool exec, bool huge)</span>
 {
 	struct tlb_batch *tb = &amp;get_cpu_var(tlb_batch);
 	unsigned long nr;
<span class="p_chunk">@@ -84,13 +84,21 @@</span> <span class="p_context"> static void tlb_batch_add_one(struct mm_</span>
 	}
 
 	if (!tb-&gt;active) {
<span class="p_del">-		flush_tsb_user_page(mm, vaddr);</span>
<span class="p_add">+		flush_tsb_user_page(mm, vaddr, huge);</span>
 		global_flush_tlb_page(mm, vaddr);
 		goto out;
 	}
 
<span class="p_del">-	if (nr == 0)</span>
<span class="p_add">+	if (nr == 0) {</span>
 		tb-&gt;mm = mm;
<span class="p_add">+		tb-&gt;huge = huge;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (tb-&gt;huge != huge) {</span>
<span class="p_add">+		flush_tlb_pending();</span>
<span class="p_add">+		tb-&gt;huge = huge;</span>
<span class="p_add">+		nr = 0;</span>
<span class="p_add">+	}</span>
 
 	tb-&gt;vaddrs[nr] = vaddr;
 	tb-&gt;tlb_nr = ++nr;
<span class="p_chunk">@@ -104,6 +112,8 @@</span> <span class="p_context"> out:</span>
 void tlb_batch_add(struct mm_struct *mm, unsigned long vaddr,
 		   pte_t *ptep, pte_t orig, int fullmm)
 {
<span class="p_add">+	bool huge = is_hugetlb_pte(orig);</span>
<span class="p_add">+</span>
 	if (tlb_type != hypervisor &amp;&amp;
 	    pte_dirty(orig)) {
 		unsigned long paddr, pfn = pte_pfn(orig);
<span class="p_chunk">@@ -129,7 +139,7 @@</span> <span class="p_context"> void tlb_batch_add(struct mm_struct *mm,</span>
 
 no_cache_flush:
 	if (!fullmm)
<span class="p_del">-		tlb_batch_add_one(mm, vaddr, pte_exec(orig));</span>
<span class="p_add">+		tlb_batch_add_one(mm, vaddr, pte_exec(orig), huge);</span>
 }
 
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
<span class="p_chunk">@@ -145,7 +155,7 @@</span> <span class="p_context"> static void tlb_batch_pmd_scan(struct mm</span>
 		if (pte_val(*pte) &amp; _PAGE_VALID) {
 			bool exec = pte_exec(*pte);
 
<span class="p_del">-			tlb_batch_add_one(mm, vaddr, exec);</span>
<span class="p_add">+			tlb_batch_add_one(mm, vaddr, exec, false);</span>
 		}
 		pte++;
 		vaddr += PAGE_SIZE;
<span class="p_chunk">@@ -185,8 +195,9 @@</span> <span class="p_context"> void set_pmd_at(struct mm_struct *mm, un</span>
 			pte_t orig_pte = __pte(pmd_val(orig));
 			bool exec = pte_exec(orig_pte);
 
<span class="p_del">-			tlb_batch_add_one(mm, addr, exec);</span>
<span class="p_del">-			tlb_batch_add_one(mm, addr + REAL_HPAGE_SIZE, exec);</span>
<span class="p_add">+			tlb_batch_add_one(mm, addr, exec, true);</span>
<span class="p_add">+			tlb_batch_add_one(mm, addr + REAL_HPAGE_SIZE, exec,</span>
<span class="p_add">+					true);</span>
 		} else {
 			tlb_batch_pmd_scan(mm, addr, orig);
 		}
<span class="p_header">--- a/arch/sparc/mm/tsb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tsb.c</span>
<span class="p_chunk">@@ -76,14 +76,15 @@</span> <span class="p_context"> void flush_tsb_user(struct tlb_batch *tb</span>
 
 	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);
 
<span class="p_del">-	base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_BASE].tsb;</span>
<span class="p_del">-	nentries = mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_nentries;</span>
<span class="p_del">-	if (tlb_type == cheetah_plus || tlb_type == hypervisor)</span>
<span class="p_del">-		base = __pa(base);</span>
<span class="p_del">-	__flush_tsb_one(tb, PAGE_SHIFT, base, nentries);</span>
<span class="p_del">-</span>
<span class="p_add">+	if (!tb-&gt;huge) {</span>
<span class="p_add">+		base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_BASE].tsb;</span>
<span class="p_add">+		nentries = mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_nentries;</span>
<span class="p_add">+		if (tlb_type == cheetah_plus || tlb_type == hypervisor)</span>
<span class="p_add">+			base = __pa(base);</span>
<span class="p_add">+		__flush_tsb_one(tb, PAGE_SHIFT, base, nentries);</span>
<span class="p_add">+	}</span>
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if (mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb) {</span>
<span class="p_add">+	if (tb-&gt;huge &amp;&amp; mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb) {</span>
 		base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb;
 		nentries = mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb_nentries;
 		if (tlb_type == cheetah_plus || tlb_type == hypervisor)
<span class="p_chunk">@@ -94,20 +95,21 @@</span> <span class="p_context"> void flush_tsb_user(struct tlb_batch *tb</span>
 	spin_unlock_irqrestore(&amp;mm-&gt;context.lock, flags);
 }
 
<span class="p_del">-void flush_tsb_user_page(struct mm_struct *mm, unsigned long vaddr)</span>
<span class="p_add">+void flush_tsb_user_page(struct mm_struct *mm, unsigned long vaddr, bool huge)</span>
 {
 	unsigned long nentries, base, flags;
 
 	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);
 
<span class="p_del">-	base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_BASE].tsb;</span>
<span class="p_del">-	nentries = mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_nentries;</span>
<span class="p_del">-	if (tlb_type == cheetah_plus || tlb_type == hypervisor)</span>
<span class="p_del">-		base = __pa(base);</span>
<span class="p_del">-	__flush_tsb_one_entry(base, vaddr, PAGE_SHIFT, nentries);</span>
<span class="p_del">-</span>
<span class="p_add">+	if (!huge) {</span>
<span class="p_add">+		base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_BASE].tsb;</span>
<span class="p_add">+		nentries = mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_nentries;</span>
<span class="p_add">+		if (tlb_type == cheetah_plus || tlb_type == hypervisor)</span>
<span class="p_add">+			base = __pa(base);</span>
<span class="p_add">+		__flush_tsb_one_entry(base, vaddr, PAGE_SHIFT, nentries);</span>
<span class="p_add">+	}</span>
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if (mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb) {</span>
<span class="p_add">+	if (huge &amp;&amp; mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb) {</span>
 		base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb;
 		nentries = mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb_nentries;
 		if (tlb_type == cheetah_plus || tlb_type == hypervisor)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



