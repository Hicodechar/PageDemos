
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>Convert multiple netdev_info messages to netdev_dbg - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    Convert multiple netdev_info messages to netdev_dbg</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=174791">Michael Dilmore</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 15, 2017, 6:14 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497550452-3067-1-git-send-email-michael.j.dilmore@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9789695/mbox/"
   >mbox</a>
|
   <a href="/patch/9789695/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9789695/">/patch/9789695/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C98B460384 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 18:14:32 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C0E9726256
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 18:14:32 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B419E28472; Thu, 15 Jun 2017 18:14:32 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7889026256
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 18:14:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753367AbdFOSOX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Jun 2017 14:14:23 -0400
Received: from mail-wr0-f193.google.com ([209.85.128.193]:35911 &quot;EHLO
	mail-wr0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750749AbdFOSOU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Jun 2017 14:14:20 -0400
Received: by mail-wr0-f193.google.com with SMTP id 77so4452684wrb.3;
	Thu, 15 Jun 2017 11:14:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id;
	bh=r76JJF6R4zmCOGAW40HxaBXh3H3qE9AQZ+zD3kA2blQ=;
	b=ma+bktTIGWzFPRFxxenT6XJMBBmUIlxYtTxe6MeSX5V+q65790nocoTyd5NtWPxJQn
	N8gGNOZ+3kmgldFERLIglTKAwLgXzYSJLwfg4uByTB+Klsf/IbGjybMaMA8eK4C0Rhfv
	07sJIYVF7aGL2oae4Acr1kyBfxwya1tS3Y7/2OA9s6v1zBkzq1eRO0WoDssQaIhudxgO
	GNunsHGIh9ABDZ77Xnv/iVEAiUz/C13RzaZAsBPb3N2V/DbfaW6hJ5mIpi8QT1V+rTH4
	rCuuZ5FmFaatJRUUHYOu2bMWpwbLNJf++cVV6PBW4Dv8ChCeMeGm+q8jD+mOeNDdqNts
	75HQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=r76JJF6R4zmCOGAW40HxaBXh3H3qE9AQZ+zD3kA2blQ=;
	b=GnzjDkJZSOPZ009oMzTFC1JEuIdgb3xkS1JAY2EgMHIaSjnC4sM0mi0cO6zG+IrUE+
	wGBMZzC4EAplfNqOsVHUzH6atEkBUN328gitQ8GVf2tOcuyvA82BCgD1p8MCjU0siB5c
	o5SRnx9YtuaO1Nf2fwE71mr4Um5W+rZwhIa/7YOL+Gy1SfUwXKYEkLiWxNSjNsVndL/G
	5qGhSywQVUn9FkOr3XDQ2nbx3FSNkBIWb1kv3qVME4rjdyG9K2AdfC3hpQ0juT6xvfYV
	nOFbXhNXHq8C9sbauVS/vg3TKkn/MKfhWsOY9sH1hpzV6lSZlUjn/YJoV2pKdQHjvtqM
	BRZQ==
X-Gm-Message-State: AKS2vOxWcGvZaNtRN2EHkY5BvLypfZdhrHlkFfflJ8PV0AskFDtZ+QU/
	68XHIsKjvS+aXA==
X-Received: by 10.223.161.217 with SMTP id v25mr4672021wrv.135.1497550458109;
	Thu, 15 Jun 2017 11:14:18 -0700 (PDT)
Received: from localhost.localdomain
	(host217-46-125-86.range217-46.btcentralplus.com. [217.46.125.86])
	by smtp.gmail.com with ESMTPSA id
	r40sm1052129wrb.37.2017.06.15.11.14.16
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Thu, 15 Jun 2017 11:14:17 -0700 (PDT)
From: Michael J Dilmore &lt;michael.j.dilmore@gmail.com&gt;
To: Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;
Cc: Michael J Dilmore &lt;michael.j.dilmore@gmail.com&gt;,
	Veaceslav Falico &lt;vfalico@gmail.com&gt;,
	Andy Gospodarek &lt;andy@greyhouse.net&gt;, netdev@vger.kernel.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH] Convert multiple netdev_info messages to netdev_dbg
Date: Thu, 15 Jun 2017 19:14:12 +0100
Message-Id: &lt;1497550452-3067-1-git-send-email-michael.j.dilmore@gmail.com&gt;
X-Mailer: git-send-email 2.7.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=174791">Michael Dilmore</a> - June 15, 2017, 6:14 p.m.</div>
<pre class="content">
Multiple netdev_info messages clutter kernel output. Also add netdev_dbg for packets per slave.

Suggested-by: Joe Perches &lt;joe@perches.com&gt;
<span class="signed-off-by">Signed-off-by: Michael J Dilmore &lt;michael.j.dilmore@gmail.com&gt;</span>

cc: Veaceslav Falico &lt;vfalico@gmail.com&gt;, Andy Gospodarek &lt;andy@greyhouse.net&gt;, netdev@vger.kernel.org, linux-kernel@vger.kernel.org

---
 drivers/net/bonding/bond_options.c | 82 ++++++++++++++++++++------------------
 1 file changed, 43 insertions(+), 39 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - June 15, 2017, 9:54 p.m.</div>
<pre class="content">
On Thu, 2017-06-15 at 19:14 +0100, Michael J Dilmore wrote:
<span class="quote">&gt; Multiple netdev_info messages clutter kernel output. Also add netdev_dbg for packets per slave.</span>
[]
<span class="quote">&gt; diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
[]
<span class="quote">&gt; @@ -9,6 +9,8 @@</span>
<span class="quote">&gt;   * (at your option) any later version.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;   </span>
<span class="quote">&gt; +#define DEBUG 1</span>

Is defining DEBUG reallyÂ worthwhile.

As well, it&#39;s almost always just
#define DEBUG
without any level value unless the
level value is used in the code.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  #include &lt;linux/errno.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/if.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/netdevice.h&gt;</span>
<span class="quote">&gt; @@ -719,13 +721,13 @@ static int bond_option_mode_set(struct bonding *bond,</span>
<span class="quote">&gt;  				const struct bond_opt_value *newval)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (!bond_mode_uses_arp(newval-&gt;value) &amp;&amp; bond-&gt;params.arp_interval) {</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
<span class="quote">&gt;  			    newval-&gt;string);</span>

Please realign any multiple line arguments to the
open parenthesis at the same time.
<span class="quote">
&gt;  		/* disable arp monitoring */</span>
<span class="quote">&gt;  		bond-&gt;params.arp_interval = 0;</span>
<span class="quote">&gt;  		/* set miimon to default value */</span>
<span class="quote">&gt;  		bond-&gt;params.miimon = BOND_DEFAULT_MIIMON;</span>
<span class="quote">&gt; -		netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt; +		netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt;  			    bond-&gt;params.miimon);</span>

etc...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=112381">Jay Vosburgh</a> - June 16, 2017, 1:49 a.m.</div>
<pre class="content">
Joe Perches &lt;joe@perches.com&gt; wrote:
<span class="quote">
&gt;On Thu, 2017-06-15 at 19:14 +0100, Michael J Dilmore wrote:</span>
<span class="quote">&gt;&gt; Multiple netdev_info messages clutter kernel output. Also add netdev_dbg for packets per slave.</span>
<span class="quote">&gt;[]</span>
<span class="quote">&gt;&gt; diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt;[]</span>
<span class="quote">&gt;&gt; @@ -9,6 +9,8 @@</span>
<span class="quote">&gt;&gt;   * (at your option) any later version.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; +#define DEBUG 1</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Is defining DEBUG reallyÂ worthwhile.</span>

	I don&#39;t believe so, since if CONFIG_DYNAMIC_DEBUG is not
enabled, having #define DEBUG will enable all of the netdev_dbg messages
unconditionally, which is the opposite of the stated purpose of the
patch.  If DYNAMIC_DEBUG is enabled, having DEBUG doesn&#39;t do anything
that I can see.

	-J
<span class="quote">
&gt;As well, it&#39;s almost always just</span>
<span class="quote">&gt;#define DEBUG</span>
<span class="quote">&gt;without any level value unless the</span>
<span class="quote">&gt;level value is used in the code.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #include &lt;linux/errno.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/if.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/netdevice.h&gt;</span>
<span class="quote">&gt;&gt; @@ -719,13 +721,13 @@ static int bond_option_mode_set(struct bonding *bond,</span>
<span class="quote">&gt;&gt;  				const struct bond_opt_value *newval)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	if (!bond_mode_uses_arp(newval-&gt;value) &amp;&amp; bond-&gt;params.arp_interval) {</span>
<span class="quote">&gt;&gt; -		netdev_info(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
<span class="quote">&gt;&gt; +		netdev_dbg(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
<span class="quote">&gt;&gt;  			    newval-&gt;string);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Please realign any multiple line arguments to the</span>
<span class="quote">&gt;open parenthesis at the same time.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;  		/* disable arp monitoring */</span>
<span class="quote">&gt;&gt;  		bond-&gt;params.arp_interval = 0;</span>
<span class="quote">&gt;&gt;  		/* set miimon to default value */</span>
<span class="quote">&gt;&gt;  		bond-&gt;params.miimon = BOND_DEFAULT_MIIMON;</span>
<span class="quote">&gt;&gt; -		netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt;&gt; +		netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="quote">&gt;&gt;  			    bond-&gt;params.miimon);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;etc...</span>
<span class="quote">&gt;</span>

---
	-Jay Vosburgh, jay.vosburgh@canonical.com
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=325">Joe Perches</a> - June 16, 2017, 2:03 a.m.</div>
<pre class="content">
On Thu, 2017-06-15 at 18:49 -0700, Jay Vosburgh wrote:
<span class="quote">&gt; Joe Perches &lt;joe@perches.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On Thu, 2017-06-15 at 19:14 +0100, Michael J Dilmore wrote:</span>
<span class="quote">&gt; &gt; &gt; Multiple netdev_info messages clutter kernel output. Also add netdev_dbg for packets per slave.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; []</span>
<span class="quote">&gt; &gt; &gt; diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; []</span>
<span class="quote">&gt; &gt; &gt; @@ -9,6 +9,8 @@</span>
<span class="quote">&gt; &gt; &gt;   * (at your option) any later version.</span>
<span class="quote">&gt; &gt; &gt;   */</span>
<span class="quote">&gt; &gt; &gt;   </span>
<span class="quote">&gt; &gt; &gt; +#define DEBUG 1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Is defining DEBUG reallyÂ worthwhile.</span>

Question was really if it&#39;s worthwhile to have
that logging always emitted at debug level or if
it&#39;s only useful when debugging.

I generally think smaller object code is better
and if it&#39;s not necessary, debugging output is
better not enabled/compiled into the kernel.
<span class="quote">
&gt; 	I don&#39;t believe so, since if CONFIG_DYNAMIC_DEBUG is not</span>
<span class="quote">&gt; enabled, having #define DEBUG will enable all of the netdev_dbg messages</span>
<span class="quote">&gt; unconditionally, which is the opposite of the stated purpose of the</span>
<span class="quote">&gt; patch.  If DYNAMIC_DEBUG is enabled, having DEBUG doesn&#39;t do anything</span>
<span class="quote">&gt; that I can see.</span>

Having #define DEBUG means that by default the
dynamic_debug output logging is enabled in the
control file, otherwise it&#39;s not emitted unless
it&#39;s specifically enabled by a user.

include/linux/dynamic_debug.h:#ifdef DEBUG
include/linux/dynamic_debug.h-#define DEFINE_DYNAMIC_DEBUG_METADATA(name, fmt) \
include/linux/dynamic_debug.h-Â Â DEFINE_DYNAMIC_DEBUG_METADATA_KEY(name, fmt, .key.dd_key_true, \
include/linux/dynamic_debug.h-Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (STATIC_KEY_TRUE_INIT))
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/net/bonding/bond_options.c b/drivers/net/bonding/bond_options.c</span>
<span class="p_header">index 577e57c..ee31ec1 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_options.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_options.c</span>
<span class="p_chunk">@@ -9,6 +9,8 @@</span> <span class="p_context"></span>
  * (at your option) any later version.
  */
 
<span class="p_add">+#define DEBUG 1</span>
<span class="p_add">+</span>
 #include &lt;linux/errno.h&gt;
 #include &lt;linux/if.h&gt;
 #include &lt;linux/netdevice.h&gt;
<span class="p_chunk">@@ -719,13 +721,13 @@</span> <span class="p_context"> static int bond_option_mode_set(struct bonding *bond,</span>
 				const struct bond_opt_value *newval)
 {
 	if (!bond_mode_uses_arp(newval-&gt;value) &amp;&amp; bond-&gt;params.arp_interval) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;%s mode is incompatible with arp monitoring, start mii monitoring\n&quot;,</span>
 			    newval-&gt;string);
 		/* disable arp monitoring */
 		bond-&gt;params.arp_interval = 0;
 		/* set miimon to default value */
 		bond-&gt;params.miimon = BOND_DEFAULT_MIIMON;
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %d\n&quot;,</span>
 			    bond-&gt;params.miimon);
 	}
 
<span class="p_chunk">@@ -769,7 +771,7 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 	block_netpoll_tx();
 	/* check to see if we are clearing active */
 	if (!slave_dev) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Clearing current active slave\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;curr_active_slave, NULL);
 		bond_select_active_slave(bond);
 	} else {
<span class="p_chunk">@@ -780,12 +782,12 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 
 		if (new_active == old_active) {
 			/* do nothing */
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;%s is already the current active slave\n&quot;,</span>
 				    new_active-&gt;dev-&gt;name);
 		} else {
 			if (old_active &amp;&amp; (new_active-&gt;link == BOND_LINK_UP) &amp;&amp;
 			    bond_slave_is_up(new_active)) {
<span class="p_del">-				netdev_info(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
<span class="p_add">+				netdev_dbg(bond-&gt;dev, &quot;Setting %s as active slave\n&quot;,</span>
 					    new_active-&gt;dev-&gt;name);
 				bond_change_active_slave(bond, new_active);
 			} else {
<span class="p_chunk">@@ -808,17 +810,17 @@</span> <span class="p_context"> static int bond_option_active_slave_set(struct bonding *bond,</span>
 static int bond_option_miimon_set(struct bonding *bond,
 				  const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting MII monitoring interval to %llu\n&quot;,</span>
 		    newval-&gt;value);
 	bond-&gt;params.miimon = newval-&gt;value;
 	if (bond-&gt;params.updelay)
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Note: Updating updelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
 			bond-&gt;params.updelay * bond-&gt;params.miimon);
 	if (bond-&gt;params.downdelay)
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n&quot;,</span>
 			    bond-&gt;params.downdelay * bond-&gt;params.miimon);
 	if (newval-&gt;value &amp;&amp; bond-&gt;params.arp_interval) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n&quot;);</span>
 		bond-&gt;params.arp_interval = 0;
 		if (bond-&gt;params.arp_validate)
 			bond-&gt;params.arp_validate = BOND_ARP_VALIDATE_NONE;
<span class="p_chunk">@@ -860,7 +862,7 @@</span> <span class="p_context"> static int bond_option_updelay_set(struct bonding *bond,</span>
 			    bond-&gt;params.miimon);
 	}
 	bond-&gt;params.updelay = value / bond-&gt;params.miimon;
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting up delay to %d\n&quot;,</span>
 		    bond-&gt;params.updelay * bond-&gt;params.miimon);
 
 	return 0;
<span class="p_chunk">@@ -882,7 +884,7 @@</span> <span class="p_context"> static int bond_option_downdelay_set(struct bonding *bond,</span>
 			    bond-&gt;params.miimon);
 	}
 	bond-&gt;params.downdelay = value / bond-&gt;params.miimon;
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting down delay to %d\n&quot;,</span>
 		    bond-&gt;params.downdelay * bond-&gt;params.miimon);
 
 	return 0;
<span class="p_chunk">@@ -891,7 +893,7 @@</span> <span class="p_context"> static int bond_option_downdelay_set(struct bonding *bond,</span>
 static int bond_option_use_carrier_set(struct bonding *bond,
 				       const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting use_carrier to %llu\n&quot;,</span>
 		    newval-&gt;value);
 	bond-&gt;params.use_carrier = newval-&gt;value;
 
<span class="p_chunk">@@ -905,16 +907,16 @@</span> <span class="p_context"> static int bond_option_use_carrier_set(struct bonding *bond,</span>
 static int bond_option_arp_interval_set(struct bonding *bond,
 					const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ARP monitoring interval to %llu\n&quot;,</span>
 		    newval-&gt;value);
 	bond-&gt;params.arp_interval = newval-&gt;value;
 	if (newval-&gt;value) {
 		if (bond-&gt;params.miimon) {
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n&quot;);</span>
 			bond-&gt;params.miimon = 0;
 		}
 		if (!bond-&gt;params.arp_targets[0])
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;ARP monitoring has been set up, but no ARP targets have been specified\n&quot;);</span>
 	}
 	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {
 		/* If the interface is up, we may need to fire off
<span class="p_chunk">@@ -975,7 +977,7 @@</span> <span class="p_context"> static int _bond_option_arp_ip_target_add(struct bonding *bond, __be32 target)</span>
 		return -EINVAL;
 	}
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Adding ARP target %pI4\n&quot;, &amp;target);</span>
 
 	_bond_options_arp_ip_target_set(bond, ind, target, jiffies);
 
<span class="p_chunk">@@ -1011,7 +1013,7 @@</span> <span class="p_context"> static int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target)</span>
 	if (ind == 0 &amp;&amp; !targets[1] &amp;&amp; bond-&gt;params.arp_interval)
 		netdev_warn(bond-&gt;dev, &quot;Removing last arp target with arp_interval on\n&quot;);
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Removing ARP target %pI4\n&quot;, &amp;target);</span>
 
 	bond_for_each_slave(bond, slave, iter) {
 		targets_rx = slave-&gt;target_last_arp_rx;
<span class="p_chunk">@@ -1063,7 +1065,7 @@</span> <span class="p_context"> static int bond_option_arp_ip_targets_set(struct bonding *bond,</span>
 static int bond_option_arp_validate_set(struct bonding *bond,
 					const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting arp_validate to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 
 	if (bond-&gt;dev-&gt;flags &amp; IFF_UP) {
<span class="p_chunk">@@ -1080,7 +1082,7 @@</span> <span class="p_context"> static int bond_option_arp_validate_set(struct bonding *bond,</span>
 static int bond_option_arp_all_targets_set(struct bonding *bond,
 					   const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting arp_all_targets to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.arp_all_targets = newval-&gt;value;
 
<span class="p_chunk">@@ -1101,7 +1103,7 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 		*p = &#39;\0&#39;;
 	/* check to see if we are clearing primary */
 	if (!strlen(primary)) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);
 		memset(bond-&gt;params.primary, 0, sizeof(bond-&gt;params.primary));
 		bond_select_active_slave(bond);
<span class="p_chunk">@@ -1110,7 +1112,7 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 
 	bond_for_each_slave(bond, slave, iter) {
 		if (strncmp(slave-&gt;dev-&gt;name, primary, IFNAMSIZ) == 0) {
<span class="p_del">-			netdev_info(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
<span class="p_add">+			netdev_dbg(bond-&gt;dev, &quot;Setting %s as primary slave\n&quot;,</span>
 				    slave-&gt;dev-&gt;name);
 			rcu_assign_pointer(bond-&gt;primary_slave, slave);
 			strcpy(bond-&gt;params.primary, slave-&gt;dev-&gt;name);
<span class="p_chunk">@@ -1120,14 +1122,14 @@</span> <span class="p_context"> static int bond_option_primary_set(struct bonding *bond,</span>
 	}
 
 	if (rtnl_dereference(bond-&gt;primary_slave)) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Setting primary slave to None\n&quot;);</span>
 		RCU_INIT_POINTER(bond-&gt;primary_slave, NULL);
 		bond_select_active_slave(bond);
 	}
 	strncpy(bond-&gt;params.primary, primary, IFNAMSIZ);
 	bond-&gt;params.primary[IFNAMSIZ - 1] = 0;
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Recording %s as primary, but it has not been enslaved to %s yet\n&quot;,</span>
 		    primary, bond-&gt;dev-&gt;name);
 
 out:
<span class="p_chunk">@@ -1139,7 +1141,7 @@</span> <span class="p_context"> out:</span>
 static int bond_option_primary_reselect_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting primary_reselect to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.primary_reselect = newval-&gt;value;
 
<span class="p_chunk">@@ -1153,7 +1155,7 @@</span> <span class="p_context"> static int bond_option_primary_reselect_set(struct bonding *bond,</span>
 static int bond_option_fail_over_mac_set(struct bonding *bond,
 					 const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting fail_over_mac to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.fail_over_mac = newval-&gt;value;
 
<span class="p_chunk">@@ -1163,7 +1165,7 @@</span> <span class="p_context"> static int bond_option_fail_over_mac_set(struct bonding *bond,</span>
 static int bond_option_xmit_hash_policy_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting xmit hash policy to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.xmit_policy = newval-&gt;value;
 
<span class="p_chunk">@@ -1173,7 +1175,7 @@</span> <span class="p_context"> static int bond_option_xmit_hash_policy_set(struct bonding *bond,</span>
 static int bond_option_resend_igmp_set(struct bonding *bond,
 				       const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting resend_igmp to %llu\n&quot;,</span>
 		    newval-&gt;value);
 	bond-&gt;params.resend_igmp = newval-&gt;value;
 
<span class="p_chunk">@@ -1212,7 +1214,7 @@</span> <span class="p_context"> static int bond_option_all_slaves_active_set(struct bonding *bond,</span>
 static int bond_option_min_links_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting min links value to %llu\n&quot;,</span>
 		    newval-&gt;value);
 	bond-&gt;params.min_links = newval-&gt;value;
 	bond_set_carrier(bond);
<span class="p_chunk">@@ -1230,7 +1232,9 @@</span> <span class="p_context"> static int bond_option_lp_interval_set(struct bonding *bond,</span>
 
 static int bond_option_pps_set(struct bonding *bond,
 			       const struct bond_opt_value *newval)
<span class="p_del">-{</span>
<span class="p_add">+{	</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting packets per slave to %llu\n&quot;,</span>
<span class="p_add">+		    newval-&gt;value);</span>
 	bond-&gt;params.packets_per_slave = newval-&gt;value;
 	if (newval-&gt;value &gt; 0) {
 		bond-&gt;params.reciprocal_packets_per_slave =
<span class="p_chunk">@@ -1249,7 +1253,7 @@</span> <span class="p_context"> static int bond_option_pps_set(struct bonding *bond,</span>
 static int bond_option_lacp_rate_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting LACP rate to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.lacp_fast = newval-&gt;value;
 	bond_3ad_update_lacp_rate(bond);
<span class="p_chunk">@@ -1260,7 +1264,7 @@</span> <span class="p_context"> static int bond_option_lacp_rate_set(struct bonding *bond,</span>
 static int bond_option_ad_select_set(struct bonding *bond,
 				     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_select to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.ad_select = newval-&gt;value;
 
<span class="p_chunk">@@ -1322,7 +1326,7 @@</span> <span class="p_context"> out:</span>
 	return ret;
 
 err_no_cmd:
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;invalid input for queue_id set\n&quot;);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;invalid input for queue_id set\n&quot;);</span>
 	ret = -EPERM;
 	goto out;
 
<span class="p_chunk">@@ -1344,7 +1348,7 @@</span> <span class="p_context"> static int bond_option_slaves_set(struct bonding *bond,</span>
 
 	dev = __dev_get_by_name(dev_net(bond-&gt;dev), ifname);
 	if (!dev) {
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;interface %s does not exist!\n&quot;,</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;interface %s does not exist!\n&quot;,</span>
 			    ifname);
 		ret = -ENODEV;
 		goto out;
<span class="p_chunk">@@ -1352,12 +1356,12 @@</span> <span class="p_context"> static int bond_option_slaves_set(struct bonding *bond,</span>
 
 	switch (command[0]) {
 	case &#39;+&#39;:
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Adding slave %s\n&quot;, dev-&gt;name);</span>
 		ret = bond_enslave(bond-&gt;dev, dev);
 		break;
 
 	case &#39;-&#39;:
<span class="p_del">-		netdev_info(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
<span class="p_add">+		netdev_dbg(bond-&gt;dev, &quot;Removing slave %s\n&quot;, dev-&gt;name);</span>
 		ret = bond_release(bond-&gt;dev, dev);
 		break;
 
<span class="p_chunk">@@ -1377,7 +1381,7 @@</span> <span class="p_context"> err_no_cmd:</span>
 static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,
 					  const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting dynamic-lb to %s (%llu)\n&quot;,</span>
 		    newval-&gt;string, newval-&gt;value);
 	bond-&gt;params.tlb_dynamic_lb = newval-&gt;value;
 
<span class="p_chunk">@@ -1387,7 +1391,7 @@</span> <span class="p_context"> static int bond_option_tlb_dynamic_lb_set(struct bonding *bond,</span>
 static int bond_option_ad_actor_sys_prio_set(struct bonding *bond,
 					     const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_sys_prio to %llu\n&quot;,</span>
 		    newval-&gt;value);
 
 	bond-&gt;params.ad_actor_sys_prio = newval-&gt;value;
<span class="p_chunk">@@ -1417,7 +1421,7 @@</span> <span class="p_context"> static int bond_option_ad_actor_system_set(struct bonding *bond,</span>
 	if (!is_valid_ether_addr(mac))
 		goto err;
 
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_actor_system to %pM\n&quot;, mac);</span>
 	ether_addr_copy(bond-&gt;params.ad_actor_system, mac);
 	bond_3ad_update_ad_actor_settings(bond);
 
<span class="p_chunk">@@ -1431,7 +1435,7 @@</span> <span class="p_context"> err:</span>
 static int bond_option_ad_user_port_key_set(struct bonding *bond,
 					    const struct bond_opt_value *newval)
 {
<span class="p_del">-	netdev_info(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
<span class="p_add">+	netdev_dbg(bond-&gt;dev, &quot;Setting ad_user_port_key to %llu\n&quot;,</span>
 		    newval-&gt;value);
 
 	bond-&gt;params.ad_user_port_key = newval-&gt;value;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



