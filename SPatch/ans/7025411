
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,3/4] mm: pack compound_dtor and compound_order into one word in struct page - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,3/4] mm: pack compound_dtor and compound_order into one word in struct page</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 17, 2015, 3:09 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1439824145-25397-4-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7025411/mbox/"
   >mbox</a>
|
   <a href="/patch/7025411/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7025411/">/patch/7025411/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id CCEB3C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Aug 2015 15:09:22 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C794720690
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Aug 2015 15:09:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id DD9B020692
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 17 Aug 2015 15:09:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755430AbbHQPJR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 17 Aug 2015 11:09:17 -0400
Received: from mga03.intel.com ([134.134.136.65]:7277 &quot;EHLO mga03.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752382AbbHQPJO (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 17 Aug 2015 11:09:14 -0400
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by orsmga103.jf.intel.com with ESMTP; 17 Aug 2015 08:09:12 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.15,695,1432623600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;785693615&quot;
Received: from black.fi.intel.com ([10.237.72.157])
	by orsmga002.jf.intel.com with ESMTP; 17 Aug 2015 08:09:09 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id D7FB5251; Mon, 17 Aug 2015 18:09:08 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv2 3/4] mm: pack compound_dtor and compound_order into one
	word in struct page
Date: Mon, 17 Aug 2015 18:09:04 +0300
Message-Id: &lt;1439824145-25397-4-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;1439824145-25397-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1439824145-25397-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Aug. 17, 2015, 3:09 p.m.</div>
<pre class="content">
The patch halves space occupied by compound_dtor and compound_order in
struct page.

For compound_order, it&#39;s trivial long -&gt; int/short conversion.

For get_compound_page_dtor(), we now use hardcoded table for destructor
lookup and store its index in the struct page instead of direct pointer
to destructor. It shouldn&#39;t be a big trouble to maintain the table: we
have only two destructor and NULL currently.

This patch free up one word in tail pages for reuse. This is preparation
for the next patch.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 include/linux/mm.h       | 22 +++++++++++++++++-----
 include/linux/mm_types.h | 11 +++++++----
 mm/hugetlb.c             |  8 ++++----
 mm/page_alloc.c          |  9 ++++++++-
 4 files changed, 36 insertions(+), 14 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - Aug. 17, 2015, 10:59 p.m.</div>
<pre class="content">
On Mon, 17 Aug 2015, Kirill A. Shutemov wrote:
<span class="quote">
&gt; The patch halves space occupied by compound_dtor and compound_order in</span>
<span class="quote">&gt; struct page.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For compound_order, it&#39;s trivial long -&gt; int/short conversion.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For get_compound_page_dtor(), we now use hardcoded table for destructor</span>
<span class="quote">&gt; lookup and store its index in the struct page instead of direct pointer</span>
<span class="quote">&gt; to destructor. It shouldn&#39;t be a big trouble to maintain the table: we</span>
<span class="quote">&gt; have only two destructor and NULL currently.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch free up one word in tail pages for reuse. This is preparation</span>
<span class="quote">&gt; for the next patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>

Well, yes, that is one way of doing it.  But I&#39;d have thought the time
for complicating it, instead of simplifying it with direct calls,
would be when someone adds another destructor.  Up to Andrew.
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  include/linux/mm.h       | 22 +++++++++++++++++-----</span>
<span class="quote">&gt;  include/linux/mm_types.h | 11 +++++++----</span>
<span class="quote">&gt;  mm/hugetlb.c             |  8 ++++----</span>
<span class="quote">&gt;  mm/page_alloc.c          |  9 ++++++++-</span>
<span class="quote">&gt;  4 files changed, 36 insertions(+), 14 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="quote">&gt; index 2e872f92dbac..9c21bbb8875a 100644</span>
<span class="quote">&gt; --- a/include/linux/mm.h</span>
<span class="quote">&gt; +++ b/include/linux/mm.h</span>
<span class="quote">&gt; @@ -575,18 +575,30 @@ int split_free_page(struct page *page);</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Compound pages have a destructor function.  Provide a</span>
<span class="quote">&gt;   * prototype for that function and accessor functions.</span>
<span class="quote">&gt; - * These are _only_ valid on the head of a PG_compound page.</span>
<span class="quote">&gt; + * These are _only_ valid on the head of a compound page.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; +typedef void compound_page_dtor(struct page *);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Keep the enum in sync with compound_page_dtors array in mm/page_alloc.c */</span>
<span class="quote">&gt; +enum {</span>
<span class="quote">&gt; +	NULL_COMPOUND_DTOR,</span>
<span class="quote">&gt; +	COMPOUND_PAGE_DTOR,</span>
<span class="quote">&gt; +	HUGETLB_PAGE_DTOR,</span>
<span class="quote">&gt; +	NR_COMPOUND_DTORS,</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +extern compound_page_dtor * const compound_page_dtors[];</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void set_compound_page_dtor(struct page *page,</span>
<span class="quote">&gt; -						compound_page_dtor *dtor)</span>
<span class="quote">&gt; +		unsigned int compound_dtor)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	page[1].compound_dtor = dtor;</span>
<span class="quote">&gt; +	VM_BUG_ON_PAGE(compound_dtor &gt;= NR_COMPOUND_DTORS, page);</span>
<span class="quote">&gt; +	page[1].compound_dtor = compound_dtor;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline compound_page_dtor *get_compound_page_dtor(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return page[1].compound_dtor;</span>
<span class="quote">&gt; +	VM_BUG_ON_PAGE(page[1].compound_dtor &gt;= NR_COMPOUND_DTORS, page);</span>
<span class="quote">&gt; +	return compound_page_dtors[page[1].compound_dtor];</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline int compound_order(struct page *page)</span>
<span class="quote">&gt; @@ -596,7 +608,7 @@ static inline int compound_order(struct page *page)</span>
<span class="quote">&gt;  	return page[1].compound_order;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline void set_compound_order(struct page *page, unsigned long order)</span>
<span class="quote">&gt; +static inline void set_compound_order(struct page *page, unsigned int order)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	page[1].compound_order = order;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index 58620ac7f15c..63cdfe7ec336 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -28,8 +28,6 @@ struct mem_cgroup;</span>
<span class="quote">&gt;  		IS_ENABLED(CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK))</span>
<span class="quote">&gt;  #define ALLOC_SPLIT_PTLOCKS	(SPINLOCK_SIZE &gt; BITS_PER_LONG/8)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -typedef void compound_page_dtor(struct page *);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Each physical page in the system has a struct page associated with</span>
<span class="quote">&gt;   * it to keep track of whatever it is we are using the page for at the</span>
<span class="quote">&gt; @@ -145,8 +143,13 @@ struct page {</span>
<span class="quote">&gt;  						 */</span>
<span class="quote">&gt;  		/* First tail page of compound page */</span>
<span class="quote">&gt;  		struct {</span>
<span class="quote">&gt; -			compound_page_dtor *compound_dtor;</span>
<span class="quote">&gt; -			unsigned long compound_order;</span>
<span class="quote">&gt; +#ifdef CONFIG_64BIT</span>
<span class="quote">&gt; +			unsigned int compound_dtor;</span>
<span class="quote">&gt; +			unsigned int compound_order;</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +			unsigned short int compound_dtor;</span>
<span class="quote">&gt; +			unsigned short int compound_order;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		};</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if defined(CONFIG_TRANSPARENT_HUGEPAGE) &amp;&amp; USE_SPLIT_PMD_PTLOCKS</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index a8c3087089d8..8ea74caa1fa8 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -969,7 +969,7 @@ static void update_and_free_page(struct hstate *h, struct page *page)</span>
<span class="quote">&gt;  				1 &lt;&lt; PG_writeback);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	VM_BUG_ON_PAGE(hugetlb_cgroup_from_page(page), page);</span>
<span class="quote">&gt; -	set_compound_page_dtor(page, NULL);</span>
<span class="quote">&gt; +	set_compound_page_dtor(page, NULL_COMPOUND_DTOR);</span>
<span class="quote">&gt;  	set_page_refcounted(page);</span>
<span class="quote">&gt;  	if (hstate_is_gigantic(h)) {</span>
<span class="quote">&gt;  		destroy_compound_gigantic_page(page, huge_page_order(h));</span>
<span class="quote">&gt; @@ -1065,7 +1065,7 @@ void free_huge_page(struct page *page)</span>
<span class="quote">&gt;  static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	INIT_LIST_HEAD(&amp;page-&gt;lru);</span>
<span class="quote">&gt; -	set_compound_page_dtor(page, free_huge_page);</span>
<span class="quote">&gt; +	set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);</span>
<span class="quote">&gt;  	spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;  	set_hugetlb_cgroup(page, NULL);</span>
<span class="quote">&gt;  	h-&gt;nr_huge_pages++;</span>
<span class="quote">&gt; @@ -1117,7 +1117,7 @@ int PageHuge(struct page *page)</span>
<span class="quote">&gt;  		return 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	page = compound_head(page);</span>
<span class="quote">&gt; -	return get_compound_page_dtor(page) == free_huge_page;</span>
<span class="quote">&gt; +	return page[1].compound_dtor == HUGETLB_PAGE_DTOR;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(PageHuge);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1314,7 +1314,7 @@ static struct page *alloc_buddy_huge_page(struct hstate *h, int nid)</span>
<span class="quote">&gt;  	if (page) {</span>
<span class="quote">&gt;  		INIT_LIST_HEAD(&amp;page-&gt;lru);</span>
<span class="quote">&gt;  		r_nid = page_to_nid(page);</span>
<span class="quote">&gt; -		set_compound_page_dtor(page, free_huge_page);</span>
<span class="quote">&gt; +		set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);</span>
<span class="quote">&gt;  		set_hugetlb_cgroup(page, NULL);</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt;  		 * We incremented the global counters already</span>
<span class="quote">&gt; diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="quote">&gt; index df959b7d6085..beab86e694b2 100644</span>
<span class="quote">&gt; --- a/mm/page_alloc.c</span>
<span class="quote">&gt; +++ b/mm/page_alloc.c</span>
<span class="quote">&gt; @@ -208,6 +208,13 @@ static char * const zone_names[MAX_NR_ZONES] = {</span>
<span class="quote">&gt;  	 &quot;Movable&quot;,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static void free_compound_page(struct page *page);</span>
<span class="quote">&gt; +compound_page_dtor * const compound_page_dtors[] = {</span>
<span class="quote">&gt; +	NULL,</span>
<span class="quote">&gt; +	free_compound_page,</span>
<span class="quote">&gt; +	free_huge_page,</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  int min_free_kbytes = 1024;</span>
<span class="quote">&gt;  int user_min_free_kbytes = -1;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -437,7 +444,7 @@ void prep_compound_page(struct page *page, unsigned long order)</span>
<span class="quote">&gt;  	int i;</span>
<span class="quote">&gt;  	int nr_pages = 1 &lt;&lt; order;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	set_compound_page_dtor(page, free_compound_page);</span>
<span class="quote">&gt; +	set_compound_page_dtor(page, COMPOUND_PAGE_DTOR);</span>
<span class="quote">&gt;  	set_compound_order(page, order);</span>
<span class="quote">&gt;  	__SetPageHead(page);</span>
<span class="quote">&gt;  	for (i = 1; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.5.0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
<span class="quote">&gt; </span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Aug. 18, 2015, 3:43 p.m.</div>
<pre class="content">
On Mon 17-08-15 18:09:04, Kirill A. Shutemov wrote:
<span class="quote">&gt; The patch halves space occupied by compound_dtor and compound_order in</span>
<span class="quote">&gt; struct page.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For compound_order, it&#39;s trivial long -&gt; int/short conversion.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For get_compound_page_dtor(), we now use hardcoded table for destructor</span>
<span class="quote">&gt; lookup and store its index in the struct page instead of direct pointer</span>
<span class="quote">&gt; to destructor. It shouldn&#39;t be a big trouble to maintain the table: we</span>
<span class="quote">&gt; have only two destructor and NULL currently.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch free up one word in tail pages for reuse. This is preparation</span>
<span class="quote">&gt; for the next patch.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="reviewed-by">
Reviewed-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>

[...]
<span class="quote">&gt; @@ -145,8 +143,13 @@ struct page {</span>
<span class="quote">&gt;  						 */</span>
<span class="quote">&gt;  		/* First tail page of compound page */</span>
<span class="quote">&gt;  		struct {</span>
<span class="quote">&gt; -			compound_page_dtor *compound_dtor;</span>
<span class="quote">&gt; -			unsigned long compound_order;</span>
<span class="quote">&gt; +#ifdef CONFIG_64BIT</span>
<span class="quote">&gt; +			unsigned int compound_dtor;</span>
<span class="quote">&gt; +			unsigned int compound_order;</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +			unsigned short int compound_dtor;</span>
<span class="quote">&gt; +			unsigned short int compound_order;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		};</span>

Why do we need this ifdef? We can go with short for both 32b and 64b
AFAICS. We do not use compound_order for anything else than the order,
right?

While I am looking at this, it seems we are jugling with type for order
quite a lot - int, unsing int and even unsigned long.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Aug. 18, 2015, 4:05 p.m.</div>
<pre class="content">
On Mon 17-08-15 18:09:04, Kirill A. Shutemov wrote:
[...]
<span class="quote">&gt; +/* Keep the enum in sync with compound_page_dtors array in mm/page_alloc.c */</span>
<span class="quote">&gt; +enum {</span>
<span class="quote">&gt; +	NULL_COMPOUND_DTOR,</span>
<span class="quote">&gt; +	COMPOUND_PAGE_DTOR,</span>
<span class="quote">&gt; +	HUGETLB_PAGE_DTOR,</span>
<span class="quote">&gt; +	NR_COMPOUND_DTORS,</span>
<span class="quote">&gt; +};</span>
[...]
<span class="quote">&gt; +static void free_compound_page(struct page *page);</span>
<span class="quote">&gt; +compound_page_dtor * const compound_page_dtors[] = {</span>
<span class="quote">&gt; +	NULL,</span>
<span class="quote">&gt; +	free_compound_page,</span>
<span class="quote">&gt; +	free_huge_page,</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>

Both need ifdef CONFIG_HUGETLB_PAGE as my compile test batter just found
out.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Aug. 18, 2015, 6:22 p.m.</div>
<pre class="content">
On Tue, Aug 18, 2015 at 05:43:00PM +0200, Michal Hocko wrote:
<span class="quote">&gt; On Mon 17-08-15 18:09:04, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; The patch halves space occupied by compound_dtor and compound_order in</span>
<span class="quote">&gt; &gt; struct page.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; For compound_order, it&#39;s trivial long -&gt; int/short conversion.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; For get_compound_page_dtor(), we now use hardcoded table for destructor</span>
<span class="quote">&gt; &gt; lookup and store its index in the struct page instead of direct pointer</span>
<span class="quote">&gt; &gt; to destructor. It shouldn&#39;t be a big trouble to maintain the table: we</span>
<span class="quote">&gt; &gt; have only two destructor and NULL currently.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This patch free up one word in tail pages for reuse. This is preparation</span>
<span class="quote">&gt; &gt; for the next patch.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; @@ -145,8 +143,13 @@ struct page {</span>
<span class="quote">&gt; &gt;  						 */</span>
<span class="quote">&gt; &gt;  		/* First tail page of compound page */</span>
<span class="quote">&gt; &gt;  		struct {</span>
<span class="quote">&gt; &gt; -			compound_page_dtor *compound_dtor;</span>
<span class="quote">&gt; &gt; -			unsigned long compound_order;</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_64BIT</span>
<span class="quote">&gt; &gt; +			unsigned int compound_dtor;</span>
<span class="quote">&gt; &gt; +			unsigned int compound_order;</span>
<span class="quote">&gt; &gt; +#else</span>
<span class="quote">&gt; &gt; +			unsigned short int compound_dtor;</span>
<span class="quote">&gt; &gt; +			unsigned short int compound_order;</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  		};</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why do we need this ifdef? We can go with short for both 32b and 64b</span>
<span class="quote">&gt; AFAICS.</span>

My assumption was that operations on ints can be faster on some
[micro]arhictectures. I&#39;m not sure if it&#39;s ever true.
<span class="quote">
&gt; We do not use compound_order for anything else than the order, right?</span>

Right.
<span class="quote">
&gt; While I am looking at this, it seems we are jugling with type for order</span>
<span class="quote">&gt; quite a lot - int, unsing int and even unsigned long.</span>

Yeah. It&#39;s mess. I&#39;ll check if I can fix anything of it in v3.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Aug. 18, 2015, 6:22 p.m.</div>
<pre class="content">
On Tue, Aug 18, 2015 at 06:05:31PM +0200, Michal Hocko wrote:
<span class="quote">&gt; On Mon 17-08-15 18:09:04, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; +/* Keep the enum in sync with compound_page_dtors array in mm/page_alloc.c */</span>
<span class="quote">&gt; &gt; +enum {</span>
<span class="quote">&gt; &gt; +	NULL_COMPOUND_DTOR,</span>
<span class="quote">&gt; &gt; +	COMPOUND_PAGE_DTOR,</span>
<span class="quote">&gt; &gt; +	HUGETLB_PAGE_DTOR,</span>
<span class="quote">&gt; &gt; +	NR_COMPOUND_DTORS,</span>
<span class="quote">&gt; &gt; +};</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; +static void free_compound_page(struct page *page);</span>
<span class="quote">&gt; &gt; +compound_page_dtor * const compound_page_dtors[] = {</span>
<span class="quote">&gt; &gt; +	NULL,</span>
<span class="quote">&gt; &gt; +	free_compound_page,</span>
<span class="quote">&gt; &gt; +	free_huge_page,</span>
<span class="quote">&gt; &gt; +};</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Both need ifdef CONFIG_HUGETLB_PAGE as my compile test batter just found</span>
<span class="quote">&gt; out.</span>

I&#39;ll fix that.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 2e872f92dbac..9c21bbb8875a 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -575,18 +575,30 @@</span> <span class="p_context"> int split_free_page(struct page *page);</span>
 /*
  * Compound pages have a destructor function.  Provide a
  * prototype for that function and accessor functions.
<span class="p_del">- * These are _only_ valid on the head of a PG_compound page.</span>
<span class="p_add">+ * These are _only_ valid on the head of a compound page.</span>
  */
<span class="p_add">+typedef void compound_page_dtor(struct page *);</span>
<span class="p_add">+</span>
<span class="p_add">+/* Keep the enum in sync with compound_page_dtors array in mm/page_alloc.c */</span>
<span class="p_add">+enum {</span>
<span class="p_add">+	NULL_COMPOUND_DTOR,</span>
<span class="p_add">+	COMPOUND_PAGE_DTOR,</span>
<span class="p_add">+	HUGETLB_PAGE_DTOR,</span>
<span class="p_add">+	NR_COMPOUND_DTORS,</span>
<span class="p_add">+};</span>
<span class="p_add">+extern compound_page_dtor * const compound_page_dtors[];</span>
 
 static inline void set_compound_page_dtor(struct page *page,
<span class="p_del">-						compound_page_dtor *dtor)</span>
<span class="p_add">+		unsigned int compound_dtor)</span>
 {
<span class="p_del">-	page[1].compound_dtor = dtor;</span>
<span class="p_add">+	VM_BUG_ON_PAGE(compound_dtor &gt;= NR_COMPOUND_DTORS, page);</span>
<span class="p_add">+	page[1].compound_dtor = compound_dtor;</span>
 }
 
 static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
 {
<span class="p_del">-	return page[1].compound_dtor;</span>
<span class="p_add">+	VM_BUG_ON_PAGE(page[1].compound_dtor &gt;= NR_COMPOUND_DTORS, page);</span>
<span class="p_add">+	return compound_page_dtors[page[1].compound_dtor];</span>
 }
 
 static inline int compound_order(struct page *page)
<span class="p_chunk">@@ -596,7 +608,7 @@</span> <span class="p_context"> static inline int compound_order(struct page *page)</span>
 	return page[1].compound_order;
 }
 
<span class="p_del">-static inline void set_compound_order(struct page *page, unsigned long order)</span>
<span class="p_add">+static inline void set_compound_order(struct page *page, unsigned int order)</span>
 {
 	page[1].compound_order = order;
 }
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 58620ac7f15c..63cdfe7ec336 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -28,8 +28,6 @@</span> <span class="p_context"> struct mem_cgroup;</span>
 		IS_ENABLED(CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK))
 #define ALLOC_SPLIT_PTLOCKS	(SPINLOCK_SIZE &gt; BITS_PER_LONG/8)
 
<span class="p_del">-typedef void compound_page_dtor(struct page *);</span>
<span class="p_del">-</span>
 /*
  * Each physical page in the system has a struct page associated with
  * it to keep track of whatever it is we are using the page for at the
<span class="p_chunk">@@ -145,8 +143,13 @@</span> <span class="p_context"> struct page {</span>
 						 */
 		/* First tail page of compound page */
 		struct {
<span class="p_del">-			compound_page_dtor *compound_dtor;</span>
<span class="p_del">-			unsigned long compound_order;</span>
<span class="p_add">+#ifdef CONFIG_64BIT</span>
<span class="p_add">+			unsigned int compound_dtor;</span>
<span class="p_add">+			unsigned int compound_order;</span>
<span class="p_add">+#else</span>
<span class="p_add">+			unsigned short int compound_dtor;</span>
<span class="p_add">+			unsigned short int compound_order;</span>
<span class="p_add">+#endif</span>
 		};
 
 #if defined(CONFIG_TRANSPARENT_HUGEPAGE) &amp;&amp; USE_SPLIT_PMD_PTLOCKS
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index a8c3087089d8..8ea74caa1fa8 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -969,7 +969,7 @@</span> <span class="p_context"> static void update_and_free_page(struct hstate *h, struct page *page)</span>
 				1 &lt;&lt; PG_writeback);
 	}
 	VM_BUG_ON_PAGE(hugetlb_cgroup_from_page(page), page);
<span class="p_del">-	set_compound_page_dtor(page, NULL);</span>
<span class="p_add">+	set_compound_page_dtor(page, NULL_COMPOUND_DTOR);</span>
 	set_page_refcounted(page);
 	if (hstate_is_gigantic(h)) {
 		destroy_compound_gigantic_page(page, huge_page_order(h));
<span class="p_chunk">@@ -1065,7 +1065,7 @@</span> <span class="p_context"> void free_huge_page(struct page *page)</span>
 static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)
 {
 	INIT_LIST_HEAD(&amp;page-&gt;lru);
<span class="p_del">-	set_compound_page_dtor(page, free_huge_page);</span>
<span class="p_add">+	set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);</span>
 	spin_lock(&amp;hugetlb_lock);
 	set_hugetlb_cgroup(page, NULL);
 	h-&gt;nr_huge_pages++;
<span class="p_chunk">@@ -1117,7 +1117,7 @@</span> <span class="p_context"> int PageHuge(struct page *page)</span>
 		return 0;
 
 	page = compound_head(page);
<span class="p_del">-	return get_compound_page_dtor(page) == free_huge_page;</span>
<span class="p_add">+	return page[1].compound_dtor == HUGETLB_PAGE_DTOR;</span>
 }
 EXPORT_SYMBOL_GPL(PageHuge);
 
<span class="p_chunk">@@ -1314,7 +1314,7 @@</span> <span class="p_context"> static struct page *alloc_buddy_huge_page(struct hstate *h, int nid)</span>
 	if (page) {
 		INIT_LIST_HEAD(&amp;page-&gt;lru);
 		r_nid = page_to_nid(page);
<span class="p_del">-		set_compound_page_dtor(page, free_huge_page);</span>
<span class="p_add">+		set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);</span>
 		set_hugetlb_cgroup(page, NULL);
 		/*
 		 * We incremented the global counters already
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index df959b7d6085..beab86e694b2 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -208,6 +208,13 @@</span> <span class="p_context"> static char * const zone_names[MAX_NR_ZONES] = {</span>
 	 &quot;Movable&quot;,
 };
 
<span class="p_add">+static void free_compound_page(struct page *page);</span>
<span class="p_add">+compound_page_dtor * const compound_page_dtors[] = {</span>
<span class="p_add">+	NULL,</span>
<span class="p_add">+	free_compound_page,</span>
<span class="p_add">+	free_huge_page,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 int min_free_kbytes = 1024;
 int user_min_free_kbytes = -1;
 
<span class="p_chunk">@@ -437,7 +444,7 @@</span> <span class="p_context"> void prep_compound_page(struct page *page, unsigned long order)</span>
 	int i;
 	int nr_pages = 1 &lt;&lt; order;
 
<span class="p_del">-	set_compound_page_dtor(page, free_compound_page);</span>
<span class="p_add">+	set_compound_page_dtor(page, COMPOUND_PAGE_DTOR);</span>
 	set_compound_order(page, order);
 	__SetPageHead(page);
 	for (i = 1; i &lt; nr_pages; i++) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



