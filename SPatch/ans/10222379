
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,3/6] x86: Switching page-table isolation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,3/6] x86: Switching page-table isolation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 15, 2018, 4:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180215163602.61162-4-namit@vmware.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10222379/mbox/"
   >mbox</a>
|
   <a href="/patch/10222379/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10222379/">/patch/10222379/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	406126055C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Feb 2018 16:37:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3077B29491
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Feb 2018 16:37:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 24E4529494; Thu, 15 Feb 2018 16:37:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 88FA729493
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Feb 2018 16:37:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1426120AbeBOQg4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Feb 2018 11:36:56 -0500
Received: from ex13-edg-ou-002.vmware.com ([208.91.0.190]:37394 &quot;EHLO
	EX13-EDG-OU-002.vmware.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1426083AbeBOQgT (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Feb 2018 11:36:19 -0500
Received: from sc9-mailhost3.vmware.com (10.113.161.73) by
	EX13-EDG-OU-002.vmware.com (10.113.208.156) with Microsoft SMTP
	Server id 15.0.1156.6; Thu, 15 Feb 2018 08:36:07 -0800
Received: from ubuntu.localdomain (unknown [10.2.101.129])
	by sc9-mailhost3.vmware.com (Postfix) with ESMTP id 0786040B58;
	Thu, 15 Feb 2018 08:36:16 -0800 (PST)
From: Nadav Amit &lt;namit@vmware.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;
CC: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Willy Tarreau &lt;w@1wt.eu&gt;, Nadav Amit &lt;nadav.amit@gmail.com&gt;,
	&lt;x86@kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	Nadav Amit &lt;namit@vmware.com&gt;
Subject: [PATCH RFC v2 3/6] x86: Switching page-table isolation
Date: Thu, 15 Feb 2018 08:35:59 -0800
Message-ID: &lt;20180215163602.61162-4-namit@vmware.com&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20180215163602.61162-1-namit@vmware.com&gt;
References: &lt;20180215163602.61162-1-namit@vmware.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (EX13-EDG-OU-002.vmware.com: namit@vmware.com does not
	designate permitted sender hosts)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a> - Feb. 15, 2018, 4:35 p.m.</div>
<pre class="content">
On context switch, switch the page-table isolation according to the
new task. Accordingly, restore or remove CS64.

The different types of disabling are kept as a bitmap in order to
quickly check whether a certain type of disabling was switched, although
it is assumed only a single type is set at a given time. The code
prepares the facility for future disabling of PTI in other means
(prctl). To do so, the logic means that greater &quot;disabling&quot; value means
stronger disabling, and should override lower ones.
<span class="signed-off-by">
Signed-off-by: Nadav Amit &lt;namit@vmware.com&gt;</span>
---
 arch/x86/include/asm/pti.h      | 22 ++++++++++++++++++++++
 arch/x86/include/asm/tlbflush.h | 12 ++++++++++++
 arch/x86/mm/tlb.c               | 25 +++++++++++++++++++++++++
 3 files changed, 59 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pti.h b/arch/x86/include/asm/pti.h</span>
<span class="p_header">index 96a5fbfedf7a..78a333699874 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pti.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pti.h</span>
<span class="p_chunk">@@ -3,6 +3,11 @@</span> <span class="p_context"></span>
 #define _ASM_X86_PTI_H
 #ifndef __ASSEMBLY__
 
<span class="p_add">+#include &lt;asm/desc.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#define PTI_DISABLE_OFF			(0)</span>
<span class="p_add">+#define PTI_DISABLE_IA32		(1 &lt;&lt; 0)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_PAGE_TABLE_ISOLATION
 static inline unsigned short mm_pti_disable(struct mm_struct *mm)
 {
<span class="p_chunk">@@ -12,10 +17,27 @@</span> <span class="p_context"> static inline unsigned short mm_pti_disable(struct mm_struct *mm)</span>
 	return mm-&gt;context.pti_disable;
 }
 
<span class="p_add">+static inline void pti_update_user_cs64(unsigned short prev_pti_disable,</span>
<span class="p_add">+					unsigned short next_pti_disable)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct desc_struct user_cs, *d;</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((prev_pti_disable ^ next_pti_disable) &amp; PTI_DISABLE_IA32)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	d = get_cpu_gdt_rw(smp_processor_id());</span>
<span class="p_add">+	user_cs = d[GDT_ENTRY_DEFAULT_USER_CS];</span>
<span class="p_add">+	user_cs.p = !(next_pti_disable &amp; PTI_DISABLE_IA32);</span>
<span class="p_add">+	write_gdt_entry(d, GDT_ENTRY_DEFAULT_USER_CS, &amp;user_cs, DESCTYPE_S);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 extern void pti_init(void);
 extern void pti_check_boottime_disable(void);
 #else
 static inline unsigned short mm_pti_disable(struct mm_struct *mm) { return 0; }
<span class="p_add">+static inline unsigned short mm_pti_disable(struct mm_struct *mm);</span>
<span class="p_add">+static inline void pti_update_user_cs64(unsigned short prev_pti_disable,</span>
<span class="p_add">+					unsigned short next_pti_disable) { }</span>
 static inline void pti_check_boottime_disable(void) { }
 #endif
 
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index cf91a484bb41..ea65cf951c49 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -310,6 +310,18 @@</span> <span class="p_context"> static inline unsigned short cpu_pti_disable(void)</span>
 	return this_cpu_read(cpu_tlbstate.pti_disable);
 }
 
<span class="p_add">+static inline void set_cpu_pti_disable(unsigned short disable)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Enabling/disabling CS64 and updating the state must be done</span>
<span class="p_add">+	 * atomically</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON_ONCE(preemptible());</span>
<span class="p_add">+</span>
<span class="p_add">+	pti_update_user_cs64(cpu_pti_disable(), disable);</span>
<span class="p_add">+	this_cpu_write(cpu_tlbstate.pti_disable, disable);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Save some of cr4 feature set we&#39;re using (e.g.  Pentium 4MB
  * enable and PPro Global page enable), so that any CPU&#39;s that boot
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 5bfe61a5e8e3..c67ef3fb4f35 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -178,6 +178,28 @@</span> <span class="p_context"> static void sync_current_stack_to_mm(struct mm_struct *mm)</span>
 		}
 	}
 }
<span class="p_add">+static void switch_pti_disable(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
<span class="p_add">+	unsigned short prev_pti_disable, next_pti_disable;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_PTI))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	prev_pti_disable = cpu_pti_disable();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Avoid concurrent changes to mm_pti_disable()), since we need to</span>
<span class="p_add">+	 * ensure both CS64 and the CPU indication are identical</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	next_pti_disable = READ_ONCE(mm-&gt;context.pti_disable);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (prev_pti_disable == next_pti_disable)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	set_cpu_pti_disable(next_pti_disable);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
 
 void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
 			struct task_struct *tsk)
<span class="p_chunk">@@ -292,6 +314,9 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);
 		}
 
<span class="p_add">+		/* Disable/reenable page-table isolation as needed */</span>
<span class="p_add">+		switch_pti_disable(next);</span>
<span class="p_add">+</span>
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
 		this_cpu_write(cpu_tlbstate.loaded_mm_asid, new_asid);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



