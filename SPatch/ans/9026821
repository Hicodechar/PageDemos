
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V2,2/7] futex: Hash private futexes per process - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V2,2/7] futex: Hash private futexes per process</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 5, 2016, 7:03 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160505170920.039546549@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9026821/mbox/"
   >mbox</a>
|
   <a href="/patch/9026821/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9026821/">/patch/9026821/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 6CD6CBF29F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 May 2016 19:06:32 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 45BAD203C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 May 2016 19:06:31 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id D322C203E6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  5 May 2016 19:06:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756040AbcEETGZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 5 May 2016 15:06:25 -0400
Received: from www.linutronix.de ([62.245.132.108]:56432 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754682AbcEETFQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 5 May 2016 15:05:16 -0400
Received: from localhost ([127.0.0.1] helo=[127.0.1.1])
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1ayOaI-0004tT-2B; Thu, 05 May 2016 21:05:14 +0200
Message-Id: &lt;20160505170920.039546549@linutronix.de&gt;
User-Agent: quilt/0.63-1
Date: Thu, 05 May 2016 19:03:37 -0000
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: Sebastian Siewior &lt;bigeasy@linutronix.de&gt;
Subject: [patch V2 2/7] futex: Hash private futexes per process
References: &lt;20160505170339.026555108@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=futex-Hash-private-futexes-per-process.patch
X-Linutronix-Spam-Score: -1.0
X-Linutronix-Spam-Level: -
X-Linutronix-Spam-Status: No , -1.0 points, 5.0 required, ALL_TRUSTED=-1,
	SHORTCIRCUIT=-0.0001, URIBL_BLOCKED=0.001
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-9.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - May 5, 2016, 7:03 p.m.</div>
<pre class="content">
<span class="from">From: Sebastian Siewior &lt;bigeasy@linutronix.de&gt;</span>

The standard futex mechanism in the Linux kernel uses a global hash to store
transient state. Collisions on that hash can lead to performance degradation
especially on NUMA systems and on real-time enabled kernels even to priority
inversions.

To mitigate that problem we provide per process private hashing. On the first
futex operation in a process the kernel allocates a hash table. The hash table
is accessible via the process mm_struct. On Numa systems the hash is allocated
node local.

If the allocation fails then the global hash table is used as fallback, so
there is no user space visible impact of this feature.

The hash size is a default value which can be tweaked by the sys admin. The
sysctl interface is implemented in a follow up patch to make the review
simpler. For applications which have special requirements for the private hash
and to allow preallocation of the hash for RT applications, we&#39;ll provide a
futex OP in a follow up patch.

Performance data acquired on a 4 socket (node) Intel machine with perf bench
futex-hash:

Threads  G 65536  P 4	  P 8      P 16       P 32     P 64     P 128    P 256

1        8175006  8645465  8617469  8628686   8625223  8664491  8590934  8631582
2	 8149869  8618385  8578185  8622267   8603253  8618787  8595073  8590591
4	 7479482  5867840  7882991  7604838   7894380  7882850  7884911  7886278
8	 7308822  2378057  5731051  5550479   7691198  7672814  7711939  7681549
16	 7295893   677414  2670682  3453552   7158906  7688978  7677603  7690290

So with the proper hash size of the private hash is ~5% faster than the global
hash.

With a full perf bench futex-hash run with one process (36 threads) per node
and 1024 futexes per thread the following results are achieved:

G 65536	 P 4     P 8     P 16     P 32     P 64     P 128    P 256    P 512    P 1024  P 2048     
2673390  368952  682626  1223908  1845922  3003524  3538313  4118533  4286925  4289589 4274020

Ratio:   0,14    0,26    0,46     0,69	   1,12     1,32     1,54     1,60     1,60    1,60

So with a private hash size of 256 buckets and above the performance is almost
steady in this pathological test case and factor 1.6 better than the global
hash. Even a 64 buckets hash is already 10% faster,
<span class="signed-off-by">
Signed-off-by: Sebastian Siewior &lt;bigeasy@linutronix.de&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 include/linux/futex.h       |   38 ++++++++--
 include/linux/futex_types.h |   12 +++
 include/linux/mm_types.h    |    4 +
 init/Kconfig                |    4 +
 kernel/fork.c               |    3 
 kernel/futex.c              |  162 +++++++++++++++++++++++++++++++++++++++++++-
 6 files changed, 212 insertions(+), 11 deletions(-)
 create mode 100644 include/linux/futex_types.h
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/include/linux/futex.h</span>
<span class="p_header">+++ b/include/linux/futex.h</span>
<span class="p_chunk">@@ -1,6 +1,7 @@</span> <span class="p_context"></span>
 #ifndef _LINUX_FUTEX_H
 #define _LINUX_FUTEX_H
 
<span class="p_add">+#include &lt;linux/futex_types.h&gt;</span>
 #include &lt;uapi/linux/futex.h&gt;
 
 struct inode;
<span class="p_chunk">@@ -21,16 +22,19 @@</span> <span class="p_context"> handle_futex_death(u32 __user *uaddr, st</span>
  *
  * offset is aligned to a multiple of sizeof(u32) (== 4) by definition.
  * We use the two low order bits of offset to tell what is the kind of key :
<span class="p_del">- *  00 : Private process futex (PTHREAD_PROCESS_PRIVATE)</span>
<span class="p_del">- *       (no reference on an inode or mm)</span>
<span class="p_add">+ *  00 : Private process futex (PTHREAD_PROCESS_PRIVATE) using process private</span>
<span class="p_add">+ *	 hash (no reference on an inode or mm)</span>
  *  01 : Shared futex (PTHREAD_PROCESS_SHARED)
  *	mapped on a file (reference on the underlying inode)
  *  10 : Shared futex (PTHREAD_PROCESS_SHARED)
  *       (but private mapping on an mm, and reference taken on it)
<span class="p_add">+ *  11 : Private process futex (PTHREAD_PROCESS_PRIVATE) using global hash</span>
<span class="p_add">+ *	 (no reference on an inode or mm)</span>
 */
 
<span class="p_del">-#define FUT_OFF_INODE    1 /* We set bit 0 if key has a reference on inode */</span>
<span class="p_del">-#define FUT_OFF_MMSHARED 2 /* We set bit 1 if key has a reference on mm */</span>
<span class="p_add">+#define FUT_OFF_INODE		0x01 /* Key has a reference on inode */</span>
<span class="p_add">+#define FUT_OFF_MMSHARED	0x02 /* Key has a reference on mm */</span>
<span class="p_add">+#define FUT_OFF_PRIVATE		0x03 /* Key has no ref on inode/mm */</span>
 
 union futex_key {
 	struct {
<span class="p_chunk">@@ -60,12 +64,30 @@</span> <span class="p_context"> extern void exit_pi_state_list(struct ta</span>
 #else
 extern int futex_cmpxchg_enabled;
 #endif
<span class="p_add">+</span>
 #else
<span class="p_del">-static inline void exit_robust_list(struct task_struct *curr)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-static inline void exit_pi_state_list(struct task_struct *curr)</span>
<span class="p_add">+static inline void exit_robust_list(struct task_struct *curr) { }</span>
<span class="p_add">+static inline void exit_pi_state_list(struct task_struct *curr) { }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+/* Process private hash data for futexes */</span>
<span class="p_add">+</span>
<span class="p_add">+extern unsigned int futex_default_hash_bits;</span>
<span class="p_add">+extern unsigned int futex_max_hash_bits;</span>
<span class="p_add">+</span>
<span class="p_add">+extern void futex_mm_hash_exit(struct mm_struct *mm);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void futex_mm_hash_init(struct mm_struct *mm)</span>
 {
<span class="p_add">+	raw_spin_lock_init(&amp;mm-&gt;futex_hash.lock);</span>
<span class="p_add">+	mm-&gt;futex_hash.hash = NULL;</span>
 }
<span class="p_add">+</span>
<span class="p_add">+#else</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void futex_mm_hash_init(struct mm_struct *mm) { }</span>
<span class="p_add">+static inline void futex_mm_hash_exit(struct mm_struct *mm) { }</span>
 #endif
<span class="p_add">+</span>
 #endif
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/include/linux/futex_types.h</span>
<span class="p_chunk">@@ -0,0 +1,12 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef _LINUX_FUTEX_TYPES_H</span>
<span class="p_add">+#define _LINUX_FUTEX_TYPES_H</span>
<span class="p_add">+</span>
<span class="p_add">+struct futex_hash_bucket;</span>
<span class="p_add">+</span>
<span class="p_add">+struct futex_hash {</span>
<span class="p_add">+	struct raw_spinlock		lock;</span>
<span class="p_add">+	unsigned int			hash_bits;</span>
<span class="p_add">+	struct futex_hash_bucket	*hash;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -11,6 +11,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/completion.h&gt;
 #include &lt;linux/cpumask.h&gt;
 #include &lt;linux/uprobes.h&gt;
<span class="p_add">+#include &lt;linux/futex_types.h&gt;</span>
 #include &lt;linux/page-flags-layout.h&gt;
 #include &lt;asm/page.h&gt;
 #include &lt;asm/mmu.h&gt;
<span class="p_chunk">@@ -442,6 +443,9 @@</span> <span class="p_context"> struct mm_struct {</span>
 
 	struct linux_binfmt *binfmt;
 
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+	struct futex_hash futex_hash;</span>
<span class="p_add">+#endif</span>
 	cpumask_var_t cpu_vm_mask_var;
 
 	/* Architecture-specific MM context */
<span class="p_header">--- a/init/Kconfig</span>
<span class="p_header">+++ b/init/Kconfig</span>
<span class="p_chunk">@@ -1498,6 +1498,10 @@</span> <span class="p_context"> config FUTEX</span>
 	  support for &quot;fast userspace mutexes&quot;.  The resulting kernel may not
 	  run glibc-based applications correctly.
 
<span class="p_add">+config FUTEX_PRIVATE_HASH</span>
<span class="p_add">+	bool</span>
<span class="p_add">+	default FUTEX &amp;&amp; SMP</span>
<span class="p_add">+</span>
 config HAVE_FUTEX_CMPXCHG
 	bool
 	depends on FUTEX
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -617,6 +617,8 @@</span> <span class="p_context"> static struct mm_struct *mm_init(struct</span>
 	mm_init_owner(mm, p);
 	mmu_notifier_mm_init(mm);
 	clear_tlb_flush_pending(mm);
<span class="p_add">+	futex_mm_hash_init(mm);</span>
<span class="p_add">+</span>
 #if defined(CONFIG_TRANSPARENT_HUGEPAGE) &amp;&amp; !USE_SPLIT_PMD_PTLOCKS
 	mm-&gt;pmd_huge_pte = NULL;
 #endif
<span class="p_chunk">@@ -713,6 +715,7 @@</span> <span class="p_context"> void mmput(struct mm_struct *mm)</span>
 		khugepaged_exit(mm); /* must run before exit_mmap */
 		exit_mmap(mm);
 		set_mm_exe_file(mm, NULL);
<span class="p_add">+		futex_mm_hash_exit(mm);</span>
 		if (!list_empty(&amp;mm-&gt;mmlist)) {
 			spin_lock(&amp;mmlist_lock);
 			list_del(&amp;mm-&gt;mmlist);
<span class="p_header">--- a/kernel/futex.c</span>
<span class="p_header">+++ b/kernel/futex.c</span>
<span class="p_chunk">@@ -23,6 +23,9 @@</span> <span class="p_context"></span>
  *  Copyright (C) IBM Corporation, 2009
  *  Thanks to Thomas Gleixner for conceptual design and careful reviews.
  *
<span class="p_add">+ *  Private hashed futex support by Sebastian Siewior and Thomas Gleixner</span>
<span class="p_add">+ *  Copyright (C) Linutronix GmbH, 2016</span>
<span class="p_add">+ *</span>
  *  Thanks to Ben LaHaise for yelling &quot;hashed waitqueues&quot; loudly
  *  enough at me, Linus for the original (flawed) idea, Matthew
  *  Kirkwood for proof-of-concept implementation.
<span class="p_chunk">@@ -49,6 +52,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/fs.h&gt;
 #include &lt;linux/file.h&gt;
 #include &lt;linux/jhash.h&gt;
<span class="p_add">+#include &lt;linux/hash.h&gt;</span>
 #include &lt;linux/init.h&gt;
 #include &lt;linux/futex.h&gt;
 #include &lt;linux/mount.h&gt;
<span class="p_chunk">@@ -169,6 +173,34 @@</span> <span class="p_context"></span>
  * the code that actually moves the futex(es) between hash buckets (requeue_futex)
  * will do the additional required waiter count housekeeping. This is done for
  * double_lock_hb() and double_unlock_hb(), respectively.
<span class="p_add">+ *</span>
<span class="p_add">+ * For private futexes we (pre)allocate a per process hash. We check lockless</span>
<span class="p_add">+ * whether the hash is already allocated. To access the hash later we need</span>
<span class="p_add">+ * information about the hash properties as well. This requires barriers as</span>
<span class="p_add">+ * follows:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * CPU 0					CPU 1</span>
<span class="p_add">+ * check_hash_allocation()</span>
<span class="p_add">+ *	if (mm-&gt;futex_hash.hash)</span>
<span class="p_add">+ *		return;</span>
<span class="p_add">+ *	hash = alloc_hash()</span>
<span class="p_add">+ *	lock(&amp;mm-&gt;futex_hash.lock);</span>
<span class="p_add">+ *	if (!mm-&gt;futex_hash.hash) {</span>
<span class="p_add">+ *	  mm-&gt;futex_hash.par = params;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *	  smp_wmb(); (A0) &lt;-paired with-|</span>
<span class="p_add">+ *					|</span>
<span class="p_add">+ *	  mm-&gt;futex_hash.hash = hash;	|</span>
<span class="p_add">+ *					|	check_hash_allocation()</span>
<span class="p_add">+ *					|	   if (mm-&gt;futex_hash.hash)</span>
<span class="p_add">+ *					|		return;</span>
<span class="p_add">+ *	  unlock(&amp;mm-&gt;futex_hash.lock);	|	get_futex_key_refs()</span>
<span class="p_add">+ *					|</span>
<span class="p_add">+ *					|--------- smp_mb() (B)</span>
<span class="p_add">+ *						s = hash(f, mm-&gt;futex_hash.par);</span>
<span class="p_add">+ *						hb = &amp;mm-&gt;futex_hash.hash[s];</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * So we utilize the existing smp_mb() in get_futex_key_refs().</span>
  */
 
 #ifndef CONFIG_HAVE_FUTEX_CMPXCHG
<span class="p_chunk">@@ -255,6 +287,22 @@</span> <span class="p_context"> struct futex_hash_bucket {</span>
 	struct plist_head chain;
 } ____cacheline_aligned_in_smp;
 
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Process private hash for non-shared futexes</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define FUTEX_USE_GLOBAL_HASH		((void *) 0x03)</span>
<span class="p_add">+</span>
<span class="p_add">+#define FUTEX_MIN_HASH_BITS		order_base_2(4UL)</span>
<span class="p_add">+#define FUTEX_DEF_HASH_BITS		order_base_2(8UL)</span>
<span class="p_add">+#define FUTEX_MAX_HASH_BITS		order_base_2(256UL)</span>
<span class="p_add">+</span>
<span class="p_add">+unsigned int futex_default_hash_bits	= FUTEX_DEF_HASH_BITS;</span>
<span class="p_add">+unsigned int futex_max_hash_bits	= FUTEX_MAX_HASH_BITS;</span>
<span class="p_add">+#else</span>
<span class="p_add">+static const unsigned int futex_default_hash_bits = 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * The base of the bucket array and its size are always used together
  * (after initialization only in hash_futex()), so ensure that they
<span class="p_chunk">@@ -374,13 +422,13 @@</span> <span class="p_context"> static inline int hb_waiters_pending(str</span>
 }
 
 /**
<span class="p_del">- * hash_futex - Return the hash bucket in the global hash</span>
<span class="p_add">+ * hash_global_futex - Return the hash bucket in the global hash</span>
  * @key:	Pointer to the futex key for which the hash is calculated
  *
  * We hash on the keys returned from get_futex_key (see below) and return the
  * corresponding hash bucket in the global hash.
  */
<span class="p_del">-static struct futex_hash_bucket *hash_futex(union futex_key *key)</span>
<span class="p_add">+static struct futex_hash_bucket *hash_global_futex(union futex_key *key)</span>
 {
 	u32 hash = jhash2((u32*)&amp;key-&gt;both.word,
 			  (sizeof(key-&gt;both.word)+sizeof(key-&gt;both.ptr))/4,
<span class="p_chunk">@@ -388,9 +436,33 @@</span> <span class="p_context"> static struct futex_hash_bucket *hash_fu</span>
 	return &amp;futex_queues[hash &amp; (futex_hashsize - 1)];
 }
 
<span class="p_add">+/**</span>
<span class="p_add">+ * hash_futex - Get the hash bucket for a futex</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns either the process private or the global hash bucket which fits the</span>
<span class="p_add">+ * key.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static struct futex_hash_bucket *hash_futex(union futex_key *key)</span>
<span class="p_add">+{</span>
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+	struct mm_struct *mm = current-&gt;mm;</span>
<span class="p_add">+	unsigned int slot;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Futexes which use the per process hash have the lower bits cleared</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (key-&gt;both.offset &amp; (FUT_OFF_INODE | FUT_OFF_MMSHARED))</span>
<span class="p_add">+		return hash_global_futex(key);</span>
<span class="p_add">+</span>
<span class="p_add">+	slot = hash_long(key-&gt;private.address, mm-&gt;futex_hash.hash_bits);</span>
<span class="p_add">+	return &amp;mm-&gt;futex_hash.hash[slot];</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return hash_global_futex(key);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
 
 /**
<span class="p_del">- * match_futex - Check whether to futex keys are equal</span>
<span class="p_add">+ * match_futex - Check whether two futex keys are equal</span>
  * @key1:	Pointer to key1
  * @key2:	Pointer to key2
  *
<span class="p_chunk">@@ -505,7 +577,20 @@</span> <span class="p_context"> get_futex_key(u32 __user *uaddr, int fsh</span>
 	 */
 	if (!fshared) {
 		key-&gt;private.mm = mm;
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If we have a process private hash, then we store uaddr</span>
<span class="p_add">+		 * instead of the page base address.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+		if (mm-&gt;futex_hash.hash != FUTEX_USE_GLOBAL_HASH) {</span>
<span class="p_add">+			key-&gt;private.address = (unsigned long) uaddr;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			key-&gt;private.address = address;</span>
<span class="p_add">+			key-&gt;both.offset |= FUT_OFF_PRIVATE;</span>
<span class="p_add">+		}</span>
<span class="p_add">+#else</span>
 		key-&gt;private.address = address;
<span class="p_add">+#endif</span>
 		get_futex_key_refs(key);  /* implies smp_mb(); (B) */
 		return 0;
 	}
<span class="p_chunk">@@ -3153,6 +3238,75 @@</span> <span class="p_context"> void exit_robust_list(struct task_struct</span>
 				   curr, pip);
 }
 
<span class="p_add">+#ifdef CONFIG_FUTEX_PRIVATE_HASH</span>
<span class="p_add">+</span>
<span class="p_add">+void futex_mm_hash_exit(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (mm-&gt;futex_hash.hash &amp;&amp; mm-&gt;futex_hash.hash != FUTEX_USE_GLOBAL_HASH)</span>
<span class="p_add">+		kfree(mm-&gt;futex_hash.hash);</span>
<span class="p_add">+	mm-&gt;futex_hash.hash = NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct futex_hash_bucket *futex_alloc_hash(unsigned int hash_bits)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct futex_hash_bucket *hb;</span>
<span class="p_add">+	size_t hash_size, size;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	hash_size = 1 &lt;&lt; hash_bits;</span>
<span class="p_add">+	size = hash_size * sizeof(struct futex_hash_bucket);</span>
<span class="p_add">+	hb = kzalloc_node(size, GFP_KERNEL, numa_node_id());</span>
<span class="p_add">+	if (!hb)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; hash_size; i++) {</span>
<span class="p_add">+		atomic_set(&amp;hb[i].waiters, 0);</span>
<span class="p_add">+		plist_head_init(&amp;hb[i].chain);</span>
<span class="p_add">+		spin_lock_init(&amp;hb[i].lock);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return hb;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void futex_populate_hash(unsigned int hash_bits)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = current-&gt;mm;</span>
<span class="p_add">+	struct futex_hash_bucket *hb = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We don&#39;t need an explicit smp_mb() when the hash is populated</span>
<span class="p_add">+	 * because before we dereference mm-&gt;futex_hash.hash_bits in the hash</span>
<span class="p_add">+	 * function we have an smp_mb() in futex_get_key_refs() already.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mm-&gt;futex_hash.hash)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If we failed to allocate a hash on the fly, fall back to the global</span>
<span class="p_add">+	 * hash.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	hb = futex_alloc_hash(hash_bits);</span>
<span class="p_add">+	if (!hb)</span>
<span class="p_add">+		hb = FUTEX_USE_GLOBAL_HASH;</span>
<span class="p_add">+</span>
<span class="p_add">+	raw_spin_lock(&amp;mm-&gt;futex_hash.lock);</span>
<span class="p_add">+	/* We might have raced with another task allocating the hash. */</span>
<span class="p_add">+	if (!mm-&gt;futex_hash.hash) {</span>
<span class="p_add">+		mm-&gt;futex_hash.hash_bits = hash_bits;</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Ensure that the above is visible before we store</span>
<span class="p_add">+		 * the pointer.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		smp_wmb(); /* (A0) Pairs with (B) */</span>
<span class="p_add">+		mm-&gt;futex_hash.hash = hb;</span>
<span class="p_add">+		hb = NULL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	raw_spin_unlock(&amp;mm-&gt;futex_hash.lock);</span>
<span class="p_add">+	kfree(hb);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else /* CONFIG_FUTEX_PRIVATE_HASH */</span>
<span class="p_add">+static inline void futex_populate_hash(unsigned int hash_bits) { }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 long do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,
 		u32 __user *uaddr2, u32 val2, u32 val3)
 {
<span class="p_chunk">@@ -3161,6 +3315,8 @@</span> <span class="p_context"> long do_futex(u32 __user *uaddr, int op,</span>
 
 	if (!(op &amp; FUTEX_PRIVATE_FLAG))
 		flags |= FLAGS_SHARED;
<span class="p_add">+	else</span>
<span class="p_add">+		futex_populate_hash(futex_default_hash_bits);</span>
 
 	if (op &amp; FUTEX_CLOCK_REALTIME) {
 		flags |= FLAGS_CLOCKRT;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



