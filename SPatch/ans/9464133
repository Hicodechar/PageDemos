
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,2/3] powerpc: get hugetlbpage handling more generic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,2/3] powerpc: get hugetlbpage handling more generic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 7, 2016, 7:47 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;e844031ecacbcb5c311c5f6d61a654023f99c785.1481093893.git.christophe.leroy@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9464133/mbox/"
   >mbox</a>
|
   <a href="/patch/9464133/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9464133/">/patch/9464133/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B263560512 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 07:47:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A1EC928441
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 07:47:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 96CB0284B0; Wed,  7 Dec 2016 07:47:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8898D28441
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  7 Dec 2016 07:47:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932372AbcLGHrf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 7 Dec 2016 02:47:35 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:24447 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932146AbcLGHra (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 7 Dec 2016 02:47:30 -0500
Received: from localhost (unknown [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3tYVvf6PfKz9ttFq;
	Wed,  7 Dec 2016 08:47:26 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id 3UOeoS2a5NEA; Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3tYVvf52sDz9ttF0;
	Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id BA9038B7BD;
	Wed,  7 Dec 2016 08:47:26 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id ZhF2lCMdpOwf; Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.2])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 736B58B7BC;
	Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 6585F67DF2; Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Message-Id: &lt;e844031ecacbcb5c311c5f6d61a654023f99c785.1481093893.git.christophe.leroy@c-s.fr&gt;
In-Reply-To: &lt;cover.1481093893.git.christophe.leroy@c-s.fr&gt;
References: &lt;cover.1481093893.git.christophe.leroy@c-s.fr&gt;
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH v4 2/3] powerpc: get hugetlbpage handling more generic
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Wed,  7 Dec 2016 08:47:26 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Dec. 7, 2016, 7:47 a.m.</div>
<pre class="content">
Today there are two implementations of hugetlbpages which are managed
by exclusive #ifdefs:
* FSL_BOOKE: several directory entries points to the same single hugepage
* BOOK3S: one upper level directory entry points to a table of hugepages

In preparation of implementation of hugepage support on the 8xx, we
need a mix of the two above solutions, because the 8xx needs both cases
depending on the size of pages:
* In 4k page size mode, each PGD entry covers a 4M bytes area. It means
that 2 PGD entries will be necessary to cover an 8M hugepage while a
single PGD entry will cover 8x 512k hugepages.
* In 16 page size mode, each PGD entry covers a 64M bytes area. It means
that 8x 8M hugepages will be covered by one PGD entry and 64x 512k
hugepages will be covers by one PGD entry.

This patch:
* removes #ifdefs in favor of if/else based on the range sizes
* merges the two huge_pte_alloc() functions as they are pretty similar
* merges the two hugetlbpage_init() functions as they are pretty similar
<span class="signed-off-by">
Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="reviewed-by">Reviewed-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt; (v3)</span>
---
v2: This part is new and results from a split of last patch of v1 serie in
two parts

v3:
- Only allocate hugepte_cache on FSL_BOOKE. Not needed on BOOK3S_64
- Removed the BUG in the unused hugepd_free(), made it
static inline {} instead.

v4:
- Fixing pdshift calculation on FSL_BOOK3E in hugetlbpage_init() by 
   using HUGEPD_PxD_SHIFT instead of PyD_SHIFT.
- Fixing default hugepage size selection on FSL_BOOK3E by spliting decision
   based on #ifdefs in order to keep previous behaviour.

 arch/powerpc/mm/hugetlbpage.c | 195 ++++++++++++++++++------------------------
 1 file changed, 81 insertions(+), 114 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">index a5d3ecd..53245aa 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -64,14 +64,16 @@</span> <span class="p_context"> static int __hugepte_alloc(struct mm_struct *mm, hugepd_t *hpdp,</span>
 {
 	struct kmem_cache *cachep;
 	pte_t *new;
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
 	int i;
<span class="p_del">-	int num_hugepd = 1 &lt;&lt; (pshift - pdshift);</span>
<span class="p_del">-	cachep = hugepte_cache;</span>
<span class="p_del">-#else</span>
<span class="p_del">-	cachep = PGT_CACHE(pdshift - pshift);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	int num_hugepd;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pshift &gt;= pdshift) {</span>
<span class="p_add">+		cachep = hugepte_cache;</span>
<span class="p_add">+		num_hugepd = 1 &lt;&lt; (pshift - pdshift);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		cachep = PGT_CACHE(pdshift - pshift);</span>
<span class="p_add">+		num_hugepd = 1;</span>
<span class="p_add">+	}</span>
 
 	new = kmem_cache_zalloc(cachep, GFP_KERNEL);
 
<span class="p_chunk">@@ -89,7 +91,7 @@</span> <span class="p_context"> static int __hugepte_alloc(struct mm_struct *mm, hugepd_t *hpdp,</span>
 	smp_wmb();
 
 	spin_lock(&amp;mm-&gt;page_table_lock);
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_add">+</span>
 	/*
 	 * We have multiple higher-level entries that point to the same
 	 * actual pte location.  Fill in each as we go and backtrack on error.
<span class="p_chunk">@@ -100,8 +102,13 @@</span> <span class="p_context"> static int __hugepte_alloc(struct mm_struct *mm, hugepd_t *hpdp,</span>
 		if (unlikely(!hugepd_none(*hpdp)))
 			break;
 		else
<span class="p_add">+#ifdef CONFIG_PPC_BOOK3S_64</span>
<span class="p_add">+			hpdp-&gt;pd = __pa(new) |</span>
<span class="p_add">+				   (shift_to_mmu_psize(pshift) &lt;&lt; 2);</span>
<span class="p_add">+#else</span>
 			/* We use the old format for PPC_FSL_BOOK3E */
 			hpdp-&gt;pd = ((unsigned long)new &amp; ~PD_HUGE) | pshift;
<span class="p_add">+#endif</span>
 	}
 	/* If we bailed from the for loop early, an error occurred, clean up */
 	if (i &lt; num_hugepd) {
<span class="p_chunk">@@ -109,17 +116,6 @@</span> <span class="p_context"> static int __hugepte_alloc(struct mm_struct *mm, hugepd_t *hpdp,</span>
 			hpdp-&gt;pd = 0;
 		kmem_cache_free(cachep, new);
 	}
<span class="p_del">-#else</span>
<span class="p_del">-	if (!hugepd_none(*hpdp))</span>
<span class="p_del">-		kmem_cache_free(cachep, new);</span>
<span class="p_del">-	else {</span>
<span class="p_del">-#ifdef CONFIG_PPC_BOOK3S_64</span>
<span class="p_del">-		hpdp-&gt;pd = __pa(new) | (shift_to_mmu_psize(pshift) &lt;&lt; 2);</span>
<span class="p_del">-#else</span>
<span class="p_del">-		hpdp-&gt;pd = ((unsigned long)new &amp; ~PD_HUGE) | pshift;</span>
<span class="p_del">-#endif</span>
<span class="p_del">-	}</span>
<span class="p_del">-#endif</span>
 	spin_unlock(&amp;mm-&gt;page_table_lock);
 	return 0;
 }
<span class="p_chunk">@@ -136,7 +132,6 @@</span> <span class="p_context"> static int __hugepte_alloc(struct mm_struct *mm, hugepd_t *hpdp,</span>
 #define HUGEPD_PUD_SHIFT PMD_SHIFT
 #endif
 
<span class="p_del">-#ifdef CONFIG_PPC_BOOK3S_64</span>
 /*
  * At this point we do the placement change only for BOOK3S 64. This would
  * possibly work on other subarchs.
<span class="p_chunk">@@ -153,6 +148,7 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm, unsigned long addr, unsigned long sz</span>
 	addr &amp;= ~(sz-1);
 	pg = pgd_offset(mm, addr);
 
<span class="p_add">+#ifdef CONFIG_PPC_BOOK3S_64</span>
 	if (pshift == PGDIR_SHIFT)
 		/* 16GB huge page */
 		return (pte_t *) pg;
<span class="p_chunk">@@ -178,32 +174,7 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm, unsigned long addr, unsigned long sz</span>
 				hpdp = (hugepd_t *)pm;
 		}
 	}
<span class="p_del">-	if (!hpdp)</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	BUG_ON(!hugepd_none(*hpdp) &amp;&amp; !hugepd_ok(*hpdp));</span>
<span class="p_del">-</span>
<span class="p_del">-	if (hugepd_none(*hpdp) &amp;&amp; __hugepte_alloc(mm, hpdp, addr, pdshift, pshift))</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	return hugepte_offset(*hpdp, addr, pdshift);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #else
<span class="p_del">-</span>
<span class="p_del">-pte_t *huge_pte_alloc(struct mm_struct *mm, unsigned long addr, unsigned long sz)</span>
<span class="p_del">-{</span>
<span class="p_del">-	pgd_t *pg;</span>
<span class="p_del">-	pud_t *pu;</span>
<span class="p_del">-	pmd_t *pm;</span>
<span class="p_del">-	hugepd_t *hpdp = NULL;</span>
<span class="p_del">-	unsigned pshift = __ffs(sz);</span>
<span class="p_del">-	unsigned pdshift = PGDIR_SHIFT;</span>
<span class="p_del">-</span>
<span class="p_del">-	addr &amp;= ~(sz-1);</span>
<span class="p_del">-</span>
<span class="p_del">-	pg = pgd_offset(mm, addr);</span>
<span class="p_del">-</span>
 	if (pshift &gt;= HUGEPD_PGD_SHIFT) {
 		hpdp = (hugepd_t *)pg;
 	} else {
<span class="p_chunk">@@ -217,7 +188,7 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm, unsigned long addr, unsigned long sz</span>
 			hpdp = (hugepd_t *)pm;
 		}
 	}
<span class="p_del">-</span>
<span class="p_add">+#endif</span>
 	if (!hpdp)
 		return NULL;
 
<span class="p_chunk">@@ -228,7 +199,6 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm, unsigned long addr, unsigned long sz</span>
 
 	return hugepte_offset(*hpdp, addr, pdshift);
 }
<span class="p_del">-#endif</span>
 
 #ifdef CONFIG_PPC_FSL_BOOK3E
 /* Build list of addresses of gigantic pages.  This function is used in early
<span class="p_chunk">@@ -310,7 +280,11 @@</span> <span class="p_context"> static int __init do_gpage_early_setup(char *param, char *val,</span>
 				npages = 0;
 			if (npages &gt; MAX_NUMBER_GPAGES) {
 				pr_warn(&quot;MMU: %lu pages requested for page &quot;
<span class="p_add">+#ifdef CONFIG_PHYS_ADDR_T_64BIT</span>
 					&quot;size %llu KB, limiting to &quot;
<span class="p_add">+#else</span>
<span class="p_add">+					&quot;size %u KB, limiting to &quot;</span>
<span class="p_add">+#endif</span>
 					__stringify(MAX_NUMBER_GPAGES) &quot;\n&quot;,
 					npages, size / 1024);
 				npages = MAX_NUMBER_GPAGES;
<span class="p_chunk">@@ -442,6 +416,8 @@</span> <span class="p_context"> static void hugepd_free(struct mmu_gather *tlb, void *hugepte)</span>
 	}
 	put_cpu_var(hugepd_freelist_cur);
 }
<span class="p_add">+#else</span>
<span class="p_add">+static inline void hugepd_free(struct mmu_gather *tlb, void *hugepte) {}</span>
 #endif
 
 static void free_hugepd_range(struct mmu_gather *tlb, hugepd_t *hpdp, int pdshift,
<span class="p_chunk">@@ -453,13 +429,11 @@</span> <span class="p_context"> static void free_hugepd_range(struct mmu_gather *tlb, hugepd_t *hpdp, int pdshif</span>
 
 	unsigned long pdmask = ~((1UL &lt;&lt; pdshift) - 1);
 	unsigned int num_hugepd = 1;
<span class="p_add">+	unsigned int shift = hugepd_shift(*hpdp);</span>
 
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
 	/* Note: On fsl the hpdp may be the first of several */
<span class="p_del">-	num_hugepd = (1 &lt;&lt; (hugepd_shift(*hpdp) - pdshift));</span>
<span class="p_del">-#else</span>
<span class="p_del">-	unsigned int shift = hugepd_shift(*hpdp);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	if (shift &gt; pdshift)</span>
<span class="p_add">+		num_hugepd = 1 &lt;&lt; (shift - pdshift);</span>
 
 	start &amp;= pdmask;
 	if (start &lt; floor)
<span class="p_chunk">@@ -475,11 +449,10 @@</span> <span class="p_context"> static void free_hugepd_range(struct mmu_gather *tlb, hugepd_t *hpdp, int pdshif</span>
 	for (i = 0; i &lt; num_hugepd; i++, hpdp++)
 		hpdp-&gt;pd = 0;
 
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_del">-	hugepd_free(tlb, hugepte);</span>
<span class="p_del">-#else</span>
<span class="p_del">-	pgtable_free_tlb(tlb, hugepte, pdshift - shift);</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	if (shift &gt;= pdshift)</span>
<span class="p_add">+		hugepd_free(tlb, hugepte);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		pgtable_free_tlb(tlb, hugepte, pdshift - shift);</span>
 }
 
 static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,
<span class="p_chunk">@@ -492,6 +465,8 @@</span> <span class="p_context"> static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,</span>
 
 	start = addr;
 	do {
<span class="p_add">+		unsigned long more;</span>
<span class="p_add">+</span>
 		pmd = pmd_offset(pud, addr);
 		next = pmd_addr_end(addr, end);
 		if (!is_hugepd(__hugepd(pmd_val(*pmd)))) {
<span class="p_chunk">@@ -502,15 +477,16 @@</span> <span class="p_context"> static void hugetlb_free_pmd_range(struct mmu_gather *tlb, pud_t *pud,</span>
 			WARN_ON(!pmd_none_or_clear_bad(pmd));
 			continue;
 		}
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
 		/*
 		 * Increment next by the size of the huge mapping since
 		 * there may be more than one entry at this level for a
 		 * single hugepage, but all of them point to
 		 * the same kmem cache that holds the hugepte.
 		 */
<span class="p_del">-		next = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pmd));</span>
<span class="p_del">-#endif</span>
<span class="p_add">+		more = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pmd));</span>
<span class="p_add">+		if (more &gt; next)</span>
<span class="p_add">+			next = more;</span>
<span class="p_add">+</span>
 		free_hugepd_range(tlb, (hugepd_t *)pmd, PMD_SHIFT,
 				  addr, next, floor, ceiling);
 	} while (addr = next, addr != end);
<span class="p_chunk">@@ -550,15 +526,17 @@</span> <span class="p_context"> static void hugetlb_free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,</span>
 			hugetlb_free_pmd_range(tlb, pud, addr, next, floor,
 					       ceiling);
 		} else {
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_add">+			unsigned long more;</span>
 			/*
 			 * Increment next by the size of the huge mapping since
 			 * there may be more than one entry at this level for a
 			 * single hugepage, but all of them point to
 			 * the same kmem cache that holds the hugepte.
 			 */
<span class="p_del">-			next = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pud));</span>
<span class="p_del">-#endif</span>
<span class="p_add">+			more = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pud));</span>
<span class="p_add">+			if (more &gt; next)</span>
<span class="p_add">+				next = more;</span>
<span class="p_add">+</span>
 			free_hugepd_range(tlb, (hugepd_t *)pud, PUD_SHIFT,
 					  addr, next, floor, ceiling);
 		}
<span class="p_chunk">@@ -615,15 +593,17 @@</span> <span class="p_context"> void hugetlb_free_pgd_range(struct mmu_gather *tlb,</span>
 				continue;
 			hugetlb_free_pud_range(tlb, pgd, addr, next, floor, ceiling);
 		} else {
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_add">+			unsigned long more;</span>
 			/*
 			 * Increment next by the size of the huge mapping since
 			 * there may be more than one entry at the pgd level
 			 * for a single hugepage, but all of them point to the
 			 * same kmem cache that holds the hugepte.
 			 */
<span class="p_del">-			next = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pgd));</span>
<span class="p_del">-#endif</span>
<span class="p_add">+			more = addr + (1 &lt;&lt; hugepd_shift(*(hugepd_t *)pgd));</span>
<span class="p_add">+			if (more &gt; next)</span>
<span class="p_add">+				next = more;</span>
<span class="p_add">+</span>
 			free_hugepd_range(tlb, (hugepd_t *)pgd, PGDIR_SHIFT,
 					  addr, next, floor, ceiling);
 		}
<span class="p_chunk">@@ -753,12 +733,13 @@</span> <span class="p_context"> static int __init add_huge_page_size(unsigned long long size)</span>
 
 	/* Check that it is a page size supported by the hardware and
 	 * that it fits within pagetable and slice limits. */
<span class="p_add">+	if (size &lt;= PAGE_SIZE)</span>
<span class="p_add">+		return -EINVAL;</span>
 #ifdef CONFIG_PPC_FSL_BOOK3E
<span class="p_del">-	if ((size &lt; PAGE_SIZE) || !is_power_of_4(size))</span>
<span class="p_add">+	if (!is_power_of_4(size))</span>
 		return -EINVAL;
 #else
<span class="p_del">-	if (!is_power_of_2(size)</span>
<span class="p_del">-	    || (shift &gt; SLICE_HIGH_SHIFT) || (shift &lt;= PAGE_SHIFT))</span>
<span class="p_add">+	if (!is_power_of_2(size) || (shift &gt; SLICE_HIGH_SHIFT))</span>
 		return -EINVAL;
 #endif
 
<span class="p_chunk">@@ -791,53 +772,15 @@</span> <span class="p_context"> static int __init hugepage_setup_sz(char *str)</span>
 }
 __setup(&quot;hugepagesz=&quot;, hugepage_setup_sz);
 
<span class="p_del">-#ifdef CONFIG_PPC_FSL_BOOK3E</span>
 struct kmem_cache *hugepte_cache;
 static int __init hugetlbpage_init(void)
 {
 	int psize;
 
<span class="p_del">-	for (psize = 0; psize &lt; MMU_PAGE_COUNT; ++psize) {</span>
<span class="p_del">-		unsigned shift;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (!mmu_psize_defs[psize].shift)</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-</span>
<span class="p_del">-		shift = mmu_psize_to_shift(psize);</span>
<span class="p_del">-</span>
<span class="p_del">-		/* Don&#39;t treat normal page sizes as huge... */</span>
<span class="p_del">-		if (shift != PAGE_SHIFT)</span>
<span class="p_del">-			if (add_huge_page_size(1ULL &lt;&lt; shift) &lt; 0)</span>
<span class="p_del">-				continue;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Create a kmem cache for hugeptes.  The bottom bits in the pte have</span>
<span class="p_del">-	 * size information encoded in them, so align them to allow this</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	hugepte_cache =  kmem_cache_create(&quot;hugepte-cache&quot;, sizeof(pte_t),</span>
<span class="p_del">-					   HUGEPD_SHIFT_MASK + 1, 0, NULL);</span>
<span class="p_del">-	if (hugepte_cache == NULL)</span>
<span class="p_del">-		panic(&quot;%s: Unable to create kmem cache for hugeptes\n&quot;,</span>
<span class="p_del">-		      __func__);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Default hpage size = 4M */</span>
<span class="p_del">-	if (mmu_psize_defs[MMU_PAGE_4M].shift)</span>
<span class="p_del">-		HPAGE_SHIFT = mmu_psize_defs[MMU_PAGE_4M].shift;</span>
<span class="p_del">-	else</span>
<span class="p_del">-		panic(&quot;%s: Unable to set default huge page size\n&quot;, __func__);</span>
<span class="p_del">-</span>
<span class="p_del">-</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-#else</span>
<span class="p_del">-static int __init hugetlbpage_init(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int psize;</span>
<span class="p_del">-</span>
<span class="p_add">+#if !defined(CONFIG_PPC_FSL_BOOK3E)</span>
 	if (!radix_enabled() &amp;&amp; !mmu_has_feature(MMU_FTR_16M_PAGE))
 		return -ENODEV;
<span class="p_del">-</span>
<span class="p_add">+#endif</span>
 	for (psize = 0; psize &lt; MMU_PAGE_COUNT; ++psize) {
 		unsigned shift;
 		unsigned pdshift;
<span class="p_chunk">@@ -850,9 +793,9 @@</span> <span class="p_context"> static int __init hugetlbpage_init(void)</span>
 		if (add_huge_page_size(1ULL &lt;&lt; shift) &lt; 0)
 			continue;
 
<span class="p_del">-		if (shift &lt; PMD_SHIFT)</span>
<span class="p_add">+		if (shift &lt; HUGEPD_PUD_SHIFT)</span>
 			pdshift = PMD_SHIFT;
<span class="p_del">-		else if (shift &lt; PUD_SHIFT)</span>
<span class="p_add">+		else if (shift &lt; HUGEPD_PGD_SHIFT)</span>
 			pdshift = PUD_SHIFT;
 		else
 			pdshift = PGDIR_SHIFT;
<span class="p_chunk">@@ -860,14 +803,36 @@</span> <span class="p_context"> static int __init hugetlbpage_init(void)</span>
 		 * if we have pdshift and shift value same, we don&#39;t
 		 * use pgt cache for hugepd.
 		 */
<span class="p_del">-		if (pdshift != shift) {</span>
<span class="p_add">+		if (pdshift &gt; shift) {</span>
 			pgtable_cache_add(pdshift - shift, NULL);
 			if (!PGT_CACHE(pdshift - shift))
 				panic(&quot;hugetlbpage_init(): could not create &quot;
 				      &quot;pgtable cache for %d bit pagesize\n&quot;, shift);
 		}
<span class="p_add">+#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_add">+		else if (!hugepte_cache) {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Create a kmem cache for hugeptes.  The bottom bits in</span>
<span class="p_add">+			 * the pte have size information encoded in them, so</span>
<span class="p_add">+			 * align them to allow this</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			hugepte_cache = kmem_cache_create(&quot;hugepte-cache&quot;,</span>
<span class="p_add">+							  sizeof(pte_t),</span>
<span class="p_add">+							  HUGEPD_SHIFT_MASK + 1,</span>
<span class="p_add">+							  0, NULL);</span>
<span class="p_add">+			if (hugepte_cache == NULL)</span>
<span class="p_add">+				panic(&quot;%s: Unable to create kmem cache &quot;</span>
<span class="p_add">+				      &quot;for hugeptes\n&quot;, __func__);</span>
<span class="p_add">+</span>
<span class="p_add">+		}</span>
<span class="p_add">+#endif</span>
 	}
 
<span class="p_add">+#ifdef CONFIG_PPC_FSL_BOOK3E</span>
<span class="p_add">+	/* Default hpage size = 4M */</span>
<span class="p_add">+	if (mmu_psize_defs[MMU_PAGE_4M].shift)</span>
<span class="p_add">+		HPAGE_SHIFT = mmu_psize_defs[MMU_PAGE_4M].shift;</span>
<span class="p_add">+#else</span>
 	/* Set default large page size. Currently, we pick 16M or 1M
 	 * depending on what is available
 	 */
<span class="p_chunk">@@ -877,11 +842,13 @@</span> <span class="p_context"> static int __init hugetlbpage_init(void)</span>
 		HPAGE_SHIFT = mmu_psize_defs[MMU_PAGE_1M].shift;
 	else if (mmu_psize_defs[MMU_PAGE_2M].shift)
 		HPAGE_SHIFT = mmu_psize_defs[MMU_PAGE_2M].shift;
<span class="p_del">-</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	else</span>
<span class="p_add">+		panic(&quot;%s: Unable to set default huge page size\n&quot;, __func__);</span>
 
 	return 0;
 }
<span class="p_del">-#endif</span>
<span class="p_add">+</span>
 arch_initcall(hugetlbpage_init);
 
 void flush_dcache_icache_hugepage(struct page *page)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



