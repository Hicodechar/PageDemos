
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,2/5] x86/mm: introduce mmap_{,legacy}_base - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,2/5] x86/mm: introduce mmap_{,legacy}_base</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 16, 2017, 12:33 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170116123310.22697-3-dsafonov@virtuozzo.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9518635/mbox/"
   >mbox</a>
|
   <a href="/patch/9518635/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9518635/">/patch/9518635/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0BB4D6020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 12:39:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E55D7281F9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 12:39:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D9DD82824F; Mon, 16 Jan 2017 12:39:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 155AC281F9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 12:39:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751599AbdAPMjR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Jan 2017 07:39:17 -0500
Received: from mail-he1eur01on0092.outbound.protection.outlook.com
	([104.47.0.92]:45234
	&quot;EHLO EUR01-HE1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751331AbdAPMgt (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Jan 2017 07:36:49 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=virtuozzo.com;
	s=selector1; h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=GqmleNW3L8lrPHgRfFsw92DcsS0eFfE/myCiw5bR5Ok=;
	b=erOdNnTUDh+8REAiKBrC/kD+8wiVMbXou7N+Qu/trSJT3iNdTEHSTGEVZM/x3N5og7hxV7f4P0UHxx69rOtfHeC81xCaekx5O73IUkftY6sMpwfiu78maFlvmRHvwyHh/PbuzrpG2YIi4qfwZECNCf3ISRUoju512i526UIM/Ek=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=dsafonov@virtuozzo.com; 
Received: from dsafonov.sw.ru (195.214.232.6) by
	AM5PR0801MB1731.eurprd08.prod.outlook.com (10.169.247.9) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384) id
	15.1.845.12; Mon, 16 Jan 2017 12:36:38 +0000
From: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;
To: &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;0x7f454c46@gmail.com&gt;, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Borislav Petkov &lt;bp@suse.de&gt;, &lt;x86@kernel.org&gt;, &lt;linux-mm@kvack.org&gt;
Subject: [PATCHv2 2/5] x86/mm: introduce mmap_{,legacy}_base
Date: Mon, 16 Jan 2017 15:33:07 +0300
Message-ID: &lt;20170116123310.22697-3-dsafonov@virtuozzo.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170116123310.22697-1-dsafonov@virtuozzo.com&gt;
References: &lt;20170116123310.22697-1-dsafonov@virtuozzo.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [195.214.232.6]
X-ClientProxiedBy: VI1PR09CA0071.eurprd09.prod.outlook.com (10.174.49.143) To
	AM5PR0801MB1731.eurprd08.prod.outlook.com (10.169.247.9)
X-MS-Office365-Filtering-Correlation-Id: 837bcfee-a02d-4c00-57bc-08d43e0c513e
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0; RULEID:(22001);
	SRVR:AM5PR0801MB1731; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1731;
	3:rxk7Wy+ygK6r/YbQu7K95vFbfAdjUEs8sHRhFCXqJtepYSrbuYXDLoAgpO+b74eyW/VC80rJvLmMoskO/cCFiEKUV9AUsl6jErQR9aZhHuZzC8V8+wJvYOHxmALkDv+oZLE2YWjv1Z1M+z8GFzcxTo+sPByb5vu+FSMzA3wcVPnN/MzsFNARSXrvvzLFMVqPLH6tMyTu87oGtl4qlPunazvUoZRlA7dBGwSDV/JqeayHPMTOZDFkTNsisC6H/3IyvqIYCUQy3RF/polO5brJ3A==;
	25:L9dnJoLooG5X8d1cDz3SPW3lx54ZCGHoRGCcr7rAp5u5X5dIHNoPbKd642Lf6sSUH6G2hgnvMO164ZNNrsVLwR4Ve+AtEfaWk+5RM2aEwoRqfKUQ0h36wyo+Dzc0ujEtL7q6WP0tn4g8Pgg7uX9c+uXI/ghel6nF+vg9Qfn8rm5o68VXQE06sGiUXfjuXBB2YAJjXRJH+GQR7HKwcHtczeW0/weYgcaIQSwiWLvMo37sOJqQCh6smnDF+qYRNy4LEQt3t7IovMgL1FiL6qnO1R9AxdHv3nyK+xjvh3gm9vwDmdd5AvOf5RNcamYpbnzfccFpHFujrfmw8noz2OaIM1R6UmKoMH/M5M/R+oqpr08HsTOS2a1J5ednEChHoNYytTMKlHA2//r6nzLWdrA/WRTcwbCxwE9W6rfJfJQjB4SMGdbMiF5dYpLnehSyqBvTcvQ8ZSYbfP0c72VA9c5gbw==
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1731;
	31:9S7KGM+s3qgUmr9ymvlG/D6dx4jCHnh0HUeKcPM3SxRfqitJ5FF3eoBK7ttYxspYcmyRKSj+zxDMo40OJ2V0EdA8Wr+uffNIEGZYT1psN93jIMRHx39LB6wtiEpNj4OJxgvIJ8Epg0l2XEnAWKA5qe+L1k9Uz42rQ1aNs0ASdiI8MNgMGFHzfl9kG4kLAEPMPq8moUz2ZyNtPrUHULld0h0vnxKIuJ9ZWZP4g3TfvY/ojM8RcvMQCMCxp8baxaNa;
	20:Cm88sF9PNwjmKtGsBLQGn/j1IpptpEW+jDCEa4vLfFke8GMG2LarhzRLvPtW6FvsULr4w/JkRXHSYxep8gtXgwllDL9/jtf0HkgIvYsufwZSNYZdYqgov/1JTmYsEh5dXCZyRY9xDyDwjzRi5qKcPqfV9Ji5KK/hmtvjeDyJ43HStxCtA77GFBVJKnUEZqDTC6cy1CZ/brtd16Lh9v3mqd6c3x/vyIMphCp5xc/CmPXmVAoDA/h+zquPl9HVQxik
X-Microsoft-Antispam-PRVS: &lt;AM5PR0801MB1731464F4E35A37F9E7C98D8D17D0@AM5PR0801MB1731.eurprd08.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040375)(601004)(2401047)(5005006)(8121501046)(3002001)(10201501046)(6041248)(20161123560025)(20161123558021)(20161123555025)(20161123562025)(20161123564025)(6072148);
	SRVR:AM5PR0801MB1731; BCL:0; PCL:0; RULEID:;
	SRVR:AM5PR0801MB1731; 
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1731;
	4:ETrX2MaAvLlOneRqq5t9YQ+lrE4Wtd+vY/lqYddYYOV6MhKYuzdgFvattX7L91Zgy0+1UGhcYSt3xYIXkOTykleB1YA+fZcLHe06HJ42AFy/7K9IC4kyyqCZlx6esff4gfY0HsyAbnqD0bkUnDmyQTkq58Odl3YNHeRX3gIbgxhT4Rxzhw2D9yKdoqkSUFVDuOM70GELG75V9LP8mxWbP8sbeUm9G82iWQkSwU3DZSte79ihh3UzL9A71bZ/jfpjublhS48KsOdg+OXLuh0RZLlDqZLDgsHD/z6sg3EWHWl1sJlDX+cA9g9hTDh1gW3TlCTWMhgoBJcfPTisCvZsUPFc9Q1oViYf/2htqaTn6iq9y7Ajp781ZkdD4nuDV21EHMzdzNMV8rD7/F027jN5w5Mz27v1kTdvyRklcYsYmkMsPd3NYwblv4LleLU0kQObR6HZqKa6auW3rdoUNQkLX4QnPttGWtlP6HK9Ih17h4dzq8I/uiNwlrhb6vn8zll5STkyJCmeFXyhu5EQaAL52DWmlsA2BNK9RpQoOSO29JpEtNNjDfbNjzyW6WaXQxuI/l4J3hOnkaO+oYsE5JoeVT1Ti5Ng/R1MaJYY9ZhObLQ=
X-Forefront-PRVS: 01894AD3B8
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(4630300001)(6009001)(7916002)(39830400002)(39450400003)(39410400002)(189002)(199003)(50986999)(76176999)(47776003)(50226002)(66066001)(48376002)(5660300001)(50466002)(92566002)(5003940100001)(189998001)(101416001)(68736007)(97736004)(6506006)(105586002)(6666003)(27001)(2906002)(106356001)(6486002)(8676002)(6916009)(53416004)(2950100002)(4326007)(6512007)(54906002)(7736002)(42186005)(33646002)(69596002)(25786008)(36756003)(86362001)(6116002)(3846002)(2351001)(305945005)(38730400001)(81156014)(110136003)(1076002)(39060400001)(81166006);
	DIR:OUT; SFP:1102; SCL:1; SRVR:AM5PR0801MB1731;
	H:dsafonov.sw.ru; FPR:; SPF:None; PTR:InfoNoRecords; MX:1; A:1;
	LANG:en; 
Received-SPF: None (protection.outlook.com: virtuozzo.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; AM5PR0801MB1731;
	23:yyO93cMdH/MjhMBOBpAZQo0oTLvx4XKSG/lJKZy?=
	=?us-ascii?Q?h6hmjmqxXAOWWYSFQGXu4kfsXK/BmJHiBoSeyVtlvwZajh3fwXAmNTsPXxLh?=
	=?us-ascii?Q?n1ceUH7GRmP7JNcM9vatSTvuRj0GCVSuh92ik9D3GayA+AKdkhFkqlc59ZW/?=
	=?us-ascii?Q?HRbXcxX+1a1RCP8gyVBNoCf5TKRd+Jbtp9Rfcazoj9LW1SvJVKuuksSDKpj0?=
	=?us-ascii?Q?FHXluWPe3ISMhmhPPydxgogtsqk4r/FeT2V7GuQCemz6ehGsi8WMJ53S1kR8?=
	=?us-ascii?Q?S+FDatEUNjJVzdPzFdzNsJzKum7DpDF8Yk6UWxJkJDXgCGbtYvRJFxqrmqSs?=
	=?us-ascii?Q?auBg9thGzFd7h87P67Wwm0Tb39uPagxsZpaLEboruNvhMZDPipyao2zGTQKZ?=
	=?us-ascii?Q?5zfQ63Mr53vEVNbrd1mskm5Bwqgb481gg+Of5hhiKvML1wyCNvytQG8mRMkJ?=
	=?us-ascii?Q?GrmZ+xyZRr7sQH3N3SAx5VFv8QdoJlke6/m/yqA1xA6O0UUzZLA5uvoYH9jU?=
	=?us-ascii?Q?Qc/NiOIgexbYjMbjKeRsTIMNEZkN6/6CBNPuOl8gBhamSBdhpIiXpMiWufDh?=
	=?us-ascii?Q?c9X45bZnrnq8RdhZVN/2BsyVndXPj/oucGzN49MG34XMIY9GmaeQptl0znC6?=
	=?us-ascii?Q?CYftSWRpgwjv1kBJEALAF8XzeSJ5ts1D6aMuHd+9cPNzlAgf4r2bnQquiLSL?=
	=?us-ascii?Q?7baYUMYrYyW1OXD36DOV3h0lZ8o6x4COwnj6f87PVHGBUHtgv0of2RItE2QQ?=
	=?us-ascii?Q?UDc1/Cpl3UmS7D2NUEDDWolDQ6OGlPmlXemE8/8IqGNlzDE/cVji2AZzum9n?=
	=?us-ascii?Q?oemPjPIFPZp+VZr/oC1CTcq5OuCL1phjaOdjuzaUXyxUgmO0RrS666PihNIr?=
	=?us-ascii?Q?6LctIpBBOjNj4Ct9HRvo/t1mF1o0+wKnBU0oNn35gpjv6C/1NGNYPBrAJ7tS?=
	=?us-ascii?Q?D36oqjvHR1RaNV1DYpgtNwYlLUHdTuUaXA3XJzH0LFydU2iczX6Y+s45GPwz?=
	=?us-ascii?Q?eDtVdfcqBGjiYjEYpyEgEAAwXllrA2EArtwC19JFbZswXLuOkgtFD0G0OlfJ?=
	=?us-ascii?Q?KHAUbTw55V2SGtjsEXxz3SZjENmc3aLJSOFVIsGKOUYzFfJ9oMQLgD5u4+se?=
	=?us-ascii?Q?stXPDyRjcm7hiN/FhX22oqq1nkxVVZThSg/IdqCuZrSa8O/lNZlzwOV3073e?=
	=?us-ascii?Q?PNgu+GDTaIDAH/r8yTs/Qb+BdhK1uhlr3okF4bxz6ssWUpZQjXiS4LGtfCeK?=
	=?us-ascii?Q?+JELHFqOoS/Lsxhm2mT7j+SN9A1gy3NAQWzCf74Vt?=
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1731;
	6:e/FPY0fmLF4EKDX/i+zQebBDYUDOuaAksGvJt5nK8/zVLJgOoj/Za9VcVGi0mP562XDisvCiowadSuEDCEX2E7AZpIw5yzvZ05zgAMJESuCXxo9uzmVE7plrvMWc6fIM9g28UmxsFtDvq62C52JOE/Ko0GTXDNS7bXQEP7WhmM7EJseJAN27VrYlmnjSMoLg+i+Jh0K0C5TkWwheeOe/0DnjTt6mBLPdGyF4F99fmLeyTLgQbApikcSrF1D9JoXTiNG+3N49/X4wRd9z8ZGrf85Iy5CB3IIpt0R0d9Jw7pddhXBzOXVSTEdCtgO0WZwxy0X/BYtYJicpePcgSsseMSYI2igttCb/PvrzQWdNUlf79/vvkm+gemGwzUCzn4oC3GX2Dm7FbGQIN4WUspdaeL7MxB5LcGTlHQxQTUmSQCs=;
	5:tQs6H8508lwxnAo64bQrRho6TLdKmshadG9j8SkNrR4SCFcL++MuizVG2uvkv4VOduPLDC9Dnlb8bE3wD5X0bm4aPOgfanFqL68ElbYGDXnYZIxMn1r/Argn0VLZUmyF6m5efI2FffPKKOMoRvWQng==;
	24:z4ulNtnqlJ+BHWWZR5cxJfVB8dQFvKTY2Ur2d0btIFq1i1LcYFel4XfWSb0hlT//VK0ierR1ydKwp5aml17328Kgbw+bza60e7hNmTejuXA=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; AM5PR0801MB1731;
	7:hMIY3us+njdPJ6rgY6sGKpGJ9H6E06yIP9x5pLAMQM3Ce1qyhwcmfHhfdVocqETfbEOTK96LMiRHir1AwXMiTLtH+wn66N/8hs9XgBx8Y1GNfyYS55WcEAdKcOvolmMn6VP5GeB3xDGZnBXdmYaEko1yyrxBG4GI1GLexsovaYVG7oY6lL0fioupgolQupW4rCy/9F5hgkxqmj8IuuNvj6jmjHlYNokQKWTujvfX/UxxWrhmDV4qYv9/l4hxWEXZShgRLDIrvYhr8vbH81qX3jCF3HJ0ReOPlIoyzCtl2eFL8rF1wHavgZiXQYCVLnfSNdQ70cW6TfgA8nMKhwFyVczfVX+oKC9D6gVOHiXBM93VnsE8qs5M8PN8nXcWCnC+5Dg4g3baj5bGhq/ropLZHc32Btwd0T0dSxwmJbXWO89ektUCIcektT3qztkx8zEFfCW936WGEwbOUutNdlYLag==;
	20:+0B9eJd5JJYex1vtjKTrjgpDnlVskYHLx6waLvNBGfjXYuavp1OBYUeCJ+XtofxeSUE818tOJGHeahBEnLu0KEn7n0Ql2jgANqp5GwPTgHxhz3EO+wKqi2quLgKUfCVXNHM9KxSmqqfzSK+be01v31plRzwikk3IfN5iRLSXlzs=
X-OriginatorOrg: virtuozzo.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jan 2017 12:36:38.0134
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM5PR0801MB1731
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - Jan. 16, 2017, 12:33 p.m.</div>
<pre class="content">
In the following patch they will be used to compute:
- mmap_base in compat sys_mmap() in native 64-bit binary
and vice-versa
- mmap_base for native sys_mmap() in compat x32/ia32-bit binary.
<span class="signed-off-by">
Signed-off-by: Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt;</span>
---
 arch/x86/include/asm/elf.h       |  9 +++++++--
 arch/x86/include/asm/processor.h |  2 +-
 arch/x86/mm/hugetlbpage.c        |  2 +-
 arch/x86/mm/mmap.c               | 31 +++++++++++++++++++------------
 4 files changed, 28 insertions(+), 16 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Jan. 16, 2017, 2:28 p.m.</div>
<pre class="content">
Hi Dmitry,

[auto build test ERROR on tip/x86/core]
[also build test ERROR on v4.10-rc4 next-20170116]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Dmitry-Safonov/Fix-compatible-mmap-return-pointer-over-4Gb/20170116-204523
config: i386-randconfig-i1-201703 (attached as .config)
compiler: gcc-4.8 (Debian 4.8.4-1) 4.8.4
reproduce:
        # save the attached .config to linux build tree
        make ARCH=i386 

All errors (new ones prefixed by &gt;&gt;):

   mm/mmap.c: In function &#39;arch_get_unmapped_area_topdown&#39;:
<span class="quote">&gt;&gt; mm/mmap.c:2039:20: error: &#39;TASK_UNMAPPED_BASE&#39; undeclared (first use in this function)</span>
      info.low_limit = TASK_UNMAPPED_BASE;
                       ^
   mm/mmap.c:2039:20: note: each undeclared identifier is reported only once for each function it appears in

vim +/TASK_UNMAPPED_BASE +2039 mm/mmap.c

^1da177e Linus Torvalds     2005-04-16  2033  	 * can happen with large stack limits and large mmap()
^1da177e Linus Torvalds     2005-04-16  2034  	 * allocations.
^1da177e Linus Torvalds     2005-04-16  2035  	 */
de1741a1 Alexander Kuleshov 2015-11-05  2036  	if (offset_in_page(addr)) {
db4fbfb9 Michel Lespinasse  2012-12-11  2037  		VM_BUG_ON(addr != -ENOMEM);
db4fbfb9 Michel Lespinasse  2012-12-11  2038  		info.flags = 0;
db4fbfb9 Michel Lespinasse  2012-12-11 @2039  		info.low_limit = TASK_UNMAPPED_BASE;
db4fbfb9 Michel Lespinasse  2012-12-11  2040  		info.high_limit = TASK_SIZE;
db4fbfb9 Michel Lespinasse  2012-12-11  2041  		addr = vm_unmapped_area(&amp;info);
db4fbfb9 Michel Lespinasse  2012-12-11  2042  	}

:::::: The code at line 2039 was first introduced by commit
:::::: db4fbfb9523c93583c339e66023506f651c1d54b mm: vm_unmapped_area() lookup function

:::::: TO: Michel Lespinasse &lt;walken@google.com&gt;
:::::: CC: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 17, 2017, 8:27 p.m.</div>
<pre class="content">
On Mon, Jan 16, 2017 at 4:33 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:
<span class="quote">&gt; In the following patch they will be used to compute:</span>
<span class="quote">&gt; - mmap_base in compat sys_mmap() in native 64-bit binary</span>
<span class="quote">&gt; and vice-versa</span>
<span class="quote">&gt; - mmap_base for native sys_mmap() in compat x32/ia32-bit binary.</span>

I may be wrong here, but I suspect that you&#39;re repeating something
that I consider to be a mistake that&#39;s all over the x86 code.
Specifically, you&#39;re distinguishing &quot;native&quot; from &quot;compat&quot; instead of
&quot;32-bit&quot; from &quot;64-bit&quot;.  If you did the latter, then you wouldn&#39;t need
the &quot;native&quot; case to work differently on 32-bit kernels vs 64-bit
kernels, I think.  Would making this change make your code simpler?

The x86 signal code is the worst offender IMO.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=153181">Dmitry Safonov</a> - Jan. 18, 2017, 11:26 a.m.</div>
<pre class="content">
On 01/17/2017 11:27 PM, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Jan 16, 2017 at 4:33 AM, Dmitry Safonov &lt;dsafonov@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;&gt; In the following patch they will be used to compute:</span>
<span class="quote">&gt;&gt; - mmap_base in compat sys_mmap() in native 64-bit binary</span>
<span class="quote">&gt;&gt; and vice-versa</span>
<span class="quote">&gt;&gt; - mmap_base for native sys_mmap() in compat x32/ia32-bit binary.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I may be wrong here, but I suspect that you&#39;re repeating something</span>
<span class="quote">&gt; that I consider to be a mistake that&#39;s all over the x86 code.</span>
<span class="quote">&gt; Specifically, you&#39;re distinguishing &quot;native&quot; from &quot;compat&quot; instead of</span>
<span class="quote">&gt; &quot;32-bit&quot; from &quot;64-bit&quot;.  If you did the latter, then you wouldn&#39;t need</span>
<span class="quote">&gt; the &quot;native&quot; case to work differently on 32-bit kernels vs 64-bit</span>
<span class="quote">&gt; kernels, I think.  Would making this change make your code simpler?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The x86 signal code is the worst offender IMO.</span>

Yes, I also don&#39;t like to differ them especially by TIF_ADDR32 flag.
I did distinguishing for the reason that I needed to know for which
task 64/32-bit was computed mm-&gt;mmap_base.
Otherwise I could introduce mm-&gt;mmap_compat_base and don&#39;t differ
tasks by TIF_ADDR32 flag - only by in_compat_syscall(), but that
would change mm_struct generic code (adding a field to mm).
So, I thought it may have more opposition to add a field to mm
in generic code and fixed it here, in x86.
<span class="quote">
&gt;</span>
<span class="quote">&gt; --Andy</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="p_header">index ee1a87782b2c..9655a8390da4 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/elf.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/elf.h</span>
<span class="p_chunk">@@ -286,6 +286,7 @@</span> <span class="p_context"> do {									\</span>
 
 #ifdef CONFIG_X86_32
 
<span class="p_add">+#define STACK_RND_MASK_MODE(native) (0x7ff)</span>
 #define STACK_RND_MASK (0x7ff)
 
 #define ARCH_DLINFO		ARCH_DLINFO_IA32
<span class="p_chunk">@@ -295,7 +296,8 @@</span> <span class="p_context"> do {									\</span>
 #else /* CONFIG_X86_32 */
 
 /* 1GB for 64bit, 8MB for 32bit */
<span class="p_del">-#define STACK_RND_MASK (test_thread_flag(TIF_ADDR32) ? 0x7ff : 0x3fffff)</span>
<span class="p_add">+#define STACK_RND_MASK_MODE(native) ((native) ? 0x3fffff : 0x7ff)</span>
<span class="p_add">+#define STACK_RND_MASK STACK_RND_MASK_MODE(!test_thread_flag(TIF_ADDR32))</span>
 
 #define ARCH_DLINFO							\
 do {									\
<span class="p_chunk">@@ -320,7 +322,7 @@</span> <span class="p_context"> if (test_thread_flag(TIF_X32))						\</span>
 else									\
 	ARCH_DLINFO_IA32
 
<span class="p_del">-#define COMPAT_ELF_ET_DYN_BASE	(TASK_UNMAPPED_BASE + 0x1000000)</span>
<span class="p_add">+#define COMPAT_ELF_ET_DYN_BASE	(TASK_UNMAPPED_BASE(TASK_SIZE) + 0x1000000)</span>
 
 #endif /* !CONFIG_X86_32 */
 
<span class="p_chunk">@@ -353,6 +355,9 @@</span> <span class="p_context"> static inline int mmap_is_ia32(void)</span>
 extern unsigned long arch_compat_rnd(void);
 #endif
 extern unsigned long arch_native_rnd(void);
<span class="p_add">+extern unsigned long mmap_base(unsigned long rnd, unsigned long task_size);</span>
<span class="p_add">+extern unsigned long mmap_legacy_base(unsigned long rnd,</span>
<span class="p_add">+					unsigned long task_size);</span>
 
 /* Do not change the values. See get_align_mask() */
 enum align_flags {
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index eaf100508c36..2bf5787fac37 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -844,7 +844,7 @@</span> <span class="p_context"> extern void start_thread(struct pt_regs *regs, unsigned long new_ip,</span>
  * This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
  */
<span class="p_del">-#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 3))</span>
<span class="p_add">+#define TASK_UNMAPPED_BASE(task_size)	(PAGE_ALIGN(task_size / 3))</span>
 
 #define KSTK_EIP(task)		(task_pt_regs(task)-&gt;ip)
 
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 2ae8584b44c7..62dfa3fa3ee0 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -113,7 +113,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,</span>
 	if (addr &amp; ~PAGE_MASK) {
 		VM_BUG_ON(addr != -ENOMEM);
 		info.flags = 0;
<span class="p_del">-		info.low_limit = TASK_UNMAPPED_BASE;</span>
<span class="p_add">+		info.low_limit = TASK_UNMAPPED_BASE(TASK_SIZE);</span>
 		info.high_limit = TASK_SIZE;
 		addr = vm_unmapped_area(&amp;info);
 	}
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index 0b2007b08194..b64362270165 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -35,12 +35,14 @@</span> <span class="p_context"> struct va_alignment __read_mostly va_align = {</span>
 	.flags = -1,
 };
 
<span class="p_del">-static unsigned long stack_maxrandom_size(void)</span>
<span class="p_add">+static unsigned long stack_maxrandom_size(unsigned long task_size)</span>
 {
 	unsigned long max = 0;
 	if ((current-&gt;flags &amp; PF_RANDOMIZE) &amp;&amp;
 		!(current-&gt;personality &amp; ADDR_NO_RANDOMIZE)) {
<span class="p_del">-		max = ((-1UL) &amp; STACK_RND_MASK) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		max = (-1UL);</span>
<span class="p_add">+		max &amp;= STACK_RND_MASK_MODE(task_size == TASK_SIZE_MAX);</span>
<span class="p_add">+		max &lt;&lt;= PAGE_SHIFT;</span>
 	}
 
 	return max;
<span class="p_chunk">@@ -51,8 +53,8 @@</span> <span class="p_context"> static unsigned long stack_maxrandom_size(void)</span>
  *
  * Leave an at least ~128 MB hole with possible stack randomization.
  */
<span class="p_del">-#define MIN_GAP (128*1024*1024UL + stack_maxrandom_size())</span>
<span class="p_del">-#define MAX_GAP (TASK_SIZE/6*5)</span>
<span class="p_add">+#define MIN_GAP(task_size) (128*1024*1024UL + stack_maxrandom_size(task_size))</span>
<span class="p_add">+#define MAX_GAP(task_size) (task_size/6*5)</span>
 
 static int mmap_is_legacy(void)
 {
<span class="p_chunk">@@ -88,16 +90,21 @@</span> <span class="p_context"> unsigned long arch_mmap_rnd(void)</span>
 	return arch_native_rnd();
 }
 
<span class="p_del">-static unsigned long mmap_base(unsigned long rnd)</span>
<span class="p_add">+unsigned long mmap_base(unsigned long rnd, unsigned long task_size)</span>
 {
 	unsigned long gap = rlimit(RLIMIT_STACK);
 
<span class="p_del">-	if (gap &lt; MIN_GAP)</span>
<span class="p_del">-		gap = MIN_GAP;</span>
<span class="p_del">-	else if (gap &gt; MAX_GAP)</span>
<span class="p_del">-		gap = MAX_GAP;</span>
<span class="p_add">+	if (gap &lt; MIN_GAP(task_size))</span>
<span class="p_add">+		gap = MIN_GAP(task_size);</span>
<span class="p_add">+	else if (gap &gt; MAX_GAP(task_size))</span>
<span class="p_add">+		gap = MAX_GAP(task_size);</span>
 
<span class="p_del">-	return PAGE_ALIGN(TASK_SIZE - gap - rnd);</span>
<span class="p_add">+	return PAGE_ALIGN(task_size - gap - rnd);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+unsigned long mmap_legacy_base(unsigned long rnd, unsigned long task_size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return TASK_UNMAPPED_BASE(task_size) + rnd;</span>
 }
 
 /*
<span class="p_chunk">@@ -111,13 +118,13 @@</span> <span class="p_context"> void arch_pick_mmap_layout(struct mm_struct *mm)</span>
 	if (current-&gt;flags &amp; PF_RANDOMIZE)
 		random_factor = arch_mmap_rnd();
 
<span class="p_del">-	mm-&gt;mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor;</span>
<span class="p_add">+	mm-&gt;mmap_legacy_base = mmap_legacy_base(random_factor, TASK_SIZE);</span>
 
 	if (mmap_is_legacy()) {
 		mm-&gt;mmap_base = mm-&gt;mmap_legacy_base;
 		mm-&gt;get_unmapped_area = arch_get_unmapped_area;
 	} else {
<span class="p_del">-		mm-&gt;mmap_base = mmap_base(random_factor);</span>
<span class="p_add">+		mm-&gt;mmap_base = mmap_base(random_factor, TASK_SIZE);</span>
 		mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;
 	}
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



