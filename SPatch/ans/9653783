
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,8/8] arm64: exception: check shared writable page in SEI handler - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,8/8] arm64: exception: check shared writable page in SEI handler</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=63041">Xie XiuQi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 30, 2017, 10:31 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1490869877-118713-9-git-send-email-xiexiuqi@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9653783/mbox/"
   >mbox</a>
|
   <a href="/patch/9653783/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9653783/">/patch/9653783/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	767FB6034C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:43:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 62A6028574
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:43:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 54C6628581; Thu, 30 Mar 2017 10:43:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CEDE128574
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Mar 2017 10:43:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933751AbdC3Kn1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Mar 2017 06:43:27 -0400
Received: from szxga01-in.huawei.com ([45.249.212.187]:4818 &quot;EHLO
	dggrg01-dlp.huawei.com&quot; rhost-flags-OK-FAIL-OK-FAIL)
	by vger.kernel.org with ESMTP id S933176AbdC3Kep (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Mar 2017 06:34:45 -0400
Received: from 172.30.72.54 (EHLO DGGEML403-HUB.china.huawei.com)
	([172.30.72.54])
	by dggrg01-dlp.huawei.com (MOS 4.4.6-GA FastPath queued)
	with ESMTP id ALT60667; Thu, 30 Mar 2017 18:34:39 +0800 (CST)
Received: from localhost.localdomain.localdomain (10.175.113.25) by
	DGGEML403-HUB.china.huawei.com (10.3.17.33) with Microsoft SMTP
	Server id 14.3.301.0; Thu, 30 Mar 2017 18:34:29 +0800
From: Xie XiuQi &lt;xiexiuqi@huawei.com&gt;
To: &lt;christoffer.dall@linaro.org&gt;, &lt;marc.zyngier@arm.com&gt;,
	&lt;catalin.marinas@arm.com&gt;, &lt;will.deacon@arm.com&gt;,
	&lt;james.morse@arm.com&gt;, &lt;fu.wei@linaro.org&gt;, &lt;rostedt@goodmis.org&gt;,
	&lt;hanjun.guo@linaro.org&gt;, &lt;shiju.jose@huawei.com&gt;
CC: &lt;linux-arm-kernel@lists.infradead.org&gt;,
	&lt;kvmarm@lists.cs.columbia.edu&gt;, &lt;kvm@vger.kernel.org&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, &lt;linux-acpi@vger.kernel.org&gt;,
	&lt;gengdongjiu@huawei.com&gt;, &lt;zhengqiang10@huawei.com&gt;,
	&lt;wuquanming@huawei.com&gt;, &lt;xiexiuqi@huawei.com&gt;,
	&lt;wangxiongfeng2@huawei.com&gt;, Wang Xiongfeng &lt;wangxiongfengi2@huawei.com&gt;
Subject: [PATCH v3 8/8] arm64: exception: check shared writable page in SEI
	handler
Date: Thu, 30 Mar 2017 18:31:08 +0800
Message-ID: &lt;1490869877-118713-9-git-send-email-xiexiuqi@huawei.com&gt;
X-Mailer: git-send-email 1.8.3.1
In-Reply-To: &lt;1490869877-118713-1-git-send-email-xiexiuqi@huawei.com&gt;
References: &lt;1490869877-118713-1-git-send-email-xiexiuqi@huawei.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.175.113.25]
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A020204.58DCDF41.006C, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, ip=0.0.0.0,
	so=2014-11-16 11:51:01, dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 14a62bbe19cb441eaa36d259ff377d39
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=63041">Xie XiuQi</a> - March 30, 2017, 10:31 a.m.</div>
<pre class="content">
<span class="from">From: Wang Xiongfeng &lt;wangxiongfeng2@huawei.com&gt;</span>

Since SEI is asynchronous, the error data has been consumed. So we must
suppose that all the memory data current process can write are
contaminated. If the process doesn&#39;t have shared writable pages, the
process will be killed, and the system will continue running normally.
Otherwise, the system must be terminated, because the error has been
propagated to other processes running on other cores, and recursively
the error may be propagated to several another processes.
<span class="signed-off-by">
Signed-off-by: Wang Xiongfeng &lt;wangxiongfengi2@huawei.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Xie XiuQi &lt;xiexiuqi@huawei.com&gt;</span>
---
 arch/arm64/kernel/traps.c | 149 ++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 144 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=133961">James Morse</a> - April 7, 2017, 3:56 p.m.</div>
<pre class="content">
Hi Xie XiuQi,

On 30/03/17 11:31, Xie XiuQi wrote:
<span class="quote">&gt; From: Wang Xiongfeng &lt;wangxiongfeng2@huawei.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since SEI is asynchronous, the error data has been consumed. So we must</span>
<span class="quote">&gt; suppose that all the memory data current process can write are</span>
<span class="quote">&gt; contaminated. If the process doesn&#39;t have shared writable pages, the</span>
<span class="quote">&gt; process will be killed, and the system will continue running normally.</span>
<span class="quote">&gt; Otherwise, the system must be terminated, because the error has been</span>
<span class="quote">&gt; propagated to other processes running on other cores, and recursively</span>
<span class="quote">&gt; the error may be propagated to several another processes.</span>

This is pretty complicated. We can&#39;t guarantee that another CPU hasn&#39;t modified
the page tables while we do this, (so its racy). We can&#39;t guarantee that the
corrupt data hasn&#39;t been sent over the network or written to disk in the mean
time (so its not enough).

The scenario you have is a write of corrupt data to memory where another CPU
reading it doesn&#39;t know the value is corrupt.

The hardware gives us quite a lot of help containing errors. The RAS
specification (DDI 0587A) describes your scenario as error propagation in &#39;2.1.2
Architectural error propagation&#39;, and then classifies it in &#39;2.1.3
Architecturally infected, containable and uncontainable&#39; as uncontained because
the value is no longer in the general-purpose registers. For uncontained errors
we should panic().

We shouldn&#39;t need to try to track errors after we get a notification as the
hardware has done this for us.


Firmware-first does complicate this if events like this are not delivered using
a synchronous external abort, as Linux may have PSTATE.A masked preventing
SError Interrupts from being taken. It looks like PSTATE.A is masked much more
often than is necessary. I will look into cleaning this up.


Thanks,

James
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172923">Xiongfeng Wang</a> - April 12, 2017, 8:35 a.m.</div>
<pre class="content">
Hi James,


On 2017/4/7 23:56, James Morse wrote:
<span class="quote">&gt; Hi Xie XiuQi,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 30/03/17 11:31, Xie XiuQi wrote:</span>
<span class="quote">&gt;&gt; From: Wang Xiongfeng &lt;wangxiongfeng2@huawei.com&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Since SEI is asynchronous, the error data has been consumed. So we must</span>
<span class="quote">&gt;&gt; suppose that all the memory data current process can write are</span>
<span class="quote">&gt;&gt; contaminated. If the process doesn&#39;t have shared writable pages, the</span>
<span class="quote">&gt;&gt; process will be killed, and the system will continue running normally.</span>
<span class="quote">&gt;&gt; Otherwise, the system must be terminated, because the error has been</span>
<span class="quote">&gt;&gt; propagated to other processes running on other cores, and recursively</span>
<span class="quote">&gt;&gt; the error may be propagated to several another processes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is pretty complicated. We can&#39;t guarantee that another CPU hasn&#39;t modified</span>
<span class="quote">&gt; the page tables while we do this, (so its racy). We can&#39;t guarantee that the</span>
<span class="quote">&gt; corrupt data hasn&#39;t been sent over the network or written to disk in the mean</span>
<span class="quote">&gt; time (so its not enough).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The scenario you have is a write of corrupt data to memory where another CPU</span>
<span class="quote">&gt; reading it doesn&#39;t know the value is corrupt.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The hardware gives us quite a lot of help containing errors. The RAS</span>
<span class="quote">&gt; specification (DDI 0587A) describes your scenario as error propagation in &#39;2.1.2</span>
<span class="quote">&gt; Architectural error propagation&#39;, and then classifies it in &#39;2.1.3</span>
<span class="quote">&gt; Architecturally infected, containable and uncontainable&#39; as uncontained because</span>
<span class="quote">&gt; the value is no longer in the general-purpose registers. For uncontained errors</span>
<span class="quote">&gt; we should panic().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We shouldn&#39;t need to try to track errors after we get a notification as the</span>
<span class="quote">&gt; hardware has done this for us.</span>
<span class="quote">&gt; </span>
Thanks for your comments. I think what you said is reasonable. We will remove this
patch and use AET fields of ESR_ELx to determine whether we should kill current
process or just panic.
<span class="quote">&gt; </span>
<span class="quote">&gt; Firmware-first does complicate this if events like this are not delivered using</span>
<span class="quote">&gt; a synchronous external abort, as Linux may have PSTATE.A masked preventing</span>
<span class="quote">&gt; SError Interrupts from being taken. It looks like PSTATE.A is masked much more</span>
<span class="quote">&gt; often than is necessary. I will look into cleaning this up.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; James</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; .</span>
<span class="quote">&gt; </span>
Thanks,
Wang Xiongfeng
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c</span>
<span class="p_header">index 99be6d8..b222589 100644</span>
<span class="p_header">--- a/arch/arm64/kernel/traps.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/traps.c</span>
<span class="p_chunk">@@ -34,6 +34,8 @@</span> <span class="p_context"></span>
 #include &lt;linux/sched/task_stack.h&gt;
 #include &lt;linux/syscalls.h&gt;
 #include &lt;linux/mm_types.h&gt;
<span class="p_add">+#include &lt;linux/swap.h&gt;</span>
<span class="p_add">+#include &lt;linux/swapops.h&gt;</span>
 
 #include &lt;asm/atomic.h&gt;
 #include &lt;asm/bug.h&gt;
<span class="p_chunk">@@ -662,7 +664,144 @@</span> <span class="p_context"> asmlinkage void bad_mode(struct pt_regs *regs, int reason, unsigned int esr)</span>
 	[ESR_ELx_AET_CE]	=	&quot;Corrected&quot;,
 };
 
<span class="p_add">+static void shared_writable_pte_entry(pte_t *pte, unsigned long addr,</span>
<span class="p_add">+				struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int *is_shared_writable = walk-&gt;private;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	struct page *page = NULL;</span>
<span class="p_add">+	int mapcount = -1;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!pte_write(__pte(pgprot_val(vma-&gt;vm_page_prot))))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_present(*pte)) {</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, *pte);</span>
<span class="p_add">+	} else if (is_swap_pte(*pte)) {</span>
<span class="p_add">+		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!non_swap_entry(swpent))</span>
<span class="p_add">+			mapcount = swp_swapcount(swpent);</span>
<span class="p_add">+		else if (is_migration_entry(swpent))</span>
<span class="p_add">+			page = migration_entry_to_page(swpent);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mapcount == -1 &amp;&amp; page)</span>
<span class="p_add">+		mapcount = page_mapcount(page);</span>
<span class="p_add">+	if (mapcount &gt;= 2)</span>
<span class="p_add">+		*is_shared_writable = 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void shared_writable_pmd_entry(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+				struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	int mapcount;</span>
<span class="p_add">+	int *is_shared_writable = walk-&gt;private;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!pmd_write(*pmd))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	page = pmd_page(*pmd);</span>
<span class="p_add">+	if (page) {</span>
<span class="p_add">+		mapcount = page_mapcount(page);</span>
<span class="p_add">+		if (mapcount &gt;= 2)</span>
<span class="p_add">+			*is_shared_writable = 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int shared_writable_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="p_add">+				unsigned long end, struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_trans_huge(*pmd)) {</span>
<span class="p_add">+		shared_writable_pmd_entry(pmd, addr, walk);</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_trans_unstable(pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pte = pte_offset_map(pmd, addr);</span>
<span class="p_add">+	for (; addr != end; pte++, addr += PAGE_SIZE)</span>
<span class="p_add">+	shared_writable_pte_entry(pte, addr, walk);</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+static int shared_writable_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="p_add">+					unsigned long addr, unsigned long end,</span>
<span class="p_add">+					struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	int *is_shared_writable = walk-&gt;private;</span>
<span class="p_add">+	struct page *page = NULL;</span>
<span class="p_add">+	int mapcount;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!pte_write(*pte))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_present(*pte)) {</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, *pte);</span>
<span class="p_add">+	} else if (is_swap_pte(*pte)) {</span>
<span class="p_add">+		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_migration_entry(swpent))</span>
<span class="p_add">+			page = migration_entry_to_page(swpent);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (page) {</span>
<span class="p_add">+		mapcount = page_mapcount(page);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (mapcount &gt;= 2)</span>
<span class="p_add">+			*is_shared_writable = 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ *Check whether there exists a page in mm_struct which is shared with other</span>
<span class="p_add">+ process and writable (not COW) at the same time. 0 means existing such a page.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int mm_shared_writable(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct vm_area_struct *vma;</span>
<span class="p_add">+	int is_shared_writable = 0;</span>
<span class="p_add">+	struct mm_walk shared_writable_walk = {</span>
<span class="p_add">+		.pmd_entry = shared_writable_pte_range,</span>
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+		.hugetlb_entry = shared_writable_hugetlb_range,</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		.mm = mm,</span>
<span class="p_add">+		.private = &amp;is_shared_writable,</span>
<span class="p_add">+	};</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!mm)</span>
<span class="p_add">+		return -EPERM;</span>
<span class="p_add">+</span>
<span class="p_add">+	vma = mm-&gt;mmap;</span>
<span class="p_add">+	while (vma) {</span>
<span class="p_add">+		walk_page_vma(vma, &amp;shared_writable_walk);</span>
<span class="p_add">+		if (is_shared_writable)</span>
<span class="p_add">+			return 1;</span>
<span class="p_add">+		vma = vma-&gt;vm_next;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 DEFINE_PER_CPU(int, sei_in_process);
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Since SEI is asynchronous, the error data has been consumed. So we must</span>
<span class="p_add">+ * suppose that all the memory data current process can write are</span>
<span class="p_add">+ * contaminated. If the process doesn&#39;t have shared writable pages, the</span>
<span class="p_add">+ * process will be killed, and the system will continue running normally.</span>
<span class="p_add">+ * Otherwise, the system must be terminated, because the error has been</span>
<span class="p_add">+ * propagated to other processes running on other cores, and recursively</span>
<span class="p_add">+ * the error may be propagated to several another processes.</span>
<span class="p_add">+ */</span>
 asmlinkage void do_sei(struct pt_regs *regs, unsigned int esr, int el)
 {
 	int aet = ESR_ELx_AET(esr);
<span class="p_chunk">@@ -684,16 +823,16 @@</span> <span class="p_context"> asmlinkage void do_sei(struct pt_regs *regs, unsigned int esr, int el)</span>
 	if (el == 0 &amp;&amp; IS_ENABLED(CONFIG_ARM64_ESB) &amp;&amp;
 	    cpus_have_cap(ARM64_HAS_RAS_EXTN)) {
 		siginfo_t info;
<span class="p_del">-		void __user *pc = (void __user *)instruction_pointer(regs);</span>
 
 		if (aet &gt;= ESR_ELx_AET_UEO)
 			return;
 
<span class="p_del">-		if (aet == ESR_ELx_AET_UEU) {</span>
<span class="p_del">-			info.si_signo = SIGILL;</span>
<span class="p_add">+		if (aet == ESR_ELx_AET_UEU &amp;&amp;</span>
<span class="p_add">+		    !mm_shared_writable(current-&gt;mm)) {</span>
<span class="p_add">+			info.si_signo = SIGKILL;</span>
 			info.si_errno = 0;
<span class="p_del">-			info.si_code  = ILL_ILLOPC;</span>
<span class="p_del">-			info.si_addr  = pc;</span>
<span class="p_add">+			info.si_code = 0;</span>
<span class="p_add">+			info.si_addr = 0;</span>
 
 			current-&gt;thread.fault_address = 0;
 			current-&gt;thread.fault_code = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



