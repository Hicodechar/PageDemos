
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[48/52] arm: KVM: Invalidate BTB on guest exit for Cortex-A12/A17 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [48/52] arm: KVM: Invalidate BTB on guest exit for Cortex-A12/A17</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=81471">Alex Shi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 26, 2018, 8:20 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1519633227-29832-49-git-send-email-alex.shi@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10241491/mbox/"
   >mbox</a>
|
   <a href="/patch/10241491/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10241491/">/patch/10241491/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EC008602DC for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Feb 2018 08:27:40 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D5AB829AD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Feb 2018 08:27:40 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C9A0F29ADE; Mon, 26 Feb 2018 08:27:40 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 218F129AD5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Feb 2018 08:27:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752472AbeBZI1f (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 26 Feb 2018 03:27:35 -0500
Received: from mail-pf0-f195.google.com ([209.85.192.195]:40206 &quot;EHLO
	mail-pf0-f195.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752855AbeBZI10 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 26 Feb 2018 03:27:26 -0500
Received: by mail-pf0-f195.google.com with SMTP id m5so6219574pff.7
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 26 Feb 2018 00:27:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:subject:date:message-id:in-reply-to:references;
	bh=c+m8Xx/gdzZk3oAgyKLtXnF31YiTGhZDX4r8l10YuK4=;
	b=Zh8hg4a58XLRH9ZUZZAbbTsxHhtmh4//H1Y1YjpNB5gPV7cEHDnDNISEwBOdXrdb++
	yMUjG/wRHSN96UZxm3t2TswSbmQKyc3A5m/TgPbAvf8Kw9ovue+yVKjFR9UWJGwsPI/B
	8mlmlRb1dvoiUnyus68owrxZSqzPkk+61tpa0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:subject:date:message-id:in-reply-to
	:references;
	bh=c+m8Xx/gdzZk3oAgyKLtXnF31YiTGhZDX4r8l10YuK4=;
	b=ssvslbXXu334l8XxojyualQboEXN+CvzrTMB5Ja7cU6Q6Rg7lh7qosmOC3TDrdKJZe
	wO6ekHpmH3wn1w8MrdFDR/LIwXIABIFFx7VUVtY+JRdxdwyPiGCDzdaE4v4MQfDUxYXp
	hxmsqSiaO1r2zUos4Hw3igrkNZLiAv+4YSLlY25cW8WcKWw5iQY3Jyvm1UBBjMUq/SUi
	DxeZqOfSQ0xru/lF+tIW0V2W+tkdOwyKu9lVDTm8lHA1gxD66x8F3wn/n9GzRabN6FZ+
	MyQrWWXT2HO3Ot82geCMvtERw+d15SWQkkF8XETAuLtHZ0hcSTOeSgO27Z/PCSALu2/b
	mwaQ==
X-Gm-Message-State: APf1xPASS6vQxwGr52FE+Qb8bR90DphYSiePH8npHM6nwqZkVcI+kiCz
	cIRaTJs8JkUR+D4/60IFLct9ag==
X-Google-Smtp-Source: AH8x2255/5/eH6Qdijae6xa52x5Zrm4idxv02oAYA4e6AFZdisFT769QBMhacDcEOw2hfDtvKryb2Q==
X-Received: by 10.98.227.10 with SMTP id g10mr9837192pfh.200.1519633645577; 
	Mon, 26 Feb 2018 00:27:25 -0800 (PST)
Received: from localhost.localdomain (176.122.172.82.16clouds.com.
	[176.122.172.82]) by smtp.gmail.com with ESMTPSA id
	o86sm1422706pfi.87.2018.02.26.00.27.15
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 26 Feb 2018 00:27:25 -0800 (PST)
From: Alex Shi &lt;alex.shi@linaro.org&gt;
To: Marc Zyngier &lt;marc.zyngier@arm.com&gt;, Will Deacon &lt;will.deacon@arm.com&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	stable@vger.kernel.org, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Russell King &lt;linux@armlinux.org.uk&gt;,
	kvm@vger.kernel.org (open list:KERNEL VIRTUAL MACHINE (KVM)),
	linux-arm-kernel@lists.infradead.org (moderated list:KERNEL VIRTUAL
	MACHINE (KVM) FOR ARM),
	kvmarm@lists.cs.columbia.edu (open list:KERNEL VIRTUAL MACHINE (KVM)
	FOR ARM), linux-kernel@vger.kernel.org (open list)
Subject: [PATCH 48/52] arm: KVM: Invalidate BTB on guest exit for
	Cortex-A12/A17
Date: Mon, 26 Feb 2018 16:20:22 +0800
Message-Id: &lt;1519633227-29832-49-git-send-email-alex.shi@linaro.org&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1519633227-29832-1-git-send-email-alex.shi@linaro.org&gt;
References: &lt;1519633227-29832-1-git-send-email-alex.shi@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81471">Alex Shi</a> - Feb. 26, 2018, 8:20 a.m.</div>
<pre class="content">
<span class="from">From: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>

** Not yet queued for inclusion in mainline **

In order to avoid aliasing attacks against the branch predictor,
let&#39;s invalidate the BTB on guest exit. This is made complicated
by the fact that we cannot take a branch before invalidating the
BTB.

We only apply this to A12 and A17, which are the only two ARM
cores on which this useful.
<span class="signed-off-by">
Signed-off-by: Marc Zyngier &lt;marc.zyngier@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Alex Shi &lt;alex.shi@linaro.org&gt;</span>

Conflicts:
	no hvc stub in hyp_hvc in arch/arm/kvm/hyp/hyp-entry.S
---
 arch/arm/include/asm/kvm_asm.h |  2 --
 arch/arm/include/asm/kvm_mmu.h | 18 ++++++++++-
 arch/arm/kvm/hyp/hyp-entry.S   | 71 ++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 86 insertions(+), 5 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">index 8ef0538..24f3ec7 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -61,8 +61,6 @@</span> <span class="p_context"> struct kvm_vcpu;</span>
 extern char __kvm_hyp_init[];
 extern char __kvm_hyp_init_end[];
 
<span class="p_del">-extern char __kvm_hyp_vector[];</span>
<span class="p_del">-</span>
 extern void __kvm_flush_vm_context(void);
 extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);
 extern void __kvm_tlb_flush_vmid(struct kvm *kvm);
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">index d10e362..2887129 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -37,6 +37,7 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/highmem.h&gt;
 #include &lt;asm/cacheflush.h&gt;
<span class="p_add">+#include &lt;asm/cputype.h&gt;</span>
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/stage2_pgtable.h&gt;
 
<span class="p_chunk">@@ -225,7 +226,22 @@</span> <span class="p_context"> static inline unsigned int kvm_get_vmid_bits(void)</span>
 
 static inline void *kvm_get_hyp_vector(void)
 {
<span class="p_del">-	return kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="p_add">+	switch(read_cpuid_part()) {</span>
<span class="p_add">+#ifdef CONFIG_HARDEN_BRANCH_PREDICTOR</span>
<span class="p_add">+	case ARM_CPU_PART_CORTEX_A12:</span>
<span class="p_add">+	case ARM_CPU_PART_CORTEX_A17:</span>
<span class="p_add">+	{</span>
<span class="p_add">+		extern char __kvm_hyp_vector_bp_inv[];</span>
<span class="p_add">+		return kvm_ksym_ref(__kvm_hyp_vector_bp_inv);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	default:</span>
<span class="p_add">+	{</span>
<span class="p_add">+		extern char __kvm_hyp_vector[];</span>
<span class="p_add">+		return kvm_ksym_ref(__kvm_hyp_vector);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	}</span>
 }
 
 static inline int kvm_map_vectors(void)
<span class="p_header">diff --git a/arch/arm/kvm/hyp/hyp-entry.S b/arch/arm/kvm/hyp/hyp-entry.S</span>
<span class="p_header">index 96beb53..b6b8cb1 100644</span>
<span class="p_header">--- a/arch/arm/kvm/hyp/hyp-entry.S</span>
<span class="p_header">+++ b/arch/arm/kvm/hyp/hyp-entry.S</span>
<span class="p_chunk">@@ -71,6 +71,66 @@</span> <span class="p_context"> __kvm_hyp_vector:</span>
 	W(b)	hyp_irq
 	W(b)	hyp_fiq
 
<span class="p_add">+#ifdef CONFIG_HARDEN_BRANCH_PREDICTOR</span>
<span class="p_add">+	.align 5</span>
<span class="p_add">+__kvm_hyp_vector_bp_inv:</span>
<span class="p_add">+	.global __kvm_hyp_vector_bp_inv</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We encode the exception entry in the bottom 3 bits of</span>
<span class="p_add">+	 * SP, and we have to guarantee to be 8 bytes aligned.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* Reset 	  7 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* Undef	  6 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* Syscall	  5 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* Prefetch abort 4 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* Data abort	  3 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* HVC		  2 */</span>
<span class="p_add">+	W(add)	sp, sp, #1	/* IRQ		  1 */</span>
<span class="p_add">+	W(nop)			/* FIQ		  0 */</span>
<span class="p_add">+</span>
<span class="p_add">+	mcr	p15, 0, r0, c7, c5, 6	/* BPIALL */</span>
<span class="p_add">+	isb</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_THUMB2_KERNEL</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Yet another silly hack: Use VPIDR as a temp register.</span>
<span class="p_add">+	 * Thumb2 is really a pain, as SP cannot be used with most</span>
<span class="p_add">+	 * of the bitwise instructions. The vect_br macro ensures</span>
<span class="p_add">+	 * things gets cleaned-up.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mcr	p15, 4, r0, c0, c0, 0	/* VPIDR */</span>
<span class="p_add">+	mov	r0, sp</span>
<span class="p_add">+	and	r0, r0, #7</span>
<span class="p_add">+	sub	sp, sp, r0</span>
<span class="p_add">+	push	{r1, r2}</span>
<span class="p_add">+	mov	r1, r0</span>
<span class="p_add">+	mrc	p15, 4, r0, c0, c0, 0	/* VPIDR */</span>
<span class="p_add">+	mrc	p15, 0, r2, c0, c0, 0	/* MIDR  */</span>
<span class="p_add">+	mcr	p15, 4, r2, c0, c0, 0	/* VPIDR */</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+.macro vect_br val, targ</span>
<span class="p_add">+ARM(	eor	sp, sp, #\val	)</span>
<span class="p_add">+ARM(	tst	sp, #7		)</span>
<span class="p_add">+ARM(	eorne	sp, sp, #\val	)</span>
<span class="p_add">+</span>
<span class="p_add">+THUMB(	cmp	r1, #\val	)</span>
<span class="p_add">+THUMB(	popeq	{r1, r2}	)</span>
<span class="p_add">+</span>
<span class="p_add">+	beq	\targ</span>
<span class="p_add">+.endm</span>
<span class="p_add">+</span>
<span class="p_add">+	vect_br	0, hyp_fiq</span>
<span class="p_add">+	vect_br	1, hyp_irq</span>
<span class="p_add">+	vect_br	2, hyp_hvc</span>
<span class="p_add">+	vect_br	3, hyp_dabt</span>
<span class="p_add">+	vect_br	4, hyp_pabt</span>
<span class="p_add">+	vect_br	5, hyp_svc</span>
<span class="p_add">+	vect_br	6, hyp_undef</span>
<span class="p_add">+	vect_br	7, hyp_reset</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 .macro invalid_vector label, cause
 	.align
 \label:	mov	r0, #\cause
<span class="p_chunk">@@ -131,7 +191,14 @@</span> <span class="p_context"> hyp_hvc:</span>
 	mrceq	p15, 4, r0, c12, c0, 0	@ get HVBAR
 	beq	1f
 
<span class="p_del">-	push	{lr}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Pushing r2 here is just a way of keeping the stack aligned to</span>
<span class="p_add">+	 * 8 bytes on any path that can trigger a HYP exception. Here,</span>
<span class="p_add">+	 * we may well be about to jump into the guest, and the guest</span>
<span class="p_add">+	 * exit would otherwise be badly decoded by our fancy</span>
<span class="p_add">+	 * &quot;decode-exception-without-a-branch&quot; code...</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	push    {r2, lr}</span>
 
 	mov	lr, r0
 	mov	r0, r1
<span class="p_chunk">@@ -141,7 +208,7 @@</span> <span class="p_context"> hyp_hvc:</span>
 THUMB(	orr	lr, #1)
 	blx	lr			@ Call the HYP function
 
<span class="p_del">-	pop	{lr}</span>
<span class="p_add">+	pop	{r2, lr}</span>
 1:	eret
 
 guest_trap:

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



