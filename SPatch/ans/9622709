
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,14/15] lockdep: Move data of CONFIG_LOCKDEP_PAGELOCK from page to page_ext - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,14/15] lockdep: Move data of CONFIG_LOCKDEP_PAGELOCK from page to page_ext</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60821">byungchul park</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 14, 2017, 8:19 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1489479542-27030-15-git-send-email-byungchul.park@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9622709/mbox/"
   >mbox</a>
|
   <a href="/patch/9622709/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9622709/">/patch/9622709/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7033760424 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Mar 2017 08:26:40 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5CB3C284CB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Mar 2017 08:26:40 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 51519284DC; Tue, 14 Mar 2017 08:26:40 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8152F284CB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Mar 2017 08:26:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751315AbdCNI0e (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Mar 2017 04:26:34 -0400
Received: from LGEAMRELO13.lge.com ([156.147.23.53]:47884 &quot;EHLO
	lgeamrelo13.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751163AbdCNI0b (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Mar 2017 04:26:31 -0400
Received: from unknown (HELO lgeamrelo04.lge.com) (156.147.1.127)
	by 156.147.23.53 with ESMTP; 14 Mar 2017 17:26:23 +0900
X-Original-SENDERIP: 156.147.1.127
X-Original-MAILFROM: byungchul.park@lge.com
Received: from unknown (HELO LGEAEXHB01P.LGE.NET) (165.244.249.25)
	by 156.147.1.127 with ESMTP; 14 Mar 2017 17:26:21 +0900
X-Original-SENDERIP: 165.244.249.25
X-Original-MAILFROM: byungchul.park@lge.com
Received: from lgekrmhub07.lge.com (10.185.110.17) by LGEAEXHB01P.LGE.NET
	(165.244.249.21) with Microsoft SMTP Server id 8.3.264.0;
	Tue, 14 Mar 2017 17:20:03 +0900
Received: from lgeamrelo04.lge.com ([156.147.1.127])          by
	lgekrmhub07.lge.com (Lotus Domino Release 8.5.3FP6) with ESMTP id
	2017031417200273-29675 ;          Tue, 14 Mar 2017 17:20:02 +0900 
Received: from unknown (HELO localhost.localdomain) (10.177.222.33)     by
	156.147.1.127 with ESMTP; 14 Mar 2017 17:20:00 +0900
X-Original-SENDERIP: 10.177.222.33
X-Original-MAILFROM: byungchul.park@lge.com
From: Byungchul Park &lt;byungchul.park@lge.com&gt;
To: &lt;peterz@infradead.org&gt;, &lt;mingo@kernel.org&gt;
CC: &lt;tglx@linutronix.de&gt;, &lt;walken@google.com&gt;, &lt;boqun.feng@gmail.com&gt;,
	&lt;kirill@shutemov.name&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;iamjoonsoo.kim@lge.com&gt;,
	&lt;akpm@linux-foundation.org&gt;, &lt;willy@infradead.org&gt;,
	&lt;npiggin@gmail.com&gt;, &lt;kernel-team@lge.com&gt;
Subject: [PATCH v6 14/15] lockdep: Move data of CONFIG_LOCKDEP_PAGELOCK from
	page to page_ext
Date: Tue, 14 Mar 2017 17:19:01 +0900
Message-ID: &lt;1489479542-27030-15-git-send-email-byungchul.park@lge.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1489479542-27030-1-git-send-email-byungchul.park@lge.com&gt;
References: &lt;1489479542-27030-1-git-send-email-byungchul.park@lge.com&gt;
X-MIMETrack: Itemize by SMTP Server on LGEKRMHUB07/LGE/LG Group(Release
	8.5.3FP6|November 21, 2013) at 2017/03/14 17:20:02,
	Serialize by Router on LGEKRMHUB07/LGE/LG Group(Release
	8.5.3FP6|November 21, 2013) at 2017/03/14 17:20:03,
	Serialize complete at 2017/03/14 17:20:03
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - March 14, 2017, 8:19 a.m.</div>
<pre class="content">
CONFIG_LOCKDEP_PAGELOCK needs to keep lockdep_map_cross per page. Since
it&#39;s a debug feature, it&#39;s preferred to keep it in struct page_ext than
struct page. Move it to struct page_ext.
<span class="signed-off-by">
Signed-off-by: Byungchul Park &lt;byungchul.park@lge.com&gt;</span>
---
 include/linux/mm_types.h   |  4 ---
 include/linux/page-flags.h | 19 +++++++++++--
 include/linux/page_ext.h   |  4 +++
 include/linux/pagemap.h    | 28 ++++++++++++++++---
 lib/Kconfig.debug          |  1 +
 mm/filemap.c               | 69 ++++++++++++++++++++++++++++++++++++++++++++++
 mm/page_alloc.c            |  3 --
 mm/page_ext.c              |  4 +++
 8 files changed, 118 insertions(+), 14 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 06adfa2..a6c7133 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -225,10 +225,6 @@</span> <span class="p_context"> struct page {</span>
 #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS
 	int _last_cpupid;
 #endif
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_del">-	struct lockdep_map_cross map;</span>
<span class="p_del">-#endif</span>
 }
 /*
  * The struct page can be forced to be double word aligned so that atomic ops
<span class="p_header">diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="p_header">index 9d5f79d..cca33f5 100644</span>
<span class="p_header">--- a/include/linux/page-flags.h</span>
<span class="p_header">+++ b/include/linux/page-flags.h</span>
<span class="p_chunk">@@ -355,28 +355,41 @@</span> <span class="p_context"> static __always_inline int PageCompound(struct page *page)</span>
 
 #ifdef CONFIG_LOCKDEP_PAGELOCK
 #include &lt;linux/lockdep.h&gt;
<span class="p_add">+#include &lt;linux/page_ext.h&gt;</span>
 
 TESTPAGEFLAG(Locked, locked, PF_NO_TAIL)
 
 static __always_inline void __SetPageLocked(struct page *page)
 {
<span class="p_add">+	struct page_ext *e;</span>
<span class="p_add">+</span>
 	__set_bit(PG_locked, &amp;PF_NO_TAIL(page, 1)-&gt;flags);
 
 	page = compound_head(page);
<span class="p_del">-	lock_acquire_exclusive((struct lockdep_map *)&amp;page-&gt;map, 0, 1, NULL, _RET_IP_);</span>
<span class="p_add">+	e = lookup_page_ext(page);</span>
<span class="p_add">+	if (unlikely(!e))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	lock_acquire_exclusive((struct lockdep_map *)&amp;e-&gt;map, 0, 1, NULL, _RET_IP_);</span>
 }
 
 static __always_inline void __ClearPageLocked(struct page *page)
 {
<span class="p_add">+	struct page_ext *e;</span>
<span class="p_add">+</span>
 	__clear_bit(PG_locked, &amp;PF_NO_TAIL(page, 1)-&gt;flags);
 
 	page = compound_head(page);
<span class="p_add">+	e = lookup_page_ext(page);</span>
<span class="p_add">+	if (unlikely(!e))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	/*
 	 * lock_commit_crosslock() is necessary for crosslock
 	 * when the lock is released, before lock_release().
 	 */
<span class="p_del">-	lock_commit_crosslock((struct lockdep_map *)&amp;page-&gt;map);</span>
<span class="p_del">-	lock_release((struct lockdep_map *)&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="p_add">+	lock_commit_crosslock((struct lockdep_map *)&amp;e-&gt;map);</span>
<span class="p_add">+	lock_release((struct lockdep_map *)&amp;e-&gt;map, 0, _RET_IP_);</span>
 }
 #else
 __PAGEFLAG(Locked, locked, PF_NO_TAIL)
<span class="p_header">diff --git a/include/linux/page_ext.h b/include/linux/page_ext.h</span>
<span class="p_header">index 9298c39..d1c52c8c 100644</span>
<span class="p_header">--- a/include/linux/page_ext.h</span>
<span class="p_header">+++ b/include/linux/page_ext.h</span>
<span class="p_chunk">@@ -44,6 +44,10 @@</span> <span class="p_context"> enum page_ext_flags {</span>
  */
 struct page_ext {
 	unsigned long flags;
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+	struct lockdep_map_cross map;</span>
<span class="p_add">+#endif</span>
 };
 
 extern void pgdat_page_ext_init(struct pglist_data *pgdat);
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index b72be29..1be753d 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -16,6 +16,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb_inline.h&gt;
 #ifdef CONFIG_LOCKDEP_PAGELOCK
 #include &lt;linux/lockdep.h&gt;
<span class="p_add">+#include &lt;linux/page_ext.h&gt;</span>
 #endif
 
 /*
<span class="p_chunk">@@ -436,28 +437,47 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
 }
 
 #ifdef CONFIG_LOCKDEP_PAGELOCK
<span class="p_add">+extern struct page_ext_operations lockdep_pagelock_ops;</span>
<span class="p_add">+</span>
 #define lock_page_init(p)						\
 do {									\
 	static struct lock_class_key __key;				\
<span class="p_del">-	lockdep_init_map_crosslock((struct lockdep_map *)&amp;(p)-&gt;map,	\</span>
<span class="p_add">+	struct page_ext *e = lookup_page_ext(p);		\</span>
<span class="p_add">+								\</span>
<span class="p_add">+	if (unlikely(!e))					\</span>
<span class="p_add">+		break;						\</span>
<span class="p_add">+								\</span>
<span class="p_add">+	lockdep_init_map_crosslock((struct lockdep_map *)&amp;(e)-&gt;map,	\</span>
 			&quot;(PG_locked)&quot; #p, &amp;__key, 0);			\
 } while (0)
 
 static inline void lock_page_acquire(struct page *page, int try)
 {
<span class="p_add">+	struct page_ext *e;</span>
<span class="p_add">+</span>
 	page = compound_head(page);
<span class="p_del">-	lock_acquire_exclusive((struct lockdep_map *)&amp;page-&gt;map, 0,</span>
<span class="p_add">+	e = lookup_page_ext(page);</span>
<span class="p_add">+	if (unlikely(!e))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	lock_acquire_exclusive((struct lockdep_map *)&amp;e-&gt;map, 0,</span>
 			       try, NULL, _RET_IP_);
 }
 
 static inline void lock_page_release(struct page *page)
 {
<span class="p_add">+	struct page_ext *e;</span>
<span class="p_add">+</span>
 	page = compound_head(page);
<span class="p_add">+	e = lookup_page_ext(page);</span>
<span class="p_add">+	if (unlikely(!e))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	/*
 	 * lock_commit_crosslock() is necessary for crosslocks.
 	 */
<span class="p_del">-	lock_commit_crosslock((struct lockdep_map *)&amp;page-&gt;map);</span>
<span class="p_del">-	lock_release((struct lockdep_map *)&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="p_add">+	lock_commit_crosslock((struct lockdep_map *)&amp;e-&gt;map);</span>
<span class="p_add">+	lock_release((struct lockdep_map *)&amp;e-&gt;map, 0, _RET_IP_);</span>
 }
 #else
 static inline void lock_page_init(struct page *page) {}
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index dab1de5..2ad9e57 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -1065,6 +1065,7 @@</span> <span class="p_context"> config LOCKDEP_COMPLETE</span>
 config LOCKDEP_PAGELOCK
 	bool &quot;Lock debugging: allow PG_locked lock to use deadlock detector&quot;
 	select LOCKDEP_CROSSRELEASE
<span class="p_add">+	select PAGE_EXTENSION</span>
 	default n
 	help
 	 PG_locked lock is a kind of crosslock. Using crossrelease feature,
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index d439cc7..afca751 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -35,6 +35,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/memcontrol.h&gt;
 #include &lt;linux/cleancache.h&gt;
 #include &lt;linux/rmap.h&gt;
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/page_ext.h&gt;</span>
<span class="p_add">+#endif</span>
 #include &quot;internal.h&quot;
 
 #define CREATE_TRACE_POINTS
<span class="p_chunk">@@ -986,6 +989,72 @@</span> <span class="p_context"> int __lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
 	}
 }
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+static bool need_lockdep_pagelock(void) { return true; }</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_pages_in_zone(pg_data_t *pgdat, struct zone *zone)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+	struct page_ext *page_ext;</span>
<span class="p_add">+	unsigned long pfn = zone-&gt;zone_start_pfn;</span>
<span class="p_add">+	unsigned long end_pfn = pfn + zone-&gt;spanned_pages;</span>
<span class="p_add">+	unsigned long count = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (; pfn &lt; end_pfn; pfn++) {</span>
<span class="p_add">+		if (!pfn_valid(pfn)) {</span>
<span class="p_add">+			pfn = ALIGN(pfn + 1, MAX_ORDER_NR_PAGES);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!pfn_valid_within(pfn))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		page = pfn_to_page(pfn);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (page_zone(page) != zone)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		page_ext = lookup_page_ext(page);</span>
<span class="p_add">+		if (unlikely(!page_ext))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		lock_page_init(page);</span>
<span class="p_add">+		count++;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;Node %d, zone %8s: lockdep pagelock found early allocated %lu pages\n&quot;,</span>
<span class="p_add">+		pgdat-&gt;node_id, zone-&gt;name, count);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_zones_in_node(pg_data_t *pgdat)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct zone *zone;</span>
<span class="p_add">+	struct zone *node_zones = pgdat-&gt;node_zones;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (zone = node_zones; zone - node_zones &lt; MAX_NR_ZONES; ++zone) {</span>
<span class="p_add">+		if (!populated_zone(zone))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
<span class="p_add">+		init_pages_in_zone(pgdat, zone);</span>
<span class="p_add">+		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void init_lockdep_pagelock(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pg_data_t *pgdat;</span>
<span class="p_add">+	for_each_online_pgdat(pgdat)</span>
<span class="p_add">+		init_zones_in_node(pgdat);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+struct page_ext_operations lockdep_pagelock_ops = {</span>
<span class="p_add">+	.need = need_lockdep_pagelock,</span>
<span class="p_add">+	.init = init_lockdep_pagelock,</span>
<span class="p_add">+};</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /**
  * page_cache_next_hole - find the next hole (not-present entry)
  * @mapping: mapping
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 36d5f9e..6de9440 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -5063,9 +5063,6 @@</span> <span class="p_context"> void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,</span>
 		} else {
 			__init_single_pfn(pfn, zone, nid);
 		}
<span class="p_del">-#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_del">-		lock_page_init(pfn_to_page(pfn));</span>
<span class="p_del">-#endif</span>
 	}
 }
 
<span class="p_header">diff --git a/mm/page_ext.c b/mm/page_ext.c</span>
<span class="p_header">index 121dcff..023ac65 100644</span>
<span class="p_header">--- a/mm/page_ext.c</span>
<span class="p_header">+++ b/mm/page_ext.c</span>
<span class="p_chunk">@@ -7,6 +7,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/kmemleak.h&gt;
 #include &lt;linux/page_owner.h&gt;
 #include &lt;linux/page_idle.h&gt;
<span class="p_add">+#include &lt;linux/pagemap.h&gt;</span>
 
 /*
  * struct page extension
<span class="p_chunk">@@ -68,6 +69,9 @@</span> <span class="p_context"></span>
 #if defined(CONFIG_IDLE_PAGE_TRACKING) &amp;&amp; !defined(CONFIG_64BIT)
 	&amp;page_idle_ops,
 #endif
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+	&amp;lockdep_pagelock_ops,</span>
<span class="p_add">+#endif</span>
 };
 
 static unsigned long total_usage;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



