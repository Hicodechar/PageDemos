
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,08/86] arm64: Implement ptep_set_access_flags() for hardware AF/DBM - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,08/86] arm64: Implement ptep_set_access_flags() for hardware AF/DBM</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 30, 2016, 8:48 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160530204937.641614994@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9142727/mbox/"
   >mbox</a>
|
   <a href="/patch/9142727/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9142727/">/patch/9142727/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	74C8960777 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 May 2016 22:00:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6680C200E7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 May 2016 22:00:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5B59B2810E; Mon, 30 May 2016 22:00:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C0C94200E7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 30 May 2016 22:00:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1423296AbcE3WAg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 30 May 2016 18:00:36 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:52416 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1162188AbcE3Uu3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 30 May 2016 16:50:29 -0400
Received: from localhost (c-50-170-35-168.hsd1.wa.comcast.net
	[50.170.35.168])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 45B8693D;
	Mon, 30 May 2016 20:50:29 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Ming Lei &lt;tom.leiming@gmail.com&gt;, Julien Grall &lt;julien.grall@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;
Subject: [PATCH 4.4 08/86] arm64: Implement ptep_set_access_flags() for
	hardware AF/DBM
Date: Mon, 30 May 2016 13:48:57 -0700
Message-Id: &lt;20160530204937.641614994@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.8.3
In-Reply-To: &lt;20160530204937.379068148@linuxfoundation.org&gt;
References: &lt;20160530204937.379068148@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - May 30, 2016, 8:48 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>

commit 66dbd6e61a526ae7d11a208238ae2c17e5cacb6b upstream.

When hardware updates of the access and dirty states are enabled, the
default ptep_set_access_flags() implementation based on calling
set_pte_at() directly is potentially racy. This triggers the &quot;racy dirty
state clearing&quot; warning in set_pte_at() because an existing writable PTE
is overridden with a clean entry.

There are two main scenarios for this situation:

1. The CPU getting an access fault does not support hardware updates of
   the access/dirty flags. However, a different agent in the system
   (e.g. SMMU) can do this, therefore overriding a writable entry with a
   clean one could potentially lose the automatically updated dirty
   status

2. A more complex situation is possible when all CPUs support hardware
   AF/DBM:

   a) Initial state: shareable + writable vma and pte_none(pte)
   b) Read fault taken by two threads of the same process on different
      CPUs
   c) CPU0 takes the mmap_sem and proceeds to handling the fault. It
      eventually reaches do_set_pte() which sets a writable + clean pte.
      CPU0 releases the mmap_sem
   d) CPU1 acquires the mmap_sem and proceeds to handle_pte_fault(). The
      pte entry it reads is present, writable and clean and it continues
      to pte_mkyoung()
   e) CPU1 calls ptep_set_access_flags()

   If between (d) and (e) the hardware (another CPU) updates the dirty
   state (clears PTE_RDONLY), CPU1 will override the PTR_RDONLY bit
   marking the entry clean again.

This patch implements an arm64-specific ptep_set_access_flags() function
to perform an atomic update of the PTE flags.

Fixes: 2f4b829c625e (&quot;arm64: Add support for hardware updates of the access and dirty pte bits&quot;)
<span class="signed-off-by">Signed-off-by: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
Reported-by: Ming Lei &lt;tom.leiming@gmail.com&gt;
<span class="tested-by">Tested-by: Julien Grall &lt;julien.grall@arm.com&gt;</span>
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
[will: reworded comment]
<span class="signed-off-by">Signed-off-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/arm64/include/asm/pgtable.h |    5 +++
 arch/arm64/mm/fault.c            |   50 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 55 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/arm64/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -538,6 +538,11 @@</span> <span class="p_context"> static inline pmd_t pmd_modify(pmd_t pmd</span>
 }
 
 #ifdef CONFIG_ARM64_HW_AFDBM
<span class="p_add">+#define __HAVE_ARCH_PTEP_SET_ACCESS_FLAGS</span>
<span class="p_add">+extern int ptep_set_access_flags(struct vm_area_struct *vma,</span>
<span class="p_add">+				 unsigned long address, pte_t *ptep,</span>
<span class="p_add">+				 pte_t entry, int dirty);</span>
<span class="p_add">+</span>
 /*
  * Atomic pte/pmd modifications.
  */
<span class="p_header">--- a/arch/arm64/mm/fault.c</span>
<span class="p_header">+++ b/arch/arm64/mm/fault.c</span>
<span class="p_chunk">@@ -81,6 +81,56 @@</span> <span class="p_context"> void show_pte(struct mm_struct *mm, unsi</span>
 	printk(&quot;\n&quot;);
 }
 
<span class="p_add">+#ifdef CONFIG_ARM64_HW_AFDBM</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This function sets the access flags (dirty, accessed), as well as write</span>
<span class="p_add">+ * permission, and only to a more permissive setting.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * It needs to cope with hardware update of the accessed/dirty state by other</span>
<span class="p_add">+ * agents in the system and can safely skip the __sync_icache_dcache() call as,</span>
<span class="p_add">+ * like set_pte_at(), the PTE is never changed from no-exec to exec here.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns whether or not the PTE actually changed.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int ptep_set_access_flags(struct vm_area_struct *vma,</span>
<span class="p_add">+			  unsigned long address, pte_t *ptep,</span>
<span class="p_add">+			  pte_t entry, int dirty)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pteval_t old_pteval;</span>
<span class="p_add">+	unsigned int tmp;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_same(*ptep, entry))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* only preserve the access flags and write permission */</span>
<span class="p_add">+	pte_val(entry) &amp;= PTE_AF | PTE_WRITE | PTE_DIRTY;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * PTE_RDONLY is cleared by default in the asm below, so set it in</span>
<span class="p_add">+	 * back if necessary (read-only or clean PTE).</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!pte_write(entry) || !dirty)</span>
<span class="p_add">+		pte_val(entry) |= PTE_RDONLY;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Setting the flags must be done atomically to avoid racing with the</span>
<span class="p_add">+	 * hardware update of the access/dirty state.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	asm volatile(&quot;//	ptep_set_access_flags\n&quot;</span>
<span class="p_add">+	&quot;	prfm	pstl1strm, %2\n&quot;</span>
<span class="p_add">+	&quot;1:	ldxr	%0, %2\n&quot;</span>
<span class="p_add">+	&quot;	and	%0, %0, %3		// clear PTE_RDONLY\n&quot;</span>
<span class="p_add">+	&quot;	orr	%0, %0, %4		// set flags\n&quot;</span>
<span class="p_add">+	&quot;	stxr	%w1, %0, %2\n&quot;</span>
<span class="p_add">+	&quot;	cbnz	%w1, 1b\n&quot;</span>
<span class="p_add">+	: &quot;=&amp;r&quot; (old_pteval), &quot;=&amp;r&quot; (tmp), &quot;+Q&quot; (pte_val(*ptep))</span>
<span class="p_add">+	: &quot;L&quot; (~PTE_RDONLY), &quot;r&quot; (pte_val(entry)));</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_tlb_fix_spurious_fault(vma, address);</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * The kernel tried to access some page that wasn&#39;t present.
  */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



