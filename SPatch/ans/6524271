
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V2,3/3] acpi, apei: use EFI memmap to map GHES memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V2,3/3] acpi, apei: use EFI memmap to map GHES memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 1, 2015, 7:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1433185940-24770-4-git-send-email-zjzhang@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6524271/mbox/"
   >mbox</a>
|
   <a href="/patch/6524271/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6524271/">/patch/6524271/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id BFE669F1C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Jun 2015 19:13:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id D796820501
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Jun 2015 19:13:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id D1BF02051C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  1 Jun 2015 19:13:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753885AbbFATM5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 1 Jun 2015 15:12:57 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:38883 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753629AbbFATMr (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 1 Jun 2015 15:12:47 -0400
Received: from smtp.codeaurora.org (localhost [127.0.0.1])
	by smtp.codeaurora.org (Postfix) with ESMTP id 6B4481417E6;
	Mon,  1 Jun 2015 19:12:46 +0000 (UTC)
Received: by smtp.codeaurora.org (Postfix, from userid 486)
	id 5AC851417F7; Mon,  1 Jun 2015 19:12:46 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
Received: from zjzhang-lab.qualcomm.com (i-global254.qualcomm.com
	[199.106.103.254])
	(using TLSv1.1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	(Authenticated sender: zjzhang@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 975981417F5;
	Mon,  1 Jun 2015 19:12:45 +0000 (UTC)
From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;
To: rjw@rjwysocki.net, lenb@kernel.org, ying.huang@intel.com,
	leif.lindholm@linaro.org, al.stone@linaro.org, fu.wei@linaro.org
Cc: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;,
	linux-acpi@vger.kernel.org, linux-kernel@vger.kernel.org,
	linux-arm-msm@vger.kernel.org, linaro-acpi@lists.linaro.org,
	vgandhi@codeaurora.org
Subject: [PATCH V2 3/3] acpi, apei: use EFI memmap to map GHES memory
Date: Mon,  1 Jun 2015 12:12:20 -0700
Message-Id: &lt;1433185940-24770-4-git-send-email-zjzhang@codeaurora.org&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1433185940-24770-1-git-send-email-zjzhang@codeaurora.org&gt;
References: &lt;1433185940-24770-1-git-send-email-zjzhang@codeaurora.org&gt;
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - June 1, 2015, 7:12 p.m.</div>
<pre class="content">
<span class="from">From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>

With ACPI APEI firmware first handling, generic hardware error
record is updated by firmware in GHES memory region. When firmware
updated GHES memory region in DDR without going through cache,
Linux reads stale data from cache.

GHES memory region should be mapped with cache attributes
according to EFI memory map when applicable. If firmware updates
DDR directly, EFI memory map has GHES memory region defined as
uncached; If firmware updates cache, EFI memory map has GHES
memory region defined as cached.

When EFI is configued, map IRQ page using efi_remap() provided by
EFI subsystem.
<span class="signed-off-by">
Signed-off-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
---
 drivers/acpi/apei/ghes.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a> - June 5, 2015, 9:57 a.m.</div>
<pre class="content">
[ Cc&#39;ing Boris and Tony. Folks original patch is here,
  https://lkml.kernel.org/r/1433185940-24770-4-git-send-email-zjzhang@codeaurora.org ]

On Mon, 01 Jun, at 12:12:20PM, Jonathan (Zhixiong) Zhang wrote:
<span class="quote">&gt; From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With ACPI APEI firmware first handling, generic hardware error</span>
<span class="quote">&gt; record is updated by firmware in GHES memory region. When firmware</span>
<span class="quote">&gt; updated GHES memory region in DDR without going through cache,</span>
<span class="quote">&gt; Linux reads stale data from cache.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; GHES memory region should be mapped with cache attributes</span>
<span class="quote">&gt; according to EFI memory map when applicable. If firmware updates</span>
<span class="quote">&gt; DDR directly, EFI memory map has GHES memory region defined as</span>
<span class="quote">&gt; uncached; If firmware updates cache, EFI memory map has GHES</span>
<span class="quote">&gt; memory region defined as cached.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When EFI is configued, map IRQ page using efi_remap() provided by</span>
<span class="quote">&gt; EFI subsystem.</span>

[...]
<span class="quote">
&gt; @@ -159,6 +160,7 @@ static void __iomem *ghes_ioremap_pfn_nmi(u64 pfn)</span>
<span class="quote">&gt;  	return (void __iomem *)vaddr;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifndef CONFIG_EFI</span>
<span class="quote">&gt;  static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long vaddr;</span>

Sprinkling CONFIG_EFI like this is wrong. On x86 we run kernels built
with CONFIG_EFI on machines with BIOS - you can&#39;t make the EFI vs.
non-EFI decision at compile-time.

So this patch looks like a potential regression to me since on x86
ghes_ioremap_pfn_irq() would not be used anymore and instead we&#39;d be
using efi_remap() which will perform an ioremap_nocache() if it gets
called after efi_free_boot_services().

And based on the comments in the apei code, that&#39;s going to cause issues
because ioremap() does not work in atomic context, not to mention the
fact that we&#39;ve gone from a cached mapping to an uncached one.

Instead, I suggest you modify ghes_ioremap_* to query the EFI memmap (if
it&#39;s available at runtime) to lookup the correct mapping attributes.

But I&#39;ve Cc&#39;d some more people who have actually worked on this code,
since I&#39;m not one of them.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 5, 2015, 10:25 a.m.</div>
<pre class="content">
On Fri, Jun 05, 2015 at 10:57:01AM +0100, Matt Fleming wrote:
<span class="quote">&gt; [ Cc&#39;ing Boris and Tony. Folks original patch is here,</span>
<span class="quote">&gt;   https://lkml.kernel.org/r/1433185940-24770-4-git-send-email-zjzhang@codeaurora.org ]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Mon, 01 Jun, at 12:12:20PM, Jonathan (Zhixiong) Zhang wrote:</span>
<span class="quote">&gt; &gt; From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; With ACPI APEI firmware first handling, generic hardware error</span>
<span class="quote">&gt; &gt; record is updated by firmware in GHES memory region. When firmware</span>
<span class="quote">&gt; &gt; updated GHES memory region in DDR without going through cache,</span>

What is DDR?

I think this needs to be clarified first before we go any further.

I picked up on the sidelines that this might be arm64-specific stuff. If
so, your approach is wrong: you&#39;re merging efi_* facilities from x86 and
ia64 into generic efi ones but then doing CONFIG_EFI ifdeffery in GHES.

What you should do instead is have arch-specific:

ghes_ioremap_pfn_irq()
ghes_iounmap_irq()
...

and whatever else functionality which is different on your arch and
which get called from the generic ghes.c driver.

In the arch-specific ones you can go wild with the ifdeffery and whatnot
is needed on that specific arch.

Something like that, at least.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - June 5, 2015, 4:43 p.m.</div>
<pre class="content">
Thanks Matt for the review. Yes, you are right on, I am following
this:
<span class="quote"> &gt; modify ghes_ioremap_* to query the EFI memmap (if</span>
<span class="quote"> &gt; it&#39;s available at runtime) to lookup the correct mapping attributes.</span>

Jonathan

On 6/5/2015 2:57 AM, Matt Fleming wrote:
<span class="quote">&gt; [ Cc&#39;ing Boris and Tony. Folks original patch is here,</span>
<span class="quote">&gt;    https://lkml.kernel.org/r/1433185940-24770-4-git-send-email-zjzhang@codeaurora.org ]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On Mon, 01 Jun, at 12:12:20PM, Jonathan (Zhixiong) Zhang wrote:</span>
<span class="quote">&gt;&gt; From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; With ACPI APEI firmware first handling, generic hardware error</span>
<span class="quote">&gt;&gt; record is updated by firmware in GHES memory region. When firmware</span>
<span class="quote">&gt;&gt; updated GHES memory region in DDR without going through cache,</span>
<span class="quote">&gt;&gt; Linux reads stale data from cache.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; GHES memory region should be mapped with cache attributes</span>
<span class="quote">&gt;&gt; according to EFI memory map when applicable. If firmware updates</span>
<span class="quote">&gt;&gt; DDR directly, EFI memory map has GHES memory region defined as</span>
<span class="quote">&gt;&gt; uncached; If firmware updates cache, EFI memory map has GHES</span>
<span class="quote">&gt;&gt; memory region defined as cached.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; When EFI is configued, map IRQ page using efi_remap() provided by</span>
<span class="quote">&gt;&gt; EFI subsystem.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; @@ -159,6 +160,7 @@ static void __iomem *ghes_ioremap_pfn_nmi(u64 pfn)</span>
<span class="quote">&gt;&gt;   	return (void __iomem *)vaddr;</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +#ifndef CONFIG_EFI</span>
<span class="quote">&gt;&gt;   static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)</span>
<span class="quote">&gt;&gt;   {</span>
<span class="quote">&gt;&gt;   	unsigned long vaddr;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Sprinkling CONFIG_EFI like this is wrong. On x86 we run kernels built</span>
<span class="quote">&gt; with CONFIG_EFI on machines with BIOS - you can&#39;t make the EFI vs.</span>
<span class="quote">&gt; non-EFI decision at compile-time.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So this patch looks like a potential regression to me since on x86</span>
<span class="quote">&gt; ghes_ioremap_pfn_irq() would not be used anymore and instead we&#39;d be</span>
<span class="quote">&gt; using efi_remap() which will perform an ioremap_nocache() if it gets</span>
<span class="quote">&gt; called after efi_free_boot_services().</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And based on the comments in the apei code, that&#39;s going to cause issues</span>
<span class="quote">&gt; because ioremap() does not work in atomic context, not to mention the</span>
<span class="quote">&gt; fact that we&#39;ve gone from a cached mapping to an uncached one.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Instead, I suggest you modify ghes_ioremap_* to query the EFI memmap (if</span>
<span class="quote">&gt; it&#39;s available at runtime) to lookup the correct mapping attributes.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But I&#39;ve Cc&#39;d some more people who have actually worked on this code,</span>
<span class="quote">&gt; since I&#39;m not one of them.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 5, 2015, 4:50 p.m.</div>
<pre class="content">
On Fri, Jun 05, 2015 at 09:43:26AM -0700, Zhang, Jonathan Zhixiong wrote:
<span class="quote">&gt; Thanks Matt for the review. Yes, you are right on, I am following</span>
<span class="quote">&gt; this:</span>
<span class="quote">&gt; &gt; modify ghes_ioremap_* to query the EFI memmap (if</span>
<span class="quote">&gt; &gt; it&#39;s available at runtime) to lookup the correct mapping attributes.</span>

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing in e-mail?

So please do not top-post.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - June 5, 2015, 5:05 p.m.</div>
<pre class="content">
Thank you Borislav for the review. Pls. see comments inline...

On 6/5/2015 3:25 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Jun 05, 2015 at 10:57:01AM +0100, Matt Fleming wrote:</span>
<span class="quote">&gt;&gt; [ Cc&#39;ing Boris and Tony. Folks original patch is here,</span>
<span class="quote">&gt;&gt;    https://lkml.kernel.org/r/1433185940-24770-4-git-send-email-zjzhang@codeaurora.org ]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Mon, 01 Jun, at 12:12:20PM, Jonathan (Zhixiong) Zhang wrote:</span>
<span class="quote">&gt;&gt;&gt; From: &quot;Jonathan (Zhixiong) Zhang&quot; &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; With ACPI APEI firmware first handling, generic hardware error</span>
<span class="quote">&gt;&gt;&gt; record is updated by firmware in GHES memory region. When firmware</span>
<span class="quote">&gt;&gt;&gt; updated GHES memory region in DDR without going through cache,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What is DDR?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think this needs to be clarified first before we go any further.</span>
I thought the word &quot;memory&quot; might be confusing, because there are
memories on the system that is not accessible by Linux. In this
context, the APEI error data is accessed (read and write) by both Linux
and platform firmware; hence both sides should access the memory using
same cache attribute. I wanted to emphasize the idea that even though
normally DDR is cachable, but in this case when platform access it with
un-cached attribute, Linux should do the same.
I will try to make it more clear in next version of the patch.
<span class="quote">&gt;</span>
<span class="quote">&gt; I picked up on the sidelines that this might be arm64-specific stuff. If</span>
<span class="quote">&gt; so, your approach is wrong: you&#39;re merging efi_* facilities from x86 and</span>
<span class="quote">&gt; ia64 into generic efi ones but then doing CONFIG_EFI ifdeffery in GHES.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What you should do instead is have arch-specific:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ghes_ioremap_pfn_irq()</span>
<span class="quote">&gt; ghes_iounmap_irq()</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; and whatever else functionality which is different on your arch and</span>
<span class="quote">&gt; which get called from the generic ghes.c driver.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; In the arch-specific ones you can go wild with the ifdeffery and whatnot</span>
<span class="quote">&gt; is needed on that specific arch.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Something like that, at least.</span>
Makes total sense. I was trying to reduce binary size for non-EFI
system, but as Matt pointed out in another feedback, on x86 even
BIOS based system has CONFIG_EFI enabled. I will submit a new version
accordingly.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - June 5, 2015, 5:06 p.m.</div>
<pre class="content">
On 6/5/2015 9:50 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Jun 05, 2015 at 09:43:26AM -0700, Zhang, Jonathan Zhixiong wrote:</span>
<span class="quote">&gt;&gt; Thanks Matt for the review. Yes, you are right on, I am following</span>
<span class="quote">&gt;&gt; this:</span>
<span class="quote">&gt;&gt;&gt; modify ghes_ioremap_* to query the EFI memmap (if</span>
<span class="quote">&gt;&gt;&gt; it&#39;s available at runtime) to lookup the correct mapping attributes.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; A: Because it messes up the order in which people normally read text.</span>
<span class="quote">&gt; Q: Why is top-posting such a bad thing?</span>
<span class="quote">&gt; A: Top-posting.</span>
<span class="quote">&gt; Q: What is the most annoying thing in e-mail?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So please do not top-post.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Thanks.</span>
<span class="quote">&gt;</span>
Will do. Thanks for the advise, Borislav.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - June 5, 2015, 5:12 p.m.</div>
<pre class="content">
On Fri, Jun 05, 2015 at 10:05:13AM -0700, Zhang, Jonathan Zhixiong wrote:
<span class="quote">&gt; &gt;What is DDR?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;I think this needs to be clarified first before we go any further.</span>
<span class="quote">&gt; I thought the word &quot;memory&quot; might be confusing, because there are</span>

So you mean normal RAM here?
<span class="quote">
&gt; memories on the system that is not accessible by Linux. In this</span>
<span class="quote">&gt; context, the APEI error data is accessed (read and write) by both Linux</span>
<span class="quote">&gt; and platform firmware; hence both sides should access the memory using</span>
<span class="quote">&gt; same cache attribute. I wanted to emphasize the idea that even though</span>
<span class="quote">&gt; normally DDR is cachable, but in this case when platform access it with</span>
<span class="quote">&gt; un-cached attribute, Linux should do the same.</span>

Makes sense.

Btw, do we need synchronization between firmware and Linux then? Does
Linux need to know when it is ok to touch that memory?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=128921">Jonathan (Zhixiong) Zhang</a> - June 5, 2015, 9:43 p.m.</div>
<pre class="content">
On 6/5/2015 10:12 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Fri, Jun 05, 2015 at 10:05:13AM -0700, Zhang, Jonathan Zhixiong wrote:</span>
<span class="quote">&gt;&gt;&gt; What is DDR?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I think this needs to be clarified first before we go any further.</span>
<span class="quote">&gt;&gt; I thought the word &quot;memory&quot; might be confusing, because there are</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So you mean normal RAM here?</span>
Yes, exactly. I should use this word RAM instead.
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; memories on the system that is not accessible by Linux. In this</span>
<span class="quote">&gt;&gt; context, the APEI error data is accessed (read and write) by both Linux</span>
<span class="quote">&gt;&gt; and platform firmware; hence both sides should access the memory using</span>
<span class="quote">&gt;&gt; same cache attribute. I wanted to emphasize the idea that even though</span>
<span class="quote">&gt;&gt; normally DDR is cachable, but in this case when platform access it with</span>
<span class="quote">&gt;&gt; un-cached attribute, Linux should do the same.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Makes sense.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Btw, do we need synchronization between firmware and Linux then? Does</span>
<span class="quote">&gt; Linux need to know when it is ok to touch that memory?</span>
Good question. Linux zeros out error status code in the error data
after the data is consumed, this is good; but it alone does not solve
the synchronization concern.

For interrupt notification type (SCI or NMI) error source, this may not
be an issue since both sides can operate under the rule that the error
data is only overwritten but never appended. But what about poll
notification type? In this case, platform gathers error, updates the
memory region as needed; Linux checks the same memory region
periodically.

An ACPI APEI proposal intended to solve this concern has been discussed
in UEFI forum. The idea is to have OS to send platform a signal (through
updating a designated register) after error data is consumed. Therefore,
when OS is accessing the memory region, platform does not try to access
the same memory region in the mean time.

After this proposal is approved and published, I will submit a patch
to implement it.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/acpi/apei/ghes.c b/drivers/acpi/apei/ghes.c</span>
<span class="p_header">index e82d0976a5d0..56875ca76aa7 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/ghes.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/ghes.c</span>
<span class="p_chunk">@@ -48,6 +48,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/pci.h&gt;
 #include &lt;linux/aer.h&gt;
 #include &lt;linux/nmi.h&gt;
<span class="p_add">+#include &lt;linux/efi.h&gt;</span>
 
 #include &lt;acpi/ghes.h&gt;
 #include &lt;acpi/apei.h&gt;
<span class="p_chunk">@@ -159,6 +160,7 @@</span> <span class="p_context"> static void __iomem *ghes_ioremap_pfn_nmi(u64 pfn)</span>
 	return (void __iomem *)vaddr;
 }
 
<span class="p_add">+#ifndef CONFIG_EFI</span>
 static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)
 {
 	unsigned long vaddr;
<span class="p_chunk">@@ -169,6 +171,7 @@</span> <span class="p_context"> static void __iomem *ghes_ioremap_pfn_irq(u64 pfn)</span>
 
 	return (void __iomem *)vaddr;
 }
<span class="p_add">+#endif</span>
 
 static void ghes_iounmap_nmi(void __iomem *vaddr_ptr)
 {
<span class="p_chunk">@@ -180,6 +183,7 @@</span> <span class="p_context"> static void ghes_iounmap_nmi(void __iomem *vaddr_ptr)</span>
 	arch_apei_flush_tlb_one(vaddr);
 }
 
<span class="p_add">+#ifndef CONFIG_EFI</span>
 static void ghes_iounmap_irq(void __iomem *vaddr_ptr)
 {
 	unsigned long vaddr = (unsigned long __force)vaddr_ptr;
<span class="p_chunk">@@ -189,6 +193,7 @@</span> <span class="p_context"> static void ghes_iounmap_irq(void __iomem *vaddr_ptr)</span>
 	unmap_kernel_range_noflush(vaddr, PAGE_SIZE);
 	arch_apei_flush_tlb_one(vaddr);
 }
<span class="p_add">+#endif</span>
 
 static int ghes_estatus_pool_init(void)
 {
<span class="p_chunk">@@ -309,7 +314,11 @@</span> <span class="p_context"> static void ghes_copy_tofrom_phys(void *buffer, u64 paddr, u32 len,</span>
 			vaddr = ghes_ioremap_pfn_nmi(paddr &gt;&gt; PAGE_SHIFT);
 		} else {
 			spin_lock_irqsave(&amp;ghes_ioremap_lock_irq, flags);
<span class="p_add">+#ifdef CONFIG_EFI</span>
<span class="p_add">+			vaddr = efi_remap(paddr &amp; PAGE_MASK, PAGE_SIZE);</span>
<span class="p_add">+#else</span>
 			vaddr = ghes_ioremap_pfn_irq(paddr &gt;&gt; PAGE_SHIFT);
<span class="p_add">+#endif</span>
 		}
 		trunk = PAGE_SIZE - offset;
 		trunk = min(trunk, len);
<span class="p_chunk">@@ -324,7 +333,11 @@</span> <span class="p_context"> static void ghes_copy_tofrom_phys(void *buffer, u64 paddr, u32 len,</span>
 			ghes_iounmap_nmi(vaddr);
 			raw_spin_unlock(&amp;ghes_ioremap_lock_nmi);
 		} else {
<span class="p_add">+#ifdef CONFIG_EFI</span>
<span class="p_add">+			iounmap(vaddr);</span>
<span class="p_add">+#else</span>
 			ghes_iounmap_irq(vaddr);
<span class="p_add">+#endif</span>
 			spin_unlock_irqrestore(&amp;ghes_ioremap_lock_irq, flags);
 		}
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



