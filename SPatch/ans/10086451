
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/3] ARM: CMA: avoid double mapping to the CMA area if CONFIG_HIGHMEM = y - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/3] ARM: CMA: avoid double mapping to the CMA area if CONFIG_HIGHMEM = y</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=39721">Joonsoo Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 1, 2017, 7:53 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1512114786-5085-4-git-send-email-iamjoonsoo.kim@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10086451/mbox/"
   >mbox</a>
|
   <a href="/patch/10086451/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10086451/">/patch/10086451/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0375D6037E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Dec 2017 07:53:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E3D8C2A4FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Dec 2017 07:53:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D6D3A2A506; Fri,  1 Dec 2017 07:53:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 81E5A2A4FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  1 Dec 2017 07:53:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751779AbdLAHxl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 1 Dec 2017 02:53:41 -0500
Received: from mail-pf0-f194.google.com ([209.85.192.194]:43015 &quot;EHLO
	mail-pf0-f194.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751443AbdLAHxb (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 1 Dec 2017 02:53:31 -0500
Received: by mail-pf0-f194.google.com with SMTP id e3so4301603pfi.10
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 30 Nov 2017 23:53:31 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=A/mvr0oicmqjfdlW/+ff/fBmYd6/4GCrDzoKYtYqErg=;
	b=tR9om6ZkiYQO+CdHjatpTHtsxqDMV1PGuahkzac7XJ6MQ7U2b+xRxKPqYurH58PXxT
	sU6mRimphyD9VSCSWI18wvqzwC/f3ivgftOlwXZT/VtezUHaDiFURZOR4ey2ZJc0ZsXQ
	FZbLOeANwQ1MMI8ftD0+w27ZYEUkhxce4GppruhuHBpDVeYOiv6rj5pSJ/ibMqjQEY/y
	mVvqvZfNCjPFePOWnZRp1cszYFgzo9g3hJY2mTOwTxiaizQmtGcy2+ro2SN1Hox4JEIa
	2AIwEQFTRyvhFyZQg/7HVc6I1ROWfS2jHeREMju0uNwKDr/Mt6a+H8ZlvTqneHhePmCn
	wgDA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=A/mvr0oicmqjfdlW/+ff/fBmYd6/4GCrDzoKYtYqErg=;
	b=mg7d3ACgbetyOTkycY5Z99HOW+zoRTEJJv3C2F1fDePQ5Rj4VGSY5l5zOGRB1EKQ8c
	i7jmABCxq75ROJ2CRmfuCZAza1SXFWjQazpzFUlg21xmDlZ9Avv+IX4eq4fhXyUAoGhn
	arkbIjyAl3qdZ/AkVnLOA+zGbpUtz2ZqimiU0QopETbUf/FLCuZ4MzB9sxaA7CQ5pjKi
	n7/CgWhQJFsgRJMUM970fMCkzDVJ8t9PxLI5OJXBKYEmy/6NkZZLMJCGMC+dLkCHV0WK
	CY5jSIzVtfH1o2VVjv3zA3SLq/72FoLjkYCPwwvp2PAKqwo7Fep5su90btHK841qQ9+j
	KJgw==
X-Gm-Message-State: AJaThX5W5H8bAJfLLYlenCRb2o+CJKbL5UKiMTo8H2AG7cY/Z+MEByne
	o8aSKtHENVNemNgqTQmRKwA=
X-Google-Smtp-Source: AGs4zMbZr11X3r6ET9oQlB0bbJAeOZvWI2uXTF65o1Jlswj63m4I4WYzJWTosPFbiYpm2b9BM+pHWQ==
X-Received: by 10.101.70.136 with SMTP id h8mr5160229pgr.325.1512114811247; 
	Thu, 30 Nov 2017 23:53:31 -0800 (PST)
Received: from localhost.localdomain ([124.56.155.17])
	by smtp.gmail.com with ESMTPSA id
	o70sm7240541pfk.79.2017.11.30.23.53.27
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Thu, 30 Nov 2017 23:53:30 -0800 (PST)
From: js1304@gmail.com
X-Google-Original-From: iamjoonsoo.kim@lge.com
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Laura Abbott &lt;lauraa@codeaurora.org&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Michal Nazarewicz &lt;mina86@mina86.com&gt;,
	&quot;Aneesh Kumar K . V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Russell King &lt;linux@armlinux.org.uk&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, kernel-team@lge.com,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;, Tony Lindgren &lt;tony@atomide.com&gt;
Subject: [PATCH v2 3/3] ARM: CMA: avoid double mapping to the CMA area if
	CONFIG_HIGHMEM = y
Date: Fri,  1 Dec 2017 16:53:06 +0900
Message-Id: &lt;1512114786-5085-4-git-send-email-iamjoonsoo.kim@lge.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1512114786-5085-1-git-send-email-iamjoonsoo.kim@lge.com&gt;
References: &lt;1512114786-5085-1-git-send-email-iamjoonsoo.kim@lge.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=39721">Joonsoo Kim</a> - Dec. 1, 2017, 7:53 a.m.</div>
<pre class="content">
<span class="from">From: Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;</span>

CMA area is now managed by the separate zone, ZONE_MOVABLE,
to fix many MM related problems. In this implementation, if
CONFIG_HIGHMEM = y, then ZONE_MOVABLE is considered as HIGHMEM and
the memory of the CMA area is also considered as HIGHMEM.
That means that they are considered as the page without direct mapping.
However, CMA area could be in a lowmem and the memory could have
direct mapping.

In ARM, when establishing a new mapping for DMA, direct mapping should
be cleared since two mapping with different cache policy could cause
unknown problem. With this patch, PageHighmem() for the CMA memory
located in lowmem returns true so that the function for DMA mapping
cannot notice whether it needs to clear direct mapping or not, correctly.
To handle this situation, this patch always clears direct mapping
for such CMA memory.
<span class="signed-off-by">
Signed-off-by: Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;</span>
---
 arch/arm/mm/dma-mapping.c | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c</span>
<span class="p_header">index ada8eb2..8c398fe 100644</span>
<span class="p_header">--- a/arch/arm/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -466,6 +466,12 @@</span> <span class="p_context"> void __init dma_contiguous_early_fixup(phys_addr_t base, unsigned long size)</span>
 void __init dma_contiguous_remap(void)
 {
 	int i;
<span class="p_add">+</span>
<span class="p_add">+	if (!dma_mmu_remap_num)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* call flush_cache_all() since CMA area would be large enough */</span>
<span class="p_add">+	flush_cache_all();</span>
 	for (i = 0; i &lt; dma_mmu_remap_num; i++) {
 		phys_addr_t start = dma_mmu_remap[i].base;
 		phys_addr_t end = start + dma_mmu_remap[i].size;
<span class="p_chunk">@@ -498,7 +504,15 @@</span> <span class="p_context"> void __init dma_contiguous_remap(void)</span>
 		flush_tlb_kernel_range(__phys_to_virt(start),
 				       __phys_to_virt(end));
 
<span class="p_del">-		iotable_init(&amp;map, 1);</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * All the memory in CMA region will be on ZONE_MOVABLE.</span>
<span class="p_add">+		 * If that zone is considered as highmem, the memory in CMA</span>
<span class="p_add">+		 * region is also considered as highmem even if it&#39;s</span>
<span class="p_add">+		 * physical address belong to lowmem. In this case,</span>
<span class="p_add">+		 * re-mapping isn&#39;t required.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (!is_highmem_idx(ZONE_MOVABLE))</span>
<span class="p_add">+			iotable_init(&amp;map, 1);</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



