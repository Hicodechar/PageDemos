
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv7,27/36] mm: differentiate page_mapped() from page_mapcount() for compound pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv7,27/36] mm: differentiate page_mapped() from page_mapcount() for compound pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 23, 2015, 1:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1435067206-92901-28-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6661441/mbox/"
   >mbox</a>
|
   <a href="/patch/6661441/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6661441/">/patch/6661441/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id AA19AC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Jun 2015 13:54:33 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 89B1D2057F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Jun 2015 13:54:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3A0E520588
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Jun 2015 13:54:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933819AbbFWNyZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 23 Jun 2015 09:54:25 -0400
Received: from mga14.intel.com ([192.55.52.115]:40009 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932695AbbFWNrZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 23 Jun 2015 09:47:25 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga103.fm.intel.com with ESMTP; 23 Jun 2015 06:47:23 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.13,665,1427785200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;732995967&quot;
Received: from black.fi.intel.com ([10.237.72.82])
	by fmsmga001.fm.intel.com with ESMTP; 23 Jun 2015 06:47:14 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id C22CE983; Tue, 23 Jun 2015 16:46:59 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Christoph Lameter &lt;cl@gentwo.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Steve Capper &lt;steve.capper@linaro.org&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Jerome Marchand &lt;jmarchan@redhat.com&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv7 27/36] mm: differentiate page_mapped() from
	page_mapcount() for compound pages
Date: Tue, 23 Jun 2015 16:46:37 +0300
Message-Id: &lt;1435067206-92901-28-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1435067206-92901-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1435067206-92901-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - June 23, 2015, 1:46 p.m.</div>
<pre class="content">
Let&#39;s define page_mapped() to be true for compound pages if any
sub-pages of the compound page is mapped (with PMD or PTE).

On other hand page_mapcount() return mapcount for this particular small
page.

This will make cases like page_get_anon_vma() behave correctly once we
allow huge pages to be mapped with PTE.

Most users outside core-mm should use page_mapcount() instead of
page_mapped().
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="tested-by">Tested-by: Sasha Levin &lt;sasha.levin@oracle.com&gt;</span>
---
 arch/arc/mm/cache_arc700.c |  4 ++--
 arch/arm/mm/flush.c        |  2 +-
 arch/mips/mm/c-r4k.c       |  3 ++-
 arch/mips/mm/cache.c       |  2 +-
 arch/mips/mm/init.c        |  6 +++---
 arch/sh/mm/cache-sh4.c     |  2 +-
 arch/sh/mm/cache.c         |  8 ++++----
 arch/xtensa/mm/tlb.c       |  2 +-
 fs/proc/page.c             |  4 ++--
 include/linux/mm.h         | 15 +++++++++++++--
 mm/filemap.c               |  2 +-
 11 files changed, 31 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arc/mm/cache_arc700.c b/arch/arc/mm/cache_arc700.c</span>
<span class="p_header">index 8c3a3e02ba92..1baa4d23314b 100644</span>
<span class="p_header">--- a/arch/arc/mm/cache_arc700.c</span>
<span class="p_header">+++ b/arch/arc/mm/cache_arc700.c</span>
<span class="p_chunk">@@ -490,7 +490,7 @@</span> <span class="p_context"> void flush_dcache_page(struct page *page)</span>
 	 */
 	if (!mapping_mapped(mapping)) {
 		clear_bit(PG_dc_clean, &amp;page-&gt;flags);
<span class="p_del">-	} else if (page_mapped(page)) {</span>
<span class="p_add">+	} else if (page_mapcount(page)) {</span>
 
 		/* kernel reading from page with U-mapping */
 		void *paddr = page_address(page);
<span class="p_chunk">@@ -675,7 +675,7 @@</span> <span class="p_context"> void copy_user_highpage(struct page *to, struct page *from,</span>
 	 * Note that while @u_vaddr refers to DST page&#39;s userspace vaddr, it is
 	 * equally valid for SRC page as well
 	 */
<span class="p_del">-	if (page_mapped(from) &amp;&amp; addr_not_cache_congruent(kfrom, u_vaddr)) {</span>
<span class="p_add">+	if (page_mapcount(from) &amp;&amp; addr_not_cache_congruent(kfrom, u_vaddr)) {</span>
 		__flush_dcache_page(kfrom, u_vaddr);
 		clean_src_k_mappings = 1;
 	}
<span class="p_header">diff --git a/arch/arm/mm/flush.c b/arch/arm/mm/flush.c</span>
<span class="p_header">index 77f229302032..4da544aa25ef 100644</span>
<span class="p_header">--- a/arch/arm/mm/flush.c</span>
<span class="p_header">+++ b/arch/arm/mm/flush.c</span>
<span class="p_chunk">@@ -315,7 +315,7 @@</span> <span class="p_context"> void flush_dcache_page(struct page *page)</span>
 	mapping = page_mapping(page);
 
 	if (!cache_ops_need_broadcast() &amp;&amp;
<span class="p_del">-	    mapping &amp;&amp; !page_mapped(page))</span>
<span class="p_add">+	    mapping &amp;&amp; !page_mapcount(page))</span>
 		clear_bit(PG_dcache_clean, &amp;page-&gt;flags);
 	else {
 		__flush_dcache_page(mapping, page);
<span class="p_header">diff --git a/arch/mips/mm/c-r4k.c b/arch/mips/mm/c-r4k.c</span>
<span class="p_header">index 3f8059602765..b28bf185ef77 100644</span>
<span class="p_header">--- a/arch/mips/mm/c-r4k.c</span>
<span class="p_header">+++ b/arch/mips/mm/c-r4k.c</span>
<span class="p_chunk">@@ -578,7 +578,8 @@</span> <span class="p_context"> static inline void local_r4k_flush_cache_page(void *args)</span>
 		 * another ASID than the current one.
 		 */
 		map_coherent = (cpu_has_dc_aliases &amp;&amp;
<span class="p_del">-				page_mapped(page) &amp;&amp; !Page_dcache_dirty(page));</span>
<span class="p_add">+				page_mapcount(page) &amp;&amp;</span>
<span class="p_add">+				!Page_dcache_dirty(page));</span>
 		if (map_coherent)
 			vaddr = kmap_coherent(page, addr);
 		else
<span class="p_header">diff --git a/arch/mips/mm/cache.c b/arch/mips/mm/cache.c</span>
<span class="p_header">index 7e3ea7766822..e695b28dc32c 100644</span>
<span class="p_header">--- a/arch/mips/mm/cache.c</span>
<span class="p_header">+++ b/arch/mips/mm/cache.c</span>
<span class="p_chunk">@@ -106,7 +106,7 @@</span> <span class="p_context"> void __flush_anon_page(struct page *page, unsigned long vmaddr)</span>
 	unsigned long addr = (unsigned long) page_address(page);
 
 	if (pages_do_alias(addr, vmaddr)) {
<span class="p_del">-		if (page_mapped(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
<span class="p_add">+		if (page_mapcount(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
 			void *kaddr;
 
 			kaddr = kmap_coherent(page, vmaddr);
<span class="p_header">diff --git a/arch/mips/mm/init.c b/arch/mips/mm/init.c</span>
<span class="p_header">index 448cde372af0..2c8e44aa536e 100644</span>
<span class="p_header">--- a/arch/mips/mm/init.c</span>
<span class="p_header">+++ b/arch/mips/mm/init.c</span>
<span class="p_chunk">@@ -156,7 +156,7 @@</span> <span class="p_context"> void copy_user_highpage(struct page *to, struct page *from,</span>
 
 	vto = kmap_atomic(to);
 	if (cpu_has_dc_aliases &amp;&amp;
<span class="p_del">-	    page_mapped(from) &amp;&amp; !Page_dcache_dirty(from)) {</span>
<span class="p_add">+	    page_mapcount(from) &amp;&amp; !Page_dcache_dirty(from)) {</span>
 		vfrom = kmap_coherent(from, vaddr);
 		copy_page(vto, vfrom);
 		kunmap_coherent();
<span class="p_chunk">@@ -178,7 +178,7 @@</span> <span class="p_context"> void copy_to_user_page(struct vm_area_struct *vma,</span>
 	unsigned long len)
 {
 	if (cpu_has_dc_aliases &amp;&amp;
<span class="p_del">-	    page_mapped(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
<span class="p_add">+	    page_mapcount(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
 		void *vto = kmap_coherent(page, vaddr) + (vaddr &amp; ~PAGE_MASK);
 		memcpy(vto, src, len);
 		kunmap_coherent();
<span class="p_chunk">@@ -196,7 +196,7 @@</span> <span class="p_context"> void copy_from_user_page(struct vm_area_struct *vma,</span>
 	unsigned long len)
 {
 	if (cpu_has_dc_aliases &amp;&amp;
<span class="p_del">-	    page_mapped(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
<span class="p_add">+	    page_mapcount(page) &amp;&amp; !Page_dcache_dirty(page)) {</span>
 		void *vfrom = kmap_coherent(page, vaddr) + (vaddr &amp; ~PAGE_MASK);
 		memcpy(dst, vfrom, len);
 		kunmap_coherent();
<span class="p_header">diff --git a/arch/sh/mm/cache-sh4.c b/arch/sh/mm/cache-sh4.c</span>
<span class="p_header">index 51d8f7f31d1d..58aaa4f33b81 100644</span>
<span class="p_header">--- a/arch/sh/mm/cache-sh4.c</span>
<span class="p_header">+++ b/arch/sh/mm/cache-sh4.c</span>
<span class="p_chunk">@@ -241,7 +241,7 @@</span> <span class="p_context"> static void sh4_flush_cache_page(void *args)</span>
 		 */
 		map_coherent = (current_cpu_data.dcache.n_aliases &amp;&amp;
 			test_bit(PG_dcache_clean, &amp;page-&gt;flags) &amp;&amp;
<span class="p_del">-			page_mapped(page));</span>
<span class="p_add">+			page_mapcount(page));</span>
 		if (map_coherent)
 			vaddr = kmap_coherent(page, address);
 		else
<span class="p_header">diff --git a/arch/sh/mm/cache.c b/arch/sh/mm/cache.c</span>
<span class="p_header">index f770e3992620..e58cfbf45150 100644</span>
<span class="p_header">--- a/arch/sh/mm/cache.c</span>
<span class="p_header">+++ b/arch/sh/mm/cache.c</span>
<span class="p_chunk">@@ -59,7 +59,7 @@</span> <span class="p_context"> void copy_to_user_page(struct vm_area_struct *vma, struct page *page,</span>
 		       unsigned long vaddr, void *dst, const void *src,
 		       unsigned long len)
 {
<span class="p_del">-	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapped(page) &amp;&amp;</span>
<span class="p_add">+	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapcount(page) &amp;&amp;</span>
 	    test_bit(PG_dcache_clean, &amp;page-&gt;flags)) {
 		void *vto = kmap_coherent(page, vaddr) + (vaddr &amp; ~PAGE_MASK);
 		memcpy(vto, src, len);
<span class="p_chunk">@@ -78,7 +78,7 @@</span> <span class="p_context"> void copy_from_user_page(struct vm_area_struct *vma, struct page *page,</span>
 			 unsigned long vaddr, void *dst, const void *src,
 			 unsigned long len)
 {
<span class="p_del">-	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapped(page) &amp;&amp;</span>
<span class="p_add">+	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapcount(page) &amp;&amp;</span>
 	    test_bit(PG_dcache_clean, &amp;page-&gt;flags)) {
 		void *vfrom = kmap_coherent(page, vaddr) + (vaddr &amp; ~PAGE_MASK);
 		memcpy(dst, vfrom, len);
<span class="p_chunk">@@ -97,7 +97,7 @@</span> <span class="p_context"> void copy_user_highpage(struct page *to, struct page *from,</span>
 
 	vto = kmap_atomic(to);
 
<span class="p_del">-	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapped(from) &amp;&amp;</span>
<span class="p_add">+	if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapcount(from) &amp;&amp;</span>
 	    test_bit(PG_dcache_clean, &amp;from-&gt;flags)) {
 		vfrom = kmap_coherent(from, vaddr);
 		copy_page(vto, vfrom);
<span class="p_chunk">@@ -153,7 +153,7 @@</span> <span class="p_context"> void __flush_anon_page(struct page *page, unsigned long vmaddr)</span>
 	unsigned long addr = (unsigned long) page_address(page);
 
 	if (pages_do_alias(addr, vmaddr)) {
<span class="p_del">-		if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapped(page) &amp;&amp;</span>
<span class="p_add">+		if (boot_cpu_data.dcache.n_aliases &amp;&amp; page_mapcount(page) &amp;&amp;</span>
 		    test_bit(PG_dcache_clean, &amp;page-&gt;flags)) {
 			void *kaddr;
 
<span class="p_header">diff --git a/arch/xtensa/mm/tlb.c b/arch/xtensa/mm/tlb.c</span>
<span class="p_header">index 5ece856c5725..35c822286bbe 100644</span>
<span class="p_header">--- a/arch/xtensa/mm/tlb.c</span>
<span class="p_header">+++ b/arch/xtensa/mm/tlb.c</span>
<span class="p_chunk">@@ -245,7 +245,7 @@</span> <span class="p_context"> static int check_tlb_entry(unsigned w, unsigned e, bool dtlb)</span>
 						page_mapcount(p));
 				if (!page_count(p))
 					rc |= TLB_INSANE;
<span class="p_del">-				else if (page_mapped(p))</span>
<span class="p_add">+				else if (page_mapcount(p))</span>
 					rc |= TLB_SUSPICIOUS;
 			} else {
 				rc |= TLB_INSANE;
<span class="p_header">diff --git a/fs/proc/page.c b/fs/proc/page.c</span>
<span class="p_header">index 7eee2d8b97d9..e99c059339f6 100644</span>
<span class="p_header">--- a/fs/proc/page.c</span>
<span class="p_header">+++ b/fs/proc/page.c</span>
<span class="p_chunk">@@ -97,9 +97,9 @@</span> <span class="p_context"> u64 stable_page_flags(struct page *page)</span>
 	 * pseudo flags for the well known (anonymous) memory mapped pages
 	 *
 	 * Note that page-&gt;_mapcount is overloaded in SLOB/SLUB/SLQB, so the
<span class="p_del">-	 * simple test in page_mapped() is not enough.</span>
<span class="p_add">+	 * simple test in page_mapcount() is not enough.</span>
 	 */
<span class="p_del">-	if (!PageSlab(page) &amp;&amp; page_mapped(page))</span>
<span class="p_add">+	if (!PageSlab(page) &amp;&amp; page_mapcount(page))</span>
 		u |= 1 &lt;&lt; KPF_MMAP;
 	if (PageAnon(page))
 		u |= 1 &lt;&lt; KPF_ANON;
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 7a3f95beff12..0786ca13b17e 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -917,10 +917,21 @@</span> <span class="p_context"> static inline pgoff_t page_file_index(struct page *page)</span>
 
 /*
  * Return true if this page is mapped into pagetables.
<span class="p_add">+ * For compound page it returns true if any subpage of compound page is mapped.</span>
  */
<span class="p_del">-static inline int page_mapped(struct page *page)</span>
<span class="p_add">+static inline bool page_mapped(struct page *page)</span>
 {
<span class="p_del">-	return atomic_read(&amp;(page)-&gt;_mapcount) + compound_mapcount(page) &gt;= 0;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+	if (likely(!PageCompound(page)))</span>
<span class="p_add">+		return atomic_read(&amp;page-&gt;_mapcount) &gt;= 0;</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	if (atomic_read(compound_mapcount_ptr(page)) + 1)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	for (i = 0; i &lt; hpage_nr_pages(page); i++) {</span>
<span class="p_add">+		if (atomic_read(&amp;page[i]._mapcount) &gt;= 0)</span>
<span class="p_add">+			return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return false;</span>
 }
 
 /*
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index fb0ba54c3ac5..c5a40dd4f846 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -202,7 +202,7 @@</span> <span class="p_context"> void __delete_from_page_cache(struct page *page, void *shadow)</span>
 		__dec_zone_page_state(page, NR_FILE_PAGES);
 	if (PageSwapBacked(page))
 		__dec_zone_page_state(page, NR_SHMEM);
<span class="p_del">-	BUG_ON(page_mapped(page));</span>
<span class="p_add">+	VM_BUG_ON_PAGE(page_mapped(page), page);</span>
 
 	/*
 	 * At this point page must be either written or cleaned by truncate.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



