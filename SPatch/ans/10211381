
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2.1] x86/speculation: Use IBRS if available before calling into firmware - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2.1] x86/speculation: Use IBRS if available before calling into firmware</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=178213">Woodhouse, David</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 11, 2018, 3:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1518362359-1005-1-git-send-email-dwmw@amazon.co.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10211381/mbox/"
   >mbox</a>
|
   <a href="/patch/10211381/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10211381/">/patch/10211381/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1853060329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 11 Feb 2018 15:19:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ED7B628A1D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 11 Feb 2018 15:19:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CD13D28AEF; Sun, 11 Feb 2018 15:19:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EF03228A1D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 11 Feb 2018 15:19:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753485AbeBKPT2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 11 Feb 2018 10:19:28 -0500
Received: from smtp-fw-4101.amazon.com ([72.21.198.25]:25710 &quot;EHLO
	smtp-fw-4101.amazon.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751077AbeBKPT1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 11 Feb 2018 10:19:27 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amazon.co.uk; i=@amazon.co.uk; q=dns/txt;
	s=amazon201209; t=1518362366; x=1549898366;
	h=from:to:subject:date:message-id:in-reply-to:references;
	bh=j7nZfQrJiu9rMFMfOSK9qZFPxnIrCNx9mc44PIJBKBo=;
	b=Gl7O7t7HKMV/8EXYsiE64Ou+SGRPbY9Z7VrWybfCrFsbMwybGFwdij4q
	j1MQGAmb3FbQ8RiIrCaWmdQBCNCTbnLnMSR/EmLOkAsKnbjy4UVxV19+Z
	sDSCmObu03yhTMZT3cubvaA62459zUZpTxZ4Ctwym8l2xq+Uj1MrHK+wp o=;
X-IronPort-AV: E=Sophos;i=&quot;5.46,496,1511827200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;707728435&quot;
Received: from iad6-co-svc-p1-lb1-vlan3.amazon.com (HELO
	email-inbound-relay-1e-c7c08562.us-east-1.amazon.com)
	([10.124.125.6]) by smtp-border-fw-out-4101.iad4.amazon.com with
	ESMTP/TLS/DHE-RSA-AES256-SHA; 11 Feb 2018 15:19:26 +0000
Received: from uc8d3ff76b9bc5848a9cc.ant.amazon.com
	(iad1-ws-svc-lb91-vlan2.amazon.com [10.0.103.146])
	by email-inbound-relay-1e-c7c08562.us-east-1.amazon.com
	(8.14.7/8.14.7) with ESMTP id w1BFJMPE115151
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Sun, 11 Feb 2018 15:19:24 GMT
Received: from uc8d3ff76b9bc5848a9cc.ant.amazon.com (localhost [127.0.0.1])
	by uc8d3ff76b9bc5848a9cc.ant.amazon.com (8.15.2/8.15.2/Debian-3)
	with ESMTP id w1BFJLPa001080; Sun, 11 Feb 2018 15:19:21 GMT
Received: (from dwmw@localhost)
	by uc8d3ff76b9bc5848a9cc.ant.amazon.com (8.15.2/8.15.2/Submit) id
	w1BFJLTo001077; Sun, 11 Feb 2018 15:19:21 GMT
From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;
To: x86@kernel.org, mingo@kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH v2.1] x86/speculation: Use IBRS if available before calling
	into firmware
Date: Sun, 11 Feb 2018 15:19:19 +0000
Message-Id: &lt;1518362359-1005-1-git-send-email-dwmw@amazon.co.uk&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1518305967-31356-1-git-send-email-dwmw@amazon.co.uk&gt;
References: &lt;1518305967-31356-1-git-send-email-dwmw@amazon.co.uk&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=178213">Woodhouse, David</a> - Feb. 11, 2018, 3:19 p.m.</div>
<pre class="content">
Retpoline means the kernel is safe because it has no indirect branches.
But firmware isn&#39;t, so use IBRS for firmware calls if it&#39;s available.
<span class="signed-off-by">
Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
---
Helps to include the right header file.

 arch/x86/include/asm/apm.h           |  6 ++++++
 arch/x86/include/asm/cpufeatures.h   |  1 +
 arch/x86/include/asm/efi.h           | 17 +++++++++++++++--
 arch/x86/include/asm/nospec-branch.h | 37 +++++++++++++++++++++++++++---------
 arch/x86/kernel/cpu/bugs.c           | 12 +++++++++++-
 drivers/watchdog/hpwdt.c             |  3 +++
 6 files changed, 64 insertions(+), 12 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/apm.h b/arch/x86/include/asm/apm.h</span>
<span class="p_header">index 4d4015d..c356098 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/apm.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/apm.h</span>
<span class="p_chunk">@@ -7,6 +7,8 @@</span> <span class="p_context"></span>
 #ifndef _ASM_X86_MACH_DEFAULT_APM_H
 #define _ASM_X86_MACH_DEFAULT_APM_H
 
<span class="p_add">+#include &lt;asm/nospec-branch.h&gt;</span>
<span class="p_add">+</span>
 #ifdef APM_ZERO_SEGS
 #	define APM_DO_ZERO_SEGS \
 		&quot;pushl %%ds\n\t&quot; \
<span class="p_chunk">@@ -32,6 +34,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
 	 */
<span class="p_add">+	firmware_restrict_branch_speculation_start();</span>
 	__asm__ __volatile__(APM_DO_ZERO_SEGS
 		&quot;pushl %%edi\n\t&quot;
 		&quot;pushl %%ebp\n\t&quot;
<span class="p_chunk">@@ -44,6 +47,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 		  &quot;=S&quot; (*esi)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	firmware_restrict_branch_speculation_end();</span>
 }
 
 static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,
<span class="p_chunk">@@ -56,6 +60,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
 	 */
<span class="p_add">+	firmware_restrict_branch_speculation_start();</span>
 	__asm__ __volatile__(APM_DO_ZERO_SEGS
 		&quot;pushl %%edi\n\t&quot;
 		&quot;pushl %%ebp\n\t&quot;
<span class="p_chunk">@@ -68,6 +73,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 		  &quot;=S&quot; (si)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	firmware_restrict_branch_speculation_end();</span>
 	return error;
 }
 
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">index 73b5fff..66c1434 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -211,6 +211,7 @@</span> <span class="p_context"></span>
 #define X86_FEATURE_RSB_CTXSW		( 7*32+19) /* &quot;&quot; Fill RSB on context switches */
 
 #define X86_FEATURE_USE_IBPB		( 7*32+21) /* &quot;&quot; Indirect Branch Prediction Barrier enabled */
<span class="p_add">+#define X86_FEATURE_USE_IBRS_FW		( 7*32+22) /* &quot;&quot; Use IBRS during runtime firmware calls */</span>
 
 /* Virtualization flags: Linux defined, word 8 */
 #define X86_FEATURE_TPR_SHADOW		( 8*32+ 0) /* Intel TPR Shadow */
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 85f6ccb..a399c1e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/processor-flags.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_add">+#include &lt;asm/nospec-branch.h&gt;</span>
 
 /*
  * We map the EFI regions needed for runtime services non-contiguously,
<span class="p_chunk">@@ -36,8 +37,18 @@</span> <span class="p_context"></span>
 
 extern asmlinkage unsigned long efi_call_phys(void *, ...);
 
<span class="p_del">-#define arch_efi_call_virt_setup()	kernel_fpu_begin()</span>
<span class="p_del">-#define arch_efi_call_virt_teardown()	kernel_fpu_end()</span>
<span class="p_add">+#define arch_efi_call_virt_setup()					\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	kernel_fpu_begin();						\</span>
<span class="p_add">+	firmware_restrict_branch_speculation_start();			\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
<span class="p_add">+#define arch_efi_call_virt_teardown()					\</span>
<span class="p_add">+({									\</span>
<span class="p_add">+	firmware_restrict_branch_speculation_end();			\</span>
<span class="p_add">+	kernel_fpu_end();						\</span>
<span class="p_add">+})</span>
<span class="p_add">+</span>
 
 /*
  * Wrap all the virtual calls in a way that forces the parameters on the stack.
<span class="p_chunk">@@ -73,6 +84,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	efi_sync_low_kernel_mappings();					\
 	preempt_disable();						\
 	__kernel_fpu_begin();						\
<span class="p_add">+	firmware_restrict_branch_speculation_start();			\</span>
 									\
 	if (efi_scratch.use_pgd) {					\
 		efi_scratch.prev_cr3 = __read_cr3();			\
<span class="p_chunk">@@ -91,6 +103,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 		__flush_tlb_all();					\
 	}								\
 									\
<span class="p_add">+	firmware_restrict_branch_speculation_end();			\</span>
 	__kernel_fpu_end();						\
 	preempt_enable();						\
 })
<span class="p_header">diff --git a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h</span>
<span class="p_header">index 300cc15..788c4da 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/nospec-branch.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/nospec-branch.h</span>
<span class="p_chunk">@@ -162,17 +162,36 @@</span> <span class="p_context"> static inline void vmexit_fill_RSB(void)</span>
 #endif
 }
 
<span class="p_add">+#define alternative_msr_write(_msr, _val, _feature)		\</span>
<span class="p_add">+	asm volatile(ALTERNATIVE(&quot;&quot;,				\</span>
<span class="p_add">+				 &quot;movl %[msr], %%ecx\n\t&quot;	\</span>
<span class="p_add">+				 &quot;movl %[val], %%eax\n\t&quot;	\</span>
<span class="p_add">+				 &quot;movl $0, %%edx\n\t&quot;		\</span>
<span class="p_add">+				 &quot;wrmsr&quot;,			\</span>
<span class="p_add">+				 _feature)			\</span>
<span class="p_add">+		     : : [msr] &quot;i&quot; (_msr), [val] &quot;i&quot; (_val)	\</span>
<span class="p_add">+		     : &quot;eax&quot;, &quot;ecx&quot;, &quot;edx&quot;, &quot;memory&quot;)</span>
<span class="p_add">+</span>
 static inline void indirect_branch_prediction_barrier(void)
 {
<span class="p_del">-	asm volatile(ALTERNATIVE(&quot;&quot;,</span>
<span class="p_del">-				 &quot;movl %[msr], %%ecx\n\t&quot;</span>
<span class="p_del">-				 &quot;movl %[val], %%eax\n\t&quot;</span>
<span class="p_del">-				 &quot;movl $0, %%edx\n\t&quot;</span>
<span class="p_del">-				 &quot;wrmsr&quot;,</span>
<span class="p_del">-				 X86_FEATURE_USE_IBPB)</span>
<span class="p_del">-		     : : [msr] &quot;i&quot; (MSR_IA32_PRED_CMD),</span>
<span class="p_del">-			 [val] &quot;i&quot; (PRED_CMD_IBPB)</span>
<span class="p_del">-		     : &quot;eax&quot;, &quot;ecx&quot;, &quot;edx&quot;, &quot;memory&quot;);</span>
<span class="p_add">+	alternative_msr_write(MSR_IA32_PRED_CMD, PRED_CMD_IBPB,</span>
<span class="p_add">+			      X86_FEATURE_USE_IBPB);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * With retpoline, we must use IBRS to restrict branch prediction</span>
<span class="p_add">+ * before calling into firmware.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void firmware_restrict_branch_speculation_start(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	alternative_msr_write(MSR_IA32_SPEC_CTRL, SPEC_CTRL_IBRS,</span>
<span class="p_add">+			      X86_FEATURE_USE_IBRS_FW);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void firmware_restrict_branch_speculation_end(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	alternative_msr_write(MSR_IA32_SPEC_CTRL, 0,</span>
<span class="p_add">+			      X86_FEATURE_USE_IBRS_FW);</span>
 }
 
 #endif /* __ASSEMBLY__ */
<span class="p_header">diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c</span>
<span class="p_header">index 61152aa..6f6d763 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/bugs.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/bugs.c</span>
<span class="p_chunk">@@ -303,6 +303,15 @@</span> <span class="p_context"> static void __init spectre_v2_select_mitigation(void)</span>
 		setup_force_cpu_cap(X86_FEATURE_USE_IBPB);
 		pr_info(&quot;Enabling Indirect Branch Prediction Barrier\n&quot;);
 	}
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Retpoline means the kernel is safe because it has no indirect</span>
<span class="p_add">+	 * branches. But firmware isn&#39;t, so use IBRS to protect that.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (boot_cpu_has(X86_FEATURE_IBRS)) {</span>
<span class="p_add">+		setup_force_cpu_cap(X86_FEATURE_USE_IBRS_FW);</span>
<span class="p_add">+		pr_info(&quot;Enabling Restricted Speculation for firmware calls\n&quot;);</span>
<span class="p_add">+	}</span>
 }
 
 #undef pr_fmt
<span class="p_chunk">@@ -332,8 +341,9 @@</span> <span class="p_context"> ssize_t cpu_show_spectre_v2(struct device *dev,</span>
 	if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))
 		return sprintf(buf, &quot;Not affected\n&quot;);
 
<span class="p_del">-	return sprintf(buf, &quot;%s%s%s\n&quot;, spectre_v2_strings[spectre_v2_enabled],</span>
<span class="p_add">+	return sprintf(buf, &quot;%s%s%s%s\n&quot;, spectre_v2_strings[spectre_v2_enabled],</span>
 		       boot_cpu_has(X86_FEATURE_USE_IBPB) ? &quot;, IBPB&quot; : &quot;&quot;,
<span class="p_add">+		       boot_cpu_has(X86_FEATURE_USE_IBRS_FW) ? &quot;, IBRS_FW&quot; : &quot;&quot;,</span>
 		       spectre_v2_module_string());
 }
 #endif
<span class="p_header">diff --git a/drivers/watchdog/hpwdt.c b/drivers/watchdog/hpwdt.c</span>
<span class="p_header">index 67fbe35..bab3721 100644</span>
<span class="p_header">--- a/drivers/watchdog/hpwdt.c</span>
<span class="p_header">+++ b/drivers/watchdog/hpwdt.c</span>
<span class="p_chunk">@@ -38,6 +38,7 @@</span> <span class="p_context"></span>
 #endif /* CONFIG_HPWDT_NMI_DECODING */
 #include &lt;asm/nmi.h&gt;
 #include &lt;asm/frame.h&gt;
<span class="p_add">+#include &lt;asm/nospec-branch.h&gt;</span>
 
 #define HPWDT_VERSION			&quot;1.4.0&quot;
 #define SECS_TO_TICKS(secs)		((secs) * 1000 / 128)
<span class="p_chunk">@@ -486,11 +487,13 @@</span> <span class="p_context"> static int hpwdt_pretimeout(unsigned int ulReason, struct pt_regs *regs)</span>
 	if (!hpwdt_nmi_decoding)
 		return NMI_DONE;
 
<span class="p_add">+	firmware_restrict_branch_speculation_start();</span>
 	spin_lock_irqsave(&amp;rom_lock, rom_pl);
 	if (!die_nmi_called &amp;&amp; !is_icru &amp;&amp; !is_uefi)
 		asminline_call(&amp;cmn_regs, cru_rom_addr);
 	die_nmi_called = 1;
 	spin_unlock_irqrestore(&amp;rom_lock, rom_pl);
<span class="p_add">+	firmware_restrict_branch_speculation_end();</span>
 
 	if (allow_kdump)
 		hpwdt_stop();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



