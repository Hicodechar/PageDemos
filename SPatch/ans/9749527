
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,2/8] x86/mm: Change the leave_mm() condition for local TLB flushes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,2/8] x86/mm: Change the leave_mm() condition for local TLB flushes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 26, 2017, 12:47 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;61de238db6d9c9018db020c41047ce32dac64488.1495759610.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9749527/mbox/"
   >mbox</a>
|
   <a href="/patch/9749527/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9749527/">/patch/9749527/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9F05260388 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 May 2017 00:49:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 91044283CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 May 2017 00:49:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 85055283D9; Fri, 26 May 2017 00:49:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F0A2A283CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 May 2017 00:49:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1946482AbdEZAt3 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 25 May 2017 20:49:29 -0400
Received: from mail.kernel.org ([198.145.29.99]:36404 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1760140AbdEZAr4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 25 May 2017 20:47:56 -0400
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id A06CB239F0;
	Fri, 26 May 2017 00:47:55 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org A06CB239F0
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: &quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Nadav Amit &lt;namit@vmware.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;
Subject: [PATCH v3 2/8] x86/mm: Change the leave_mm() condition for local
	TLB flushes
Date: Thu, 25 May 2017 17:47:46 -0700
Message-Id: &lt;61de238db6d9c9018db020c41047ce32dac64488.1495759610.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;cover.1495759610.git.luto@kernel.org&gt;
References: &lt;cover.1495759610.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1495759610.git.luto@kernel.org&gt;
References: &lt;cover.1495759610.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - May 26, 2017, 12:47 a.m.</div>
<pre class="content">
On a remote TLB flush, we leave_mm() if we&#39;re TLBSTATE_LAZY.  For a
local flush_tlb_mm_range(), we leave_mm() if !current-&gt;mm.  These
are approximately the same condition -- the scheduler sets lazy TLB
mode when switching to a thread with no mm.

I&#39;m about to merge the local and remote flush code, but for ease of
verifying and bisecting the patch, I want the local and remote flush
behavior to match first.  This patch changes the local code to match
the remote code.

Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Nadav Amit &lt;namit@vmware.com&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Arjan van de Ven &lt;arjan@linux.intel.com&gt;
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/mm/tlb.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - May 26, 2017, 1:39 a.m.</div>
<pre class="content">
On Thu, 2017-05-25 at 17:47 -0700, Andy Lutomirski wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; +++ b/arch/x86/mm/tlb.c</span>
<span class="quote">&gt; @@ -311,7 +311,7 @@ void flush_tlb_mm_range(struct mm_struct *mm,</span>
<span class="quote">&gt; unsigned long start,</span>
<span class="quote">&gt;  		goto out;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (!current-&gt;mm) {</span>
<span class="quote">&gt; +	if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
<span class="quote">&gt;  		leave_mm(smp_processor_id());</span>

Unless -mm changed leave_mm (I did not check), this
is not quite correct yet.

The reason is leave_mm (at least in the latest Linus
tree) ignores the cpu argument for one of its checks.

You should probably fix that in an earlier patch,
assuming you haven&#39;t already done so in -mm.

void leave_mm(int cpu)
{
        struct mm_struct *active_mm =
this_cpu_read(cpu_tlbstate.active_mm);
        if (this_cpu_read(cpu_tlbstate.state) == TLBSTATE_OK)
                BUG();
        if (cpumask_test_cpu(cpu, mm_cpumask(active_mm))) {
                cpumask_clear_cpu(cpu, mm_cpumask(active_mm));
                load_cr3(swapper_pg_dir);
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=55071">Nadav Amit</a> - May 26, 2017, 1:43 a.m.</div>
<pre class="content">
<span class="quote">&gt; On May 25, 2017, at 5:47 PM, Andy Lutomirski &lt;luto@kernel.org&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On a remote TLB flush, we leave_mm() if we&#39;re TLBSTATE_LAZY.  For a</span>
<span class="quote">&gt; local flush_tlb_mm_range(), we leave_mm() if !current-&gt;mm.  These</span>
<span class="quote">&gt; are approximately the same condition -- the scheduler sets lazy TLB</span>
<span class="quote">&gt; mode when switching to a thread with no mm.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m about to merge the local and remote flush code, but for ease of</span>
<span class="quote">&gt; verifying and bisecting the patch, I want the local and remote flush</span>
<span class="quote">&gt; behavior to match first.  This patch changes the local code to match</span>
<span class="quote">&gt; the remote code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
<span class="quote">&gt; Cc: Nadav Amit &lt;namit@vmware.com&gt;</span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Arjan van de Ven &lt;arjan@linux.intel.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; arch/x86/mm/tlb.c | 2 +-</span>
<span class="quote">&gt; 1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="quote">&gt; index 776469cc54e0..3143c9a180e5 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/tlb.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/tlb.c</span>
<span class="quote">&gt; @@ -311,7 +311,7 @@ void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,</span>
<span class="quote">&gt; 		goto out;</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	if (!current-&gt;mm) {</span>
<span class="quote">&gt; +	if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
<span class="quote">&gt; 		leave_mm(smp_processor_id());</span>

Maybe it is an overkill, but you may want to have two variants: leave_mm()
and leave_mm_irq_off(). Currently, leave_mm() does not disable IRQs, but
in patch 6 it does. Here you indeed need to disable IRQs, but the cases
in prior to this patch - you do not.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - May 26, 2017, 2:01 a.m.</div>
<pre class="content">
On Thu, May 25, 2017 at 6:39 PM, Rik van Riel &lt;riel@redhat.com&gt; wrote:
<span class="quote">&gt; On Thu, 2017-05-25 at 17:47 -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/tlb.c</span>
<span class="quote">&gt;&gt; @@ -311,7 +311,7 @@ void flush_tlb_mm_range(struct mm_struct *mm,</span>
<span class="quote">&gt;&gt; unsigned long start,</span>
<span class="quote">&gt;&gt;               goto out;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     if (!current-&gt;mm) {</span>
<span class="quote">&gt;&gt; +     if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
<span class="quote">&gt;&gt;               leave_mm(smp_processor_id());</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Unless -mm changed leave_mm (I did not check), this</span>
<span class="quote">&gt; is not quite correct yet.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The reason is leave_mm (at least in the latest Linus</span>
<span class="quote">&gt; tree) ignores the cpu argument for one of its checks.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You should probably fix that in an earlier patch,</span>
<span class="quote">&gt; assuming you haven&#39;t already done so in -mm.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; void leave_mm(int cpu)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;         struct mm_struct *active_mm =</span>
<span class="quote">&gt; this_cpu_read(cpu_tlbstate.active_mm);</span>
<span class="quote">&gt;         if (this_cpu_read(cpu_tlbstate.state) == TLBSTATE_OK)</span>
<span class="quote">&gt;                 BUG();</span>
<span class="quote">&gt;         if (cpumask_test_cpu(cpu, mm_cpumask(active_mm))) {</span>
<span class="quote">&gt;                 cpumask_clear_cpu(cpu, mm_cpumask(active_mm));</span>
<span class="quote">&gt;                 load_cr3(swapper_pg_dir);</span>

I agree it&#39;s odd, but what&#39;s the bug?  Both before and after, leave_mm
needed to be called with cpu == smp_processor_id(), and
smp_processor_id() warns if it&#39;s called in a preemptible context.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - May 26, 2017, 1:25 p.m.</div>
<pre class="content">
On Thu, 2017-05-25 at 19:01 -0700, Andy Lutomirski wrote:
<span class="quote">&gt; On Thu, May 25, 2017 at 6:39 PM, Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; wrote:</span>
<span class="quote">&gt; &gt; On Thu, 2017-05-25 at 17:47 -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; +++ b/arch/x86/mm/tlb.c</span>
<span class="quote">&gt; &gt; &gt; @@ -311,7 +311,7 @@ void flush_tlb_mm_range(struct mm_struct *mm,</span>
<span class="quote">&gt; &gt; &gt; unsigned long start,</span>
<span class="quote">&gt; &gt; &gt;               goto out;</span>
<span class="quote">&gt; &gt; &gt;       }</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; -     if (!current-&gt;mm) {</span>
<span class="quote">&gt; &gt; &gt; +     if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
<span class="quote">&gt; &gt; &gt;               leave_mm(smp_processor_id());</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Unless -mm changed leave_mm (I did not check), this</span>
<span class="quote">&gt; &gt; is not quite correct yet.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The reason is leave_mm (at least in the latest Linus</span>
<span class="quote">&gt; &gt; tree) ignores the cpu argument for one of its checks.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; You should probably fix that in an earlier patch,</span>
<span class="quote">&gt; &gt; assuming you haven&#39;t already done so in -mm.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; void leave_mm(int cpu)</span>
<span class="quote">&gt; &gt; {</span>
<span class="quote">&gt; &gt;         struct mm_struct *active_mm =</span>
<span class="quote">&gt; &gt; this_cpu_read(cpu_tlbstate.active_mm);</span>
<span class="quote">&gt; &gt;         if (this_cpu_read(cpu_tlbstate.state) == TLBSTATE_OK)</span>
<span class="quote">&gt; &gt;                 BUG();</span>
<span class="quote">&gt; &gt;         if (cpumask_test_cpu(cpu, mm_cpumask(active_mm))) {</span>
<span class="quote">&gt; &gt;                 cpumask_clear_cpu(cpu, mm_cpumask(active_mm));</span>
<span class="quote">&gt; &gt;                 load_cr3(swapper_pg_dir);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I agree it&#39;s odd, but what&#39;s the bug?  Both before and after,</span>
<span class="quote">&gt; leave_mm</span>
<span class="quote">&gt; needed to be called with cpu == smp_processor_id(), and</span>
<span class="quote">&gt; smp_processor_id() warns if it&#39;s called in a preemptible context.</span>

Indeed, you are right. Looking at too much code at once...
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 776469cc54e0..3143c9a180e5 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -311,7 +311,7 @@</span> <span class="p_context"> void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,</span>
 		goto out;
 	}
 
<span class="p_del">-	if (!current-&gt;mm) {</span>
<span class="p_add">+	if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
 		leave_mm(smp_processor_id());
 
 		/* Synchronize with switch_mm. */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



