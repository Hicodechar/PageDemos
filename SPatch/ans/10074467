
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at runtime - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at runtime</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2017, 5:24 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171124172411.19476-43-mingo@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10074467/mbox/"
   >mbox</a>
|
   <a href="/patch/10074467/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10074467/">/patch/10074467/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0A928602DC for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:26:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DFCD22A224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:26:16 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D25CA2A288; Fri, 24 Nov 2017 17:26:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2FDD32A224
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 17:26:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754168AbdKXR0N (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Nov 2017 12:26:13 -0500
Received: from mail-wr0-f196.google.com ([209.85.128.196]:45556 &quot;EHLO
	mail-wr0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754111AbdKXRZk (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Nov 2017 12:25:40 -0500
Received: by mail-wr0-f196.google.com with SMTP id a63so20933030wrc.12
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 24 Nov 2017 09:25:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=pu1kfTy1UcOj3fd74BuUpE+hqlU2dDjlLxHgqHkqk88=;
	b=e8Icf5p6vFbd/KHew94IeeGxZ24cXa0RmeM9xncN/AOOOpIm97lI1P6Sb567Vd2W95
	02FnYuwJ/wF8q2BODSrsSqQ9y0+GDCdnPR29BAB9nmAh1TogVX4CncoeScTE8vpTzAGz
	6K11+0sCLu9SQdURlFoD0fJ4Xj55qF4WsCYw0wTzEAjnphUR+jxR7pFqGOC4rG5lbyRY
	wln86LTKe9FM9vJGykzOuIM/b2KKJs5LE5SQQs76jP7qk1Tqc85KikGFrW8sg62UfZrY
	QeP2nK2TjUhOjrOgS6YgYt18Fyu3zGhlOlMV4dD9d3Yao8xqCmkJvXoee9X2N9VvrZiP
	NkUA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=pu1kfTy1UcOj3fd74BuUpE+hqlU2dDjlLxHgqHkqk88=;
	b=qVNLh1s2sb+R0z6NMueQU4T5U/jEdUQYxHGgaURGYNBLyGr1HPXSmKy7MZ0NqhI6NW
	HMmvGA70ku9CQ2ycVyaGMWSSuXAf3vUiHYVE+llCMz/w2mGdxbfbsP2YItLFlfWdnR0v
	6ShQrcf9/YBQC7UiG7whCTz6grU+vlGuO9Wis5Efd1WiBaAolbf1xVHqBdQ0Eg3QfSVz
	0oGl4k25ZNCdgY5jj3Jx+ykodajou/i1poytDYoODGZrn5lbinQ8aL+eh/wX0mh1xL0x
	19kc1CLtMELMNjMTLJD6YJVxT5zEaCEYm/baufxnDbthQlX8FedCOiDXUHLPJ67feYVW
	B9hw==
X-Gm-Message-State: AJaThX4uzV2l5ro/OjWNtLENyzIdQND1KxX9jCWmaGGSHH8tvCtE2DEn
	/fGNCf/fQPZBzKf/o6k3L7HkEA==
X-Google-Smtp-Source: AGs4zMbrNAl+aV0XnneBk4ydT13qzuwvpglP4UkP7ErIy7Zknip+Oil6lpbFz5t4A5IASm7XJIxmDA==
X-Received: by 10.223.132.101 with SMTP id 92mr24581757wrf.85.1511544338542; 
	Fri, 24 Nov 2017 09:25:38 -0800 (PST)
Received: from localhost.localdomain (2E8B0CD5.catv.pool.telekom.hu.
	[46.139.12.213]) by smtp.gmail.com with ESMTPSA id
	y145sm4603992wmd.40.2017.11.24.09.25.37
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 24 Nov 2017 09:25:37 -0800 (PST)
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at
	runtime
Date: Fri, 24 Nov 2017 18:24:10 +0100
Message-Id: &lt;20171124172411.19476-43-mingo@kernel.org&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20171124172411.19476-1-mingo@kernel.org&gt;
References: &lt;20171124172411.19476-1-mingo@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Nov. 24, 2017, 5:24 p.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

The KAISER CR3 switches are expensive for many reasons.  Not all systems
benefit from the protection provided by KAISER.  Some of them can not
pay the high performance cost.

This patch adds a debugfs file.  To disable KAISER, you do:

	echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled

and to re-enable it, you can:

	echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled

This is a *minimal* implementation.  There are certainly plenty of
optimizations that can be done on top of this by using ALTERNATIVES
among other things.

This does, however, completely remove all the KAISER-based CR3 writes.
This permits a paravirtualized system that can not tolerate CR3
writes to theoretically survive with CONFIG_KAISER=y, albeit with
/sys/kernel/debug/x86/kaiser-enabled=0.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: daniel.gruss@iaik.tugraz.at
Cc: hughd@google.com
Cc: keescook@google.com
Cc: linux-mm@kvack.org
Cc: luto@kernel.org
Cc: michael.schwarz@iaik.tugraz.at
Cc: moritz.lipp@iaik.tugraz.at
Cc: richard.fellner@student.tugraz.at
Link: https://lkml.kernel.org/r/20171123003523.28FFBAB6@viggo.jf.intel.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/entry/calling.h | 12 +++++++++
 arch/x86/mm/kaiser.c     | 70 +++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 78 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 25, 2017, 7:18 p.m.</div>
<pre class="content">
On Fri, 24 Nov 2017, Ingo Molnar wrote:
<span class="quote">
&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The KAISER CR3 switches are expensive for many reasons.  Not all systems</span>
<span class="quote">&gt; benefit from the protection provided by KAISER.  Some of them can not</span>
<span class="quote">&gt; pay the high performance cost.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch adds a debugfs file.  To disable KAISER, you do:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; and to re-enable it, you can:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is a *minimal* implementation.  There are certainly plenty of</span>
<span class="quote">&gt; optimizations that can be done on top of this by using ALTERNATIVES</span>
<span class="quote">&gt; among other things.</span>

It&#39;s not only minimal. It&#39;s naive and broken. That thing explodes when
toggled in the wrong moment. I did not even attempt to debug that, because
I think the approach is wrong.

If you really want to make it runtime switchable, then:

 - the shadow tables need to be updated unconditionally. I did not check
   whether thats done right now, but explosions are simpler to achieve when
   switching it back on. Though switching it off crashes as well.

 - you need to make sure that no task is in user space or on the way to it.
   The much I hate stop_machine(), that&#39;s probably the right tool.
   Once everything is in stomp_machine() the switch can be flipped.

 - the poisoning/unpoisoning of the kernel tables does not need to be done
   from stop_machine(). That can be done from regular context with a TIF
   flag, so you can make sure that every task is up to date before
   returning to user space. Though that needs a lot of thought.

For now I really want to see that removed entirely and replaced by a simple
boot time switch. We can use the global variable for now and optimize it
later on.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Nov. 25, 2017, 7:53 p.m.</div>
<pre class="content">
<span class="quote">&gt; On Nov 25, 2017, at 12:18 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On Fri, 24 Nov 2017, Ingo Molnar wrote:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; The KAISER CR3 switches are expensive for many reasons.  Not all systems</span>
<span class="quote">&gt;&gt; benefit from the protection provided by KAISER.  Some of them can not</span>
<span class="quote">&gt;&gt; pay the high performance cost.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; This patch adds a debugfs file.  To disable KAISER, you do:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt;    echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; and to re-enable it, you can:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt;    echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; This is a *minimal* implementation.  There are certainly plenty of</span>
<span class="quote">&gt;&gt; optimizations that can be done on top of this by using ALTERNATIVES</span>
<span class="quote">&gt;&gt; among other things.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s not only minimal. It&#39;s naive and broken. That thing explodes when</span>
<span class="quote">&gt; toggled in the wrong moment. I did not even attempt to debug that, because</span>
<span class="quote">&gt; I think the approach is wrong.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If you really want to make it runtime switchable, then:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - the shadow tables need to be updated unconditionally. I did not check</span>
<span class="quote">&gt;   whether thats done right now, but explosions are simpler to achieve when</span>
<span class="quote">&gt;   switching it back on. Though switching it off crashes as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - you need to make sure that no task is in user space or on the way to it.</span>
<span class="quote">&gt;   The much I hate stop_machine(), that&#39;s probably the right tool.</span>
<span class="quote">&gt;   Once everything is in stomp_machine() the switch can be flipped.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - the poisoning/unpoisoning of the kernel tables does not need to be done</span>
<span class="quote">&gt;   from stop_machine(). That can be done from regular context with a TIF</span>
<span class="quote">&gt;   flag, so you can make sure that every task is up to date before</span>
<span class="quote">&gt;   returning to user space. Though that needs a lot of thought.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For now I really want to see that removed entirely and replaced by a simple</span>
<span class="quote">&gt; boot time switch. We can use the global variable for now and optimize it</span>
<span class="quote">&gt; later on.</span>
<span class="quote">&gt; </span>

Nah, let&#39;s do it right: use either X86_FEATURE_WHATEVER or a static_branch.  We have nice asm support for both.

Keep in mind that, for a static_branch, actually setting the thing needs to be deferred, but that&#39;s straightforward.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 25, 2017, 8:05 p.m.</div>
<pre class="content">
On Sat, 25 Nov 2017, Andy Lutomirski wrote:
<span class="quote">&gt; &gt; On Nov 25, 2017, at 12:18 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; On Fri, 24 Nov 2017, Ingo Molnar wrote:</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; The KAISER CR3 switches are expensive for many reasons.  Not all systems</span>
<span class="quote">&gt; &gt;&gt; benefit from the protection provided by KAISER.  Some of them can not</span>
<span class="quote">&gt; &gt;&gt; pay the high performance cost.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; This patch adds a debugfs file.  To disable KAISER, you do:</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;    echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; and to re-enable it, you can:</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;    echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; This is a *minimal* implementation.  There are certainly plenty of</span>
<span class="quote">&gt; &gt;&gt; optimizations that can be done on top of this by using ALTERNATIVES</span>
<span class="quote">&gt; &gt;&gt; among other things.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; It&#39;s not only minimal. It&#39;s naive and broken. That thing explodes when</span>
<span class="quote">&gt; &gt; toggled in the wrong moment. I did not even attempt to debug that, because</span>
<span class="quote">&gt; &gt; I think the approach is wrong.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If you really want to make it runtime switchable, then:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; - the shadow tables need to be updated unconditionally. I did not check</span>
<span class="quote">&gt; &gt;   whether thats done right now, but explosions are simpler to achieve when</span>
<span class="quote">&gt; &gt;   switching it back on. Though switching it off crashes as well.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; - you need to make sure that no task is in user space or on the way to it.</span>
<span class="quote">&gt; &gt;   The much I hate stop_machine(), that&#39;s probably the right tool.</span>
<span class="quote">&gt; &gt;   Once everything is in stomp_machine() the switch can be flipped.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; - the poisoning/unpoisoning of the kernel tables does not need to be done</span>
<span class="quote">&gt; &gt;   from stop_machine(). That can be done from regular context with a TIF</span>
<span class="quote">&gt; &gt;   flag, so you can make sure that every task is up to date before</span>
<span class="quote">&gt; &gt;   returning to user space. Though that needs a lot of thought.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; For now I really want to see that removed entirely and replaced by a simple</span>
<span class="quote">&gt; &gt; boot time switch. We can use the global variable for now and optimize it</span>
<span class="quote">&gt; &gt; later on.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Nah, let&#39;s do it right: use either X86_FEATURE_WHATEVER or a</span>
<span class="quote">&gt; static_branch.  We have nice asm support for both.</span>

Agreed.
<span class="quote">
&gt; Keep in mind that, for a static_branch, actually setting the thing needs</span>
<span class="quote">&gt; to be deferred, but that&#39;s straightforward.</span>

That&#39;s not an issue during boot. That would be an issue for a run time
switch.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Nov. 25, 2017, 10:10 p.m.</div>
<pre class="content">
<span class="quote">&gt; On Nov 25, 2017, at 1:05 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Nov 25, 2017, at 12:18 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Fri, 24 Nov 2017, Ingo Molnar wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; The KAISER CR3 switches are expensive for many reasons.  Not all systems</span>
<span class="quote">&gt;&gt;&gt;&gt; benefit from the protection provided by KAISER.  Some of them can not</span>
<span class="quote">&gt;&gt;&gt;&gt; pay the high performance cost.</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; This patch adds a debugfs file.  To disable KAISER, you do:</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;   echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; and to re-enable it, you can:</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;   echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; This is a *minimal* implementation.  There are certainly plenty of</span>
<span class="quote">&gt;&gt;&gt;&gt; optimizations that can be done on top of this by using ALTERNATIVES</span>
<span class="quote">&gt;&gt;&gt;&gt; among other things.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; It&#39;s not only minimal. It&#39;s naive and broken. That thing explodes when</span>
<span class="quote">&gt;&gt;&gt; toggled in the wrong moment. I did not even attempt to debug that, because</span>
<span class="quote">&gt;&gt;&gt; I think the approach is wrong.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; If you really want to make it runtime switchable, then:</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; - the shadow tables need to be updated unconditionally. I did not check</span>
<span class="quote">&gt;&gt;&gt;  whether thats done right now, but explosions are simpler to achieve when</span>
<span class="quote">&gt;&gt;&gt;  switching it back on. Though switching it off crashes as well.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; - you need to make sure that no task is in user space or on the way to it.</span>
<span class="quote">&gt;&gt;&gt;  The much I hate stop_machine(), that&#39;s probably the right tool.</span>
<span class="quote">&gt;&gt;&gt;  Once everything is in stomp_machine() the switch can be flipped.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; - the poisoning/unpoisoning of the kernel tables does not need to be done</span>
<span class="quote">&gt;&gt;&gt;  from stop_machine(). That can be done from regular context with a TIF</span>
<span class="quote">&gt;&gt;&gt;  flag, so you can make sure that every task is up to date before</span>
<span class="quote">&gt;&gt;&gt;  returning to user space. Though that needs a lot of thought.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; For now I really want to see that removed entirely and replaced by a simple</span>
<span class="quote">&gt;&gt;&gt; boot time switch. We can use the global variable for now and optimize it</span>
<span class="quote">&gt;&gt;&gt; later on.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Nah, let&#39;s do it right: use either X86_FEATURE_WHATEVER or a</span>
<span class="quote">&gt;&gt; static_branch.  We have nice asm support for both.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Agreed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; Keep in mind that, for a static_branch, actually setting the thing needs</span>
<span class="quote">&gt;&gt; to be deferred, but that&#39;s straightforward.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s not an issue during boot. That would be an issue for a run time</span>
<span class="quote">&gt; switch.</span>

What I mean is: if you modify a static_branch too early, it blows up terribly.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 25, 2017, 10:48 p.m.</div>
<pre class="content">
On Sat, 25 Nov 2017, Andy Lutomirski wrote:
<span class="quote">&gt; &gt; On Nov 25, 2017, at 1:05 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; &gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt;&gt; Keep in mind that, for a static_branch, actually setting the thing needs</span>
<span class="quote">&gt; &gt;&gt; to be deferred, but that&#39;s straightforward.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; That&#39;s not an issue during boot. That would be an issue for a run time</span>
<span class="quote">&gt; &gt; switch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What I mean is: if you modify a static_branch too early, it blows up terribly.</span>

I&#39;m aware of that. We can&#39;t switch it in the early boot stage. But that
does not matter as we can switch way before we reach user space.

The early kaiser mappings are fine whether we use them later or not. At the
point in boot where we actually make the decision, there is nothing more
than the extra 4k shadow which got initialized.

If we ever want to do runtime switching, then the full shadow mapping needs
to be maintained even while kaiser is disabled, just the NX poisoning of
the user space mappings is what makes the difference.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 26, 2017, 12:21 a.m.</div>
<pre class="content">
On Sat, Nov 25, 2017 at 2:48 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:
<span class="quote">&gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; &gt; On Nov 25, 2017, at 1:05 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt; Keep in mind that, for a static_branch, actually setting the thing needs</span>
<span class="quote">&gt;&gt; &gt;&gt; to be deferred, but that&#39;s straightforward.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; That&#39;s not an issue during boot. That would be an issue for a run time</span>
<span class="quote">&gt;&gt; &gt; switch.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; What I mean is: if you modify a static_branch too early, it blows up terribly.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;m aware of that. We can&#39;t switch it in the early boot stage. But that</span>
<span class="quote">&gt; does not matter as we can switch way before we reach user space.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The early kaiser mappings are fine whether we use them later or not. At the</span>
<span class="quote">&gt; point in boot where we actually make the decision, there is nothing more</span>
<span class="quote">&gt; than the extra 4k shadow which got initialized.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; If we ever want to do runtime switching, then the full shadow mapping needs</span>
<span class="quote">&gt; to be maintained even while kaiser is disabled, just the NX poisoning of</span>
<span class="quote">&gt; the user space mappings is what makes the difference.</span>

One unfortunate thing is that, if we boot with kaiser off and don&#39;t
intend to ever switch it on at runtime, we could avoid the 8k pgd
allocations.  But if we want to be able to enable kaiser, we need the
8k mappings.  My inclination is to not try for runtime control until
some distro asks for it.

In general, I think that trying to runtime switch without stop_machine
is a bit nuts, and getting it to be reliable even with stop_machine is
gross.  Not to mention that stop_machine is currently incompatible
with writing to static branches, although that&#39;s fixable.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 26, 2017, 8:11 a.m.</div>
<pre class="content">
On Sat, 25 Nov 2017, Andy Lutomirski wrote:
<span class="quote">&gt; On Sat, Nov 25, 2017 at 2:48 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; &gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; On Nov 25, 2017, at 1:05 PM, Thomas Gleixner &lt;tglx@linutronix.de&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; On Sat, 25 Nov 2017, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; Keep in mind that, for a static_branch, actually setting the thing needs</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; to be deferred, but that&#39;s straightforward.</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; That&#39;s not an issue during boot. That would be an issue for a run time</span>
<span class="quote">&gt; &gt;&gt; &gt; switch.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; What I mean is: if you modify a static_branch too early, it blows up terribly.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I&#39;m aware of that. We can&#39;t switch it in the early boot stage. But that</span>
<span class="quote">&gt; &gt; does not matter as we can switch way before we reach user space.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; The early kaiser mappings are fine whether we use them later or not. At the</span>
<span class="quote">&gt; &gt; point in boot where we actually make the decision, there is nothing more</span>
<span class="quote">&gt; &gt; than the extra 4k shadow which got initialized.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; If we ever want to do runtime switching, then the full shadow mapping needs</span>
<span class="quote">&gt; &gt; to be maintained even while kaiser is disabled, just the NX poisoning of</span>
<span class="quote">&gt; &gt; the user space mappings is what makes the difference.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; One unfortunate thing is that, if we boot with kaiser off and don&#39;t</span>
<span class="quote">&gt; intend to ever switch it on at runtime, we could avoid the 8k pgd</span>
<span class="quote">&gt; allocations.  But if we want to be able to enable kaiser, we need the</span>
<span class="quote">&gt; 8k mappings.  My inclination is to not try for runtime control until</span>
<span class="quote">&gt; some distro asks for it.</span>

I completely agree. boot time is good enough. We should start with the 8k
allocations for simplicity reasons and when that works have a patch on top
which switches is back to 4k.
<span class="quote">
&gt; In general, I think that trying to runtime switch without stop_machine</span>
<span class="quote">&gt; is a bit nuts, and getting it to be reliable even with stop_machine is</span>
<span class="quote">&gt; gross.  Not to mention that stop_machine is currently incompatible</span>
<span class="quote">&gt; with writing to static branches, although that&#39;s fixable.</span>

Yes, it&#39;s doable, but surely not trivial and I&#39;d like to avoid the mess it
creates.

Thanks,

	tglx
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h</span>
<span class="p_header">index 66af80514197..89ccf7ae0e23 100644</span>
<span class="p_header">--- a/arch/x86/entry/calling.h</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h</span>
<span class="p_chunk">@@ -209,19 +209,29 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 	orq     $(KAISER_SWITCH_MASK), \reg
 .endm
 
<span class="p_add">+.macro JUMP_IF_KAISER_OFF	label</span>
<span class="p_add">+	testq   $1, kaiser_asm_do_switch</span>
<span class="p_add">+	jz      \label</span>
<span class="p_add">+.endm</span>
<span class="p_add">+</span>
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_KERNEL_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SWITCH_TO_USER_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_USER_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg:req save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	movq	%cr3, %r\scratch_reg
 	movq	%r\scratch_reg, \save_reg
 	/*
<span class="p_chunk">@@ -244,11 +254,13 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro RESTORE_CR3 save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	/*
 	 * The CR3 write could be avoided when not changing its value,
 	 * but would require a CR3 read *and* a scratch register.
 	 */
 	movq	\save_reg, %cr3
<span class="p_add">+.Ldone_\@:</span>
 .endm
 
 #else /* CONFIG_KAISER=n: */
<span class="p_header">diff --git a/arch/x86/mm/kaiser.c b/arch/x86/mm/kaiser.c</span>
<span class="p_header">index 06966b111280..1eb27b410556 100644</span>
<span class="p_header">--- a/arch/x86/mm/kaiser.c</span>
<span class="p_header">+++ b/arch/x86/mm/kaiser.c</span>
<span class="p_chunk">@@ -43,6 +43,9 @@</span> <span class="p_context"></span>
 
 #define KAISER_WALK_ATOMIC  0x1
 
<span class="p_add">+__aligned(PAGE_SIZE)</span>
<span class="p_add">+unsigned long kaiser_asm_do_switch[PAGE_SIZE/sizeof(unsigned long)] = { 1 };</span>
<span class="p_add">+</span>
 /*
  * At runtime, the only things we map are some things for CPU
  * hotplug, and stacks for new processes.  No two CPUs will ever
<span class="p_chunk">@@ -395,6 +398,9 @@</span> <span class="p_context"> void __init kaiser_init(void)</span>
 
 	kaiser_init_all_pgds();
 
<span class="p_add">+	kaiser_add_user_map_early(&amp;kaiser_asm_do_switch, PAGE_SIZE,</span>
<span class="p_add">+				  __PAGE_KERNEL | _PAGE_GLOBAL);</span>
<span class="p_add">+</span>
 	for_each_possible_cpu(cpu) {
 		void *percpu_vaddr = __per_cpu_user_mapped_start +
 				     per_cpu_offset(cpu);
<span class="p_chunk">@@ -483,6 +489,56 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_read_file(struct file *file, char __user *user_buf</span>
 	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
 }
 
<span class="p_add">+enum poison {</span>
<span class="p_add">+	KAISER_POISON,</span>
<span class="p_add">+	KAISER_UNPOISON</span>
<span class="p_add">+};</span>
<span class="p_add">+void kaiser_poison_pgds(enum poison do_poison);</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_disable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Make sure the kernel PGDs are usable by userspace: */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_UNPOISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure all the CPUs have the poison clear in their TLBs.</span>
<span class="p_add">+	 * This also functions as a barrier to ensure that everyone</span>
<span class="p_add">+	 * sees the unpoisoned PGDs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Tell the assembly code to stop switching CR3. */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure everybody does an interrupt.  This means that</span>
<span class="p_add">+	 * they have gone through a SWITCH_TO_KERNEL_CR3 amd are no</span>
<span class="p_add">+	 * longer running on the userspace CR3.  If we did not do</span>
<span class="p_add">+	 * this, we might have CPUs running on the shadow page tables</span>
<span class="p_add">+	 * that then enter the kernel and think they do *not* need to</span>
<span class="p_add">+	 * switch.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_enable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Tell the assembly code to start switching CR3: */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure everyone can see the kaiser_asm_do_switch update: */</span>
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Now that userspace is no longer using the kernel copy of</span>
<span class="p_add">+	 * the page tables, we can poison it:</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_POISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure all the CPUs see the poison: */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static ssize_t kaiser_enabled_write_file(struct file *file,
 		 const char __user *user_buf, size_t count, loff_t *ppos)
 {
<span class="p_chunk">@@ -504,7 +560,17 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_write_file(struct file *file,</span>
 	if (kaiser_enabled == enable)
 		return count;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This tells the page table code to stop poisoning PGDs</span>
<span class="p_add">+	 */</span>
 	WRITE_ONCE(kaiser_enabled, enable);
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (enable)</span>
<span class="p_add">+		kaiser_do_enable();</span>
<span class="p_add">+	else</span>
<span class="p_add">+		kaiser_do_disable();</span>
<span class="p_add">+</span>
 	return count;
 }
 
<span class="p_chunk">@@ -522,10 +588,6 @@</span> <span class="p_context"> static int __init create_kaiser_enabled(void)</span>
 }
 late_initcall(create_kaiser_enabled);
 
<span class="p_del">-enum poison {</span>
<span class="p_del">-	KAISER_POISON,</span>
<span class="p_del">-	KAISER_UNPOISON</span>
<span class="p_del">-};</span>
 void kaiser_poison_pgd_page(pgd_t *pgd_page, enum poison do_poison)
 {
 	int i = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



