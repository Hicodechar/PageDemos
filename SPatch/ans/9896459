
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm,fork: introduce MADV_WIPEONFORK - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm,fork: introduce MADV_WIPEONFORK</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=181">Rik van Riel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 11, 2017, 7:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170811191942.17487-3-riel@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9896459/mbox/"
   >mbox</a>
|
   <a href="/patch/9896459/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9896459/">/patch/9896459/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0077460351 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Aug 2017 19:20:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E6D8028CC0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Aug 2017 19:20:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DBB7A28CC1; Fri, 11 Aug 2017 19:20:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5E3F28CC8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Aug 2017 19:20:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753770AbdHKTUP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 11 Aug 2017 15:20:15 -0400
Received: from mx1.redhat.com ([209.132.183.28]:37762 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753533AbdHKTTw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 11 Aug 2017 15:19:52 -0400
Received: from smtp.corp.redhat.com
	(int-mx04.intmail.prod.int.phx2.redhat.com [10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id CEA676623E;
	Fri, 11 Aug 2017 19:19:51 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com CEA676623E
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=riel@redhat.com
Received: from shelob.surriel.com (ovpn-125-128.rdu2.redhat.com
	[10.10.125.128])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id B243A5D9C7;
	Fri, 11 Aug 2017 19:19:50 +0000 (UTC)
Received: from [2001:470:1f07:12aa:224:e8ff:fe38:995c]
	(helo=annuminas.surriel.com)
	by shelob.surriel.com with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.63) (envelope-from &lt;riel@redhat.com&gt;)
	id 1dgFTJ-00084x-Q6; Fri, 11 Aug 2017 15:19:49 -0400
Received: from annuminas.surriel.com (localhost.localdomain [127.0.0.1])
	by annuminas.surriel.com (8.15.2/8.14.5) with ESMTP id v7BJJnkC017919;
	Fri, 11 Aug 2017 15:19:49 -0400
Received: (from riel@localhost)
	by annuminas.surriel.com (8.15.2/8.15.2/Submit) id v7BJJnHU017918;
	Fri, 11 Aug 2017 15:19:49 -0400
X-Authentication-Warning: annuminas.surriel.com: riel set sender to
	riel@redhat.com using -f
From: riel@redhat.com
To: linux-kernel@vger.kernel.org
Cc: mhocko@kernel.org, mike.kravetz@oracle.com, linux-mm@kvack.org,
	fweimer@redhat.com, colm@allcosts.net, akpm@linux-foundation.org,
	keescook@chromium.org, luto@amacapital.net, wad@chromium.org,
	mingo@kernel.org, kirill@shutemov.name, dave.hansen@intel.com,
	linux-api@vger.kernel.org, torvalds@linux-foundation.org,
	willy@infradead.org
Subject: [PATCH 2/2] mm,fork: introduce MADV_WIPEONFORK
Date: Fri, 11 Aug 2017 15:19:42 -0400
Message-Id: &lt;20170811191942.17487-3-riel@redhat.com&gt;
In-Reply-To: &lt;20170811191942.17487-1-riel@redhat.com&gt;
References: &lt;20170811191942.17487-1-riel@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Fri, 11 Aug 2017 19:19:52 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Aug. 11, 2017, 7:19 p.m.</div>
<pre class="content">
<span class="from">From: Rik van Riel &lt;riel@redhat.com&gt;</span>

Introduce MADV_WIPEONFORK semantics, which result in a VMA being
empty in the child process after fork. This differs from MADV_DONTFORK
in one important way.

If a child process accesses memory that was MADV_WIPEONFORK, it
will get zeroes. The address ranges are still valid, they are just empty.

If a child process accesses memory that was MADV_DONTFORK, it will
get a segmentation fault, since those address ranges are no longer
valid in the child after fork.

Since MADV_DONTFORK also seems to be used to allow very large
programs to fork in systems with strict memory overcommit restrictions,
changing the semantics of MADV_DONTFORK might break existing programs.

MADV_WIPEONFORK only works on private, anonymous VMAs.

The use case is libraries that store or cache information, and
want to know that they need to regenerate it in the child process
after fork.

Examples of this would be:
- systemd/pulseaudio API checks (fail after fork)
  (replacing a getpid check, which is too slow without a PID cache)
- PKCS#11 API reinitialization check (mandated by specification)
- glibc&#39;s upcoming PRNG (reseed after fork)
- OpenSSL PRNG (reseed after fork)

The security benefits of a forking server having a re-inialized
PRNG in every child process are pretty obvious. However, due to
libraries having all kinds of internal state, and programs getting
compiled with many different versions of each library, it is
unreasonable to expect calling programs to re-initialize everything
manually after fork.

A further complication is the proliferation of clone flags,
programs bypassing glibc&#39;s functions to call clone directly,
and programs calling unshare, causing the glibc pthread_atfork
hook to not get called.

It would be better to have the kernel take care of this automatically.

This is similar to the OpenBSD minherit syscall with MAP_INHERIT_ZERO:

    https://man.openbsd.org/minherit.2

Reported-by: Florian Weimer &lt;fweimer@redhat.com&gt;
Reported-by: Colm MacCÃ¡rtaigh &lt;colm@allcosts.net&gt;
<span class="signed-off-by">Signed-off-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
---
 arch/alpha/include/uapi/asm/mman.h     |  3 +++
 arch/mips/include/uapi/asm/mman.h      |  3 +++
 arch/parisc/include/uapi/asm/mman.h    |  3 +++
 arch/xtensa/include/uapi/asm/mman.h    |  3 +++
 fs/proc/task_mmu.c                     |  1 +
 include/linux/mm.h                     |  2 +-
 include/trace/events/mmflags.h         |  8 +-------
 include/uapi/asm-generic/mman-common.h |  3 +++
 kernel/fork.c                          |  1 +
 mm/madvise.c                           | 13 +++++++++++++
 mm/memory.c                            | 10 ++++++++++
 11 files changed, 42 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Aug. 11, 2017, 7:42 p.m.</div>
<pre class="content">
On Fri, Aug 11, 2017 at 12:19 PM,  &lt;riel@redhat.com&gt; wrote:
<span class="quote">&gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt; index 0e517be91a89..f9b0ad7feb57 100644</span>
<span class="quote">&gt; --- a/mm/memory.c</span>
<span class="quote">&gt; +++ b/mm/memory.c</span>
<span class="quote">&gt; @@ -1134,6 +1134,16 @@ int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;                         !vma-&gt;anon_vma)</span>
<span class="quote">&gt;                 return 0;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +       /*</span>
<span class="quote">&gt; +        * With VM_WIPEONFORK, the child inherits the VMA from the</span>
<span class="quote">&gt; +        * parent, but not its contents.</span>
<span class="quote">&gt; +        *</span>
<span class="quote">&gt; +        * A child accessing VM_WIPEONFORK memory will see all zeroes;</span>
<span class="quote">&gt; +        * a child accessing VM_DONTCOPY memory receives a segfault.</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       if (vma-&gt;vm_flags &amp; VM_WIPEONFORK)</span>
<span class="quote">&gt; +               return 0;</span>
<span class="quote">&gt; +</span>

Is this right?

Yes, you don&#39;t do the page table copies. Fine. But you leave vma with
the the anon_vma pointer - doesn&#39;t that mean that it&#39;s still connected
to the original anonvma chain, and we might end up swapping something
in?

And even if that ends up not being an issue, I&#39;d expect that you&#39;d
want to break the anon_vma chain just to not make it grow
unnecessarily.

So my gut feel is that doing this in &quot;copy_page_range()&quot; is wrong, and
the logic should be moved up to dup_mmap(), where we can also
short-circuit the anon_vma chain entirely.

No?

The madvice() interface looks fine to me.

                  Linus
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Aug. 11, 2017, 8:27 p.m.</div>
<pre class="content">
On Fri, 2017-08-11 at 12:42 -0700, Linus Torvalds wrote:
<span class="quote">&gt; On Fri, Aug 11, 2017 at 12:19 PM,Â Â &lt;riel@redhat.com&gt; wrote:</span>
<span class="quote">&gt; &gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt; &gt; index 0e517be91a89..f9b0ad7feb57 100644</span>
<span class="quote">&gt; &gt; --- a/mm/memory.c</span>
<span class="quote">&gt; &gt; +++ b/mm/memory.c</span>
<span class="quote">&gt; &gt; @@ -1134,6 +1134,16 @@ int copy_page_range(struct mm_struct</span>
<span class="quote">&gt; &gt; *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt; &gt; Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â !vma-&gt;anon_vma)</span>
<span class="quote">&gt; &gt; Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â return 0;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â /*</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â * With VM_WIPEONFORK, the child inherits the VMA from the</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â * parent, but not its contents.</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â *</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â * A child accessing VM_WIPEONFORK memory will see all</span>
<span class="quote">&gt; &gt; zeroes;</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â * a child accessing VM_DONTCOPY memory receives a</span>
<span class="quote">&gt; &gt; segfault.</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â */</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â if (vma-&gt;vm_flags &amp; VM_WIPEONFORK)</span>
<span class="quote">&gt; &gt; +Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â return 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is this right?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, you don&#39;t do the page table copies. Fine. But you leave vma with</span>
<span class="quote">&gt; the the anon_vma pointer - doesn&#39;t that mean that it&#39;s still</span>
<span class="quote">&gt; connected</span>
<span class="quote">&gt; to the original anonvma chain, and we might end up swapping something</span>
<span class="quote">&gt; in?</span>

Swapping something in would require there to be a swap entry in
the page table entries, which we are not copying, so this should
not be a correctness issue.
<span class="quote">
&gt; And even if that ends up not being an issue, I&#39;d expect that you&#39;d</span>
<span class="quote">&gt; want to break the anon_vma chain just to not make it grow</span>
<span class="quote">&gt; unnecessarily.</span>

This is a good point. I can send a v4 that skips the anon_vma_fork()
call if VM_WIPEONFORK, and calls anon_vma_prepare(), instead.
<span class="quote">
&gt; So my gut feel is that doing this in &quot;copy_page_range()&quot; is wrong,</span>
<span class="quote">&gt; and</span>
<span class="quote">&gt; the logic should be moved up to dup_mmap(), where we can also</span>
<span class="quote">&gt; short-circuit the anon_vma chain entirely.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; No?</span>

There is another test in copy_page_range already which ends up
skipping the page table copy when it should not be done.

If you want, I can move that test into a should_copy_page_range()
function, and call that from dup_mmap(), skipping the call to
copy_page_range() if should_copy_page_range() returns false.

Having only one of the two sets of tests in dup_mmap(), and
the other in copy_page_range() seems wrong.

Just let me know what you prefer, and I&#39;ll put that in v4.
<span class="quote">
&gt; The madvice() interface looks fine to me.</span>

That was the main reason for adding you to the thread :)

kind regards,

Rik
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Aug. 11, 2017, 8:50 p.m.</div>
<pre class="content">
On Fri, Aug 11, 2017 at 1:27 PM, Rik van Riel &lt;riel@redhat.com&gt; wrote:
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Yes, you don&#39;t do the page table copies. Fine. But you leave vma with</span>
<span class="quote">&gt;&gt; the the anon_vma pointer - doesn&#39;t that mean that it&#39;s still</span>
<span class="quote">&gt;&gt; connected</span>
<span class="quote">&gt;&gt; to the original anonvma chain, and we might end up swapping something</span>
<span class="quote">&gt;&gt; in?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Swapping something in would require there to be a swap entry in</span>
<span class="quote">&gt; the page table entries, which we are not copying, so this should</span>
<span class="quote">&gt; not be a correctness issue.</span>

Yeah, I thought the rmap code just used the offset from the start to
avoid even doing swap entries, but I guess we don&#39;t actually ever
populate the page tables without the swap entry being there.
<span class="quote">
&gt; There is another test in copy_page_range already which ends up</span>
<span class="quote">&gt; skipping the page table copy when it should not be done.</span>

Well, the VM_DONTCOPY test is in dup_mmap(), and I think I&#39;d rather
match up the VM_WIPEONFORK logic with VM_DONTCOPY than with the
copy_page_range() tests.

Because I assume you are talking about the &quot;if it&#39;s a shared mapping,
we don&#39;t need to copy the page tables and can just do it at page fault
time instead&quot; part? That&#39;s a rather different thing, which isn&#39;t so
much about semantics, as about just a trade-off about when to touch
the page tables.

But yes, that one *might* make sense in dup_mmap() too. I just don&#39;t
think it&#39;s really analogous to the WIPEONFORK and DONTCOPY tests.

                      Linus
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/alpha/include/uapi/asm/mman.h b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">index 02760f6e6ca4..2a708a792882 100644</span>
<span class="p_header">--- a/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -64,6 +64,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/arch/mips/include/uapi/asm/mman.h b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">index 655e2fb5395b..d59c57d60d7d 100644</span>
<span class="p_header">--- a/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -91,6 +91,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/arch/parisc/include/uapi/asm/mman.h b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">index 5979745815a5..e205e0179642 100644</span>
<span class="p_header">--- a/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -60,6 +60,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	70		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 71		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 72		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 #define MAP_VARIABLE	0
<span class="p_header">diff --git a/arch/xtensa/include/uapi/asm/mman.h b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">index 24365b30aae9..ed23e0a1b30d 100644</span>
<span class="p_header">--- a/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -103,6 +103,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index b836fd61ed87..2591e70216ff 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -651,6 +651,7 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
 		[ilog2(VM_NORESERVE)]	= &quot;nr&quot;,
 		[ilog2(VM_HUGETLB)]	= &quot;ht&quot;,
 		[ilog2(VM_ARCH_1)]	= &quot;ar&quot;,
<span class="p_add">+		[ilog2(VM_WIPEONFORK)]	= &quot;wf&quot;,</span>
 		[ilog2(VM_DONTDUMP)]	= &quot;dd&quot;,
 #ifdef CONFIG_MEM_SOFT_DIRTY
 		[ilog2(VM_SOFTDIRTY)]	= &quot;sd&quot;,
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 7550eeb06ccf..58788c1b9e9d 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -189,7 +189,7 @@</span> <span class="p_context"> extern unsigned int kobjsize(const void *objp);</span>
 #define VM_NORESERVE	0x00200000	/* should the VM suppress accounting */
 #define VM_HUGETLB	0x00400000	/* Huge TLB Page VM */
 #define VM_ARCH_1	0x01000000	/* Architecture-specific flag */
<span class="p_del">-#define VM_ARCH_2	0x02000000</span>
<span class="p_add">+#define VM_WIPEONFORK	0x02000000	/* Wipe VMA contents in child. */</span>
 #define VM_DONTDUMP	0x04000000	/* Do not include in the core dump */
 
 #ifdef CONFIG_MEM_SOFT_DIRTY
<span class="p_header">diff --git a/include/trace/events/mmflags.h b/include/trace/events/mmflags.h</span>
<span class="p_header">index 8e50d01c645f..4c2e4737d7bc 100644</span>
<span class="p_header">--- a/include/trace/events/mmflags.h</span>
<span class="p_header">+++ b/include/trace/events/mmflags.h</span>
<span class="p_chunk">@@ -125,12 +125,6 @@</span> <span class="p_context"> IF_HAVE_PG_IDLE(PG_idle,		&quot;idle&quot;		)</span>
 #define __VM_ARCH_SPECIFIC_1 {VM_ARCH_1,	&quot;arch_1&quot;	}
 #endif
 
<span class="p_del">-#if defined(CONFIG_X86)</span>
<span class="p_del">-#define __VM_ARCH_SPECIFIC_2 {VM_MPX,		&quot;mpx&quot;		}</span>
<span class="p_del">-#else</span>
<span class="p_del">-#define __VM_ARCH_SPECIFIC_2 {VM_ARCH_2,	&quot;arch_2&quot;	}</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 #ifdef CONFIG_MEM_SOFT_DIRTY
 #define IF_HAVE_VM_SOFTDIRTY(flag,name) {flag, name },
 #else
<span class="p_chunk">@@ -162,7 +156,7 @@</span> <span class="p_context"> IF_HAVE_PG_IDLE(PG_idle,		&quot;idle&quot;		)</span>
 	{VM_NORESERVE,			&quot;noreserve&quot;	},		\
 	{VM_HUGETLB,			&quot;hugetlb&quot;	},		\
 	__VM_ARCH_SPECIFIC_1				,		\
<span class="p_del">-	__VM_ARCH_SPECIFIC_2				,		\</span>
<span class="p_add">+	{VM_WIPEONFORK,			&quot;wipeonfork&quot;	},		\</span>
 	{VM_DONTDUMP,			&quot;dontdump&quot;	},		\
 IF_HAVE_VM_SOFTDIRTY(VM_SOFTDIRTY,	&quot;softdirty&quot;	)		\
 	{VM_MIXEDMAP,			&quot;mixedmap&quot;	},		\
<span class="p_header">diff --git a/include/uapi/asm-generic/mman-common.h b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">index 8c27db0c5c08..49e2b1d78093 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_chunk">@@ -58,6 +58,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_DONTDUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 17921b0390b4..74be75373ee6 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -659,6 +659,7 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 		tmp-&gt;vm_flags &amp;= ~(VM_LOCKED | VM_LOCKONFAULT);
 		tmp-&gt;vm_next = tmp-&gt;vm_prev = NULL;
 		file = tmp-&gt;vm_file;
<span class="p_add">+</span>
 		if (file) {
 			struct inode *inode = file_inode(file);
 			struct address_space *mapping = file-&gt;f_mapping;
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 9976852f1e1c..9b82cfa88ccf 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -80,6 +80,17 @@</span> <span class="p_context"> static long madvise_behavior(struct vm_area_struct *vma,</span>
 		}
 		new_flags &amp;= ~VM_DONTCOPY;
 		break;
<span class="p_add">+	case MADV_WIPEONFORK:</span>
<span class="p_add">+		/* MADV_WIPEONFORK is only supported on anonymous memory. */</span>
<span class="p_add">+		if (vma-&gt;vm_file || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="p_add">+			error = -EINVAL;</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		new_flags |= VM_WIPEONFORK;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case MADV_KEEPONFORK:</span>
<span class="p_add">+		new_flags &amp;= ~VM_WIPEONFORK;</span>
<span class="p_add">+		break;</span>
 	case MADV_DONTDUMP:
 		new_flags |= VM_DONTDUMP;
 		break;
<span class="p_chunk">@@ -689,6 +700,8 @@</span> <span class="p_context"> madvise_behavior_valid(int behavior)</span>
 #endif
 	case MADV_DONTDUMP:
 	case MADV_DODUMP:
<span class="p_add">+	case MADV_WIPEONFORK:</span>
<span class="p_add">+	case MADV_KEEPONFORK:</span>
 #ifdef CONFIG_MEMORY_FAILURE
 	case MADV_SOFT_OFFLINE:
 	case MADV_HWPOISON:
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 0e517be91a89..f9b0ad7feb57 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1134,6 +1134,16 @@</span> <span class="p_context"> int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 			!vma-&gt;anon_vma)
 		return 0;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * With VM_WIPEONFORK, the child inherits the VMA from the</span>
<span class="p_add">+	 * parent, but not its contents.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * A child accessing VM_WIPEONFORK memory will see all zeroes;</span>
<span class="p_add">+	 * a child accessing VM_DONTCOPY memory receives a segfault.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_WIPEONFORK)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
 	if (is_vm_hugetlb_page(vma))
 		return copy_hugetlb_page_range(dst_mm, src_mm, vma);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



