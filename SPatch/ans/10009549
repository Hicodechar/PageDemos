
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v6,14/17] x86: Add support for changing memory encryption attribute in early boot - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v6,14/17] x86: Add support for changing memory encryption attribute in early boot</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 16, 2017, 6:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171016182008.ft5lsfwx6scgquty@pd.tnic&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10009549/mbox/"
   >mbox</a>
|
   <a href="/patch/10009549/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10009549/">/patch/10009549/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B2540601D5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 18:20:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A619C286B8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 18:20:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A43AE285D9; Mon, 16 Oct 2017 18:20:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 81E96286CF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 18:20:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756649AbdJPSUX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Oct 2017 14:20:23 -0400
Received: from mail.skyhub.de ([5.9.137.197]:34370 &quot;EHLO mail.skyhub.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1755003AbdJPSUV (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Oct 2017 14:20:21 -0400
X-Virus-Scanned: Nedap ESD1 at mail.skyhub.de
Received: from mail.skyhub.de ([127.0.0.1])
	by localhost (blast.alien8.de [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id w5z6uvbk3lfb; Mon, 16 Oct 2017 20:20:20 +0200 (CEST)
Received: from pd.tnic (p2003008C2F23A000A843DA5E8027BE35.dip0.t-ipconnect.de
	[IPv6:2003:8c:2f23:a000:a843:da5e:8027:be35])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id
	C56E21EC0116; Mon, 16 Oct 2017 20:20:19 +0200 (CEST)
Date: Mon, 16 Oct 2017 20:20:08 +0200
From: Borislav Petkov &lt;bp@alien8.de&gt;
To: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Cc: x86@kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	linux-kernel@vger.kernel.org, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: Re: [Part1 PATCH v6 14/17] x86: Add support for changing memory
	encryption attribute in early boot
Message-ID: &lt;20171016182008.ft5lsfwx6scgquty@pd.tnic&gt;
References: &lt;20171016153423.2980-1-brijesh.singh@amd.com&gt;
	&lt;20171016153423.2980-15-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: &lt;20171016153423.2980-15-brijesh.singh@amd.com&gt;
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Oct. 16, 2017, 6:20 p.m.</div>
<pre class="content">
On Mon, Oct 16, 2017 at 10:34:20AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; Some KVM-specific custom MSRs share the guest physical address with the</span>
<span class="quote">&gt; hypervisor in early boot. When SEV is active, the shared physical address</span>
<span class="quote">&gt; must be mapped with memory encryption attribute cleared so that both</span>
<span class="quote">&gt; hypervisor and guest can access the data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add APIs to change the memory encryption attribute in early boot code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes since v5:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; early_set_memory_enc_dec() is enhanced to perform encrypt/decrypt and change</span>
<span class="quote">&gt; the C bit in one go. The changes shields the caller from having to check</span>
<span class="quote">&gt; the C bit status before changing it and also shield the OS from converting a</span>
<span class="quote">&gt; page blindly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Boris,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I removed your R-b since I was not sure if you are okay with the above changes.</span>
<span class="quote">&gt; please let me know if you are okay with the changes. thanks</span>

Looks ok, you can readd it, here are only minor comment corrections.
Just send v6.1 as a reply to this message.

Thx.

---
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index b671e91e6a1f..53d11b4d74b7 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -291,7 +291,7 @@</span> <span class="p_context"> static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)</span>
 	else
 		pgprot_val(new_prot) &amp;= ~_PAGE_ENC;
 
<span class="p_del">-	/* if prot is same then do nothing */</span>
<span class="p_add">+	/* If prot is same then do nothing. */</span>
 	if (pgprot_val(old_prot) == pgprot_val(new_prot))
 		return;
 
<span class="p_chunk">@@ -299,19 +299,19 @@</span> <span class="p_context"> static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)</span>
 	size = page_level_size(level);
 
 	/*
<span class="p_del">-	 * We are going to perform in-place encrypt/decrypt and change the</span>
<span class="p_add">+	 * We are going to perform in-place en-/decryption and change the</span>
 	 * physical page attribute from C=1 to C=0 or vice versa. Flush the
<span class="p_del">-	 * caches to ensure that data gets accessed with correct C-bit.</span>
<span class="p_add">+	 * caches to ensure that data gets accessed with the correct C-bit.</span>
 	 */
 	clflush_cache_range(__va(pa), size);
 
<span class="p_del">-	/* encrypt/decrypt the contents in-place */</span>
<span class="p_add">+	/* Encrypt/decrypt the contents in-place */</span>
 	if (enc)
 		sme_early_encrypt(pa, size);
 	else
 		sme_early_decrypt(pa, size);
 
<span class="p_del">-	/* change the page encryption mask */</span>
<span class="p_add">+	/* Change the page encryption mask. */</span>
 	new_pte = pfn_pte(pfn, new_prot);
 	set_pte_atomic(kpte, new_pte);
 }
<span class="p_chunk">@@ -322,8 +322,8 @@</span> <span class="p_context"> static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
 	unsigned long vaddr, vaddr_end, vaddr_next;
 	unsigned long psize, pmask;
 	int split_page_size_mask;
<span class="p_del">-	pte_t *kpte;</span>
 	int level, ret;
<span class="p_add">+	pte_t *kpte;</span>
 
 	vaddr = (unsigned long)__va(paddr);
 	vaddr_next = vaddr;
<span class="p_chunk">@@ -346,24 +346,23 @@</span> <span class="p_context"> static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
 		pmask = page_level_mask(level);
 
 		/*
<span class="p_del">-		 * Check, whether we can change the large page in one go.</span>
<span class="p_del">-		 * We request a split, when the address is not aligned and</span>
<span class="p_add">+		 * Check whether we can change the large page in one go.</span>
<span class="p_add">+		 * We request a split when the address is not aligned and</span>
 		 * the number of pages to set/clear encryption bit is smaller
 		 * than the number of pages in the large page.
 		 */
 		if (vaddr == (vaddr &amp; pmask) &amp;&amp;
<span class="p_del">-			((vaddr_end - vaddr) &gt;= psize)) {</span>
<span class="p_add">+		    ((vaddr_end - vaddr) &gt;= psize)) {</span>
 			__set_clr_pte_enc(kpte, level, enc);
 			vaddr_next = (vaddr &amp; pmask) + psize;
 			continue;
 		}
 
 		/*
<span class="p_del">-		 * virtual address is part of large page, create the page table</span>
<span class="p_del">-		 * mapping to use smaller pages (4K or 2M). If virtual address</span>
<span class="p_del">-		 * is part of 2M page the we request spliting the large page</span>
<span class="p_del">-		 * into 4K, similarly 1GB large page is requested to split into</span>
<span class="p_del">-		 * 2M pages.</span>
<span class="p_add">+		 * The virtual address is part of a larger page, create the next</span>
<span class="p_add">+		 * level page table mapping (4K or 2M). If it is part of a 2M</span>
<span class="p_add">+		 * page then we request a split of the large page into 4K</span>
<span class="p_add">+		 * chunks. A 1GB large page is split into 2M pages, resp.</span>
 		 */
 		if (level == PG_LEVEL_2M)
 			split_page_size_mask = 0;
<span class="p_chunk">@@ -376,6 +375,7 @@</span> <span class="p_context"> static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
 	}
 
 	ret = 0;
<span class="p_add">+</span>
 out:
 	__flush_tlb_all();
 	return ret;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



