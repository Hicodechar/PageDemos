
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,2/4] ARM: mm: Add LPAE support for outer shared - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,2/4] ARM: mm: Add LPAE support for outer shared</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168627">Bill Mills</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 6, 2016, 3:20 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1465183229-24147-3-git-send-email-wmills@ti.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9157129/mbox/"
   >mbox</a>
|
   <a href="/patch/9157129/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9157129/">/patch/9157129/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	28FDF60573 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 03:21:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1CFE526490
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 03:21:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 11A682793B; Mon,  6 Jun 2016 03:21:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5991026490
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 03:21:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752973AbcFFDV0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 5 Jun 2016 23:21:26 -0400
Received: from devils.ext.ti.com ([198.47.26.153]:39630 &quot;EHLO
	devils.ext.ti.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752869AbcFFDVW (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 5 Jun 2016 23:21:22 -0400
Received: from dlelxv90.itg.ti.com ([172.17.2.17])
	by devils.ext.ti.com (8.13.7/8.13.7) with ESMTP id u563KPMC026505;
	Sun, 5 Jun 2016 22:20:25 -0500
Received: from DLEE71.ent.ti.com (dlee71.ent.ti.com [157.170.170.114])
	by dlelxv90.itg.ti.com (8.14.3/8.13.8) with ESMTP id u563KZSU007090; 
	Sun, 5 Jun 2016 22:20:35 -0500
Received: from dlep32.itg.ti.com (157.170.170.100) by DLEE71.ent.ti.com
	(157.170.170.114) with Microsoft SMTP Server id 14.3.294.0;
	Sun, 5 Jun 2016 22:20:34 -0500
Received: from gtwmills-t300.dhcp.ti.com (ileax41-snat.itg.ti.com
	[10.172.224.153])	by dlep32.itg.ti.com (8.14.3/8.13.8) with ESMTP id
	u563KWqV004177;	Sun, 5 Jun 2016 22:20:34 -0500
From: Bill Mills &lt;wmills@ti.com&gt;
To: &lt;rmk+kernel@armlinux.org.uk&gt;, &lt;mark.rutland@arm.com&gt;,
	&lt;t-kristo@ti.com&gt;, &lt;ssantosh@kernel.org&gt;, &lt;catalin.marinas@arm.com&gt;
CC: &lt;linux-arm-kernel@lists.infradead.org&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, &lt;r-woodruff2@ti.com&gt;,
	Bill Mills &lt;wmills@ti.com&gt;
Subject: [RFC v2 2/4] ARM: mm: Add LPAE support for outer shared
Date: Sun, 5 Jun 2016 23:20:27 -0400
Message-ID: &lt;1465183229-24147-3-git-send-email-wmills@ti.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1465183229-24147-1-git-send-email-wmills@ti.com&gt;
References: &lt;1465183229-24147-1-git-send-email-wmills@ti.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168627">Bill Mills</a> - June 6, 2016, 3:20 a.m.</div>
<pre class="content">
Support early init selection of inner or outer shared page table
attributes.

In LPAE shared is 3 valued: non-shared, inner-shared, and outer-shared.
Provide a mask and both shared values.  Shared value in use is stored in
variables.  The old constants are eliminated to avoid accidental use.

Early page tables and variables are initialized to inner shared.

If a platform needs outer shared, it calls use_outer_shared()
during early_paging_init.  The variables and early page table are
fixed up. The mem_types built during paging_init are fixed to match
the value in effect.

No functional change for non-LPAE.  We only add a few extra aliases for
existing constants and use some extra vars at boot.

This patch is based in part on an earlier RFC patch by
    Tero Kristo &lt;t-kristo@ti.com&gt;
<span class="signed-off-by">
Signed-off-by: Bill Mills &lt;wmills@ti.com&gt;</span>
---
 arch/arm/include/asm/pgtable-2level-hwdef.h |  6 +++
 arch/arm/include/asm/pgtable-3level-hwdef.h | 14 ++++-
 arch/arm/include/asm/pgtable-3level.h       |  2 +-
 arch/arm/include/asm/pgtable-hwdef.h        |  1 +
 arch/arm/include/asm/pgtable.h              |  3 ++
 arch/arm/mm/dump.c                          | 28 ++++++++++
 arch/arm/mm/mmu.c                           | 80 +++++++++++++++++++++++------
 arch/arm/mm/proc-v7-3level.S                |  2 +-
 8 files changed, 115 insertions(+), 21 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/pgtable-2level-hwdef.h b/arch/arm/include/asm/pgtable-2level-hwdef.h</span>
<span class="p_header">index d0131ee..d62e20f 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/pgtable-2level-hwdef.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/pgtable-2level-hwdef.h</span>
<span class="p_chunk">@@ -93,4 +93,10 @@</span> <span class="p_context"></span>
 
 #define PHYS_MASK		(~0UL)
 
<span class="p_add">+/* These are here to share more code between 2level &amp; 3level */</span>
<span class="p_add">+#define L_PTE_EARLY_SHARED	PTE_EXT_SHARED</span>
<span class="p_add">+#define PTE_EXT_SMASK		PTE_EXT_SHARED</span>
<span class="p_add">+#define PMD_SECT_EARLY_S	PMD_SECT_S</span>
<span class="p_add">+#define PMD_SECT_SMASK		PMD_SECT_S</span>
<span class="p_add">+</span>
 #endif
<span class="p_header">diff --git a/arch/arm/include/asm/pgtable-3level-hwdef.h b/arch/arm/include/asm/pgtable-3level-hwdef.h</span>
<span class="p_header">index f8f1cff..3ffc0ce 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/pgtable-3level-hwdef.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/pgtable-3level-hwdef.h</span>
<span class="p_chunk">@@ -44,7 +44,9 @@</span> <span class="p_context"></span>
 #define PMD_SECT_CACHEABLE	(_AT(pmdval_t, 1) &lt;&lt; 3)
 #define PMD_SECT_USER		(_AT(pmdval_t, 1) &lt;&lt; 6)		/* AP[1] */
 #define PMD_SECT_AP2		(_AT(pmdval_t, 1) &lt;&lt; 7)		/* read only */
<span class="p_del">-#define PMD_SECT_S		(_AT(pmdval_t, 3) &lt;&lt; 8)</span>
<span class="p_add">+#define PMD_SECT_SMASK		(_AT(pmdval_t, 3) &lt;&lt; 8)		/* shareable bits */</span>
<span class="p_add">+#define PMD_SECT_ISHARED	(_AT(pmdval_t, 3) &lt;&lt; 8)		/* inner sharable */</span>
<span class="p_add">+#define PMD_SECT_OSHARED	(_AT(pmdval_t, 2) &lt;&lt; 8)		/* outer sharable */</span>
 #define PMD_SECT_AF		(_AT(pmdval_t, 1) &lt;&lt; 10)
 #define PMD_SECT_nG		(_AT(pmdval_t, 1) &lt;&lt; 11)
 #define PMD_SECT_PXN		(_AT(pmdval_t, 1) &lt;&lt; 53)
<span class="p_chunk">@@ -73,12 +75,20 @@</span> <span class="p_context"></span>
 #define PTE_BUFFERABLE		(_AT(pteval_t, 1) &lt;&lt; 2)		/* AttrIndx[0] */
 #define PTE_CACHEABLE		(_AT(pteval_t, 1) &lt;&lt; 3)		/* AttrIndx[1] */
 #define PTE_AP2			(_AT(pteval_t, 1) &lt;&lt; 7)		/* AP[2] */
<span class="p_del">-#define PTE_EXT_SHARED		(_AT(pteval_t, 3) &lt;&lt; 8)		/* SH[1:0], inner shareable */</span>
<span class="p_add">+#define PTE_EXT_SMASK		(_AT(pteval_t, 3) &lt;&lt; 8)		/* SH[1:0], shareable */</span>
<span class="p_add">+#define PTE_EXT_ISHARED	(_AT(pteval_t, 3) &lt;&lt; 8)		/* SH[1:0], inner shareable */</span>
<span class="p_add">+#define PTE_EXT_OSHARED	(_AT(pteval_t, 2) &lt;&lt; 8)		/* SH[1:0], outer shareable */</span>
 #define PTE_EXT_AF		(_AT(pteval_t, 1) &lt;&lt; 10)	/* Access Flag */
 #define PTE_EXT_NG		(_AT(pteval_t, 1) &lt;&lt; 11)	/* nG */
 #define PTE_EXT_PXN		(_AT(pteval_t, 1) &lt;&lt; 53)	/* PXN */
 #define PTE_EXT_XN		(_AT(pteval_t, 1) &lt;&lt; 54)	/* XN */
 
<span class="p_add">+/* in early boot we assume inner shared,</span>
<span class="p_add">+ * afterward use L_PTE_SHARED but only in code, can&#39;t be static initializer</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define L_PTE_EARLY_SHARED	PTE_EXT_ISHARED</span>
<span class="p_add">+#define PMD_SECT_EARLY_S	PMD_SECT_ISHARED</span>
<span class="p_add">+</span>
 /*
  * 40-bit physical address supported.
  */
<span class="p_header">diff --git a/arch/arm/include/asm/pgtable-3level.h b/arch/arm/include/asm/pgtable-3level.h</span>
<span class="p_header">index fa70db7..af5b9cb 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/pgtable-3level.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/pgtable-3level.h</span>
<span class="p_chunk">@@ -78,7 +78,7 @@</span> <span class="p_context"></span>
 #define L_PTE_VALID		(_AT(pteval_t, 1) &lt;&lt; 0)		/* Valid */
 #define L_PTE_PRESENT		(_AT(pteval_t, 3) &lt;&lt; 0)		/* Present */
 #define L_PTE_USER		(_AT(pteval_t, 1) &lt;&lt; 6)		/* AP[1] */
<span class="p_del">-#define L_PTE_SHARED		(_AT(pteval_t, 3) &lt;&lt; 8)		/* SH[1:0], inner shareable */</span>
<span class="p_add">+#define L_PTE_SHARED		(l_pte_shared)			/* inner or outer shareable */</span>
 #define L_PTE_YOUNG		(_AT(pteval_t, 1) &lt;&lt; 10)	/* AF */
 #define L_PTE_XN		(_AT(pteval_t, 1) &lt;&lt; 54)	/* XN */
 #define L_PTE_DIRTY		(_AT(pteval_t, 1) &lt;&lt; 55)
<span class="p_header">diff --git a/arch/arm/include/asm/pgtable-hwdef.h b/arch/arm/include/asm/pgtable-hwdef.h</span>
<span class="p_header">index c35d71f..27654a9 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/pgtable-hwdef.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/pgtable-hwdef.h</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"> struct attr_mod_entry {</span>
 };
 
 bool attr_mod_add(struct attr_mod_entry *pmod);
<span class="p_add">+bool use_outer_shared(void);</span>
 
 extern int num_attr_mods;
 extern struct attr_mod_entry attr_mod_table[MAX_ATTR_MOD_ENTRIES];
<span class="p_header">diff --git a/arch/arm/include/asm/pgtable.h b/arch/arm/include/asm/pgtable.h</span>
<span class="p_header">index 348caab..4d2e412 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -86,6 +86,9 @@</span> <span class="p_context"> extern pgprot_t		pgprot_hyp_device;</span>
 extern pgprot_t		pgprot_s2;
 extern pgprot_t		pgprot_s2_device;
 
<span class="p_add">+extern pmdval_t		pmd_sect_s;</span>
<span class="p_add">+extern pteval_t		l_pte_shared;</span>
<span class="p_add">+</span>
 #define _MOD_PROT(p, b)	__pgprot(pgprot_val(p) | (b))
 
 #define PAGE_NONE		_MOD_PROT(pgprot_user, L_PTE_XN | L_PTE_RDONLY | L_PTE_NONE)
<span class="p_header">diff --git a/arch/arm/mm/dump.c b/arch/arm/mm/dump.c</span>
<span class="p_header">index 9fe8e24..fb98fa6 100644</span>
<span class="p_header">--- a/arch/arm/mm/dump.c</span>
<span class="p_header">+++ b/arch/arm/mm/dump.c</span>
<span class="p_chunk">@@ -68,10 +68,24 @@</span> <span class="p_context"> static const struct prot_bits pte_bits[] = {</span>
 		.set	= &quot;NX&quot;,
 		.clear	= &quot;x &quot;,
 	}, {
<span class="p_add">+#ifndef CONFIG_ARM_LPAE</span>
 		.mask	= L_PTE_SHARED,
 		.val	= L_PTE_SHARED,
 		.set	= &quot;SHD&quot;,
 		.clear	= &quot;   &quot;,
<span class="p_add">+#else</span>
<span class="p_add">+		.mask	= PTE_EXT_SMASK,</span>
<span class="p_add">+		.val	= PTE_EXT_ISHARED,</span>
<span class="p_add">+		.set	= &quot;ISHD&quot;,</span>
<span class="p_add">+	}, {</span>
<span class="p_add">+		.mask	= PTE_EXT_SMASK,</span>
<span class="p_add">+		.val	= PTE_EXT_OSHARED,</span>
<span class="p_add">+		.set	= &quot;OSHD&quot;,</span>
<span class="p_add">+	}, {</span>
<span class="p_add">+		.mask	= PTE_EXT_SMASK,</span>
<span class="p_add">+		.val	= 0,</span>
<span class="p_add">+		.set	= &quot;    &quot;,</span>
<span class="p_add">+#endif</span>
 	}, {
 		.mask	= L_PTE_MT_MASK,
 		.val	= L_PTE_MT_UNCACHED,
<span class="p_chunk">@@ -172,10 +186,24 @@</span> <span class="p_context"> static const struct prot_bits section_bits[] = {</span>
 		.set	= &quot;NX&quot;,
 		.clear	= &quot;x &quot;,
 	}, {
<span class="p_add">+#ifndef CONFIG_ARM_LPAE</span>
 		.mask	= PMD_SECT_S,
 		.val	= PMD_SECT_S,
 		.set	= &quot;SHD&quot;,
 		.clear	= &quot;   &quot;,
<span class="p_add">+#else</span>
<span class="p_add">+		.mask	= PMD_SECT_SMASK,</span>
<span class="p_add">+		.val	= PMD_SECT_ISHARED,</span>
<span class="p_add">+		.set	= &quot;ISHD&quot;,</span>
<span class="p_add">+	}, {</span>
<span class="p_add">+		.mask	= PMD_SECT_SMASK,</span>
<span class="p_add">+		.val	= PMD_SECT_OSHARED,</span>
<span class="p_add">+		.set	= &quot;OSHD&quot;,</span>
<span class="p_add">+	}, {</span>
<span class="p_add">+		.mask	= PMD_SECT_SMASK,</span>
<span class="p_add">+		.val	= 0,</span>
<span class="p_add">+		.set	= &quot;    &quot;,</span>
<span class="p_add">+#endif</span>
 	},
 };
 
<span class="p_header">diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c</span>
<span class="p_header">index a608980..8aaccf2 100644</span>
<span class="p_header">--- a/arch/arm/mm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/mm/mmu.c</span>
<span class="p_chunk">@@ -70,6 +70,13 @@</span> <span class="p_context"> pgprot_t pgprot_hyp_device;</span>
 pgprot_t pgprot_s2;
 pgprot_t pgprot_s2_device;
 
<span class="p_add">+/* For LPAE hold the value of Inner or Outer Shared attribute selected at</span>
<span class="p_add">+ * early init, which starts out as inner shared</span>
<span class="p_add">+ * For non_LPAE these are always just the single S Bit</span>
<span class="p_add">+ */</span>
<span class="p_add">+pmdval_t pmd_sect_s    = PMD_SECT_EARLY_S;</span>
<span class="p_add">+pteval_t l_pte_shared  = L_PTE_EARLY_SHARED;</span>
<span class="p_add">+</span>
 EXPORT_SYMBOL(pgprot_user);
 EXPORT_SYMBOL(pgprot_kernel);
 
<span class="p_chunk">@@ -246,12 +253,12 @@</span> <span class="p_context"> __setup(&quot;noalign&quot;, noalign_setup);</span>
 static struct mem_type mem_types[] = {
 	[MT_DEVICE] = {		  /* Strongly ordered / ARMv6 shared device */
 		.prot_pte	= PROT_PTE_DEVICE | L_PTE_MT_DEV_SHARED |
<span class="p_del">-				  L_PTE_SHARED,</span>
<span class="p_add">+				  L_PTE_EARLY_SHARED,</span>
 		.prot_pte_s2	= s2_policy(PROT_PTE_S2_DEVICE) |
 				  s2_policy(L_PTE_S2_MT_DEV_SHARED) |
<span class="p_del">-				  L_PTE_SHARED,</span>
<span class="p_add">+				  L_PTE_EARLY_SHARED,</span>
 		.prot_l1	= PMD_TYPE_TABLE,
<span class="p_del">-		.prot_sect	= PROT_SECT_DEVICE | PMD_SECT_S,</span>
<span class="p_add">+		.prot_sect	= PROT_SECT_DEVICE | PMD_SECT_EARLY_S,</span>
 		.domain		= DOMAIN_IO,
 	},
 	[MT_DEVICE_NONSHARED] = { /* ARMv6 non-shared device */
<span class="p_chunk">@@ -340,8 +347,9 @@</span> <span class="p_context"> static struct mem_type mem_types[] = {</span>
 		.prot_pte  = L_PTE_PRESENT | L_PTE_YOUNG | L_PTE_DIRTY |
 				L_PTE_MT_UNCACHED | L_PTE_XN,
 		.prot_l1   = PMD_TYPE_TABLE,
<span class="p_del">-		.prot_sect = PMD_TYPE_SECT | PMD_SECT_AP_WRITE | PMD_SECT_S |</span>
<span class="p_del">-				PMD_SECT_UNCACHED | PMD_SECT_XN,</span>
<span class="p_add">+		.prot_sect = PMD_TYPE_SECT | PMD_SECT_AP_WRITE |</span>
<span class="p_add">+				PMD_SECT_EARLY_S | PMD_SECT_UNCACHED |</span>
<span class="p_add">+				PMD_SECT_XN,</span>
 		.domain    = DOMAIN_KERNEL,
 	},
 	[MT_MEMORY_DMA_READY] = {
<span class="p_chunk">@@ -422,6 +430,15 @@</span> <span class="p_context"> void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot)</span>
 	local_flush_tlb_kernel_range(vaddr, vaddr + PAGE_SIZE);
 }
 
<span class="p_add">+#ifdef CONFIG_ARM_LPAE</span>
<span class="p_add">+static void __init fixup_mem_type_shared(struct mem_type *pmt)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmt-&gt;prot_sect   = (pmt-&gt;prot_sect   &amp; ~PMD_SECT_SMASK) | pmd_sect_s;</span>
<span class="p_add">+	pmt-&gt;prot_pte    = (pmt-&gt;prot_pte    &amp; ~PTE_EXT_SMASK)  | l_pte_shared;</span>
<span class="p_add">+	pmt-&gt;prot_pte_s2 = (pmt-&gt;prot_pte_s2 &amp; ~PTE_EXT_SMASK)  | l_pte_shared;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * Adjust the PMD section entries according to the CPU in use.
  */
<span class="p_chunk">@@ -449,14 +466,24 @@</span> <span class="p_context"> static void __init build_mem_type_table(void)</span>
 		ecc_mask = 0;
 	}
 
<span class="p_add">+#ifdef CONFIG_ARM_LPAE</span>
<span class="p_add">+	if (pmd_sect_s != PMD_SECT_EARLY_S)</span>
<span class="p_add">+		/* we are using different sharable value than was set at</span>
<span class="p_add">+		 * compile time, fixup the mem types</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		for (i = 0; i &lt; ARRAY_SIZE(mem_types); i++)</span>
<span class="p_add">+			if (mem_types[i].prot_sect &amp; PMD_SECT_SMASK)</span>
<span class="p_add">+				fixup_mem_type_shared(&amp;mem_types[i]);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	if (is_smp()) {
 		if (cachepolicy != CPOLICY_WRITEALLOC) {
 			pr_warn(&quot;Forcing write-allocate cache policy for SMP\n&quot;);
 			cachepolicy = CPOLICY_WRITEALLOC;
 		}
<span class="p_del">-		if (!(initial_pmd_value &amp; PMD_SECT_S)) {</span>
<span class="p_add">+		if (!(initial_pmd_value &amp; PMD_SECT_SMASK)) {</span>
 			pr_warn(&quot;Forcing shared mappings for SMP\n&quot;);
<span class="p_del">-			initial_pmd_value |= PMD_SECT_S;</span>
<span class="p_add">+			initial_pmd_value |= pmd_sect_s;</span>
 		}
 	}
 
<span class="p_chunk">@@ -470,7 +497,7 @@</span> <span class="p_context"> static void __init build_mem_type_table(void)</span>
 			mem_types[i].prot_sect &amp;= ~PMD_SECT_TEX(7);
 	if ((cpu_arch &lt; CPU_ARCH_ARMv6 || !(cr &amp; CR_XP)) &amp;&amp; !cpu_is_xsc3())
 		for (i = 0; i &lt; ARRAY_SIZE(mem_types); i++)
<span class="p_del">-			mem_types[i].prot_sect &amp;= ~PMD_SECT_S;</span>
<span class="p_add">+			mem_types[i].prot_sect &amp;= ~PMD_SECT_SMASK;</span>
 
 	/*
 	 * ARMv5 and lower, bit 4 must be set for page tables (was: cache
<span class="p_chunk">@@ -592,25 +619,25 @@</span> <span class="p_context"> static void __init build_mem_type_table(void)</span>
 #endif
 
 		/*
<span class="p_del">-		 * If the initial page tables were created with the S bit</span>
<span class="p_del">-		 * set, then we need to do the same here for the same</span>
<span class="p_del">-		 * reasons given in early_cachepolicy().</span>
<span class="p_add">+		 * If we are using shared mode (ex SMP)</span>
<span class="p_add">+		 * then we need to add the shared attribute to all needed</span>
<span class="p_add">+		 * mem_types</span>
 		 */
<span class="p_del">-		if (initial_pmd_value &amp; PMD_SECT_S) {</span>
<span class="p_add">+		if (initial_pmd_value &amp; PMD_SECT_SMASK) {</span>
 			user_pgprot |= L_PTE_SHARED;
 			kern_pgprot |= L_PTE_SHARED;
 			vecs_pgprot |= L_PTE_SHARED;
 			s2_pgprot |= L_PTE_SHARED;
<span class="p_del">-			mem_types[MT_DEVICE_WC].prot_sect |= PMD_SECT_S;</span>
<span class="p_add">+			mem_types[MT_DEVICE_WC].prot_sect |= pmd_sect_s;</span>
 			mem_types[MT_DEVICE_WC].prot_pte |= L_PTE_SHARED;
<span class="p_del">-			mem_types[MT_DEVICE_CACHED].prot_sect |= PMD_SECT_S;</span>
<span class="p_add">+			mem_types[MT_DEVICE_CACHED].prot_sect |= pmd_sect_s;</span>
 			mem_types[MT_DEVICE_CACHED].prot_pte |= L_PTE_SHARED;
<span class="p_del">-			mem_types[MT_MEMORY_RWX].prot_sect |= PMD_SECT_S;</span>
<span class="p_add">+			mem_types[MT_MEMORY_RWX].prot_sect |= pmd_sect_s;</span>
 			mem_types[MT_MEMORY_RWX].prot_pte |= L_PTE_SHARED;
<span class="p_del">-			mem_types[MT_MEMORY_RW].prot_sect |= PMD_SECT_S;</span>
<span class="p_add">+			mem_types[MT_MEMORY_RW].prot_sect |= pmd_sect_s;</span>
 			mem_types[MT_MEMORY_RW].prot_pte |= L_PTE_SHARED;
 			mem_types[MT_MEMORY_DMA_READY].prot_pte |= L_PTE_SHARED;
<span class="p_del">-			mem_types[MT_MEMORY_RWX_NONCACHED].prot_sect |= PMD_SECT_S;</span>
<span class="p_add">+			mem_types[MT_MEMORY_RWX_NONCACHED].prot_sect |= pmd_sect_s;</span>
 			mem_types[MT_MEMORY_RWX_NONCACHED].prot_pte |= L_PTE_SHARED;
 		}
 	}
<span class="p_chunk">@@ -1510,6 +1537,25 @@</span> <span class="p_context"> bool __init attr_mod_add(struct attr_mod_entry *pmod)</span>
 	return true;
 }
 
<span class="p_add">+/* use outer shared wherever we would have used inner shared */</span>
<span class="p_add">+bool __init use_outer_shared(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct attr_mod_entry mod = {</span>
<span class="p_add">+		.test_mask   = PTE_EXT_SMASK,</span>
<span class="p_add">+		.test_value  = PTE_EXT_ISHARED,</span>
<span class="p_add">+		.clear_mask  = PTE_EXT_SMASK,</span>
<span class="p_add">+		.set_mask    = PTE_EXT_OSHARED</span>
<span class="p_add">+	};</span>
<span class="p_add">+</span>
<span class="p_add">+	if (attr_mod_add(&amp;mod) &gt;= 0) {</span>
<span class="p_add">+		l_pte_shared = PTE_EXT_OSHARED;</span>
<span class="p_add">+		pmd_sect_s   = PMD_SECT_OSHARED;</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * early_paging_init() recreates boot time page table setup, allowing machines
  * to switch over to a high (&gt;4G) address space on LPAE systems
<span class="p_header">diff --git a/arch/arm/mm/proc-v7-3level.S b/arch/arm/mm/proc-v7-3level.S</span>
<span class="p_header">index 5e5720e..a518b3b 100644</span>
<span class="p_header">--- a/arch/arm/mm/proc-v7-3level.S</span>
<span class="p_header">+++ b/arch/arm/mm/proc-v7-3level.S</span>
<span class="p_chunk">@@ -38,7 +38,7 @@</span> <span class="p_context"></span>
 
 /* PTWs cacheable, inner WBWA shareable, outer WBWA not shareable */
 #define TTB_FLAGS_SMP	(TTB_IRGN_WBWA|TTB_S|TTB_RGN_OC_WBWA)
<span class="p_del">-#define PMD_FLAGS_SMP	(PMD_SECT_WBWA|PMD_SECT_S)</span>
<span class="p_add">+#define PMD_FLAGS_SMP	(PMD_SECT_WBWA|PMD_SECT_EARLY_S)</span>
 
 #ifndef __ARMEB__
 #  define rpgdl	r0

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



