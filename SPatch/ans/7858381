
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[06/10] perf, tools, stat: Add computation of TopDown formulas - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [06/10] perf, tools, stat: Add computation of TopDown formulas</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2015, 12:54 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1450227266-2501-7-git-send-email-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7858381/mbox/"
   >mbox</a>
|
   <a href="/patch/7858381/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7858381/">/patch/7858381/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 3FA36BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 00:56:58 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 174E9202BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 00:56:57 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A0FB7203A9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Dec 2015 00:56:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934004AbbLPA4h (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 15 Dec 2015 19:56:37 -0500
Received: from mga14.intel.com ([192.55.52.115]:3743 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933894AbbLPAyj (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 15 Dec 2015 19:54:39 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga103.fm.intel.com with ESMTP; 15 Dec 2015 16:54:39 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,434,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;874484307&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.156])
	by fmsmga002.fm.intel.com with ESMTP; 15 Dec 2015 16:54:38 -0800
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 50957302AD3; Tue, 15 Dec 2015 16:54:38 -0800 (PST)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@kernel.org, peterz@infradead.org
Cc: jolsa@kernel.org, mingo@kernel.org, linux-kernel@vger.kernel.org,
	eranian@google.com, namhyung@kernel.org, Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 06/10] perf, tools, stat: Add computation of TopDown formulas
Date: Tue, 15 Dec 2015 16:54:22 -0800
Message-Id: &lt;1450227266-2501-7-git-send-email-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1450227266-2501-1-git-send-email-andi@firstfloor.org&gt;
References: &lt;1450227266-2501-1-git-send-email-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - Dec. 16, 2015, 12:54 a.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Implement the TopDown formulas in perf stat. The topdown basic metrics
reported by the kernel are collected, and the formulas are computed
and output as normal metrics.

See the kernel commit exporting the events for details on the used
metrics.
<span class="signed-off-by">
Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/builtin-stat.c     |   6 +-
 tools/perf/util/stat-shadow.c | 164 +++++++++++++++++++++++++++++++++++++++++-
 tools/perf/util/stat.c        |   5 ++
 tools/perf/util/stat.h        |   8 ++-
 4 files changed, 179 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index e10198c..6c44aae 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -859,7 +859,8 @@</span> <span class="p_context"> static void printout(int id, int nr, struct perf_evsel *counter, double uval,</span>
 	perf_stat__print_shadow_stats(counter, uval,
 				stat_config.aggr_mode == AGGR_GLOBAL ? 0 :
 				first_shadow_cpu(counter, id),
<span class="p_del">-				&amp;out);</span>
<span class="p_add">+				&amp;out,</span>
<span class="p_add">+				topdown_run);</span>
 
 	if (!metric_only) {
 		print_noise(counter, noise);
<span class="p_chunk">@@ -1048,7 +1049,8 @@</span> <span class="p_context"> static void print_metric_headers(char *prefix)</span>
 		os.evsel = counter;
 		perf_stat__print_shadow_stats(counter, 0,
 					      0,
<span class="p_del">-					      &amp;out);</span>
<span class="p_add">+					      &amp;out,</span>
<span class="p_add">+					      topdown_run);</span>
 	}
 	fputc(&#39;\n&#39;, stat_config.output);
 }
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 4d8f185..e977992 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -2,6 +2,7 @@</span> <span class="p_context"></span>
 #include &quot;evsel.h&quot;
 #include &quot;stat.h&quot;
 #include &quot;color.h&quot;
<span class="p_add">+#include &quot;pmu.h&quot;</span>
 
 enum {
 	CTX_BIT_USER	= 1 &lt;&lt; 0,
<span class="p_chunk">@@ -28,6 +29,11 @@</span> <span class="p_context"> static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
 static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];
<span class="p_add">+static struct stats runtime_topdown_total_slots[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];</span>
 
 struct stats walltime_nsecs_stats;
 
<span class="p_chunk">@@ -68,6 +74,11 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 		sizeof(runtime_transaction_stats));
 	memset(runtime_elision_stats, 0, sizeof(runtime_elision_stats));
 	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));
<span class="p_add">+	memset(runtime_topdown_total_slots, 0, sizeof(runtime_topdown_total_slots));</span>
<span class="p_add">+	memset(runtime_topdown_slots_retired, 0, sizeof(runtime_topdown_slots_retired));</span>
<span class="p_add">+	memset(runtime_topdown_slots_issued, 0, sizeof(runtime_topdown_slots_issued));</span>
<span class="p_add">+	memset(runtime_topdown_fetch_bubbles, 0, sizeof(runtime_topdown_fetch_bubbles));</span>
<span class="p_add">+	memset(runtime_topdown_recovery_bubbles, 0, sizeof(runtime_topdown_recovery_bubbles));</span>
 }
 
 /*
<span class="p_chunk">@@ -90,6 +101,16 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
 		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);
 	else if (perf_stat_evsel__is(counter, ELISION_START))
 		update_stats(&amp;runtime_elision_stats[ctx][cpu], count[0]);
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_TOTAL_SLOTS))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_ISSUED))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_RETIRED))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_FETCH_BUBBLES))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu],count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TOPDOWN_RECOVERY_BUBBLES))</span>
<span class="p_add">+		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count[0]);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))
 		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count[0]);
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))
<span class="p_chunk">@@ -289,9 +310,108 @@</span> <span class="p_context"> static void print_ll_cache_misses(int cpu,</span>
 	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * High level &quot;TopDown&quot; CPU core pipe line bottleneck break down.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Basic concept following</span>
<span class="p_add">+ * Yasin, A Top Down Method for Performance analysis and Counter architecture</span>
<span class="p_add">+ * ISPASS14</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The CPU pipeline is divided into 4 areas that can be bottlenecks:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Frontend -&gt; Backend -&gt; Retiring</span>
<span class="p_add">+ * BadSpeculation in addition means out of order execution that is thrown away</span>
<span class="p_add">+ * (for example branch mispredictions)</span>
<span class="p_add">+ * Frontend is instruction decoding.</span>
<span class="p_add">+ * Backend is execution, like computation and accessing data in memory</span>
<span class="p_add">+ * Retiring is good execution that is not directly bottlenecked</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The formulas are computed in slots.</span>
<span class="p_add">+ * A slot is an entry in the pipeline each for the pipeline width</span>
<span class="p_add">+ * (for example a 4-wide pipeline has 4 slots for each cycle)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Formulas:</span>
<span class="p_add">+ * BadSpeculation = ((SlotsIssued - SlotsRetired) + RecoveryBubbles) /</span>
<span class="p_add">+ *			TotalSlots</span>
<span class="p_add">+ * Retiring = SlotsRetired / TotalSlots</span>
<span class="p_add">+ * FrontendBound = FetchBubbles / TotalSlots</span>
<span class="p_add">+ * BackendBound = 1.0 - BadSpeculation - Retiring - FrontendBound</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The kernel provides the mapping to the low level CPU events and any scaling</span>
<span class="p_add">+ * needed for the CPU pipeline width, for example:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * TotalSlots = Cycles * 4</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The scaling factor is communicated in the sysfs unit.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * In some cases the CPU may not be able to measure all the formulas due to</span>
<span class="p_add">+ * missing events. In this case multiple formulas are combined, as possible.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * With SMT the slots of thread siblings need to be combined to get meaningful</span>
<span class="p_add">+ * results. This is implemented by the kernel forcing per-core mode with</span>
<span class="p_add">+ * the .agg-per-core sysfs attribute.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Full TopDown supports more levels to sub-divide each area: for example</span>
<span class="p_add">+ * BackendBound into computing bound and memory bound. For now we only</span>
<span class="p_add">+ * support Level 1 TopDown.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_total_slots(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return avg_stats(&amp;runtime_topdown_total_slots[ctx][cpu]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_bad_spec(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double bad_spec = 0;</span>
<span class="p_add">+	double total_slots;</span>
<span class="p_add">+	double total;</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_topdown_slots_issued[ctx][cpu]) -</span>
<span class="p_add">+		avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]) +</span>
<span class="p_add">+		avg_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu]);</span>
<span class="p_add">+	total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		bad_spec = total / total_slots;</span>
<span class="p_add">+	return bad_spec;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_retiring(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double retiring = 0;</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	double ret_slots = avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		retiring = ret_slots / total_slots;</span>
<span class="p_add">+	return retiring;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_fe_bound(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double fe_bound = 0;</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	double fetch_bub = avg_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total_slots)</span>
<span class="p_add">+		fe_bound = fetch_bub / total_slots;</span>
<span class="p_add">+	return fe_bound;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double td_be_bound(int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="p_add">+		      td_bad_spec(ctx, cpu) +</span>
<span class="p_add">+		      td_retiring(ctx, cpu));</span>
<span class="p_add">+	if (sum == 0)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	return 1.0 - sum;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
<span class="p_del">-				   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				   int topdown_run)</span>
 {
 	void *ctxp = out-&gt;ctx;
 	print_metric_t print_metric = out-&gt;print_metric;
<span class="p_chunk">@@ -438,6 +558,48 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 				     avg / ratio);
 		else
 			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_FETCH_BUBBLES)) {</span>
<span class="p_add">+		double fe_bound = td_fe_bound(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (fe_bound &gt; 0.2 || topdown_run &gt; 1)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.2f%%&quot;, &quot;frontend bound&quot;,</span>
<span class="p_add">+					fe_bound * 100.);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;frontend bound&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_RETIRED)) {</span>
<span class="p_add">+		double retiring = td_retiring(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (retiring &gt; 0.7 || topdown_run &gt; 1)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.2f%%&quot;, &quot;retiring&quot;,</span>
<span class="p_add">+					retiring * 100.);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;retiring&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_RECOVERY_BUBBLES)) {</span>
<span class="p_add">+		double bad_spec = td_bad_spec(ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (bad_spec &gt; 0.1 || topdown_run &gt; 1)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.2f%%&quot;, &quot;bad speculation&quot;,</span>
<span class="p_add">+					bad_spec * 100.);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;bad speculation&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_ISSUED)) {</span>
<span class="p_add">+		double be_bound = td_be_bound(ctx, cpu);</span>
<span class="p_add">+		const char *name = &quot;backend bound&quot;;</span>
<span class="p_add">+		static int have_recovery_bubbles = -1;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* In case the CPU does not support topdown-recovery-bubbles */</span>
<span class="p_add">+		if (have_recovery_bubbles &lt; 0)</span>
<span class="p_add">+			have_recovery_bubbles = pmu_have_event(&quot;cpu&quot;,</span>
<span class="p_add">+					&quot;topdown-recovery-bubbles&quot;);</span>
<span class="p_add">+		if (!have_recovery_bubbles)</span>
<span class="p_add">+			name = &quot;backend bound/bad spec&quot;;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (td_total_slots(ctx, cpu) &gt; 0 &amp;&amp;</span>
<span class="p_add">+			(be_bound &gt; 0.2 || topdown_run &gt; 1))</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.2f%%&quot;, name,</span>
<span class="p_add">+					be_bound * 100.);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, name, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
 		char unit_buf[10];
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index 913d236..fdb34e3 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -79,6 +79,11 @@</span> <span class="p_context"> static const char *id_str[PERF_STAT_EVSEL_ID__MAX] = {</span>
 	ID(TRANSACTION_START,	cpu/tx-start/),
 	ID(ELISION_START,	cpu/el-start/),
 	ID(CYCLES_IN_TX_CP,	cpu/cycles-ct/),
<span class="p_add">+	ID(TOPDOWN_TOTAL_SLOTS, topdown-total-slots),</span>
<span class="p_add">+	ID(TOPDOWN_SLOTS_ISSUED, topdown-slots-issued),</span>
<span class="p_add">+	ID(TOPDOWN_SLOTS_RETIRED, topdown-slots-retired),</span>
<span class="p_add">+	ID(TOPDOWN_FETCH_BUBBLES, topdown-fetch-bubbles),</span>
<span class="p_add">+	ID(TOPDOWN_RECOVERY_BUBBLES, topdown-recovery-bubbles),</span>
 };
 #undef ID
 
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index f51d94e..0c26633 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -17,6 +17,11 @@</span> <span class="p_context"> enum perf_stat_evsel_id {</span>
 	PERF_STAT_EVSEL_ID__TRANSACTION_START,
 	PERF_STAT_EVSEL_ID__ELISION_START,
 	PERF_STAT_EVSEL_ID__CYCLES_IN_TX_CP,
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_TOTAL_SLOTS,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_ISSUED,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_RETIRED,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_FETCH_BUBBLES,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__TOPDOWN_RECOVERY_BUBBLES,</span>
 	PERF_STAT_EVSEL_ID__MAX,
 };
 
<span class="p_chunk">@@ -83,7 +88,8 @@</span> <span class="p_context"> struct perf_stat_output_ctx {</span>
 
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
<span class="p_del">-				   struct perf_stat_output_ctx *out);</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				   int topdown_run);</span>
 
 void perf_evsel__reset_stat_priv(struct perf_evsel *evsel);
 int perf_evsel__alloc_stat_priv(struct perf_evsel *evsel);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



