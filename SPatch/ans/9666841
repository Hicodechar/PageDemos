
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[0/6] mm: make movable onlining suck less - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [0/6] mm: make movable onlining suck less</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 6, 2017, 11:07 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170406110747.GJ5497@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9666841/mbox/"
   >mbox</a>
|
   <a href="/patch/9666841/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9666841/">/patch/9666841/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3750C601EB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  6 Apr 2017 11:08:05 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 33F4926E82
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  6 Apr 2017 11:08:05 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 26B4A28477; Thu,  6 Apr 2017 11:08:05 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 59F6526E82
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  6 Apr 2017 11:08:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932921AbdDFLIA (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 6 Apr 2017 07:08:00 -0400
Received: from mx2.suse.de ([195.135.220.15]:47799 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754902AbdDFLHw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 6 Apr 2017 07:07:52 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id DCCD0AAB2;
	Thu,  6 Apr 2017 11:07:50 +0000 (UTC)
Date: Thu, 6 Apr 2017 13:07:47 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Reza Arbab &lt;arbab@linux.vnet.ibm.com&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;, linux-mm@kvack.org,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Yasuaki Ishimatsu &lt;yasu.isimatu@gmail.com&gt;,
	Tang Chen &lt;tangchen@cn.fujitsu.com&gt;, qiuxishi@huawei.com,
	Kani Toshimitsu &lt;toshi.kani@hpe.com&gt;, slaoub@gmail.com,
	Joonsoo Kim &lt;js1304@gmail.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	Zhang Zhen &lt;zhenzhang.zhang@huawei.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Daniel Kiper &lt;daniel.kiper@oracle.com&gt;,
	Igor Mammedov &lt;imammedo@redhat.com&gt;,
	Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Chris Metcalf &lt;cmetcalf@mellanox.com&gt;,
	Dan Williams &lt;dan.j.williams@gmail.com&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Lai Jiangshan &lt;laijs@cn.fujitsu.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;
Subject: Re: [PATCH 0/6] mm: make movable onlining suck less
Message-ID: &lt;20170406110747.GJ5497@dhcp22.suse.cz&gt;
References: &lt;20170404183012.a6biape5y7vu6cjm@arbab-laptop&gt;
	&lt;20170404194122.GS15132@dhcp22.suse.cz&gt;
	&lt;20170404214339.6o4c4uhwudyhzbbo@arbab-laptop&gt;
	&lt;20170405064239.GB6035@dhcp22.suse.cz&gt;
	&lt;20170405092427.GG6035@dhcp22.suse.cz&gt;
	&lt;20170405145304.wxzfavqxnyqtrlru@arbab-laptop&gt;
	&lt;20170405154258.GR6035@dhcp22.suse.cz&gt;
	&lt;20170405173248.4vtdgk2kolbzztya@arbab-laptop&gt;
	&lt;20170405181502.GU6035@dhcp22.suse.cz&gt;
	&lt;20170405210214.GX6035@dhcp22.suse.cz&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20170405210214.GX6035@dhcp22.suse.cz&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - April 6, 2017, 11:07 a.m.</div>
<pre class="content">
On Wed 05-04-17 23:02:14, Michal Hocko wrote:
[...]
<span class="quote">&gt; OK, I was staring into the code and I guess I finally understand what is</span>
<span class="quote">&gt; going on here. Looking at arch_add_memory-&gt;...-&gt;register_mem_sect_under_node</span>
<span class="quote">&gt; was just misleading. I am still not 100% sure why but we try to do the</span>
<span class="quote">&gt; same thing later from register_one_node-&gt;link_mem_sections for nodes</span>
<span class="quote">&gt; which were offline. I should have noticed this path before. And here</span>
<span class="quote">&gt; is the difference from the previous code. We are past arch_add_memory</span>
<span class="quote">&gt; and that path used to do __add_zone which among other things will also</span>
<span class="quote">&gt; resize node boundaries. I am not doing that anymore because I postpone</span>
<span class="quote">&gt; that to the onlining phase. Jeez this code is so convoluted my head</span>
<span class="quote">&gt; spins.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not really sure how to fix this. I suspect register_mem_sect_under_node</span>
<span class="quote">&gt; should just ignore the online state of the node. But I wouldn&#39;t</span>
<span class="quote">&gt; be all that surprised if this had some subtle reason as well. An</span>
<span class="quote">&gt; alternative would be to actually move register_mem_sect_under_node out</span>
<span class="quote">&gt; of register_new_memory and move it up the call stack, most probably to</span>
<span class="quote">&gt; add_memory_resource. We have the range and can map it to the memblock</span>
<span class="quote">&gt; and so will not rely on the node range. I will sleep over it and</span>
<span class="quote">&gt; hopefully come up with something tomorrow.</span>

OK, so this is the most sensible way I was able to come up with. I
didn&#39;t get to test it yet but from the above analysis it should work.
---
From 6c99a3284ea70262e3f25cbe71826a57aeaa7ffd Mon Sep 17 00:00:00 2001
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
Date: Thu, 6 Apr 2017 11:59:37 +0200
Subject: [PATCH] mm, memory_hotplug: split up register_one_node

Memory hotplug (add_memory_resource) has to reinitialize node
infrastructure if the node is offline (one which went through the
complete add_memory(); remove_memory() cycle). That involves node
registration to the kobj infrastructure (register_node), the proper
association with cpus (register_cpu_under_node) and finally creation of
node&lt;-&gt;memblock symlinks (link_mem_sections).

The last part requires to know node_start_pfn and node_spanned_pages
which we currently have but a leter patch will postpone this
initialization to the onlining phase which happens later. In fact
we do not need to rely on the early initialization even now because
we know which range is currently hot added.

Split register_one_node into core which does all the common work for
the boot time NUMA initialization and the hotplug (__register_one_node).
register_one_node keeps the full initialization while hotplug calls
__register_one_node and manually calls link_mem_sections for the proper
range.

This shouldn&#39;t introduce any functional change.
<span class="signed-off-by">
Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 drivers/base/node.c  | 51 ++++++++++++++++++++-------------------------------
 include/linux/node.h | 35 ++++++++++++++++++++++++++++++++++-
 mm/memory_hotplug.c  | 17 ++++++++++++++++-
 3 files changed, 70 insertions(+), 33 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/base/node.c b/drivers/base/node.c</span>
<span class="p_header">index 06294d69779b..dff5b53f7905 100644</span>
<span class="p_header">--- a/drivers/base/node.c</span>
<span class="p_header">+++ b/drivers/base/node.c</span>
<span class="p_chunk">@@ -461,10 +461,9 @@</span> <span class="p_context"> int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,</span>
 	return 0;
 }
 
<span class="p_del">-static int link_mem_sections(int nid)</span>
<span class="p_add">+int link_mem_sections(int nid, unsigned long start_pfn, unsigned long nr_pages)</span>
 {
<span class="p_del">-	unsigned long start_pfn = NODE_DATA(nid)-&gt;node_start_pfn;</span>
<span class="p_del">-	unsigned long end_pfn = start_pfn + NODE_DATA(nid)-&gt;node_spanned_pages;</span>
<span class="p_add">+	unsigned long end_pfn = start_pfn + nr_pages;</span>
 	unsigned long pfn;
 	struct memory_block *mem_blk = NULL;
 	int err = 0;
<span class="p_chunk">@@ -552,10 +551,7 @@</span> <span class="p_context"> static int node_memory_callback(struct notifier_block *self,</span>
 	return NOTIFY_OK;
 }
 #endif	/* CONFIG_HUGETLBFS */
<span class="p_del">-#else	/* !CONFIG_MEMORY_HOTPLUG_SPARSE */</span>
<span class="p_del">-</span>
<span class="p_del">-static int link_mem_sections(int nid) { return 0; }</span>
<span class="p_del">-#endif	/* CONFIG_MEMORY_HOTPLUG_SPARSE */</span>
<span class="p_add">+#endif /* CONFIG_MEMORY_HOTPLUG_SPARSE */</span>
 
 #if !defined(CONFIG_MEMORY_HOTPLUG_SPARSE) || \
     !defined(CONFIG_HUGETLBFS)
<span class="p_chunk">@@ -569,39 +565,32 @@</span> <span class="p_context"> static void init_node_hugetlb_work(int nid) { }</span>
 
 #endif
 
<span class="p_del">-int register_one_node(int nid)</span>
<span class="p_add">+int __register_one_node(int nid)</span>
 {
<span class="p_del">-	int error = 0;</span>
<span class="p_add">+	int p_node = parent_node(nid);</span>
<span class="p_add">+	struct node *parent = NULL;</span>
<span class="p_add">+	int error;</span>
 	int cpu;
 
<span class="p_del">-	if (node_online(nid)) {</span>
<span class="p_del">-		int p_node = parent_node(nid);</span>
<span class="p_del">-		struct node *parent = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (p_node != nid)</span>
<span class="p_del">-			parent = node_devices[p_node];</span>
<span class="p_del">-</span>
<span class="p_del">-		node_devices[nid] = kzalloc(sizeof(struct node), GFP_KERNEL);</span>
<span class="p_del">-		if (!node_devices[nid])</span>
<span class="p_del">-			return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-		error = register_node(node_devices[nid], nid, parent);</span>
<span class="p_add">+	if (p_node != nid)</span>
<span class="p_add">+		parent = node_devices[p_node];</span>
 
<span class="p_del">-		/* link cpu under this node */</span>
<span class="p_del">-		for_each_present_cpu(cpu) {</span>
<span class="p_del">-			if (cpu_to_node(cpu) == nid)</span>
<span class="p_del">-				register_cpu_under_node(cpu, nid);</span>
<span class="p_del">-		}</span>
<span class="p_add">+	node_devices[nid] = kzalloc(sizeof(struct node), GFP_KERNEL);</span>
<span class="p_add">+	if (!node_devices[nid])</span>
<span class="p_add">+		return -ENOMEM;</span>
 
<span class="p_del">-		/* link memory sections under this node */</span>
<span class="p_del">-		error = link_mem_sections(nid);</span>
<span class="p_add">+	error = register_node(node_devices[nid], nid, parent);</span>
 
<span class="p_del">-		/* initialize work queue for memory hot plug */</span>
<span class="p_del">-		init_node_hugetlb_work(nid);</span>
<span class="p_add">+	/* link cpu under this node */</span>
<span class="p_add">+	for_each_present_cpu(cpu) {</span>
<span class="p_add">+		if (cpu_to_node(cpu) == nid)</span>
<span class="p_add">+			register_cpu_under_node(cpu, nid);</span>
 	}
 
<span class="p_del">-	return error;</span>
<span class="p_add">+	/* initialize work queue for memory hot plug */</span>
<span class="p_add">+	init_node_hugetlb_work(nid);</span>
 
<span class="p_add">+	return error;</span>
 }
 
 void unregister_one_node(int nid)
<span class="p_header">diff --git a/include/linux/node.h b/include/linux/node.h</span>
<span class="p_header">index 2115ad5d6f19..2baa640d0b92 100644</span>
<span class="p_header">--- a/include/linux/node.h</span>
<span class="p_header">+++ b/include/linux/node.h</span>
<span class="p_chunk">@@ -30,9 +30,38 @@</span> <span class="p_context"> struct memory_block;</span>
 extern struct node *node_devices[];
 typedef  void (*node_registration_func_t)(struct node *);
 
<span class="p_add">+#ifdef CONFIG_MEMORY_HOTPLUG_SPARSE</span>
<span class="p_add">+extern int link_mem_sections(int nid, unsigned long start_pfn, unsigned long nr_pages);</span>
<span class="p_add">+#else</span>
<span class="p_add">+static int link_mem_sections(int nid, unsigned long start_pfn, unsigned long nr_pages)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 extern void unregister_node(struct node *node);
 #ifdef CONFIG_NUMA
<span class="p_del">-extern int register_one_node(int nid);</span>
<span class="p_add">+/* Core of the node registration - only memory hotplug should use this */</span>
<span class="p_add">+extern int __register_one_node(int nid);</span>
<span class="p_add">+</span>
<span class="p_add">+/* Registers an online node */</span>
<span class="p_add">+static inline int register_one_node(int nid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int error = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (node_online(nid)) {</span>
<span class="p_add">+		struct pglist_data *pgdat = NODE_DATA(nid);</span>
<span class="p_add">+</span>
<span class="p_add">+		error = __register_one_node(nid);</span>
<span class="p_add">+		if (error)</span>
<span class="p_add">+			return error;</span>
<span class="p_add">+		/* link memory sections under this node */</span>
<span class="p_add">+		error = link_mem_sections(nid, pgdat-&gt;node_start_pfn, pgdat-&gt;node_spanned_pages);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return error;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 extern void unregister_one_node(int nid);
 extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
 extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
<span class="p_chunk">@@ -46,6 +75,10 @@</span> <span class="p_context"> extern void register_hugetlbfs_with_node(node_registration_func_t doregister,</span>
 					 node_registration_func_t unregister);
 #endif
 #else
<span class="p_add">+static inline int __register_one_node(int nid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 static inline int register_one_node(int nid)
 {
 	return 0;
<span class="p_header">diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c</span>
<span class="p_header">index c2b018c808b7..2c731bdfa845 100644</span>
<span class="p_header">--- a/mm/memory_hotplug.c</span>
<span class="p_header">+++ b/mm/memory_hotplug.c</span>
<span class="p_chunk">@@ -1220,7 +1220,22 @@</span> <span class="p_context"> int __ref add_memory_resource(int nid, struct resource *res, bool online)</span>
 	node_set_online(nid);
 
 	if (new_node) {
<span class="p_del">-		ret = register_one_node(nid);</span>
<span class="p_add">+		unsigned long start_pfn = start &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		unsigned long nr_pages = size &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = __register_one_node(nid);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			goto register_fail;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * link memory sections under this node. This is already</span>
<span class="p_add">+		 * done when creatig memory section in register_new_memory</span>
<span class="p_add">+		 * but that depends to have the node registered so offline</span>
<span class="p_add">+		 * nodes have to go through register_node.</span>
<span class="p_add">+		 * TODO clean up this mess.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		ret = link_mem_sections(nid, start_pfn, nr_pages);</span>
<span class="p_add">+register_fail:</span>
 		/*
 		 * If sysfs file of new node can&#39;t create, cpu on the node
 		 * can&#39;t be hot-added. There is no rollback way now.

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



