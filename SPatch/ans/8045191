
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.2.y-ckt,059/305] ARM/arm64: KVM: test properly for a PTE&#39;s uncachedness - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.2.y-ckt,059/305] ARM/arm64: KVM: test properly for a PTE&#39;s uncachedness</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 15, 2016, 11:57 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1452902519-2754-60-git-send-email-kamal@canonical.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8045191/mbox/"
   >mbox</a>
|
   <a href="/patch/8045191/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8045191/">/patch/8045191/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 997449F744
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Jan 2016 00:03:52 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E5EC3202F2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Jan 2016 00:03:51 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 699402039D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Jan 2016 00:03:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752117AbcAPADk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 15 Jan 2016 19:03:40 -0500
Received: from youngberry.canonical.com ([91.189.89.112]:35876 &quot;EHLO
	youngberry.canonical.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754642AbcAPAD1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 15 Jan 2016 19:03:27 -0500
Received: from 1.general.kamal.us.vpn ([10.172.68.52] helo=fourier)
	by youngberry.canonical.com with esmtpsa
	(TLS1.0:DHE_RSA_AES_128_CBC_SHA1:16) (Exim 4.76)
	(envelope-from &lt;kamal@canonical.com&gt;)
	id 1aKEKz-0007nE-QN; Sat, 16 Jan 2016 00:03:25 +0000
Received: from kamal by fourier with local (Exim 4.82)
	(envelope-from &lt;kamal@whence.com&gt;)
	id 1aKEKx-0001DT-0s; Fri, 15 Jan 2016 16:03:23 -0800
From: Kamal Mostafa &lt;kamal@canonical.com&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org,
	kernel-team@lists.ubuntu.com
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;,
	Christoffer Dall &lt;christoffer.dall@linaro.org&gt;,
	Kamal Mostafa &lt;kamal@canonical.com&gt;
Subject: [PATCH 4.2.y-ckt 059/305] ARM/arm64: KVM: test properly for a PTE&#39;s
	uncachedness
Date: Fri, 15 Jan 2016 15:57:53 -0800
Message-Id: &lt;1452902519-2754-60-git-send-email-kamal@canonical.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1452902519-2754-1-git-send-email-kamal@canonical.com&gt;
References: &lt;1452902519-2754-1-git-send-email-kamal@canonical.com&gt;
X-Extended-Stable: 4.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7718">Kamal Mostafa</a> - Jan. 15, 2016, 11:57 p.m.</div>
<pre class="content">
4.2.8-ckt2 -stable review patch.  If anyone has any objections, please let me know.

---8&lt;------------------------------------------------------------
<span class="from">
From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>

commit e6fab54423450d699a09ec2b899473a541f61971 upstream.

The open coded tests for checking whether a PTE maps a page as
uncached use a flawed &#39;(pte_val(xxx) &amp; CONST) != CONST&#39; pattern,
which is not guaranteed to work since the type of a mapping is
not a set of mutually exclusive bits

For HYP mappings, the type is an index into the MAIR table (i.e, the
index itself does not contain any information whatsoever about the
type of the mapping), and for stage-2 mappings it is a bit field where
normal memory and device types are defined as follows:

    #define MT_S2_NORMAL            0xf
    #define MT_S2_DEVICE_nGnRE      0x1

I.e., masking *and* comparing with the latter matches on the former,
and we have been getting lucky merely because the S2 device mappings
also have the PTE_UXN bit set, or we would misidentify memory mappings
as device mappings.

Since the unmap_range() code path (which contains one instance of the
flawed test) is used both for HYP mappings and stage-2 mappings, and
considering the difference between the two, it is non-trivial to fix
this by rewriting the tests in place, as it would involve passing
down the type of mapping through all the functions.

However, since HYP mappings and stage-2 mappings both deal with host
physical addresses, we can simply check whether the mapping is backed
by memory that is managed by the host kernel, and only perform the
D-cache maintenance if this is the case.
<span class="signed-off-by">
Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Pavel Fedin &lt;p.fedin@samsung.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Christoffer Dall &lt;christoffer.dall@linaro.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Kamal Mostafa &lt;kamal@canonical.com&gt;</span>
---
 arch/arm/kvm/mmu.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="p_header">index 6984342..7dace90 100644</span>
<span class="p_header">--- a/arch/arm/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/kvm/mmu.c</span>
<span class="p_chunk">@@ -98,6 +98,11 @@</span> <span class="p_context"> static void kvm_flush_dcache_pud(pud_t pud)</span>
 	__kvm_flush_dcache_pud(pud);
 }
 
<span class="p_add">+static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !pfn_valid(pfn);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /**
  * stage2_dissolve_pmd() - clear and flush huge PMD entry
  * @kvm:	pointer to kvm structure.
<span class="p_chunk">@@ -213,7 +218,7 @@</span> <span class="p_context"> static void unmap_ptes(struct kvm *kvm, pmd_t *pmd,</span>
 			kvm_tlb_flush_vmid_ipa(kvm, addr);
 
 			/* No need to invalidate the cache for device mappings */
<span class="p_del">-			if ((pte_val(old_pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="p_add">+			if (!kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
 				kvm_flush_dcache_pte(old_pte);
 
 			put_page(virt_to_page(pte));
<span class="p_chunk">@@ -305,8 +310,7 @@</span> <span class="p_context"> static void stage2_flush_ptes(struct kvm *kvm, pmd_t *pmd,</span>
 
 	pte = pte_offset_kernel(pmd, addr);
 	do {
<span class="p_del">-		if (!pte_none(*pte) &amp;&amp;</span>
<span class="p_del">-		    (pte_val(*pte) &amp; PAGE_S2_DEVICE) != PAGE_S2_DEVICE)</span>
<span class="p_add">+		if (!pte_none(*pte) &amp;&amp; !kvm_is_device_pfn(__phys_to_pfn(addr)))</span>
 			kvm_flush_dcache_pte(*pte);
 	} while (pte++, addr += PAGE_SIZE, addr != end);
 }
<span class="p_chunk">@@ -1037,11 +1041,6 @@</span> <span class="p_context"> static bool kvm_is_write_fault(struct kvm_vcpu *vcpu)</span>
 	return kvm_vcpu_dabt_iswrite(vcpu);
 }
 
<span class="p_del">-static bool kvm_is_device_pfn(unsigned long pfn)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return !pfn_valid(pfn);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /**
  * stage2_wp_ptes - write protect PMD range
  * @pmd:	pointer to pmd entry

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



