
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[9/9] iommu/amd: Add ACPI HID named devices IOMMU driver support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [9/9] iommu/amd: Add ACPI HID named devices IOMMU driver support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=148531">Wang Hongcheng</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 4, 2015, 3:24 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1449199466-6081-10-git-send-email-annie.wang@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7765561/mbox/"
   >mbox</a>
|
   <a href="/patch/7765561/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7765561/">/patch/7765561/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 46C76BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Dec 2015 03:59:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id D6D37205B7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Dec 2015 03:59:48 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 52093205E4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Dec 2015 03:59:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754701AbbLDD7p (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 3 Dec 2015 22:59:45 -0500
Received: from mail-by2on0071.outbound.protection.outlook.com
	([207.46.100.71]:36992
	&quot;EHLO na01-by2-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750831AbbLDD7k (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 3 Dec 2015 22:59:40 -0500
Received: from CY1PR1201CA0022.namprd12.prod.outlook.com (10.169.17.160) by
	BY2PR12MB0712.namprd12.prod.outlook.com (10.163.113.22) with
	Microsoft SMTP
	Server (TLS) id 15.1.331.20; Fri, 4 Dec 2015 03:26:51 +0000
Received: from CO1NAM03FT032.eop-NAM03.prod.protection.outlook.com
	(2a01:111:f400:7e48::204) by CY1PR1201CA0022.outlook.office365.com
	(2a01:111:e400:5b9a::32) with Microsoft SMTP Server (TLS) id
	15.1.337.19 via Frontend Transport; Fri, 4 Dec 2015 03:26:51 +0000
Authentication-Results: spf=none (sender IP is 165.204.84.221)
	smtp.mailfrom=amd.com; 8bytes.org; dkim=none (message not signed)
	header.d=none; 8bytes.org;
	dmarc=permerror action=none header.from=amd.com; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
Received: from atltwp01.amd.com (165.204.84.221) by
	CO1NAM03FT032.mail.protection.outlook.com (10.152.80.173) with
	Microsoft SMTP Server id 15.1.346.13 via Frontend Transport;
	Fri, 4 Dec 2015 03:26:50 +0000
X-WSS-ID: 0NYTDKO-07-29Z-02
X-M-MSG: 
Received: from satlvexedge02.amd.com (satlvexedge02.amd.com [10.177.96.29])
	(using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by atltwp01.amd.com (Axway MailGate 5.3.1) with ESMTPS id 25D19CAF028;
	Thu,  3 Dec 2015 22:26:47 -0500 (EST)
Received: from SATLEXDAG06.amd.com (10.181.40.13) by SATLVEXEDGE02.amd.com
	(10.177.96.29) with Microsoft SMTP Server (TLS) id 14.3.195.1;
	Thu, 3 Dec 2015 21:27:04 -0600
Received: from SCYBEXDAG03.amd.com (10.34.11.13) by satlexdag06.amd.com
	(10.181.40.13) with Microsoft SMTP Server (TLS) id 14.3.266.1;
	Thu, 3 Dec 2015 22:26:46 -0500
Received: from annwang-Gardenia.amd.com (10.237.75.242) by
	SCYBEXDAG03.amd.com
	(10.34.11.13) with Microsoft SMTP Server id 14.3.266.1;
	Fri, 4 Dec 2015 11:26:42 +0800
From: Wang Hongcheng &lt;annie.wang@amd.com&gt;
To: Vinod Koul &lt;vinod.koul@intel.com&gt;,
	Mika Westerberg &lt;mika.westerberg@linux.intel.com&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Greg Kroah-Hartman&quot; &lt;gregkh@linuxfoundation.org&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rjw@rjwysocki.net&gt;
CC: &lt;linux-acpi@vger.kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;linux-serial@vger.kernel.org&gt;, &lt;dmaengine@vger.kernel.org&gt;,
	&lt;iommu@lists.linux-foundation.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Huang Rui &lt;ray.huang@amd.com&gt;,
	Wan Zongshun &lt;vincent.wan@amd.com&gt;, Ken Xue &lt;ken.xue@amd.com&gt;,
	Tony Li &lt;tony.li@amd.com&gt;, Wan Zongshun &lt;Vincent.Wan@amd.com&gt;
Subject: [PATCH 9/9] iommu/amd: Add ACPI HID named devices IOMMU driver
	support
Date: Fri, 4 Dec 2015 11:24:26 +0800
Message-ID: &lt;1449199466-6081-10-git-send-email-annie.wang@amd.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1449199466-6081-1-git-send-email-annie.wang@amd.com&gt;
References: &lt;1449199466-6081-1-git-send-email-annie.wang@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-EOPAttributedMessage: 0
X-Forefront-Antispam-Report: CIP:165.204.84.221; CTRY:US; IPV:NLI; EFV:NLI;
	SFV:NSPM;
	SFS:(10009020)(6009001)(2980300002)(428002)(189002)(199003)(36756003)(5890100001)(106466001)(105586002)(76176999)(11100500001)(19580405001)(19580395003)(86362001)(586003)(50986999)(92566002)(101416001)(50466002)(87936001)(189998001)(5001770100001)(5003940100001)(1220700001)(1096002)(33646002)(53416004)(48376002)(47776003)(50226001)(5003600100002)(2950100001)(5008740100001)(229853001)(97736004)(77096005)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BY2PR12MB0712;
	H:atltwp01.amd.com; FPR:; SPF:None; PTR:InfoDomainNonexistent;
	MX:1; A:1; LANG:en; 
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0712;
	2:VpN7iejM/Q6ErgbzeIkDtgDhIyAQEsoZCvY3iDP/rAsz+VKv/HeWGPOt/ZAQeQmkrsacYmrs2OZvymXKN3WhP+U2QiZknM1BTNzYQtZx+ELuD6JcHFMCD8t1Jkcrcc974+C5hrCncrGDCZD9pQY1sA==;
	3:XMomqzqDZ/cBzU6J0z6ySK/NEIcmZSH8zRr3Dm6Tx3+LdK92sw5gOZ2kiZHFKcW78NHofvTfvBdd8UzIQqfcrSn5V77XjvEEsC0kfeFQsmIx30urHKD0ECJJtB00e8Yf25yvVZgu5SYKmD1B96uzPuFJEd7XsSmf6UyYsQ7X92f2GYM0+DsyAC9WdfhJ5htGcBy0+i1e9uepMfWPCVwqb7ZrY1WuZ2htdRTYEeftsWI=;
	25:BhsHTxv4bBiXlZZjPIXD9As90W1ClkwVklBCbwyus+wihMG+oFrEVjIMdjfEHB6KGdciXzaotbSTKuIpXo7Yet9grureFp7iKHTib6QmIiAnCAbTYF0emQgvj4c5P+0GL4oHhtV5wLsgsZktON3g81UEoRxvhlhKMmCDWLqfn6oNskQTdF4G/x7/X3Meb+4Ez7gAGZhAMf2g7mY72dg67WOwWGbvIT09oTR8Jzge5gguh3cWvQ32zQvRDQWVSMr26dANIqDYX+ToeHrMAbQ3UA==
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:BY2PR12MB0712;
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0712;
	20:IzEtawh9CEZU/EpU8CDMUwkIJ9vWIqJPdNpshMYszpT0x6oAeYNmeYPDXYpaPHkrQZwzkoW75psbRhZl+EXbKS4nn7hQR7PyfIcLV14mVxnv6fhUMFeDcVhowCnINWpqsNQmLf+LSrRA775pd1E17+LIrUHLyEfcDVpZr+noy2qHJurHIvtmBZLbH/M/ssndiwVkqZ6r/X8sPxDYSUgK1+w4zV4U79D0Ko98JdPI6CvXXpjaKnq6hM+dmlPqF8a5iR/e1Pmo7iGkIqGVAjBJ0q9ugT5ffAaF/Ek8oJa0vdI2tZEt2wInvOf5UPmpyCWVKcCSJvaM9oJhK0a3f/PYtOwI7OzhKFgpxJrlJl8LBWaov4N71gedZkY8dfj7jZCn29aVl3mZJA9/byvb/OFxdM7l9gJMBjVNrJFmqyFjovKMNmoC2OARQKZog7yakTlSLc28KsgSehMYdnqLQJCzhoo69QGJ1k64ESi/v+o0IV3T9LMn8YrDdorLB7BLh22G;
	4:PVopn7a1wn/Y+wcI/k0ZPBpOZu+2eDzbPm7JpYA3iialtYWc/fPBsISK4hTlK9NnJ8CwUrIO4UE/SojrprxMilxCM5V6ZuZBsGSiiqHbfKc/RkJX7j2teiyBZFsu/0T02zmLLfUFtXNMl8ikGHT/At087dhXlrVon9CgiwrPrE3iYhQwAWAKtePIw5RIMxkuLCQJD07dwVtJzgHdIFZ3rroDlWuwBKg+qq88NwyQ2mTEopsK6uW7JIPOPp2xU+EdB40509OyAdGP//v5FnDDGZLSG454FgeYKCSGG0MxxGqmmOipuWv6dOJZqI5E43gEtQDPmXpBemPf+G07F7O8khg4oMNVHPLgZsCOxmcpCPybAT7SZkOchX8/49oWXKRveCcATjnLUgAYlrirfpU7bfhabO98IM0dt963Kd
	ky7jI=
X-Microsoft-Antispam-PRVS: &lt;BY2PR12MB071256B229621CC4BC0081D0810C0@BY2PR12MB0712.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(601004)(2401047)(8121501046)(520078)(5005006)(10201501046)(3002001);
	SRVR:BY2PR12MB0712; BCL:0; PCL:0; RULEID:; SRVR:BY2PR12MB0712;
X-Forefront-PRVS: 07807C55DC
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; BY2PR12MB0712;
	23:r375beOZH+02ZeFlRc2c66MB+bd55qSLV8SxCAx04?=
	=?us-ascii?Q?C+ZLwCvUt9sXc5ic4LWcNoQUejb5JWk8l/yI4/c5pq9Qa/MTs9HYlG+7MGVR?=
	=?us-ascii?Q?phO8WupNEXejzJ9P6VqJCHBLxqLltl3YOBrGqJayBmwJKF2sXmyCIwPlsBxo?=
	=?us-ascii?Q?h0xIlFreh4LLDpIeZqeD5+WC+/c/8I/RtcvZi+6bofXtGNjO5D/VPZv+yLfm?=
	=?us-ascii?Q?K8LKmMMt24Kdh1dJuzIyonR1duDm9yK37GJEQIrHb6GJy/UlsYvDReTBgvK6?=
	=?us-ascii?Q?IFfSx+9hkBXTuSud50n7u5pgXsA7cgd6si62Qb1P5PKHIwDgB5CEBxT8h8va?=
	=?us-ascii?Q?4hxuvoTi16BQKc1ycOacSjD6ZMufJZqyyHMLQ6MZ9xiRVPBWw6AiKGA8B745?=
	=?us-ascii?Q?oRqaYQR8QRvJxktWB7IGBnIjyPfra/UyEFtyk7D+cQBfs64P52emZgC+Ftnd?=
	=?us-ascii?Q?ZqmKio/QPDJPOLWTAus3+F9BAiyjKhrVocN8/NExYWrK/vi/IG92k6+m5MJH?=
	=?us-ascii?Q?gjGvGGLFaRSabmitIVI9aEjBkS+WzB7+5clqrlW8CEtZKYio8i8gT/WWy5EI?=
	=?us-ascii?Q?m/DWXOgXX2dixr/uleH/KNLN1gMecdRGvKZOT6Dj00VV2KVP+y99C9hC3DVj?=
	=?us-ascii?Q?PQdZxBrh+AHxJhADakwH+EHQjXpWlqwDpQTmoNLZi3IboJZv12ljTr3yiGUK?=
	=?us-ascii?Q?JQO41xYXTZaAfDJCRjQ8Y6nbLu4Cu9My7gjKbN2Ip2KcV/D8H3EF+Df+YUJn?=
	=?us-ascii?Q?ZfsQo8uZziFfQTXFMZM7VWOxcskecxLfRNSXIpxugUOpZlFQc4dy/ECVre+i?=
	=?us-ascii?Q?tb4TF9qNZVVXYckQavpUxtvQ9ADgEMjABr8D2n7fdpgxDlFFD90muBFHcjPn?=
	=?us-ascii?Q?VciLkItHxuwLnAzKxtf9BQDld6RoayMueSFePPt7seMVlpj4t+CzpeplCLRj?=
	=?us-ascii?Q?+WVJPPSC8NNn0aPjL9p2WKMV6tE2YuftKNTb0zRsb1XVR5uCxezo4cLgRLPv?=
	=?us-ascii?Q?yP3a0+2iQQmcuzHLk/237BS?=
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0712;
	5:ut11UXuzCAQlLxh5aU7E//Q6yOy0QbKLjaxAqZ84JBIKW/DZXDbB7Tnnj7lzRYuWJb3dMJ3QnkjSxZRt+S/Hbel4iQswANTAvw0ORni7nhf3yA5ojjW9ehtCJpA7pi0vj0RRGIRj3NrxgIU0jNrTDQ==;
	24:u6Sf/tD3YYtNA2bmGhe2Y1baLWix8E3dAqWv0ZrldHdoR3m0ZVW+CSsqQXVwxfAtMIvY7mfJFm84zFjZq3U3F5j6RU1hVmeCacf9D2fkkDE=;
	20:tGxU9SxOH/kklnVX5NqDc6bj0Sx1z7OSLbUDfGI8FVVm4pNDwh5Gt0+t57Kac1z/myn3JN21L8CZCub8efjJO8ZdpvImiKxQZ1FSldSPH6OH8WZIuLutmLvN3mNAPrK8Sza9fRbaNWzn0B1LJBtzQVHMN1xqDHHLhbo+QDPl+QKL6ceoDqWM8ZKY8S8S6IdHPYgIbnInZhjRzAY3zXpzkSlB4wvYVvY9NGFlgTq8zxJpKxpEp9gM07QiL28qlV/7
SpamDiagnosticOutput: 1:23
SpamDiagnosticMetadata: NSPM
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 04 Dec 2015 03:26:50.3612
	(UTC)
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;
	Ip=[165.204.84.221]; Helo=[atltwp01.amd.com]
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BY2PR12MB0712
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=148531">Wang Hongcheng</a> - Dec. 4, 2015, 3:24 a.m.</div>
<pre class="content">
<span class="from">From: Wan Zongshun &lt;Vincent.Wan@amd.com&gt;</span>

AMD UART is a ACPI HID named device, it also is none-pci device,
currently, iommu driver only supports pci device, so UART DMA did
not work at current AMD IOMMU driver.

AMD reused 8250 serial driver and ARM PL330 DMA engine driver,
since AMD uart and dma ips are compatible with 8250 and pl330.

When those non-pci functions do DMA, they still generate some
sort of fake PCI like BDF(bus:dev:fun) id with the request to
work properly with IOMMU.

According to above descriptions, this patch was designed:

1. Add ivrs_acpihid kernel boot parameter interface, map HID:UID
to BDF id, those ids were hardcoded by AMD.
2. We never create new group for none-pci device, just adhere them
to existing group that has same bus and device id.
3. Add amd iommu callbacks for amba type bus, since pl330 driver
transferred amba_device-&gt;dev into dma_map_single.
<span class="signed-off-by">
Signed-off-by: Wan Zongshun &lt;Vincent.Wan@amd.com&gt;</span>
---
 drivers/iommu/amd_iommu.c       | 165 +++++++++++++++++++++++++++++++++++-----
 drivers/iommu/amd_iommu_init.c  | 123 +++++++++++++++++++++++++++++-
 drivers/iommu/amd_iommu_types.h |  11 +++
 3 files changed, 279 insertions(+), 20 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 8b2be1e..13581c0 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -35,6 +35,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/msi.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
 #include &lt;linux/irqdomain.h&gt;
<span class="p_add">+#include &lt;linux/acpi.h&gt;</span>
 #include &lt;asm/irq_remapping.h&gt;
 #include &lt;asm/io_apic.h&gt;
 #include &lt;asm/apic.h&gt;
<span class="p_chunk">@@ -71,6 +72,7 @@</span> <span class="p_context"> static DEFINE_SPINLOCK(dev_data_list_lock);</span>
 
 LIST_HEAD(ioapic_map);
 LIST_HEAD(hpet_map);
<span class="p_add">+LIST_HEAD(acpihid_map);</span>
 
 /*
  * Domain for untranslated devices - only allocated
<span class="p_chunk">@@ -174,13 +176,71 @@</span> <span class="p_context"> static struct iommu_dev_data *find_dev_data(u16 devid)</span>
 	return dev_data;
 }
 
<span class="p_del">-static inline u16 get_device_id(struct device *dev)</span>
<span class="p_add">+static inline int match_hid_uid(struct device *dev,</span>
<span class="p_add">+					struct acpihid_map *entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const u8 *hid, *uid;</span>
<span class="p_add">+</span>
<span class="p_add">+	hid = acpi_device_hid(ACPI_COMPANION(dev));</span>
<span class="p_add">+	uid = acpi_device_uid(ACPI_COMPANION(dev));</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!strcmp(hid, entry-&gt;hid) &amp;&amp; !strcmp(uid, entry-&gt;uid))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	return -ENODEV;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u16 get_pci_device_id(struct device *dev)</span>
 {
 	struct pci_dev *pdev = to_pci_dev(dev);
 
 	return PCI_DEVID(pdev-&gt;bus-&gt;number, pdev-&gt;devfn);
 }
 
<span class="p_add">+static inline int get_acpihid_device_id(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct acpihid_map *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(entry, &amp;acpihid_map, list) {</span>
<span class="p_add">+		if (!match_hid_uid(dev, entry))</span>
<span class="p_add">+			return entry-&gt;devid;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return -EINVAL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u16 get_device_id(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (dev_is_pci(dev))</span>
<span class="p_add">+		return get_pci_device_id(dev);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		return get_acpihid_device_id(dev);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void find_acpihid_group_by_rootid(struct device *dev,</span>
<span class="p_add">+					struct iommu_group *group)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct acpihid_map *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(entry, &amp;acpihid_map, list) {</span>
<span class="p_add">+		if (entry-&gt;group)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (entry-&gt;root_devid == get_device_id(dev))</span>
<span class="p_add">+			entry-&gt;group = group;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct iommu_group *find_acpihid_group_by_devid(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct acpihid_map *entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(entry, &amp;acpihid_map, list) {</span>
<span class="p_add">+		if (!match_hid_uid(dev, entry))</span>
<span class="p_add">+			return entry-&gt;group;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct iommu_dev_data *get_dev_data(struct device *dev)
 {
 	return dev-&gt;archdata.iommu;
<span class="p_chunk">@@ -260,7 +320,7 @@</span> <span class="p_context"> static bool check_device(struct device *dev)</span>
 		return false;
 
 	/* No PCI device */
<span class="p_del">-	if (!dev_is_pci(dev))</span>
<span class="p_add">+	if (!dev_is_pci(dev) &amp;&amp; (get_acpihid_device_id(dev) &lt; 0))</span>
 		return false;
 
 	devid = get_device_id(dev);
<span class="p_chunk">@@ -285,6 +345,8 @@</span> <span class="p_context"> static void init_iommu_group(struct device *dev)</span>
 	if (IS_ERR(group))
 		return;
 
<span class="p_add">+	find_acpihid_group_by_rootid(dev, group);</span>
<span class="p_add">+</span>
 	domain = iommu_group_default_domain(group);
 	if (!domain)
 		goto out;
<span class="p_chunk">@@ -2071,29 +2133,33 @@</span> <span class="p_context"> static bool pci_pri_tlp_required(struct pci_dev *pdev)</span>
 static int attach_device(struct device *dev,
 			 struct protection_domain *domain)
 {
<span class="p_del">-	struct pci_dev *pdev = to_pci_dev(dev);</span>
 	struct iommu_dev_data *dev_data;
 	unsigned long flags;
 	int ret;
 
 	dev_data = get_dev_data(dev);
 
<span class="p_del">-	if (domain-&gt;flags &amp; PD_IOMMUV2_MASK) {</span>
<span class="p_del">-		if (!dev_data-&gt;passthrough)</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_add">+	if (dev_is_pci(dev)) {</span>
<span class="p_add">+</span>
<span class="p_add">+		struct pci_dev *pdev = to_pci_dev(dev);</span>
 
<span class="p_del">-		if (dev_data-&gt;iommu_v2) {</span>
<span class="p_del">-			if (pdev_iommuv2_enable(pdev) != 0)</span>
<span class="p_add">+		if (domain-&gt;flags &amp; PD_IOMMUV2_MASK) {</span>
<span class="p_add">+			if (!dev_data-&gt;passthrough)</span>
 				return -EINVAL;
 
<span class="p_add">+			if (dev_data-&gt;iommu_v2) {</span>
<span class="p_add">+				if (pdev_iommuv2_enable(pdev) != 0)</span>
<span class="p_add">+					return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+				dev_data-&gt;ats.enabled = true;</span>
<span class="p_add">+				dev_data-&gt;ats.qdep    = pci_ats_queue_depth(pdev);</span>
<span class="p_add">+				dev_data-&gt;pri_tlp     = pci_pri_tlp_required(pdev);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		} else if (amd_iommu_iotlb_sup &amp;&amp;</span>
<span class="p_add">+			   pci_enable_ats(pdev, PAGE_SHIFT) == 0) {</span>
 			dev_data-&gt;ats.enabled = true;
 			dev_data-&gt;ats.qdep    = pci_ats_queue_depth(pdev);
<span class="p_del">-			dev_data-&gt;pri_tlp     = pci_pri_tlp_required(pdev);</span>
 		}
<span class="p_del">-	} else if (amd_iommu_iotlb_sup &amp;&amp;</span>
<span class="p_del">-		   pci_enable_ats(pdev, PAGE_SHIFT) == 0) {</span>
<span class="p_del">-		dev_data-&gt;ats.enabled = true;</span>
<span class="p_del">-		dev_data-&gt;ats.qdep    = pci_ats_queue_depth(pdev);</span>
 	}
 
 	write_lock_irqsave(&amp;amd_iommu_devtable_lock, flags);
<span class="p_chunk">@@ -2152,14 +2218,58 @@</span> <span class="p_context"> static void detach_device(struct device *dev)</span>
 	__detach_device(dev_data);
 	write_unlock_irqrestore(&amp;amd_iommu_devtable_lock, flags);
 
<span class="p_del">-	if (domain-&gt;flags &amp; PD_IOMMUV2_MASK &amp;&amp; dev_data-&gt;iommu_v2)</span>
<span class="p_del">-		pdev_iommuv2_disable(to_pci_dev(dev));</span>
<span class="p_del">-	else if (dev_data-&gt;ats.enabled)</span>
<span class="p_del">-		pci_disable_ats(to_pci_dev(dev));</span>
<span class="p_add">+	if (dev_is_pci(dev)) {</span>
<span class="p_add">+</span>
<span class="p_add">+		if (domain-&gt;flags &amp; PD_IOMMUV2_MASK &amp;&amp; dev_data-&gt;iommu_v2)</span>
<span class="p_add">+			pdev_iommuv2_disable(to_pci_dev(dev));</span>
<span class="p_add">+		else if (dev_data-&gt;ats.enabled)</span>
<span class="p_add">+			pci_disable_ats(to_pci_dev(dev));</span>
<span class="p_add">+	}</span>
 
 	dev_data-&gt;ats.enabled = false;
 }
 
<span class="p_add">+static int init_acpihid_device_group(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct dma_ops_domain *dma_domain;</span>
<span class="p_add">+	struct iommu_dev_data *dev_data;</span>
<span class="p_add">+	struct iommu_domain *domain;</span>
<span class="p_add">+	struct iommu_group *group;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (dev-&gt;archdata.iommu)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev_data = find_dev_data(get_device_id(dev));</span>
<span class="p_add">+	if (!dev_data)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;archdata.iommu = dev_data;</span>
<span class="p_add">+</span>
<span class="p_add">+	group = find_acpihid_group_by_devid(dev);</span>
<span class="p_add">+	if (!group)</span>
<span class="p_add">+		return -ENXIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = iommu_group_add_device(group, dev);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	domain = iommu_group_default_domain(group);</span>
<span class="p_add">+	if (!domain)</span>
<span class="p_add">+		return -ENXIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	dma_domain = to_pdomain(domain)-&gt;priv;</span>
<span class="p_add">+</span>
<span class="p_add">+	init_unity_mappings_for_device(dev, dma_domain);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (domain-&gt;type == IOMMU_DOMAIN_IDENTITY)</span>
<span class="p_add">+		dev_data-&gt;passthrough = true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		dev-&gt;archdata.dma_ops = &amp;amd_iommu_dma_ops;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int amd_iommu_add_device(struct device *dev)
 {
 	struct iommu_dev_data *dev_data;
<span class="p_chunk">@@ -2174,6 +2284,15 @@</span> <span class="p_context"> static int amd_iommu_add_device(struct device *dev)</span>
 	devid = get_device_id(dev);
 	iommu = amd_iommu_rlookup_table[devid];
 
<span class="p_add">+	if (!dev_is_pci(dev)) {</span>
<span class="p_add">+		ret = init_acpihid_device_group(dev);</span>
<span class="p_add">+		if (ret) {</span>
<span class="p_add">+			iommu_ignore_device(dev);</span>
<span class="p_add">+			dev-&gt;archdata.dma_ops = &amp;nommu_dma_ops;</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	ret = iommu_init_device(dev);
 	if (ret) {
 		if (ret != -ENOTSUPP)
<span class="p_chunk">@@ -2758,7 +2877,17 @@</span> <span class="p_context"> static struct dma_map_ops amd_iommu_dma_ops = {</span>
 
 int __init amd_iommu_init_api(void)
 {
<span class="p_del">-	return bus_set_iommu(&amp;pci_bus_type, &amp;amd_iommu_ops);</span>
<span class="p_add">+	int err;</span>
<span class="p_add">+</span>
<span class="p_add">+	err = bus_set_iommu(&amp;pci_bus_type, &amp;amd_iommu_ops);</span>
<span class="p_add">+	if (err)</span>
<span class="p_add">+		return err;</span>
<span class="p_add">+#ifdef CONFIG_ARM_AMBA</span>
<span class="p_add">+	err = bus_set_iommu(&amp;amba_bustype, &amp;amd_iommu_ops);</span>
<span class="p_add">+	if (err)</span>
<span class="p_add">+		return err;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	return 0;</span>
 }
 
 int __init amd_iommu_init_dma_ops(void)
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">index 013bdff..058cf5b 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_init.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_init.c</span>
<span class="p_chunk">@@ -58,6 +58,7 @@</span> <span class="p_context"></span>
 #define IVHD_DEV_EXT_SELECT             0x46
 #define IVHD_DEV_EXT_SELECT_RANGE       0x47
 #define IVHD_DEV_SPECIAL		0x48
<span class="p_add">+#define IVHD_DEV_ACPI_HID		0xf0</span>
 
 #define IVHD_SPECIAL_IOAPIC		1
 #define IVHD_SPECIAL_HPET		2
<span class="p_chunk">@@ -111,6 +112,11 @@</span> <span class="p_context"> struct ivhd_entry {</span>
 	u16 devid;
 	u8 flags;
 	u32 ext;
<span class="p_add">+	u32 hidh;</span>
<span class="p_add">+	u64 cid;</span>
<span class="p_add">+	u8 uidf;</span>
<span class="p_add">+	u8 uidl;</span>
<span class="p_add">+	u8 uid;</span>
 } __attribute__((packed));
 
 /*
<span class="p_chunk">@@ -218,8 +224,12 @@</span> <span class="p_context"> enum iommu_init_state {</span>
 #define EARLY_MAP_SIZE		4
 static struct devid_map __initdata early_ioapic_map[EARLY_MAP_SIZE];
 static struct devid_map __initdata early_hpet_map[EARLY_MAP_SIZE];
<span class="p_add">+static struct acpihid_map __initdata early_acpihid_map[EARLY_MAP_SIZE];</span>
<span class="p_add">+</span>
 static int __initdata early_ioapic_map_size;
 static int __initdata early_hpet_map_size;
<span class="p_add">+static int __initdata early_acpihid_map_size;</span>
<span class="p_add">+</span>
 static bool __initdata cmdline_maps;
 
 static enum iommu_init_state init_state = IOMMU_START_STATE;
<span class="p_chunk">@@ -720,6 +730,45 @@</span> <span class="p_context"> static int __init add_special_device(u8 type, u8 id, u16 *devid, bool cmd_line)</span>
 	return 0;
 }
 
<span class="p_add">+static int __init add_acpi_hid_device(u8 *hid,</span>
<span class="p_add">+			u8 *uid, u16 *devid, bool cmd_line)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct acpihid_map *entry;</span>
<span class="p_add">+	struct list_head *list;</span>
<span class="p_add">+</span>
<span class="p_add">+	list = &amp;acpihid_map;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(entry, list, list) {</span>
<span class="p_add">+		if (!(!strcmp(entry-&gt;hid, hid) &amp;&amp; !strcmp(entry-&gt;uid, uid)</span>
<span class="p_add">+							&amp;&amp; entry-&gt;cmd_line))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		pr_info(&quot;AMD-Vi: Command-line override present for hid:%s uid:%s - ignoring\n&quot;, hid, uid);</span>
<span class="p_add">+</span>
<span class="p_add">+		*devid = entry-&gt;devid;</span>
<span class="p_add">+</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	entry = kzalloc(sizeof(*entry), GFP_KERNEL);</span>
<span class="p_add">+	if (!entry)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	memcpy(entry-&gt;uid, uid, 2);</span>
<span class="p_add">+	memcpy(entry-&gt;hid, hid, 9);</span>
<span class="p_add">+</span>
<span class="p_add">+	entry-&gt;devid	= *devid;</span>
<span class="p_add">+	entry-&gt;cmd_line	= cmd_line;</span>
<span class="p_add">+	entry-&gt;root_devid = (entry-&gt;devid &amp; (~0x7));</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;AMD-Vi:Command-line, add hid:%s,uid: %s, root_devid:%d\n&quot;,</span>
<span class="p_add">+				entry-&gt;hid, entry-&gt;uid, entry-&gt;root_devid);</span>
<span class="p_add">+</span>
<span class="p_add">+	list_add_tail(&amp;entry-&gt;list, list);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int __init add_early_maps(void)
 {
 	int i, ret;
<span class="p_chunk">@@ -742,6 +791,15 @@</span> <span class="p_context"> static int __init add_early_maps(void)</span>
 			return ret;
 	}
 
<span class="p_add">+	for (i = 0; i &lt; early_acpihid_map_size; ++i) {</span>
<span class="p_add">+		ret = add_acpi_hid_device(early_acpihid_map[i].hid,</span>
<span class="p_add">+					 early_acpihid_map[i].uid,</span>
<span class="p_add">+					 &amp;early_acpihid_map[i].devid,</span>
<span class="p_add">+					 early_acpihid_map[i].cmd_line);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -783,7 +841,6 @@</span> <span class="p_context"> static int __init init_iommu_from_acpi(struct amd_iommu *iommu,</span>
 	struct ivhd_entry *e;
 	int ret;
 
<span class="p_del">-</span>
 	ret = add_early_maps();
 	if (ret)
 		return ret;
<span class="p_chunk">@@ -799,7 +856,6 @@</span> <span class="p_context"> static int __init init_iommu_from_acpi(struct amd_iommu *iommu,</span>
 	p += sizeof(struct ivhd_header);
 	end += h-&gt;length;
 
<span class="p_del">-</span>
 	while (p &lt; end) {
 		e = (struct ivhd_entry *)p;
 		switch (e-&gt;type) {
<span class="p_chunk">@@ -954,6 +1010,40 @@</span> <span class="p_context"> static int __init init_iommu_from_acpi(struct amd_iommu *iommu,</span>
 
 			break;
 		}
<span class="p_add">+		case IVHD_DEV_ACPI_HID: {</span>
<span class="p_add">+			u16 devid;</span>
<span class="p_add">+			u8 hid[9];</span>
<span class="p_add">+			u8 uid[2];</span>
<span class="p_add">+			int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+			devid  = e-&gt;devid;</span>
<span class="p_add">+			flags = e-&gt;flags;</span>
<span class="p_add">+</span>
<span class="p_add">+			memcpy(hid, (u8 *)(&amp;e-&gt;ext), 8);</span>
<span class="p_add">+			hid[8] = &#39;\0&#39;;</span>
<span class="p_add">+</span>
<span class="p_add">+			memcpy(uid, (u8 *)(&amp;e-&gt;uid), 1);</span>
<span class="p_add">+			uid[1] = &#39;\0&#39;;</span>
<span class="p_add">+</span>
<span class="p_add">+			DUMP_printk(&quot;  DEV_ACPI_HID(%s[%s])\t\tdevid: %02x:%02x.%x\n&quot;,</span>
<span class="p_add">+				    hid, uid,</span>
<span class="p_add">+				    PCI_BUS_NUM(devid),</span>
<span class="p_add">+				    PCI_SLOT(devid),</span>
<span class="p_add">+				    PCI_FUNC(devid));</span>
<span class="p_add">+</span>
<span class="p_add">+			ret = add_acpi_hid_device(hid, uid, &amp;devid, false);</span>
<span class="p_add">+			if (ret)</span>
<span class="p_add">+				return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * add_special_device might update the devid in case a</span>
<span class="p_add">+			 * command-line override is present. So call</span>
<span class="p_add">+			 * set_dev_entry_from_acpi after add_special_device.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			set_dev_entry_from_acpi(iommu, devid, e-&gt;flags, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
 		default:
 			break;
 		}
<span class="p_chunk">@@ -2226,10 +2316,39 @@</span> <span class="p_context"> static int __init parse_ivrs_hpet(char *str)</span>
 	return 1;
 }
 
<span class="p_add">+static int __init parse_ivrs_acpihid(char *str)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 bus, dev, fn;</span>
<span class="p_add">+	char *hid, *uid, *p;</span>
<span class="p_add">+	char acpiid[11] = {0};</span>
<span class="p_add">+	int ret, i;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = sscanf(str, &quot;[%x:%x.%x]=%s&quot;, &amp;bus, &amp;dev, &amp;fn, acpiid);</span>
<span class="p_add">+	if (ret != 4) {</span>
<span class="p_add">+		pr_err(&quot;AMD-Vi: Invalid command line: ivrs_acpihid(%s)\n&quot;, str);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	p = acpiid;</span>
<span class="p_add">+	hid = strsep(&amp;p, &quot;:&quot;);</span>
<span class="p_add">+	uid = p;</span>
<span class="p_add">+</span>
<span class="p_add">+	i = early_acpihid_map_size++;</span>
<span class="p_add">+	memcpy(early_acpihid_map[i].hid, hid, strlen(hid));</span>
<span class="p_add">+	memcpy(early_acpihid_map[i].uid, uid, strlen(uid));</span>
<span class="p_add">+</span>
<span class="p_add">+	early_acpihid_map[i].devid =</span>
<span class="p_add">+		((bus &amp; 0xff) &lt;&lt; 8) | ((dev &amp; 0x1f) &lt;&lt; 3) | (fn &amp; 0x7);</span>
<span class="p_add">+	early_acpihid_map[i].cmd_line	= true;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 __setup(&quot;amd_iommu_dump&quot;,	parse_amd_iommu_dump);
 __setup(&quot;amd_iommu=&quot;,		parse_amd_iommu_options);
 __setup(&quot;ivrs_ioapic&quot;,		parse_ivrs_ioapic);
 __setup(&quot;ivrs_hpet&quot;,		parse_ivrs_hpet);
<span class="p_add">+__setup(&quot;ivrs_acpihid&quot;,		parse_ivrs_acpihid);</span>
 
 IOMMU_INIT_FINISH(amd_iommu_detect,
 		  gart_iommu_hole_init,
<span class="p_header">diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">index b08cf57..6770218 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu_types.h</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu_types.h</span>
<span class="p_chunk">@@ -567,6 +567,16 @@</span> <span class="p_context"> struct amd_iommu {</span>
 #endif
 };
 
<span class="p_add">+struct acpihid_map {</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+	u8 uid[2];</span>
<span class="p_add">+	u8 hid[9];</span>
<span class="p_add">+	u16 devid;</span>
<span class="p_add">+	u16 root_devid;</span>
<span class="p_add">+	bool cmd_line;</span>
<span class="p_add">+	struct iommu_group *group;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct devid_map {
 	struct list_head list;
 	u8 id;
<span class="p_chunk">@@ -577,6 +587,7 @@</span> <span class="p_context"> struct devid_map {</span>
 /* Map HPET and IOAPIC ids to the devid used by the IOMMU */
 extern struct list_head ioapic_map;
 extern struct list_head hpet_map;
<span class="p_add">+extern struct list_head acpihid_map;</span>
 
 /*
  * List with all IOMMUs in the system. This list is not locked because it is

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



