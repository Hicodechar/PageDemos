
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.14,167/193] powerpc/64s/radix: Fix 128TB-512TB virtual address boundary case allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.14,167/193] powerpc/64s/radix: Fix 128TB-512TB virtual address boundary case allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 28, 2017, 10:26 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171128100621.423659887@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10079737/mbox/"
   >mbox</a>
|
   <a href="/patch/10079737/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10079737/">/patch/10079737/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D1A5460234 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Nov 2017 11:01:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B962929194
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Nov 2017 11:01:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id ABB0A291DD; Tue, 28 Nov 2017 11:01:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F114C29194
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 28 Nov 2017 11:01:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755251AbdK1LBU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 28 Nov 2017 06:01:20 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:35240 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933819AbdK1Kuw (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 28 Nov 2017 05:50:52 -0500
Received: from localhost (LFbn-1-12253-150.w90-92.abo.wanadoo.fr
	[90.92.67.150])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id D54AEBAC;
	Tue, 28 Nov 2017 10:50:51 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Nicholas Piggin &lt;npiggin@gmail.com&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Michael Ellerman &lt;mpe@ellerman.id.au&gt;
Subject: [PATCH 4.14 167/193] powerpc/64s/radix: Fix 128TB-512TB virtual
	address boundary case allocation
Date: Tue, 28 Nov 2017 11:26:54 +0100
Message-Id: &lt;20171128100621.423659887@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.0
In-Reply-To: &lt;20171128100613.638270407@linuxfoundation.org&gt;
References: &lt;20171128100613.638270407@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Nov. 28, 2017, 10:26 a.m.</div>
<pre class="content">
4.14-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Nicholas Piggin &lt;npiggin@gmail.com&gt;</span>

commit 85e3f1adcb9d49300b0a943bb93f9604be375bfb upstream.

Radix VA space allocations test addresses against mm-&gt;task_size which
is 512TB, even in cases where the intention is to limit allocation to
below 128TB.

This results in mmap with a hint address below 128TB but address +
length above 128TB succeeding when it should fail (as hash does after
the previous patch).

Set the high address limit to be considered up front, and base
subsequent allocation checks on that consistently.

Fixes: f4ea6dcb08ea (&quot;powerpc/mm: Enable mappings above 128TB&quot;)
<span class="signed-off-by">Signed-off-by: Nicholas Piggin &lt;npiggin@gmail.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michael Ellerman &lt;mpe@ellerman.id.au&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/powerpc/mm/hugetlbpage-radix.c |   26 +++++++++++------
 arch/powerpc/mm/mmap.c              |   55 +++++++++++++++++++++---------------
 2 files changed, 50 insertions(+), 31 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage-radix.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage-radix.c</span>
<span class="p_chunk">@@ -49,17 +49,28 @@</span> <span class="p_context"> radix__hugetlb_get_unmapped_area(struct</span>
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *vma;
 	struct hstate *h = hstate_file(file);
<span class="p_add">+	int fixed = (flags &amp; MAP_FIXED);</span>
<span class="p_add">+	unsigned long high_limit;</span>
 	struct vm_unmapped_area_info info;
 
<span class="p_del">-	if (unlikely(addr &gt; mm-&gt;context.addr_limit &amp;&amp; addr &lt; TASK_SIZE))</span>
<span class="p_del">-		mm-&gt;context.addr_limit = TASK_SIZE;</span>
<span class="p_add">+	high_limit = DEFAULT_MAP_WINDOW;</span>
<span class="p_add">+	if (addr &gt;= high_limit || (fixed &amp;&amp; (addr + len &gt; high_limit)))</span>
<span class="p_add">+		high_limit = TASK_SIZE;</span>
 
 	if (len &amp; ~huge_page_mask(h))
 		return -EINVAL;
<span class="p_del">-	if (len &gt; mm-&gt;task_size)</span>
<span class="p_add">+	if (len &gt; high_limit)</span>
 		return -ENOMEM;
<span class="p_add">+	if (fixed) {</span>
<span class="p_add">+		if (addr &gt; high_limit - len)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	if (flags &amp; MAP_FIXED) {</span>
<span class="p_add">+	if (unlikely(addr &gt; mm-&gt;context.addr_limit &amp;&amp;</span>
<span class="p_add">+		     mm-&gt;context.addr_limit != TASK_SIZE))</span>
<span class="p_add">+		mm-&gt;context.addr_limit = TASK_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (fixed) {</span>
 		if (prepare_hugepage_range(file, addr, len))
 			return -EINVAL;
 		return addr;
<span class="p_chunk">@@ -68,7 +79,7 @@</span> <span class="p_context"> radix__hugetlb_get_unmapped_area(struct</span>
 	if (addr) {
 		addr = ALIGN(addr, huge_page_size(h));
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (mm-&gt;task_size - len &gt;= addr &amp;&amp;</span>
<span class="p_add">+		if (high_limit - len &gt;= addr &amp;&amp;</span>
 		    (!vma || addr + len &lt;= vm_start_gap(vma)))
 			return addr;
 	}
<span class="p_chunk">@@ -79,12 +90,9 @@</span> <span class="p_context"> radix__hugetlb_get_unmapped_area(struct</span>
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
 	info.low_limit = PAGE_SIZE;
<span class="p_del">-	info.high_limit = current-&gt;mm-&gt;mmap_base;</span>
<span class="p_add">+	info.high_limit = mm-&gt;mmap_base + (high_limit - DEFAULT_MAP_WINDOW);</span>
 	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);
 	info.align_offset = 0;
 
<span class="p_del">-	if (addr &gt; DEFAULT_MAP_WINDOW)</span>
<span class="p_del">-		info.high_limit += mm-&gt;context.addr_limit - DEFAULT_MAP_WINDOW;</span>
<span class="p_del">-</span>
 	return vm_unmapped_area(&amp;info);
 }
<span class="p_header">--- a/arch/powerpc/mm/mmap.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/mmap.c</span>
<span class="p_chunk">@@ -106,22 +106,32 @@</span> <span class="p_context"> radix__arch_get_unmapped_area(struct fil</span>
 {
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *vma;
<span class="p_add">+	int fixed = (flags &amp; MAP_FIXED);</span>
<span class="p_add">+	unsigned long high_limit;</span>
 	struct vm_unmapped_area_info info;
 
<span class="p_add">+	high_limit = DEFAULT_MAP_WINDOW;</span>
<span class="p_add">+	if (addr &gt;= high_limit || (fixed &amp;&amp; (addr + len &gt; high_limit)))</span>
<span class="p_add">+		high_limit = TASK_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (len &gt; high_limit)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+	if (fixed) {</span>
<span class="p_add">+		if (addr &gt; high_limit - len)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (unlikely(addr &gt; mm-&gt;context.addr_limit &amp;&amp;
 		     mm-&gt;context.addr_limit != TASK_SIZE))
 		mm-&gt;context.addr_limit = TASK_SIZE;
 
<span class="p_del">-	if (len &gt; mm-&gt;task_size - mmap_min_addr)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (flags &amp; MAP_FIXED)</span>
<span class="p_add">+	if (fixed)</span>
 		return addr;
 
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (mm-&gt;task_size - len &gt;= addr &amp;&amp; addr &gt;= mmap_min_addr &amp;&amp;</span>
<span class="p_add">+		if (high_limit - len &gt;= addr &amp;&amp; addr &gt;= mmap_min_addr &amp;&amp;</span>
 		    (!vma || addr + len &lt;= vm_start_gap(vma)))
 			return addr;
 	}
<span class="p_chunk">@@ -129,13 +139,9 @@</span> <span class="p_context"> radix__arch_get_unmapped_area(struct fil</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = mm-&gt;mmap_base;
<span class="p_add">+	info.high_limit = high_limit;</span>
 	info.align_mask = 0;
 
<span class="p_del">-	if (unlikely(addr &gt; DEFAULT_MAP_WINDOW))</span>
<span class="p_del">-		info.high_limit = mm-&gt;context.addr_limit;</span>
<span class="p_del">-	else</span>
<span class="p_del">-		info.high_limit = DEFAULT_MAP_WINDOW;</span>
<span class="p_del">-</span>
 	return vm_unmapped_area(&amp;info);
 }
 
<span class="p_chunk">@@ -149,37 +155,42 @@</span> <span class="p_context"> radix__arch_get_unmapped_area_topdown(st</span>
 	struct vm_area_struct *vma;
 	struct mm_struct *mm = current-&gt;mm;
 	unsigned long addr = addr0;
<span class="p_add">+	int fixed = (flags &amp; MAP_FIXED);</span>
<span class="p_add">+	unsigned long high_limit;</span>
 	struct vm_unmapped_area_info info;
 
<span class="p_add">+	high_limit = DEFAULT_MAP_WINDOW;</span>
<span class="p_add">+	if (addr &gt;= high_limit || (fixed &amp;&amp; (addr + len &gt; high_limit)))</span>
<span class="p_add">+		high_limit = TASK_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (len &gt; high_limit)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+	if (fixed) {</span>
<span class="p_add">+		if (addr &gt; high_limit - len)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (unlikely(addr &gt; mm-&gt;context.addr_limit &amp;&amp;
 		     mm-&gt;context.addr_limit != TASK_SIZE))
 		mm-&gt;context.addr_limit = TASK_SIZE;
 
<span class="p_del">-	/* requested length too big for entire address space */</span>
<span class="p_del">-	if (len &gt; mm-&gt;task_size - mmap_min_addr)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (flags &amp; MAP_FIXED)</span>
<span class="p_add">+	if (fixed)</span>
 		return addr;
 
<span class="p_del">-	/* requesting a specific address */</span>
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (mm-&gt;task_size - len &gt;= addr &amp;&amp; addr &gt;= mmap_min_addr &amp;&amp;</span>
<span class="p_del">-				(!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="p_add">+		if (high_limit - len &gt;= addr &amp;&amp; addr &gt;= mmap_min_addr &amp;&amp;</span>
<span class="p_add">+		    (!vma || addr + len &lt;= vm_start_gap(vma)))</span>
 			return addr;
 	}
 
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
 	info.low_limit = max(PAGE_SIZE, mmap_min_addr);
<span class="p_del">-	info.high_limit = mm-&gt;mmap_base;</span>
<span class="p_add">+	info.high_limit = mm-&gt;mmap_base + (high_limit - DEFAULT_MAP_WINDOW);</span>
 	info.align_mask = 0;
 
<span class="p_del">-	if (addr &gt; DEFAULT_MAP_WINDOW)</span>
<span class="p_del">-		info.high_limit += mm-&gt;context.addr_limit - DEFAULT_MAP_WINDOW;</span>
<span class="p_del">-</span>
 	addr = vm_unmapped_area(&amp;info);
 	if (!(addr &amp; ~PAGE_MASK))
 		return addr;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



