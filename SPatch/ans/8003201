
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,05/21] arm64: kvm: deal with kernel symbols outside of linear mapping - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,05/21] arm64: kvm: deal with kernel symbols outside of linear mapping</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 11, 2016, 1:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1452518355-4606-6-git-send-email-ard.biesheuvel@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8003201/mbox/"
   >mbox</a>
|
   <a href="/patch/8003201/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8003201/">/patch/8003201/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 92B63BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 13:19:59 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 7F5D9200ED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 13:19:58 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id EC8C420204
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 13:19:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759849AbcAKNTv (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 11 Jan 2016 08:19:51 -0500
Received: from mail-wm0-f54.google.com ([74.125.82.54]:34292 &quot;EHLO
	mail-wm0-f54.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1759760AbcAKNTr (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 11 Jan 2016 08:19:47 -0500
Received: by mail-wm0-f54.google.com with SMTP id u188so214031962wmu.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 11 Jan 2016 05:19:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=hvI46tcjKZRVP+3sI3sFkxNEq7q2rIflg15RTRZU8Tw=;
	b=RnsvhRyhVfyqaVyZd0xRraMkgEM0IQYtB9IuN7kMez0Kbjf9ixLhkrPSZTctk4peAq
	jzUc1ko+a54AtMRzFHA9e/9kALbwyt5MQiNREVS0CJx++OXrCNh1NAgjSg4BBF/d6izV
	1GazARtFOUkOqlt28L8tjRMToqhD28aVR9VF0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=hvI46tcjKZRVP+3sI3sFkxNEq7q2rIflg15RTRZU8Tw=;
	b=KZQh/m2lc5AroUAD54s+gcA5cuaIUXsFZlM5YDGy4lSvk+F6SqAOMPmEyEVzyl6hn+
	qWc9x6QmhZfJeJ38ZY+WkTL4B5qWRC6/tpNnBEdtQwb+3P4ep2gs++eewrJqy5JmEDqm
	uiPikMeTKUguJ4155urBbutafrFu3klzDyy9wFWN87a4LrWg7DG9EjJXZbsQtuGN+mFX
	nQDHmR3WAtplHZqeZ807vBFTS+d5QtSppPw8fA69Y9XoQrudbWIntrURFB8gg837x9Ez
	stbcvO8G6oo6e+Bg/x2bKzcU2aIZWrK3RqwVN3G6RehCJ3rioQibSj1XZV5TwgH+Linx
	BQhQ==
X-Gm-Message-State: ALoCoQludgpHVl+nRP0l5duDxZpMIrLeae3PrYEDs3/GG7pu3c/77i4c312i2dCaZ5htcPm9P4bMXrxRXifJFITRP5W/+rR1qQ==
X-Received: by 10.28.144.10 with SMTP id s10mr12985072wmd.97.1452518385801; 
	Mon, 11 Jan 2016 05:19:45 -0800 (PST)
Received: from localhost.localdomain (cag06-7-83-153-85-71.fbx.proxad.net.
	[83.153.85.71]) by smtp.gmail.com with ESMTPSA id
	c15sm12766055wmd.19.2016.01.11.05.19.43
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 11 Jan 2016 05:19:45 -0800 (PST)
From: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
To: linux-arm-kernel@lists.infradead.org,
	kernel-hardening@lists.openwall.com, will.deacon@arm.com,
	catalin.marinas@arm.com, mark.rutland@arm.com,
	leif.lindholm@linaro.org, keescook@chromium.org,
	linux-kernel@vger.kernel.org
Cc: stuart.yoder@freescale.com, bhupesh.sharma@freescale.com,
	arnd@arndb.de, marc.zyngier@arm.com, christoffer.dall@linaro.org,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Subject: [PATCH v3 05/21] arm64: kvm: deal with kernel symbols outside of
	linear mapping
Date: Mon, 11 Jan 2016 14:18:58 +0100
Message-Id: &lt;1452518355-4606-6-git-send-email-ard.biesheuvel@linaro.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;1452518355-4606-1-git-send-email-ard.biesheuvel@linaro.org&gt;
References: &lt;1452518355-4606-1-git-send-email-ard.biesheuvel@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - Jan. 11, 2016, 1:18 p.m.</div>
<pre class="content">
KVM on arm64 uses a fixed offset between the linear mapping at EL1 and
the HYP mapping at EL2. Before we can move the kernel virtual mapping
out of the linear mapping, we have to make sure that references to kernel
symbols that are accessed via the HYP mapping are translated to their
linear equivalent.

To prevent inadvertent direct references from sneaking in later, change
the type of all extern declarations to HYP kernel symbols to the opaque
&#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays
and function references. This is not bullet proof, but at least forces the
user to take the address explicitly rather than referencing it directly.
<span class="signed-off-by">
Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
---
 arch/arm/include/asm/kvm_asm.h    |  2 ++
 arch/arm/include/asm/kvm_mmu.h    |  2 ++
 arch/arm/kvm/arm.c                |  5 +++--
 arch/arm/kvm/mmu.c                |  8 +++-----
 arch/arm64/include/asm/kvm_asm.h  | 19 ++++++++++++-------
 arch/arm64/include/asm/kvm_host.h |  8 +++++---
 arch/arm64/include/asm/kvm_mmu.h  |  2 ++
 arch/arm64/include/asm/virt.h     |  4 ----
 arch/arm64/kvm/debug.c            |  1 +
 arch/arm64/kvm/hyp.S              |  6 +++---
 10 files changed, 33 insertions(+), 24 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Jan. 12, 2016, 12:36 p.m.</div>
<pre class="content">
On Mon, Jan 11, 2016 at 02:18:58PM +0100, Ard Biesheuvel wrote:
<span class="quote">&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt; linear equivalent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>

Cool feature!
<span class="quote">
&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; index 5e377101f919..e3865845d3e1 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt; @@ -105,24 +105,29 @@</span>
<span class="quote">&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;  struct kvm;</span>
<span class="quote">&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt; +struct kvm_ksym;</span>

So that one doesn&#39;t have to trawl git logs, it might be worth a comment
as to the purpose of struct kvm_ksym (and thus why we never need to
actually define it).

Either way:
<span class="reviewed-by">
Reviewed-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>

Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - Jan. 12, 2016, 1:23 p.m.</div>
<pre class="content">
On 12 January 2016 at 13:36, Mark Rutland &lt;mark.rutland@arm.com&gt; wrote:
<span class="quote">&gt; On Mon, Jan 11, 2016 at 02:18:58PM +0100, Ard Biesheuvel wrote:</span>
<span class="quote">&gt;&gt; KVM on arm64 uses a fixed offset between the linear mapping at EL1 and</span>
<span class="quote">&gt;&gt; the HYP mapping at EL2. Before we can move the kernel virtual mapping</span>
<span class="quote">&gt;&gt; out of the linear mapping, we have to make sure that references to kernel</span>
<span class="quote">&gt;&gt; symbols that are accessed via the HYP mapping are translated to their</span>
<span class="quote">&gt;&gt; linear equivalent.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; To prevent inadvertent direct references from sneaking in later, change</span>
<span class="quote">&gt;&gt; the type of all extern declarations to HYP kernel symbols to the opaque</span>
<span class="quote">&gt;&gt; &#39;struct kvm_ksym&#39;, which does not decay to a pointer type like char arrays</span>
<span class="quote">&gt;&gt; and function references. This is not bullet proof, but at least forces the</span>
<span class="quote">&gt;&gt; user to take the address explicitly rather than referencing it directly.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Cool feature!</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; index 5e377101f919..e3865845d3e1 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="quote">&gt;&gt; @@ -105,24 +105,29 @@</span>
<span class="quote">&gt;&gt;  #ifndef __ASSEMBLY__</span>
<span class="quote">&gt;&gt;  struct kvm;</span>
<span class="quote">&gt;&gt;  struct kvm_vcpu;</span>
<span class="quote">&gt;&gt; +struct kvm_ksym;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; So that one doesn&#39;t have to trawl git logs, it might be worth a comment</span>
<span class="quote">&gt; as to the purpose of struct kvm_ksym (and thus why we never need to</span>
<span class="quote">&gt; actually define it).</span>
<span class="quote">&gt;</span>

Yes, I can add something
<span class="quote">
&gt; Either way:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Reviewed-by: Mark Rutland &lt;mark.rutland@arm.com&gt;</span>
<span class="quote">&gt;</span>

Thanks
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_asm.h b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">index 194c91b610ff..484ffdf7c70b 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -99,6 +99,8 @@</span> <span class="p_context"> extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
 extern void __kvm_tlb_flush_vmid(struct kvm *kvm);
 
 extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);
<span class="p_add">+</span>
<span class="p_add">+extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
 #endif
 
 #endif /* __ARM_KVM_ASM_H__ */
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_mmu.h b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">index 405aa1883307..412b363f79e9 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -30,6 +30,8 @@</span> <span class="p_context"></span>
 #define HYP_PAGE_OFFSET		PAGE_OFFSET
 #define KERN_TO_HYP(kva)	(kva)
 
<span class="p_add">+#define kvm_ksym_ref(kva)	(kva)</span>
<span class="p_add">+</span>
 /*
  * Our virtual mapping for the boot-time MMU-enable code. Must be
  * shared across all the page-tables. Conveniently, we use the vectors
<span class="p_header">diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c</span>
<span class="p_header">index e06fd299de08..70e6d557c75f 100644</span>
<span class="p_header">--- a/arch/arm/kvm/arm.c</span>
<span class="p_header">+++ b/arch/arm/kvm/arm.c</span>
<span class="p_chunk">@@ -969,7 +969,7 @@</span> <span class="p_context"> static void cpu_init_hyp_mode(void *dummy)</span>
 	pgd_ptr = kvm_mmu_get_httbr();
 	stack_page = __this_cpu_read(kvm_arm_hyp_stack_page);
 	hyp_stack_ptr = stack_page + PAGE_SIZE;
<span class="p_del">-	vector_ptr = (unsigned long)__kvm_hyp_vector;</span>
<span class="p_add">+	vector_ptr = (unsigned long)kvm_ksym_ref(__kvm_hyp_vector);</span>
 
 	__cpu_init_hyp_mode(boot_pgd_ptr, pgd_ptr, hyp_stack_ptr, vector_ptr);
 
<span class="p_chunk">@@ -1061,7 +1061,8 @@</span> <span class="p_context"> static int init_hyp_mode(void)</span>
 	/*
 	 * Map the Hyp-code called directly from the host
 	 */
<span class="p_del">-	err = create_hyp_mappings(__kvm_hyp_code_start, __kvm_hyp_code_end);</span>
<span class="p_add">+	err = create_hyp_mappings(kvm_ksym_ref(__kvm_hyp_code_start),</span>
<span class="p_add">+				  kvm_ksym_ref(__kvm_hyp_code_end));</span>
 	if (err) {
 		kvm_err(&quot;Cannot map world-switch code\n&quot;);
 		goto out_free_mappings;
<span class="p_header">diff --git a/arch/arm/kvm/mmu.c b/arch/arm/kvm/mmu.c</span>
<span class="p_header">index 7dace909d5cf..9ab9e4b6376e 100644</span>
<span class="p_header">--- a/arch/arm/kvm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/kvm/mmu.c</span>
<span class="p_chunk">@@ -31,8 +31,6 @@</span> <span class="p_context"></span>
 
 #include &quot;trace.h&quot;
 
<span class="p_del">-extern char  __hyp_idmap_text_start[], __hyp_idmap_text_end[];</span>
<span class="p_del">-</span>
 static pgd_t *boot_hyp_pgd;
 static pgd_t *hyp_pgd;
 static pgd_t *merged_hyp_pgd;
<span class="p_chunk">@@ -1647,9 +1645,9 @@</span> <span class="p_context"> int kvm_mmu_init(void)</span>
 {
 	int err;
 
<span class="p_del">-	hyp_idmap_start = kvm_virt_to_phys(__hyp_idmap_text_start);</span>
<span class="p_del">-	hyp_idmap_end = kvm_virt_to_phys(__hyp_idmap_text_end);</span>
<span class="p_del">-	hyp_idmap_vector = kvm_virt_to_phys(__kvm_hyp_init);</span>
<span class="p_add">+	hyp_idmap_start = kvm_virt_to_phys(&amp;__hyp_idmap_text_start);</span>
<span class="p_add">+	hyp_idmap_end = kvm_virt_to_phys(&amp;__hyp_idmap_text_end);</span>
<span class="p_add">+	hyp_idmap_vector = kvm_virt_to_phys(&amp;__kvm_hyp_init);</span>
 
 	/*
 	 * We rely on the linker script to ensure at build time that the HYP
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_asm.h b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">index 5e377101f919..e3865845d3e1 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_asm.h</span>
<span class="p_chunk">@@ -105,24 +105,29 @@</span> <span class="p_context"></span>
 #ifndef __ASSEMBLY__
 struct kvm;
 struct kvm_vcpu;
<span class="p_add">+struct kvm_ksym;</span>
 
 extern char __kvm_hyp_init[];
 extern char __kvm_hyp_init_end[];
 
<span class="p_del">-extern char __kvm_hyp_vector[];</span>
<span class="p_add">+extern struct kvm_ksym __kvm_hyp_vector;</span>
 
 #define	__kvm_hyp_code_start	__hyp_text_start
 #define	__kvm_hyp_code_end	__hyp_text_end
<span class="p_add">+extern struct kvm_ksym __hyp_text_start;</span>
<span class="p_add">+extern struct kvm_ksym __hyp_text_end;</span>
 
<span class="p_del">-extern void __kvm_flush_vm_context(void);</span>
<span class="p_del">-extern void __kvm_tlb_flush_vmid_ipa(struct kvm *kvm, phys_addr_t ipa);</span>
<span class="p_del">-extern void __kvm_tlb_flush_vmid(struct kvm *kvm);</span>
<span class="p_add">+extern struct kvm_ksym __kvm_flush_vm_context;</span>
<span class="p_add">+extern struct kvm_ksym __kvm_tlb_flush_vmid_ipa;</span>
<span class="p_add">+extern struct kvm_ksym __kvm_tlb_flush_vmid;</span>
 
<span class="p_del">-extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);</span>
<span class="p_add">+extern struct kvm_ksym __kvm_vcpu_run;</span>
 
<span class="p_del">-extern u64 __vgic_v3_get_ich_vtr_el2(void);</span>
<span class="p_add">+extern struct kvm_ksym __hyp_idmap_text_start, __hyp_idmap_text_end;</span>
 
<span class="p_del">-extern u32 __kvm_get_mdcr_el2(void);</span>
<span class="p_add">+extern struct kvm_ksym __vgic_v3_get_ich_vtr_el2;</span>
<span class="p_add">+</span>
<span class="p_add">+extern struct kvm_ksym __kvm_get_mdcr_el2;</span>
 
 #endif
 
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_header">index a35ce7266aac..90c6368ad7c8 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -222,7 +222,7 @@</span> <span class="p_context"> static inline void kvm_arch_mmu_notifier_invalidate_page(struct kvm *kvm,</span>
 struct kvm_vcpu *kvm_arm_get_running_vcpu(void);
 struct kvm_vcpu * __percpu *kvm_get_running_vcpus(void);
 
<span class="p_del">-u64 kvm_call_hyp(void *hypfn, ...);</span>
<span class="p_add">+u64 __kvm_call_hyp(void *hypfn, ...);</span>
 void force_vm_exit(const cpumask_t *mask);
 void kvm_mmu_wp_memory_region(struct kvm *kvm, int slot);
 
<span class="p_chunk">@@ -243,8 +243,8 @@</span> <span class="p_context"> static inline void __cpu_init_hyp_mode(phys_addr_t boot_pgd_ptr,</span>
 	 * Call initialization code, and switch to the full blown
 	 * HYP code.
 	 */
<span class="p_del">-	kvm_call_hyp((void *)boot_pgd_ptr, pgd_ptr,</span>
<span class="p_del">-		     hyp_stack_ptr, vector_ptr);</span>
<span class="p_add">+	__kvm_call_hyp((void *)boot_pgd_ptr, pgd_ptr,</span>
<span class="p_add">+		       hyp_stack_ptr, vector_ptr);</span>
 }
 
 static inline void kvm_arch_hardware_disable(void) {}
<span class="p_chunk">@@ -258,4 +258,6 @@</span> <span class="p_context"> void kvm_arm_setup_debug(struct kvm_vcpu *vcpu);</span>
 void kvm_arm_clear_debug(struct kvm_vcpu *vcpu);
 void kvm_arm_reset_debug_ptr(struct kvm_vcpu *vcpu);
 
<span class="p_add">+#define kvm_call_hyp(f, ...) __kvm_call_hyp(kvm_ksym_ref(f), ##__VA_ARGS__)</span>
<span class="p_add">+</span>
 #endif /* __ARM64_KVM_HOST_H__ */
<span class="p_header">diff --git a/arch/arm64/include/asm/kvm_mmu.h b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">index 61505676d085..0899026a2821 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/kvm_mmu.h</span>
<span class="p_chunk">@@ -73,6 +73,8 @@</span> <span class="p_context"></span>
 
 #define KERN_TO_HYP(kva)	((unsigned long)kva - PAGE_OFFSET + HYP_PAGE_OFFSET)
 
<span class="p_add">+#define kvm_ksym_ref(sym)	((void *)&amp;sym - KIMAGE_VADDR + PAGE_OFFSET)</span>
<span class="p_add">+</span>
 /*
  * We currently only support a 40bit IPA.
  */
<span class="p_header">diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h</span>
<span class="p_header">index 7a5df5252dd7..215ad4649dd7 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/virt.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/virt.h</span>
<span class="p_chunk">@@ -50,10 +50,6 @@</span> <span class="p_context"> static inline bool is_hyp_mode_mismatched(void)</span>
 	return __boot_cpu_mode[0] != __boot_cpu_mode[1];
 }
 
<span class="p_del">-/* The section containing the hypervisor text */</span>
<span class="p_del">-extern char __hyp_text_start[];</span>
<span class="p_del">-extern char __hyp_text_end[];</span>
<span class="p_del">-</span>
 #endif /* __ASSEMBLY__ */
 
 #endif /* ! __ASM__VIRT_H */
<span class="p_header">diff --git a/arch/arm64/kvm/debug.c b/arch/arm64/kvm/debug.c</span>
<span class="p_header">index 47e5f0feaee8..f73d8c9b999b 100644</span>
<span class="p_header">--- a/arch/arm64/kvm/debug.c</span>
<span class="p_header">+++ b/arch/arm64/kvm/debug.c</span>
<span class="p_chunk">@@ -24,6 +24,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/kvm_asm.h&gt;
 #include &lt;asm/kvm_arm.h&gt;
 #include &lt;asm/kvm_emulate.h&gt;
<span class="p_add">+#include &lt;asm/kvm_mmu.h&gt;</span>
 
 #include &quot;trace.h&quot;
 
<span class="p_header">diff --git a/arch/arm64/kvm/hyp.S b/arch/arm64/kvm/hyp.S</span>
<span class="p_header">index 86c289832272..309e3479dc2c 100644</span>
<span class="p_header">--- a/arch/arm64/kvm/hyp.S</span>
<span class="p_header">+++ b/arch/arm64/kvm/hyp.S</span>
<span class="p_chunk">@@ -923,7 +923,7 @@</span> <span class="p_context"> __hyp_panic_str:</span>
 	.align	2
 
 /*
<span class="p_del">- * u64 kvm_call_hyp(void *hypfn, ...);</span>
<span class="p_add">+ * u64 __kvm_call_hyp(void *hypfn, ...);</span>
  *
  * This is not really a variadic function in the classic C-way and care must
  * be taken when calling this to ensure parameters are passed in registers
<span class="p_chunk">@@ -940,10 +940,10 @@</span> <span class="p_context"> __hyp_panic_str:</span>
  * used to implement __hyp_get_vectors in the same way as in
  * arch/arm64/kernel/hyp_stub.S.
  */
<span class="p_del">-ENTRY(kvm_call_hyp)</span>
<span class="p_add">+ENTRY(__kvm_call_hyp)</span>
 	hvc	#0
 	ret
<span class="p_del">-ENDPROC(kvm_call_hyp)</span>
<span class="p_add">+ENDPROC(__kvm_call_hyp)</span>
 
 .macro invalid_vector	label, target
 	.align	2

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



