
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V5,3/6] mm: move MADV_FREE pages into LRU_INACTIVE_FILE list - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V5,3/6] mm: move MADV_FREE pages into LRU_INACTIVE_FILE list</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 24, 2017, 9:31 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;2f87063c1e9354677b7618c647abde77b07561e5.1487965799.git.shli@fb.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9591203/mbox/"
   >mbox</a>
|
   <a href="/patch/9591203/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9591203/">/patch/9591203/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5A5C0601AE for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 21:32:39 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 49AF32892E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 21:32:39 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3E64028965; Fri, 24 Feb 2017 21:32:39 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6CC5C2892E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Feb 2017 21:32:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751492AbdBXVcP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Feb 2017 16:32:15 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:54611 &quot;EHLO
	mx0b-00082601.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751386AbdBXVbz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Feb 2017 16:31:55 -0500
Received: from pps.filterd (m0109331.ppops.net [127.0.0.1])
	by mx0a-00082601.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v1OLNEuO009484
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 24 Feb 2017 13:31:54 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com;
	h=from : to : cc : subject
	: date : message-id : in-reply-to : references : mime-version :
	content-type; s=facebook;
	bh=DToFjwCgO/mdzwNEzz1RQVspglwCNn6wRZpefMPjVoQ=; 
	b=GO3ar1KXv4nDF9OBisirTp+jxTk/P/RP3ugneyHVOudpHQyoos68Q87zU2uFMd7jykvZ
	WV8y43KKgHsU81aTxx2gzWKAMrx1rSROWcNoYwgmGXLAGQINcjwk2Mh4kgB04kDmFtYZ
	SkrugrTaXdbbHJE4BnUGyC6dCsji2n2fHWI= 
Received: from mail.thefacebook.com ([199.201.64.23])
	by mx0a-00082601.pphosted.com with ESMTP id 28tuugr6fb-8
	(version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 24 Feb 2017 13:31:54 -0800
Received: from mx-out.facebook.com (192.168.52.123) by
	PRN-CHUB05.TheFacebook.com (192.168.16.15) with Microsoft SMTP Server
	(TLS) id 14.3.319.2; Fri, 24 Feb 2017 13:31:51 -0800
Received: from facebook.com (2401:db00:21:603d:face:0:19:0)     by
	mx-out.facebook.com (10.223.100.97) with ESMTP id
	a767940afad811e68f4c24be0593f280-92df9a00 for
	&lt;linux-kernel@vger.kernel.org&gt;; Fri, 24 Feb 2017 13:31:51 -0800
Received: by devbig638.prn2.facebook.com (Postfix, from userid 11222)   id
	09E0A43A1B7A; Fri, 24 Feb 2017 13:31:49 -0800 (PST)
Smtp-Origin-Hostprefix: devbig
From: Shaohua Li &lt;shli@fb.com&gt;
Smtp-Origin-Hostname: devbig638.prn2.facebook.com
To: &lt;linux-mm@kvack.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;
CC: &lt;Kernel-team@fb.com&gt;, &lt;mhocko@suse.com&gt;, &lt;minchan@kernel.org&gt;,
	&lt;hughd@google.com&gt;, &lt;hannes@cmpxchg.org&gt;, &lt;riel@redhat.com&gt;,
	&lt;mgorman@techsingularity.net&gt;, &lt;akpm@linux-foundation.org&gt;
Smtp-Origin-Cluster: prn2c22
Subject: [PATCH V5 3/6] mm: move MADV_FREE pages into LRU_INACTIVE_FILE list
Date: Fri, 24 Feb 2017 13:31:46 -0800
Message-ID: &lt;2f87063c1e9354677b7618c647abde77b07561e5.1487965799.git.shli@fb.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;cover.1487965799.git.shli@fb.com&gt;
References: &lt;cover.1487965799.git.shli@fb.com&gt;
X-FB-Internal: Safe
MIME-Version: 1.0
Content-Type: text/plain
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-02-24_13:, , signatures=0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Feb. 24, 2017, 9:31 p.m.</div>
<pre class="content">
madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous
pages, but they can be freed without pageout. To destinguish them
against normal anonymous pages, we clear their SwapBacked flag.

MADV_FREE pages could be freed without pageout, so they pretty much like
used once file pages. For such pages, we&#39;d like to reclaim them once
there is memory pressure. Also it might be unfair reclaiming MADV_FREE
pages always before used once file pages and we definitively want to
reclaim the pages before other anonymous and file pages.

To speed up MADV_FREE pages reclaim, we put the pages into
LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny
nowadays and should be full of used once file pages. Reclaiming
MADV_FREE pages will not have much interfere of anonymous and active
file pages. And the inactive file pages and MADV_FREE pages will be
reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE
pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also
means we can reclaim the pages without swap support. This idea is
suggested by Johannes.

This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to
avoid bisect failure, next patch will do it.

The patch is based on Minchan&#39;s original patch.

Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
<span class="signed-off-by">Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
---
 include/linux/swap.h          |  2 +-
 include/linux/vm_event_item.h |  2 +-
 mm/huge_memory.c              |  3 ---
 mm/madvise.c                  |  2 --
 mm/swap.c                     | 50 ++++++++++++++++++++++++-------------------
 mm/vmstat.c                   |  1 +
 6 files changed, 31 insertions(+), 29 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Feb. 27, 2017, 6:28 a.m.</div>
<pre class="content">
Hello Shaohua,

On Fri, Feb 24, 2017 at 01:31:46PM -0800, Shaohua Li wrote:
<span class="quote">&gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; suggested by Johannes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; avoid bisect failure, next patch will do it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>

This patch doesn&#39;t address I pointed out in v4.

https://marc.info/?i=20170224233752.GB4635%40bbox

Let&#39;s discuss it if you still are against.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 27, 2017, 2:53 p.m.</div>
<pre class="content">
On Fri 24-02-17 13:31:46, Shaohua Li wrote:
<span class="quote">&gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; suggested by Johannes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; avoid bisect failure, next patch will do it.</span>

This patch also changes behavior of madv_freed pages on the active list
because they are not moved to the inactive list but considering how anon
pages are reclaimed these days I do not really think this will be
noticeable.
<span class="quote">
&gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  include/linux/swap.h          |  2 +-</span>
<span class="quote">&gt;  include/linux/vm_event_item.h |  2 +-</span>
<span class="quote">&gt;  mm/huge_memory.c              |  3 ---</span>
<span class="quote">&gt;  mm/madvise.c                  |  2 --</span>
<span class="quote">&gt;  mm/swap.c                     | 50 ++++++++++++++++++++++++-------------------</span>
<span class="quote">&gt;  mm/vmstat.c                   |  1 +</span>
<span class="quote">&gt;  6 files changed, 31 insertions(+), 29 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/swap.h b/include/linux/swap.h</span>
<span class="quote">&gt; index 45e91dd..486494e 100644</span>
<span class="quote">&gt; --- a/include/linux/swap.h</span>
<span class="quote">&gt; +++ b/include/linux/swap.h</span>
<span class="quote">&gt; @@ -279,7 +279,7 @@ extern void lru_add_drain_cpu(int cpu);</span>
<span class="quote">&gt;  extern void lru_add_drain_all(void);</span>
<span class="quote">&gt;  extern void rotate_reclaimable_page(struct page *page);</span>
<span class="quote">&gt;  extern void deactivate_file_page(struct page *page);</span>
<span class="quote">&gt; -extern void deactivate_page(struct page *page);</span>
<span class="quote">&gt; +extern void mark_page_lazyfree(struct page *page);</span>
<span class="quote">&gt;  extern void swap_setup(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern void add_page_to_unevictable_list(struct page *page);</span>
<span class="quote">&gt; diff --git a/include/linux/vm_event_item.h b/include/linux/vm_event_item.h</span>
<span class="quote">&gt; index 6aa1b6c..94e58da 100644</span>
<span class="quote">&gt; --- a/include/linux/vm_event_item.h</span>
<span class="quote">&gt; +++ b/include/linux/vm_event_item.h</span>
<span class="quote">&gt; @@ -25,7 +25,7 @@ enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,</span>
<span class="quote">&gt;  		FOR_ALL_ZONES(PGALLOC),</span>
<span class="quote">&gt;  		FOR_ALL_ZONES(ALLOCSTALL),</span>
<span class="quote">&gt;  		FOR_ALL_ZONES(PGSCAN_SKIP),</span>
<span class="quote">&gt; -		PGFREE, PGACTIVATE, PGDEACTIVATE,</span>
<span class="quote">&gt; +		PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,</span>
<span class="quote">&gt;  		PGFAULT, PGMAJFAULT,</span>
<span class="quote">&gt;  		PGLAZYFREED,</span>
<span class="quote">&gt;  		PGREFILL,</span>
<span class="quote">&gt; diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="quote">&gt; index cf9fb46..3b7ee0c 100644</span>
<span class="quote">&gt; --- a/mm/huge_memory.c</span>
<span class="quote">&gt; +++ b/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -1562,9 +1562,6 @@ bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		ClearPageDirty(page);</span>
<span class="quote">&gt;  	unlock_page(page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (PageActive(page))</span>
<span class="quote">&gt; -		deactivate_page(page);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	if (pmd_young(orig_pmd) || pmd_dirty(orig_pmd)) {</span>
<span class="quote">&gt;  		orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,</span>
<span class="quote">&gt;  			tlb-&gt;fullmm);</span>
<span class="quote">&gt; diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="quote">&gt; index dc5927c..61e10b1 100644</span>
<span class="quote">&gt; --- a/mm/madvise.c</span>
<span class="quote">&gt; +++ b/mm/madvise.c</span>
<span class="quote">&gt; @@ -411,8 +411,6 @@ static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt;  			ptent = pte_mkold(ptent);</span>
<span class="quote">&gt;  			ptent = pte_mkclean(ptent);</span>
<span class="quote">&gt;  			set_pte_at(mm, addr, pte, ptent);</span>
<span class="quote">&gt; -			if (PageActive(page))</span>
<span class="quote">&gt; -				deactivate_page(page);</span>
<span class="quote">&gt;  			tlb_remove_tlb_entry(tlb, pte, addr);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; diff --git a/mm/swap.c b/mm/swap.c</span>
<span class="quote">&gt; index c4910f1..c4fb4b9 100644</span>
<span class="quote">&gt; --- a/mm/swap.c</span>
<span class="quote">&gt; +++ b/mm/swap.c</span>
<span class="quote">&gt; @@ -46,7 +46,7 @@ int page_cluster;</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct pagevec, lru_add_pvec);</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct pagevec, lru_rotate_pvecs);</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct pagevec, lru_deactivate_file_pvecs);</span>
<span class="quote">&gt; -static DEFINE_PER_CPU(struct pagevec, lru_deactivate_pvecs);</span>
<span class="quote">&gt; +static DEFINE_PER_CPU(struct pagevec, lru_lazyfree_pvecs);</span>
<span class="quote">&gt;  #ifdef CONFIG_SMP</span>
<span class="quote">&gt;  static DEFINE_PER_CPU(struct pagevec, activate_page_pvecs);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; @@ -561,20 +561,26 @@ static void lru_deactivate_file_fn(struct page *page, struct lruvec *lruvec,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec,</span>
<span class="quote">&gt; +static void lru_lazyfree_fn(struct page *page, struct lruvec *lruvec,</span>
<span class="quote">&gt;  			    void *arg)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="quote">&gt; -		int file = page_is_file_cache(page);</span>
<span class="quote">&gt; -		int lru = page_lru_base_type(page);</span>
<span class="quote">&gt; +	if (PageLRU(page) &amp;&amp; PageAnon(page) &amp;&amp; PageSwapBacked(page) &amp;&amp;</span>
<span class="quote">&gt; +	    !PageUnevictable(page)) {</span>
<span class="quote">&gt; +		bool active = PageActive(page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		del_page_from_lru_list(page, lruvec, lru + LRU_ACTIVE);</span>
<span class="quote">&gt; +		del_page_from_lru_list(page, lruvec, LRU_INACTIVE_ANON + active);</span>
<span class="quote">&gt;  		ClearPageActive(page);</span>
<span class="quote">&gt;  		ClearPageReferenced(page);</span>
<span class="quote">&gt; -		add_page_to_lru_list(page, lruvec, lru);</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * lazyfree pages are clean anonymous pages. They have</span>
<span class="quote">&gt; +		 * SwapBacked flag cleared to distinguish normal anonymous</span>
<span class="quote">&gt; +		 * pages</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		ClearPageSwapBacked(page);</span>
<span class="quote">&gt; +		add_page_to_lru_list(page, lruvec, LRU_INACTIVE_FILE);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		__count_vm_event(PGDEACTIVATE);</span>
<span class="quote">&gt; -		update_page_reclaim_stat(lruvec, file, 0);</span>
<span class="quote">&gt; +		__count_vm_events(PGLAZYFREE, hpage_nr_pages(page));</span>
<span class="quote">&gt; +		update_page_reclaim_stat(lruvec, 1, 0);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -604,9 +610,9 @@ void lru_add_drain_cpu(int cpu)</span>
<span class="quote">&gt;  	if (pagevec_count(pvec))</span>
<span class="quote">&gt;  		pagevec_lru_move_fn(pvec, lru_deactivate_file_fn, NULL);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	pvec = &amp;per_cpu(lru_deactivate_pvecs, cpu);</span>
<span class="quote">&gt; +	pvec = &amp;per_cpu(lru_lazyfree_pvecs, cpu);</span>
<span class="quote">&gt;  	if (pagevec_count(pvec))</span>
<span class="quote">&gt; -		pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="quote">&gt; +		pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	activate_page_drain(cpu);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -638,22 +644,22 @@ void deactivate_file_page(struct page *page)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt; - * deactivate_page - deactivate a page</span>
<span class="quote">&gt; + * mark_page_lazyfree - make an anon page lazyfree</span>
<span class="quote">&gt;   * @page: page to deactivate</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt; - * deactivate_page() moves @page to the inactive list if @page was on the active</span>
<span class="quote">&gt; - * list and was not an unevictable page.  This is done to accelerate the reclaim</span>
<span class="quote">&gt; - * of @page.</span>
<span class="quote">&gt; + * mark_page_lazyfree() moves @page to the inactive file list.</span>
<span class="quote">&gt; + * This is done to accelerate the reclaim of @page.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -void deactivate_page(struct page *page)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="quote">&gt; -		struct pagevec *pvec = &amp;get_cpu_var(lru_deactivate_pvecs);</span>
<span class="quote">&gt; +void mark_page_lazyfree(struct page *page)</span>
<span class="quote">&gt; + {</span>
<span class="quote">&gt; +	if (PageLRU(page) &amp;&amp; PageAnon(page) &amp;&amp; PageSwapBacked(page) &amp;&amp;</span>
<span class="quote">&gt; +	    !PageUnevictable(page)) {</span>
<span class="quote">&gt; +		struct pagevec *pvec = &amp;get_cpu_var(lru_lazyfree_pvecs);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		get_page(page);</span>
<span class="quote">&gt;  		if (!pagevec_add(pvec, page) || PageCompound(page))</span>
<span class="quote">&gt; -			pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="quote">&gt; -		put_cpu_var(lru_deactivate_pvecs);</span>
<span class="quote">&gt; +			pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
<span class="quote">&gt; +		put_cpu_var(lru_lazyfree_pvecs);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -704,7 +710,7 @@ void lru_add_drain_all(void)</span>
<span class="quote">&gt;  		if (pagevec_count(&amp;per_cpu(lru_add_pvec, cpu)) ||</span>
<span class="quote">&gt;  		    pagevec_count(&amp;per_cpu(lru_rotate_pvecs, cpu)) ||</span>
<span class="quote">&gt;  		    pagevec_count(&amp;per_cpu(lru_deactivate_file_pvecs, cpu)) ||</span>
<span class="quote">&gt; -		    pagevec_count(&amp;per_cpu(lru_deactivate_pvecs, cpu)) ||</span>
<span class="quote">&gt; +		    pagevec_count(&amp;per_cpu(lru_lazyfree_pvecs, cpu)) ||</span>
<span class="quote">&gt;  		    need_activate_page_drain(cpu)) {</span>
<span class="quote">&gt;  			INIT_WORK(work, lru_add_drain_per_cpu);</span>
<span class="quote">&gt;  			queue_work_on(cpu, lru_add_drain_wq, work);</span>
<span class="quote">&gt; diff --git a/mm/vmstat.c b/mm/vmstat.c</span>
<span class="quote">&gt; index 69f9aff..7774196 100644</span>
<span class="quote">&gt; --- a/mm/vmstat.c</span>
<span class="quote">&gt; +++ b/mm/vmstat.c</span>
<span class="quote">&gt; @@ -992,6 +992,7 @@ const char * const vmstat_text[] = {</span>
<span class="quote">&gt;  	&quot;pgfree&quot;,</span>
<span class="quote">&gt;  	&quot;pgactivate&quot;,</span>
<span class="quote">&gt;  	&quot;pgdeactivate&quot;,</span>
<span class="quote">&gt; +	&quot;pglazyfree&quot;,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	&quot;pgfault&quot;,</span>
<span class="quote">&gt;  	&quot;pgmajfault&quot;,</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.9.3</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Feb. 27, 2017, 4:13 p.m.</div>
<pre class="content">
On Mon, Feb 27, 2017 at 03:28:01PM +0900, Minchan Kim wrote:
<span class="quote">&gt; Hello Shaohua,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Fri, Feb 24, 2017 at 01:31:46PM -0800, Shaohua Li wrote:</span>
<span class="quote">&gt; &gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; &gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; &gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; &gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; &gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; &gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; &gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; &gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; &gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; &gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; &gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; &gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; &gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; &gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; &gt; suggested by Johannes.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; &gt; avoid bisect failure, next patch will do it.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; &gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; &gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; &gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch doesn&#39;t address I pointed out in v4.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://marc.info/?i=20170224233752.GB4635%40bbox</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Let&#39;s discuss it if you still are against.</span>

I really think a spearate patch makes the code clearer. There are a lot of
places we introduce a function but don&#39;t use it immediately, if the way makes
the code clearer. But anyway, I&#39;ll let Andrew decide if the two patches should
be merged.

Thanks,
Shaohua
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 27, 2017, 4:30 p.m.</div>
<pre class="content">
On Mon 27-02-17 08:13:10, Shaohua Li wrote:
<span class="quote">&gt; On Mon, Feb 27, 2017 at 03:28:01PM +0900, Minchan Kim wrote:</span>
[...]
<span class="quote">&gt; &gt; This patch doesn&#39;t address I pointed out in v4.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; https://marc.info/?i=20170224233752.GB4635%40bbox</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Let&#39;s discuss it if you still are against.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I really think a spearate patch makes the code clearer. There are a lot of</span>
<span class="quote">&gt; places we introduce a function but don&#39;t use it immediately, if the way makes</span>
<span class="quote">&gt; the code clearer. But anyway, I&#39;ll let Andrew decide if the two patches should</span>
<span class="quote">&gt; be merged.</span>

I agree that it is almost always _preferable_ to add new functions along
with their callers. In this particular case I would lean towards keeping
the separation the way Shaohua did it because it makes the code really
cleaner IMHO.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a> - Feb. 27, 2017, 5:15 p.m.</div>
<pre class="content">
On Fri, Feb 24, 2017 at 01:31:46PM -0800, Shaohua Li wrote:
<span class="quote">&gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; suggested by Johannes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; avoid bisect failure, next patch will do it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="acked-by">
Acked-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Feb. 28, 2017, 2:53 a.m.</div>
<pre class="content">
Hi,

On Mon, Feb 27, 2017 at 08:13:10AM -0800, Shaohua Li wrote:
<span class="quote">&gt; On Mon, Feb 27, 2017 at 03:28:01PM +0900, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt; Hello Shaohua,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On Fri, Feb 24, 2017 at 01:31:46PM -0800, Shaohua Li wrote:</span>
<span class="quote">&gt; &gt; &gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; &gt; &gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; &gt; &gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; &gt; &gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; &gt; &gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; &gt; &gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; &gt; &gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; &gt; &gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; &gt; &gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; &gt; &gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; &gt; &gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; &gt; &gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; &gt; &gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; &gt; &gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; &gt; &gt; suggested by Johannes.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; &gt; &gt; avoid bisect failure, next patch will do it.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; &gt; &gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This patch doesn&#39;t address I pointed out in v4.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; https://marc.info/?i=20170224233752.GB4635%40bbox</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Let&#39;s discuss it if you still are against.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I really think a spearate patch makes the code clearer. There are a lot of</span>
<span class="quote">&gt; places we introduce a function but don&#39;t use it immediately, if the way makes</span>
<span class="quote">&gt; the code clearer. But anyway, I&#39;ll let Andrew decide if the two patches should</span>
<span class="quote">&gt; be merged.</span>
<span class="acked-by">
Acked-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>

Okay, I don&#39;t insist it any more if others are happy but please keep it in mind
that it&#39;s not a good habit, IMHO. Because

First of all, it makes review hard.

You introduce PGLAZYFREE in the patch but reviewer cannot find where it is used
so cannot review the accouting is right.

You introduce mark_page_lazyfree in the patch but there is no callsite to use
it. How can reviewer review it rightly? We cannot see what checks are missing
in there and what checks are redundant, and what kinds of lock we need.
It&#39;s hot path or slow path? Depending on it, we need to think approach.

There are many questions in there. It means we cannot review it without relying
upon upcoming patches, which is really not helpful for the review.

As well, it adds unncessary bisect point which is not a good, either.

I really want to merge two patches(introduce part and use-it part) unless
it makes review really hard or need per-subsystem apply.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - Feb. 28, 2017, 3:19 a.m.</div>
<pre class="content">
On February 25, 2017 5:32 AM Shaohua Li wrote: 
<span class="quote">&gt; </span>
<span class="quote">&gt; madv MADV_FREE indicate pages are &#39;lazyfree&#39;. They are still anonymous</span>
<span class="quote">&gt; pages, but they can be freed without pageout. To destinguish them</span>
<span class="quote">&gt; against normal anonymous pages, we clear their SwapBacked flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; MADV_FREE pages could be freed without pageout, so they pretty much like</span>
<span class="quote">&gt; used once file pages. For such pages, we&#39;d like to reclaim them once</span>
<span class="quote">&gt; there is memory pressure. Also it might be unfair reclaiming MADV_FREE</span>
<span class="quote">&gt; pages always before used once file pages and we definitively want to</span>
<span class="quote">&gt; reclaim the pages before other anonymous and file pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To speed up MADV_FREE pages reclaim, we put the pages into</span>
<span class="quote">&gt; LRU_INACTIVE_FILE list. The rationale is LRU_INACTIVE_FILE list is tiny</span>
<span class="quote">&gt; nowadays and should be full of used once file pages. Reclaiming</span>
<span class="quote">&gt; MADV_FREE pages will not have much interfere of anonymous and active</span>
<span class="quote">&gt; file pages. And the inactive file pages and MADV_FREE pages will be</span>
<span class="quote">&gt; reclaimed according to their age, so we don&#39;t reclaim too many MADV_FREE</span>
<span class="quote">&gt; pages too. Putting the MADV_FREE pages into LRU_INACTIVE_FILE_LIST also</span>
<span class="quote">&gt; means we can reclaim the pages without swap support. This idea is</span>
<span class="quote">&gt; suggested by Johannes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch doesn&#39;t move MADV_FREE pages to LRU_INACTIVE_FILE list yet to</span>
<span class="quote">&gt; avoid bisect failure, next patch will do it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The patch is based on Minchan&#39;s original patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="acked-by">
Acked-by: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/swap.h b/include/linux/swap.h</span>
<span class="p_header">index 45e91dd..486494e 100644</span>
<span class="p_header">--- a/include/linux/swap.h</span>
<span class="p_header">+++ b/include/linux/swap.h</span>
<span class="p_chunk">@@ -279,7 +279,7 @@</span> <span class="p_context"> extern void lru_add_drain_cpu(int cpu);</span>
 extern void lru_add_drain_all(void);
 extern void rotate_reclaimable_page(struct page *page);
 extern void deactivate_file_page(struct page *page);
<span class="p_del">-extern void deactivate_page(struct page *page);</span>
<span class="p_add">+extern void mark_page_lazyfree(struct page *page);</span>
 extern void swap_setup(void);
 
 extern void add_page_to_unevictable_list(struct page *page);
<span class="p_header">diff --git a/include/linux/vm_event_item.h b/include/linux/vm_event_item.h</span>
<span class="p_header">index 6aa1b6c..94e58da 100644</span>
<span class="p_header">--- a/include/linux/vm_event_item.h</span>
<span class="p_header">+++ b/include/linux/vm_event_item.h</span>
<span class="p_chunk">@@ -25,7 +25,7 @@</span> <span class="p_context"> enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,</span>
 		FOR_ALL_ZONES(PGALLOC),
 		FOR_ALL_ZONES(ALLOCSTALL),
 		FOR_ALL_ZONES(PGSCAN_SKIP),
<span class="p_del">-		PGFREE, PGACTIVATE, PGDEACTIVATE,</span>
<span class="p_add">+		PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,</span>
 		PGFAULT, PGMAJFAULT,
 		PGLAZYFREED,
 		PGREFILL,
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index cf9fb46..3b7ee0c 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1562,9 +1562,6 @@</span> <span class="p_context"> bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		ClearPageDirty(page);
 	unlock_page(page);
 
<span class="p_del">-	if (PageActive(page))</span>
<span class="p_del">-		deactivate_page(page);</span>
<span class="p_del">-</span>
 	if (pmd_young(orig_pmd) || pmd_dirty(orig_pmd)) {
 		orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,
 			tlb-&gt;fullmm);
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index dc5927c..61e10b1 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -411,8 +411,6 @@</span> <span class="p_context"> static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
 			ptent = pte_mkold(ptent);
 			ptent = pte_mkclean(ptent);
 			set_pte_at(mm, addr, pte, ptent);
<span class="p_del">-			if (PageActive(page))</span>
<span class="p_del">-				deactivate_page(page);</span>
 			tlb_remove_tlb_entry(tlb, pte, addr);
 		}
 	}
<span class="p_header">diff --git a/mm/swap.c b/mm/swap.c</span>
<span class="p_header">index c4910f1..c4fb4b9 100644</span>
<span class="p_header">--- a/mm/swap.c</span>
<span class="p_header">+++ b/mm/swap.c</span>
<span class="p_chunk">@@ -46,7 +46,7 @@</span> <span class="p_context"> int page_cluster;</span>
 static DEFINE_PER_CPU(struct pagevec, lru_add_pvec);
 static DEFINE_PER_CPU(struct pagevec, lru_rotate_pvecs);
 static DEFINE_PER_CPU(struct pagevec, lru_deactivate_file_pvecs);
<span class="p_del">-static DEFINE_PER_CPU(struct pagevec, lru_deactivate_pvecs);</span>
<span class="p_add">+static DEFINE_PER_CPU(struct pagevec, lru_lazyfree_pvecs);</span>
 #ifdef CONFIG_SMP
 static DEFINE_PER_CPU(struct pagevec, activate_page_pvecs);
 #endif
<span class="p_chunk">@@ -561,20 +561,26 @@</span> <span class="p_context"> static void lru_deactivate_file_fn(struct page *page, struct lruvec *lruvec,</span>
 }
 
 
<span class="p_del">-static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec,</span>
<span class="p_add">+static void lru_lazyfree_fn(struct page *page, struct lruvec *lruvec,</span>
 			    void *arg)
 {
<span class="p_del">-	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="p_del">-		int file = page_is_file_cache(page);</span>
<span class="p_del">-		int lru = page_lru_base_type(page);</span>
<span class="p_add">+	if (PageLRU(page) &amp;&amp; PageAnon(page) &amp;&amp; PageSwapBacked(page) &amp;&amp;</span>
<span class="p_add">+	    !PageUnevictable(page)) {</span>
<span class="p_add">+		bool active = PageActive(page);</span>
 
<span class="p_del">-		del_page_from_lru_list(page, lruvec, lru + LRU_ACTIVE);</span>
<span class="p_add">+		del_page_from_lru_list(page, lruvec, LRU_INACTIVE_ANON + active);</span>
 		ClearPageActive(page);
 		ClearPageReferenced(page);
<span class="p_del">-		add_page_to_lru_list(page, lruvec, lru);</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * lazyfree pages are clean anonymous pages. They have</span>
<span class="p_add">+		 * SwapBacked flag cleared to distinguish normal anonymous</span>
<span class="p_add">+		 * pages</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		ClearPageSwapBacked(page);</span>
<span class="p_add">+		add_page_to_lru_list(page, lruvec, LRU_INACTIVE_FILE);</span>
 
<span class="p_del">-		__count_vm_event(PGDEACTIVATE);</span>
<span class="p_del">-		update_page_reclaim_stat(lruvec, file, 0);</span>
<span class="p_add">+		__count_vm_events(PGLAZYFREE, hpage_nr_pages(page));</span>
<span class="p_add">+		update_page_reclaim_stat(lruvec, 1, 0);</span>
 	}
 }
 
<span class="p_chunk">@@ -604,9 +610,9 @@</span> <span class="p_context"> void lru_add_drain_cpu(int cpu)</span>
 	if (pagevec_count(pvec))
 		pagevec_lru_move_fn(pvec, lru_deactivate_file_fn, NULL);
 
<span class="p_del">-	pvec = &amp;per_cpu(lru_deactivate_pvecs, cpu);</span>
<span class="p_add">+	pvec = &amp;per_cpu(lru_lazyfree_pvecs, cpu);</span>
 	if (pagevec_count(pvec))
<span class="p_del">-		pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="p_add">+		pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
 
 	activate_page_drain(cpu);
 }
<span class="p_chunk">@@ -638,22 +644,22 @@</span> <span class="p_context"> void deactivate_file_page(struct page *page)</span>
 }
 
 /**
<span class="p_del">- * deactivate_page - deactivate a page</span>
<span class="p_add">+ * mark_page_lazyfree - make an anon page lazyfree</span>
  * @page: page to deactivate
  *
<span class="p_del">- * deactivate_page() moves @page to the inactive list if @page was on the active</span>
<span class="p_del">- * list and was not an unevictable page.  This is done to accelerate the reclaim</span>
<span class="p_del">- * of @page.</span>
<span class="p_add">+ * mark_page_lazyfree() moves @page to the inactive file list.</span>
<span class="p_add">+ * This is done to accelerate the reclaim of @page.</span>
  */
<span class="p_del">-void deactivate_page(struct page *page)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (PageLRU(page) &amp;&amp; PageActive(page) &amp;&amp; !PageUnevictable(page)) {</span>
<span class="p_del">-		struct pagevec *pvec = &amp;get_cpu_var(lru_deactivate_pvecs);</span>
<span class="p_add">+void mark_page_lazyfree(struct page *page)</span>
<span class="p_add">+ {</span>
<span class="p_add">+	if (PageLRU(page) &amp;&amp; PageAnon(page) &amp;&amp; PageSwapBacked(page) &amp;&amp;</span>
<span class="p_add">+	    !PageUnevictable(page)) {</span>
<span class="p_add">+		struct pagevec *pvec = &amp;get_cpu_var(lru_lazyfree_pvecs);</span>
 
 		get_page(page);
 		if (!pagevec_add(pvec, page) || PageCompound(page))
<span class="p_del">-			pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);</span>
<span class="p_del">-		put_cpu_var(lru_deactivate_pvecs);</span>
<span class="p_add">+			pagevec_lru_move_fn(pvec, lru_lazyfree_fn, NULL);</span>
<span class="p_add">+		put_cpu_var(lru_lazyfree_pvecs);</span>
 	}
 }
 
<span class="p_chunk">@@ -704,7 +710,7 @@</span> <span class="p_context"> void lru_add_drain_all(void)</span>
 		if (pagevec_count(&amp;per_cpu(lru_add_pvec, cpu)) ||
 		    pagevec_count(&amp;per_cpu(lru_rotate_pvecs, cpu)) ||
 		    pagevec_count(&amp;per_cpu(lru_deactivate_file_pvecs, cpu)) ||
<span class="p_del">-		    pagevec_count(&amp;per_cpu(lru_deactivate_pvecs, cpu)) ||</span>
<span class="p_add">+		    pagevec_count(&amp;per_cpu(lru_lazyfree_pvecs, cpu)) ||</span>
 		    need_activate_page_drain(cpu)) {
 			INIT_WORK(work, lru_add_drain_per_cpu);
 			queue_work_on(cpu, lru_add_drain_wq, work);
<span class="p_header">diff --git a/mm/vmstat.c b/mm/vmstat.c</span>
<span class="p_header">index 69f9aff..7774196 100644</span>
<span class="p_header">--- a/mm/vmstat.c</span>
<span class="p_header">+++ b/mm/vmstat.c</span>
<span class="p_chunk">@@ -992,6 +992,7 @@</span> <span class="p_context"> const char * const vmstat_text[] = {</span>
 	&quot;pgfree&quot;,
 	&quot;pgactivate&quot;,
 	&quot;pgdeactivate&quot;,
<span class="p_add">+	&quot;pglazyfree&quot;,</span>
 
 	&quot;pgfault&quot;,
 	&quot;pgmajfault&quot;,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



