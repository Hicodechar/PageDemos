
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[05/25] perf stat: Add support to measure SMI cost - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [05/25] perf stat: Add support to measure SMI cost</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 21, 2017, 6:02 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170621180245.23134-6-acme@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9802503/mbox/"
   >mbox</a>
|
   <a href="/patch/9802503/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9802503/">/patch/9802503/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BCEBF60329 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 18:08:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AC432285C4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 18:08:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A0A8528637; Wed, 21 Jun 2017 18:08:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AD799285E6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 21 Jun 2017 18:08:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752786AbdFUSD0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 21 Jun 2017 14:03:26 -0400
Received: from mail.kernel.org ([198.145.29.99]:49378 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752597AbdFUSDU (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 21 Jun 2017 14:03:20 -0400
Received: from jouet.infradead.org (179-240-150-69.3g.claro.net.br
	[179.240.150.69])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 1FAB021D2C;
	Wed, 21 Jun 2017 18:03:15 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org 1FAB021D2C
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=acme@kernel.org
From: Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;
To: Ingo Molnar &lt;mingo@kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, Kan Liang &lt;Kan.liang@intel.com&gt;,
	Andi Kleen &lt;ak@linux.intel.com&gt;, Kan Liang &lt;kan.liang@intel.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Robert Elliott &lt;elliott@hpe.com&gt;,
	Stephane Eranian &lt;eranian@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;
Subject: [PATCH 05/25] perf stat: Add support to measure SMI cost
Date: Wed, 21 Jun 2017 15:02:25 -0300
Message-Id: &lt;20170621180245.23134-6-acme@kernel.org&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;20170621180245.23134-1-acme@kernel.org&gt;
References: &lt;20170621180245.23134-1-acme@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - June 21, 2017, 6:02 p.m.</div>
<pre class="content">
<span class="from">From: Kan Liang &lt;Kan.liang@intel.com&gt;</span>

Implementing a new --smi-cost mode in perf stat to measure SMI cost.

During the measurement, the /sys/device/cpu/freeze_on_smi will be set.

The measurement can be done with one counter (unhalted core cycles), and
two free running MSR counters (IA32_APERF and SMI_COUNT).

In practice, the percentages of SMI core cycles should be more useful
than absolute value. So the output will be the percentage of SMI core
cycles and SMI#. metric_only will be set by default.

SMI cycles% = (aperf - unhalted core cycles) / aperf

Here is an example output.

 Performance counter stats for &#39;sudo echo &#39;:

SMI cycles%          SMI#
    0.1%              1

       0.010858678 seconds time elapsed

Users who wants to get the actual value can apply additional
--no-metric-only.
<span class="signed-off-by">
Signed-off-by: Kan Liang &lt;Kan.liang@intel.com&gt;</span>
<span class="acked-by">Acked-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;
Cc: Kan Liang &lt;kan.liang@intel.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Robert Elliott &lt;elliott@hpe.com&gt;
Cc: Stephane Eranian &lt;eranian@google.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Link: http://lkml.kernel.org/r/1495825538-5230-3-git-send-email-kan.liang@intel.com
<span class="signed-off-by">Signed-off-by: Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>
---
 tools/perf/Documentation/perf-stat.txt | 14 ++++++++++
 tools/perf/builtin-stat.c              | 49 ++++++++++++++++++++++++++++++++++
 tools/perf/util/stat-shadow.c          | 33 +++++++++++++++++++++++
 tools/perf/util/stat.c                 |  2 ++
 tools/perf/util/stat.h                 |  2 ++
 5 files changed, 100 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/Documentation/perf-stat.txt b/tools/perf/Documentation/perf-stat.txt</span>
<span class="p_header">index bd0e4417f2be..698076313606 100644</span>
<span class="p_header">--- a/tools/perf/Documentation/perf-stat.txt</span>
<span class="p_header">+++ b/tools/perf/Documentation/perf-stat.txt</span>
<span class="p_chunk">@@ -239,6 +239,20 @@</span> <span class="p_context"> taskset.</span>
 --no-merge::
 Do not merge results from same PMUs.
 
<span class="p_add">+--smi-cost::</span>
<span class="p_add">+Measure SMI cost if msr/aperf/ and msr/smi/ events are supported.</span>
<span class="p_add">+</span>
<span class="p_add">+During the measurement, the /sys/device/cpu/freeze_on_smi will be set to</span>
<span class="p_add">+freeze core counters on SMI.</span>
<span class="p_add">+The aperf counter will not be effected by the setting.</span>
<span class="p_add">+The cost of SMI can be measured by (aperf - unhalted core cycles).</span>
<span class="p_add">+</span>
<span class="p_add">+In practice, the percentages of SMI cycles is very useful for performance</span>
<span class="p_add">+oriented analysis. --metric_only will be applied by default.</span>
<span class="p_add">+The output is SMI cycles%, equals to (aperf - unhalted core cycles) / aperf</span>
<span class="p_add">+</span>
<span class="p_add">+Users who wants to get the actual value can apply --no-metric-only.</span>
<span class="p_add">+</span>
 EXAMPLES
 --------
 
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index ad9324d1daf9..324363054c3f 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -86,6 +86,7 @@</span> <span class="p_context"></span>
 #define DEFAULT_SEPARATOR	&quot; &quot;
 #define CNTR_NOT_SUPPORTED	&quot;&lt;not supported&gt;&quot;
 #define CNTR_NOT_COUNTED	&quot;&lt;not counted&gt;&quot;
<span class="p_add">+#define FREEZE_ON_SMI_PATH	&quot;devices/cpu/freeze_on_smi&quot;</span>
 
 static void print_counters(struct timespec *ts, int argc, const char **argv);
 
<span class="p_chunk">@@ -122,6 +123,14 @@</span> <span class="p_context"> static const char * topdown_attrs[] = {</span>
 	NULL,
 };
 
<span class="p_add">+static const char *smi_cost_attrs = {</span>
<span class="p_add">+	&quot;{&quot;</span>
<span class="p_add">+	&quot;msr/aperf/,&quot;</span>
<span class="p_add">+	&quot;msr/smi/,&quot;</span>
<span class="p_add">+	&quot;cycles&quot;</span>
<span class="p_add">+	&quot;}&quot;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 static struct perf_evlist	*evsel_list;
 
 static struct target target = {
<span class="p_chunk">@@ -137,6 +146,8 @@</span> <span class="p_context"> static bool			null_run			=  false;</span>
 static int			detailed_run			=  0;
 static bool			transaction_run;
 static bool			topdown_run			= false;
<span class="p_add">+static bool			smi_cost			= false;</span>
<span class="p_add">+static bool			smi_reset			= false;</span>
 static bool			big_num				=  true;
 static int			big_num_opt			=  -1;
 static const char		*csv_sep			= NULL;
<span class="p_chunk">@@ -1782,6 +1793,8 @@</span> <span class="p_context"> static const struct option stat_options[] = {</span>
 			&quot;Only print computed metrics. No raw values&quot;, enable_metric_only),
 	OPT_BOOLEAN(0, &quot;topdown&quot;, &amp;topdown_run,
 			&quot;measure topdown level 1 statistics&quot;),
<span class="p_add">+	OPT_BOOLEAN(0, &quot;smi-cost&quot;, &amp;smi_cost,</span>
<span class="p_add">+			&quot;measure SMI cost&quot;),</span>
 	OPT_END()
 };
 
<span class="p_chunk">@@ -2160,6 +2173,39 @@</span> <span class="p_context"> static int add_default_attributes(void)</span>
 		return 0;
 	}
 
<span class="p_add">+	if (smi_cost) {</span>
<span class="p_add">+		int smi;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (sysfs__read_int(FREEZE_ON_SMI_PATH, &amp;smi) &lt; 0) {</span>
<span class="p_add">+			fprintf(stderr, &quot;freeze_on_smi is not supported.\n&quot;);</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!smi) {</span>
<span class="p_add">+			if (sysfs__write_int(FREEZE_ON_SMI_PATH, 1) &lt; 0) {</span>
<span class="p_add">+				fprintf(stderr, &quot;Failed to set freeze_on_smi.\n&quot;);</span>
<span class="p_add">+				return -1;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			smi_reset = true;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmu_have_event(&quot;msr&quot;, &quot;aperf&quot;) &amp;&amp;</span>
<span class="p_add">+		    pmu_have_event(&quot;msr&quot;, &quot;smi&quot;)) {</span>
<span class="p_add">+			if (!force_metric_only)</span>
<span class="p_add">+				metric_only = true;</span>
<span class="p_add">+			err = parse_events(evsel_list, smi_cost_attrs, NULL);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			fprintf(stderr, &quot;To measure SMI cost, it needs &quot;</span>
<span class="p_add">+				&quot;msr/aperf/, msr/smi/ and cpu/cycles/ support\n&quot;);</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (err) {</span>
<span class="p_add">+			fprintf(stderr, &quot;Cannot set up SMI cost events\n&quot;);</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (topdown_run) {
 		char *str = NULL;
 		bool warn = false;
<span class="p_chunk">@@ -2742,6 +2788,9 @@</span> <span class="p_context"> int cmd_stat(int argc, const char **argv)</span>
 	perf_stat__exit_aggr_mode();
 	perf_evlist__free_stats(evsel_list);
 out:
<span class="p_add">+	if (smi_cost &amp;&amp; smi_reset)</span>
<span class="p_add">+		sysfs__write_int(FREEZE_ON_SMI_PATH, 0);</span>
<span class="p_add">+</span>
 	perf_evlist__delete(evsel_list);
 	return status;
 }
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index ac10cc675d39..719d6cb86952 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -44,6 +44,8 @@</span> <span class="p_context"> static struct stats runtime_topdown_slots_issued[NUM_CTX][MAX_NR_CPUS];</span>
 static struct stats runtime_topdown_slots_retired[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_topdown_fetch_bubbles[NUM_CTX][MAX_NR_CPUS];
 static struct stats runtime_topdown_recovery_bubbles[NUM_CTX][MAX_NR_CPUS];
<span class="p_add">+static struct stats runtime_smi_num_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_aperf_stats[NUM_CTX][MAX_NR_CPUS];</span>
 static struct rblist runtime_saved_values;
 static bool have_frontend_stalled;
 
<span class="p_chunk">@@ -157,6 +159,8 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 	memset(runtime_topdown_slots_issued, 0, sizeof(runtime_topdown_slots_issued));
 	memset(runtime_topdown_fetch_bubbles, 0, sizeof(runtime_topdown_fetch_bubbles));
 	memset(runtime_topdown_recovery_bubbles, 0, sizeof(runtime_topdown_recovery_bubbles));
<span class="p_add">+	memset(runtime_smi_num_stats, 0, sizeof(runtime_smi_num_stats));</span>
<span class="p_add">+	memset(runtime_aperf_stats, 0, sizeof(runtime_aperf_stats));</span>
 
 	next = rb_first(&amp;runtime_saved_values.entries);
 	while (next) {
<span class="p_chunk">@@ -217,6 +221,10 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
 		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count[0]);
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))
 		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count[0]);
<span class="p_add">+	else if (perf_stat_evsel__is(counter, SMI_NUM))</span>
<span class="p_add">+		update_stats(&amp;runtime_smi_num_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, APERF))</span>
<span class="p_add">+		update_stats(&amp;runtime_aperf_stats[ctx][cpu], count[0]);</span>
 
 	if (counter-&gt;collect_stat) {
 		struct saved_value *v = saved_value_lookup(counter, cpu, ctx,
<span class="p_chunk">@@ -592,6 +600,29 @@</span> <span class="p_context"> static double td_be_bound(int ctx, int cpu)</span>
 	return sanitize_val(1.0 - sum);
 }
 
<span class="p_add">+static void print_smi_cost(int cpu, struct perf_evsel *evsel,</span>
<span class="p_add">+			   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double smi_num, aperf, cycles, cost = 0.0;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+	const char *color = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	smi_num = avg_stats(&amp;runtime_smi_num_stats[ctx][cpu]);</span>
<span class="p_add">+	aperf = avg_stats(&amp;runtime_aperf_stats[ctx][cpu]);</span>
<span class="p_add">+	cycles = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if ((cycles == 0) || (aperf == 0))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (smi_num)</span>
<span class="p_add">+		cost = (aperf - cycles) / aperf * 100.00;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (cost &gt; 10)</span>
<span class="p_add">+		color = PERF_COLOR_RED;</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%8.1f%%&quot;, &quot;SMI cycles%&quot;, cost);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, NULL, &quot;%4.0f&quot;, &quot;SMI#&quot;, smi_num);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
 				   struct perf_stat_output_ctx *out)
<span class="p_chunk">@@ -825,6 +856,8 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		}
 		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);
 		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, SMI_NUM)) {</span>
<span class="p_add">+		print_smi_cost(cpu, evsel, out);</span>
 	} else {
 		print_metric(ctxp, NULL, NULL, NULL, 0);
 	}
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index c58174443dc1..53b9a994a3dc 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -86,6 +86,8 @@</span> <span class="p_context"> static const char *id_str[PERF_STAT_EVSEL_ID__MAX] = {</span>
 	ID(TOPDOWN_SLOTS_RETIRED, topdown-slots-retired),
 	ID(TOPDOWN_FETCH_BUBBLES, topdown-fetch-bubbles),
 	ID(TOPDOWN_RECOVERY_BUBBLES, topdown-recovery-bubbles),
<span class="p_add">+	ID(SMI_NUM, msr/smi/),</span>
<span class="p_add">+	ID(APERF, msr/aperf/),</span>
 };
 #undef ID
 
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 0a65ae23f495..7522bf10b03e 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -22,6 +22,8 @@</span> <span class="p_context"> enum perf_stat_evsel_id {</span>
 	PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_RETIRED,
 	PERF_STAT_EVSEL_ID__TOPDOWN_FETCH_BUBBLES,
 	PERF_STAT_EVSEL_ID__TOPDOWN_RECOVERY_BUBBLES,
<span class="p_add">+	PERF_STAT_EVSEL_ID__SMI_NUM,</span>
<span class="p_add">+	PERF_STAT_EVSEL_ID__APERF,</span>
 	PERF_STAT_EVSEL_ID__MAX,
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



