
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv6,07/10] x86/mm: Make kernel_physical_mapping_init() support 5-level paging - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv6,07/10] x86/mm: Make kernel_physical_mapping_init() support 5-level paging</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 24, 2017, 9:54 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170524095419.14281-8-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9745621/mbox/"
   >mbox</a>
|
   <a href="/patch/9745621/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9745621/">/patch/9745621/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	90EC4601C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 09:55:18 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 763332893D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 09:55:18 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 68D2D2893F; Wed, 24 May 2017 09:55:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CA1272893B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 09:55:17 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S939394AbdEXJyr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 May 2017 05:54:47 -0400
Received: from mga07.intel.com ([134.134.136.100]:50763 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S935473AbdEXJyg (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 May 2017 05:54:36 -0400
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by orsmga105.jf.intel.com with ESMTP; 24 May 2017 02:54:35 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.38,385,1491289200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;972469771&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga003.jf.intel.com with ESMTP; 24 May 2017 02:54:31 -0700
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id D83862F3; Wed, 24 May 2017 12:54:26 +0300 (EEST)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: x86@kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv6 07/10] x86/mm: Make kernel_physical_mapping_init() support
	5-level paging
Date: Wed, 24 May 2017 12:54:16 +0300
Message-Id: &lt;20170524095419.14281-8-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170524095419.14281-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170524095419.14281-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - May 24, 2017, 9:54 a.m.</div>
<pre class="content">
Populate additional page table level if CONFIG_X86_5LEVEL is enabled.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 arch/x86/mm/init_64.c | 69 ++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 60 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c</span>
<span class="p_header">index ce410c05d68d..124f1a77c181 100644</span>
<span class="p_header">--- a/arch/x86/mm/init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/init_64.c</span>
<span class="p_chunk">@@ -624,6 +624,57 @@</span> <span class="p_context"> phys_pud_init(pud_t *pud_page, unsigned long paddr, unsigned long paddr_end,</span>
 	return paddr_last;
 }
 
<span class="p_add">+static unsigned long __meminit</span>
<span class="p_add">+phys_p4d_init(p4d_t *p4d_page, unsigned long paddr, unsigned long paddr_end,</span>
<span class="p_add">+	      unsigned long page_size_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long paddr_next, paddr_last = paddr_end;</span>
<span class="p_add">+	unsigned long vaddr = (unsigned long)__va(paddr);</span>
<span class="p_add">+	int i = p4d_index(vaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!IS_ENABLED(CONFIG_X86_5LEVEL))</span>
<span class="p_add">+		return phys_pud_init((pud_t *) p4d_page, paddr, paddr_end, page_size_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (; i &lt; PTRS_PER_P4D; i++, paddr = paddr_next) {</span>
<span class="p_add">+		p4d_t *p4d;</span>
<span class="p_add">+		pud_t *pud;</span>
<span class="p_add">+</span>
<span class="p_add">+		vaddr = (unsigned long)__va(paddr);</span>
<span class="p_add">+		p4d = p4d_page + p4d_index(vaddr);</span>
<span class="p_add">+		paddr_next = (paddr &amp; P4D_MASK) + P4D_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (paddr &gt;= paddr_end) {</span>
<span class="p_add">+			if (!after_bootmem &amp;&amp;</span>
<span class="p_add">+			    !e820__mapped_any(paddr &amp; P4D_MASK, paddr_next,</span>
<span class="p_add">+					     E820_TYPE_RAM) &amp;&amp;</span>
<span class="p_add">+			    !e820__mapped_any(paddr &amp; P4D_MASK, paddr_next,</span>
<span class="p_add">+					     E820_TYPE_RESERVED_KERN))</span>
<span class="p_add">+				set_p4d(p4d, __p4d(0));</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!p4d_none(*p4d)) {</span>
<span class="p_add">+			pud = pud_offset(p4d, 0);</span>
<span class="p_add">+			paddr_last = phys_pud_init(pud, paddr,</span>
<span class="p_add">+					paddr_end,</span>
<span class="p_add">+					page_size_mask);</span>
<span class="p_add">+			__flush_tlb_all();</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		pud = alloc_low_page();</span>
<span class="p_add">+		paddr_last = phys_pud_init(pud, paddr, paddr_end,</span>
<span class="p_add">+					   page_size_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+		spin_lock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+		p4d_populate(&amp;init_mm, p4d, pud);</span>
<span class="p_add">+		spin_unlock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	__flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	return paddr_last;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Create page table mapping for the physical memory for specific physical
  * addresses. The virtual and physical addresses have to be aligned on PMD level
<span class="p_chunk">@@ -645,26 +696,26 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {
 		pgd_t *pgd = pgd_offset_k(vaddr);
 		p4d_t *p4d;
<span class="p_del">-		pud_t *pud;</span>
 
 		vaddr_next = (vaddr &amp; PGDIR_MASK) + PGDIR_SIZE;
 
<span class="p_del">-		BUILD_BUG_ON(pgd_none(*pgd));</span>
<span class="p_del">-		p4d = p4d_offset(pgd, vaddr);</span>
<span class="p_del">-		if (p4d_val(*p4d)) {</span>
<span class="p_del">-			pud = (pud_t *)p4d_page_vaddr(*p4d);</span>
<span class="p_del">-			paddr_last = phys_pud_init(pud, __pa(vaddr),</span>
<span class="p_add">+		if (pgd_val(*pgd)) {</span>
<span class="p_add">+			p4d = (p4d_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+			paddr_last = phys_p4d_init(p4d, __pa(vaddr),</span>
 						   __pa(vaddr_end),
 						   page_size_mask);
 			continue;
 		}
 
<span class="p_del">-		pud = alloc_low_page();</span>
<span class="p_del">-		paddr_last = phys_pud_init(pud, __pa(vaddr), __pa(vaddr_end),</span>
<span class="p_add">+		p4d = alloc_low_page();</span>
<span class="p_add">+		paddr_last = phys_p4d_init(p4d, __pa(vaddr), __pa(vaddr_end),</span>
 					   page_size_mask);
 
 		spin_lock(&amp;init_mm.page_table_lock);
<span class="p_del">-		p4d_populate(&amp;init_mm, p4d, pud);</span>
<span class="p_add">+		if (IS_ENABLED(CONFIG_X86_5LEVEL))</span>
<span class="p_add">+			pgd_populate(&amp;init_mm, pgd, p4d);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			p4d_populate(&amp;init_mm, p4d_offset(pgd, vaddr), (pud_t *) p4d);</span>
 		spin_unlock(&amp;init_mm.page_table_lock);
 		pgd_changed = true;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



