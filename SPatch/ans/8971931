
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,1/5] powerpc: Rename context.vdso_base to context.vdso - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,1/5] powerpc: Rename context.vdso_base to context.vdso</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 28, 2016, 3:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1461856737-17071-2-git-send-email-cov@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8971931/mbox/"
   >mbox</a>
|
   <a href="/patch/8971931/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8971931/">/patch/8971931/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id E27289F1C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 15:20:55 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C7445202F8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 15:20:54 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A279F202FE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 15:20:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753283AbcD1PUk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 28 Apr 2016 11:20:40 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:36799 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752634AbcD1PUg (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 28 Apr 2016 11:20:36 -0400
Received: from smtp.codeaurora.org (localhost [127.0.0.1])
	by smtp.codeaurora.org (Postfix) with ESMTP id 05B826121C;
	Thu, 28 Apr 2016 15:20:35 +0000 (UTC)
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
	id DF1AF6130E; Thu, 28 Apr 2016 15:20:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
Received: from illium.qualcomm.com (global_nat1_iad_fw.qualcomm.com
	[129.46.232.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
	(No client certificate requested)
	(Authenticated sender: cov@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 11D1A6027F;
	Thu, 28 Apr 2016 15:20:31 +0000 (UTC)
From: Christopher Covington &lt;cov@codeaurora.org&gt;
To: Catalin Marinas &lt;catalin.marinas@arm.com&gt;, criu@openvz.org,
	Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;,
	Will Deacon &lt;Will.Deacon@arm.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org, linux-arch@vger.kernel.org,
	linux-mm@kvack.org
Cc: Christopher Covington &lt;cov@codeaurora.org&gt;
Subject: [RFC 1/5] powerpc: Rename context.vdso_base to context.vdso
Date: Thu, 28 Apr 2016 11:18:53 -0400
Message-Id: &lt;1461856737-17071-2-git-send-email-cov@codeaurora.org&gt;
X-Mailer: git-send-email 2.8.1
In-Reply-To: &lt;1461856737-17071-1-git-send-email-cov@codeaurora.org&gt;
References: &lt;20151202121918.GA4523@arm.com&gt;
	&lt;1461856737-17071-1-git-send-email-cov@codeaurora.org&gt;
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a> - April 28, 2016, 3:18 p.m.</div>
<pre class="content">
In order to share remap and unmap support for the VDSO with other
architectures without duplicating the code, we need a common name and type
for the address of the VDSO. An informal survey of the architectures
indicates unsigned long vdso is popular. Change the variable name in
powerpc from mm-&gt;context.vdso_base to simply mm-&gt;context.vdso.
<span class="signed-off-by">
Signed-off-by: Christopher Covington &lt;cov@codeaurora.org&gt;</span>
---
 arch/powerpc/include/asm/book3s/32/mmu-hash.h |  2 +-
 arch/powerpc/include/asm/book3s/64/mmu-hash.h |  2 +-
 arch/powerpc/include/asm/mm-arch-hooks.h      |  6 +++---
 arch/powerpc/include/asm/mmu-40x.h            |  2 +-
 arch/powerpc/include/asm/mmu-44x.h            |  2 +-
 arch/powerpc/include/asm/mmu-8xx.h            |  2 +-
 arch/powerpc/include/asm/mmu-book3e.h         |  2 +-
 arch/powerpc/include/asm/mmu_context.h        |  4 ++--
 arch/powerpc/include/asm/vdso.h               |  2 +-
 arch/powerpc/include/uapi/asm/elf.h           |  2 +-
 arch/powerpc/kernel/signal_32.c               |  8 ++++----
 arch/powerpc/kernel/signal_64.c               |  4 ++--
 arch/powerpc/kernel/vdso.c                    |  8 ++++----
 arch/powerpc/perf/callchain.c                 | 12 ++++++------
 14 files changed, 29 insertions(+), 29 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4745">Balbir Singh</a> - May 2, 2016, 1:05 a.m.</div>
<pre class="content">
On 29/04/16 01:18, Christopher Covington wrote:
<span class="quote">&gt; In order to share remap and unmap support for the VDSO with other</span>
<span class="quote">&gt; architectures without duplicating the code, we need a common name and type</span>
<span class="quote">&gt; for the address of the VDSO. An informal survey of the architectures</span>
<span class="quote">&gt; indicates unsigned long vdso is popular. Change the variable name in</span>
<span class="quote">&gt; powerpc from mm-&gt;context.vdso_base to simply mm-&gt;context.vdso.</span>
<span class="quote">&gt; </span>

Could you please provide additional details on why the remap/unmap operations are required?
This patch does rename, but should it abstract via a function acesss to vmap field using arch_* operations? Not sure

Balbir Singh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41311">Christopher Covington</a> - May 4, 2016, 9:21 p.m.</div>
<pre class="content">
Hi Balbir,

On 05/01/2016 09:05 PM, Balbir Singh wrote:
<span class="quote">&gt; On 29/04/16 01:18, Christopher Covington wrote:</span>
<span class="quote">&gt;&gt; In order to share remap and unmap support for the VDSO with other</span>
<span class="quote">&gt;&gt; architectures without duplicating the code, we need a common name and type</span>
<span class="quote">&gt;&gt; for the address of the VDSO. An informal survey of the architectures</span>
<span class="quote">&gt;&gt; indicates unsigned long vdso is popular. Change the variable name in</span>
<span class="quote">&gt;&gt; powerpc from mm-&gt;context.vdso_base to simply mm-&gt;context.vdso.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Could you please provide additional details on why the remap/unmap operations are required?</span>

The goal is to make checkpointing and restoring processes work on
several different architectures and ABIs, in the face of Address Space
Layout Randomization (ASLR) and other factors that might change the VDSO
virtual address from one exec() to the next.

Here&#39;s the patch adding PowerPC support:

http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=83d3f0e90c6c8f833e3da91917c243a916fda69e
<span class="quote">
&gt; This patch does rename, but should it abstract via a function acesss</span>
<span class="quote">&gt; to vmap field using arch_* operations? Not sure</span>

I&#39;m sorry, but I don&#39;t understand this question. Are you saying ARM,
Power etc. need VDSO unmap and remap log that behave differently? So far
I&#39;ve found the differences to be stylistic rather than really affecting
generated code behavior.

Thanks,
Christopher Covington
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/book3s/32/mmu-hash.h b/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_header">index 16f513e..9d8de53 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/book3s/32/mmu-hash.h</span>
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> struct hash_pte {</span>
 
 typedef struct {
 	unsigned long id;
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/book3s/64/mmu-hash.h b/arch/powerpc/include/asm/book3s/64/mmu-hash.h</span>
<span class="p_header">index 0cea480..99df600 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/book3s/64/mmu-hash.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/book3s/64/mmu-hash.h</span>
<span class="p_chunk">@@ -525,7 +525,7 @@</span> <span class="p_context"> typedef struct {</span>
 #else
 	u16 sllp;		/* SLB page size encoding */
 #endif
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 #ifdef CONFIG_PPC_SUBPAGE_PROT
 	struct subpage_prot_table spt;
 #endif /* CONFIG_PPC_SUBPAGE_PROT */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mm-arch-hooks.h b/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_header">index f2a2da8..ea6da89 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mm-arch-hooks.h</span>
<span class="p_chunk">@@ -18,10 +18,10 @@</span> <span class="p_context"> static inline void arch_remap(struct mm_struct *mm,</span>
 {
 	/*
 	 * mremap() doesn&#39;t allow moving multiple vmas so we can limit the
<span class="p_del">-	 * check to old_start == vdso_base.</span>
<span class="p_add">+	 * check to old_start == vdso.</span>
 	 */
<span class="p_del">-	if (old_start == mm-&gt;context.vdso_base)</span>
<span class="p_del">-		mm-&gt;context.vdso_base = new_start;</span>
<span class="p_add">+	if (old_start == mm-&gt;context.vdso)</span>
<span class="p_add">+		mm-&gt;context.vdso = new_start;</span>
 }
 #define arch_remap arch_remap
 
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-40x.h b/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_header">index 3491686..e8e57b7 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-40x.h</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"></span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-44x.h b/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_header">index bf52d70..471891c 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-44x.h</span>
<span class="p_chunk">@@ -107,7 +107,7 @@</span> <span class="p_context"> extern unsigned int tlb_44x_index;</span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 } mm_context_t;
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">index 0a566f1..9d1f160 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_chunk">@@ -167,7 +167,7 @@</span> <span class="p_context"></span>
 typedef struct {
 	unsigned int id;
 	unsigned int active;
<span class="p_del">-	unsigned long vdso_base;</span>
<span class="p_add">+	unsigned long vdso;</span>
 } mm_context_t;
 #endif /* !__ASSEMBLY__ */
 
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-book3e.h b/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_header">index cd4f04a..0cf1d11 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-book3e.h</span>
<span class="p_chunk">@@ -228,7 +228,7 @@</span> <span class="p_context"> extern unsigned int tlbcam_index;</span>
 typedef struct {
 	unsigned int	id;
 	unsigned int	active;
<span class="p_del">-	unsigned long	vdso_base;</span>
<span class="p_add">+	unsigned long	vdso;</span>
 #ifdef CONFIG_PPC_MM_SLICES
 	u64 low_slices_psize;   /* SLB page size encodings */
 	u64 high_slices_psize;  /* 4 bits per slice for now */
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu_context.h b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">index 4eaab40..508b842 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -139,8 +139,8 @@</span> <span class="p_context"> static inline void arch_unmap(struct mm_struct *mm,</span>
 			      struct vm_area_struct *vma,
 			      unsigned long start, unsigned long end)
 {
<span class="p_del">-	if (start &lt;= mm-&gt;context.vdso_base &amp;&amp; mm-&gt;context.vdso_base &lt; end)</span>
<span class="p_del">-		mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+	if (start &lt;= mm-&gt;context.vdso &amp;&amp; mm-&gt;context.vdso &lt; end)</span>
<span class="p_add">+		mm-&gt;context.vdso = 0;</span>
 }
 
 static inline void arch_bprm_mm_init(struct mm_struct *mm,
<span class="p_header">diff --git a/arch/powerpc/include/asm/vdso.h b/arch/powerpc/include/asm/vdso.h</span>
<span class="p_header">index c53f5f6..fc90971 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/vdso.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/vdso.h</span>
<span class="p_chunk">@@ -17,7 +17,7 @@</span> <span class="p_context"></span>
 
 #ifndef __ASSEMBLY__
 
<span class="p_del">-/* Offsets relative to thread-&gt;vdso_base */</span>
<span class="p_add">+/* Offsets relative to mm-&gt;context.vdso */</span>
 extern unsigned long vdso64_rt_sigtramp;
 extern unsigned long vdso32_sigtramp;
 extern unsigned long vdso32_rt_sigtramp;
<span class="p_header">diff --git a/arch/powerpc/include/uapi/asm/elf.h b/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_header">index c2d21d1..6cf0bbf 100644</span>
<span class="p_header">--- a/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_header">+++ b/arch/powerpc/include/uapi/asm/elf.h</span>
<span class="p_chunk">@@ -177,7 +177,7 @@</span> <span class="p_context"> do {									\</span>
 	NEW_AUX_ENT(AT_DCACHEBSIZE, dcache_bsize);			\
 	NEW_AUX_ENT(AT_ICACHEBSIZE, icache_bsize);			\
 	NEW_AUX_ENT(AT_UCACHEBSIZE, ucache_bsize);			\
<span class="p_del">-	VDSO_AUX_ENT(AT_SYSINFO_EHDR, current-&gt;mm-&gt;context.vdso_base);	\</span>
<span class="p_add">+	VDSO_AUX_ENT(AT_SYSINFO_EHDR, current-&gt;mm-&gt;context.vdso);	\</span>
 } while (0)
 
 /* PowerPC64 relocations defined by the ABIs */
<span class="p_header">diff --git a/arch/powerpc/kernel/signal_32.c b/arch/powerpc/kernel/signal_32.c</span>
<span class="p_header">index b6aa378..39c39d72 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/signal_32.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/signal_32.c</span>
<span class="p_chunk">@@ -1000,9 +1000,9 @@</span> <span class="p_context"> int handle_rt_signal32(struct ksignal *ksig, sigset_t *oldset,</span>
 	/* Save user registers on the stack */
 	frame = &amp;rt_sf-&gt;uc.uc_mcontext;
 	addr = frame;
<span class="p_del">-	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_add">+	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso) {</span>
 		sigret = 0;
<span class="p_del">-		tramp = current-&gt;mm-&gt;context.vdso_base + vdso32_rt_sigtramp;</span>
<span class="p_add">+		tramp = current-&gt;mm-&gt;context.vdso + vdso32_rt_sigtramp;</span>
 	} else {
 		sigret = __NR_rt_sigreturn;
 		tramp = (unsigned long) frame-&gt;tramp;
<span class="p_chunk">@@ -1425,9 +1425,9 @@</span> <span class="p_context"> int handle_signal32(struct ksignal *ksig, sigset_t *oldset, struct pt_regs *regs</span>
 	    || __put_user(ksig-&gt;sig, &amp;sc-&gt;signal))
 		goto badframe;
 
<span class="p_del">-	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_add">+	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso) {</span>
 		sigret = 0;
<span class="p_del">-		tramp = current-&gt;mm-&gt;context.vdso_base + vdso32_sigtramp;</span>
<span class="p_add">+		tramp = current-&gt;mm-&gt;context.vdso + vdso32_sigtramp;</span>
 	} else {
 		sigret = __NR_sigreturn;
 		tramp = (unsigned long) frame-&gt;mctx.tramp;
<span class="p_header">diff --git a/arch/powerpc/kernel/signal_64.c b/arch/powerpc/kernel/signal_64.c</span>
<span class="p_header">index 2552079..4cb437f 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/signal_64.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/signal_64.c</span>
<span class="p_chunk">@@ -751,8 +751,8 @@</span> <span class="p_context"> int handle_rt_signal64(struct ksignal *ksig, sigset_t *set, struct pt_regs *regs</span>
 	current-&gt;thread.fp_state.fpscr = 0;
 
 	/* Set up to return from userspace. */
<span class="p_del">-	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base) {</span>
<span class="p_del">-		regs-&gt;link = current-&gt;mm-&gt;context.vdso_base + vdso64_rt_sigtramp;</span>
<span class="p_add">+	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso) {</span>
<span class="p_add">+		regs-&gt;link = current-&gt;mm-&gt;context.vdso + vdso64_rt_sigtramp;</span>
 	} else {
 		err |= setup_trampoline(__NR_rt_sigreturn, &amp;frame-&gt;tramp[0]);
 		if (err)
<span class="p_header">diff --git a/arch/powerpc/kernel/vdso.c b/arch/powerpc/kernel/vdso.c</span>
<span class="p_header">index def1b8b..e6e5f68 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/vdso.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/vdso.c</span>
<span class="p_chunk">@@ -179,7 +179,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 	vdso_base = VDSO32_MBASE;
 #endif
 
<span class="p_del">-	current-&gt;mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = 0;</span>
 
 	/* vDSO has a problem and was disabled, just don&#39;t &quot;enable&quot; it for the
 	 * process
<span class="p_chunk">@@ -213,7 +213,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 	 * install_special_mapping or the perf counter mmap tracking code
 	 * will fail to recognise it as a vDSO (since arch_vma_name fails).
 	 */
<span class="p_del">-	current-&gt;mm-&gt;context.vdso_base = vdso_base;</span>
<span class="p_add">+	current-&gt;mm-&gt;context.vdso = vdso_base;</span>
 
 	/*
 	 * our vma flags don&#39;t have VM_WRITE so by default, the process isn&#39;t
<span class="p_chunk">@@ -230,7 +230,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 				     VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
 				     vdso_pagelist);
 	if (rc) {
<span class="p_del">-		current-&gt;mm-&gt;context.vdso_base = 0;</span>
<span class="p_add">+		current-&gt;mm-&gt;context.vdso = 0;</span>
 		goto fail_mmapsem;
 	}
 
<span class="p_chunk">@@ -244,7 +244,7 @@</span> <span class="p_context"> int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)</span>
 
 const char *arch_vma_name(struct vm_area_struct *vma)
 {
<span class="p_del">-	if (vma-&gt;vm_mm &amp;&amp; vma-&gt;vm_start == vma-&gt;vm_mm-&gt;context.vdso_base)</span>
<span class="p_add">+	if (vma-&gt;vm_mm &amp;&amp; vma-&gt;vm_start == vma-&gt;vm_mm-&gt;context.vdso)</span>
 		return &quot;[vdso]&quot;;
 	return NULL;
 }
<span class="p_header">diff --git a/arch/powerpc/perf/callchain.c b/arch/powerpc/perf/callchain.c</span>
<span class="p_header">index e04a675..04fc505 100644</span>
<span class="p_header">--- a/arch/powerpc/perf/callchain.c</span>
<span class="p_header">+++ b/arch/powerpc/perf/callchain.c</span>
<span class="p_chunk">@@ -209,8 +209,8 @@</span> <span class="p_context"> static int is_sigreturn_64_address(unsigned long nip, unsigned long fp)</span>
 {
 	if (nip == fp + offsetof(struct signal_frame_64, tramp))
 		return 1;
<span class="p_del">-	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso64_rt_sigtramp)</span>
<span class="p_add">+	if (vdso64_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso64_rt_sigtramp)</span>
 		return 1;
 	return 0;
 }
<span class="p_chunk">@@ -368,8 +368,8 @@</span> <span class="p_context"> static int is_sigreturn_32_address(unsigned int nip, unsigned int fp)</span>
 {
 	if (nip == fp + offsetof(struct signal_frame_32, mctx.mc_pad))
 		return 1;
<span class="p_del">-	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso32_sigtramp)</span>
<span class="p_add">+	if (vdso32_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso32_sigtramp)</span>
 		return 1;
 	return 0;
 }
<span class="p_chunk">@@ -379,8 +379,8 @@</span> <span class="p_context"> static int is_rt_sigreturn_32_address(unsigned int nip, unsigned int fp)</span>
 	if (nip == fp + offsetof(struct rt_signal_frame_32,
 				 uc.uc_mcontext.mc_pad))
 		return 1;
<span class="p_del">-	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso_base &amp;&amp;</span>
<span class="p_del">-	    nip == current-&gt;mm-&gt;context.vdso_base + vdso32_rt_sigtramp)</span>
<span class="p_add">+	if (vdso32_rt_sigtramp &amp;&amp; current-&gt;mm-&gt;context.vdso &amp;&amp;</span>
<span class="p_add">+	    nip == current-&gt;mm-&gt;context.vdso + vdso32_rt_sigtramp)</span>
 		return 1;
 	return 0;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



