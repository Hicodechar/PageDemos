
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86/mm: disable preemption during CR3 read+write - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86/mm: disable preemption during CR3 read+write</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=481">Sebastian Andrzej Siewior</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 5, 2016, 1:37 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1470404259-26290-1-git-send-email-bigeasy@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9265395/mbox/"
   >mbox</a>
|
   <a href="/patch/9265395/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9265395/">/patch/9265395/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5F45E60760 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Aug 2016 13:37:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 44CCB28449
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Aug 2016 13:37:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3225828448; Fri,  5 Aug 2016 13:37:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 17FDC28448
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  5 Aug 2016 13:37:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759730AbcHENhr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 5 Aug 2016 09:37:47 -0400
Received: from Galois.linutronix.de ([146.0.238.70]:38797 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1758060AbcHENhq (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 5 Aug 2016 09:37:46 -0400
Received: from localhost ([127.0.0.1] helo=bazinga.breakpoint.cc)
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;bigeasy@linutronix.de&gt;)
	id 1bVfJk-0005Nq-Hm; Fri, 05 Aug 2016 15:37:40 +0200
From: Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: x86@kernel.org, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;
Subject: [PATCH] x86/mm: disable preemption during CR3 read+write
Date: Fri,  5 Aug 2016 15:37:39 +0200
Message-Id: &lt;1470404259-26290-1-git-send-email-bigeasy@linutronix.de&gt;
X-Mailer: git-send-email 2.8.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=481">Sebastian Andrzej Siewior</a> - Aug. 5, 2016, 1:37 p.m.</div>
<pre class="content">
Usually current-&gt;mm (and therefore mm-&gt;pgd) stays the same during the
lifetime of a task so it does not matter if a task gets preempted during
the read and write of the CR3.

But then, there is this scenario on x86-UP:
TaskA is in do_exit() and exit_mm() sets current-&gt;mm = NULL followed by
mmput() -&gt; exit_mmap() -&gt; tlb_finish_mmu() -&gt; tlb_flush_mmu() -&gt;
tlb_flush_mmu_tlbonly() -&gt; tlb_flush() -&gt; flush_tlb_mm_range() -&gt;
__flush_tlb_up() -&gt; __flush_tlb() -&gt;  __native_flush_tlb().

At this point current-&gt;mm is NULL but current-&gt;active_mm still points to
the &quot;old&quot; mm.
Let&#39;s preempt taskA _after_ native_read_cr3() by taskB. TaskB has its
own mm so CR3 has changed.
Now preempt back to taskA. TaskA has no -&gt;mm set so it borrows taskB&#39;s
mm and so CR3 remains unchanged. Once taskA gets active it continues
where it was interrupted and that means it writes its old CR3 value
back. Everything is fine because userland won&#39;t need its memory
anymore.

Now the fun part. Let&#39;s preempt taskA one more time and get back to
taskB. This time switch_mm() won&#39;t do a thing because oldmm
(-&gt;active_mm) is the same as mm (as per context_switch()). So we remain
with a bad CR3 / pgd and return to userland.
The next thing that happens is handle_mm_fault() with an address for the
execution of its code in userland. handle_mm_fault() realizes that it
has a PTE with proper rights so it returns doing nothing. But the CPU
looks at the wrong pgd and insists that something is wrong and faults
again. And again. And one more time…

This pagefault circle continues until the scheduler gets tired of it and
puts another task on the CPU. It gets little difficult if the task is a
RT task with a high priority. The system will either freeze or it gets
fixed by the software watchdog thread which usually runs at RT-max prio.
But waiting for the watchdog will increase the latency of the RT task
which is no good.

Cc: stable@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Sebastian Andrzej Siewior &lt;bigeasy@linutronix.de&gt;</span>
---
 arch/x86/include/asm/tlbflush.h | 7 +++++++
 1 file changed, 7 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Aug. 5, 2016, 1:53 p.m.</div>
<pre class="content">
On Fri, Aug 05, 2016 at 03:37:39PM +0200, Sebastian Andrzej Siewior wrote:
<span class="quote">&gt; diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; index 4e5be94e079a..1ee065954e24 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -135,7 +135,14 @@ static inline void cr4_set_bits_and_update_boot(unsigned long mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void __native_flush_tlb(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * if current-&gt;mm == NULL then we borrow a mm which may change during a</span>
<span class="quote">&gt; +	 * task switch and therefore we must not be preempted while we write CR3</span>
<span class="quote">&gt; +	 * back.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	preempt_disable();</span>
<span class="quote">&gt;  	native_write_cr3(native_read_cr3());</span>
<span class="quote">&gt; +	preempt_enable();</span>
<span class="quote">&gt;  }</span>
<span class="acked-by">
Acked-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Aug. 5, 2016, 2:38 p.m.</div>
<pre class="content">
On Fri, 2016-08-05 at 15:37 +0200, Sebastian Andrzej Siewior wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -135,7 +135,14 @@ static inline void</span>
<span class="quote">&gt; cr4_set_bits_and_update_boot(unsigned long mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void __native_flush_tlb(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * if current-&gt;mm == NULL then we borrow a mm which may</span>
<span class="quote">&gt; change during a</span>
<span class="quote">&gt; +	 * task switch and therefore we must not be preempted while</span>
<span class="quote">&gt; we write CR3</span>
<span class="quote">&gt; +	 * back.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	preempt_disable();</span>
<span class="quote">&gt;  	native_write_cr3(native_read_cr3());</span>
<span class="quote">&gt; +	preempt_enable();</span>
<span class="quote">&gt;  }</span>

That is one subtle race!
<span class="acked-by">
Acked-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Aug. 5, 2016, 3:42 p.m.</div>
<pre class="content">
On Fri, Aug 5, 2016 at 6:37 AM, Sebastian Andrzej Siewior
&lt;bigeasy@linutronix.de&gt; wrote:
<span class="quote">&gt; Usually current-&gt;mm (and therefore mm-&gt;pgd) stays the same during the</span>
<span class="quote">&gt; lifetime of a task so it does not matter if a task gets preempted during</span>
<span class="quote">&gt; the read and write of the CR3.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; But then, there is this scenario on x86-UP:</span>
<span class="quote">&gt; TaskA is in do_exit() and exit_mm() sets current-&gt;mm = NULL followed by</span>
<span class="quote">&gt; mmput() -&gt; exit_mmap() -&gt; tlb_finish_mmu() -&gt; tlb_flush_mmu() -&gt;</span>
<span class="quote">&gt; tlb_flush_mmu_tlbonly() -&gt; tlb_flush() -&gt; flush_tlb_mm_range() -&gt;</span>
<span class="quote">&gt; __flush_tlb_up() -&gt; __flush_tlb() -&gt;  __native_flush_tlb().</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; At this point current-&gt;mm is NULL but current-&gt;active_mm still points to</span>
<span class="quote">&gt; the &quot;old&quot; mm.</span>
<span class="quote">&gt; Let&#39;s preempt taskA _after_ native_read_cr3() by taskB. TaskB has its</span>
<span class="quote">&gt; own mm so CR3 has changed.</span>
<span class="quote">&gt; Now preempt back to taskA. TaskA has no -&gt;mm set so it borrows taskB&#39;s</span>
<span class="quote">&gt; mm and so CR3 remains unchanged. Once taskA gets active it continues</span>
<span class="quote">&gt; where it was interrupted and that means it writes its old CR3 value</span>
<span class="quote">&gt; back. Everything is fine because userland won&#39;t need its memory</span>
<span class="quote">&gt; anymore.</span>

This should affect kernel threads too, right?
<span class="acked-by">
Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=481">Sebastian Andrzej Siewior</a> - Aug. 5, 2016, 3:52 p.m.</div>
<pre class="content">
On 08/05/2016 05:42 PM, Andy Lutomirski wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; This should affect kernel threads too, right?</span>

I don&#39;t think so because they don&#39;t have a MM in the first place so
they don&#39;t shouldn&#39;t need to flush a TLB. But then there is iounmap()
and vfree() for instance which does

vmap_debug_free_range()
{
   if (debug_pagealloc_enabled()) {
         vunmap_page_range(start, end);
         flush_tlb_kernel_range(start, end);
   }
}

so it looks like a candidate.
<span class="quote">
&gt; Acked-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>

Sebastian
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 4e5be94e079a..1ee065954e24 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -135,7 +135,14 @@</span> <span class="p_context"> static inline void cr4_set_bits_and_update_boot(unsigned long mask)</span>
 
 static inline void __native_flush_tlb(void)
 {
<span class="p_add">+	/*</span>
<span class="p_add">+	 * if current-&gt;mm == NULL then we borrow a mm which may change during a</span>
<span class="p_add">+	 * task switch and therefore we must not be preempted while we write CR3</span>
<span class="p_add">+	 * back.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	preempt_disable();</span>
 	native_write_cr3(native_read_cr3());
<span class="p_add">+	preempt_enable();</span>
 }
 
 static inline void __native_flush_tlb_global_irq_disabled(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



