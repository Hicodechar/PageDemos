
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4/4] drm/i915: Use __sg_alloc_table_from_pages for userptr allocations - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4/4] drm/i915: Use __sg_alloc_table_from_pages for userptr allocations</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170415">Tvrtko Ursulin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 16, 2017, 2:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1484575930-6810-4-git-send-email-tvrtko.ursulin@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9518901/mbox/"
   >mbox</a>
|
   <a href="/patch/9518901/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9518901/">/patch/9518901/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D3F546020B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 14:12:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B4966276D6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 14:12:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A93A828481; Mon, 16 Jan 2017 14:12:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 22EA8276D6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Jan 2017 14:12:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751180AbdAPOMe (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Jan 2017 09:12:34 -0500
Received: from mail-wm0-f65.google.com ([74.125.82.65]:33454 &quot;EHLO
	mail-wm0-f65.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751080AbdAPOM2 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Jan 2017 09:12:28 -0500
Received: by mail-wm0-f65.google.com with SMTP id r144so31114253wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 16 Jan 2017 06:12:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=ursulin-net.20150623.gappssmtp.com; s=20150623;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=LBdC5IOywloJbqpguJewlucCCMH1sr3FKpwIMnBt56U=;
	b=SAke1FM4Ksqs4Enu+V/fslRjXLFw2qgd2ggCP9Ieo/zfMvHAp3imrTu6FM1Rr5gq3x
	oVqQrINIRGz4fKlDcj42W4qAcNjdaVPf6WX4GNVwdPalOj6Wii2+pkcVhKtE6T1R2KTk
	WJr7JgVV/wuI1TVFqodvf2vvhw7TTVVUx8bQVqx/Qdixly3a/9zFpz6oqbjkmcb3dxOv
	8X3S69fBhhCOEb9H+6Ex4u5tzrOu8My2ZSupLSu7uiqDHxqu3Mc9N4sAtJAK6nN9AEJR
	Np0u5LkGEyYd9XIJr5U9l3IDwy53rEXNAv71PmIxjxUuaXxzKLM3ZUTs2BithHgX/ASf
	oyKg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=LBdC5IOywloJbqpguJewlucCCMH1sr3FKpwIMnBt56U=;
	b=DMEP1m83QP8P4B1v86V7HrPkPLJbJY3NvTXWTjzBj20eDOl2ur+9Gdhbc2HexHKFFc
	0zpZbZrUvNkMu2APrzNrA47wu1u055bgBHBQwkgTAOJvI/Dmcq/67Oj3LtNmIB8lv55b
	Mxz8Nxm7dFzlxmEGApej4zn13U4/HWx4INCFVP9P8aLbG8IeoEPPodkjozvamczsa32m
	ada+tsI1Cdmrdu2HRoRLd8AULlfgCYH6Z2D/vicjgA3HXNx5mROR/NQmasewEGxcdDEX
	4gCSGHR3NBlHvPgM6DkZuOX7mj7+opBheB1va0vMnR+Qk1c9xPHUOsrQ/OInf3L5aIBC
	c2yQ==
X-Gm-Message-State: AIkVDXI3uaC3w7DNTpXACE71ByVICV/t606GGH9Ns8lbDsbcXyI6a5rujXMVzTHWgDBt6A==
X-Received: by 10.28.198.65 with SMTP id w62mr12813891wmf.123.1484575946739; 
	Mon, 16 Jan 2017 06:12:26 -0800 (PST)
Received: from t460p.intel ([2a02:c7d:9bd6:b000:f37e:1e07:a7d8:46cd])
	by smtp.gmail.com with ESMTPSA id
	c202sm29123067wmd.10.2017.01.16.06.12.24
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 16 Jan 2017 06:12:25 -0800 (PST)
From: Tvrtko Ursulin &lt;tursulin@ursulin.net&gt;
X-Google-Original-From: Tvrtko Ursulin &lt;tvrtko.ursulin@linux.intel.com&gt;
To: Intel-gfx@lists.freedesktop.org
Cc: tursulin@ursulin.net, Tvrtko Ursulin &lt;tvrtko.ursulin@intel.com&gt;,
	Chris Wilson &lt;chris@chris-wilson.co.uk&gt;, linux-kernel@vger.kernel.org,
	Joonas Lahtinen &lt;joonas.lahtinen@linux.intel.com&gt;
Subject: [PATCH 4/4] drm/i915: Use __sg_alloc_table_from_pages for userptr
	allocations
Date: Mon, 16 Jan 2017 14:12:10 +0000
Message-Id: &lt;1484575930-6810-4-git-send-email-tvrtko.ursulin@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1484575930-6810-1-git-send-email-tvrtko.ursulin@linux.intel.com&gt;
References: &lt;1484575930-6810-1-git-send-email-tvrtko.ursulin@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170415">Tvrtko Ursulin</a> - Jan. 16, 2017, 2:12 p.m.</div>
<pre class="content">
<span class="from">From: Tvrtko Ursulin &lt;tvrtko.ursulin@intel.com&gt;</span>

With the addition of __sg_alloc_table_from_pages we can control
the maximum coallescing size and eliminate a separate path for
allocating backing store here.

Similar to 871dfbd67d4e (&quot;drm/i915: Allow compaction upto
SWIOTLB max segment size&quot;) this enables more compact sg lists to
be created and so has a beneficial effect on workloads with many
and/or large objects of this class.

v2:
 * Rename helper to i915_sg_segment_size and fix swiotlb override.
 * Commit message update.

v3:
 * Actually include the swiotlb override fix.

v4:
 * Regroup parameters a bit. (Chris Wilson)

v5:
 * Rebase for swiotlb_max_segment.
 * Add DMA map failure handling as in abb0deacb5a6
   (&quot;drm/i915: Fallback to single PAGE_SIZE segments for DMA remapping&quot;).

v6: Handle swiotlb_max_segment() returning 1. (Joonas Lahtinen)
<span class="signed-off-by">
Signed-off-by: Tvrtko Ursulin &lt;tvrtko.ursulin@intel.com&gt;</span>
Cc: Chris Wilson &lt;chris@chris-wilson.co.uk&gt;
Cc: linux-kernel@vger.kernel.org
<span class="reviewed-by">Reviewed-by: Chris Wilson &lt;chris@chris-wilson.co.uk&gt; (v4)</span>
Cc: Joonas Lahtinen &lt;joonas.lahtinen@linux.intel.com&gt;
---
 drivers/gpu/drm/i915/i915_drv.h         | 15 +++++++
 drivers/gpu/drm/i915/i915_gem.c         |  6 +--
 drivers/gpu/drm/i915/i915_gem_userptr.c | 79 ++++++++++++---------------------
 3 files changed, 45 insertions(+), 55 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h</span>
<span class="p_header">index f861418122ef..531f47fae143 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/i915_drv.h</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/i915_drv.h</span>
<span class="p_chunk">@@ -2599,6 +2599,21 @@</span> <span class="p_context"> static inline struct scatterlist *__sg_next(struct scatterlist *sg)</span>
 	     (((__iter).curr += PAGE_SIZE) &lt; (__iter).max) ||		\
 	     ((__iter) = __sgt_iter(__sg_next((__iter).sgp), false), 0))
 
<span class="p_add">+static inline unsigned int i915_sg_segment_size(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned int size = swiotlb_max_segment();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (size == 0)</span>
<span class="p_add">+		return SCATTERLIST_MAX_SEGMENT;</span>
<span class="p_add">+</span>
<span class="p_add">+	size = rounddown(size, PAGE_SIZE);</span>
<span class="p_add">+	/* swiotlb_max_segment_size can return 1 byte when it means one page. */</span>
<span class="p_add">+	if (size &lt; PAGE_SIZE)</span>
<span class="p_add">+		size = PAGE_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	return size;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline const struct intel_device_info *
 intel_info(const struct drm_i915_private *dev_priv)
 {
<span class="p_header">diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_header">index d4c59b53532e..4dca3b52f495 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/i915_gem.c</span>
<span class="p_chunk">@@ -2254,7 +2254,7 @@</span> <span class="p_context"> i915_gem_object_get_pages_gtt(struct drm_i915_gem_object *obj)</span>
 	struct sgt_iter sgt_iter;
 	struct page *page;
 	unsigned long last_pfn = 0;	/* suppress gcc warning */
<span class="p_del">-	unsigned int max_segment;</span>
<span class="p_add">+	unsigned int max_segment = i915_sg_segment_size();</span>
 	int ret;
 	gfp_t gfp;
 
<span class="p_chunk">@@ -2265,10 +2265,6 @@</span> <span class="p_context"> i915_gem_object_get_pages_gtt(struct drm_i915_gem_object *obj)</span>
 	GEM_BUG_ON(obj-&gt;base.read_domains &amp; I915_GEM_GPU_DOMAINS);
 	GEM_BUG_ON(obj-&gt;base.write_domain &amp; I915_GEM_GPU_DOMAINS);
 
<span class="p_del">-	max_segment = swiotlb_max_segment();</span>
<span class="p_del">-	if (!max_segment)</span>
<span class="p_del">-		max_segment = rounddown(UINT_MAX, PAGE_SIZE);</span>
<span class="p_del">-</span>
 	st = kmalloc(sizeof(*st), GFP_KERNEL);
 	if (st == NULL)
 		return ERR_PTR(-ENOMEM);
<span class="p_header">diff --git a/drivers/gpu/drm/i915/i915_gem_userptr.c b/drivers/gpu/drm/i915/i915_gem_userptr.c</span>
<span class="p_header">index 6a8fa085b74e..95b62b9c5cd6 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/i915_gem_userptr.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/i915_gem_userptr.c</span>
<span class="p_chunk">@@ -390,64 +390,42 @@</span> <span class="p_context"> struct get_pages_work {</span>
 	struct task_struct *task;
 };
 
<span class="p_del">-#if IS_ENABLED(CONFIG_SWIOTLB)</span>
<span class="p_del">-#define swiotlb_active() swiotlb_nr_tbl()</span>
<span class="p_del">-#else</span>
<span class="p_del">-#define swiotlb_active() 0</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
<span class="p_del">-static int</span>
<span class="p_del">-st_set_pages(struct sg_table **st, struct page **pvec, int num_pages)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct scatterlist *sg;</span>
<span class="p_del">-	int ret, n;</span>
<span class="p_del">-</span>
<span class="p_del">-	*st = kmalloc(sizeof(**st), GFP_KERNEL);</span>
<span class="p_del">-	if (*st == NULL)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (swiotlb_active()) {</span>
<span class="p_del">-		ret = sg_alloc_table(*st, num_pages, GFP_KERNEL);</span>
<span class="p_del">-		if (ret)</span>
<span class="p_del">-			goto err;</span>
<span class="p_del">-</span>
<span class="p_del">-		for_each_sg((*st)-&gt;sgl, sg, num_pages, n)</span>
<span class="p_del">-			sg_set_page(sg, pvec[n], PAGE_SIZE, 0);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		ret = sg_alloc_table_from_pages(*st, pvec, num_pages,</span>
<span class="p_del">-						0, num_pages &lt;&lt; PAGE_SHIFT,</span>
<span class="p_del">-						GFP_KERNEL);</span>
<span class="p_del">-		if (ret)</span>
<span class="p_del">-			goto err;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-</span>
<span class="p_del">-err:</span>
<span class="p_del">-	kfree(*st);</span>
<span class="p_del">-	*st = NULL;</span>
<span class="p_del">-	return ret;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static struct sg_table *
<span class="p_del">-__i915_gem_userptr_set_pages(struct drm_i915_gem_object *obj,</span>
<span class="p_del">-			     struct page **pvec, int num_pages)</span>
<span class="p_add">+__i915_gem_userptr_alloc_pages(struct drm_i915_gem_object *obj,</span>
<span class="p_add">+			       struct page **pvec, int num_pages)</span>
 {
<span class="p_del">-	struct sg_table *pages;</span>
<span class="p_add">+	unsigned int max_segment = i915_sg_segment_size();</span>
<span class="p_add">+	struct sg_table *st;</span>
 	int ret;
 
<span class="p_del">-	ret = st_set_pages(&amp;pages, pvec, num_pages);</span>
<span class="p_del">-	if (ret)</span>
<span class="p_add">+	st = kmalloc(sizeof(*st), GFP_KERNEL);</span>
<span class="p_add">+	if (!st)</span>
<span class="p_add">+		return ERR_PTR(-ENOMEM);</span>
<span class="p_add">+</span>
<span class="p_add">+alloc_table:</span>
<span class="p_add">+	ret = __sg_alloc_table_from_pages(st, pvec, num_pages,</span>
<span class="p_add">+					  0, num_pages &lt;&lt; PAGE_SHIFT,</span>
<span class="p_add">+					  max_segment,</span>
<span class="p_add">+					  GFP_KERNEL);</span>
<span class="p_add">+	if (ret) {</span>
<span class="p_add">+		kfree(st);</span>
 		return ERR_PTR(ret);
<span class="p_add">+	}</span>
 
<span class="p_del">-	ret = i915_gem_gtt_prepare_pages(obj, pages);</span>
<span class="p_add">+	ret = i915_gem_gtt_prepare_pages(obj, st);</span>
 	if (ret) {
<span class="p_del">-		sg_free_table(pages);</span>
<span class="p_del">-		kfree(pages);</span>
<span class="p_add">+		sg_free_table(st);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (max_segment &gt; PAGE_SIZE) {</span>
<span class="p_add">+			max_segment = PAGE_SIZE;</span>
<span class="p_add">+			goto alloc_table;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		kfree(st);</span>
 		return ERR_PTR(ret);
 	}
 
<span class="p_del">-	return pages;</span>
<span class="p_add">+	return st;</span>
 }
 
 static int
<span class="p_chunk">@@ -531,7 +509,8 @@</span> <span class="p_context"> __i915_gem_userptr_get_pages_worker(struct work_struct *_work)</span>
 		struct sg_table *pages = ERR_PTR(ret);
 
 		if (pinned == npages) {
<span class="p_del">-			pages = __i915_gem_userptr_set_pages(obj, pvec, npages);</span>
<span class="p_add">+			pages = __i915_gem_userptr_alloc_pages(obj, pvec,</span>
<span class="p_add">+							       npages);</span>
 			if (!IS_ERR(pages)) {
 				__i915_gem_object_set_pages(obj, pages);
 				pinned = 0;
<span class="p_chunk">@@ -653,7 +632,7 @@</span> <span class="p_context"> i915_gem_userptr_get_pages(struct drm_i915_gem_object *obj)</span>
 	else if (pinned &lt; num_pages)
 		pages = __i915_gem_userptr_get_pages_schedule(obj, &amp;active);
 	else
<span class="p_del">-		pages = __i915_gem_userptr_set_pages(obj, pvec, num_pages);</span>
<span class="p_add">+		pages = __i915_gem_userptr_alloc_pages(obj, pvec, num_pages);</span>
 	if (IS_ERR(pages)) {
 		__i915_gem_userptr_set_active(obj, active);
 		release_pages(pvec, pinned, 0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



