
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,06/18] x86/kasan/64: Teach KASAN about the cpu_entry_area - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,06/18] x86/kasan/64: Teach KASAN about the cpu_entry_area</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 22, 2017, 4:44 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;02da46906066215f87e15a7a406109e353f4381a.1511325444.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10069533/mbox/"
   >mbox</a>
|
   <a href="/patch/10069533/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10069533/">/patch/10069533/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3FCA96038F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Nov 2017 04:47:31 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 40FED299EB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Nov 2017 04:47:31 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 35AB929AEF; Wed, 22 Nov 2017 04:47:31 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 92E63299EB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Nov 2017 04:47:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751968AbdKVErX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 21 Nov 2017 23:47:23 -0500
Received: from mail.kernel.org ([198.145.29.99]:36618 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751555AbdKVEoW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 21 Nov 2017 23:44:22 -0500
Received: from localhost (c-67-166-60-92.hsd1.co.comcast.net [67.166.60.92])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id AF3D021996;
	Wed, 22 Nov 2017 04:44:21 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org AF3D021996
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: Borislav Petkov &lt;bpetkov@suse.de&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Brian Gerst &lt;brgerst@gmail.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;, kasan-dev@googlegroups.com
Subject: [PATCH v2 06/18] x86/kasan/64: Teach KASAN about the cpu_entry_area
Date: Tue, 21 Nov 2017 20:44:01 -0800
Message-Id: &lt;02da46906066215f87e15a7a406109e353f4381a.1511325444.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;cover.1511325444.git.luto@kernel.org&gt;
References: &lt;cover.1511325444.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1511325444.git.luto@kernel.org&gt;
References: &lt;cover.1511325444.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 22, 2017, 4:44 a.m.</div>
<pre class="content">
The cpu_entry_area will contain stacks.  Make sure that KASAN has
appropriate shadow mappings for them.

Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;
Cc: Alexander Potapenko &lt;glider@google.com&gt;
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;
Cc: kasan-dev@googlegroups.com
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/mm/kasan_init_64.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Nov. 22, 2017, 6:19 a.m.</div>
<pre class="content">
* Andy Lutomirski &lt;luto@kernel.org&gt; wrote:
<span class="quote">
&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/mm/kasan_init_64.c | 9 ++++++++-</span>
<span class="quote">&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; index 99dfed6dfef8..43d376687315 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; @@ -330,7 +330,14 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;  			      early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt; -			(void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt; +				   kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="quote">&gt; +			      (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt; +		0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt; +				   (void *)KASAN_SHADOW_END);</span>

Note, this commit has a dependency on:

  d17a1d97dc20: x86/mm/kasan: don&#39;t use vmemmap_populate() to initialize shadow

which got merged upstream outside the x86 tree, so it has a whole bunch of merge 
window dependencies.

To make testing+backporting to v4.14 easier I&#39;ve cherry-picked d17a1d97dc20 into 
x86/urgent.

( I&#39;ve Cc:-ed Linus, just in case this kind of preemptive cherry-picking is 
  frowned upon. )

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - Nov. 22, 2017, 9:05 a.m.</div>
<pre class="content">
On 11/22/2017 07:44 AM, Andy Lutomirski wrote:
<span class="quote">&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/mm/kasan_init_64.c | 9 ++++++++-</span>
<span class="quote">&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; index 99dfed6dfef8..43d376687315 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt; @@ -330,7 +330,14 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;  			      early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt; -			(void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt; +				   kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="quote">&gt; +			      (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>

What&#39;s &#39;+ PAGE_SIZE&#39; for?
<span class="quote">
&gt; +		0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt; +				   (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	load_cr3(init_top_pgt);</span>
<span class="quote">&gt;  	__flush_tlb_all();</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 22, 2017, 3:22 p.m.</div>
<pre class="content">
On Wed, Nov 22, 2017 at 1:05 AM, Andrey Ryabinin
&lt;aryabinin@virtuozzo.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 11/22/2017 07:44 AM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt;&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt;&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt;&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/mm/kasan_init_64.c | 9 ++++++++-</span>
<span class="quote">&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; index 99dfed6dfef8..43d376687315 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt; @@ -330,7 +330,14 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;&gt;                             early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;&gt; -                     (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt; +                                kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="quote">&gt;&gt; +                           (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What&#39;s &#39;+ PAGE_SIZE&#39; for?</span>
<span class="quote">&gt;</span>

__fix_to_virt(..._TOP) returns the address of the *bottom* of the last
cpu_entry_area page.  +PAGE_SIZE returns one past the end of the
region, which I assume is the correct thing to pass.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141821">Andrey Ryabinin</a> - Nov. 23, 2017, 10:08 a.m.</div>
<pre class="content">
On 11/22/2017 06:22 PM, Andy Lutomirski wrote:
<span class="quote">&gt; On Wed, Nov 22, 2017 at 1:05 AM, Andrey Ryabinin</span>
<span class="quote">&gt; &lt;aryabinin@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 11/22/2017 07:44 AM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt;&gt;&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  arch/x86/mm/kasan_init_64.c | 9 ++++++++-</span>
<span class="quote">&gt;&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt; index 99dfed6dfef8..43d376687315 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt; @@ -330,7 +330,14 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;&gt;&gt;                             early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;       kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;&gt;&gt; -                     (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt;&gt; +                                kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +     kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="quote">&gt;&gt;&gt; +                           (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; What&#39;s &#39;+ PAGE_SIZE&#39; for?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; __fix_to_virt(..._TOP) returns the address of the *bottom* of the last</span>
<span class="quote">&gt; cpu_entry_area page.  +PAGE_SIZE returns one past the end of the</span>
<span class="quote">&gt; region, which I assume is the correct thing to pass.</span>
<span class="quote">&gt; </span>

Right.

Perhaps, it would be better to use variables, just avoid such awfully long lines, I mean like this:
	fixmap_shadow_start = (void *)__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM);
	fixmap_shadow_start = kasan_mem_to_shadow(fixmap_shadow_start);

	fixmap_shadow_end = (void *)__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE;
	fixmap_shadow_end = kasan_mem_to_shadow(fixmap_shadow_end);

	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),
				   fixmap_shadow_start);

	kasan_populate_shadow((unsigned long)fixmap_shadow_start,
			(unsigned long)fixmap_shadow_end,
			0);

I&#39;m also thinking that we should change kasan_populate_shadow() to take void* instead of &#39;unsigned long&#39;
to avoid those casts.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 23, 2017, 3:22 p.m.</div>
<pre class="content">
On Thu, Nov 23, 2017 at 2:08 AM, Andrey Ryabinin
&lt;aryabinin@virtuozzo.com&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 11/22/2017 06:22 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; On Wed, Nov 22, 2017 at 1:05 AM, Andrey Ryabinin</span>
<span class="quote">&gt;&gt; &lt;aryabinin@virtuozzo.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 11/22/2017 07:44 AM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; The cpu_entry_area will contain stacks.  Make sure that KASAN has</span>
<span class="quote">&gt;&gt;&gt;&gt; appropriate shadow mappings for them.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: Alexander Potapenko &lt;glider@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Cc: kasan-dev@googlegroups.com</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/mm/kasan_init_64.c | 9 ++++++++-</span>
<span class="quote">&gt;&gt;&gt;&gt;  1 file changed, 8 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 99dfed6dfef8..43d376687315 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -330,7 +330,14 @@ void __init kasan_init(void)</span>
<span class="quote">&gt;&gt;&gt;&gt;                             early_pfn_to_nid(__pa(_stext)));</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;       kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;&gt;&gt;&gt; -                     (void *)KASAN_SHADOW_END);</span>
<span class="quote">&gt;&gt;&gt;&gt; +                                kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +     kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="quote">&gt;&gt;&gt;&gt; +                           (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; What&#39;s &#39;+ PAGE_SIZE&#39; for?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; __fix_to_virt(..._TOP) returns the address of the *bottom* of the last</span>
<span class="quote">&gt;&gt; cpu_entry_area page.  +PAGE_SIZE returns one past the end of the</span>
<span class="quote">&gt;&gt; region, which I assume is the correct thing to pass.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Right.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Perhaps, it would be better to use variables, just avoid such awfully long lines, I mean like this:</span>
<span class="quote">&gt;         fixmap_shadow_start = (void *)__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM);</span>
<span class="quote">&gt;         fixmap_shadow_start = kasan_mem_to_shadow(fixmap_shadow_start);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         fixmap_shadow_end = (void *)__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE;</span>
<span class="quote">&gt;         fixmap_shadow_end = kasan_mem_to_shadow(fixmap_shadow_end);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),</span>
<span class="quote">&gt;                                    fixmap_shadow_start);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         kasan_populate_shadow((unsigned long)fixmap_shadow_start,</span>
<span class="quote">&gt;                         (unsigned long)fixmap_shadow_end,</span>
<span class="quote">&gt;                         0);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;m also thinking that we should change kasan_populate_shadow() to take void* instead of &#39;unsigned long&#39;</span>
<span class="quote">&gt; to avoid those casts.</span>

I did something similar, but I left the kasan_mem_to_shadow in for
consistency with the rest.

I think the real way to clean this up is like this:

struct kasan_range {
  void *start;
  void *end;
};

struct kasan_range ranges[] = {
 { range 1 },
 { range 2 },
};

sort(range, ARRAY_SIZE(ranges), sizeof(ranges[0]), ...);

last_end = PAGE_OFFSET;  /* or whatever is right */

for (i = 0; i &lt; ARRAY_SIZE(ranges); i++) [
  WARN_ON(ranges[i].start &lt; last_end);

  if (ranges[i].start &gt; last_end)
    kasan_populate_zero_shadow(...);
  kasan_populate_shadow(...);
 last_end = ranges[i].end;
}

kasan_populate_zero_shadow(last_end, the real end);

Then the code doesn&#39;t need to duplicate each boundary or to hardcode
the order in which things appear.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 99dfed6dfef8..43d376687315 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -330,7 +330,14 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
 			      early_pfn_to_nid(__pa(_stext)));
 
 	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)MODULES_END),
<span class="p_del">-			(void *)KASAN_SHADOW_END);</span>
<span class="p_add">+				   kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))));</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_shadow((unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_BOTTOM))),</span>
<span class="p_add">+			      (unsigned long)kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="p_add">+		0);</span>
<span class="p_add">+</span>
<span class="p_add">+	kasan_populate_zero_shadow(kasan_mem_to_shadow((void *)(__fix_to_virt(FIX_CPU_ENTRY_AREA_TOP) + PAGE_SIZE)),</span>
<span class="p_add">+				   (void *)KASAN_SHADOW_END);</span>
 
 	load_cr3(init_top_pgt);
 	__flush_tlb_all();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



