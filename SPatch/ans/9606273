
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv4,05/33] asm-generic: introduce &lt;asm-generic/pgtable-nop4d.h&gt; - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv4,05/33] asm-generic: introduce &lt;asm-generic/pgtable-nop4d.h&gt;</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 6, 2017, 1:53 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170306135357.3124-6-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9606273/mbox/"
   >mbox</a>
|
   <a href="/patch/9606273/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9606273/">/patch/9606273/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5306060414 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:08:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4549D2521E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:08:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3991F28419; Mon,  6 Mar 2017 14:08:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7494F2521E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Mar 2017 14:08:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754664AbdCFOIk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Mar 2017 09:08:40 -0500
Received: from mga05.intel.com ([192.55.52.43]:39660 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752981AbdCFN5p (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Mar 2017 08:57:45 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by fmsmga105.fm.intel.com with ESMTP; 06 Mar 2017 05:54:09 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.35,253,1484035200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;831466852&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by FMSMGA003.fm.intel.com with ESMTP; 06 Mar 2017 05:54:05 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 35A884C4; Mon,  6 Mar 2017 15:54:00 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	linux-arch@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv4 05/33] asm-generic: introduce &lt;asm-generic/pgtable-nop4d.h&gt;
Date: Mon,  6 Mar 2017 16:53:29 +0300
Message-Id: &lt;20170306135357.3124-6-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170306135357.3124-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170306135357.3124-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - March 6, 2017, 1:53 p.m.</div>
<pre class="content">
Like with pgtable-nopud.h for 4-level paging, this new header is base
for converting an architectures to properly folded p4d_t level.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 include/asm-generic/pgtable-nop4d.h | 56 +++++++++++++++++++++++++++++++++++++
 include/asm-generic/pgtable-nopud.h | 43 ++++++++++++++--------------
 include/asm-generic/tlb.h           | 14 ++++++++--
 3 files changed, 89 insertions(+), 24 deletions(-)
 create mode 100644 include/asm-generic/pgtable-nop4d.h
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/asm-generic/pgtable-nop4d.h b/include/asm-generic/pgtable-nop4d.h</span>
new file mode 100644
<span class="p_header">index 000000000000..de364ecb8df6</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/include/asm-generic/pgtable-nop4d.h</span>
<span class="p_chunk">@@ -0,0 +1,56 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef _PGTABLE_NOP4D_H</span>
<span class="p_add">+#define _PGTABLE_NOP4D_H</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __ASSEMBLY__</span>
<span class="p_add">+</span>
<span class="p_add">+#define __PAGETABLE_P4D_FOLDED</span>
<span class="p_add">+</span>
<span class="p_add">+typedef struct { pgd_t pgd; } p4d_t;</span>
<span class="p_add">+</span>
<span class="p_add">+#define P4D_SHIFT	PGDIR_SHIFT</span>
<span class="p_add">+#define PTRS_PER_P4D	1</span>
<span class="p_add">+#define P4D_SIZE	(1UL &lt;&lt; P4D_SHIFT)</span>
<span class="p_add">+#define P4D_MASK	(~(P4D_SIZE-1))</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * The &quot;pgd_xxx()&quot; functions here are trivial for a folded two-level</span>
<span class="p_add">+ * setup: the p4d is never bad, and a p4d always exists (as it&#39;s folded</span>
<span class="p_add">+ * into the pgd entry)</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int pgd_none(pgd_t pgd)		{ return 0; }</span>
<span class="p_add">+static inline int pgd_bad(pgd_t pgd)		{ return 0; }</span>
<span class="p_add">+static inline int pgd_present(pgd_t pgd)	{ return 1; }</span>
<span class="p_add">+static inline void pgd_clear(pgd_t *pgd)	{ }</span>
<span class="p_add">+#define p4d_ERROR(p4d)				(pgd_ERROR((p4d).pgd))</span>
<span class="p_add">+</span>
<span class="p_add">+#define pgd_populate(mm, pgd, p4d)		do { } while (0)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * (p4ds are folded into pgds so this doesn&#39;t get actually called,</span>
<span class="p_add">+ * but the define is needed for a generic inline function.)</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define set_pgd(pgdptr, pgdval)	set_p4d((p4d_t *)(pgdptr), (p4d_t) { pgdval })</span>
<span class="p_add">+</span>
<span class="p_add">+static inline p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (p4d_t *)pgd;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#define p4d_val(x)				(pgd_val((x).pgd))</span>
<span class="p_add">+#define __p4d(x)				((p4d_t) { __pgd(x) })</span>
<span class="p_add">+</span>
<span class="p_add">+#define pgd_page(pgd)				(p4d_page((p4d_t){ pgd }))</span>
<span class="p_add">+#define pgd_page_vaddr(pgd)			(p4d_page_vaddr((p4d_t){ pgd }))</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * allocating and freeing a p4d is trivial: the 1-entry p4d is</span>
<span class="p_add">+ * inside the pgd, so has no extra memory associated with it.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define p4d_alloc_one(mm, address)		NULL</span>
<span class="p_add">+#define p4d_free(mm, x)				do { } while (0)</span>
<span class="p_add">+#define __p4d_free_tlb(tlb, x, a)		do { } while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+#undef  p4d_addr_end</span>
<span class="p_add">+#define p4d_addr_end(addr, end)			(end)</span>
<span class="p_add">+</span>
<span class="p_add">+#endif /* __ASSEMBLY__ */</span>
<span class="p_add">+#endif /* _PGTABLE_NOP4D_H */</span>
<span class="p_header">diff --git a/include/asm-generic/pgtable-nopud.h b/include/asm-generic/pgtable-nopud.h</span>
<span class="p_header">index 5e49430a30a4..c2b9b96d6268 100644</span>
<span class="p_header">--- a/include/asm-generic/pgtable-nopud.h</span>
<span class="p_header">+++ b/include/asm-generic/pgtable-nopud.h</span>
<span class="p_chunk">@@ -6,53 +6,54 @@</span> <span class="p_context"></span>
 #ifdef __ARCH_USE_5LEVEL_HACK
 #include &lt;asm-generic/pgtable-nop4d-hack.h&gt;
 #else
<span class="p_add">+#include &lt;asm-generic/pgtable-nop4d.h&gt;</span>
 
 #define __PAGETABLE_PUD_FOLDED
 
 /*
<span class="p_del">- * Having the pud type consist of a pgd gets the size right, and allows</span>
<span class="p_del">- * us to conceptually access the pgd entry that this pud is folded into</span>
<span class="p_add">+ * Having the pud type consist of a p4d gets the size right, and allows</span>
<span class="p_add">+ * us to conceptually access the p4d entry that this pud is folded into</span>
  * without casting.
  */
<span class="p_del">-typedef struct { pgd_t pgd; } pud_t;</span>
<span class="p_add">+typedef struct { p4d_t p4d; } pud_t;</span>
 
<span class="p_del">-#define PUD_SHIFT	PGDIR_SHIFT</span>
<span class="p_add">+#define PUD_SHIFT	P4D_SHIFT</span>
 #define PTRS_PER_PUD	1
 #define PUD_SIZE  	(1UL &lt;&lt; PUD_SHIFT)
 #define PUD_MASK  	(~(PUD_SIZE-1))
 
 /*
<span class="p_del">- * The &quot;pgd_xxx()&quot; functions here are trivial for a folded two-level</span>
<span class="p_add">+ * The &quot;p4d_xxx()&quot; functions here are trivial for a folded two-level</span>
  * setup: the pud is never bad, and a pud always exists (as it&#39;s folded
<span class="p_del">- * into the pgd entry)</span>
<span class="p_add">+ * into the p4d entry)</span>
  */
<span class="p_del">-static inline int pgd_none(pgd_t pgd)		{ return 0; }</span>
<span class="p_del">-static inline int pgd_bad(pgd_t pgd)		{ return 0; }</span>
<span class="p_del">-static inline int pgd_present(pgd_t pgd)	{ return 1; }</span>
<span class="p_del">-static inline void pgd_clear(pgd_t *pgd)	{ }</span>
<span class="p_del">-#define pud_ERROR(pud)				(pgd_ERROR((pud).pgd))</span>
<span class="p_add">+static inline int p4d_none(p4d_t p4d)		{ return 0; }</span>
<span class="p_add">+static inline int p4d_bad(p4d_t p4d)		{ return 0; }</span>
<span class="p_add">+static inline int p4d_present(p4d_t p4d)	{ return 1; }</span>
<span class="p_add">+static inline void p4d_clear(p4d_t *p4d)	{ }</span>
<span class="p_add">+#define pud_ERROR(pud)				(p4d_ERROR((pud).p4d))</span>
 
<span class="p_del">-#define pgd_populate(mm, pgd, pud)		do { } while (0)</span>
<span class="p_add">+#define p4d_populate(mm, p4d, pud)		do { } while (0)</span>
 /*
<span class="p_del">- * (puds are folded into pgds so this doesn&#39;t get actually called,</span>
<span class="p_add">+ * (puds are folded into p4ds so this doesn&#39;t get actually called,</span>
  * but the define is needed for a generic inline function.)
  */
<span class="p_del">-#define set_pgd(pgdptr, pgdval)			set_pud((pud_t *)(pgdptr), (pud_t) { pgdval })</span>
<span class="p_add">+#define set_p4d(p4dptr, p4dval)	set_pud((pud_t *)(p4dptr), (pud_t) { p4dval })</span>
 
<span class="p_del">-static inline pud_t * pud_offset(pgd_t * pgd, unsigned long address)</span>
<span class="p_add">+static inline pud_t *pud_offset(p4d_t *p4d, unsigned long address)</span>
 {
<span class="p_del">-	return (pud_t *)pgd;</span>
<span class="p_add">+	return (pud_t *)p4d;</span>
 }
 
<span class="p_del">-#define pud_val(x)				(pgd_val((x).pgd))</span>
<span class="p_del">-#define __pud(x)				((pud_t) { __pgd(x) } )</span>
<span class="p_add">+#define pud_val(x)				(p4d_val((x).p4d))</span>
<span class="p_add">+#define __pud(x)				((pud_t) { __p4d(x) })</span>
 
<span class="p_del">-#define pgd_page(pgd)				(pud_page((pud_t){ pgd }))</span>
<span class="p_del">-#define pgd_page_vaddr(pgd)			(pud_page_vaddr((pud_t){ pgd }))</span>
<span class="p_add">+#define p4d_page(p4d)				(pud_page((pud_t){ p4d }))</span>
<span class="p_add">+#define p4d_page_vaddr(p4d)			(pud_page_vaddr((pud_t){ p4d }))</span>
 
 /*
  * allocating and freeing a pud is trivial: the 1-entry pud is
<span class="p_del">- * inside the pgd, so has no extra memory associated with it.</span>
<span class="p_add">+ * inside the p4d, so has no extra memory associated with it.</span>
  */
 #define pud_alloc_one(mm, address)		NULL
 #define pud_free(mm, x)				do { } while (0)
<span class="p_header">diff --git a/include/asm-generic/tlb.h b/include/asm-generic/tlb.h</span>
<span class="p_header">index 4329bc6ef04b..8afa4335e5b2 100644</span>
<span class="p_header">--- a/include/asm-generic/tlb.h</span>
<span class="p_header">+++ b/include/asm-generic/tlb.h</span>
<span class="p_chunk">@@ -270,6 +270,12 @@</span> <span class="p_context"> static inline void tlb_remove_check_page_size_change(struct mmu_gather *tlb,</span>
 		__pte_free_tlb(tlb, ptep, address);		\
 	} while (0)
 
<span class="p_add">+#define pmd_free_tlb(tlb, pmdp, address)			\</span>
<span class="p_add">+	do {							\</span>
<span class="p_add">+		__tlb_adjust_range(tlb, address, PAGE_SIZE);		\</span>
<span class="p_add">+		__pmd_free_tlb(tlb, pmdp, address);		\</span>
<span class="p_add">+	} while (0)</span>
<span class="p_add">+</span>
 #ifndef __ARCH_HAS_4LEVEL_HACK
 #define pud_free_tlb(tlb, pudp, address)			\
 	do {							\
<span class="p_chunk">@@ -278,11 +284,13 @@</span> <span class="p_context"> static inline void tlb_remove_check_page_size_change(struct mmu_gather *tlb,</span>
 	} while (0)
 #endif
 
<span class="p_del">-#define pmd_free_tlb(tlb, pmdp, address)			\</span>
<span class="p_add">+#ifndef __ARCH_HAS_5LEVEL_HACK</span>
<span class="p_add">+#define p4d_free_tlb(tlb, pudp, address)			\</span>
 	do {							\
<span class="p_del">-		__tlb_adjust_range(tlb, address, PAGE_SIZE);	\</span>
<span class="p_del">-		__pmd_free_tlb(tlb, pmdp, address);		\</span>
<span class="p_add">+		__tlb_adjust_range(tlb, address, PAGE_SIZE);		\</span>
<span class="p_add">+		__p4d_free_tlb(tlb, pudp, address);		\</span>
 	} while (0)
<span class="p_add">+#endif</span>
 
 #define tlb_migrate_finish(mm) do {} while (0)
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



