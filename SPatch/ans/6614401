
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.4,027/172] mm/hugetlb: fix getting refcount 0 page in hugetlb_fault() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.4,027/172] mm/hugetlb: fix getting refcount 0 page in hugetlb_fault()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109711">Zefan Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 16, 2015, 8:34 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1434443826-4929-27-git-send-email-lizf@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6614401/mbox/"
   >mbox</a>
|
   <a href="/patch/6614401/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6614401/">/patch/6614401/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 15727C0020
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 08:42:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 24451206FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 08:42:00 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id D4E67207CB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 08:41:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932366AbbFPIln (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 16 Jun 2015 04:41:43 -0400
Received: from mail.kernel.org ([198.145.29.136]:54475 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1756645AbbFPIlP (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 16 Jun 2015 04:41:15 -0400
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id DF95D2055C;
	Tue, 16 Jun 2015 08:41:13 +0000 (UTC)
Received: from localhost.localdomain (unknown [183.247.163.231])
	(using TLSv1.2 with cipher AES128-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 75DA320776;
	Tue, 16 Jun 2015 08:41:06 +0000 (UTC)
From: lizf@kernel.org
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, James Hogan &lt;james.hogan@imgtec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Mel Gorman &lt;mel@csn.ul.ie&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Michal Hocko &lt;mhocko@suse.cz&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Luiz Capitulino &lt;lcapitulino@redhat.com&gt;,
	Nishanth Aravamudan &lt;nacc@linux.vnet.ibm.com&gt;,
	Lee Schermerhorn &lt;lee.schermerhorn@hp.com&gt;,
	Steve Capper &lt;steve.capper@linaro.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Zefan Li &lt;lizefan@huawei.com&gt;
Subject: [PATCH 3.4 027/172] mm/hugetlb: fix getting refcount 0 page in
	hugetlb_fault()
Date: Tue, 16 Jun 2015 16:34:41 +0800
Message-Id: &lt;1434443826-4929-27-git-send-email-lizf@kernel.org&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1434443587-4599-1-git-send-email-lizf@kernel.org&gt;
References: &lt;1434443587-4599-1-git-send-email-lizf@kernel.org&gt;
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109711">Zefan Li</a> - June 16, 2015, 8:34 a.m.</div>
<pre class="content">
<span class="from">From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

3.4.108-rc1 review patch.  If anyone has any objections, please let me know.

------------------


commit 0f792cf949a0be506c2aa8bfac0605746b146dda upstream.

When running the test which causes the race as shown in the previous patch,
we can hit the BUG &quot;get_page() on refcount 0 page&quot; in hugetlb_fault().

This race happens when pte turns into migration entry just after the first
check of is_hugetlb_entry_migration() in hugetlb_fault() passed with false.
To fix this, we need to check pte_present() again after huge_ptep_get().

This patch also reorders taking ptl and doing pte_page(), because
pte_page() should be done in ptl.  Due to this reordering, we need use
trylock_page() in page != pagecache_page case to respect locking order.

Fixes: 66aebce747ea (&quot;hugetlb: fix race condition in hugetlb_fault()&quot;)
<span class="signed-off-by">Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: James Hogan &lt;james.hogan@imgtec.com&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;
Cc: Mel Gorman &lt;mel@csn.ul.ie&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: Michal Hocko &lt;mhocko@suse.cz&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;
Cc: Luiz Capitulino &lt;lcapitulino@redhat.com&gt;
Cc: Nishanth Aravamudan &lt;nacc@linux.vnet.ibm.com&gt;
Cc: Lee Schermerhorn &lt;lee.schermerhorn@hp.com&gt;
Cc: Steve Capper &lt;steve.capper@linaro.org&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
[lizf: Backported to 3.4:
 - adjust context
 - there&#39;s no huge_pte_lock, so lock mm-&gt;page_table_lock directly
 - the lable should be out_page_table_lock instead of out_ptl]
<span class="signed-off-by">Signed-off-by: Zefan Li &lt;lizefan@huawei.com&gt;</span>
---
 mm/hugetlb.c | 36 +++++++++++++++++++++++++++---------
 1 file changed, 27 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index efd6820..d02fbbc 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2813,6 +2813,7 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	struct page *pagecache_page = NULL;
 	static DEFINE_MUTEX(hugetlb_instantiation_mutex);
 	struct hstate *h = hstate_vma(vma);
<span class="p_add">+	int need_wait_lock = 0;</span>
 
 	address &amp;= huge_page_mask(h);
 
<span class="p_chunk">@@ -2846,6 +2847,16 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	ret = 0;
 
 	/*
<span class="p_add">+	 * entry could be a migration/hwpoison entry at this point, so this</span>
<span class="p_add">+	 * check prevents the kernel from going below assuming that we have</span>
<span class="p_add">+	 * a active hugepage in pagecache. This goto expects the 2nd page fault,</span>
<span class="p_add">+	 * and is_hugetlb_entry_(migration|hwpoisoned) check will properly</span>
<span class="p_add">+	 * handle it.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!pte_present(entry))</span>
<span class="p_add">+		goto out_mutex;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
 	 * If we are going to COW the mapping later, we examine the pending
 	 * reservations for this page now. This will ensure that any
 	 * allocations necessary to record that reservation occur outside the
<span class="p_chunk">@@ -2864,29 +2875,32 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 								vma, address);
 	}
 
<span class="p_add">+	spin_lock(&amp;mm-&gt;page_table_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for a racing update before calling hugetlb_cow */</span>
<span class="p_add">+	if (unlikely(!pte_same(entry, huge_ptep_get(ptep))))</span>
<span class="p_add">+		goto out_page_table_lock;</span>
<span class="p_add">+</span>
 	/*
 	 * hugetlb_cow() requires page locks of pte_page(entry) and
 	 * pagecache_page, so here we need take the former one
 	 * when page != pagecache_page or !pagecache_page.
<span class="p_del">-	 * Note that locking order is always pagecache_page -&gt; page,</span>
<span class="p_del">-	 * so no worry about deadlock.</span>
 	 */
 	page = pte_page(entry);
<span class="p_del">-	get_page(page);</span>
 	if (page != pagecache_page)
<span class="p_del">-		lock_page(page);</span>
<span class="p_add">+		if (!trylock_page(page)) {</span>
<span class="p_add">+			need_wait_lock = 1;</span>
<span class="p_add">+			goto out_page_table_lock;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	spin_lock(&amp;mm-&gt;page_table_lock);</span>
<span class="p_del">-	/* Check for a racing update before calling hugetlb_cow */</span>
<span class="p_del">-	if (unlikely(!pte_same(entry, huge_ptep_get(ptep))))</span>
<span class="p_del">-		goto out_page_table_lock;</span>
<span class="p_add">+	get_page(page);</span>
 
 
 	if (flags &amp; FAULT_FLAG_WRITE) {
 		if (!pte_write(entry)) {
 			ret = hugetlb_cow(mm, vma, address, ptep, entry,
 							pagecache_page);
<span class="p_del">-			goto out_page_table_lock;</span>
<span class="p_add">+			goto out_put_page;</span>
 		}
 		entry = pte_mkdirty(entry);
 	}
<span class="p_chunk">@@ -2895,6 +2909,10 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 						flags &amp; FAULT_FLAG_WRITE))
 		update_mmu_cache(vma, address, ptep);
 
<span class="p_add">+out_put_page:</span>
<span class="p_add">+	if (page != pagecache_page)</span>
<span class="p_add">+		unlock_page(page);</span>
<span class="p_add">+	put_page(page);</span>
 out_page_table_lock:
 	spin_unlock(&amp;mm-&gt;page_table_lock);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



