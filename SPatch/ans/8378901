
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[8/8] scripts/gdb: Add meminfo command - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [8/8] scripts/gdb: Add meminfo command</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150871">Kieran Bingham</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 22, 2016, 3:24 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1456154652-29023-9-git-send-email-kieran.bingham@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8378901/mbox/"
   >mbox</a>
|
   <a href="/patch/8378901/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8378901/">/patch/8378901/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id C09F8C0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Feb 2016 15:24:48 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id A142F2041F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Feb 2016 15:24:47 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 79439204D8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Feb 2016 15:24:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754086AbcBVPYn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 Feb 2016 10:24:43 -0500
Received: from mail-wm0-f51.google.com ([74.125.82.51]:35606 &quot;EHLO
	mail-wm0-f51.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753395AbcBVPYk (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 Feb 2016 10:24:40 -0500
Received: by mail-wm0-f51.google.com with SMTP id c200so176833280wme.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 22 Feb 2016 07:24:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=CrUAFH/xIC9222SfcEmXWKp/pnio6VX93fooUPeEJGY=;
	b=hUPb5GsyhpMQwhqNjtKHeW5eVZzmrmNE8mDCNgTd7ORO/8v539c2BE4YEFomxpQDHL
	cq0LXBkBil0FdSvQ8cgosuxWS78NU4dnow2UivbZkFo44GNF8MUYbYohDixgLEHIgllW
	A02BAYG5Poz+HbaQ/zNbgm9HSUb6zt+Twc1DQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=CrUAFH/xIC9222SfcEmXWKp/pnio6VX93fooUPeEJGY=;
	b=kIFJbF3qyFV+aWVQevqvuLOaELUMwX6L7QrYlxe3E9aF/n/l5PfJAfdGC/OMPFeRT1
	zom7mQFWnkLTw8HGwA1jPC1XluC0SGDy1zSo9hgv/J+CB4OelK6yMOOqCEWQNQKhBgvK
	JX6OSy0VfI7yZoJydMM33zJab7IRd+CaA+l1euKBAzP9pbJxvUqLNwKc79JCbDY/PXz0
	5V7MNdo4QmaaSO98F1MlorjAmrNC9JCmhnjhGTDkoBp5GUEZxCFF31n/OGzVINtkGMH1
	lfXXygyY6RvLgAohilXUmUYbi5hZIORA5jp/R0Ue1t0KVLrXB/qNiUyEX68zqjQV4Hkx
	9GRA==
X-Gm-Message-State: AG10YOS7YJ0Zj3hLCnlJ0bi3mr1nmCapf8wnBTi0IqqX2SgXl11mMgeF7UU5GqaYi/eTWq6R
X-Received: by 10.194.113.38 with SMTP id iv6mr28353796wjb.126.1456154678845;
	Mon, 22 Feb 2016 07:24:38 -0800 (PST)
Received: from localhost.localdomain
	(cpc87017-aztw30-2-0-cust65.18-1.cable.virginm.net.
	[92.232.232.66]) by smtp.gmail.com with ESMTPSA id
	w66sm21557528wmd.2.2016.02.22.07.24.38
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 22 Feb 2016 07:24:38 -0800 (PST)
From: Kieran Bingham &lt;kieran.bingham@linaro.org&gt;
To: jan.kiszka@siemens.com, linux-kernel@vger.kernel.org
Cc: lee.jones@linaro.org, peter.griffin@linaro.org,
	maxime.coquelin@st.com, Kieran Bingham &lt;kieran.bingham@linaro.org&gt;
Subject: [PATCH 8/8] scripts/gdb: Add meminfo command
Date: Mon, 22 Feb 2016 15:24:12 +0000
Message-Id: &lt;1456154652-29023-9-git-send-email-kieran.bingham@linaro.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;1456154652-29023-1-git-send-email-kieran.bingham@linaro.org&gt;
References: &lt;1456154652-29023-1-git-send-email-kieran.bingham@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150871">Kieran Bingham</a> - Feb. 22, 2016, 3:24 p.m.</div>
<pre class="content">
Provide an equivalent of /proc/meminfo which should be available from
core dumps, or crashed kernels. This should allow a debugger to identify
if memory pressures were applicable in the instance of their issue
<span class="signed-off-by">
Signed-off-by: Kieran Bingham &lt;kieran.bingham@linaro.org&gt;</span>

---

Changes from v1:
 - Updated to use LX_ macros for constants
 - Utilise the LX_CONFIG() options for conditional printing
 - Fixed meminfo command on Jan&#39;s target .config
 - Added missing segments to meminfo command (HUGEPAGE, QUICKLIST)
 - Adjusted for new list_for_each_entry() function
 - Fixed up for !CONFIG_SWAP and !CONFIG_MMU targets (Tested STM32)
---
 scripts/gdb/linux/constants.py.in |  34 ++++++
 scripts/gdb/linux/proc.py         | 219 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 253 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150871">Kieran Bingham</a> - Feb. 24, 2016, 9:44 a.m.</div>
<pre class="content">
I had missed some PEP8 line length warnings on this patch - I&#39;ve now
fixed them up. And a spurious &#39;pass&#39; statement appeared (highlighted
inline), which I&#39;ve removed.
--
Kieran

On 22/02/16 15:24, Kieran Bingham wrote:
<span class="quote">&gt; Provide an equivalent of /proc/meminfo which should be available from</span>
<span class="quote">&gt; core dumps, or crashed kernels. This should allow a debugger to identify</span>
<span class="quote">&gt; if memory pressures were applicable in the instance of their issue</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Kieran Bingham &lt;kieran.bingham@linaro.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes from v1:</span>
<span class="quote">&gt;  - Updated to use LX_ macros for constants</span>
<span class="quote">&gt;  - Utilise the LX_CONFIG() options for conditional printing</span>
<span class="quote">&gt;  - Fixed meminfo command on Jan&#39;s target .config</span>
<span class="quote">&gt;  - Added missing segments to meminfo command (HUGEPAGE, QUICKLIST)</span>
<span class="quote">&gt;  - Adjusted for new list_for_each_entry() function</span>
<span class="quote">&gt;  - Fixed up for !CONFIG_SWAP and !CONFIG_MMU targets (Tested STM32)</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  scripts/gdb/linux/constants.py.in |  34 ++++++</span>
<span class="quote">&gt;  scripts/gdb/linux/proc.py         | 219 ++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 253 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/scripts/gdb/linux/constants.py.in b/scripts/gdb/linux/constants.py.in</span>
<span class="quote">&gt; index 57213ad8cf75..66562a8242bd 100644</span>
<span class="quote">&gt; --- a/scripts/gdb/linux/constants.py.in</span>
<span class="quote">&gt; +++ b/scripts/gdb/linux/constants.py.in</span>
<span class="quote">&gt; @@ -12,8 +12,16 @@</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#include &lt;asm/page.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/thread_info.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #include &lt;linux/fs.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/swap.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/mount.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/huge_mm.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* We need to stringify expanded macros so that they can be parsed */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -51,3 +59,29 @@ LX_VALUE(MNT_NOATIME)</span>
<span class="quote">&gt;  LX_VALUE(MNT_NODIRATIME)</span>
<span class="quote">&gt;  LX_VALUE(MNT_RELATIME)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/* asm/page.h */</span>
<span class="quote">&gt; +LX_GDBPARSED(PAGE_SHIFT)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* asm/thread_info.h */</span>
<span class="quote">&gt; +LX_GDBPARSED(THREAD_SIZE)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* linux/vmalloc.h */</span>
<span class="quote">&gt; +LX_GDBPARSED(VMALLOC_TOTAL)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* linux/swap.h */</span>
<span class="quote">&gt; +LX_GDBPARSED(MAX_SWAPFILES)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* Kernel Configs */</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_HIGHMEM)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_MEMORY_FAILURE)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_CMA)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_MMU)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_SWAP)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifndef CONFIG_NR_QUICK</span>
<span class="quote">&gt; +#define CONFIG_NR_QUICK 0</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +LX_VALUE(CONFIG_NR_QUICK)</span>
<span class="quote">&gt; +LX_CONFIG(CONFIG_QUICKLIST)</span>
<span class="quote">&gt; diff --git a/scripts/gdb/linux/proc.py b/scripts/gdb/linux/proc.py</span>
<span class="quote">&gt; index 44804e10493e..95933f66ea3e 100644</span>
<span class="quote">&gt; --- a/scripts/gdb/linux/proc.py</span>
<span class="quote">&gt; +++ b/scripts/gdb/linux/proc.py</span>
<span class="quote">&gt; @@ -204,3 +204,222 @@ values of that process namespace&quot;&quot;&quot;</span>
<span class="quote">&gt;                          info_opts(MNT_INFO, m_flags)))</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  LxMounts()</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +bdev_type = utils.CachedType(&quot;struct block_device&quot;)</span>
<span class="quote">&gt; +bdev_ptr_type = bdev_type.get_type().pointer()</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +class LxMeminfo(gdb.Command):</span>
<span class="quote">&gt; +    &quot;&quot;&quot; Identify the memory usage, statistics, and availability</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +Equivalent to cat /proc/meminfo on a running target &quot;&quot;&quot;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def __init__(self):</span>
<span class="quote">&gt; +        super(LxMeminfo, self).__init__(&quot;lx-meminfo&quot;, gdb.COMMAND_DATA)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def K(self, val):</span>
<span class="quote">&gt; +        # Convert from PAGES to KB</span>
<span class="quote">&gt; +        return int(val &lt;&lt; (constants.LX_PAGE_SHIFT - 10))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def page_K(self, remote_value):</span>
<span class="quote">&gt; +        # Obtain page value, and Convert from PAGES to KB</span>
<span class="quote">&gt; +        val = int(gdb.parse_and_eval(remote_value))</span>
<span class="quote">&gt; +        return self.K(val)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def gps(self, enum_zone_stat_item):</span>
<span class="quote">&gt; +        # Access the Global Page State structure</span>
<span class="quote">&gt; +        # I would prefer to read this structure in one go and then index</span>
<span class="quote">&gt; +        # from the enum. But we can&#39;t determine the enum values with out</span>
<span class="quote">&gt; +        # a call to GDB anyway so we may as well take the easy route and</span>
<span class="quote">&gt; +        # get the value.</span>
<span class="quote">&gt; +        remote_value = &quot;vm_stat[&quot; + enum_zone_stat_item + &quot;].counter&quot;</span>
<span class="quote">&gt; +        return int(gdb.parse_and_eval(remote_value))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def gps_K(self, enum_zone_stat_item):</span>
<span class="quote">&gt; +        return self.K(self.gps(enum_zone_stat_item))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def nr_blockdev_pages(self):</span>
<span class="quote">&gt; +        bdevs_head = gdb.parse_and_eval(&quot;all_bdevs&quot;)</span>
<span class="quote">&gt; +        pages = 0</span>
<span class="quote">&gt; +        for bdev in lists.list_for_each_entry(bdevs_head, bdev_ptr_type, &quot;bd_list&quot;):</span>
<span class="quote">&gt; +            try:</span>
<span class="quote">&gt; +                pages += bdev[&#39;bd_inode&#39;][&#39;i_mapping&#39;][&#39;nrpages&#39;]</span>
<span class="quote">&gt; +            except:</span>
<span class="quote">&gt; +                # Any memory read failures are simply not counted</span>
<span class="quote">&gt; +                pass</span>
<span class="quote">&gt; +        return pages</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def total_swapcache_pages(self):</span>
<span class="quote">&gt; +        pages = 0</span>
<span class="quote">&gt; +        if not constants.LX_CONFIG_SWAP:</span>
<span class="quote">&gt; +            return 0</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        for i in range(0, int(constants.LX_MAX_SWAPFILES)):</span>
<span class="quote">&gt; +            swap_space = &quot;swapper_spaces[&quot; + str(i) + &quot;].nrpages&quot;</span>
<span class="quote">&gt; +            pages += int(gdb.parse_and_eval(swap_space))</span>
<span class="quote">&gt; +        return pages</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def vm_commit_limit(self, totalram_pages):</span>
<span class="quote">&gt; +        total_swap_pages = 0</span>
<span class="quote">&gt; +        overcommit = int(gdb.parse_and_eval(&quot;sysctl_overcommit_kbytes&quot;))</span>
<span class="quote">&gt; +        overcommit_ratio = int(gdb.parse_and_eval(&quot;sysctl_overcommit_ratio&quot;))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_SWAP:</span>
<span class="quote">&gt; +            total_swap_pages = int(gdb.parse_and_eval(&quot;total_swap_pages&quot;))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        hugetlb_total_pages = 0  # hugetlb_total_pages()</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if overcommit:</span>
<span class="quote">&gt; +            allowed = overcommit &gt;&gt; (constants.LX_PAGE_SHIFT - 10)</span>
<span class="quote">&gt; +        else:</span>
<span class="quote">&gt; +            allowed = ((totalram_pages - hugetlb_total_pages *</span>
<span class="quote">&gt; +                       overcommit_ratio / 100))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        allowed += total_swap_pages</span>
<span class="quote">&gt; +        return allowed</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    def quicklist_total_size(self):</span>
<span class="quote">&gt; +        count = 0</span>
<span class="quote">&gt; +        quicklist = utils.gdb_eval_or_none(&quot;quicklist&quot;)</span>
<span class="quote">&gt; +        if quicklist is None:</span>
<span class="quote">&gt; +            return 0</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        for cpu in cpus.each_online_cpu():</span>
<span class="quote">&gt; +            ql = cpus.per_cpu(quicklist, cpu)</span>
<span class="quote">&gt; +            for q in range(0, constants.LX_CONFIG_NR_QUICK):</span>
<span class="quote">&gt; +                # for (q = ql; q &lt; ql + CONFIG_NR_QUICK; q++)</span>
<span class="quote">&gt; +                # count += q-&gt;nr_pages</span>
<span class="quote">&gt; +                count += ql[q][&#39;nr_pages&#39;]</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        return count</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +    # Main lx-meminfo command execution</span>
<span class="quote">&gt; +    # See fs/proc/meminfo.c:meminfo_proc_show()</span>
<span class="quote">&gt; +    def invoke(self, arg, from_tty):</span>
<span class="quote">&gt; +        totalram = int(gdb.parse_and_eval(&quot;totalram_pages&quot;))</span>
<span class="quote">&gt; +        freeram = self.gps(&quot;NR_FREE_PAGES&quot;)</span>
<span class="quote">&gt; +        reclaimable = self.gps(&quot;NR_SLAB_RECLAIMABLE&quot;)</span>
<span class="quote">&gt; +        unreclaimable = self.gps(&quot;NR_SLAB_UNRECLAIMABLE&quot;)</span>
<span class="quote">&gt; +        slab = reclaimable + unreclaimable</span>
<span class="quote">&gt; +        # for_each_zone(zone)</span>
<span class="quote">&gt; +        #     wmark_low += zone-&gt;watermark[WMARK_LOW];</span>
<span class="quote">&gt; +        wmark_low = 0   # Zone parsing is unimplemented</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        available = freeram - wmark_low</span>
<span class="quote">&gt; +        available += reclaimable - min(reclaimable / 2, wmark_low)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        bufferram = self.nr_blockdev_pages()</span>
<span class="quote">&gt; +        total_swapcache_pages = self.total_swapcache_pages()</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        file_pages = self.gps(&quot;NR_FILE_PAGES&quot;)</span>
<span class="quote">&gt; +        cached = file_pages - total_swapcache_pages - bufferram</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        # LRU Pages</span>
<span class="quote">&gt; +        active_pages_anon = self.gps(&quot;NR_ACTIVE_ANON&quot;)</span>
<span class="quote">&gt; +        inactive_pages_anon = self.gps(&quot;NR_INACTIVE_ANON&quot;)</span>
<span class="quote">&gt; +        active_pages_file = self.gps(&quot;NR_ACTIVE_FILE&quot;)</span>
<span class="quote">&gt; +        inactive_pages_file = self.gps(&quot;NR_INACTIVE_FILE&quot;)</span>
<span class="quote">&gt; +        unevictable_pages = self.gps(&quot;NR_UNEVICTABLE&quot;)</span>
<span class="quote">&gt; +        active_pages = active_pages_anon + active_pages_file</span>
<span class="quote">&gt; +        inactive_pages = inactive_pages_anon + inactive_pages_file</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        kernelstack = int(self.gps(&quot;NR_KERNEL_STACK&quot;) *</span>
<span class="quote">&gt; +                          constants.LX_THREAD_SIZE / 1024)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        commitlimit = int(self.vm_commit_limit(totalram))</span>
<span class="quote">&gt; +        committed_as = int(gdb.parse_and_eval(&quot;vm_committed_as.count&quot;))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        vmalloc_total = int(constants.LX_VMALLOC_TOTAL &gt;&gt; 10)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        gdb.write(</span>
<span class="quote">&gt; +            &quot;MemTotal:       {:8d} kB\n&quot;.format(self.K(totalram)) +</span>
<span class="quote">&gt; +            &quot;MemFree:        {:8d} kB\n&quot;.format(self.K(freeram)) +</span>
<span class="quote">&gt; +            &quot;MemAvailable:   {:8d} kB\n&quot;.format(self.K(available)) +</span>
<span class="quote">&gt; +            &quot;Buffers:        {:8d} kB\n&quot;.format(self.K(bufferram)) +</span>
<span class="quote">&gt; +            &quot;Cached:         {:8d} kB\n&quot;.format(self.K(cached)) +</span>
<span class="quote">&gt; +            &quot;SwapCached:     {:8d} kB\n&quot;.format(self.K(total_swapcache_pages)) +</span>
<span class="quote">&gt; +            &quot;Active:         {:8d} kB\n&quot;.format(self.K(active_pages)) +</span>
<span class="quote">&gt; +            &quot;Inactive:       {:8d} kB\n&quot;.format(self.K(inactive_pages)) +</span>
<span class="quote">&gt; +            &quot;Active(anon):   {:8d} kB\n&quot;.format(self.K(active_pages_anon)) +</span>
<span class="quote">&gt; +            &quot;Inactive(anon): {:8d} kB\n&quot;.format(self.K(inactive_pages_anon)) +</span>
<span class="quote">&gt; +            &quot;Active(file):   {:8d} kB\n&quot;.format(self.K(active_pages_file)) +</span>
<span class="quote">&gt; +            &quot;Inactive(file): {:8d} kB\n&quot;.format(self.K(inactive_pages_file)) +</span>
<span class="quote">&gt; +            &quot;Unevictable:    {:8d} kB\n&quot;.format(self.K(unevictable_pages)) +</span>
<span class="quote">&gt; +            &quot;Mlocked:        {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_MLOCK&quot;))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_HIGHMEM:</span>
<span class="quote">&gt; +            totalhigh = int(gdb.parse_and_eval(&quot;totalhigh_pages&quot;))</span>
<span class="quote">&gt; +            freehigh = int(gdb.parse_and_eval(&quot;nr_free_highpages()&quot;))</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +                &quot;HighTotal:      {:8d} kB\n&quot;.format(self.K(totalhigh)) +</span>
<span class="quote">&gt; +                &quot;HighFree:       {:8d} kB\n&quot;.format(self.K(freehigh)) +</span>
<span class="quote">&gt; +                &quot;LowTotal:       {:8d} kB\n&quot;.format(self.K(totalram-totalhigh)) +</span>
<span class="quote">&gt; +                &quot;LowFree:        {:8d} kB\n&quot;.format(self.K(freeram-freehigh))</span>
<span class="quote">&gt; +                )</span>
<span class="quote">&gt; +        if not constants.LX_CONFIG_MMU:</span>
<span class="quote">&gt; +            mmap_pages_allocated = gdb.parse_and_eval(&quot;mmap_pages_allocated.counter&quot;)</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +                &quot;MmapCopy:       {:8d} kB\n&quot;.format(self.K(mmap_pages_allocated))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +                )</span>
<span class="quote">
&gt; +            pass</span>

Hrm ... No idea where this &#39;pass&#39; statement crept in ... It has been
dropped for the next patch version.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +        gdb.write(</span>
<span class="quote">&gt; +            &quot;SwapTotal:      {:8d} kB\n&quot;.format(self.K(0)) +</span>
<span class="quote">&gt; +            &quot;SwapFree:       {:8d} kB\n&quot;.format(self.K(0)) +</span>
<span class="quote">&gt; +            &quot;Dirty:          {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FILE_DIRTY&quot;)) +</span>
<span class="quote">&gt; +            &quot;Writeback:      {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_WRITEBACK&quot;)) +</span>
<span class="quote">&gt; +            &quot;AnonPages:      {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_ANON_PAGES&quot;)) +</span>
<span class="quote">&gt; +            &quot;Mapped:         {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FILE_MAPPED&quot;)) +</span>
<span class="quote">&gt; +            &quot;Shmem:          {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_SHMEM&quot;)) +</span>
<span class="quote">&gt; +            &quot;Slab:           {:8d} kB\n&quot;.format(self.K(slab)) +</span>
<span class="quote">&gt; +            &quot;SReclaimable:   {:8d} kB\n&quot;.format(self.K(reclaimable)) +</span>
<span class="quote">&gt; +            &quot;SUnreclaim:     {:8d} kB\n&quot;.format(self.K(unreclaimable)) +</span>
<span class="quote">&gt; +            &quot;KernelStack:    {:8d} kB\n&quot;.format(kernelstack) +</span>
<span class="quote">&gt; +            &quot;PageTables:     {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_PAGETABLE&quot;))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_QUICKLIST:</span>
<span class="quote">&gt; +            quicklist = self.quicklist_total_size()</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +               &quot;Quicklists:     {:8d} kB\n&quot;.format(self.K(quicklist))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        gdb.write(</span>
<span class="quote">&gt; +            &quot;NFS_Unstable:   {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_UNSTABLE_NFS&quot;)) +</span>
<span class="quote">&gt; +            &quot;Bounce:         {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_BOUNCE&quot;)) +</span>
<span class="quote">&gt; +            &quot;WritebackTmp:   {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_WRITEBACK_TEMP&quot;))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        gdb.write(</span>
<span class="quote">&gt; +            &quot;CommitLimit:    {:8d} kB\n&quot;.format(self.K(commitlimit)) +</span>
<span class="quote">&gt; +            &quot;Committed_AS:   {:8d} kB\n&quot;.format(self.K(committed_as)) +</span>
<span class="quote">&gt; +            &quot;VmallocTotal:   {:8d} kB\n&quot;.format(vmalloc_total)</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        # These are always zero now</span>
<span class="quote">&gt; +        gdb.write(</span>
<span class="quote">&gt; +            &quot;VmallocUsed:    {:8d} kB\n&quot;.format(0) +</span>
<span class="quote">&gt; +            &quot;VmallocChunk:   {:8d} kB\n&quot;.format(0)</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_MEMORY_FAILURE:</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +                &quot;HardwareCorrupted: {:8d} kB\n&quot;</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_TRANSPARENT_HUGEPAGE:</span>
<span class="quote">&gt; +            huge = self.gps(&quot;NR_ANON_TRANSPARENT_HUGEPAGES&quot;)</span>
<span class="quote">&gt; +            # HPAGE_PMD_NR can not be determined in constants.py</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +                &quot;AnonHugePages:  {:8d} kB ( * HPAGE_PMD_NR )\n&quot;</span>
<span class="quote">&gt; +                .format(self.K(huge))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +        if constants.LX_CONFIG_CMA:</span>
<span class="quote">&gt; +            totalcma_pages = int(gdb.parse_and_eval(&quot;totalcma_pages&quot;))</span>
<span class="quote">&gt; +            gdb.write(</span>
<span class="quote">&gt; +                &quot;CmaTotal:       {:8d} kB\n&quot;.format(self.K(totalcma_pages)) +</span>
<span class="quote">&gt; +                &quot;CmaFree:        {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FREE_CMA_PAGES&quot;))</span>
<span class="quote">&gt; +            )</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +LxMeminfo()</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/scripts/gdb/linux/constants.py.in b/scripts/gdb/linux/constants.py.in</span>
<span class="p_header">index 57213ad8cf75..66562a8242bd 100644</span>
<span class="p_header">--- a/scripts/gdb/linux/constants.py.in</span>
<span class="p_header">+++ b/scripts/gdb/linux/constants.py.in</span>
<span class="p_chunk">@@ -12,8 +12,16 @@</span> <span class="p_context"></span>
  *
  */
 
<span class="p_add">+#include &lt;asm/page.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
<span class="p_add">+#include &lt;asm/thread_info.h&gt;</span>
<span class="p_add">+</span>
 #include &lt;linux/fs.h&gt;
<span class="p_add">+#include &lt;linux/swap.h&gt;</span>
 #include &lt;linux/mount.h&gt;
<span class="p_add">+#include &lt;linux/huge_mm.h&gt;</span>
<span class="p_add">+#include &lt;linux/vmalloc.h&gt;</span>
<span class="p_add">+</span>
 
 /* We need to stringify expanded macros so that they can be parsed */
 
<span class="p_chunk">@@ -51,3 +59,29 @@</span> <span class="p_context"> LX_VALUE(MNT_NOATIME)</span>
 LX_VALUE(MNT_NODIRATIME)
 LX_VALUE(MNT_RELATIME)
 
<span class="p_add">+/* asm/page.h */</span>
<span class="p_add">+LX_GDBPARSED(PAGE_SHIFT)</span>
<span class="p_add">+</span>
<span class="p_add">+/* asm/thread_info.h */</span>
<span class="p_add">+LX_GDBPARSED(THREAD_SIZE)</span>
<span class="p_add">+</span>
<span class="p_add">+/* linux/vmalloc.h */</span>
<span class="p_add">+LX_GDBPARSED(VMALLOC_TOTAL)</span>
<span class="p_add">+</span>
<span class="p_add">+/* linux/swap.h */</span>
<span class="p_add">+LX_GDBPARSED(MAX_SWAPFILES)</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+/* Kernel Configs */</span>
<span class="p_add">+LX_CONFIG(CONFIG_HIGHMEM)</span>
<span class="p_add">+LX_CONFIG(CONFIG_MEMORY_FAILURE)</span>
<span class="p_add">+LX_CONFIG(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="p_add">+LX_CONFIG(CONFIG_CMA)</span>
<span class="p_add">+LX_CONFIG(CONFIG_MMU)</span>
<span class="p_add">+LX_CONFIG(CONFIG_SWAP)</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef CONFIG_NR_QUICK</span>
<span class="p_add">+#define CONFIG_NR_QUICK 0</span>
<span class="p_add">+#endif</span>
<span class="p_add">+LX_VALUE(CONFIG_NR_QUICK)</span>
<span class="p_add">+LX_CONFIG(CONFIG_QUICKLIST)</span>
<span class="p_header">diff --git a/scripts/gdb/linux/proc.py b/scripts/gdb/linux/proc.py</span>
<span class="p_header">index 44804e10493e..95933f66ea3e 100644</span>
<span class="p_header">--- a/scripts/gdb/linux/proc.py</span>
<span class="p_header">+++ b/scripts/gdb/linux/proc.py</span>
<span class="p_chunk">@@ -204,3 +204,222 @@</span> <span class="p_context"> values of that process namespace&quot;&quot;&quot;</span>
                         info_opts(MNT_INFO, m_flags)))
 
 LxMounts()
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+bdev_type = utils.CachedType(&quot;struct block_device&quot;)</span>
<span class="p_add">+bdev_ptr_type = bdev_type.get_type().pointer()</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+class LxMeminfo(gdb.Command):</span>
<span class="p_add">+    &quot;&quot;&quot; Identify the memory usage, statistics, and availability</span>
<span class="p_add">+</span>
<span class="p_add">+Equivalent to cat /proc/meminfo on a running target &quot;&quot;&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+    def __init__(self):</span>
<span class="p_add">+        super(LxMeminfo, self).__init__(&quot;lx-meminfo&quot;, gdb.COMMAND_DATA)</span>
<span class="p_add">+</span>
<span class="p_add">+    def K(self, val):</span>
<span class="p_add">+        # Convert from PAGES to KB</span>
<span class="p_add">+        return int(val &lt;&lt; (constants.LX_PAGE_SHIFT - 10))</span>
<span class="p_add">+</span>
<span class="p_add">+    def page_K(self, remote_value):</span>
<span class="p_add">+        # Obtain page value, and Convert from PAGES to KB</span>
<span class="p_add">+        val = int(gdb.parse_and_eval(remote_value))</span>
<span class="p_add">+        return self.K(val)</span>
<span class="p_add">+</span>
<span class="p_add">+    def gps(self, enum_zone_stat_item):</span>
<span class="p_add">+        # Access the Global Page State structure</span>
<span class="p_add">+        # I would prefer to read this structure in one go and then index</span>
<span class="p_add">+        # from the enum. But we can&#39;t determine the enum values with out</span>
<span class="p_add">+        # a call to GDB anyway so we may as well take the easy route and</span>
<span class="p_add">+        # get the value.</span>
<span class="p_add">+        remote_value = &quot;vm_stat[&quot; + enum_zone_stat_item + &quot;].counter&quot;</span>
<span class="p_add">+        return int(gdb.parse_and_eval(remote_value))</span>
<span class="p_add">+</span>
<span class="p_add">+    def gps_K(self, enum_zone_stat_item):</span>
<span class="p_add">+        return self.K(self.gps(enum_zone_stat_item))</span>
<span class="p_add">+</span>
<span class="p_add">+    def nr_blockdev_pages(self):</span>
<span class="p_add">+        bdevs_head = gdb.parse_and_eval(&quot;all_bdevs&quot;)</span>
<span class="p_add">+        pages = 0</span>
<span class="p_add">+        for bdev in lists.list_for_each_entry(bdevs_head, bdev_ptr_type, &quot;bd_list&quot;):</span>
<span class="p_add">+            try:</span>
<span class="p_add">+                pages += bdev[&#39;bd_inode&#39;][&#39;i_mapping&#39;][&#39;nrpages&#39;]</span>
<span class="p_add">+            except:</span>
<span class="p_add">+                # Any memory read failures are simply not counted</span>
<span class="p_add">+                pass</span>
<span class="p_add">+        return pages</span>
<span class="p_add">+</span>
<span class="p_add">+    def total_swapcache_pages(self):</span>
<span class="p_add">+        pages = 0</span>
<span class="p_add">+        if not constants.LX_CONFIG_SWAP:</span>
<span class="p_add">+            return 0</span>
<span class="p_add">+</span>
<span class="p_add">+        for i in range(0, int(constants.LX_MAX_SWAPFILES)):</span>
<span class="p_add">+            swap_space = &quot;swapper_spaces[&quot; + str(i) + &quot;].nrpages&quot;</span>
<span class="p_add">+            pages += int(gdb.parse_and_eval(swap_space))</span>
<span class="p_add">+        return pages</span>
<span class="p_add">+</span>
<span class="p_add">+    def vm_commit_limit(self, totalram_pages):</span>
<span class="p_add">+        total_swap_pages = 0</span>
<span class="p_add">+        overcommit = int(gdb.parse_and_eval(&quot;sysctl_overcommit_kbytes&quot;))</span>
<span class="p_add">+        overcommit_ratio = int(gdb.parse_and_eval(&quot;sysctl_overcommit_ratio&quot;))</span>
<span class="p_add">+</span>
<span class="p_add">+        if constants.LX_CONFIG_SWAP:</span>
<span class="p_add">+            total_swap_pages = int(gdb.parse_and_eval(&quot;total_swap_pages&quot;))</span>
<span class="p_add">+</span>
<span class="p_add">+        hugetlb_total_pages = 0  # hugetlb_total_pages()</span>
<span class="p_add">+</span>
<span class="p_add">+        if overcommit:</span>
<span class="p_add">+            allowed = overcommit &gt;&gt; (constants.LX_PAGE_SHIFT - 10)</span>
<span class="p_add">+        else:</span>
<span class="p_add">+            allowed = ((totalram_pages - hugetlb_total_pages *</span>
<span class="p_add">+                       overcommit_ratio / 100))</span>
<span class="p_add">+</span>
<span class="p_add">+        allowed += total_swap_pages</span>
<span class="p_add">+        return allowed</span>
<span class="p_add">+</span>
<span class="p_add">+    def quicklist_total_size(self):</span>
<span class="p_add">+        count = 0</span>
<span class="p_add">+        quicklist = utils.gdb_eval_or_none(&quot;quicklist&quot;)</span>
<span class="p_add">+        if quicklist is None:</span>
<span class="p_add">+            return 0</span>
<span class="p_add">+</span>
<span class="p_add">+        for cpu in cpus.each_online_cpu():</span>
<span class="p_add">+            ql = cpus.per_cpu(quicklist, cpu)</span>
<span class="p_add">+            for q in range(0, constants.LX_CONFIG_NR_QUICK):</span>
<span class="p_add">+                # for (q = ql; q &lt; ql + CONFIG_NR_QUICK; q++)</span>
<span class="p_add">+                # count += q-&gt;nr_pages</span>
<span class="p_add">+                count += ql[q][&#39;nr_pages&#39;]</span>
<span class="p_add">+</span>
<span class="p_add">+        return count</span>
<span class="p_add">+</span>
<span class="p_add">+    # Main lx-meminfo command execution</span>
<span class="p_add">+    # See fs/proc/meminfo.c:meminfo_proc_show()</span>
<span class="p_add">+    def invoke(self, arg, from_tty):</span>
<span class="p_add">+        totalram = int(gdb.parse_and_eval(&quot;totalram_pages&quot;))</span>
<span class="p_add">+        freeram = self.gps(&quot;NR_FREE_PAGES&quot;)</span>
<span class="p_add">+        reclaimable = self.gps(&quot;NR_SLAB_RECLAIMABLE&quot;)</span>
<span class="p_add">+        unreclaimable = self.gps(&quot;NR_SLAB_UNRECLAIMABLE&quot;)</span>
<span class="p_add">+        slab = reclaimable + unreclaimable</span>
<span class="p_add">+        # for_each_zone(zone)</span>
<span class="p_add">+        #     wmark_low += zone-&gt;watermark[WMARK_LOW];</span>
<span class="p_add">+        wmark_low = 0   # Zone parsing is unimplemented</span>
<span class="p_add">+</span>
<span class="p_add">+        available = freeram - wmark_low</span>
<span class="p_add">+        available += reclaimable - min(reclaimable / 2, wmark_low)</span>
<span class="p_add">+</span>
<span class="p_add">+        bufferram = self.nr_blockdev_pages()</span>
<span class="p_add">+        total_swapcache_pages = self.total_swapcache_pages()</span>
<span class="p_add">+</span>
<span class="p_add">+        file_pages = self.gps(&quot;NR_FILE_PAGES&quot;)</span>
<span class="p_add">+        cached = file_pages - total_swapcache_pages - bufferram</span>
<span class="p_add">+</span>
<span class="p_add">+        # LRU Pages</span>
<span class="p_add">+        active_pages_anon = self.gps(&quot;NR_ACTIVE_ANON&quot;)</span>
<span class="p_add">+        inactive_pages_anon = self.gps(&quot;NR_INACTIVE_ANON&quot;)</span>
<span class="p_add">+        active_pages_file = self.gps(&quot;NR_ACTIVE_FILE&quot;)</span>
<span class="p_add">+        inactive_pages_file = self.gps(&quot;NR_INACTIVE_FILE&quot;)</span>
<span class="p_add">+        unevictable_pages = self.gps(&quot;NR_UNEVICTABLE&quot;)</span>
<span class="p_add">+        active_pages = active_pages_anon + active_pages_file</span>
<span class="p_add">+        inactive_pages = inactive_pages_anon + inactive_pages_file</span>
<span class="p_add">+</span>
<span class="p_add">+        kernelstack = int(self.gps(&quot;NR_KERNEL_STACK&quot;) *</span>
<span class="p_add">+                          constants.LX_THREAD_SIZE / 1024)</span>
<span class="p_add">+</span>
<span class="p_add">+        commitlimit = int(self.vm_commit_limit(totalram))</span>
<span class="p_add">+        committed_as = int(gdb.parse_and_eval(&quot;vm_committed_as.count&quot;))</span>
<span class="p_add">+</span>
<span class="p_add">+        vmalloc_total = int(constants.LX_VMALLOC_TOTAL &gt;&gt; 10)</span>
<span class="p_add">+</span>
<span class="p_add">+        gdb.write(</span>
<span class="p_add">+            &quot;MemTotal:       {:8d} kB\n&quot;.format(self.K(totalram)) +</span>
<span class="p_add">+            &quot;MemFree:        {:8d} kB\n&quot;.format(self.K(freeram)) +</span>
<span class="p_add">+            &quot;MemAvailable:   {:8d} kB\n&quot;.format(self.K(available)) +</span>
<span class="p_add">+            &quot;Buffers:        {:8d} kB\n&quot;.format(self.K(bufferram)) +</span>
<span class="p_add">+            &quot;Cached:         {:8d} kB\n&quot;.format(self.K(cached)) +</span>
<span class="p_add">+            &quot;SwapCached:     {:8d} kB\n&quot;.format(self.K(total_swapcache_pages)) +</span>
<span class="p_add">+            &quot;Active:         {:8d} kB\n&quot;.format(self.K(active_pages)) +</span>
<span class="p_add">+            &quot;Inactive:       {:8d} kB\n&quot;.format(self.K(inactive_pages)) +</span>
<span class="p_add">+            &quot;Active(anon):   {:8d} kB\n&quot;.format(self.K(active_pages_anon)) +</span>
<span class="p_add">+            &quot;Inactive(anon): {:8d} kB\n&quot;.format(self.K(inactive_pages_anon)) +</span>
<span class="p_add">+            &quot;Active(file):   {:8d} kB\n&quot;.format(self.K(active_pages_file)) +</span>
<span class="p_add">+            &quot;Inactive(file): {:8d} kB\n&quot;.format(self.K(inactive_pages_file)) +</span>
<span class="p_add">+            &quot;Unevictable:    {:8d} kB\n&quot;.format(self.K(unevictable_pages)) +</span>
<span class="p_add">+            &quot;Mlocked:        {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_MLOCK&quot;))</span>
<span class="p_add">+            )</span>
<span class="p_add">+        if constants.LX_CONFIG_HIGHMEM:</span>
<span class="p_add">+            totalhigh = int(gdb.parse_and_eval(&quot;totalhigh_pages&quot;))</span>
<span class="p_add">+            freehigh = int(gdb.parse_and_eval(&quot;nr_free_highpages()&quot;))</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+                &quot;HighTotal:      {:8d} kB\n&quot;.format(self.K(totalhigh)) +</span>
<span class="p_add">+                &quot;HighFree:       {:8d} kB\n&quot;.format(self.K(freehigh)) +</span>
<span class="p_add">+                &quot;LowTotal:       {:8d} kB\n&quot;.format(self.K(totalram-totalhigh)) +</span>
<span class="p_add">+                &quot;LowFree:        {:8d} kB\n&quot;.format(self.K(freeram-freehigh))</span>
<span class="p_add">+                )</span>
<span class="p_add">+        if not constants.LX_CONFIG_MMU:</span>
<span class="p_add">+            mmap_pages_allocated = gdb.parse_and_eval(&quot;mmap_pages_allocated.counter&quot;)</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+                &quot;MmapCopy:       {:8d} kB\n&quot;.format(self.K(mmap_pages_allocated))</span>
<span class="p_add">+</span>
<span class="p_add">+                )</span>
<span class="p_add">+            pass</span>
<span class="p_add">+</span>
<span class="p_add">+        gdb.write(</span>
<span class="p_add">+            &quot;SwapTotal:      {:8d} kB\n&quot;.format(self.K(0)) +</span>
<span class="p_add">+            &quot;SwapFree:       {:8d} kB\n&quot;.format(self.K(0)) +</span>
<span class="p_add">+            &quot;Dirty:          {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FILE_DIRTY&quot;)) +</span>
<span class="p_add">+            &quot;Writeback:      {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_WRITEBACK&quot;)) +</span>
<span class="p_add">+            &quot;AnonPages:      {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_ANON_PAGES&quot;)) +</span>
<span class="p_add">+            &quot;Mapped:         {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FILE_MAPPED&quot;)) +</span>
<span class="p_add">+            &quot;Shmem:          {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_SHMEM&quot;)) +</span>
<span class="p_add">+            &quot;Slab:           {:8d} kB\n&quot;.format(self.K(slab)) +</span>
<span class="p_add">+            &quot;SReclaimable:   {:8d} kB\n&quot;.format(self.K(reclaimable)) +</span>
<span class="p_add">+            &quot;SUnreclaim:     {:8d} kB\n&quot;.format(self.K(unreclaimable)) +</span>
<span class="p_add">+            &quot;KernelStack:    {:8d} kB\n&quot;.format(kernelstack) +</span>
<span class="p_add">+            &quot;PageTables:     {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_PAGETABLE&quot;))</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+        if constants.LX_CONFIG_QUICKLIST:</span>
<span class="p_add">+            quicklist = self.quicklist_total_size()</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+               &quot;Quicklists:     {:8d} kB\n&quot;.format(self.K(quicklist))</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+        gdb.write(</span>
<span class="p_add">+            &quot;NFS_Unstable:   {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_UNSTABLE_NFS&quot;)) +</span>
<span class="p_add">+            &quot;Bounce:         {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_BOUNCE&quot;)) +</span>
<span class="p_add">+            &quot;WritebackTmp:   {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_WRITEBACK_TEMP&quot;))</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+        gdb.write(</span>
<span class="p_add">+            &quot;CommitLimit:    {:8d} kB\n&quot;.format(self.K(commitlimit)) +</span>
<span class="p_add">+            &quot;Committed_AS:   {:8d} kB\n&quot;.format(self.K(committed_as)) +</span>
<span class="p_add">+            &quot;VmallocTotal:   {:8d} kB\n&quot;.format(vmalloc_total)</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+        # These are always zero now</span>
<span class="p_add">+        gdb.write(</span>
<span class="p_add">+            &quot;VmallocUsed:    {:8d} kB\n&quot;.format(0) +</span>
<span class="p_add">+            &quot;VmallocChunk:   {:8d} kB\n&quot;.format(0)</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+        if constants.LX_CONFIG_MEMORY_FAILURE:</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+                &quot;HardwareCorrupted: {:8d} kB\n&quot;</span>
<span class="p_add">+            )</span>
<span class="p_add">+        if constants.LX_CONFIG_TRANSPARENT_HUGEPAGE:</span>
<span class="p_add">+            huge = self.gps(&quot;NR_ANON_TRANSPARENT_HUGEPAGES&quot;)</span>
<span class="p_add">+            # HPAGE_PMD_NR can not be determined in constants.py</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+                &quot;AnonHugePages:  {:8d} kB ( * HPAGE_PMD_NR )\n&quot;</span>
<span class="p_add">+                .format(self.K(huge))</span>
<span class="p_add">+            )</span>
<span class="p_add">+        if constants.LX_CONFIG_CMA:</span>
<span class="p_add">+            totalcma_pages = int(gdb.parse_and_eval(&quot;totalcma_pages&quot;))</span>
<span class="p_add">+            gdb.write(</span>
<span class="p_add">+                &quot;CmaTotal:       {:8d} kB\n&quot;.format(self.K(totalcma_pages)) +</span>
<span class="p_add">+                &quot;CmaFree:        {:8d} kB\n&quot;.format(self.gps_K(&quot;NR_FREE_CMA_PAGES&quot;))</span>
<span class="p_add">+            )</span>
<span class="p_add">+</span>
<span class="p_add">+LxMeminfo()</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



