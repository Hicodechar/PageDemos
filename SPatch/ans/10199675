
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[13/64] fs/proc: teach about range locking - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [13/64] fs/proc: teach about range locking</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2018, 1:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180205012754.23615-14-dbueso@wotan.suse.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10199675/mbox/"
   >mbox</a>
|
   <a href="/patch/10199675/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10199675/">/patch/10199675/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	41F2D6056F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:29:39 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3022327FAC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:29:39 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 23806285B6; Mon,  5 Feb 2018 01:29:39 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3295827FAC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:29:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752809AbeBEB3d (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Feb 2018 20:29:33 -0500
Received: from mx2.suse.de ([195.135.220.15]:43680 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752421AbeBEB2G (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Feb 2018 20:28:06 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 222D5ADDE;
	Mon,  5 Feb 2018 01:28:00 +0000 (UTC)
From: Davidlohr Bueso &lt;dbueso@suse.de&gt;
To: akpm@linux-foundation.org, mingo@kernel.org
Cc: peterz@infradead.org, ldufour@linux.vnet.ibm.com, jack@suse.cz,
	mhocko@kernel.org, kirill.shutemov@linux.intel.com,
	mawilcox@microsoft.com, mgorman@techsingularity.net,
	dave@stgolabs.net, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Davidlohr Bueso &lt;dbueso@suse.de&gt;
Subject: [PATCH 13/64] fs/proc: teach about range locking
Date: Mon,  5 Feb 2018 02:27:03 +0100
Message-Id: &lt;20180205012754.23615-14-dbueso@wotan.suse.de&gt;
X-Mailer: git-send-email 2.12.3
In-Reply-To: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
References: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a> - Feb. 5, 2018, 1:27 a.m.</div>
<pre class="content">
<span class="from">From: Davidlohr Bueso &lt;dave@stgolabs.net&gt;</span>

And use mm locking wrappers -- no change in semantics.
<span class="signed-off-by">
Signed-off-by: Davidlohr Bueso &lt;dbueso@suse.de&gt;</span>
---
 fs/proc/base.c       | 33 ++++++++++++++++++++-------------
 fs/proc/task_mmu.c   | 22 +++++++++++-----------
 fs/proc/task_nommu.c | 22 +++++++++++++---------
 3 files changed, 44 insertions(+), 33 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/base.c b/fs/proc/base.c</span>
<span class="p_header">index 9298324325ed..c94ee3e54f25 100644</span>
<span class="p_header">--- a/fs/proc/base.c</span>
<span class="p_header">+++ b/fs/proc/base.c</span>
<span class="p_chunk">@@ -220,6 +220,7 @@</span> <span class="p_context"> static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,</span>
 	unsigned long p;
 	char c;
 	ssize_t rv;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	BUG_ON(*pos &lt; 0);
 
<span class="p_chunk">@@ -242,12 +243,12 @@</span> <span class="p_context"> static ssize_t proc_pid_cmdline_read(struct file *file, char __user *buf,</span>
 		goto out_mmput;
 	}
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	arg_start = mm-&gt;arg_start;
 	arg_end = mm-&gt;arg_end;
 	env_start = mm-&gt;env_start;
 	env_end = mm-&gt;env_end;
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	BUG_ON(arg_start &gt; arg_end);
 	BUG_ON(env_start &gt; env_end);
<span class="p_chunk">@@ -915,6 +916,7 @@</span> <span class="p_context"> static ssize_t environ_read(struct file *file, char __user *buf,</span>
 	unsigned long src = *ppos;
 	int ret = 0;
 	struct mm_struct *mm = file-&gt;private_data;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 	unsigned long env_start, env_end;
 
 	/* Ensure the process spawned far enough to have an environment. */
<span class="p_chunk">@@ -929,10 +931,10 @@</span> <span class="p_context"> static ssize_t environ_read(struct file *file, char __user *buf,</span>
 	if (!mmget_not_zero(mm))
 		goto free;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	env_start = mm-&gt;env_start;
 	env_end = mm-&gt;env_end;
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	while (count &gt; 0) {
 		size_t this_len, max_len;
<span class="p_chunk">@@ -1962,9 +1964,11 @@</span> <span class="p_context"> static int map_files_d_revalidate(struct dentry *dentry, unsigned int flags)</span>
 		goto out;
 
 	if (!dname_to_vma_addr(dentry, &amp;vm_start, &amp;vm_end)) {
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
<span class="p_add">+		mm_read_lock(mm, &amp;mmrange);</span>
 		exact_vma_exists = !!find_exact_vma(mm, vm_start, vm_end);
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 	}
 
 	mmput(mm);
<span class="p_chunk">@@ -1995,6 +1999,7 @@</span> <span class="p_context"> static int map_files_get_link(struct dentry *dentry, struct path *path)</span>
 	struct task_struct *task;
 	struct mm_struct *mm;
 	int rc;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	rc = -ENOENT;
 	task = get_proc_task(d_inode(dentry));
<span class="p_chunk">@@ -2011,14 +2016,14 @@</span> <span class="p_context"> static int map_files_get_link(struct dentry *dentry, struct path *path)</span>
 		goto out_mmput;
 
 	rc = -ENOENT;
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	vma = find_exact_vma(mm, vm_start, vm_end);
 	if (vma &amp;&amp; vma-&gt;vm_file) {
 		*path = vma-&gt;vm_file-&gt;f_path;
 		path_get(path);
 		rc = 0;
 	}
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 out_mmput:
 	mmput(mm);
<span class="p_chunk">@@ -2091,6 +2096,7 @@</span> <span class="p_context"> static struct dentry *proc_map_files_lookup(struct inode *dir,</span>
 	struct task_struct *task;
 	int result;
 	struct mm_struct *mm;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	result = -ENOENT;
 	task = get_proc_task(dir);
<span class="p_chunk">@@ -2109,7 +2115,7 @@</span> <span class="p_context"> static struct dentry *proc_map_files_lookup(struct inode *dir,</span>
 	if (!mm)
 		goto out_put_task;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	vma = find_exact_vma(mm, vm_start, vm_end);
 	if (!vma)
 		goto out_no_vma;
<span class="p_chunk">@@ -2119,7 +2125,7 @@</span> <span class="p_context"> static struct dentry *proc_map_files_lookup(struct inode *dir,</span>
 				(void *)(unsigned long)vma-&gt;vm_file-&gt;f_mode);
 
 out_no_vma:
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	mmput(mm);
 out_put_task:
 	put_task_struct(task);
<span class="p_chunk">@@ -2144,6 +2150,7 @@</span> <span class="p_context"> proc_map_files_readdir(struct file *file, struct dir_context *ctx)</span>
 	struct map_files_info info;
 	struct map_files_info *p;
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	ret = -ENOENT;
 	task = get_proc_task(file_inode(file));
<span class="p_chunk">@@ -2161,7 +2168,7 @@</span> <span class="p_context"> proc_map_files_readdir(struct file *file, struct dir_context *ctx)</span>
 	mm = get_task_mm(task);
 	if (!mm)
 		goto out_put_task;
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	nr_files = 0;
 
<span class="p_chunk">@@ -2188,7 +2195,7 @@</span> <span class="p_context"> proc_map_files_readdir(struct file *file, struct dir_context *ctx)</span>
 			ret = -ENOMEM;
 			if (fa)
 				flex_array_free(fa);
<span class="p_del">-			up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+			mm_read_unlock(mm, &amp;mmrange);</span>
 			mmput(mm);
 			goto out_put_task;
 		}
<span class="p_chunk">@@ -2206,7 +2213,7 @@</span> <span class="p_context"> proc_map_files_readdir(struct file *file, struct dir_context *ctx)</span>
 				BUG();
 		}
 	}
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	for (i = 0; i &lt; nr_files; i++) {
 		char buf[4 * sizeof(long) + 2];	/* max: %lx-%lx\0 */
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 7c0a79a937b5..feb5bd4e5c82 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -136,7 +136,7 @@</span> <span class="p_context"> static void vma_stop(struct proc_maps_private *priv)</span>
 	struct mm_struct *mm = priv-&gt;mm;
 
 	release_task_mempolicy(priv);
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;priv-&gt;mmrange);</span>
 	mmput(mm);
 }
 
<span class="p_chunk">@@ -175,7 +175,7 @@</span> <span class="p_context"> static void *m_start(struct seq_file *m, loff_t *ppos)</span>
 		return NULL;
 
 	range_lock_init_full(&amp;priv-&gt;mmrange);
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;priv-&gt;mmrange);</span>
 	hold_task_mempolicy(priv);
 	priv-&gt;tail_vma = get_gate_vma(mm);
 
<span class="p_chunk">@@ -1135,7 +1135,7 @@</span> <span class="p_context"> static ssize_t clear_refs_write(struct file *file, const char __user *buf,</span>
 		};
 
 		if (type == CLEAR_REFS_MM_HIWATER_RSS) {
<span class="p_del">-			if (down_write_killable(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+			if (mm_write_lock_killable(mm, &amp;mmrange)) {</span>
 				count = -EINTR;
 				goto out_mm;
 			}
<span class="p_chunk">@@ -1145,18 +1145,18 @@</span> <span class="p_context"> static ssize_t clear_refs_write(struct file *file, const char __user *buf,</span>
 			 * resident set size to this mm&#39;s current rss value.
 			 */
 			reset_mm_hiwater_rss(mm);
<span class="p_del">-			up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+			mm_write_unlock(mm, &amp;mmrange);</span>
 			goto out_mm;
 		}
 
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	        mm_read_lock(mm, &amp;mmrange);</span>
 		tlb_gather_mmu(&amp;tlb, mm, 0, -1);
 		if (type == CLEAR_REFS_SOFT_DIRTY) {
 			for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
 				if (!(vma-&gt;vm_flags &amp; VM_SOFTDIRTY))
 					continue;
<span class="p_del">-				up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_del">-				if (down_write_killable(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+				mm_read_unlock(mm, &amp;mmrange);</span>
<span class="p_add">+				if (mm_write_lock_killable(mm, &amp;mmrange)) {</span>
 					count = -EINTR;
 					goto out_mm;
 				}
<span class="p_chunk">@@ -1164,7 +1164,7 @@</span> <span class="p_context"> static ssize_t clear_refs_write(struct file *file, const char __user *buf,</span>
 					vma-&gt;vm_flags &amp;= ~VM_SOFTDIRTY;
 					vma_set_page_prot(vma);
 				}
<span class="p_del">-				downgrade_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+				mm_downgrade_write(mm, &amp;mmrange);</span>
 				break;
 			}
 			mmu_notifier_invalidate_range_start(mm, 0, -1);
<span class="p_chunk">@@ -1174,7 +1174,7 @@</span> <span class="p_context"> static ssize_t clear_refs_write(struct file *file, const char __user *buf,</span>
 		if (type == CLEAR_REFS_SOFT_DIRTY)
 			mmu_notifier_invalidate_range_end(mm, 0, -1);
 		tlb_finish_mmu(&amp;tlb, 0, -1);
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 out_mm:
 		mmput(mm);
 	}
<span class="p_chunk">@@ -1528,10 +1528,10 @@</span> <span class="p_context"> static ssize_t pagemap_read(struct file *file, char __user *buf,</span>
 		/* overflow ? */
 		if (end &lt; start_vaddr || end &gt; end_vaddr)
 			end = end_vaddr;
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(mm, mmrange);</span>
 		ret = walk_page_range(start_vaddr, end, &amp;pagemap_walk,
 				      mmrange);
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, mmrange);</span>
 		start_vaddr = end;
 
 		len = min(count, PM_ENTRY_BYTES * pm.pos);
<span class="p_header">diff --git a/fs/proc/task_nommu.c b/fs/proc/task_nommu.c</span>
<span class="p_header">index 5b62f57bd9bc..50a21813f926 100644</span>
<span class="p_header">--- a/fs/proc/task_nommu.c</span>
<span class="p_header">+++ b/fs/proc/task_nommu.c</span>
<span class="p_chunk">@@ -23,9 +23,10 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 	struct vm_area_struct *vma;
 	struct vm_region *region;
 	struct rb_node *p;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 	unsigned long bytes = 0, sbytes = 0, slack = 0, size;
         
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (p = rb_first(&amp;mm-&gt;mm_rb); p; p = rb_next(p)) {
 		vma = rb_entry(p, struct vm_area_struct, vm_rb);
 
<span class="p_chunk">@@ -77,7 +78,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		&quot;Shared:\t%8lu bytes\n&quot;,
 		bytes, slack, sbytes);
 
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 }
 
 unsigned long task_vsize(struct mm_struct *mm)
<span class="p_chunk">@@ -85,13 +86,14 @@</span> <span class="p_context"> unsigned long task_vsize(struct mm_struct *mm)</span>
 	struct vm_area_struct *vma;
 	struct rb_node *p;
 	unsigned long vsize = 0;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (p = rb_first(&amp;mm-&gt;mm_rb); p; p = rb_next(p)) {
 		vma = rb_entry(p, struct vm_area_struct, vm_rb);
 		vsize += vma-&gt;vm_end - vma-&gt;vm_start;
 	}
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	return vsize;
 }
 
<span class="p_chunk">@@ -103,8 +105,9 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 	struct vm_region *region;
 	struct rb_node *p;
 	unsigned long size = kobjsize(mm);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (p = rb_first(&amp;mm-&gt;mm_rb); p; p = rb_next(p)) {
 		vma = rb_entry(p, struct vm_area_struct, vm_rb);
 		size += kobjsize(vma);
<span class="p_chunk">@@ -119,7 +122,7 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 		&gt;&gt; PAGE_SHIFT;
 	*data = (PAGE_ALIGN(mm-&gt;start_stack) - (mm-&gt;start_data &amp; PAGE_MASK))
 		&gt;&gt; PAGE_SHIFT;
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	size &gt;&gt;= PAGE_SHIFT;
 	size += *text + *data;
 	*resident = size;
<span class="p_chunk">@@ -223,13 +226,14 @@</span> <span class="p_context"> static void *m_start(struct seq_file *m, loff_t *pos)</span>
 	if (!mm || !mmget_not_zero(mm))
 		return NULL;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	range_lock_init_full(&amp;priv-&gt;mmrange);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;priv-&gt;mmrange);</span>
 	/* start from the Nth VMA */
 	for (p = rb_first(&amp;mm-&gt;mm_rb); p; p = rb_next(p))
 		if (n-- == 0)
 			return p;
 
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;priv-&gt;mmrange);</span>
 	mmput(mm);
 	return NULL;
 }
<span class="p_chunk">@@ -239,7 +243,7 @@</span> <span class="p_context"> static void m_stop(struct seq_file *m, void *_vml)</span>
 	struct proc_maps_private *priv = m-&gt;private;
 
 	if (!IS_ERR_OR_NULL(_vml)) {
<span class="p_del">-		up_read(&amp;priv-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(priv-&gt;mm, &amp;priv-&gt;mmrange);</span>
 		mmput(priv-&gt;mm);
 	}
 	if (priv-&gt;task) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



