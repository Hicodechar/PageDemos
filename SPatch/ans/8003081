
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/2] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/2] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 11, 2016, 12:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1452516120-5535-1-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8003081/mbox/"
   >mbox</a>
|
   <a href="/patch/8003081/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8003081/">/patch/8003081/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 6BE1D9F32E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 12:42:25 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8E29F20295
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 12:42:24 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 908A82027D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 11 Jan 2016 12:42:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932553AbcAKMmM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 11 Jan 2016 07:42:12 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:34283 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932451AbcAKMmJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 11 Jan 2016 07:42:09 -0500
Received: by mail-wm0-f68.google.com with SMTP id b14so26147028wmb.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 11 Jan 2016 04:42:08 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=kJV4lAQCX/4JdYiL6FeJSix0B4/BCkce+SMUk+xBj6k=;
	b=Ob3L0a0AmPUHiY2kYWwxJzypmurbr483XtY2ft8gFX+ShmrXJTAjtIUsK0eDgUO4HP
	DXpduJsn7KLRpDbOHfJVspQqRm/imPPua1jU2sbxK43Bl+8G/mh7SlxJ6F3aNdlNPLZG
	n4SkklfvMBZgwpEgWruNhDpzVJspwvDk1ZJ2seA12kK+34uG/dAXiimBV47AGbYHgM0e
	XpAO1qR4qkTb5bf2VfksEyC7rCBXvDt12MTzhqZ313VxVexTuPdjHhSCoQrN91JN6YQi
	DopXdyQwYjBOXmVcoDDvXMT9FwpC/A0Q1oLWKmuuTIJt4h8DR6LvuT9AdKrZyGyB4Kp0
	eg4w==
X-Received: by 10.28.195.212 with SMTP id t203mr14455464wmf.46.1452516127619;
	Mon, 11 Jan 2016 04:42:07 -0800 (PST)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	w80sm12681143wme.17.2016.01.11.04.42.06
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 11 Jan 2016 04:42:06 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Andrea Argangeli &lt;andrea@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 3/2] oom: clear TIF_MEMDIE after oom_reaper managed to unmap
	the address space
Date: Mon, 11 Jan 2016 13:42:00 +0100
Message-Id: &lt;1452516120-5535-1-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.6.4
In-Reply-To: &lt;1452094975-551-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1452094975-551-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 11, 2016, 12:42 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

When oom_reaper manages to unmap all the eligible vmas there shouldn&#39;t
be much of the freable memory held by the oom victim left anymore so it
makes sense to clear the TIF_MEMDIE flag for the victim and allow the
OOM killer to select another task if necessary.

The lack of TIF_MEMDIE also means that the victim cannot access memory
reserves anymore but that shouldn&#39;t be a problem because it would get
the access again if it needs to allocate and hits the OOM killer again
due to the fatal_signal_pending resp. PF_EXITING check. We can safely
hide the task from the OOM killer because it is clearly not a good
candidate anymore as everyhing reclaimable has been torn down already.

This patch will allow to cap the time an OOM victim can keep TIF_MEMDIE
and thus hold off further global OOM killer actions granted the oom
reaper is able to take mmap_sem for the associated mm struct. This is
not guaranteed now but further steps should make sure that mmap_sem
for write should be blocked killable which will help to reduce such a
lock contention. This is not done by this patch.

Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Suggested-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---

Hi,
this has passed my basic testing but it definitely needs a deeper
review.  I have tested it by flooding the system by OOM and delaying
exit_mm for TIF_MEMDIE tasks to win the race for the oom reaper. I made
sure to delay after the mm was set to NULL to make sure that oom reaper
sees NULL mm from time to time to exercise this case as well. This
happened in roughly half instance.

 include/linux/oom.h |  2 +-
 kernel/exit.c       |  2 +-
 mm/oom_kill.c       | 72 ++++++++++++++++++++++++++++++++++-------------------
 3 files changed, 49 insertions(+), 27 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/oom.h b/include/linux/oom.h</span>
<span class="p_header">index 03e6257321f0..45993b840ed6 100644</span>
<span class="p_header">--- a/include/linux/oom.h</span>
<span class="p_header">+++ b/include/linux/oom.h</span>
<span class="p_chunk">@@ -91,7 +91,7 @@</span> <span class="p_context"> extern enum oom_scan_t oom_scan_process_thread(struct oom_control *oc,</span>
 
 extern bool out_of_memory(struct oom_control *oc);
 
<span class="p_del">-extern void exit_oom_victim(void);</span>
<span class="p_add">+extern void exit_oom_victim(struct task_struct *tsk);</span>
 
 extern int register_oom_notifier(struct notifier_block *nb);
 extern int unregister_oom_notifier(struct notifier_block *nb);
<span class="p_header">diff --git a/kernel/exit.c b/kernel/exit.c</span>
<span class="p_header">index ea95ee1b5ef7..4c114ba8a825 100644</span>
<span class="p_header">--- a/kernel/exit.c</span>
<span class="p_header">+++ b/kernel/exit.c</span>
<span class="p_chunk">@@ -436,7 +436,7 @@</span> <span class="p_context"> static void exit_mm(struct task_struct *tsk)</span>
 	mm_update_next_owner(mm);
 	mmput(mm);
 	if (test_thread_flag(TIF_MEMDIE))
<span class="p_del">-		exit_oom_victim();</span>
<span class="p_add">+		exit_oom_victim(tsk);</span>
 }
 
 static struct task_struct *find_alive_thread(struct task_struct *p)
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 45e51ad2f7cf..abefeeb42504 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -419,21 +419,37 @@</span> <span class="p_context"> bool oom_killer_disabled __read_mostly;</span>
  * victim (if that is possible) to help the OOM killer to move on.
  */
 static struct task_struct *oom_reaper_th;
<span class="p_del">-static struct mm_struct *mm_to_reap;</span>
<span class="p_add">+static struct task_struct *task_to_reap;</span>
 static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);
 
<span class="p_del">-static bool __oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static bool __oom_reap_task(struct task_struct *tsk)</span>
 {
 	struct mmu_gather tlb;
 	struct vm_area_struct *vma;
<span class="p_add">+	struct mm_struct *mm;</span>
<span class="p_add">+	struct task_struct *p;</span>
 	struct zap_details details = {.check_swap_entries = true,
 				      .ignore_dirty = true};
 	bool ret = true;
 
<span class="p_del">-	/* We might have raced with exit path */</span>
<span class="p_del">-	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users))</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure we find the associated mm_struct even when the particular</span>
<span class="p_add">+	 * thread has already terminated and cleared its mm.</span>
<span class="p_add">+	 * We might have race with exit path so consider our work done if there</span>
<span class="p_add">+	 * is no mm.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	p = find_lock_task_mm(tsk);</span>
<span class="p_add">+	if (!p)</span>
 		return true;
 
<span class="p_add">+	mm = p-&gt;mm;</span>
<span class="p_add">+	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users)) {</span>
<span class="p_add">+		task_unlock(p);</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	task_unlock(p);</span>
<span class="p_add">+</span>
 	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {
 		ret = false;
 		goto out;
<span class="p_chunk">@@ -463,60 +479,66 @@</span> <span class="p_context"> static bool __oom_reap_vmas(struct mm_struct *mm)</span>
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 	up_read(&amp;mm-&gt;mmap_sem);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="p_add">+	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="p_add">+	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="p_add">+	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="p_add">+	 * make any sense.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="p_add">+	exit_oom_victim(tsk);</span>
 out:
 	mmput(mm);
 	return ret;
 }
 
<span class="p_del">-static void oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static void oom_reap_task(struct task_struct *tsk)</span>
 {
 	int attempts = 0;
 
 	/* Retry the down_read_trylock(mmap_sem) a few times */
<span class="p_del">-	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_vmas(mm))</span>
<span class="p_add">+	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_task(tsk))</span>
 		schedule_timeout_idle(HZ/10);
 
 	/* Drop a reference taken by wake_oom_reaper */
<span class="p_del">-	mmdrop(mm);</span>
<span class="p_add">+	put_task_struct(tsk);</span>
 }
 
 static int oom_reaper(void *unused)
 {
 	while (true) {
<span class="p_del">-		struct mm_struct *mm;</span>
<span class="p_add">+		struct task_struct *tsk;</span>
 
 		wait_event_freezable(oom_reaper_wait,
<span class="p_del">-				     (mm = READ_ONCE(mm_to_reap)));</span>
<span class="p_del">-		oom_reap_vmas(mm);</span>
<span class="p_del">-		WRITE_ONCE(mm_to_reap, NULL);</span>
<span class="p_add">+				     (tsk = READ_ONCE(task_to_reap)));</span>
<span class="p_add">+		oom_reap_task(tsk);</span>
<span class="p_add">+		WRITE_ONCE(task_to_reap, NULL);</span>
 	}
 
 	return 0;
 }
 
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *tsk)</span>
 {
<span class="p_del">-	struct mm_struct *old_mm;</span>
<span class="p_add">+	struct task_struct *old_tsk;</span>
 
 	if (!oom_reaper_th)
 		return;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Pin the given mm. Use mm_count instead of mm_users because</span>
<span class="p_del">-	 * we do not want to delay the address space tear down.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	atomic_inc(&amp;mm-&gt;mm_count);</span>
<span class="p_add">+	get_task_struct(tsk);</span>
 
 	/*
 	 * Make sure that only a single mm is ever queued for the reaper
 	 * because multiple are not necessary and the operation might be
 	 * disruptive so better reduce it to the bare minimum.
 	 */
<span class="p_del">-	old_mm = cmpxchg(&amp;mm_to_reap, NULL, mm);</span>
<span class="p_del">-	if (!old_mm)</span>
<span class="p_add">+	old_tsk = cmpxchg(&amp;task_to_reap, NULL, tsk);</span>
<span class="p_add">+	if (!old_tsk)</span>
 		wake_up(&amp;oom_reaper_wait);
 	else
<span class="p_del">-		mmdrop(mm);</span>
<span class="p_add">+		put_task_struct(tsk);</span>
 }
 
 static int __init oom_init(void)
<span class="p_chunk">@@ -539,7 +561,7 @@</span> <span class="p_context"> static int __init oom_init(void)</span>
 }
 subsys_initcall(oom_init)
 #else
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *mm)</span>
 {
 }
 #endif
<span class="p_chunk">@@ -570,9 +592,9 @@</span> <span class="p_context"> void mark_oom_victim(struct task_struct *tsk)</span>
 /**
  * exit_oom_victim - note the exit of an OOM victim
  */
<span class="p_del">-void exit_oom_victim(void)</span>
<span class="p_add">+void exit_oom_victim(struct task_struct *tsk)</span>
 {
<span class="p_del">-	clear_thread_flag(TIF_MEMDIE);</span>
<span class="p_add">+	clear_tsk_thread_flag(tsk, TIF_MEMDIE);</span>
 
 	if (!atomic_dec_return(&amp;oom_victims))
 		wake_up_all(&amp;oom_victims_wait);
<span class="p_chunk">@@ -759,7 +781,7 @@</span> <span class="p_context"> void oom_kill_process(struct oom_control *oc, struct task_struct *p,</span>
 	rcu_read_unlock();
 
 	if (can_oom_reap)
<span class="p_del">-		wake_oom_reaper(mm);</span>
<span class="p_add">+		wake_oom_reaper(victim);</span>
 
 	mmdrop(mm);
 	put_task_struct(victim);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



