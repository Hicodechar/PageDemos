
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v4,2/9] mm/hugetlb: expose hugetlb fault mutex for use by fallocate - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v4,2/9] mm/hugetlb: expose hugetlb fault mutex for use by fallocate</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 11, 2015, 9:01 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1434056500-2434-3-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6592541/mbox/"
   >mbox</a>
|
   <a href="/patch/6592541/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6592541/">/patch/6592541/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 13FDD9F399
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:03:00 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id F0946203DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:02:58 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F02622026D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 11 Jun 2015 21:02:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755297AbbFKVCk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 11 Jun 2015 17:02:40 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:38976 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754861AbbFKVCZ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 11 Jun 2015 17:02:25 -0400
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t5BL1t2q015266
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Thu, 11 Jun 2015 21:01:55 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0021.oracle.com (8.13.8/8.13.8) with ESMTP id t5BL1s4u017854
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Thu, 11 Jun 2015 21:01:55 GMT
Received: from abhmp0007.oracle.com (abhmp0007.oracle.com [141.146.116.13])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id
	t5BL1sUH020334; Thu, 11 Jun 2015 21:01:54 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Thu, 11 Jun 2015 14:01:53 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC v4 PATCH 2/9] mm/hugetlb: expose hugetlb fault mutex for use
	by fallocate
Date: Thu, 11 Jun 2015 14:01:33 -0700
Message-Id: &lt;1434056500-2434-3-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1434056500-2434-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1434056500-2434-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 11, 2015, 9:01 p.m.</div>
<pre class="content">
hugetlb page faults are currently synchronized by the table of
mutexes (htlb_fault_mutex_table).  fallocate code will need to
synchronize with the page fault code when it allocates or
deletes pages.  Expose interfaces so that fallocate operations
can be synchronized with page faults.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 include/linux/hugetlb.h | 10 ++++++++++
 mm/hugetlb.c            | 20 ++++++++++++++++----
 2 files changed, 26 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=106071">Davidlohr Bueso</a> - June 11, 2015, 10:46 p.m.</div>
<pre class="content">
On Thu, 2015-06-11 at 14:01 -0700, Mike Kravetz wrote:
<span class="quote">&gt;  /* Forward declaration */</span>
<span class="quote">&gt;  static int hugetlb_acct_memory(struct hstate *h, long delta);</span>
<span class="quote">&gt; @@ -3324,7 +3324,8 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;  	unsigned long key[2];</span>
<span class="quote">&gt;  	u32 hash;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt; +	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="quote">&gt; +	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>

That !vma is icky, and really no need for it: hugetlbfs_fallocate(), for
example, already passes [pseudo]vma-&gt;vm_flags with VM_SHARED, and you
say it yourself in the comment. Do you see any reason why we cannot just
keep the vma-&gt;vm_flags &amp; VM_SHARED check?
<span class="quote">
&gt; +/*</span>
<span class="quote">&gt; + * Interface for use by hugetlbfs fallocate code.  Faults must be</span>
<span class="quote">&gt; + * synchronized with page adds or deletes by fallocate.  fallocate</span>
<span class="quote">&gt; + * only deals with shared mappings.  See also hugetlb_fault_mutex_lock</span>
<span class="quote">&gt; + * and hugetlb_fault_mutex_unlock.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt; +}</span>

It strikes me that this too should be static inlined. But I really
dislike the nil params thing, which should be addressed by my comment
above.

Thanks,
Davidlohr

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 11, 2015, 11:09 p.m.</div>
<pre class="content">
On 06/11/2015 03:46 PM, Davidlohr Bueso wrote:
<span class="quote">&gt; On Thu, 2015-06-11 at 14:01 -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt;   /* Forward declaration */</span>
<span class="quote">&gt;&gt;   static int hugetlb_acct_memory(struct hstate *h, long delta);</span>
<span class="quote">&gt;&gt; @@ -3324,7 +3324,8 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;   	unsigned long key[2];</span>
<span class="quote">&gt;&gt;   	u32 hash;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;&gt; +	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="quote">&gt;&gt; +	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; That !vma is icky, and really no need for it: hugetlbfs_fallocate(), for</span>
<span class="quote">&gt; example, already passes [pseudo]vma-&gt;vm_flags with VM_SHARED, and you</span>
<span class="quote">&gt; say it yourself in the comment. Do you see any reason why we cannot just</span>
<span class="quote">&gt; keep the vma-&gt;vm_flags &amp; VM_SHARED check?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * Interface for use by hugetlbfs fallocate code.  Faults must be</span>
<span class="quote">&gt;&gt; + * synchronized with page adds or deletes by fallocate.  fallocate</span>
<span class="quote">&gt;&gt; + * only deals with shared mappings.  See also hugetlb_fault_mutex_lock</span>
<span class="quote">&gt;&gt; + * and hugetlb_fault_mutex_unlock.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It strikes me that this too should be static inlined. But I really</span>
<span class="quote">&gt; dislike the nil params thing, which should be addressed by my comment</span>
<span class="quote">&gt; above.</span>

In the previous RFC, I was trying not to make all the fault mutex data
global (so it could be accessed outside hugetlb.c).  That was the
original reason for the wrapper interfaces.  That may just be too ugly,
and does not buy us much.

Now that the mutex table is global for inlining, I might as well make
fault_mutex_hash() global.  I can then get rid of the wrappers.  However,
I&#39;m guessing it would be a good idea to change the name(s) to something
hugetlb specific since they will be global.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 17, 2015, 10:05 p.m.</div>
<pre class="content">
On 06/11/2015 03:46 PM, Davidlohr Bueso wrote:
<span class="quote">&gt; On Thu, 2015-06-11 at 14:01 -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt;   /* Forward declaration */</span>
<span class="quote">&gt;&gt;   static int hugetlb_acct_memory(struct hstate *h, long delta);</span>
<span class="quote">&gt;&gt; @@ -3324,7 +3324,8 @@ static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
<span class="quote">&gt;&gt;   	unsigned long key[2];</span>
<span class="quote">&gt;&gt;   	u32 hash;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;&gt; +	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="quote">&gt;&gt; +	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; That !vma is icky, and really no need for it: hugetlbfs_fallocate(), for</span>
<span class="quote">&gt; example, already passes [pseudo]vma-&gt;vm_flags with VM_SHARED, and you</span>
<span class="quote">&gt; say it yourself in the comment. Do you see any reason why we cannot just</span>
<span class="quote">&gt; keep the vma-&gt;vm_flags &amp; VM_SHARED check?</span>
<span class="quote">&gt;</span>

Ah, I did not recall all the users of this code until I went to change
it. The other user is truncate_hugapages() which will now be used for
fallocate hole punch.  Truncate like fallocate is an inode operation
and there is no specific vma.  I can create a pseudo-vma here as well
just to pass the flag.  I guess that would at least be consistent with
the other user.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index 2050261..bbd072e 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -85,6 +85,16 @@</span> <span class="p_context"> int dequeue_hwpoisoned_huge_page(struct page *page);</span>
 bool isolate_huge_page(struct page *page, struct list_head *list);
 void putback_active_hugepage(struct page *page);
 void free_huge_page(struct page *page);
<span class="p_add">+u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx);</span>
<span class="p_add">+extern struct mutex *htlb_fault_mutex_table;</span>
<span class="p_add">+static inline void hugetlb_fault_mutex_lock(u32 hash)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void hugetlb_fault_mutex_unlock(u32 hash)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+}</span>
 
 #ifdef CONFIG_ARCH_WANT_HUGE_PMD_SHARE
 pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 3fc2359..f617cb6 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -64,7 +64,7 @@</span> <span class="p_context"> DEFINE_SPINLOCK(hugetlb_lock);</span>
  * prevent spurious OOMs when the hugepage pool is fully utilized.
  */
 static int num_fault_mutexes;
<span class="p_del">-static struct mutex *htlb_fault_mutex_table ____cacheline_aligned_in_smp;</span>
<span class="p_add">+struct mutex *htlb_fault_mutex_table ____cacheline_aligned_in_smp;</span>
 
 /* Forward declaration */
 static int hugetlb_acct_memory(struct hstate *h, long delta);
<span class="p_chunk">@@ -3324,7 +3324,8 @@</span> <span class="p_context"> static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 	unsigned long key[2];
 	u32 hash;
 
<span class="p_del">-	if (vma-&gt;vm_flags &amp; VM_SHARED) {</span>
<span class="p_add">+	/* !vma implies this was called from hugetlbfs fallocate code */</span>
<span class="p_add">+	if (!vma || vma-&gt;vm_flags &amp; VM_SHARED) {</span>
 		key[0] = (unsigned long) mapping;
 		key[1] = idx;
 	} else {
<span class="p_chunk">@@ -3350,6 +3351,17 @@</span> <span class="p_context"> static u32 fault_mutex_hash(struct hstate *h, struct mm_struct *mm,</span>
 }
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Interface for use by hugetlbfs fallocate code.  Faults must be</span>
<span class="p_add">+ * synchronized with page adds or deletes by fallocate.  fallocate</span>
<span class="p_add">+ * only deals with shared mappings.  See also hugetlb_fault_mutex_lock</span>
<span class="p_add">+ * and hugetlb_fault_mutex_unlock.</span>
<span class="p_add">+ */</span>
<span class="p_add">+u32 hugetlb_fault_mutex_shared_hash(struct address_space *mapping, pgoff_t idx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return fault_mutex_hash(NULL, NULL, NULL, mapping, idx, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,
 			unsigned long address, unsigned int flags)
 {
<span class="p_chunk">@@ -3390,7 +3402,7 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	 * the same page in the page cache.
 	 */
 	hash = fault_mutex_hash(h, mm, vma, mapping, idx, address);
<span class="p_del">-	mutex_lock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+	hugetlb_fault_mutex_lock(hash);</span>
 
 	entry = huge_ptep_get(ptep);
 	if (huge_pte_none(entry)) {
<span class="p_chunk">@@ -3473,7 +3485,7 @@</span> <span class="p_context"> out_ptl:</span>
 		put_page(pagecache_page);
 	}
 out_mutex:
<span class="p_del">-	mutex_unlock(&amp;htlb_fault_mutex_table[hash]);</span>
<span class="p_add">+	hugetlb_fault_mutex_unlock(hash);</span>
 	/*
 	 * Generally it&#39;s safe to hold refcount during waiting page lock. But
 	 * here we just wait to defer the next page fault to avoid busy loop and

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



