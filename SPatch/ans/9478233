
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,04/14] sparc64: load shared id into context register 1 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,04/14] sparc64: load shared id into context register 1</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 16, 2016, 6:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1481913337-9331-5-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9478233/mbox/"
   >mbox</a>
|
   <a href="/patch/9478233/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9478233/">/patch/9478233/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	78B3C601C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 18:39:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D35728780
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 18:39:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6082C28783; Fri, 16 Dec 2016 18:39:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9763928780
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Dec 2016 18:39:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758480AbcLPSjq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Dec 2016 13:39:46 -0500
Received: from userp1040.oracle.com ([156.151.31.81]:44599 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1758353AbcLPSgJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Dec 2016 13:36:09 -0500
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id uBGIZxFL029801
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Fri, 16 Dec 2016 18:35:59 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by aserv0021.oracle.com (8.13.8/8.14.4) with ESMTP id
	uBGIZxPn021701
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Fri, 16 Dec 2016 18:35:59 GMT
Received: from abhmp0002.oracle.com (abhmp0002.oracle.com [141.146.116.8])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id uBGIZtx9025341; 
	Fri, 16 Dec 2016 18:35:55 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Fri, 16 Dec 2016 10:35:54 -0800
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: sparclinux@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Cc: &quot;David S . Miller&quot; &lt;davem@davemloft.net&gt;,
	Bob Picco &lt;bob.picco@oracle.com&gt;, Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	Vijay Kumar &lt;vijay.ac.kumar@oracle.com&gt;,
	Julian Calaby &lt;julian.calaby@gmail.com&gt;,
	Adam Buchbinder &lt;adam.buchbinder@gmail.com&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 04/14] sparc64: load shared id into context register 1
Date: Fri, 16 Dec 2016 10:35:27 -0800
Message-Id: &lt;1481913337-9331-5-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1481913337-9331-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1481913337-9331-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 16, 2016, 6:35 p.m.</div>
<pre class="content">
In current code, only context ID register 0 is set and used by the MMU.
On sun4v platforms that support MMU shared context, there is an additional
context ID register: specifically context register 1.  When searching
the TLB, the MMU will find a match if the virtual address matches and
the ID contained in context register 0 -OR- context register 1 matches.

Load the shared context ID into context ID register 1.  Care must be
taken to load register 1 after register 0, as loading register 0
overwrites both register 0 and 1.  Modify code loading register 0 to
also load register one if applicable.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 arch/sparc/include/asm/mmu_context_64.h | 37 +++++++++++++++++--
 arch/sparc/include/asm/spitfire.h       |  2 ++
 arch/sparc/kernel/fpu_traps.S           | 63 +++++++++++++++++++++++++++++++++
 arch/sparc/kernel/rtrap_64.S            | 20 +++++++++++
 arch/sparc/kernel/trampoline_64.S       | 20 +++++++++++
 5 files changed, 140 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8352">Sam Ravnborg</a> - Dec. 17, 2016, 7:45 a.m.</div>
<pre class="content">
Hi Mike
<span class="quote">
&gt; diff --git a/arch/sparc/kernel/fpu_traps.S b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; index 336d275..f85a034 100644</span>
<span class="quote">&gt; --- a/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; +++ b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; @@ -73,6 +73,16 @@ do_fpdis:</span>
<span class="quote">&gt;  	ldxa		[%g3] ASI_MMU, %g5</span>
<span class="quote">&gt;  	.previous</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +661:	nop</span>
<span class="quote">&gt; +	nop</span>
<span class="quote">&gt; +	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="quote">&gt; +	.word		661b</span>
<span class="quote">&gt; +	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="quote">&gt; +	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="quote">&gt; +	.previous</span>
<span class="quote">&gt; +	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="quote">&gt; +	mov		SECONDARY_CONTEXT, %g3</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	sethi		%hi(sparc64_kern_sec_context), %g2</span>

You missed the second instruction to patch with here.
This bug repeats itself further down.

Just noted while briefly reading the code - did not really follow the code.

	Sam
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - Dec. 18, 2016, 3:14 a.m.</div>
<pre class="content">
<span class="from">From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
Date: Fri, 16 Dec 2016 10:35:27 -0800
<span class="quote">
&gt; In current code, only context ID register 0 is set and used by the MMU.</span>
<span class="quote">&gt; On sun4v platforms that support MMU shared context, there is an additional</span>
<span class="quote">&gt; context ID register: specifically context register 1.  When searching</span>
<span class="quote">&gt; the TLB, the MMU will find a match if the virtual address matches and</span>
<span class="quote">&gt; the ID contained in context register 0 -OR- context register 1 matches.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Load the shared context ID into context ID register 1.  Care must be</span>
<span class="quote">&gt; taken to load register 1 after register 0, as loading register 0</span>
<span class="quote">&gt; overwrites both register 0 and 1.  Modify code loading register 0 to</span>
<span class="quote">&gt; also load register one if applicable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

You can&#39;t make these register accesses if the feature isn&#39;t being
used.

Considering the percentage of applications which will actually use
this thing, incuring the overhead of even loading the shared context
register is simply unacceptable.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 19, 2016, 12:06 a.m.</div>
<pre class="content">
On 12/17/2016 07:14 PM, David Miller wrote:
<span class="quote">&gt; From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; Date: Fri, 16 Dec 2016 10:35:27 -0800</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; In current code, only context ID register 0 is set and used by the MMU.</span>
<span class="quote">&gt;&gt; On sun4v platforms that support MMU shared context, there is an additional</span>
<span class="quote">&gt;&gt; context ID register: specifically context register 1.  When searching</span>
<span class="quote">&gt;&gt; the TLB, the MMU will find a match if the virtual address matches and</span>
<span class="quote">&gt;&gt; the ID contained in context register 0 -OR- context register 1 matches.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Load the shared context ID into context ID register 1.  Care must be</span>
<span class="quote">&gt;&gt; taken to load register 1 after register 0, as loading register 0</span>
<span class="quote">&gt;&gt; overwrites both register 0 and 1.  Modify code loading register 0 to</span>
<span class="quote">&gt;&gt; also load register one if applicable.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You can&#39;t make these register accesses if the feature isn&#39;t being</span>
<span class="quote">&gt; used.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Considering the percentage of applications which will actually use</span>
<span class="quote">&gt; this thing, incuring the overhead of even loading the shared context</span>
<span class="quote">&gt; register is simply unacceptable.</span>

Ok, let me try to find a way to eliminate these loads unless the application
is using shared context.

Part of the issue is a &#39;backwards compatibility&#39; feature of the processor
which loads/overwrites register 1 every time register 0 is loaded.  Somewhere
in the evolution of the processor, a feature was added so that register 0
could be loaded without overwriting register 1.  That could be used to
eliminate the extra load in some/many cases.  But, that would likely lead
to more runtime kernel patching based on processor level.  And, I don&#39;t
really want to add more of that if possible.  Or, perhaps we only enable
the shared context ID feature on processors which have the ability to work
around the backwards compatibility feature.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 19, 2016, 12:22 a.m.</div>
<pre class="content">
On 12/16/2016 11:45 PM, Sam Ravnborg wrote:
<span class="quote">&gt; Hi Mike</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/sparc/kernel/fpu_traps.S b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt;&gt; index 336d275..f85a034 100644</span>
<span class="quote">&gt;&gt; --- a/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt;&gt; +++ b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt;&gt; @@ -73,6 +73,16 @@ do_fpdis:</span>
<span class="quote">&gt;&gt;  	ldxa		[%g3] ASI_MMU, %g5</span>
<span class="quote">&gt;&gt;  	.previous</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +661:	nop</span>
<span class="quote">&gt;&gt; +	nop</span>
<span class="quote">&gt;&gt; +	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="quote">&gt;&gt; +	.word		661b</span>
<span class="quote">&gt;&gt; +	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="quote">&gt;&gt; +	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="quote">&gt;&gt; +	.previous</span>
<span class="quote">&gt;&gt; +	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="quote">&gt;&gt; +	mov		SECONDARY_CONTEXT, %g3</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	sethi		%hi(sparc64_kern_sec_context), %g2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You missed the second instruction to patch with here.</span>
<span class="quote">&gt; This bug repeats itself further down.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just noted while briefly reading the code - did not really follow the code.</span>

Hi Sam,

This is my first sparc assembly code, so I could certainly have this
wrong.  The code I was trying to write has the two nop instructions,
that get patched with the mov and ldxa on sun4v.  Certainly, this is
not elegant.  And, the formatting may lead to some confusion.

Did you perhaps think the mov instruction after the comment was for
patching?  I am just trying to understand your comment.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - Dec. 20, 2016, 6:33 p.m.</div>
<pre class="content">
<span class="from">From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
Date: Sun, 18 Dec 2016 16:06:01 -0800
<span class="quote">
&gt; Ok, let me try to find a way to eliminate these loads unless the application</span>
<span class="quote">&gt; is using shared context.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Part of the issue is a &#39;backwards compatibility&#39; feature of the processor</span>
<span class="quote">&gt; which loads/overwrites register 1 every time register 0 is loaded.  Somewhere</span>
<span class="quote">&gt; in the evolution of the processor, a feature was added so that register 0</span>
<span class="quote">&gt; could be loaded without overwriting register 1.  That could be used to</span>
<span class="quote">&gt; eliminate the extra load in some/many cases.  But, that would likely lead</span>
<span class="quote">&gt; to more runtime kernel patching based on processor level.  And, I don&#39;t</span>
<span class="quote">&gt; really want to add more of that if possible.  Or, perhaps we only enable</span>
<span class="quote">&gt; the shared context ID feature on processors which have the ability to work</span>
<span class="quote">&gt; around the backwards compatibility feature.</span>

Until the first process uses shared mappings, you should not touch the
context 1 register in any way for any reason at all.

And even once a process _does_ use shared mappings, you only need to
access the context 1 register in 2 cases:

1) TLB processing for the processes using shared mappings.

2) Context switch MMU state handling, where either the previous or
   next process is using shared mappings.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 20, 2016, 8:27 p.m.</div>
<pre class="content">
On 12/20/2016 10:33 AM, David Miller wrote:
<span class="quote">&gt; From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; Date: Sun, 18 Dec 2016 16:06:01 -0800</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; Ok, let me try to find a way to eliminate these loads unless the application</span>
<span class="quote">&gt;&gt; is using shared context.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Part of the issue is a &#39;backwards compatibility&#39; feature of the processor</span>
<span class="quote">&gt;&gt; which loads/overwrites register 1 every time register 0 is loaded.  Somewhere</span>
<span class="quote">&gt;&gt; in the evolution of the processor, a feature was added so that register 0</span>
<span class="quote">&gt;&gt; could be loaded without overwriting register 1.  That could be used to</span>
<span class="quote">&gt;&gt; eliminate the extra load in some/many cases.  But, that would likely lead</span>
<span class="quote">&gt;&gt; to more runtime kernel patching based on processor level.  And, I don&#39;t</span>
<span class="quote">&gt;&gt; really want to add more of that if possible.  Or, perhaps we only enable</span>
<span class="quote">&gt;&gt; the shared context ID feature on processors which have the ability to work</span>
<span class="quote">&gt;&gt; around the backwards compatibility feature.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Until the first process uses shared mappings, you should not touch the</span>
<span class="quote">&gt; context 1 register in any way for any reason at all.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And even once a process _does_ use shared mappings, you only need to</span>
<span class="quote">&gt; access the context 1 register in 2 cases:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 1) TLB processing for the processes using shared mappings.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 2) Context switch MMU state handling, where either the previous or</span>
<span class="quote">&gt;    next process is using shared mappings.</span>

I agree.

But, we still need to address the issue of existing code that is
overwriting context register 1 today.  Due to that backwards
compatibility feature, code like:

	mov	SECONDARY_CONTEXT, %g3
	stxa	%g2, [%g3] ASI_DMMU

will store not only to register 0, but register 1 as well.

In this RFC, I used an ugly brute force method of always restoring
register 1 after storing register 0 to make sure any unique value
in register 1 was preserved.  I agree this is not acceptable and needs
to be fixed.  We could check if register 1 is in use and only do the
save/restore in that case.  But, that is still an additional check.

The Sparc M7 processor has new ASIs to handle this better:
ASI	ASI Name	R/W	VA 	Per Strand	Description
0x21	ASI_MMU 	RW	0x28 	Y 		I/DMMUPrimary Context
							register 0 (no Primary
							Context register 1
							update)
0x21	ASI_MMU		RW	0x30	Y 		DMMUSecondary Context
							register 0 (no Secondary
							Context register 1
							update)
More details at,
http://www.oracle.com/technetwork/server-storage/sun-sparc-enterprise/documentation/sparc-architecture-supplement-3093429.pdf

Of course, this could only be used on processors where the new ASIs are
available.

Still need to think about the best way to handle this.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8352">Sam Ravnborg</a> - Dec. 21, 2016, 6:16 p.m.</div>
<pre class="content">
On Sun, Dec 18, 2016 at 04:22:31PM -0800, Mike Kravetz wrote:
<span class="quote">&gt; On 12/16/2016 11:45 PM, Sam Ravnborg wrote:</span>
<span class="quote">&gt; &gt; Hi Mike</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/sparc/kernel/fpu_traps.S b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; &gt;&gt; index 336d275..f85a034 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/sparc/kernel/fpu_traps.S</span>
<span class="quote">&gt; &gt;&gt; @@ -73,6 +73,16 @@ do_fpdis:</span>
<span class="quote">&gt; &gt;&gt;  	ldxa		[%g3] ASI_MMU, %g5</span>
<span class="quote">&gt; &gt;&gt;  	.previous</span>
<span class="quote">&gt; &gt;&gt;  </span>
<span class="quote">&gt; &gt;&gt; +661:	nop</span>
<span class="quote">&gt; &gt;&gt; +	nop</span>
<span class="quote">&gt; &gt;&gt; +	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="quote">&gt; &gt;&gt; +	.word		661b</span>
<span class="quote">&gt; &gt;&gt; +	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="quote">&gt; &gt;&gt; +	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="quote">&gt; &gt;&gt; +	.previous</span>
<span class="quote">&gt; &gt;&gt; +	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="quote">&gt; &gt;&gt; +	mov		SECONDARY_CONTEXT, %g3</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt;  	sethi		%hi(sparc64_kern_sec_context), %g2</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; You missed the second instruction to patch with here.</span>
<span class="quote">&gt; &gt; This bug repeats itself further down.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Just noted while briefly reading the code - did not really follow the code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hi Sam,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is my first sparc assembly code, so I could certainly have this</span>
<span class="quote">&gt; wrong.</span>

Nope. I was to quick in my reading and in the reply.
when I looked at this with fresh eyes it looked perfectly OK.

That is to say - the patching part. I did not follow the code logic.

	Sam
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8352">Sam Ravnborg</a> - Dec. 21, 2016, 6:17 p.m.</div>
<pre class="content">
Hi Mike.
<span class="quote">
&gt; Or, perhaps we only enable</span>
<span class="quote">&gt; the shared context ID feature on processors which have the ability to work</span>
<span class="quote">&gt; around the backwards compatibility feature.</span>

Start out like this, and then see if it is really needed with the older processors.
This should keep the code logic simpler - which is always good for this complicated stuff.

	Sam
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/mmu_context_64.h b/arch/sparc/include/asm/mmu_context_64.h</span>
<span class="p_header">index acaea6d..84268df 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/mmu_context_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/mmu_context_64.h</span>
<span class="p_chunk">@@ -61,8 +61,11 @@</span> <span class="p_context"> void smp_tsb_sync(struct mm_struct *mm);</span>
 #define smp_tsb_sync(__mm) do { } while (0)
 #endif
 
<span class="p_del">-/* Set MMU context in the actual hardware. */</span>
<span class="p_del">-#define load_secondary_context(__mm) \</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Set MMU context in the actual hardware.  Secondary context register</span>
<span class="p_add">+ * zero is loaded with task specific context.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define load_secondary_context_0(__mm) \</span>
 	__asm__ __volatile__( \
 	&quot;\n661:	stxa		%0, [%1] %2\n&quot; \
 	&quot;	.section	.sun4v_1insn_patch, \&quot;ax\&quot;\n&quot; \
<span class="p_chunk">@@ -74,6 +77,36 @@</span> <span class="p_context"> void smp_tsb_sync(struct mm_struct *mm);</span>
 	: &quot;r&quot; (CTX_HWBITS((__mm)-&gt;context)), \
 	  &quot;r&quot; (SECONDARY_CONTEXT), &quot;i&quot; (ASI_DMMU), &quot;i&quot; (ASI_MMU))
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Secondary context register one is loaded with shared context if</span>
<span class="p_add">+ * it exists for the task.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define load_secondary_context_1(__mm) \</span>
<span class="p_add">+	__asm__ __volatile__( \</span>
<span class="p_add">+	&quot;\n661: stxa		%0, [%1] %2\n&quot; \</span>
<span class="p_add">+	&quot;	.section	.sun4v_1insn_patch, \&quot;ax\&quot;\n&quot; \</span>
<span class="p_add">+	&quot;	.word		661b\n&quot; \</span>
<span class="p_add">+	&quot;	stxa		%0, [%1] %3\n&quot; \</span>
<span class="p_add">+	&quot;	.previous\n&quot; \</span>
<span class="p_add">+	&quot;	flush		%%g6\n&quot; \</span>
<span class="p_add">+	: /* No outputs */ \</span>
<span class="p_add">+	: &quot;r&quot; (SHARED_CTX_HWBITS((__mm)-&gt;context)), \</span>
<span class="p_add">+	  &quot;r&quot; (SECONDARY_CONTEXT_R1), &quot;i&quot; (ASI_DMMU), &quot;i&quot; (ASI_MMU))</span>
<span class="p_add">+</span>
<span class="p_add">+#if defined(CONFIG_SHARED_MMU_CTX)</span>
<span class="p_add">+#define load_secondary_context(__mm) \</span>
<span class="p_add">+	do { \</span>
<span class="p_add">+		load_secondary_context_0(__mm); \</span>
<span class="p_add">+		if ((__mm)-&gt;context.shared_ctx) \</span>
<span class="p_add">+			load_secondary_context_1(__mm); \</span>
<span class="p_add">+	} while (0)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define load_secondary_context(__mm) \</span>
<span class="p_add">+	do { \</span>
<span class="p_add">+		load_secondary_context_0(__mm); \</span>
<span class="p_add">+	} while (0)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 void __flush_tlb_mm(unsigned long, unsigned long);
 
 /* Switch the current MM context. */
<span class="p_header">diff --git a/arch/sparc/include/asm/spitfire.h b/arch/sparc/include/asm/spitfire.h</span>
<span class="p_header">index 1d8321c..1fa4594 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/spitfire.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/spitfire.h</span>
<span class="p_chunk">@@ -33,6 +33,8 @@</span> <span class="p_context"></span>
 #define DMMU_SFAR		0x0000000000000020
 #define VIRT_WATCHPOINT		0x0000000000000038
 #define PHYS_WATCHPOINT		0x0000000000000040
<span class="p_add">+#define	PRIMARY_CONTEXT_R1	0x0000000000000108</span>
<span class="p_add">+#define	SECONDARY_CONTEXT_R1	0x0000000000000110</span>
 
 #define SPITFIRE_HIGHEST_LOCKED_TLBENT	(64 - 1)
 #define CHEETAH_HIGHEST_LOCKED_TLBENT	(16 - 1)
<span class="p_header">diff --git a/arch/sparc/kernel/fpu_traps.S b/arch/sparc/kernel/fpu_traps.S</span>
<span class="p_header">index 336d275..f85a034 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/fpu_traps.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/fpu_traps.S</span>
<span class="p_chunk">@@ -73,6 +73,16 @@</span> <span class="p_context"> do_fpdis:</span>
 	ldxa		[%g3] ASI_MMU, %g5
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="p_add">+	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT, %g3</span>
<span class="p_add">+</span>
 	sethi		%hi(sparc64_kern_sec_context), %g2
 	ldx		[%g2 + %lo(sparc64_kern_sec_context)], %g2
 
<span class="p_chunk">@@ -114,6 +124,16 @@</span> <span class="p_context"> do_fpdis:</span>
 	ldxa		[%g3] ASI_MMU, %g5
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="p_add">+	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT, %g3</span>
<span class="p_add">+</span>
 	add		%g6, TI_FPREGS, %g1
 	sethi		%hi(sparc64_kern_sec_context), %g2
 	ldx		[%g2 + %lo(sparc64_kern_sec_context)], %g2
<span class="p_chunk">@@ -155,6 +175,16 @@</span> <span class="p_context"> do_fpdis:</span>
 	ldxa		[%g3] ASI_MMU, %g5
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="p_add">+	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT, %g3</span>
<span class="p_add">+</span>
 	sethi		%hi(sparc64_kern_sec_context), %g2
 	ldx		[%g2 + %lo(sparc64_kern_sec_context)], %g2
 
<span class="p_chunk">@@ -181,11 +211,24 @@</span> <span class="p_context"> fpdis_exit:</span>
 	stxa		%g5, [%g3] ASI_MMU
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="p_add">+	stxa		%g4, [%g3] ASI_MMU</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+</span>
 	membar		#Sync
 fpdis_exit2:
 	wr		%g7, 0, %gsr
 	ldx		[%g6 + TI_XFSR], %fsr
 	rdpr		%tstate, %g3
<span class="p_add">+661:	nop</span>
<span class="p_add">+	.section	.sun4v_1insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	sethi		%hi(TSTATE_PEF), %g4</span>
<span class="p_add">+	.previous</span>
 	or		%g3, %g4, %g3		! anal...
 	wrpr		%g3, %tstate
 	wr		%g0, FPRS_FEF, %fprs	! clean DU/DL bits
<span class="p_chunk">@@ -347,6 +390,16 @@</span> <span class="p_context"> do_fptrap_after_fsr:</span>
 	ldxa		[%g3] ASI_MMU, %g5
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g3</span>
<span class="p_add">+	ldxa		[%g3] ASI_MMU, %g4</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT, %g3</span>
<span class="p_add">+</span>
 	sethi		%hi(sparc64_kern_sec_context), %g2
 	ldx		[%g2 + %lo(sparc64_kern_sec_context)], %g2
 
<span class="p_chunk">@@ -377,7 +430,17 @@</span> <span class="p_context"> do_fptrap_after_fsr:</span>
 	stxa		%g5, [%g1] ASI_MMU
 	.previous
 
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g1</span>
<span class="p_add">+	stxa		%g4, [%g1] ASI_MMU</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+</span>
 	membar		#Sync
<span class="p_add">+	/* Unnecessary on sun4u and pre-Niagara 2 sun4v */</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT, %g1</span>
 	ba,pt		%xcc, etrap
 	 wr		%g0, 0, %fprs
 	.size		do_fptrap,.-do_fptrap
<span class="p_header">diff --git a/arch/sparc/kernel/rtrap_64.S b/arch/sparc/kernel/rtrap_64.S</span>
<span class="p_header">index 216948c..d409d84 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/rtrap_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/rtrap_64.S</span>
<span class="p_chunk">@@ -202,6 +202,7 @@</span> <span class="p_context"> rt_continue:	ldx			[%sp + PTREGS_OFF + PT_V9_G1], %g1</span>
 		brnz,pn			%l3, kern_rtt
 		 mov			PRIMARY_CONTEXT, %l7
 
<span class="p_add">+		/* Get value from SECONDARY_CONTEXT register */</span>
 661:		ldxa			[%l7 + %l7] ASI_DMMU, %l0
 		.section		.sun4v_1insn_patch, &quot;ax&quot;
 		.word			661b
<span class="p_chunk">@@ -212,12 +213,31 @@</span> <span class="p_context"> rt_continue:	ldx			[%sp + PTREGS_OFF + PT_V9_G1], %g1</span>
 		ldx			[%l1 + %lo(sparc64_kern_pri_nuc_bits)], %l1
 		or			%l0, %l1, %l0
 
<span class="p_add">+		/* and, put into PRIMARY_CONTEXT register */</span>
 661:		stxa			%l0, [%l7] ASI_DMMU
 		.section		.sun4v_1insn_patch, &quot;ax&quot;
 		.word			661b
 		stxa			%l0, [%l7] ASI_MMU
 		.previous
 
<span class="p_add">+		/* Get value from SECONDARY_CONTEXT_R1 register */</span>
<span class="p_add">+661:		nop</span>
<span class="p_add">+		nop</span>
<span class="p_add">+		.section		.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+		.word			661b</span>
<span class="p_add">+		mov			SECONDARY_CONTEXT_R1, %l7</span>
<span class="p_add">+		ldxa			[%l7] ASI_MMU, %l0</span>
<span class="p_add">+		.previous</span>
<span class="p_add">+</span>
<span class="p_add">+		/* and, put into PRIMARY_CONTEXT_R1 register */</span>
<span class="p_add">+661:		nop</span>
<span class="p_add">+		nop</span>
<span class="p_add">+		.section		.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+		.word			661b</span>
<span class="p_add">+		mov			PRIMARY_CONTEXT_R1, %l7</span>
<span class="p_add">+		stxa			%l0, [%l7] ASI_MMU</span>
<span class="p_add">+		.previous</span>
<span class="p_add">+</span>
 		sethi			%hi(KERNBASE), %l7
 		flush			%l7
 		rdpr			%wstate, %l1
<span class="p_header">diff --git a/arch/sparc/kernel/trampoline_64.S b/arch/sparc/kernel/trampoline_64.S</span>
<span class="p_header">index 88ede1d..7c4ab3b 100644</span>
<span class="p_header">--- a/arch/sparc/kernel/trampoline_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/trampoline_64.S</span>
<span class="p_chunk">@@ -260,6 +260,16 @@</span> <span class="p_context"> after_lock_tlb:</span>
 	stxa		%g0, [%g7] ASI_MMU
 	.previous
 
<span class="p_add">+	/* Save SECONDARY_CONTEXT_R1, membar should be part of patch */</span>
<span class="p_add">+	membar		#Sync</span>
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g7</span>
<span class="p_add">+	ldxa		[%g7] ASI_MMU, %g1</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+</span>
 	membar		#Sync
 	mov		SECONDARY_CONTEXT, %g7
 
<span class="p_chunk">@@ -269,6 +279,16 @@</span> <span class="p_context"> after_lock_tlb:</span>
 	stxa		%g0, [%g7] ASI_MMU
 	.previous
 
<span class="p_add">+	/* Restore SECONDARY_CONTEXT_R1, membar should be part of patch */</span>
<span class="p_add">+	membar		#Sync</span>
<span class="p_add">+661:	nop</span>
<span class="p_add">+	nop</span>
<span class="p_add">+	.section	.sun4v_2insn_patch, &quot;ax&quot;</span>
<span class="p_add">+	.word		661b</span>
<span class="p_add">+	mov		SECONDARY_CONTEXT_R1, %g7</span>
<span class="p_add">+	stxa		%g1, [%g7] ASI_MMU</span>
<span class="p_add">+	.previous</span>
<span class="p_add">+</span>
 	membar		#Sync
 
 	/* Everything we do here, until we properly take over the

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



