
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4] selftest/vm: Move the 128 TB mmap boundary test to the generic VM directory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4] selftest/vm: Move the 128 TB mmap boundary test to the generic VM directory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 8, 2018, 4:14 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180108161435.e3jjrttk57lib63a@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10149949/mbox/"
   >mbox</a>
|
   <a href="/patch/10149949/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10149949/">/patch/10149949/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DC467601BE for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  8 Jan 2018 16:14:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E272B2040D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  8 Jan 2018 16:14:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D6EDB2838B; Mon,  8 Jan 2018 16:14:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.1 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	FSL_HELO_FAKE, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ABB9C2040D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  8 Jan 2018 16:14:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934637AbeAHQOl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 8 Jan 2018 11:14:41 -0500
Received: from mail-wm0-f66.google.com ([74.125.82.66]:42506 &quot;EHLO
	mail-wm0-f66.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756259AbeAHQOj (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 8 Jan 2018 11:14:39 -0500
Received: by mail-wm0-f66.google.com with SMTP id b141so15232636wme.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 08 Jan 2018 08:14:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=SIEQJxlV6kS3BNexGf2zK19GZt9I8USzW+nrdH+YmRw=;
	b=ithcgzV/P8i6IS+RVcYYEYnYKUremqXIp+iA6/s5K4RT50l4IgrW+5NUL6KCmQcu86
	6gJJzZtJSEFhR/I2K1DiT1sl2ekpkZikz7nroiq3dt6Dp0hWdDRUreNB9h2oQbPBHKPW
	oLPy4W99b3/GMVAdPzdQVhxozTKqlMeIqWr6K/RV9mHcLWWctxAtDls5gPLHXOpcCBzg
	587Pg36Wk1hF8Cb6yQoquIjwby1/uFtyBJGPvXGNQGFihrhExezp6nEaLlLrK6mgKmM3
	Q2j6KUxVg9Bh5M7MoiPWXm8tbxomfzVGrxEQ99E6vH70vOfJ/GhaBK+Cnms8FOq2nw8B
	62Ng==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:references:mime-version:content-disposition:in-reply-to:user-agent; 
	bh=SIEQJxlV6kS3BNexGf2zK19GZt9I8USzW+nrdH+YmRw=;
	b=l/uetHiFw9ZShwz/qA7Kf7uIyJ1YqjBUtgJna/DfUiyssJGd5RwPdVkupsQMEWl/ex
	ZKbBdUKptlJwoqpJymSckahhDwbOq5tTAh9B+RmExS6eDKEoNexpvnF/d3KDHSet/UYB
	XQJg4h3V2kcoCHtSqXY24RLcDi0ZBEOxHH3ReEGR1u1iIqucZihfLImTh8zu5hKpz7pi
	1lEUVJGlnL65IFsAtcrk+GBcFC89d0BXF+NkwY/bMK4jagoplVFl7aZerMN2kxnoaDvF
	i3nredbIGuPNzCTH1nnGumyXOzDW/ENeW3QIVV5/o0KlPKmmghqwGtS7dkO2eqoDtxBF
	pmIg==
X-Gm-Message-State: AKGB3mIZM6LKY7JOhIP6Bbr6jX0qrrTYqUvGEu55AtYX8qtUcqVaLXtc
	Sn+BnBwlnjSRCVjqVrcmYV0=
X-Google-Smtp-Source: ACJfBovMDnV4Asv1to33y5CraufiZzIn1KI+lakFzyk66ZJe5vKwH81Y/FsgRb+R4kcX3HEAEzHgBg==
X-Received: by 10.28.135.142 with SMTP id j136mr8629970wmd.132.1515428078067;
	Mon, 08 Jan 2018 08:14:38 -0800 (PST)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	j125sm13244710wmd.24.2018.01.08.08.14.37
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Mon, 08 Jan 2018 08:14:37 -0800 (PST)
Date: Mon, 8 Jan 2018 17:14:35 +0100
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: akpm@linux-foundation.org,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH v4] selftest/vm: Move the 128 TB mmap boundary test to the
	generic VM directory
Message-ID: &lt;20180108161435.e3jjrttk57lib63a@gmail.com&gt;
References: &lt;20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Jan. 8, 2018, 4:14 p.m.</div>
<pre class="content">
* Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt; wrote:
<span class="quote">
&gt; Architectures like ppc64 do support mmap hint addr based large address space</span>
<span class="quote">&gt; selection. This test can be run on those architectures too. Move the test to</span>
<span class="quote">&gt; selftest/vm so that other archs can use the same.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We also add a few new test scenarios in this patch. We do test few boundary</span>
<span class="quote">&gt; condition before we do a high address mmap. ppc64 use the addr limit to validate</span>
<span class="quote">&gt; addr in the fault path. We had bugs in this area w.r.t slb fault handling</span>
<span class="quote">&gt; before we updated the addr limit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We also touch the allocated space to make sure we don&#39;t have any bugs in the</span>
<span class="quote">&gt; fault handling path.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changes from V2:</span>
<span class="quote">&gt; * Rebase on top of -tip tree.</span>
<span class="quote">&gt; * update the correct license</span>
<span class="quote">&gt; * use memset to touch the full mmap range.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  tools/testing/selftests/vm/Makefile         |   1 +</span>
<span class="quote">&gt;  tools/testing/selftests/vm/run_vmtests      |  11 ++</span>
<span class="quote">&gt;  tools/testing/selftests/vm/va_128TBswitch.c | 297 ++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  tools/testing/selftests/x86/5lvl.c          | 177 -----------------</span>
<span class="quote">&gt;  4 files changed, 309 insertions(+), 177 deletions(-)</span>
<span class="quote">&gt;  create mode 100644 tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="quote">&gt;  delete mode 100644 tools/testing/selftests/x86/5lvl.c</span>

This will now apply (almost) cleanly to Linus&#39;s latest tree - I fixed up a trivial 
conflict in selftests/vm/Makefile.

Note that I also improved the changelog.

Note #2: I&#39;d suggest this patch to be split into two patches:

 - patch 1 moves the testcase to vm/selftests
 - patch 2 does all the additional improvements

because this way all the deltas will be much easier to see and review.

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176903">Philippe Ombredanne</a> - Jan. 8, 2018, 4:51 p.m.</div>
<pre class="content">
Anesh,

On Mon, Jan 8, 2018 at 5:14 PM, Ingo Molnar &lt;mingo@kernel.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; * Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt; wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Architectures like ppc64 do support mmap hint addr based large address space</span>
<span class="quote">&gt;&gt; selection. This test can be run on those architectures too. Move the test to</span>
<span class="quote">&gt;&gt; selftest/vm so that other archs can use the same.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; We also add a few new test scenarios in this patch. We do test few boundary</span>
<span class="quote">&gt;&gt; condition before we do a high address mmap. ppc64 use the addr limit to validate</span>
<span class="quote">&gt;&gt; addr in the fault path. We had bugs in this area w.r.t slb fault handling</span>
<span class="quote">&gt;&gt; before we updated the addr limit.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; We also touch the allocated space to make sure we don&#39;t have any bugs in the</span>
<span class="quote">&gt;&gt; fault handling path.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>

&lt;snip&gt;
<span class="quote">
&gt; --- /dev/null</span>
<span class="quote">&gt; +++ b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="quote">&gt; @@ -0,0 +1,297 @@</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Authors: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; + * Authors: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * This program is free software; you can redistribute it and/or modify</span>
<span class="quote">&gt; + * it under the terms of the GNU General Public License, version 2, as</span>
<span class="quote">&gt; + * published by the Free Software Foundation.</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; + * This program is distributed in the hope that it would be useful, but</span>
<span class="quote">&gt; + * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="quote">&gt; + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + */</span>

Would you mind using an SPDX tag instead of this fine legalese?
See Thomas doc [1] for details.
Thanks!

[1] https://lkml.org/lkml/2017/12/28/323
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
=================&gt;
From 4ce574423c9ec9638ac6c9830d8623a6bdcb1143 Mon Sep 17 00:00:00 2001
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Date: Thu, 23 Nov 2017 22:22:26 +0530
Subject: [PATCH] selftest/vm: Move the 128 TB mmap boundary test to the generic VM directory

Architectures like PPC64 support mmap hint address based large address space
selection. This test can be run on those architectures too. Move the test from
the x86 selftests to selftest/vm so that other architectures can use it too.

We also add a few new test scenarios in this patch. We do test a few boundary
conditions before we do a high address mmap. PPC64 uses the address limit to
validate the address in the fault path. We had bugs in this area w.r.t SLB fault
handling before we updated the addess limit.

We also touch the allocated space to make sure we don&#39;t have any bugs in the
fault handling path.

Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Kirill A . Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: akpm@linux-foundation.org
Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com
Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;
<span class="p_del">---</span>
 tools/testing/selftests/vm/Makefile         |   1 +
 tools/testing/selftests/vm/run_vmtests      |  11 ++
 tools/testing/selftests/vm/va_128TBswitch.c | 297 ++++++++++++++++++++++++++++
 tools/testing/selftests/x86/5lvl.c          | 177 -----------------
 4 files changed, 309 insertions(+), 177 deletions(-)

<span class="p_header">diff --git a/tools/testing/selftests/vm/Makefile b/tools/testing/selftests/vm/Makefile</span>
<span class="p_header">index 7f45806bd863..fe49b7390e13 100644</span>
<span class="p_header">--- a/tools/testing/selftests/vm/Makefile</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/Makefile</span>
<span class="p_chunk">@@ -19,6 +19,7 @@</span> <span class="p_context"> TEST_GEN_FILES += userfaultfd</span>
 TEST_GEN_FILES += mlock-random-test
 TEST_GEN_FILES += virtual_address_range
 TEST_GEN_FILES += gup_benchmark
<span class="p_add">+TEST_GEN_FILES += va_128TBswitch</span>
 
 TEST_PROGS := run_vmtests
 
<span class="p_header">diff --git a/tools/testing/selftests/vm/run_vmtests b/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_header">index cc826326de87..d2561895a021 100755</span>
<span class="p_header">--- a/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_chunk">@@ -177,4 +177,15 @@</span> <span class="p_context"> else</span>
 	echo &quot;[PASS]&quot;
 fi
 
<span class="p_add">+echo &quot;-----------------------------&quot;</span>
<span class="p_add">+echo &quot;running virtual address 128TB switch test&quot;</span>
<span class="p_add">+echo &quot;-----------------------------&quot;</span>
<span class="p_add">+./va_128TBswitch</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+    echo &quot;[FAIL]&quot;</span>
<span class="p_add">+    exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+    echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
 exit $exitcode
<span class="p_header">diff --git a/tools/testing/selftests/vm/va_128TBswitch.c b/tools/testing/selftests/vm/va_128TBswitch.c</span>
new file mode 100644
<span class="p_header">index 000000000000..e7fe734c374f</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="p_chunk">@@ -0,0 +1,297 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Authors: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="p_add">+ * Authors: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License, version 2, as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+</span>
<span class="p_add">+ * This program is distributed in the hope that it would be useful, but</span>
<span class="p_add">+ * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;stdio.h&gt;</span>
<span class="p_add">+#include &lt;sys/mman.h&gt;</span>
<span class="p_add">+#include &lt;string.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef __powerpc64__</span>
<span class="p_add">+#define PAGE_SIZE	(64 &lt;&lt; 10)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This will work with 16M and 2M hugepage size</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define HUGETLB_SIZE	(16 &lt;&lt; 20)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define PAGE_SIZE	(4 &lt;&lt; 10)</span>
<span class="p_add">+#define HUGETLB_SIZE	(2 &lt;&lt; 20)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * &gt;= 128TB is the hint addr value we used to select</span>
<span class="p_add">+ * large address space.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define ADDR_SWITCH_HINT (1UL &lt;&lt; 47)</span>
<span class="p_add">+#define LOW_ADDR	((void *) (1UL &lt;&lt; 30))</span>
<span class="p_add">+#define HIGH_ADDR	((void *) (1UL &lt;&lt; 48))</span>
<span class="p_add">+</span>
<span class="p_add">+struct testcase {</span>
<span class="p_add">+	void *addr;</span>
<span class="p_add">+	unsigned long size;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	const char *msg;</span>
<span class="p_add">+	unsigned int low_addr_required:1;</span>
<span class="p_add">+	unsigned int keep_mapped:1;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct testcase testcases[] = {</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If stack is moved, we could possibly allocate</span>
<span class="p_add">+		 * this at the requested address.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We should never allocate at the requested address or above it</span>
<span class="p_add">+		 * The len cross the 128TB boundary. Without MAP_FIXED</span>
<span class="p_add">+		 * we will always search in the lower address space.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, (2 * PAGE_SIZE))&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Exact mapping at 128TB, the area is free we should get that</span>
<span class="p_add">+		 * even without MAP_FIXED.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = NULL,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(NULL)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = LOW_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(LOW_ADDR)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR) again&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1) again&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, 2 * PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE / 2),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE/2 , 2 * PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, PAGE_SIZE)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct testcase hugetlb_testcases[] = {</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = NULL,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(NULL, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = LOW_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(LOW_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),</span>
<span class="p_add">+		.size = 2 * HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, 2*HUGETLB_SIZE, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT , 2*HUGETLB_SIZE, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int run_test(struct testcase *test, int count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+	int i, ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; count; i++) {</span>
<span class="p_add">+		struct testcase *t = test + i;</span>
<span class="p_add">+</span>
<span class="p_add">+		p = mmap(t-&gt;addr, t-&gt;size, PROT_READ | PROT_WRITE, t-&gt;flags, -1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		printf(&quot;%s: %p - &quot;, t-&gt;msg, p);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (p == MAP_FAILED) {</span>
<span class="p_add">+			printf(&quot;FAILED\n&quot;);</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(ADDR_SWITCH_HINT)) {</span>
<span class="p_add">+			printf(&quot;FAILED\n&quot;);</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Do a dereference of the address returned so that we catch</span>
<span class="p_add">+			 * bugs in page fault handling</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			memset(p, 0, t-&gt;size);</span>
<span class="p_add">+			printf(&quot;OK\n&quot;);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (!t-&gt;keep_mapped)</span>
<span class="p_add">+			munmap(p, t-&gt;size);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int supported_arch(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined(__powerpc64__)</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+#elif defined(__x86_64__)</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int main(int argc, char **argv)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!supported_arch())</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = run_test(testcases, ARRAY_SIZE(testcases));</span>
<span class="p_add">+	if (argc == 2 &amp;&amp; !strcmp(argv[1], &quot;--run-hugetlb&quot;))</span>
<span class="p_add">+		ret = run_test(hugetlb_testcases, ARRAY_SIZE(hugetlb_testcases));</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/testing/selftests/x86/5lvl.c b/tools/testing/selftests/x86/5lvl.c</span>
deleted file mode 100644
<span class="p_header">index 2eafdcd4c2b3..000000000000</span>
<span class="p_header">--- a/tools/testing/selftests/x86/5lvl.c</span>
<span class="p_header">+++ /dev/null</span>
<span class="p_chunk">@@ -1,177 +0,0 @@</span> <span class="p_context"></span>
<span class="p_del">-#include &lt;stdio.h&gt;</span>
<span class="p_del">-#include &lt;sys/mman.h&gt;</span>
<span class="p_del">-</span>
<span class="p_del">-#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</span>
<span class="p_del">-</span>
<span class="p_del">-#define PAGE_SIZE	4096</span>
<span class="p_del">-#define LOW_ADDR	((void *) (1UL &lt;&lt; 30))</span>
<span class="p_del">-#define HIGH_ADDR	((void *) (1UL &lt;&lt; 50))</span>
<span class="p_del">-</span>
<span class="p_del">-struct testcase {</span>
<span class="p_del">-	void *addr;</span>
<span class="p_del">-	unsigned long size;</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-	const char *msg;</span>
<span class="p_del">-	unsigned int low_addr_required:1;</span>
<span class="p_del">-	unsigned int keep_mapped:1;</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static struct testcase testcases[] = {</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = NULL,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(NULL)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = LOW_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(LOW_ADDR)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR) again&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1) again&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE / 2),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE / 2)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47) - PAGE_SIZE, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = NULL,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(NULL, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = LOW_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(LOW_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 4UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 4UL &lt;&lt; 20, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - (2UL &lt;&lt; 20)),</span>
<span class="p_del">-		.size = 4UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47) - (2UL &lt;&lt; 20), 4UL &lt;&lt; 20, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-int main(int argc, char **argv)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int i;</span>
<span class="p_del">-	void *p;</span>
<span class="p_del">-</span>
<span class="p_del">-	for (i = 0; i &lt; ARRAY_SIZE(testcases); i++) {</span>
<span class="p_del">-		struct testcase *t = testcases + i;</span>
<span class="p_del">-</span>
<span class="p_del">-		p = mmap(t-&gt;addr, t-&gt;size, PROT_NONE, t-&gt;flags, -1, 0);</span>
<span class="p_del">-</span>
<span class="p_del">-		printf(&quot;%s: %p - &quot;, t-&gt;msg, p);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (p == MAP_FAILED) {</span>
<span class="p_del">-			printf(&quot;FAILED\n&quot;);</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(1UL &lt;&lt; 47))</span>
<span class="p_del">-			printf(&quot;FAILED\n&quot;);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			printf(&quot;OK\n&quot;);</span>
<span class="p_del">-		if (!t-&gt;keep_mapped)</span>
<span class="p_del">-			munmap(p, t-&gt;size);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



