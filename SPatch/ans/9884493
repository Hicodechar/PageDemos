
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,11/14] lockdep: Apply crossrelease to PG_locked locks - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,11/14] lockdep: Apply crossrelease to PG_locked locks</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60821">byungchul park</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 7, 2017, 7:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1502089981-21272-12-git-send-email-byungchul.park@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9884493/mbox/"
   >mbox</a>
|
   <a href="/patch/9884493/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9884493/">/patch/9884493/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	47BAF603F2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Aug 2017 07:17:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3E192285AE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Aug 2017 07:17:54 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 32FEB285A9; Mon,  7 Aug 2017 07:17:54 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AAB59285AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  7 Aug 2017 07:17:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752435AbdHGHQL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 7 Aug 2017 03:16:11 -0400
Received: from LGEAMRELO12.lge.com ([156.147.23.52]:41750 &quot;EHLO
	lgeamrelo12.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752103AbdHGHON (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 7 Aug 2017 03:14:13 -0400
Received: from unknown (HELO lgeamrelo02.lge.com) (156.147.1.126)
	by 156.147.23.52 with ESMTP; 7 Aug 2017 16:14:12 +0900
X-Original-SENDERIP: 156.147.1.126
X-Original-MAILFROM: byungchul.park@lge.com
Received: from unknown (HELO localhost.localdomain) (10.177.222.33)
	by 156.147.1.126 with ESMTP; 7 Aug 2017 16:14:12 +0900
X-Original-SENDERIP: 10.177.222.33
X-Original-MAILFROM: byungchul.park@lge.com
From: Byungchul Park &lt;byungchul.park@lge.com&gt;
To: peterz@infradead.org, mingo@kernel.org
Cc: tglx@linutronix.de, walken@google.com, boqun.feng@gmail.com,
	kirill@shutemov.name, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org, akpm@linux-foundation.org, willy@infradead.org,
	npiggin@gmail.com, kernel-team@lge.com
Subject: [PATCH v8 11/14] lockdep: Apply crossrelease to PG_locked locks
Date: Mon,  7 Aug 2017 16:12:58 +0900
Message-Id: &lt;1502089981-21272-12-git-send-email-byungchul.park@lge.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1502089981-21272-1-git-send-email-byungchul.park@lge.com&gt;
References: &lt;1502089981-21272-1-git-send-email-byungchul.park@lge.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - Aug. 7, 2017, 7:12 a.m.</div>
<pre class="content">
Although lock_page() and its family can cause deadlock, the lock
correctness validator could not be applied to them until now, becasue
things like unlock_page() might be called in a different context from
the acquisition context, which violates lockdep&#39;s assumption.

Thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can now apply the lockdep
detector to page locks. Applied it.
<span class="signed-off-by">
Signed-off-by: Byungchul Park &lt;byungchul.park@lge.com&gt;</span>
---
 include/linux/mm_types.h |   8 ++++
 include/linux/pagemap.h  | 101 ++++++++++++++++++++++++++++++++++++++++++++---
 lib/Kconfig.debug        |   8 ++++
 mm/filemap.c             |   4 +-
 mm/page_alloc.c          |   3 ++
 5 files changed, 116 insertions(+), 8 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Aug. 7, 2017, 10:36 a.m.</div>
<pre class="content">
Hi Byungchul,

[auto build test WARNING on linus/master]
[also build test WARNING on v4.13-rc4 next-20170807]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Byungchul-Park/lockdep-Implement-crossrelease-feature/20170807-172617
config: alpha-allmodconfig (attached as .config)
compiler: alpha-linux-gnu-gcc (Debian 6.1.1-9) 6.1.1 20160705
reproduce:
        wget https://raw.githubusercontent.com/01org/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=alpha 

All warnings (new ones prefixed by &gt;&gt;):

warning: (LOCKDEP_COMPLETE &amp;&amp; LOCKDEP_PAGELOCK) selects LOCKDEP_CROSSRELEASE which has unmet direct dependencies (PROVE_LOCKING)

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - Aug. 10, 2017, 1:35 a.m.</div>
<pre class="content">
On Mon, Aug 07, 2017 at 04:12:58PM +0900, Byungchul Park wrote:
<span class="quote">&gt; Although lock_page() and its family can cause deadlock, the lock</span>
<span class="quote">&gt; correctness validator could not be applied to them until now, becasue</span>
<span class="quote">&gt; things like unlock_page() might be called in a different context from</span>
<span class="quote">&gt; the acquisition context, which violates lockdep&#39;s assumption.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can now apply the lockdep</span>
<span class="quote">&gt; detector to page locks. Applied it.</span>

Is there any reason excluding applying it into PG_locked?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Aug. 10, 2017, 9:25 a.m.</div>
<pre class="content">
On Thu, Aug 10, 2017 at 10:35:02AM +0900, Byungchul Park wrote:
<span class="quote">&gt; On Mon, Aug 07, 2017 at 04:12:58PM +0900, Byungchul Park wrote:</span>
<span class="quote">&gt; &gt; Although lock_page() and its family can cause deadlock, the lock</span>
<span class="quote">&gt; &gt; correctness validator could not be applied to them until now, becasue</span>
<span class="quote">&gt; &gt; things like unlock_page() might be called in a different context from</span>
<span class="quote">&gt; &gt; the acquisition context, which violates lockdep&#39;s assumption.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can now apply the lockdep</span>
<span class="quote">&gt; &gt; detector to page locks. Applied it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is there any reason excluding applying it into PG_locked?</span>

Wanted to start small..
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - Sept. 5, 2017, 1:03 a.m.</div>
<pre class="content">
On Mon, Aug 07, 2017 at 04:12:58PM +0900, Byungchul Park wrote:
<span class="quote">&gt; Although lock_page() and its family can cause deadlock, the lock</span>
<span class="quote">&gt; correctness validator could not be applied to them until now, becasue</span>
<span class="quote">&gt; things like unlock_page() might be called in a different context from</span>
<span class="quote">&gt; the acquisition context, which violates lockdep&#39;s assumption.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can now apply the lockdep</span>
<span class="quote">&gt; detector to page locks. Applied it.</span>

I expect applying this into lock_page() is more useful than
wait_for_completion(). Could you consider this as the next?
<span class="quote">
&gt; Signed-off-by: Byungchul Park &lt;byungchul.park@lge.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/mm_types.h |   8 ++++</span>
<span class="quote">&gt;  include/linux/pagemap.h  | 101 ++++++++++++++++++++++++++++++++++++++++++++---</span>
<span class="quote">&gt;  lib/Kconfig.debug        |   8 ++++</span>
<span class="quote">&gt;  mm/filemap.c             |   4 +-</span>
<span class="quote">&gt;  mm/page_alloc.c          |   3 ++</span>
<span class="quote">&gt;  5 files changed, 116 insertions(+), 8 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index ff15181..f1e3dba 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -16,6 +16,10 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/mmu.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +#include &lt;linux/lockdep.h&gt;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifndef AT_VECTOR_SIZE_ARCH</span>
<span class="quote">&gt;  #define AT_VECTOR_SIZE_ARCH 0</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; @@ -216,6 +220,10 @@ struct page {</span>
<span class="quote">&gt;  #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS</span>
<span class="quote">&gt;  	int _last_cpupid;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +	struct lockdep_map_cross map;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * The struct page can be forced to be double word aligned so that atomic ops</span>
<span class="quote">&gt; diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="quote">&gt; index 9717ca8..9f448c6 100644</span>
<span class="quote">&gt; --- a/include/linux/pagemap.h</span>
<span class="quote">&gt; +++ b/include/linux/pagemap.h</span>
<span class="quote">&gt; @@ -14,6 +14,9 @@</span>
<span class="quote">&gt;  #include &lt;linux/bitops.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/hardirq.h&gt; /* for in_interrupt() */</span>
<span class="quote">&gt;  #include &lt;linux/hugetlb_inline.h&gt;</span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +#include &lt;linux/lockdep.h&gt;</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Bits in mapping-&gt;flags.</span>
<span class="quote">&gt; @@ -450,26 +453,91 @@ static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	return pgoff;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +#define lock_page_init(p)						\</span>
<span class="quote">&gt; +do {									\</span>
<span class="quote">&gt; +	static struct lock_class_key __key;				\</span>
<span class="quote">&gt; +	lockdep_init_map_crosslock((struct lockdep_map *)&amp;(p)-&gt;map,	\</span>
<span class="quote">&gt; +			&quot;(PG_locked)&quot; #p, &amp;__key, 0);			\</span>
<span class="quote">&gt; +} while (0)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void lock_page_acquire(struct page *page, int try)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	page = compound_head(page);</span>
<span class="quote">&gt; +	lock_acquire_exclusive((struct lockdep_map *)&amp;page-&gt;map, 0,</span>
<span class="quote">&gt; +			       try, NULL, _RET_IP_);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void lock_page_release(struct page *page)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	page = compound_head(page);</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * lock_commit_crosslock() is necessary for crosslocks.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	lock_commit_crosslock((struct lockdep_map *)&amp;page-&gt;map);</span>
<span class="quote">&gt; +	lock_release((struct lockdep_map *)&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void lock_page_init(struct page *page) {}</span>
<span class="quote">&gt; +static inline void lock_page_free(struct page *page) {}</span>
<span class="quote">&gt; +static inline void lock_page_acquire(struct page *page, int try) {}</span>
<span class="quote">&gt; +static inline void lock_page_release(struct page *page) {}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  extern void __lock_page(struct page *page);</span>
<span class="quote">&gt;  extern int __lock_page_killable(struct page *page);</span>
<span class="quote">&gt;  extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
<span class="quote">&gt;  				unsigned int flags);</span>
<span class="quote">&gt; -extern void unlock_page(struct page *page);</span>
<span class="quote">&gt; +extern void do_raw_unlock_page(struct page *page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline int trylock_page(struct page *page)</span>
<span class="quote">&gt; +static inline void unlock_page(struct page *page)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	lock_page_release(page);</span>
<span class="quote">&gt; +	do_raw_unlock_page(page);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int do_raw_trylock_page(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	page = compound_head(page);</span>
<span class="quote">&gt;  	return (likely(!test_and_set_bit_lock(PG_locked, &amp;page-&gt;flags)));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline int trylock_page(struct page *page)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (do_raw_trylock_page(page)) {</span>
<span class="quote">&gt; +		lock_page_acquire(page, 1);</span>
<span class="quote">&gt; +		return 1;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * lock_page may only be called if we have the page&#39;s inode pinned.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static inline void lock_page(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	might_sleep();</span>
<span class="quote">&gt; -	if (!trylock_page(page))</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!do_raw_trylock_page(page))</span>
<span class="quote">&gt;  		__lock_page(page);</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="quote">&gt; +	 * This way a crosslock and current lock can be ordered like:</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 *	CONTEXT 1		CONTEXT 2</span>
<span class="quote">&gt; +	 *	---------		---------</span>
<span class="quote">&gt; +	 *	lock A (cross)</span>
<span class="quote">&gt; +	 *	acquire A</span>
<span class="quote">&gt; +	 *	  X = atomic_inc_return(&amp;cross_gen_id)</span>
<span class="quote">&gt; +	 *	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="quote">&gt; +	 *				acquire B</span>
<span class="quote">&gt; +	 *				  Y = atomic_read_acquire(&amp;cross_gen_id)</span>
<span class="quote">&gt; +	 *				lock B</span>
<span class="quote">&gt; +	 *</span>
<span class="quote">&gt; +	 * so that &#39;lock A and then lock B&#39; can be seen globally,</span>
<span class="quote">&gt; +	 * if X &lt;= Y.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	lock_page_acquire(page, 0);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; @@ -479,9 +547,20 @@ static inline void lock_page(struct page *page)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static inline int lock_page_killable(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	might_sleep();</span>
<span class="quote">&gt; -	if (!trylock_page(page))</span>
<span class="quote">&gt; -		return __lock_page_killable(page);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!do_raw_trylock_page(page)) {</span>
<span class="quote">&gt; +		ret = __lock_page_killable(page);</span>
<span class="quote">&gt; +		if (ret)</span>
<span class="quote">&gt; +			return ret;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="quote">&gt; +	 * This way a crosslock and other locks can be ordered.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	lock_page_acquire(page, 0);</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -496,7 +575,17 @@ static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
<span class="quote">&gt;  				     unsigned int flags)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	might_sleep();</span>
<span class="quote">&gt; -	return trylock_page(page) || __lock_page_or_retry(page, mm, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (do_raw_trylock_page(page) || __lock_page_or_retry(page, mm, flags)) {</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="quote">&gt; +		 * This way a crosslock and other locks can be ordered.</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		lock_page_acquire(page, 0);</span>
<span class="quote">&gt; +		return 1;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="quote">&gt; index 4ba8adc..99b5f76 100644</span>
<span class="quote">&gt; --- a/lib/Kconfig.debug</span>
<span class="quote">&gt; +++ b/lib/Kconfig.debug</span>
<span class="quote">&gt; @@ -1093,6 +1093,14 @@ config LOCKDEP_COMPLETE</span>
<span class="quote">&gt;  	 A deadlock caused by wait_for_completion() and complete() can be</span>
<span class="quote">&gt;  	 detected by lockdep using crossrelease feature.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +config LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +	bool &quot;Lock debugging: allow PG_locked lock to use deadlock detector&quot;</span>
<span class="quote">&gt; +	select LOCKDEP_CROSSRELEASE</span>
<span class="quote">&gt; +	default n</span>
<span class="quote">&gt; +	help</span>
<span class="quote">&gt; +	 PG_locked lock is a kind of crosslock. Using crossrelease feature,</span>
<span class="quote">&gt; +	 PG_locked lock can work with runtime deadlock detector.</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  config PROVE_LOCKING</span>
<span class="quote">&gt;  	bool &quot;Lock debugging: prove locking correctness&quot;</span>
<span class="quote">&gt;  	depends on DEBUG_KERNEL &amp;&amp; TRACE_IRQFLAGS_SUPPORT &amp;&amp; STACKTRACE_SUPPORT &amp;&amp; LOCKDEP_SUPPORT</span>
<span class="quote">&gt; diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="quote">&gt; index a497024..0d83bf0 100644</span>
<span class="quote">&gt; --- a/mm/filemap.c</span>
<span class="quote">&gt; +++ b/mm/filemap.c</span>
<span class="quote">&gt; @@ -1083,7 +1083,7 @@ static inline bool clear_bit_unlock_is_negative_byte(long nr, volatile void *mem</span>
<span class="quote">&gt;   * portably (architectures that do LL/SC can test any bit, while x86 can</span>
<span class="quote">&gt;   * test the sign bit).</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -void unlock_page(struct page *page)</span>
<span class="quote">&gt; +void do_raw_unlock_page(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	BUILD_BUG_ON(PG_waiters != 7);</span>
<span class="quote">&gt;  	page = compound_head(page);</span>
<span class="quote">&gt; @@ -1091,7 +1091,7 @@ void unlock_page(struct page *page)</span>
<span class="quote">&gt;  	if (clear_bit_unlock_is_negative_byte(PG_locked, &amp;page-&gt;flags))</span>
<span class="quote">&gt;  		wake_up_page_bit(page, PG_locked);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; -EXPORT_SYMBOL(unlock_page);</span>
<span class="quote">&gt; +EXPORT_SYMBOL(do_raw_unlock_page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * end_page_writeback - end writeback against a page</span>
<span class="quote">&gt; diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="quote">&gt; index 6d30e91..2cbf412 100644</span>
<span class="quote">&gt; --- a/mm/page_alloc.c</span>
<span class="quote">&gt; +++ b/mm/page_alloc.c</span>
<span class="quote">&gt; @@ -5406,6 +5406,9 @@ void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt;  			__init_single_pfn(pfn, zone, nid);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; +#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="quote">&gt; +		lock_page_init(pfn_to_page(pfn));</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.9.1</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index ff15181..f1e3dba 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -16,6 +16,10 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/mmu.h&gt;
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef AT_VECTOR_SIZE_ARCH
 #define AT_VECTOR_SIZE_ARCH 0
 #endif
<span class="p_chunk">@@ -216,6 +220,10 @@</span> <span class="p_context"> struct page {</span>
 #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS
 	int _last_cpupid;
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+	struct lockdep_map_cross map;</span>
<span class="p_add">+#endif</span>
 }
 /*
  * The struct page can be forced to be double word aligned so that atomic ops
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index 9717ca8..9f448c6 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -14,6 +14,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/hardirq.h&gt; /* for in_interrupt() */
 #include &lt;linux/hugetlb_inline.h&gt;
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
 
 /*
  * Bits in mapping-&gt;flags.
<span class="p_chunk">@@ -450,26 +453,91 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
 	return pgoff;
 }
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#define lock_page_init(p)						\</span>
<span class="p_add">+do {									\</span>
<span class="p_add">+	static struct lock_class_key __key;				\</span>
<span class="p_add">+	lockdep_init_map_crosslock((struct lockdep_map *)&amp;(p)-&gt;map,	\</span>
<span class="p_add">+			&quot;(PG_locked)&quot; #p, &amp;__key, 0);			\</span>
<span class="p_add">+} while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	lock_acquire_exclusive((struct lockdep_map *)&amp;page-&gt;map, 0,</span>
<span class="p_add">+			       try, NULL, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_release(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * lock_commit_crosslock() is necessary for crosslocks.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_commit_crosslock((struct lockdep_map *)&amp;page-&gt;map);</span>
<span class="p_add">+	lock_release((struct lockdep_map *)&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void lock_page_init(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_free(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try) {}</span>
<span class="p_add">+static inline void lock_page_release(struct page *page) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 extern void __lock_page(struct page *page);
 extern int __lock_page_killable(struct page *page);
 extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,
 				unsigned int flags);
<span class="p_del">-extern void unlock_page(struct page *page);</span>
<span class="p_add">+extern void do_raw_unlock_page(struct page *page);</span>
 
<span class="p_del">-static inline int trylock_page(struct page *page)</span>
<span class="p_add">+static inline void unlock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	lock_page_release(page);</span>
<span class="p_add">+	do_raw_unlock_page(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int do_raw_trylock_page(struct page *page)</span>
 {
 	page = compound_head(page);
 	return (likely(!test_and_set_bit_lock(PG_locked, &amp;page-&gt;flags)));
 }
 
<span class="p_add">+static inline int trylock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (do_raw_trylock_page(page)) {</span>
<span class="p_add">+		lock_page_acquire(page, 1);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * lock_page may only be called if we have the page&#39;s inode pinned.
  */
 static inline void lock_page(struct page *page)
 {
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page))</span>
 		__lock_page(page);
<span class="p_add">+	/*</span>
<span class="p_add">+	 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="p_add">+	 * This way a crosslock and current lock can be ordered like:</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 *	CONTEXT 1		CONTEXT 2</span>
<span class="p_add">+	 *	---------		---------</span>
<span class="p_add">+	 *	lock A (cross)</span>
<span class="p_add">+	 *	acquire A</span>
<span class="p_add">+	 *	  X = atomic_inc_return(&amp;cross_gen_id)</span>
<span class="p_add">+	 *	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="p_add">+	 *				acquire B</span>
<span class="p_add">+	 *				  Y = atomic_read_acquire(&amp;cross_gen_id)</span>
<span class="p_add">+	 *				lock B</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * so that &#39;lock A and then lock B&#39; can be seen globally,</span>
<span class="p_add">+	 * if X &lt;= Y.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 }
 
 /*
<span class="p_chunk">@@ -479,9 +547,20 @@</span> <span class="p_context"> static inline void lock_page(struct page *page)</span>
  */
 static inline int lock_page_killable(struct page *page)
 {
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_del">-		return __lock_page_killable(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page)) {</span>
<span class="p_add">+		ret = __lock_page_killable(page);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="p_add">+	 * This way a crosslock and other locks can be ordered.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -496,7 +575,17 @@</span> <span class="p_context"> static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
 				     unsigned int flags)
 {
 	might_sleep();
<span class="p_del">-	return trylock_page(page) || __lock_page_or_retry(page, mm, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (do_raw_trylock_page(page) || __lock_page_or_retry(page, mm, flags)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * acquire() must be after actual lock operation for crosslocks.</span>
<span class="p_add">+		 * This way a crosslock and other locks can be ordered.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		lock_page_acquire(page, 0);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
 }
 
 /*
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index 4ba8adc..99b5f76 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -1093,6 +1093,14 @@</span> <span class="p_context"> config LOCKDEP_COMPLETE</span>
 	 A deadlock caused by wait_for_completion() and complete() can be
 	 detected by lockdep using crossrelease feature.
 
<span class="p_add">+config LOCKDEP_PAGELOCK</span>
<span class="p_add">+	bool &quot;Lock debugging: allow PG_locked lock to use deadlock detector&quot;</span>
<span class="p_add">+	select LOCKDEP_CROSSRELEASE</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	 PG_locked lock is a kind of crosslock. Using crossrelease feature,</span>
<span class="p_add">+	 PG_locked lock can work with runtime deadlock detector.</span>
<span class="p_add">+</span>
 config PROVE_LOCKING
 	bool &quot;Lock debugging: prove locking correctness&quot;
 	depends on DEBUG_KERNEL &amp;&amp; TRACE_IRQFLAGS_SUPPORT &amp;&amp; STACKTRACE_SUPPORT &amp;&amp; LOCKDEP_SUPPORT
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index a497024..0d83bf0 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -1083,7 +1083,7 @@</span> <span class="p_context"> static inline bool clear_bit_unlock_is_negative_byte(long nr, volatile void *mem</span>
  * portably (architectures that do LL/SC can test any bit, while x86 can
  * test the sign bit).
  */
<span class="p_del">-void unlock_page(struct page *page)</span>
<span class="p_add">+void do_raw_unlock_page(struct page *page)</span>
 {
 	BUILD_BUG_ON(PG_waiters != 7);
 	page = compound_head(page);
<span class="p_chunk">@@ -1091,7 +1091,7 @@</span> <span class="p_context"> void unlock_page(struct page *page)</span>
 	if (clear_bit_unlock_is_negative_byte(PG_locked, &amp;page-&gt;flags))
 		wake_up_page_bit(page, PG_locked);
 }
<span class="p_del">-EXPORT_SYMBOL(unlock_page);</span>
<span class="p_add">+EXPORT_SYMBOL(do_raw_unlock_page);</span>
 
 /**
  * end_page_writeback - end writeback against a page
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 6d30e91..2cbf412 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -5406,6 +5406,9 @@</span> <span class="p_context"> void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,</span>
 		} else {
 			__init_single_pfn(pfn, zone, nid);
 		}
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+		lock_page_init(pfn_to_page(pfn));</span>
<span class="p_add">+#endif</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



