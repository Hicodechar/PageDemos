
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] mm, hugetlb_cgroup: round limit_in_bytes down to hugepage size - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] mm, hugetlb_cgroup: round limit_in_bytes down to hugepage size</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=579">David Rientjes</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 6, 2016, 10:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.10.1604061510040.10401@chino.kir.corp.google.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8766391/mbox/"
   >mbox</a>
|
   <a href="/patch/8766391/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8766391/">/patch/8766391/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 9F5109F36E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Apr 2016 22:10:32 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0CEB5200B4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Apr 2016 22:10:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 59355201EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Apr 2016 22:10:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754120AbcDFWK2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 6 Apr 2016 18:10:28 -0400
Received: from mail-pa0-f41.google.com ([209.85.220.41]:33918 &quot;EHLO
	mail-pa0-f41.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753429AbcDFWK0 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 6 Apr 2016 18:10:26 -0400
Received: by mail-pa0-f41.google.com with SMTP id fe3so41108783pab.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 06 Apr 2016 15:10:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20120113;
	h=date:from:to:cc:subject:in-reply-to:message-id:references
	:user-agent:mime-version;
	bh=Tz1NhT7Ws/Gda3cg6u40/mvOw4KHx7m6GZKOc0gmo9M=;
	b=Hv/jVaQVkAUFUGWpN9DmOlvGcjahTrGQvsMbtY+tphLKXvIcGtyaGgg/Wq/Hu33q1O
	1TIxM4f2huHhN2huiVaWlLHmbEf8PuXC1Hfz5xtstCQ8He2wKlCHaVPM2nSOhqFX7TNu
	JgzvACuNyTtOD6yRjKmTfU501zX8XZfP4Flws4A/hwh7LU47dI/i84bE5H5d6yY/AEZ0
	XhKZWqmYPxy0V75ZE8KMnuLQGfl9HTE3poV1nxMvKV8vg0cu9QdB4XqU1J1PjdBRDPxe
	QgBnlna7koS14UnexLe1uVan5yrX4yjJpi97jgBgn2orVgEPtqLrgbN8rekj8oBk56MZ
	1j/w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:in-reply-to:message-id
	:references:user-agent:mime-version;
	bh=Tz1NhT7Ws/Gda3cg6u40/mvOw4KHx7m6GZKOc0gmo9M=;
	b=l/XsbTGOwWFdRfUSjB3o5E8hKDJmk+URksf7kjSsGUC+43sY/EjZEDzOXL+FE4eeMg
	2oErpd94EZB3DHC19jTLk17PTJjUxl7A7QrBeSaFKK+rsGu2E6aLQXckYNk2f/mp4oLI
	dxAdjiYOUPHmw5YOUyHIz9yOZ90EK4alKcBx1fYlBLZOxD/0ThH30GWo7pogMCrBsr2D
	NbK2jJHPhkhDdGQzs2ONaGYKKfTpkg6TeMLl9dXow9OyD66OrsAplBymPxasqPzggXZQ
	jH15TjDwMqQnxN86TqV82G4MarnLfz25/X7eHCh32jCVkp9opAaDswt5dInJvxCHGmu+
	uRxw==
X-Gm-Message-State: AD7BkJKHl9kKiuUtftpcCj/0wZq1Qbp5H6dRz2MmjmndxzgJUa8BrNDQ5PAEr+QjIjXpNU0d
X-Received: by 10.66.219.170 with SMTP id
	pp10mr33415938pac.110.1459980625607; 
	Wed, 06 Apr 2016 15:10:25 -0700 (PDT)
Received: from [2620:0:1008:1201:1f4:8603:6947:d559]
	([2620:0:1008:1201:1f4:8603:6947:d559])
	by smtp.gmail.com with ESMTPSA id
	y7sm7109189pfa.82.2016.04.06.15.10.24
	(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Wed, 06 Apr 2016 15:10:24 -0700 (PDT)
Date: Wed, 6 Apr 2016 15:10:23 -0700 (PDT)
From: David Rientjes &lt;rientjes@google.com&gt;
X-X-Sender: rientjes@chino.kir.corp.google.com
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Nikolay Borisov &lt;kernel@kyup.com&gt;
cc: Michal Hocko &lt;mhocko@suse.com&gt;, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org
Subject: [patch v2] mm, hugetlb_cgroup: round limit_in_bytes down to hugepage
	size
In-Reply-To: &lt;5704BBBF.8040302@kyup.com&gt;
Message-ID: &lt;alpine.DEB.2.10.1604061510040.10401@chino.kir.corp.google.com&gt;
References: &lt;alpine.DEB.2.10.1604051824320.32718@chino.kir.corp.google.com&gt;
	&lt;5704BA37.2080508@kyup.com&gt; &lt;5704BBBF.8040302@kyup.com&gt;
User-Agent: Alpine 2.10 (DEB 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - April 6, 2016, 10:10 p.m.</div>
<pre class="content">
The page_counter rounds limits down to page size values.  This makes
sense, except in the case of hugetlb_cgroup where it&#39;s not possible to
charge partial hugepages.

Round the hugetlb_cgroup limit down to hugepage size.
<span class="signed-off-by">
Signed-off-by: David Rientjes &lt;rientjes@google.com&gt;</span>
---
 mm/hugetlb_cgroup.c | 35 ++++++++++++++++++++++++++---------
 1 file changed, 26 insertions(+), 9 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - April 7, 2016, 12:51 p.m.</div>
<pre class="content">
On Wed 06-04-16 15:10:23, David Rientjes wrote:
[...]
<span class="quote">&gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int idx;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; +		unsigned long limit;</span>
<span class="quote">&gt; +		int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +}</span>

I fail to see the point for this. Why would want to round down
PAGE_COUNTER_MAX? It will never make a real difference. Or am I missing
something?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - April 14, 2016, 8:22 p.m.</div>
<pre class="content">
On Thu, 7 Apr 2016, Michal Hocko wrote:
<span class="quote">
&gt; &gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; &gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	int idx;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; &gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; &gt; +		unsigned long limit;</span>
<span class="quote">&gt; &gt; +		int ret;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; &gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; &gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; &gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; &gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I fail to see the point for this. Why would want to round down</span>
<span class="quote">&gt; PAGE_COUNTER_MAX? It will never make a real difference. Or am I missing</span>
<span class="quote">&gt; something?</span>

Did you try the patch?

If we&#39;re rounding down the user value, it makes sense to be consistent 
with the upper bound default to specify intent.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - April 15, 2016, 1:24 p.m.</div>
<pre class="content">
On Thu 14-04-16 13:22:30, David Rientjes wrote:
<span class="quote">&gt; On Thu, 7 Apr 2016, Michal Hocko wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; &gt; &gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	int idx;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; &gt; &gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; &gt; &gt; +		unsigned long limit;</span>
<span class="quote">&gt; &gt; &gt; +		int ret;</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; &gt; &gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; &gt; &gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; &gt; &gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I fail to see the point for this. Why would want to round down</span>
<span class="quote">&gt; &gt; PAGE_COUNTER_MAX? It will never make a real difference. Or am I missing</span>
<span class="quote">&gt; &gt; something?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Did you try the patch?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If we&#39;re rounding down the user value, it makes sense to be consistent </span>
<span class="quote">&gt; with the upper bound default to specify intent.</span>

The point I&#39;ve tried to raise is why do we care and add a code if we can
never reach that value? Does actually anybody checks for the alignment.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - April 18, 2016, 9:23 p.m.</div>
<pre class="content">
On Fri, 15 Apr 2016, Michal Hocko wrote:
<span class="quote">
&gt; &gt; &gt; &gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; &gt; &gt; &gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; &gt; +	int idx;</span>
<span class="quote">&gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; &gt; &gt; &gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; &gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; &gt; &gt; &gt; +		unsigned long limit;</span>
<span class="quote">&gt; &gt; &gt; &gt; +		int ret;</span>
<span class="quote">&gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; &gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; &gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; &gt; &gt; &gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; &gt; &gt; &gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; &gt; &gt; &gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; &gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I fail to see the point for this. Why would want to round down</span>
<span class="quote">&gt; &gt; &gt; PAGE_COUNTER_MAX? It will never make a real difference. Or am I missing</span>
<span class="quote">&gt; &gt; &gt; something?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Did you try the patch?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If we&#39;re rounding down the user value, it makes sense to be consistent </span>
<span class="quote">&gt; &gt; with the upper bound default to specify intent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The point I&#39;ve tried to raise is why do we care and add a code if we can</span>
<span class="quote">&gt; never reach that value? Does actually anybody checks for the alignment.</span>

If the user modifies the value successfully, it can never be restored to 
the default since the write handler rounds down.  It&#39;s a matter of 
consistency for a long-term maintainable kernel and prevents bug reports.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - April 25, 2016, 9:30 p.m.</div>
<pre class="content">
On Wed, 6 Apr 2016, David Rientjes wrote:
<span class="quote">
&gt; The page_counter rounds limits down to page size values.  This makes</span>
<span class="quote">&gt; sense, except in the case of hugetlb_cgroup where it&#39;s not possible to</span>
<span class="quote">&gt; charge partial hugepages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Round the hugetlb_cgroup limit down to hugepage size.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: David Rientjes &lt;rientjes@google.com&gt;</span>

May this be merged into -mm?
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb_cgroup.c | 35 ++++++++++++++++++++++++++---------</span>
<span class="quote">&gt;  1 file changed, 26 insertions(+), 9 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb_cgroup.c b/mm/hugetlb_cgroup.c</span>
<span class="quote">&gt; --- a/mm/hugetlb_cgroup.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb_cgroup.c</span>
<span class="quote">&gt; @@ -67,26 +67,42 @@ static inline bool hugetlb_cgroup_have_usage(struct hugetlb_cgroup *h_cg)</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int idx;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; +		unsigned long limit;</span>
<span class="quote">&gt; +		int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static struct cgroup_subsys_state *</span>
<span class="quote">&gt;  hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct hugetlb_cgroup *parent_h_cgroup = hugetlb_cgroup_from_css(parent_css);</span>
<span class="quote">&gt;  	struct hugetlb_cgroup *h_cgroup;</span>
<span class="quote">&gt; -	int idx;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	h_cgroup = kzalloc(sizeof(*h_cgroup), GFP_KERNEL);</span>
<span class="quote">&gt;  	if (!h_cgroup)</span>
<span class="quote">&gt;  		return ERR_PTR(-ENOMEM);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (parent_h_cgroup) {</span>
<span class="quote">&gt; -		for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++)</span>
<span class="quote">&gt; -			page_counter_init(&amp;h_cgroup-&gt;hugepage[idx],</span>
<span class="quote">&gt; -					  &amp;parent_h_cgroup-&gt;hugepage[idx]);</span>
<span class="quote">&gt; -	} else {</span>
<span class="quote">&gt; +	if (!parent_h_cgroup)</span>
<span class="quote">&gt;  		root_h_cgroup = h_cgroup;</span>
<span class="quote">&gt; -		for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++)</span>
<span class="quote">&gt; -			page_counter_init(&amp;h_cgroup-&gt;hugepage[idx], NULL);</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	hugetlb_cgroup_init(h_cgroup, parent_h_cgroup);</span>
<span class="quote">&gt;  	return &amp;h_cgroup-&gt;css;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -285,6 +301,7 @@ static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,</span>
<span class="quote">&gt;  		return ret;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	idx = MEMFILE_IDX(of_cft(of)-&gt;private);</span>
<span class="quote">&gt; +	nr_pages = round_down(nr_pages, 1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	switch (MEMFILE_ATTR(of_cft(of)-&gt;private)) {</span>
<span class="quote">&gt;  	case RES_LIMIT:</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - April 25, 2016, 9:52 p.m.</div>
<pre class="content">
On Mon, 18 Apr 2016 14:23:58 -0700 (PDT) David Rientjes &lt;rientjes@google.com&gt; wrote:
<span class="quote">
&gt; On Fri, 15 Apr 2016, Michal Hocko wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	int idx;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		struct page_counter *parent = NULL;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		unsigned long limit;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		int ret;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		if (parent_h_cgroup)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		page_counter_init(counter, parent);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		ret = page_counter_limit(counter, limit);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		VM_BUG_ON(ret);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; I fail to see the point for this. Why would want to round down</span>
<span class="quote">&gt; &gt; &gt; &gt; PAGE_COUNTER_MAX? It will never make a real difference. Or am I missing</span>
<span class="quote">&gt; &gt; &gt; &gt; something?</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Did you try the patch?</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; If we&#39;re rounding down the user value, it makes sense to be consistent </span>
<span class="quote">&gt; &gt; &gt; with the upper bound default to specify intent.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The point I&#39;ve tried to raise is why do we care and add a code if we can</span>
<span class="quote">&gt; &gt; never reach that value? Does actually anybody checks for the alignment.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If the user modifies the value successfully, it can never be restored to </span>
<span class="quote">&gt; the default since the write handler rounds down.  It&#39;s a matter of </span>
<span class="quote">&gt; consistency for a long-term maintainable kernel and prevents bug reports.</span>

Can we please get the above reasoning into the changelog?

Also, the runtime effects of the patch are unclear - &quot;not possible to
charge partial hugepages&quot; sounds serious, but there&#39;s no cc:stable. 
Some clarification there also please.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb_cgroup.c b/mm/hugetlb_cgroup.c</span>
<span class="p_header">--- a/mm/hugetlb_cgroup.c</span>
<span class="p_header">+++ b/mm/hugetlb_cgroup.c</span>
<span class="p_chunk">@@ -67,26 +67,42 @@</span> <span class="p_context"> static inline bool hugetlb_cgroup_have_usage(struct hugetlb_cgroup *h_cg)</span>
 	return false;
 }
 
<span class="p_add">+static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,</span>
<span class="p_add">+				struct hugetlb_cgroup *parent_h_cgroup)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int idx;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++) {</span>
<span class="p_add">+		struct page_counter *counter = &amp;h_cgroup-&gt;hugepage[idx];</span>
<span class="p_add">+		struct page_counter *parent = NULL;</span>
<span class="p_add">+		unsigned long limit;</span>
<span class="p_add">+		int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (parent_h_cgroup)</span>
<span class="p_add">+			parent = &amp;parent_h_cgroup-&gt;hugepage[idx];</span>
<span class="p_add">+		page_counter_init(counter, parent);</span>
<span class="p_add">+</span>
<span class="p_add">+		limit = round_down(PAGE_COUNTER_MAX,</span>
<span class="p_add">+				   1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
<span class="p_add">+		ret = page_counter_limit(counter, limit);</span>
<span class="p_add">+		VM_BUG_ON(ret);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct cgroup_subsys_state *
 hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)
 {
 	struct hugetlb_cgroup *parent_h_cgroup = hugetlb_cgroup_from_css(parent_css);
 	struct hugetlb_cgroup *h_cgroup;
<span class="p_del">-	int idx;</span>
 
 	h_cgroup = kzalloc(sizeof(*h_cgroup), GFP_KERNEL);
 	if (!h_cgroup)
 		return ERR_PTR(-ENOMEM);
 
<span class="p_del">-	if (parent_h_cgroup) {</span>
<span class="p_del">-		for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++)</span>
<span class="p_del">-			page_counter_init(&amp;h_cgroup-&gt;hugepage[idx],</span>
<span class="p_del">-					  &amp;parent_h_cgroup-&gt;hugepage[idx]);</span>
<span class="p_del">-	} else {</span>
<span class="p_add">+	if (!parent_h_cgroup)</span>
 		root_h_cgroup = h_cgroup;
<span class="p_del">-		for (idx = 0; idx &lt; HUGE_MAX_HSTATE; idx++)</span>
<span class="p_del">-			page_counter_init(&amp;h_cgroup-&gt;hugepage[idx], NULL);</span>
<span class="p_del">-	}</span>
<span class="p_add">+</span>
<span class="p_add">+	hugetlb_cgroup_init(h_cgroup, parent_h_cgroup);</span>
 	return &amp;h_cgroup-&gt;css;
 }
 
<span class="p_chunk">@@ -285,6 +301,7 @@</span> <span class="p_context"> static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,</span>
 		return ret;
 
 	idx = MEMFILE_IDX(of_cft(of)-&gt;private);
<span class="p_add">+	nr_pages = round_down(nr_pages, 1 &lt;&lt; huge_page_order(&amp;hstates[idx]));</span>
 
 	switch (MEMFILE_ATTR(of_cft(of)-&gt;private)) {
 	case RES_LIMIT:

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



