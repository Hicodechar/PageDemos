
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1] mm: hugetlb: fix hugepage memory leak caused by wrong reserve count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1] mm: hugetlb: fix hugepage memory leak caused by wrong reserve count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 20, 2015, 7:20 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1448004017-23679-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7664681/mbox/"
   >mbox</a>
|
   <a href="/patch/7664681/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7664681/">/patch/7664681/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 34B9A9F2EC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Nov 2015 07:20:29 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 6C8D320499
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Nov 2015 07:20:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 9174F2049E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 20 Nov 2015 07:20:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759135AbbKTHUY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 20 Nov 2015 02:20:24 -0500
Received: from mail-pa0-f46.google.com ([209.85.220.46]:33052 &quot;EHLO
	mail-pa0-f46.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1759362AbbKTHUW (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 20 Nov 2015 02:20:22 -0500
Received: by pabfh17 with SMTP id fh17so111578427pab.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 19 Nov 2015 23:20:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:from:to:cc:subject:date:message-id;
	bh=tfV+AXFaKI+HXkU6Cw3bsUp7ZGGrJfe6eJXBrxJWZWk=;
	b=EJJEOSnvWr9DY3/q71+jblHy96dG4kmmTHDkalLzWOQn4vXarDWf+u0mKuLGKbm+dE
	YGsGw7t+Ru4uK0h8dZjPrGL6QiIp3UaOD86Ul9AKndgWvOzFoPVgrYytOT1bgQTxLsY2
	C2NZYgKoAaC1A6fklMWorQQjhHO2BCvrM/FeMrc/bkfgFNU0YvTU2Dvmq0in7rcaBdW4
	dQWLp11Jz2SOq3NMbegSPCTjeJ8zpF/o1Exda+nSWtzsyfvaBh48H9comtAZZ3HU0OAc
	3oxZxhufI6/TM1/+K8LTyZ9RPNiD7f5CoPVHlfSYfGZ4fW96yt0Kzxlhjy+iFkxwai/o
	AHww==
X-Received: by 10.68.175.193 with SMTP id cc1mr17151958pbc.16.1448004021898; 
	Thu, 19 Nov 2015 23:20:21 -0800 (PST)
Received: from localhost.localdomain (www9186uo.sakura.ne.jp.
	[153.121.56.200]) by smtp.gmail.com with ESMTPSA id
	nl10sm14761429pbc.64.2015.11.19.23.20.19
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 19 Nov 2015 23:20:21 -0800 (PST)
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;
Subject: [PATCH v1] mm: hugetlb: fix hugepage memory leak caused by wrong
	reserve count
Date: Fri, 20 Nov 2015 16:20:17 +0900
Message-Id: &lt;1448004017-23679-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
X-Mailer: git-send-email 1.7.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.3 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 20, 2015, 7:20 a.m.</div>
<pre class="content">
When dequeue_huge_page_vma() in alloc_huge_page() fails, we fall back to
alloc_buddy_huge_page() to directly create a hugepage from the buddy allocator.
In that case, however, if alloc_buddy_huge_page() succeeds we don&#39;t decrement
h-&gt;resv_huge_pages, which means that successful hugetlb_fault() returns without
releasing the reserve count. As a result, subsequent hugetlb_fault() might fail
despite that there are still free hugepages.

This patch simply adds decrementing code on that code path.

I reproduced this problem when testing v4.3 kernel in the following situation:
- the test machine/VM is a NUMA system,
- hugepage overcommiting is enabled,
- most of hugepages are allocated and there&#39;s only one free hugepage
  which is on node 0 (for example),
- another program, which calls set_mempolicy(MPOL_BIND) to bind itself to
  node 1, tries to allocate a hugepage,
- the allocation should fail but the reserve count is still hold.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Cc: &lt;stable@vger.kernel.org&gt; [3.16+]
---
- the reason why I set stable target to &quot;3.16+&quot; is that this patch can be
  applied easily/automatically on these versions. But this bug seems to be
  old one, so if you are interested in backporting to older kernels,
  please let me know.
---
 mm/hugetlb.c |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - Nov. 20, 2015, 7:57 a.m.</div>
<pre class="content">
<span class="quote">&gt; </span>
<span class="quote">&gt; When dequeue_huge_page_vma() in alloc_huge_page() fails, we fall back to</span>
<span class="quote">&gt; alloc_buddy_huge_page() to directly create a hugepage from the buddy allocator.</span>
<span class="quote">&gt; In that case, however, if alloc_buddy_huge_page() succeeds we don&#39;t decrement</span>
<span class="quote">&gt; h-&gt;resv_huge_pages, which means that successful hugetlb_fault() returns without</span>
<span class="quote">&gt; releasing the reserve count. As a result, subsequent hugetlb_fault() might fail</span>
<span class="quote">&gt; despite that there are still free hugepages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch simply adds decrementing code on that code path.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I reproduced this problem when testing v4.3 kernel in the following situation:</span>
<span class="quote">&gt; - the test machine/VM is a NUMA system,</span>
<span class="quote">&gt; - hugepage overcommiting is enabled,</span>
<span class="quote">&gt; - most of hugepages are allocated and there&#39;s only one free hugepage</span>
<span class="quote">&gt;   which is on node 0 (for example),</span>
<span class="quote">&gt; - another program, which calls set_mempolicy(MPOL_BIND) to bind itself to</span>
<span class="quote">&gt;   node 1, tries to allocate a hugepage,</span>
<span class="quote">&gt; - the allocation should fail but the reserve count is still hold.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Cc: &lt;stable@vger.kernel.org&gt; [3.16+]</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; - the reason why I set stable target to &quot;3.16+&quot; is that this patch can be</span>
<span class="quote">&gt;   applied easily/automatically on these versions. But this bug seems to be</span>
<span class="quote">&gt;   old one, so if you are interested in backporting to older kernels,</span>
<span class="quote">&gt;   please let me know.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c |    5 ++++-</span>
<span class="quote">&gt;  1 files changed, 4 insertions(+), 1 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.3/mm/hugetlb.c v4.3_patched/mm/hugetlb.c</span>
<span class="quote">&gt; index 9cc7734..77c518c 100644</span>
<span class="quote">&gt; --- v4.3/mm/hugetlb.c</span>
<span class="quote">&gt; +++ v4.3_patched/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -1790,7 +1790,10 @@ struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		page = alloc_buddy_huge_page(h, NUMA_NO_NODE);</span>
<span class="quote">&gt;  		if (!page)</span>
<span class="quote">&gt;  			goto out_uncharge_cgroup;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +		if (!avoid_reserve &amp;&amp; vma_has_reserves(vma, gbl_chg)) {</span>
<span class="quote">&gt; +			SetPagePrivate(page);</span>
<span class="quote">&gt; +			h-&gt;resv_huge_pages--;</span>
<span class="quote">&gt; +		}</span>

I am wondering if this patch was prepared against the next tree.
<span class="quote">
&gt;  		spin_lock(&amp;hugetlb_lock);</span>
<span class="quote">&gt;  		list_move(&amp;page-&gt;lru, &amp;h-&gt;hugepage_activelist);</span>
<span class="quote">&gt;  		/* Fall through */</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 1.7.1</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 20, 2015, 9:56 p.m.</div>
<pre class="content">
On 11/19/2015 11:57 PM, Hillf Danton wrote:
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; When dequeue_huge_page_vma() in alloc_huge_page() fails, we fall back to</span>
<span class="quote">&gt;&gt; alloc_buddy_huge_page() to directly create a hugepage from the buddy allocator.</span>
<span class="quote">&gt;&gt; In that case, however, if alloc_buddy_huge_page() succeeds we don&#39;t decrement</span>
<span class="quote">&gt;&gt; h-&gt;resv_huge_pages, which means that successful hugetlb_fault() returns without</span>
<span class="quote">&gt;&gt; releasing the reserve count. As a result, subsequent hugetlb_fault() might fail</span>
<span class="quote">&gt;&gt; despite that there are still free hugepages.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch simply adds decrementing code on that code path.</span>

In general, I agree with the patch.  If we allocate a huge page via the
buddy allocator and that page will be used to satisfy a reservation, then
we need to decrement the reservation count.

As Hillf mentions, this code is not exactly the same in linux-next.
Specifically, there is the new call to take the memory policy of the
vma into account when calling the buddy allocator.  I do not think,
this impacts your proposed change but you may want to test with that
in place.
<span class="quote">
&gt;&gt;</span>
<span class="quote">&gt;&gt; I reproduced this problem when testing v4.3 kernel in the following situation:</span>
<span class="quote">&gt;&gt; - the test machine/VM is a NUMA system,</span>
<span class="quote">&gt;&gt; - hugepage overcommiting is enabled,</span>
<span class="quote">&gt;&gt; - most of hugepages are allocated and there&#39;s only one free hugepage</span>
<span class="quote">&gt;&gt;   which is on node 0 (for example),</span>
<span class="quote">&gt;&gt; - another program, which calls set_mempolicy(MPOL_BIND) to bind itself to</span>
<span class="quote">&gt;&gt;   node 1, tries to allocate a hugepage,</span>

I am curious about this scenario.  When this second program attempts to
allocate the page, I assume it creates a reservation first.  Is this
reservation before or after setting mempolicy?  If the mempolicy was set
first, I would have expected the reservation to allocate a page on
node 1 to satisfy the reservation.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 24, 2015, 5:32 a.m.</div>
<pre class="content">
On Fri, Nov 20, 2015 at 01:56:18PM -0800, Mike Kravetz wrote:
<span class="quote">&gt; On 11/19/2015 11:57 PM, Hillf Danton wrote:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; When dequeue_huge_page_vma() in alloc_huge_page() fails, we fall back to</span>
<span class="quote">&gt; &gt;&gt; alloc_buddy_huge_page() to directly create a hugepage from the buddy allocator.</span>
<span class="quote">&gt; &gt;&gt; In that case, however, if alloc_buddy_huge_page() succeeds we don&#39;t decrement</span>
<span class="quote">&gt; &gt;&gt; h-&gt;resv_huge_pages, which means that successful hugetlb_fault() returns without</span>
<span class="quote">&gt; &gt;&gt; releasing the reserve count. As a result, subsequent hugetlb_fault() might fail</span>
<span class="quote">&gt; &gt;&gt; despite that there are still free hugepages.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; This patch simply adds decrementing code on that code path.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In general, I agree with the patch.  If we allocate a huge page via the</span>
<span class="quote">&gt; buddy allocator and that page will be used to satisfy a reservation, then</span>
<span class="quote">&gt; we need to decrement the reservation count.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; As Hillf mentions, this code is not exactly the same in linux-next.</span>
<span class="quote">&gt; Specifically, there is the new call to take the memory policy of the</span>
<span class="quote">&gt; vma into account when calling the buddy allocator.  I do not think,</span>
<span class="quote">&gt; this impacts your proposed change but you may want to test with that</span>
<span class="quote">&gt; in place.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; I reproduced this problem when testing v4.3 kernel in the following situation:</span>
<span class="quote">&gt; &gt;&gt; - the test machine/VM is a NUMA system,</span>
<span class="quote">&gt; &gt;&gt; - hugepage overcommiting is enabled,</span>
<span class="quote">&gt; &gt;&gt; - most of hugepages are allocated and there&#39;s only one free hugepage</span>
<span class="quote">&gt; &gt;&gt;   which is on node 0 (for example),</span>
<span class="quote">&gt; &gt;&gt; - another program, which calls set_mempolicy(MPOL_BIND) to bind itself to</span>
<span class="quote">&gt; &gt;&gt;   node 1, tries to allocate a hugepage,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am curious about this scenario.  When this second program attempts to</span>
<span class="quote">&gt; allocate the page, I assume it creates a reservation first.  Is this</span>
<span class="quote">&gt; reservation before or after setting mempolicy?  If the mempolicy was set</span>
<span class="quote">&gt; first, I would have expected the reservation to allocate a page on</span>
<span class="quote">&gt; node 1 to satisfy the reservation.</span>

My testing called set_mempolicy() at first then called mmap(), but things
didn&#39;t change if I reordered them, because currently hugetlb reservation is
not NUMA-aware.

Thanks,
Naoya Horiguchi--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Nov. 24, 2015, 6:16 p.m.</div>
<pre class="content">
On 11/23/2015 09:32 PM, Naoya Horiguchi wrote:
<span class="quote">&gt; On Fri, Nov 20, 2015 at 01:56:18PM -0800, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; On 11/19/2015 11:57 PM, Hillf Danton wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; When dequeue_huge_page_vma() in alloc_huge_page() fails, we fall back to</span>
<span class="quote">&gt;&gt;&gt;&gt; alloc_buddy_huge_page() to directly create a hugepage from the buddy allocator.</span>
<span class="quote">&gt;&gt;&gt;&gt; In that case, however, if alloc_buddy_huge_page() succeeds we don&#39;t decrement</span>
<span class="quote">&gt;&gt;&gt;&gt; h-&gt;resv_huge_pages, which means that successful hugetlb_fault() returns without</span>
<span class="quote">&gt;&gt;&gt;&gt; releasing the reserve count. As a result, subsequent hugetlb_fault() might fail</span>
<span class="quote">&gt;&gt;&gt;&gt; despite that there are still free hugepages.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; This patch simply adds decrementing code on that code path.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; In general, I agree with the patch.  If we allocate a huge page via the</span>
<span class="quote">&gt;&gt; buddy allocator and that page will be used to satisfy a reservation, then</span>
<span class="quote">&gt;&gt; we need to decrement the reservation count.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; As Hillf mentions, this code is not exactly the same in linux-next.</span>
<span class="quote">&gt;&gt; Specifically, there is the new call to take the memory policy of the</span>
<span class="quote">&gt;&gt; vma into account when calling the buddy allocator.  I do not think,</span>
<span class="quote">&gt;&gt; this impacts your proposed change but you may want to test with that</span>
<span class="quote">&gt;&gt; in place.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I reproduced this problem when testing v4.3 kernel in the following situation:</span>
<span class="quote">&gt;&gt;&gt;&gt; - the test machine/VM is a NUMA system,</span>
<span class="quote">&gt;&gt;&gt;&gt; - hugepage overcommiting is enabled,</span>
<span class="quote">&gt;&gt;&gt;&gt; - most of hugepages are allocated and there&#39;s only one free hugepage</span>
<span class="quote">&gt;&gt;&gt;&gt;   which is on node 0 (for example),</span>
<span class="quote">&gt;&gt;&gt;&gt; - another program, which calls set_mempolicy(MPOL_BIND) to bind itself to</span>
<span class="quote">&gt;&gt;&gt;&gt;   node 1, tries to allocate a hugepage,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I am curious about this scenario.  When this second program attempts to</span>
<span class="quote">&gt;&gt; allocate the page, I assume it creates a reservation first.  Is this</span>
<span class="quote">&gt;&gt; reservation before or after setting mempolicy?  If the mempolicy was set</span>
<span class="quote">&gt;&gt; first, I would have expected the reservation to allocate a page on</span>
<span class="quote">&gt;&gt; node 1 to satisfy the reservation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; My testing called set_mempolicy() at first then called mmap(), but things</span>
<span class="quote">&gt; didn&#39;t change if I reordered them, because currently hugetlb reservation is</span>
<span class="quote">&gt; not NUMA-aware.</span>

Ah right.  I was looking at gather_surplus_pages() as called by
hugetlb_acct_memory() to account for a new reservation.  In your case,
the global free count is still large enough to satisfy the reservation
so gather_surplus_pages simply increases the global reservation count.

If there were not enough free pages, alloc_buddy_huge_page() would be
called in an attempt to allocate enough free pages.  As is the case in
alloc_huge_page(), the mempolicy of the of the task would be taken into
account (if there is no vma specific policy).  So, the new huge pages to
satisfy the reservation would &#39;hopefully&#39; be allocated on the correct node.

Sorry, I thinking your test might be allocating a new huge page at
reservation time.  But, it is not.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git v4.3/mm/hugetlb.c v4.3_patched/mm/hugetlb.c</span>
<span class="p_header">index 9cc7734..77c518c 100644</span>
<span class="p_header">--- v4.3/mm/hugetlb.c</span>
<span class="p_header">+++ v4.3_patched/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1790,7 +1790,10 @@</span> <span class="p_context"> struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 		page = alloc_buddy_huge_page(h, NUMA_NO_NODE);
 		if (!page)
 			goto out_uncharge_cgroup;
<span class="p_del">-</span>
<span class="p_add">+		if (!avoid_reserve &amp;&amp; vma_has_reserves(vma, gbl_chg)) {</span>
<span class="p_add">+			SetPagePrivate(page);</span>
<span class="p_add">+			h-&gt;resv_huge_pages--;</span>
<span class="p_add">+		}</span>
 		spin_lock(&amp;hugetlb_lock);
 		list_move(&amp;page-&gt;lru, &amp;h-&gt;hugepage_activelist);
 		/* Fall through */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



