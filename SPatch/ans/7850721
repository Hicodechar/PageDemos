
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/6] perf, tools, stat: Abstract stat metrics printing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/6] perf, tools, stat: Abstract stat metrics printing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 15, 2015, 2:04 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1450145059-22547-2-git-send-email-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7850721/mbox/"
   >mbox</a>
|
   <a href="/patch/7850721/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7850721/">/patch/7850721/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 478D19F1C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Dec 2015 02:04:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 9FEA42022A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Dec 2015 02:04:38 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E3B9A2026C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Dec 2015 02:04:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S964785AbbLOCEb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 14 Dec 2015 21:04:31 -0500
Received: from mga11.intel.com ([192.55.52.93]:22345 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933012AbbLOCE0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 14 Dec 2015 21:04:26 -0500
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by fmsmga102.fm.intel.com with ESMTP; 14 Dec 2015 18:04:24 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.20,429,1444719600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;841230221&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.156])
	by orsmga001.jf.intel.com with ESMTP; 14 Dec 2015 18:04:24 -0800
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 77CE430277F; Mon, 14 Dec 2015 18:04:24 -0800 (PST)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@kernel.org
Cc: jolsa@kernel.org, mingo@kernel.org, linux-kernel@vger.kernel.org,
	Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 1/6] perf, tools, stat: Abstract stat metrics printing
Date: Mon, 14 Dec 2015 18:04:14 -0800
Message-Id: &lt;1450145059-22547-2-git-send-email-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1450145059-22547-1-git-send-email-andi@firstfloor.org&gt;
References: &lt;1450145059-22547-1-git-send-email-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - Dec. 15, 2015, 2:04 a.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Abstract the printing of shadow metrics. Instead of every
metric calling fprintf directly and taking care of indentation,
use two call backs: one to print metrics and another to
start a new line.

This will allow adding metrics to CSV mode and also
using them for other purposes.

The computation of padding is now done in the central
callback, instead of every metric doing it manually.
This makes it easier to add new metrics.

v2: Refactor functions, printout now does more. Move
shadow printing. Improve fallback callbacks. Don&#39;t
use void * callback data.
v3: Remove unnecessary hunk. Add typedef for new_line
v4: Remove unnecessary hunk. Don&#39;t print metrics for CSV/interval
mode yet.  Move printout change to separate patch.
v5: Fix bisect bugs. Avoid bogus frontend cycles printing.
Fix indentation in different aggregation modes.
<span class="signed-off-by">Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/builtin-stat.c     |  59 ++++++++++--
 tools/perf/util/stat-shadow.c | 211 +++++++++++++++++++++++-------------------
 tools/perf/util/stat.h        |  15 ++-
 3 files changed, 182 insertions(+), 103 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Dec. 21, 2015, 3:42 p.m.</div>
<pre class="content">
On Mon, Dec 14, 2015 at 06:04:14PM -0800, Andi Kleen wrote:

SNIP
<span class="quote">
&gt; -				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="quote">&gt; +void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="quote">&gt; +				   double avg, int cpu,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	void *ctxp = out-&gt;ctx;</span>
<span class="quote">&gt; +	print_metric_t print_metric = out-&gt;print_metric;</span>
<span class="quote">&gt;  	double total, ratio = 0.0, total2;</span>
<span class="quote">&gt;  	int ctx = evsel_context(evsel);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -307,119 +302,145 @@ void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		if (total) {</span>
<span class="quote">&gt;  			ratio = avg / total;</span>
<span class="quote">&gt; -			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="quote">&gt; +					&quot;insn per cycle&quot;, ratio);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +		out-&gt;new_line(ctxp);</span>
<span class="quote">&gt;  		if (total &amp;&amp; avg) {</span>
<span class="quote">&gt;  			ratio = total / avg;</span>
<span class="quote">&gt; -			fprintf(out, &quot;\n&quot;);</span>

you haven&#39;t address my first comment in here http://marc.info/?l=linux-kernel&amp;m=144662610723134&amp;w=2

also please rebase to latest acme/perf/core
FYI there&#39;s been some stat changes, but your branch cleanly rebased for me

thanks,
jirka
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - Dec. 22, 2015, 1:16 a.m.</div>
<pre class="content">
<span class="quote">&gt; &gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; &gt; +			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
<span class="quote">&gt; &gt;  		}</span>
<span class="quote">&gt; &gt;  		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="quote">&gt; &gt;  		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +		out-&gt;new_line(ctxp);</span>
<span class="quote">&gt; &gt;  		if (total &amp;&amp; avg) {</span>
<span class="quote">&gt; &gt;  			ratio = total / avg;</span>
<span class="quote">&gt; &gt; -			fprintf(out, &quot;\n&quot;);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; you haven&#39;t address my first comment in here http://marc.info/?l=linux-kernel&amp;m=144662610723134&amp;w=2</span>

The new_line is always needed because stalled cycles is always printed.

The reason it is always printed is that metric-only needs to see all the
metrics for its column headers. That&#39;s why there are else cases
everywhere.


-Andi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Dec. 22, 2015, 6:40 a.m.</div>
<pre class="content">
On Tue, Dec 22, 2015 at 02:16:30AM +0100, Andi Kleen wrote:
<span class="quote">&gt; &gt; &gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; &gt; &gt; +			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
<span class="quote">&gt; &gt; &gt;  		}</span>
<span class="quote">&gt; &gt; &gt;  		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="quote">&gt; &gt; &gt;  		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; +		out-&gt;new_line(ctxp);</span>
<span class="quote">&gt; &gt; &gt;  		if (total &amp;&amp; avg) {</span>
<span class="quote">&gt; &gt; &gt;  			ratio = total / avg;</span>
<span class="quote">&gt; &gt; &gt; -			fprintf(out, &quot;\n&quot;);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; you haven&#39;t address my first comment in here http://marc.info/?l=linux-kernel&amp;m=144662610723134&amp;w=2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The new_line is always needed because stalled cycles is always printed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The reason it is always printed is that metric-only needs to see all the</span>
<span class="quote">&gt; metrics for its column headers. That&#39;s why there are else cases</span>
<span class="quote">&gt; everywhere.</span>

please notice extra line below - between instructions and cycles lines

[jolsa@krava perf]$ ./perf stat -e instructions,cycles  kill
kill: not enough arguments

 Performance counter stats for &#39;kill&#39;:

           769,784      instructions              #    0.78  insn per cycle         
                                                                                    
           990,795      cycles                                                      


jirka
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 25a95f4..569db6b 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -507,6 +507,46 @@</span> <span class="p_context"> static void aggr_printout(struct perf_evsel *evsel, int id, int nr)</span>
 	}
 }
 
<span class="p_add">+struct outstate {</span>
<span class="p_add">+	FILE *fh;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define METRIC_LEN  35</span>
<span class="p_add">+</span>
<span class="p_add">+static void new_line_std(void *ctx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+</span>
<span class="p_add">+	fputc(&#39;\n&#39;, os-&gt;fh);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_NONE)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;        &quot;);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_CORE)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;                  &quot;);</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_SOCKET)</span>
<span class="p_add">+		fprintf(os-&gt;fh, &quot;            &quot;);</span>
<span class="p_add">+	fprintf(os-&gt;fh, &quot;                                                 &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_metric_std(void *ctx, const char *color, const char *fmt,</span>
<span class="p_add">+			     const char *unit, double val)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+	FILE *out = os-&gt;fh;</span>
<span class="p_add">+	int n;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unit == NULL || fmt == NULL) {</span>
<span class="p_add">+		fprintf(out, &quot;%-*s&quot;, METRIC_LEN, &quot;&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	n = fprintf(out, &quot; # &quot;);</span>
<span class="p_add">+	if (color)</span>
<span class="p_add">+		n += color_fprintf(out, color, fmt, val);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		n += fprintf(out, fmt, val);</span>
<span class="p_add">+	fprintf(out, &quot; %-*s&quot;, METRIC_LEN - n - 1, unit);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void nsec_printout(int id, int nr, struct perf_evsel *evsel, double avg)
 {
 	FILE *output = stat_config.output;
<span class="p_chunk">@@ -567,20 +607,27 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 
 static void printout(int id, int nr, struct perf_evsel *counter, double uval)
 {
<span class="p_del">-	int cpu = cpu_map__id_to_cpu(id);</span>
<span class="p_add">+	struct outstate os = { .fh = stat_config.output };</span>
<span class="p_add">+	struct perf_stat_output_ctx out;</span>
<span class="p_add">+	print_metric_t pm = print_metric_std;</span>
<span class="p_add">+	void (*nl)(void *);</span>
 
<span class="p_del">-	if (stat_config.aggr_mode == AGGR_GLOBAL)</span>
<span class="p_del">-		cpu = 0;</span>
<span class="p_add">+	nl = new_line_std;</span>
 
 	if (nsec_counter(counter))
 		nsec_printout(id, nr, counter, uval);
 	else
 		abs_printout(id, nr, counter, uval);
 
<span class="p_add">+	out.print_metric = pm;</span>
<span class="p_add">+	out.new_line = nl;</span>
<span class="p_add">+	out.ctx = &amp;os;</span>
<span class="p_add">+</span>
 	if (!csv_output &amp;&amp; !stat_config.interval)
<span class="p_del">-		perf_stat__print_shadow_stats(stat_config.output, counter,</span>
<span class="p_del">-					      uval, cpu,</span>
<span class="p_del">-					      stat_config.aggr_mode);</span>
<span class="p_add">+		perf_stat__print_shadow_stats(counter, uval,</span>
<span class="p_add">+				stat_config.aggr_mode == AGGR_GLOBAL ? 0 :</span>
<span class="p_add">+				cpu_map__id_to_cpu(id),</span>
<span class="p_add">+				&amp;out);</span>
 }
 
 static void print_aggr(char *prefix)
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 6ac0314..4d8f185 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -137,9 +137,10 @@</span> <span class="p_context"> static const char *get_ratio_color(enum grc_type type, double ratio)</span>
 	return color;
 }
 
<span class="p_del">-static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_frontend(int cpu,</span>
 					  struct perf_evsel *evsel
<span class="p_del">-					  __maybe_unused, double avg)</span>
<span class="p_add">+					  __maybe_unused, double avg,</span>
<span class="p_add">+					  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -152,14 +153,17 @@</span> <span class="p_context"> static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="p_add">+	if (ratio)</span>
<span class="p_add">+		out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;frontend cycles idle&quot;,</span>
<span class="p_add">+				  ratio);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		out-&gt;print_metric(out-&gt;ctx, NULL, NULL, &quot;frontend cycles idle&quot;, 0);</span>
 }
 
<span class="p_del">-static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_backend(int cpu,</span>
 					 struct perf_evsel *evsel
<span class="p_del">-					 __maybe_unused, double avg)</span>
<span class="p_add">+					 __maybe_unused, double avg,</span>
<span class="p_add">+					 struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -172,14 +176,13 @@</span> <span class="p_context"> static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%6.2f%%&quot;, &quot;backend cycles idle&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_branch_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_branch_misses(int cpu,</span>
 				struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				double avg)</span>
<span class="p_add">+				double avg,</span>
<span class="p_add">+				struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -192,14 +195,13 @@</span> <span class="p_context"> static void print_branch_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all branches&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_dcache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -212,14 +214,13 @@</span> <span class="p_context"> static void print_l1_dcache_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-dcache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_icache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -231,15 +232,13 @@</span> <span class="p_context"> static void print_l1_icache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-icache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_dtlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -251,15 +250,13 @@</span> <span class="p_context"> static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all dTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_itlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -271,15 +268,13 @@</span> <span class="p_context"> static void print_itlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all iTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_ll_cache_misses(int cpu,</span>
 				  struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				  double avg)</span>
<span class="p_add">+				  double avg,</span>
<span class="p_add">+				  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -291,15 +286,15 @@</span> <span class="p_context"> static void print_ll_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
<span class="p_add">+	void *ctxp = out-&gt;ctx;</span>
<span class="p_add">+	print_metric_t print_metric = out-&gt;print_metric;</span>
 	double total, ratio = 0.0, total2;
 	int ctx = evsel_context(evsel);
 
<span class="p_chunk">@@ -307,119 +302,145 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;insn per cycle&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
 		}
 		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);
 		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));
 
<span class="p_add">+		out-&gt;new_line(ctxp);</span>
 		if (total &amp;&amp; avg) {
 			ratio = total / avg;
<span class="p_del">-			fprintf(out, &quot;\n&quot;);</span>
<span class="p_del">-			if (aggr == AGGR_NONE)</span>
<span class="p_del">-				fprintf(out, &quot;        &quot;);</span>
<span class="p_del">-			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;stalled cycles per insn&quot;,</span>
<span class="p_add">+					ratio);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL,</span>
<span class="p_add">+				     &quot;stalled cycles per insn&quot;, 0);</span>
 		}
<span class="p_del">-</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES)) {</span>
<span class="p_add">+		if (runtime_branches_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_branch_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all branches&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_dcache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_dcache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-dcache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_icache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_icache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-icache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_dtlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_dtlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all dTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_itlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_itlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all iTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_ll_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_ll_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all LL-cache hits&quot;, 0);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES)) {</span>
 		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);
 
 		if (total)
 			ratio = avg * 100 / total;
 
<span class="p_del">-		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_del">-</span>
<span class="p_add">+		if (runtime_cacherefs_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f %%&quot;,</span>
<span class="p_add">+				     &quot;of all cache refs&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all cache refs&quot;, 0);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {
<span class="p_del">-		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_frontend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {
<span class="p_del">-		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_backend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;GHz&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;Ghz&quot;, 0);</span>
 		}
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="p_del">-				100.0 * (avg / total));</span>
<span class="p_add">+			print_metric(ctxp, NULL,</span>
<span class="p_add">+					&quot;%7.2f%%&quot;, &quot;transactional cycles&quot;,</span>
<span class="p_add">+					100.0 * (avg / total));</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;transactional cycles&quot;,</span>
<span class="p_add">+				     0);</span>
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 		if (total2 &lt; avg)
 			total2 = avg;
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f%%&quot;, &quot;aborted cycles&quot;,</span>
 				100.0 * ((total2-avg) / total));
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;aborted cycles&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		if (runtime_cycles_in_tx_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.0f&quot;,</span>
<span class="p_add">+				     &quot;cycles / transaction&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;cycles / transaction&quot;,</span>
<span class="p_add">+				     0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, ELISION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.0f&quot;, &quot;cycles / elision&quot;, ratio);</span>
 	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK)) {
 		if ((ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0)
<span class="p_del">-			fprintf(out, &quot; # %8.3f CPUs utilized          &quot;, avg / ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;CPUs utilized&quot;,</span>
<span class="p_add">+				     avg / ratio);</span>
 		else
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
<span class="p_add">+		char unit_buf[10];</span>
 
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
<span class="p_chunk">@@ -429,9 +450,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 			ratio *= 1000;
 			unit = &#39;K&#39;;
 		}
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_add">+		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);</span>
 	} else {
<span class="p_del">-		fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+		print_metric(ctxp, NULL, NULL, NULL, 0);</span>
 	}
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index da1d11c..f51d94e 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -68,11 +68,22 @@</span> <span class="p_context"> void perf_stat_evsel_id_init(struct perf_evsel *evsel);</span>
 
 extern struct stats walltime_nsecs_stats;
 
<span class="p_add">+typedef void (*print_metric_t)(void *ctx, const char *color, const char *unit,</span>
<span class="p_add">+			       const char *fmt, double val);</span>
<span class="p_add">+typedef void (*new_line_t )(void *ctx);</span>
<span class="p_add">+</span>
 void perf_stat__reset_shadow_stats(void);
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,
 				    int cpu);
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr);</span>
<span class="p_add">+struct perf_stat_output_ctx {</span>
<span class="p_add">+	void *ctx;</span>
<span class="p_add">+	print_metric_t print_metric;</span>
<span class="p_add">+	new_line_t new_line;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out);</span>
 
 void perf_evsel__reset_stat_priv(struct perf_evsel *evsel);
 int perf_evsel__alloc_stat_priv(struct perf_evsel *evsel);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



