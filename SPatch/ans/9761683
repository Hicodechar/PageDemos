
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] EFI fixes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] EFI fixes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 2, 2017, 6:46 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170602064648.kfdqqbfjggyqlfx6@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9761683/mbox/"
   >mbox</a>
|
   <a href="/patch/9761683/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9761683/">/patch/9761683/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	54721602BF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  2 Jun 2017 06:47:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 40CF5284AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  2 Jun 2017 06:47:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 33D452855C; Fri,  2 Jun 2017 06:47:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.3 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI, RCVD_IN_SORBS_SPAM,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 07C0D284AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  2 Jun 2017 06:47:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751182AbdFBGqy (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 2 Jun 2017 02:46:54 -0400
Received: from mail-wm0-f45.google.com ([74.125.82.45]:37754 &quot;EHLO
	mail-wm0-f45.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750772AbdFBGqw (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 2 Jun 2017 02:46:52 -0400
Received: by mail-wm0-f45.google.com with SMTP id d127so14823620wmf.0;
	Thu, 01 Jun 2017 23:46:51 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=zz+uJn/gFUJXPYJHKYP5U8tdPUtQfCjWDBq69xdUwVQ=;
	b=Wrwq6sF8ukROFqAXE+bnTbPvvtUFbPgAfTaTIIo3tt3BahHzuNiVuB599//FVj1qHA
	9sW/A0kmefzOKEx69/Rg4G0ikcymmoNR9fWkQE5p8+gLa1WxUTeUOC7Gv8B3mPGPdtgf
	VWeY6f/XnJiykPKWT6d9Bt5F36uOhgaGsYHJyi4CaY5u/XgPjFyXOOBS/MxFaibtNz1v
	RYxQBzKqHiud/1yXKl7U+70YZghXf4l0QXhh5cJXBG01y/S3fZLGoE63kHyUNgEU2MnX
	bVnnJajVQG357kKuhCaf0+WAhq4VjaYvM0FEkpunZeawZpAyAkeZB8GV5g2j7vZQlR/Q
	SB7w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=zz+uJn/gFUJXPYJHKYP5U8tdPUtQfCjWDBq69xdUwVQ=;
	b=MSVX6aVE84VqYmUcvgY5aP7XVSfnnf7uZBdf07yKMMY75NP02Mn4f8taKcmdQl+v6S
	11h3Kh/f8PpBBOADlot5NcqXkTkpjU2FdWsuJkhs6giulP1oeezGQpKbJog7BjVDGSCR
	0ts+d5Fqb1N0c8+It0RKRg8zOTkN+kALO0tjHkb/IRUzUW/dSardMCMSn5xWeBgqswvW
	8nnEKzn/pQbEXPnRMbgv5JsdIop9cxQFTKRm3ErD9QD5qYm1B0usZujkEDQB02gB/67n
	StYUp1aZ5OHXs1iN5H3XhWavQi5cF/U0tV0sqB0BzQpQS/PgtH6hbtp0KvUZZ0MGivwj
	TBzg==
X-Gm-Message-State: AODbwcBlx/KNamTa+iTBiI7QHxbUmfrGdnTbFHrs1nhf8Ai+YozsBMuO
	Lae7aKjPx4NSXA==
X-Received: by 10.223.156.26 with SMTP id f26mr3691630wrc.187.1496386010844; 
	Thu, 01 Jun 2017 23:46:50 -0700 (PDT)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	25sm21186133wrz.8.2017.06.01.23.46.49
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Thu, 01 Jun 2017 23:46:50 -0700 (PDT)
Date: Fri, 2 Jun 2017 08:46:48 +0200
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;, linux-efi@vger.kernel.org
Subject: [GIT PULL] EFI fixes
Message-ID: &lt;20170602064648.kfdqqbfjggyqlfx6@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: NeoMutt/20170113 (1.7.2)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - June 2, 2017, 6:46 a.m.</div>
<pre class="content">
Linus,

Please pull the latest efi-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git efi-urgent-for-linus

   # HEAD: 7425826f4f7ac60f2538b06a7f0a5d1006405159 efi/bgrt: Skip efi_bgrt_init() in case of non-EFI boot

Misc fixes:

 - three boot crash fixes for uncommon configurations,
 - silence a boot warning under virtualization,
 - plus a GCC 7 related (harmless) build warning fix.

 Thanks,

	Ingo

------------------&gt;
Arnd Bergmann (1):
      efi: Remove duplicate &#39;const&#39; specifiers

Baoquan He (1):
      x86/efi: Correct EFI identity mapping under &#39;efi=old_map&#39; when KASLR is enabled

Dave Young (1):
      efi/bgrt: Skip efi_bgrt_init() in case of non-EFI boot

Juergen Gross (1):
      efi: Don&#39;t issue error message when booted under Xen

Sai Praneeth (1):
      x86/efi: Disable runtime services on kexec kernel if booted with efi=old_map


 arch/x86/platform/efi/efi.c               |  6 ++-
 arch/x86/platform/efi/efi_64.c            | 79 +++++++++++++++++++++++++++----
 arch/x86/platform/efi/quirks.c            |  3 ++
 drivers/firmware/efi/efi-bgrt.c           |  3 ++
 drivers/firmware/efi/libstub/secureboot.c |  4 +-
 5 files changed, 83 insertions(+), 12 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c</span>
<span class="p_header">index 7e76a4d8304b..43b96f5f78ba 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi.c</span>
<span class="p_chunk">@@ -828,9 +828,11 @@</span> <span class="p_context"> static void __init kexec_enter_virtual_mode(void)</span>
 
 	/*
 	 * We don&#39;t do virtual mode, since we don&#39;t do runtime services, on
<span class="p_del">-	 * non-native EFI</span>
<span class="p_add">+	 * non-native EFI. With efi=old_map, we don&#39;t do runtime services in</span>
<span class="p_add">+	 * kexec kernel because in the initial boot something else might</span>
<span class="p_add">+	 * have been mapped at these virtual addresses.</span>
 	 */
<span class="p_del">-	if (!efi_is_native()) {</span>
<span class="p_add">+	if (!efi_is_native() || efi_enabled(EFI_OLD_MEMMAP)) {</span>
 		efi_memmap_unmap();
 		clear_bit(EFI_RUNTIME_SERVICES, &amp;efi.flags);
 		return;
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index c488625c9712..eb8dff15a7f6 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -71,11 +71,13 @@</span> <span class="p_context"> static void __init early_code_mapping_set_exec(int executable)</span>
 
 pgd_t * __init efi_call_phys_prolog(void)
 {
<span class="p_del">-	unsigned long vaddress;</span>
<span class="p_del">-	pgd_t *save_pgd;</span>
<span class="p_add">+	unsigned long vaddr, addr_pgd, addr_p4d, addr_pud;</span>
<span class="p_add">+	pgd_t *save_pgd, *pgd_k, *pgd_efi;</span>
<span class="p_add">+	p4d_t *p4d, *p4d_k, *p4d_efi;</span>
<span class="p_add">+	pud_t *pud;</span>
 
 	int pgd;
<span class="p_del">-	int n_pgds;</span>
<span class="p_add">+	int n_pgds, i, j;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		save_pgd = (pgd_t *)read_cr3();
<span class="p_chunk">@@ -88,10 +90,49 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);
 	save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Build 1:1 identity mapping for efi=old_map usage. Note that</span>
<span class="p_add">+	 * PAGE_OFFSET is PGDIR_SIZE aligned when KASLR is disabled, while</span>
<span class="p_add">+	 * it is PUD_SIZE ALIGNED with KASLR enabled. So for a given physical</span>
<span class="p_add">+	 * address X, the pud_index(X) != pud_index(__va(X)), we can only copy</span>
<span class="p_add">+	 * PUD entry of __va(X) to fill in pud entry of X to build 1:1 mapping.</span>
<span class="p_add">+	 * This means here we can only reuse the PMD tables of the direct mapping.</span>
<span class="p_add">+	 */</span>
 	for (pgd = 0; pgd &lt; n_pgds; pgd++) {
<span class="p_del">-		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="p_add">+		addr_pgd = (unsigned long)(pgd * PGDIR_SIZE);</span>
<span class="p_add">+		vaddr = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="p_add">+		pgd_efi = pgd_offset_k(addr_pgd);</span>
<span class="p_add">+		save_pgd[pgd] = *pgd_efi;</span>
<span class="p_add">+</span>
<span class="p_add">+		p4d = p4d_alloc(&amp;init_mm, pgd_efi, addr_pgd);</span>
<span class="p_add">+		if (!p4d) {</span>
<span class="p_add">+			pr_err(&quot;Failed to allocate p4d table!\n&quot;);</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; PTRS_PER_P4D; i++) {</span>
<span class="p_add">+			addr_p4d = addr_pgd + i * P4D_SIZE;</span>
<span class="p_add">+			p4d_efi = p4d + p4d_index(addr_p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+			pud = pud_alloc(&amp;init_mm, p4d_efi, addr_p4d);</span>
<span class="p_add">+			if (!pud) {</span>
<span class="p_add">+				pr_err(&quot;Failed to allocate pud table!\n&quot;);</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			for (j = 0; j &lt; PTRS_PER_PUD; j++) {</span>
<span class="p_add">+				addr_pud = addr_p4d + j * PUD_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+				if (addr_pud &gt; (max_pfn &lt;&lt; PAGE_SHIFT))</span>
<span class="p_add">+					break;</span>
<span class="p_add">+</span>
<span class="p_add">+				vaddr = (unsigned long)__va(addr_pud);</span>
<span class="p_add">+</span>
<span class="p_add">+				pgd_k = pgd_offset_k(vaddr);</span>
<span class="p_add">+				p4d_k = p4d_offset(pgd_k, vaddr);</span>
<span class="p_add">+				pud[j] = *pud_offset(p4d_k, vaddr);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
 	}
 out:
 	__flush_tlb_all();
<span class="p_chunk">@@ -104,8 +145,11 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	/*
 	 * After the lock is released, the original page table is restored.
 	 */
<span class="p_del">-	int pgd_idx;</span>
<span class="p_add">+	int pgd_idx, i;</span>
 	int nr_pgds;
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		write_cr3((unsigned long)save_pgd);
<span class="p_chunk">@@ -115,9 +159,28 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 
 	nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);
 
<span class="p_del">-	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)</span>
<span class="p_add">+	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++) {</span>
<span class="p_add">+		pgd = pgd_offset_k(pgd_idx * PGDIR_SIZE);</span>
 		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);
 
<span class="p_add">+		if (!(pgd_val(*pgd) &amp; _PAGE_PRESENT))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; PTRS_PER_P4D; i++) {</span>
<span class="p_add">+			p4d = p4d_offset(pgd,</span>
<span class="p_add">+					 pgd_idx * PGDIR_SIZE + i * P4D_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!(p4d_val(*p4d) &amp; _PAGE_PRESENT))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			pud = (pud_t *)p4d_page_vaddr(*p4d);</span>
<span class="p_add">+			pud_free(&amp;init_mm, pud);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		p4d = (p4d_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		p4d_free(&amp;init_mm, p4d);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	kfree(save_pgd);
 
 	__flush_tlb_all();
<span class="p_header">diff --git a/arch/x86/platform/efi/quirks.c b/arch/x86/platform/efi/quirks.c</span>
<span class="p_header">index 26615991d69c..e0cf95a83f3f 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/quirks.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/quirks.c</span>
<span class="p_chunk">@@ -360,6 +360,9 @@</span> <span class="p_context"> void __init efi_free_boot_services(void)</span>
 		free_bootmem_late(start, size);
 	}
 
<span class="p_add">+	if (!num_entries)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	new_size = efi.memmap.desc_size * num_entries;
 	new_phys = efi_memmap_alloc(num_entries);
 	if (!new_phys) {
<span class="p_header">diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c</span>
<span class="p_header">index 04ca8764f0c0..8bf27323f7a3 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/efi-bgrt.c</span>
<span class="p_header">+++ b/drivers/firmware/efi/efi-bgrt.c</span>
<span class="p_chunk">@@ -36,6 +36,9 @@</span> <span class="p_context"> void __init efi_bgrt_init(struct acpi_table_header *table)</span>
 	if (acpi_disabled)
 		return;
 
<span class="p_add">+	if (!efi_enabled(EFI_BOOT))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
 	if (table-&gt;length &lt; sizeof(bgrt_tab)) {
 		pr_notice(&quot;Ignoring BGRT: invalid length %u (expected %zu)\n&quot;,
 		       table-&gt;length, sizeof(bgrt_tab));
<span class="p_header">diff --git a/drivers/firmware/efi/libstub/secureboot.c b/drivers/firmware/efi/libstub/secureboot.c</span>
<span class="p_header">index 8c34d50a4d80..959777ec8a77 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/libstub/secureboot.c</span>
<span class="p_header">+++ b/drivers/firmware/efi/libstub/secureboot.c</span>
<span class="p_chunk">@@ -16,10 +16,10 @@</span> <span class="p_context"></span>
 
 /* BIOS variables */
 static const efi_guid_t efi_variable_guid = EFI_GLOBAL_VARIABLE_GUID;
<span class="p_del">-static const efi_char16_t const efi_SecureBoot_name[] = {</span>
<span class="p_add">+static const efi_char16_t efi_SecureBoot_name[] = {</span>
 	&#39;S&#39;, &#39;e&#39;, &#39;c&#39;, &#39;u&#39;, &#39;r&#39;, &#39;e&#39;, &#39;B&#39;, &#39;o&#39;, &#39;o&#39;, &#39;t&#39;, 0
 };
<span class="p_del">-static const efi_char16_t const efi_SetupMode_name[] = {</span>
<span class="p_add">+static const efi_char16_t efi_SetupMode_name[] = {</span>
 	&#39;S&#39;, &#39;e&#39;, &#39;t&#39;, &#39;u&#39;, &#39;p&#39;, &#39;M&#39;, &#39;o&#39;, &#39;d&#39;, &#39;e&#39;, 0
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



